{"sha": "4768f5e7177159b894d65a50b1e4492cb4048ac3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NjhmNWU3MTc3MTU5Yjg5NGQ2NWE1MGIxZTQ0OTJjYjQwNDhhYzM=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-08-22T15:43:09Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-08-22T19:58:29Z"}, "message": "Improve/fix type bound lowering", "tree": {"sha": "de5d4388124443eb51847a390f259acd44ef1a65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de5d4388124443eb51847a390f259acd44ef1a65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4768f5e7177159b894d65a50b1e4492cb4048ac3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4768f5e7177159b894d65a50b1e4492cb4048ac3", "html_url": "https://github.com/rust-lang/rust/commit/4768f5e7177159b894d65a50b1e4492cb4048ac3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4768f5e7177159b894d65a50b1e4492cb4048ac3/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1a40042e8f595af0486cf1cc70b63be1ff302b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1a40042e8f595af0486cf1cc70b63be1ff302b3", "html_url": "https://github.com/rust-lang/rust/commit/b1a40042e8f595af0486cf1cc70b63be1ff302b3"}], "stats": {"total": 94, "additions": 64, "deletions": 30}, "files": [{"sha": "c5818b738f0c41e7efb2eb99ef3bd08c84eb2176", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4768f5e7177159b894d65a50b1e4492cb4048ac3/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4768f5e7177159b894d65a50b1e4492cb4048ac3/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=4768f5e7177159b894d65a50b1e4492cb4048ac3", "patch": "@@ -3415,6 +3415,39 @@ fn test(x: Trait, y: &Trait) -> u64 {\n     );\n }\n \n+#[test]\n+fn weird_bounds() {\n+    assert_snapshot_matches!(\n+        infer(r#\"\n+trait Trait {}\n+fn test() {\n+    let a: impl Trait + 'lifetime = foo;\n+    let b: impl 'lifetime = foo;\n+    let b: impl (Trait) = foo;\n+    let b: impl ('lifetime) = foo;\n+    let d: impl ?Sized = foo;\n+    let e: impl Trait + ?Sized = foo;\n+}\n+\"#),\n+        @r###\"\n+   \u22ee\n+   \u22ee[26; 237) '{     ...foo; }': ()\n+   \u22ee[36; 37) 'a': impl Trait + {error}\n+   \u22ee[64; 67) 'foo': impl Trait + {error}\n+   \u22ee[77; 78) 'b': impl {error}\n+   \u22ee[97; 100) 'foo': impl {error}\n+   \u22ee[110; 111) 'b': impl Trait\n+   \u22ee[128; 131) 'foo': impl Trait\n+   \u22ee[141; 142) 'b': impl {error}\n+   \u22ee[163; 166) 'foo': impl {error}\n+   \u22ee[176; 177) 'd': impl {error}\n+   \u22ee[193; 196) 'foo': impl {error}\n+   \u22ee[206; 207) 'e': impl Trait + {error}\n+   \u22ee[231; 234) 'foo': impl Trait + {error}\n+    \"###\n+    );\n+}\n+\n fn type_at_pos(db: &MockDatabase, pos: FilePosition) -> String {\n     let file = db.parse(pos.file_id).ok().unwrap();\n     let expr = algo::find_node_at_offset::<ast::Expr>(file.syntax(), pos.offset).unwrap();"}, {"sha": "fa91bfb22f06764c8b48895ac59748ca94742e27", "filename": "crates/ra_hir/src/type_ref.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4768f5e7177159b894d65a50b1e4492cb4048ac3/crates%2Fra_hir%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4768f5e7177159b894d65a50b1e4492cb4048ac3/crates%2Fra_hir%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftype_ref.rs?ref=4768f5e7177159b894d65a50b1e4492cb4048ac3", "patch": "@@ -136,7 +136,7 @@ pub(crate) fn type_bounds_from_ast(type_bounds_opt: Option<ast::TypeBoundList>)\n impl TypeBound {\n     pub(crate) fn from_ast(node: ast::TypeBound) -> Self {\n         match node.kind() {\n-            Some(ast::TypeBoundKind::PathType(path_type)) => {\n+            ast::TypeBoundKind::PathType(path_type) => {\n                 let path = match path_type.path() {\n                     Some(p) => p,\n                     None => return TypeBound::Error,\n@@ -147,9 +147,7 @@ impl TypeBound {\n                 };\n                 TypeBound::Path(path)\n             }\n-            Some(ast::TypeBoundKind::ForType(_)) | Some(ast::TypeBoundKind::Lifetime(_)) | None => {\n-                TypeBound::Error\n-            }\n+            ast::TypeBoundKind::ForType(_) | ast::TypeBoundKind::Lifetime(_) => TypeBound::Error,\n         }\n     }\n }"}, {"sha": "e0ea3e5ab1e2263dc224d6558df92d3f96de0531", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 29, "deletions": 26, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/4768f5e7177159b894d65a50b1e4492cb4048ac3/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4768f5e7177159b894d65a50b1e4492cb4048ac3/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=4768f5e7177159b894d65a50b1e4492cb4048ac3", "patch": "@@ -382,7 +382,36 @@ impl ast::WherePred {\n     }\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n+pub enum TypeBoundKind {\n+    /// Trait\n+    PathType(ast::PathType),\n+    /// for<'a> ...\n+    ForType(ast::ForType),\n+    /// 'a\n+    Lifetime(ast::SyntaxToken),\n+}\n+\n impl ast::TypeBound {\n+    pub fn kind(&self) -> TypeBoundKind {\n+        if let Some(path_type) = children(self).next() {\n+            TypeBoundKind::PathType(path_type)\n+        } else if let Some(for_type) = children(self).next() {\n+            TypeBoundKind::ForType(for_type)\n+        } else if let Some(lifetime) = self.lifetime() {\n+            TypeBoundKind::Lifetime(lifetime)\n+        } else {\n+            unreachable!()\n+        }\n+    }\n+\n+    fn lifetime(&self) -> Option<SyntaxToken> {\n+        self.syntax()\n+            .children_with_tokens()\n+            .filter_map(|it| it.into_token())\n+            .find(|it| it.kind() == LIFETIME)\n+    }\n+\n     pub fn question_mark_token(&self) -> Option<SyntaxToken> {\n         self.syntax()\n             .children_with_tokens()\n@@ -399,29 +428,3 @@ impl ast::TraitDef {\n         self.syntax().children_with_tokens().any(|t| t.kind() == T![auto])\n     }\n }\n-\n-#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n-pub enum TypeBoundKind {\n-    /// Trait\n-    PathType(ast::PathType),\n-    /// for<'a> ...\n-    ForType(ast::ForType),\n-    /// 'a\n-    Lifetime(ast::SyntaxToken),\n-}\n-\n-impl ast::TypeBound {\n-    pub fn kind(&self) -> Option<TypeBoundKind> {\n-        let child = self.syntax.first_child_or_token()?;\n-        match child.kind() {\n-            PATH_TYPE => Some(TypeBoundKind::PathType(\n-                ast::PathType::cast(child.into_node().unwrap()).unwrap(),\n-            )),\n-            FOR_TYPE => Some(TypeBoundKind::ForType(\n-                ast::ForType::cast(child.into_node().unwrap()).unwrap(),\n-            )),\n-            LIFETIME => Some(TypeBoundKind::Lifetime(child.into_token().unwrap())),\n-            _ => unreachable!(),\n-        }\n-    }\n-}"}]}