{"sha": "2bdb0b6d40c49d375cc3373c2041d8c253253cfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZGIwYjZkNDBjNDlkMzc1Y2MzMzczYzIwNDFkOGMyNTMyNTNjZmM=", "commit": {"author": {"name": "Elly Jones", "email": "elly@leptoquark.net", "date": "2011-12-21T02:52:50Z"}, "committer": {"name": "Elly Jones", "email": "elly@leptoquark.net", "date": "2011-12-21T02:52:50Z"}, "message": "cargo: syntax fixes", "tree": {"sha": "50b29c314bb493a9b0a2ff93550eba18556db269", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50b29c314bb493a9b0a2ff93550eba18556db269"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bdb0b6d40c49d375cc3373c2041d8c253253cfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bdb0b6d40c49d375cc3373c2041d8c253253cfc", "html_url": "https://github.com/rust-lang/rust/commit/2bdb0b6d40c49d375cc3373c2041d8c253253cfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bdb0b6d40c49d375cc3373c2041d8c253253cfc/comments", "author": null, "committer": null, "parents": [{"sha": "9834321615aea57ab45bbb633ec75b3b39fa2aa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9834321615aea57ab45bbb633ec75b3b39fa2aa3", "html_url": "https://github.com/rust-lang/rust/commit/9834321615aea57ab45bbb633ec75b3b39fa2aa3"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "98c876e49865391329fdb0844cd8bf8a5b6be59a", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2bdb0b6d40c49d375cc3373c2041d8c253253cfc/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bdb0b6d40c49d375cc3373c2041d8c253253cfc/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=2bdb0b6d40c49d375cc3373c2041d8c253253cfc", "patch": "@@ -559,7 +559,8 @@ fn sync_one(c: cargo, name: str, src: source) {\n     }\n     alt src.sig {\n         some(u) {\n-            let p = run::program_output(\"curl\", [\"-f\", \"-s\", \"-o\", sigfile, u]);\n+            let p = run::program_output(\"curl\", [\"-f\", \"-s\", \"-o\", sigfile,\n+                                                 u]);\n             if p.status != 0 {\n                 warn(#fmt[\"fetch for source %s (sig %s) failed\", name, u]);\n             }\n@@ -568,7 +569,8 @@ fn sync_one(c: cargo, name: str, src: source) {\n     }\n     alt src.key {\n         some(u) {\n-            let p = run::program_output(\"curl\",  [\"-f\", \"-s\", \"-o\", keyfile, u]);\n+            let p = run::program_output(\"curl\",  [\"-f\", \"-s\", \"-o\", keyfile,\n+                                                  u]);\n             if p.status != 0 {\n                 warn(#fmt[\"fetch for source %s (key %s) failed\", name, u]);\n             }\n@@ -580,7 +582,8 @@ fn sync_one(c: cargo, name: str, src: source) {\n         (some(_), some(_), some(f)) {\n             let r = pgp::verify(c.root, pkgfile, sigfile, f);\n             if !r {\n-                warn(#fmt[\"signature verification failed for source %s\", name]);\n+                warn(#fmt[\"signature verification failed for source %s\",\n+                          name]);\n                 ret;\n             } else {\n                 info(#fmt[\"signature ok for source %s\", name]);\n@@ -603,7 +606,7 @@ fn cmd_sync(c: cargo, argv: [str]) {\n     }\n }\n \n-fn cmd_init(c: cargo, argv: [str]) {\n+fn cmd_init(c: cargo) {\n     let srcurl = \"http://www.rust-lang.org/cargo/sources.json\";\n     let sigurl = \"http://www.rust-lang.org/cargo/sources.json.sig\";\n \n@@ -667,7 +670,7 @@ fn cmd_search(c: cargo, argv: [str]) {\n \n fn cmd_usage() {\n     print(\"Usage: cargo <verb> [args...]\");\n-    print(\"  init                                 Fetch default sources.json\");\n+    print(\"  init                                 Fetch default sources\");\n     print(\"  install [source/]package-name        Install by name\");\n     print(\"  install uuid:[source/]package-uuid   Install by uuid\");\n     print(\"  list [source]                        List packages\");\n@@ -683,7 +686,7 @@ fn main(argv: [str]) {\n     }\n     let c = configure();\n     alt argv[1] {\n-        \"init\" { cmd_init(c, argv); }\n+        \"init\" { cmd_init(c); }\n         \"install\" { cmd_install(c, argv); }\n         \"list\" { cmd_list(c, argv); }\n         \"search\" { cmd_search(c, argv); }"}, {"sha": "928ff88b58d094d76dd535a93ecdc8e8972711bd", "filename": "src/cargo/pgp.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2bdb0b6d40c49d375cc3373c2041d8c253253cfc/src%2Fcargo%2Fpgp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bdb0b6d40c49d375cc3373c2041d8c253253cfc/src%2Fcargo%2Fpgp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fpgp.rs?ref=2bdb0b6d40c49d375cc3373c2041d8c253253cfc", "patch": "@@ -91,7 +91,8 @@ fn add(root: str, key: str) {\n \n fn verify(root: str, data: str, sig: str, keyfp: str) -> bool {\n     let path = fs::connect(root, \"gpg\");\n-    let p = gpg([\"--homedir\", path, \"--with-fingerprint\", \"--verify\", sig, data]);\n+    let p = gpg([\"--homedir\", path, \"--with-fingerprint\", \"--verify\", sig,\n+                 data]);\n     let res = \"Primary key fingerprint: \" + keyfp;\n     for line in str::split(p.err, '\\n' as u8) {\n         if line == res {"}]}