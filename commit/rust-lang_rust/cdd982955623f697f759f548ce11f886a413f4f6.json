{"sha": "cdd982955623f697f759f548ce11f886a413f4f6", "node_id": "C_kwDOAAsO6NoAKGNkZDk4Mjk1NTYyM2Y2OTdmNzU5ZjU0OGNlMTFmODg2YTQxM2Y0ZjY", "commit": {"author": {"name": "marc0246", "email": "40955683+marc0246@users.noreply.github.com", "date": "2023-04-12T17:21:40Z"}, "committer": {"name": "marc0246", "email": "40955683+marc0246@users.noreply.github.com", "date": "2023-04-12T17:21:40Z"}, "message": "Fix btree `CursorMut::insert_after` check", "tree": {"sha": "c3c66d0eccd8e3f3e1ff46aef4817cfd81653241", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3c66d0eccd8e3f3e1ff46aef4817cfd81653241"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdd982955623f697f759f548ce11f886a413f4f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJfBAABCABJFiEEW438jQio9CWtboLOaJy4jBCQxoQFAmQ26KQrHDQwOTU1Njgz\nK21hcmMwMjQ2QHVzZXJzLm5vcmVwbHkuZ2l0aHViLmNvbQAKCRBonLiMEJDGhNJ2\nD/9kCpuMQpVpOdzGCISNyyQld2LFN5DaBYKK2E/yL9fyMucboYH4rCoIU31G6b7b\nOHpSs9iS22+2hUcgUxjnBLk60PRjNexwCmhqUGK1j3LYc8XRTkZzGZYvmTY6Q7cB\nonWOR2yNqrRm60IgupFy2BOYr6vlqEOppun4QUZtx9x+40v2T4F69Kb051GJLVlO\nbIiGbAPOlTCCEeNHP4vc8zNrFEIJJXBeEYL7sgVb6yg8wRg/q4q+MfKt+xeiabCV\nRMGw9za267jxliN7E9Ufn1QQlpz54hwbeP1uexdDcao20+FH/Rlkvd8FvLXjOpyy\noVVeoboGjVb8Q9i6UKzB8orL9FXl5ark4m4RPPXHyYGqjKOwVeV8yPIRYU/cLfcg\nKHxjW4QuZfbAE/nGlFrye2Frw1EW0h1O9ef6wSzoCKkXRiN/llhoB9lou32ca8j1\nLNpP+wa1JMUECymSp23fc5XXdpLR8lgPUg6UAt5W9CKRF3euXVLLaxxHRcMCuIKg\nzFX6ixlnqJb5HcjUUOlCYHsXRhiga1hZASgDZvn5UOpYFxETL0IbvXcz842HrMi7\nii7e0VvGpGq4TYwjfM3sEXMUzDzRlJtDcrpAS/ePp5Ne/J2gdCaPbYah6H4u+kwx\n/1KHkpRIWe+M0XCeUN7eoJcdr9tCjVUGDcr+Roq0ME3EPQ==\n=WZsl\n-----END PGP SIGNATURE-----", "payload": "tree c3c66d0eccd8e3f3e1ff46aef4817cfd81653241\nparent 9be9b5e09ad834e2ba9f2571ca17059e18f89b71\nauthor marc0246 <40955683+marc0246@users.noreply.github.com> 1681320100 +0200\ncommitter marc0246 <40955683+marc0246@users.noreply.github.com> 1681320100 +0200\n\nFix btree `CursorMut::insert_after` check\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdd982955623f697f759f548ce11f886a413f4f6", "html_url": "https://github.com/rust-lang/rust/commit/cdd982955623f697f759f548ce11f886a413f4f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdd982955623f697f759f548ce11f886a413f4f6/comments", "author": {"login": "marc0246", "id": 40955683, "node_id": "MDQ6VXNlcjQwOTU1Njgz", "avatar_url": "https://avatars.githubusercontent.com/u/40955683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marc0246", "html_url": "https://github.com/marc0246", "followers_url": "https://api.github.com/users/marc0246/followers", "following_url": "https://api.github.com/users/marc0246/following{/other_user}", "gists_url": "https://api.github.com/users/marc0246/gists{/gist_id}", "starred_url": "https://api.github.com/users/marc0246/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marc0246/subscriptions", "organizations_url": "https://api.github.com/users/marc0246/orgs", "repos_url": "https://api.github.com/users/marc0246/repos", "events_url": "https://api.github.com/users/marc0246/events{/privacy}", "received_events_url": "https://api.github.com/users/marc0246/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marc0246", "id": 40955683, "node_id": "MDQ6VXNlcjQwOTU1Njgz", "avatar_url": "https://avatars.githubusercontent.com/u/40955683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marc0246", "html_url": "https://github.com/marc0246", "followers_url": "https://api.github.com/users/marc0246/followers", "following_url": "https://api.github.com/users/marc0246/following{/other_user}", "gists_url": "https://api.github.com/users/marc0246/gists{/gist_id}", "starred_url": "https://api.github.com/users/marc0246/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marc0246/subscriptions", "organizations_url": "https://api.github.com/users/marc0246/orgs", "repos_url": "https://api.github.com/users/marc0246/repos", "events_url": "https://api.github.com/users/marc0246/events{/privacy}", "received_events_url": "https://api.github.com/users/marc0246/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9be9b5e09ad834e2ba9f2571ca17059e18f89b71", "url": "https://api.github.com/repos/rust-lang/rust/commits/9be9b5e09ad834e2ba9f2571ca17059e18f89b71", "html_url": "https://github.com/rust-lang/rust/commit/9be9b5e09ad834e2ba9f2571ca17059e18f89b71"}], "stats": {"total": 66, "additions": 65, "deletions": 1}, "files": [{"sha": "da675379cd58bfc0d70e8675cea0bae76e3160aa", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdd982955623f697f759f548ce11f886a413f4f6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd982955623f697f759f548ce11f886a413f4f6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=cdd982955623f697f759f548ce11f886a413f4f6", "patch": "@@ -3183,7 +3183,7 @@ impl<'a, K: Ord, V, A: Allocator + Clone> CursorMut<'a, K, V, A> {\n                 panic!(\"key must be ordered above the current element\");\n             }\n         }\n-        if let Some((next, _)) = self.peek_prev() {\n+        if let Some((next, _)) = self.peek_next() {\n             if &key >= next {\n                 panic!(\"key must be ordered below the next element\");\n             }"}, {"sha": "4311f21c925cda7a7ffdcab338ee78085cf4e92c", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/cdd982955623f697f759f548ce11f886a413f4f6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd982955623f697f759f548ce11f886a413f4f6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=cdd982955623f697f759f548ce11f886a413f4f6", "patch": "@@ -2385,3 +2385,67 @@ fn test_cursor_mut() {\n     assert_eq!(cur.key(), Some(&4));\n     assert_eq!(map, BTreeMap::from([(0, '?'), (1, 'a'), (3, 'c'), (4, 'd')]));\n }\n+\n+#[should_panic(expected = \"key must be ordered above the previous element\")]\n+#[test]\n+fn test_cursor_mut_insert_before_1() {\n+    let mut map = BTreeMap::from([(1, 'a'), (2, 'b'), (3, 'c')]);\n+    let mut cur = map.upper_bound_mut(Bound::Included(&2));\n+    cur.insert_before(0, 'd');\n+}\n+\n+#[should_panic(expected = \"key must be ordered above the previous element\")]\n+#[test]\n+fn test_cursor_mut_insert_before_2() {\n+    let mut map = BTreeMap::from([(1, 'a'), (2, 'b'), (3, 'c')]);\n+    let mut cur = map.upper_bound_mut(Bound::Included(&2));\n+    cur.insert_before(1, 'd');\n+}\n+\n+#[should_panic(expected = \"key must be ordered below the current element\")]\n+#[test]\n+fn test_cursor_mut_insert_before_3() {\n+    let mut map = BTreeMap::from([(1, 'a'), (2, 'b'), (3, 'c')]);\n+    let mut cur = map.upper_bound_mut(Bound::Included(&2));\n+    cur.insert_before(2, 'd');\n+}\n+\n+#[should_panic(expected = \"key must be ordered below the current element\")]\n+#[test]\n+fn test_cursor_mut_insert_before_4() {\n+    let mut map = BTreeMap::from([(1, 'a'), (2, 'b'), (3, 'c')]);\n+    let mut cur = map.upper_bound_mut(Bound::Included(&2));\n+    cur.insert_before(3, 'd');\n+}\n+\n+#[should_panic(expected = \"key must be ordered above the current element\")]\n+#[test]\n+fn test_cursor_mut_insert_after_1() {\n+    let mut map = BTreeMap::from([(1, 'a'), (2, 'b'), (3, 'c')]);\n+    let mut cur = map.upper_bound_mut(Bound::Included(&2));\n+    cur.insert_after(1, 'd');\n+}\n+\n+#[should_panic(expected = \"key must be ordered above the current element\")]\n+#[test]\n+fn test_cursor_mut_insert_after_2() {\n+    let mut map = BTreeMap::from([(1, 'a'), (2, 'b'), (3, 'c')]);\n+    let mut cur = map.upper_bound_mut(Bound::Included(&2));\n+    cur.insert_after(2, 'd');\n+}\n+\n+#[should_panic(expected = \"key must be ordered below the next element\")]\n+#[test]\n+fn test_cursor_mut_insert_after_3() {\n+    let mut map = BTreeMap::from([(1, 'a'), (2, 'b'), (3, 'c')]);\n+    let mut cur = map.upper_bound_mut(Bound::Included(&2));\n+    cur.insert_after(3, 'd');\n+}\n+\n+#[should_panic(expected = \"key must be ordered below the next element\")]\n+#[test]\n+fn test_cursor_mut_insert_after_4() {\n+    let mut map = BTreeMap::from([(1, 'a'), (2, 'b'), (3, 'c')]);\n+    let mut cur = map.upper_bound_mut(Bound::Included(&2));\n+    cur.insert_after(4, 'd');\n+}"}]}