{"sha": "a50454d6c81b230532ff0ed2be53846409107468", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MDQ1NGQ2YzgxYjIzMDUzMmZmMGVkMmJlNTM4NDY0MDkxMDc0Njg=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-26T23:00:02Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-09T18:09:30Z"}, "message": "Access attrs directly from HirId in rustc_passes::dead.", "tree": {"sha": "894419829a0f75ed7c6a2112fe064404c7179f45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/894419829a0f75ed7c6a2112fe064404c7179f45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a50454d6c81b230532ff0ed2be53846409107468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a50454d6c81b230532ff0ed2be53846409107468", "html_url": "https://github.com/rust-lang/rust/commit/a50454d6c81b230532ff0ed2be53846409107468", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a50454d6c81b230532ff0ed2be53846409107468/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8514aaa56cd473a0cbef2ff3e3b086ebf7c6a0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8514aaa56cd473a0cbef2ff3e3b086ebf7c6a0b", "html_url": "https://github.com/rust-lang/rust/commit/f8514aaa56cd473a0cbef2ff3e3b086ebf7c6a0b"}], "stats": {"total": 32, "additions": 9, "deletions": 23}, "files": [{"sha": "ca25445486d40692737a9693a65c82da043292bf", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 9, "deletions": 23, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a50454d6c81b230532ff0ed2be53846409107468/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a50454d6c81b230532ff0ed2be53846409107468/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=a50454d6c81b230532ff0ed2be53846409107468", "patch": "@@ -15,7 +15,6 @@ use rustc_middle::middle::privacy;\n use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_session::lint;\n \n-use rustc_ast as ast;\n use rustc_span::symbol::{sym, Symbol};\n \n // Any local node that may call something in its body block should be\n@@ -346,11 +345,8 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n     }\n }\n \n-fn has_allow_dead_code_or_lang_attr(\n-    tcx: TyCtxt<'_>,\n-    id: hir::HirId,\n-    attrs: &[ast::Attribute],\n-) -> bool {\n+fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt<'_>, id: hir::HirId) -> bool {\n+    let attrs = tcx.hir().attrs(id);\n     if tcx.sess.contains_name(attrs, sym::lang) {\n         return true;\n     }\n@@ -400,8 +396,7 @@ struct LifeSeeder<'k, 'tcx> {\n \n impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item<'_>) {\n-        let allow_dead_code =\n-            has_allow_dead_code_or_lang_attr(self.tcx, item.hir_id(), &item.attrs);\n+        let allow_dead_code = has_allow_dead_code_or_lang_attr(self.tcx, item.hir_id());\n         if allow_dead_code {\n             self.worklist.push(item.hir_id());\n         }\n@@ -424,11 +419,7 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n                 for impl_item_ref in items {\n                     let impl_item = self.krate.impl_item(impl_item_ref.id);\n                     if of_trait.is_some()\n-                        || has_allow_dead_code_or_lang_attr(\n-                            self.tcx,\n-                            impl_item.hir_id(),\n-                            &impl_item.attrs,\n-                        )\n+                        || has_allow_dead_code_or_lang_attr(self.tcx, impl_item.hir_id())\n                     {\n                         self.worklist.push(impl_item_ref.id.hir_id());\n                     }\n@@ -446,7 +437,7 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n     fn visit_trait_item(&mut self, trait_item: &hir::TraitItem<'_>) {\n         use hir::TraitItemKind::{Const, Fn};\n         if matches!(trait_item.kind, Const(_, Some(_)) | Fn(_, hir::TraitFn::Provided(_)))\n-            && has_allow_dead_code_or_lang_attr(self.tcx, trait_item.hir_id(), &trait_item.attrs)\n+            && has_allow_dead_code_or_lang_attr(self.tcx, trait_item.hir_id())\n         {\n             self.worklist.push(trait_item.hir_id());\n         }\n@@ -459,11 +450,7 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n     fn visit_foreign_item(&mut self, foreign_item: &hir::ForeignItem<'_>) {\n         use hir::ForeignItemKind::{Fn, Static};\n         if matches!(foreign_item.kind, Static(..) | Fn(..))\n-            && has_allow_dead_code_or_lang_attr(\n-                self.tcx,\n-                foreign_item.hir_id(),\n-                &foreign_item.attrs,\n-            )\n+            && has_allow_dead_code_or_lang_attr(self.tcx, foreign_item.hir_id())\n         {\n             self.worklist.push(foreign_item.hir_id());\n         }\n@@ -543,17 +530,16 @@ impl DeadVisitor<'tcx> {\n         !field.is_positional()\n             && !self.symbol_is_live(field.hir_id)\n             && !field_type.is_phantom_data()\n-            && !has_allow_dead_code_or_lang_attr(self.tcx, field.hir_id, &field.attrs)\n+            && !has_allow_dead_code_or_lang_attr(self.tcx, field.hir_id)\n     }\n \n     fn should_warn_about_variant(&mut self, variant: &hir::Variant<'_>) -> bool {\n-        !self.symbol_is_live(variant.id)\n-            && !has_allow_dead_code_or_lang_attr(self.tcx, variant.id, &variant.attrs)\n+        !self.symbol_is_live(variant.id) && !has_allow_dead_code_or_lang_attr(self.tcx, variant.id)\n     }\n \n     fn should_warn_about_foreign_item(&mut self, fi: &hir::ForeignItem<'_>) -> bool {\n         !self.symbol_is_live(fi.hir_id())\n-            && !has_allow_dead_code_or_lang_attr(self.tcx, fi.hir_id(), &fi.attrs)\n+            && !has_allow_dead_code_or_lang_attr(self.tcx, fi.hir_id())\n     }\n \n     // id := HIR id of an item's definition."}]}