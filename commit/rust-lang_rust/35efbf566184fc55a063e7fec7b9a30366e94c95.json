{"sha": "35efbf566184fc55a063e7fec7b9a30366e94c95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZWZiZjU2NjE4NGZjNTVhMDYzZTdmZWM3YjlhMzAzNjZlOTRjOTU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-29T19:22:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-29T19:22:11Z"}, "message": "Merge #8244\n\n8244: internal: track missing `.check_cancelled` r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "b79be0db6c2db9affa688cffcffdc1e3f04ef5c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b79be0db6c2db9affa688cffcffdc1e3f04ef5c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35efbf566184fc55a063e7fec7b9a30366e94c95", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgYijjCRBK7hj4Ov3rIwAAdHIIABdIakrT6bubJdZ3Xs9Rdcr5\nfYORx8FuqeWSbVQSDPYhDK5q0BS+Wf8jl9s3LzdNaFcchRLlWTAV4O0DE8n5Ds7J\nyDMq4PRfTSynqW9NXU6KCIt97uEPyNaiY4QJ0gAbgvDDK7Z1eA101igCCQGgSAQY\n0eCnLwPAde0XKjH1HeFw5R5bsBLKxZV0StzDC2RDbSvQCZy1AB2nnGgG0Uthl4Co\nG/yEpvzGiNXxcmjSkb+TOxVcz73EhQepH2lqaiPgcss8O4Obc05fjxEykgsS1z1G\nSmg0VpfbRL0nZ0eXJ6RkK124Z/OFCjcZtETRz9gz8R/uzlXCg+Y3p8mNSK4s9Ek=\n=nFYp\n-----END PGP SIGNATURE-----\n", "payload": "tree b79be0db6c2db9affa688cffcffdc1e3f04ef5c7\nparent 7b9e2a26415d484dd5d3a487981b82a56426cf01\nparent 483a5bc9c850f3144cfbdf51a272bbcadbdc5934\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617045731 +0000\ncommitter GitHub <noreply@github.com> 1617045731 +0000\n\nMerge #8244\n\n8244: internal: track missing `.check_cancelled` r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35efbf566184fc55a063e7fec7b9a30366e94c95", "html_url": "https://github.com/rust-lang/rust/commit/35efbf566184fc55a063e7fec7b9a30366e94c95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35efbf566184fc55a063e7fec7b9a30366e94c95/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b9e2a26415d484dd5d3a487981b82a56426cf01", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b9e2a26415d484dd5d3a487981b82a56426cf01", "html_url": "https://github.com/rust-lang/rust/commit/7b9e2a26415d484dd5d3a487981b82a56426cf01"}, {"sha": "483a5bc9c850f3144cfbdf51a272bbcadbdc5934", "url": "https://api.github.com/repos/rust-lang/rust/commits/483a5bc9c850f3144cfbdf51a272bbcadbdc5934", "html_url": "https://github.com/rust-lang/rust/commit/483a5bc9c850f3144cfbdf51a272bbcadbdc5934"}], "stats": {"total": 92, "additions": 81, "deletions": 11}, "files": [{"sha": "980a0ed985f40c71fbf863365d8e7488722a9148", "filename": "crates/base_db/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/35efbf566184fc55a063e7fec7b9a30366e94c95/crates%2Fbase_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35efbf566184fc55a063e7fec7b9a30366e94c95/crates%2Fbase_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Flib.rs?ref=35efbf566184fc55a063e7fec7b9a30366e94c95", "patch": "@@ -59,6 +59,8 @@ pub trait CheckCanceled {\n         Self: Sized + panic::RefUnwindSafe,\n         F: FnOnce(&Self) -> T + panic::UnwindSafe,\n     {\n+        // Uncomment to debug missing cancellations.\n+        // let _span = profile::heartbeat_span();\n         panic::catch_unwind(|| f(self)).map_err(|err| match err.downcast::<Canceled>() {\n             Ok(canceled) => *canceled,\n             Err(payload) => panic::resume_unwind(payload),\n@@ -68,6 +70,7 @@ pub trait CheckCanceled {\n \n impl<T: salsa::Database> CheckCanceled for T {\n     fn check_canceled(&self) {\n+        // profile::heartbeat();\n         if self.salsa_runtime().is_current_revision_canceled() {\n             Canceled::throw()\n         }"}, {"sha": "5fdb3720610b41fa2ffeb00e2327379d63294089", "filename": "crates/profile/src/hprof.rs", "status": "modified", "additions": 77, "deletions": 10, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/35efbf566184fc55a063e7fec7b9a30366e94c95/crates%2Fprofile%2Fsrc%2Fhprof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35efbf566184fc55a063e7fec7b9a30366e94c95/crates%2Fprofile%2Fsrc%2Fhprof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fhprof.rs?ref=35efbf566184fc55a063e7fec7b9a30366e94c95", "patch": "@@ -69,6 +69,20 @@ pub fn span(label: Label) -> ProfileSpan {\n     }\n }\n \n+#[inline]\n+pub fn heartbeat_span() -> HeartbeatSpan {\n+    let enabled = PROFILING_ENABLED.load(Ordering::Relaxed);\n+    HeartbeatSpan::new(enabled)\n+}\n+\n+#[inline]\n+pub fn heartbeat() {\n+    let enabled = PROFILING_ENABLED.load(Ordering::Relaxed);\n+    if enabled {\n+        with_profile_stack(|it| it.heartbeat(1));\n+    }\n+}\n+\n pub struct ProfileSpan(Option<ProfilerImpl>);\n \n struct ProfilerImpl {\n@@ -92,6 +106,28 @@ impl Drop for ProfilerImpl {\n     }\n }\n \n+pub struct HeartbeatSpan {\n+    enabled: bool,\n+}\n+\n+impl HeartbeatSpan {\n+    #[inline]\n+    pub fn new(enabled: bool) -> Self {\n+        if enabled {\n+            with_profile_stack(|it| it.heartbeats(true))\n+        }\n+        Self { enabled }\n+    }\n+}\n+\n+impl Drop for HeartbeatSpan {\n+    fn drop(&mut self) {\n+        if self.enabled {\n+            with_profile_stack(|it| it.heartbeats(false))\n+        }\n+    }\n+}\n+\n static PROFILING_ENABLED: AtomicBool = AtomicBool::new(false);\n static FILTER: Lazy<RwLock<Filter>> = Lazy::new(Default::default);\n \n@@ -105,6 +141,7 @@ struct Filter {\n     depth: usize,\n     allowed: HashSet<String>,\n     longer_than: Duration,\n+    heartbeat_longer_than: Duration,\n     version: usize,\n }\n \n@@ -121,6 +158,7 @@ impl Filter {\n         } else {\n             Duration::new(0, 0)\n         };\n+        let heartbeat_longer_than = longer_than;\n \n         let depth = if let Some(idx) = spec.rfind('@') {\n             let depth: usize = spec[idx + 1..].parse().expect(\"invalid profile depth\");\n@@ -131,7 +169,7 @@ impl Filter {\n         };\n         let allowed =\n             if spec == \"*\" { HashSet::new() } else { spec.split('|').map(String::from).collect() };\n-        Filter { depth, allowed, longer_than, version: 0 }\n+        Filter { depth, allowed, longer_than, heartbeat_longer_than, version: 0 }\n     }\n \n     fn install(mut self) {\n@@ -143,9 +181,15 @@ impl Filter {\n }\n \n struct ProfileStack {\n-    starts: Vec<Instant>,\n+    frames: Vec<Frame>,\n     filter: Filter,\n     messages: Tree<Message>,\n+    heartbeats: bool,\n+}\n+\n+struct Frame {\n+    t: Instant,\n+    heartbeats: u32,\n }\n \n #[derive(Default)]\n@@ -157,35 +201,49 @@ struct Message {\n \n impl ProfileStack {\n     fn new() -> ProfileStack {\n-        ProfileStack { starts: Vec::new(), messages: Tree::default(), filter: Default::default() }\n+        ProfileStack {\n+            frames: Vec::new(),\n+            messages: Tree::default(),\n+            filter: Default::default(),\n+            heartbeats: false,\n+        }\n     }\n \n     fn push(&mut self, label: Label) -> bool {\n-        if self.starts.is_empty() {\n+        if self.frames.is_empty() {\n             if let Ok(f) = FILTER.try_read() {\n                 if f.version > self.filter.version {\n                     self.filter = f.clone();\n                 }\n             };\n         }\n-        if self.starts.len() > self.filter.depth {\n+        if self.frames.len() > self.filter.depth {\n             return false;\n         }\n         let allowed = &self.filter.allowed;\n-        if self.starts.is_empty() && !allowed.is_empty() && !allowed.contains(label) {\n+        if self.frames.is_empty() && !allowed.is_empty() && !allowed.contains(label) {\n             return false;\n         }\n \n-        self.starts.push(Instant::now());\n+        self.frames.push(Frame { t: Instant::now(), heartbeats: 0 });\n         self.messages.start();\n         true\n     }\n \n     fn pop(&mut self, label: Label, detail: Option<String>) {\n-        let start = self.starts.pop().unwrap();\n-        let duration = start.elapsed();\n+        let frame = self.frames.pop().unwrap();\n+        let duration = frame.t.elapsed();\n+\n+        if self.heartbeats {\n+            self.heartbeat(frame.heartbeats);\n+            let avg_span = duration / (frame.heartbeats + 1);\n+            if avg_span > self.filter.heartbeat_longer_than {\n+                eprintln!(\"Too few heartbeats {} ({}/{:?})?\", label, frame.heartbeats, duration)\n+            }\n+        }\n+\n         self.messages.finish(Message { duration, label, detail });\n-        if self.starts.is_empty() {\n+        if self.frames.is_empty() {\n             let longer_than = self.filter.longer_than;\n             // Convert to millis for comparison to avoid problems with rounding\n             // (otherwise we could print `0ms` despite user's `>0` filter when\n@@ -198,6 +256,15 @@ impl ProfileStack {\n             self.messages.clear();\n         }\n     }\n+\n+    fn heartbeats(&mut self, yes: bool) {\n+        self.heartbeats = yes;\n+    }\n+    fn heartbeat(&mut self, n: u32) {\n+        if let Some(frame) = self.frames.last_mut() {\n+            frame.heartbeats += n;\n+        }\n+    }\n }\n \n fn print("}, {"sha": "9ca6341db7f2bd10b639448a662970bbde9d00fd", "filename": "crates/profile/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35efbf566184fc55a063e7fec7b9a30366e94c95/crates%2Fprofile%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35efbf566184fc55a063e7fec7b9a30366e94c95/crates%2Fprofile%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Flib.rs?ref=35efbf566184fc55a063e7fec7b9a30366e94c95", "patch": "@@ -10,7 +10,7 @@ mod tree;\n use std::cell::RefCell;\n \n pub use crate::{\n-    hprof::{init, init_from, span},\n+    hprof::{heartbeat, heartbeat_span, init, init_from, span},\n     memory_usage::{Bytes, MemoryUsage},\n     stop_watch::{StopWatch, StopWatchSpan},\n };"}]}