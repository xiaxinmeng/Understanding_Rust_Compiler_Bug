{"sha": "6b292cd4c48f0876b4280dfdf0c38d474fe44330", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMjkyY2Q0YzQ4ZjA4NzZiNDI4MGRmZGYwYzM4ZDQ3NGZlNDQzMzA=", "commit": {"author": {"name": "Ruud van Asseldonk", "email": "dev@veniogames.com", "date": "2015-04-29T22:58:43Z"}, "committer": {"name": "Ruud van Asseldonk", "email": "dev@veniogames.com", "date": "2015-04-29T22:58:43Z"}, "message": "rustc: Add long diagnostics for E0282", "tree": {"sha": "a34f9fa5fdcfa77bdfabaf4b679f10f7dfb71221", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a34f9fa5fdcfa77bdfabaf4b679f10f7dfb71221"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b292cd4c48f0876b4280dfdf0c38d474fe44330", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b292cd4c48f0876b4280dfdf0c38d474fe44330", "html_url": "https://github.com/rust-lang/rust/commit/6b292cd4c48f0876b4280dfdf0c38d474fe44330", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b292cd4c48f0876b4280dfdf0c38d474fe44330/comments", "author": {"login": "ruuda", "id": 506953, "node_id": "MDQ6VXNlcjUwNjk1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/506953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruuda", "html_url": "https://github.com/ruuda", "followers_url": "https://api.github.com/users/ruuda/followers", "following_url": "https://api.github.com/users/ruuda/following{/other_user}", "gists_url": "https://api.github.com/users/ruuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruuda/subscriptions", "organizations_url": "https://api.github.com/users/ruuda/orgs", "repos_url": "https://api.github.com/users/ruuda/repos", "events_url": "https://api.github.com/users/ruuda/events{/privacy}", "received_events_url": "https://api.github.com/users/ruuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ruuda", "id": 506953, "node_id": "MDQ6VXNlcjUwNjk1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/506953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruuda", "html_url": "https://github.com/ruuda", "followers_url": "https://api.github.com/users/ruuda/followers", "following_url": "https://api.github.com/users/ruuda/following{/other_user}", "gists_url": "https://api.github.com/users/ruuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruuda/subscriptions", "organizations_url": "https://api.github.com/users/ruuda/orgs", "repos_url": "https://api.github.com/users/ruuda/repos", "events_url": "https://api.github.com/users/ruuda/events{/privacy}", "received_events_url": "https://api.github.com/users/ruuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52e520e902cecc579910e6cabe1658720bfab132", "url": "https://api.github.com/repos/rust-lang/rust/commits/52e520e902cecc579910e6cabe1658720bfab132", "html_url": "https://github.com/rust-lang/rust/commit/52e520e902cecc579910e6cabe1658720bfab132"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "250252a77cbcd920be15ec9574cabe8289d5f1c9", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/6b292cd4c48f0876b4280dfdf0c38d474fe44330/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b292cd4c48f0876b4280dfdf0c38d474fe44330/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=6b292cd4c48f0876b4280dfdf0c38d474fe44330", "patch": "@@ -368,6 +368,73 @@ loop. Without a loop to break out of or continue in, no sensible action can be\n taken.\n \"##,\n \n+E0282: r##\"\n+This error indicates that type inference did not result in one unique possible\n+type, and extra information is required. In most cases this can be provided\n+by adding a type annotation. Sometimes you need to specify a generic type\n+parameter manually.\n+\n+A common example is the `collect` method on `Iterator`. It has a generic type\n+parameter with a `FromIterator` bound, which is implemented by `Vec` and\n+`VecDeque` among others. Consider the following snippet:\n+\n+```\n+let x = (1_i32 .. 10).collect();\n+```\n+\n+In this case, the compiler cannot infer what the type of `x` should be:\n+`Vec<i32>` and `VecDeque<i32>` are both suitable candidates. To specify which\n+type to use, you can use a type annotation on `x`:\n+\n+```\n+let x: Vec<i32> = (1_i32 .. 10).collect();\n+```\n+\n+It is not necessary to annotate the full type, once the ambiguity is resolved,\n+the compiler can infer the rest:\n+\n+```\n+let x: Vec<_> = (1_i32 .. 10).collect();\n+```\n+\n+Another way to provide the compiler with enough information, is to specify the\n+generic type parameter:\n+\n+```\n+let x = (1_i32 .. 10).collect::<Vec<i32>>();\n+```\n+\n+Again, you need not specify the full type if the compiler can infer it:\n+\n+```\n+let x = (1_i32 .. 10).collect::<Vec<_>>();\n+```\n+\n+Apart from a method or function with a generic type parameter, this error can\n+occur when a type parameter of a struct or trait cannot be inferred. In that\n+case it is not always possible to use a type annotation, because all candidates\n+have the same return type. For instance:\n+\n+```\n+struct Foo<T> {\n+    // Some fields omitted.\n+}\n+\n+impl<T> Foo<T> {\n+    fn bar() -> i32 {\n+        0\n+    }\n+\n+    fn baz() {\n+        let number = Foo::bar();\n+    }\n+}\n+```\n+\n+This will fail because the compiler does not know which instance of `Foo` to\n+call `bar` on. Change `Foo::bar()` to `Foo::<T>::bar()` to resolve the error.\n+\"##,\n+\n E0296: r##\"\n This error indicates that the given recursion limit could not be parsed. Ensure\n that the value provided is a positive integer between quotes, like so:\n@@ -515,7 +582,6 @@ register_diagnostics! {\n     E0279, // requirement is not satisfied\n     E0280, // requirement is not satisfied\n     E0281, // type implements trait but other trait is required\n-    E0282, // unable to infer enough type information about\n     E0283, // cannot resolve type\n     E0284, // cannot resolve type\n     E0285, // overflow evaluation builtin bounds"}]}