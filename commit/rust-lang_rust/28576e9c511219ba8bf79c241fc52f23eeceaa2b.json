{"sha": "28576e9c511219ba8bf79c241fc52f23eeceaa2b", "node_id": "C_kwDOAAsO6NoAKDI4NTc2ZTljNTExMjE5YmE4YmY3OWMyNDFmYzUyZjIzZWVjZWFhMmI", "commit": {"author": {"name": "Aria Beingessner", "email": "a.beingessner@gmail.com", "date": "2022-03-28T04:43:18Z"}, "committer": {"name": "Aria Beingessner", "email": "a.beingessner@gmail.com", "date": "2022-03-30T00:18:28Z"}, "message": "mark FIXMES for all the places found that are probably offset_from", "tree": {"sha": "15255415056db26088bb87fb8b07f510f76c1f31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15255415056db26088bb87fb8b07f510f76c1f31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28576e9c511219ba8bf79c241fc52f23eeceaa2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28576e9c511219ba8bf79c241fc52f23eeceaa2b", "html_url": "https://github.com/rust-lang/rust/commit/28576e9c511219ba8bf79c241fc52f23eeceaa2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28576e9c511219ba8bf79c241fc52f23eeceaa2b/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f720fa55e3f9bc6a59ea8caf1fdff18405d3b65", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f720fa55e3f9bc6a59ea8caf1fdff18405d3b65", "html_url": "https://github.com/rust-lang/rust/commit/5f720fa55e3f9bc6a59ea8caf1fdff18405d3b65"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "62995dfd2e2f0b96f731dee1ff9f06c060f779f5", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28576e9c511219ba8bf79c241fc52f23eeceaa2b/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28576e9c511219ba8bf79c241fc52f23eeceaa2b/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=28576e9c511219ba8bf79c241fc52f23eeceaa2b", "patch": "@@ -217,6 +217,8 @@ impl<T> TypedArena<T> {\n \n     #[inline]\n     fn can_allocate(&self, additional: usize) -> bool {\n+        // FIXME: this should *likely* use `offset_from`, but more\n+        // investigation is needed (including running tests in miri).\n         let available_bytes = self.end.get().addr() - self.ptr.get().addr();\n         let additional_bytes = additional.checked_mul(mem::size_of::<T>()).unwrap();\n         available_bytes >= additional_bytes\n@@ -263,6 +265,8 @@ impl<T> TypedArena<T> {\n                 // If a type is `!needs_drop`, we don't need to keep track of how many elements\n                 // the chunk stores - the field will be ignored anyway.\n                 if mem::needs_drop::<T>() {\n+                    // FIXME: this should *likely* use `offset_from`, but more\n+                    // investigation is needed (including running tests in miri).\n                     let used_bytes = self.ptr.get().addr() - last_chunk.start().addr();\n                     last_chunk.entries = used_bytes / mem::size_of::<T>();\n                 }\n@@ -300,6 +304,8 @@ impl<T> TypedArena<T> {\n             // Recall that `end` was incremented for each allocated value.\n             end - start\n         } else {\n+            // FIXME: this should *likely* use `offset_from`, but more\n+            // investigation is needed (including running tests in miri).\n             (end - start) / mem::size_of::<T>()\n         };\n         // Pass that to the `destroy` method."}, {"sha": "1f392a079718c252a6989c60dd952cbe8845bd7b", "filename": "library/core/src/slice/sort.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28576e9c511219ba8bf79c241fc52f23eeceaa2b/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28576e9c511219ba8bf79c241fc52f23eeceaa2b/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs?ref=28576e9c511219ba8bf79c241fc52f23eeceaa2b", "patch": "@@ -269,6 +269,8 @@ where\n     // Returns the number of elements between pointers `l` (inclusive) and `r` (exclusive).\n     fn width<T>(l: *mut T, r: *mut T) -> usize {\n         assert!(mem::size_of::<T>() > 0);\n+        // FIXME: this should *likely* use `offset_from`, but more\n+        // investigation is needed (including running tests in miri).\n         (r.addr() - l.addr()) / mem::size_of::<T>()\n     }\n "}, {"sha": "73ba604eccba2fc8feed75879c3fcfef972f9d30", "filename": "library/std/src/sys/unix/memchr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28576e9c511219ba8bf79c241fc52f23eeceaa2b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28576e9c511219ba8bf79c241fc52f23eeceaa2b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmemchr.rs?ref=28576e9c511219ba8bf79c241fc52f23eeceaa2b", "patch": "@@ -26,6 +26,8 @@ pub fn memrchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n                 haystack.len(),\n             )\n         };\n+        // FIXME: this should *likely* use `offset_from`, but more\n+        // investigation is needed (including running tests in miri).\n         if p.is_null() { None } else { Some(p.addr() - haystack.as_ptr().addr()) }\n     }\n "}]}