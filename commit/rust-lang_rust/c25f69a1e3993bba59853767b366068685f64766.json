{"sha": "c25f69a1e3993bba59853767b366068685f64766", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNWY2OWExZTM5OTNiYmE1OTg1Mzc2N2IzNjYwNjg2ODVmNjQ3NjY=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-08T20:52:26Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-08T21:08:31Z"}, "message": "Remove unsafety from unsupported/mutex.rs by using a Cell.\n\nReplacing the UnsafeCell by a Cell simplifies things and makes it all\nsafe.", "tree": {"sha": "31094d29281ea77e094415ef347b53ab7a1b2e43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31094d29281ea77e094415ef347b53ab7a1b2e43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c25f69a1e3993bba59853767b366068685f64766", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c25f69a1e3993bba59853767b366068685f64766", "html_url": "https://github.com/rust-lang/rust/commit/c25f69a1e3993bba59853767b366068685f64766", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c25f69a1e3993bba59853767b366068685f64766/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccea570488694e502c1a7ca8f3f0866c9b763ce4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccea570488694e502c1a7ca8f3f0866c9b763ce4", "html_url": "https://github.com/rust-lang/rust/commit/ccea570488694e502c1a7ca8f3f0866c9b763ce4"}], "stats": {"total": 22, "additions": 8, "deletions": 14}, "files": [{"sha": "0e01edcaf397d6108ac8fe3dacb45fa402d7e32b", "filename": "library/std/src/sys/unsupported/mutex.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c25f69a1e3993bba59853767b366068685f64766/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c25f69a1e3993bba59853767b366068685f64766/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmutex.rs?ref=c25f69a1e3993bba59853767b366068685f64766", "patch": "@@ -1,7 +1,9 @@\n-use crate::cell::UnsafeCell;\n+#![deny(unsafe_op_in_unsafe_fn)]\n+\n+use crate::cell::Cell;\n \n pub struct Mutex {\n-    locked: UnsafeCell<bool>,\n+    locked: Cell<bool>,\n }\n \n pub type MovableMutex = Mutex;\n@@ -12,33 +14,25 @@ unsafe impl Sync for Mutex {} // no threads on this platform\n impl Mutex {\n     #[rustc_const_stable(feature = \"const_sys_mutex_new\", since = \"1.0.0\")]\n     pub const fn new() -> Mutex {\n-        Mutex { locked: UnsafeCell::new(false) }\n+        Mutex { locked: Cell::new(false) }\n     }\n \n     #[inline]\n     pub unsafe fn init(&mut self) {}\n \n     #[inline]\n     pub unsafe fn lock(&self) {\n-        let locked = self.locked.get();\n-        assert!(!*locked, \"cannot recursively acquire mutex\");\n-        *locked = true;\n+        assert_eq!(self.locked.replace(true), false, \"cannot recursively acquire mutex\");\n     }\n \n     #[inline]\n     pub unsafe fn unlock(&self) {\n-        *self.locked.get() = false;\n+        self.locked.set(false);\n     }\n \n     #[inline]\n     pub unsafe fn try_lock(&self) -> bool {\n-        let locked = self.locked.get();\n-        if *locked {\n-            false\n-        } else {\n-            *locked = true;\n-            true\n-        }\n+        self.locked.replace(true) == false\n     }\n \n     #[inline]"}]}