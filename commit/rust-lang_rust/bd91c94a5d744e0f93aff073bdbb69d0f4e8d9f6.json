{"sha": "bd91c94a5d744e0f93aff073bdbb69d0f4e8d9f6", "node_id": "C_kwDOAAsO6NoAKGJkOTFjOTRhNWQ3NDRlMGY5M2FmZjA3M2JkYmI2OWQwZjRlOGQ5ZjY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-11-23T15:02:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-23T15:02:35Z"}, "message": "Rollup merge of #104269 - compiler-errors:hang-in-where-clause-sugg, r=lcnr\n\nFix hang in where-clause suggestion with `predicate_can_apply`\n\nUsing `predicate_may_hold` during error reporting causes an evaluation overflow, which (because we use `evaluate_obligation_no_overflow`) then causes the predicate to need to be re-evaluated locally, which results in a hang.\n\n... but since the \"add a where clause\" suggestion is best-effort, just throw any overflow errors. No need for 100% accuracy.\n\nr? `@lcnr` who has been thinking about overflows... Let me know if you want more context about this issue, and as always, feel free to reassign.\n\nFixes #104225", "tree": {"sha": "7796e86984ee33de8899878a240592e49a22fe15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7796e86984ee33de8899878a240592e49a22fe15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd91c94a5d744e0f93aff073bdbb69d0f4e8d9f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjfjYLCRBK7hj4Ov3rIwAA1mQIAFsYFOf7Td+2v+lCB3xJcNAh\nf3FwiYBdmWU635qgFBmCqvAKfsSvN9xUfbg+4rLLgAcufbi2vVo8uZczgBBZPXl8\n8bUXCNfm7KTRgVrjthN/evKtuc9Njyj7puU5DosrBgJMV6ji6sqgBp+e+FdsgnDp\nbzFws12dTIkvf+UtqZWMLCniXTAECC9eGaCAwZQxe5iGbnqzMQ0aCsOfbfCRJO/D\nRL9I4Iz8N/7dNekRC/378/SsqkvZle3D7WAP24yojJBhM9PW7xbPdFwPoPbxmump\nzIVaB/Ich4YM50w4sapkMitLyBmxkUBKcn/9v/1DZfw/UWgqr6U48d9Kd7dUepM=\n=eimv\n-----END PGP SIGNATURE-----\n", "payload": "tree 7796e86984ee33de8899878a240592e49a22fe15\nparent 4e0d0d757e2f1b61ec809420b006545a9f8974c0\nparent 9decfff6f87d3e5760fd61375c3d27fa45a83e52\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1669215755 +0530\ncommitter GitHub <noreply@github.com> 1669215755 +0530\n\nRollup merge of #104269 - compiler-errors:hang-in-where-clause-sugg, r=lcnr\n\nFix hang in where-clause suggestion with `predicate_can_apply`\n\nUsing `predicate_may_hold` during error reporting causes an evaluation overflow, which (because we use `evaluate_obligation_no_overflow`) then causes the predicate to need to be re-evaluated locally, which results in a hang.\n\n... but since the \"add a where clause\" suggestion is best-effort, just throw any overflow errors. No need for 100% accuracy.\n\nr? `@lcnr` who has been thinking about overflows... Let me know if you want more context about this issue, and as always, feel free to reassign.\n\nFixes #104225\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd91c94a5d744e0f93aff073bdbb69d0f4e8d9f6", "html_url": "https://github.com/rust-lang/rust/commit/bd91c94a5d744e0f93aff073bdbb69d0f4e8d9f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd91c94a5d744e0f93aff073bdbb69d0f4e8d9f6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e0d0d757e2f1b61ec809420b006545a9f8974c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e0d0d757e2f1b61ec809420b006545a9f8974c0", "html_url": "https://github.com/rust-lang/rust/commit/4e0d0d757e2f1b61ec809420b006545a9f8974c0"}, {"sha": "9decfff6f87d3e5760fd61375c3d27fa45a83e52", "url": "https://api.github.com/repos/rust-lang/rust/commits/9decfff6f87d3e5760fd61375c3d27fa45a83e52", "html_url": "https://github.com/rust-lang/rust/commit/9decfff6f87d3e5760fd61375c3d27fa45a83e52"}], "stats": {"total": 78, "additions": 74, "deletions": 4}, "files": [{"sha": "f9f80f9d58c57429cc86a7b5c02af08252e80c82", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd91c94a5d744e0f93aff073bdbb69d0f4e8d9f6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd91c94a5d744e0f93aff073bdbb69d0f4e8d9f6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=bd91c94a5d744e0f93aff073bdbb69d0f4e8d9f6", "patch": "@@ -2546,7 +2546,10 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             let obligation =\n                 Obligation::new(self.tcx, ObligationCause::dummy(), param_env, cleaned_pred);\n \n-            self.predicate_may_hold(&obligation)\n+            // We don't use `InferCtxt::predicate_may_hold` because that\n+            // will re-run predicates that overflow locally, which ends up\n+            // taking a really long time to compute.\n+            self.evaluate_obligation(&obligation).map_or(false, |eval| eval.may_apply())\n         })\n     }\n "}, {"sha": "bb6d7d0e8dff181a1f0586a2413bdb68b7e42aaf", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd91c94a5d744e0f93aff073bdbb69d0f4e8d9f6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd91c94a5d744e0f93aff073bdbb69d0f4e8d9f6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=bd91c94a5d744e0f93aff073bdbb69d0f4e8d9f6", "patch": "@@ -1340,9 +1340,8 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     obligation.param_env,\n                     trait_pred_and_suggested_ty,\n                 );\n-                let suggested_ty_would_satisfy_obligation = self\n-                    .evaluate_obligation_no_overflow(&new_obligation)\n-                    .must_apply_modulo_regions();\n+                let suggested_ty_would_satisfy_obligation =\n+                    self.predicate_must_hold_modulo_regions(&new_obligation);\n                 if suggested_ty_would_satisfy_obligation {\n                     let sp = self\n                         .tcx"}, {"sha": "5f01645da5242c5fd26b4ba510fe93bdb60fcf63", "filename": "src/test/ui/traits/predicate_can_apply-hang.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd91c94a5d744e0f93aff073bdbb69d0f4e8d9f6/src%2Ftest%2Fui%2Ftraits%2Fpredicate_can_apply-hang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd91c94a5d744e0f93aff073bdbb69d0f4e8d9f6/src%2Ftest%2Fui%2Ftraits%2Fpredicate_can_apply-hang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fpredicate_can_apply-hang.rs?ref=bd91c94a5d744e0f93aff073bdbb69d0f4e8d9f6", "patch": "@@ -0,0 +1,6 @@\n+fn f<B>(x: Vec<[[[B; 1]; 1]; 1]>) -> impl PartialEq<B> {\n+    //~^ ERROR can't compare `Vec<[[[B; 1]; 1]; 1]>` with `B`\n+    x\n+}\n+\n+fn main() {}"}, {"sha": "49fe63b412ac91b3ec165282a82e421abe8c30cb", "filename": "src/test/ui/traits/predicate_can_apply-hang.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bd91c94a5d744e0f93aff073bdbb69d0f4e8d9f6/src%2Ftest%2Fui%2Ftraits%2Fpredicate_can_apply-hang.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd91c94a5d744e0f93aff073bdbb69d0f4e8d9f6/src%2Ftest%2Fui%2Ftraits%2Fpredicate_can_apply-hang.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fpredicate_can_apply-hang.stderr?ref=bd91c94a5d744e0f93aff073bdbb69d0f4e8d9f6", "patch": "@@ -0,0 +1,21 @@\n+error[E0277]: can't compare `Vec<[[[B; 1]; 1]; 1]>` with `B`\n+  --> $DIR/predicate_can_apply-hang.rs:1:38\n+   |\n+LL | fn f<B>(x: Vec<[[[B; 1]; 1]; 1]>) -> impl PartialEq<B> {\n+   |                                      ^^^^^^^^^^^^^^^^^ no implementation for `Vec<[[[B; 1]; 1]; 1]> == B`\n+LL |\n+LL |     x\n+   |     - return type was inferred to be `Vec<[[[B; 1]; 1]; 1]>` here\n+   |\n+   = help: the trait `PartialEq<B>` is not implemented for `Vec<[[[B; 1]; 1]; 1]>`\n+   = help: the following other types implement trait `PartialEq<Rhs>`:\n+             <Vec<T, A1> as PartialEq<Vec<U, A2>>>\n+             <Vec<T, A> as PartialEq<&[U; N]>>\n+             <Vec<T, A> as PartialEq<&[U]>>\n+             <Vec<T, A> as PartialEq<&mut [U]>>\n+             <Vec<T, A> as PartialEq<[U; N]>>\n+             <Vec<T, A> as PartialEq<[U]>>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "a8330c9b65c312d232b09b08a2a6c0c5f29073fd", "filename": "src/test/ui/typeck/hang-in-overflow.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bd91c94a5d744e0f93aff073bdbb69d0f4e8d9f6/src%2Ftest%2Fui%2Ftypeck%2Fhang-in-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd91c94a5d744e0f93aff073bdbb69d0f4e8d9f6/src%2Ftest%2Fui%2Ftypeck%2Fhang-in-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fhang-in-overflow.rs?ref=bd91c94a5d744e0f93aff073bdbb69d0f4e8d9f6", "patch": "@@ -0,0 +1,19 @@\n+// normalize-stderr-test \"the requirement `.*`\" -> \"the requirement `...`\"\n+// normalize-stderr-test \"required for `.*` to implement `.*`\" -> \"required for `...` to implement `...`\"\n+// normalize-stderr-test: \".*the full type name has been written to.*\\n\" -> \"\"\n+\n+// Currently this fatally aborts instead of hanging.\n+// Make sure at least that this doesn't turn into a hang.\n+\n+fn f() {\n+    foo::<_>();\n+    //~^ ERROR overflow evaluating the requirement\n+}\n+\n+fn foo<B>()\n+where\n+    Vec<[[[B; 1]; 1]; 1]>: PartialEq<B>,\n+{\n+}\n+\n+fn main() {}"}, {"sha": "7a7b85b19b4eee4acec356b30f56f7025dd6ba4c", "filename": "src/test/ui/typeck/hang-in-overflow.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bd91c94a5d744e0f93aff073bdbb69d0f4e8d9f6/src%2Ftest%2Fui%2Ftypeck%2Fhang-in-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd91c94a5d744e0f93aff073bdbb69d0f4e8d9f6/src%2Ftest%2Fui%2Ftypeck%2Fhang-in-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fhang-in-overflow.stderr?ref=bd91c94a5d744e0f93aff073bdbb69d0f4e8d9f6", "patch": "@@ -0,0 +1,22 @@\n+error[E0275]: overflow evaluating the requirement `...`\n+  --> $DIR/hang-in-overflow.rs:9:5\n+   |\n+LL |     foo::<_>();\n+   |     ^^^^^^^^\n+   |\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`hang_in_overflow`)\n+   = note: required for `...` to implement `...`\n+   = note: 127 redundant requirements hidden\n+   = note: required for `...` to implement `...`\n+note: required by a bound in `foo`\n+  --> $DIR/hang-in-overflow.rs:15:28\n+   |\n+LL | fn foo<B>()\n+   |    --- required by a bound in this\n+LL | where\n+LL |     Vec<[[[B; 1]; 1]; 1]>: PartialEq<B>,\n+   |                            ^^^^^^^^^^^^ required by this bound in `foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0275`."}]}