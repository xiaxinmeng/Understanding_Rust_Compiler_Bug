{"sha": "8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNWI1Zjk0ZGNkYjk4ODQ3MzdkZmJjOGVmZDg5M2QxZDcwZjBiMTQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-17T21:31:30Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-17T23:37:30Z"}, "message": "std: Add Default/IntoIterator/ToOwned to the prelude\n\nThis is an implementation of [RFC 1030][rfc] which adds these traits to the\nprelude and additionally removes all inherent `into_iter` methods on collections\nin favor of the trait implementation (which is now accessible by default).\n\n[rfc]: https://github.com/rust-lang/rfcs/pull/1030\n\nThis is technically a breaking change due to the prelude additions and removal\nof inherent methods, but it is expected that essentially no code breaks in\npractice.\n\n[breaking-change]\nCloses #24538", "tree": {"sha": "58fb1909672648a664d2b02125d1d6c94191b075", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58fb1909672648a664d2b02125d1d6c94191b075"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "html_url": "https://github.com/rust-lang/rust/commit/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d2ac9b1e15f2a2c0963060f476d0478be1acdc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d2ac9b1e15f2a2c0963060f476d0478be1acdc3", "html_url": "https://github.com/rust-lang/rust/commit/9d2ac9b1e15f2a2c0963060f476d0478be1acdc3"}], "stats": {"total": 530, "additions": 241, "deletions": 289}, "files": [{"sha": "93af336ce0a1a4fc8ba69456224c84636ecc2722", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "patch": "@@ -77,7 +77,6 @@ use core::atomic;\n use core::atomic::Ordering::{Relaxed, Release, Acquire, SeqCst};\n use core::fmt;\n use core::cmp::Ordering;\n-use core::default::Default;\n use core::mem::{min_align_of, size_of};\n use core::mem;\n use core::nonzero::NonZero;"}, {"sha": "e293a024f8e0899478a316a0b52f151a7ede88b6", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "patch": "@@ -50,7 +50,6 @@ use core::prelude::*;\n \n use core::any::Any;\n use core::cmp::Ordering;\n-use core::default::Default;\n use core::fmt;\n use core::hash::{self, Hash};\n use core::mem;"}, {"sha": "0f05e5796aa15fb044a173337e989472b7449982", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "patch": "@@ -152,8 +152,7 @@\n \n use core::prelude::*;\n \n-use core::default::Default;\n-use core::iter::{FromIterator, IntoIterator};\n+use core::iter::{FromIterator};\n use core::mem::{zeroed, replace, swap};\n use core::ptr;\n \n@@ -250,28 +249,6 @@ impl<T: Ord> BinaryHeap<T> {\n         Iter { iter: self.data.iter() }\n     }\n \n-    /// Creates a consuming iterator, that is, one that moves each value out of\n-    /// the binary heap in arbitrary order. The binary heap cannot be used\n-    /// after calling this.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// # #![feature(collections)]\n-    /// use std::collections::BinaryHeap;\n-    /// let heap = BinaryHeap::from_vec(vec![1, 2, 3, 4]);\n-    ///\n-    /// // Print 1, 2, 3, 4 in arbitrary order\n-    /// for x in heap.into_iter() {\n-    ///     // x has type i32, not &i32\n-    ///     println!(\"{}\", x);\n-    /// }\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn into_iter(self) -> IntoIter<T> {\n-        IntoIter { iter: self.data.into_iter() }\n-    }\n-\n     /// Returns the greatest item in the binary heap, or `None` if it is empty.\n     ///\n     /// # Examples\n@@ -675,8 +652,25 @@ impl<T: Ord> IntoIterator for BinaryHeap<T> {\n     type Item = T;\n     type IntoIter = IntoIter<T>;\n \n+    /// Creates a consuming iterator, that is, one that moves each value out of\n+    /// the binary heap in arbitrary order. The binary heap cannot be used\n+    /// after calling this.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(collections)]\n+    /// use std::collections::BinaryHeap;\n+    /// let heap = BinaryHeap::from_vec(vec![1, 2, 3, 4]);\n+    ///\n+    /// // Print 1, 2, 3, 4 in arbitrary order\n+    /// for x in heap.into_iter() {\n+    ///     // x has type i32, not &i32\n+    ///     println!(\"{}\", x);\n+    /// }\n+    /// ```\n     fn into_iter(self) -> IntoIter<T> {\n-        self.into_iter()\n+        IntoIter { iter: self.data.into_iter() }\n     }\n }\n "}, {"sha": "a72f628e10d97e5552a82177beab51fca575a5d3", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "patch": "@@ -85,12 +85,11 @@ use core::prelude::*;\n \n use core::cmp::Ordering;\n use core::cmp;\n-use core::default::Default;\n use core::fmt;\n use core::hash;\n use core::iter::RandomAccessIterator;\n use core::iter::{Chain, Enumerate, Repeat, Skip, Take, repeat, Cloned};\n-use core::iter::{self, FromIterator, IntoIterator};\n+use core::iter::{self, FromIterator};\n use core::ops::Index;\n use core::slice;\n use core::{u8, u32, usize};"}, {"sha": "bd4028db42e0f66d4f5fb9108d165b9e8c467a01", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 26, "deletions": 32, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "patch": "@@ -20,10 +20,9 @@ use self::Entry::*;\n use core::prelude::*;\n \n use core::cmp::Ordering;\n-use core::default::Default;\n use core::fmt::Debug;\n use core::hash::{Hash, Hasher};\n-use core::iter::{Map, FromIterator, IntoIterator};\n+use core::iter::{Map, FromIterator};\n use core::ops::Index;\n use core::{iter, fmt, mem, usize};\n use Bound::{self, Included, Excluded, Unbounded};\n@@ -472,8 +471,32 @@ impl<K, V> IntoIterator for BTreeMap<K, V> {\n     type Item = (K, V);\n     type IntoIter = IntoIter<K, V>;\n \n+    /// Gets an owning iterator over the entries of the map.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeMap;\n+    ///\n+    /// let mut map = BTreeMap::new();\n+    /// map.insert(1, \"a\");\n+    /// map.insert(2, \"b\");\n+    /// map.insert(3, \"c\");\n+    ///\n+    /// for (key, value) in map.into_iter() {\n+    ///     println!(\"{}: {}\", key, value);\n+    /// }\n+    /// ```\n     fn into_iter(self) -> IntoIter<K, V> {\n-        self.into_iter()\n+        let len = self.len();\n+        let mut lca = VecDeque::new();\n+        lca.push_back(Traverse::traverse(self.root));\n+        IntoIter {\n+            inner: AbsIter {\n+                traversals: lca,\n+                size: len,\n+            }\n+        }\n     }\n }\n \n@@ -1264,35 +1287,6 @@ impl<K, V> BTreeMap<K, V> {\n         }\n     }\n \n-    /// Gets an owning iterator over the entries of the map.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::BTreeMap;\n-    ///\n-    /// let mut map = BTreeMap::new();\n-    /// map.insert(1, \"a\");\n-    /// map.insert(2, \"b\");\n-    /// map.insert(3, \"c\");\n-    ///\n-    /// for (key, value) in map.into_iter() {\n-    ///     println!(\"{}: {}\", key, value);\n-    /// }\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn into_iter(self) -> IntoIter<K, V> {\n-        let len = self.len();\n-        let mut lca = VecDeque::new();\n-        lca.push_back(Traverse::traverse(self.root));\n-        IntoIter {\n-            inner: AbsIter {\n-                traversals: lca,\n-                size: len,\n-            }\n-        }\n-    }\n-\n     /// Gets an iterator over the keys of the map.\n     ///\n     /// # Examples"}, {"sha": "fc346151e0b4bf70415f6d36176e1a70130b2a3f", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "patch": "@@ -14,10 +14,9 @@\n use core::prelude::*;\n \n use core::cmp::Ordering::{self, Less, Greater, Equal};\n-use core::default::Default;\n use core::fmt::Debug;\n use core::fmt;\n-use core::iter::{Peekable, Map, FromIterator, IntoIterator};\n+use core::iter::{Peekable, Map, FromIterator};\n use core::ops::{BitOr, BitAnd, BitXor, Sub};\n \n use borrow::Borrow;\n@@ -132,27 +131,6 @@ impl<T> BTreeSet<T> {\n     pub fn iter(&self) -> Iter<T> {\n         Iter { iter: self.map.keys() }\n     }\n-\n-    /// Gets an iterator for moving out the BtreeSet's contents.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// # #![feature(core)]\n-    /// use std::collections::BTreeSet;\n-    ///\n-    /// let set: BTreeSet<usize> = [1, 2, 3, 4].iter().cloned().collect();\n-    ///\n-    /// let v: Vec<usize> = set.into_iter().collect();\n-    /// assert_eq!(v, [1, 2, 3, 4]);\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn into_iter(self) -> IntoIter<T> {\n-        fn first<A, B>((a, _): (A, B)) -> A { a }\n-        let first: fn((T, ())) -> T = first; // coerce to fn pointer\n-\n-        IntoIter { iter: self.map.into_iter().map(first) }\n-    }\n }\n \n impl<T: Ord> BTreeSet<T> {\n@@ -500,8 +478,24 @@ impl<T> IntoIterator for BTreeSet<T> {\n     type Item = T;\n     type IntoIter = IntoIter<T>;\n \n+    /// Gets an iterator for moving out the BtreeSet's contents.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(core)]\n+    /// use std::collections::BTreeSet;\n+    ///\n+    /// let set: BTreeSet<usize> = [1, 2, 3, 4].iter().cloned().collect();\n+    ///\n+    /// let v: Vec<usize> = set.into_iter().collect();\n+    /// assert_eq!(v, [1, 2, 3, 4]);\n+    /// ```\n     fn into_iter(self) -> IntoIter<T> {\n-        self.into_iter()\n+        fn first<A, B>((a, _): (A, B)) -> A { a }\n+        let first: fn((T, ())) -> T = first; // coerce to fn pointer\n+\n+        IntoIter { iter: self.map.into_iter().map(first) }\n     }\n }\n "}, {"sha": "e6cdb88d3e1746eb90872a1fb7a2a896a06b4e4f", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "patch": "@@ -16,7 +16,7 @@\n use core::prelude::*;\n use core::marker;\n use core::fmt;\n-use core::iter::{FromIterator, IntoIterator};\n+use core::iter::{FromIterator};\n use core::ops::{Sub, BitOr, BitAnd, BitXor};\n \n // FIXME(contentions): implement union family of methods? (general design may be wrong here)"}, {"sha": "deb1476c23f096375fce6fd7cfeb919e5e322ed4", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "patch": "@@ -25,10 +25,9 @@ use core::prelude::*;\n \n use alloc::boxed::Box;\n use core::cmp::Ordering;\n-use core::default::Default;\n use core::fmt;\n use core::hash::{Hasher, Hash};\n-use core::iter::{self, FromIterator, IntoIterator};\n+use core::iter::{self, FromIterator};\n use core::mem;\n use core::ptr;\n \n@@ -296,13 +295,6 @@ impl<T> LinkedList<T> {\n         }\n     }\n \n-    /// Consumes the list into an iterator yielding elements by value.\n-    #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn into_iter(self) -> IntoIter<T> {\n-        IntoIter{list: self}\n-    }\n-\n     /// Returns `true` if the `LinkedList` is empty.\n     ///\n     /// This operation should compute in O(1) time.\n@@ -852,8 +844,10 @@ impl<T> IntoIterator for LinkedList<T> {\n     type Item = T;\n     type IntoIter = IntoIter<T>;\n \n+    /// Consumes the list into an iterator yielding elements by value.\n+    #[inline]\n     fn into_iter(self) -> IntoIter<T> {\n-        self.into_iter()\n+        IntoIter{list: self}\n     }\n }\n \n@@ -941,7 +935,7 @@ impl<A: Hash> Hash for LinkedList<A> {\n #[cfg(test)]\n mod test {\n     use std::clone::Clone;\n-    use std::iter::Iterator;\n+    use std::iter::{Iterator, IntoIterator};\n     use std::option::Option::{Some, None, self};\n     use std::__rand::{thread_rng, Rng};\n     use std::thread;"}, {"sha": "864801ab0b730fa315ad1b8ce51a61c10bd55d5e", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "patch": "@@ -16,14 +16,14 @@\n \n use core::prelude::*;\n \n-use core::default::Default;\n use core::fmt;\n use core::hash;\n-use core::iter::{IntoIterator, FromIterator};\n+use core::iter::FromIterator;\n use core::mem;\n use core::ops::{self, Deref, Add, Index};\n use core::ptr;\n use core::slice;\n+#[allow(deprecated)] use core::str::Str;\n use core::str::pattern::Pattern;\n use unicode::str as unicode_str;\n use unicode::str::Utf16Item;"}, {"sha": "3e08096e16612867499f80089cde7c20426e0e41", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 29, "deletions": 35, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "patch": "@@ -53,18 +53,17 @@ use alloc::boxed::Box;\n use alloc::heap::{EMPTY, allocate, reallocate, deallocate};\n use core::cmp::max;\n use core::cmp::Ordering;\n-use core::default::Default;\n use core::fmt;\n use core::hash::{self, Hash};\n use core::intrinsics::assume;\n-use core::iter::{repeat, FromIterator, IntoIterator};\n+use core::iter::{repeat, FromIterator};\n use core::marker::PhantomData;\n use core::mem;\n use core::ops::{Index, IndexMut, Deref, Add};\n use core::ops;\n use core::ptr;\n use core::ptr::Unique;\n-use core::slice;\n+use core::slice::{self, AsSlice};\n use core::isize;\n use core::usize;\n \n@@ -450,37 +449,6 @@ impl<T> Vec<T> {\n         &mut self[..]\n     }\n \n-    /// Creates a consuming iterator, that is, one that moves each value out of\n-    /// the vector (from start to end). The vector cannot be used after calling\n-    /// this.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// let v = vec![\"a\".to_string(), \"b\".to_string()];\n-    /// for s in v.into_iter() {\n-    ///     // s has type String, not &String\n-    ///     println!(\"{}\", s);\n-    /// }\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn into_iter(self) -> IntoIter<T> {\n-        unsafe {\n-            let ptr = *self.ptr;\n-            assume(!ptr.is_null());\n-            let cap = self.cap;\n-            let begin = ptr as *const T;\n-            let end = if mem::size_of::<T>() == 0 {\n-                (ptr as usize + self.len()) as *const T\n-            } else {\n-                ptr.offset(self.len() as isize) as *const T\n-            };\n-            mem::forget(self);\n-            IntoIter { allocation: ptr, cap: cap, ptr: begin, end: end }\n-        }\n-    }\n-\n     /// Sets the length of a vector.\n     ///\n     /// This will explicitly set the size of the vector, without actually\n@@ -1512,8 +1480,34 @@ impl<T> IntoIterator for Vec<T> {\n     type Item = T;\n     type IntoIter = IntoIter<T>;\n \n+    /// Creates a consuming iterator, that is, one that moves each value out of\n+    /// the vector (from start to end). The vector cannot be used after calling\n+    /// this.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let v = vec![\"a\".to_string(), \"b\".to_string()];\n+    /// for s in v.into_iter() {\n+    ///     // s has type String, not &String\n+    ///     println!(\"{}\", s);\n+    /// }\n+    /// ```\n+    #[inline]\n     fn into_iter(self) -> IntoIter<T> {\n-        self.into_iter()\n+        unsafe {\n+            let ptr = *self.ptr;\n+            assume(!ptr.is_null());\n+            let cap = self.cap;\n+            let begin = ptr as *const T;\n+            let end = if mem::size_of::<T>() == 0 {\n+                (ptr as usize + self.len()) as *const T\n+            } else {\n+                ptr.offset(self.len() as isize) as *const T\n+            };\n+            mem::forget(self);\n+            IntoIter { allocation: ptr, cap: cap, ptr: begin, end: end }\n+        }\n     }\n }\n "}, {"sha": "fcb06b5631ab379dfb6171d72bbd72b64a3ea7cf", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "patch": "@@ -21,9 +21,8 @@\n use core::prelude::*;\n \n use core::cmp::Ordering;\n-use core::default::Default;\n use core::fmt;\n-use core::iter::{self, repeat, FromIterator, IntoIterator, RandomAccessIterator};\n+use core::iter::{self, repeat, FromIterator, RandomAccessIterator};\n use core::mem;\n use core::ops::{Index, IndexMut};\n use core::ptr::{self, Unique};\n@@ -560,14 +559,6 @@ impl<T> VecDeque<T> {\n         }\n     }\n \n-    /// Consumes the list into a front-to-back iterator yielding elements by value.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn into_iter(self) -> IntoIter<T> {\n-        IntoIter {\n-            inner: self,\n-        }\n-    }\n-\n     /// Returns a pair of slices which contain, in order, the contents of the\n     /// `VecDeque`.\n     #[inline]\n@@ -1731,8 +1722,12 @@ impl<T> IntoIterator for VecDeque<T> {\n     type Item = T;\n     type IntoIter = IntoIter<T>;\n \n+    /// Consumes the list into a front-to-back iterator yielding elements by\n+    /// value.\n     fn into_iter(self) -> IntoIter<T> {\n-        self.into_iter()\n+        IntoIter {\n+            inner: self,\n+        }\n     }\n }\n "}, {"sha": "d9cffc74dddda2ea571c2d1485b13879714fe4cf", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 26, "deletions": 32, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "patch": "@@ -18,10 +18,9 @@ use self::Entry::*;\n use core::prelude::*;\n \n use core::cmp::{max, Ordering};\n-use core::default::Default;\n use core::fmt;\n use core::hash::{Hash, Hasher};\n-use core::iter::{Enumerate, FilterMap, Map, FromIterator, IntoIterator};\n+use core::iter::{Enumerate, FilterMap, Map, FromIterator};\n use core::iter;\n use core::mem::{replace, swap};\n use core::ops::{Index, IndexMut};\n@@ -302,35 +301,6 @@ impl<V> VecMap<V> {\n         }\n     }\n \n-    /// Returns an iterator visiting all key-value pairs in ascending order of\n-    /// the keys, consuming the original `VecMap`.\n-    /// The iterator's element type is `(usize, &'r V)`.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// # #![feature(collections)]\n-    /// use std::collections::VecMap;\n-    ///\n-    /// let mut map = VecMap::new();\n-    /// map.insert(1, \"a\");\n-    /// map.insert(3, \"c\");\n-    /// map.insert(2, \"b\");\n-    ///\n-    /// let vec: Vec<(usize, &str)> = map.into_iter().collect();\n-    ///\n-    /// assert_eq!(vec, [(1, \"a\"), (2, \"b\"), (3, \"c\")]);\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn into_iter(self) -> IntoIter<V> {\n-        fn filter<A>((i, v): (usize, Option<A>)) -> Option<(usize, A)> {\n-            v.map(|v| (i, v))\n-        }\n-        let filter: fn((usize, Option<V>)) -> Option<(usize, V)> = filter; // coerce to fn ptr\n-\n-        IntoIter { iter: self.v.into_iter().enumerate().filter_map(filter) }\n-    }\n-\n     /// Moves all elements from `other` into the map while overwriting existing keys.\n     ///\n     /// # Examples\n@@ -802,8 +772,32 @@ impl<T> IntoIterator for VecMap<T> {\n     type Item = (usize, T);\n     type IntoIter = IntoIter<T>;\n \n+    /// Returns an iterator visiting all key-value pairs in ascending order of\n+    /// the keys, consuming the original `VecMap`.\n+    /// The iterator's element type is `(usize, &'r V)`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(collections)]\n+    /// use std::collections::VecMap;\n+    ///\n+    /// let mut map = VecMap::new();\n+    /// map.insert(1, \"a\");\n+    /// map.insert(3, \"c\");\n+    /// map.insert(2, \"b\");\n+    ///\n+    /// let vec: Vec<(usize, &str)> = map.into_iter().collect();\n+    ///\n+    /// assert_eq!(vec, [(1, \"a\"), (2, \"b\"), (3, \"c\")]);\n+    /// ```\n     fn into_iter(self) -> IntoIter<T> {\n-        self.into_iter()\n+        fn filter<A>((i, v): (usize, Option<A>)) -> Option<(usize, A)> {\n+            v.map(|v| (i, v))\n+        }\n+        let filter: fn((usize, Option<T>)) -> Option<(usize, T)> = filter; // coerce to fn ptr\n+\n+        IntoIter { iter: self.v.into_iter().enumerate().filter_map(filter) }\n     }\n }\n "}, {"sha": "e848a44e01ce0ef267e6f1d7df00c0e7df5c90ab", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "patch": "@@ -62,7 +62,6 @@\n \n use prelude::*;\n \n-use default::Default;\n use mem;\n \n pub use self::sip::SipHasher;"}, {"sha": "0bff9b0ba42c5641b975855ea9b2762e0aa02a9a", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "patch": "@@ -15,7 +15,6 @@\n #![allow(deprecated)] // until the next snapshot for inherent wrapping ops\n \n use prelude::*;\n-use default::Default;\n use super::Hasher;\n \n /// An implementation of SipHash 2-4."}, {"sha": "d1bc24bd9baa5d433906b708c25986302c7c81f4", "filename": "src/libcore/option.rs", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "patch": "@@ -551,25 +551,6 @@ impl<T> Option<T> {\n         IterMut { inner: Item { opt: self.as_mut() } }\n     }\n \n-    /// Returns a consuming iterator over the possibly contained value.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// let x = Some(\"string\");\n-    /// let v: Vec<&str> = x.into_iter().collect();\n-    /// assert_eq!(v, [\"string\"]);\n-    ///\n-    /// let x = None;\n-    /// let v: Vec<&str> = x.into_iter().collect();\n-    /// assert!(v.is_empty());\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn into_iter(self) -> IntoIter<T> {\n-        IntoIter { inner: Item { opt: self } }\n-    }\n-\n     /////////////////////////////////////////////////////////////////////////\n     // Boolean operations on the values, eager and lazy\n     /////////////////////////////////////////////////////////////////////////\n@@ -770,6 +751,30 @@ impl<T> Default for Option<T> {\n     fn default() -> Option<T> { None }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T> IntoIterator for Option<T> {\n+    type Item = T;\n+    type IntoIter = IntoIter<T>;\n+\n+    /// Returns a consuming iterator over the possibly contained value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = Some(\"string\");\n+    /// let v: Vec<&str> = x.into_iter().collect();\n+    /// assert_eq!(v, [\"string\"]);\n+    ///\n+    /// let x = None;\n+    /// let v: Vec<&str> = x.into_iter().collect();\n+    /// assert!(v.is_empty());\n+    /// ```\n+    #[inline]\n+    fn into_iter(self) -> IntoIter<T> {\n+        IntoIter { inner: Item { opt: self } }\n+    }\n+}\n+\n /////////////////////////////////////////////////////////////////////////////\n // The Option Iterators\n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "a4d529ad47d09036fe32366fd9bd3150db89f4a6", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "patch": "@@ -37,11 +37,10 @@ pub use char::CharExt;\n pub use clone::Clone;\n pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n pub use convert::{AsRef, AsMut, Into, From};\n+pub use default::Default;\n+pub use iter::IntoIterator;\n pub use iter::{Iterator, DoubleEndedIterator, Extend, ExactSizeIterator};\n pub use option::Option::{self, Some, None};\n pub use result::Result::{self, Ok, Err};\n pub use slice::SliceExt;\n pub use str::StrExt;\n-\n-#[allow(deprecated)] pub use slice::AsSlice;\n-#[allow(deprecated)] pub use str::Str;"}, {"sha": "3ffff8de892cd9b16a9e702a544e1696f83610cb", "filename": "src/libcore/result.rs", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "patch": "@@ -547,25 +547,6 @@ impl<T, E> Result<T, E> {\n         IterMut { inner: self.as_mut().ok() }\n     }\n \n-    /// Returns a consuming iterator over the possibly contained value.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// let x: Result<u32, &str> = Ok(5);\n-    /// let v: Vec<u32> = x.into_iter().collect();\n-    /// assert_eq!(v, [5]);\n-    ///\n-    /// let x: Result<u32, &str> = Err(\"nothing!\");\n-    /// let v: Vec<u32> = x.into_iter().collect();\n-    /// assert_eq!(v, []);\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn into_iter(self) -> IntoIter<T> {\n-        IntoIter { inner: self.ok() }\n-    }\n-\n     ////////////////////////////////////////////////////////////////////////\n     // Boolean operations on the values, eager and lazy\n     /////////////////////////////////////////////////////////////////////////\n@@ -807,6 +788,30 @@ impl<T, E> AsSlice<T> for Result<T, E> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T, E> IntoIterator for Result<T, E> {\n+    type Item = T;\n+    type IntoIter = IntoIter<T>;\n+\n+    /// Returns a consuming iterator over the possibly contained value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x: Result<u32, &str> = Ok(5);\n+    /// let v: Vec<u32> = x.into_iter().collect();\n+    /// assert_eq!(v, [5]);\n+    ///\n+    /// let x: Result<u32, &str> = Err(\"nothing!\");\n+    /// let v: Vec<u32> = x.into_iter().collect();\n+    /// assert_eq!(v, []);\n+    /// ```\n+    #[inline]\n+    fn into_iter(self) -> IntoIter<T> {\n+        IntoIter { inner: self.ok() }\n+    }\n+}\n+\n /////////////////////////////////////////////////////////////////////////////\n // The Result Iterators\n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "ea084b2816dd1f349e8a38ff0073841a91cfb498", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "patch": "@@ -14,7 +14,6 @@\n use core::prelude::*;\n \n use {Rng, SeedableRng};\n-use core::default::Default;\n \n /// How many bytes of entropy the underling RNG is allowed to generate\n /// before it is reseeded.\n@@ -126,7 +125,6 @@ mod test {\n \n     use core::iter::{order, repeat};\n     use super::{ReseedingRng, ReseedWithDefault};\n-    use std::default::Default;\n     use {SeedableRng, Rng};\n \n     struct Counter {"}, {"sha": "512eb6086dd41d3858578a12bd6fa6215df7790a", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 23, "deletions": 28, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "patch": "@@ -916,33 +916,6 @@ impl<K, V, S> HashMap<K, V, S>\n         IterMut { inner: self.table.iter_mut() }\n     }\n \n-    /// Creates a consuming iterator, that is, one that moves each key-value\n-    /// pair out of the map in arbitrary order. The map cannot be used after\n-    /// calling this.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::HashMap;\n-    ///\n-    /// let mut map = HashMap::new();\n-    /// map.insert(\"a\", 1);\n-    /// map.insert(\"b\", 2);\n-    /// map.insert(\"c\", 3);\n-    ///\n-    /// // Not possible with .iter()\n-    /// let vec: Vec<(&str, isize)> = map.into_iter().collect();\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn into_iter(self) -> IntoIter<K, V> {\n-        fn last_two<A, B, C>((_, b, c): (A, B, C)) -> (B, C) { (b, c) }\n-        let last_two: fn((SafeHash, K, V)) -> (K, V) = last_two;\n-\n-        IntoIter {\n-            inner: self.table.into_iter().map(last_two)\n-        }\n-    }\n-\n     /// Gets the given key's corresponding entry in the map for in-place manipulation.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn entry(&mut self, key: K) -> Entry<K, V> {\n@@ -1391,8 +1364,30 @@ impl<K, V, S> IntoIterator for HashMap<K, V, S>\n     type Item = (K, V);\n     type IntoIter = IntoIter<K, V>;\n \n+    /// Creates a consuming iterator, that is, one that moves each key-value\n+    /// pair out of the map in arbitrary order. The map cannot be used after\n+    /// calling this.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map = HashMap::new();\n+    /// map.insert(\"a\", 1);\n+    /// map.insert(\"b\", 2);\n+    /// map.insert(\"c\", 3);\n+    ///\n+    /// // Not possible with .iter()\n+    /// let vec: Vec<(&str, isize)> = map.into_iter().collect();\n+    /// ```\n     fn into_iter(self) -> IntoIter<K, V> {\n-        self.into_iter()\n+        fn last_two<A, B, C>((_, b, c): (A, B, C)) -> (B, C) { (b, c) }\n+        let last_two: fn((SafeHash, K, V)) -> (K, V) = last_two;\n+\n+        IntoIter {\n+            inner: self.table.into_iter().map(last_two)\n+        }\n     }\n }\n "}, {"sha": "c51fceddd538c57bc72528cb12a964b8712bcd91", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 24, "deletions": 29, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "patch": "@@ -271,34 +271,6 @@ impl<T, S> HashSet<T, S>\n         Iter { iter: self.map.keys() }\n     }\n \n-    /// Creates a consuming iterator, that is, one that moves each value out\n-    /// of the set in arbitrary order. The set cannot be used after calling\n-    /// this.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::HashSet;\n-    /// let mut set = HashSet::new();\n-    /// set.insert(\"a\".to_string());\n-    /// set.insert(\"b\".to_string());\n-    ///\n-    /// // Not possible to collect to a Vec<String> with a regular `.iter()`.\n-    /// let v: Vec<String> = set.into_iter().collect();\n-    ///\n-    /// // Will print in an arbitrary order.\n-    /// for x in v.iter() {\n-    ///     println!(\"{}\", x);\n-    /// }\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn into_iter(self) -> IntoIter<T> {\n-        fn first<A, B>((a, _): (A, B)) -> A { a }\n-        let first: fn((T, ())) -> T = first;\n-\n-        IntoIter { iter: self.map.into_iter().map(first) }\n-    }\n-\n     /// Visit the values representing the difference.\n     ///\n     /// # Examples\n@@ -850,8 +822,31 @@ impl<T, S> IntoIterator for HashSet<T, S>\n     type Item = T;\n     type IntoIter = IntoIter<T>;\n \n+    /// Creates a consuming iterator, that is, one that moves each value out\n+    /// of the set in arbitrary order. The set cannot be used after calling\n+    /// this.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    /// let mut set = HashSet::new();\n+    /// set.insert(\"a\".to_string());\n+    /// set.insert(\"b\".to_string());\n+    ///\n+    /// // Not possible to collect to a Vec<String> with a regular `.iter()`.\n+    /// let v: Vec<String> = set.into_iter().collect();\n+    ///\n+    /// // Will print in an arbitrary order.\n+    /// for x in v.iter() {\n+    ///     println!(\"{}\", x);\n+    /// }\n+    /// ```\n     fn into_iter(self) -> IntoIter<T> {\n-        self.into_iter()\n+        fn first<A, B>((a, _): (A, B)) -> A { a }\n+        let first: fn((T, ())) -> T = first;\n+\n+        IntoIter { iter: self.map.into_iter().map(first) }\n     }\n }\n "}, {"sha": "c66be35f3f6eb4cfb9ac281b85d24b3d40f70dd9", "filename": "src/libstd/env.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "patch": "@@ -18,7 +18,6 @@\n \n use prelude::v1::*;\n \n-use iter::IntoIterator;\n use error::Error;\n use ffi::{OsStr, OsString};\n use fmt;"}, {"sha": "46efd378cc68096f7fd5cfa7836a4cd9d1dca2ee", "filename": "src/libstd/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "patch": "@@ -103,7 +103,7 @@ use core::prelude::*;\n use ascii::*;\n use borrow::{Borrow, IntoCow, ToOwned, Cow};\n use cmp;\n-use iter::{self, IntoIterator};\n+use iter;\n use mem;\n use ops::{self, Deref};\n use string::String;"}, {"sha": "6dc11c505a914a6f76b597e3fa53d8d5c194a8cf", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "patch": "@@ -26,17 +26,19 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use boxed::Box;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(no_inline)] pub use borrow::ToOwned;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use clone::Clone;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n-#[unstable(feature = \"convert\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use convert::{AsRef, AsMut, Into, From};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(no_inline)] pub use iter::DoubleEndedIterator;\n+#[doc(no_inline)] pub use default::Default;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(no_inline)] pub use iter::ExactSizeIterator;\n+#[doc(no_inline)] pub use iter::{Iterator, Extend, IntoIterator};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(no_inline)] pub use iter::{Iterator, Extend};\n+#[doc(no_inline)] pub use iter::{DoubleEndedIterator, ExactSizeIterator};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use option::Option::{self, Some, None};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "631e47edb78fde72649806d0c140b465daaaead0", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "patch": "@@ -35,7 +35,7 @@ use borrow::Cow;\n use cmp;\n use fmt;\n use hash::{Hash, Hasher};\n-use iter::{FromIterator, IntoIterator};\n+use iter::FromIterator;\n use mem;\n #[allow(deprecated)] // Int\n use num::Int;"}, {"sha": "e3340d9767d02c1e52d86c59a0926f928e049ee7", "filename": "src/test/run-pass/issue-21245.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Ftest%2Frun-pass%2Fissue-21245.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14/src%2Ftest%2Frun-pass%2Fissue-21245.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21245.rs?ref=8f5b5f94dcdb9884737dfbc8efd893d1d70f0b14", "patch": "@@ -20,19 +20,19 @@ use std::ptr;\n trait IntoIterator {\n     type Iter: Iterator;\n \n-    fn into_iter(self) -> Self::Iter;\n+    fn into_iter2(self) -> Self::Iter;\n }\n \n impl<I> IntoIterator for I where I: Iterator {\n     type Iter = I;\n \n-    fn into_iter(self) -> I {\n+    fn into_iter2(self) -> I {\n         self\n     }\n }\n \n fn desugared_for_loop_bad<T>(v: Vec<T>) {\n-    match IntoIterator::into_iter(v.iter()) {\n+    match IntoIterator::into_iter2(v.iter()) {\n         mut iter => {\n             loop {\n                 match ::std::iter::Iterator::next(&mut iter) {"}]}