{"sha": "33f98ada02cccb58f700b1b26059ae63d75917c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZjk4YWRhMDJjY2NiNThmNzAwYjFiMjYwNTlhZTYzZDc1OTE3YzQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-04-29T14:55:28Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-04-30T00:35:20Z"}, "message": "regex: General style tweaks.\n\nFor loops are nicer than manual whiles, etc.", "tree": {"sha": "1d6be5fe950a9a8f9e2c6d5f87d9ad6050819290", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d6be5fe950a9a8f9e2c6d5f87d9ad6050819290"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33f98ada02cccb58f700b1b26059ae63d75917c4", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33f98ada02cccb58f700b1b26059ae63d75917c4", "html_url": "https://github.com/rust-lang/rust/commit/33f98ada02cccb58f700b1b26059ae63d75917c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33f98ada02cccb58f700b1b26059ae63d75917c4/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de14a739ae27088acaa3c5e21949a39bffd5313b", "url": "https://api.github.com/repos/rust-lang/rust/commits/de14a739ae27088acaa3c5e21949a39bffd5313b", "html_url": "https://github.com/rust-lang/rust/commit/de14a739ae27088acaa3c5e21949a39bffd5313b"}], "stats": {"total": 39, "additions": 12, "deletions": 27}, "files": [{"sha": "b40968283bd50ddc42309410a2bc02dcff5cf906", "filename": "src/libregex/re.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/33f98ada02cccb58f700b1b26059ae63d75917c4/src%2Flibregex%2Fre.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33f98ada02cccb58f700b1b26059ae63d75917c4/src%2Flibregex%2Fre.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fre.rs?ref=33f98ada02cccb58f700b1b26059ae63d75917c4", "patch": "@@ -477,14 +477,13 @@ impl Regex {\n                    (&self, text: &str, limit: uint, mut rep: R) -> StrBuf {\n         let mut new = StrBuf::with_capacity(text.len());\n         let mut last_match = 0u;\n-        let mut i = 0;\n-        for cap in self.captures_iter(text) {\n+\n+        for (i, cap) in self.captures_iter(text).enumerate() {\n             // It'd be nicer to use the 'take' iterator instead, but it seemed\n             // awkward given that '0' => no limit.\n             if limit > 0 && i >= limit {\n                 break\n             }\n-            i += 1;\n \n             let (s, e) = cap.pos(0).unwrap(); // captures only reports matches\n             new.push_str(text.slice(last_match, s));\n@@ -800,7 +799,7 @@ impl<'r, 't> Iterator<Captures<'t>> for FindCaptures<'r, 't> {\n \n         // Don't accept empty matches immediately following a match.\n         // i.e., no infinite loops please.\n-        if e - s == 0 && Some(self.last_end) == self.last_match {\n+        if e == s && Some(self.last_end) == self.last_match {\n             self.last_end += 1;\n             return self.next()\n         }\n@@ -842,7 +841,7 @@ impl<'r, 't> Iterator<(uint, uint)> for FindMatches<'r, 't> {\n \n         // Don't accept empty matches immediately following a match.\n         // i.e., no infinite loops please.\n-        if e - s == 0 && Some(self.last_end) == self.last_match {\n+        if e == s && Some(self.last_end) == self.last_match {\n             self.last_end += 1;\n             return self.next()\n         }"}, {"sha": "ea89c8986930eb17f4841c9482912ca205f1939d", "filename": "src/libregex/vm.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/33f98ada02cccb58f700b1b26059ae63d75917c4/src%2Flibregex%2Fvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33f98ada02cccb58f700b1b26059ae63d75917c4/src%2Flibregex%2Fvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fvm.rs?ref=33f98ada02cccb58f700b1b26059ae63d75917c4", "patch": "@@ -169,17 +169,15 @@ impl<'r, 't> Nfa<'r, 't> {\n             self.ic = next_ic;\n             next_ic = self.chars.advance();\n \n-            let mut i = 0;\n-            while i < clist.size {\n+            for i in range(0, clist.size) {\n                 let pc = clist.pc(i);\n                 let step_state = self.step(groups.as_mut_slice(), nlist,\n                                            clist.groups(i), pc);\n                 match step_state {\n                     StepMatchEarlyReturn => return vec![Some(0), Some(0)],\n-                    StepMatch => { matched = true; clist.empty() },\n+                    StepMatch => { matched = true; break },\n                     StepContinue => {},\n                 }\n-                i += 1;\n             }\n             mem::swap(&mut clist, &mut nlist);\n             nlist.empty();\n@@ -226,7 +224,7 @@ impl<'r, 't> Nfa<'r, 't> {\n                     let found = ranges.as_slice();\n                     let found = found.bsearch(|&rc| class_cmp(casei, c, rc));\n                     let found = found.is_some();\n-                    if (found && !negate) || (!found && negate) {\n+                    if found ^ negate {\n                         self.add(nlist, pc+1, caps);\n                     }\n                 }\n@@ -568,20 +566,10 @@ pub fn find_prefix(needle: &[u8], haystack: &[u8]) -> Option<uint> {\n     if nlen > hlen || nlen == 0 {\n         return None\n     }\n-    let mut hayi = 0u;\n-    'HAYSTACK: loop {\n-        if hayi > hlen - nlen {\n-            break\n+    for (offset, window) in haystack.windows(nlen).enumerate() {\n+        if window == needle {\n+            return Some(offset)\n         }\n-        let mut nedi = 0;\n-        while nedi < nlen {\n-            if haystack[hayi+nedi] != needle[nedi] {\n-                hayi += 1;\n-                continue 'HAYSTACK\n-            }\n-            nedi += 1;\n-        }\n-        return Some(hayi)\n     }\n     None\n }"}, {"sha": "8b134d5af8bbc3ed89ef47c34f68538ec43b9c77", "filename": "src/libregex_macros/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33f98ada02cccb58f700b1b26059ae63d75917c4/src%2Flibregex_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33f98ada02cccb58f700b1b26059ae63d75917c4/src%2Flibregex_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex_macros%2Flib.rs?ref=33f98ada02cccb58f700b1b26059ae63d75917c4", "patch": "@@ -187,18 +187,16 @@ fn exec<'t>(which: ::regex::native::MatchKind, input: &'t str,\n                 self.ic = next_ic;\n                 next_ic = self.chars.advance();\n \n-                let mut i = 0;\n-                while i < clist.size {\n+                for i in range(0, clist.size) {\n                     let pc = clist.pc(i);\n                     let step_state = self.step(&mut groups, nlist,\n                                                clist.groups(i), pc);\n                     match step_state {\n                         StepMatchEarlyReturn =>\n                             return vec![Some(0u), Some(0u)],\n-                        StepMatch => { matched = true; clist.empty() },\n+                        StepMatch => { matched = true; break },\n                         StepContinue => {},\n                     }\n-                    i += 1;\n                 }\n                 ::std::mem::swap(&mut clist, &mut nlist);\n                 nlist.empty();"}]}