{"sha": "c9e234a1ae7b631ca058f2331a3986630b5d1b64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZTIzNGExYWU3YjYzMWNhMDU4ZjIzMzFhMzk4NjYzMGI1ZDFiNjQ=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-06-14T01:16:25Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-06-14T19:37:53Z"}, "message": "Tweak terminfo::parm::expand function signature\n\nTake a new struct Variables instead of two &mut [] vectors for static\nand dynamic variables.", "tree": {"sha": "2061cae2f68849d4ce98b22b6a5af56adecba65f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2061cae2f68849d4ce98b22b6a5af56adecba65f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9e234a1ae7b631ca058f2331a3986630b5d1b64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9e234a1ae7b631ca058f2331a3986630b5d1b64", "html_url": "https://github.com/rust-lang/rust/commit/c9e234a1ae7b631ca058f2331a3986630b5d1b64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9e234a1ae7b631ca058f2331a3986630b5d1b64/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f9e50540581881a3c3a7304eaa2577afda59048", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f9e50540581881a3c3a7304eaa2577afda59048", "html_url": "https://github.com/rust-lang/rust/commit/9f9e50540581881a3c3a7304eaa2577afda59048"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "f09c00ccce2e5475d6a9a819cd9f3a6da220c3d6", "filename": "src/libextra/term.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9e234a1ae7b631ca058f2331a3986630b5d1b64/src%2Flibextra%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e234a1ae7b631ca058f2331a3986630b5d1b64/src%2Flibextra%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterm.rs?ref=c9e234a1ae7b631ca058f2331a3986630b5d1b64", "patch": "@@ -20,7 +20,7 @@ use core::os;\n use terminfo::*;\n use terminfo::searcher::open;\n use terminfo::parser::compiled::parse;\n-use terminfo::parm::{expand, Number};\n+use terminfo::parm::{expand, Number, Variables};\n \n // FIXME (#2807): Windows support.\n \n@@ -84,7 +84,7 @@ impl Terminal {\n     pub fn fg(&self, color: u8) {\n         if self.color_supported {\n             let s = expand(*self.ti.strings.find_equiv(&(\"setaf\")).unwrap(),\n-                           [Number(color as int)], [], []);\n+                           [Number(color as int)], &mut Variables::new());\n             if s.is_ok() {\n                 self.out.write(s.get());\n             } else {\n@@ -95,7 +95,7 @@ impl Terminal {\n     pub fn bg(&self, color: u8) {\n         if self.color_supported {\n             let s = expand(*self.ti.strings.find_equiv(&(\"setab\")).unwrap(),\n-                           [Number(color as int)], [], []);\n+                           [Number(color as int)], &mut Variables::new());\n             if s.is_ok() {\n                 self.out.write(s.get());\n             } else {\n@@ -105,7 +105,7 @@ impl Terminal {\n     }\n     pub fn reset(&self) {\n         if self.color_supported {\n-            let s = expand(*self.ti.strings.find_equiv(&(\"op\")).unwrap(), [], [], []);\n+            let s = expand(*self.ti.strings.find_equiv(&(\"op\")).unwrap(), [], &mut Variables::new());\n             if s.is_ok() {\n                 self.out.write(s.get());\n             } else {"}, {"sha": "c6bb4e60628b7053104222f92e049584bc83ea2e", "filename": "src/libextra/terminfo/parm.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c9e234a1ae7b631ca058f2331a3986630b5d1b64/src%2Flibextra%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e234a1ae7b631ca058f2331a3986630b5d1b64/src%2Flibextra%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparm.rs?ref=c9e234a1ae7b631ca058f2331a3986630b5d1b64", "patch": "@@ -34,26 +34,37 @@ pub enum Param {\n     Number(int)\n }\n \n+/// Container for static and dynamic variable arrays\n+pub struct Variables {\n+    /// Static variables A-Z\n+    sta: [Param, ..26],\n+    /// Dynamic variables a-z\n+    dyn: [Param, ..26]\n+}\n+\n+impl Variables {\n+    /// Return a new zero-initialized Variables\n+    pub fn new() -> Variables {\n+        Variables{ sta: [Number(0), ..26], dyn: [Number(0), ..26] }\n+    }\n+}\n+\n /**\n   Expand a parameterized capability\n \n   # Arguments\n   * `cap`    - string to expand\n   * `params` - vector of params for %p1 etc\n-  * `sta`    - vector of params corresponding to static variables\n-  * `dyn`    - vector of params corresponding to stativ variables\n+  * `vars`   - Variables struct for %Pa etc\n \n-  To be compatible with ncurses, `sta` and `dyn` should be the same between calls to `expand` for\n+  To be compatible with ncurses, `vars` should be the same between calls to `expand` for\n   multiple capabilities for the same terminal.\n   */\n-pub fn expand(cap: &[u8], params: &mut [Param], sta: &mut [Param], dyn: &mut [Param])\n+pub fn expand(cap: &[u8], params: &mut [Param], vars: &mut Variables)\n     -> Result<~[u8], ~str> {\n     assert!(cap.len() != 0, \"expanding an empty capability makes no sense\");\n     assert!(params.len() <= 9, \"only 9 parameters are supported by capability strings\");\n \n-    assert!(sta.len() <= 26, \"only 26 static vars are able to be used by capability strings\");\n-    assert!(dyn.len() <= 26, \"only 26 dynamic vars are able to be used by capability strings\");\n-\n     let mut state = Nothing;\n     let mut i = 0;\n \n@@ -170,21 +181,21 @@ pub fn expand(cap: &[u8], params: &mut [Param], sta: &mut [Param], dyn: &mut [Pa\n             SetVar => {\n                 if cur >= 'A' && cur <= 'Z' {\n                     let idx = (cur as u8) - ('A' as u8);\n-                    sta[idx] = stack.pop();\n+                    vars.sta[idx] = stack.pop();\n                 } else if cur >= 'a' && cur <= 'z' {\n                     let idx = (cur as u8) - ('a' as u8);\n-                    dyn[idx] = stack.pop();\n+                    vars.dyn[idx] = stack.pop();\n                 } else {\n                     return Err(~\"bad variable name in %P\");\n                 }\n             },\n             GetVar => {\n                 if cur >= 'A' && cur <= 'Z' {\n                     let idx = (cur as u8) - ('A' as u8);\n-                    stack.push(copy sta[idx]);\n+                    stack.push(copy vars.sta[idx]);\n                 } else if cur >= 'a' && cur <= 'z' {\n                     let idx = (cur as u8) - ('a' as u8);\n-                    stack.push(copy dyn[idx]);\n+                    stack.push(copy vars.dyn[idx]);\n                 } else {\n                     return Err(~\"bad variable name in %g\");\n                 }\n@@ -222,6 +233,6 @@ mod test {\n     #[test]\n     fn test_basic_setabf() {\n         let s = bytes!(\"\\\\E[48;5;%p1%dm\");\n-        assert_eq!(expand(s, [Number(1)], [], []).unwrap(), bytes!(\"\\\\E[48;5;1m\").to_owned());\n+        assert_eq!(expand(s, [Number(1)], &mut Variables::new()).unwrap(), bytes!(\"\\\\E[48;5;1m\").to_owned());\n     }\n }"}]}