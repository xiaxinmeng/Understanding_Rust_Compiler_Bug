{"sha": "ce982a35e18e08b81a1524435f390b291f6e32b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlOTgyYTM1ZTE4ZTA4YjgxYTE1MjQ0MzVmMzkwYjI5MWY2ZTMyYjg=", "commit": {"author": {"name": "Taylor Yu", "email": "tlyu@mit.edu", "date": "2021-06-01T00:58:15Z"}, "committer": {"name": "Taylor Yu", "email": "tlyu@mit.edu", "date": "2021-06-18T19:16:23Z"}, "message": "debug for suggest_unsized_bound_if_applicable", "tree": {"sha": "1435413955233129081095b5b1791c2b2e9a3ff6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1435413955233129081095b5b1791c2b2e9a3ff6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce982a35e18e08b81a1524435f390b291f6e32b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce982a35e18e08b81a1524435f390b291f6e32b8", "html_url": "https://github.com/rust-lang/rust/commit/ce982a35e18e08b81a1524435f390b291f6e32b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce982a35e18e08b81a1524435f390b291f6e32b8/comments", "author": {"login": "tlyu", "id": 431873, "node_id": "MDQ6VXNlcjQzMTg3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/431873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlyu", "html_url": "https://github.com/tlyu", "followers_url": "https://api.github.com/users/tlyu/followers", "following_url": "https://api.github.com/users/tlyu/following{/other_user}", "gists_url": "https://api.github.com/users/tlyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlyu/subscriptions", "organizations_url": "https://api.github.com/users/tlyu/orgs", "repos_url": "https://api.github.com/users/tlyu/repos", "events_url": "https://api.github.com/users/tlyu/events{/privacy}", "received_events_url": "https://api.github.com/users/tlyu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tlyu", "id": 431873, "node_id": "MDQ6VXNlcjQzMTg3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/431873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlyu", "html_url": "https://github.com/tlyu", "followers_url": "https://api.github.com/users/tlyu/followers", "following_url": "https://api.github.com/users/tlyu/following{/other_user}", "gists_url": "https://api.github.com/users/tlyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlyu/subscriptions", "organizations_url": "https://api.github.com/users/tlyu/orgs", "repos_url": "https://api.github.com/users/tlyu/repos", "events_url": "https://api.github.com/users/tlyu/events{/privacy}", "received_events_url": "https://api.github.com/users/tlyu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e062e5d34ee80e0d5da403e8c5609f29e6a7dbcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e062e5d34ee80e0d5da403e8c5609f29e6a7dbcb", "html_url": "https://github.com/rust-lang/rust/commit/e062e5d34ee80e0d5da403e8c5609f29e6a7dbcb"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "f522e272ecf66a92e4be6b327982ff07b92dc726", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce982a35e18e08b81a1524435f390b291f6e32b8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce982a35e18e08b81a1524435f390b291f6e32b8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=ce982a35e18e08b81a1524435f390b291f6e32b8", "patch": "@@ -1763,7 +1763,10 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 ) => (pred, item_def_id, span),\n                 _ => return,\n             };\n-\n+        debug!(\n+            \"suggest_unsized_bound_if_applicable: pred={:?} item_def_id={:?} span={:?}\",\n+            pred, item_def_id, span\n+        );\n         let node = match (\n             self.tcx.hir().get_if_local(item_def_id),\n             Some(pred.def_id()) == self.tcx.lang_items().sized_trait(),\n@@ -1775,6 +1778,11 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n             Some(generics) => generics,\n             None => return,\n         };\n+        debug!(\"suggest_unsized_bound_if_applicable: generics.params={:?}\", generics.params);\n+        debug!(\n+            \"suggest_unsized_bound_if_applicable: generics.where_clause={:?}\",\n+            generics.where_clause\n+        );\n         for param in generics.params {\n             if param.span != span\n                 || param.bounds.iter().any(|bound| {\n@@ -1784,6 +1792,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n             {\n                 continue;\n             }\n+            debug!(\"suggest_unsized_bound_if_applicable: param={:?}\", param);\n             match node {\n                 hir::Node::Item(\n                     item\n@@ -1895,6 +1904,7 @@ impl<'v> Visitor<'v> for FindTypeParam {\n                 if path.segments.len() == 1 && path.segments[0].ident.name == self.param =>\n             {\n                 if !self.nested {\n+                    debug!(\"FindTypeParam::visit_ty: ty={:?}\", ty);\n                     self.invalid_spans.push(ty.span);\n                 }\n             }"}]}