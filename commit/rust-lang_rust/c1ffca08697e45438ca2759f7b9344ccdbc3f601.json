{"sha": "c1ffca08697e45438ca2759f7b9344ccdbc3f601", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZmZjYTA4Njk3ZTQ1NDM4Y2EyNzU5ZjdiOTM0NGNjZGJjM2Y2MDE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-07-16T08:08:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-16T08:08:05Z"}, "message": "Rollup merge of #87069 - sexxi-goose:copy_ref_always, r=nikomatsakis\n\nExprUseVisitor: Treat ByValue use of Copy types as ImmBorrow\n\nr? ```@nikomatsakis```", "tree": {"sha": "e22cf19774e8e485c1af33a6995e5b311b9a03bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e22cf19774e8e485c1af33a6995e5b311b9a03bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1ffca08697e45438ca2759f7b9344ccdbc3f601", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg8T5lCRBK7hj4Ov3rIwAAfegIAIET1HJgPSOysJrvaiv62pkd\ncWGaLevwTaa4pTCEV746pPtiDV7xg44zZutPaXWIN4+//wq86vfEtqipLwmPZ1Y9\nnTPVzuts69uoIhqCNYtt+QjV7mgeHXeMalYIizc6ltdG8Dq5kSD279QG7kultH1I\nZX8/pfs1mUsPunAuSu1r4FgC/fjw9RJ5QcmcrxvU8sOzufLvSZnr/c+DUPNRCXOJ\naXyTCI3m7IuceYPv6pqBTQV2xXq+eIukliYasaAOcrYcu1BFEP8bzF2pMZatmHko\n6Bfdipz2d4cCLYNbPdxRMyW8ZKrrBKwr09QgFf50bRH45jf3MgJA3qiDzkwRECc=\n=oV+C\n-----END PGP SIGNATURE-----\n", "payload": "tree e22cf19774e8e485c1af33a6995e5b311b9a03bf\nparent f4e47ba3f1213dfb4143a078fc3df3a127e4adb6\nparent 75291ee92453bb97a36d999dfce4bb7e0fea27c9\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1626422885 +0200\ncommitter GitHub <noreply@github.com> 1626422885 +0200\n\nRollup merge of #87069 - sexxi-goose:copy_ref_always, r=nikomatsakis\n\nExprUseVisitor: Treat ByValue use of Copy types as ImmBorrow\n\nr? ```@nikomatsakis```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1ffca08697e45438ca2759f7b9344ccdbc3f601", "html_url": "https://github.com/rust-lang/rust/commit/c1ffca08697e45438ca2759f7b9344ccdbc3f601", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1ffca08697e45438ca2759f7b9344ccdbc3f601/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4e47ba3f1213dfb4143a078fc3df3a127e4adb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6", "html_url": "https://github.com/rust-lang/rust/commit/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6"}, {"sha": "75291ee92453bb97a36d999dfce4bb7e0fea27c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/75291ee92453bb97a36d999dfce4bb7e0fea27c9", "html_url": "https://github.com/rust-lang/rust/commit/75291ee92453bb97a36d999dfce4bb7e0fea27c9"}], "stats": {"total": 167, "additions": 110, "deletions": 57}, "files": [{"sha": "39874f48eb014071aa5d279b5e3cf48bba7dc5e6", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c1ffca08697e45438ca2759f7b9344ccdbc3f601/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ffca08697e45438ca2759f7b9344ccdbc3f601/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=c1ffca08697e45438ca2759f7b9344ccdbc3f601", "patch": "@@ -1528,20 +1528,11 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n         &mut self,\n         place_with_id: &PlaceWithHirId<'tcx>,\n         diag_expr_id: hir::HirId,\n-        mode: euv::ConsumeMode,\n     ) {\n         debug!(\n-            \"adjust_upvar_borrow_kind_for_consume(place_with_id={:?}, diag_expr_id={:?}, mode={:?})\",\n-            place_with_id, diag_expr_id, mode\n+            \"adjust_upvar_borrow_kind_for_consume(place_with_id={:?}, diag_expr_id={:?})\",\n+            place_with_id, diag_expr_id\n         );\n-\n-        // Copy type being used as ByValue are equivalent to ImmBorrow and don't require any\n-        // escalation.\n-        match mode {\n-            euv::ConsumeMode::Copy => return,\n-            euv::ConsumeMode::Move => {}\n-        };\n-\n         let tcx = self.fcx.tcx;\n         let upvar_id = if let PlaceBase::Upvar(upvar_id) = place_with_id.place.base {\n             upvar_id\n@@ -1716,22 +1707,14 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'tcx> {\n         }\n     }\n \n-    fn consume(\n-        &mut self,\n-        place_with_id: &PlaceWithHirId<'tcx>,\n-        diag_expr_id: hir::HirId,\n-        mode: euv::ConsumeMode,\n-    ) {\n-        debug!(\n-            \"consume(place_with_id={:?}, diag_expr_id={:?}, mode={:?})\",\n-            place_with_id, diag_expr_id, mode\n-        );\n+    fn consume(&mut self, place_with_id: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId) {\n+        debug!(\"consume(place_with_id={:?}, diag_expr_id={:?})\", place_with_id, diag_expr_id);\n \n         if !self.capture_information.contains_key(&place_with_id.place) {\n             self.init_capture_info_for_place(&place_with_id, diag_expr_id);\n         }\n \n-        self.adjust_upvar_borrow_kind_for_consume(&place_with_id, diag_expr_id, mode);\n+        self.adjust_upvar_borrow_kind_for_consume(&place_with_id, diag_expr_id);\n     }\n \n     fn borrow("}, {"sha": "a2bb420a90109510e688dc44a54038d88a83de6a", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 34, "deletions": 20, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c1ffca08697e45438ca2759f7b9344ccdbc3f601/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ffca08697e45438ca2759f7b9344ccdbc3f601/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=c1ffca08697e45438ca2759f7b9344ccdbc3f601", "patch": "@@ -2,8 +2,6 @@\n //! normal visitor, which just walks the entire body in one shot, the\n //! `ExprUseVisitor` determines how expressions are being used.\n \n-pub use self::ConsumeMode::*;\n-\n // Export these here so that Clippy can use them.\n pub use rustc_middle::hir::place::{Place, PlaceBase, PlaceWithHirId, Projection};\n \n@@ -28,19 +26,20 @@ use crate::mem_categorization as mc;\n /// This trait defines the callbacks you can expect to receive when\n /// employing the ExprUseVisitor.\n pub trait Delegate<'tcx> {\n-    // The value found at `place` is either copied or moved, depending\n+    // The value found at `place` is moved, depending\n     // on `mode`. Where `diag_expr_id` is the id used for diagnostics for `place`.\n     //\n+    // Use of a `Copy` type in a ByValue context is considered a use\n+    // by `ImmBorrow` and `borrow` is called instead. This is because\n+    // a shared borrow is the \"minimum access\" that would be needed\n+    // to perform a copy.\n+    //\n+    //\n     // The parameter `diag_expr_id` indicates the HIR id that ought to be used for\n     // diagnostics. Around pattern matching such as `let pat = expr`, the diagnostic\n     // id will be the id of the expression `expr` but the place itself will have\n     // the id of the binding in the pattern `pat`.\n-    fn consume(\n-        &mut self,\n-        place_with_id: &PlaceWithHirId<'tcx>,\n-        diag_expr_id: hir::HirId,\n-        mode: ConsumeMode,\n-    );\n+    fn consume(&mut self, place_with_id: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId);\n \n     // The value found at `place` is being borrowed with kind `bk`.\n     // `diag_expr_id` is the id used for diagnostics (see `consume` for more details).\n@@ -60,7 +59,7 @@ pub trait Delegate<'tcx> {\n }\n \n #[derive(Copy, Clone, PartialEq, Debug)]\n-pub enum ConsumeMode {\n+enum ConsumeMode {\n     Copy, // reference to x where x has a type that copies\n     Move, // reference to x where x has a type that moves\n }\n@@ -141,10 +140,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n     }\n \n     fn delegate_consume(&mut self, place_with_id: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId) {\n-        debug!(\"delegate_consume(place_with_id={:?})\", place_with_id);\n-\n-        let mode = copy_or_move(&self.mc, place_with_id);\n-        self.delegate.consume(place_with_id, diag_expr_id, mode);\n+        delegate_consume(&self.mc, self.delegate, place_with_id, diag_expr_id)\n     }\n \n     fn consume_exprs(&mut self, exprs: &[hir::Expr<'_>]) {\n@@ -653,9 +649,8 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                             delegate.borrow(place, discr_place.hir_id, bk);\n                         }\n                         ty::BindByValue(..) => {\n-                            let mode = copy_or_move(mc, &place);\n                             debug!(\"walk_pat binding consuming pat\");\n-                            delegate.consume(place, discr_place.hir_id, mode);\n+                            delegate_consume(mc, *delegate, place, discr_place.hir_id);\n                         }\n                     }\n                 }\n@@ -773,8 +768,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n \n                     match capture_info.capture_kind {\n                         ty::UpvarCapture::ByValue(_) => {\n-                            let mode = copy_or_move(&self.mc, &place_with_id);\n-                            self.delegate.consume(&place_with_id, place_with_id.hir_id, mode);\n+                            self.delegate_consume(&place_with_id, place_with_id.hir_id);\n                         }\n                         ty::UpvarCapture::ByRef(upvar_borrow) => {\n                             self.delegate.borrow(\n@@ -798,8 +792,28 @@ fn copy_or_move<'a, 'tcx>(\n         place_with_id.place.ty(),\n         mc.tcx().hir().span(place_with_id.hir_id),\n     ) {\n-        Move\n+        ConsumeMode::Move\n     } else {\n-        Copy\n+        ConsumeMode::Copy\n+    }\n+}\n+\n+// - If a place is used in a `ByValue` context then move it if it's not a `Copy` type.\n+// - If the place that is a `Copy` type consider it a `ImmBorrow`.\n+fn delegate_consume<'a, 'tcx>(\n+    mc: &mc::MemCategorizationContext<'a, 'tcx>,\n+    delegate: &mut (dyn Delegate<'tcx> + 'a),\n+    place_with_id: &PlaceWithHirId<'tcx>,\n+    diag_expr_id: hir::HirId,\n+) {\n+    debug!(\"delegate_consume(place_with_id={:?})\", place_with_id);\n+\n+    let mode = copy_or_move(&mc, place_with_id);\n+\n+    match mode {\n+        ConsumeMode::Move => delegate.consume(place_with_id, diag_expr_id),\n+        ConsumeMode::Copy => {\n+            delegate.borrow(place_with_id, diag_expr_id, ty::BorrowKind::ImmBorrow)\n+        }\n     }\n }"}, {"sha": "0e7abf64fab068cacc48300a876c8e61d9c2c08a", "filename": "src/test/ui/closures/2229_closure_analysis/move_closure.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c1ffca08697e45438ca2759f7b9344ccdbc3f601/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ffca08697e45438ca2759f7b9344ccdbc3f601/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.rs?ref=c1ffca08697e45438ca2759f7b9344ccdbc3f601", "patch": "@@ -195,6 +195,21 @@ fn box_mut_2() {\n     //~| NOTE: Min Capture p_foo[Deref,Deref,(0, 0)] -> UniqueImmBorrow\n }\n \n+// Test that move closures can take ownership of Copy type\n+fn returned_closure_owns_copy_type_data() -> impl Fn() -> i32 {\n+    let x = 10;\n+\n+    let c = #[rustc_capture_analysis] move || x;\n+    //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n+    //~| First Pass analysis includes:\n+    //~| NOTE: Capturing x[] -> ImmBorrow\n+    //~| Min Capture analysis includes:\n+    //~| NOTE: Min Capture x[] -> ByValue\n+\n+    c\n+}\n+\n fn main() {\n     simple_move_closure();\n     simple_ref();"}, {"sha": "82ed99f9444d32243ab26af32c74d853ecd94084", "filename": "src/test/ui/closures/2229_closure_analysis/move_closure.stderr", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c1ffca08697e45438ca2759f7b9344ccdbc3f601/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1ffca08697e45438ca2759f7b9344ccdbc3f601/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmove_closure.stderr?ref=c1ffca08697e45438ca2759f7b9344ccdbc3f601", "patch": "@@ -88,6 +88,39 @@ LL |     let c = #[rustc_capture_analysis] move || p_foo.x += 10;\n    = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/move_closure.rs:202:13\n+   |\n+LL |     let c = #[rustc_capture_analysis] move || x;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error: First Pass analysis includes:\n+  --> $DIR/move_closure.rs:202:39\n+   |\n+LL |     let c = #[rustc_capture_analysis] move || x;\n+   |                                       ^^^^^^^^^\n+   |\n+note: Capturing x[] -> ImmBorrow\n+  --> $DIR/move_closure.rs:202:47\n+   |\n+LL |     let c = #[rustc_capture_analysis] move || x;\n+   |                                               ^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/move_closure.rs:202:39\n+   |\n+LL |     let c = #[rustc_capture_analysis] move || x;\n+   |                                       ^^^^^^^^^\n+   |\n+note: Min Capture x[] -> ByValue\n+  --> $DIR/move_closure.rs:202:47\n+   |\n+LL |     let c = #[rustc_capture_analysis] move || x;\n+   |                                               ^\n+\n error: First Pass analysis includes:\n   --> $DIR/move_closure.rs:15:5\n    |\n@@ -424,6 +457,6 @@ note: Min Capture p_foo[Deref,Deref,(0, 0)] -> UniqueImmBorrow\n LL |     let c = #[rustc_capture_analysis] move || p_foo.x += 10;\n    |                                               ^^^^^^^\n \n-error: aborting due to 30 previous errors\n+error: aborting due to 33 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "e1b61e85ec1927d18444a778bcb188820ce67bee", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/move_closure.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c1ffca08697e45438ca2759f7b9344ccdbc3f601/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ffca08697e45438ca2759f7b9344ccdbc3f601/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.rs?ref=c1ffca08697e45438ca2759f7b9344ccdbc3f601", "patch": "@@ -3,6 +3,8 @@\n \n // Test that move closures compile properly with `capture_disjoint_fields` enabled.\n \n+#![allow(unused)]\n+\n fn simple_ref() {\n     let mut s = 10;\n     let ref_s = &mut s;\n@@ -92,6 +94,15 @@ fn data_moved_but_not_fn_once() {\n     c();\n }\n \n+// Test that move closures can take ownership of Copy type\n+fn returned_closure_owns_copy_type_data() -> impl Fn() -> i32 {\n+    let x = 10;\n+\n+    let c = move || x;\n+\n+    c\n+}\n+\n fn main() {\n     simple_ref();\n     struct_contains_ref_to_another_struct();\n@@ -100,4 +111,6 @@ fn main() {\n \n     disjoint_via_ref();\n     data_moved_but_not_fn_once();\n+\n+    returned_closure_owns_copy_type_data();\n }"}, {"sha": "5f400d079da2f1d7b5277e8450703003a6d2a0cc", "filename": "src/tools/clippy/clippy_lints/src/escape.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c1ffca08697e45438ca2759f7b9344ccdbc3f601/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ffca08697e45438ca2759f7b9344ccdbc3f601/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs?ref=c1ffca08697e45438ca2759f7b9344ccdbc3f601", "patch": "@@ -11,7 +11,7 @@ use rustc_span::source_map::Span;\n use rustc_span::symbol::kw;\n use rustc_target::abi::LayoutOf;\n use rustc_target::spec::abi::Abi;\n-use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n+use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n #[derive(Copy, Clone)]\n pub struct BoxedLocal {\n@@ -133,13 +133,10 @@ fn is_argument(map: rustc_middle::hir::map::Map<'_>, id: HirId) -> bool {\n }\n \n impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n-    fn consume(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, mode: ConsumeMode) {\n+    fn consume(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId) {\n         if cmt.place.projections.is_empty() {\n             if let PlaceBase::Local(lid) = cmt.place.base {\n-                if let ConsumeMode::Move = mode {\n-                    // moved out or in. clearly can't be localized\n-                    self.set.remove(&lid);\n-                }\n+                self.set.remove(&lid);\n                 let map = &self.cx.tcx.hir();\n                 if let Some(Node::Binding(_)) = map.find(cmt.hir_id) {\n                     if self.set.contains(&lid) {"}, {"sha": "1e54a1e2de165e8781a4c581606d5da9cbf72efe", "filename": "src/tools/clippy/clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1ffca08697e45438ca2759f7b9344ccdbc3f601/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ffca08697e45438ca2759f7b9344ccdbc3f601/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=c1ffca08697e45438ca2759f7b9344ccdbc3f601", "patch": "@@ -7,7 +7,7 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n use rustc_middle::{mir::FakeReadCause, ty};\n use rustc_span::source_map::Span;\n-use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n+use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>, body: &Expr<'_>) {\n     if let Some(higher::Range {\n@@ -82,7 +82,7 @@ struct MutatePairDelegate<'a, 'tcx> {\n }\n \n impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n-    fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId, _: ConsumeMode) {}\n+    fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId) {}\n \n     fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, diag_expr_id: HirId, bk: ty::BorrowKind) {\n         if let ty::BorrowKind::MutBorrow = bk {"}, {"sha": "57fd03f4e12a68afd6fc8b322cd0b69cf7d599db", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1ffca08697e45438ca2759f7b9344ccdbc3f601/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ffca08697e45438ca2759f7b9344ccdbc3f601/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=c1ffca08697e45438ca2759f7b9344ccdbc3f601", "patch": "@@ -326,10 +326,8 @@ impl MovedVariablesCtxt {\n }\n \n impl<'tcx> euv::Delegate<'tcx> for MovedVariablesCtxt {\n-    fn consume(&mut self, cmt: &euv::PlaceWithHirId<'tcx>, _: HirId, mode: euv::ConsumeMode) {\n-        if let euv::ConsumeMode::Move = mode {\n-            self.move_common(cmt);\n-        }\n+    fn consume(&mut self, cmt: &euv::PlaceWithHirId<'tcx>, _: HirId) {\n+        self.move_common(cmt);\n     }\n \n     fn borrow(&mut self, _: &euv::PlaceWithHirId<'tcx>, _: HirId, _: ty::BorrowKind) {}"}, {"sha": "ac885e9994404b605dd5b0d1c91df3cc45c6b970", "filename": "src/tools/clippy/clippy_utils/src/usage.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1ffca08697e45438ca2759f7b9344ccdbc3f601/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ffca08697e45438ca2759f7b9344ccdbc3f601/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs?ref=c1ffca08697e45438ca2759f7b9344ccdbc3f601", "patch": "@@ -10,7 +10,7 @@ use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty;\n-use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n+use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n /// Returns a set of mutated local variable IDs, or `None` if mutations could not be determined.\n pub fn mutated_variables<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) -> Option<HirIdSet> {\n@@ -67,7 +67,7 @@ impl<'tcx> MutVarsDelegate {\n }\n \n impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n-    fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId, _: ConsumeMode) {}\n+    fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId) {}\n \n     fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, bk: ty::BorrowKind) {\n         if let ty::BorrowKind::MutBorrow = bk {"}]}