{"sha": "94c6f4a868a56667d695db98beff5ec10f294ec9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YzZmNGE4NjhhNTY2NjdkNjk1ZGI5OGJlZmY1ZWMxMGYyOTRlYzk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-09-26T01:39:50Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-09-26T01:39:50Z"}, "message": "Pass dogfood", "tree": {"sha": "c388e61d4067201c869ede832830c8c7eb52c74c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c388e61d4067201c869ede832830c8c7eb52c74c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94c6f4a868a56667d695db98beff5ec10f294ec9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94c6f4a868a56667d695db98beff5ec10f294ec9", "html_url": "https://github.com/rust-lang/rust/commit/94c6f4a868a56667d695db98beff5ec10f294ec9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94c6f4a868a56667d695db98beff5ec10f294ec9/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfc31536c74a30b49ba84c6539620a0aecc1504a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfc31536c74a30b49ba84c6539620a0aecc1504a", "html_url": "https://github.com/rust-lang/rust/commit/bfc31536c74a30b49ba84c6539620a0aecc1504a"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "a0300530a59d2eefa42bb81bf090d765d039d36b", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/94c6f4a868a56667d695db98beff5ec10f294ec9/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c6f4a868a56667d695db98beff5ec10f294ec9/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=94c6f4a868a56667d695db98beff5ec10f294ec9", "patch": "@@ -1328,18 +1328,15 @@ impl<'tcx> Delegate<'tcx> for MutateDelegate {\n     }\n \n     fn borrow(&mut self, _: NodeId, sp: Span, cmt: cmt<'tcx>, _: ty::Region, bk: ty::BorrowKind, _: LoanCause) {\n-        match bk {\n-            ty::BorrowKind::MutBorrow => {\n-                if let Categorization::Local(id) = cmt.cat {\n-                    if Some(id) == self.node_id_low {\n-                        self.span_low = Some(sp)\n-                    }\n-                    if Some(id) == self.node_id_high {\n-                        self.span_high = Some(sp)\n-                    }\n+        if let ty::BorrowKind::MutBorrow = bk {\n+            if let Categorization::Local(id) = cmt.cat {\n+                if Some(id) == self.node_id_low {\n+                    self.span_low = Some(sp)\n                 }\n-            },\n-            _ => (),\n+                if Some(id) == self.node_id_high {\n+                    self.span_high = Some(sp)\n+                }\n+            }\n         }\n     }\n \n@@ -1368,7 +1365,7 @@ fn check_for_mut_range_bound(cx: &LateContext, arg: &Expr, body: &Expr) {\n     if let Some(higher::Range { start: Some(start), end: Some(end), .. }) = higher::range(arg) {\n         let mut_ids = vec![check_for_mutability(cx, start), check_for_mutability(cx, end)];\n         if mut_ids[0].is_some() || mut_ids[1].is_some() {\n-            let (span_low, span_high) = check_for_mutation(cx, body, mut_ids);\n+            let (span_low, span_high) = check_for_mutation(cx, body, &mut_ids);\n             mut_warn_with_span(cx, span_low);\n             mut_warn_with_span(cx, span_high);\n         }\n@@ -1398,15 +1395,15 @@ fn check_for_mutability(cx: &LateContext, bound: &Expr) -> Option<NodeId> {\n             }}\n         }\n     }}\n-    return None;\n+    None\n }\n \n-fn check_for_mutation(cx: &LateContext, body: &Expr, bound_ids: Vec<Option<NodeId>>) -> (Option<Span>, Option<Span>) {\n+fn check_for_mutation(cx: &LateContext, body: &Expr, bound_ids: &[Option<NodeId>]) -> (Option<Span>, Option<Span>) {\n     let mut delegate = MutateDelegate { node_id_low: bound_ids[0], node_id_high: bound_ids[1], span_low: None, span_high: None };\n     let def_id = def_id::DefId::local(body.hir_id.owner);\n     let region_scope_tree = &cx.tcx.region_scope_tree(def_id);\n     ExprUseVisitor::new(&mut delegate, cx.tcx, cx.param_env, region_scope_tree, cx.tables).walk_expr(body);\n-    return delegate.mutation_span();\n+    delegate.mutation_span()\n }\n \n /// Return true if the pattern is a `PatWild` or an ident prefixed with `'_'`."}]}