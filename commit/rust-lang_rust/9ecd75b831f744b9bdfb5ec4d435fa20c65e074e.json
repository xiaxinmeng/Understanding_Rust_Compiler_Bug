{"sha": "9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "node_id": "C_kwDOAAsO6NoAKDllY2Q3NWI4MzFmNzQ0YjliZGZiNWVjNGQ0MzVmYTIwYzY1ZTA3NGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-22T11:10:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-22T11:10:26Z"}, "message": "Auto merge of #94209 - lcnr:print-mir-consts, r=oli-obk\n\nchange `mir::Constant` in mir dumps\n\nthis removes duplicate information and avoids printing the `stable_crate_id` in mir dumps which broke CI in #94059\n\nr? `@oli-obk` cc `@b-naber`", "tree": {"sha": "9f8ead1e6e2b9ce21d94d3b1374c4d4ec244975a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f8ead1e6e2b9ce21d94d3b1374c4d4ec244975a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "html_url": "https://github.com/rust-lang/rust/commit/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58a721af9f818bdf57f86448557b45c5ae19a3ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/58a721af9f818bdf57f86448557b45c5ae19a3ef", "html_url": "https://github.com/rust-lang/rust/commit/58a721af9f818bdf57f86448557b45c5ae19a3ef"}, {"sha": "ee0b56483faecb052c1bb0b08bdc3fc1887bb961", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee0b56483faecb052c1bb0b08bdc3fc1887bb961", "html_url": "https://github.com/rust-lang/rust/commit/ee0b56483faecb052c1bb0b08bdc3fc1887bb961"}], "stats": {"total": 456, "additions": 107, "deletions": 349}, "files": [{"sha": "6886a0f4cf1489bbb1e448b8385ba0218c705822", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 23, "deletions": 32, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -436,8 +436,7 @@ fn use_verbose<'tcx>(ty: Ty<'tcx>, fn_def: bool) -> bool {\n }\n \n impl<'tcx> Visitor<'tcx> for ExtraComments<'tcx> {\n-    fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {\n-        self.super_constant(constant, location);\n+    fn visit_constant(&mut self, constant: &Constant<'tcx>, _location: Location) {\n         let Constant { span, user_ty, literal } = constant;\n         if use_verbose(literal.ty(), true) {\n             self.push(\"mir::Constant\");\n@@ -448,38 +447,30 @@ impl<'tcx> Visitor<'tcx> for ExtraComments<'tcx> {\n             if let Some(user_ty) = user_ty {\n                 self.push(&format!(\"+ user_ty: {:?}\", user_ty));\n             }\n-            match literal {\n-                ConstantKind::Ty(literal) => self.push(&format!(\"+ literal: {:?}\", literal)),\n-                ConstantKind::Val(val, ty) => {\n-                    // To keep the diffs small, we render this almost like we render ty::Const\n-                    self.push(&format!(\"+ literal: Const {{ ty: {}, val: Value({:?}) }}\", ty, val))\n-                }\n-            }\n-        }\n-    }\n \n-    fn visit_const(&mut self, constant: ty::Const<'tcx>, _: Location) {\n-        self.super_const(constant);\n-        let ty = constant.ty();\n-        let val = constant.val();\n-        if use_verbose(ty, false) {\n-            self.push(\"ty::Const\");\n-            self.push(&format!(\"+ ty: {:?}\", ty));\n-            let val = match val {\n-                ty::ConstKind::Param(p) => format!(\"Param({})\", p),\n-                ty::ConstKind::Infer(infer) => format!(\"Infer({:?})\", infer),\n-                ty::ConstKind::Bound(idx, var) => format!(\"Bound({:?}, {:?})\", idx, var),\n-                ty::ConstKind::Placeholder(ph) => format!(\"PlaceHolder({:?})\", ph),\n-                ty::ConstKind::Unevaluated(uv) => format!(\n-                    \"Unevaluated({}, {:?}, {:?})\",\n-                    self.tcx.def_path_str(uv.def.did),\n-                    uv.substs,\n-                    uv.promoted,\n-                ),\n-                ty::ConstKind::Value(val) => format!(\"Value({:?})\", val),\n-                ty::ConstKind::Error(_) => \"Error\".to_string(),\n+            let val = match literal {\n+                ConstantKind::Ty(ct) => match ct.val() {\n+                    ty::ConstKind::Param(p) => format!(\"Param({})\", p),\n+                    ty::ConstKind::Unevaluated(uv) => format!(\n+                        \"Unevaluated({}, {:?}, {:?})\",\n+                        self.tcx.def_path_str(uv.def.did),\n+                        uv.substs,\n+                        uv.promoted,\n+                    ),\n+                    ty::ConstKind::Value(val) => format!(\"Value({:?})\", val),\n+                    ty::ConstKind::Error(_) => \"Error\".to_string(),\n+                    // These variants shouldn't exist in the MIR.\n+                    ty::ConstKind::Placeholder(_)\n+                    | ty::ConstKind::Infer(_)\n+                    | ty::ConstKind::Bound(..) => bug!(\"unexpected MIR constant: {:?}\", literal),\n+                },\n+                // To keep the diffs small, we render this like we render `ty::Const::Value`.\n+                //\n+                // This changes once `ty::Const::Value` is represented using valtrees.\n+                ConstantKind::Val(val, _) => format!(\"Value({:?})\", val),\n             };\n-            self.push(&format!(\"+ val: {}\", val));\n+\n+            self.push(&format!(\"+ literal: Const {{ ty: {}, val: {} }}\", literal.ty(), val));\n         }\n     }\n "}, {"sha": "5b1ffc76fe5b3ebb1296d90935af34f4423a5543", "filename": "src/test/mir-opt/box_expr.main.ElaborateDrops.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -47,7 +47,7 @@ fn main() -> () {\n         _6 = std::mem::drop::<Box<S>>(move _7) -> [return: bb4, unwind: bb6]; // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:8:5: 8:9\n-                                         // + literal: Const { ty: fn(std::boxed::Box<S>) {std::mem::drop::<std::boxed::Box<S>>}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(Box<S>) {std::mem::drop::<Box<S>>}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb4: {"}, {"sha": "073cba5acf4072777b4d32c6696471da69cd8cda", "filename": "src/test/mir-opt/byte_slice.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fbyte_slice.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fbyte_slice.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbyte_slice.main.SimplifyCfg-elaborate-drops.after.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -14,9 +14,6 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/byte_slice.rs:5:9: 5:10\n         _1 = const b\"foo\";               // scope 0 at $DIR/byte_slice.rs:5:13: 5:19\n-                                         // ty::Const\n-                                         // + ty: &[u8; 3]\n-                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/byte_slice.rs:5:13: 5:19\n                                          // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc1)) }"}, {"sha": "f8a8afa92e0e65f3a3e33b2f02e408d5a2a163d6", "filename": "src/test/mir-opt/const_allocation.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -9,12 +9,9 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         _2 = const {alloc1: &&[(Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-                                         // ty::Const\n-                                         // + ty: &&[(std::option::Option<i32>, &[&str])]\n-                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation.rs:8:5: 8:8\n-                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&str])], val: Value(Scalar(alloc1)) }\n+                                         // + literal: Const { ty: &&[(Option<i32>, &[&str])], val: Value(Scalar(alloc1)) }\n         _1 = (*_2);                      // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9"}, {"sha": "1f1d857425e5b3b5c7812f75ef556a4a51a13834", "filename": "src/test/mir-opt/const_allocation.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -9,12 +9,9 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         _2 = const {alloc1: &&[(Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-                                         // ty::Const\n-                                         // + ty: &&[(std::option::Option<i32>, &[&str])]\n-                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation.rs:8:5: 8:8\n-                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&str])], val: Value(Scalar(alloc1)) }\n+                                         // + literal: Const { ty: &&[(Option<i32>, &[&str])], val: Value(Scalar(alloc1)) }\n         _1 = (*_2);                      // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9"}, {"sha": "8b5ad40c9f92c9c475a201c57d873b526af96574", "filename": "src/test/mir-opt/const_allocation2.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -9,12 +9,9 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         _2 = const {alloc1: &&[(Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-                                         // ty::Const\n-                                         // + ty: &&[(std::option::Option<i32>, &[&u8])]\n-                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation2.rs:5:5: 5:8\n-                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&u8])], val: Value(Scalar(alloc1)) }\n+                                         // + literal: Const { ty: &&[(Option<i32>, &[&u8])], val: Value(Scalar(alloc1)) }\n         _1 = (*_2);                      // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9"}, {"sha": "ef651f01c9b98df9f3b3c9091973dce8bdf0b81c", "filename": "src/test/mir-opt/const_allocation2.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -9,12 +9,9 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         _2 = const {alloc1: &&[(Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-                                         // ty::Const\n-                                         // + ty: &&[(std::option::Option<i32>, &[&u8])]\n-                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation2.rs:5:5: 5:8\n-                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&u8])], val: Value(Scalar(alloc1)) }\n+                                         // + literal: Const { ty: &&[(Option<i32>, &[&u8])], val: Value(Scalar(alloc1)) }\n         _1 = (*_2);                      // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9"}, {"sha": "991cf40d1b7ce6884a02dce09cb8ca16c7640a6c", "filename": "src/test/mir-opt/const_allocation3.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -9,9 +9,6 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         _2 = const {alloc1: &&Packed};   // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n-                                         // ty::Const\n-                                         // + ty: &&Packed\n-                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation3.rs:5:5: 5:8\n                                          // + literal: Const { ty: &&Packed, val: Value(Scalar(alloc1)) }"}, {"sha": "fb481697aa8111f414a49a5f99c598bd42d5a9d9", "filename": "src/test/mir-opt/const_allocation3.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -9,9 +9,6 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         _2 = const {alloc1: &&Packed};   // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n-                                         // ty::Const\n-                                         // + ty: &&Packed\n-                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation3.rs:5:5: 5:8\n                                          // + literal: Const { ty: &&Packed, val: Value(Scalar(alloc1)) }"}, {"sha": "7ed25c6c09e96db47c13f65c9b5a7c991ffe595b", "filename": "src/test/mir-opt/const_debuginfo.main.ConstDebugInfo.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -75,9 +75,6 @@\n           StorageDead(_5);                 // scope 3 at $DIR/const_debuginfo.rs:12:23: 12:24\n           StorageLive(_9);                 // scope 4 at $DIR/const_debuginfo.rs:14:9: 14:10\n           _9 = const \"hello, world!\";      // scope 4 at $DIR/const_debuginfo.rs:14:13: 14:28\n-                                           // ty::Const\n-                                           // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [104, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 })\n                                            // mir::Constant\n                                            // + span: $DIR/const_debuginfo.rs:14:13: 14:28\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [104, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }"}, {"sha": "666b805e822c1a5286fb8190c32cc1b376284b1f", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR-promoted[0].SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -8,9 +8,6 @@ promoted[0] in BAR: &[&i32; 1] = {\n \n     bb0: {\n         _3 = const {alloc1: &i32};       // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n-                                         // ty::Const\n-                                         // + ty: &i32\n-                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const-promotion-extern-static.rs:9:33: 9:34\n                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc1)) }"}, {"sha": "816c598059dd5dd0530f36e551b673547dd6604e", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -18,19 +18,14 @@\n -         StorageLive(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n -         _5 = const {alloc1: &i32};       // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n +         _6 = const BAR::promoted[0];     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n-                                           // ty::Const\n--                                          // + ty: &i32\n--                                          // + val: Value(Scalar(alloc1))\n-+                                          // + ty: &[&i32; 1]\n-+                                          // + val: Unevaluated(BAR, [], Some(promoted[0]))\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:9:33: 9:34\n -                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc1)) }\n -         _4 = &(*_5);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n -         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n +                                          // + span: $DIR/const-promotion-extern-static.rs:9:31: 9:44\n-+                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[e01c]::BAR), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n++                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(BAR, [], Some(promoted[0])) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n -         StorageDead(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:34: 9:35"}, {"sha": "785c8386e88b51b447b298e9732d6efd529f8812", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO-promoted[0].SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -8,9 +8,6 @@ promoted[0] in FOO: &[&i32; 1] = {\n \n     bb0: {\n         _3 = const {alloc3: *const i32}; // scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n-                                         // ty::Const\n-                                         // + ty: *const i32\n-                                         // + val: Value(Scalar(alloc3))\n                                          // mir::Constant\n                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n                                          // + literal: Const { ty: *const i32, val: Value(Scalar(alloc3)) }"}, {"sha": "096b427bb758b0fd53646b74f290d0d981fd1b23", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -20,19 +20,14 @@\n -         StorageLive(_5);                 // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n -         _5 = const {alloc3: *const i32}; // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n +         _6 = const FOO::promoted[0];     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n-                                           // ty::Const\n--                                          // + ty: *const i32\n--                                          // + val: Value(Scalar(alloc3))\n-+                                          // + ty: &[&i32; 1]\n-+                                          // + val: Unevaluated(FOO, [], Some(promoted[0]))\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n -                                          // + literal: Const { ty: *const i32, val: Value(Scalar(alloc3)) }\n -         _4 = &(*_5);                     // scope 1 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n -         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n +                                          // + span: $DIR/const-promotion-extern-static.rs:13:31: 13:55\n-+                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[e01c]::FOO), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n++                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(FOO, [], Some(promoted[0])) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n -         StorageDead(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:45: 13:46"}, {"sha": "cda6e751c8ef5dd9cc97e93f106e79ca04866a64", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -26,12 +26,9 @@\n           StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-                                           // ty::Const\n-                                           // + ty: &[i32; 3]\n-                                           // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[fbcf]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n           _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35"}, {"sha": "cda6e751c8ef5dd9cc97e93f106e79ca04866a64", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -26,12 +26,9 @@\n           StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-                                           // ty::Const\n-                                           // + ty: &[i32; 3]\n-                                           // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[fbcf]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n           _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35"}, {"sha": "466c286c9d7c9d8c07ec627987ea03a43ee27d38", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -17,12 +17,9 @@\n           StorageLive(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:30\n           StorageLive(_3);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n           _3 = const FOO;                  // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n-                                           // ty::Const\n-                                           // + ty: &i32\n-                                           // + val: Unevaluated(FOO, [], None)\n                                            // mir::Constant\n                                            // + span: $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ const_prop_fails_gracefully[809a]::main::FOO), const_param_did: None }, substs: [], promoted: None }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(FOO, [], None) }\n           _2 = &raw const (*_3);           // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n           _1 = move _2 as usize (Misc);    // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:39\n           StorageDead(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:38: 7:39"}, {"sha": "49f6c1041576395aa8d8decc175a9f624ade23e5", "filename": "src/test/mir-opt/const_prop/control_flow_simplification.hello.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -19,10 +19,7 @@\n           begin_panic::<&str>(const \"explicit panic\"); // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n-                                           // ty::Const\n-                                           // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 })\n+                                           // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }"}, {"sha": "f2a1b9d69e1adf05279cf9d73864bb90ad435962", "filename": "src/test/mir-opt/const_prop/invalid_constant.main.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -26,37 +26,27 @@\n           StorageLive(_1);                 // scope 0 at $DIR/invalid_constant.rs:21:9: 21:22\n -         _1 = const { InvalidChar { int: 0x110001 } }; // scope 0 at $DIR/invalid_constant.rs:21:25: 21:64\n +         _1 = const InvalidChar { int: 1114113_u32, chr: {transmute(0x00110001): char} }; // scope 0 at $DIR/invalid_constant.rs:21:25: 21:64\n-                                           // ty::Const\n-                                           // + ty: main::InvalidChar\n--                                          // + val: Unevaluated(main::{constant#0}, [main::InvalidChar], None)\n-+                                          // + val: Value(Scalar(0x00110001))\n                                            // mir::Constant\n                                            // + span: $DIR/invalid_constant.rs:21:25: 21:64\n--                                          // + literal: Const { ty: main::InvalidChar, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:7 ~ invalid_constant[726d]::main::{constant#0}), const_param_did: None }, substs: [main::InvalidChar], promoted: None }) }\n-+                                          // + literal: Const { ty: main::InvalidChar, val: Value(Scalar(0x00110001)) }\n+-                                          // + literal: Const { ty: InvalidChar, val: Unevaluated(main::{constant#0}, [main::InvalidChar], None) }\n++                                          // + literal: Const { ty: InvalidChar, val: Value(Scalar(0x00110001)) }\n           StorageLive(_2);                 // scope 1 at $DIR/invalid_constant.rs:28:9: 28:21\n           StorageLive(_3);                 // scope 1 at $DIR/invalid_constant.rs:28:25: 28:46\n           (_3.0: u32) = const 4_u32;       // scope 1 at $DIR/invalid_constant.rs:28:25: 28:46\n -         _2 = [move _3];                  // scope 1 at $DIR/invalid_constant.rs:28:24: 28:47\n +         _2 = [const InvalidTag { int: 4_u32, e: Scalar(0x00000004): E }]; // scope 1 at $DIR/invalid_constant.rs:28:24: 28:47\n-+                                          // ty::Const\n-+                                          // + ty: main::InvalidTag\n-+                                          // + val: Value(Scalar(0x00000004))\n +                                          // mir::Constant\n +                                          // + span: $DIR/invalid_constant.rs:28:24: 28:47\n-+                                          // + literal: Const { ty: main::InvalidTag, val: Value(Scalar(0x00000004)) }\n++                                          // + literal: Const { ty: InvalidTag, val: Value(Scalar(0x00000004)) }\n           StorageDead(_3);                 // scope 1 at $DIR/invalid_constant.rs:28:46: 28:47\n           StorageLive(_4);                 // scope 2 at $DIR/invalid_constant.rs:35:9: 35:31\n           StorageLive(_5);                 // scope 2 at $DIR/invalid_constant.rs:35:35: 35:56\n           (_5.0: u32) = const 0_u32;       // scope 2 at $DIR/invalid_constant.rs:35:35: 35:56\n -         _4 = [move _5];                  // scope 2 at $DIR/invalid_constant.rs:35:34: 35:57\n +         _4 = [const NoVariants { int: 0_u32, empty: Scalar(<ZST>): Empty }]; // scope 2 at $DIR/invalid_constant.rs:35:34: 35:57\n-+                                          // ty::Const\n-+                                          // + ty: main::NoVariants\n-+                                          // + val: Value(Scalar(0x00000000))\n +                                          // mir::Constant\n +                                          // + span: $DIR/invalid_constant.rs:35:34: 35:57\n-+                                          // + literal: Const { ty: main::NoVariants, val: Value(Scalar(0x00000000)) }\n++                                          // + literal: Const { ty: NoVariants, val: Value(Scalar(0x00000000)) }\n           StorageDead(_5);                 // scope 2 at $DIR/invalid_constant.rs:35:56: 35:57\n           StorageLive(_6);                 // scope 3 at $DIR/invalid_constant.rs:39:9: 39:22\n           nop;                             // scope 0 at $DIR/invalid_constant.rs:15:11: 42:2"}, {"sha": "1fd92ddd461905413f4b81d75dedf1bfba77ac51", "filename": "src/test/mir-opt/const_prop/mutable_variable_no_prop.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -24,9 +24,6 @@\n           StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n           StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n           _4 = const {alloc1: *mut u32};   // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n-                                           // ty::Const\n-                                           // + ty: *mut u32\n-                                           // + val: Value(Scalar(alloc1))\n                                            // mir::Constant\n                                            // + span: $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n                                            // + literal: Const { ty: *mut u32, val: Value(Scalar(alloc1)) }"}, {"sha": "15b3e076642584104f43aee81f5a6bff35e856f8", "filename": "src/test/mir-opt/const_prop/read_immutable_static.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -17,9 +17,6 @@\n           StorageLive(_2);                 // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n           StorageLive(_3);                 // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n           _3 = const {alloc1: &u8};        // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n-                                           // ty::Const\n-                                           // + ty: &u8\n-                                           // + val: Value(Scalar(alloc1))\n                                            // mir::Constant\n                                            // + span: $DIR/read_immutable_static.rs:7:13: 7:16\n                                            // + literal: Const { ty: &u8, val: Value(Scalar(alloc1)) }\n@@ -28,9 +25,6 @@\n           StorageLive(_4);                 // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n           StorageLive(_5);                 // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n           _5 = const {alloc1: &u8};        // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n-                                           // ty::Const\n-                                           // + ty: &u8\n-                                           // + val: Value(Scalar(alloc1))\n                                            // mir::Constant\n                                            // + span: $DIR/read_immutable_static.rs:7:19: 7:22\n                                            // + literal: Const { ty: &u8, val: Value(Scalar(alloc1)) }"}, {"sha": "07ace0d6b576d04484b3d154c7b2d8fbee738a7c", "filename": "src/test/mir-opt/const_prop/ref_deref.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -12,12 +12,9 @@\n           StorageLive(_1);                 // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n           StorageLive(_2);                 // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n           _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n-                                           // ty::Const\n-                                           // + ty: &i32\n-                                           // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref.rs:5:6: 5:10\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[d561]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n           _2 = _4;                         // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n -         _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n +         _1 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:5:5: 5:10"}, {"sha": "aed13d8ec02ecac9ef6b481520e239d25e614c5d", "filename": "src/test/mir-opt/const_prop/ref_deref.main.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -15,12 +15,9 @@\n -         _3 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:5:8: 5:9\n -         _2 = &_3;                        // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n +         _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n-+                                          // ty::Const\n-+                                          // + ty: &i32\n-+                                          // + val: Unevaluated(main, [], Some(promoted[0]))\n +                                          // mir::Constant\n +                                          // + span: $DIR/ref_deref.rs:5:6: 5:10\n-+                                          // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[d561]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n++                                          // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n +         _2 = &(*_4);                     // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n -         StorageDead(_3);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11"}, {"sha": "bbd0ec1a33687224dbdf0981d454c1b4ab1fc92e", "filename": "src/test/mir-opt/const_prop/ref_deref_project.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -12,12 +12,9 @@\n           StorageLive(_1);                 // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n           StorageLive(_2);                 // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n           _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n-                                           // ty::Const\n-                                           // + ty: &(i32, i32)\n-                                           // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n-                                           // + literal: Const { ty: &(i32, i32), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[d1f7]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &(i32, i32), val: Unevaluated(main, [], Some(promoted[0])) }\n           _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n           StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18"}, {"sha": "2df963556a9eec6dd5319d44b92167ba0f3b0d55", "filename": "src/test/mir-opt/const_prop/ref_deref_project.main.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -15,12 +15,9 @@\n -         _3 = (const 4_i32, const 5_i32); // scope 0 at $DIR/ref_deref_project.rs:5:8: 5:14\n -         _2 = &(_3.1: i32);               // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n +         _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n-+                                          // ty::Const\n-+                                          // + ty: &(i32, i32)\n-+                                          // + val: Unevaluated(main, [], Some(promoted[0]))\n +                                          // mir::Constant\n +                                          // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n-+                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[d1f7]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n++                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(main, [], Some(promoted[0])) }\n +         _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n -         StorageDead(_3);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18"}, {"sha": "5366d233505d20cac4bb1e34e1bab68198bfb7f5", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -20,12 +20,9 @@\n           StorageLive(_3);                 // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-                                           // ty::Const\n-                                           // + ty: &[u32; 3]\n-                                           // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n-                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[7261]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           StorageLive(_10);                // scope 0 at $DIR/slice_len.rs:5:6: 5:19"}, {"sha": "5366d233505d20cac4bb1e34e1bab68198bfb7f5", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -20,12 +20,9 @@\n           StorageLive(_3);                 // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n-                                           // ty::Const\n-                                           // + ty: &[u32; 3]\n-                                           // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n-                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[7261]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           StorageLive(_10);                // scope 0 at $DIR/slice_len.rs:5:6: 5:19"}, {"sha": "01714c0a46c72f8c19170a651c8e781b9b3ed183", "filename": "src/test/mir-opt/deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -27,7 +27,7 @@\n +         _2 = transmute::<&str, &[u8]>(move _8) -> bb12; // scope 2 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n                                            // mir::Constant\n                                            // + span: $DIR/deduplicate_blocks.rs:3:11: 3:23\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&str) -> &[u8] {std::intrinsics::transmute::<&str, &[u8]>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&str) -> &[u8] {transmute::<&str, &[u8]>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {"}, {"sha": "92024692472ae259fb8f1b1bf07a73d39e735f7b", "filename": "src/test/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -41,7 +41,7 @@\n           _4 = Formatter::sign_plus(move _5) -> bb1; // scope 0 at $DIR/funky_arms.rs:15:22: 15:37\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:15:26: 15:35\n-                                           // + literal: Const { ty: for<'r> fn(&'r std::fmt::Formatter) -> bool {std::fmt::Formatter::sign_plus}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r> fn(&'r Formatter) -> bool {Formatter::sign_plus}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n@@ -67,7 +67,7 @@\n           _7 = Formatter::precision(move _8) -> bb5; // scope 2 at $DIR/funky_arms.rs:24:30: 24:45\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:24:34: 24:43\n-                                           // + literal: Const { ty: for<'r> fn(&'r std::fmt::Formatter) -> std::option::Option<usize> {std::fmt::Formatter::precision}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r> fn(&'r Formatter) -> Option<usize> {Formatter::precision}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb5: {\n@@ -98,7 +98,7 @@\n           _0 = float_to_exponential_common_exact::<T>(move _11, move _12, move _13, move _14, move _17) -> bb7; // scope 2 at $DIR/funky_arms.rs:26:9: 26:87\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:26:9: 26:42\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut std::fmt::Formatter<'s>, &'t0 T, core::num::flt2dec::Sign, u32, bool) -> std::result::Result<(), std::fmt::Error> {float_to_exponential_common_exact::<T>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut Formatter<'s>, &'t0 T, Sign, u32, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_exact::<T>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb7: {\n@@ -123,7 +123,7 @@\n           _0 = float_to_exponential_common_shortest::<T>(move _18, move _19, move _20, move _21) -> bb9; // scope 2 at $DIR/funky_arms.rs:28:9: 28:68\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:28:9: 28:45\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut std::fmt::Formatter<'s>, &'t0 T, core::num::flt2dec::Sign, bool) -> std::result::Result<(), std::fmt::Error> {float_to_exponential_common_shortest::<T>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut Formatter<'s>, &'t0 T, Sign, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_shortest::<T>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb9: {"}, {"sha": "5624e379bfd27efbb1c5fa85701b4c4952eb9e27", "filename": "src/test/mir-opt/inline/cycle.f.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -16,7 +16,7 @@\n           _2 = <impl Fn() as Fn<()>>::call(move _3, move _4) -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/cycle.rs:6:5: 6:8\n                                            // mir::Constant\n                                            // + span: $DIR/cycle.rs:6:5: 6:6\n-                                           // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn(), ()) -> <impl Fn() as std::ops::FnOnce<()>>::Output {<impl Fn() as std::ops::Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn(), ()) -> <impl Fn() as FnOnce<()>>::Output {<impl Fn() as Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {"}, {"sha": "d4f078e2a8a84dd767ddafbcbed2bdbcf568f679", "filename": "src/test/mir-opt/inline/inline_diverging.g.Inline.diff", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -40,10 +40,7 @@\n -                                          // + span: $DIR/inline-diverging.rs:16:9: 16:14\n -                                          // + literal: Const { ty: fn() -> ! {panic}, val: Value(Scalar(<ZST>)) }\n +                                          // + span: $DIR/inline-diverging.rs:16:9: 16:16\n-+                                          // + literal: Const { ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n-+                                          // ty::Const\n-+                                          // + ty: &str\n-+                                          // + val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 })\n++                                          // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n +                                          // mir::Constant\n +                                          // + span: $DIR/inline-diverging.rs:16:9: 16:16\n +                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }"}, {"sha": "3effe92d314a32db38d530c01210678e3fb71342", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -40,7 +40,7 @@\n -         _4 = g() -> bb1;                 // scope 0 at $DIR/inline-generator.rs:9:28: 9:31\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-generator.rs:9:28: 9:29\n--                                          // + literal: Const { ty: fn() -> impl std::ops::Generator<bool> {g}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: fn() -> impl Generator<bool> {g}, val: Value(Scalar(<ZST>)) }\n -     }\n - \n -     bb1: {\n@@ -50,7 +50,7 @@\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-generator.rs:9:14: 9:22\n -                                          // + user_ty: UserType(0)\n--                                          // + literal: Const { ty: fn(&mut impl std::ops::Generator<bool>) -> std::pin::Pin<&mut impl std::ops::Generator<bool>> {std::pin::Pin::<&mut impl std::ops::Generator<bool>>::new}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: fn(&mut impl Generator<bool>) -> Pin<&mut impl Generator<bool>> {Pin::<&mut impl Generator<bool>>::new}, val: Value(Scalar(<ZST>)) }\n -     }\n - \n -     bb2: {\n@@ -65,7 +65,7 @@\n -         _1 = <impl Generator<bool> as Generator<bool>>::resume(move _2, const false) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-generator.rs:9:33: 9:39\n--                                          // + literal: Const { ty: for<'r> fn(std::pin::Pin<&'r mut impl std::ops::Generator<bool>>, bool) -> std::ops::GeneratorState<<impl std::ops::Generator<bool> as std::ops::Generator<bool>>::Yield, <impl std::ops::Generator<bool> as std::ops::Generator<bool>>::Return> {<impl std::ops::Generator<bool> as std::ops::Generator<bool>>::resume}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> fn(Pin<&'r mut impl Generator<bool>>, bool) -> GeneratorState<<impl Generator<bool> as Generator<bool>>::Yield, <impl Generator<bool> as Generator<bool>>::Return> {<impl Generator<bool> as Generator<bool>>::resume}, val: Value(Scalar(<ZST>)) }\n +         StorageLive(_7);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n +         _7 = const false;                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n +         StorageLive(_10);                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46"}, {"sha": "337b9c596852cb6d0b115f5e5308cc7535c301a0", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.32bit.diff", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -35,13 +35,10 @@\n +         StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _7 = &mut (*_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         ((*_7).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 3 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+                                          // ty::Const\n-+                                          // + ty: alloc::raw_vec::RawVec<u32>\n-+                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)\n--                                          // + literal: Const { ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n -     }\n - \n -     bb2: {\n@@ -72,7 +69,7 @@\n -         _6 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_5.1: std::alloc::Global)) -> bb4; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n--                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<std::vec::Vec<u32>, std::alloc::Global>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: unsafe fn(Unique<Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>}, val: Value(Scalar(<ZST>)) }\n       }\n   }\n   "}, {"sha": "4c7734a27b7f59bc635af2d8f744db3b243adb18", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.64bit.diff", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -35,13 +35,10 @@\n +         StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _7 = &mut (*_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         ((*_7).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 3 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+                                          // ty::Const\n-+                                          // + ty: alloc::raw_vec::RawVec<u32>\n-+                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)\n--                                          // + literal: Const { ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n -     }\n - \n -     bb2: {\n@@ -72,7 +69,7 @@\n -         _6 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_5.1: std::alloc::Global)) -> bb4; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n--                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<std::vec::Vec<u32>, std::alloc::Global>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: unsafe fn(Unique<Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>}, val: Value(Scalar(<ZST>)) }\n       }\n   }\n   "}, {"sha": "53c2c22182f0821ae6d9622bd10324f0a07ab82d", "filename": "src/test/mir-opt/inline/inline_retag.bar.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -33,12 +33,9 @@ fn bar() -> bool {\n         StorageLive(_3);                 // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n         StorageLive(_4);                 // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n         _10 = const bar::promoted[1];    // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n-                                         // ty::Const\n-                                         // + ty: &i32\n-                                         // + val: Unevaluated(bar, [], Some(promoted[1]))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:12:7: 12:9\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[86d7]::bar), const_param_did: None }, substs: [], promoted: Some(promoted[1]) }) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(bar, [], Some(promoted[1])) }\n         Retag(_10);                      // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n         _4 = &(*_10);                    // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n         Retag(_4);                       // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n@@ -47,12 +44,9 @@ fn bar() -> bool {\n         StorageLive(_6);                 // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         StorageLive(_7);                 // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         _9 = const bar::promoted[0];     // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n-                                         // ty::Const\n-                                         // + ty: &i32\n-                                         // + val: Unevaluated(bar, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:12:11: 12:14\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[86d7]::bar), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(bar, [], Some(promoted[0])) }\n         Retag(_9);                       // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         _7 = &(*_9);                     // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         Retag(_7);                       // scope 1 at $DIR/inline-retag.rs:12:11: 12:14"}, {"sha": "c53e79707876e2d7e38e78be8e1c5f9ab854bdab", "filename": "src/test/mir-opt/inline/inline_shims.clone.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -14,7 +14,7 @@\n -         _0 = <fn(A, B) as Clone>::clone(move _2) -> bb1; // scope 0 at $DIR/inline-shims.rs:6:5: 6:14\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-shims.rs:6:7: 6:12\n--                                          // + literal: Const { ty: for<'r> fn(&'r fn(A, B)) -> fn(A, B) {<fn(A, B) as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> fn(&'r fn(A, B)) -> fn(A, B) {<fn(A, B) as Clone>::clone}, val: Value(Scalar(<ZST>)) }\n -     }\n - \n -     bb1: {"}, {"sha": "d287d3c7a8943be261577eb09f00c2696c3c924f", "filename": "src/test/mir-opt/inline/inline_shims.drop.Inline.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -24,7 +24,7 @@\n           _3 = std::ptr::drop_in_place::<Vec<A>>(move _4) -> bb1; // scope 1 at $DIR/inline-shims.rs:11:14: 11:40\n                                            // mir::Constant\n                                            // + span: $DIR/inline-shims.rs:11:14: 11:37\n-                                           // + literal: Const { ty: unsafe fn(*mut std::vec::Vec<A>) {std::ptr::drop_in_place::<std::vec::Vec<A>>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: unsafe fn(*mut Vec<A>) {std::ptr::drop_in_place::<Vec<A>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n@@ -35,7 +35,7 @@\n -         _0 = std::ptr::drop_in_place::<Option<B>>(move _5) -> bb2; // scope 2 at $DIR/inline-shims.rs:12:14: 12:40\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-shims.rs:12:14: 12:37\n--                                          // + literal: Const { ty: unsafe fn(*mut std::option::Option<B>) {std::ptr::drop_in_place::<std::option::Option<B>>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: unsafe fn(*mut Option<B>) {std::ptr::drop_in_place::<Option<B>>}, val: Value(Scalar(<ZST>)) }\n +         StorageLive(_6);                 // scope 2 at $DIR/inline-shims.rs:12:14: 12:40\n +         StorageLive(_7);                 // scope 2 at $DIR/inline-shims.rs:12:14: 12:40\n +         _6 = discriminant((*_5));        // scope 3 at $DIR/inline-shims.rs:12:14: 12:40"}, {"sha": "4be00dfacb3eeba36b02a9338644fbae1878fdfd", "filename": "src/test/mir-opt/inline/inline_specialization.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -15,7 +15,7 @@\n -         _1 = <Vec<()> as Foo>::bar() -> bb1; // scope 0 at $DIR/inline-specialization.rs:5:13: 5:38\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-specialization.rs:5:13: 5:36\n--                                          // + literal: Const { ty: fn() -> u32 {<std::vec::Vec<()> as Foo>::bar}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: fn() -> u32 {<Vec<()> as Foo>::bar}, val: Value(Scalar(<ZST>)) }\n -     }\n - \n -     bb1: {"}, {"sha": "0a30bd3d8cafddf08458c67f84c8ccf67a8c60af", "filename": "src/test/mir-opt/inline/issue_78442.bar.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -28,7 +28,7 @@\n -         _2 = <impl Fn() as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n -                                          // mir::Constant\n -                                          // + span: $DIR/issue-78442.rs:11:5: 11:15\n--                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn(), ()) -> <impl Fn() as std::ops::FnOnce<()>>::Output {<impl Fn() as std::ops::Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn(), ()) -> <impl Fn() as FnOnce<()>>::Output {<impl Fn() as Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n +         _2 = move (*_3)() -> [return: bb5, unwind: bb3]; // scope 1 at $DIR/issue-78442.rs:11:5: 11:17\n       }\n   "}, {"sha": "a8ae4008cbc9647a6418670310903ec7c89a0f80", "filename": "src/test/mir-opt/inline/issue_78442.bar.RevealAll.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -28,7 +28,7 @@\n           _2 = <impl Fn() as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n                                            // mir::Constant\n                                            // + span: $DIR/issue-78442.rs:11:5: 11:15\n-                                           // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn(), ()) -> <impl Fn() as std::ops::FnOnce<()>>::Output {<impl Fn() as std::ops::Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn(), ()) -> <impl Fn() as FnOnce<()>>::Output {<impl Fn() as Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb2: {"}, {"sha": "4d06b91e6dc61a87733919cc49623c77a3b93ca2", "filename": "src/test/mir-opt/issue_62289.test.ElaborateDrops.before.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -46,7 +46,7 @@ fn test() -> Option<Box<u32>> {\n         _6 = <Option<u32> as Try>::branch(move _7) -> [return: bb2, unwind: bb12]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:15: 9:20\n-                                         // + literal: Const { ty: fn(std::option::Option<u32>) -> std::ops::ControlFlow<<std::option::Option<u32> as std::ops::Try>::Residual, <std::option::Option<u32> as std::ops::Try>::Output> {<std::option::Option<u32> as std::ops::Try>::branch}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(Option<u32>) -> ControlFlow<<Option<u32> as Try>::Residual, <Option<u32> as Try>::Output> {<Option<u32> as Try>::branch}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb2: {\n@@ -76,7 +76,7 @@ fn test() -> Option<Box<u32>> {\n         _0 = <Option<Box<u32>> as FromResidual<Option<Infallible>>>::from_residual(move _11) -> [return: bb6, unwind: bb12]; // scope 3 at $DIR/issue-62289.rs:9:15: 9:20\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:19: 9:20\n-                                         // + literal: Const { ty: fn(std::option::Option<std::convert::Infallible>) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::FromResidual<std::option::Option<std::convert::Infallible>>>::from_residual}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(Option<Infallible>) -> Option<Box<u32>> {<Option<Box<u32>> as FromResidual<Option<Infallible>>>::from_residual}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb6: {"}, {"sha": "5fb57c285becac09f46b5cc6ee447bc308bc6ce5", "filename": "src/test/mir-opt/issue_72181_1.main.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -24,7 +24,7 @@ fn main() -> () {\n         _2 = transmute::<(), Void>(move _3) -> [return: bb1, unwind: bb4]; // scope 2 at $DIR/issue-72181-1.rs:17:9: 17:44\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181-1.rs:17:9: 17:40\n-                                         // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(()) -> Void {std::intrinsics::transmute::<(), Void>}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(()) -> Void {transmute::<(), Void>}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {"}, {"sha": "240da5577dee5112d38bfdafb0c791950acdc77c", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -61,12 +61,9 @@\n           _7 = &_1;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _20 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: &i32\n-                                           // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[9565]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n           _8 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.0: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.1: &i32) = move _8;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -103,10 +100,7 @@\n           core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _15, move _17, move _19); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, std::option::Option<std::fmt::Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n-                                           // ty::Const\n-                                           // + ty: core::panicking::AssertKind\n-                                           // + val: Value(Scalar(0x00))\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }"}, {"sha": "240da5577dee5112d38bfdafb0c791950acdc77c", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -61,12 +61,9 @@\n           _7 = &_1;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _20 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: &i32\n-                                           // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[9565]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n           _8 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.0: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.1: &i32) = move _8;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -103,10 +100,7 @@\n           core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _15, move _17, move _19); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, std::option::Option<std::fmt::Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n-                                           // ty::Const\n-                                           // + ty: core::panicking::AssertKind\n-                                           // + val: Value(Scalar(0x00))\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }"}, {"sha": "1e8b681dfad46b6710db15b56813bd271037869b", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -82,12 +82,9 @@\n           _10 = &_1;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _28 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: &i32\n-                                           // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[9565]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n           _11 = _28;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -117,9 +114,6 @@\n           StorageLive(_21);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_22);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _22 = const core::panicking::AssertKind::Eq; // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: core::panicking::AssertKind\n-                                           // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n@@ -136,10 +130,7 @@\n           core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _23, move _25, move _27); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, std::option::Option<std::fmt::Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n-                                           // ty::Const\n-                                           // + ty: core::panicking::AssertKind\n-                                           // + val: Value(Scalar(0x00))\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }"}, {"sha": "1e8b681dfad46b6710db15b56813bd271037869b", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -82,12 +82,9 @@\n           _10 = &_1;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _28 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: &i32\n-                                           // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[9565]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n           _11 = _28;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -117,9 +114,6 @@\n           StorageLive(_21);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_22);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _22 = const core::panicking::AssertKind::Eq; // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: core::panicking::AssertKind\n-                                           // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n@@ -136,10 +130,7 @@\n           core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _23, move _25, move _27); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, std::option::Option<std::fmt::Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n-                                           // ty::Const\n-                                           // + ty: core::panicking::AssertKind\n-                                           // + val: Value(Scalar(0x00))\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }"}, {"sha": "c1a4fc301d7cd7f25d6a1be00aa9a8bc25ce5d51", "filename": "src/test/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -71,9 +71,6 @@\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(Scalar(<ZST>)) }\n-                                           // ty::Const\n-                                           // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [105, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 101, 110, 116, 101, 114, 101, 100, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 32, 99, 111, 100, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1099511627775], len: Size { raw: 40 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 40 })\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [105, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 101, 110, 116, 101, 114, 101, 100, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 32, 99, 111, 100, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1099511627775], len: Size { raw: 40 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 40 }) }"}, {"sha": "1c3df5e90cc325176cc88b370a8939acabd273ce", "filename": "src/test/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -39,7 +39,7 @@ fn num_to_digit(_1: char) -> u32 {\n         _7 = char::methods::<impl char>::to_digit(move _8, const 8_u32) -> bb5; // scope 1 at $DIR/issue-59352.rs:14:8: 14:23\n                                          // mir::Constant\n                                          // + span: $DIR/issue-59352.rs:14:8: 14:23\n-                                         // + literal: Const { ty: fn(char, u32) -> std::option::Option<u32> {std::char::methods::<impl char>::to_digit}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(char, u32) -> Option<u32> {char::methods::<impl char>::to_digit}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n@@ -50,7 +50,7 @@ fn num_to_digit(_1: char) -> u32 {\n         _3 = char::methods::<impl char>::to_digit(move _4, const 8_u32) -> bb2; // scope 0 at $DIR/issue-59352.rs:14:26: 14:41\n                                          // mir::Constant\n                                          // + span: $DIR/issue-59352.rs:14:30: 14:38\n-                                         // + literal: Const { ty: fn(char, u32) -> std::option::Option<u32> {std::char::methods::<impl char>::to_digit}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(char, u32) -> Option<u32> {char::methods::<impl char>::to_digit}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb2: {\n@@ -90,9 +90,6 @@ fn num_to_digit(_1: char) -> u32 {\n                                          // mir::Constant\n                                          // + span: $DIR/issue-59352.rs:14:26: 14:50\n                                          // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(Scalar(<ZST>)) }\n-                                         // ty::Const\n-                                         // + ty: &str\n-                                         // + val: Value(Slice { data: Allocation { bytes: [99, 97, 108, 108, 101, 100, 32, 96, 79, 112, 116, 105, 111, 110, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96, 32, 111, 110, 32, 97, 32, 96, 78, 111, 110, 101, 96, 32, 118, 97, 108, 117, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8796093022207], len: Size { raw: 43 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 43 })\n                                          // mir::Constant\n                                          // + span: $DIR/issue-59352.rs:14:26: 14:50\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [99, 97, 108, 108, 101, 100, 32, 96, 79, 112, 116, 105, 111, 110, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96, 32, 111, 110, 32, 97, 32, 96, 78, 111, 110, 101, 96, 32, 118, 97, 108, 117, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8796093022207], len: Size { raw: 43 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 43 }) }"}, {"sha": "39448a16f1aba63d02d017a5045aa519193cb08b", "filename": "src/test/mir-opt/issues/issue_75439.foo.MatchBranchSimplification.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -27,7 +27,7 @@\n           _2 = transmute::<[u8; 16], [u32; 4]>(move _3) -> bb1; // scope 2 at $DIR/issue-75439.rs:7:37: 7:53\n                                            // mir::Constant\n                                            // + span: $DIR/issue-75439.rs:7:37: 7:46\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn([u8; 16]) -> [u32; 4] {std::intrinsics::transmute::<[u8; 16], [u32; 4]>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn([u8; 16]) -> [u32; 4] {transmute::<[u8; 16], [u32; 4]>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n@@ -50,7 +50,7 @@\n           _5 = transmute::<u32, [u8; 4]>(move _6) -> bb7; // scope 4 at $DIR/issue-75439.rs:10:23: 10:36\n                                            // mir::Constant\n                                            // + span: $DIR/issue-75439.rs:10:23: 10:32\n-                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u32) -> [u8; 4] {std::intrinsics::transmute::<u32, [u8; 4]>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u32) -> [u8; 4] {transmute::<u32, [u8; 4]>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb5: {"}, {"sha": "88d2867fc42ab1438dd4cfb3e92d07416b831130", "filename": "src/test/mir-opt/lower_intrinsics.discriminant.LowerIntrinsics.diff", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -32,7 +32,7 @@\n -         _2 = discriminant_value::<T>(move _3) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:74:5: 74:45\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:74:5: 74:41\n--                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r T) -> <T as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<T>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r T) -> <T as DiscriminantKind>::Discriminant {discriminant_value::<T>}, val: Value(Scalar(<ZST>)) }\n +         _2 = discriminant((*_3));        // scope 0 at $DIR/lower_intrinsics.rs:74:5: 74:45\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:74:5: 74:45\n       }\n@@ -45,18 +45,15 @@\n           StorageLive(_6);                 // scope 0 at $DIR/lower_intrinsics.rs:75:42: 75:44\n           StorageLive(_7);                 // scope 0 at $DIR/lower_intrinsics.rs:75:42: 75:44\n           _19 = const discriminant::<T>::promoted[2]; // scope 0 at $DIR/lower_intrinsics.rs:75:42: 75:44\n-                                           // ty::Const\n-                                           // + ty: &i32\n-                                           // + val: Unevaluated(discriminant, [T], Some(promoted[2]))\n                                            // mir::Constant\n                                            // + span: $DIR/lower_intrinsics.rs:75:42: 75:44\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:29 ~ lower_intrinsics[49eb]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[2]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(discriminant, [T], Some(promoted[2])) }\n           _7 = &(*_19);                    // scope 0 at $DIR/lower_intrinsics.rs:75:42: 75:44\n           _6 = &(*_7);                     // scope 0 at $DIR/lower_intrinsics.rs:75:42: 75:44\n -         _5 = discriminant_value::<i32>(move _6) -> bb2; // scope 0 at $DIR/lower_intrinsics.rs:75:5: 75:45\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:75:5: 75:41\n--                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r i32) -> <i32 as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<i32>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r i32) -> <i32 as DiscriminantKind>::Discriminant {discriminant_value::<i32>}, val: Value(Scalar(<ZST>)) }\n +         _5 = discriminant((*_6));        // scope 0 at $DIR/lower_intrinsics.rs:75:5: 75:45\n +         goto -> bb2;                     // scope 0 at $DIR/lower_intrinsics.rs:75:5: 75:45\n       }\n@@ -69,18 +66,15 @@\n           StorageLive(_10);                // scope 0 at $DIR/lower_intrinsics.rs:76:42: 76:45\n           StorageLive(_11);                // scope 0 at $DIR/lower_intrinsics.rs:76:42: 76:45\n           _18 = const discriminant::<T>::promoted[1]; // scope 0 at $DIR/lower_intrinsics.rs:76:42: 76:45\n-                                           // ty::Const\n-                                           // + ty: &()\n-                                           // + val: Unevaluated(discriminant, [T], Some(promoted[1]))\n                                            // mir::Constant\n                                            // + span: $DIR/lower_intrinsics.rs:76:42: 76:45\n-                                           // + literal: Const { ty: &(), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:29 ~ lower_intrinsics[49eb]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[1]) }) }\n+                                           // + literal: Const { ty: &(), val: Unevaluated(discriminant, [T], Some(promoted[1])) }\n           _11 = &(*_18);                   // scope 0 at $DIR/lower_intrinsics.rs:76:42: 76:45\n           _10 = &(*_11);                   // scope 0 at $DIR/lower_intrinsics.rs:76:42: 76:45\n -         _9 = discriminant_value::<()>(move _10) -> bb3; // scope 0 at $DIR/lower_intrinsics.rs:76:5: 76:46\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:76:5: 76:41\n--                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r ()) -> <() as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<()>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r ()) -> <() as DiscriminantKind>::Discriminant {discriminant_value::<()>}, val: Value(Scalar(<ZST>)) }\n +         _9 = discriminant((*_10));       // scope 0 at $DIR/lower_intrinsics.rs:76:5: 76:46\n +         goto -> bb3;                     // scope 0 at $DIR/lower_intrinsics.rs:76:5: 76:46\n       }\n@@ -93,18 +87,15 @@\n           StorageLive(_14);                // scope 0 at $DIR/lower_intrinsics.rs:77:42: 77:47\n           StorageLive(_15);                // scope 0 at $DIR/lower_intrinsics.rs:77:42: 77:47\n           _17 = const discriminant::<T>::promoted[0]; // scope 0 at $DIR/lower_intrinsics.rs:77:42: 77:47\n-                                           // ty::Const\n-                                           // + ty: &E\n-                                           // + val: Unevaluated(discriminant, [T], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/lower_intrinsics.rs:77:42: 77:47\n-                                           // + literal: Const { ty: &E, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:29 ~ lower_intrinsics[49eb]::discriminant), const_param_did: None }, substs: [T], promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &E, val: Unevaluated(discriminant, [T], Some(promoted[0])) }\n           _15 = &(*_17);                   // scope 0 at $DIR/lower_intrinsics.rs:77:42: 77:47\n           _14 = &(*_15);                   // scope 0 at $DIR/lower_intrinsics.rs:77:42: 77:47\n -         _13 = discriminant_value::<E>(move _14) -> bb4; // scope 0 at $DIR/lower_intrinsics.rs:77:5: 77:48\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:77:5: 77:41\n--                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r E) -> <E as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<E>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r E) -> <E as DiscriminantKind>::Discriminant {discriminant_value::<E>}, val: Value(Scalar(<ZST>)) }\n +         _13 = discriminant((*_14));      // scope 0 at $DIR/lower_intrinsics.rs:77:5: 77:48\n +         goto -> bb4;                     // scope 0 at $DIR/lower_intrinsics.rs:77:5: 77:48\n       }"}, {"sha": "a531a19bd7820934bf391bd79255abc211149fff", "filename": "src/test/mir-opt/lower_intrinsics.wrapping.LowerIntrinsics.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -33,7 +33,7 @@\n -         _3 = wrapping_add::<T>(move _4, move _5) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:7:14: 7:50\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:7:14: 7:44\n--                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(T, T) -> T {std::intrinsics::wrapping_add::<T>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(T, T) -> T {wrapping_add::<T>}, val: Value(Scalar(<ZST>)) }\n +         _3 = Add(move _4, move _5);      // scope 0 at $DIR/lower_intrinsics.rs:7:14: 7:50\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:7:14: 7:50\n       }\n@@ -49,7 +49,7 @@\n -         _6 = wrapping_sub::<T>(move _7, move _8) -> bb2; // scope 1 at $DIR/lower_intrinsics.rs:8:14: 8:50\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:8:14: 8:44\n--                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(T, T) -> T {std::intrinsics::wrapping_sub::<T>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(T, T) -> T {wrapping_sub::<T>}, val: Value(Scalar(<ZST>)) }\n +         _6 = Sub(move _7, move _8);      // scope 1 at $DIR/lower_intrinsics.rs:8:14: 8:50\n +         goto -> bb2;                     // scope 1 at $DIR/lower_intrinsics.rs:8:14: 8:50\n       }\n@@ -65,7 +65,7 @@\n -         _9 = wrapping_mul::<T>(move _10, move _11) -> bb3; // scope 2 at $DIR/lower_intrinsics.rs:9:14: 9:50\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:9:14: 9:44\n--                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(T, T) -> T {std::intrinsics::wrapping_mul::<T>}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(T, T) -> T {wrapping_mul::<T>}, val: Value(Scalar(<ZST>)) }\n +         _9 = Mul(move _10, move _11);    // scope 2 at $DIR/lower_intrinsics.rs:9:14: 9:50\n +         goto -> bb3;                     // scope 2 at $DIR/lower_intrinsics.rs:9:14: 9:50\n       }"}, {"sha": "e49b9898dfac7033853ba400afc982fc3ce394bb", "filename": "src/test/mir-opt/match_false_edges.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -52,12 +52,9 @@ fn full_tested_match() -> () {\n     bb5: {\n         StorageLive(_6);                 // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n         _11 = const full_tested_match::promoted[0]; // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n-                                         // ty::Const\n-                                         // + ty: &std::option::Option<i32>\n-                                         // + val: Unevaluated(full_tested_match, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:16:14: 16:15\n-                                         // + literal: Const { ty: &std::option::Option<i32>, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ match_false_edges[5411]::full_tested_match), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                         // + literal: Const { ty: &Option<i32>, val: Unevaluated(full_tested_match, [], Some(promoted[0])) }\n         _6 = &(((*_11) as Some).0: i32); // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n         _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27"}, {"sha": "d562f04560c34720a0baef5ace785174fe0f68d1", "filename": "src/test/mir-opt/no_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -23,10 +23,7 @@ fn unwrap(_1: Option<T>) -> T {\n         begin_panic::<&str>(const \"explicit panic\") -> bb4; // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n-                                         // + literal: Const { ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n-                                         // ty::Const\n-                                         // + ty: &str\n-                                         // + val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 })\n+                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }"}, {"sha": "22bf1acc57d729e334e1e64cadcad222ab0a4396", "filename": "src/test/mir-opt/no_spurious_drop_after_call.main.ElaborateDrops.before.mir", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -13,25 +13,22 @@ fn main() -> () {\n         StorageLive(_3);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n         StorageLive(_4);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n         _4 = const \"\";                   // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n-                                         // ty::Const\n-                                         // + ty: &str\n-                                         // + val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 })\n                                          // mir::Constant\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 }) }\n         _3 = &(*_4);                     // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n         _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n                                          // mir::Constant\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:23: 9:32\n-                                         // + literal: Const { ty: for<'r> fn(&'r str) -> std::string::String {<str as std::string::ToString>::to_string}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: for<'r> fn(&'r str) -> String {<str as ToString>::to_string}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n         StorageDead(_3);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:33: 9:34\n         _1 = std::mem::drop::<String>(move _2) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:5: 9:35\n                                          // mir::Constant\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:5: 9:19\n-                                         // + literal: Const { ty: fn(std::string::String) {std::mem::drop::<std::string::String>}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn(String) {std::mem::drop::<String>}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb2: {"}, {"sha": "945290b6a82e0c8720b604804ac8cfbf611e7416", "filename": "src/test/mir-opt/receiver_ptr_mutability.main.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Freceiver_ptr_mutability.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Freceiver_ptr_mutability.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Freceiver_ptr_mutability.main.mir_map.0.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -32,7 +32,7 @@ fn main() -> () {\n         _1 = null_mut::<Test>() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/receiver-ptr-mutability.rs:14:26: 14:46\n                                          // mir::Constant\n                                          // + span: $DIR/receiver-ptr-mutability.rs:14:26: 14:44\n-                                         // + literal: Const { ty: fn() -> *mut Test {std::ptr::null_mut::<Test>}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: fn() -> *mut Test {null_mut::<Test>}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {"}, {"sha": "f1435f4c40a4cd20aca44361e427467c5814efe2", "filename": "src/test/mir-opt/remove_storage_markers.main.RemoveStorageMarkers.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -59,7 +59,7 @@\n           _7 = <std::ops::Range<i32> as iter::range::RangeIteratorImpl>::spec_next(move _14) -> bb4; // scope 5 at $DIR/remove_storage_markers.rs:8:14: 8:19\n                                            // mir::Constant\n                                            // + span: $DIR/remove_storage_markers.rs:8:14: 8:19\n-                                           // + literal: Const { ty: for<'r> fn(&'r mut std::ops::Range<i32>) -> std::option::Option<<std::ops::Range<i32> as std::iter::range::RangeIteratorImpl>::Item> {<std::ops::Range<i32> as std::iter::range::RangeIteratorImpl>::spec_next}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r> fn(&'r mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as iter::range::RangeIteratorImpl>::Item> {<std::ops::Range<i32> as iter::range::RangeIteratorImpl>::spec_next}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb2: {"}, {"sha": "5c2a7e2f253f6f3dd4f2ea7d5216226dfc7fe50e", "filename": "src/test/mir-opt/retag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -81,7 +81,7 @@ fn array_casts() -> () {\n         _6 = ptr::mut_ptr::<impl *mut usize>::add(move _7, const 1_usize) -> bb1; // scope 3 at $DIR/retag.rs:60:15: 60:23\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:60:17: 60:20\n-                                         // + literal: Const { ty: unsafe fn(*mut usize, usize) -> *mut usize {std::ptr::mut_ptr::<impl *mut usize>::add}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: unsafe fn(*mut usize, usize) -> *mut usize {ptr::mut_ptr::<impl *mut usize>::add}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n@@ -112,7 +112,7 @@ fn array_casts() -> () {\n         _16 = ptr::const_ptr::<impl *const usize>::add(move _17, const 1_usize) -> bb2; // scope 6 at $DIR/retag.rs:64:26: 64:34\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:64:28: 64:31\n-                                         // + literal: Const { ty: unsafe fn(*const usize, usize) -> *const usize {std::ptr::const_ptr::<impl *const usize>::add}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: unsafe fn(*const usize, usize) -> *const usize {ptr::const_ptr::<impl *const usize>::add}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb2: {\n@@ -122,12 +122,9 @@ fn array_casts() -> () {\n         Retag(_14);                      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         StorageLive(_18);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _35 = const array_casts::promoted[0]; // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                         // ty::Const\n-                                         // + ty: &usize\n-                                         // + val: Unevaluated(array_casts, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                         // + literal: Const { ty: &usize, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:15 ~ retag[4622]::array_casts), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                         // + literal: Const { ty: &usize, val: Unevaluated(array_casts, [], Some(promoted[0])) }\n         Retag(_35);                      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _18 = &(*_35);                   // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         Retag(_18);                      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -177,7 +174,7 @@ fn array_casts() -> () {\n         core::panicking::assert_failed::<usize, usize>(move _29, move _30, move _32, move _34); // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                         // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r usize, &'s usize, std::option::Option<std::fmt::Arguments<'t0>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r usize, &'s usize, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb4: {"}, {"sha": "09cf06cacd92085b4e10349c68cf3fe404fa206b", "filename": "src/test/mir-opt/retag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -11,7 +11,7 @@ fn std::ptr::drop_in_place(_1: *mut Test) -> () {\n         _3 = <Test as Drop>::drop(move _2) -> bb1; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // + literal: Const { ty: for<'r> fn(&'r mut Test) {<Test as std::ops::Drop>::drop}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: for<'r> fn(&'r mut Test) {<Test as Drop>::drop}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {"}, {"sha": "2fda8c949b00cd45a73630f530d843bf5baa62e5", "filename": "src/test/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -148,12 +148,9 @@ fn main() -> () {\n         StorageLive(_22);                // scope 7 at $DIR/retag.rs:47:21: 47:23\n         StorageLive(_23);                // scope 7 at $DIR/retag.rs:47:21: 47:23\n         _28 = const main::promoted[0];   // scope 7 at $DIR/retag.rs:47:21: 47:23\n-                                         // ty::Const\n-                                         // + ty: &i32\n-                                         // + val: Unevaluated(main, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:47:21: 47:23\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:13 ~ retag[4622]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n         Retag(_28);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n         _23 = &(*_28);                   // scope 7 at $DIR/retag.rs:47:21: 47:23\n         Retag(_23);                      // scope 7 at $DIR/retag.rs:47:21: 47:23"}, {"sha": "cf20e83ef06b7a5b0262d318c01dee7c024e1d97", "filename": "src/test/mir-opt/simplify_locals.d2.SimplifyLocals.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -15,17 +15,11 @@\n -         discriminant(_3) = 0;            // scope 0 at $DIR/simplify-locals.rs:28:11: 28:15\n -         (_2.0: i32) = const 10_i32;      // scope 0 at $DIR/simplify-locals.rs:28:6: 28:16\n -         (_2.1: E) = const E::A;          // scope 0 at $DIR/simplify-locals.rs:28:6: 28:16\n--                                          // ty::Const\n--                                          // + ty: E\n--                                          // + val: Value(Scalar(0x00))\n -                                          // mir::Constant\n -                                          // + span: $DIR/simplify-locals.rs:28:6: 28:16\n -                                          // + literal: Const { ty: E, val: Value(Scalar(0x00)) }\n -         StorageDead(_3);                 // scope 0 at $DIR/simplify-locals.rs:28:15: 28:16\n -         (_2.1: E) = const E::B;          // scope 0 at $DIR/simplify-locals.rs:28:5: 28:26\n--                                          // ty::Const\n--                                          // + ty: E\n--                                          // + val: Value(Scalar(0x01))\n -                                          // mir::Constant\n -                                          // + span: $DIR/simplify-locals.rs:28:5: 28:26\n -                                          // + literal: Const { ty: E, val: Value(Scalar(0x01)) }"}, {"sha": "62fbcaaa28938c2613f278ed2c31158f37cccaea", "filename": "src/test/mir-opt/storage_live_dead_in_statics.XXX.mir_map.0.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -190,9 +190,6 @@ static XXX: &Foo = {\n         _3 = move _4 as &[(u32, u32)] (Pointer(Unsize)); // scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n         StorageDead(_4);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n         _2 = Foo { tup: const \"hi\", data: move _3 }; // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:29: 23:2\n-                                         // ty::Const\n-                                         // + ty: &str\n-                                         // + val: Value(Slice { data: Allocation { bytes: [104, 105], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:6:10: 6:14\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [104, 105], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }"}, {"sha": "75cc100def580519ba3fb504e8498e0a666ec976", "filename": "src/test/mir-opt/uninhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -19,9 +19,6 @@ fn main() -> () {\n         _3 = discriminant(_2);           // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n         StorageLive(_5);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n         _5 = const \"C\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n-                                         // ty::Const\n-                                         // + ty: &str\n-                                         // + val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n@@ -39,9 +36,6 @@ fn main() -> () {\n     bb1: {\n         StorageLive(_9);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n         _9 = const \"E\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n-                                         // ty::Const\n-                                         // + ty: &str\n-                                         // + val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n@@ -52,9 +46,6 @@ fn main() -> () {\n \n     bb2: {\n         _6 = const \"D\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n-                                         // ty::Const\n-                                         // + ty: &str\n-                                         // + val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }"}, {"sha": "f173d002e2d75e4ff479566da3a06af695e3a972", "filename": "src/test/mir-opt/uninhabited_enum_branching.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -25,9 +25,6 @@\n       bb1: {\n           StorageLive(_5);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n           _5 = const \"C\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n-                                           // ty::Const\n-                                           // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n@@ -38,9 +35,6 @@\n   \n       bb2: {\n           _1 = const \"A(Empty)\";           // scope 0 at $DIR/uninhabited_enum_branching.rs:21:24: 21:34\n-                                           // ty::Const\n-                                           // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:21:24: 21:34\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n@@ -50,9 +44,6 @@\n       bb3: {\n           StorageLive(_4);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n           _4 = const \"B(Empty)\";           // scope 0 at $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n-                                           // ty::Const\n-                                           // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n@@ -74,9 +65,6 @@\n       bb5: {\n           StorageLive(_9);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n           _9 = const \"E\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n-                                           // ty::Const\n-                                           // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n@@ -87,9 +75,6 @@\n   \n       bb6: {\n           _6 = const \"D\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n-                                           // ty::Const\n-                                           // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }"}, {"sha": "94fba142e001f7078dfa0eee59ed306023cbf0ca", "filename": "src/test/mir-opt/uninhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -36,9 +36,6 @@ fn main() -> () {\n     bb1: {\n         StorageLive(_8);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:21: 25:24\n         _8 = const \"D\";                  // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:21: 25:24\n-                                         // ty::Const\n-                                         // + ty: &str\n-                                         // + val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching2.rs:25:21: 25:24\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n@@ -50,9 +47,6 @@ fn main() -> () {\n     bb2: {\n         StorageLive(_7);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:21: 24:24\n         _7 = const \"C\";                  // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:21: 24:24\n-                                         // ty::Const\n-                                         // + ty: &str\n-                                         // + val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching2.rs:24:21: 24:24\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n@@ -72,9 +66,6 @@ fn main() -> () {\n     bb4: {\n         StorageLive(_13);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:21: 32:24\n         _13 = const \"D\";                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:21: 32:24\n-                                         // ty::Const\n-                                         // + ty: &str\n-                                         // + val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching2.rs:32:21: 32:24\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n@@ -86,9 +77,6 @@ fn main() -> () {\n     bb5: {\n         StorageLive(_12);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n         _12 = const \"C\";                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n-                                         // ty::Const\n-                                         // + ty: &str\n-                                         // + val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }"}, {"sha": "84ee885d1f5eeffa5b629d46736bf9887820a6f2", "filename": "src/test/mir-opt/uninhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -38,9 +38,6 @@\n       bb1: {\n           StorageLive(_8);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:21: 25:24\n           _8 = const \"D\";                  // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:21: 25:24\n-                                           // ty::Const\n-                                           // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:25:21: 25:24\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n@@ -51,9 +48,6 @@\n   \n       bb2: {\n           _3 = const \"A(Empty)\";           // scope 1 at $DIR/uninhabited_enum_branching2.rs:22:24: 22:34\n-                                           // ty::Const\n-                                           // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:22:24: 22:34\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n@@ -63,9 +57,6 @@\n       bb3: {\n           StorageLive(_6);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:23:24: 23:34\n           _6 = const \"B(Empty)\";           // scope 1 at $DIR/uninhabited_enum_branching2.rs:23:24: 23:34\n-                                           // ty::Const\n-                                           // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:23:24: 23:34\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n@@ -77,9 +68,6 @@\n       bb4: {\n           StorageLive(_7);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:21: 24:24\n           _7 = const \"C\";                  // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:21: 24:24\n-                                           // ty::Const\n-                                           // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:24:21: 24:24\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n@@ -100,9 +88,6 @@\n       bb6: {\n           StorageLive(_13);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:21: 32:24\n           _13 = const \"D\";                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:21: 32:24\n-                                           // ty::Const\n-                                           // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:32:21: 32:24\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n@@ -113,9 +98,6 @@\n   \n       bb7: {\n           _9 = const \"A(Empty)\";           // scope 1 at $DIR/uninhabited_enum_branching2.rs:29:24: 29:34\n-                                           // ty::Const\n-                                           // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:29:24: 29:34\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n@@ -125,9 +107,6 @@\n       bb8: {\n           StorageLive(_11);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:30:24: 30:34\n           _11 = const \"B(Empty)\";          // scope 1 at $DIR/uninhabited_enum_branching2.rs:30:24: 30:34\n-                                           // ty::Const\n-                                           // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:30:24: 30:34\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n@@ -139,9 +118,6 @@\n       bb9: {\n           StorageLive(_12);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n           _12 = const \"C\";                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n-                                           // ty::Const\n-                                           // + ty: &str\n-                                           // + val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }"}, {"sha": "08312bde20f51e00eae57c4941705a906efec44e", "filename": "src/test/mir-opt/unreachable.main.UnreachablePropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -22,7 +22,7 @@\n           _1 = empty() -> bb1;             // scope 0 at $DIR/unreachable.rs:9:23: 9:30\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable.rs:9:23: 9:28\n-                                           // + literal: Const { ty: fn() -> std::option::Option<Empty> {empty}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> Option<Empty> {empty}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {"}, {"sha": "e5867ccfc5cb6c13d5771cf6f65a93126122cbae", "filename": "src/test/mir-opt/unreachable_diverging.main.UnreachablePropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -24,7 +24,7 @@\n           _2 = empty() -> bb1;             // scope 1 at $DIR/unreachable_diverging.rs:14:25: 14:32\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_diverging.rs:14:25: 14:30\n-                                           // + literal: Const { ty: fn() -> std::option::Option<Empty> {empty}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> Option<Empty> {empty}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {"}, {"sha": "5dc81b787a9fadab5d3242f6b398c50481a0edc0", "filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.32bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.32bit.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -34,6 +34,6 @@ fn std::ptr::drop_in_place(_1: *mut Vec<i32>) -> () {\n         _3 = <Vec<i32> as Drop>::drop(move _2) -> [return: bb5, unwind: bb4]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // + literal: Const { ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: for<'r> fn(&'r mut Vec<i32>) {<Vec<i32> as Drop>::drop}, val: Value(Scalar(<ZST>)) }\n     }\n }"}, {"sha": "5dc81b787a9fadab5d3242f6b398c50481a0edc0", "filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.64bit.mir?ref=9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "patch": "@@ -34,6 +34,6 @@ fn std::ptr::drop_in_place(_1: *mut Vec<i32>) -> () {\n         _3 = <Vec<i32> as Drop>::drop(move _2) -> [return: bb5, unwind: bb4]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // + literal: Const { ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}, val: Value(Scalar(<ZST>)) }\n+                                         // + literal: Const { ty: for<'r> fn(&'r mut Vec<i32>) {<Vec<i32> as Drop>::drop}, val: Value(Scalar(<ZST>)) }\n     }\n }"}]}