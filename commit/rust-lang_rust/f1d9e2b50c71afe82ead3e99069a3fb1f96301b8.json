{"sha": "f1d9e2b50c71afe82ead3e99069a3fb1f96301b8", "node_id": "C_kwDOAAsO6NoAKGYxZDllMmI1MGM3MWFmZTgyZWFkM2U5OTA2OWEzZmIxZjk2MzAxYjg", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-08T05:27:42Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-11T04:09:37Z"}, "message": "Avoid some unnecessary blocks in derive output.", "tree": {"sha": "a0c208d957eb5214a33c629704dcfbb3a7d7bbaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0c208d957eb5214a33c629704dcfbb3a7d7bbaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1d9e2b50c71afe82ead3e99069a3fb1f96301b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1d9e2b50c71afe82ead3e99069a3fb1f96301b8", "html_url": "https://github.com/rust-lang/rust/commit/f1d9e2b50c71afe82ead3e99069a3fb1f96301b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1d9e2b50c71afe82ead3e99069a3fb1f96301b8/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56178d4259380e07dd4bcced502916326407e59f", "url": "https://api.github.com/repos/rust-lang/rust/commits/56178d4259380e07dd4bcced502916326407e59f", "html_url": "https://github.com/rust-lang/rust/commit/56178d4259380e07dd4bcced502916326407e59f"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "498d5d69ba48ca663428d1fa90feb892af49c671", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1d9e2b50c71afe82ead3e99069a3fb1f96301b8/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d9e2b50c71afe82ead3e99069a3fb1f96301b8/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=f1d9e2b50c71afe82ead3e99069a3fb1f96301b8", "patch": "@@ -339,11 +339,19 @@ impl BlockOrExpr {\n     // Converts it into an expression.\n     fn into_expr(self, cx: &ExtCtxt<'_>, span: Span) -> P<Expr> {\n         if self.0.is_empty() {\n+            // No statements.\n             match self.1 {\n                 None => cx.expr_block(cx.block(span, vec![])),\n                 Some(expr) => expr,\n             }\n+        } else if self.0.len() == 1\n+            && let ast::StmtKind::Expr(expr) = &self.0[0].kind\n+            && self.1.is_none()\n+        {\n+            // There's only a single statement expression. Pull it out.\n+            expr.clone()\n         } else {\n+            // Multiple statements and/or expressions.\n             cx.expr_block(self.into_block(cx, span))\n         }\n     }"}, {"sha": "0e222d131d74181f2be5597adb2a8eac5355c70c", "filename": "src/test/ui/deriving/deriving-all-codegen.stdout", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1d9e2b50c71afe82ead3e99069a3fb1f96301b8/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f1d9e2b50c71afe82ead3e99069a3fb1f96301b8/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout?ref=f1d9e2b50c71afe82ead3e99069a3fb1f96301b8", "patch": "@@ -697,9 +697,8 @@ impl ::core::fmt::Debug for Enum1 {\n impl ::core::hash::Hash for Enum1 {\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         match self {\n-            Enum1::Single { x: __self_0 } => {\n-                ::core::hash::Hash::hash(__self_0, state)\n-            }\n+            Enum1::Single { x: __self_0 } =>\n+                ::core::hash::Hash::hash(__self_0, state),\n         }\n     }\n }\n@@ -870,10 +869,9 @@ impl ::core::default::Default for Fieldless {\n impl ::core::hash::Hash for Fieldless {\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         match self {\n-            _ => {\n+            _ =>\n                 ::core::hash::Hash::hash(&::core::intrinsics::discriminant_value(self),\n-                    state)\n-            }\n+                    state),\n         }\n     }\n }\n@@ -992,10 +990,9 @@ impl ::core::hash::Hash for Mixed {\n                 ::core::hash::Hash::hash(__self_0, state);\n                 ::core::hash::Hash::hash(__self_1, state)\n             }\n-            _ => {\n+            _ =>\n                 ::core::hash::Hash::hash(&::core::intrinsics::discriminant_value(self),\n-                    state)\n-            }\n+                    state),\n         }\n     }\n }"}]}