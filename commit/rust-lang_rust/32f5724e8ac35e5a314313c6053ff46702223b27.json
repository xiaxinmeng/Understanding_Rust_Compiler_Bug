{"sha": "32f5724e8ac35e5a314313c6053ff46702223b27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZjU3MjRlOGFjMzVlNWEzMTQzMTNjNjA1M2ZmNDY3MDIyMjNiMjc=", "commit": {"author": {"name": "Saoirse Shipwreckt", "email": "woboats@gmail.com", "date": "2020-03-23T00:36:08Z"}, "committer": {"name": "Without Boats", "email": "woboats@gmail.com", "date": "2020-03-23T14:45:30Z"}, "message": "Apply suggestions from code review\n\nCo-Authored-By: Ashley Mannix <ashleymannix@live.com.au>", "tree": {"sha": "48879f2693e049df89aa5f6927183c5079625482", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48879f2693e049df89aa5f6927183c5079625482"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32f5724e8ac35e5a314313c6053ff46702223b27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32f5724e8ac35e5a314313c6053ff46702223b27", "html_url": "https://github.com/rust-lang/rust/commit/32f5724e8ac35e5a314313c6053ff46702223b27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32f5724e8ac35e5a314313c6053ff46702223b27/comments", "author": {"login": "withoutboats", "id": 9063376, "node_id": "MDQ6VXNlcjkwNjMzNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/9063376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/withoutboats", "html_url": "https://github.com/withoutboats", "followers_url": "https://api.github.com/users/withoutboats/followers", "following_url": "https://api.github.com/users/withoutboats/following{/other_user}", "gists_url": "https://api.github.com/users/withoutboats/gists{/gist_id}", "starred_url": "https://api.github.com/users/withoutboats/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/withoutboats/subscriptions", "organizations_url": "https://api.github.com/users/withoutboats/orgs", "repos_url": "https://api.github.com/users/withoutboats/repos", "events_url": "https://api.github.com/users/withoutboats/events{/privacy}", "received_events_url": "https://api.github.com/users/withoutboats/received_events", "type": "User", "site_admin": false}, "committer": {"login": "withoutboats", "id": 9063376, "node_id": "MDQ6VXNlcjkwNjMzNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/9063376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/withoutboats", "html_url": "https://github.com/withoutboats", "followers_url": "https://api.github.com/users/withoutboats/followers", "following_url": "https://api.github.com/users/withoutboats/following{/other_user}", "gists_url": "https://api.github.com/users/withoutboats/gists{/gist_id}", "starred_url": "https://api.github.com/users/withoutboats/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/withoutboats/subscriptions", "organizations_url": "https://api.github.com/users/withoutboats/orgs", "repos_url": "https://api.github.com/users/withoutboats/repos", "events_url": "https://api.github.com/users/withoutboats/events{/privacy}", "received_events_url": "https://api.github.com/users/withoutboats/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caff9f92abb309297acaa08b167abd90b1433356", "url": "https://api.github.com/repos/rust-lang/rust/commits/caff9f92abb309297acaa08b167abd90b1433356", "html_url": "https://github.com/rust-lang/rust/commit/caff9f92abb309297acaa08b167abd90b1433356"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "981095302c73002f623ccee646545c3e013dc31f", "filename": "src/liballoc/task.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/32f5724e8ac35e5a314313c6053ff46702223b27/src%2Fliballoc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f5724e8ac35e5a314313c6053ff46702223b27/src%2Fliballoc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftask.rs?ref=32f5724e8ac35e5a314313c6053ff46702223b27", "patch": "@@ -16,24 +16,24 @@ use crate::sync::Arc;\n /// used to wake up a task is stored in an [`Arc`]. Some executors (especially\n /// those for embedded systems) cannot use this API, which is why [`RawWaker`]\n /// exists as an alternative for those systems.\n-#[unstable(feature = \"wake_trait\", issue = \"0\")]\n+#[unstable(feature = \"wake_trait\", issue = \"69912\")]\n pub trait Wake {\n     /// Wake this task.\n-    #[unstable(feature = \"wake_trait\", issue = \"0\")]\n+    #[unstable(feature = \"wake_trait\", issue = \"69912\")]\n     fn wake(self: Arc<Self>);\n \n     /// Wake this task without consuming the waker.\n     ///\n     /// If an executor supports a cheaper way to wake without consuming the\n     /// waker, it should override this method. By default, it clones the\n     /// [`Arc`] and calls `wake` on the clone.\n-    #[unstable(feature = \"wake_trait\", issue = \"0\")]\n+    #[unstable(feature = \"wake_trait\", issue = \"69912\")]\n     fn wake_by_ref(self: &Arc<Self>) {\n         self.clone().wake();\n     }\n }\n \n-#[unstable(feature = \"wake_trait\", issue = \"0\")]\n+#[unstable(feature = \"wake_trait\", issue = \"69912\")]\n impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for Waker {\n     fn from(waker: Arc<W>) -> Waker {\n         // SAFETY: This is safe because raw_waker safely constructs\n@@ -42,7 +42,7 @@ impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for Waker {\n     }\n }\n \n-#[unstable(feature = \"wake_trait\", issue = \"0\")]\n+#[unstable(feature = \"wake_trait\", issue = \"69912\")]\n impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for RawWaker {\n     fn from(waker: Arc<W>) -> RawWaker {\n         raw_waker(waker)"}]}