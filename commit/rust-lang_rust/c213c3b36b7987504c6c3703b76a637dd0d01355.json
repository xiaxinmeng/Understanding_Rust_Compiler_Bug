{"sha": "c213c3b36b7987504c6c3703b76a637dd0d01355", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMTNjM2IzNmI3OTg3NTA0YzZjMzcwM2I3NmE2MzdkZDBkMDEzNTU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-12T14:20:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-12T14:20:02Z"}, "message": "Merge #2539\n\n2539: Remove old location infra r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "36f9066ab25826f9401216d6ff371954eb9f447c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36f9066ab25826f9401216d6ff371954eb9f447c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c213c3b36b7987504c6c3703b76a637dd0d01355", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd8kySCRBK7hj4Ov3rIwAAdHIIAAx4AntV4qpJ/W1HKomc3g/M\niqrw9Ku2N0JurSUyBWbF4SfBXxIiYvoxr5DdHQI5O98NHfWkrDZb+SHqSAgKftUK\n2EJGiZhVm5y2tiYzVtKQMV8xpEzDpOp3qoSHkY4Y/yFm7r+t7SyTGTF92z4DJRrV\nmBS9Xc8/nTfP6K2xVtj0NlskOj7gRqfr+HK+hmLWzIU7gYAK3X4o0wl2TrBauLGf\nnXvTTGoftRqSHcVPVRYhPEhHWuigQ2/QqxukiTxvWxAxdB3hXQHgC8mABXAqJU0b\n6E3WZSM9/N9hzfNrv1II1JMy7Yiq81/6rpsS1TO8lF4Bte5td0OUxKpj8dW3fzM=\n=8XMS\n-----END PGP SIGNATURE-----\n", "payload": "tree 36f9066ab25826f9401216d6ff371954eb9f447c\nparent d8dba7fbe587ba5fb6cfe939083ccd92c61f5827\nparent 7a255a2f9381ba5886cacc48c1dd0420a739a55c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1576160402 +0000\ncommitter GitHub <noreply@github.com> 1576160402 +0000\n\nMerge #2539\n\n2539: Remove old location infra r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c213c3b36b7987504c6c3703b76a637dd0d01355", "html_url": "https://github.com/rust-lang/rust/commit/c213c3b36b7987504c6c3703b76a637dd0d01355", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c213c3b36b7987504c6c3703b76a637dd0d01355/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8dba7fbe587ba5fb6cfe939083ccd92c61f5827", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8dba7fbe587ba5fb6cfe939083ccd92c61f5827", "html_url": "https://github.com/rust-lang/rust/commit/d8dba7fbe587ba5fb6cfe939083ccd92c61f5827"}, {"sha": "7a255a2f9381ba5886cacc48c1dd0420a739a55c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a255a2f9381ba5886cacc48c1dd0420a739a55c", "html_url": "https://github.com/rust-lang/rust/commit/7a255a2f9381ba5886cacc48c1dd0420a739a55c"}], "stats": {"total": 509, "additions": 276, "deletions": 233}, "files": [{"sha": "c705d16302bfe3267a1d66994bfaf097a016f0fb", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=c213c3b36b7987504c6c3703b76a637dd0d01355", "patch": "@@ -11,7 +11,7 @@ use hir_def::{\n     per_ns::PerNs,\n     resolver::HasResolver,\n     type_ref::{Mutability, TypeRef},\n-    AdtId, AstItemDef, ConstId, ContainerId, DefWithBodyId, EnumId, FunctionId, HasModule, ImplId,\n+    AdtId, ConstId, ContainerId, DefWithBodyId, EnumId, FunctionId, HasModule, ImplId,\n     LocalEnumVariantId, LocalImportId, LocalModuleId, LocalStructFieldId, Lookup, ModuleId,\n     StaticId, StructId, TraitId, TypeAliasId, TypeParamId, UnionId,\n };\n@@ -269,7 +269,7 @@ pub struct Struct {\n \n impl Struct {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        Module { id: self.id.module(db) }\n+        Module { id: self.id.lookup(db).container }\n     }\n \n     pub fn krate(self, db: &impl DefDatabase) -> Option<Crate> {\n@@ -290,7 +290,7 @@ impl Struct {\n     }\n \n     pub fn ty(self, db: &impl HirDatabase) -> Type {\n-        Type::from_def(db, self.id.module(db).krate, self.id)\n+        Type::from_def(db, self.id.lookup(db).container.krate, self.id)\n     }\n \n     fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n@@ -309,11 +309,11 @@ impl Union {\n     }\n \n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        Module { id: self.id.module(db) }\n+        Module { id: self.id.lookup(db).container }\n     }\n \n     pub fn ty(self, db: &impl HirDatabase) -> Type {\n-        Type::from_def(db, self.id.module(db).krate, self.id)\n+        Type::from_def(db, self.id.lookup(db).container.krate, self.id)\n     }\n \n     pub fn fields(self, db: &impl HirDatabase) -> Vec<StructField> {\n@@ -337,7 +337,7 @@ pub struct Enum {\n \n impl Enum {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        Module { id: self.id.module(db) }\n+        Module { id: self.id.lookup(db).container }\n     }\n \n     pub fn krate(self, db: &impl DefDatabase) -> Option<Crate> {\n@@ -357,7 +357,7 @@ impl Enum {\n     }\n \n     pub fn ty(self, db: &impl HirDatabase) -> Type {\n-        Type::from_def(db, self.id.module(db).krate, self.id)\n+        Type::from_def(db, self.id.lookup(db).container.krate, self.id)\n     }\n }\n \n@@ -577,7 +577,7 @@ pub struct Trait {\n \n impl Trait {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        Module { id: self.id.module(db) }\n+        Module { id: self.id.lookup(db).container }\n     }\n \n     pub fn name(self, db: &impl DefDatabase) -> Name {"}, {"sha": "f7411c5cf104d900e998c6f01d0e218bae3fe3e8", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 48, "deletions": 68, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=c213c3b36b7987504c6c3703b76a637dd0d01355", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n use hir_def::{\n-    child_by_source::ChildBySource, dyn_map::DynMap, keys, nameres::ModuleSource, AstItemDef,\n-    EnumVariantId, GenericDefId, LocationCtx, ModuleId, VariantId,\n+    child_by_source::ChildBySource, dyn_map::DynMap, keys, nameres::ModuleSource, EnumVariantId,\n+    GenericDefId, ModuleId, VariantId,\n };\n use hir_expand::{name::AsName, AstId, MacroDefId, MacroDefKind};\n use ra_syntax::{\n@@ -23,35 +23,43 @@ pub trait FromSource: Sized {\n impl FromSource for Struct {\n     type Ast = ast::StructDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        let id = from_source(db, src)?;\n-        Some(Struct { id })\n+        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::STRUCT]\n+            .get(&src)\n+            .copied()\n+            .map(Struct::from)\n     }\n }\n impl FromSource for Union {\n     type Ast = ast::UnionDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        let id = from_source(db, src)?;\n-        Some(Union { id })\n+        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::UNION]\n+            .get(&src)\n+            .copied()\n+            .map(Union::from)\n     }\n }\n impl FromSource for Enum {\n     type Ast = ast::EnumDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        let id = from_source(db, src)?;\n-        Some(Enum { id })\n+        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::ENUM]\n+            .get(&src)\n+            .copied()\n+            .map(Enum::from)\n     }\n }\n impl FromSource for Trait {\n     type Ast = ast::TraitDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        let id = from_source(db, src)?;\n-        Some(Trait { id })\n+        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::TRAIT]\n+            .get(&src)\n+            .copied()\n+            .map(Trait::from)\n     }\n }\n impl FromSource for Function {\n     type Ast = ast::FnDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        Container::find(db, src.as_ref().map(|it| it.syntax()))?.child_by_source(db)[keys::FUNCTION]\n+        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::FUNCTION]\n             .get(&src)\n             .copied()\n             .map(Function::from)\n@@ -61,7 +69,7 @@ impl FromSource for Function {\n impl FromSource for Const {\n     type Ast = ast::ConstDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        Container::find(db, src.as_ref().map(|it| it.syntax()))?.child_by_source(db)[keys::CONST]\n+        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::CONST]\n             .get(&src)\n             .copied()\n             .map(Const::from)\n@@ -70,7 +78,7 @@ impl FromSource for Const {\n impl FromSource for Static {\n     type Ast = ast::StaticDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        Container::find(db, src.as_ref().map(|it| it.syntax()))?.child_by_source(db)[keys::STATIC]\n+        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::STATIC]\n             .get(&src)\n             .copied()\n             .map(Static::from)\n@@ -80,8 +88,7 @@ impl FromSource for Static {\n impl FromSource for TypeAlias {\n     type Ast = ast::TypeAliasDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        Container::find(db, src.as_ref().map(|it| it.syntax()))?.child_by_source(db)\n-            [keys::TYPE_ALIAS]\n+        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::TYPE_ALIAS]\n             .get(&src)\n             .copied()\n             .map(TypeAlias::from)\n@@ -107,10 +114,10 @@ impl FromSource for MacroDef {\n impl FromSource for ImplBlock {\n     type Ast = ast::ImplBlock;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        // XXX: use `.parent()` to avoid finding ourselves\n-        let parent = src.value.syntax().parent()?;\n-        let container = Container::find(db, src.with_value(parent).as_ref())?;\n-        container.child_by_source(db)[keys::IMPL].get(&src).copied().map(ImplBlock::from)\n+        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::IMPL]\n+            .get(&src)\n+            .copied()\n+            .map(ImplBlock::from)\n     }\n }\n \n@@ -247,57 +254,30 @@ impl Module {\n     }\n }\n \n-fn from_source<N, DEF>(db: &(impl DefDatabase + AstDatabase), src: InFile<N>) -> Option<DEF>\n-where\n-    N: AstNode,\n-    DEF: AstItemDef<N>,\n-{\n-    let module_src = ModuleSource::from_child_node(db, src.as_ref().map(|it| it.syntax()));\n-    let module = Module::from_definition(db, InFile::new(src.file_id, module_src))?;\n-    let ctx = LocationCtx::new(db, module.id, src.file_id);\n-    let items = db.ast_id_map(src.file_id);\n-    let item_id = items.ast_id(&src.value);\n-    Some(DEF::from_ast_id(ctx, item_id))\n-}\n-\n-enum Container {\n-    Trait(Trait),\n-    ImplBlock(ImplBlock),\n-    Module(Module),\n+fn analyze_container(db: &impl DefDatabase, src: InFile<&SyntaxNode>) -> DynMap {\n+    _analyze_container(db, src).unwrap_or_default()\n }\n \n-impl Container {\n-    fn find(db: &impl DefDatabase, src: InFile<&SyntaxNode>) -> Option<Container> {\n-        // FIXME: this doesn't try to handle nested declarations\n-        for container in src.value.ancestors() {\n-            let res = match_ast! {\n-                match container {\n-                    ast::TraitDef(it) => {\n-                        let c = Trait::from_source(db, src.with_value(it))?;\n-                        Container::Trait(c)\n-                    },\n-                    ast::ImplBlock(it) => {\n-                        let c = ImplBlock::from_source(db, src.with_value(it))?;\n-                        Container::ImplBlock(c)\n-                     },\n-                    _ => { continue },\n-                }\n-            };\n-            return Some(res);\n-        }\n-\n-        let module_source = ModuleSource::from_child_node(db, src);\n-        let c = Module::from_definition(db, src.with_value(module_source))?;\n-        Some(Container::Module(c))\n+fn _analyze_container(db: &impl DefDatabase, src: InFile<&SyntaxNode>) -> Option<DynMap> {\n+    // FIXME: this doesn't try to handle nested declarations\n+    for container in src.value.ancestors().skip(1) {\n+        let res = match_ast! {\n+            match container {\n+                ast::TraitDef(it) => {\n+                    let c = Trait::from_source(db, src.with_value(it))?;\n+                    c.id.child_by_source(db)\n+                },\n+                ast::ImplBlock(it) => {\n+                    let c = ImplBlock::from_source(db, src.with_value(it))?;\n+                    c.id.child_by_source(db)\n+                 },\n+                _ => { continue },\n+            }\n+        };\n+        return Some(res);\n     }\n-}\n \n-impl ChildBySource for Container {\n-    fn child_by_source(&self, db: &impl DefDatabase) -> DynMap {\n-        match self {\n-            Container::Trait(it) => it.id.child_by_source(db),\n-            Container::ImplBlock(it) => it.id.child_by_source(db),\n-            Container::Module(it) => it.id.child_by_source(db),\n-        }\n-    }\n+    let module_source = ModuleSource::from_child_node(db, src);\n+    let c = Module::from_definition(db, src.with_value(module_source))?;\n+    Some(c.id.child_by_source(db))\n }"}, {"sha": "72afecf26c3d71318a27a586b8f389f69203d9f0", "filename": "crates/ra_hir/src/has_source.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fhas_source.rs?ref=c213c3b36b7987504c6c3703b76a637dd0d01355", "patch": "@@ -4,7 +4,7 @@ use either::Either;\n use hir_def::{\n     nameres::ModuleSource,\n     src::{HasChildSource, HasSource as _},\n-    AstItemDef, Lookup, VariantId,\n+    Lookup, VariantId,\n };\n use ra_syntax::ast;\n \n@@ -51,19 +51,19 @@ impl HasSource for StructField {\n impl HasSource for Struct {\n     type Ast = ast::StructDef;\n     fn source(self, db: &impl DefDatabase) -> InFile<ast::StructDef> {\n-        self.id.source(db)\n+        self.id.lookup(db).source(db)\n     }\n }\n impl HasSource for Union {\n     type Ast = ast::UnionDef;\n     fn source(self, db: &impl DefDatabase) -> InFile<ast::UnionDef> {\n-        self.id.source(db)\n+        self.id.lookup(db).source(db)\n     }\n }\n impl HasSource for Enum {\n     type Ast = ast::EnumDef;\n     fn source(self, db: &impl DefDatabase) -> InFile<ast::EnumDef> {\n-        self.id.source(db)\n+        self.id.lookup(db).source(db)\n     }\n }\n impl HasSource for EnumVariant {\n@@ -93,7 +93,7 @@ impl HasSource for Static {\n impl HasSource for Trait {\n     type Ast = ast::TraitDef;\n     fn source(self, db: &impl DefDatabase) -> InFile<ast::TraitDef> {\n-        self.id.source(db)\n+        self.id.lookup(db).source(db)\n     }\n }\n impl HasSource for TypeAlias {"}, {"sha": "ec3d57d1a98e0a4e6a31a313a7ee91225add874b", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=c213c3b36b7987504c6c3703b76a637dd0d01355", "patch": "@@ -11,8 +11,8 @@ use ra_arena::{map::ArenaMap, Arena};\n use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n \n use crate::{\n-    db::DefDatabase, src::HasChildSource, trace::Trace, type_ref::TypeRef, AstItemDef, EnumId,\n-    LocalEnumVariantId, LocalStructFieldId, StructId, UnionId, VariantId,\n+    db::DefDatabase, src::HasChildSource, src::HasSource, trace::Trace, type_ref::TypeRef, EnumId,\n+    LocalEnumVariantId, LocalStructFieldId, Lookup, StructId, UnionId, VariantId,\n };\n \n /// Note that we use `StructData` for unions as well!\n@@ -50,14 +50,14 @@ pub struct StructFieldData {\n \n impl StructData {\n     pub(crate) fn struct_data_query(db: &impl DefDatabase, id: StructId) -> Arc<StructData> {\n-        let src = id.source(db);\n+        let src = id.lookup(db).source(db);\n         let name = src.value.name().map_or_else(Name::missing, |n| n.as_name());\n         let variant_data = VariantData::new(src.value.kind());\n         let variant_data = Arc::new(variant_data);\n         Arc::new(StructData { name, variant_data })\n     }\n     pub(crate) fn union_data_query(db: &impl DefDatabase, id: UnionId) -> Arc<StructData> {\n-        let src = id.source(db);\n+        let src = id.lookup(db).source(db);\n         let name = src.value.name().map_or_else(Name::missing, |n| n.as_name());\n         let variant_data = VariantData::new(\n             src.value\n@@ -72,7 +72,7 @@ impl StructData {\n \n impl EnumData {\n     pub(crate) fn enum_data_query(db: &impl DefDatabase, e: EnumId) -> Arc<EnumData> {\n-        let src = e.source(db);\n+        let src = e.lookup(db).source(db);\n         let name = src.value.name().map_or_else(Name::missing, |n| n.as_name());\n         let mut trace = Trace::new_for_arena();\n         lower_enum(&mut trace, &src.value);\n@@ -89,7 +89,7 @@ impl HasChildSource for EnumId {\n     type ChildId = LocalEnumVariantId;\n     type Value = ast::EnumVariant;\n     fn child_source(&self, db: &impl DefDatabase) -> InFile<ArenaMap<Self::ChildId, Self::Value>> {\n-        let src = self.source(db);\n+        let src = self.lookup(db).source(db);\n         let mut trace = Trace::new_for_map();\n         lower_enum(&mut trace, &src.value);\n         src.with_value(trace.into_map())\n@@ -153,8 +153,8 @@ impl HasChildSource for VariantId {\n                 let src = it.parent.child_source(db);\n                 src.map(|map| map[it.local_id].kind())\n             }\n-            VariantId::StructId(it) => it.source(db).map(|it| it.kind()),\n-            VariantId::UnionId(it) => it.source(db).map(|it| {\n+            VariantId::StructId(it) => it.lookup(db).source(db).map(|it| it.kind()),\n+            VariantId::UnionId(it) => it.lookup(db).source(db).map(|it| {\n                 it.record_field_def_list()\n                     .map(ast::StructKind::Record)\n                     .unwrap_or(ast::StructKind::Unit)"}, {"sha": "5bf82e191cd69b73bf50ed277c433decae5544a3", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=c213c3b36b7987504c6c3703b76a637dd0d01355", "patch": "@@ -12,8 +12,7 @@ use ra_syntax::{\n use tt::Subtree;\n \n use crate::{\n-    db::DefDatabase, path::Path, src::HasChildSource, src::HasSource, AdtId, AstItemDef, AttrDefId,\n-    Lookup,\n+    db::DefDatabase, path::Path, src::HasChildSource, src::HasSource, AdtId, AttrDefId, Lookup,\n };\n \n #[derive(Default, Debug, Clone, PartialEq, Eq)]\n@@ -56,11 +55,11 @@ impl Attrs {\n                 Attrs::from_attrs_owner(db, src.map(|it| it as &dyn AttrsOwner))\n             }\n             AttrDefId::AdtId(it) => match it {\n-                AdtId::StructId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n-                AdtId::EnumId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n-                AdtId::UnionId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n+                AdtId::StructId(it) => attrs_from_loc(it.lookup(db), db),\n+                AdtId::EnumId(it) => attrs_from_loc(it.lookup(db), db),\n+                AdtId::UnionId(it) => attrs_from_loc(it.lookup(db), db),\n             },\n-            AttrDefId::TraitId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n+            AttrDefId::TraitId(it) => attrs_from_loc(it.lookup(db), db),\n             AttrDefId::MacroDefId(it) => {\n                 it.ast_id.map_or_else(Default::default, |ast_id| attrs_from_ast(ast_id, db))\n             }"}, {"sha": "3c9379b151c65397844c58af7a5a38c1295c8f94", "filename": "crates/ra_hir_def/src/child_by_source.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs?ref=c213c3b36b7987504c6c3703b76a637dd0d01355", "patch": "@@ -11,8 +11,8 @@ use crate::{\n     dyn_map::DynMap,\n     keys,\n     src::{HasChildSource, HasSource},\n-    AssocItemId, EnumId, EnumVariantId, ImplId, Lookup, ModuleDefId, ModuleId, StructFieldId,\n-    TraitId, VariantId,\n+    AdtId, AssocItemId, EnumId, EnumVariantId, ImplId, Lookup, ModuleDefId, ModuleId,\n+    StructFieldId, TraitId, VariantId,\n };\n \n pub trait ChildBySource {\n@@ -94,6 +94,24 @@ impl ChildBySource for ModuleId {\n                     let src = ty.lookup(db).source(db);\n                     res[keys::TYPE_ALIAS].insert(src, ty)\n                 }\n+                ModuleDefId::TraitId(trait_) => {\n+                    let src = trait_.lookup(db).source(db);\n+                    res[keys::TRAIT].insert(src, trait_)\n+                }\n+                ModuleDefId::AdtId(adt) => match adt {\n+                    AdtId::StructId(strukt) => {\n+                        let src = strukt.lookup(db).source(db);\n+                        res[keys::STRUCT].insert(src, strukt)\n+                    }\n+                    AdtId::UnionId(union_) => {\n+                        let src = union_.lookup(db).source(db);\n+                        res[keys::UNION].insert(src, union_)\n+                    }\n+                    AdtId::EnumId(enum_) => {\n+                        let src = enum_.lookup(db).source(db);\n+                        res[keys::ENUM].insert(src, enum_)\n+                    }\n+                },\n                 _ => (),\n             }\n         }"}, {"sha": "b2dac183e3bdbd077b06616ad4bc9d81af7dce7a", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=c213c3b36b7987504c6c3703b76a637dd0d01355", "patch": "@@ -12,8 +12,8 @@ use crate::{\n     db::DefDatabase,\n     src::HasSource,\n     type_ref::{Mutability, TypeRef},\n-    AssocItemId, AstItemDef, ConstId, ConstLoc, ContainerId, FunctionId, FunctionLoc, ImplId,\n-    Intern, Lookup, StaticId, TraitId, TypeAliasId, TypeAliasLoc,\n+    AssocItemId, ConstId, ConstLoc, ContainerId, FunctionId, FunctionLoc, ImplId, Intern, Lookup,\n+    StaticId, TraitId, TypeAliasId, TypeAliasLoc,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -94,7 +94,7 @@ pub struct TraitData {\n \n impl TraitData {\n     pub(crate) fn trait_data_query(db: &impl DefDatabase, tr: TraitId) -> Arc<TraitData> {\n-        let src = tr.source(db);\n+        let src = tr.lookup(db).source(db);\n         let name = src.value.name().map_or_else(Name::missing, |n| n.as_name());\n         let auto = src.value.is_auto();\n         let ast_id_map = db.ast_id_map(src.file_id);"}, {"sha": "98bff6cb7836686900497803c159bf189563d8e8", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=c213c3b36b7987504c6c3703b76a637dd0d01355", "patch": "@@ -3,7 +3,7 @@ use std::sync::Arc;\n \n use hir_expand::{db::AstDatabase, HirFileId};\n use ra_db::{salsa, CrateId, SourceDatabase};\n-use ra_syntax::{ast, SmolStr};\n+use ra_syntax::SmolStr;\n \n use crate::{\n     adt::{EnumData, StructData},\n@@ -17,27 +17,27 @@ use crate::{\n         raw::{ImportSourceMap, RawItems},\n         CrateDefMap,\n     },\n-    AttrDefId, ConstId, ConstLoc, DefWithBodyId, EnumId, FunctionId, FunctionLoc, GenericDefId,\n-    ImplId, ImplLoc, ItemLoc, ModuleId, StaticId, StaticLoc, StructId, TraitId, TypeAliasId,\n-    TypeAliasLoc, UnionId,\n+    AttrDefId, ConstId, ConstLoc, DefWithBodyId, EnumId, EnumLoc, FunctionId, FunctionLoc,\n+    GenericDefId, ImplId, ImplLoc, ModuleId, StaticId, StaticLoc, StructId, StructLoc, TraitId,\n+    TraitLoc, TypeAliasId, TypeAliasLoc, UnionId, UnionLoc,\n };\n \n #[salsa::query_group(InternDatabaseStorage)]\n pub trait InternDatabase: SourceDatabase {\n     #[salsa::interned]\n     fn intern_function(&self, loc: FunctionLoc) -> FunctionId;\n     #[salsa::interned]\n-    fn intern_struct(&self, loc: ItemLoc<ast::StructDef>) -> StructId;\n+    fn intern_struct(&self, loc: StructLoc) -> StructId;\n     #[salsa::interned]\n-    fn intern_union(&self, loc: ItemLoc<ast::UnionDef>) -> UnionId;\n+    fn intern_union(&self, loc: UnionLoc) -> UnionId;\n     #[salsa::interned]\n-    fn intern_enum(&self, loc: ItemLoc<ast::EnumDef>) -> EnumId;\n+    fn intern_enum(&self, loc: EnumLoc) -> EnumId;\n     #[salsa::interned]\n     fn intern_const(&self, loc: ConstLoc) -> ConstId;\n     #[salsa::interned]\n     fn intern_static(&self, loc: StaticLoc) -> StaticId;\n     #[salsa::interned]\n-    fn intern_trait(&self, loc: ItemLoc<ast::TraitDef>) -> TraitId;\n+    fn intern_trait(&self, loc: TraitLoc) -> TraitId;\n     #[salsa::interned]\n     fn intern_type_alias(&self, loc: TypeAliasLoc) -> TypeAliasId;\n     #[salsa::interned]"}, {"sha": "b29f142e3307c67440cff861738fe90c25ef2159", "filename": "crates/ra_hir_def/src/docs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs?ref=c213c3b36b7987504c6c3703b76a637dd0d01355", "patch": "@@ -11,7 +11,7 @@ use ra_syntax::ast;\n use crate::{\n     db::DefDatabase,\n     src::{HasChildSource, HasSource},\n-    AdtId, AstItemDef, AttrDefId, Lookup,\n+    AdtId, AttrDefId, Lookup,\n };\n \n /// Holds documentation\n@@ -51,15 +51,15 @@ impl Documentation {\n                 }\n             }\n             AttrDefId::AdtId(it) => match it {\n-                AdtId::StructId(it) => docs_from_ast(&it.source(db).value),\n-                AdtId::EnumId(it) => docs_from_ast(&it.source(db).value),\n-                AdtId::UnionId(it) => docs_from_ast(&it.source(db).value),\n+                AdtId::StructId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n+                AdtId::EnumId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n+                AdtId::UnionId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n             },\n             AttrDefId::EnumVariantId(it) => {\n                 let src = it.parent.child_source(db);\n                 docs_from_ast(&src.value[it.local_id])\n             }\n-            AttrDefId::TraitId(it) => docs_from_ast(&it.source(db).value),\n+            AttrDefId::TraitId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n             AttrDefId::MacroDefId(it) => docs_from_ast(&it.ast_id?.to_node(db)),\n             AttrDefId::ConstId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n             AttrDefId::StaticId(it) => docs_from_ast(&it.lookup(db).source(db).value),"}, {"sha": "e502dd7983b13e1dac0d156806de16446d9d33a5", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=c213c3b36b7987504c6c3703b76a637dd0d01355", "patch": "@@ -21,7 +21,7 @@ use crate::{\n     src::HasChildSource,\n     src::HasSource,\n     type_ref::{TypeBound, TypeRef},\n-    AdtId, AstItemDef, GenericDefId, LocalTypeParamId, Lookup, TypeParamId,\n+    AdtId, GenericDefId, LocalTypeParamId, Lookup, TypeParamId,\n };\n \n /// Data about a generic parameter (to a function, struct, impl, ...).\n@@ -71,22 +71,22 @@ impl GenericParams {\n                 src.file_id\n             }\n             GenericDefId::AdtId(AdtId::StructId(it)) => {\n-                let src = it.source(db);\n+                let src = it.lookup(db).source(db);\n                 generics.fill(&mut sm, &src.value);\n                 src.file_id\n             }\n             GenericDefId::AdtId(AdtId::UnionId(it)) => {\n-                let src = it.source(db);\n+                let src = it.lookup(db).source(db);\n                 generics.fill(&mut sm, &src.value);\n                 src.file_id\n             }\n             GenericDefId::AdtId(AdtId::EnumId(it)) => {\n-                let src = it.source(db);\n+                let src = it.lookup(db).source(db);\n                 generics.fill(&mut sm, &src.value);\n                 src.file_id\n             }\n             GenericDefId::TraitId(it) => {\n-                let src = it.source(db);\n+                let src = it.lookup(db).source(db);\n \n                 // traits get the Self type as an implicit first type parameter\n                 let self_param_id ="}, {"sha": "4611c6e38679921e805201d716365c90fa1d7ecc", "filename": "crates/ra_hir_def/src/keys.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs?ref=c213c3b36b7987504c6c3703b76a637dd0d01355", "patch": "@@ -8,7 +8,8 @@ use rustc_hash::FxHashMap;\n \n use crate::{\n     dyn_map::{DynMap, Policy},\n-    ConstId, EnumVariantId, FunctionId, ImplId, StaticId, StructFieldId, TypeAliasId, TypeParamId,\n+    ConstId, EnumId, EnumVariantId, FunctionId, ImplId, StaticId, StructFieldId, StructId, TraitId,\n+    TypeAliasId, TypeParamId, UnionId,\n };\n \n type Key<K, V> = crate::dyn_map::Key<InFile<K>, V, AstPtrPolicy<K, V>>;\n@@ -18,6 +19,10 @@ pub const CONST: Key<ast::ConstDef, ConstId> = Key::new();\n pub const STATIC: Key<ast::StaticDef, StaticId> = Key::new();\n pub const TYPE_ALIAS: Key<ast::TypeAliasDef, TypeAliasId> = Key::new();\n pub const IMPL: Key<ast::ImplBlock, ImplId> = Key::new();\n+pub const TRAIT: Key<ast::TraitDef, TraitId> = Key::new();\n+pub const STRUCT: Key<ast::StructDef, StructId> = Key::new();\n+pub const UNION: Key<ast::UnionDef, UnionId> = Key::new();\n+pub const ENUM: Key<ast::EnumDef, EnumId> = Key::new();\n \n pub const ENUM_VARIANT: Key<ast::EnumVariant, EnumVariantId> = Key::new();\n pub const TUPLE_FIELD: Key<ast::TupleFieldDef, StructFieldId> = Key::new();"}, {"sha": "f085bbe872d006ea6fd551a43070820b55eec3c5", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 80, "deletions": 89, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=c213c3b36b7987504c6c3703b76a637dd0d01355", "patch": "@@ -40,14 +40,14 @@ mod test_db;\n #[cfg(test)]\n mod marks;\n \n-use std::hash::{Hash, Hasher};\n+use std::hash::Hash;\n \n-use hir_expand::{ast_id_map::FileAstId, db::AstDatabase, AstId, HirFileId, InFile, MacroDefId};\n+use hir_expand::{ast_id_map::FileAstId, AstId, HirFileId, InFile, MacroDefId};\n use ra_arena::{impl_arena_id, RawId};\n use ra_db::{impl_intern_key, salsa, CrateId};\n-use ra_syntax::{ast, AstNode};\n+use ra_syntax::ast;\n \n-use crate::{builtin_type::BuiltinType, db::InternDatabase};\n+use crate::builtin_type::BuiltinType;\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct LocalImportId(RawId);\n@@ -65,63 +65,6 @@ pub struct ModuleId {\n pub struct LocalModuleId(RawId);\n impl_arena_id!(LocalModuleId);\n \n-#[derive(Debug)]\n-pub struct ItemLoc<N: AstNode> {\n-    pub(crate) module: ModuleId,\n-    ast_id: AstId<N>,\n-}\n-\n-impl<N: AstNode> PartialEq for ItemLoc<N> {\n-    fn eq(&self, other: &Self) -> bool {\n-        self.module == other.module && self.ast_id == other.ast_id\n-    }\n-}\n-impl<N: AstNode> Eq for ItemLoc<N> {}\n-impl<N: AstNode> Hash for ItemLoc<N> {\n-    fn hash<H: Hasher>(&self, hasher: &mut H) {\n-        self.module.hash(hasher);\n-        self.ast_id.hash(hasher);\n-    }\n-}\n-\n-impl<N: AstNode> Clone for ItemLoc<N> {\n-    fn clone(&self) -> ItemLoc<N> {\n-        ItemLoc { module: self.module, ast_id: self.ast_id }\n-    }\n-}\n-\n-#[derive(Clone, Copy)]\n-pub struct LocationCtx<DB> {\n-    db: DB,\n-    module: ModuleId,\n-    file_id: HirFileId,\n-}\n-\n-impl<'a, DB> LocationCtx<&'a DB> {\n-    pub fn new(db: &'a DB, module: ModuleId, file_id: HirFileId) -> LocationCtx<&'a DB> {\n-        LocationCtx { db, module, file_id }\n-    }\n-}\n-\n-pub trait AstItemDef<N: AstNode>: salsa::InternKey + Clone {\n-    fn intern(db: &impl InternDatabase, loc: ItemLoc<N>) -> Self;\n-    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<N>;\n-\n-    fn from_ast_id(ctx: LocationCtx<&impl InternDatabase>, ast_id: FileAstId<N>) -> Self {\n-        let loc = ItemLoc { module: ctx.module, ast_id: AstId::new(ctx.file_id, ast_id) };\n-        Self::intern(ctx.db, loc)\n-    }\n-    fn source(self, db: &(impl AstDatabase + InternDatabase)) -> InFile<N> {\n-        let loc = self.lookup_intern(db);\n-        let value = loc.ast_id.to_node(db);\n-        InFile { file_id: loc.ast_id.file_id, value }\n-    }\n-    fn module(self, db: &impl InternDatabase) -> ModuleId {\n-        let loc = self.lookup_intern(db);\n-        loc.module\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct FunctionId(salsa::InternId);\n impl_intern_key!(FunctionId);\n@@ -149,36 +92,72 @@ impl Lookup for FunctionId {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct StructId(salsa::InternId);\n impl_intern_key!(StructId);\n-impl AstItemDef<ast::StructDef> for StructId {\n-    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::StructDef>) -> Self {\n-        db.intern_struct(loc)\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct StructLoc {\n+    pub container: ModuleId,\n+    pub ast_id: AstId<ast::StructDef>,\n+}\n+\n+impl Intern for StructLoc {\n+    type ID = StructId;\n+    fn intern(self, db: &impl db::DefDatabase) -> StructId {\n+        db.intern_struct(self)\n     }\n-    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::StructDef> {\n-        db.lookup_intern_struct(self)\n+}\n+\n+impl Lookup for StructId {\n+    type Data = StructLoc;\n+    fn lookup(&self, db: &impl db::DefDatabase) -> StructLoc {\n+        db.lookup_intern_struct(*self)\n     }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct UnionId(salsa::InternId);\n impl_intern_key!(UnionId);\n-impl AstItemDef<ast::UnionDef> for UnionId {\n-    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::UnionDef>) -> Self {\n-        db.intern_union(loc)\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct UnionLoc {\n+    pub container: ModuleId,\n+    pub ast_id: AstId<ast::UnionDef>,\n+}\n+\n+impl Intern for UnionLoc {\n+    type ID = UnionId;\n+    fn intern(self, db: &impl db::DefDatabase) -> UnionId {\n+        db.intern_union(self)\n     }\n-    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::UnionDef> {\n-        db.lookup_intern_union(self)\n+}\n+\n+impl Lookup for UnionId {\n+    type Data = UnionLoc;\n+    fn lookup(&self, db: &impl db::DefDatabase) -> UnionLoc {\n+        db.lookup_intern_union(*self)\n     }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct EnumId(salsa::InternId);\n impl_intern_key!(EnumId);\n-impl AstItemDef<ast::EnumDef> for EnumId {\n-    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::EnumDef>) -> Self {\n-        db.intern_enum(loc)\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct EnumLoc {\n+    pub container: ModuleId,\n+    pub ast_id: AstId<ast::EnumDef>,\n+}\n+\n+impl Intern for EnumLoc {\n+    type ID = EnumId;\n+    fn intern(self, db: &impl db::DefDatabase) -> EnumId {\n+        db.intern_enum(self)\n     }\n-    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::EnumDef> {\n-        db.lookup_intern_enum(self)\n+}\n+\n+impl Lookup for EnumId {\n+    type Data = EnumLoc;\n+    fn lookup(&self, db: &impl db::DefDatabase) -> EnumLoc {\n+        db.lookup_intern_enum(*self)\n     }\n }\n \n@@ -253,12 +232,24 @@ impl Lookup for StaticId {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct TraitId(salsa::InternId);\n impl_intern_key!(TraitId);\n-impl AstItemDef<ast::TraitDef> for TraitId {\n-    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::TraitDef>) -> Self {\n-        db.intern_trait(loc)\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct TraitLoc {\n+    pub container: ModuleId,\n+    pub ast_id: AstId<ast::TraitDef>,\n+}\n+\n+impl Intern for TraitLoc {\n+    type ID = TraitId;\n+    fn intern(self, db: &impl db::DefDatabase) -> TraitId {\n+        db.intern_trait(self)\n     }\n-    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::TraitDef> {\n-        db.lookup_intern_trait(self)\n+}\n+\n+impl Lookup for TraitId {\n+    type Data = TraitLoc;\n+    fn lookup(&self, db: &impl db::DefDatabase) -> TraitLoc {\n+        db.lookup_intern_trait(*self)\n     }\n }\n \n@@ -492,7 +483,7 @@ impl HasModule for FunctionLoc {\n         match self.container {\n             ContainerId::ModuleId(it) => it,\n             ContainerId::ImplId(it) => it.lookup(db).container,\n-            ContainerId::TraitId(it) => it.module(db),\n+            ContainerId::TraitId(it) => it.lookup(db).container,\n         }\n     }\n }\n@@ -502,7 +493,7 @@ impl HasModule for TypeAliasLoc {\n         match self.container {\n             ContainerId::ModuleId(it) => it,\n             ContainerId::ImplId(it) => it.lookup(db).container,\n-            ContainerId::TraitId(it) => it.module(db),\n+            ContainerId::TraitId(it) => it.lookup(db).container,\n         }\n     }\n }\n@@ -512,17 +503,17 @@ impl HasModule for ConstLoc {\n         match self.container {\n             ContainerId::ModuleId(it) => it,\n             ContainerId::ImplId(it) => it.lookup(db).container,\n-            ContainerId::TraitId(it) => it.module(db),\n+            ContainerId::TraitId(it) => it.lookup(db).container,\n         }\n     }\n }\n \n impl HasModule for AdtId {\n     fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n         match self {\n-            AdtId::StructId(it) => it.module(db),\n-            AdtId::UnionId(it) => it.module(db),\n-            AdtId::EnumId(it) => it.module(db),\n+            AdtId::StructId(it) => it.lookup(db).container,\n+            AdtId::UnionId(it) => it.lookup(db).container,\n+            AdtId::EnumId(it) => it.lookup(db).container,\n         }\n     }\n }\n@@ -542,10 +533,10 @@ impl HasModule for GenericDefId {\n         match self {\n             GenericDefId::FunctionId(it) => it.lookup(db).module(db),\n             GenericDefId::AdtId(it) => it.module(db),\n-            GenericDefId::TraitId(it) => it.module(db),\n+            GenericDefId::TraitId(it) => it.lookup(db).container,\n             GenericDefId::TypeAliasId(it) => it.lookup(db).module(db),\n             GenericDefId::ImplId(it) => it.lookup(db).container,\n-            GenericDefId::EnumVariantId(it) => it.parent.module(db),\n+            GenericDefId::EnumVariantId(it) => it.parent.lookup(db).container,\n             GenericDefId::ConstId(it) => it.lookup(db).module(db),\n         }\n     }"}, {"sha": "04aadead19ba8df88f2463b43658cd56a8de0b49", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=c213c3b36b7987504c6c3703b76a637dd0d01355", "patch": "@@ -24,9 +24,9 @@ use crate::{\n     },\n     path::{Path, PathKind},\n     per_ns::PerNs,\n-    AdtId, AstId, AstItemDef, ConstLoc, ContainerId, EnumId, EnumVariantId, FunctionLoc, ImplLoc,\n-    Intern, LocalImportId, LocalModuleId, LocationCtx, ModuleDefId, ModuleId, StaticLoc, StructId,\n-    TraitId, TypeAliasLoc, UnionId,\n+    AdtId, AstId, ConstLoc, ContainerId, EnumLoc, EnumVariantId, FunctionLoc, ImplLoc, Intern,\n+    LocalImportId, LocalModuleId, ModuleDefId, ModuleId, StaticLoc, StructLoc, TraitLoc,\n+    TypeAliasLoc, UnionLoc,\n };\n \n pub(super) fn collect_defs(db: &impl DefDatabase, mut def_map: CrateDefMap) -> CrateDefMap {\n@@ -753,8 +753,6 @@ where\n \n     fn define_def(&mut self, def: &raw::DefData, attrs: &Attrs) {\n         let module = ModuleId { krate: self.def_collector.def_map.krate, local_id: self.module_id };\n-        let ctx = LocationCtx::new(self.def_collector.db, module, self.file_id);\n-\n         // FIXME: check attrs to see if this is an attribute macro invocation;\n         // in which case we don't add the invocation, just a single attribute\n         // macro invocation\n@@ -773,14 +771,20 @@ where\n                 PerNs::values(def.into())\n             }\n             raw::DefKind::Struct(ast_id) => {\n-                let id = StructId::from_ast_id(ctx, ast_id).into();\n-                PerNs::both(id, id)\n+                let def = StructLoc { container: module, ast_id: AstId::new(self.file_id, ast_id) }\n+                    .intern(self.def_collector.db);\n+                PerNs::both(def.into(), def.into())\n             }\n             raw::DefKind::Union(ast_id) => {\n-                let id = UnionId::from_ast_id(ctx, ast_id).into();\n-                PerNs::both(id, id)\n+                let def = UnionLoc { container: module, ast_id: AstId::new(self.file_id, ast_id) }\n+                    .intern(self.def_collector.db);\n+                PerNs::both(def.into(), def.into())\n+            }\n+            raw::DefKind::Enum(ast_id) => {\n+                let def = EnumLoc { container: module, ast_id: AstId::new(self.file_id, ast_id) }\n+                    .intern(self.def_collector.db);\n+                PerNs::types(def.into())\n             }\n-            raw::DefKind::Enum(ast_id) => PerNs::types(EnumId::from_ast_id(ctx, ast_id).into()),\n             raw::DefKind::Const(ast_id) => {\n                 let def = ConstLoc {\n                     container: ContainerId::ModuleId(module),\n@@ -796,7 +800,12 @@ where\n \n                 PerNs::values(def.into())\n             }\n-            raw::DefKind::Trait(ast_id) => PerNs::types(TraitId::from_ast_id(ctx, ast_id).into()),\n+            raw::DefKind::Trait(ast_id) => {\n+                let def = TraitLoc { container: module, ast_id: AstId::new(self.file_id, ast_id) }\n+                    .intern(self.def_collector.db);\n+\n+                PerNs::types(def.into())\n+            }\n             raw::DefKind::TypeAlias(ast_id) => {\n                 let def = TypeAliasLoc {\n                     container: ContainerId::ModuleId(module),"}, {"sha": "17b2169d2a527e49b016d8223de3f422a5f73677", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=c213c3b36b7987504c6c3703b76a637dd0d01355", "patch": "@@ -17,9 +17,9 @@ use crate::{\n     nameres::{BuiltinShadowMode, CrateDefMap},\n     path::{Path, PathKind},\n     per_ns::PerNs,\n-    AdtId, AstItemDef, ConstId, ContainerId, DefWithBodyId, EnumId, EnumVariantId, FunctionId,\n-    GenericDefId, HasModule, ImplId, LocalModuleId, Lookup, ModuleDefId, ModuleId, StaticId,\n-    StructId, TraitId, TypeAliasId, TypeParamId, VariantId,\n+    AdtId, ConstId, ContainerId, DefWithBodyId, EnumId, EnumVariantId, FunctionId, GenericDefId,\n+    HasModule, ImplId, LocalModuleId, Lookup, ModuleDefId, ModuleId, StaticId, StructId, TraitId,\n+    TypeAliasId, TypeParamId, VariantId,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -524,7 +524,7 @@ impl HasResolver for ModuleId {\n \n impl HasResolver for TraitId {\n     fn resolver(self, db: &impl DefDatabase) -> Resolver {\n-        self.module(db).resolver(db).push_generic_params_scope(db, self.into())\n+        self.lookup(db).container.resolver(db).push_generic_params_scope(db, self.into())\n     }\n }\n "}, {"sha": "20200d1db49d0b392ba92833bf32011b8d92684a", "filename": "crates/ra_hir_def/src/src.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_def%2Fsrc%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_def%2Fsrc%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fsrc.rs?ref=c213c3b36b7987504c6c3703b76a637dd0d01355", "patch": "@@ -4,7 +4,10 @@ use hir_expand::InFile;\n use ra_arena::map::ArenaMap;\n use ra_syntax::ast;\n \n-use crate::{db::DefDatabase, ConstLoc, FunctionLoc, ImplLoc, StaticLoc, TypeAliasLoc};\n+use crate::{\n+    db::DefDatabase, ConstLoc, EnumLoc, FunctionLoc, ImplLoc, StaticLoc, StructLoc, TraitLoc,\n+    TypeAliasLoc, UnionLoc,\n+};\n \n pub trait HasSource {\n     type Value;\n@@ -56,6 +59,42 @@ impl HasSource for ImplLoc {\n     }\n }\n \n+impl HasSource for TraitLoc {\n+    type Value = ast::TraitDef;\n+\n+    fn source(&self, db: &impl DefDatabase) -> InFile<ast::TraitDef> {\n+        let node = self.ast_id.to_node(db);\n+        InFile::new(self.ast_id.file_id, node)\n+    }\n+}\n+\n+impl HasSource for StructLoc {\n+    type Value = ast::StructDef;\n+\n+    fn source(&self, db: &impl DefDatabase) -> InFile<ast::StructDef> {\n+        let node = self.ast_id.to_node(db);\n+        InFile::new(self.ast_id.file_id, node)\n+    }\n+}\n+\n+impl HasSource for UnionLoc {\n+    type Value = ast::UnionDef;\n+\n+    fn source(&self, db: &impl DefDatabase) -> InFile<ast::UnionDef> {\n+        let node = self.ast_id.to_node(db);\n+        InFile::new(self.ast_id.file_id, node)\n+    }\n+}\n+\n+impl HasSource for EnumLoc {\n+    type Value = ast::EnumDef;\n+\n+    fn source(&self, db: &impl DefDatabase) -> InFile<ast::EnumDef> {\n+        let node = self.ast_id.to_node(db);\n+        InFile::new(self.ast_id.file_id, node)\n+    }\n+}\n+\n pub trait HasChildSource {\n     type ChildId;\n     type Value;"}, {"sha": "be5f3cbe35eee9b4735c7ec17a865950d6431a7a", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=c213c3b36b7987504c6c3703b76a637dd0d01355", "patch": "@@ -367,6 +367,9 @@ mod tests {\n             BuiltinFnLikeExpander::FormatArgs,\n         );\n \n-        assert_eq!(expanded, r#\"std::fmt::Arguments::new_v1(&[] ,&[std::fmt::ArgumentV1::new(&(arg1(a,b,c)),std::fmt::Display::fmt),std::fmt::ArgumentV1::new(&(arg2),std::fmt::Display::fmt),])\"#);\n+        assert_eq!(\n+            expanded,\n+            r#\"std::fmt::Arguments::new_v1(&[] ,&[std::fmt::ArgumentV1::new(&(arg1(a,b,c)),std::fmt::Display::fmt),std::fmt::ArgumentV1::new(&(arg2),std::fmt::Display::fmt),])\"#\n+        );\n     }\n }"}, {"sha": "5f795bc022c3882230dba89e58944603630f48de", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=c213c3b36b7987504c6c3703b76a637dd0d01355", "patch": "@@ -14,7 +14,7 @@ use hir_def::{\n     path::{GenericArg, Path, PathKind, PathSegment},\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{TypeBound, TypeRef},\n-    AdtId, AstItemDef, ConstId, EnumId, EnumVariantId, FunctionId, GenericDefId, HasModule, ImplId,\n+    AdtId, ConstId, EnumId, EnumVariantId, FunctionId, GenericDefId, HasModule, ImplId,\n     LocalStructFieldId, Lookup, StaticId, StructId, TraitId, TypeAliasId, UnionId, VariantId,\n };\n use ra_arena::map::ArenaMap;\n@@ -698,10 +698,11 @@ impl_froms!(CallableDef: FunctionId, StructId, EnumVariantId);\n impl CallableDef {\n     pub fn krate(self, db: &impl HirDatabase) -> CrateId {\n         match self {\n-            CallableDef::FunctionId(f) => f.lookup(db).module(db).krate,\n-            CallableDef::StructId(s) => s.module(db).krate,\n-            CallableDef::EnumVariantId(e) => e.parent.module(db).krate,\n+            CallableDef::FunctionId(f) => f.lookup(db).module(db),\n+            CallableDef::StructId(s) => s.lookup(db).container,\n+            CallableDef::EnumVariantId(e) => e.parent.lookup(db).container,\n         }\n+        .krate\n     }\n }\n "}, {"sha": "fc21872b2bd15bfd28ea411fd95744d8fd593ff5", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c213c3b36b7987504c6c3703b76a637dd0d01355/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=c213c3b36b7987504c6c3703b76a637dd0d01355", "patch": "@@ -9,9 +9,7 @@ use chalk_ir::{\n };\n use chalk_rust_ir::{AssociatedTyDatum, AssociatedTyValue, ImplDatum, StructDatum, TraitDatum};\n \n-use hir_def::{\n-    AssocItemId, AstItemDef, ContainerId, GenericDefId, ImplId, Lookup, TraitId, TypeAliasId,\n-};\n+use hir_def::{AssocItemId, ContainerId, GenericDefId, ImplId, Lookup, TraitId, TypeAliasId};\n use ra_db::{\n     salsa::{InternId, InternKey},\n     CrateId,\n@@ -593,7 +591,7 @@ pub(crate) fn trait_datum_query(\n     let bound_vars = Substs::bound_vars(&generic_params);\n     let flags = chalk_rust_ir::TraitFlags {\n         auto: trait_data.auto,\n-        upstream: trait_.module(db).krate != krate,\n+        upstream: trait_.lookup(db).container.krate != krate,\n         non_enumerable: true,\n         coinductive: false, // only relevant for Chalk testing\n         // FIXME set these flags correctly"}]}