{"sha": "1ae1eeec2589abf742f87ec747acd31990e3b00a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhZTFlZWVjMjU4OWFiZjc0MmY4N2VjNzQ3YWNkMzE5OTBlM2IwMGE=", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-07-29T20:36:44Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-08-19T19:02:40Z"}, "message": "Rename OptionFileHandle to HandleOrInvalid and make it just wrap an Option<OwnedHandle>\n\nThe name (and updated documentation) make the FFI-only usage clearer, and wrapping Option<OwnedHandle> avoids the need to write a separate Drop or Debug impl.\n\nCo-authored-by: Josh Triplett <josh@joshtriplett.org>", "tree": {"sha": "cf2b1015fe0d737a080e1b13d7d73289cea21873", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf2b1015fe0d737a080e1b13d7d73289cea21873"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ae1eeec2589abf742f87ec747acd31990e3b00a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ae1eeec2589abf742f87ec747acd31990e3b00a", "html_url": "https://github.com/rust-lang/rust/commit/1ae1eeec2589abf742f87ec747acd31990e3b00a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ae1eeec2589abf742f87ec747acd31990e3b00a/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18a9f4628a44b2962dc8bd4b9b0026514effba2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/18a9f4628a44b2962dc8bd4b9b0026514effba2d", "html_url": "https://github.com/rust-lang/rust/commit/18a9f4628a44b2962dc8bd4b9b0026514effba2d"}], "stats": {"total": 118, "additions": 38, "deletions": 80}, "files": [{"sha": "750a728d1cee8a7e21bbc194958fc60be46c2117", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 37, "deletions": 79, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/1ae1eeec2589abf742f87ec747acd31990e3b00a/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ae1eeec2589abf742f87ec747acd31990e3b00a/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=1ae1eeec2589abf742f87ec747acd31990e3b00a", "patch": "@@ -45,7 +45,7 @@ pub struct BorrowedHandle<'handle> {\n /// Note that it *may* have the value `INVALID_HANDLE_VALUE` (-1), which is\n /// sometimes a valid handle value. See [here] for the full story. For APIs\n /// like `CreateFileW` which report errors with `INVALID_HANDLE_VALUE` instead\n-/// of null, use [`OptionFileHandle`] instead of `Option<OwnedHandle>`.\n+/// of null, use [`HandleOrInvalid`] instead of `Option<OwnedHandle>`.\n ///\n /// `OwnedHandle` uses [`CloseHandle`] to close its handle on drop. As such,\n /// it must not be used with handles to open registry keys which need to be\n@@ -61,36 +61,32 @@ pub struct OwnedHandle {\n     handle: NonNull<c_void>,\n }\n \n-/// Similar to `Option<OwnedHandle>`, but intended for use in FFI interfaces\n-/// where `INVALID_HANDLE_VALUE` is used as the sentry value, and null values\n-/// are not used at all, such as in the return value of `CreateFileW`.\n+/// FFI type for handles in return values or out parameters, where `INVALID_HANDLE_VALUE` is used\n+/// as a sentry value to indicate errors, such as in the return value of `CreateFileW`. This uses\n+/// `repr(transparent)` and has the representation of a host handle, so that it can be used in such\n+/// FFI declarations.\n ///\n-/// The main thing you can do with an `OptionFileHandle` is to convert it into\n-/// an `OwnedHandle` using its [`TryFrom`] implementation, and this conversion\n-/// takes care of the check for `INVALID_HANDLE_VALUE`.\n+/// The only thing you can usefully do with a `HandleOrInvalid` is to convert it into an\n+/// `OwnedHandle` using its [`TryFrom`] implementation; this conversion takes care of the check for\n+/// `INVALID_HANDLE_VALUE`. This ensures that such FFI calls cannot start using the handle without\n+/// checking for `INVALID_HANDLE_VALUE` first.\n ///\n-/// If this holds an owned handle, it closes the handle on drop.\n-///\n-/// This uses `repr(transparent)` and has the representation of a host handle,\n-/// so it can be used in FFI in places where a non-null handle is passed as a\n-/// consumed argument or returned as an owned value, or it is\n-/// `INVALID_HANDLE_VALUE` indicating an error or an otherwise absent value.\n+/// If this holds a valid handle, it will close the handle on drop.\n #[repr(transparent)]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n-pub struct OptionFileHandle {\n-    handle: RawHandle,\n-}\n+#[derive(Debug)]\n+pub struct HandleOrInvalid(Option<OwnedHandle>);\n \n // The Windows [`HANDLE`] type may be transferred across and shared between\n // thread boundaries (despite containing a `*mut void`, which in general isn't\n // `Send` or `Sync`).\n //\n // [`HANDLE`]: std::os::windows::raw::HANDLE\n unsafe impl Send for OwnedHandle {}\n-unsafe impl Send for OptionFileHandle {}\n+unsafe impl Send for HandleOrInvalid {}\n unsafe impl Send for BorrowedHandle<'_> {}\n unsafe impl Sync for OwnedHandle {}\n-unsafe impl Sync for OptionFileHandle {}\n+unsafe impl Sync for HandleOrInvalid {}\n unsafe impl Sync for BorrowedHandle<'_> {}\n \n impl BorrowedHandle<'_> {\n@@ -114,54 +110,31 @@ impl BorrowedHandle<'_> {\n     }\n }\n \n-impl OptionFileHandle {\n-    /// Return an empty `OptionFileHandle` with no resource.\n-    #[inline]\n-    #[unstable(feature = \"io_safety\", issue = \"87074\")]\n-    pub const fn none() -> Self {\n-        Self { handle: c::INVALID_HANDLE_VALUE }\n-    }\n-}\n-\n-impl TryFrom<OptionFileHandle> for OwnedHandle {\n+impl TryFrom<HandleOrInvalid> for OwnedHandle {\n     type Error = ();\n \n     #[inline]\n-    fn try_from(option: OptionFileHandle) -> Result<Self, ()> {\n-        let handle = option.handle;\n-        forget(option);\n-        if let Some(non_null) = NonNull::new(handle) {\n-            if non_null.as_ptr() != c::INVALID_HANDLE_VALUE {\n-                Ok(Self { handle: non_null })\n-            } else {\n-                Err(())\n-            }\n+    fn try_from(handle_or_invalid: HandleOrInvalid) -> Result<Self, ()> {\n+        // In theory, we ought to be able to assume that the pointer here is\n+        // never null, use `OwnedHandle` rather than `Option<OwnedHandle>`, and\n+        // obviate the the panic path here.  Unfortunately, Win32 documentation\n+        // doesn't explicitly guarantee this anywhere.\n+        //\n+        // APIs like [`CreateFileW`] itself have `HANDLE` arguments where a\n+        // null handle indicates an absent value, which wouldn't work if null\n+        // were a valid handle value, so it seems very unlikely that it could\n+        // ever return null. But who knows?\n+        //\n+        // [`CreateFileW`]: https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilew\n+        let owned_handle = handle_or_invalid.0.expect(\"A `HandleOrInvalid` was null!\");\n+        if owned_handle.handle.as_ptr() == c::INVALID_HANDLE_VALUE {\n+            Err(())\n         } else {\n-            // In theory, we ought to be able to assume that the pointer here\n-            // is never null, change `option.handle` to `NonNull`, and obviate\n-            // the the panic path here. Unfortunately, Win32 documentation\n-            // doesn't explicitly guarantee this anywhere.\n-            //\n-            // APIs like [`CreateFileW`] itself have `HANDLE` arguments where a\n-            // null handle indicates an absent value, which wouldn't work if\n-            // null were a valid handle value, so it seems very unlikely that\n-            // it could ever return null. But who knows?\n-            //\n-            // [`CreateFileW`]: https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilew\n-            panic!(\"An `OptionFileHandle` was null!\");\n+            Ok(owned_handle)\n         }\n     }\n }\n \n-impl From<OwnedHandle> for OptionFileHandle {\n-    #[inline]\n-    fn from(owned: OwnedHandle) -> Self {\n-        let handle = owned.handle;\n-        forget(owned);\n-        Self { handle: handle.as_ptr() }\n-    }\n-}\n-\n impl AsRawHandle for BorrowedHandle<'_> {\n     #[inline]\n     fn as_raw_handle(&self) -> RawHandle {\n@@ -188,7 +161,7 @@ impl IntoRawHandle for OwnedHandle {\n impl FromRawHandle for OwnedHandle {\n     /// Constructs a new instance of `Self` from the given raw handle.\n     ///\n-    /// Use `OptionFileHandle` instead of `Option<OwnedHandle>` for APIs that\n+    /// Use `HandleOrInvalid` instead of `Option<OwnedHandle>` for APIs that\n     /// use `INVALID_HANDLE_VALUE` to indicate failure.\n     ///\n     /// # Safety\n@@ -212,12 +185,12 @@ impl FromRawHandle for OwnedHandle {\n     }\n }\n \n-impl FromRawHandle for OptionFileHandle {\n-    /// Constructs a new instance of `Self` from the given raw handle returned\n+impl FromRawHandle for HandleOrInvalid {\n+    /// Constructs a new instance of `Self` from the given `RawHandle` returned\n     /// from a Windows API that uses `INVALID_HANDLE_VALUE` to indicate\n     /// failure, such as `CreateFileW`.\n     ///\n-    /// Use `Option<OwnedHandle>` instead of `OptionFileHandle` for APIs that\n+    /// Use `Option<OwnedHandle>` instead of `HandleOrInvalid` for APIs that\n     /// use null to indicate failure.\n     ///\n     /// # Safety\n@@ -230,8 +203,8 @@ impl FromRawHandle for OptionFileHandle {\n     /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n     #[inline]\n     unsafe fn from_raw_handle(handle: RawHandle) -> Self {\n-        assert!(!handle.is_null());\n-        Self { handle }\n+        // We require non-null here to catch errors earlier.\n+        Self(Some(OwnedHandle::from_raw_handle(handle)))\n     }\n }\n \n@@ -244,15 +217,6 @@ impl Drop for OwnedHandle {\n     }\n }\n \n-impl Drop for OptionFileHandle {\n-    #[inline]\n-    fn drop(&mut self) {\n-        unsafe {\n-            let _ = c::CloseHandle(self.handle);\n-        }\n-    }\n-}\n-\n impl fmt::Debug for BorrowedHandle<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"BorrowedHandle\").field(\"handle\", &self.handle).finish()\n@@ -265,12 +229,6 @@ impl fmt::Debug for OwnedHandle {\n     }\n }\n \n-impl fmt::Debug for OptionFileHandle {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"OptionFileHandle\").field(\"handle\", &self.handle).finish()\n-    }\n-}\n-\n /// A trait to borrow the handle from an underlying object.\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n pub trait AsHandle {"}, {"sha": "969054dd3b3dcc8a72f37dbcf95a14e8de8369fd", "filename": "library/std/src/os/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ae1eeec2589abf742f87ec747acd31990e3b00a/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ae1eeec2589abf742f87ec747acd31990e3b00a/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fmod.rs?ref=1ae1eeec2589abf742f87ec747acd31990e3b00a", "patch": "@@ -34,7 +34,7 @@ pub mod prelude {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::io::{\n         AsHandle, AsSocket, BorrowedHandle, BorrowedSocket, FromRawHandle, FromRawSocket,\n-        IntoRawHandle, IntoRawSocket, OptionFileHandle, OwnedHandle, OwnedSocket,\n+        HandleOrInvalid, IntoRawHandle, IntoRawSocket, OwnedHandle, OwnedSocket,\n     };\n     #[doc(no_inline)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}