{"sha": "26dcc70129399cadfd985f86bbad8d5127f8a3a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZGNjNzAxMjkzOTljYWRmZDk4NWY4NmJiYWQ4ZDUxMjdmOGEzYTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-19T09:40:41Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-20T09:15:38Z"}, "message": "fix hir mock", "tree": {"sha": "a36409971145c034825ef5a2ed030b1a23e4445d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a36409971145c034825ef5a2ed030b1a23e4445d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26dcc70129399cadfd985f86bbad8d5127f8a3a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26dcc70129399cadfd985f86bbad8d5127f8a3a0", "html_url": "https://github.com/rust-lang/rust/commit/26dcc70129399cadfd985f86bbad8d5127f8a3a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26dcc70129399cadfd985f86bbad8d5127f8a3a0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18aac1df45ca39d01d80a56e3afab7299de160f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/18aac1df45ca39d01d80a56e3afab7299de160f8", "html_url": "https://github.com/rust-lang/rust/commit/18aac1df45ca39d01d80a56e3afab7299de160f8"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "54260101c000d1fac2646acecd4262a9ba811899", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/26dcc70129399cadfd985f86bbad8d5127f8a3a0/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26dcc70129399cadfd985f86bbad8d5127f8a3a0/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=26dcc70129399cadfd985f86bbad8d5127f8a3a0", "patch": "@@ -2,7 +2,7 @@ use std::sync::Arc;\n \n use parking_lot::Mutex;\n use salsa::{self, Database};\n-use ra_db::{LocationIntener, BaseDatabase, FilePosition, mock::FileMap, FileId, WORKSPACE, CrateGraph};\n+use ra_db::{LocationIntener, BaseDatabase, FilePosition, FileId, WORKSPACE, CrateGraph, SourceRoot};\n use relative_path::RelativePathBuf;\n use test_utils::{parse_fixture, CURSOR_MARKER, extract_offset};\n \n@@ -16,10 +16,10 @@ pub(crate) struct MockDatabase {\n }\n \n impl MockDatabase {\n-    pub(crate) fn with_files(fixture: &str) -> (MockDatabase, FileMap) {\n-        let (db, file_map, position) = MockDatabase::from_fixture(fixture);\n+    pub(crate) fn with_files(fixture: &str) -> (MockDatabase, SourceRoot) {\n+        let (db, source_root, position) = MockDatabase::from_fixture(fixture);\n         assert!(position.is_none());\n-        (db, file_map)\n+        (db, source_root)\n     }\n \n     pub(crate) fn with_position(fixture: &str) -> (MockDatabase, FilePosition) {\n@@ -33,48 +33,50 @@ impl MockDatabase {\n             .set((), Arc::new(crate_graph));\n     }\n \n-    fn from_fixture(fixture: &str) -> (MockDatabase, FileMap, Option<FilePosition>) {\n+    fn from_fixture(fixture: &str) -> (MockDatabase, SourceRoot, Option<FilePosition>) {\n         let mut db = MockDatabase::default();\n \n         let mut position = None;\n-        let mut file_map = FileMap::default();\n+        let mut source_root = SourceRoot::default();\n         for entry in parse_fixture(fixture) {\n             if entry.text.contains(CURSOR_MARKER) {\n                 assert!(\n                     position.is_none(),\n                     \"only one marker (<|>) per fixture is allowed\"\n                 );\n-                position = Some(db.add_file_with_position(&mut file_map, &entry.meta, &entry.text));\n+                position =\n+                    Some(db.add_file_with_position(&mut source_root, &entry.meta, &entry.text));\n             } else {\n-                db.add_file(&mut file_map, &entry.meta, &entry.text);\n+                db.add_file(&mut source_root, &entry.meta, &entry.text);\n             }\n         }\n-        let source_root = file_map.clone().into_source_root();\n         db.query_mut(ra_db::SourceRootQuery)\n-            .set(WORKSPACE, Arc::new(source_root));\n-        (db, file_map, position)\n+            .set(WORKSPACE, Arc::new(source_root.clone()));\n+        (db, source_root, position)\n     }\n \n-    fn add_file(&mut self, file_map: &mut FileMap, path: &str, text: &str) -> FileId {\n+    fn add_file(&mut self, source_root: &mut SourceRoot, path: &str, text: &str) -> FileId {\n         assert!(path.starts_with('/'));\n         let path = RelativePathBuf::from_path(&path[1..]).unwrap();\n-\n-        let file_id = file_map.add(path);\n+        let file_id = FileId(source_root.files.len() as u32);\n         let text = Arc::new(text.to_string());\n         self.query_mut(ra_db::FileTextQuery).set(file_id, text);\n+        self.query_mut(ra_db::FileRelativePathQuery)\n+            .set(file_id, path.clone());\n         self.query_mut(ra_db::FileSourceRootQuery)\n             .set(file_id, WORKSPACE);\n+        source_root.files.insert(path, file_id);\n         file_id\n     }\n \n     fn add_file_with_position(\n         &mut self,\n-        file_map: &mut FileMap,\n+        source_root: &mut SourceRoot,\n         path: &str,\n         text: &str,\n     ) -> FilePosition {\n         let (offset, text) = extract_offset(text);\n-        let file_id = self.add_file(file_map, path, &text);\n+        let file_id = self.add_file(source_root, path, &text);\n         FilePosition { file_id, offset }\n     }\n }\n@@ -158,6 +160,7 @@ salsa::database_storage! {\n     pub(crate) struct MockDatabaseStorage for MockDatabase {\n         impl ra_db::FilesDatabase {\n             fn file_text() for ra_db::FileTextQuery;\n+            fn file_relative_path() for ra_db::FileRelativePathQuery;\n             fn file_source_root() for ra_db::FileSourceRootQuery;\n             fn source_root() for ra_db::SourceRootQuery;\n             fn libraries() for ra_db::LibrariesQuery;"}, {"sha": "9fa9146e3c59b2859063f0dd6f25157fa1a24f69", "filename": "crates/ra_hir/src/module/nameres/tests.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/26dcc70129399cadfd985f86bbad8d5127f8a3a0/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26dcc70129399cadfd985f86bbad8d5127f8a3a0/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres%2Ftests.rs?ref=26dcc70129399cadfd985f86bbad8d5127f8a3a0", "patch": "@@ -3,6 +3,7 @@ use std::sync::Arc;\n use salsa::Database;\n use ra_db::{FilesDatabase, CrateGraph};\n use ra_syntax::SmolStr;\n+use relative_path::RelativePath;\n \n use crate::{\n     self as hir,\n@@ -44,7 +45,7 @@ fn item_map_smoke_test() {\n \n #[test]\n fn item_map_across_crates() {\n-    let (mut db, files) = MockDatabase::with_files(\n+    let (mut db, sr) = MockDatabase::with_files(\n         \"\n         //- /main.rs\n         use test_crate::Baz;\n@@ -53,8 +54,8 @@ fn item_map_across_crates() {\n         pub struct Baz;\n     \",\n     );\n-    let main_id = files.file_id(\"/main.rs\");\n-    let lib_id = files.file_id(\"/lib.rs\");\n+    let main_id = sr.files[RelativePath::new(\"/main.rs\")];\n+    let lib_id = sr.files[RelativePath::new(\"/lib.rs\")];\n \n     let mut crate_graph = CrateGraph::default();\n     let main_crate = crate_graph.add_crate_root(main_id);"}]}