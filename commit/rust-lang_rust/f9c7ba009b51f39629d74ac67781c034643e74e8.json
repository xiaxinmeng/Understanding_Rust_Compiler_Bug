{"sha": "f9c7ba009b51f39629d74ac67781c034643e74e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YzdiYTAwOWI1MWYzOTYyOWQ3NGFjNjc3ODFjMDM0NjQzZTc0ZTg=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-11T03:03:26Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-11T03:03:26Z"}, "message": "treemap: cut down on swap_unwrap in remove\n\nPerformance before:\n\n    std::treemap::TreeMap\n                   sequential_ints 0.083971 s\n                       random_ints 0.095861 s\n                       delete_ints 0.083931 s\n                sequential_strings 0.278272 s\n                    random_strings 0.240286 s\n                    delete_strings 0.173581 s\n\nPerformance after:\n\n    std::treemap::TreeMap\n                   sequential_ints 0.083297 s\n                       random_ints 0.097644 s\n                       delete_ints 0.052602 s\n                sequential_strings 0.287326 s\n                    random_strings 0.242372 s\n                    delete_strings 0.142269 s", "tree": {"sha": "f94b5706c85544a9d2d850b5b4f91678c7b7056a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f94b5706c85544a9d2d850b5b4f91678c7b7056a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9c7ba009b51f39629d74ac67781c034643e74e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9c7ba009b51f39629d74ac67781c034643e74e8", "html_url": "https://github.com/rust-lang/rust/commit/f9c7ba009b51f39629d74ac67781c034643e74e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9c7ba009b51f39629d74ac67781c034643e74e8/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0f58f6e684ca9076fac99e8f3917d01eeb5775e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0f58f6e684ca9076fac99e8f3917d01eeb5775e", "html_url": "https://github.com/rust-lang/rust/commit/b0f58f6e684ca9076fac99e8f3917d01eeb5775e"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "d3583828f9aedeb74eb1bc6f74ca7184c947095c", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f9c7ba009b51f39629d74ac67781c034643e74e8/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c7ba009b51f39629d74ac67781c034643e74e8/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=f9c7ba009b51f39629d74ac67781c034643e74e8", "patch": "@@ -626,7 +626,7 @@ fn insert<K: Ord, V>(node: &mut Option<~TreeNode<K, V>>, key: K,\n }\n \n fn remove<K: Ord, V>(node: &mut Option<~TreeNode<K, V>>, key: &K) -> bool {\n-    fn heir_swap<K: Ord, V>(node: &mut TreeNode<K, V>,\n+    fn heir_swap<K: Ord, V>(node: &mut ~TreeNode<K, V>,\n                             child: &mut Option<~TreeNode<K, V>>) {\n         // *could* be done without recursion, but it won't borrow check\n         do child.mutate |mut child| {\n@@ -640,15 +640,15 @@ fn remove<K: Ord, V>(node: &mut Option<~TreeNode<K, V>>, key: &K) -> bool {\n         }\n     }\n \n-    if node.is_none() {\n+    match *node {\n+      None => {\n         return false // bottom of tree\n-    } else {\n-        let mut save = node.swap_unwrap();\n-\n-        let removed = if save.key < *key {\n-            remove(&mut save.right, key)\n+      }\n+      Some(ref mut save) => {\n+        let (removed, this) = if save.key < *key {\n+            (remove(&mut save.right, key), false)\n         } else if *key < save.key {\n-            remove(&mut save.left, key)\n+            (remove(&mut save.left, key), false)\n         } else {\n             if save.left.is_some() {\n                 if save.right.is_some() {\n@@ -662,16 +662,22 @@ fn remove<K: Ord, V>(node: &mut Option<~TreeNode<K, V>>, key: &K) -> bool {\n                     save.left = Some(left);\n                     remove(&mut save.left, key);\n                 } else {\n-                    save = save.left.swap_unwrap();\n+                    *save = save.left.swap_unwrap();\n                 }\n+                (true, false)\n             } else if save.right.is_some() {\n-                save = save.right.swap_unwrap();\n+                *save = save.right.swap_unwrap();\n+                (true, false)\n             } else {\n-                return true // leaf\n+                (true, true)\n             }\n-            true\n         };\n \n+        if this {\n+            *node = None;\n+            return true;\n+        }\n+\n         let left_level = save.left.map_default(0, |x| x.level);\n         let right_level = save.right.map_default(0, |x| x.level);\n \n@@ -683,7 +689,7 @@ fn remove<K: Ord, V>(node: &mut Option<~TreeNode<K, V>>, key: &K) -> bool {\n                 do save.right.mutate |mut x| { x.level = save.level; x }\n             }\n \n-            skew(&mut save);\n+            skew(save);\n \n             match save.right {\n               Some(ref mut right) => {\n@@ -696,15 +702,15 @@ fn remove<K: Ord, V>(node: &mut Option<~TreeNode<K, V>>, key: &K) -> bool {\n               None => ()\n             }\n \n-            split(&mut save);\n+            split(save);\n             match save.right {\n               Some(ref mut x) => { split(x) },\n               None => ()\n             }\n         }\n \n-        *node = Some(save);\n         removed\n+      }\n     }\n }\n "}]}