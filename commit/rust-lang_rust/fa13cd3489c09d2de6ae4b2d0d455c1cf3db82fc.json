{"sha": "fa13cd3489c09d2de6ae4b2d0d455c1cf3db82fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMTNjZDM0ODljMDlkMmRlNmFlNGIyZDBkNDU1YzFjZjNkYjgyZmM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-05-18T11:28:40Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-05-25T07:46:47Z"}, "message": "Use parameter environment associated with field use, not field definition", "tree": {"sha": "d3b12abcf9041024ca1b2e48827de0ac79d91993", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3b12abcf9041024ca1b2e48827de0ac79d91993"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa13cd3489c09d2de6ae4b2d0d455c1cf3db82fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa13cd3489c09d2de6ae4b2d0d455c1cf3db82fc", "html_url": "https://github.com/rust-lang/rust/commit/fa13cd3489c09d2de6ae4b2d0d455c1cf3db82fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa13cd3489c09d2de6ae4b2d0d455c1cf3db82fc/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4386f97a93ea0b5f17807f894db5cb662893de03", "url": "https://api.github.com/repos/rust-lang/rust/commits/4386f97a93ea0b5f17807f894db5cb662893de03", "html_url": "https://github.com/rust-lang/rust/commit/4386f97a93ea0b5f17807f894db5cb662893de03"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "2261f296454ef75470a7f648ff1e6c665cc644ab", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa13cd3489c09d2de6ae4b2d0d455c1cf3db82fc/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa13cd3489c09d2de6ae4b2d0d455c1cf3db82fc/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=fa13cd3489c09d2de6ae4b2d0d455c1cf3db82fc", "patch": "@@ -52,6 +52,7 @@ fn type_is_unsafe_function(ty: Ty) -> bool {\n struct EffectCheckVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n+    body_id: hir::BodyId,\n \n     /// Whether we're in an unsafe context.\n     unsafe_context: UnsafeContext,\n@@ -99,10 +100,13 @@ impl<'a, 'tcx> Visitor<'tcx> for EffectCheckVisitor<'a, 'tcx> {\n \n     fn visit_nested_body(&mut self, body: hir::BodyId) {\n         let old_tables = self.tables;\n+        let old_body_id = self.body_id;\n         self.tables = self.tcx.body_tables(body);\n+        self.body_id = body;\n         let body = self.tcx.hir.body(body);\n         self.visit_body(body);\n         self.tables = old_tables;\n+        self.body_id = old_body_id;\n     }\n \n     fn visit_fn(&mut self, fn_kind: FnKind<'tcx>, fn_decl: &'tcx hir::FnDecl,\n@@ -223,8 +227,9 @@ impl<'a, 'tcx> Visitor<'tcx> for EffectCheckVisitor<'a, 'tcx> {\n                     if let ty::TyAdt(adt, ..) = self.tables.expr_ty_adjusted(base_expr).sty {\n                         if adt.is_union() {\n                             let field_ty = self.tables.expr_ty_adjusted(lhs);\n-                            let param_env = self.tcx.parameter_environment(adt.did);\n-                            if field_ty.moves_by_default(self.tcx, &param_env, field.span) {\n+                            let owner_def_id = self.tcx.hir.body_owner_def_id(self.body_id);\n+                            let param_env = self.tcx.param_env(owner_def_id);\n+                            if field_ty.moves_by_default(self.tcx, param_env, field.span) {\n                                 self.require_unsafe(field.span,\n                                                     \"assignment to non-`Copy` union field\");\n                             }\n@@ -261,6 +266,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut visitor = EffectCheckVisitor {\n         tcx: tcx,\n         tables: &ty::TypeckTables::empty(),\n+        body_id: hir::BodyId { node_id: ast::CRATE_NODE_ID },\n         unsafe_context: UnsafeContext::new(SafeContext),\n     };\n "}, {"sha": "2e018e696a4155b6c53a6b3885cf06782cec8bb6", "filename": "src/test/compile-fail/union/union-unsafe.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fa13cd3489c09d2de6ae4b2d0d455c1cf3db82fc/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa13cd3489c09d2de6ae4b2d0d455c1cf3db82fc/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsafe.rs?ref=fa13cd3489c09d2de6ae4b2d0d455c1cf3db82fc", "patch": "@@ -33,8 +33,7 @@ fn generic_noncopy<T: Default>() {\n \n fn generic_copy<T: Copy + Default>() {\n     let mut u3 = U3 { a: T::default() };\n-    // FIXME: it should be known here that `T: Copy`, need to use correct \"parameter environment\"\n-    u3.a = T::default(); //~ ERROR assignment to non-`Copy` union field requires unsafe\n+    u3.a = T::default(); // OK\n     let mut u4 = U4 { a: T::default() };\n     u4.a = T::default(); // OK\n }"}]}