{"sha": "da40e69b607814371a54fd389bffec054e8dd7dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNDBlNjliNjA3ODE0MzcxYTU0ZmQzODliZmZlYzA1NGU4ZGQ3ZGQ=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-04-13T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-04-13T00:00:00Z"}, "message": "Check for asm support in UI tests that require it\n\nAdd `needs-asm-support` compiletest directive, and use it in asm tests\nthat require asm support without relying on any architecture specific\nfeatures.", "tree": {"sha": "abf81800cf3637adf3d201170d87c48cff7cfa8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abf81800cf3637adf3d201170d87c48cff7cfa8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da40e69b607814371a54fd389bffec054e8dd7dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da40e69b607814371a54fd389bffec054e8dd7dd", "html_url": "https://github.com/rust-lang/rust/commit/da40e69b607814371a54fd389bffec054e8dd7dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da40e69b607814371a54fd389bffec054e8dd7dd/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58f32da346642ff3f50186f6f4a0de46e61008be", "url": "https://api.github.com/repos/rust-lang/rust/commits/58f32da346642ff3f50186f6f4a0de46e61008be", "html_url": "https://github.com/rust-lang/rust/commit/58f32da346642ff3f50186f6f4a0de46e61008be"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "2576d1124c85c8bcbbc2a86b0b7538aac17ff721", "filename": "src/test/ui/asm/naked-invalid-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da40e69b607814371a54fd389bffec054e8dd7dd/src%2Ftest%2Fui%2Fasm%2Fnaked-invalid-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da40e69b607814371a54fd389bffec054e8dd7dd/src%2Ftest%2Fui%2Fasm%2Fnaked-invalid-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-invalid-attr.rs?ref=da40e69b607814371a54fd389bffec054e8dd7dd", "patch": "@@ -1,6 +1,6 @@\n // Checks that #[naked] attribute can be placed on function definitions only.\n //\n-// ignore-wasm32 asm unsupported\n+// needs-asm-support\n #![feature(asm)]\n #![feature(naked_functions)]\n #![naked] //~ ERROR should be applied to a function definition"}, {"sha": "71ca5b9373a68cec00246844f6d6ba954100c936", "filename": "src/test/ui/feature-gates/feature-gate-naked_functions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da40e69b607814371a54fd389bffec054e8dd7dd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da40e69b607814371a54fd389bffec054e8dd7dd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.rs?ref=da40e69b607814371a54fd389bffec054e8dd7dd", "patch": "@@ -1,3 +1,4 @@\n+// needs-asm-support\n #![feature(asm)]\n \n #[naked]"}, {"sha": "653d7b738da1a21250423c237454fb0f48e4c8e7", "filename": "src/test/ui/feature-gates/feature-gate-naked_functions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da40e69b607814371a54fd389bffec054e8dd7dd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da40e69b607814371a54fd389bffec054e8dd7dd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-naked_functions.stderr?ref=da40e69b607814371a54fd389bffec054e8dd7dd", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: the `#[naked]` attribute is an experimental feature\n-  --> $DIR/feature-gate-naked_functions.rs:3:1\n+  --> $DIR/feature-gate-naked_functions.rs:4:1\n    |\n LL | #[naked]\n    | ^^^^^^^^\n@@ -8,7 +8,7 @@ LL | #[naked]\n    = help: add `#![feature(naked_functions)]` to the crate attributes to enable\n \n error[E0658]: the `#[naked]` attribute is an experimental feature\n-  --> $DIR/feature-gate-naked_functions.rs:9:1\n+  --> $DIR/feature-gate-naked_functions.rs:10:1\n    |\n LL | #[naked]\n    | ^^^^^^^^"}, {"sha": "9464ffe8722825bfef725b4706c8667fcbc29754", "filename": "src/test/ui/rfc-2091-track-caller/error-with-naked.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da40e69b607814371a54fd389bffec054e8dd7dd/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da40e69b607814371a54fd389bffec054e8dd7dd/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs?ref=da40e69b607814371a54fd389bffec054e8dd7dd", "patch": "@@ -1,3 +1,4 @@\n+// needs-asm-support\n #![feature(asm, naked_functions)]\n \n #[track_caller] //~ ERROR cannot use `#[track_caller]` with `#[naked]`"}, {"sha": "5f17d6b2b5173b5f68caaefdb3a58c3fdc4480f6", "filename": "src/test/ui/rfc-2091-track-caller/error-with-naked.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da40e69b607814371a54fd389bffec054e8dd7dd/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da40e69b607814371a54fd389bffec054e8dd7dd/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr?ref=da40e69b607814371a54fd389bffec054e8dd7dd", "patch": "@@ -1,11 +1,11 @@\n error[E0736]: cannot use `#[track_caller]` with `#[naked]`\n-  --> $DIR/error-with-naked.rs:3:1\n+  --> $DIR/error-with-naked.rs:4:1\n    |\n LL | #[track_caller]\n    | ^^^^^^^^^^^^^^^\n \n error[E0736]: cannot use `#[track_caller]` with `#[naked]`\n-  --> $DIR/error-with-naked.rs:12:5\n+  --> $DIR/error-with-naked.rs:13:5\n    |\n LL |     #[track_caller]\n    |     ^^^^^^^^^^^^^^^"}, {"sha": "363105a9f09c04079ce8a8d4f84a20465640eba0", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/da40e69b607814371a54fd389bffec054e8dd7dd/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da40e69b607814371a54fd389bffec054e8dd7dd/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=da40e69b607814371a54fd389bffec054e8dd7dd", "patch": "@@ -44,6 +44,7 @@ impl EarlyProps {\n         let mut props = EarlyProps::default();\n         let rustc_has_profiler_support = env::var_os(\"RUSTC_PROFILER_SUPPORT\").is_some();\n         let rustc_has_sanitizer_support = env::var_os(\"RUSTC_SANITIZER_SUPPORT\").is_some();\n+        let has_asm_support = util::has_asm_support(&config.target);\n         let has_asan = util::ASAN_SUPPORTED_TARGETS.contains(&&*config.target);\n         let has_lsan = util::LSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n         let has_msan = util::MSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n@@ -76,6 +77,10 @@ impl EarlyProps {\n                     props.ignore = true;\n                 }\n \n+                if !has_asm_support && config.parse_name_directive(ln, \"needs-asm-support\") {\n+                    props.ignore = true;\n+                }\n+\n                 if !rustc_has_profiler_support && config.parse_needs_profiler_support(ln) {\n                     props.ignore = true;\n                 }"}, {"sha": "c41b43cdd0b53c34283c0226dd5c48788cadf9ee", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/da40e69b607814371a54fd389bffec054e8dd7dd/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da40e69b607814371a54fd389bffec054e8dd7dd/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=da40e69b607814371a54fd389bffec054e8dd7dd", "patch": "@@ -223,6 +223,17 @@ fn sanitizers() {\n     assert!(parse_rs(&config, \"// needs-sanitizer-thread\").ignore);\n }\n \n+#[test]\n+fn asm_support() {\n+    let mut config = config();\n+\n+    config.target = \"avr-unknown-gnu-atmega328\".to_owned();\n+    assert!(parse_rs(&config, \"// needs-asm-support\").ignore);\n+\n+    config.target = \"i686-unknown-netbsd\".to_owned();\n+    assert!(!parse_rs(&config, \"// needs-asm-support\").ignore);\n+}\n+\n #[test]\n fn test_extract_version_range() {\n     use super::{extract_llvm_version, extract_version_range};"}, {"sha": "7dbd70948b84d87a1b834ed10b3dee992153760a", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/da40e69b607814371a54fd389bffec054e8dd7dd/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da40e69b607814371a54fd389bffec054e8dd7dd/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=da40e69b607814371a54fd389bffec054e8dd7dd", "patch": "@@ -128,6 +128,15 @@ const BIG_ENDIAN: &[&str] = &[\n     \"sparcv9\",\n ];\n \n+static ASM_SUPPORTED_ARCHS: &[&str] = &[\n+    \"x86\", \"x86_64\", \"arm\", \"aarch64\", \"riscv32\", \"riscv64\", \"nvptx64\", \"hexagon\", \"mips\",\n+    \"mips64\", \"spirv\", \"wasm32\",\n+];\n+\n+pub fn has_asm_support(triple: &str) -> bool {\n+    ASM_SUPPORTED_ARCHS.contains(&get_arch(triple))\n+}\n+\n pub fn matches_os(triple: &str, name: &str) -> bool {\n     // For the wasm32 bare target we ignore anything also ignored on emscripten\n     // and then we also recognize `wasm32-bare` as the os for the target"}]}