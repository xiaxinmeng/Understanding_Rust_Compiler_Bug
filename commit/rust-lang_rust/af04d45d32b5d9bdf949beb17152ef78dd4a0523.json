{"sha": "af04d45d32b5d9bdf949beb17152ef78dd4a0523", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMDRkNDVkMzJiNWQ5YmRmOTQ5YmViMTcxNTJlZjc4ZGQ0YTA1MjM=", "commit": {"author": {"name": "Chris Hopman", "email": "cjhopman@gmail.com", "date": "2020-04-10T20:41:11Z"}, "committer": {"name": "Chris Hopman", "email": "cjhopman@gmail.com", "date": "2020-04-10T20:56:12Z"}, "message": "Change missing impl assist to use todo!() instead of unimplemented()\n\ntodo!() \"Indicates unfinished code\" (https://doc.rust-lang.org/std/macro.todo.html)\n\nRust documentation provides further clarification:\n\n> The difference between unimplemented! and todo! is that while todo!\n> conveys an intent of implementing the functionality later and the\n> message is \"not yet implemented\", unimplemented! makes no such claims.\n\ntodo!() seems more appropriate for assists that insert missing impls.", "tree": {"sha": "67eb9999b5f13e9c0a06b36e4fc50e54502f640d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67eb9999b5f13e9c0a06b36e4fc50e54502f640d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af04d45d32b5d9bdf949beb17152ef78dd4a0523", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af04d45d32b5d9bdf949beb17152ef78dd4a0523", "html_url": "https://github.com/rust-lang/rust/commit/af04d45d32b5d9bdf949beb17152ef78dd4a0523", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af04d45d32b5d9bdf949beb17152ef78dd4a0523/comments", "author": {"login": "cjhopman", "id": 943596, "node_id": "MDQ6VXNlcjk0MzU5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/943596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjhopman", "html_url": "https://github.com/cjhopman", "followers_url": "https://api.github.com/users/cjhopman/followers", "following_url": "https://api.github.com/users/cjhopman/following{/other_user}", "gists_url": "https://api.github.com/users/cjhopman/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjhopman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjhopman/subscriptions", "organizations_url": "https://api.github.com/users/cjhopman/orgs", "repos_url": "https://api.github.com/users/cjhopman/repos", "events_url": "https://api.github.com/users/cjhopman/events{/privacy}", "received_events_url": "https://api.github.com/users/cjhopman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjhopman", "id": 943596, "node_id": "MDQ6VXNlcjk0MzU5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/943596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjhopman", "html_url": "https://github.com/cjhopman", "followers_url": "https://api.github.com/users/cjhopman/followers", "following_url": "https://api.github.com/users/cjhopman/following{/other_user}", "gists_url": "https://api.github.com/users/cjhopman/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjhopman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjhopman/subscriptions", "organizations_url": "https://api.github.com/users/cjhopman/orgs", "repos_url": "https://api.github.com/users/cjhopman/repos", "events_url": "https://api.github.com/users/cjhopman/events{/privacy}", "received_events_url": "https://api.github.com/users/cjhopman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca9a5dd1654cc0d54ed5b2bb71ec8ed559470276", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca9a5dd1654cc0d54ed5b2bb71ec8ed559470276", "html_url": "https://github.com/rust-lang/rust/commit/ca9a5dd1654cc0d54ed5b2bb71ec8ed559470276"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "24392836c0e3cdb96ae32ffe181a87ff19c1f485", "filename": "crates/ra_assists/src/doc_tests/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af04d45d32b5d9bdf949beb17152ef78dd4a0523/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af04d45d32b5d9bdf949beb17152ef78dd4a0523/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs?ref=af04d45d32b5d9bdf949beb17152ef78dd4a0523", "patch": "@@ -180,7 +180,7 @@ trait Trait<T> {\n }\n \n impl Trait<u32> for () {\n-    fn foo(&self) -> u32 { unimplemented!() }\n+    fn foo(&self) -> u32 { todo!() }\n \n }\n \"#####,"}, {"sha": "2d6d44980e1816a9fe0bd88cdb42398719c6e011", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/af04d45d32b5d9bdf949beb17152ef78dd4a0523/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af04d45d32b5d9bdf949beb17152ef78dd4a0523/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=af04d45d32b5d9bdf949beb17152ef78dd4a0523", "patch": "@@ -40,7 +40,7 @@ enum AddMissingImplMembersMode {\n // }\n //\n // impl Trait<u32> for () {\n-//     fn foo(&self) -> u32 { unimplemented!() }\n+//     fn foo(&self) -> u32 { todo!() }\n //\n // }\n // ```\n@@ -165,7 +165,7 @@ fn add_missing_impl_members_inner(\n \n fn add_body(fn_def: ast::FnDef) -> ast::FnDef {\n     if fn_def.body().is_none() {\n-        fn_def.with_body(make::block_from_expr(make::expr_unimplemented()))\n+        fn_def.with_body(make::block_from_expr(make::expr_todo()))\n     } else {\n         fn_def\n     }\n@@ -215,8 +215,8 @@ impl Foo for S {\n     fn bar(&self) {}\n     <|>type Output;\n     const CONST: usize = 42;\n-    fn foo(&self) { unimplemented!() }\n-    fn baz(&self) { unimplemented!() }\n+    fn foo(&self) { todo!() }\n+    fn baz(&self) { todo!() }\n \n }\",\n         );\n@@ -250,7 +250,7 @@ struct S;\n \n impl Foo for S {\n     fn bar(&self) {}\n-    <|>fn foo(&self) { unimplemented!() }\n+    <|>fn foo(&self) { todo!() }\n \n }\",\n         );\n@@ -268,7 +268,7 @@ impl Foo for S { <|> }\",\n trait Foo { fn foo(&self); }\n struct S;\n impl Foo for S {\n-    <|>fn foo(&self) { unimplemented!() }\n+    <|>fn foo(&self) { todo!() }\n }\",\n         );\n     }\n@@ -285,7 +285,7 @@ impl Foo<u32> for S { <|> }\",\n trait Foo<T> { fn foo(&self, t: T) -> &T; }\n struct S;\n impl Foo<u32> for S {\n-    <|>fn foo(&self, t: u32) -> &u32 { unimplemented!() }\n+    <|>fn foo(&self, t: u32) -> &u32 { todo!() }\n }\",\n         );\n     }\n@@ -302,7 +302,7 @@ impl<U> Foo<U> for S { <|> }\",\n trait Foo<T> { fn foo(&self, t: T) -> &T; }\n struct S;\n impl<U> Foo<U> for S {\n-    <|>fn foo(&self, t: U) -> &U { unimplemented!() }\n+    <|>fn foo(&self, t: U) -> &U { todo!() }\n }\",\n         );\n     }\n@@ -319,7 +319,7 @@ impl Foo for S {}<|>\",\n trait Foo { fn foo(&self); }\n struct S;\n impl Foo for S {\n-    <|>fn foo(&self) { unimplemented!() }\n+    <|>fn foo(&self) { todo!() }\n }\",\n         )\n     }\n@@ -342,7 +342,7 @@ mod foo {\n }\n struct S;\n impl foo::Foo for S {\n-    <|>fn foo(&self, bar: foo::Bar) { unimplemented!() }\n+    <|>fn foo(&self, bar: foo::Bar) { todo!() }\n }\",\n         );\n     }\n@@ -365,7 +365,7 @@ mod foo {\n }\n struct S;\n impl foo::Foo for S {\n-    <|>fn foo(&self, bar: foo::Bar<u32>) { unimplemented!() }\n+    <|>fn foo(&self, bar: foo::Bar<u32>) { todo!() }\n }\",\n         );\n     }\n@@ -388,7 +388,7 @@ mod foo {\n }\n struct S;\n impl foo::Foo<u32> for S {\n-    <|>fn foo(&self, bar: foo::Bar<u32>) { unimplemented!() }\n+    <|>fn foo(&self, bar: foo::Bar<u32>) { todo!() }\n }\",\n         );\n     }\n@@ -414,7 +414,7 @@ mod foo {\n struct Param;\n struct S;\n impl foo::Foo<Param> for S {\n-    <|>fn foo(&self, bar: Param) { unimplemented!() }\n+    <|>fn foo(&self, bar: Param) { todo!() }\n }\",\n         );\n     }\n@@ -439,7 +439,7 @@ mod foo {\n }\n struct S;\n impl foo::Foo for S {\n-    <|>fn foo(&self, bar: foo::Bar<u32>::Assoc) { unimplemented!() }\n+    <|>fn foo(&self, bar: foo::Bar<u32>::Assoc) { todo!() }\n }\",\n         );\n     }\n@@ -464,7 +464,7 @@ mod foo {\n }\n struct S;\n impl foo::Foo for S {\n-    <|>fn foo(&self, bar: foo::Bar<foo::Baz>) { unimplemented!() }\n+    <|>fn foo(&self, bar: foo::Bar<foo::Baz>) { todo!() }\n }\",\n         );\n     }\n@@ -487,7 +487,7 @@ mod foo {\n }\n struct S;\n impl foo::Foo for S {\n-    <|>fn foo(&self, bar: dyn Fn(u32) -> i32) { unimplemented!() }\n+    <|>fn foo(&self, bar: dyn Fn(u32) -> i32) { todo!() }\n }\",\n         );\n     }\n@@ -544,7 +544,7 @@ trait Foo {\n struct S;\n impl Foo for S {\n     <|>type Output;\n-    fn foo(&self) { unimplemented!() }\n+    fn foo(&self) { todo!() }\n }\"#,\n         )\n     }"}, {"sha": "0f4a50be4764ce219453fcbccb21725bffddf4fa", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af04d45d32b5d9bdf949beb17152ef78dd4a0523/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af04d45d32b5d9bdf949beb17152ef78dd4a0523/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=af04d45d32b5d9bdf949beb17152ef78dd4a0523", "patch": "@@ -100,6 +100,9 @@ pub fn expr_empty_block() -> ast::Expr {\n pub fn expr_unimplemented() -> ast::Expr {\n     expr_from_text(\"unimplemented!()\")\n }\n+pub fn expr_todo() -> ast::Expr {\n+    expr_from_text(\"todo!()\")\n+}\n pub fn expr_path(path: ast::Path) -> ast::Expr {\n     expr_from_text(&path.to_string())\n }"}, {"sha": "cc42169d8e36458168ba95ae38a6d29962b17ade", "filename": "docs/user/assists.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af04d45d32b5d9bdf949beb17152ef78dd4a0523/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/af04d45d32b5d9bdf949beb17152ef78dd4a0523/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=af04d45d32b5d9bdf949beb17152ef78dd4a0523", "patch": "@@ -175,7 +175,7 @@ trait Trait<T> {\n }\n \n impl Trait<u32> for () {\n-    fn foo(&self) -> u32 { unimplemented!() }\n+    fn foo(&self) -> u32 { todo!() }\n \n }\n ```"}, {"sha": "4f525fcd0433d68d200d3a6ba159ab2e2b91beba", "filename": "xtask/tests/tidy-tests/main.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/af04d45d32b5d9bdf949beb17152ef78dd4a0523/xtask%2Ftests%2Ftidy-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af04d45d32b5d9bdf949beb17152ef78dd4a0523/xtask%2Ftests%2Ftidy-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy-tests%2Fmain.rs?ref=af04d45d32b5d9bdf949beb17152ef78dd4a0523", "patch": "@@ -20,7 +20,16 @@ fn rust_files_are_tidy() {\n }\n \n fn check_todo(path: &Path, text: &str) {\n-    if path.ends_with(\"tests/cli.rs\") {\n+    let whitelist = &[\n+        // This file itself is whitelisted since this test itself contains matches.\n+        \"tests/cli.rs\",\n+        // Some of our assists generate `todo!()` so those files are whitelisted.\n+        \"doc_tests/generated.rs\",\n+        \"handlers/add_missing_impl_members.rs\",\n+        // To support generating `todo!()` in assists, we have `expr_todo()` in ast::make.\n+        \"ast/make.rs\",\n+    ];\n+    if whitelist.iter().any(|p| path.ends_with(p)) {\n         return;\n     }\n     if text.contains(\"TODO\") || text.contains(\"TOOD\") || text.contains(\"todo!\") {"}]}