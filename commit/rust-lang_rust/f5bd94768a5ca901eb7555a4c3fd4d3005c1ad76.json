{"sha": "f5bd94768a5ca901eb7555a4c3fd4d3005c1ad76", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1YmQ5NDc2OGE1Y2E5MDFlYjc1NTVhNGMzZmQ0ZDMwMDVjMWFkNzY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-05T22:59:30Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-05T23:10:01Z"}, "message": "use abort instead of unreachable", "tree": {"sha": "04f463e9088538296eddbbfdc346ae495aa7d50c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04f463e9088538296eddbbfdc346ae495aa7d50c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5bd94768a5ca901eb7555a4c3fd4d3005c1ad76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5bd94768a5ca901eb7555a4c3fd4d3005c1ad76", "html_url": "https://github.com/rust-lang/rust/commit/f5bd94768a5ca901eb7555a4c3fd4d3005c1ad76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5bd94768a5ca901eb7555a4c3fd4d3005c1ad76/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5d50e3e88f88e8a8b20e90bb0d561e1ed71fe5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5d50e3e88f88e8a8b20e90bb0d561e1ed71fe5f", "html_url": "https://github.com/rust-lang/rust/commit/e5d50e3e88f88e8a8b20e90bb0d561e1ed71fe5f"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "ce703f2433506e6dbceaa2230d5e73e5cbc4b7ed", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5bd94768a5ca901eb7555a4c3fd4d3005c1ad76/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5bd94768a5ca901eb7555a4c3fd4d3005c1ad76/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=f5bd94768a5ca901eb7555a4c3fd4d3005c1ad76", "patch": "@@ -261,7 +261,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         if self.fn_abi.ret.layout.abi.is_uninhabited() {\n             // Functions with uninhabited return values are marked `noreturn`,\n             // so we should make sure that we never actually do.\n+            // We play it safe by using a well-defined `abort`, but we could go for immediate UB\n+            // if that turns out to be helpful.\n             bx.abort();\n+            // `abort` does not terminate the block, so we still need to generate\n+            // an `unreachable` terminator after it.\n             bx.unreachable();\n             return;\n         }\n@@ -825,6 +829,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n             mir::TerminatorKind::Abort => {\n                 bx.abort();\n+                // `abort` does not terminate the block, so we still need to generate\n+                // an `unreachable` terminator after it.\n                 bx.unreachable();\n             }\n "}, {"sha": "e60b8861faf85ebc31d69dafbe94c031ddc813fe", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5bd94768a5ca901eb7555a4c3fd4d3005c1ad76/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5bd94768a5ca901eb7555a4c3fd4d3005c1ad76/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=f5bd94768a5ca901eb7555a4c3fd4d3005c1ad76", "patch": "@@ -333,7 +333,9 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n         variant_index: VariantIdx\n     ) {\n         if self.layout.for_variant(bx.cx(), variant_index).abi.is_uninhabited() {\n-            bx.unreachable();\n+            // We play it safe by using a well-defined `abort`, but we could go for immediate UB\n+            // if that turns out to be helpful.\n+            bx.abort();\n             return;\n         }\n         match self.layout.variants {"}, {"sha": "d9614f062b7e96e8ab3d2af71e4a2c3b635214e0", "filename": "src/test/codegen/set-discriminant-invalid.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5bd94768a5ca901eb7555a4c3fd4d3005c1ad76/src%2Ftest%2Fcodegen%2Fset-discriminant-invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5bd94768a5ca901eb7555a4c3fd4d3005c1ad76/src%2Ftest%2Fcodegen%2Fset-discriminant-invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fset-discriminant-invalid.rs?ref=f5bd94768a5ca901eb7555a4c3fd4d3005c1ad76", "patch": "@@ -20,9 +20,9 @@ impl IntoError<Error> for Api\n {\n     type Source = ApiError;\n     // CHECK-LABEL: @into_error\n-    // CHECK: unreachable\n-    // Also check the next two instructions to make sure we do not match against `unreachable`\n-    // elsewhere in the code (e.g., in the closure bode).\n+    // CHECK: llvm.trap()\n+    // Also check the next two instructions to make sure we do not match against `trap`\n+    // elsewhere in the code.\n     // CHECK-NEXT: load\n     // CHECK-NEXT: ret\n     #[no_mangle]"}]}