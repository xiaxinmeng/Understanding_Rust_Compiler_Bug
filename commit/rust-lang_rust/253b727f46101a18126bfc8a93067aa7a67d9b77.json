{"sha": "253b727f46101a18126bfc8a93067aa7a67d9b77", "node_id": "C_kwDOAAsO6NoAKDI1M2I3MjdmNDYxMDFhMTgxMjZiZmM4YTkzMDY3YWE3YTY3ZDliNzc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-24T17:01:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-24T17:01:02Z"}, "message": "Auto merge of #110713 - cjgillot:track-mir-opt, r=scottmcm\n\nAdd mir-opt tests to track MIR quality.\n\ncc `@scottmcm` `@saethlin`\n\nIf you have other ideas, please say so.", "tree": {"sha": "ab0d5856cccb2a951fc2f7ff362c3f24dfad6a5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab0d5856cccb2a951fc2f7ff362c3f24dfad6a5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/253b727f46101a18126bfc8a93067aa7a67d9b77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/253b727f46101a18126bfc8a93067aa7a67d9b77", "html_url": "https://github.com/rust-lang/rust/commit/253b727f46101a18126bfc8a93067aa7a67d9b77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/253b727f46101a18126bfc8a93067aa7a67d9b77/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b72460fe46a873da0c40582636c26e7675e92288", "url": "https://api.github.com/repos/rust-lang/rust/commits/b72460fe46a873da0c40582636c26e7675e92288", "html_url": "https://github.com/rust-lang/rust/commit/b72460fe46a873da0c40582636c26e7675e92288"}, {"sha": "332b7f51d68ced4addab04f34d5f18e35df2f22d", "url": "https://api.github.com/repos/rust-lang/rust/commits/332b7f51d68ced4addab04f34d5f18e35df2f22d", "html_url": "https://github.com/rust-lang/rust/commit/332b7f51d68ced4addab04f34d5f18e35df2f22d"}], "stats": {"total": 927, "additions": 757, "deletions": 170}, "files": [{"sha": "acb7297310fb8e369a504d447e1134aa0a0744b3", "filename": "tests/mir-opt/instcombine_duplicate_switch_targets_e2e.ub_if_b.PreCodegen.after.mir", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b72460fe46a873da0c40582636c26e7675e92288/tests%2Fmir-opt%2Finstcombine_duplicate_switch_targets_e2e.ub_if_b.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b72460fe46a873da0c40582636c26e7675e92288/tests%2Fmir-opt%2Finstcombine_duplicate_switch_targets_e2e.ub_if_b.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finstcombine_duplicate_switch_targets_e2e.ub_if_b.PreCodegen.after.mir?ref=b72460fe46a873da0c40582636c26e7675e92288", "patch": "@@ -1,27 +0,0 @@\n-// MIR for `ub_if_b` after PreCodegen\n-\n-fn ub_if_b(_1: Thing) -> Thing {\n-    debug t => _1;                       // in scope 0 at $DIR/instcombine_duplicate_switch_targets_e2e.rs:+0:23: +0:24\n-    let mut _0: Thing;                   // return place in scope 0 at $DIR/instcombine_duplicate_switch_targets_e2e.rs:+0:36: +0:41\n-    let mut _2: isize;                   // in scope 0 at $DIR/instcombine_duplicate_switch_targets_e2e.rs:+2:9: +2:17\n-    scope 1 (inlined unreachable_unchecked) { // at $DIR/instcombine_duplicate_switch_targets_e2e.rs:14:21: 14:55\n-        scope 2 {\n-            scope 3 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-            }\n-        }\n-    }\n-\n-    bb0: {\n-        _2 = discriminant(_1);           // scope 0 at $DIR/instcombine_duplicate_switch_targets_e2e.rs:+1:11: +1:12\n-        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/instcombine_duplicate_switch_targets_e2e.rs:+1:5: +1:12\n-    }\n-\n-    bb1: {\n-        unreachable;                     // scope 2 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-    }\n-\n-    bb2: {\n-        _0 = move _1;                    // scope 0 at $DIR/instcombine_duplicate_switch_targets_e2e.rs:+2:21: +2:22\n-        return;                          // scope 0 at $DIR/instcombine_duplicate_switch_targets_e2e.rs:+5:2: +5:2\n-    }\n-}"}, {"sha": "f1f7857a1bd0a3038887c1c688467516f744e4dc", "filename": "tests/mir-opt/lower_intrinsics_e2e.f_u64.PreCodegen.after.mir", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b72460fe46a873da0c40582636c26e7675e92288/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_u64.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b72460fe46a873da0c40582636c26e7675e92288/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_u64.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_u64.PreCodegen.after.mir?ref=b72460fe46a873da0c40582636c26e7675e92288", "patch": "@@ -1,22 +0,0 @@\n-// MIR for `f_u64` after PreCodegen\n-\n-fn f_u64() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics_e2e.rs:+0:16: +0:16\n-    scope 1 (inlined f_dispatch::<u64>) { // at $DIR/lower_intrinsics_e2e.rs:15:5: 15:21\n-        debug t => const 0_u64;          // in scope 1 at $DIR/lower_intrinsics_e2e.rs:19:22: 19:23\n-        let _1: ();                      // in scope 1 at $DIR/lower_intrinsics_e2e.rs:23:9: 23:21\n-        scope 2 (inlined std::mem::size_of::<u64>) { // at $DIR/lower_intrinsics_e2e.rs:20:8: 20:32\n-        }\n-    }\n-\n-    bb0: {\n-        _1 = f_non_zst::<u64>(const 0_u64) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics_e2e.rs:23:9: 23:21\n-                                         // mir::Constant\n-                                         // + span: $DIR/lower_intrinsics_e2e.rs:23:9: 23:18\n-                                         // + literal: Const { ty: fn(u64) {f_non_zst::<u64>}, val: Value(<ZST>) }\n-    }\n-\n-    bb1: {\n-        return;                          // scope 0 at $DIR/lower_intrinsics_e2e.rs:+2:2: +2:2\n-    }\n-}"}, {"sha": "8654e80cd7c82aed9fea330e2c67ce2599f9683d", "filename": "tests/mir-opt/lower_intrinsics_e2e.f_unit.PreCodegen.after.mir", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b72460fe46a873da0c40582636c26e7675e92288/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_unit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b72460fe46a873da0c40582636c26e7675e92288/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_unit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_unit.PreCodegen.after.mir?ref=b72460fe46a873da0c40582636c26e7675e92288", "patch": "@@ -1,22 +0,0 @@\n-// MIR for `f_unit` after PreCodegen\n-\n-fn f_unit() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics_e2e.rs:+0:17: +0:17\n-    scope 1 (inlined f_dispatch::<()>) { // at $DIR/lower_intrinsics_e2e.rs:9:5: 9:19\n-        debug t => const ();             // in scope 1 at $DIR/lower_intrinsics_e2e.rs:19:22: 19:23\n-        let _1: ();                      // in scope 1 at $DIR/lower_intrinsics_e2e.rs:21:9: 21:17\n-        scope 2 (inlined std::mem::size_of::<()>) { // at $DIR/lower_intrinsics_e2e.rs:20:8: 20:32\n-        }\n-    }\n-\n-    bb0: {\n-        _1 = f_zst::<()>(const ()) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics_e2e.rs:21:9: 21:17\n-                                         // mir::Constant\n-                                         // + span: $DIR/lower_intrinsics_e2e.rs:21:9: 21:14\n-                                         // + literal: Const { ty: fn(()) {f_zst::<()>}, val: Value(<ZST>) }\n-    }\n-\n-    bb1: {\n-        return;                          // scope 0 at $DIR/lower_intrinsics_e2e.rs:+2:2: +2:2\n-    }\n-}"}, {"sha": "a338c18e09ef84d3d1086681c2fd0702a9a8cb16", "filename": "tests/mir-opt/pre-codegen/README.md", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2FREADME.md?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "patch": "@@ -0,0 +1,3 @@\n+The goal of this directory is to track the quality of MIR that is given to codegen in a standard `-O` condiguration.\n+\n+As such, feel free to `--bless` whatever changes you get here, so long as doing so doesn't add substantially more MIR."}, {"sha": "d8af6b14dad43c5e3ace2d23040c7af2ec8a2afc", "filename": "tests/mir-opt/pre-codegen/duplicate_switch_targets.rs", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Fduplicate_switch_targets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Fduplicate_switch_targets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fduplicate_switch_targets.rs?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "patch": "@@ -1,13 +1,14 @@\n-// compile-flags: -Zmir-opt-level=2 -Zinline-mir\n+// compile-flags: -O -Zmir-opt-level=2 -Cdebuginfo=0\n // ignore-debug: standard library debug assertions add a panic that breaks this optimization\n+\n #![crate_type = \"lib\"]\n \n pub enum Thing {\n     A,\n     B,\n }\n \n-// EMIT_MIR instcombine_duplicate_switch_targets_e2e.ub_if_b.PreCodegen.after.mir\n+// EMIT_MIR duplicate_switch_targets.ub_if_b.PreCodegen.after.mir\n pub unsafe fn ub_if_b(t: Thing) -> Thing {\n     match t {\n         Thing::A => t,", "previous_filename": "tests/mir-opt/instcombine_duplicate_switch_targets_e2e.rs"}, {"sha": "0e885cf94fdbd3fb8e1d6cd8a0ae2c0fad5960de", "filename": "tests/mir-opt/pre-codegen/duplicate_switch_targets.ub_if_b.PreCodegen.after.mir", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Fduplicate_switch_targets.ub_if_b.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Fduplicate_switch_targets.ub_if_b.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fduplicate_switch_targets.ub_if_b.PreCodegen.after.mir?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "patch": "@@ -0,0 +1,27 @@\n+// MIR for `ub_if_b` after PreCodegen\n+\n+fn ub_if_b(_1: Thing) -> Thing {\n+    debug t => _1;                       // in scope 0 at $DIR/duplicate_switch_targets.rs:+0:23: +0:24\n+    let mut _0: Thing;                   // return place in scope 0 at $DIR/duplicate_switch_targets.rs:+0:36: +0:41\n+    let mut _2: isize;                   // in scope 0 at $DIR/duplicate_switch_targets.rs:+2:9: +2:17\n+    scope 1 (inlined unreachable_unchecked) { // at $DIR/duplicate_switch_targets.rs:15:21: 15:55\n+        scope 2 {\n+            scope 3 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        _2 = discriminant(_1);           // scope 0 at $DIR/duplicate_switch_targets.rs:+1:11: +1:12\n+        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/duplicate_switch_targets.rs:+1:5: +1:12\n+    }\n+\n+    bb1: {\n+        unreachable;                     // scope 2 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+    }\n+\n+    bb2: {\n+        _0 = move _1;                    // scope 0 at $DIR/duplicate_switch_targets.rs:+2:21: +2:22\n+        return;                          // scope 0 at $DIR/duplicate_switch_targets.rs:+5:2: +5:2\n+    }\n+}"}, {"sha": "76e1fea2f9528104f9d3631543b878b785e842e7", "filename": "tests/mir-opt/pre-codegen/intrinsics.f_u64.PreCodegen.after.mir", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Fintrinsics.f_u64.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Fintrinsics.f_u64.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fintrinsics.f_u64.PreCodegen.after.mir?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "patch": "@@ -0,0 +1,26 @@\n+// MIR for `f_u64` after PreCodegen\n+\n+fn f_u64() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/intrinsics.rs:+0:16: +0:16\n+    let mut _1: u64;                     // in scope 0 at $DIR/intrinsics.rs:+1:5: +1:21\n+    scope 1 (inlined f_dispatch::<u64>) { // at $DIR/intrinsics.rs:19:5: 19:21\n+        debug t => const 0_u64;          // in scope 1 at $DIR/intrinsics.rs:23:22: 23:23\n+        let _2: ();                      // in scope 1 at $DIR/intrinsics.rs:27:9: 27:21\n+        scope 2 (inlined std::mem::size_of::<u64>) { // at $DIR/intrinsics.rs:24:8: 24:32\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at $DIR/intrinsics.rs:+1:5: +1:21\n+        _1 = const 0_u64;                // scope 0 at $DIR/intrinsics.rs:+1:5: +1:21\n+        _2 = f_non_zst::<u64>(move _1) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/intrinsics.rs:27:9: 27:21\n+                                         // mir::Constant\n+                                         // + span: $DIR/intrinsics.rs:27:9: 27:18\n+                                         // + literal: Const { ty: fn(u64) {f_non_zst::<u64>}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_1);                 // scope 0 at $DIR/intrinsics.rs:+1:5: +1:21\n+        return;                          // scope 0 at $DIR/intrinsics.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "3d416de34df8bfac4cc4941a4b7450a25703ec29", "filename": "tests/mir-opt/pre-codegen/intrinsics.f_unit.PreCodegen.after.mir", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Fintrinsics.f_unit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Fintrinsics.f_unit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fintrinsics.f_unit.PreCodegen.after.mir?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "patch": "@@ -0,0 +1,22 @@\n+// MIR for `f_unit` after PreCodegen\n+\n+fn f_unit() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/intrinsics.rs:+0:17: +0:17\n+    scope 1 (inlined f_dispatch::<()>) { // at $DIR/intrinsics.rs:13:5: 13:19\n+        debug t => const ();             // in scope 1 at $DIR/intrinsics.rs:23:22: 23:23\n+        let _1: ();                      // in scope 1 at $DIR/intrinsics.rs:25:9: 25:17\n+        scope 2 (inlined std::mem::size_of::<()>) { // at $DIR/intrinsics.rs:24:8: 24:32\n+        }\n+    }\n+\n+    bb0: {\n+        _1 = f_zst::<()>(const ()) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/intrinsics.rs:25:9: 25:17\n+                                         // mir::Constant\n+                                         // + span: $DIR/intrinsics.rs:25:9: 25:14\n+                                         // + literal: Const { ty: fn(()) {f_zst::<()>}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        return;                          // scope 0 at $DIR/intrinsics.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "ecdb656cb85ade3d89d37e17b9fa34d417919e69", "filename": "tests/mir-opt/pre-codegen/intrinsics.rs", "status": "renamed", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fintrinsics.rs?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "patch": "@@ -1,16 +1,20 @@\n+// compile-flags: -O -C debuginfo=0 -Zmir-opt-level=2\n+// only-64bit\n+// ignore-debug\n+\n // Checks that we do not have any branches in the MIR for the two tested functions.\n \n // compile-flags: -Cpanic=abort\n #![feature(core_intrinsics)]\n #![crate_type = \"lib\"]\n \n-// EMIT_MIR lower_intrinsics_e2e.f_unit.PreCodegen.after.mir\n+// EMIT_MIR intrinsics.f_unit.PreCodegen.after.mir\n pub fn f_unit() {\n     f_dispatch(());\n }\n \n \n-// EMIT_MIR lower_intrinsics_e2e.f_u64.PreCodegen.after.mir\n+// EMIT_MIR intrinsics.f_u64.PreCodegen.after.mir\n pub fn f_u64() {\n     f_dispatch(0u64);\n }", "previous_filename": "tests/mir-opt/lower_intrinsics_e2e.rs"}, {"sha": "691aa01a564080d31e64c2000fbbdff0394a91b4", "filename": "tests/mir-opt/pre-codegen/optimizes_into_variable.main.ConstProp.32bit.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.main.ConstProp.32bit.diff?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "previous_filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.32bit.diff"}, {"sha": "691aa01a564080d31e64c2000fbbdff0394a91b4", "filename": "tests/mir-opt/pre-codegen/optimizes_into_variable.main.ConstProp.64bit.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.main.ConstProp.64bit.diff?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "previous_filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.64bit.diff"}, {"sha": "7886bf19e0c17cbaf27f4f82030c2cef0d5e3019", "filename": "tests/mir-opt/pre-codegen/optimizes_into_variable.main.PreCodegen.after.32bit.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.main.PreCodegen.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.main.PreCodegen.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.main.PreCodegen.after.32bit.mir?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "previous_filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.PreCodegen.after.32bit.mir"}, {"sha": "7886bf19e0c17cbaf27f4f82030c2cef0d5e3019", "filename": "tests/mir-opt/pre-codegen/optimizes_into_variable.main.PreCodegen.after.64bit.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.main.PreCodegen.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.main.PreCodegen.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.main.PreCodegen.after.64bit.mir?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "previous_filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.PreCodegen.after.64bit.mir"}, {"sha": "98cd020dade4ba0665d1836e53e3de6ef1d41030", "filename": "tests/mir-opt/pre-codegen/optimizes_into_variable.main.ScalarReplacementOfAggregates.32bit.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.32bit.diff?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "previous_filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.ScalarReplacementOfAggregates.32bit.diff"}, {"sha": "98cd020dade4ba0665d1836e53e3de6ef1d41030", "filename": "tests/mir-opt/pre-codegen/optimizes_into_variable.main.ScalarReplacementOfAggregates.64bit.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.64bit.diff?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "previous_filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.ScalarReplacementOfAggregates.64bit.diff"}, {"sha": "5bea94c7fe839edc07b571b0f344c3e4deda2a6a", "filename": "tests/mir-opt/pre-codegen/optimizes_into_variable.main.SimplifyLocals-final.after.32bit.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.main.SimplifyLocals-final.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.main.SimplifyLocals-final.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.main.SimplifyLocals-final.after.32bit.mir?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "previous_filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.SimplifyLocals-final.after.32bit.mir"}, {"sha": "5bea94c7fe839edc07b571b0f344c3e4deda2a6a", "filename": "tests/mir-opt/pre-codegen/optimizes_into_variable.main.SimplifyLocals-final.after.64bit.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.main.SimplifyLocals-final.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.main.SimplifyLocals-final.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.main.SimplifyLocals-final.after.64bit.mir?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "previous_filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.SimplifyLocals-final.after.64bit.mir"}, {"sha": "bb32cd3afb1401fb3c6872056b502fca27ccfb14", "filename": "tests/mir-opt/pre-codegen/optimizes_into_variable.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Foptimizes_into_variable.rs?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "patch": "@@ -1,5 +1,4 @@\n // ignore-wasm32 compiled with panic=abort by default\n-// unit-test\n // compile-flags: -C overflow-checks=on\n \n struct Point {", "previous_filename": "tests/mir-opt/const_prop/optimizes_into_variable.rs"}, {"sha": "343a4a5a6f3a1d2990ca9aa047909f6be76ecfd5", "filename": "tests/mir-opt/pre-codegen/range_iter.forward_loop.PreCodegen.after.mir", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.forward_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.forward_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.forward_loop.PreCodegen.after.mir?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "patch": "@@ -0,0 +1,91 @@\n+// MIR for `forward_loop` after PreCodegen\n+\n+fn forward_loop(_1: u32, _2: u32, _3: impl Fn(u32)) -> () {\n+    debug start => _1;                   // in scope 0 at $DIR/range_iter.rs:+0:21: +0:26\n+    debug end => _2;                     // in scope 0 at $DIR/range_iter.rs:+0:33: +0:36\n+    debug f => _3;                       // in scope 0 at $DIR/range_iter.rs:+0:43: +0:44\n+    let mut _0: ();                      // return place in scope 0 at $DIR/range_iter.rs:+0:60: +0:60\n+    let mut _4: std::ops::Range<u32>;    // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n+    let mut _5: std::ops::Range<u32>;    // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n+    let _6: ();                          // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n+    let mut _7: std::option::Option<u32>; // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n+    let mut _8: &mut std::ops::Range<u32>; // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n+    let mut _9: isize;                   // in scope 0 at $DIR/range_iter.rs:+1:5: +3:6\n+    let mut _11: &impl Fn(u32);          // in scope 0 at $DIR/range_iter.rs:+2:9: +2:10\n+    let mut _12: (u32,);                 // in scope 0 at $DIR/range_iter.rs:+2:9: +2:13\n+    scope 1 {\n+        debug iter => _5;                // in scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n+        let _10: u32;                    // in scope 1 at $DIR/range_iter.rs:+1:9: +1:10\n+        scope 2 {\n+            debug x => _10;              // in scope 2 at $DIR/range_iter.rs:+1:9: +1:10\n+        }\n+        scope 4 (inlined iter::range::<impl Iterator for std::ops::Range<u32>>::next) { // at $DIR/range_iter.rs:21:14: 21:24\n+            debug self => _8;            // in scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        }\n+    }\n+    scope 3 (inlined <std::ops::Range<u32> as IntoIterator>::into_iter) { // at $DIR/range_iter.rs:21:14: 21:24\n+        debug self => _4;                // in scope 3 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+    }\n+\n+    bb0: {\n+        _4 = std::ops::Range::<u32> { start: _1, end: _2 }; // scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n+        StorageLive(_5);                 // scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n+        _5 = move _4;                    // scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n+        goto -> bb1;                     // scope 1 at $DIR/range_iter.rs:+1:5: +3:6\n+    }\n+\n+    bb1: {\n+        StorageLive(_7);                 // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n+        _8 = &mut _5;                    // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n+        _7 = <std::ops::Range<u32> as iter::range::RangeIteratorImpl>::spec_next(_8) -> [return: bb9, unwind: bb7]; // scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<u32>) -> Option<<std::ops::Range<u32> as iter::range::RangeIteratorImpl>::Item> {<std::ops::Range<u32> as iter::range::RangeIteratorImpl>::spec_next}, val: Value(<ZST>) }\n+    }\n+\n+    bb2: {\n+        _10 = ((_7 as Some).0: u32);     // scope 1 at $DIR/range_iter.rs:+1:9: +1:10\n+        StorageLive(_11);                // scope 2 at $DIR/range_iter.rs:+2:9: +2:10\n+        _11 = &_3;                       // scope 2 at $DIR/range_iter.rs:+2:9: +2:10\n+        StorageLive(_12);                // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n+        _12 = (_10,);                    // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n+        _6 = <impl Fn(u32) as Fn<(u32,)>>::call(move _11, move _12) -> [return: bb5, unwind: bb7]; // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n+                                         // mir::Constant\n+                                         // + span: $DIR/range_iter.rs:22:9: 22:10\n+                                         // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a impl Fn(u32), (u32,)) -> <impl Fn(u32) as FnOnce<(u32,)>>::Output {<impl Fn(u32) as Fn<(u32,)>>::call}, val: Value(<ZST>) }\n+    }\n+\n+    bb3: {\n+        unreachable;                     // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n+    }\n+\n+    bb4: {\n+        StorageDead(_7);                 // scope 1 at $DIR/range_iter.rs:+3:5: +3:6\n+        StorageDead(_5);                 // scope 0 at $DIR/range_iter.rs:+3:5: +3:6\n+        drop(_3) -> bb6;                 // scope 0 at $DIR/range_iter.rs:+4:1: +4:2\n+    }\n+\n+    bb5: {\n+        StorageDead(_12);                // scope 2 at $DIR/range_iter.rs:+2:12: +2:13\n+        StorageDead(_11);                // scope 2 at $DIR/range_iter.rs:+2:12: +2:13\n+        StorageDead(_7);                 // scope 1 at $DIR/range_iter.rs:+3:5: +3:6\n+        goto -> bb1;                     // scope 1 at $DIR/range_iter.rs:+1:5: +3:6\n+    }\n+\n+    bb6: {\n+        return;                          // scope 0 at $DIR/range_iter.rs:+4:2: +4:2\n+    }\n+\n+    bb7 (cleanup): {\n+        drop(_3) -> [return: bb8, unwind terminate]; // scope 0 at $DIR/range_iter.rs:+4:1: +4:2\n+    }\n+\n+    bb8 (cleanup): {\n+        resume;                          // scope 0 at $DIR/range_iter.rs:+0:1: +4:2\n+    }\n+\n+    bb9: {\n+        _9 = discriminant(_7);           // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n+        switchInt(move _9) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n+    }\n+}"}, {"sha": "f45eabba252ee47e8ba68baf7d10190917807c0d", "filename": "tests/mir-opt/pre-codegen/range_iter.inclusive_loop.PreCodegen.after.mir", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.inclusive_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.inclusive_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.inclusive_loop.PreCodegen.after.mir?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "patch": "@@ -0,0 +1,95 @@\n+// MIR for `inclusive_loop` after PreCodegen\n+\n+fn inclusive_loop(_1: u32, _2: u32, _3: impl Fn(u32)) -> () {\n+    debug start => _1;                   // in scope 0 at $DIR/range_iter.rs:+0:23: +0:28\n+    debug end => _2;                     // in scope 0 at $DIR/range_iter.rs:+0:35: +0:38\n+    debug f => _3;                       // in scope 0 at $DIR/range_iter.rs:+0:45: +0:46\n+    let mut _0: ();                      // return place in scope 0 at $DIR/range_iter.rs:+0:62: +0:62\n+    let mut _4: std::ops::RangeInclusive<u32>; // in scope 0 at $DIR/range_iter.rs:+1:14: +1:25\n+    let mut _5: std::ops::RangeInclusive<u32>; // in scope 0 at $DIR/range_iter.rs:+1:14: +1:25\n+    let _6: ();                          // in scope 0 at $DIR/range_iter.rs:+1:14: +1:25\n+    let mut _7: std::option::Option<u32>; // in scope 0 at $DIR/range_iter.rs:+1:14: +1:25\n+    let mut _8: &mut std::ops::RangeInclusive<u32>; // in scope 0 at $DIR/range_iter.rs:+1:14: +1:25\n+    let mut _9: isize;                   // in scope 0 at $DIR/range_iter.rs:+1:5: +3:6\n+    let mut _11: &impl Fn(u32);          // in scope 0 at $DIR/range_iter.rs:+2:9: +2:10\n+    let mut _12: (u32,);                 // in scope 0 at $DIR/range_iter.rs:+2:9: +2:13\n+    scope 1 {\n+        debug iter => _5;                // in scope 1 at $DIR/range_iter.rs:+1:14: +1:25\n+        let _10: u32;                    // in scope 1 at $DIR/range_iter.rs:+1:9: +1:10\n+        scope 2 {\n+            debug x => _10;              // in scope 2 at $DIR/range_iter.rs:+1:9: +1:10\n+        }\n+        scope 5 (inlined iter::range::<impl Iterator for RangeInclusive<u32>>::next) { // at $DIR/range_iter.rs:28:14: 28:25\n+            debug self => _8;            // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        }\n+    }\n+    scope 3 (inlined RangeInclusive::<u32>::new) { // at $DIR/range_iter.rs:28:14: 28:25\n+        debug start => _1;               // in scope 3 at $SRC_DIR/core/src/ops/range.rs:LL:COL\n+        debug end => _2;                 // in scope 3 at $SRC_DIR/core/src/ops/range.rs:LL:COL\n+    }\n+    scope 4 (inlined <RangeInclusive<u32> as IntoIterator>::into_iter) { // at $DIR/range_iter.rs:28:14: 28:25\n+        debug self => _4;                // in scope 4 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+    }\n+\n+    bb0: {\n+        _4 = RangeInclusive::<u32> { start: _1, end: _2, exhausted: const false }; // scope 3 at $SRC_DIR/core/src/ops/range.rs:LL:COL\n+        StorageLive(_5);                 // scope 0 at $DIR/range_iter.rs:+1:14: +1:25\n+        _5 = move _4;                    // scope 0 at $DIR/range_iter.rs:+1:14: +1:25\n+        goto -> bb1;                     // scope 1 at $DIR/range_iter.rs:+1:5: +3:6\n+    }\n+\n+    bb1: {\n+        StorageLive(_7);                 // scope 1 at $DIR/range_iter.rs:+1:14: +1:25\n+        _8 = &mut _5;                    // scope 1 at $DIR/range_iter.rs:+1:14: +1:25\n+        _7 = <RangeInclusive<u32> as iter::range::RangeInclusiveIteratorImpl>::spec_next(_8) -> [return: bb9, unwind: bb7]; // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<u32>) -> Option<<RangeInclusive<u32> as iter::range::RangeInclusiveIteratorImpl>::Item> {<RangeInclusive<u32> as iter::range::RangeInclusiveIteratorImpl>::spec_next}, val: Value(<ZST>) }\n+    }\n+\n+    bb2: {\n+        _10 = ((_7 as Some).0: u32);     // scope 1 at $DIR/range_iter.rs:+1:9: +1:10\n+        StorageLive(_11);                // scope 2 at $DIR/range_iter.rs:+2:9: +2:10\n+        _11 = &_3;                       // scope 2 at $DIR/range_iter.rs:+2:9: +2:10\n+        StorageLive(_12);                // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n+        _12 = (_10,);                    // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n+        _6 = <impl Fn(u32) as Fn<(u32,)>>::call(move _11, move _12) -> [return: bb5, unwind: bb7]; // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n+                                         // mir::Constant\n+                                         // + span: $DIR/range_iter.rs:29:9: 29:10\n+                                         // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a impl Fn(u32), (u32,)) -> <impl Fn(u32) as FnOnce<(u32,)>>::Output {<impl Fn(u32) as Fn<(u32,)>>::call}, val: Value(<ZST>) }\n+    }\n+\n+    bb3: {\n+        unreachable;                     // scope 1 at $DIR/range_iter.rs:+1:14: +1:25\n+    }\n+\n+    bb4: {\n+        StorageDead(_7);                 // scope 1 at $DIR/range_iter.rs:+3:5: +3:6\n+        StorageDead(_5);                 // scope 0 at $DIR/range_iter.rs:+3:5: +3:6\n+        drop(_3) -> bb6;                 // scope 0 at $DIR/range_iter.rs:+4:1: +4:2\n+    }\n+\n+    bb5: {\n+        StorageDead(_12);                // scope 2 at $DIR/range_iter.rs:+2:12: +2:13\n+        StorageDead(_11);                // scope 2 at $DIR/range_iter.rs:+2:12: +2:13\n+        StorageDead(_7);                 // scope 1 at $DIR/range_iter.rs:+3:5: +3:6\n+        goto -> bb1;                     // scope 1 at $DIR/range_iter.rs:+1:5: +3:6\n+    }\n+\n+    bb6: {\n+        return;                          // scope 0 at $DIR/range_iter.rs:+4:2: +4:2\n+    }\n+\n+    bb7 (cleanup): {\n+        drop(_3) -> [return: bb8, unwind terminate]; // scope 0 at $DIR/range_iter.rs:+4:1: +4:2\n+    }\n+\n+    bb8 (cleanup): {\n+        resume;                          // scope 0 at $DIR/range_iter.rs:+0:1: +4:2\n+    }\n+\n+    bb9: {\n+        _9 = discriminant(_7);           // scope 1 at $DIR/range_iter.rs:+1:14: +1:25\n+        switchInt(move _9) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 1 at $DIR/range_iter.rs:+1:14: +1:25\n+    }\n+}"}, {"sha": "d013b1b946269e952df3a1e80d32c508f67735b5", "filename": "tests/mir-opt/pre-codegen/range_iter.range_inclusive_iter_next.PreCodegen.after.mir", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.range_inclusive_iter_next.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.range_inclusive_iter_next.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.range_inclusive_iter_next.PreCodegen.after.mir?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "patch": "@@ -0,0 +1,20 @@\n+// MIR for `range_inclusive_iter_next` after PreCodegen\n+\n+fn range_inclusive_iter_next(_1: &mut RangeInclusive<u32>) -> Option<u32> {\n+    debug it => _1;                      // in scope 0 at $DIR/range_iter.rs:+0:34: +0:36\n+    let mut _0: std::option::Option<u32>; // return place in scope 0 at $DIR/range_iter.rs:+0:67: +0:78\n+    scope 1 (inlined iter::range::<impl Iterator for RangeInclusive<u32>>::next) { // at $DIR/range_iter.rs:16:8: 16:14\n+        debug self => _1;                // in scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    }\n+\n+    bb0: {\n+        _0 = <RangeInclusive<u32> as iter::range::RangeInclusiveIteratorImpl>::spec_next(_1) -> bb1; // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<u32>) -> Option<<RangeInclusive<u32> as iter::range::RangeInclusiveIteratorImpl>::Item> {<RangeInclusive<u32> as iter::range::RangeInclusiveIteratorImpl>::spec_next}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        return;                          // scope 0 at $DIR/range_iter.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "cae46e2b0bbc5afd5422a4de3cec61aae6ce8d31", "filename": "tests/mir-opt/pre-codegen/range_iter.range_iter_next.PreCodegen.after.mir", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.range_iter_next.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.range_iter_next.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.range_iter_next.PreCodegen.after.mir?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "patch": "@@ -0,0 +1,20 @@\n+// MIR for `range_iter_next` after PreCodegen\n+\n+fn range_iter_next(_1: &mut std::ops::Range<u32>) -> Option<u32> {\n+    debug it => _1;                      // in scope 0 at $DIR/range_iter.rs:+0:24: +0:26\n+    let mut _0: std::option::Option<u32>; // return place in scope 0 at $DIR/range_iter.rs:+0:48: +0:59\n+    scope 1 (inlined iter::range::<impl Iterator for std::ops::Range<u32>>::next) { // at $DIR/range_iter.rs:11:8: 11:14\n+        debug self => _1;                // in scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    }\n+\n+    bb0: {\n+        _0 = <std::ops::Range<u32> as iter::range::RangeIteratorImpl>::spec_next(_1) -> bb1; // scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<u32>) -> Option<<std::ops::Range<u32> as iter::range::RangeIteratorImpl>::Item> {<std::ops::Range<u32> as iter::range::RangeIteratorImpl>::spec_next}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        return;                          // scope 0 at $DIR/range_iter.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "fe21d4dfde437f33bf6ed3e69b44855d8d246a2b", "filename": "tests/mir-opt/pre-codegen/range_iter.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.rs?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "patch": "@@ -0,0 +1,31 @@\n+// compile-flags: -O -C debuginfo=0 -Zmir-opt-level=2\n+// only-64bit\n+// ignore-debug\n+\n+#![crate_type = \"lib\"]\n+\n+use std::ops::{Range, RangeInclusive};\n+\n+// EMIT_MIR range_iter.range_iter_next.PreCodegen.after.mir\n+pub fn range_iter_next(it: &mut Range<u32>) -> Option<u32> {\n+    it.next()\n+}\n+\n+// EMIT_MIR range_iter.range_inclusive_iter_next.PreCodegen.after.mir\n+pub fn range_inclusive_iter_next(it: &mut RangeInclusive<u32>) -> Option<u32> {\n+    it.next()\n+}\n+\n+// EMIT_MIR range_iter.forward_loop.PreCodegen.after.mir\n+pub fn forward_loop(start: u32, end: u32, f: impl Fn(u32)) {\n+    for x in start..end {\n+        f(x)\n+    }\n+}\n+\n+// EMIT_MIR range_iter.inclusive_loop.PreCodegen.after.mir\n+pub fn inclusive_loop(start: u32, end: u32, f: impl Fn(u32)) {\n+    for x in start..=end {\n+        f(x)\n+    }\n+}"}, {"sha": "986ab35886f762171450bffca886b1722dfa68d2", "filename": "tests/mir-opt/pre-codegen/simple_option_map.ezmap.PreCodegen.after.mir", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Fsimple_option_map.ezmap.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Fsimple_option_map.ezmap.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fsimple_option_map.ezmap.PreCodegen.after.mir?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "patch": "@@ -0,0 +1,56 @@\n+// MIR for `ezmap` after PreCodegen\n+\n+fn ezmap(_1: Option<i32>) -> Option<i32> {\n+    debug x => _1;                       // in scope 0 at $DIR/simple_option_map.rs:+0:14: +0:15\n+    let mut _0: std::option::Option<i32>; // return place in scope 0 at $DIR/simple_option_map.rs:+0:33: +0:44\n+    let mut _6: i32;                     // in scope 0 at $DIR/simple_option_map.rs:11:25: 11:29\n+    scope 1 (inlined map::<i32, i32, [closure@$DIR/simple_option_map.rs:18:12: 18:15]>) { // at $DIR/simple_option_map.rs:18:5: 18:22\n+        debug slf => _1;                 // in scope 1 at $DIR/simple_option_map.rs:6:17: 6:20\n+        debug f => const ZeroSized: [closure@$DIR/simple_option_map.rs:18:12: 18:15]; // in scope 1 at $DIR/simple_option_map.rs:6:33: 6:34\n+        let mut _2: isize;               // in scope 1 at $DIR/simple_option_map.rs:11:9: 11:16\n+        let _3: i32;                     // in scope 1 at $DIR/simple_option_map.rs:11:14: 11:15\n+        let mut _4: i32;                 // in scope 1 at $DIR/simple_option_map.rs:11:25: 11:29\n+        let mut _5: (i32,);              // in scope 1 at $DIR/simple_option_map.rs:11:25: 11:29\n+        scope 2 {\n+            debug x => _3;               // in scope 2 at $DIR/simple_option_map.rs:11:14: 11:15\n+            scope 3 (inlined ezmap::{closure#0}) { // at $DIR/simple_option_map.rs:11:25: 11:29\n+                debug n => _6;           // in scope 3 at $DIR/simple_option_map.rs:+1:13: +1:14\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_3);                 // scope 0 at $DIR/simple_option_map.rs:+1:5: +1:22\n+        _2 = discriminant(_1);           // scope 1 at $DIR/simple_option_map.rs:10:11: 10:14\n+        switchInt(move _2) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 1 at $DIR/simple_option_map.rs:10:5: 10:14\n+    }\n+\n+    bb1: {\n+        _0 = Option::<i32>::None;        // scope 1 at $DIR/simple_option_map.rs:12:17: 12:21\n+        goto -> bb4;                     // scope 1 at $DIR/simple_option_map.rs:12:17: 12:21\n+    }\n+\n+    bb2: {\n+        unreachable;                     // scope 1 at $DIR/simple_option_map.rs:10:11: 10:14\n+    }\n+\n+    bb3: {\n+        _3 = ((_1 as Some).0: i32);      // scope 1 at $DIR/simple_option_map.rs:11:14: 11:15\n+        StorageLive(_4);                 // scope 2 at $DIR/simple_option_map.rs:11:25: 11:29\n+        StorageLive(_5);                 // scope 2 at $DIR/simple_option_map.rs:11:25: 11:29\n+        _5 = (move _3,);                 // scope 2 at $DIR/simple_option_map.rs:11:25: 11:29\n+        StorageLive(_6);                 // scope 2 at $DIR/simple_option_map.rs:11:25: 11:29\n+        _6 = move (_5.0: i32);           // scope 2 at $DIR/simple_option_map.rs:11:25: 11:29\n+        _4 = Add(_6, const 1_i32);       // scope 3 at $DIR/simple_option_map.rs:+1:16: +1:21\n+        StorageDead(_6);                 // scope 2 at $DIR/simple_option_map.rs:11:25: 11:29\n+        StorageDead(_5);                 // scope 2 at $DIR/simple_option_map.rs:11:28: 11:29\n+        _0 = Option::<i32>::Some(move _4); // scope 2 at $DIR/simple_option_map.rs:11:20: 11:30\n+        StorageDead(_4);                 // scope 2 at $DIR/simple_option_map.rs:11:29: 11:30\n+        goto -> bb4;                     // scope 1 at $DIR/simple_option_map.rs:14:1: 14:2\n+    }\n+\n+    bb4: {\n+        StorageDead(_3);                 // scope 0 at $DIR/simple_option_map.rs:+1:5: +1:22\n+        return;                          // scope 0 at $DIR/simple_option_map.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "fb3da68e4af2dd58954cc1ba6ec2246cfb13248e", "filename": "tests/mir-opt/pre-codegen/simple_option_map.rs", "status": "renamed", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Fsimple_option_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Fsimple_option_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fsimple_option_map.rs?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "patch": "@@ -1,3 +1,7 @@\n+// compile-flags: -O -C debuginfo=0 -Zmir-opt-level=2\n+// only-64bit\n+// ignore-debug\n+\n #[inline(always)]\n fn map<T, U, F>(slf: Option<T>, f: F) -> Option<U>\n where\n@@ -9,7 +13,7 @@ where\n     }\n }\n \n-// EMIT_MIR simple_option_map_e2e.ezmap.PreCodegen.after.mir\n+// EMIT_MIR simple_option_map.ezmap.PreCodegen.after.mir\n pub fn ezmap(x: Option<i32>) -> Option<i32> {\n     map(x, |n| n + 1)\n }", "previous_filename": "tests/mir-opt/simple_option_map_e2e.rs"}, {"sha": "f27525bf3d950f781f3aa48d99dbf770be3859a0", "filename": "tests/mir-opt/pre-codegen/slice_iter.forward_loop.PreCodegen.after.mir", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.forward_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.forward_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.forward_loop.PreCodegen.after.mir?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "patch": "@@ -0,0 +1,103 @@\n+// MIR for `forward_loop` after PreCodegen\n+\n+fn forward_loop(_1: &[T], _2: impl Fn(&T)) -> () {\n+    debug slice => _1;                   // in scope 0 at $DIR/slice_iter.rs:+0:28: +0:33\n+    debug f => _2;                       // in scope 0 at $DIR/slice_iter.rs:+0:44: +0:45\n+    let mut _0: ();                      // return place in scope 0 at $DIR/slice_iter.rs:+0:60: +0:60\n+    let mut _3: std::slice::Iter<'_, T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n+    let mut _4: std::slice::Iter<'_, T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n+    let mut _5: std::slice::Iter<'_, T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n+    let _6: ();                          // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n+    let mut _7: std::option::Option<&T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n+    let mut _8: &mut std::slice::Iter<'_, T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n+    let mut _9: isize;                   // in scope 0 at $DIR/slice_iter.rs:+1:5: +3:6\n+    let mut _11: &impl Fn(&T);           // in scope 0 at $DIR/slice_iter.rs:+2:9: +2:10\n+    let mut _12: (&T,);                  // in scope 0 at $DIR/slice_iter.rs:+2:9: +2:13\n+    scope 1 {\n+        debug iter => _5;                // in scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n+        let _10: &T;                     // in scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n+        scope 2 {\n+            debug x => _10;              // in scope 2 at $DIR/slice_iter.rs:+1:9: +1:10\n+        }\n+    }\n+    scope 3 (inlined core::slice::<impl [T]>::iter) { // at $DIR/slice_iter.rs:28:20: 28:26\n+        debug self => _1;                // in scope 3 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+    }\n+    scope 4 (inlined <std::slice::Iter<'_, T> as IntoIterator>::into_iter) { // at $DIR/slice_iter.rs:28:14: 28:26\n+        debug self => _4;                // in scope 4 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+    }\n+\n+    bb0: {\n+        StorageLive(_3);                 // scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n+        StorageLive(_4);                 // scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n+        _4 = std::slice::Iter::<'_, T>::new(_1) -> [return: bb10, unwind: bb8]; // scope 3 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+                                         // + user_ty: UserType(0)\n+                                         // + literal: Const { ty: fn(&[T]) -> std::slice::Iter<'_, T> {std::slice::Iter::<'_, T>::new}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageLive(_7);                 // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n+        _8 = &mut _5;                    // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n+        _7 = <std::slice::Iter<'_, T> as Iterator>::next(_8) -> [return: bb2, unwind: bb8]; // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n+                                         // mir::Constant\n+                                         // + span: $DIR/slice_iter.rs:28:14: 28:26\n+                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, T>) -> Option<<std::slice::Iter<'_, T> as Iterator>::Item> {<std::slice::Iter<'_, T> as Iterator>::next}, val: Value(<ZST>) }\n+    }\n+\n+    bb2: {\n+        _9 = discriminant(_7);           // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n+        switchInt(move _9) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n+    }\n+\n+    bb3: {\n+        _10 = ((_7 as Some).0: &T);      // scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n+        StorageLive(_11);                // scope 2 at $DIR/slice_iter.rs:+2:9: +2:10\n+        _11 = &_2;                       // scope 2 at $DIR/slice_iter.rs:+2:9: +2:10\n+        StorageLive(_12);                // scope 2 at $DIR/slice_iter.rs:+2:9: +2:13\n+        _12 = (_10,);                    // scope 2 at $DIR/slice_iter.rs:+2:9: +2:13\n+        _6 = <impl Fn(&T) as Fn<(&T,)>>::call(move _11, move _12) -> [return: bb6, unwind: bb8]; // scope 2 at $DIR/slice_iter.rs:+2:9: +2:13\n+                                         // mir::Constant\n+                                         // + span: $DIR/slice_iter.rs:29:9: 29:10\n+                                         // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a impl Fn(&T), (&T,)) -> <impl Fn(&T) as FnOnce<(&T,)>>::Output {<impl Fn(&T) as Fn<(&T,)>>::call}, val: Value(<ZST>) }\n+    }\n+\n+    bb4: {\n+        unreachable;                     // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n+    }\n+\n+    bb5: {\n+        StorageDead(_7);                 // scope 1 at $DIR/slice_iter.rs:+3:5: +3:6\n+        StorageDead(_5);                 // scope 0 at $DIR/slice_iter.rs:+3:5: +3:6\n+        StorageDead(_3);                 // scope 0 at $DIR/slice_iter.rs:+3:5: +3:6\n+        drop(_2) -> bb7;                 // scope 0 at $DIR/slice_iter.rs:+4:1: +4:2\n+    }\n+\n+    bb6: {\n+        StorageDead(_12);                // scope 2 at $DIR/slice_iter.rs:+2:12: +2:13\n+        StorageDead(_11);                // scope 2 at $DIR/slice_iter.rs:+2:12: +2:13\n+        StorageDead(_7);                 // scope 1 at $DIR/slice_iter.rs:+3:5: +3:6\n+        goto -> bb1;                     // scope 1 at $DIR/slice_iter.rs:+1:5: +3:6\n+    }\n+\n+    bb7: {\n+        return;                          // scope 0 at $DIR/slice_iter.rs:+4:2: +4:2\n+    }\n+\n+    bb8 (cleanup): {\n+        drop(_2) -> [return: bb9, unwind terminate]; // scope 0 at $DIR/slice_iter.rs:+4:1: +4:2\n+    }\n+\n+    bb9 (cleanup): {\n+        resume;                          // scope 0 at $DIR/slice_iter.rs:+0:1: +4:2\n+    }\n+\n+    bb10: {\n+        _3 = move _4;                    // scope 4 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+        StorageDead(_4);                 // scope 0 at $DIR/slice_iter.rs:+1:25: +1:26\n+        StorageLive(_5);                 // scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n+        _5 = move _3;                    // scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n+        goto -> bb1;                     // scope 1 at $DIR/slice_iter.rs:+1:5: +3:6\n+    }\n+}"}, {"sha": "62dd9667d96064375833053aba3263e0925b098f", "filename": "tests/mir-opt/pre-codegen/slice_iter.reverse_loop.PreCodegen.after.mir", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.reverse_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.reverse_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.reverse_loop.PreCodegen.after.mir?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "patch": "@@ -0,0 +1,114 @@\n+// MIR for `reverse_loop` after PreCodegen\n+\n+fn reverse_loop(_1: &[T], _2: impl Fn(&T)) -> () {\n+    debug slice => _1;                   // in scope 0 at $DIR/slice_iter.rs:+0:28: +0:33\n+    debug f => _2;                       // in scope 0 at $DIR/slice_iter.rs:+0:44: +0:45\n+    let mut _0: ();                      // return place in scope 0 at $DIR/slice_iter.rs:+0:60: +0:60\n+    let mut _3: std::iter::Rev<std::slice::Iter<'_, T>>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:32\n+    let mut _4: std::slice::Iter<'_, T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n+    let mut _5: std::iter::Rev<std::slice::Iter<'_, T>>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:32\n+    let _6: ();                          // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:32\n+    let mut _7: std::option::Option<&T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:32\n+    let mut _8: &mut std::iter::Rev<std::slice::Iter<'_, T>>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:32\n+    let mut _9: isize;                   // in scope 0 at $DIR/slice_iter.rs:+1:5: +3:6\n+    let mut _11: &impl Fn(&T);           // in scope 0 at $DIR/slice_iter.rs:+2:9: +2:10\n+    let mut _12: (&T,);                  // in scope 0 at $DIR/slice_iter.rs:+2:9: +2:13\n+    scope 1 {\n+        debug iter => _5;                // in scope 1 at $DIR/slice_iter.rs:+1:14: +1:32\n+        let _10: &T;                     // in scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n+        scope 2 {\n+            debug x => _10;              // in scope 2 at $DIR/slice_iter.rs:+1:9: +1:10\n+        }\n+        scope 7 (inlined <Rev<std::slice::Iter<'_, T>> as Iterator>::next) { // at $DIR/slice_iter.rs:35:14: 35:32\n+            debug self => _8;            // in scope 7 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+            let mut _13: &mut std::slice::Iter<'_, T>; // in scope 7 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+        }\n+    }\n+    scope 3 (inlined core::slice::<impl [T]>::iter) { // at $DIR/slice_iter.rs:35:20: 35:26\n+        debug self => _1;                // in scope 3 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+    }\n+    scope 4 (inlined <std::slice::Iter<'_, T> as Iterator>::rev) { // at $DIR/slice_iter.rs:35:27: 35:32\n+        debug self => _4;                // in scope 4 at $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+        scope 5 (inlined Rev::<std::slice::Iter<'_, T>>::new) { // at $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+            debug iter => _4;            // in scope 5 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+        }\n+    }\n+    scope 6 (inlined <Rev<std::slice::Iter<'_, T>> as IntoIterator>::into_iter) { // at $DIR/slice_iter.rs:35:14: 35:32\n+        debug self => _3;                // in scope 6 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+    }\n+\n+    bb0: {\n+        StorageLive(_4);                 // scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n+        _4 = std::slice::Iter::<'_, T>::new(_1) -> [return: bb9, unwind: bb7]; // scope 3 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+                                         // + user_ty: UserType(0)\n+                                         // + literal: Const { ty: fn(&[T]) -> std::slice::Iter<'_, T> {std::slice::Iter::<'_, T>::new}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageLive(_7);                 // scope 1 at $DIR/slice_iter.rs:+1:14: +1:32\n+        _8 = &mut _5;                    // scope 1 at $DIR/slice_iter.rs:+1:14: +1:32\n+        StorageLive(_13);                // scope 7 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+        _13 = &mut ((*_8).0: std::slice::Iter<'_, T>); // scope 7 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+        _7 = <std::slice::Iter<'_, T> as DoubleEndedIterator>::next_back(move _13) -> [return: bb10, unwind: bb7]; // scope 7 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, T>) -> Option<<std::slice::Iter<'_, T> as Iterator>::Item> {<std::slice::Iter<'_, T> as DoubleEndedIterator>::next_back}, val: Value(<ZST>) }\n+    }\n+\n+    bb2: {\n+        _10 = ((_7 as Some).0: &T);      // scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n+        StorageLive(_11);                // scope 2 at $DIR/slice_iter.rs:+2:9: +2:10\n+        _11 = &_2;                       // scope 2 at $DIR/slice_iter.rs:+2:9: +2:10\n+        StorageLive(_12);                // scope 2 at $DIR/slice_iter.rs:+2:9: +2:13\n+        _12 = (_10,);                    // scope 2 at $DIR/slice_iter.rs:+2:9: +2:13\n+        _6 = <impl Fn(&T) as Fn<(&T,)>>::call(move _11, move _12) -> [return: bb5, unwind: bb7]; // scope 2 at $DIR/slice_iter.rs:+2:9: +2:13\n+                                         // mir::Constant\n+                                         // + span: $DIR/slice_iter.rs:36:9: 36:10\n+                                         // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a impl Fn(&T), (&T,)) -> <impl Fn(&T) as FnOnce<(&T,)>>::Output {<impl Fn(&T) as Fn<(&T,)>>::call}, val: Value(<ZST>) }\n+    }\n+\n+    bb3: {\n+        unreachable;                     // scope 1 at $DIR/slice_iter.rs:+1:14: +1:32\n+    }\n+\n+    bb4: {\n+        StorageDead(_7);                 // scope 1 at $DIR/slice_iter.rs:+3:5: +3:6\n+        StorageDead(_5);                 // scope 0 at $DIR/slice_iter.rs:+3:5: +3:6\n+        drop(_2) -> bb6;                 // scope 0 at $DIR/slice_iter.rs:+4:1: +4:2\n+    }\n+\n+    bb5: {\n+        StorageDead(_12);                // scope 2 at $DIR/slice_iter.rs:+2:12: +2:13\n+        StorageDead(_11);                // scope 2 at $DIR/slice_iter.rs:+2:12: +2:13\n+        StorageDead(_7);                 // scope 1 at $DIR/slice_iter.rs:+3:5: +3:6\n+        goto -> bb1;                     // scope 1 at $DIR/slice_iter.rs:+1:5: +3:6\n+    }\n+\n+    bb6: {\n+        return;                          // scope 0 at $DIR/slice_iter.rs:+4:2: +4:2\n+    }\n+\n+    bb7 (cleanup): {\n+        drop(_2) -> [return: bb8, unwind terminate]; // scope 0 at $DIR/slice_iter.rs:+4:1: +4:2\n+    }\n+\n+    bb8 (cleanup): {\n+        resume;                          // scope 0 at $DIR/slice_iter.rs:+0:1: +4:2\n+    }\n+\n+    bb9: {\n+        _3 = Rev::<std::slice::Iter<'_, T>> { iter: move _4 }; // scope 5 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+        StorageDead(_4);                 // scope 0 at $DIR/slice_iter.rs:+1:31: +1:32\n+        StorageLive(_5);                 // scope 0 at $DIR/slice_iter.rs:+1:14: +1:32\n+        _5 = move _3;                    // scope 0 at $DIR/slice_iter.rs:+1:14: +1:32\n+        goto -> bb1;                     // scope 1 at $DIR/slice_iter.rs:+1:5: +3:6\n+    }\n+\n+    bb10: {\n+        StorageDead(_13);                // scope 7 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+        _9 = discriminant(_7);           // scope 1 at $DIR/slice_iter.rs:+1:14: +1:32\n+        switchInt(move _9) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 1 at $DIR/slice_iter.rs:+1:14: +1:32\n+    }\n+}"}, {"sha": "ca423ca55e61f194753118cef5ce29d6fc7eaaf7", "filename": "tests/mir-opt/pre-codegen/slice_iter.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.rs?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "patch": "@@ -0,0 +1,38 @@\n+// compile-flags: -O -C debuginfo=0 -Zmir-opt-level=2\n+// only-64bit\n+// ignore-debug\n+\n+#![crate_type = \"lib\"]\n+\n+// When this test was added, the MIR for `next` was 174 lines just for the basic\n+// blocks -- far more if you counted the scopes.  The goal of having this here\n+// is to hopefully keep it a reasonable size, ideally eventually small enough\n+// that the mir inliner would actually be willing to inline it, since it's an\n+// important building block and usually very few *backend* instructions.\n+\n+// As such, feel free to `--bless` whatever changes you get here, so long as\n+// doing so doesn't add substantially more MIR.\n+\n+// EMIT_MIR slice_iter.slice_iter_next.PreCodegen.after.mir\n+pub fn slice_iter_next<'a, T>(it: &mut std::slice::Iter<'a, T>) -> Option<&'a T> {\n+    it.next()\n+}\n+\n+// EMIT_MIR slice_iter.slice_iter_mut_next_back.PreCodegen.after.mir\n+pub fn slice_iter_mut_next_back<'a, T>(it: &mut std::slice::IterMut<'a, T>) -> Option<&'a mut T> {\n+    it.next_back()\n+}\n+\n+// EMIT_MIR slice_iter.forward_loop.PreCodegen.after.mir\n+pub fn forward_loop<'a, T>(slice: &'a [T], f: impl Fn(&T)) {\n+    for x in slice.iter() {\n+        f(x)\n+    }\n+}\n+\n+// EMIT_MIR slice_iter.reverse_loop.PreCodegen.after.mir\n+pub fn reverse_loop<'a, T>(slice: &'a [T], f: impl Fn(&T)) {\n+    for x in slice.iter().rev() {\n+        f(x)\n+    }\n+}"}, {"sha": "a1431d473bc6182dd54971304e7d9eb1080a1503", "filename": "tests/mir-opt/pre-codegen/slice_iter.slice_iter_mut_next_back.PreCodegen.after.mir", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.slice_iter_mut_next_back.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.slice_iter_mut_next_back.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.slice_iter_mut_next_back.PreCodegen.after.mir?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "patch": "@@ -0,0 +1,17 @@\n+// MIR for `slice_iter_mut_next_back` after PreCodegen\n+\n+fn slice_iter_mut_next_back(_1: &mut std::slice::IterMut<'_, T>) -> Option<&mut T> {\n+    debug it => _1;                      // in scope 0 at $DIR/slice_iter.rs:+0:40: +0:42\n+    let mut _0: std::option::Option<&mut T>; // return place in scope 0 at $DIR/slice_iter.rs:+0:80: +0:97\n+\n+    bb0: {\n+        _0 = <std::slice::IterMut<'_, T> as DoubleEndedIterator>::next_back(_1) -> bb1; // scope 0 at $DIR/slice_iter.rs:+1:5: +1:19\n+                                         // mir::Constant\n+                                         // + span: $DIR/slice_iter.rs:23:8: 23:17\n+                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::IterMut<'_, T>) -> Option<<std::slice::IterMut<'_, T> as Iterator>::Item> {<std::slice::IterMut<'_, T> as DoubleEndedIterator>::next_back}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        return;                          // scope 0 at $DIR/slice_iter.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "d2a963cad12a6f7c7e448578e77a60e73a30d68f", "filename": "tests/mir-opt/pre-codegen/slice_iter.slice_iter_next.PreCodegen.after.mir", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.slice_iter_next.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.slice_iter_next.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.slice_iter_next.PreCodegen.after.mir?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "patch": "@@ -0,0 +1,17 @@\n+// MIR for `slice_iter_next` after PreCodegen\n+\n+fn slice_iter_next(_1: &mut std::slice::Iter<'_, T>) -> Option<&T> {\n+    debug it => _1;                      // in scope 0 at $DIR/slice_iter.rs:+0:31: +0:33\n+    let mut _0: std::option::Option<&T>; // return place in scope 0 at $DIR/slice_iter.rs:+0:68: +0:81\n+\n+    bb0: {\n+        _0 = <std::slice::Iter<'_, T> as Iterator>::next(_1) -> bb1; // scope 0 at $DIR/slice_iter.rs:+1:5: +1:14\n+                                         // mir::Constant\n+                                         // + span: $DIR/slice_iter.rs:18:8: 18:12\n+                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, T>) -> Option<<std::slice::Iter<'_, T> as Iterator>::Item> {<std::slice::Iter<'_, T> as Iterator>::next}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        return;                          // scope 0 at $DIR/slice_iter.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "53971b4cffcd6186915c10be8ccbfc9ce5558851", "filename": "tests/mir-opt/pre-codegen/try_identity.new.PreCodegen.after.mir", "status": "renamed", "additions": 37, "deletions": 33, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Ftry_identity.new.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Ftry_identity.new.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Ftry_identity.new.PreCodegen.after.mir?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "patch": "@@ -1,66 +1,70 @@\n // MIR for `new` after PreCodegen\n \n fn new(_1: Result<T, E>) -> Result<T, E> {\n-    debug x => _1;                       // in scope 0 at $DIR/try_identity_e2e.rs:+0:14: +0:15\n-    let mut _0: std::result::Result<T, E>; // return place in scope 0 at $DIR/try_identity_e2e.rs:+0:34: +0:46\n-    let mut _2: std::ops::ControlFlow<E, T>; // in scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n-    let mut _3: isize;                   // in scope 0 at $DIR/try_identity_e2e.rs:+4:17: +4:22\n-    let _4: T;                           // in scope 0 at $DIR/try_identity_e2e.rs:+4:20: +4:21\n-    let _5: E;                           // in scope 0 at $DIR/try_identity_e2e.rs:+5:21: +5:22\n-    let mut _6: isize;                   // in scope 0 at $DIR/try_identity_e2e.rs:+8:13: +8:37\n-    let _7: T;                           // in scope 0 at $DIR/try_identity_e2e.rs:+8:35: +8:36\n-    let _8: E;                           // in scope 0 at $DIR/try_identity_e2e.rs:+9:32: +9:33\n+    debug x => _1;                       // in scope 0 at $DIR/try_identity.rs:+0:14: +0:15\n+    let mut _0: std::result::Result<T, E>; // return place in scope 0 at $DIR/try_identity.rs:+0:34: +0:46\n+    let mut _2: std::ops::ControlFlow<E, T>; // in scope 0 at $DIR/try_identity.rs:+2:15: +7:10\n+    let mut _3: isize;                   // in scope 0 at $DIR/try_identity.rs:+4:17: +4:22\n+    let _4: T;                           // in scope 0 at $DIR/try_identity.rs:+4:20: +4:21\n+    let _5: E;                           // in scope 0 at $DIR/try_identity.rs:+5:21: +5:22\n+    let mut _6: isize;                   // in scope 0 at $DIR/try_identity.rs:+8:13: +8:37\n+    let _7: T;                           // in scope 0 at $DIR/try_identity.rs:+8:35: +8:36\n+    let _8: E;                           // in scope 0 at $DIR/try_identity.rs:+9:32: +9:33\n     scope 1 {\n-        debug v => _4;                   // in scope 1 at $DIR/try_identity_e2e.rs:+4:20: +4:21\n+        debug v => _4;                   // in scope 1 at $DIR/try_identity.rs:+4:20: +4:21\n     }\n     scope 2 {\n-        debug e => _5;                   // in scope 2 at $DIR/try_identity_e2e.rs:+5:21: +5:22\n+        debug e => _5;                   // in scope 2 at $DIR/try_identity.rs:+5:21: +5:22\n     }\n     scope 3 {\n-        debug v => _7;                   // in scope 3 at $DIR/try_identity_e2e.rs:+8:35: +8:36\n+        debug v => _7;                   // in scope 3 at $DIR/try_identity.rs:+8:35: +8:36\n     }\n     scope 4 {\n-        debug e => _8;                   // in scope 4 at $DIR/try_identity_e2e.rs:+9:32: +9:33\n+        debug e => _8;                   // in scope 4 at $DIR/try_identity.rs:+9:32: +9:33\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n-        _3 = discriminant(_1);           // scope 0 at $DIR/try_identity_e2e.rs:+3:19: +3:20\n-        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at $DIR/try_identity_e2e.rs:+3:13: +3:20\n+        StorageLive(_2);                 // scope 0 at $DIR/try_identity.rs:+2:15: +7:10\n+        _3 = discriminant(_1);           // scope 0 at $DIR/try_identity.rs:+3:19: +3:20\n+        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at $DIR/try_identity.rs:+3:13: +3:20\n     }\n \n     bb1: {\n-        _5 = move ((_1 as Err).0: E);    // scope 0 at $DIR/try_identity_e2e.rs:+5:21: +5:22\n-        _2 = ControlFlow::<E, T>::Break(move _5); // scope 2 at $DIR/try_identity_e2e.rs:+5:27: +5:48\n-        goto -> bb4;                     // scope 0 at $DIR/try_identity_e2e.rs:+5:47: +5:48\n+        _5 = move ((_1 as Err).0: E);    // scope 0 at $DIR/try_identity.rs:+5:21: +5:22\n+        _2 = ControlFlow::<E, T>::Break(move _5); // scope 2 at $DIR/try_identity.rs:+5:27: +5:48\n+        goto -> bb4;                     // scope 0 at $DIR/try_identity.rs:+5:47: +5:48\n     }\n \n     bb2: {\n-        unreachable;                     // scope 0 at $DIR/try_identity_e2e.rs:+3:19: +3:20\n+        unreachable;                     // scope 0 at $DIR/try_identity.rs:+3:19: +3:20\n     }\n \n     bb3: {\n-        _4 = move ((_1 as Ok).0: T);     // scope 0 at $DIR/try_identity_e2e.rs:+4:20: +4:21\n-        _2 = ControlFlow::<E, T>::Continue(move _4); // scope 1 at $DIR/try_identity_e2e.rs:+4:26: +4:50\n-        goto -> bb4;                     // scope 0 at $DIR/try_identity_e2e.rs:+4:49: +4:50\n+        _4 = move ((_1 as Ok).0: T);     // scope 0 at $DIR/try_identity.rs:+4:20: +4:21\n+        _2 = ControlFlow::<E, T>::Continue(move _4); // scope 1 at $DIR/try_identity.rs:+4:26: +4:50\n+        goto -> bb4;                     // scope 0 at $DIR/try_identity.rs:+4:49: +4:50\n     }\n \n     bb4: {\n-        _6 = discriminant(_2);           // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n-        switchInt(move _6) -> [0: bb6, 1: bb5, otherwise: bb2]; // scope 0 at $DIR/try_identity_e2e.rs:+2:9: +7:10\n+        _6 = discriminant(_2);           // scope 0 at $DIR/try_identity.rs:+2:15: +7:10\n+        switchInt(move _6) -> [0: bb6, 1: bb5, otherwise: bb2]; // scope 0 at $DIR/try_identity.rs:+2:9: +7:10\n     }\n \n     bb5: {\n-        _8 = move ((_2 as Break).0: E);  // scope 0 at $DIR/try_identity_e2e.rs:+9:32: +9:33\n-        _0 = Result::<T, E>::Err(move _8); // scope 4 at $DIR/try_identity_e2e.rs:+9:45: +9:51\n-        StorageDead(_2);                 // scope 0 at $DIR/try_identity_e2e.rs:+12:1: +12:2\n-        return;                          // scope 0 at $DIR/try_identity_e2e.rs:+12:1: +12:2\n+        _8 = move ((_2 as Break).0: E);  // scope 0 at $DIR/try_identity.rs:+9:32: +9:33\n+        _0 = Result::<T, E>::Err(move _8); // scope 4 at $DIR/try_identity.rs:+9:45: +9:51\n+        StorageDead(_2);                 // scope 0 at $DIR/try_identity.rs:+12:1: +12:2\n+        goto -> bb7;                     // scope 0 at $DIR/try_identity.rs:+12:1: +12:2\n     }\n \n     bb6: {\n-        _7 = move ((_2 as Continue).0: T); // scope 0 at $DIR/try_identity_e2e.rs:+8:35: +8:36\n-        _0 = Result::<T, E>::Ok(move _7); // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +11:6\n-        StorageDead(_2);                 // scope 0 at $DIR/try_identity_e2e.rs:+12:1: +12:2\n-        return;                          // scope 0 at $DIR/try_identity_e2e.rs:+12:1: +12:2\n+        _7 = move ((_2 as Continue).0: T); // scope 0 at $DIR/try_identity.rs:+8:35: +8:36\n+        _0 = Result::<T, E>::Ok(move _7); // scope 0 at $DIR/try_identity.rs:+1:5: +11:6\n+        StorageDead(_2);                 // scope 0 at $DIR/try_identity.rs:+12:1: +12:2\n+        goto -> bb7;                     // scope 0 at $DIR/try_identity.rs:+12:1: +12:2\n+    }\n+\n+    bb7: {\n+        return;                          // scope 0 at $DIR/try_identity.rs:+12:2: +12:2\n     }\n }", "previous_filename": "tests/mir-opt/try_identity_e2e.new.PreCodegen.after.mir"}, {"sha": "e217d19947fdc4d2e24630a318bf4b0cb9398f80", "filename": "tests/mir-opt/pre-codegen/try_identity.old.PreCodegen.after.mir", "status": "renamed", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Ftry_identity.old.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Ftry_identity.old.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Ftry_identity.old.PreCodegen.after.mir?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "patch": "@@ -1,36 +1,40 @@\n // MIR for `old` after PreCodegen\n \n fn old(_1: Result<T, E>) -> Result<T, E> {\n-    debug x => _1;                       // in scope 0 at $DIR/try_identity_e2e.rs:+0:14: +0:15\n-    let mut _0: std::result::Result<T, E>; // return place in scope 0 at $DIR/try_identity_e2e.rs:+0:34: +0:46\n-    let mut _2: isize;                   // in scope 0 at $DIR/try_identity_e2e.rs:+3:13: +3:18\n-    let _3: T;                           // in scope 0 at $DIR/try_identity_e2e.rs:+3:16: +3:17\n-    let _4: E;                           // in scope 0 at $DIR/try_identity_e2e.rs:+4:17: +4:18\n+    debug x => _1;                       // in scope 0 at $DIR/try_identity.rs:+0:14: +0:15\n+    let mut _0: std::result::Result<T, E>; // return place in scope 0 at $DIR/try_identity.rs:+0:34: +0:46\n+    let mut _2: isize;                   // in scope 0 at $DIR/try_identity.rs:+3:13: +3:18\n+    let _3: T;                           // in scope 0 at $DIR/try_identity.rs:+3:16: +3:17\n+    let _4: E;                           // in scope 0 at $DIR/try_identity.rs:+4:17: +4:18\n     scope 1 {\n-        debug v => _3;                   // in scope 1 at $DIR/try_identity_e2e.rs:+3:16: +3:17\n+        debug v => _3;                   // in scope 1 at $DIR/try_identity.rs:+3:16: +3:17\n     }\n     scope 2 {\n-        debug e => _4;                   // in scope 2 at $DIR/try_identity_e2e.rs:+4:17: +4:18\n+        debug e => _4;                   // in scope 2 at $DIR/try_identity.rs:+4:17: +4:18\n     }\n \n     bb0: {\n-        _2 = discriminant(_1);           // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +2:16\n-        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at $DIR/try_identity_e2e.rs:+2:9: +2:16\n+        _2 = discriminant(_1);           // scope 0 at $DIR/try_identity.rs:+2:15: +2:16\n+        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at $DIR/try_identity.rs:+2:9: +2:16\n     }\n \n     bb1: {\n-        _4 = move ((_1 as Err).0: E);    // scope 0 at $DIR/try_identity_e2e.rs:+4:17: +4:18\n-        _0 = Result::<T, E>::Err(move _4); // scope 2 at $DIR/try_identity_e2e.rs:+4:30: +4:36\n-        return;                          // scope 0 at $DIR/try_identity_e2e.rs:+7:1: +7:2\n+        _4 = move ((_1 as Err).0: E);    // scope 0 at $DIR/try_identity.rs:+4:17: +4:18\n+        _0 = Result::<T, E>::Err(move _4); // scope 2 at $DIR/try_identity.rs:+4:30: +4:36\n+        goto -> bb4;                     // scope 0 at $DIR/try_identity.rs:+7:1: +7:2\n     }\n \n     bb2: {\n-        unreachable;                     // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +2:16\n+        unreachable;                     // scope 0 at $DIR/try_identity.rs:+2:15: +2:16\n     }\n \n     bb3: {\n-        _3 = move ((_1 as Ok).0: T);     // scope 0 at $DIR/try_identity_e2e.rs:+3:16: +3:17\n-        _0 = Result::<T, E>::Ok(move _3); // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +6:6\n-        return;                          // scope 0 at $DIR/try_identity_e2e.rs:+7:1: +7:2\n+        _3 = move ((_1 as Ok).0: T);     // scope 0 at $DIR/try_identity.rs:+3:16: +3:17\n+        _0 = Result::<T, E>::Ok(move _3); // scope 0 at $DIR/try_identity.rs:+1:5: +6:6\n+        goto -> bb4;                     // scope 0 at $DIR/try_identity.rs:+7:1: +7:2\n+    }\n+\n+    bb4: {\n+        return;                          // scope 0 at $DIR/try_identity.rs:+7:2: +7:2\n     }\n }", "previous_filename": "tests/mir-opt/try_identity_e2e.old.PreCodegen.after.mir"}, {"sha": "079ecccab28c5800b1fec4ff0bb32bc58e3bc18f", "filename": "tests/mir-opt/pre-codegen/try_identity.rs", "status": "renamed", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Ftry_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/253b727f46101a18126bfc8a93067aa7a67d9b77/tests%2Fmir-opt%2Fpre-codegen%2Ftry_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Ftry_identity.rs?ref=253b727f46101a18126bfc8a93067aa7a67d9b77", "patch": "@@ -1,9 +1,13 @@\n+// compile-flags: -O -C debuginfo=0 -Zmir-opt-level=2\n+// only-64bit\n+// ignore-debug\n+\n // Track the status of MIR optimizations simplifying `Ok(res?)` for both the old and new desugarings\n // of that syntax.\n \n use std::ops::ControlFlow;\n \n-// EMIT_MIR try_identity_e2e.new.PreCodegen.after.mir\n+// EMIT_MIR try_identity.new.PreCodegen.after.mir\n fn new<T, E>(x: Result<T, E>) -> Result<T, E> {\n     Ok(\n         match {\n@@ -18,7 +22,7 @@ fn new<T, E>(x: Result<T, E>) -> Result<T, E> {\n     )\n }\n \n-// EMIT_MIR try_identity_e2e.old.PreCodegen.after.mir\n+// EMIT_MIR try_identity.old.PreCodegen.after.mir\n fn old<T, E>(x: Result<T, E>) -> Result<T, E> {\n     Ok(\n         match x {", "previous_filename": "tests/mir-opt/try_identity_e2e.rs"}, {"sha": "cae89fb177a7c2d63e02bcc5e85b9c9fda0a9015", "filename": "tests/mir-opt/simple_option_map_e2e.ezmap.PreCodegen.after.mir", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b72460fe46a873da0c40582636c26e7675e92288/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b72460fe46a873da0c40582636c26e7675e92288/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir?ref=b72460fe46a873da0c40582636c26e7675e92288", "patch": "@@ -1,42 +0,0 @@\n-// MIR for `ezmap` after PreCodegen\n-\n-fn ezmap(_1: Option<i32>) -> Option<i32> {\n-    debug x => _1;                       // in scope 0 at $DIR/simple_option_map_e2e.rs:+0:14: +0:15\n-    let mut _0: std::option::Option<i32>; // return place in scope 0 at $DIR/simple_option_map_e2e.rs:+0:33: +0:44\n-    scope 1 (inlined map::<i32, i32, [closure@$DIR/simple_option_map_e2e.rs:14:12: 14:15]>) { // at $DIR/simple_option_map_e2e.rs:14:5: 14:22\n-        debug slf => _1;                 // in scope 1 at $DIR/simple_option_map_e2e.rs:2:17: 2:20\n-        debug f => const ZeroSized: [closure@$DIR/simple_option_map_e2e.rs:14:12: 14:15]; // in scope 1 at $DIR/simple_option_map_e2e.rs:2:33: 2:34\n-        let mut _2: isize;               // in scope 1 at $DIR/simple_option_map_e2e.rs:7:9: 7:16\n-        let _3: i32;                     // in scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n-        let mut _4: i32;                 // in scope 1 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-        scope 2 {\n-            debug x => _3;               // in scope 2 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n-            scope 3 (inlined ezmap::{closure#0}) { // at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-                debug n => _3;           // in scope 3 at $DIR/simple_option_map_e2e.rs:+1:13: +1:14\n-            }\n-        }\n-    }\n-\n-    bb0: {\n-        _2 = discriminant(_1);           // scope 1 at $DIR/simple_option_map_e2e.rs:6:11: 6:14\n-        switchInt(move _2) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 1 at $DIR/simple_option_map_e2e.rs:6:5: 6:14\n-    }\n-\n-    bb1: {\n-        _0 = Option::<i32>::None;        // scope 1 at $DIR/simple_option_map_e2e.rs:8:17: 8:21\n-        return;                          // scope 1 at $DIR/simple_option_map_e2e.rs:8:17: 8:21\n-    }\n-\n-    bb2: {\n-        unreachable;                     // scope 1 at $DIR/simple_option_map_e2e.rs:6:11: 6:14\n-    }\n-\n-    bb3: {\n-        _3 = ((_1 as Some).0: i32);      // scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n-        StorageLive(_4);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-        _4 = Add(_3, const 1_i32);       // scope 3 at $DIR/simple_option_map_e2e.rs:+1:16: +1:21\n-        _0 = Option::<i32>::Some(move _4); // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30\n-        StorageDead(_4);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:29: 7:30\n-        return;                          // scope 1 at $DIR/simple_option_map_e2e.rs:10:1: 10:2\n-    }\n-}"}]}