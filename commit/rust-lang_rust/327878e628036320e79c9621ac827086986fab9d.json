{"sha": "327878e628036320e79c9621ac827086986fab9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNzg3OGU2MjgwMzYzMjBlNzljOTYyMWFjODI3MDg2OTg2ZmFiOWQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-10-25T01:58:47Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-10-25T01:58:47Z"}, "message": "remove some dead trans code", "tree": {"sha": "38f697221b53b9409af2a2810d12f01c0858fde6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38f697221b53b9409af2a2810d12f01c0858fde6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/327878e628036320e79c9621ac827086986fab9d", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/327878e628036320e79c9621ac827086986fab9d", "html_url": "https://github.com/rust-lang/rust/commit/327878e628036320e79c9621ac827086986fab9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/327878e628036320e79c9621ac827086986fab9d/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f5b2219cc893b30863f9136703166f306fcc684", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f5b2219cc893b30863f9136703166f306fcc684", "html_url": "https://github.com/rust-lang/rust/commit/3f5b2219cc893b30863f9136703166f306fcc684"}], "stats": {"total": 35, "additions": 0, "deletions": 35}, "files": [{"sha": "6a5779de6cf7bb94cbcdf7ec05a105e96b79f80e", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/327878e628036320e79c9621ac827086986fab9d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327878e628036320e79c9621ac827086986fab9d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=327878e628036320e79c9621ac827086986fab9d", "patch": "@@ -288,37 +288,6 @@ pub fn get_extern_const(externs: &mut ExternMap, llmod: ModuleRef,\n         return c;\n     }\n }\n-pub fn umax(cx: @mut Block, a: ValueRef, b: ValueRef) -> ValueRef {\n-    let _icx = push_ctxt(\"umax\");\n-    let cond = ICmp(cx, lib::llvm::IntULT, a, b);\n-    return Select(cx, cond, b, a);\n-}\n-\n-pub fn umin(cx: @mut Block, a: ValueRef, b: ValueRef) -> ValueRef {\n-    let _icx = push_ctxt(\"umin\");\n-    let cond = ICmp(cx, lib::llvm::IntULT, a, b);\n-    return Select(cx, cond, a, b);\n-}\n-\n-// Given a pointer p, returns a pointer sz(p) (i.e., inc'd by sz bytes).\n-// The type of the returned pointer is always i8*.  If you care about the\n-// return type, use bump_ptr().\n-pub fn ptr_offs(bcx: @mut Block, base: ValueRef, sz: ValueRef) -> ValueRef {\n-    let _icx = push_ctxt(\"ptr_offs\");\n-    let raw = PointerCast(bcx, base, Type::i8p());\n-    InBoundsGEP(bcx, raw, [sz])\n-}\n-\n-// Increment a pointer by a given amount and then cast it to be a pointer\n-// to a given type.\n-pub fn bump_ptr(bcx: @mut Block, t: ty::t, base: ValueRef, sz: ValueRef) ->\n-   ValueRef {\n-    let _icx = push_ctxt(\"bump_ptr\");\n-    let ccx = bcx.ccx();\n-    let bumped = ptr_offs(bcx, base, sz);\n-    let typ = type_of(ccx, t).ptr_to();\n-    PointerCast(bcx, bumped, typ)\n-}\n \n // Returns a pointer to the body for the box. The box may be an opaque\n // box. The result will be casted to the type of body_t, if it is statically\n@@ -434,10 +403,6 @@ pub fn malloc_general(bcx: @mut Block, t: ty::t, heap: heap) -> MallocResult {\n     assert!(heap != heap_exchange);\n     malloc_general_dyn(bcx, t, heap, llsize_of(bcx.ccx(), ty))\n }\n-pub fn malloc_boxed(bcx: @mut Block, t: ty::t)\n-    -> MallocResult {\n-    malloc_general(bcx, t, heap_managed)\n-}\n \n pub fn heap_for_unique(bcx: @mut Block, t: ty::t) -> heap {\n     if ty::type_contents(bcx.tcx(), t).contains_managed() {"}]}