{"sha": "f1473b6c00cc006771758434ea0e6f21ca0c12a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNDczYjZjMDBjYzAwNjc3MTc1ODQzNGVhMGU2ZjIxY2EwYzEyYTI=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-09-19T15:15:48Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-09-19T15:15:48Z"}, "message": "Rollup merge of #28443 - GuillaumeGomez:error_codes, r=Manishearth\n\nr? @Manishearth", "tree": {"sha": "f2e6f49f305fc71679cd160dd2c9fab18af6af83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2e6f49f305fc71679cd160dd2c9fab18af6af83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1473b6c00cc006771758434ea0e6f21ca0c12a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1473b6c00cc006771758434ea0e6f21ca0c12a2", "html_url": "https://github.com/rust-lang/rust/commit/f1473b6c00cc006771758434ea0e6f21ca0c12a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1473b6c00cc006771758434ea0e6f21ca0c12a2/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d40790389829b4b000c89ef7e0a104fc65df8f9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d40790389829b4b000c89ef7e0a104fc65df8f9c", "html_url": "https://github.com/rust-lang/rust/commit/d40790389829b4b000c89ef7e0a104fc65df8f9c"}, {"sha": "1adcfb8c13a2c224ae78178350de2e0fba8291c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1adcfb8c13a2c224ae78178350de2e0fba8291c4", "html_url": "https://github.com/rust-lang/rust/commit/1adcfb8c13a2c224ae78178350de2e0fba8291c4"}], "stats": {"total": 198, "additions": 133, "deletions": 65}, "files": [{"sha": "43e9cdd73c43349237e2d884fa80b0e9fe3b4206", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 34, "deletions": 40, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f1473b6c00cc006771758434ea0e6f21ca0c12a2/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1473b6c00cc006771758434ea0e6f21ca0c12a2/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=f1473b6c00cc006771758434ea0e6f21ca0c12a2", "patch": "@@ -464,40 +464,36 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n \n             match (new_loan.kind, old_loan.kind) {\n                 (ty::MutBorrow, ty::MutBorrow) => {\n-                    self.bccx.span_err(\n-                        new_loan.span,\n-                        &format!(\"cannot borrow `{}`{} as mutable \\\n-                                more than once at a time\",\n-                                nl, new_loan_msg))\n+                    span_err!(self.bccx, new_loan.span, E0499,\n+                              \"cannot borrow `{}`{} as mutable \\\n+                               more than once at a time\",\n+                              nl, new_loan_msg);\n                 }\n \n                 (ty::UniqueImmBorrow, _) => {\n-                    self.bccx.span_err(\n-                        new_loan.span,\n-                        &format!(\"closure requires unique access to `{}` \\\n-                                but {} is already borrowed{}\",\n-                                nl, ol_pronoun, old_loan_msg));\n+                    span_err!(self.bccx, new_loan.span, E0500,\n+                              \"closure requires unique access to `{}` \\\n+                               but {} is already borrowed{}\",\n+                              nl, ol_pronoun, old_loan_msg);\n                 }\n \n                 (_, ty::UniqueImmBorrow) => {\n-                    self.bccx.span_err(\n-                        new_loan.span,\n-                        &format!(\"cannot borrow `{}`{} as {} because \\\n-                                previous closure requires unique access\",\n-                                nl, new_loan_msg, new_loan.kind.to_user_str()));\n+                    span_err!(self.bccx, new_loan.span, E0501,\n+                              \"cannot borrow `{}`{} as {} because \\\n+                               previous closure requires unique access\",\n+                              nl, new_loan_msg, new_loan.kind.to_user_str());\n                 }\n \n                 (_, _) => {\n-                    self.bccx.span_err(\n-                        new_loan.span,\n-                        &format!(\"cannot borrow `{}`{} as {} because \\\n-                                {} is also borrowed as {}{}\",\n-                                nl,\n-                                new_loan_msg,\n-                                new_loan.kind.to_user_str(),\n-                                ol_pronoun,\n-                                old_loan.kind.to_user_str(),\n-                                old_loan_msg));\n+                    span_err!(self.bccx, new_loan.span, E0502,\n+                              \"cannot borrow `{}`{} as {} because \\\n+                               {} is also borrowed as {}{}\",\n+                              nl,\n+                              new_loan_msg,\n+                              new_loan.kind.to_user_str(),\n+                              ol_pronoun,\n+                              old_loan.kind.to_user_str(),\n+                              old_loan_msg);\n                 }\n             }\n \n@@ -617,11 +613,9 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n         match self.analyze_restrictions_on_use(id, copy_path, ty::ImmBorrow) {\n             UseOk => { }\n             UseWhileBorrowed(loan_path, loan_span) => {\n-                self.bccx.span_err(\n-                    span,\n-                    &format!(\"cannot use `{}` because it was mutably borrowed\",\n-                            &self.bccx.loan_path_to_string(copy_path))\n-                    );\n+                span_err!(self.bccx, span, E0503,\n+                          \"cannot use `{}` because it was mutably borrowed\",\n+                          &self.bccx.loan_path_to_string(copy_path));\n                 self.bccx.span_note(\n                     loan_span,\n                     &format!(\"borrow of `{}` occurs here\",\n@@ -642,18 +636,19 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n         match self.analyze_restrictions_on_use(id, move_path, ty::MutBorrow) {\n             UseOk => { }\n             UseWhileBorrowed(loan_path, loan_span) => {\n-                let err_message = match move_kind {\n+                match move_kind {\n                     move_data::Captured =>\n-                        format!(\"cannot move `{}` into closure because it is borrowed\",\n-                                &self.bccx.loan_path_to_string(move_path)),\n+                        span_err!(self.bccx, span, E0504,\n+                                  \"cannot move `{}` into closure because it is borrowed\",\n+                                  &self.bccx.loan_path_to_string(move_path)),\n                     move_data::Declared |\n                     move_data::MoveExpr |\n                     move_data::MovePat =>\n-                        format!(\"cannot move out of `{}` because it is borrowed\",\n-                                &self.bccx.loan_path_to_string(move_path))\n+                        span_err!(self.bccx, span, E0505,\n+                                  \"cannot move out of `{}` because it is borrowed\",\n+                                  &self.bccx.loan_path_to_string(move_path))\n                 };\n \n-                self.bccx.span_err(span, &err_message[..]);\n                 self.bccx.span_note(\n                     loan_span,\n                     &format!(\"borrow of `{}` occurs here\",\n@@ -820,10 +815,9 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                                    span: Span,\n                                    loan_path: &LoanPath<'tcx>,\n                                    loan: &Loan) {\n-        self.bccx.span_err(\n-            span,\n-            &format!(\"cannot assign to `{}` because it is borrowed\",\n-                    self.bccx.loan_path_to_string(loan_path)));\n+        span_err!(self.bccx, span, E0506,\n+                  \"cannot assign to `{}` because it is borrowed\",\n+                  self.bccx.loan_path_to_string(loan_path));\n         self.bccx.span_note(\n             loan.span,\n             &format!(\"borrow of `{}` occurs here\","}, {"sha": "bbcf51933422ea41b9036e6a5b8215f1c7f2abd6", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f1473b6c00cc006771758434ea0e6f21ca0c12a2/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1473b6c00cc006771758434ea0e6f21ca0c12a2/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=f1473b6c00cc006771758434ea0e6f21ca0c12a2", "patch": "@@ -119,18 +119,18 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n         mc::cat_deref(_, _, mc::Implicit(..)) |\n         mc::cat_deref(_, _, mc::UnsafePtr(..)) |\n         mc::cat_static_item => {\n-            bccx.span_err(move_from.span,\n-                          &format!(\"cannot move out of {}\",\n-                                  move_from.descriptive_string(bccx.tcx)));\n+            span_err!(bccx, move_from.span, E0507,\n+                      \"cannot move out of {}\",\n+                      move_from.descriptive_string(bccx.tcx));\n         }\n \n         mc::cat_interior(ref b, mc::InteriorElement(Kind::Index, _)) => {\n             let expr = bccx.tcx.map.expect_expr(move_from.id);\n             if let hir::ExprIndex(..) = expr.node {\n-                bccx.span_err(move_from.span,\n-                              &format!(\"cannot move out of type `{}`, \\\n-                                        a non-copy fixed-size array\",\n-                                       b.ty));\n+                span_err!(bccx, move_from.span, E0508,\n+                          \"cannot move out of type `{}`, \\\n+                           a non-copy fixed-size array\",\n+                          b.ty);\n             }\n         }\n \n@@ -139,11 +139,10 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n             match b.ty.sty {\n                 ty::TyStruct(def, _) |\n                 ty::TyEnum(def, _) if def.has_dtor() => {\n-                    bccx.span_err(\n-                        move_from.span,\n-                        &format!(\"cannot move out of type `{}`, \\\n-                                 which defines the `Drop` trait\",\n-                                b.ty));\n+                    span_err!(bccx, move_from.span, E0509,\n+                              \"cannot move out of type `{}`, \\\n+                               which defines the `Drop` trait\",\n+                              b.ty);\n                 },\n                 _ => {\n                     bccx.span_bug(move_from.span, \"this path should not cause illegal move\")"}, {"sha": "4db7974f0944433e27d92fd636da71728acf1cb2", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1473b6c00cc006771758434ea0e6f21ca0c12a2/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1473b6c00cc006771758434ea0e6f21ca0c12a2/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=f1473b6c00cc006771758434ea0e6f21ca0c12a2", "patch": "@@ -803,6 +803,10 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         self.tcx.sess.span_err(s, m);\n     }\n \n+    pub fn span_err_with_code(&self, s: Span, msg: &str, code: &str) {\n+        self.tcx.sess.span_err_with_code(s, msg, code);\n+    }\n+\n     pub fn span_bug(&self, s: Span, m: &str) {\n         self.tcx.sess.span_bug(s, m);\n     }"}, {"sha": "a5b313e2dd67ee90098f893ae341c0939c7c85be", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f1473b6c00cc006771758434ea0e6f21ca0c12a2/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1473b6c00cc006771758434ea0e6f21ca0c12a2/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=f1473b6c00cc006771758434ea0e6f21ca0c12a2", "patch": "@@ -263,12 +263,50 @@ fn mutable() {\n You can read more about cell types in the API documentation:\n \n https://doc.rust-lang.org/std/cell/\n-\"##\n+\"##,\n+\n+E0499: r##\"\n+A variable was borrowed as mutable more than once. Erroneous code example:\n+\n+```\n+let mut i = 0;\n+let mut x = &mut i;\n+let mut a = &mut i;\n+// error: cannot borrow `i` as mutable more than once at a time\n+```\n+\n+Please note that in rust, you can either have many immutable references, or one\n+mutable reference. Take a look at\n+https://doc.rust-lang.org/stable/book/references-and-borrowing.html for more\n+information. Example:\n+\n+\n+```\n+let mut i = 0;\n+let mut x = &mut i; // ok!\n+\n+// or:\n+let mut i = 0;\n+let a = &i; // ok!\n+let b = &i; // still ok!\n+let c = &i; // still ok!\n+```\n+\"##,\n \n }\n \n register_diagnostics! {\n     E0385, // {} in an aliasable location\n     E0388, // {} in a static location\n-    E0389  // {} in a `&` reference\n+    E0389, // {} in a `&` reference\n+    E0500, // closure requires unique access to `..` but .. is already borrowed\n+    E0501, // cannot borrow `..`.. as .. because previous closure requires unique access\n+    E0502, // cannot borrow `..`.. as .. because .. is also borrowed as ...\n+    E0503, // cannot use `..` because it was mutably borrowed\n+    E0504, // cannot move `..` into closure because it is borrowed\n+    E0505, // cannot move out of `..` because it is borrowed\n+    E0506, // cannot assign to `..` because it is borrowed\n+    E0507, // cannot move out of ..\n+    E0508, // cannot move out of type `..`, a non-copy fixed-size array\n+    E0509, // cannot move out of type `..`, which defines the `Drop` trait\n }"}, {"sha": "dd7c3834e564a1dea6887213c656020dd4454b7e", "filename": "src/librustc_trans/diagnostics.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f1473b6c00cc006771758434ea0e6f21ca0c12a2/src%2Flibrustc_trans%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1473b6c00cc006771758434ea0e6f21ca0c12a2/src%2Flibrustc_trans%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdiagnostics.rs?ref=f1473b6c00cc006771758434ea0e6f21ca0c12a2", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(non_snake_case)]\n+\n+register_long_diagnostics! {\n+\n+}\n+\n+register_diagnostics! {\n+    E0510, // invalid use of `return_address` intrinsic: function does not use out pointer\n+    E0511, // invalid monomorphization of `{}` intrinsic\n+    E0512, // transmute called on types with potentially different sizes...\n+}"}, {"sha": "049d8fbe390a44fe6827f7a9975e743265e21466", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1473b6c00cc006771758434ea0e6f21ca0c12a2/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1473b6c00cc006771758434ea0e6f21ca0c12a2/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=f1473b6c00cc006771758434ea0e6f21ca0c12a2", "patch": "@@ -80,6 +80,8 @@ pub mod back {\n     pub mod msvc;\n }\n \n+pub mod diagnostics;\n+\n pub mod trans;\n pub mod save;\n "}, {"sha": "b43a4b3fc889d809c7364ab5b126aa08104f2299", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f1473b6c00cc006771758434ea0e6f21ca0c12a2/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1473b6c00cc006771758434ea0e6f21ca0c12a2/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=f1473b6c00cc006771758434ea0e6f21ca0c12a2", "patch": "@@ -44,6 +44,9 @@ use syntax::ast;\n use syntax::ptr::P;\n use syntax::parse::token;\n \n+use rustc::session::Session;\n+use syntax::codemap::Span;\n+\n use std::cmp::Ordering;\n \n pub fn get_simple_intrinsic(ccx: &CrateContext, item: &hir::ForeignItem) -> Option<ValueRef> {\n@@ -99,6 +102,10 @@ pub fn get_simple_intrinsic(ccx: &CrateContext, item: &hir::ForeignItem) -> Opti\n     Some(ccx.get_intrinsic(&name))\n }\n \n+pub fn span_transmute_size_error(a: &Session, b: Span, msg: &str) {\n+    span_err!(a, b, E0512, \"{}\", msg);\n+}\n+\n /// Performs late verification that intrinsics are used correctly. At present,\n /// the only intrinsic that needs such verification is `transmute`.\n pub fn check_intrinsics(ccx: &CrateContext) {\n@@ -127,8 +134,7 @@ pub fn check_intrinsics(ccx: &CrateContext) {\n             last_failing_id = Some(transmute_restriction.id);\n \n             if transmute_restriction.original_from != transmute_restriction.substituted_from {\n-                ccx.sess().span_err(\n-                    transmute_restriction.span,\n+                span_transmute_size_error(ccx.sess(), transmute_restriction.span,\n                     &format!(\"transmute called on types with potentially different sizes: \\\n                               {} (could be {} bit{}) to {} (could be {} bit{})\",\n                              transmute_restriction.original_from,\n@@ -138,8 +144,7 @@ pub fn check_intrinsics(ccx: &CrateContext) {\n                              to_type_size as usize,\n                              if to_type_size == 1 {\"\"} else {\"s\"}));\n             } else {\n-                ccx.sess().span_err(\n-                    transmute_restriction.span,\n+                span_transmute_size_error(ccx.sess(), transmute_restriction.span,\n                     &format!(\"transmute called on types with different sizes: \\\n                               {} ({} bit{}) to {} ({} bit{})\",\n                              transmute_restriction.original_from,\n@@ -798,9 +803,9 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n \n         (_, \"return_address\") => {\n             if !fcx.caller_expects_out_pointer {\n-                tcx.sess.span_err(call_info.span,\n-                                  \"invalid use of `return_address` intrinsic: function \\\n-                                   does not use out pointer\");\n+                span_err!(tcx.sess, call_info.span, E0510,\n+                          \"invalid use of `return_address` intrinsic: function \\\n+                           does not use out pointer\");\n                 C_null(Type::i8p(ccx))\n             } else {\n                 PointerCast(bcx, llvm::get_param(fcx.llfn, 0), Type::i8p(ccx))\n@@ -1439,6 +1444,10 @@ fn get_rust_try_fn<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,\n     return rust_try\n }\n \n+fn span_invalid_monomorphization_error(a: &Session, b: Span, c: &str) {\n+    span_err!(a, b, E0511, \"{}\", c);\n+}\n+\n fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n     (bcx: Block<'blk, 'tcx>,\n      name: &str,\n@@ -1457,10 +1466,11 @@ fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n             emit_error!($msg, )\n         };\n         ($msg: tt, $($fmt: tt)*) => {\n-            bcx.sess().span_err(call_info.span,\n-                                &format!(concat!(\"invalid monomorphization of `{}` intrinsic: \",\n-                                                 $msg),\n-                                         name, $($fmt)*));\n+            span_invalid_monomorphization_error(\n+                bcx.sess(), call_info.span,\n+                &format!(concat!(\"invalid monomorphization of `{}` intrinsic: \",\n+                                 $msg),\n+                         name, $($fmt)*));\n         }\n     }\n     macro_rules! require {"}]}