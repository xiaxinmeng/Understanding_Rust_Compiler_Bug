{"sha": "798974cae58639c174010fd4a6411dcdc860e404", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ODk3NGNhZTU4NjM5YzE3NDAxMGZkNGE2NDExZGNkYzg2MGU0MDQ=", "commit": {"author": {"name": "Oliver 'ker' Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-09T10:45:01Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-11T11:34:48Z"}, "message": "[breaking-change] don't glob export ast::KleeneOp variants", "tree": {"sha": "7ff0d0f55118586bae1937ff6d6526efd25dfc87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ff0d0f55118586bae1937ff6d6526efd25dfc87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/798974cae58639c174010fd4a6411dcdc860e404", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/798974cae58639c174010fd4a6411dcdc860e404", "html_url": "https://github.com/rust-lang/rust/commit/798974cae58639c174010fd4a6411dcdc860e404", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/798974cae58639c174010fd4a6411dcdc860e404/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "019614f03d106324ab50a37746b556c41e66c099", "url": "https://api.github.com/repos/rust-lang/rust/commits/019614f03d106324ab50a37746b556c41e66c099", "html_url": "https://github.com/rust-lang/rust/commit/019614f03d106324ab50a37746b556c41e66c099"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "6814f41f017c9af7f0549c8c83116516e6aba1a4", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/798974cae58639c174010fd4a6411dcdc860e404/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798974cae58639c174010fd4a6411dcdc860e404/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=798974cae58639c174010fd4a6411dcdc860e404", "patch": "@@ -10,7 +10,6 @@\n \n // The Rust abstract syntax tree.\n \n-pub use self::KleeneOp::*;\n pub use self::MacStmtStyle::*;\n pub use self::MetaItem_::*;\n pub use self::Mutability::*;"}, {"sha": "8c86205fed498f4f334b3057db91e81b2a82ab7e", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/798974cae58639c174010fd4a6411dcdc860e404/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798974cae58639c174010fd4a6411dcdc860e404/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=798974cae58639c174010fd4a6411dcdc860e404", "patch": "@@ -542,11 +542,6 @@ fn mk_tt_path(cx: &ExtCtxt, sp: Span, name: &str) -> P<ast::Expr> {\n     cx.expr_path(cx.path_global(sp, idents))\n }\n \n-fn mk_ast_path(cx: &ExtCtxt, sp: Span, name: &str) -> P<ast::Expr> {\n-    let idents = vec!(id_ext(\"syntax\"), id_ext(\"ast\"), id_ext(name));\n-    cx.expr_path(cx.path_global(sp, idents))\n-}\n-\n fn mk_token_path(cx: &ExtCtxt, sp: Span, name: &str) -> P<ast::Expr> {\n     let idents = vec!(id_ext(\"syntax\"), id_ext(\"parse\"), id_ext(\"token\"), id_ext(name));\n     cx.expr_path(cx.path_global(sp, idents))\n@@ -779,9 +774,16 @@ fn statements_mk_tt(cx: &ExtCtxt, tt: &TokenTree, matcher: bool) -> Vec<P<ast::S\n                 None => cx.expr_none(sp),\n             };\n             let e_op = match seq.op {\n-                ast::ZeroOrMore => mk_ast_path(cx, sp, \"ZeroOrMore\"),\n-                ast::OneOrMore => mk_ast_path(cx, sp, \"OneOrMore\"),\n+                ast::KleeneOp::ZeroOrMore => \"ZeroOrMore\",\n+                ast::KleeneOp::OneOrMore => \"OneOrMore\",\n             };\n+            let e_op_idents = vec![\n+                id_ext(\"syntax\"),\n+                id_ext(\"ast\"),\n+                id_ext(\"KleeneOp\"),\n+                id_ext(e_op),\n+            ];\n+            let e_op = cx.expr_path(cx.path_global(sp, e_op_idents));\n             let fields = vec![cx.field_imm(sp, id_ext(\"tts\"), e_tts),\n                               cx.field_imm(sp, id_ext(\"separator\"), e_separator),\n                               cx.field_imm(sp, id_ext(\"op\"), e_op),"}, {"sha": "9c8ae9460e482b5c3019de85a96065706c47e160", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798974cae58639c174010fd4a6411dcdc860e404/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798974cae58639c174010fd4a6411dcdc860e404/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=798974cae58639c174010fd4a6411dcdc860e404", "patch": "@@ -374,7 +374,7 @@ pub fn parse(sess: &ParseSess,\n                 match ei.top_elts.get_tt(idx) {\n                     /* need to descend into sequence */\n                     TokenTree::Sequence(sp, seq) => {\n-                        if seq.op == ast::ZeroOrMore {\n+                        if seq.op == ast::KleeneOp::ZeroOrMore {\n                             let mut new_ei = ei.clone();\n                             new_ei.match_cur += seq.num_captures;\n                             new_ei.idx += 1;"}, {"sha": "1e9178a55c5add8512270709951a8451e33961a7", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/798974cae58639c174010fd4a6411dcdc860e404/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798974cae58639c174010fd4a6411dcdc860e404/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=798974cae58639c174010fd4a6411dcdc860e404", "patch": "@@ -248,7 +248,7 @@ pub fn compile<'cx>(cx: &'cx mut ExtCtxt,\n                            TokenTree::Token(DUMMY_SP, token::FatArrow),\n                            TokenTree::Token(DUMMY_SP, match_rhs_tok)],\n                        separator: Some(token::Semi),\n-                       op: ast::OneOrMore,\n+                       op: ast::KleeneOp::OneOrMore,\n                        num_captures: 2\n                    })),\n         //to phase into semicolon-termination instead of\n@@ -257,7 +257,7 @@ pub fn compile<'cx>(cx: &'cx mut ExtCtxt,\n                    Rc::new(ast::SequenceRepetition {\n                        tts: vec![TokenTree::Token(DUMMY_SP, token::Semi)],\n                        separator: None,\n-                       op: ast::ZeroOrMore,\n+                       op: ast::KleeneOp::ZeroOrMore,\n                        num_captures: 0\n                    })));\n "}, {"sha": "8d857fc8e4899087414d9cbfde75593cb7eb65da", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/798974cae58639c174010fd4a6411dcdc860e404/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798974cae58639c174010fd4a6411dcdc860e404/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=798974cae58639c174010fd4a6411dcdc860e404", "patch": "@@ -81,7 +81,7 @@ pub fn new_tt_reader_with_doc_flag<'a>(sp_diag: &'a Handler,\n             forest: TokenTree::Sequence(DUMMY_SP, Rc::new(ast::SequenceRepetition {\n                 tts: src,\n                 // doesn't matter. This merely holds the root unzipping.\n-                separator: None, op: ast::ZeroOrMore, num_captures: 0\n+                separator: None, op: ast::KleeneOp::ZeroOrMore, num_captures: 0\n             })),\n             idx: 0,\n             dotdotdoted: false,\n@@ -257,7 +257,7 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n                     }\n                     LisConstraint(len, _) => {\n                         if len == 0 {\n-                            if seq.op == ast::OneOrMore {\n+                            if seq.op == ast::KleeneOp::OneOrMore {\n                                 // FIXME #2887 blame invoker\n                                 panic!(r.sp_diag.span_fatal(sp.clone(),\n                                                      \"this must repeat at least once\"));"}, {"sha": "5121f6e1561828ab296c86dc7f48ba29082ecc48", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/798974cae58639c174010fd4a6411dcdc860e404/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798974cae58639c174010fd4a6411dcdc860e404/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=798974cae58639c174010fd4a6411dcdc860e404", "patch": "@@ -2599,11 +2599,11 @@ impl<'a> Parser<'a> {\n             match parser.token {\n                 token::BinOp(token::Star) => {\n                     parser.bump();\n-                    Ok(Some(ast::ZeroOrMore))\n+                    Ok(Some(ast::KleeneOp::ZeroOrMore))\n                 },\n                 token::BinOp(token::Plus) => {\n                     parser.bump();\n-                    Ok(Some(ast::OneOrMore))\n+                    Ok(Some(ast::KleeneOp::OneOrMore))\n                 },\n                 _ => Ok(None)\n             }"}, {"sha": "0a73ccd6d126b57ebbc835bfd8cf2ecbce7b978a", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/798974cae58639c174010fd4a6411dcdc860e404/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798974cae58639c174010fd4a6411dcdc860e404/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=798974cae58639c174010fd4a6411dcdc860e404", "patch": "@@ -1489,8 +1489,8 @@ impl<'a> State<'a> {\n                     None => {},\n                 }\n                 match seq.op {\n-                    ast::ZeroOrMore => word(&mut self.s, \"*\"),\n-                    ast::OneOrMore => word(&mut self.s, \"+\"),\n+                    ast::KleeneOp::ZeroOrMore => word(&mut self.s, \"*\"),\n+                    ast::KleeneOp::OneOrMore => word(&mut self.s, \"+\"),\n                 }\n             }\n         }"}]}