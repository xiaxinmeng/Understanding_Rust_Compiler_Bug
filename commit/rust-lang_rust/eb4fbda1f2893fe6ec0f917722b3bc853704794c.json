{"sha": "eb4fbda1f2893fe6ec0f917722b3bc853704794c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNGZiZGExZjI4OTNmZTZlYzBmOTE3NzIyYjNiYzg1MzcwNDc5NGM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-25T16:24:48Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-25T16:24:48Z"}, "message": "Simplify save-analysis JSON dumper interface", "tree": {"sha": "1bcd459d70411cc1d5091a40a2c1d874f09f1740", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bcd459d70411cc1d5091a40a2c1d874f09f1740"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb4fbda1f2893fe6ec0f917722b3bc853704794c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb4fbda1f2893fe6ec0f917722b3bc853704794c", "html_url": "https://github.com/rust-lang/rust/commit/eb4fbda1f2893fe6ec0f917722b3bc853704794c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb4fbda1f2893fe6ec0f917722b3bc853704794c/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eedf6ce4ef54bb03818ab21d714f1b9f13a6b31c", "url": "https://api.github.com/repos/rust-lang/rust/commits/eedf6ce4ef54bb03818ab21d714f1b9f13a6b31c", "html_url": "https://github.com/rust-lang/rust/commit/eedf6ce4ef54bb03818ab21d714f1b9f13a6b31c"}], "stats": {"total": 101, "additions": 29, "deletions": 72}, "files": [{"sha": "fed0764ba9aff5193d91942a22bbcc8dac189e07", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eb4fbda1f2893fe6ec0f917722b3bc853704794c/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4fbda1f2893fe6ec0f917722b3bc853704794c/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=eb4fbda1f2893fe6ec0f917722b3bc853704794c", "patch": "@@ -38,7 +38,7 @@ use syntax_pos::*;\n \n use crate::{escape, generated_code, id_from_def_id, id_from_node_id, lower_attributes,\n             PathCollector, SaveContext};\n-use crate::json_dumper::{Access, DumpOutput, JsonDumper};\n+use crate::json_dumper::{Access, JsonDumper};\n use crate::span_utils::SpanUtils;\n use crate::sig;\n \n@@ -75,10 +75,10 @@ macro_rules! access_from_vis {\n     };\n }\n \n-pub struct DumpVisitor<'l, 'tcx, 'll, O: DumpOutput> {\n+pub struct DumpVisitor<'l, 'tcx, 'll> {\n     save_ctxt: SaveContext<'l, 'tcx>,\n     tcx: TyCtxt<'tcx>,\n-    dumper: &'ll mut JsonDumper<O>,\n+    dumper: &'ll mut JsonDumper,\n \n     span: SpanUtils<'l>,\n \n@@ -92,11 +92,11 @@ pub struct DumpVisitor<'l, 'tcx, 'll, O: DumpOutput> {\n     // macro_calls: FxHashSet<Span>,\n }\n \n-impl<'l, 'tcx, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n+impl<'l, 'tcx, 'll> DumpVisitor<'l, 'tcx, 'll> {\n     pub fn new(\n         save_ctxt: SaveContext<'l, 'tcx>,\n-        dumper: &'ll mut JsonDumper<O>,\n-    ) -> DumpVisitor<'l, 'tcx, 'll, O> {\n+        dumper: &'ll mut JsonDumper,\n+    ) -> DumpVisitor<'l, 'tcx, 'll> {\n         let span_utils = SpanUtils::new(&save_ctxt.tcx.sess);\n         DumpVisitor {\n             tcx: save_ctxt.tcx,\n@@ -111,7 +111,7 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n \n     fn nest_scope<F>(&mut self, scope_id: NodeId, f: F)\n     where\n-        F: FnOnce(&mut DumpVisitor<'l, 'tcx, 'll, O>),\n+        F: FnOnce(&mut DumpVisitor<'l, 'tcx, 'll>),\n     {\n         let parent_scope = self.cur_scope;\n         self.cur_scope = scope_id;\n@@ -121,7 +121,7 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n \n     fn nest_tables<F>(&mut self, item_id: NodeId, f: F)\n     where\n-        F: FnOnce(&mut DumpVisitor<'l, 'tcx, 'll, O>),\n+        F: FnOnce(&mut DumpVisitor<'l, 'tcx, 'll>),\n     {\n         let item_def_id = self.tcx.hir().local_def_id_from_node_id(item_id);\n         if self.tcx.has_typeck_tables(item_def_id) {\n@@ -1311,7 +1311,7 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n     }\n }\n \n-impl<'l, 'tcx, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll, O> {\n+impl<'l, 'tcx, 'll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll> {\n     fn visit_mod(&mut self, m: &'l ast::Mod, span: Span, attrs: &[ast::Attribute], id: NodeId) {\n         // Since we handle explicit modules ourselves in visit_item, this should\n         // only get called for the root module of a crate."}, {"sha": "c1437a27e5d2263f9bf915edba9cf4bdd0a96404", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 6, "deletions": 53, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/eb4fbda1f2893fe6ec0f917722b3bc853704794c/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4fbda1f2893fe6ec0f917722b3bc853704794c/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=eb4fbda1f2893fe6ec0f917722b3bc853704794c", "patch": "@@ -1,80 +1,33 @@\n-use std::io::Write;\n-\n use rls_data::config::Config;\n use rls_data::{self, Analysis, CompilationOptions, CratePreludeData, Def, DefKind, Impl, Import,\n                MacroRef, Ref, RefKind, Relation};\n use rls_span::{Column, Row};\n \n-use log::error;\n-\n #[derive(Debug)]\n pub struct Access {\n     pub reachable: bool,\n     pub public: bool,\n }\n \n-pub struct JsonDumper<O: DumpOutput> {\n+pub struct JsonDumper {\n     result: Analysis,\n     config: Config,\n-    output: O,\n-}\n-\n-pub trait DumpOutput {\n-    fn dump(&mut self, result: &Analysis);\n-}\n-\n-pub struct WriteOutput<'b, W: Write> {\n-    output: &'b mut W,\n-}\n-\n-impl<'b, W: Write> DumpOutput for WriteOutput<'b, W> {\n-    fn dump(&mut self, result: &Analysis) {\n-        if let Err(e) = serde_json::to_writer(self.output.by_ref(), result) {\n-            error!(\"Can't serialize save-analysis: {:?}\", e);\n-        }\n-    }\n-}\n-\n-pub struct CallbackOutput<'b> {\n-    callback: &'b mut dyn FnMut(&Analysis),\n }\n \n-impl<'b> DumpOutput for CallbackOutput<'b> {\n-    fn dump(&mut self, result: &Analysis) {\n-        (self.callback)(result)\n-    }\n-}\n-\n-impl<'b, W: Write> JsonDumper<WriteOutput<'b, W>> {\n-    pub fn new(writer: &'b mut W, config: Config) -> JsonDumper<WriteOutput<'b, W>> {\n+impl JsonDumper {\n+    pub fn new(config: Config) -> JsonDumper {\n         JsonDumper {\n-            output: WriteOutput { output: writer },\n             config: config.clone(),\n             result: Analysis::new(config),\n         }\n     }\n-}\n-\n-impl<'b> JsonDumper<CallbackOutput<'b>> {\n-    pub fn with_callback(\n-        callback: &'b mut dyn FnMut(&Analysis),\n-        config: Config,\n-    ) -> JsonDumper<CallbackOutput<'b>> {\n-        JsonDumper {\n-            output: CallbackOutput { callback },\n-            config: config.clone(),\n-            result: Analysis::new(config),\n-        }\n-    }\n-}\n \n-impl<O: DumpOutput> Drop for JsonDumper<O> {\n-    fn drop(&mut self) {\n-        self.output.dump(&self.result);\n+    pub fn to_output(self, f: impl FnOnce(&Analysis)) {\n+        f(&self.result)\n     }\n }\n \n-impl<'b, O: DumpOutput + 'b> JsonDumper<O> {\n+impl JsonDumper {\n     pub fn crate_prelude(&mut self, data: CratePreludeData) {\n         self.result.prelude = Some(data)\n     }"}, {"sha": "edaf4c7df67b68ff0e934c975b6ff079de215120", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eb4fbda1f2893fe6ec0f917722b3bc853704794c/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4fbda1f2893fe6ec0f917722b3bc853704794c/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=eb4fbda1f2893fe6ec0f917722b3bc853704794c", "patch": "@@ -1075,17 +1075,19 @@ impl<'a> SaveHandler for DumpHandler<'a> {\n         input: &'l Input,\n     ) {\n         let sess = &save_ctxt.tcx.sess;\n-        let file_name = {\n-            let (mut output, file_name) = self.output_file(&save_ctxt);\n-            let mut dumper = JsonDumper::new(&mut output, save_ctxt.config.clone());\n-            let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n+        let (output, file_name) = self.output_file(&save_ctxt);\n+        let mut dumper = JsonDumper::new(save_ctxt.config.clone());\n+        let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n \n-            visitor.dump_crate_info(cratename, krate);\n-            visitor.dump_compilation_options(input, cratename);\n-            visit::walk_crate(&mut visitor, krate);\n+        visitor.dump_crate_info(cratename, krate);\n+        visitor.dump_compilation_options(input, cratename);\n+        visit::walk_crate(&mut visitor, krate);\n \n-            file_name\n-        };\n+        dumper.to_output(|analysis| {\n+            if let Err(e) = serde_json::to_writer(output, analysis) {\n+                error!(\"Can't serialize save-analysis: {:?}\", e);\n+            }\n+        });\n \n         if sess.opts.debugging_opts.emit_artifact_notifications {\n             sess.parse_sess.span_diagnostic\n@@ -1112,12 +1114,14 @@ impl<'b> SaveHandler for CallbackHandler<'b> {\n         // using the JsonDumper to collect the save-analysis results, but not\n         // actually to dump them to a file. This is all a bit convoluted and\n         // there is certainly a simpler design here trying to get out (FIXME).\n-        let mut dumper = JsonDumper::with_callback(self.callback, save_ctxt.config.clone());\n+        let mut dumper = JsonDumper::new(save_ctxt.config.clone());\n         let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n \n         visitor.dump_crate_info(cratename, krate);\n         visitor.dump_compilation_options(input, cratename);\n         visit::walk_crate(&mut visitor, krate);\n+\n+        dumper.to_output(|a| (self.callback)(a))\n     }\n }\n "}]}