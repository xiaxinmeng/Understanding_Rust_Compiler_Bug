{"sha": "4dc7b585a2d7784e5c8a8e390c77441df4aea29b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYzdiNTg1YTJkNzc4NGU1YzhhOGUzOTBjNzc0NDFkZjRhZWEyOWI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-08-30T04:00:48Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-09-01T02:55:27Z"}, "message": "save-analysis: add parent info to api dumps\n\nThe parent id is used for constructing rustdoc URLs by clients", "tree": {"sha": "fd16d562af0e8eb838a318ad0d3d74c15e834d18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd16d562af0e8eb838a318ad0d3d74c15e834d18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dc7b585a2d7784e5c8a8e390c77441df4aea29b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dc7b585a2d7784e5c8a8e390c77441df4aea29b", "html_url": "https://github.com/rust-lang/rust/commit/4dc7b585a2d7784e5c8a8e390c77441df4aea29b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dc7b585a2d7784e5c8a8e390c77441df4aea29b/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e4306c6dfa7a8dd43a7ee9bbc531f4b14b03aec", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e4306c6dfa7a8dd43a7ee9bbc531f4b14b03aec", "html_url": "https://github.com/rust-lang/rust/commit/4e4306c6dfa7a8dd43a7ee9bbc531f4b14b03aec"}], "stats": {"total": 183, "additions": 113, "deletions": 70}, "files": [{"sha": "df1378f9e0d0a1e1953c18d29a1ffc2681901664", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4dc7b585a2d7784e5c8a8e390c77441df4aea29b/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc7b585a2d7784e5c8a8e390c77441df4aea29b/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=4dc7b585a2d7784e5c8a8e390c77441df4aea29b", "patch": "@@ -248,7 +248,8 @@ fn keep_hygiene_data(sess: &Session) -> bool {\n fn keep_ast(sess: &Session) -> bool {\n     sess.opts.debugging_opts.keep_ast ||\n     sess.opts.debugging_opts.save_analysis ||\n-    sess.opts.debugging_opts.save_analysis_csv\n+    sess.opts.debugging_opts.save_analysis_csv ||\n+    sess.opts.debugging_opts.save_analysis_api\n }\n \n /// The name used for source code that doesn't originate in a file"}, {"sha": "a58cce0745f304c5a3b37cc1b12635944c723e59", "filename": "src/librustc_save_analysis/data.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4dc7b585a2d7784e5c8a8e390c77441df4aea29b/src%2Flibrustc_save_analysis%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc7b585a2d7784e5c8a8e390c77441df4aea29b/src%2Flibrustc_save_analysis%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdata.rs?ref=4dc7b585a2d7784e5c8a8e390c77441df4aea29b", "patch": "@@ -166,6 +166,7 @@ pub struct FunctionData {\n     pub scope: NodeId,\n     pub value: String,\n     pub visibility: Visibility,\n+    pub parent: Option<NodeId>,\n }\n \n /// Data about a function call.\n@@ -292,7 +293,8 @@ pub struct StructVariantData {\n     pub qualname: String,\n     pub type_value: String,\n     pub value: String,\n-    pub scope: NodeId\n+    pub scope: NodeId,\n+    pub parent: Option<NodeId>,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -315,7 +317,8 @@ pub struct TupleVariantData {\n     pub qualname: String,\n     pub type_value: String,\n     pub value: String,\n-    pub scope: NodeId\n+    pub scope: NodeId,\n+    pub parent: Option<NodeId>,\n }\n \n /// Data for a typedef.\n@@ -327,6 +330,7 @@ pub struct TypeDefData {\n     pub qualname: String,\n     pub value: String,\n     pub visibility: Visibility,\n+    pub parent: Option<NodeId>,\n }\n \n /// Data for a reference to a type or trait.\n@@ -366,6 +370,7 @@ pub struct VariableData {\n     pub qualname: String,\n     pub span: Span,\n     pub scope: NodeId,\n+    pub parent: Option<NodeId>,\n     pub value: String,\n     pub type_value: String,\n     pub visibility: Visibility,"}, {"sha": "c4eba4171de048c4b53912b045470b2e6d5cf873", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 71, "deletions": 60, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/4dc7b585a2d7784e5c8a8e390c77441df4aea29b/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc7b585a2d7784e5c8a8e390c77441df4aea29b/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=4dc7b585a2d7784e5c8a8e390c77441df4aea29b", "patch": "@@ -365,6 +365,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                         type_value: typ,\n                         value: String::new(),\n                         scope: 0,\n+                        parent: None,\n                         visibility: Visibility::Inherited,\n                     }.lower(self.tcx));\n                 }\n@@ -488,6 +489,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     qualname: qualname,\n                     value: String::new(),\n                     visibility: Visibility::Inherited,\n+                    parent: None,\n                 }.lower(self.tcx));\n             }\n         }\n@@ -531,13 +533,14 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n         self.visit_expr(expr);\n     }\n \n-    fn process_const(&mut self,\n-                     id: ast::NodeId,\n-                     name: ast::Name,\n-                     span: Span,\n-                     typ: &ast::Ty,\n-                     expr: &ast::Expr,\n-                     vis: Visibility) {\n+    fn process_assoc_const(&mut self,\n+                           id: ast::NodeId,\n+                           name: ast::Name,\n+                           span: Span,\n+                           typ: &ast::Ty,\n+                           expr: &ast::Expr,\n+                           parent_id: NodeId,\n+                           vis: Visibility) {\n         let qualname = format!(\"::{}\", self.tcx.node_path_str(id));\n \n         let sub_span = self.span.sub_span_after_keyword(span, keywords::Const);\n@@ -552,6 +555,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 value: self.span.snippet(expr.span),\n                 type_value: ty_to_string(&typ),\n                 scope: self.cur_scope,\n+                parent: Some(parent_id),\n                 visibility: vis,\n             }.lower(self.tcx));\n         }\n@@ -646,7 +650,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                             qualname: qualname,\n                             type_value: enum_data.qualname.clone(),\n                             value: val,\n-                            scope: enum_data.scope\n+                            scope: enum_data.scope,\n+                            parent: Some(item.id),\n                         }.lower(self.tcx));\n                     }\n                 }\n@@ -669,7 +674,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                             qualname: qualname,\n                             type_value: enum_data.qualname.clone(),\n                             value: val,\n-                            scope: enum_data.scope\n+                            scope: enum_data.scope,\n+                            parent: Some(item.id),\n                         }.lower(self.tcx));\n                     }\n                 }\n@@ -722,7 +728,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n         }\n         self.process_generic_params(type_parameters, item.span, \"\", item.id);\n         for impl_item in impl_items {\n-            self.visit_impl_item(impl_item);\n+            self.process_impl_item(impl_item, item.id);\n         }\n     }\n \n@@ -792,7 +798,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n         // walk generics and methods\n         self.process_generic_params(generics, item.span, &qualname, item.id);\n         for method in methods {\n-            self.visit_trait_item(method)\n+            self.process_trait_item(method, item.id)\n         }\n     }\n \n@@ -998,6 +1004,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     value: value,\n                     type_value: typ,\n                     scope: 0,\n+                    parent: None,\n                     visibility: Visibility::Inherited,\n                 }.lower(self.tcx));\n             }\n@@ -1046,6 +1053,57 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n             }\n         }\n     }\n+\n+    fn process_trait_item(&mut self, trait_item: &ast::TraitItem, trait_id: NodeId) {\n+        self.process_macro_use(trait_item.span, trait_item.id);\n+        match trait_item.node {\n+            ast::TraitItemKind::Const(ref ty, Some(ref expr)) => {\n+                self.process_assoc_const(trait_item.id,\n+                                         trait_item.ident.name,\n+                                         trait_item.span,\n+                                         &ty,\n+                                         &expr,\n+                                         trait_id,\n+                                         Visibility::Public);\n+            }\n+            ast::TraitItemKind::Method(ref sig, ref body) => {\n+                self.process_method(sig,\n+                                    body.as_ref().map(|x| &**x),\n+                                    trait_item.id,\n+                                    trait_item.ident.name,\n+                                    Visibility::Public,\n+                                    trait_item.span);\n+            }\n+            ast::TraitItemKind::Const(_, None) |\n+            ast::TraitItemKind::Type(..) |\n+            ast::TraitItemKind::Macro(_) => {}\n+        }\n+    }\n+\n+    fn process_impl_item(&mut self, impl_item: &ast::ImplItem, impl_id: NodeId) {\n+        self.process_macro_use(impl_item.span, impl_item.id);\n+        match impl_item.node {\n+            ast::ImplItemKind::Const(ref ty, ref expr) => {\n+                self.process_assoc_const(impl_item.id,\n+                                         impl_item.ident.name,\n+                                         impl_item.span,\n+                                         &ty,\n+                                         &expr,\n+                                         impl_id,\n+                                         From::from(&impl_item.vis));\n+            }\n+            ast::ImplItemKind::Method(ref sig, ref body) => {\n+                self.process_method(sig,\n+                                    Some(body),\n+                                    impl_item.id,\n+                                    impl_item.ident.name,\n+                                    From::from(&impl_item.vis),\n+                                    impl_item.span);\n+            }\n+            ast::ImplItemKind::Type(_) |\n+            ast::ImplItemKind::Macro(_) => {}\n+        }\n+    }\n }\n \n impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor for DumpVisitor<'l, 'tcx, 'll, D> {\n@@ -1180,6 +1238,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor for DumpVisitor<'l, 'tcx, 'll, D>\n                         qualname: qualname.clone(),\n                         value: value,\n                         visibility: From::from(&item.vis),\n+                        parent: None,\n                     }.lower(self.tcx));\n                 }\n \n@@ -1204,55 +1263,6 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor for DumpVisitor<'l, 'tcx, 'll, D>\n         }\n     }\n \n-    fn visit_trait_item(&mut self, trait_item: &ast::TraitItem) {\n-        self.process_macro_use(trait_item.span, trait_item.id);\n-        match trait_item.node {\n-            ast::TraitItemKind::Const(ref ty, Some(ref expr)) => {\n-                self.process_const(trait_item.id,\n-                                   trait_item.ident.name,\n-                                   trait_item.span,\n-                                   &ty,\n-                                   &expr,\n-                                   Visibility::Public);\n-            }\n-            ast::TraitItemKind::Method(ref sig, ref body) => {\n-                self.process_method(sig,\n-                                    body.as_ref().map(|x| &**x),\n-                                    trait_item.id,\n-                                    trait_item.ident.name,\n-                                    Visibility::Public,\n-                                    trait_item.span);\n-            }\n-            ast::TraitItemKind::Const(_, None) |\n-            ast::TraitItemKind::Type(..) |\n-            ast::TraitItemKind::Macro(_) => {}\n-        }\n-    }\n-\n-    fn visit_impl_item(&mut self, impl_item: &ast::ImplItem) {\n-        self.process_macro_use(impl_item.span, impl_item.id);\n-        match impl_item.node {\n-            ast::ImplItemKind::Const(ref ty, ref expr) => {\n-                self.process_const(impl_item.id,\n-                                   impl_item.ident.name,\n-                                   impl_item.span,\n-                                   &ty,\n-                                   &expr,\n-                                   From::from(&impl_item.vis));\n-            }\n-            ast::ImplItemKind::Method(ref sig, ref body) => {\n-                self.process_method(sig,\n-                                    Some(body),\n-                                    impl_item.id,\n-                                    impl_item.ident.name,\n-                                    From::from(&impl_item.vis),\n-                                    impl_item.span);\n-            }\n-            ast::ImplItemKind::Type(_) |\n-            ast::ImplItemKind::Macro(_) => {}\n-        }\n-    }\n-\n     fn visit_ty(&mut self, t: &ast::Ty) {\n         self.process_macro_use(t.span, t.id);\n         match t.node {\n@@ -1416,6 +1426,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor for DumpVisitor<'l, 'tcx, 'll, D>\n                             value: value,\n                             type_value: String::new(),\n                             scope: 0,\n+                            parent: None,\n                             visibility: Visibility::Inherited,\n                         }.lower(self.tcx));\n                     }"}, {"sha": "4333c6dd18e60bb522ec05c892ba29261c468a0e", "filename": "src/librustc_save_analysis/external_data.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4dc7b585a2d7784e5c8a8e390c77441df4aea29b/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc7b585a2d7784e5c8a8e390c77441df4aea29b/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fexternal_data.rs?ref=4dc7b585a2d7784e5c8a8e390c77441df4aea29b", "patch": "@@ -169,6 +169,7 @@ pub struct FunctionData {\n     pub scope: DefId,\n     pub value: String,\n     pub visibility: Visibility,\n+    pub parent: Option<DefId>,\n }\n \n impl Lower for data::FunctionData {\n@@ -184,6 +185,7 @@ impl Lower for data::FunctionData {\n             scope: make_def_id(self.scope, &tcx.map),\n             value: self.value,\n             visibility: self.visibility,\n+            parent: self.parent.map(|id| make_def_id(id, &tcx.map)),\n         }\n     }\n }\n@@ -328,6 +330,7 @@ pub struct MethodData {\n     pub value: String,\n     pub decl_id: Option<DefId>,\n     pub visibility: Visibility,\n+    pub parent: Option<DefId>\n }\n \n impl Lower for data::MethodData {\n@@ -343,6 +346,7 @@ impl Lower for data::MethodData {\n             value: self.value,\n             decl_id: self.decl_id,\n             visibility: self.visibility,\n+            parent: Some(make_def_id(self.scope, &tcx.map)),\n         }\n     }\n }\n@@ -438,7 +442,8 @@ pub struct StructVariantData {\n     pub qualname: String,\n     pub type_value: String,\n     pub value: String,\n-    pub scope: DefId\n+    pub scope: DefId,\n+    pub parent: Option<DefId>,\n }\n \n impl Lower for data::StructVariantData {\n@@ -453,6 +458,7 @@ impl Lower for data::StructVariantData {\n             type_value: self.type_value,\n             value: self.value,\n             scope: make_def_id(self.scope, &tcx.map),\n+            parent: self.parent.map(|id| make_def_id(id, &tcx.map)),\n         }\n     }\n }\n@@ -495,6 +501,7 @@ pub struct TupleVariantData {\n     pub type_value: String,\n     pub value: String,\n     pub scope: DefId,\n+    pub parent: Option<DefId>,\n }\n \n impl Lower for data::TupleVariantData {\n@@ -509,6 +516,7 @@ impl Lower for data::TupleVariantData {\n             type_value: self.type_value,\n             value: self.value,\n             scope: make_def_id(self.scope, &tcx.map),\n+            parent: self.parent.map(|id| make_def_id(id, &tcx.map)),\n         }\n     }\n }\n@@ -522,6 +530,7 @@ pub struct TypeDefData {\n     pub qualname: String,\n     pub value: String,\n     pub visibility: Visibility,\n+    pub parent: Option<DefId>,\n }\n \n impl Lower for data::TypeDefData {\n@@ -535,6 +544,7 @@ impl Lower for data::TypeDefData {\n             qualname: self.qualname,\n             value: self.value,\n             visibility: self.visibility,\n+            parent: self.parent.map(|id| make_def_id(id, &tcx.map)),\n         }\n     }\n }\n@@ -620,6 +630,7 @@ pub struct VariableData {\n     pub scope: DefId,\n     pub value: String,\n     pub type_value: String,\n+    pub parent: Option<DefId>,\n     pub visibility: Visibility,\n }\n \n@@ -636,6 +647,7 @@ impl Lower for data::VariableData {\n             scope: make_def_id(self.scope, &tcx.map),\n             value: self.value,\n             type_value: self.type_value,\n+            parent: self.parent.map(|id| make_def_id(id, &tcx.map)),\n             visibility: self.visibility,\n         }\n     }"}, {"sha": "874babb907e4c8085d4d6b01e51313050acdc5e1", "filename": "src/librustc_save_analysis/json_api_dumper.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4dc7b585a2d7784e5c8a8e390c77441df4aea29b/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc7b585a2d7784e5c8a8e390c77441df4aea29b/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_api_dumper.rs?ref=4dc7b585a2d7784e5c8a8e390c77441df4aea29b", "patch": "@@ -17,6 +17,13 @@ use external_data::*;\n use data::{VariableKind, Visibility};\n use dump::Dump;\n \n+// A dumper to dump a restricted set of JSON information, designed for use with\n+// libraries distributed without their source. Clients are likely to use type\n+// information here, and (for example) generate Rustdoc URLs, but don't need\n+// information for navigating the source of the crate.\n+// Relative to the regular JSON save-analysis info, this form is filtered to\n+// remove non-visible items, but includes some extra info for items (e.g., the\n+// parent field for finding the struct to which a field belongs).\n pub struct JsonApiDumper<'b, W: Write + 'b> {\n     output: &'b mut W,\n     result: Analysis,\n@@ -217,7 +224,7 @@ impl From<TupleVariantData> for Option<Def> {\n             name: data.name,\n             qualname: data.qualname,\n             value: data.value,\n-            parent: None,\n+            parent: data.parent.map(|id| From::from(id)),\n             children: vec![],\n             decl_id: None,\n         })\n@@ -232,7 +239,7 @@ impl From<StructVariantData> for Option<Def> {\n             name: data.name,\n             qualname: data.qualname,\n             value: data.value,\n-            parent: None,\n+            parent: data.parent.map(|id| From::from(id)),\n             children: vec![],\n             decl_id: None,\n         })\n@@ -285,7 +292,7 @@ impl From<FunctionData> for Option<Def> {\n                 qualname: data.qualname,\n                 value: data.value,\n                 children: vec![],\n-                parent: None,\n+                parent: data.parent.map(|id| From::from(id)),\n                 decl_id: None,\n             }),\n             _ => None,\n@@ -303,7 +310,7 @@ impl From<MethodData> for Option<Def> {\n                 qualname: data.qualname,\n                 value: data.value,\n                 children: vec![],\n-                parent: None,\n+                parent: data.parent.map(|id| From::from(id)),\n                 decl_id: data.decl_id.map(|id| From::from(id)),\n             }),\n             _ => None,\n@@ -354,7 +361,7 @@ impl From<TypeDefData> for Option<Def> {\n                 qualname: data.qualname,\n                 value: data.value,\n                 children: vec![],\n-                parent: None,\n+                parent: data.parent.map(|id| From::from(id)),\n                 decl_id: None,\n             }),\n             _ => None,\n@@ -377,7 +384,7 @@ impl From<VariableData> for Option<Def> {\n                 qualname: data.qualname,\n                 value: data.value,\n                 children: vec![],\n-                parent: None,\n+                parent: data.parent.map(|id| From::from(id)),\n                 decl_id: None,\n             }),\n             _ => None,"}, {"sha": "9478e25cff7e0b895e658f0555926c29f68f8c5a", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4dc7b585a2d7784e5c8a8e390c77441df4aea29b/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc7b585a2d7784e5c8a8e390c77441df4aea29b/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=4dc7b585a2d7784e5c8a8e390c77441df4aea29b", "patch": "@@ -141,6 +141,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     scope: self.enclosing_scope(item.id),\n                     value: make_signature(decl, generics),\n                     visibility: From::from(&item.vis),\n+                    parent: None,\n                 }))\n             }\n             ast::ItemKind::Static(ref typ, mt, ref expr) => {\n@@ -163,6 +164,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     qualname: qualname,\n                     span: sub_span.unwrap(),\n                     scope: self.enclosing_scope(item.id),\n+                    parent: None,\n                     value: value,\n                     type_value: ty_to_string(&typ),\n                     visibility: From::from(&item.vis),\n@@ -179,6 +181,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     qualname: qualname,\n                     span: sub_span.unwrap(),\n                     scope: self.enclosing_scope(item.id),\n+                    parent: None,\n                     value: self.span_utils.snippet(expr.span),\n                     type_value: ty_to_string(&typ),\n                     visibility: From::from(&item.vis),\n@@ -284,6 +287,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 qualname: qualname,\n                 span: sub_span.unwrap(),\n                 scope: scope,\n+                parent: Some(scope),\n                 value: \"\".to_owned(),\n                 type_value: typ,\n                 visibility: From::from(&field.vis),\n@@ -366,6 +370,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n \n         let sub_span = self.span_utils.sub_span_after_keyword(span, keywords::Fn);\n         filter!(self.span_utils, sub_span, span, None);\n+        let parent_scope = self.enclosing_scope(id);\n         Some(FunctionData {\n             id: id,\n             name: name.to_string(),\n@@ -376,6 +381,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             // FIXME you get better data here by using the visitor.\n             value: String::new(),\n             visibility: vis,\n+            parent: Some(parent_scope),\n         })\n     }\n "}, {"sha": "3711b6ea8959b7548bd3c5b5134a2dee4e6004fd", "filename": "src/test/run-make/save-analysis/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4dc7b585a2d7784e5c8a8e390c77441df4aea29b/src%2Ftest%2Frun-make%2Fsave-analysis%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4dc7b585a2d7784e5c8a8e390c77441df4aea29b/src%2Ftest%2Frun-make%2Fsave-analysis%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2FMakefile?ref=4dc7b585a2d7784e5c8a8e390c77441df4aea29b", "patch": "@@ -5,3 +5,4 @@ krate2: krate2.rs\n code: foo.rs krate2\n \t$(RUSTC) foo.rs -Zsave-analysis-csv\n \t$(RUSTC) foo.rs -Zsave-analysis\n+\t$(RUSTC) foo.rs -Zsave-analysis-api"}]}