{"sha": "748eccd48828e430b906ffa6bd3f6abdcc766dc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0OGVjY2Q0ODgyOGU0MzBiOTA2ZmZhNmJkM2Y2YWJkY2M3NjZkYzk=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-07T20:52:53Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-17T23:16:41Z"}, "message": "Lints being from a plugin is dependent on the lint, not the registration", "tree": {"sha": "b35a9be093a54af5db1778cb86864082195d35ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b35a9be093a54af5db1778cb86864082195d35ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/748eccd48828e430b906ffa6bd3f6abdcc766dc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/748eccd48828e430b906ffa6bd3f6abdcc766dc9", "html_url": "https://github.com/rust-lang/rust/commit/748eccd48828e430b906ffa6bd3f6abdcc766dc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/748eccd48828e430b906ffa6bd3f6abdcc766dc9/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2121b04751702359f3bf03847040a9907ec2f66f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2121b04751702359f3bf03847040a9907ec2f66f", "html_url": "https://github.com/rust-lang/rust/commit/2121b04751702359f3bf03847040a9907ec2f66f"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "37f577da8bba22669b6a6fca74dd6305ac0082cc", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/748eccd48828e430b906ffa6bd3f6abdcc766dc9/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748eccd48828e430b906ffa6bd3f6abdcc766dc9/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=748eccd48828e430b906ffa6bd3f6abdcc766dc9", "patch": "@@ -50,7 +50,7 @@ use syntax_pos::{MultiSpan, Span, symbol::Symbol};\n pub struct LintStore {\n     /// Registered lints. The bool is true if the lint was\n     /// added by a plugin.\n-    lints: Vec<(&'static Lint, bool)>,\n+    lints: Vec<&'static Lint>,\n \n     /// Trait objects for each lint pass.\n     /// This is only `None` while performing a lint pass.\n@@ -152,7 +152,7 @@ impl LintStore {\n         }\n     }\n \n-    pub fn get_lints<'t>(&'t self) -> &'t [(&'static Lint, bool)] {\n+    pub fn get_lints<'t>(&'t self) -> &'t [&'static Lint] {\n         &self.lints\n     }\n \n@@ -169,33 +169,30 @@ impl LintStore {\n     }\n \n     pub fn register_early_pass(&mut self,\n-                               from_plugin: bool,\n                                register_only: bool,\n                                pass: EarlyLintPassObject) {\n-        self.push_lints(from_plugin, &pass.get_lints());\n+        self.push_lints(&pass.get_lints());\n         if !register_only {\n             self.early_passes.as_mut().unwrap().push(pass);\n         }\n     }\n \n     pub fn register_pre_expansion_pass(\n         &mut self,\n-        from_plugin: bool,\n         register_only: bool,\n         pass: EarlyLintPassObject,\n     ) {\n-        self.push_lints(from_plugin, &pass.get_lints());\n+        self.push_lints(&pass.get_lints());\n         if !register_only {\n             self.pre_expansion_passes.as_mut().unwrap().push(pass);\n         }\n     }\n \n     pub fn register_late_pass(&mut self,\n-                              from_plugin: bool,\n                               register_only: bool,\n                               per_module: bool,\n                               pass: LateLintPassObject) {\n-        self.push_lints(from_plugin, &pass.get_lints());\n+        self.push_lints(&pass.get_lints());\n         if !register_only {\n             if per_module {\n                 self.late_module_passes.push(pass);\n@@ -206,9 +203,9 @@ impl LintStore {\n     }\n \n     // Helper method for register_early/late_pass\n-    fn push_lints(&mut self, from_plugin: bool, lints: &[&'static Lint]) {\n+    fn push_lints(&mut self, lints: &[&'static Lint]) {\n         for lint in lints {\n-            self.lints.push((lint, from_plugin));\n+            self.lints.push(lint);\n \n             let id = LintId::of(lint);\n             if self.by_name.insert(lint.name_lower(), Id(id)).is_some() {"}, {"sha": "455dc06a1efbddb105d14a64656ea8b36fc83ac8", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/748eccd48828e430b906ffa6bd3f6abdcc766dc9/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748eccd48828e430b906ffa6bd3f6abdcc766dc9/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=748eccd48828e430b906ffa6bd3f6abdcc766dc9", "patch": "@@ -76,6 +76,8 @@ pub struct Lint {\n \n     /// `true` if this lint is reported even inside expansions of external macros.\n     pub report_in_external_macro: bool,\n+\n+    pub is_plugin: bool,\n }\n \n impl Lint {\n@@ -117,6 +119,7 @@ macro_rules! declare_lint {\n             desc: $desc,\n             edition_lint_opts: None,\n             report_in_external_macro: $external,\n+            is_plugin: false,\n         };\n     );\n     ($vis: vis $NAME: ident, $Level: ident, $desc: expr,\n@@ -128,6 +131,7 @@ macro_rules! declare_lint {\n             desc: $desc,\n             edition_lint_opts: Some(($lint_edition, $crate::lint::Level::$edition_level)),\n             report_in_external_macro: false,\n+            is_plugin: false,\n         };\n     );\n }\n@@ -156,6 +160,7 @@ macro_rules! declare_tool_lint {\n             desc: $desc,\n             edition_lint_opts: None,\n             report_in_external_macro: $external,\n+            is_plugin: true,\n         };\n     );\n }"}, {"sha": "5af1e8faccc8f4fe726a778d96eeb9dc9a7bb2a6", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/748eccd48828e430b906ffa6bd3f6abdcc766dc9/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748eccd48828e430b906ffa6bd3f6abdcc766dc9/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=748eccd48828e430b906ffa6bd3f6abdcc766dc9", "patch": "@@ -835,8 +835,7 @@ Available lint options:\n \n \");\n \n-    fn sort_lints(sess: &Session, lints: Vec<(&'static Lint, bool)>) -> Vec<&'static Lint> {\n-        let mut lints: Vec<_> = lints.into_iter().map(|(x, _)| x).collect();\n+    fn sort_lints(sess: &Session, mut lints: Vec<&'static Lint>) -> Vec<&'static Lint> {\n         // The sort doesn't case-fold but it's doubtful we care.\n         lints.sort_by_cached_key(|x: &&Lint| (x.default_level(sess), x.name));\n         lints\n@@ -852,7 +851,7 @@ Available lint options:\n     let (plugin, builtin): (Vec<_>, _) = lint_store.get_lints()\n                                                    .iter()\n                                                    .cloned()\n-                                                   .partition(|&(_, p)| p);\n+                                                   .partition(|&lint| lint.is_plugin);\n     let plugin = sort_lints(sess, plugin);\n     let builtin = sort_lints(sess, builtin);\n "}, {"sha": "2684650c3a9702fb3b3eb32a8b607c11290479a0", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/748eccd48828e430b906ffa6bd3f6abdcc766dc9/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748eccd48828e430b906ffa6bd3f6abdcc766dc9/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=748eccd48828e430b906ffa6bd3f6abdcc766dc9", "patch": "@@ -299,10 +299,10 @@ pub fn register_plugins<'a>(\n \n     let mut ls = sess.lint_store.borrow_mut();\n     for pass in early_lint_passes {\n-        ls.register_early_pass(true, false, pass);\n+        ls.register_early_pass(false, pass);\n     }\n     for pass in late_lint_passes {\n-        ls.register_late_pass(true, false, false, pass);\n+        ls.register_late_pass(false, false, pass);\n     }\n \n     for (name, (to, deprecated_name)) in lint_groups {"}, {"sha": "2c39ba024513ea0d48f9d08223cf78c87f4528fa", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/748eccd48828e430b906ffa6bd3f6abdcc766dc9/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748eccd48828e430b906ffa6bd3f6abdcc766dc9/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=748eccd48828e430b906ffa6bd3f6abdcc766dc9", "patch": "@@ -205,7 +205,7 @@ pub fn register_builtins(store: &mut lint::LintStore, no_interleave_lints: bool)\n \n     macro_rules! register_pass {\n         ($method:ident, $constructor:expr, [$($args:expr),*]) => (\n-            store.$method(false, false, $($args,)* box $constructor);\n+            store.$method(false, $($args,)* box $constructor);\n         )\n     }\n \n@@ -224,16 +224,15 @@ pub fn register_builtins(store: &mut lint::LintStore, no_interleave_lints: bool)\n         late_lint_mod_passes!(register_passes, [register_late_pass, [true]]);\n     } else {\n         store.register_pre_expansion_pass(\n-            false,\n             true,\n             box BuiltinCombinedPreExpansionLintPass::new()\n         );\n-        store.register_early_pass(false, true, box BuiltinCombinedEarlyLintPass::new());\n+        store.register_early_pass(true, box BuiltinCombinedEarlyLintPass::new());\n         store.register_late_pass(\n-            false, true, true, box BuiltinCombinedModuleLateLintPass::new()\n+            true, true, box BuiltinCombinedModuleLateLintPass::new()\n         );\n         store.register_late_pass(\n-            false, true, false, box BuiltinCombinedLateLintPass::new()\n+            true, false, box BuiltinCombinedLateLintPass::new()\n         );\n     }\n \n@@ -492,9 +491,9 @@ pub fn register_builtins(store: &mut lint::LintStore, no_interleave_lints: bool)\n }\n \n pub fn register_internals(store: &mut lint::LintStore) {\n-    store.register_early_pass(false, false, box DefaultHashTypes::new());\n-    store.register_early_pass(false, false, box LintPassImpl);\n-    store.register_late_pass(false, false, false, box TyTyKind);\n+    store.register_early_pass(false, box DefaultHashTypes::new());\n+    store.register_early_pass(false, box LintPassImpl);\n+    store.register_late_pass(false, false, box TyTyKind);\n     store.register_group(\n         false,\n         \"rustc::internal\","}]}