{"sha": "2a56a681c4cfd56822e447a66adccdc32580b46a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNTZhNjgxYzRjZmQ1NjgyMmU0NDdhNjZhZGNjZGMzMjU4MGI0NmE=", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-07-19T14:06:42Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-07-19T14:16:37Z"}, "message": "Add comments explaining the unix command-line argument support.\n\nFollowing up on #87236, add comments to the unix command-line argument\nsupport explaining that the code doesn't mutate the system-provided\nargc/argv, and that this is why the code doesn't need a lock or special\nmemory ordering.", "tree": {"sha": "7d526b156ded8f1d9c9aa56325d1485417d0e079", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d526b156ded8f1d9c9aa56325d1485417d0e079"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a56a681c4cfd56822e447a66adccdc32580b46a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a56a681c4cfd56822e447a66adccdc32580b46a", "html_url": "https://github.com/rust-lang/rust/commit/2a56a681c4cfd56822e447a66adccdc32580b46a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a56a681c4cfd56822e447a66adccdc32580b46a/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8df945c4717ffaf923b57bf30c473df6fc98bc85", "url": "https://api.github.com/repos/rust-lang/rust/commits/8df945c4717ffaf923b57bf30c473df6fc98bc85", "html_url": "https://github.com/rust-lang/rust/commit/8df945c4717ffaf923b57bf30c473df6fc98bc85"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "0bd1ea645779f6d524e1cb9e27156bcfe3f82b38", "filename": "library/std/src/sys/unix/args.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2a56a681c4cfd56822e447a66adccdc32580b46a/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a56a681c4cfd56822e447a66adccdc32580b46a/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs?ref=2a56a681c4cfd56822e447a66adccdc32580b46a", "patch": "@@ -77,10 +77,18 @@ mod imp {\n     use crate::ptr;\n     use crate::sync::atomic::{AtomicIsize, AtomicPtr, Ordering};\n \n+    // The system-provided argc and argv, which we store in static memory\n+    // here so that we can defer the work of parsing them until its actually\n+    // needed.\n+    //\n+    // Note that we never mutate argv/argc, the argv array, or the argv\n+    // strings, which allows the code in this file to be very simple.\n     static ARGC: AtomicIsize = AtomicIsize::new(0);\n     static ARGV: AtomicPtr<*const u8> = AtomicPtr::new(ptr::null_mut());\n \n     unsafe fn really_init(argc: isize, argv: *const *const u8) {\n+        // These don't need to be ordered with each other or other stores,\n+        // because they only hold the unmodified system-provide argv/argc.\n         ARGC.store(argc, Ordering::Relaxed);\n         ARGV.store(argv as *mut _, Ordering::Relaxed);\n     }\n@@ -122,8 +130,14 @@ mod imp {\n \n     fn clone() -> Vec<OsString> {\n         unsafe {\n-            // Load ARGC and ARGV without a lock. If the store to either ARGV or\n-            // ARGC isn't visible yet, we'll return an empty argument list.\n+            // Load ARGC and ARGV, which hold the unmodified system-provided\n+            // argc/argv, so we can read the pointed-to memory without atomics\n+            // or synchronization.\n+            //\n+            // If either ARGC or ARGV is still zero or null, then either there\n+            // really are no arguments, or someone is asking for `args()`\n+            // before initialization has completed, and we return an empty\n+            // list.\n             let argv = ARGV.load(Ordering::Relaxed);\n             let argc = if argv.is_null() { 0 } else { ARGC.load(Ordering::Relaxed) };\n             (0..argc)"}]}