{"sha": "f4aa15c16b352d4ac9a90c1668311e4762c5e494", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YWExNWMxNmIzNTJkNGFjOWE5MGMxNjY4MzExZTQ3NjJjNWU0OTQ=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-04-04T17:05:01Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-04-09T11:45:05Z"}, "message": "Move FunctionSignature creation to display", "tree": {"sha": "edd18388ae9bce22ae303658e7b3232592553699", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edd18388ae9bce22ae303658e7b3232592553699"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4aa15c16b352d4ac9a90c1668311e4762c5e494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4aa15c16b352d4ac9a90c1668311e4762c5e494", "html_url": "https://github.com/rust-lang/rust/commit/f4aa15c16b352d4ac9a90c1668311e4762c5e494", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4aa15c16b352d4ac9a90c1668311e4762c5e494/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed65e2619a42aea7c375d0cbf81d337fffb11a46", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed65e2619a42aea7c375d0cbf81d337fffb11a46", "html_url": "https://github.com/rust-lang/rust/commit/ed65e2619a42aea7c375d0cbf81d337fffb11a46"}], "stats": {"total": 104, "additions": 54, "deletions": 50}, "files": [{"sha": "66a769c7300ee110618804acd3d646e87bb14198", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f4aa15c16b352d4ac9a90c1668311e4762c5e494/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4aa15c16b352d4ac9a90c1668311e4762c5e494/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=f4aa15c16b352d4ac9a90c1668311e4762c5e494", "patch": "@@ -8,7 +8,7 @@ use ra_syntax::{\n };\n use hir::Docs;\n \n-use crate::{FilePosition, CallInfo, db::RootDatabase};\n+use crate::{FilePosition, CallInfo, FunctionSignature, db::RootDatabase};\n \n /// Computes parameter information for the given call expression.\n pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<CallInfo> {\n@@ -108,11 +108,10 @@ impl<'a> FnCallNode<'a> {\n \n impl CallInfo {\n     fn new(db: &RootDatabase, function: hir::Function, node: &ast::FnDef) -> Option<Self> {\n-        let sig = crate::completion::function_signature(node)?;\n         let doc = function.docs(db);\n-        let sig = sig.with_doc_opt(doc);\n+        let signature = FunctionSignature::from(node).with_doc_opt(doc);\n \n-        Some(CallInfo { signature: sig, active_parameter: None })\n+        Some(CallInfo { signature, active_parameter: None })\n     }\n \n     fn parameters(&self) -> &[String] {"}, {"sha": "71a35c6897764f16b5fbb21a67781dc7888de083", "filename": "crates/ra_ide_api/src/completion.rs", "status": "modified", "additions": 2, "deletions": 46, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f4aa15c16b352d4ac9a90c1668311e4762c5e494/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4aa15c16b352d4ac9a90c1668311e4762c5e494/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs?ref=f4aa15c16b352d4ac9a90c1668311e4762c5e494", "patch": "@@ -13,7 +13,7 @@ mod complete_scope;\n mod complete_postfix;\n \n use ra_db::SourceDatabase;\n-use ra_syntax::{ast::{self, AstNode, NameOwner, VisibilityOwner, TypeParamsOwner}, SyntaxKind::{ATTR, COMMENT}};\n+use ra_syntax::{ast::{self, AstNode}, SyntaxKind::{ATTR, COMMENT}};\n \n use crate::{\n     db,\n@@ -72,52 +72,8 @@ pub(crate) fn completions(db: &db::RootDatabase, position: FilePosition) -> Opti\n     Some(acc)\n }\n \n-pub fn generic_parameters<N: TypeParamsOwner>(node: &N) -> Vec<String> {\n-    let mut res = vec![];\n-    if let Some(type_params) = node.type_param_list() {\n-        res.extend(type_params.lifetime_params().map(|p| p.syntax().text().to_string()));\n-        res.extend(type_params.type_params().map(|p| p.syntax().text().to_string()));\n-    }\n-    res\n-}\n-\n-pub fn where_predicates<N: TypeParamsOwner>(node: &N) -> Vec<String> {\n-    let mut res = vec![];\n-    if let Some(clause) = node.where_clause() {\n-        res.extend(clause.predicates().map(|p| p.syntax().text().to_string()));\n-    }\n-    res\n-}\n-\n-pub fn function_signature(node: &ast::FnDef) -> Option<FunctionSignature> {\n-    fn param_list(node: &ast::FnDef) -> Vec<String> {\n-        let mut res = vec![];\n-        if let Some(param_list) = node.param_list() {\n-            if let Some(self_param) = param_list.self_param() {\n-                res.push(self_param.syntax().text().to_string())\n-            }\n-\n-            res.extend(param_list.params().map(|param| param.syntax().text().to_string()));\n-        }\n-        res\n-    }\n-\n-    let sig = FunctionSignature {\n-        visibility: node.visibility().map(|n| n.syntax().text().to_string()),\n-        name: node.name().map(|n| n.text().to_string()),\n-        ret_type: node.ret_type().and_then(|r| r.type_ref()).map(|n| n.syntax().text().to_string()),\n-        parameters: param_list(node),\n-        generic_parameters: generic_parameters(node),\n-        where_predicates: where_predicates(node),\n-        // docs are processed separately\n-        doc: None,\n-    };\n-\n-    Some(sig)\n-}\n-\n pub fn function_label(node: &ast::FnDef) -> Option<String> {\n-    function_signature(node).map(|n| n.to_string())\n+    Some(FunctionSignature::from(node).to_string())\n }\n \n pub fn const_label(node: &ast::ConstDef) -> String {"}, {"sha": "e01635460da9e014316b9c108cfefd12940596bc", "filename": "crates/ra_ide_api/src/display.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f4aa15c16b352d4ac9a90c1668311e4762c5e494/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4aa15c16b352d4ac9a90c1668311e4762c5e494/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs?ref=f4aa15c16b352d4ac9a90c1668311e4762c5e494", "patch": "@@ -3,6 +3,8 @@\n use super::*;\r\n use std::fmt::{self, Display};\r\n use join_to_string::join;\r\n+use ra_syntax::ast::{self, AstNode, NameOwner, VisibilityOwner, TypeParamsOwner};\r\n+use std::convert::From;\r\n \r\n /// Contains information about a function signature\r\n #[derive(Debug)]\r\n@@ -30,6 +32,36 @@ impl FunctionSignature {\n     }\r\n }\r\n \r\n+impl From<&'_ ast::FnDef> for FunctionSignature {\r\n+    fn from(node: &ast::FnDef) -> FunctionSignature {\r\n+        fn param_list(node: &ast::FnDef) -> Vec<String> {\r\n+            let mut res = vec![];\r\n+            if let Some(param_list) = node.param_list() {\r\n+                if let Some(self_param) = param_list.self_param() {\r\n+                    res.push(self_param.syntax().text().to_string())\r\n+                }\r\n+\r\n+                res.extend(param_list.params().map(|param| param.syntax().text().to_string()));\r\n+            }\r\n+            res\r\n+        }\r\n+\r\n+        FunctionSignature {\r\n+            visibility: node.visibility().map(|n| n.syntax().text().to_string()),\r\n+            name: node.name().map(|n| n.text().to_string()),\r\n+            ret_type: node\r\n+                .ret_type()\r\n+                .and_then(|r| r.type_ref())\r\n+                .map(|n| n.syntax().text().to_string()),\r\n+            parameters: param_list(node),\r\n+            generic_parameters: generic_parameters(node),\r\n+            where_predicates: where_predicates(node),\r\n+            // docs are processed separately\r\n+            doc: None,\r\n+        }\r\n+    }\r\n+}\r\n+\r\n impl Display for FunctionSignature {\r\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\r\n         if let Some(t) = &self.visibility {\r\n@@ -61,3 +93,20 @@ impl Display for FunctionSignature {\n         Ok(())\r\n     }\r\n }\r\n+\r\n+pub(crate) fn generic_parameters<N: TypeParamsOwner>(node: &N) -> Vec<String> {\r\n+    let mut res = vec![];\r\n+    if let Some(type_params) = node.type_param_list() {\r\n+        res.extend(type_params.lifetime_params().map(|p| p.syntax().text().to_string()));\r\n+        res.extend(type_params.type_params().map(|p| p.syntax().text().to_string()));\r\n+    }\r\n+    res\r\n+}\r\n+\r\n+pub(crate) fn where_predicates<N: TypeParamsOwner>(node: &N) -> Vec<String> {\r\n+    let mut res = vec![];\r\n+    if let Some(clause) = node.where_clause() {\r\n+        res.extend(clause.predicates().map(|p| p.syntax().text().to_string()));\r\n+    }\r\n+    res\r\n+}\r"}]}