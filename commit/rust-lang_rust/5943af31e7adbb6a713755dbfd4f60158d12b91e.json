{"sha": "5943af31e7adbb6a713755dbfd4f60158d12b91e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NDNhZjMxZTdhZGJiNmE3MTM3NTVkYmZkNGY2MDE1OGQxMmI5MWU=", "commit": {"author": {"name": "Jose Narvaez", "email": "jnarvaez@zendesk.com", "date": "2015-10-13T09:44:09Z"}, "committer": {"name": "Jose Narvaez", "email": "jnarvaez@zendesk.com", "date": "2015-10-13T09:44:09Z"}, "message": "Re-running updated rustfmt on liblog.", "tree": {"sha": "e07021a8bf049d9022e808989e49bb9d48f21e20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e07021a8bf049d9022e808989e49bb9d48f21e20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5943af31e7adbb6a713755dbfd4f60158d12b91e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5943af31e7adbb6a713755dbfd4f60158d12b91e", "html_url": "https://github.com/rust-lang/rust/commit/5943af31e7adbb6a713755dbfd4f60158d12b91e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5943af31e7adbb6a713755dbfd4f60158d12b91e/comments", "author": null, "committer": null, "parents": [{"sha": "3db501268010caf4bc072453ef832c5cec25570e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3db501268010caf4bc072453ef832c5cec25570e", "html_url": "https://github.com/rust-lang/rust/commit/3db501268010caf4bc072453ef832c5cec25570e"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "b3268c32f18f7392e7aa3b5efc88eb8f99073d47", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/5943af31e7adbb6a713755dbfd4f60158d12b91e/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5943af31e7adbb6a713755dbfd4f60158d12b91e/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=5943af31e7adbb6a713755dbfd4f60158d12b91e", "patch": "@@ -445,13 +445,13 @@ mod tests {\n     #[test]\n     fn match_full_path() {\n         let dirs = [LogDirective {\n-            name: Some(\"crate2\".to_string()),\n-            level: 3,\n-        },\n+                        name: Some(\"crate2\".to_string()),\n+                        level: 3,\n+                    },\n                     LogDirective {\n-            name: Some(\"crate1::mod1\".to_string()),\n-            level: 2,\n-        }];\n+                        name: Some(\"crate1::mod1\".to_string()),\n+                        level: 2,\n+                    }];\n         assert!(enabled(2, \"crate1::mod1\", dirs.iter()));\n         assert!(!enabled(3, \"crate1::mod1\", dirs.iter()));\n         assert!(enabled(3, \"crate2\", dirs.iter()));\n@@ -461,71 +461,71 @@ mod tests {\n     #[test]\n     fn no_match() {\n         let dirs = [LogDirective {\n-            name: Some(\"crate2\".to_string()),\n-            level: 3,\n-        },\n+                        name: Some(\"crate2\".to_string()),\n+                        level: 3,\n+                    },\n                     LogDirective {\n-            name: Some(\"crate1::mod1\".to_string()),\n-            level: 2,\n-        }];\n+                        name: Some(\"crate1::mod1\".to_string()),\n+                        level: 2,\n+                    }];\n         assert!(!enabled(2, \"crate3\", dirs.iter()));\n     }\n \n     #[test]\n     fn match_beginning() {\n         let dirs = [LogDirective {\n-            name: Some(\"crate2\".to_string()),\n-            level: 3,\n-        },\n+                        name: Some(\"crate2\".to_string()),\n+                        level: 3,\n+                    },\n                     LogDirective {\n-            name: Some(\"crate1::mod1\".to_string()),\n-            level: 2,\n-        }];\n+                        name: Some(\"crate1::mod1\".to_string()),\n+                        level: 2,\n+                    }];\n         assert!(enabled(3, \"crate2::mod1\", dirs.iter()));\n     }\n \n     #[test]\n     fn match_beginning_longest_match() {\n         let dirs = [LogDirective {\n-            name: Some(\"crate2\".to_string()),\n-            level: 3,\n-        },\n+                        name: Some(\"crate2\".to_string()),\n+                        level: 3,\n+                    },\n                     LogDirective {\n-            name: Some(\"crate2::mod\".to_string()),\n-            level: 4,\n-        },\n+                        name: Some(\"crate2::mod\".to_string()),\n+                        level: 4,\n+                    },\n                     LogDirective {\n-            name: Some(\"crate1::mod1\".to_string()),\n-            level: 2,\n-        }];\n+                        name: Some(\"crate1::mod1\".to_string()),\n+                        level: 2,\n+                    }];\n         assert!(enabled(4, \"crate2::mod1\", dirs.iter()));\n         assert!(!enabled(4, \"crate2\", dirs.iter()));\n     }\n \n     #[test]\n     fn match_default() {\n         let dirs = [LogDirective {\n-            name: None,\n-            level: 3,\n-        },\n+                        name: None,\n+                        level: 3,\n+                    },\n                     LogDirective {\n-            name: Some(\"crate1::mod1\".to_string()),\n-            level: 2,\n-        }];\n+                        name: Some(\"crate1::mod1\".to_string()),\n+                        level: 2,\n+                    }];\n         assert!(enabled(2, \"crate1::mod1\", dirs.iter()));\n         assert!(enabled(3, \"crate2::mod2\", dirs.iter()));\n     }\n \n     #[test]\n     fn zero_level() {\n         let dirs = [LogDirective {\n-            name: None,\n-            level: 3,\n-        },\n+                        name: None,\n+                        level: 3,\n+                    },\n                     LogDirective {\n-            name: Some(\"crate1::mod1\".to_string()),\n-            level: 0,\n-        }];\n+                        name: Some(\"crate1::mod1\".to_string()),\n+                        level: 0,\n+                    }];\n         assert!(!enabled(1, \"crate1::mod1\", dirs.iter()));\n         assert!(enabled(3, \"crate2::mod2\", dirs.iter()));\n     }"}]}