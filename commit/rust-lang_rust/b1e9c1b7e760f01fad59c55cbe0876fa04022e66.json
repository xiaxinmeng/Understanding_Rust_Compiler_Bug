{"sha": "b1e9c1b7e760f01fad59c55cbe0876fa04022e66", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZTljMWI3ZTc2MGYwMWZhZDU5YzU1Y2JlMDg3NmZhMDQwMjJlNjY=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-06-12T06:08:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-12T06:08:19Z"}, "message": "Merge pull request #1804 from camsteffen/never_loop\n\nfix never_loop", "tree": {"sha": "aaab9fff6a9ba20d75ce2961cf4dfd57ff2f6751", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aaab9fff6a9ba20d75ce2961cf4dfd57ff2f6751"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1e9c1b7e760f01fad59c55cbe0876fa04022e66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1e9c1b7e760f01fad59c55cbe0876fa04022e66", "html_url": "https://github.com/rust-lang/rust/commit/b1e9c1b7e760f01fad59c55cbe0876fa04022e66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1e9c1b7e760f01fad59c55cbe0876fa04022e66/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55cb63adfe08a22efcb668d4f7dd02c89eb5835f", "url": "https://api.github.com/repos/rust-lang/rust/commits/55cb63adfe08a22efcb668d4f7dd02c89eb5835f", "html_url": "https://github.com/rust-lang/rust/commit/55cb63adfe08a22efcb668d4f7dd02c89eb5835f"}, {"sha": "1a453bf72c7a58da8f49ee5cf8632f2d5ef656fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a453bf72c7a58da8f49ee5cf8632f2d5ef656fb", "html_url": "https://github.com/rust-lang/rust/commit/1a453bf72c7a58da8f49ee5cf8632f2d5ef656fb"}], "stats": {"total": 384, "additions": 306, "deletions": 78}, "files": [{"sha": "b650c64eb218b76c48ef82f4a233ad874b07ddb7", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1e9c1b7e760f01fad59c55cbe0876fa04022e66/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b1e9c1b7e760f01fad59c55cbe0876fa04022e66/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b1e9c1b7e760f01fad59c55cbe0876fa04022e66", "patch": "@@ -295,7 +295,7 @@ name\n [needless_return](https://github.com/Manishearth/rust-clippy/wiki#needless_return)                                     | warn    | using a return statement like `return expr;` where an expression would suffice\n [needless_update](https://github.com/Manishearth/rust-clippy/wiki#needless_update)                                     | warn    | using `Foo { ..base }` when there are no missing fields\n [neg_multiply](https://github.com/Manishearth/rust-clippy/wiki#neg_multiply)                                           | warn    | multiplying integers with -1\n-[never_loop](https://github.com/Manishearth/rust-clippy/wiki#never_loop)                                               | allow   | any loop with an unconditional `break` or `return` statement\n+[never_loop](https://github.com/Manishearth/rust-clippy/wiki#never_loop)                                               | warn    | any loop that will always `break` or `return`\n [new_ret_no_self](https://github.com/Manishearth/rust-clippy/wiki#new_ret_no_self)                                     | warn    | not returning `Self` in a `new` method\n [new_without_default](https://github.com/Manishearth/rust-clippy/wiki#new_without_default)                             | warn    | `fn new() -> Self` method without `Default` implementation\n [new_without_default_derive](https://github.com/Manishearth/rust-clippy/wiki#new_without_default_derive)               | warn    | `fn new() -> Self` without `#[derive]`able `Default` implementation"}, {"sha": "88f0ef0955c387495b12b383684b80fae1627357", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b1e9c1b7e760f01fad59c55cbe0876fa04022e66/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e9c1b7e760f01fad59c55cbe0876fa04022e66/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=b1e9c1b7e760f01fad59c55cbe0876fa04022e66", "patch": "@@ -184,16 +184,15 @@ fn is_relevant_trait(tcx: TyCtxt, item: &TraitItem) -> bool {\n }\n \n fn is_relevant_block(tcx: TyCtxt, tables: &ty::TypeckTables, block: &Block) -> bool {\n-    for stmt in &block.stmts {\n+    if let Some(stmt) = block.stmts.first() {\n         match stmt.node {\n-            StmtDecl(_, _) => return true,\n+            StmtDecl(_, _) => true,\n             StmtExpr(ref expr, _) |\n-            StmtSemi(ref expr, _) => {\n-                return is_relevant_expr(tcx, tables, expr);\n-            },\n+            StmtSemi(ref expr, _) => is_relevant_expr(tcx, tables, expr),\n         }\n+    } else {\n+        block.expr.as_ref().map_or(false, |e| is_relevant_expr(tcx, tables, e))\n     }\n-    block.expr.as_ref().map_or(false, |e| is_relevant_expr(tcx, tables, e))\n }\n \n fn is_relevant_expr(tcx: TyCtxt, tables: &ty::TypeckTables, expr: &Expr) -> bool {"}, {"sha": "729c3eaf86e659865d47146fa04f95cb0cac4ef8", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b1e9c1b7e760f01fad59c55cbe0876fa04022e66/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e9c1b7e760f01fad59c55cbe0876fa04022e66/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=b1e9c1b7e760f01fad59c55cbe0876fa04022e66", "patch": "@@ -200,7 +200,7 @@ fn check_doc(cx: &EarlyContext, valid_idents: &[String], docs: &[(String, Span)]\n         type Item = (bool, char);\n \n         fn next(&mut self) -> Option<(bool, char)> {\n-            while self.line < self.docs.len() {\n+            if self.line < self.docs.len() {\n                 if self.reset {\n                     self.line += 1;\n                     self.reset = false;\n@@ -215,18 +215,18 @@ fn check_doc(cx: &EarlyContext, valid_idents: &[String], docs: &[(String, Span)]\n                     self.pos += c.len_utf8();\n                     let new_line = self.new_line;\n                     self.new_line = c == '\\n' || (self.new_line && c.is_whitespace());\n-                    return Some((new_line, c));\n+                    Some((new_line, c))\n                 } else if self.line == self.docs.len() - 1 {\n-                    return None;\n+                    None\n                 } else {\n                     self.new_line = true;\n                     self.reset = true;\n                     self.pos += 1;\n-                    return Some((true, '\\n'));\n+                    Some((true, '\\n'))\n                 }\n+            } else {\n+                None\n             }\n-\n-            None\n         }\n     }\n "}, {"sha": "fb0114f8f683ae0e1fffac08763de6fac8921c7d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1e9c1b7e760f01fad59c55cbe0876fa04022e66/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e9c1b7e760f01fad59c55cbe0876fa04022e66/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b1e9c1b7e760f01fad59c55cbe0876fa04022e66", "patch": "@@ -324,7 +324,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         enum_variants::STUTTER,\n         if_not_else::IF_NOT_ELSE,\n         items_after_statements::ITEMS_AFTER_STATEMENTS,\n-        loops::NEVER_LOOP,\n         matches::SINGLE_MATCH_ELSE,\n         mem_forget::MEM_FORGET,\n         methods::FILTER_MAP,\n@@ -420,6 +419,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         loops::FOR_LOOP_OVER_RESULT,\n         loops::ITER_NEXT_LOOP,\n         loops::NEEDLESS_RANGE_LOOP,\n+        loops::NEVER_LOOP,\n         loops::REVERSE_RANGE_LOOP,\n         loops::UNUSED_COLLECT,\n         loops::WHILE_LET_LOOP,"}, {"sha": "fc9bcbab73af690e815e6f772746f2d781b24370", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 94, "deletions": 31, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/b1e9c1b7e760f01fad59c55cbe0876fa04022e66/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e9c1b7e760f01fad59c55cbe0876fa04022e66/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=b1e9c1b7e760f01fad59c55cbe0876fa04022e66", "patch": "@@ -286,24 +286,22 @@ declare_lint! {\n     \"looping on a map using `iter` when `keys` or `values` would do\"\n }\n \n-/// **What it does:** Checks for loops that contain an unconditional `break`\n-/// or `return`.\n+/// **What it does:** Checks for loops that will always `break`, `return` or\n+/// `continue` an outer loop.\n ///\n /// **Why is this bad?** This loop never loops, all it does is obfuscating the\n /// code.\n ///\n-/// **Known problems:** Ignores `continue` statements in the loop that create\n-/// nontrivial control flow. Therefore set to `Allow` by default.\n-/// See https://github.com/Manishearth/rust-clippy/issues/1586\n+/// **Known problems:** None\n ///\n /// **Example:**\n /// ```rust\n /// loop { ..; break; }\n /// ```\n declare_lint! {\n     pub NEVER_LOOP,\n-    Allow,\n-    \"any loop with an unconditional `break` or `return` statement\"\n+    Warn,\n+    \"any loop that will always `break` or `return`\"\n }\n \n #[derive(Copy, Clone)]\n@@ -333,6 +331,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         if let Some((pat, arg, body)) = higher::for_loop(expr) {\n             check_for_loop(cx, pat, arg, body, expr);\n         }\n+\n+        // check for never_loop\n+        match expr.node {\n+            ExprWhile(_, ref block, _) |\n+            ExprLoop(ref block, _, _) => {\n+                if never_loop(block, &expr.id) {\n+                    span_lint(cx, NEVER_LOOP, expr.span, \"this loop never actually loops\");\n+                }\n+            },\n+            _ => (),\n+        }\n+\n         // check for `loop { if let {} else break }` that could be `while let`\n         // (also matches an explicit \"match\" instead of \"if let\")\n         // (even if the \"match\" or \"if let\" is used for declaration)\n@@ -345,9 +355,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                           \"empty `loop {}` detected. You may want to either use `panic!()` or add \\\n                            `std::thread::sleep(..);` to the loop body.\");\n             }\n-            if never_loop_block(block) {\n-                span_lint(cx, NEVER_LOOP, expr.span, \"this loop never actually loops\");\n-            }\n \n             // extract the expression from the first statement (if any) in a block\n             let inner_stmt_expr = extract_expr_from_first_stmt(block);\n@@ -425,47 +432,103 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     }\n }\n \n-fn never_loop_block(block: &Block) -> bool {\n-    block.stmts.iter().any(never_loop_stmt) || block.expr.as_ref().map_or(false, |e| never_loop_expr(e))\n+fn never_loop(block: &Block, id: &NodeId) -> bool {\n+    !contains_continue_block(block, id) && loop_exit_block(block)\n+}\n+\n+fn contains_continue_block(block: &Block, dest: &NodeId) -> bool {\n+    block.stmts.iter().any(|e| contains_continue_stmt(e, dest))\n+        || block.expr.as_ref().map_or(false, |e| contains_continue_expr(e, dest))\n }\n \n-fn never_loop_stmt(stmt: &Stmt) -> bool {\n+fn contains_continue_stmt(stmt: &Stmt, dest: &NodeId) -> bool {\n     match stmt.node {\n         StmtSemi(ref e, _) |\n-        StmtExpr(ref e, _) => never_loop_expr(e),\n-        StmtDecl(ref d, _) => never_loop_decl(d),\n+        StmtExpr(ref e, _) => contains_continue_expr(e, dest),\n+        StmtDecl(ref d, _) => contains_continue_decl(d, dest),\n     }\n }\n \n-fn never_loop_decl(decl: &Decl) -> bool {\n-    if let DeclLocal(ref local) = decl.node {\n-        local.init.as_ref().map_or(false, |e| never_loop_expr(e))\n-    } else {\n-        false\n+fn contains_continue_decl(decl: &Decl, dest: &NodeId) -> bool {\n+    match decl.node {\n+        DeclLocal(ref local) => local.init.as_ref().map_or(false, |e| contains_continue_expr(e, dest)),\n+        _ => false\n     }\n }\n \n-fn never_loop_expr(expr: &Expr) -> bool {\n+fn contains_continue_expr(expr: &Expr, dest: &NodeId) -> bool {\n     match expr.node {\n-        ExprBreak(..) | ExprRet(..) => true,\n         ExprBox(ref e) |\n         ExprUnary(_, ref e) |\n-        ExprBinary(_, ref e, _) | // because short-circuiting\n         ExprCast(ref e, _) |\n         ExprType(ref e, _) |\n         ExprField(ref e, _) |\n         ExprTupField(ref e, _) |\n-        ExprRepeat(ref e, _) |\n-        ExprAddrOf(_, ref e) => never_loop_expr(e),\n+        ExprAddrOf(_, ref e) |\n+        ExprRepeat(ref e, _) => contains_continue_expr(e, dest),\n+        ExprArray(ref es) |\n+        ExprMethodCall(_, _, ref es) |\n+        ExprTup(ref es) => es.iter().any(|e| contains_continue_expr(e, dest)),\n+        ExprCall(ref e, ref es) => contains_continue_expr(e, dest) || es.iter().any(|e| contains_continue_expr(e, dest)),\n+        ExprBinary(_, ref e1, ref e2) |\n         ExprAssign(ref e1, ref e2) |\n         ExprAssignOp(_, ref e1, ref e2) |\n-        ExprIndex(ref e1, ref e2) => never_loop_expr(e1) || never_loop_expr(e2),\n+        ExprIndex(ref e1, ref e2) => [e1, e2].iter().any(|e| contains_continue_expr(e, dest)),\n+        ExprIf(ref e, ref e2, ref e3) => [e, e2].iter().chain(e3.as_ref().iter()).any(|e| contains_continue_expr(e, dest)),\n+        ExprWhile(ref e, ref b, _) => contains_continue_expr(e, dest) || contains_continue_block(b, dest),\n+        ExprMatch(ref e, ref arms, _) => contains_continue_expr(e, dest) || arms.iter().any(|a| contains_continue_expr(&a.body, dest)),\n+        ExprBlock(ref block) => contains_continue_block(block, dest),\n+        ExprStruct(_, _, ref base) => base.as_ref().map_or(false, |e| contains_continue_expr(e, dest)),\n+        ExprAgain(d) => d.target_id.opt_id().map_or(false, |id| id == *dest),\n+        _ => false,\n+    }\n+}\n+\n+fn loop_exit_block(block: &Block) -> bool {\n+    block.stmts.iter().any(|e| loop_exit_stmt(e))\n+        || block.expr.as_ref().map_or(false, |e| loop_exit_expr(e))\n+}\n+\n+fn loop_exit_stmt(stmt: &Stmt) -> bool {\n+    match stmt.node {\n+        StmtSemi(ref e, _) |\n+        StmtExpr(ref e, _) => loop_exit_expr(e),\n+        StmtDecl(ref d, _) => loop_exit_decl(d),\n+    }\n+}\n+\n+fn loop_exit_decl(decl: &Decl) -> bool {\n+    match decl.node {\n+        DeclLocal(ref local) => local.init.as_ref().map_or(false, |e| loop_exit_expr(e)),\n+        _ => false\n+    }\n+}\n+\n+fn loop_exit_expr(expr: &Expr) -> bool {\n+    match expr.node {\n+        ExprBox(ref e) |\n+        ExprUnary(_, ref e) |\n+        ExprCast(ref e, _) |\n+        ExprType(ref e, _) |\n+        ExprField(ref e, _) |\n+        ExprTupField(ref e, _) |\n+        ExprAddrOf(_, ref e) |\n+        ExprRepeat(ref e, _) => loop_exit_expr(e),\n         ExprArray(ref es) |\n-        ExprTup(ref es) |\n-        ExprMethodCall(_, _, ref es) => es.iter().any(|e| never_loop_expr(e)),\n-        ExprCall(ref e, ref es) => never_loop_expr(e) || es.iter().any(|e| never_loop_expr(e)),\n-        ExprBlock(ref block) => never_loop_block(block),\n-        ExprStruct(_, _, ref base) => base.as_ref().map_or(false, |e| never_loop_expr(e)),\n+        ExprMethodCall(_, _, ref es) |\n+        ExprTup(ref es) => es.iter().any(|e| loop_exit_expr(e)),\n+        ExprCall(ref e, ref es) => loop_exit_expr(e) || es.iter().any(|e| loop_exit_expr(e)),\n+        ExprBinary(_, ref e1, ref e2) |\n+        ExprAssign(ref e1, ref e2) |\n+        ExprAssignOp(_, ref e1, ref e2) |\n+        ExprIndex(ref e1, ref e2) => [e1, e2].iter().any(|e| loop_exit_expr(e)),\n+        ExprIf(ref e, ref e2, ref e3) => loop_exit_expr(e) || e3.as_ref().map_or(false, |e| loop_exit_expr(e)) && loop_exit_expr(e2),\n+        ExprWhile(ref e, ref b, _) => loop_exit_expr(e) || loop_exit_block(b),\n+        ExprMatch(ref e, ref arms, _) => loop_exit_expr(e) || arms.iter().all(|a| loop_exit_expr(&a.body)),\n+        ExprBlock(ref b) => loop_exit_block(b),\n+        ExprBreak(_, _) |\n+        ExprAgain(_) |\n+        ExprRet(_) => true,\n         _ => false,\n     }\n }"}, {"sha": "e752ffd2362ca6b83d44b3b3172255ad567b095e", "filename": "clippy_tests/examples/for_loop.stderr", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b1e9c1b7e760f01fad59c55cbe0876fa04022e66/clippy_tests%2Fexamples%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1e9c1b7e760f01fad59c55cbe0876fa04022e66/clippy_tests%2Fexamples%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_tests%2Fexamples%2Ffor_loop.stderr?ref=b1e9c1b7e760f01fad59c55cbe0876fa04022e66", "patch": "@@ -53,6 +53,28 @@ error: for loop over `v.iter().next().ok_or(\"x not found\")`, which is a `Result`\n    = note: `-D for-loop-over-result` implied by `-D warnings`\n    = help: consider replacing `for x in v.iter().next().ok_or(\"x not found\")` with `if let Ok(x) = v.iter().next().ok_or(\"x not found\")`\n \n+error: this loop never actually loops\n+  --> for_loop.rs:52:5\n+   |\n+52 | /     while let Some(x) = option {\n+53 | |         println!(\"{}\", x);\n+54 | |         break;\n+55 | |     }\n+   | |_____^\n+   |\n+   = note: `-D never-loop` implied by `-D warnings`\n+\n+error: this loop never actually loops\n+  --> for_loop.rs:58:5\n+   |\n+58 | /     while let Ok(x) = result {\n+59 | |         println!(\"{}\", x);\n+60 | |         break;\n+61 | |     }\n+   | |_____^\n+   |\n+   = note: `-D never-loop` implied by `-D warnings`\n+\n error: the loop variable `i` is only used to index `vec`.\n   --> for_loop.rs:84:5\n    |"}, {"sha": "981331a1d6bde52bb4917b5f640951addb98a9dc", "filename": "clippy_tests/examples/never_loop.rs", "status": "modified", "additions": 99, "deletions": 15, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/b1e9c1b7e760f01fad59c55cbe0876fa04022e66/clippy_tests%2Fexamples%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e9c1b7e760f01fad59c55cbe0876fa04022e66/clippy_tests%2Fexamples%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_tests%2Fexamples%2Fnever_loop.rs?ref=b1e9c1b7e760f01fad59c55cbe0876fa04022e66", "patch": "@@ -1,34 +1,118 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n+#![allow(single_match, unused_assignments, unused_variables)]\n \n-#![warn(never_loop)]\n-#![allow(dead_code, unused)]\n-\n-fn main() {\n-    loop {\n-        println!(\"This is only ever printed once\");\n+fn test1() {\n+    let mut x = 0;\n+    loop { // never_loop\n+        x += 1;\n+        if x == 1 {\n+            return\n+        }\n         break;\n     }\n+}\n \n-    let x = 1;\n+fn test2() {\n+    let mut x = 0;\n     loop {\n-        println!(\"This, too\"); // but that's OK\n+        x += 1;\n         if x == 1 {\n-            break;\n+            break\n         }\n     }\n+}\n \n+fn test3() {\n+    let mut x = 0;\n+    loop { // never loops\n+        x += 1;\n+        break\n+    }\n+}\n+\n+fn test4() {\n+    let mut x = 1;\n     loop {\n-        loop {\n-            // another one\n-            break;\n+        x += 1;\n+        match x {\n+            5 => return,\n+            _ => (),\n         }\n-        break;\n     }\n+}\n+\n+fn test5() {\n+    let i = 0;\n+\tloop { // never loops\n+        while i == 0 { // never loops\n+            break\n+        }\n+        return\n+\t}\n+}\n+\n+fn test6() {\n+    let mut x = 0;\n+    'outer: loop { // never loops\n+        x += 1;\n+\t\tloop { // never loops\n+            if x == 5 { break }\n+\t\t\tcontinue 'outer\n+\t\t}\n+\t\treturn\n+\t}\n+}\n \n+fn test7() {\n+    let mut x = 0;\n     loop {\n-        loop {\n-            if x == 1 { return; }\n+        x += 1;\n+        match x {\n+            1 => continue,\n+            _ => (),\n         }\n+        return\n     }\n }\n+\n+fn test8() {\n+    let mut x = 0;\n+    loop {\n+        x += 1;\n+        match x {\n+            5 => return,\n+            _ => continue,\n+        }\n+    }\n+}\n+\n+fn test9() {\n+    let x = Some(1);\n+    while let Some(y) = x { // never loops\n+        return\n+    }\n+}\n+\n+fn test10() {\n+    for x in 0..10 { // never loops\n+        match x {\n+            1 => break,\n+            _ => return,\n+        }\n+    }\n+}\n+\n+fn main() {\n+    test1();\n+    test2();\n+    test3();\n+    test4();\n+    test5();\n+    test6();\n+    test7();\n+    test8();\n+    test9();\n+    test10();\n+}\n+"}, {"sha": "1ad1ca8de89c7e59cce66955af690dd2e3237a97", "filename": "clippy_tests/examples/never_loop.stderr", "status": "modified", "additions": 78, "deletions": 18, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/b1e9c1b7e760f01fad59c55cbe0876fa04022e66/clippy_tests%2Fexamples%2Fnever_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1e9c1b7e760f01fad59c55cbe0876fa04022e66/clippy_tests%2Fexamples%2Fnever_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_tests%2Fexamples%2Fnever_loop.stderr?ref=b1e9c1b7e760f01fad59c55cbe0876fa04022e66", "patch": "@@ -1,39 +1,99 @@\n error: this loop never actually loops\n-  --> never_loop.rs:8:5\n+  --> never_loop.rs:7:5\n    |\n-8  | /     loop {\n-9  | |         println!(\"This is only ever printed once\");\n-10 | |         break;\n-11 | |     }\n+7  | /     loop { // never_loop\n+8  | |         x += 1;\n+9  | |         if x == 1 {\n+10 | |             return\n+11 | |         }\n+12 | |         break;\n+13 | |     }\n    | |_____^\n    |\n    = note: `-D never-loop` implied by `-D warnings`\n \n error: this loop never actually loops\n-  --> never_loop.rs:21:5\n+  --> never_loop.rs:28:5\n    |\n-21 | /     loop {\n-22 | |         loop {\n-23 | |             // another one\n-24 | |             break;\n-25 | |         }\n-26 | |         break;\n-27 | |     }\n+28 | /     loop { // never loops\n+29 | |         x += 1;\n+30 | |         break\n+31 | |     }\n    | |_____^\n    |\n    = note: `-D never-loop` implied by `-D warnings`\n \n error: this loop never actually loops\n-  --> never_loop.rs:22:9\n+  --> never_loop.rs:47:2\n    |\n-22 | /         loop {\n-23 | |             // another one\n-24 | |             break;\n-25 | |         }\n+47 | / \tloop { // never loops\n+48 | | \t       while i == 0 { // never loops\n+49 | | \t           break\n+50 | | \t       }\n+51 | | \t       return\n+52 | | \t}\n+   | |__^\n+   |\n+   = note: `-D never-loop` implied by `-D warnings`\n+\n+error: this loop never actually loops\n+  --> never_loop.rs:48:9\n+   |\n+48 | /         while i == 0 { // never loops\n+49 | |             break\n+50 | |         }\n    | |_________^\n    |\n    = note: `-D never-loop` implied by `-D warnings`\n \n+error: this loop never actually loops\n+  --> never_loop.rs:57:5\n+   |\n+57 | /     'outer: loop { // never loops\n+58 | |         x += 1;\n+59 | | \t\tloop { // never loops\n+60 | |             if x == 5 { break }\n+...  |\n+63 | | \t\treturn\n+64 | | \t}\n+   | |__^\n+   |\n+   = note: `-D never-loop` implied by `-D warnings`\n+\n+error: this loop never actually loops\n+  --> never_loop.rs:59:3\n+   |\n+59 | / \t\tloop { // never loops\n+60 | | \t\t          if x == 5 { break }\n+61 | | \t\t\tcontinue 'outer\n+62 | | \t\t}\n+   | |___^\n+   |\n+   = note: `-D never-loop` implied by `-D warnings`\n+\n+error: this loop never actually loops\n+  --> never_loop.rs:92:5\n+   |\n+92 | /     while let Some(y) = x { // never loops\n+93 | |         return\n+94 | |     }\n+   | |_____^\n+   |\n+   = note: `-D never-loop` implied by `-D warnings`\n+\n+error: this loop never actually loops\n+   --> never_loop.rs:98:5\n+    |\n+98  | /     for x in 0..10 { // never loops\n+99  | |         match x {\n+100 | |             1 => break,\n+101 | |             _ => return,\n+102 | |         }\n+103 | |     }\n+    | |_____^\n+    |\n+    = note: `-D never-loop` implied by `-D warnings`\n+\n error: aborting due to previous error(s)\n \n error: Could not compile `clippy_tests`."}]}