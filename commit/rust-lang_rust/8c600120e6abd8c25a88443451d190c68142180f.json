{"sha": "8c600120e6abd8c25a88443451d190c68142180f", "node_id": "C_kwDOAAsO6NoAKDhjNjAwMTIwZTZhYmQ4YzI1YTg4NDQzNDUxZDE5MGM2ODE0MjE4MGY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-29T22:03:03Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-04T03:20:49Z"}, "message": "Normalize substs before resolving instance in NoopMethodCall lint", "tree": {"sha": "21e9a1face2347d9bd40c65a4dd85d5d9988ee11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21e9a1face2347d9bd40c65a4dd85d5d9988ee11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c600120e6abd8c25a88443451d190c68142180f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c600120e6abd8c25a88443451d190c68142180f", "html_url": "https://github.com/rust-lang/rust/commit/8c600120e6abd8c25a88443451d190c68142180f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c600120e6abd8c25a88443451d190c68142180f/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f83e0266cf7aaa4b41505c49a5fd9c2363166522", "url": "https://api.github.com/repos/rust-lang/rust/commits/f83e0266cf7aaa4b41505c49a5fd9c2363166522", "html_url": "https://github.com/rust-lang/rust/commit/f83e0266cf7aaa4b41505c49a5fd9c2363166522"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "2a3ff3a7546a423c16324e0a3ca1353b14ba9db6", "filename": "compiler/rustc_lint/src/noop_method_call.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8c600120e6abd8c25a88443451d190c68142180f/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c600120e6abd8c25a88443451d190c68142180f/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs?ref=8c600120e6abd8c25a88443451d190c68142180f", "patch": "@@ -46,7 +46,7 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n         };\n         // We only care about method calls corresponding to the `Clone`, `Deref` and `Borrow`\n         // traits and ignore any other method call.\n-        let (trait_id, did) = match cx.typeck_results().type_dependent_def(expr.hir_id) {\n+        let did = match cx.typeck_results().type_dependent_def(expr.hir_id) {\n             // Verify we are dealing with a method/associated function.\n             Some((DefKind::AssocFn, did)) => match cx.tcx.trait_of_item(did) {\n                 // Check that we're dealing with a trait method for one of the traits we care about.\n@@ -56,21 +56,22 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n                         Some(sym::Borrow | sym::Clone | sym::Deref)\n                     ) =>\n                 {\n-                    (trait_id, did)\n+                    did\n                 }\n                 _ => return,\n             },\n             _ => return,\n         };\n-        let substs = cx.typeck_results().node_substs(expr.hir_id);\n+        let substs = cx\n+            .tcx\n+            .normalize_erasing_regions(cx.param_env, cx.typeck_results().node_substs(expr.hir_id));\n         if substs.needs_subst() {\n             // We can't resolve on types that require monomorphization, so we don't handle them if\n             // we need to perform substitution.\n             return;\n         }\n-        let param_env = cx.tcx.param_env(trait_id);\n         // Resolve the trait method instance.\n-        let Ok(Some(i)) = ty::Instance::resolve(cx.tcx, param_env, did, substs) else {\n+        let Ok(Some(i)) = ty::Instance::resolve(cx.tcx, cx.param_env, did, substs) else {\n             return\n         };\n         // (Re)check that it implements the noop diagnostic."}, {"sha": "66d15cf1215dadf7898b08515e657f6df3d67e05", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-102074.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8c600120e6abd8c25a88443451d190c68142180f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-102074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c600120e6abd8c25a88443451d190c68142180f/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-102074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-102074.rs?ref=8c600120e6abd8c25a88443451d190c68142180f", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+// Checks that the NoopMethodCall lint doesn't call Instance::resolve on unresolved consts\n+\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+#[derive(Debug, Clone)]\n+pub struct Aes128CipherKey([u8; Aes128Cipher::KEY_LEN]);\n+\n+impl Aes128CipherKey {\n+    pub fn new(key: &[u8; Aes128Cipher::KEY_LEN]) -> Self {\n+        Self(key.clone())\n+    }\n+}\n+\n+#[derive(Debug, Clone)]\n+pub struct Aes128Cipher;\n+\n+impl Aes128Cipher {\n+    const KEY_LEN: usize = 16;\n+}\n+\n+fn main() {}"}]}