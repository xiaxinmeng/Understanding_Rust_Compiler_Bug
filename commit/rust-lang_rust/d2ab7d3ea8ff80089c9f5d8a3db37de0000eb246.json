{"sha": "d2ab7d3ea8ff80089c9f5d8a3db37de0000eb246", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYWI3ZDNlYThmZjgwMDg5YzlmNWQ4YTNkYjM3ZGUwMDAwZWIyNDY=", "commit": {"author": {"name": "Richo Healey", "email": "richo@psych0tik.net", "date": "2015-01-28T06:24:17Z"}, "committer": {"name": "Richo Healey", "email": "richo@psych0tik.net", "date": "2015-01-30T05:32:01Z"}, "message": "rt: allow unexported functions\n\nrust_panic is unexported, however the metadata exported will usually\ninclude it for attaching breakpoints.", "tree": {"sha": "a7e988fffe0ba8f3d80a369c129c444ff9f40aaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7e988fffe0ba8f3d80a369c129c444ff9f40aaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2ab7d3ea8ff80089c9f5d8a3db37de0000eb246", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2ab7d3ea8ff80089c9f5d8a3db37de0000eb246", "html_url": "https://github.com/rust-lang/rust/commit/d2ab7d3ea8ff80089c9f5d8a3db37de0000eb246", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2ab7d3ea8ff80089c9f5d8a3db37de0000eb246/comments", "author": {"login": "richo", "id": 476418, "node_id": "MDQ6VXNlcjQ3NjQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/476418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richo", "html_url": "https://github.com/richo", "followers_url": "https://api.github.com/users/richo/followers", "following_url": "https://api.github.com/users/richo/following{/other_user}", "gists_url": "https://api.github.com/users/richo/gists{/gist_id}", "starred_url": "https://api.github.com/users/richo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richo/subscriptions", "organizations_url": "https://api.github.com/users/richo/orgs", "repos_url": "https://api.github.com/users/richo/repos", "events_url": "https://api.github.com/users/richo/events{/privacy}", "received_events_url": "https://api.github.com/users/richo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richo", "id": 476418, "node_id": "MDQ6VXNlcjQ3NjQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/476418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richo", "html_url": "https://github.com/richo", "followers_url": "https://api.github.com/users/richo/followers", "following_url": "https://api.github.com/users/richo/following{/other_user}", "gists_url": "https://api.github.com/users/richo/gists{/gist_id}", "starred_url": "https://api.github.com/users/richo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richo/subscriptions", "organizations_url": "https://api.github.com/users/richo/orgs", "repos_url": "https://api.github.com/users/richo/repos", "events_url": "https://api.github.com/users/richo/events{/privacy}", "received_events_url": "https://api.github.com/users/richo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44ff72195e0a5a3b0bfd4b8b3cef919cfa9661ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/44ff72195e0a5a3b0bfd4b8b3cef919cfa9661ef", "html_url": "https://github.com/rust-lang/rust/commit/44ff72195e0a5a3b0bfd4b8b3cef919cfa9661ef"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "dd4d3bbc5fc631e6d71909ea7e5cc087f3e949dc", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d2ab7d3ea8ff80089c9f5d8a3db37de0000eb246/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2ab7d3ea8ff80089c9f5d8a3db37de0000eb246/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=d2ab7d3ea8ff80089c9f5d8a3db37de0000eb246", "patch": "@@ -160,6 +160,7 @@ pub fn panicking() -> bool {\n // An uninlined, unmangled function upon which to slap yer breakpoints\n #[inline(never)]\n #[no_mangle]\n+#[allow(private_no_mangle_fns)]\n fn rust_panic(cause: Box<Any + Send>) -> ! {\n     rtdebug!(\"begin_unwind()\");\n \n@@ -237,6 +238,7 @@ pub mod eabi {\n \n     #[lang=\"eh_personality\"]\n     #[no_mangle] // referenced from rust_try.ll\n+    #[allow(private_no_mangle_fns)]\n     extern fn rust_eh_personality(\n         version: c_int,\n         actions: uw::_Unwind_Action,\n@@ -252,6 +254,7 @@ pub mod eabi {\n     }\n \n     #[no_mangle] // referenced from rust_try.ll\n+    #[allow(unexported_no_mangle)]\n     pub extern \"C\" fn rust_eh_personality_catch(\n         _version: c_int,\n         actions: uw::_Unwind_Action,\n@@ -290,6 +293,7 @@ pub mod eabi {\n \n     #[lang=\"eh_personality\"]\n     #[no_mangle] // referenced from rust_try.ll\n+    #[allow(unexported_no_mangle)]\n     pub extern \"C\" fn rust_eh_personality(\n         version: c_int,\n         actions: uw::_Unwind_Action,\n@@ -305,6 +309,7 @@ pub mod eabi {\n     }\n \n     #[no_mangle] // referenced from rust_try.ll\n+    #[allow(unexported_no_mangle)]\n     pub extern \"C\" fn rust_eh_personality_catch(\n         _version: c_int,\n         actions: uw::_Unwind_Action,\n@@ -343,6 +348,7 @@ pub mod eabi {\n \n     #[lang=\"eh_personality\"]\n     #[no_mangle] // referenced from rust_try.ll\n+    #[allow(unexported_no_mangle)]\n     extern \"C\" fn rust_eh_personality(\n         state: uw::_Unwind_State,\n         ue_header: *mut uw::_Unwind_Exception,\n@@ -355,6 +361,7 @@ pub mod eabi {\n     }\n \n     #[no_mangle] // referenced from rust_try.ll\n+    #[allow(unexported_no_mangle)]\n     pub extern \"C\" fn rust_eh_personality_catch(\n         state: uw::_Unwind_State,\n         _ue_header: *mut uw::_Unwind_Exception,\n@@ -432,6 +439,7 @@ pub mod eabi {\n \n     #[lang=\"eh_personality\"]\n     #[no_mangle] // referenced from rust_try.ll\n+    #[allow(unexported_no_mangle)]\n     extern \"C\" fn rust_eh_personality(\n         exceptionRecord: *mut EXCEPTION_RECORD,\n         establisherFrame: *mut c_void,\n@@ -446,6 +454,7 @@ pub mod eabi {\n     }\n \n     #[no_mangle] // referenced from rust_try.ll\n+    #[allow(unexported_no_mangle)]\n     pub extern \"C\" fn rust_eh_personality_catch(\n         exceptionRecord: *mut EXCEPTION_RECORD,\n         establisherFrame: *mut c_void,"}]}