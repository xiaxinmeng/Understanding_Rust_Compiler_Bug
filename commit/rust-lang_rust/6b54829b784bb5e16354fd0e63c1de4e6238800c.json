{"sha": "6b54829b784bb5e16354fd0e63c1de4e6238800c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNTQ4MjliNzg0YmI1ZTE2MzU0ZmQwZTYzYzFkZTRlNjIzODgwMGM=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-03-16T17:45:39Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-04-28T21:58:50Z"}, "message": "Add `CustomEq` qualif", "tree": {"sha": "1045d8aeedc77d3c6d2b6b722f0059843b99d8d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1045d8aeedc77d3c6d2b6b722f0059843b99d8d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b54829b784bb5e16354fd0e63c1de4e6238800c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b54829b784bb5e16354fd0e63c1de4e6238800c", "html_url": "https://github.com/rust-lang/rust/commit/6b54829b784bb5e16354fd0e63c1de4e6238800c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b54829b784bb5e16354fd0e63c1de4e6238800c/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0850c3bbb89c08523136a57e89cd3d84f407d2bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/0850c3bbb89c08523136a57e89cd3d84f407d2bf", "html_url": "https://github.com/rust-lang/rust/commit/0850c3bbb89c08523136a57e89cd3d84f407d2bf"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "95a28df99aad0a2b53d4a1ff2476ef833caa7352", "filename": "src/librustc_middle/mir/query.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b54829b784bb5e16354fd0e63c1de4e6238800c/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b54829b784bb5e16354fd0e63c1de4e6238800c/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fquery.rs?ref=6b54829b784bb5e16354fd0e63c1de4e6238800c", "patch": "@@ -80,6 +80,7 @@ pub struct BorrowCheckResult<'tcx> {\n pub struct ConstQualifs {\n     pub has_mut_interior: bool,\n     pub needs_drop: bool,\n+    pub custom_eq: bool,\n }\n \n /// After we borrow check a closure, we are left with various"}, {"sha": "fc6860b40e8d27528c433313fda4f16e4a7d7294", "filename": "src/librustc_mir/transform/check_consts/qualifs.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6b54829b784bb5e16354fd0e63c1de4e6238800c/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b54829b784bb5e16354fd0e63c1de4e6238800c/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=6b54829b784bb5e16354fd0e63c1de4e6238800c", "patch": "@@ -2,16 +2,19 @@\n //!\n //! See the `Qualif` trait for more info.\n \n+use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, subst::SubstsRef, AdtDef, Ty};\n use rustc_span::DUMMY_SP;\n+use rustc_trait_selection::traits;\n \n use super::ConstCx;\n \n pub fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> ConstQualifs {\n     ConstQualifs {\n         has_mut_interior: HasMutInterior::in_any_value_of_ty(cx, ty),\n         needs_drop: NeedsDrop::in_any_value_of_ty(cx, ty),\n+        custom_eq: CustomEq::in_any_value_of_ty(cx, ty),\n     }\n }\n \n@@ -108,6 +111,39 @@ impl Qualif for NeedsDrop {\n     }\n }\n \n+/// A constant that cannot be used as part of a pattern in a `match` expression.\n+pub struct CustomEq;\n+\n+impl Qualif for CustomEq {\n+    const ANALYSIS_NAME: &'static str = \"flow_custom_eq\";\n+\n+    fn in_qualifs(qualifs: &ConstQualifs) -> bool {\n+        qualifs.custom_eq\n+    }\n+\n+    fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {\n+        // If *any* component of a composite data type does not implement `Structural{Partial,}Eq`,\n+        // we know that at least some values of that type are not structural-match. I say \"some\"\n+        // because that component may be part of an enum variant (e.g.,\n+        // `Option::<NonStructuralMatchTy>::Some`), in which case some values of this type may be\n+        // structural-match (`Option::None`).\n+        let id = cx.tcx.hir().local_def_id_to_hir_id(cx.def_id.as_local().unwrap());\n+        traits::search_for_structural_match_violation(id, cx.body.span, cx.tcx, ty).is_some()\n+    }\n+\n+    fn in_adt_inherently(\n+        cx: &ConstCx<'_, 'tcx>,\n+        adt: &'tcx AdtDef,\n+        substs: SubstsRef<'tcx>,\n+    ) -> bool {\n+        let ty = cx.tcx.mk_ty(ty::Adt(adt, substs));\n+        let id = cx.tcx.hir().local_def_id_to_hir_id(cx.def_id.as_local().unwrap());\n+        cx.tcx\n+            .infer_ctxt()\n+            .enter(|infcx| !traits::type_marked_structural(id, cx.body.span, &infcx, ty))\n+    }\n+}\n+\n // FIXME: Use `mir::visit::Visitor` for the `in_*` functions if/when it supports early return.\n \n /// Returns `true` if this `Rvalue` contains qualif `Q`."}, {"sha": "c5938426f61a93cccc16e7ceb9a42b853d3c38bb", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6b54829b784bb5e16354fd0e63c1de4e6238800c/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b54829b784bb5e16354fd0e63c1de4e6238800c/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=6b54829b784bb5e16354fd0e63c1de4e6238800c", "patch": "@@ -17,7 +17,7 @@ use std::borrow::Cow;\n use std::ops::Deref;\n \n use super::ops::{self, NonConstOp};\n-use super::qualifs::{self, HasMutInterior, NeedsDrop};\n+use super::qualifs::{self, CustomEq, HasMutInterior, NeedsDrop};\n use super::resolver::FlowSensitiveAnalysis;\n use super::{is_lang_panic_fn, ConstCx, ConstKind, Qualif};\n use crate::const_eval::{is_const_fn, is_unstable_const_fn};\n@@ -142,9 +142,35 @@ impl Qualifs<'mir, 'tcx> {\n \n         let return_loc = ccx.body.terminator_loc(return_block);\n \n+        let custom_eq = match ccx.const_kind() {\n+            // We don't care whether a `const fn` returns a value that is not structurally\n+            // matchable. Functions calls are opaque and always use type-based qualification, so\n+            // this value should never be used.\n+            ConstKind::ConstFn => true,\n+\n+            // If we know that all values of the return type are structurally matchable, there's no\n+            // need to run dataflow.\n+            ConstKind::Const | ConstKind::Static | ConstKind::StaticMut\n+                if !CustomEq::in_any_value_of_ty(ccx, ccx.body.return_ty()) =>\n+            {\n+                false\n+            }\n+\n+            ConstKind::Const | ConstKind::Static | ConstKind::StaticMut => {\n+                let mut cursor = FlowSensitiveAnalysis::new(CustomEq, ccx)\n+                    .into_engine(ccx.tcx, &ccx.body, ccx.def_id)\n+                    .iterate_to_fixpoint()\n+                    .into_results_cursor(&ccx.body);\n+\n+                cursor.seek_after(return_loc);\n+                cursor.contains(RETURN_PLACE)\n+            }\n+        };\n+\n         ConstQualifs {\n             needs_drop: self.needs_drop(ccx, RETURN_PLACE, return_loc),\n             has_mut_interior: self.has_mut_interior(ccx, RETURN_PLACE, return_loc),\n+            custom_eq,\n         }\n     }\n }"}]}