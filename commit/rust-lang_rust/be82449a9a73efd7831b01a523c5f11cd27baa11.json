{"sha": "be82449a9a73efd7831b01a523c5f11cd27baa11", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlODI0NDlhOWE3M2VmZDc4MzFiMDFhNTIzYzVmMTFjZDI3YmFhMTE=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-05-12T13:03:39Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-05-13T05:06:42Z"}, "message": "Better error for some unresolved imports\n\nWhen trying to import nonexistent items from existing modules, specify that\nthat is what happened, rather than just reporting \"unresolved name\".", "tree": {"sha": "d94a560abe48313a59dbab2dd15fa2c75cce2b2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d94a560abe48313a59dbab2dd15fa2c75cce2b2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be82449a9a73efd7831b01a523c5f11cd27baa11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be82449a9a73efd7831b01a523c5f11cd27baa11", "html_url": "https://github.com/rust-lang/rust/commit/be82449a9a73efd7831b01a523c5f11cd27baa11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be82449a9a73efd7831b01a523c5f11cd27baa11/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8291e36f184b2a72eaae8fa745759a09c17c8db8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8291e36f184b2a72eaae8fa745759a09c17c8db8", "html_url": "https://github.com/rust-lang/rust/commit/8291e36f184b2a72eaae8fa745759a09c17c8db8"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "66aa95670a2ef1e4523fe38b4f62910562c7947f", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/be82449a9a73efd7831b01a523c5f11cd27baa11/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be82449a9a73efd7831b01a523c5f11cd27baa11/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=be82449a9a73efd7831b01a523c5f11cd27baa11", "patch": "@@ -2282,25 +2282,27 @@ pub impl Resolver {\n         }\n \n         let i = import_resolution;\n+        let mut resolve_fail = false;\n+        let mut priv_fail = false;\n         match (i.value_target, i.type_target) {\n             // If this name wasn't found in either namespace, it's definitely\n             // unresolved.\n-            (None, None) => { return Failed; }\n+            (None, None) => { resolve_fail = true; }\n             // If it's private, it's also unresolved.\n             (Some(t), None) | (None, Some(t)) => {\n                 let bindings = &mut *t.bindings;\n                 match bindings.type_def {\n                     Some(ref type_def) => {\n                         if type_def.privacy == Private {\n-                            return Failed;\n+                            priv_fail = true;\n                         }\n                     }\n                     _ => ()\n                 }\n                 match bindings.value_def {\n                     Some(ref value_def) => {\n                         if value_def.privacy == Private {\n-                            return Failed;\n+                            priv_fail = true;\n                         }\n                     }\n                     _ => ()\n@@ -2313,13 +2315,25 @@ pub impl Resolver {\n                     (Some(ref value_def), Some(ref type_def)) =>\n                         if value_def.privacy == Private\n                             && type_def.privacy == Private {\n-                            return Failed;\n+                                priv_fail = true;\n                         },\n                     _ => ()\n                 }\n             }\n         }\n \n+        if resolve_fail {\n+            self.session.err(fmt!(\"unresolved import: there is no `%s` in `%s`\",\n+                                  *self.session.str_of(source),\n+                                  self.module_to_str(containing_module)));\n+            return Failed;\n+        } else if priv_fail {\n+            self.session.err(fmt!(\"unresolved import: found `%s` in `%s` but it is private\",\n+                                  *self.session.str_of(source),\n+                                  self.module_to_str(containing_module)));\n+            return Failed;\n+        }\n+\n         assert!(import_resolution.outstanding_references >= 1);\n         import_resolution.outstanding_references -= 1;\n \n@@ -2491,7 +2505,8 @@ pub impl Resolver {\n                                                                     *segment_name));\n                         return Failed;\n                     }\n-                    self.session.span_err(span, ~\"unresolved name\");\n+                    self.session.span_err(span, fmt!(\"unresolved import: could not find %s in %s.\",\n+                                                     *segment_name, module_name));\n                     return Failed;\n                 }\n                 Indeterminate => {"}, {"sha": "7cb017091e0c67094da8c3357c3d6139b80da968", "filename": "src/test/compile-fail/import2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be82449a9a73efd7831b01a523c5f11cd27baa11/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be82449a9a73efd7831b01a523c5f11cd27baa11/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport2.rs?ref=be82449a9a73efd7831b01a523c5f11cd27baa11", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use baz::zed::bar;  //~ ERROR unresolved name\n+use baz::zed::bar;  //~ ERROR unresolved import\n //~^ ERROR failed to resolve import\n \n mod baz {}"}]}