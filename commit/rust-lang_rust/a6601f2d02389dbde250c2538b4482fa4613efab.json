{"sha": "a6601f2d02389dbde250c2538b4482fa4613efab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NjAxZjJkMDIzODlkYmRlMjUwYzI1MzhiNDQ4MmZhNDYxM2VmYWI=", "commit": {"author": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2018-06-25T18:50:20Z"}, "committer": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2018-06-25T18:56:25Z"}, "message": "Enable rust_2018_idioms warning", "tree": {"sha": "b58573a6ae51ab48cd80093848a01ec54442cf2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b58573a6ae51ab48cd80093848a01ec54442cf2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6601f2d02389dbde250c2538b4482fa4613efab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6601f2d02389dbde250c2538b4482fa4613efab", "html_url": "https://github.com/rust-lang/rust/commit/a6601f2d02389dbde250c2538b4482fa4613efab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6601f2d02389dbde250c2538b4482fa4613efab/comments", "author": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f8624e5bf6f4feb99ebe0d62b83a30c9e2747c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f8624e5bf6f4feb99ebe0d62b83a30c9e2747c4", "html_url": "https://github.com/rust-lang/rust/commit/9f8624e5bf6f4feb99ebe0d62b83a30c9e2747c4"}], "stats": {"total": 89, "additions": 29, "deletions": 60}, "files": [{"sha": "241c8579a48bab68f888e6339aa9bd7557d8ecc6", "filename": "build.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6601f2d02389dbde250c2538b4482fa4613efab/build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6601f2d02389dbde250c2538b4482fa4613efab/build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.rs?ref=a6601f2d02389dbde250c2538b4482fa4613efab", "patch": "@@ -13,9 +13,6 @@\n //! This build script was originally taken from the Rocket web framework:\n //! https://github.com/SergioBenitez/Rocket\n \n-extern crate ansi_term;\n-extern crate rustc_version;\n-\n use ansi_term::Colour::Red;\n use rustc_version::{version_meta, version_meta_for, Channel, Version, VersionMeta};\n use std::env;"}, {"sha": "2e2489cbb4a1827a288967faeed1a7322f4635dd", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6601f2d02389dbde250c2538b4482fa4613efab/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6601f2d02389dbde250c2538b4482fa4613efab/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=a6601f2d02389dbde250c2538b4482fa4613efab", "patch": "@@ -134,7 +134,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyAndPaste {\n \n /// Implementation of `IF_SAME_THEN_ELSE`.\n fn lint_same_then_else(cx: &LateContext, blocks: &[&Block]) {\n-    let eq: &Fn(&&Block, &&Block) -> bool = &|&lhs, &rhs| -> bool { SpanlessEq::new(cx).eq_block(lhs, rhs) };\n+    let eq: &dyn Fn(&&Block, &&Block) -> bool = &|&lhs, &rhs| -> bool { SpanlessEq::new(cx).eq_block(lhs, rhs) };\n \n     if let Some((i, j)) = search_same_sequenced(blocks, eq) {\n         span_note_and_lint(\n@@ -150,13 +150,13 @@ fn lint_same_then_else(cx: &LateContext, blocks: &[&Block]) {\n \n /// Implementation of `IFS_SAME_COND`.\n fn lint_same_cond(cx: &LateContext, conds: &[&Expr]) {\n-    let hash: &Fn(&&Expr) -> u64 = &|expr| -> u64 {\n+    let hash: &dyn Fn(&&Expr) -> u64 = &|expr| -> u64 {\n         let mut h = SpanlessHash::new(cx, cx.tables);\n         h.hash_expr(expr);\n         h.finish()\n     };\n \n-    let eq: &Fn(&&Expr, &&Expr) -> bool = &|&lhs, &rhs| -> bool { SpanlessEq::new(cx).ignore_fn().eq_expr(lhs, rhs) };\n+    let eq: &dyn Fn(&&Expr, &&Expr) -> bool = &|&lhs, &rhs| -> bool { SpanlessEq::new(cx).ignore_fn().eq_expr(lhs, rhs) };\n \n     if let Some((i, j)) = search_same(conds, hash, eq) {\n         span_note_and_lint("}, {"sha": "43fcd78677387100a8e22bb87d3ea5171e5b7e54", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 31, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a6601f2d02389dbde250c2538b4482fa4613efab/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6601f2d02389dbde250c2538b4482fa4613efab/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a6601f2d02389dbde250c2538b4482fa4613efab", "patch": "@@ -12,50 +12,23 @@\n #![feature(iterator_find_map)]\n #![feature(macro_at_most_once_rep)]\n #![feature(rust_2018_preview)]\n+#![warn(rust_2018_idioms)]\n \n-extern crate cargo_metadata;\n #[macro_use]\n extern crate rustc;\n-extern crate rustc_target;\n-extern crate rustc_typeck;\n-extern crate syntax;\n-extern crate syntax_pos;\n \n-extern crate toml;\n-\n-// for unicode nfc normalization\n-\n-extern crate unicode_normalization;\n-\n-// for semver check in attrs.rs\n-\n-extern crate semver;\n-\n-// for regex checking\n-\n-extern crate regex_syntax;\n-\n-// for finding minimal boolean expressions\n-\n-extern crate quine_mc_cluskey;\n-\n-extern crate rustc_errors;\n-extern crate rustc_plugin;\n+use toml;\n+use rustc_plugin;\n \n #[macro_use]\n extern crate matches as matches_macro;\n \n-extern crate serde;\n #[macro_use]\n extern crate serde_derive;\n \n #[macro_use]\n extern crate lazy_static;\n \n-extern crate itertools;\n-extern crate pulldown_cmark;\n-extern crate url;\n-\n #[macro_use]\n extern crate if_chain;\n \n@@ -211,7 +184,7 @@ pub mod zero_div_zero;\n // end lints modules, do not remove this comment, it\u2019s used in `update_lints`\n \n mod reexport {\n-    pub use syntax::ast::{Name, NodeId};\n+    crate use syntax::ast::{Name, NodeId};\n }\n \n #[cfg_attr(rustfmt, rustfmt_skip)]"}, {"sha": "9b6c30f7f4ca67e5f327536e371839a3f3c48725", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a6601f2d02389dbde250c2538b4482fa4613efab/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6601f2d02389dbde250c2538b4482fa4613efab/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=a6601f2d02389dbde250c2538b4482fa4613efab", "patch": "@@ -90,7 +90,7 @@ pub(super) enum Radix {\n \n impl Radix {\n     /// Return a reasonable digit group size for this radix.\n-    pub fn suggest_grouping(&self) -> usize {\n+    crate fn suggest_grouping(&self) -> usize {\n         match *self {\n             Radix::Binary | Radix::Hexadecimal => 4,\n             Radix::Octal | Radix::Decimal => 3,\n@@ -101,19 +101,19 @@ impl Radix {\n #[derive(Debug)]\n pub(super) struct DigitInfo<'a> {\n     /// Characters of a literal between the radix prefix and type suffix.\n-    pub digits: &'a str,\n+    crate digits: &'a str,\n     /// Which radix the literal was represented in.\n-    pub radix: Radix,\n+    crate radix: Radix,\n     /// The radix prefix, if present.\n-    pub prefix: Option<&'a str>,\n+    crate prefix: Option<&'a str>,\n     /// The type suffix, including preceding underscore if present.\n-    pub suffix: Option<&'a str>,\n+    crate suffix: Option<&'a str>,\n     /// True for floating-point literals.\n-    pub float: bool,\n+    crate float: bool,\n }\n \n impl<'a> DigitInfo<'a> {\n-    pub fn new(lit: &'a str, float: bool) -> Self {\n+    crate fn new(lit: &'a str, float: bool) -> Self {\n         // Determine delimiter for radix prefix, if present, and radix.\n         let radix = if lit.starts_with(\"0x\") {\n             Radix::Hexadecimal\n@@ -160,7 +160,7 @@ impl<'a> DigitInfo<'a> {\n     }\n \n     /// Returns digits grouped in a sensible way.\n-    pub fn grouping_hint(&self) -> String {\n+    crate fn grouping_hint(&self) -> String {\n         let group_size = self.radix.suggest_grouping();\n         if self.digits.contains('.') {\n             let mut parts = self.digits.split('.');\n@@ -227,7 +227,7 @@ enum WarningType {\n }\n \n impl WarningType {\n-    pub fn display(&self, grouping_hint: &str, cx: &EarlyContext, span: syntax_pos::Span) {\n+    crate fn display(&self, grouping_hint: &str, cx: &EarlyContext, span: syntax_pos::Span) {\n         match self {\n             WarningType::UnreadableLiteral => span_lint_and_sugg(\n                 cx,"}, {"sha": "05abdd2f13c9fb917c11acc00b6af47c2f4734b0", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a6601f2d02389dbde250c2538b4482fa4613efab/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6601f2d02389dbde250c2538b4482fa4613efab/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=a6601f2d02389dbde250c2538b4482fa4613efab", "patch": "@@ -76,6 +76,15 @@ lazy_static! {\n macro_rules! define_Conf {\n     ($(#[$doc: meta] ($rust_name: ident, $rust_name_str: expr, $default: expr => $($ty: tt)+),)+) => {\n         pub use self::helpers::Conf;\n+        // FIXME(mati865): remove #[allow(rust_2018_idioms)] when it's fixed:\n+        //\n+        // warning: `extern crate` is not idiomatic in the new edition\n+        //    --> src/utils/conf.rs:82:22\n+        //     |\n+        // 82  |               #[derive(Deserialize)]\n+        //     |                        ^^^^^^^^^^^ help: convert it to a `use`\n+        //\n+        #[allow(rust_2018_idioms)]\n         mod helpers {\n             /// Type used to store lint configuration.\n             #[derive(Deserialize)]\n@@ -92,7 +101,7 @@ macro_rules! define_Conf {\n                 mod $rust_name {\n                     use serde;\n                     use serde::Deserialize;\n-                    pub fn deserialize<'de, D: serde::Deserializer<'de>>(deserializer: D)\n+                    crate fn deserialize<'de, D: serde::Deserializer<'de>>(deserializer: D)\n                     -> Result<define_Conf!(TY $($ty)+), D::Error> {\n                         type T = define_Conf!(TY $($ty)+);\n                         Ok(T::deserialize(deserializer).unwrap_or_else(|e| {"}, {"sha": "585edcd82a6c6b5556767cfae819b0ba0cbca392", "filename": "src/driver.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a6601f2d02389dbde250c2538b4482fa4613efab/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6601f2d02389dbde250c2538b4482fa4613efab/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=a6601f2d02389dbde250c2538b4482fa4613efab", "patch": "@@ -3,16 +3,8 @@\n #![feature(rustc_private)]\n #![allow(unknown_lints, missing_docs_in_private_items)]\n \n-extern crate clippy_lints;\n-extern crate getopts;\n-extern crate rustc;\n-extern crate rustc_codegen_utils;\n-extern crate rustc_driver;\n-extern crate rustc_errors;\n-extern crate rustc_plugin;\n-extern crate syntax;\n-\n-use rustc_driver::{driver::CompileController, Compilation};\n+use rustc_driver::{self, driver::CompileController, Compilation};\n+use rustc_plugin;\n use std::process::{exit, Command};\n \n #[allow(print_stdout)]"}, {"sha": "6ff15e2cd89024e7b106b62eb5113cd66bf1a79a", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6601f2d02389dbde250c2538b4482fa4613efab/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6601f2d02389dbde250c2538b4482fa4613efab/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=a6601f2d02389dbde250c2538b4482fa4613efab", "patch": "@@ -5,12 +5,10 @@\n #![feature(macro_vis_matcher)]\n #![allow(unknown_lints)]\n #![allow(missing_docs_in_private_items)]\n+#![warn(rust_2018_idioms)]\n \n-extern crate rustc_plugin;\n use rustc_plugin::Registry;\n \n-extern crate clippy_lints;\n-\n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n     reg.sess.lint_store.with_read_lock(|lint_store| {"}]}