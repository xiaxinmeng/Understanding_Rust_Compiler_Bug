{"sha": "5192ddfa2e1d762af6f925568170e6bae71fee33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxOTJkZGZhMmUxZDc2MmFmNmY5MjU1NjgxNzBlNmJhZTcxZmVlMzM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-18T12:04:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-18T12:35:04Z"}, "message": "feat: include full path in the cyclic deps error", "tree": {"sha": "7669e92d2963a751ac4967cc91b53c6107dcc203", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7669e92d2963a751ac4967cc91b53c6107dcc203"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5192ddfa2e1d762af6f925568170e6bae71fee33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5192ddfa2e1d762af6f925568170e6bae71fee33", "html_url": "https://github.com/rust-lang/rust/commit/5192ddfa2e1d762af6f925568170e6bae71fee33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5192ddfa2e1d762af6f925568170e6bae71fee33/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d7eea9e3aa1c06a2d7391b8a2b32c9485c1f40c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d7eea9e3aa1c06a2d7391b8a2b32c9485c1f40c", "html_url": "https://github.com/rust-lang/rust/commit/8d7eea9e3aa1c06a2d7391b8a2b32c9485c1f40c"}], "stats": {"total": 57, "additions": 42, "deletions": 15}, "files": [{"sha": "671039e46bcdb42a838a9cc321f9c1ee9ec77ef4", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 42, "deletions": 15, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/5192ddfa2e1d762af6f925568170e6bae71fee33/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5192ddfa2e1d762af6f925568170e6bae71fee33/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=5192ddfa2e1d762af6f925568170e6bae71fee33", "patch": "@@ -247,12 +247,17 @@ impl CrateGraph {\n         to: CrateId,\n     ) -> Result<(), CyclicDependenciesError> {\n         let _p = profile::span(\"add_dep\");\n-        if self.dfs_find(from, to, &mut FxHashSet::default()) {\n-            return Err(CyclicDependenciesError {\n-                from: (from, self[from].display_name.clone()),\n-                to: (to, self[to].display_name.clone()),\n-            });\n+\n+        // Check if adding a dep from `from` to `to` creates a cycle. To figure\n+        // that out, look for a  path in the *opposite* direction, from `to` to\n+        // `from`.\n+        if let Some(path) = self.find_path(&mut FxHashSet::default(), to, from) {\n+            let path = path.into_iter().map(|it| (it, self[it].display_name.clone())).collect();\n+            let err = CyclicDependenciesError { path };\n+            assert!(err.from().0 == from && err.to().0 == to);\n+            return Err(err);\n         }\n+\n         self.arena.get_mut(&from).unwrap().add_dep(name, to);\n         Ok(())\n     }\n@@ -361,22 +366,29 @@ impl CrateGraph {\n         start\n     }\n \n-    fn dfs_find(&self, target: CrateId, from: CrateId, visited: &mut FxHashSet<CrateId>) -> bool {\n+    fn find_path(\n+        &self,\n+        visited: &mut FxHashSet<CrateId>,\n+        from: CrateId,\n+        to: CrateId,\n+    ) -> Option<Vec<CrateId>> {\n         if !visited.insert(from) {\n-            return false;\n+            return None;\n         }\n \n-        if target == from {\n-            return true;\n+        if from == to {\n+            return Some(vec![to]);\n         }\n \n         for dep in &self[from].dependencies {\n             let crate_id = dep.crate_id;\n-            if self.dfs_find(target, crate_id, visited) {\n-                return true;\n+            if let Some(mut path) = self.find_path(visited, crate_id, to) {\n+                path.push(from);\n+                return Some(path);\n             }\n         }\n-        false\n+\n+        None\n     }\n \n     // Work around for https://github.com/rust-analyzer/rust-analyzer/issues/6038.\n@@ -481,8 +493,16 @@ impl std::error::Error for ParseEditionError {}\n \n #[derive(Debug)]\n pub struct CyclicDependenciesError {\n-    from: (CrateId, Option<CrateDisplayName>),\n-    to: (CrateId, Option<CrateDisplayName>),\n+    path: Vec<(CrateId, Option<CrateDisplayName>)>,\n+}\n+\n+impl CyclicDependenciesError {\n+    fn from(&self) -> &(CrateId, Option<CrateDisplayName>) {\n+        self.path.first().unwrap()\n+    }\n+    fn to(&self) -> &(CrateId, Option<CrateDisplayName>) {\n+        self.path.last().unwrap()\n+    }\n }\n \n impl fmt::Display for CyclicDependenciesError {\n@@ -491,7 +511,14 @@ impl fmt::Display for CyclicDependenciesError {\n             Some(it) => format!(\"{}({:?})\", it, id),\n             None => format!(\"{:?}\", id),\n         };\n-        write!(f, \"cyclic deps: {} -> {}\", render(&self.from), render(&self.to))\n+        let path = self.path.iter().rev().map(render).collect::<Vec<String>>().join(\" -> \");\n+        write!(\n+            f,\n+            \"cyclic deps: {} -> {}, alternative path: {}\",\n+            render(&self.from()),\n+            render(&self.to()),\n+            path\n+        )\n     }\n }\n "}]}