{"sha": "0002b5af2e6096483ac6975fce47b361b34aa7cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMDJiNWFmMmU2MDk2NDgzYWM2OTc1ZmNlNDdiMzYxYjM0YWE3Y2Q=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-09-04T10:37:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-04T10:37:22Z"}, "message": "Merge pull request #328 from dwrensha/rustup\n\nupdate for upstream rename: CodeExtent -> Scope", "tree": {"sha": "0c8e163fe343b2b834073c6136dfcc3880d49dd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c8e163fe343b2b834073c6136dfcc3880d49dd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0002b5af2e6096483ac6975fce47b361b34aa7cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0002b5af2e6096483ac6975fce47b361b34aa7cd", "html_url": "https://github.com/rust-lang/rust/commit/0002b5af2e6096483ac6975fce47b361b34aa7cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0002b5af2e6096483ac6975fce47b361b34aa7cd/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "324384375537ef1e40f7fad550ba1da83e2d1458", "url": "https://api.github.com/repos/rust-lang/rust/commits/324384375537ef1e40f7fad550ba1da83e2d1458", "html_url": "https://github.com/rust-lang/rust/commit/324384375537ef1e40f7fad550ba1da83e2d1458"}, {"sha": "10101dd9f488e6757838b51a1fb09781897ccd63", "url": "https://api.github.com/repos/rust-lang/rust/commits/10101dd9f488e6757838b51a1fb09781897ccd63", "html_url": "https://github.com/rust-lang/rust/commit/10101dd9f488e6757838b51a1fb09781897ccd63"}], "stats": {"total": 61, "additions": 38, "deletions": 23}, "files": [{"sha": "44777caa4f5d2f8e085c9990a3ef27135dd03064", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0002b5af2e6096483ac6975fce47b361b34aa7cd/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0002b5af2e6096483ac6975fce47b361b34aa7cd/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=0002b5af2e6096483ac6975fce47b361b34aa7cd", "patch": "@@ -4,7 +4,7 @@ use std::fmt::Write;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map::definitions::DefPathData;\n use rustc::middle::const_val::ConstVal;\n-use rustc::middle::region::CodeExtent;\n+use rustc::middle::region;\n use rustc::mir;\n use rustc::traits::Reveal;\n use rustc::ty::layout::{self, Layout, Size, Align, HasDataLayout};\n@@ -106,7 +106,7 @@ pub enum StackPopCleanup {\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub struct DynamicLifetime {\n     pub frame: usize,\n-    pub region: Option<CodeExtent>, // \"None\" indicates \"until the function ends\"\n+    pub region: Option<region::Scope>, // \"None\" indicates \"until the function ends\"\n }\n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "7454f1c908e0f1d34b5f16986308a355af6e8513", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0002b5af2e6096483ac6975fce47b361b34aa7cd/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0002b5af2e6096483ac6975fce47b361b34aa7cd/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=0002b5af2e6096483ac6975fce47b361b34aa7cd", "patch": "@@ -6,7 +6,7 @@ use std::cell::Cell;\n use rustc::ty::Instance;\n use rustc::ty::layout::{self, TargetDataLayout, HasDataLayout};\n use syntax::ast::Mutability;\n-use rustc::middle::region::CodeExtent;\n+use rustc::middle::region;\n \n use super::{EvalResult, EvalErrorKind, PrimVal, Pointer, EvalContext, DynamicLifetime, Machine,\n             RangeMap};\n@@ -26,7 +26,7 @@ pub enum AccessKind {\n struct LockInfo {\n     /// Stores for which lifetimes (of the original write lock) we got\n     /// which suspensions.\n-    suspended: HashMap<DynamicLifetime, Vec<CodeExtent>>,\n+    suspended: HashMap<DynamicLifetime, Vec<region::Scope>>,\n     /// The current state of the lock that's actually effective.\n     active: Lock,\n }\n@@ -567,7 +567,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         &mut self,\n         ptr: MemoryPointer,\n         len: u64,\n-        region: Option<CodeExtent>,\n+        region: Option<region::Scope>,\n         kind: AccessKind,\n     ) -> EvalResult<'tcx> {\n         let frame = self.cur_frame;\n@@ -620,8 +620,8 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         &mut self,\n         ptr: MemoryPointer,\n         len: u64,\n-        lock_region: Option<CodeExtent>,\n-        suspend: Option<CodeExtent>,\n+        lock_region: Option<region::Scope>,\n+        suspend: Option<region::Scope>,\n     ) -> EvalResult<'tcx> {\n         assert!(len > 0);\n         let cur_frame = self.cur_frame;\n@@ -680,8 +680,8 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         &mut self,\n         ptr: MemoryPointer,\n         len: u64,\n-        lock_region: Option<CodeExtent>,\n-        suspended_region: CodeExtent,\n+        lock_region: Option<region::Scope>,\n+        suspended_region: region::Scope,\n     ) -> EvalResult<'tcx> {\n         assert!(len > 0);\n         let cur_frame = self.cur_frame;\n@@ -741,7 +741,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         Ok(())\n     }\n \n-    pub(crate) fn locks_lifetime_ended(&mut self, ending_region: Option<CodeExtent>) {\n+    pub(crate) fn locks_lifetime_ended(&mut self, ending_region: Option<region::Scope>) {\n         let cur_frame = self.cur_frame;\n         trace!(\n             \"Releasing frame {} locks that expire at {:?}\","}, {"sha": "7dfc781520cde0e8ce782a349f5b3ce65e2ca58f", "filename": "src/librustc_mir/interpret/validation.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0002b5af2e6096483ac6975fce47b361b34aa7cd/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0002b5af2e6096483ac6975fce47b361b34aa7cd/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs?ref=0002b5af2e6096483ac6975fce47b361b34aa7cd", "patch": "@@ -6,7 +6,7 @@ use rustc::ty::subst::{Substs, Subst};\n use rustc::traits;\n use rustc::infer::InferCtxt;\n use rustc::traits::Reveal;\n-use rustc::middle::region::CodeExtent;\n+use rustc::middle::region;\n \n use super::{EvalError, EvalResult, EvalErrorKind, EvalContext, DynamicLifetime, AccessKind, Value,\n             Lvalue, LvalueExtra, Machine};\n@@ -17,8 +17,8 @@ pub type ValidationQuery<'tcx> = ValidationOperand<'tcx, Lvalue>;\n enum ValidationMode {\n     Acquire,\n     /// Recover because the given region ended\n-    Recover(CodeExtent),\n-    ReleaseUntil(Option<CodeExtent>),\n+    Recover(region::Scope),\n+    ReleaseUntil(Option<region::Scope>),\n }\n \n impl ValidationMode {\n@@ -89,34 +89,34 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         let mode = match op {\n             ValidationOp::Acquire => ValidationMode::Acquire,\n             ValidationOp::Release => ValidationMode::ReleaseUntil(None),\n-            ValidationOp::Suspend(ce) => {\n+            ValidationOp::Suspend(scope) => {\n                 if query.mutbl == MutMutable {\n                     let lft = DynamicLifetime {\n                         frame: self.cur_frame(),\n-                        region: Some(ce),\n+                        region: Some(scope),\n                     };\n-                    trace!(\"Suspending {:?} until {:?}\", query, ce);\n+                    trace!(\"Suspending {:?} until {:?}\", query, scope);\n                     self.suspended.entry(lft).or_insert_with(Vec::new).push(\n                         query.clone(),\n                     );\n                 }\n-                ValidationMode::ReleaseUntil(Some(ce))\n+                ValidationMode::ReleaseUntil(Some(scope))\n             }\n         };\n         self.validate(query, mode)\n     }\n \n-    pub(crate) fn end_region(&mut self, ce: CodeExtent) -> EvalResult<'tcx> {\n-        self.memory.locks_lifetime_ended(Some(ce));\n+    pub(crate) fn end_region(&mut self, scope: region::Scope) -> EvalResult<'tcx> {\n+        self.memory.locks_lifetime_ended(Some(scope));\n         // Recover suspended lvals\n         let lft = DynamicLifetime {\n             frame: self.cur_frame(),\n-            region: Some(ce),\n+            region: Some(scope),\n         };\n         if let Some(queries) = self.suspended.remove(&lft) {\n             for query in queries {\n                 trace!(\"Recovering {:?} from suspension\", query);\n-                self.validate(query, ValidationMode::Recover(ce))?;\n+                self.validate(query, ValidationMode::Recover(scope))?;\n             }\n         }\n         Ok(())\n@@ -268,7 +268,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         &mut self,\n         val: Value,\n         pointee_ty: Ty<'tcx>,\n-        re: Option<CodeExtent>,\n+        re: Option<region::Scope>,\n         mutbl: Mutability,\n         mode: ValidationMode,\n     ) -> EvalResult<'tcx> {\n@@ -459,7 +459,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 // we record the region of this borrow to the context.\n                 if query.re == None {\n                     match *region {\n-                        ReScope(ce) => query.re = Some(ce),\n+                        ReScope(scope) => query.re = Some(scope),\n                         // It is possible for us to encounter erased lifetimes here because the lifetimes in\n                         // this functions' Subst will be erased.\n                         _ => {}"}, {"sha": "fd44e04ee22c80e0827a2934b2e5138e4f0becb7", "filename": "tests/run-pass/dst-field-align.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0002b5af2e6096483ac6975fce47b361b34aa7cd/tests%2Frun-pass%2Fdst-field-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0002b5af2e6096483ac6975fce47b361b34aa7cd/tests%2Frun-pass%2Fdst-field-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdst-field-align.rs?ref=0002b5af2e6096483ac6975fce47b361b34aa7cd", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// FIXME: Broken by #296\n+// compile-flags: -Zmir-emit-validate=0\n+\n #![allow(dead_code)]\n \n struct Foo<T: ?Sized> {"}, {"sha": "194bc9be0ad6ab05613b8f63bfe2b7fd7345e275", "filename": "tests/run-pass/mir_coercions.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0002b5af2e6096483ac6975fce47b361b34aa7cd/tests%2Frun-pass%2Fmir_coercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0002b5af2e6096483ac6975fce47b361b34aa7cd/tests%2Frun-pass%2Fmir_coercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmir_coercions.rs?ref=0002b5af2e6096483ac6975fce47b361b34aa7cd", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// FIXME: investigate again once #296 is fixed\n+// compile-flags: -Zmir-emit-validate=0\n+\n #![feature(coerce_unsized, unsize)]\n \n use std::ops::CoerceUnsized;"}, {"sha": "0578ecbbb12908f5ca4ff48016bc7109662c1d7e", "filename": "tests/run-pass/non_capture_closure_to_fn_ptr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0002b5af2e6096483ac6975fce47b361b34aa7cd/tests%2Frun-pass%2Fnon_capture_closure_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0002b5af2e6096483ac6975fce47b361b34aa7cd/tests%2Frun-pass%2Fnon_capture_closure_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fnon_capture_closure_to_fn_ptr.rs?ref=0002b5af2e6096483ac6975fce47b361b34aa7cd", "patch": "@@ -1,3 +1,6 @@\n+// FIXME: investigate again once #296 is fixed\n+// compile-flags: -Zmir-emit-validate=0\n+\n // allow(const_err) to work around a bug in warnings\n #[allow(const_err)]\n static FOO: fn() = || { assert_ne!(42, 43) };"}, {"sha": "ae4a9eb5cf10efefe20a430df0004ab9ab13fba1", "filename": "tests/run-pass/subslice_array.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0002b5af2e6096483ac6975fce47b361b34aa7cd/tests%2Frun-pass%2Fsubslice_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0002b5af2e6096483ac6975fce47b361b34aa7cd/tests%2Frun-pass%2Fsubslice_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsubslice_array.rs?ref=0002b5af2e6096483ac6975fce47b361b34aa7cd", "patch": "@@ -1,3 +1,6 @@\n+// FIXME: investigate again once #296 is fixed\n+// compile-flags: -Zmir-emit-validate=0\n+\n #![feature(advanced_slice_patterns)]\n #![feature(slice_patterns)]\n "}, {"sha": "426e1360a3d14237a3a8e2afbc76154b7eda8d29", "filename": "tests/run-pass/tuple_like_enum_variant_constructor_pointer_opt.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0002b5af2e6096483ac6975fce47b361b34aa7cd/tests%2Frun-pass%2Ftuple_like_enum_variant_constructor_pointer_opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0002b5af2e6096483ac6975fce47b361b34aa7cd/tests%2Frun-pass%2Ftuple_like_enum_variant_constructor_pointer_opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftuple_like_enum_variant_constructor_pointer_opt.rs?ref=0002b5af2e6096483ac6975fce47b361b34aa7cd", "patch": "@@ -1,3 +1,6 @@\n+// FIXME: investigate again once #296 is fixed\n+// compile-flags: -Zmir-emit-validate=0\n+\n fn main() {\n     let x = 5;\n     assert_eq!(Some(&x).map(Some), Some(Some(&x)));"}]}