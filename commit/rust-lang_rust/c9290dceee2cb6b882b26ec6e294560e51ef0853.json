{"sha": "c9290dceee2cb6b882b26ec6e294560e51ef0853", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5MjkwZGNlZWUyY2I2Yjg4MmIyNmVjNmUyOTQ1NjBlNTFlZjA4NTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-04T20:30:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-04T20:30:53Z"}, "message": "Auto merge of #68558 - HeroicKatora:buf-writer-capacity, r=alexcrichton\n\nAdd a method to query the capacity of a BufWriter and BufReader\n\nBesides the obvious of retrieving the parameter used to construct the writer, this method allows consumers to control the number of `flush` calls during write operations. For `BufReader` it gives an upper bound on the returned buffer in `fill_buf` which might influence the allocation behaviour of a consumer.", "tree": {"sha": "4a562c7b3baab76e74d7e2f0b4cd02b2264474ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a562c7b3baab76e74d7e2f0b4cd02b2264474ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9290dceee2cb6b882b26ec6e294560e51ef0853", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9290dceee2cb6b882b26ec6e294560e51ef0853", "html_url": "https://github.com/rust-lang/rust/commit/c9290dceee2cb6b882b26ec6e294560e51ef0853", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9290dceee2cb6b882b26ec6e294560e51ef0853/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b0caef54a062b5e283cf15d1fad7027f631f29d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0caef54a062b5e283cf15d1fad7027f631f29d", "html_url": "https://github.com/rust-lang/rust/commit/5b0caef54a062b5e283cf15d1fad7027f631f29d"}, {"sha": "aebd0d733940d62566c66a923c7b9f7078209e98", "url": "https://api.github.com/repos/rust-lang/rust/commits/aebd0d733940d62566c66a923c7b9f7078209e98", "html_url": "https://github.com/rust-lang/rust/commit/aebd0d733940d62566c66a923c7b9f7078209e98"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "6739d4498a6bee522aa8bdb85646cefe88368227", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c9290dceee2cb6b882b26ec6e294560e51ef0853/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9290dceee2cb6b882b26ec6e294560e51ef0853/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=c9290dceee2cb6b882b26ec6e294560e51ef0853", "patch": "@@ -179,6 +179,30 @@ impl<R> BufReader<R> {\n         &self.buf[self.pos..self.cap]\n     }\n \n+    /// Returns the number of bytes the internal buffer can hold at once.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(buffered_io_capacity)]\n+    /// use std::io::{BufReader, BufRead};\n+    /// use std::fs::File;\n+    ///\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let f = File::open(\"log.txt\")?;\n+    ///     let mut reader = BufReader::new(f);\n+    ///\n+    ///     let capacity = reader.capacity();\n+    ///     let buffer = reader.fill_buf()?;\n+    ///     assert!(buffer.len() <= capacity);\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"buffered_io_capacity\", issue = \"68558\")]\n+    pub fn capacity(&self) -> usize {\n+        self.buf.len()\n+    }\n+\n     /// Unwraps this `BufReader<R>`, returning the underlying reader.\n     ///\n     /// Note that any leftover data in the internal buffer is lost. Therefore,\n@@ -576,6 +600,27 @@ impl<W: Write> BufWriter<W> {\n         &self.buf\n     }\n \n+    /// Returns the number of bytes the internal buffer can hold without flushing.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(buffered_io_capacity)]\n+    /// use std::io::BufWriter;\n+    /// use std::net::TcpStream;\n+    ///\n+    /// let buf_writer = BufWriter::new(TcpStream::connect(\"127.0.0.1:34254\").unwrap());\n+    ///\n+    /// // Check the capacity of the inner buffer\n+    /// let capacity = buf_writer.capacity();\n+    /// // Calculate how many bytes can be written without flushing\n+    /// let without_flush = capacity - buf_writer.buffer().len();\n+    /// ```\n+    #[unstable(feature = \"buffered_io_capacity\", issue = \"68558\")]\n+    pub fn capacity(&self) -> usize {\n+        self.buf.capacity()\n+    }\n+\n     /// Unwraps this `BufWriter<W>`, returning the underlying writer.\n     ///\n     /// The buffer is written out before returning the writer."}]}