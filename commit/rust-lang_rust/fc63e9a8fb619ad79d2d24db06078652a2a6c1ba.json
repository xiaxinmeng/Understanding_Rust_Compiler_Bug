{"sha": "fc63e9a8fb619ad79d2d24db06078652a2a6c1ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNjNlOWE4ZmI2MTlhZDc5ZDJkMjRkYjA2MDc4NjUyYTJhNmMxYmE=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-09-06T23:05:59Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-09-09T00:32:03Z"}, "message": "dont build abstract const for monomorphic consts", "tree": {"sha": "9715ab02f44382c748b70c523dab32131960f2cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9715ab02f44382c748b70c523dab32131960f2cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc63e9a8fb619ad79d2d24db06078652a2a6c1ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc63e9a8fb619ad79d2d24db06078652a2a6c1ba", "html_url": "https://github.com/rust-lang/rust/commit/fc63e9a8fb619ad79d2d24db06078652a2a6c1ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc63e9a8fb619ad79d2d24db06078652a2a6c1ba/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08e86440165619c57e0072eb742c7dad3cfd0950", "url": "https://api.github.com/repos/rust-lang/rust/commits/08e86440165619c57e0072eb742c7dad3cfd0950", "html_url": "https://github.com/rust-lang/rust/commit/08e86440165619c57e0072eb742c7dad3cfd0950"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "3e1719e08acfa61374f5a914d2df31732cb810ed", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fc63e9a8fb619ad79d2d24db06078652a2a6c1ba/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc63e9a8fb619ad79d2d24db06078652a2a6c1ba/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=fc63e9a8fb619ad79d2d24db06078652a2a6c1ba", "patch": "@@ -267,7 +267,36 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n         let builder =\n             AbstractConstBuilder { tcx, body_id, body: Lrc::new(body), nodes: IndexVec::new() };\n \n-        // FIXME non-constants should return Ok(None)\n+        struct IsThirPolymorphic<'a, 'tcx> {\n+            is_poly: bool,\n+            thir: &'a thir::Thir<'tcx>,\n+            tcx: TyCtxt<'tcx>,\n+        }\n+\n+        use thir::visit;\n+        impl<'a, 'tcx: 'a> visit::Visitor<'a, 'tcx> for IsThirPolymorphic<'a, 'tcx> {\n+            fn thir(&self) -> &'a thir::Thir<'tcx> {\n+                &self.thir\n+            }\n+\n+            fn visit_expr(&mut self, expr: &thir::Expr<'tcx>) {\n+                self.is_poly |= expr.ty.definitely_has_param_types_or_consts(self.tcx);\n+                if self.is_poly {\n+                    return;\n+                }\n+                visit::walk_expr(self, expr);\n+            }\n+\n+            fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) {\n+                self.is_poly |= ct.definitely_has_param_types_or_consts(self.tcx);\n+            }\n+        }\n+\n+        let mut is_poly_vis = IsThirPolymorphic { is_poly: false, thir: body, tcx };\n+        visit::walk_expr(&mut is_poly_vis, &body[body_id]);\n+        if is_poly_vis.is_poly == false {\n+            return Ok(None);\n+        }\n \n         Ok(Some(builder))\n     }"}]}