{"sha": "448a26d6960d9a4902db59a57b61ed0586933dfd", "node_id": "C_kwDOAAsO6NoAKDQ0OGEyNmQ2OTYwZDlhNDkwMmRiNTlhNTdiNjFlZDA1ODY5MzNkZmQ", "commit": {"author": {"name": "J-ZhengLi", "email": "lizheng135@huawei.com", "date": "2022-03-29T07:23:19Z"}, "committer": {"name": "J-ZhengLi", "email": "lizheng135@huawei.com", "date": "2022-03-29T07:23:19Z"}, "message": "improve parent expr check", "tree": {"sha": "f873e65ad1d466b0130354772eb61fbcc423499e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f873e65ad1d466b0130354772eb61fbcc423499e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/448a26d6960d9a4902db59a57b61ed0586933dfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/448a26d6960d9a4902db59a57b61ed0586933dfd", "html_url": "https://github.com/rust-lang/rust/commit/448a26d6960d9a4902db59a57b61ed0586933dfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/448a26d6960d9a4902db59a57b61ed0586933dfd/comments", "author": {"login": "J-ZhengLi", "id": 32276130, "node_id": "MDQ6VXNlcjMyMjc2MTMw", "avatar_url": "https://avatars.githubusercontent.com/u/32276130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/J-ZhengLi", "html_url": "https://github.com/J-ZhengLi", "followers_url": "https://api.github.com/users/J-ZhengLi/followers", "following_url": "https://api.github.com/users/J-ZhengLi/following{/other_user}", "gists_url": "https://api.github.com/users/J-ZhengLi/gists{/gist_id}", "starred_url": "https://api.github.com/users/J-ZhengLi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/J-ZhengLi/subscriptions", "organizations_url": "https://api.github.com/users/J-ZhengLi/orgs", "repos_url": "https://api.github.com/users/J-ZhengLi/repos", "events_url": "https://api.github.com/users/J-ZhengLi/events{/privacy}", "received_events_url": "https://api.github.com/users/J-ZhengLi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "J-ZhengLi", "id": 32276130, "node_id": "MDQ6VXNlcjMyMjc2MTMw", "avatar_url": "https://avatars.githubusercontent.com/u/32276130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/J-ZhengLi", "html_url": "https://github.com/J-ZhengLi", "followers_url": "https://api.github.com/users/J-ZhengLi/followers", "following_url": "https://api.github.com/users/J-ZhengLi/following{/other_user}", "gists_url": "https://api.github.com/users/J-ZhengLi/gists{/gist_id}", "starred_url": "https://api.github.com/users/J-ZhengLi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/J-ZhengLi/subscriptions", "organizations_url": "https://api.github.com/users/J-ZhengLi/orgs", "repos_url": "https://api.github.com/users/J-ZhengLi/repos", "events_url": "https://api.github.com/users/J-ZhengLi/events{/privacy}", "received_events_url": "https://api.github.com/users/J-ZhengLi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b128624ed44223b7d0b61438b0d02fc91419e43", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b128624ed44223b7d0b61438b0d02fc91419e43", "html_url": "https://github.com/rust-lang/rust/commit/4b128624ed44223b7d0b61438b0d02fc91419e43"}], "stats": {"total": 44, "additions": 32, "deletions": 12}, "files": [{"sha": "3703488632b860cbb95c69b0d830f0d72c5d0f31", "filename": "clippy_lints/src/matches/needless_match.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/448a26d6960d9a4902db59a57b61ed0586933dfd/clippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448a26d6960d9a4902db59a57b61ed0586933dfd/clippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs?ref=448a26d6960d9a4902db59a57b61ed0586933dfd", "patch": "@@ -14,7 +14,7 @@ use rustc_span::sym;\n use rustc_typeck::hir_ty_to_ty;\n \n pub(crate) fn check_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr: &Expr<'_>) {\n-    if arms.len() > 1 && !is_coercion_casting(cx, ex, expr) && check_all_arms(cx, ex, arms) {\n+    if arms.len() > 1 && expr_ty_matches_p_ty(cx, ex, expr) && check_all_arms(cx, ex, arms) {\n         let mut applicability = Applicability::MachineApplicable;\n         span_lint_and_sugg(\n             cx,\n@@ -49,7 +49,7 @@ pub(crate) fn check_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>],\n /// ```\n pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>) {\n     if let Some(ref if_let) = higher::IfLet::hir(cx, ex) {\n-        if !is_else_clause(cx.tcx, ex) && !is_coercion_casting(cx, if_let.let_expr, ex) && check_if_let(cx, if_let) {\n+        if !is_else_clause(cx.tcx, ex) && expr_ty_matches_p_ty(cx, if_let.let_expr, ex) && check_if_let(cx, if_let) {\n             let mut applicability = Applicability::MachineApplicable;\n             span_lint_and_sugg(\n                 cx,\n@@ -119,39 +119,35 @@ fn strip_return<'hir>(expr: &'hir Expr<'hir>) -> &'hir Expr<'hir> {\n \n /// Manually check for coercion casting by checking if the type of the match operand or let expr\n /// differs with the assigned local variable or the funtion return type.\n-fn is_coercion_casting(cx: &LateContext<'_>, match_expr: &Expr<'_>, expr: &Expr<'_>) -> bool {\n-    if let Some(p_node) = get_parent_node(cx.tcx, expr.hir_id) {\n+fn expr_ty_matches_p_ty(cx: &LateContext<'_>, expr: &Expr<'_>, p_expr: &Expr<'_>) -> bool {\n+    if let Some(p_node) = get_parent_node(cx.tcx, p_expr.hir_id) {\n         match p_node {\n             // Compare match_expr ty with local in `let local = match match_expr {..}`\n             Node::Local(local) => {\n                 let results = cx.typeck_results();\n-                return !same_type_and_consts(results.node_type(local.hir_id), results.expr_ty(match_expr));\n+                return same_type_and_consts(results.node_type(local.hir_id), results.expr_ty(expr));\n             },\n             // compare match_expr ty with RetTy in `fn foo() -> RetTy`\n             Node::Item(..) => {\n                 if let Some(fn_decl) = p_node.fn_decl() {\n                     if let FnRetTy::Return(ret_ty) = fn_decl.output {\n-                        return !same_type_and_consts(\n-                            hir_ty_to_ty(cx.tcx, ret_ty),\n-                            cx.typeck_results().expr_ty(match_expr),\n-                        );\n+                        return same_type_and_consts(hir_ty_to_ty(cx.tcx, ret_ty), cx.typeck_results().expr_ty(expr));\n                     }\n                 }\n             },\n             // check the parent expr for this whole block `{ match match_expr {..} }`\n             Node::Block(block) => {\n                 if let Some(block_parent_expr) = get_parent_expr_for_hir(cx, block.hir_id) {\n-                    return is_coercion_casting(cx, match_expr, block_parent_expr);\n+                    return expr_ty_matches_p_ty(cx, expr, block_parent_expr);\n                 }\n             },\n             // recursively call on `if xxx {..}` etc.\n             Node::Expr(p_expr) => {\n-                return is_coercion_casting(cx, match_expr, p_expr);\n+                return expr_ty_matches_p_ty(cx, expr, p_expr);\n             },\n             _ => {},\n         }\n     }\n-\n     false\n }\n "}, {"sha": "9ccccaa1725a65dc8867a1a48e9698c811682886", "filename": "tests/ui/needless_match.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/448a26d6960d9a4902db59a57b61ed0586933dfd/tests%2Fui%2Fneedless_match.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/448a26d6960d9a4902db59a57b61ed0586933dfd/tests%2Fui%2Fneedless_match.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_match.fixed?ref=448a26d6960d9a4902db59a57b61ed0586933dfd", "patch": "@@ -182,4 +182,16 @@ mod issue8551 {\n     }\n }\n \n+trait Tr {\n+    fn as_mut(&mut self) -> Result<&mut i32, &mut i32>;\n+}\n+impl Tr for Result<i32, i32> {\n+    fn as_mut(&mut self) -> Result<&mut i32, &mut i32> {\n+        match self {\n+            Ok(x) => Ok(x),\n+            Err(e) => Err(e),\n+        }\n+    }\n+}\n+\n fn main() {}"}, {"sha": "d210ecff7f1633a8a6e157e643cc9d42725457e9", "filename": "tests/ui/needless_match.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/448a26d6960d9a4902db59a57b61ed0586933dfd/tests%2Fui%2Fneedless_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448a26d6960d9a4902db59a57b61ed0586933dfd/tests%2Fui%2Fneedless_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_match.rs?ref=448a26d6960d9a4902db59a57b61ed0586933dfd", "patch": "@@ -219,4 +219,16 @@ mod issue8551 {\n     }\n }\n \n+trait Tr {\n+    fn as_mut(&mut self) -> Result<&mut i32, &mut i32>;\n+}\n+impl Tr for Result<i32, i32> {\n+    fn as_mut(&mut self) -> Result<&mut i32, &mut i32> {\n+        match self {\n+            Ok(x) => Ok(x),\n+            Err(e) => Err(e),\n+        }\n+    }\n+}\n+\n fn main() {}"}]}