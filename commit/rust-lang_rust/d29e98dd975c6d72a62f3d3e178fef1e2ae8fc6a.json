{"sha": "d29e98dd975c6d72a62f3d3e178fef1e2ae8fc6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyOWU5OGRkOTc1YzZkNzJhNjJmM2QzZTE3OGZlZjFlMmFlOGZjNmE=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-03T10:06:32Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-03T10:06:32Z"}, "message": "Merge #409\n\n409: Add Analysis#teype_of test r=matklad a=h-michael\n\n\n\nCo-authored-by: Hirokazu Hata <h.hata.ai.t@gmail.com>", "tree": {"sha": "47ca5c1b38a62cdec8548d6060b68a1cb3a8a5da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47ca5c1b38a62cdec8548d6060b68a1cb3a8a5da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d29e98dd975c6d72a62f3d3e178fef1e2ae8fc6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d29e98dd975c6d72a62f3d3e178fef1e2ae8fc6a", "html_url": "https://github.com/rust-lang/rust/commit/d29e98dd975c6d72a62f3d3e178fef1e2ae8fc6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d29e98dd975c6d72a62f3d3e178fef1e2ae8fc6a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "e92f2ffe270c6a9fca312fb8a53cd0da0dd01fde", "url": "https://api.github.com/repos/rust-lang/rust/commits/e92f2ffe270c6a9fca312fb8a53cd0da0dd01fde", "html_url": "https://github.com/rust-lang/rust/commit/e92f2ffe270c6a9fca312fb8a53cd0da0dd01fde"}, {"sha": "4363e7b9b2de715b0108b53d40eb33ed2fcc8532", "url": "https://api.github.com/repos/rust-lang/rust/commits/4363e7b9b2de715b0108b53d40eb33ed2fcc8532", "html_url": "https://github.com/rust-lang/rust/commit/4363e7b9b2de715b0108b53d40eb33ed2fcc8532"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "375f808bb94f72c9d866f2dc940333128fe2f74d", "filename": "crates/ra_analysis/tests/type_of.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/d29e98dd975c6d72a62f3d3e178fef1e2ae8fc6a/crates%2Fra_analysis%2Ftests%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29e98dd975c6d72a62f3d3e178fef1e2ae8fc6a/crates%2Fra_analysis%2Ftests%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftype_of.rs?ref=d29e98dd975c6d72a62f3d3e178fef1e2ae8fc6a", "patch": "@@ -0,0 +1,79 @@\n+use ra_analysis::{\n+    mock_analysis::{single_file_with_range},\n+};\n+\n+#[test]\n+fn test_type_of_for_function() {\n+    let (analysis, range) = single_file_with_range(\n+        \"\n+        pub fn foo() -> u32 { 1 };\n+\n+        fn main() {\n+            let foo_test = <|>foo()<|>;\n+        }\n+        \",\n+    );\n+\n+    let type_name = analysis.type_of(range).unwrap().unwrap();\n+    assert_eq!(\"u32\", &type_name);\n+}\n+\n+// FIXME: improve type_of to make this work\n+#[test]\n+fn test_type_of_for_num() {\n+    let (analysis, range) = single_file_with_range(\n+        r#\"\n+        fn main() {\n+            let foo_test = <|>\"foo\"<|>;\n+        }\n+        \"#,\n+    );\n+\n+    assert!(analysis.type_of(range).unwrap().is_none());\n+}\n+// FIXME: improve type_of to make this work\n+#[test]\n+fn test_type_of_for_binding() {\n+    let (analysis, range) = single_file_with_range(\n+        \"\n+        pub fn foo() -> u32 { 1 };\n+\n+        fn main() {\n+            let <|>foo_test<|> = foo();\n+        }\n+        \",\n+    );\n+\n+    assert!(analysis.type_of(range).unwrap().is_none());\n+}\n+\n+// FIXME: improve type_of to make this work\n+#[test]\n+fn test_type_of_for_expr_1() {\n+    let (analysis, range) = single_file_with_range(\n+        \"\n+        fn main() {\n+            let foo = <|>1 + foo_test<|>;\n+        }\n+        \",\n+    );\n+\n+    let type_name = analysis.type_of(range).unwrap().unwrap();\n+    assert_eq!(\"[unknown]\", &type_name);\n+}\n+\n+// FIXME: improve type_of to make this work\n+#[test]\n+fn test_type_of_for_expr_2() {\n+    let (analysis, range) = single_file_with_range(\n+        \"\n+        fn main() {\n+            let foo: usize = 1;\n+            let bar = <|>1 + foo_test<|>;\n+        }\n+        \",\n+    );\n+\n+    let type_name = analysis.type_of(range).unwrap().unwrap();\n+    assert_eq!(\"[unknown]\", &type_name);\n+}"}]}