{"sha": "1e88a1769f69f944e16cba13ba174c1d6e494b36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlODhhMTc2OWY2OWY5NDRlMTZjYmExM2JhMTc0YzFkNmU0OTRiMzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-21T10:21:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-21T10:21:01Z"}, "message": "Auto merge of #80205 - tomprogrammer:prettyprint-pattern-mut-binding, r=davidtwco\n\nFix pretty printing an AST representing `&(mut ident)`\n\nThe PR fixes a misguiding help diagnostic in the parser that I reported in #80186. I discovered that the parsers recovery and reporting logic was correct but the pretty printer produced wrong code for the example. (Details in https://github.com/rust-lang/rust/issues/80186#issuecomment-748498676)\n\nExample:\n```rust\n#![allow(unused_variables)]\nfn main() {\n    let mut &x = &0;\n}\n```\n\nThe AST fragment\n\n`PatKind::Ref(PatKind::Ident(BindingMode::ByValue(Mutability::Mut), ..), Mutability::Not)`\n\nwas printed to be `&mut ident`. But this wouldn't round trip through parsing again, because then it would be:\n\n`PatKind::Ref(PatKind::Ident(BindingMode::ByValue(Mutability::Not), ..), Mutability::Mut)`\n\nNow the pretty-printer prints `&(mut ident)`. Reparsing that code results in the AST fragment\n\n`PatKind::Ref(PatKind::Paren(PatKind::Ident(BindingMode::ByValue(Mutability::Mut), ..)), Mutability::Not)`\n\nwhich I think should behave like the original pattern.\n\nOld diagnostic:\n```\nerror: `mut` must be attached to each individual binding\n --> src/main.rs:3:9\n  |\n3 |     let mut &x = &0;\n  |         ^^^^^^ help: add `mut` to each binding: `&mut x`\n  |\n  = note: `mut` may be followed by `variable` and `variable @ pattern`\n```\n\nNew diagnostic:\n\n```\nerror: `mut` must be attached to each individual binding\n --> src/main.rs:3:9\n  |\n3 |     let mut &x = &0;\n  |         ^^^^^^ help: add `mut` to each binding: `&(mut x)`\n  |\n  = note: `mut` may be followed by `variable` and `variable @ pattern`\n```\n\nFixes #80186", "tree": {"sha": "980edb53a39fd9cb78557816416fadcf30166bb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/980edb53a39fd9cb78557816416fadcf30166bb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e88a1769f69f944e16cba13ba174c1d6e494b36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e88a1769f69f944e16cba13ba174c1d6e494b36", "html_url": "https://github.com/rust-lang/rust/commit/1e88a1769f69f944e16cba13ba174c1d6e494b36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e88a1769f69f944e16cba13ba174c1d6e494b36/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "463ce4042835526f0bd7bf50d6905ed7e2004a2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/463ce4042835526f0bd7bf50d6905ed7e2004a2e", "html_url": "https://github.com/rust-lang/rust/commit/463ce4042835526f0bd7bf50d6905ed7e2004a2e"}, {"sha": "b05ab18aec28c5025212ad44a202072ed2f610d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b05ab18aec28c5025212ad44a202072ed2f610d7", "html_url": "https://github.com/rust-lang/rust/commit/b05ab18aec28c5025212ad44a202072ed2f610d7"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "dcb6e115eda052873aca3fed5bec9b218d3787b0", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1e88a1769f69f944e16cba13ba174c1d6e494b36/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e88a1769f69f944e16cba13ba174c1d6e494b36/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=1e88a1769f69f944e16cba13ba174c1d6e494b36", "patch": "@@ -2420,7 +2420,15 @@ impl<'a> State<'a> {\n                 if mutbl == ast::Mutability::Mut {\n                     self.s.word(\"mut \");\n                 }\n-                self.print_pat(inner);\n+                if let PatKind::Ident(ast::BindingMode::ByValue(ast::Mutability::Mut), ..) =\n+                    inner.kind\n+                {\n+                    self.popen();\n+                    self.print_pat(inner);\n+                    self.pclose();\n+                } else {\n+                    self.print_pat(inner);\n+                }\n             }\n             PatKind::Lit(ref e) => self.print_expr(&**e),\n             PatKind::Range(ref begin, ref end, Spanned { node: ref end_kind, .. }) => {"}, {"sha": "a5e9b1db54679b85fefc5bab1e0695a09f0a5346", "filename": "src/test/ui/pattern/issue-80186-mut-binding-help-suggestion.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1e88a1769f69f944e16cba13ba174c1d6e494b36/src%2Ftest%2Fui%2Fpattern%2Fissue-80186-mut-binding-help-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e88a1769f69f944e16cba13ba174c1d6e494b36/src%2Ftest%2Fui%2Fpattern%2Fissue-80186-mut-binding-help-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-80186-mut-binding-help-suggestion.rs?ref=1e88a1769f69f944e16cba13ba174c1d6e494b36", "patch": "@@ -0,0 +1,9 @@\n+// Regression test for correct pretty-printing of an AST representing `&(mut x)` in help\n+// suggestion diagnostic.\n+\n+fn main() {\n+    let mut &x = &0;\n+    //~^ ERROR `mut` must be attached to each individual binding\n+    //~| HELP add `mut` to each binding\n+    //~| SUGGESTION &(mut x)\n+}"}, {"sha": "75b6c163b2cc37b0820031d4fcee0fdb0989d76b", "filename": "src/test/ui/pattern/issue-80186-mut-binding-help-suggestion.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1e88a1769f69f944e16cba13ba174c1d6e494b36/src%2Ftest%2Fui%2Fpattern%2Fissue-80186-mut-binding-help-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e88a1769f69f944e16cba13ba174c1d6e494b36/src%2Ftest%2Fui%2Fpattern%2Fissue-80186-mut-binding-help-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-80186-mut-binding-help-suggestion.stderr?ref=1e88a1769f69f944e16cba13ba174c1d6e494b36", "patch": "@@ -0,0 +1,10 @@\n+error: `mut` must be attached to each individual binding\n+  --> $DIR/issue-80186-mut-binding-help-suggestion.rs:5:9\n+   |\n+LL |     let mut &x = &0;\n+   |         ^^^^^^ help: add `mut` to each binding: `&(mut x)`\n+   |\n+   = note: `mut` may be followed by `variable` and `variable @ pattern`\n+\n+error: aborting due to previous error\n+"}]}