{"sha": "ac61d2935112474ff6c6d2ac3daf485adf5b5df8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNjFkMjkzNTExMjQ3NGZmNmM2ZDJhYzNkYWY0ODVhZGY1YjVkZjg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-03-30T11:50:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-30T11:50:11Z"}, "message": "Merge pull request #668 from kenta7777/rename-evalcontext-to-interpretcx\n\nRenames `EvalContext` to `InterpretCx`", "tree": {"sha": "bdcd4b516bc3060ffa95552ea23c7f5170a36765", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdcd4b516bc3060ffa95552ea23c7f5170a36765"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac61d2935112474ff6c6d2ac3daf485adf5b5df8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcn1fzCRBK7hj4Ov3rIwAAdHIIAGF1t1iFTLUhzTq0GLvGqLkV\n4V46ysr6aLk8tVjCstOmkNqEHPdHFYTt4F6RB9h/QfKavuiG0gy1B7/rjqPq8WfL\nRKkgk8nIq66TWoOVhjH+P0pqFyCbohJ2NYyghiulmnvTyzmDQRNgTNdlOxY7DxwV\nD5z4T/8fMoBNvoxG8kXdxSrfhm/Q7Fzk9n227wcUv75HC83Q/DO04NqCksZyFBJJ\nqpFqD6072v10SCZTx86apciydVZHMVgKS8Y+bc/Iinx0T8jLekcedHbl7abFHRiM\nDCbX38kpPbYwwDYtYW0uBbrpvF7eBtwMbyeO0VO1zdny3LNyi/q2HSgw4IYhXXM=\n=4Gl3\n-----END PGP SIGNATURE-----\n", "payload": "tree bdcd4b516bc3060ffa95552ea23c7f5170a36765\nparent 11cbfd719a2903712c56da7fb9d8d5482743cddb\nparent adbda8ca24f044506684bbe3d48f5c096f6b02e3\nauthor Ralf Jung <post@ralfj.de> 1553946611 +0100\ncommitter GitHub <noreply@github.com> 1553946611 +0100\n\nMerge pull request #668 from kenta7777/rename-evalcontext-to-interpretcx\n\nRenames `EvalContext` to `InterpretCx`"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac61d2935112474ff6c6d2ac3daf485adf5b5df8", "html_url": "https://github.com/rust-lang/rust/commit/ac61d2935112474ff6c6d2ac3daf485adf5b5df8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac61d2935112474ff6c6d2ac3daf485adf5b5df8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11cbfd719a2903712c56da7fb9d8d5482743cddb", "url": "https://api.github.com/repos/rust-lang/rust/commits/11cbfd719a2903712c56da7fb9d8d5482743cddb", "html_url": "https://github.com/rust-lang/rust/commit/11cbfd719a2903712c56da7fb9d8d5482743cddb"}, {"sha": "adbda8ca24f044506684bbe3d48f5c096f6b02e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/adbda8ca24f044506684bbe3d48f5c096f6b02e3", "html_url": "https://github.com/rust-lang/rust/commit/adbda8ca24f044506684bbe3d48f5c096f6b02e3"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "eadee7c5f5de4af0507dae9eddedc39a62bb56f3", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac61d2935112474ff6c6d2ac3daf485adf5b5df8/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/ac61d2935112474ff6c6d2ac3daf485adf5b5df8/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=ac61d2935112474ff6c6d2ac3daf485adf5b5df8", "patch": "@@ -1 +1 @@\n-nightly-2019-03-20\n+nightly-2019-03-29"}, {"sha": "3c6384e1a79efb19bbbe8e5886834e074bd179e7", "filename": "src/fn_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac61d2935112474ff6c6d2ac3daf485adf5b5df8/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac61d2935112474ff6c6d2ac3daf485adf5b5df8/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=ac61d2935112474ff6c6d2ac3daf485adf5b5df8", "patch": "@@ -255,7 +255,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n                 trace!(\"__rust_maybe_catch_panic: {:?}\", f_instance);\n \n                 // Now we make a function call.\n-                // TODO: consider making this reusable? `EvalContext::step` does something similar\n+                // TODO: consider making this reusable? `InterpretCx::step` does something similar\n                 // for the TLS destructors, and of course `eval_main`.\n                 let mir = this.load_mir(f_instance.def)?;\n                 let ret_place = MPlaceTy::dangling(this.layout_of(this.tcx.mk_unit())?, this).into();"}, {"sha": "be58c6a6a464262661532a90073af66ad5cce895", "filename": "src/lib.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ac61d2935112474ff6c6d2ac3daf485adf5b5df8/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac61d2935112474ff6c6d2ac3daf485adf5b5df8/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ac61d2935112474ff6c6d2ac3daf485adf5b5df8", "patch": "@@ -67,8 +67,8 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     main_id: DefId,\n     config: MiriConfig,\n-) -> EvalResult<'tcx, EvalContext<'a, 'mir, 'tcx, Evaluator<'tcx>>> {\n-    let mut ecx = EvalContext::new(\n+) -> EvalResult<'tcx, InterpretCx<'a, 'mir, 'tcx, Evaluator<'tcx>>> {\n+    let mut ecx = InterpretCx::new(\n         tcx.at(syntax::source_map::DUMMY_SP),\n         ty::ParamEnv::reveal_all(),\n         Evaluator::new(config.validate),\n@@ -345,7 +345,7 @@ impl<'tcx> Evaluator<'tcx> {\n \n // FIXME: rustc issue <https://github.com/rust-lang/rust/issues/47131>.\n #[allow(dead_code)]\n-type MiriEvalContext<'a, 'mir, 'tcx> = EvalContext<'a, 'mir, 'tcx, Evaluator<'tcx>>;\n+type MiriEvalContext<'a, 'mir, 'tcx> = InterpretCx<'a, 'mir, 'tcx, Evaluator<'tcx>>;\n \n // A little trait that's useful to be inherited by extension traits.\n pub trait MiriEvalContextExt<'a, 'mir, 'tcx> {\n@@ -376,14 +376,14 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n     const STATIC_KIND: Option<MiriMemoryKind> = Some(MiriMemoryKind::MutStatic);\n \n     #[inline(always)]\n-    fn enforce_validity(ecx: &EvalContext<'a, 'mir, 'tcx, Self>) -> bool {\n+    fn enforce_validity(ecx: &InterpretCx<'a, 'mir, 'tcx, Self>) -> bool {\n         ecx.machine.validate\n     }\n \n     /// Returns `Ok()` when the function was handled; fail otherwise.\n     #[inline(always)]\n     fn find_fn(\n-        ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+        ecx: &mut InterpretCx<'a, 'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Borrow>],\n         dest: Option<PlaceTy<'tcx, Borrow>>,\n@@ -394,7 +394,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn call_intrinsic(\n-        ecx: &mut rustc_mir::interpret::EvalContext<'a, 'mir, 'tcx, Self>,\n+        ecx: &mut rustc_mir::interpret::InterpretCx<'a, 'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Borrow>],\n         dest: PlaceTy<'tcx, Borrow>,\n@@ -404,7 +404,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn ptr_op(\n-        ecx: &rustc_mir::interpret::EvalContext<'a, 'mir, 'tcx, Self>,\n+        ecx: &rustc_mir::interpret::InterpretCx<'a, 'mir, 'tcx, Self>,\n         bin_op: mir::BinOp,\n         left: ImmTy<'tcx, Borrow>,\n         right: ImmTy<'tcx, Borrow>,\n@@ -413,7 +413,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n     }\n \n     fn box_alloc(\n-        ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+        ecx: &mut InterpretCx<'a, 'mir, 'tcx, Self>,\n         dest: PlaceTy<'tcx, Borrow>,\n     ) -> EvalResult<'tcx> {\n         trace!(\"box_alloc for {:?}\", dest.layout.ty);\n@@ -481,7 +481,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n     }\n \n     #[inline(always)]\n-    fn before_terminator(_ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>) -> EvalResult<'tcx>\n+    fn before_terminator(_ecx: &mut InterpretCx<'a, 'mir, 'tcx, Self>) -> EvalResult<'tcx>\n     {\n         // We are not interested in detecting loops.\n         Ok(())\n@@ -511,7 +511,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n     }\n \n     fn tag_dereference(\n-        ecx: &EvalContext<'a, 'mir, 'tcx, Self>,\n+        ecx: &InterpretCx<'a, 'mir, 'tcx, Self>,\n         place: MPlaceTy<'tcx, Borrow>,\n         mutability: Option<hir::Mutability>,\n     ) -> EvalResult<'tcx, Scalar<Borrow>> {\n@@ -532,7 +532,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn tag_new_allocation(\n-        ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+        ecx: &mut InterpretCx<'a, 'mir, 'tcx, Self>,\n         ptr: Pointer,\n         kind: MemoryKind<Self::MemoryKinds>,\n     ) -> Pointer<Borrow> {\n@@ -547,7 +547,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn retag(\n-        ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+        ecx: &mut InterpretCx<'a, 'mir, 'tcx, Self>,\n         kind: mir::RetagKind,\n         place: PlaceTy<'tcx, Borrow>,\n     ) -> EvalResult<'tcx> {\n@@ -565,14 +565,14 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn stack_push(\n-        ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+        ecx: &mut InterpretCx<'a, 'mir, 'tcx, Self>,\n     ) -> EvalResult<'tcx, stacked_borrows::CallId> {\n         Ok(ecx.memory().extra.borrow_mut().new_call())\n     }\n \n     #[inline(always)]\n     fn stack_pop(\n-        ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+        ecx: &mut InterpretCx<'a, 'mir, 'tcx, Self>,\n         extra: stacked_borrows::CallId,\n     ) -> EvalResult<'tcx> {\n         Ok(ecx.memory().extra.borrow_mut().end_call(extra))"}]}