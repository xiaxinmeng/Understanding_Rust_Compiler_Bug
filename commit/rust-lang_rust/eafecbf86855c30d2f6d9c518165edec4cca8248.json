{"sha": "eafecbf86855c30d2f6d9c518165edec4cca8248", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZmVjYmY4Njg1NWMzMGQyZjZkOWM1MTgxNjVlZGVjNGNjYTgyNDg=", "commit": {"author": {"name": "Doug Goldstein", "email": "cardoe@cardoe.com", "date": "2016-07-24T16:47:39Z"}, "committer": {"name": "Doug Goldstein", "email": "cardoe@cardoe.com", "date": "2016-07-27T17:28:40Z"}, "message": "librustc_back: convert fn target() to return Result\n\nChange all the target generation functions to return a Result<Target,\nString> so that targets that are unable to be instantiated can be\nexpressed as an Err instead of a panic!(). This should improve #33497 as\nwell.", "tree": {"sha": "48779aee68809379f7d7ad285e21d57cb27750d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48779aee68809379f7d7ad285e21d57cb27750d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eafecbf86855c30d2f6d9c518165edec4cca8248", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eafecbf86855c30d2f6d9c518165edec4cca8248", "html_url": "https://github.com/rust-lang/rust/commit/eafecbf86855c30d2f6d9c518165edec4cca8248", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eafecbf86855c30d2f6d9c518165edec4cca8248/comments", "author": {"login": "cardoe", "id": 8839, "node_id": "MDQ6VXNlcjg4Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cardoe", "html_url": "https://github.com/cardoe", "followers_url": "https://api.github.com/users/cardoe/followers", "following_url": "https://api.github.com/users/cardoe/following{/other_user}", "gists_url": "https://api.github.com/users/cardoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/cardoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cardoe/subscriptions", "organizations_url": "https://api.github.com/users/cardoe/orgs", "repos_url": "https://api.github.com/users/cardoe/repos", "events_url": "https://api.github.com/users/cardoe/events{/privacy}", "received_events_url": "https://api.github.com/users/cardoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cardoe", "id": 8839, "node_id": "MDQ6VXNlcjg4Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cardoe", "html_url": "https://github.com/cardoe", "followers_url": "https://api.github.com/users/cardoe/followers", "following_url": "https://api.github.com/users/cardoe/following{/other_user}", "gists_url": "https://api.github.com/users/cardoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/cardoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cardoe/subscriptions", "organizations_url": "https://api.github.com/users/cardoe/orgs", "repos_url": "https://api.github.com/users/cardoe/repos", "events_url": "https://api.github.com/users/cardoe/events{/privacy}", "received_events_url": "https://api.github.com/users/cardoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7b6ed27bcbe63906825d6e541a7a1f62bdd03c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7b6ed27bcbe63906825d6e541a7a1f62bdd03c9", "html_url": "https://github.com/rust-lang/rust/commit/c7b6ed27bcbe63906825d6e541a7a1f62bdd03c9"}], "stats": {"total": 414, "additions": 212, "deletions": 202}, "files": [{"sha": "6530ccb0630db0342729b6f1892c9a560e39e007", "filename": "src/librustc_back/target/aarch64_apple_ios.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,11 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::{Target, TargetOptions};\n+use target::{Target, TargetOptions, TargetResult};\n use super::apple_ios_base::{opts, Arch};\n \n-pub fn target() -> Target {\n-    Target {\n+pub fn target() -> TargetResult {\n+    let base = try!(opts(Arch::Arm64));\n+    Ok(Target {\n         llvm_target: \"arm64-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -25,7 +26,7 @@ pub fn target() -> Target {\n             features: \"+neon,+fp-armv8,+cyclone\".to_string(),\n             eliminate_frame_pointer: false,\n             max_atomic_width: 128,\n-            .. opts(Arch::Arm64)\n+            .. base\n         },\n-    }\n+    })\n }"}, {"sha": "307823137a71090a81cc3aba6bdc1c7a8737446b", "filename": "src/librustc_back/target/aarch64_linux_android.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_linux_android.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::android_base::opts();\n     base.max_atomic_width = 128;\n     // As documented in http://developer.android.com/ndk/guides/cpu-features.html\n     // the neon (ASIMD) and FP must exist on all android aarch64 targets.\n     base.features = \"+neon,+fp-armv8\".to_string();\n-    Target {\n+    Ok(Target {\n         llvm_target: \"aarch64-linux-android\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> Target {\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "14d0c8bedec1c7ddc9f54e95ec0c9998280c2fd9", "filename": "src/librustc_back/target/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n     base.max_atomic_width = 128;\n-    Target {\n+    Ok(Target {\n         llvm_target: \"aarch64-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -23,5 +23,5 @@ pub fn target() -> Target {\n         target_os: \"linux\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "8bd9feabdbebe2a37e4bd099ef669c4659886b00", "filename": "src/librustc_back/target/apple_ios_base.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -36,7 +36,7 @@ impl Arch {\n     }\n }\n \n-pub fn get_sdk_root(sdk_name: &str) -> String {\n+pub fn get_sdk_root(sdk_name: &str) -> Result<String, String> {\n     let res = Command::new(\"xcrun\")\n                       .arg(\"--show-sdk-path\")\n                       .arg(\"-sdk\")\n@@ -55,21 +55,23 @@ pub fn get_sdk_root(sdk_name: &str) -> String {\n                       });\n \n     match res {\n-        Ok(output) => output.trim().to_string(),\n-        Err(e) => panic!(\"failed to get {} SDK path: {}\", sdk_name, e)\n+        Ok(output) => Ok(output.trim().to_string()),\n+        Err(e) => Err(format!(\"failed to get {} SDK path: {}\", sdk_name, e))\n     }\n }\n \n-fn pre_link_args(arch: Arch) -> Vec<String> {\n+fn build_pre_link_args(arch: Arch) -> Result<Vec<String>, String> {\n     let sdk_name = match arch {\n         Armv7 | Armv7s | Arm64 => \"iphoneos\",\n         I386 | X86_64 => \"iphonesimulator\"\n     };\n \n     let arch_name = arch.to_string();\n \n-    vec![\"-arch\".to_string(), arch_name.to_string(),\n-         \"-Wl,-syslibroot\".to_string(), get_sdk_root(sdk_name)]\n+    let sdk_root = try!(get_sdk_root(sdk_name));\n+\n+    Ok(vec![\"-arch\".to_string(), arch_name.to_string(),\n+         \"-Wl,-syslibroot\".to_string(), sdk_root])\n }\n \n fn target_cpu(arch: Arch) -> String {\n@@ -82,13 +84,14 @@ fn target_cpu(arch: Arch) -> String {\n     }.to_string()\n }\n \n-pub fn opts(arch: Arch) -> TargetOptions {\n-    TargetOptions {\n+pub fn opts(arch: Arch) -> Result<TargetOptions, String> {\n+    let pre_link_args = try!(build_pre_link_args(arch));\n+    Ok(TargetOptions {\n         cpu: target_cpu(arch),\n         dynamic_linking: false,\n         executables: true,\n-        pre_link_args: pre_link_args(arch),\n+        pre_link_args: pre_link_args,\n         has_elf_tls: false,\n         .. super::apple_base::opts()\n-    }\n+    })\n }"}, {"sha": "f3a18b13c6783b35cfd879e22b5b5fdbd0e605db", "filename": "src/librustc_back/target/arm_linux_androideabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::android_base::opts();\n     base.features = \"+v7,+vfp3,+d16\".to_string();\n     base.max_atomic_width = 64;\n \n-    Target {\n+    Ok(Target {\n         llvm_target: \"arm-linux-androideabi\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -25,5 +25,5 @@ pub fn target() -> Target {\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "e666a8460e5ea85d4ec626a6b7fa2ae9d000a189", "filename": "src/librustc_back/target/arm_unknown_linux_gnueabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::{Target, TargetOptions};\n+use target::{Target, TargetOptions, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n     base.max_atomic_width = 64;\n-    Target {\n+    Ok(Target {\n         llvm_target: \"arm-unknown-linux-gnueabi\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -27,5 +27,5 @@ pub fn target() -> Target {\n             features: \"+v6\".to_string(),\n             .. base\n         },\n-    }\n+    })\n }"}, {"sha": "d65c89abc206496002f0194466e6969dfa62c7c3", "filename": "src/librustc_back/target/arm_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::{Target, TargetOptions};\n+use target::{Target, TargetOptions, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n     base.max_atomic_width = 64;\n-    Target {\n+    Ok(Target {\n         llvm_target: \"arm-unknown-linux-gnueabihf\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -27,5 +27,5 @@ pub fn target() -> Target {\n             features: \"+v6,+vfp2\".to_string(),\n             .. base\n         }\n-    }\n+    })\n }"}, {"sha": "a806204d0a6bcb6064bfd46bc7b2862a0e88b5bb", "filename": "src/librustc_back/target/armv7_apple_ios.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,11 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::{Target, TargetOptions};\n+use target::{Target, TargetOptions, TargetResult};\n use super::apple_ios_base::{opts, Arch};\n \n-pub fn target() -> Target {\n-    Target {\n+pub fn target() -> TargetResult {\n+    let base = try!(opts(Arch::Armv7));\n+    Ok(Target {\n         llvm_target: \"armv7-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -24,7 +25,7 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             features: \"+v7,+vfp3,+neon\".to_string(),\n             max_atomic_width: 64,\n-            .. opts(Arch::Armv7)\n+            .. base\n         }\n-    }\n+    })\n }"}, {"sha": "1c59262e04198b519cec108b2d81ff1c122d77f8", "filename": "src/librustc_back/target/armv7_linux_androideabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Farmv7_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Farmv7_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_linux_androideabi.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::android_base::opts();\n     base.features = \"+v7,+thumb2,+vfp3,+d16\".to_string();\n     base.max_atomic_width = 64;\n \n-    Target {\n+    Ok(Target {\n         llvm_target: \"armv7-none-linux-android\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -25,5 +25,5 @@ pub fn target() -> Target {\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "52269f0cd4a08788408745f8dbc202bd728e6992", "filename": "src/librustc_back/target/armv7_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_gnueabihf.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::{Target, TargetOptions};\n+use target::{Target, TargetOptions, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let base = super::linux_base::opts();\n-    Target {\n+    Ok(Target {\n         llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -28,6 +28,6 @@ pub fn target() -> Target {\n             max_atomic_width: 64,\n             .. base\n         }\n-    }\n+    })\n }\n "}, {"sha": "aaa3570fa62ee6e2e01afad79b6a8b674557d570", "filename": "src/librustc_back/target/armv7s_apple_ios.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,11 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::{Target, TargetOptions};\n+use target::{Target, TargetOptions, TargetResult};\n use super::apple_ios_base::{opts, Arch};\n \n-pub fn target() -> Target {\n-    Target {\n+pub fn target() -> TargetResult {\n+    let base = try!(opts(Arch::Armv7s));\n+    Ok(Target {\n         llvm_target: \"armv7s-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -24,7 +25,7 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             features: \"+v7,+vfp4,+neon\".to_string(),\n             max_atomic_width: 64,\n-            .. opts(Arch::Armv7s)\n+            .. base\n         }\n-    }\n+    })\n }"}, {"sha": "07eb191471c46c58de2915ea70c32467377562bb", "filename": "src/librustc_back/target/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -10,7 +10,7 @@\n \n use super::{Target, TargetOptions};\n \n-pub fn target() -> Target {\n+pub fn target() -> Result<Target, String> {\n     let opts = TargetOptions {\n         linker: \"emcc\".to_string(),\n         ar: \"emar\".to_string(),\n@@ -25,7 +25,7 @@ pub fn target() -> Target {\n         max_atomic_width: 32,\n         .. Default::default()\n     };\n-    Target {\n+    Ok(Target {\n         llvm_target: \"asmjs-unknown-emscripten\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -35,5 +35,5 @@ pub fn target() -> Target {\n         data_layout: \"e-p:32:32-i64:64-v128:32:128-n32-S128\".to_string(),\n         arch: \"asmjs\".to_string(),\n         options: opts,\n-    }\n+    })\n }"}, {"sha": "f391d4118ea74c6fc6b0a09cb67cc66e618d10b2", "filename": "src/librustc_back/target/i386_apple_ios.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,11 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::{Target, TargetOptions};\n+use target::{Target, TargetOptions, TargetResult};\n use super::apple_ios_base::{opts, Arch};\n \n-pub fn target() -> Target {\n-    Target {\n+pub fn target() -> TargetResult {\n+    let base = try!(opts(Arch::I386));\n+    Ok(Target {\n         llvm_target: \"i386-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -23,7 +24,7 @@ pub fn target() -> Target {\n         target_vendor: \"apple\".to_string(),\n         options: TargetOptions {\n             max_atomic_width: 64,\n-            .. opts(Arch::I386)\n+            .. base\n         }\n-    }\n+    })\n }"}, {"sha": "445ee6c412283ff009b86d5d6a6e7b809bbf8a7c", "filename": "src/librustc_back/target/i586_pc_windows_msvc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fi586_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fi586_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi586_pc_windows_msvc.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::TargetResult;\n \n-pub fn target() -> Target {\n-    let mut base = super::i686_pc_windows_msvc::target();\n+pub fn target() -> TargetResult {\n+    let mut base = try!(super::i686_pc_windows_msvc::target());\n     base.options.cpu = \"pentium\".to_string();\n     base.llvm_target = \"i586-pc-windows-msvc\".to_string();\n-    return base\n+    Ok(base)\n }"}, {"sha": "1ca8606149bff6adf54a19887ee9b5864840d710", "filename": "src/librustc_back/target/i586_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fi586_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fi586_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi586_unknown_linux_gnu.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::TargetResult;\n \n-pub fn target() -> Target {\n-    let mut base = super::i686_unknown_linux_gnu::target();\n+pub fn target() -> TargetResult {\n+    let mut base = try!(super::i686_unknown_linux_gnu::target());\n     base.options.cpu = \"pentium\".to_string();\n     base.llvm_target = \"i586-unknown-linux-gnu\".to_string();\n-    return base\n+    Ok(base)\n }"}, {"sha": "4876a3489d4707a74cea0b21943421f4af44f62e", "filename": "src/librustc_back/target/i686_apple_darwin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_apple_darwin.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::apple_base::opts();\n     base.cpu = \"yonah\".to_string();\n     base.max_atomic_width = 64;\n     base.pre_link_args.push(\"-m32\".to_string());\n \n-    Target {\n+    Ok(Target {\n         llvm_target: \"i686-apple-darwin\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> Target {\n         target_env: \"\".to_string(),\n         target_vendor: \"apple\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "1de629238a13c7b54c33f5794c5d7a2dfe5ae7f3", "filename": "src/librustc_back/target/i686_linux_android.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fi686_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fi686_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_linux_android.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::android_base::opts();\n \n     base.max_atomic_width = 64;\n@@ -19,7 +19,7 @@ pub fn target() -> Target {\n     base.cpu = \"pentiumpro\".to_string();\n     base.features = \"+mmx,+sse,+sse2,+sse3,+ssse3\".to_string();\n \n-    Target {\n+    Ok(Target {\n         llvm_target: \"i686-linux-android\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -29,5 +29,5 @@ pub fn target() -> Target {\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "2c19b8109c36214db01be556fafb07efda981cd5", "filename": "src/librustc_back/target/i686_pc_windows_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_gnu.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::windows_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = 64;\n@@ -19,7 +19,7 @@ pub fn target() -> Target {\n     // space available to x86 Windows binaries on x86_64.\n     base.pre_link_args.push(\"-Wl,--large-address-aware\".to_string());\n \n-    Target {\n+    Ok(Target {\n         llvm_target: \"i686-pc-windows-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -29,5 +29,5 @@ pub fn target() -> Target {\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"pc\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "cb02fcc308c2d8f71cbbd8dd7e54d2193aecae23", "filename": "src/librustc_back/target/i686_pc_windows_msvc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_msvc.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::windows_msvc_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = 64;\n@@ -24,7 +24,7 @@ pub fn target() -> Target {\n     // https://msdn.microsoft.com/en-us/library/9a89h429.aspx\n     base.pre_link_args.push(\"/SAFESEH\".to_string());\n \n-    Target {\n+    Ok(Target {\n         llvm_target: \"i686-pc-windows-msvc\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -34,5 +34,5 @@ pub fn target() -> Target {\n         target_env: \"msvc\".to_string(),\n         target_vendor: \"pc\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "f96ec004b481eaf98fb908a1191bb8a814768294", "filename": "src/librustc_back/target/i686_unknown_dragonfly.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_dragonfly.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::dragonfly_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = 64;\n     base.pre_link_args.push(\"-m32\".to_string());\n \n-    Target {\n+    Ok(Target {\n         llvm_target: \"i686-unknown-dragonfly\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> Target {\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "3489ecfe614d910a89901a686073f49307f9adac", "filename": "src/librustc_back/target/i686_unknown_freebsd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_freebsd.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = 64;\n     base.pre_link_args.push(\"-m32\".to_string());\n \n-    Target {\n+    Ok(Target {\n         llvm_target: \"i686-unknown-freebsd\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> Target {\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "f2e865c015e353b8e7b3e070cbb0fa1af11e1e78", "filename": "src/librustc_back/target/i686_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_gnu.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = 64;\n     base.pre_link_args.push(\"-m32\".to_string());\n \n-    Target {\n+    Ok(Target {\n         llvm_target: \"i686-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> Target {\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "a0a8de46e2f59bd97eca8df993737cd26c5daef6", "filename": "src/librustc_back/target/i686_unknown_linux_musl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_linux_musl.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,16 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = 64;\n     base.pre_link_args.push(\"-m32\".to_string());\n     base.pre_link_args.push(\"-Wl,-melf_i386\".to_string());\n \n-    Target {\n+    Ok(Target {\n         llvm_target: \"i686-unknown-linux-musl\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -27,5 +27,5 @@ pub fn target() -> Target {\n         target_env: \"musl\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "25132f8a044d6faacba46c043699aa994166bcb5", "filename": "src/librustc_back/target/le32_unknown_nacl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fle32_unknown_nacl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fle32_unknown_nacl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fle32_unknown_nacl.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::{Target, TargetOptions};\n+use super::{Target, TargetOptions, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let opts = TargetOptions {\n         linker: \"pnacl-clang\".to_string(),\n         ar: \"pnacl-ar\".to_string(),\n@@ -28,7 +28,7 @@ pub fn target() -> Target {\n         max_atomic_width: 32,\n         .. Default::default()\n     };\n-    Target {\n+    Ok(Target {\n         llvm_target: \"le32-unknown-nacl\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -38,5 +38,5 @@ pub fn target() -> Target {\n         data_layout: \"e-i64:64:64-p:32:32:32-v128:32:32\".to_string(),\n         arch: \"le32\".to_string(),\n         options: opts,\n-    }\n+    })\n }"}, {"sha": "ab967f6b40fbead30c78c771d38b723b90eac6af", "filename": "src/librustc_back/target/mips_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_gnu.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::{Target, TargetOptions};\n+use target::{Target, TargetOptions, TargetResult};\n \n-pub fn target() -> Target {\n-    Target {\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n         llvm_target: \"mips-unknown-linux-gnu\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> Target {\n             max_atomic_width: 32,\n             ..super::linux_base::opts()\n         },\n-    }\n+    })\n }"}, {"sha": "4a69bce53bc978a5a6c6b9a9ddbcf7f38ed4c107", "filename": "src/librustc_back/target/mips_unknown_linux_musl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips_unknown_linux_musl.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::{Target, TargetOptions};\n+use target::{Target, TargetOptions, TargetResult};\n \n-pub fn target() -> Target {\n-    Target {\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n         llvm_target: \"mips-unknown-linux-musl\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> Target {\n             max_atomic_width: 32,\n             ..super::linux_base::opts()\n         }\n-    }\n+    })\n }"}, {"sha": "b66fb62cd591ecc97929f9547c930497c232867a", "filename": "src/librustc_back/target/mipsel_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_gnu.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::{Target, TargetOptions};\n+use target::{Target, TargetOptions, TargetResult};\n \n-pub fn target() -> Target {\n-    Target {\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n         llvm_target: \"mipsel-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -27,5 +27,5 @@ pub fn target() -> Target {\n             max_atomic_width: 32,\n             ..super::linux_base::opts()\n         },\n-    }\n+    })\n }"}, {"sha": "24d1a66ec2d2f32fd1bb02f33b19802c0aa4e2f6", "filename": "src/librustc_back/target/mipsel_unknown_linux_musl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmipsel_unknown_linux_musl.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::{Target, TargetOptions};\n+use target::{Target, TargetOptions, TargetResult};\n \n-pub fn target() -> Target {\n-    Target {\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n         llvm_target: \"mipsel-unknown-linux-musl\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> Target {\n             max_atomic_width: 32,\n             ..super::linux_base::opts()\n         }\n-    }\n+    })\n }"}, {"sha": "4849a76e11d904d730e8787e35315800b72ccc42", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -64,24 +64,26 @@ mod solaris_base;\n mod windows_base;\n mod windows_msvc_base;\n \n+pub type TargetResult = Result<Target, String>;\n+\n macro_rules! supported_targets {\n     ( $(($triple:expr, $module:ident)),+ ) => (\n         $(mod $module;)*\n \n         /// List of supported targets\n         pub const TARGETS: &'static [&'static str] = &[$($triple),*];\n \n-        fn load_specific(target: &str) -> Option<Target> {\n+        fn load_specific(target: &str) -> TargetResult {\n             match target {\n                 $(\n                     $triple => {\n-                        let mut t = $module::target();\n+                        let mut t = try!($module::target());\n                         t.options.is_builtin = true;\n                         debug!(\"Got builtin target: {:?}\", t);\n-                        Some(t)\n+                        Ok(t)\n                     },\n                 )+\n-                _ => None\n+                _ => Err(format!(\"Unable to find target: {}\", target))\n             }\n         }\n     )\n@@ -364,7 +366,7 @@ impl Target {\n     }\n \n     /// Load a target descriptor from a JSON object.\n-    pub fn from_json(obj: Json) -> Target {\n+    pub fn from_json(obj: Json) -> TargetResult {\n         // While ugly, this code must remain this way to retain\n         // compatibility with existing JSON fields and the internal\n         // expected naming of the Target and TargetOptions structs.\n@@ -376,9 +378,9 @@ impl Target {\n             match obj.find(name)\n                      .map(|s| s.as_string())\n                      .and_then(|os| os.map(|s| s.to_string())) {\n-                Some(val) => val,\n+                Some(val) => Ok(val),\n                 None => {\n-                    panic!(\"Field {} in target specification is required\", name)\n+                    return Err(format!(\"Field {} in target specification is required\", name))\n                 }\n             }\n         };\n@@ -390,12 +392,12 @@ impl Target {\n         };\n \n         let mut base = Target {\n-            llvm_target: get_req_field(\"llvm-target\"),\n-            target_endian: get_req_field(\"target-endian\"),\n-            target_pointer_width: get_req_field(\"target-pointer-width\"),\n-            data_layout: get_req_field(\"data-layout\"),\n-            arch: get_req_field(\"arch\"),\n-            target_os: get_req_field(\"os\"),\n+            llvm_target: try!(get_req_field(\"llvm-target\")),\n+            target_endian: try!(get_req_field(\"target-endian\")),\n+            target_pointer_width: try!(get_req_field(\"target-pointer-width\")),\n+            data_layout: try!(get_req_field(\"data-layout\")),\n+            arch: try!(get_req_field(\"arch\")),\n+            target_os: try!(get_req_field(\"os\")),\n             target_env: get_opt_field(\"env\", \"\"),\n             target_vendor: get_opt_field(\"vendor\", \"unknown\"),\n             options: Default::default(),\n@@ -483,7 +485,7 @@ impl Target {\n         key!(obj_is_bitcode, bool);\n         key!(max_atomic_width, u64);\n \n-        base\n+        Ok(base)\n     }\n \n     /// Search RUST_TARGET_PATH for a JSON file specifying the given target\n@@ -506,10 +508,10 @@ impl Target {\n             f.read_to_end(&mut contents).map_err(|e| e.to_string())?;\n             let obj = json::from_reader(&mut &contents[..])\n                            .map_err(|e| e.to_string())?;\n-            Ok(Target::from_json(obj))\n+            Target::from_json(obj)\n         }\n \n-        if let Some(t) = load_specific(target) {\n+        if let Ok(t) = load_specific(target) {\n             return Ok(t)\n         }\n "}, {"sha": "1c04e763417c4b0574e6c043a9c8f2f0b1b7bdca", "filename": "src/librustc_back/target/powerpc64_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fpowerpc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fpowerpc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fpowerpc64_unknown_linux_gnu.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n     base.cpu = \"ppc64\".to_string();\n     base.pre_link_args.push(\"-m64\".to_string());\n     base.max_atomic_width = 64;\n \n-    Target {\n+    Ok(Target {\n         llvm_target: \"powerpc64-unknown-linux-gnu\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> Target {\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "906e28d2f20cb1d0c778f8ab9e455414deaac481", "filename": "src/librustc_back/target/powerpc64le_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fpowerpc64le_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fpowerpc64le_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fpowerpc64le_unknown_linux_gnu.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n     base.cpu = \"ppc64le\".to_string();\n     base.pre_link_args.push(\"-m64\".to_string());\n     base.max_atomic_width = 64;\n \n-    Target {\n+    Ok(Target {\n         llvm_target: \"powerpc64le-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> Target {\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "aebf9cd68717d18cc357114fbb99e122a8dbb13a", "filename": "src/librustc_back/target/powerpc_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fpowerpc_unknown_linux_gnu.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n     base.pre_link_args.push(\"-m32\".to_string());\n     base.max_atomic_width = 32;\n \n-    Target {\n+    Ok(Target {\n         llvm_target: \"powerpc-unknown-linux-gnu\".to_string(),\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n@@ -25,5 +25,5 @@ pub fn target() -> Target {\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "65e4b1400fcf8a68171356f1418c48b7e9f9db08", "filename": "src/librustc_back/target/x86_64_apple_darwin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_darwin.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,16 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::apple_base::opts();\n     base.cpu = \"core2\".to_string();\n     base.max_atomic_width = 128; // core2 support cmpxchg16b\n     base.eliminate_frame_pointer = false;\n     base.pre_link_args.push(\"-m64\".to_string());\n \n-    Target {\n+    Ok(Target {\n         llvm_target: \"x86_64-apple-darwin\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -27,5 +27,5 @@ pub fn target() -> Target {\n         target_env: \"\".to_string(),\n         target_vendor: \"apple\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "4afc9bcb946c29da9b04cc13effaa140fcf17a50", "filename": "src/librustc_back/target/x86_64_apple_ios.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,11 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::{Target, TargetOptions};\n+use target::{Target, TargetOptions, TargetResult};\n use super::apple_ios_base::{opts, Arch};\n \n-pub fn target() -> Target {\n-    Target {\n+pub fn target() -> TargetResult {\n+    let base = try!(opts(Arch::X86_64));\n+    Ok(Target {\n         llvm_target: \"x86_64-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -23,7 +24,7 @@ pub fn target() -> Target {\n         target_vendor: \"apple\".to_string(),\n         options: TargetOptions {\n             max_atomic_width: 64,\n-            .. opts(Arch::X86_64)\n+            .. base\n         }\n-    }\n+    })\n }"}, {"sha": "086e0e6bf4fe7edc723082853fdd9e9ee71c12d7", "filename": "src/librustc_back/target/x86_64_pc_windows_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_gnu.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::windows_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.pre_link_args.push(\"-m64\".to_string());\n     base.max_atomic_width = 64;\n \n-    Target {\n+    Ok(Target {\n         llvm_target: \"x86_64-pc-windows-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> Target {\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"pc\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "064f06e9b31d6fbc1555cf0aa1ee3fe55a810ccb", "filename": "src/librustc_back/target/x86_64_pc_windows_msvc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_msvc.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::windows_msvc_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = 64;\n \n-    Target {\n+    Ok(Target {\n         llvm_target: \"x86_64-pc-windows-msvc\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -25,5 +25,5 @@ pub fn target() -> Target {\n         target_env: \"msvc\".to_string(),\n         target_vendor: \"pc\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "537d15f4603bb4f6c3fe6ebb8f0ce09f987e34f7", "filename": "src/librustc_back/target/x86_64_rumprun_netbsd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();\n     base.pre_link_args.push(\"-m64\".to_string());\n     base.linker = \"x86_64-rumprun-netbsd-gcc\".to_string();\n@@ -24,7 +24,7 @@ pub fn target() -> Target {\n     base.no_default_libraries = false;\n     base.exe_allocation_crate = \"alloc_system\".to_string();\n \n-    Target {\n+    Ok(Target {\n         llvm_target: \"x86_64-rumprun-netbsd\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -34,5 +34,5 @@ pub fn target() -> Target {\n         target_env: \"\".to_string(),\n         target_vendor: \"rumprun\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "2a1feb937f742f3fc59a9fc2141701465af30737", "filename": "src/librustc_back/target/x86_64_sun_solaris.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_sun_solaris.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::solaris_base::opts();\n     base.pre_link_args.push(\"-m64\".to_string());\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = 64;\n \n-    Target {\n+    Ok(Target {\n         llvm_target: \"x86_64-pc-solaris\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> Target {\n         target_env: \"\".to_string(),\n         target_vendor: \"sun\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "81710b99b80becfafb51c9aa009ad9601d5693de", "filename": "src/librustc_back/target/x86_64_unknown_bitrig.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::bitrig_base::opts();\n     base.max_atomic_width = 64;\n     base.pre_link_args.push(\"-m64\".to_string());\n \n-    Target {\n+    Ok(Target {\n         llvm_target: \"x86_64-unknown-bitrig\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -25,5 +25,5 @@ pub fn target() -> Target {\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "7e40d49b870ade9d49c3d21faebd71f0ac6cd0d7", "filename": "src/librustc_back/target/x86_64_unknown_dragonfly.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_dragonfly.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::dragonfly_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = 64;\n     base.pre_link_args.push(\"-m64\".to_string());\n \n-    Target {\n+    Ok(Target {\n         llvm_target: \"x86_64-unknown-dragonfly\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> Target {\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "f38cdd4bec55f733be6955868e77949777bd0336", "filename": "src/librustc_back/target/x86_64_unknown_freebsd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_freebsd.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = 64;\n     base.pre_link_args.push(\"-m64\".to_string());\n \n-    Target {\n+    Ok(Target {\n         llvm_target: \"x86_64-unknown-freebsd\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> Target {\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "ef81d397a8f1e9f9684721988a864261481c214d", "filename": "src/librustc_back/target/x86_64_unknown_linux_gnu.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_gnu.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = 64;\n     base.pre_link_args.push(\"-m64\".to_string());\n \n-    Target {\n+    Ok(Target {\n         llvm_target: \"x86_64-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> Target {\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "4bad7754b3907d8b0ef51e108415c61267d2e64a", "filename": "src/librustc_back/target/x86_64_unknown_linux_musl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = 64;\n     base.pre_link_args.push(\"-m64\".to_string());\n \n-    Target {\n+    Ok(Target {\n         llvm_target: \"x86_64-unknown-linux-musl\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> Target {\n         target_env: \"musl\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "5145e52d6b4c9800cace650860cbb5a39a1ddb34", "filename": "src/librustc_back/target/x86_64_unknown_netbsd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_netbsd.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();\n     base.max_atomic_width = 64;\n     base.pre_link_args.push(\"-m64\".to_string());\n \n-    Target {\n+    Ok(Target {\n         llvm_target: \"x86_64-unknown-netbsd\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -25,5 +25,5 @@ pub fn target() -> Target {\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         options: base,\n-    }\n+    })\n }"}, {"sha": "339dbd591a02e21be8de7a9775260d37e1b63a09", "filename": "src/librustc_back/target/x86_64_unknown_openbsd.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafecbf86855c30d2f6d9c518165edec4cca8248/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_openbsd.rs?ref=eafecbf86855c30d2f6d9c518165edec4cca8248", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::Target;\n+use target::{Target, TargetResult};\n \n-pub fn target() -> Target {\n+pub fn target() -> TargetResult {\n     let mut base = super::openbsd_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = 64;\n     base.pre_link_args.push(\"-m64\".to_string());\n \n-    Target {\n+    Ok(Target {\n         llvm_target: \"x86_64-unknown-openbsd\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"64\".to_string(),\n@@ -26,5 +26,5 @@ pub fn target() -> Target {\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         options: base,\n-    }\n+    })\n }"}]}