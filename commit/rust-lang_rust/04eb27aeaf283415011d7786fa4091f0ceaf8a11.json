{"sha": "04eb27aeaf283415011d7786fa4091f0ceaf8a11", "node_id": "C_kwDOAAsO6NoAKDA0ZWIyN2FlYWYyODM0MTUwMTFkNzc4NmZhNDA5MWYwY2VhZjhhMTE", "commit": {"author": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2021-12-09T20:42:44Z"}, "committer": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-01-12T16:23:22Z"}, "message": "Use method name from conf::DisallowedMethod\n\nSince def_path_str returns e.g. \"core::f32::<impl f32>::clamp\" for\n\"f32::clamp\"", "tree": {"sha": "c58a653b2d29e1dc6524f9757df1750b916277a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c58a653b2d29e1dc6524f9757df1750b916277a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04eb27aeaf283415011d7786fa4091f0ceaf8a11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04eb27aeaf283415011d7786fa4091f0ceaf8a11", "html_url": "https://github.com/rust-lang/rust/commit/04eb27aeaf283415011d7786fa4091f0ceaf8a11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04eb27aeaf283415011d7786fa4091f0ceaf8a11/comments", "author": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91581f6d5e0cc442397067363052f1e60f0d0941", "url": "https://api.github.com/repos/rust-lang/rust/commits/91581f6d5e0cc442397067363052f1e60f0d0941", "html_url": "https://github.com/rust-lang/rust/commit/91581f6d5e0cc442397067363052f1e60f0d0941"}], "stats": {"total": 60, "additions": 41, "deletions": 19}, "files": [{"sha": "73c00d97020bedf2a6badb9b698b89a59ce9b4de", "filename": "clippy_lints/src/disallowed_methods.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/04eb27aeaf283415011d7786fa4091f0ceaf8a11/clippy_lints%2Fsrc%2Fdisallowed_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04eb27aeaf283415011d7786fa4091f0ceaf8a11/clippy_lints%2Fsrc%2Fdisallowed_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_methods.rs?ref=04eb27aeaf283415011d7786fa4091f0ceaf8a11", "patch": "@@ -59,7 +59,7 @@ declare_clippy_lint! {\n #[derive(Clone, Debug)]\n pub struct DisallowedMethods {\n     conf_disallowed: Vec<conf::DisallowedMethod>,\n-    disallowed: DefIdMap<Option<String>>,\n+    disallowed: DefIdMap<usize>,\n }\n \n impl DisallowedMethods {\n@@ -75,17 +75,10 @@ impl_lint_pass!(DisallowedMethods => [DISALLOWED_METHODS]);\n \n impl<'tcx> LateLintPass<'tcx> for DisallowedMethods {\n     fn check_crate(&mut self, cx: &LateContext<'_>) {\n-        for conf in &self.conf_disallowed {\n-            let (path, reason) = match conf {\n-                conf::DisallowedMethod::Simple(path) => (path, None),\n-                conf::DisallowedMethod::WithReason { path, reason } => (\n-                    path,\n-                    reason.as_ref().map(|reason| format!(\"{} (from clippy.toml)\", reason)),\n-                ),\n-            };\n-            let segs: Vec<_> = path.split(\"::\").collect();\n+        for (index, conf) in self.conf_disallowed.iter().enumerate() {\n+            let segs: Vec<_> = conf.path().split(\"::\").collect();\n             if let Res::Def(_, id) = clippy_utils::path_to_res(cx, &segs) {\n-                self.disallowed.insert(id, reason);\n+                self.disallowed.insert(id, index);\n             }\n         }\n     }\n@@ -95,15 +88,17 @@ impl<'tcx> LateLintPass<'tcx> for DisallowedMethods {\n             Some(def_id) => def_id,\n             None => return,\n         };\n-        let reason = match self.disallowed.get(&def_id) {\n-            Some(reason) => reason,\n+        let conf = match self.disallowed.get(&def_id) {\n+            Some(&index) => &self.conf_disallowed[index],\n             None => return,\n         };\n-        let func_path = cx.tcx.def_path_str(def_id);\n-        let msg = format!(\"use of a disallowed method `{}`\", func_path);\n+        let msg = format!(\"use of a disallowed method `{}`\", conf.path());\n         span_lint_and_then(cx, DISALLOWED_METHODS, expr.span, &msg, |diag| {\n-            if let Some(reason) = reason {\n-                diag.note(reason);\n+            if let conf::DisallowedMethod::WithReason {\n+                reason: Some(reason), ..\n+            } = conf\n+            {\n+                diag.note(&format!(\"{} (from clippy.toml)\", reason));\n             }\n         });\n     }"}, {"sha": "d6deb50cc907379f7b66b633c8eaf77b298976a4", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04eb27aeaf283415011d7786fa4091f0ceaf8a11/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04eb27aeaf283415011d7786fa4091f0ceaf8a11/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=04eb27aeaf283415011d7786fa4091f0ceaf8a11", "patch": "@@ -23,6 +23,14 @@ pub enum DisallowedMethod {\n     WithReason { path: String, reason: Option<String> },\n }\n \n+impl DisallowedMethod {\n+    pub fn path(&self) -> &str {\n+        let (Self::Simple(path) | Self::WithReason { path, .. }) = self;\n+\n+        path\n+    }\n+}\n+\n /// A single disallowed type, used by the `DISALLOWED_TYPES` lint.\n #[derive(Clone, Debug, Deserialize)]\n #[serde(untagged)]"}, {"sha": "c902d21123dce0dc9d8200531fe6669275776aba", "filename": "tests/ui-toml/toml_disallowed_methods/clippy.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04eb27aeaf283415011d7786fa4091f0ceaf8a11/tests%2Fui-toml%2Ftoml_disallowed_methods%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/04eb27aeaf283415011d7786fa4091f0ceaf8a11/tests%2Fui-toml%2Ftoml_disallowed_methods%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_methods%2Fclippy.toml?ref=04eb27aeaf283415011d7786fa4091f0ceaf8a11", "patch": "@@ -1,6 +1,8 @@\n disallowed-methods = [\n     # just a string is shorthand for path only\n     \"std::iter::Iterator::sum\",\n+    \"f32::clamp\",\n+    \"slice::sort_unstable\",\n     # can give path and reason with an inline table\n     { path = \"regex::Regex::is_match\", reason = \"no matching allowed\" },\n     # can use an inline table but omit reason"}, {"sha": "338b3b5b28f429b9700d5849886109698f758242", "filename": "tests/ui-toml/toml_disallowed_methods/conf_disallowed_methods.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/04eb27aeaf283415011d7786fa4091f0ceaf8a11/tests%2Fui-toml%2Ftoml_disallowed_methods%2Fconf_disallowed_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04eb27aeaf283415011d7786fa4091f0ceaf8a11/tests%2Fui-toml%2Ftoml_disallowed_methods%2Fconf_disallowed_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_methods%2Fconf_disallowed_methods.rs?ref=04eb27aeaf283415011d7786fa4091f0ceaf8a11", "patch": "@@ -7,6 +7,11 @@ fn main() {\n     let re = Regex::new(r\"ab.*c\").unwrap();\n     re.is_match(\"abc\");\n \n-    let a = vec![1, 2, 3, 4];\n+    let mut a = vec![1, 2, 3, 4];\n     a.iter().sum::<i32>();\n+\n+    a.sort_unstable();\n+\n+    let _ = 2.0f32.clamp(3.0f32, 4.0f32);\n+    let _ = 2.0f64.clamp(3.0f64, 4.0f64);\n }"}, {"sha": "5533676aea287b80677e8ec9f9cd0423dd52e405", "filename": "tests/ui-toml/toml_disallowed_methods/conf_disallowed_methods.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/04eb27aeaf283415011d7786fa4091f0ceaf8a11/tests%2Fui-toml%2Ftoml_disallowed_methods%2Fconf_disallowed_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04eb27aeaf283415011d7786fa4091f0ceaf8a11/tests%2Fui-toml%2Ftoml_disallowed_methods%2Fconf_disallowed_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_methods%2Fconf_disallowed_methods.stderr?ref=04eb27aeaf283415011d7786fa4091f0ceaf8a11", "patch": "@@ -20,5 +20,17 @@ error: use of a disallowed method `std::iter::Iterator::sum`\n LL |     a.iter().sum::<i32>();\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: use of a disallowed method `slice::sort_unstable`\n+  --> $DIR/conf_disallowed_methods.rs:13:5\n+   |\n+LL |     a.sort_unstable();\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: use of a disallowed method `f32::clamp`\n+  --> $DIR/conf_disallowed_methods.rs:15:13\n+   |\n+LL |     let _ = 2.0f32.clamp(3.0f32, 4.0f32);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n "}]}