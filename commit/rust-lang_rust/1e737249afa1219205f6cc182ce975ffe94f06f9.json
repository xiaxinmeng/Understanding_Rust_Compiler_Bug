{"sha": "1e737249afa1219205f6cc182ce975ffe94f06f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNzM3MjQ5YWZhMTIxOTIwNWY2Y2MxODJjZTk3NWZmZTk0ZjA2Zjk=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-10-29T03:38:31Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-10-29T03:40:40Z"}, "message": "Allow using 1/2/3/4 for `x.py setup` options\n\nThis undocumented feature allows you to typo 'a' as '1'.", "tree": {"sha": "f02eb9277b5462bae788d091c1eb394293962a8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f02eb9277b5462bae788d091c1eb394293962a8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e737249afa1219205f6cc182ce975ffe94f06f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e737249afa1219205f6cc182ce975ffe94f06f9", "html_url": "https://github.com/rust-lang/rust/commit/1e737249afa1219205f6cc182ce975ffe94f06f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e737249afa1219205f6cc182ce975ffe94f06f9/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07e968b640e8ff76fa8be4b48b70ab80ea577800", "url": "https://api.github.com/repos/rust-lang/rust/commits/07e968b640e8ff76fa8be4b48b70ab80ea577800", "html_url": "https://github.com/rust-lang/rust/commit/07e968b640e8ff76fa8be4b48b70ab80ea577800"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "0945ceee6cee094717a3518c932b6764eb92614f", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1e737249afa1219205f6cc182ce975ffe94f06f9/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e737249afa1219205f6cc182ce975ffe94f06f9/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=1e737249afa1219205f6cc182ce975ffe94f06f9", "patch": "@@ -127,28 +127,31 @@ pub fn setup(src_path: &Path, profile: Profile) {\n \n // Used to get the path for `Subcommand::Setup`\n pub fn interactive_path() -> io::Result<Profile> {\n-    fn abbrev_all() -> impl Iterator<Item = (String, Profile)> {\n-        ('a'..).map(|c| c.to_string()).zip(Profile::all())\n+    fn abbrev_all() -> impl Iterator<Item = ((String, String), Profile)> {\n+        ('a'..)\n+            .zip(1..)\n+            .map(|(letter, number)| (letter.to_string(), number.to_string()))\n+            .zip(Profile::all())\n     }\n \n     fn parse_with_abbrev(input: &str) -> Result<Profile, String> {\n         let input = input.trim().to_lowercase();\n-        for (letter, profile) in abbrev_all() {\n-            if input == letter {\n+        for ((letter, number), profile) in abbrev_all() {\n+            if input == letter || input == number {\n                 return Ok(profile);\n             }\n         }\n         input.parse()\n     }\n \n     println!(\"Welcome to the Rust project! What do you want to do with x.py?\");\n-    for (letter, profile) in abbrev_all() {\n+    for ((letter, _), profile) in abbrev_all() {\n         println!(\"{}) {}: {}\", letter, profile, profile.purpose());\n     }\n     let template = loop {\n         print!(\n             \"Please choose one ({}): \",\n-            abbrev_all().map(|(l, _)| l).collect::<Vec<_>>().join(\"/\")\n+            abbrev_all().map(|((l, _), _)| l).collect::<Vec<_>>().join(\"/\")\n         );\n         io::stdout().flush()?;\n         let mut input = String::new();"}]}