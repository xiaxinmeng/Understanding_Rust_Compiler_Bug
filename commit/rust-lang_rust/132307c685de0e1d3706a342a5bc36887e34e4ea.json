{"sha": "132307c685de0e1d3706a342a5bc36887e34e4ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMjMwN2M2ODVkZTBlMWQzNzA2YTM0MmE1YmMzNjg4N2UzNGU0ZWE=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-01-16T05:25:30Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-01-16T05:25:30Z"}, "message": "Rename as_chunks_mut_unchecked -> as_chunks_unchecked_mut", "tree": {"sha": "828e7b7428572095d609b5369ed53b5cd2a8d900", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/828e7b7428572095d609b5369ed53b5cd2a8d900"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/132307c685de0e1d3706a342a5bc36887e34e4ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/132307c685de0e1d3706a342a5bc36887e34e4ea", "html_url": "https://github.com/rust-lang/rust/commit/132307c685de0e1d3706a342a5bc36887e34e4ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/132307c685de0e1d3706a342a5bc36887e34e4ea/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae4b5a21e62fe30a924c45e2734880c4de844446", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae4b5a21e62fe30a924c45e2734880c4de844446", "html_url": "https://github.com/rust-lang/rust/commit/ae4b5a21e62fe30a924c45e2734880c4de844446"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "de8d7fc29dc056f6e3403480be79f341d43ca928", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/132307c685de0e1d3706a342a5bc36887e34e4ea/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/132307c685de0e1d3706a342a5bc36887e34e4ea/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=132307c685de0e1d3706a342a5bc36887e34e4ea", "patch": "@@ -1038,22 +1038,22 @@ impl<T> [T] {\n     /// let slice: &mut [char] = &mut ['l', 'o', 'r', 'e', 'm', '!'];\n     /// let chunks: &mut [[char; 1]] =\n     ///     // SAFETY: 1-element chunks never have remainder\n-    ///     unsafe { slice.as_chunks_mut_unchecked() };\n+    ///     unsafe { slice.as_chunks_unchecked_mut() };\n     /// chunks[0] = ['L'];\n     /// assert_eq!(chunks, &[['L'], ['o'], ['r'], ['e'], ['m'], ['!']]);\n     /// let chunks: &mut [[char; 3]] =\n     ///     // SAFETY: The slice length (6) is a multiple of 3\n-    ///     unsafe { slice.as_chunks_mut_unchecked() };\n+    ///     unsafe { slice.as_chunks_unchecked_mut() };\n     /// chunks[1] = ['a', 'x', '?'];\n     /// assert_eq!(slice, &['L', 'o', 'r', 'a', 'x', '?']);\n     ///\n     /// // These would be unsound:\n-    /// // let chunks: &[[_; 5]] = slice.as_chunks_mut_unchecked() // The slice length is not a multiple of 5\n-    /// // let chunks: &[[_; 0]] = slice.as_chunks_mut_unchecked() // Zero-length chunks are never allowed\n+    /// // let chunks: &[[_; 5]] = slice.as_chunks_unchecked_mut() // The slice length is not a multiple of 5\n+    /// // let chunks: &[[_; 0]] = slice.as_chunks_unchecked_mut() // Zero-length chunks are never allowed\n     /// ```\n     #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n     #[inline]\n-    pub unsafe fn as_chunks_mut_unchecked<const N: usize>(&mut self) -> &mut [[T; N]] {\n+    pub unsafe fn as_chunks_unchecked_mut<const N: usize>(&mut self) -> &mut [[T; N]] {\n         debug_assert_ne!(N, 0);\n         debug_assert_eq!(self.len() % N, 0);\n         let new_len =\n@@ -1096,7 +1096,7 @@ impl<T> [T] {\n         let (multiple_of_n, remainder) = self.split_at_mut(len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n         // that the length of the subslice is a multiple of N.\n-        let array_slice = unsafe { multiple_of_n.as_chunks_mut_unchecked() };\n+        let array_slice = unsafe { multiple_of_n.as_chunks_unchecked_mut() };\n         (array_slice, remainder)\n     }\n \n@@ -1132,7 +1132,7 @@ impl<T> [T] {\n         let (remainder, multiple_of_n) = self.split_at_mut(self.len() - len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n         // that the length of the subslice is a multiple of N.\n-        let array_slice = unsafe { multiple_of_n.as_chunks_mut_unchecked() };\n+        let array_slice = unsafe { multiple_of_n.as_chunks_unchecked_mut() };\n         (remainder, array_slice)\n     }\n "}]}