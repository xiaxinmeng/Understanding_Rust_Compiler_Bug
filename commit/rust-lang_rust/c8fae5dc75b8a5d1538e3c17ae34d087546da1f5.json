{"sha": "c8fae5dc75b8a5d1538e3c17ae34d087546da1f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZmFlNWRjNzViOGE1ZDE1MzhlM2MxN2FlMzRkMDg3NTQ2ZGExZjU=", "commit": {"author": {"name": "Joshua Wise", "email": "joshua@joshuawise.com", "date": "2011-11-09T09:42:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-09T22:33:06Z"}, "message": "trans: Add binops (except for logic and comparators) and unops to trans_const_expr.  Working towards issue #570.", "tree": {"sha": "8dc577ea73c5b74c3092a8b32fe6954c94645ec8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dc577ea73c5b74c3092a8b32fe6954c94645ec8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8fae5dc75b8a5d1538e3c17ae34d087546da1f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8fae5dc75b8a5d1538e3c17ae34d087546da1f5", "html_url": "https://github.com/rust-lang/rust/commit/c8fae5dc75b8a5d1538e3c17ae34d087546da1f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8fae5dc75b8a5d1538e3c17ae34d087546da1f5/comments", "author": {"login": "jwise", "id": 87427, "node_id": "MDQ6VXNlcjg3NDI3", "avatar_url": "https://avatars.githubusercontent.com/u/87427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwise", "html_url": "https://github.com/jwise", "followers_url": "https://api.github.com/users/jwise/followers", "following_url": "https://api.github.com/users/jwise/following{/other_user}", "gists_url": "https://api.github.com/users/jwise/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwise/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwise/subscriptions", "organizations_url": "https://api.github.com/users/jwise/orgs", "repos_url": "https://api.github.com/users/jwise/repos", "events_url": "https://api.github.com/users/jwise/events{/privacy}", "received_events_url": "https://api.github.com/users/jwise/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e674a7e99f6dacd5a743e8255f2014321f88ccc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e674a7e99f6dacd5a743e8255f2014321f88ccc1", "html_url": "https://github.com/rust-lang/rust/commit/e674a7e99f6dacd5a743e8255f2014321f88ccc1"}], "stats": {"total": 80, "additions": 78, "deletions": 2}, "files": [{"sha": "59bfdadf62f09c3d691d21a26dff96f64ca77c46", "filename": "src/comp/middle/check_const.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c8fae5dc75b8a5d1538e3c17ae34d087546da1f5/src%2Fcomp%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8fae5dc75b8a5d1538e3c17ae34d087546da1f5/src%2Fcomp%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fcheck_const.rs?ref=c8fae5dc75b8a5d1538e3c17ae34d087546da1f5", "patch": "@@ -27,8 +27,20 @@ fn check_const_expr(tcx: ty::ctxt, ex: @expr, &&s: (), v: visit::vt<()>) {\n     visit::visit_expr(ex, s, v);\n     alt ex.node {\n       expr_lit(_) { }\n+      expr_binary(_, _, _) { /* subexps covered by visit */ }\n+      expr_unary(u, _) {\n+        alt u {\n+          box(_)  |\n+          uniq(_) |\n+          deref.  {\n+            tcx.sess.span_err(ex.span,\n+                              \"disallowed operator in constant expression\");\n+          }\n+          _ { }\n+        }\n+      }\n       _ { tcx.sess.span_err(ex.span,\n-          \"constant contains unimplemented expression type\"); }\n+            \"constant contains unimplemented expression type\"); }\n     }\n }\n "}, {"sha": "5e25d53e810a45f597f1d357509173279830fbdb", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c8fae5dc75b8a5d1538e3c17ae34d087546da1f5/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8fae5dc75b8a5d1538e3c17ae34d087546da1f5/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=c8fae5dc75b8a5d1538e3c17ae34d087546da1f5", "patch": "@@ -5290,7 +5290,71 @@ fn trans_tag_variant(cx: @local_ctxt, tag_id: ast::node_id,\n fn trans_const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n     alt e.node {\n       ast::expr_lit(lit) { ret trans_crate_lit(cx, *lit); }\n-      _ { cx.sess.span_unimpl(e.span, \"consts that's not a plain literal\"); }\n+      ast::expr_binary(b, e1, e2) {\n+        let te1 = trans_const_expr(cx, e1);\n+        let te2 = trans_const_expr(cx, e2);\n+        /* Neither type is bottom, and we expect them to be unified already,\n+         * so the following is safe. */\n+        let ty = ty::expr_ty(ccx_tcx(cx), e1);\n+        let is_float = ty::type_is_fp(ccx_tcx(cx), ty);\n+        let signed = ty::type_is_signed(ccx_tcx(cx), ty);\n+        ret alt b {\n+          ast::add.    {\n+            if is_float { llvm::LLVMConstFAdd(te1, te2) }\n+            else        { llvm::LLVMConstAdd(te1, te2) }\n+          }\n+          ast::sub.    {\n+            if is_float { llvm::LLVMConstFSub(te1, te2) }\n+            else        { llvm::LLVMConstSub(te1, te2) }\n+          }\n+          ast::mul.    {\n+            if is_float { llvm::LLVMConstFMul(te1, te2) }\n+            else        { llvm::LLVMConstMul(te1, te2) }\n+          }\n+          ast::div.    {\n+            if is_float    { llvm::LLVMConstFDiv(te1, te2) }\n+            else if signed { llvm::LLVMConstSDiv(te1, te2) }\n+            else           { llvm::LLVMConstUDiv(te1, te2) }\n+          }\n+          ast::rem.    {\n+            if is_float    { llvm::LLVMConstFRem(te1, te2) }\n+            else if signed { llvm::LLVMConstSRem(te1, te2) }\n+            else           { llvm::LLVMConstURem(te1, te2) }\n+          }\n+          ast::and.    |\n+          ast::or.     { cx.sess.span_unimpl(e.span, \"binop logic\"); }\n+          ast::bitxor. { llvm::LLVMConstXor(te1, te2) }\n+          ast::bitand. { llvm::LLVMConstAnd(te1, te2) }\n+          ast::bitor.  { llvm::LLVMConstOr(te1, te2) }\n+          ast::lsl.    { llvm::LLVMConstShl(te1, te2) }\n+          ast::lsr.    { llvm::LLVMConstLShr(te1, te2) }\n+          ast::asr.    { llvm::LLVMConstAShr(te1, te2) }\n+          ast::eq.     |\n+          ast::lt.     |\n+          ast::le.     |\n+          ast::ne.     |\n+          ast::ge.     |\n+          ast::gt.     { cx.sess.span_unimpl(e.span, \"binop comparator\"); }\n+        }\n+      }\n+      ast::expr_unary(u, e) {\n+        let te = trans_const_expr(cx, e);\n+        let ty = ty::expr_ty(ccx_tcx(cx), e);\n+        let is_float = ty::type_is_fp(ccx_tcx(cx), ty);\n+        ret alt u {\n+          ast::box(_)  |\n+          ast::uniq(_) |\n+          ast::deref.  { cx.sess.span_bug(e.span,\n+                           \"bad unop type in trans_const_expr\"); }\n+          ast::not.    { llvm::LLVMConstNot(te) }\n+          ast::neg.    {\n+            if is_float { llvm::LLVMConstFNeg(te) }\n+            else        { llvm::LLVMConstNeg(te) }\n+          }\n+        }\n+      }\n+      _ { cx.sess.span_bug(e.span,\n+            \"bad constant expression type in trans_const_expr\"); }\n     }\n }\n "}]}