{"sha": "c8159b3e351f3840f4097761c8404e064869ff2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MTU5YjNlMzUxZjM4NDBmNDA5Nzc2MWM4NDA0ZTA2NDg2OWZmMmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-16T19:34:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-16T19:34:40Z"}, "message": "auto merge of #6473 : nikomatsakis/rust/issue-5967-rvalue-immutability, r=pcwalton\n\nSimpler version of PR #5974 based on new borrowck.", "tree": {"sha": "e45c974fe333d599fbd9d86b0e11ed593e0a1b57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e45c974fe333d599fbd9d86b0e11ed593e0a1b57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8159b3e351f3840f4097761c8404e064869ff2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8159b3e351f3840f4097761c8404e064869ff2a", "html_url": "https://github.com/rust-lang/rust/commit/c8159b3e351f3840f4097761c8404e064869ff2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8159b3e351f3840f4097761c8404e064869ff2a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf8341fc9e1c18c973a6744ecd7ebb97adbd3025", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025", "html_url": "https://github.com/rust-lang/rust/commit/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025"}, {"sha": "63d878f36b2630ac0fcb4bcaa123b135126b091a", "url": "https://api.github.com/repos/rust-lang/rust/commits/63d878f36b2630ac0fcb4bcaa123b135126b091a", "html_url": "https://github.com/rust-lang/rust/commit/63d878f36b2630ac0fcb4bcaa123b135126b091a"}], "stats": {"total": 85, "additions": 83, "deletions": 2}, "files": [{"sha": "e377bebcc2697e1908107a512ac21fd986acd7f3", "filename": "src/librustc/middle/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c8159b3e351f3840f4097761c8404e064869ff2a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8159b3e351f3840f4097761c8404e064869ff2a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=c8159b3e351f3840f4097761c8404e064869ff2a", "patch": "@@ -93,7 +93,7 @@ impl GuaranteeLifetimeContext {\n                 let omit_root = (\n                     ptr_mutbl == m_imm &&\n                     self.bccx.is_subregion_of(self.loan_region, base_scope) &&\n-                    base.mutbl.is_immutable() &&\n+                    self.is_rvalue_or_immutable(base) &&\n                     !self.is_moved(base)\n                 );\n \n@@ -168,6 +168,19 @@ impl GuaranteeLifetimeContext {\n         }\n     }\n \n+    fn is_rvalue_or_immutable(&self,\n+                              cmt: mc::cmt) -> bool {\n+        //! We can omit the root on an `@T` value if the location\n+        //! that holds the box is either (1) an rvalue, in which case\n+        //! it is in a non-user-accessible temporary, or (2) an immutable\n+        //! lvalue.\n+\n+        cmt.mutbl.is_immutable() || match cmt.guarantor().cat {\n+            mc::cat_rvalue => true,\n+            _ => false\n+        }\n+    }\n+\n     fn check_root(&self,\n                   cmt_deref: mc::cmt,\n                   cmt_base: mc::cmt,"}, {"sha": "91c0b8e61cc7b62f75689f13d00fd0bc9e37c94d", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8159b3e351f3840f4097761c8404e064869ff2a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8159b3e351f3840f4097761c8404e064869ff2a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=c8159b3e351f3840f4097761c8404e064869ff2a", "patch": "@@ -551,7 +551,7 @@ pub impl mem_categorization_ctxt {\n             id:elt.id(),\n             span:elt.span(),\n             cat:cat_rvalue,\n-            mutbl:McImmutable,\n+            mutbl:McDeclared,\n             ty:expr_ty\n         }\n     }"}, {"sha": "10bef907a28a3076e89202fae9927b4d97db8bed", "filename": "src/test/compile-fail/borrowck-rvalues-mutable-bad.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c8159b3e351f3840f4097761c8404e064869ff2a/src%2Ftest%2Fcompile-fail%2Fborrowck-rvalues-mutable-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8159b3e351f3840f4097761c8404e064869ff2a/src%2Ftest%2Fcompile-fail%2Fborrowck-rvalues-mutable-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-rvalues-mutable-bad.rs?ref=c8159b3e351f3840f4097761c8404e064869ff2a", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that rvalue lifetimes is limited to the enclosing trans\n+// cleanup scope. It is unclear that this is the correct lifetime for\n+// rvalues, but that's what it is right now.\n+\n+struct Counter {\n+    value: uint\n+}\n+\n+impl Counter {\n+    fn new(v: uint) -> Counter {\n+        Counter {value: v}\n+    }\n+\n+    fn inc<'a>(&'a mut self) -> &'a mut Counter {\n+        self.value += 1;\n+        self\n+    }\n+\n+    fn get(&self) -> uint {\n+        self.value\n+    }\n+}\n+\n+pub fn main() {\n+    let v = Counter::new(22).inc().inc().get();\n+    //~^ ERROR borrowed value does not live long enough\n+    assert_eq!(v, 24);;\n+}"}, {"sha": "cf5a9341c9dc437747d91eb7d32c27fd94bdd6e3", "filename": "src/test/run-pass/borrowck-rvalues-mutable.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c8159b3e351f3840f4097761c8404e064869ff2a/src%2Ftest%2Frun-pass%2Fborrowck-rvalues-mutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8159b3e351f3840f4097761c8404e064869ff2a/src%2Ftest%2Frun-pass%2Fborrowck-rvalues-mutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-rvalues-mutable.rs?ref=c8159b3e351f3840f4097761c8404e064869ff2a", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Counter {\n+    value: uint\n+}\n+\n+impl Counter {\n+    fn new(v: uint) -> Counter {\n+        Counter {value: v}\n+    }\n+\n+    fn get_and_inc(&mut self) -> uint {\n+        let v = self.value;\n+        self.value += 1;\n+        v\n+    }\n+}\n+\n+pub fn main() {\n+    let v = Counter::new(22).get_and_inc();\n+    assert_eq!(v, 22);\n+}"}]}