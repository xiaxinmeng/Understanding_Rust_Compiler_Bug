{"sha": "3386f12eca5db75ee679c5d08fecec88ae99e6a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzODZmMTJlY2E1ZGI3NWVlNjc5YzVkMDhmZWNlYzg4YWU5OWU2YTA=", "commit": {"author": {"name": "Samrat Man Singh", "email": "samratmansingh@gmail.com", "date": "2020-08-03T05:31:42Z"}, "committer": {"name": "Samrat Man Singh", "email": "samratmansingh@gmail.com", "date": "2020-08-03T05:31:42Z"}, "message": "Wrap io::Result from `FileDescriptor::{read,write,seek}` in InterpResult\n\nThe outer InterpResult will be used to indicate that a fn is not\nimplemented for a struct(eg. `write` for Stdin).\n\nThe inner io::Result is just the result from the read/write/seek.", "tree": {"sha": "1781b0c85bcb11a498b87086235df5888389fee8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1781b0c85bcb11a498b87086235df5888389fee8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3386f12eca5db75ee679c5d08fecec88ae99e6a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3386f12eca5db75ee679c5d08fecec88ae99e6a0", "html_url": "https://github.com/rust-lang/rust/commit/3386f12eca5db75ee679c5d08fecec88ae99e6a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3386f12eca5db75ee679c5d08fecec88ae99e6a0/comments", "author": {"login": "samrat", "id": 480806, "node_id": "MDQ6VXNlcjQ4MDgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/480806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samrat", "html_url": "https://github.com/samrat", "followers_url": "https://api.github.com/users/samrat/followers", "following_url": "https://api.github.com/users/samrat/following{/other_user}", "gists_url": "https://api.github.com/users/samrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/samrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samrat/subscriptions", "organizations_url": "https://api.github.com/users/samrat/orgs", "repos_url": "https://api.github.com/users/samrat/repos", "events_url": "https://api.github.com/users/samrat/events{/privacy}", "received_events_url": "https://api.github.com/users/samrat/received_events", "type": "User", "site_admin": false}, "committer": {"login": "samrat", "id": 480806, "node_id": "MDQ6VXNlcjQ4MDgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/480806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samrat", "html_url": "https://github.com/samrat", "followers_url": "https://api.github.com/users/samrat/followers", "following_url": "https://api.github.com/users/samrat/following{/other_user}", "gists_url": "https://api.github.com/users/samrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/samrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samrat/subscriptions", "organizations_url": "https://api.github.com/users/samrat/orgs", "repos_url": "https://api.github.com/users/samrat/repos", "events_url": "https://api.github.com/users/samrat/events{/privacy}", "received_events_url": "https://api.github.com/users/samrat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3956f4200184c88f0f6100f15669b1e6639804f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3956f4200184c88f0f6100f15669b1e6639804f", "html_url": "https://github.com/rust-lang/rust/commit/e3956f4200184c88f0f6100f15669b1e6639804f"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "6f46401ece657026a9c212af2dbdea038834db4c", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3386f12eca5db75ee679c5d08fecec88ae99e6a0/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3386f12eca5db75ee679c5d08fecec88ae99e6a0/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=3386f12eca5db75ee679c5d08fecec88ae99e6a0", "patch": "@@ -25,26 +25,26 @@ struct FileHandle {\n trait FileDescriptor<'tcx> : std::fmt::Debug {\n     fn as_file_handle(&self) -> InterpResult<'tcx, &FileHandle>;\n \n-    fn read(&mut self, bytes: &mut [u8]) -> Result<usize, io::Error>;\n-    fn write(&mut self, bytes: &[u8]) -> Result<usize, io::Error>;\n-    fn seek(&mut self, offset: SeekFrom) -> Result<u64, io::Error>;\n+    fn read(&mut self, bytes: &mut [u8]) -> InterpResult<'tcx, io::Result<usize>>;\n+    fn write(&mut self, bytes: &[u8]) -> InterpResult<'tcx, io::Result<usize>>;\n+    fn seek(&mut self, offset: SeekFrom) -> InterpResult<'tcx, io::Result<u64>>;\n }\n \n impl<'tcx> FileDescriptor<'tcx> for FileHandle {\n     fn as_file_handle(&self) -> InterpResult<'tcx, &FileHandle> {\n         Ok(&self)\n     }\n \n-    fn read(&mut self, bytes: &mut [u8]) -> Result<usize, io::Error> {\n-        self.file.read(bytes)\n+    fn read(&mut self, bytes: &mut [u8]) -> InterpResult<'tcx, io::Result<usize>> {\n+        Ok(self.file.read(bytes))\n     }\n \n-    fn write(&mut self, bytes: &[u8]) -> Result<usize, io::Error> {\n-        self.file.write(bytes)\n+    fn write(&mut self, bytes: &[u8]) -> InterpResult<'tcx, io::Result<usize>> {\n+        Ok(self.file.write(bytes))\n     }\n \n-    fn seek(&mut self, offset: SeekFrom) -> Result<u64, io::Error> {\n-        self.file.seek(offset)\n+    fn seek(&mut self, offset: SeekFrom) -> InterpResult<'tcx, io::Result<u64>> {\n+        Ok(self.file.seek(offset))\n     }\n }\n \n@@ -509,7 +509,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // `File::read` never returns a value larger than `count`,\n             // so this cannot fail.\n             let result = file_descriptor\n-                .read(&mut bytes)\n+                .read(&mut bytes)?\n                 .map(|c| i64::try_from(c).unwrap());\n \n             match result {\n@@ -554,7 +554,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if let Some(file_descriptor) = this.machine.file_handler.handles.get_mut(&fd) {\n             let bytes = this.memory.read_bytes(buf, Size::from_bytes(count))?;\n             let result = file_descriptor\n-                .write(&bytes)\n+                .write(&bytes)?\n                 .map(|c| i64::try_from(c).unwrap());\n             this.try_unwrap_io_result(result)\n         } else {\n@@ -590,7 +590,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         if let Some(file_descriptor) = this.machine.file_handler.handles.get_mut(&fd) {\n             let result = file_descriptor\n-                .seek(seek_from)\n+                .seek(seek_from)?\n                 .map(|offset| i64::try_from(offset).unwrap());\n             this.try_unwrap_io_result(result)\n         } else {"}]}