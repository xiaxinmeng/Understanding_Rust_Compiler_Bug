{"sha": "ffd18fc22c7dcfd59bb09567217046f6e0b71e7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZDE4ZmMyMmM3ZGNmZDU5YmIwOTU2NzIxNzA0NmY2ZTBiNzFlN2Y=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-04-11T19:52:12Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-15T15:23:51Z"}, "message": "rustc_metadata: parametrize Table by element type.", "tree": {"sha": "e716e94fa124b27ecd872f49ad6f952972bdf1fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e716e94fa124b27ecd872f49ad6f952972bdf1fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffd18fc22c7dcfd59bb09567217046f6e0b71e7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffd18fc22c7dcfd59bb09567217046f6e0b71e7f", "html_url": "https://github.com/rust-lang/rust/commit/ffd18fc22c7dcfd59bb09567217046f6e0b71e7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffd18fc22c7dcfd59bb09567217046f6e0b71e7f/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f49274032bc2819c6f9acaaf4e85e5200fc8bbba", "url": "https://api.github.com/repos/rust-lang/rust/commits/f49274032bc2819c6f9acaaf4e85e5200fc8bbba", "html_url": "https://github.com/rust-lang/rust/commit/f49274032bc2819c6f9acaaf4e85e5200fc8bbba"}], "stats": {"total": 81, "additions": 43, "deletions": 38}, "files": [{"sha": "ef11ebdae43b456b70cdf7222cc648540b57e6df", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffd18fc22c7dcfd59bb09567217046f6e0b71e7f/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd18fc22c7dcfd59bb09567217046f6e0b71e7f/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=ffd18fc22c7dcfd59bb09567217046f6e0b71e7f", "patch": "@@ -47,7 +47,7 @@ struct EncodeContext<'tcx> {\n     opaque: opaque::Encoder,\n     tcx: TyCtxt<'tcx>,\n \n-    entries_table: Table<'tcx>,\n+    entries_table: Table<Entry<'tcx>>,\n \n     lazy_state: LazyState,\n     type_shorthands: FxHashMap<Ty<'tcx>, usize>,"}, {"sha": "a1b097225b7d25c9b5b5c27315a43be56c2f3727", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ffd18fc22c7dcfd59bb09567217046f6e0b71e7f/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd18fc22c7dcfd59bb09567217046f6e0b71e7f/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=ffd18fc22c7dcfd59bb09567217046f6e0b71e7f", "patch": "@@ -156,6 +156,14 @@ crate enum LazyState {\n     Previous(NonZeroUsize),\n }\n \n+// FIXME(#59875) `Lazy!(T)` replaces `Lazy<T>`, passing the `Meta` parameter\n+// manually, instead of relying on the default, to get the correct variance.\n+// Only needed when `T` itself contains a parameter (e.g. `'tcx`).\n+macro_rules! Lazy {\n+    ([$T:ty]) => {Lazy<[$T], usize>};\n+    ($T:ty) => {Lazy<$T, ()>};\n+}\n+\n #[derive(RustcEncodable, RustcDecodable)]\n crate struct CrateRoot<'tcx> {\n     pub name: Symbol,\n@@ -183,10 +191,10 @@ crate struct CrateRoot<'tcx> {\n     pub source_map: Lazy<[syntax_pos::SourceFile]>,\n     pub def_path_table: Lazy<hir::map::definitions::DefPathTable>,\n     pub impls: Lazy<[TraitImpls]>,\n-    pub exported_symbols: Lazy<[(ExportedSymbol<'tcx>, SymbolExportLevel)]>,\n+    pub exported_symbols: Lazy!([(ExportedSymbol<'tcx>, SymbolExportLevel)]),\n     pub interpret_alloc_index: Lazy<[u32]>,\n \n-    pub entries_table: Lazy<[Table<'tcx>]>,\n+    pub entries_table: Lazy!([Table<Entry<'tcx>>]),\n \n     /// The DefIndex's of any proc macros delcared by\n     /// this crate\n@@ -226,14 +234,14 @@ crate struct Entry<'tcx> {\n     pub stability: Option<Lazy<attr::Stability>>,\n     pub deprecation: Option<Lazy<attr::Deprecation>>,\n \n-    pub ty: Option<Lazy<Ty<'tcx>>>,\n+    pub ty: Option<Lazy!(Ty<'tcx>)>,\n     pub inherent_impls: Lazy<[DefIndex]>,\n     pub variances: Lazy<[ty::Variance]>,\n     pub generics: Option<Lazy<ty::Generics>>,\n-    pub predicates: Option<Lazy<ty::GenericPredicates<'tcx>>>,\n-    pub predicates_defined_on: Option<Lazy<ty::GenericPredicates<'tcx>>>,\n+    pub predicates: Option<Lazy!(ty::GenericPredicates<'tcx>)>,\n+    pub predicates_defined_on: Option<Lazy!(ty::GenericPredicates<'tcx>)>,\n \n-    pub mir: Option<Lazy<mir::Body<'tcx>>>,\n+    pub mir: Option<Lazy!(mir::Body<'tcx>)>,\n     pub promoted_mir: Option<Lazy<IndexVec<mir::Promoted, mir::Body<'tcx>>>>,\n }\n \n@@ -253,22 +261,22 @@ crate enum EntryKind<'tcx> {\n     OpaqueTy,\n     Enum(ReprOptions),\n     Field,\n-    Variant(Lazy<VariantData<'tcx>>),\n-    Struct(Lazy<VariantData<'tcx>>, ReprOptions),\n-    Union(Lazy<VariantData<'tcx>>, ReprOptions),\n-    Fn(Lazy<FnData<'tcx>>),\n-    ForeignFn(Lazy<FnData<'tcx>>),\n+    Variant(Lazy!(VariantData<'tcx>)),\n+    Struct(Lazy!(VariantData<'tcx>), ReprOptions),\n+    Union(Lazy!(VariantData<'tcx>), ReprOptions),\n+    Fn(Lazy!(FnData<'tcx>)),\n+    ForeignFn(Lazy!(FnData<'tcx>)),\n     Mod(Lazy<ModData>),\n     MacroDef(Lazy<MacroDef>),\n-    Closure(Lazy<ClosureData<'tcx>>),\n-    Generator(Lazy<GeneratorData<'tcx>>),\n-    Trait(Lazy<TraitData<'tcx>>),\n-    Impl(Lazy<ImplData<'tcx>>),\n-    Method(Lazy<MethodData<'tcx>>),\n+    Closure(Lazy!(ClosureData<'tcx>)),\n+    Generator(Lazy!(GeneratorData<'tcx>)),\n+    Trait(Lazy!(TraitData<'tcx>)),\n+    Impl(Lazy!(ImplData<'tcx>)),\n+    Method(Lazy!(MethodData<'tcx>)),\n     AssocType(AssocContainer),\n     AssocOpaqueTy(AssocContainer),\n     AssocConst(AssocContainer, ConstQualif, Lazy<RenderedConst>),\n-    TraitAlias(Lazy<TraitAliasData<'tcx>>),\n+    TraitAlias(Lazy!(TraitAliasData<'tcx>)),\n }\n \n /// Additional data for EntryKind::Const and EntryKind::AssocConst\n@@ -298,7 +306,7 @@ crate struct FnData<'tcx> {\n     pub asyncness: hir::IsAsync,\n     pub constness: hir::Constness,\n     pub param_names: Lazy<[ast::Name]>,\n-    pub sig: Lazy<ty::PolyFnSig<'tcx>>,\n+    pub sig: Lazy!(ty::PolyFnSig<'tcx>),\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n@@ -309,7 +317,7 @@ crate struct VariantData<'tcx> {\n     pub ctor: Option<DefIndex>,\n     /// If this is a tuple struct or variant\n     /// ctor, this is its \"function\" signature.\n-    pub ctor_sig: Option<Lazy<ty::PolyFnSig<'tcx>>>,\n+    pub ctor_sig: Option<Lazy!(ty::PolyFnSig<'tcx>)>,\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n@@ -318,12 +326,12 @@ crate struct TraitData<'tcx> {\n     pub paren_sugar: bool,\n     pub has_auto_impl: bool,\n     pub is_marker: bool,\n-    pub super_predicates: Lazy<ty::GenericPredicates<'tcx>>,\n+    pub super_predicates: Lazy!(ty::GenericPredicates<'tcx>),\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n crate struct TraitAliasData<'tcx> {\n-    pub super_predicates: Lazy<ty::GenericPredicates<'tcx>>,\n+    pub super_predicates: Lazy!(ty::GenericPredicates<'tcx>),\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n@@ -334,7 +342,7 @@ crate struct ImplData<'tcx> {\n \n     /// This is `Some` only for impls of `CoerceUnsized`.\n     pub coerce_unsized_info: Option<ty::adjustment::CoerceUnsizedInfo>,\n-    pub trait_ref: Option<Lazy<ty::TraitRef<'tcx>>>,\n+    pub trait_ref: Option<Lazy!(ty::TraitRef<'tcx>)>,\n }\n \n \n@@ -385,7 +393,7 @@ crate struct MethodData<'tcx> {\n \n #[derive(RustcEncodable, RustcDecodable)]\n crate struct ClosureData<'tcx> {\n-    pub sig: Lazy<ty::PolyFnSig<'tcx>>,\n+    pub sig: Lazy!(ty::PolyFnSig<'tcx>),\n }\n \n #[derive(RustcEncodable, RustcDecodable)]"}, {"sha": "94966a44edd239d681c6ad2da23aeffe7704e27e", "filename": "src/librustc_metadata/table.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ffd18fc22c7dcfd59bb09567217046f6e0b71e7f/src%2Flibrustc_metadata%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd18fc22c7dcfd59bb09567217046f6e0b71e7f/src%2Flibrustc_metadata%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftable.rs?ref=ffd18fc22c7dcfd59bb09567217046f6e0b71e7f", "patch": "@@ -69,32 +69,29 @@ impl FixedSizeEncoding for u32 {\n     }\n }\n \n-/// While we are generating the metadata, we also track the position\n-/// of each DefIndex. It is not required that all definitions appear\n-/// in the metadata, nor that they are serialized in order, and\n-/// therefore we first allocate the vector here and fill it with\n-/// `0`. Whenever an index is visited, we fill in the\n-/// appropriate spot by calling `record_position`. We should never\n-/// visit the same index twice.\n-crate struct Table<'tcx> {\n+/// Random-access position table, allowing encoding in an arbitrary order\n+/// (e.g. while visiting the definitions of a crate), and on-demand decoding\n+/// of specific indices (e.g. queries for per-definition data).\n+/// Similar to `Vec<Lazy<T>>`, but with zero-copy decoding.\n+crate struct Table<T> {\n     positions: Vec<u8>,\n-    _marker: PhantomData<&'tcx ()>,\n+    _marker: PhantomData<T>,\n }\n \n-impl Table<'tcx> {\n+impl<T> Table<T> {\n     crate fn new(max_index: usize) -> Self {\n         Table {\n             positions: vec![0; max_index * 4],\n             _marker: PhantomData,\n         }\n     }\n \n-    crate fn record(&mut self, def_id: DefId, entry: Lazy<Entry<'tcx>>) {\n+    crate fn record(&mut self, def_id: DefId, entry: Lazy<T>) {\n         assert!(def_id.is_local());\n         self.record_index(def_id.index, entry);\n     }\n \n-    fn record_index(&mut self, item: DefIndex, entry: Lazy<Entry<'tcx>>) {\n+    crate fn record_index(&mut self, item: DefIndex, entry: Lazy<T>) {\n         let position: u32 = entry.position.get().try_into().unwrap();\n         let array_index = item.index();\n \n@@ -118,11 +115,11 @@ impl Table<'tcx> {\n     }\n }\n \n-impl Lazy<[Table<'tcx>]> {\n+impl<T> Lazy<[Table<T>]> {\n     /// Given the metadata, extract out the offset of a particular\n     /// DefIndex (if any).\n     #[inline(never)]\n-    crate fn lookup(&self, bytes: &[u8], def_index: DefIndex) -> Option<Lazy<Entry<'tcx>>> {\n+    crate fn lookup(&self, bytes: &[u8], def_index: DefIndex) -> Option<Lazy<T>> {\n         debug!(\"Table::lookup: index={:?} len={:?}\",\n                def_index,\n                self.meta);"}]}