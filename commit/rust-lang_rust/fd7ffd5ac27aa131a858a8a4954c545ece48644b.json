{"sha": "fd7ffd5ac27aa131a858a8a4954c545ece48644b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkN2ZmZDVhYzI3YWExMzFhODU4YThhNDk1NGM1NDVlY2U0ODY0NGI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-05T18:46:43Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-05T18:46:43Z"}, "message": "rustc: Add inlineness to the fn decl instead", "tree": {"sha": "e68f481aafd8775fc4fd2e0a85a63511ada4d93e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e68f481aafd8775fc4fd2e0a85a63511ada4d93e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd7ffd5ac27aa131a858a8a4954c545ece48644b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd7ffd5ac27aa131a858a8a4954c545ece48644b", "html_url": "https://github.com/rust-lang/rust/commit/fd7ffd5ac27aa131a858a8a4954c545ece48644b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd7ffd5ac27aa131a858a8a4954c545ece48644b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59e9b629c042e9417e5ac662cbf21c0205e765c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/59e9b629c042e9417e5ac662cbf21c0205e765c7", "html_url": "https://github.com/rust-lang/rust/commit/59e9b629c042e9417e5ac662cbf21c0205e765c7"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "23dadca206e5f51004412dd9e0e32f7596d294bc", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7ffd5ac27aa131a858a8a4954c545ece48644b/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7ffd5ac27aa131a858a8a4954c545ece48644b/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=fd7ffd5ac27aa131a858a8a4954c545ece48644b", "patch": "@@ -178,6 +178,7 @@ fn mk_tests(cx: &test_ctxt) -> @ast::item {\n         {inputs: ~[],\n          output: ret_ty,\n          purity: ast::impure_fn,\n+         il: ast::il_normal,\n          cf: ast::return,\n          constraints: ~[]};\n     let proto = ast::proto_fn;\n@@ -295,6 +296,7 @@ fn mk_main(cx: &test_ctxt) -> @ast::item {\n         {inputs: ~[args_arg],\n          output: @ret_ty,\n          purity: ast::impure_fn,\n+         il: ast::il_normal,\n          cf: ast::return,\n          constraints: ~[]};\n     let proto = ast::proto_fn;"}, {"sha": "5b0787a5fc49def0b5334755d234ef1ad722444e", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd7ffd5ac27aa131a858a8a4954c545ece48644b/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7ffd5ac27aa131a858a8a4954c545ece48644b/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=fd7ffd5ac27aa131a858a8a4954c545ece48644b", "patch": "@@ -511,10 +511,13 @@ type ty_constr = spanned[ty_constr_];\n  corresponding to these. */\n type arg = {mode: mode, ty: @ty, ident: ident, id: node_id};\n \n+tag inlineness { il_normal; il_inline; }\n+\n type fn_decl =\n     {inputs: arg[],\n      output: @ty,\n      purity: purity,\n+     il: inlineness,\n      cf: controlflow,\n      constraints: (@constr)[]};\n "}, {"sha": "af0673da3587b64a5516f4653cb7725ffcec91b9", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7ffd5ac27aa131a858a8a4954c545ece48644b/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7ffd5ac27aa131a858a8a4954c545ece48644b/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=fd7ffd5ac27aa131a858a8a4954c545ece48644b", "patch": "@@ -191,6 +191,7 @@ fn noop_fold_native_item(ni: &@native_item, fld: ast_fold) -> @native_item {\n                                  {inputs: ivec::map(fold_arg, fdec.inputs),\n                                   output: fld.fold_ty(fdec.output),\n                                   purity: fdec.purity,\n+                                  il: fdec.il,\n                                   cf: fdec.cf,\n                                   constraints:\n                                       ivec::map(fld.fold_constr,\n@@ -449,6 +450,7 @@ fn noop_fold_fn(f: &_fn, fld: ast_fold) -> _fn {\n              {inputs: ivec::map(fold_arg, f.decl.inputs),\n               output: fld.fold_ty(f.decl.output),\n               purity: f.decl.purity,\n+              il: f.decl.il,\n               cf: f.decl.cf,\n               constraints: ivec::map(fld.fold_constr, f.decl.constraints)},\n          proto: f.proto,"}, {"sha": "125c6f0485239f4008db93f516c11b65edcda55b", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd7ffd5ac27aa131a858a8a4954c545ece48644b/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7ffd5ac27aa131a858a8a4954c545ece48644b/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=fd7ffd5ac27aa131a858a8a4954c545ece48644b", "patch": "@@ -1730,13 +1730,15 @@ fn parse_fn_decl(p: &parser, purity: ast::purity) -> ast::fn_decl {\n         ret {inputs: inputs.node,\n              output: t,\n              purity: purity,\n+             il: ast::il_normal,\n              cf: ast::return,\n              constraints: constrs};\n       }\n       a_bang. {\n         ret {inputs: inputs.node,\n              output: @spanned(p.get_lo_pos(), p.get_hi_pos(), ast::ty_bot),\n              purity: purity,\n+             il: ast::il_normal,\n              cf: ast::noreturn,\n              constraints: constrs};\n       }\n@@ -1839,6 +1841,7 @@ fn parse_item_res(p: &parser, attrs: &ast::attribute[]) ->\n                 id: p.get_id()}],\n          output: @spanned(lo, lo, ast::ty_nil),\n          purity: ast::impure_fn,\n+         il: ast::il_normal,\n          cf: ast::return,\n          constraints: ~[]};\n     let f = {decl: decl, proto: ast::proto_fn, body: dtor};"}]}