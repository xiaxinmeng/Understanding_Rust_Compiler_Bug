{"sha": "67a8666ac8e053981f9de854a96841003f36ced3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3YTg2NjZhYzhlMDUzOTgxZjlkZTg1NGE5Njg0MTAwM2YzNmNlZDM=", "commit": {"author": {"name": "Bernardo Meurer", "email": "meurerbernardo@gmail.com", "date": "2018-08-23T16:21:40Z"}, "committer": {"name": "Bernardo Meurer", "email": "meurerbernardo@gmail.com", "date": "2018-08-23T16:21:40Z"}, "message": "More tidy fixes to CTFE", "tree": {"sha": "17dc80a0a8b9851939168cce34612439869cd218", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17dc80a0a8b9851939168cce34612439869cd218"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67a8666ac8e053981f9de854a96841003f36ced3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJbft8uAAoJEOQhx0GR6hhssoAIALyW5vsxP9kpI+urc8st/C5O\n92SdbUT98W3FnI4KahAYED4Yo536Wyw0xOu/Vb9Nh3TDJ3etQe4OeNbNs6W7SpCU\neBgZSXt9IGk0/d9XlP65IUqItWn1jkgfjaeRAPpBJclJN/ufIAgw7iHRAcMPoC1F\n/1NixQDRfkaVsDgr0A7BgT4xuN2x31a0G7uaBr69LTWRhJ2a1MtWZvlp6CEowStx\nRqPjPdntTMMNesQicpDuud+TWCfiK3MnSXRZIoS12tz6hiyofDujmoEsO2R4SEJi\n2J9vGpPBvyO+5cWiO+sKEiz4koTqdpu9cmItFDiBO6pV+xuUERHW5Y+KB6Bd3G8=\n=e/0p\n-----END PGP SIGNATURE-----", "payload": "tree 17dc80a0a8b9851939168cce34612439869cd218\nparent 46b885f62b03957b5a89786f87c66b82fbde7253\nauthor Bernardo Meurer <meurerbernardo@gmail.com> 1535041300 -0700\ncommitter Bernardo Meurer <meurerbernardo@gmail.com> 1535041300 -0700\n\nMore tidy fixes to CTFE\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67a8666ac8e053981f9de854a96841003f36ced3", "html_url": "https://github.com/rust-lang/rust/commit/67a8666ac8e053981f9de854a96841003f36ced3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67a8666ac8e053981f9de854a96841003f36ced3/comments", "author": {"login": "lovesegfault", "id": 7243783, "node_id": "MDQ6VXNlcjcyNDM3ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/7243783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lovesegfault", "html_url": "https://github.com/lovesegfault", "followers_url": "https://api.github.com/users/lovesegfault/followers", "following_url": "https://api.github.com/users/lovesegfault/following{/other_user}", "gists_url": "https://api.github.com/users/lovesegfault/gists{/gist_id}", "starred_url": "https://api.github.com/users/lovesegfault/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lovesegfault/subscriptions", "organizations_url": "https://api.github.com/users/lovesegfault/orgs", "repos_url": "https://api.github.com/users/lovesegfault/repos", "events_url": "https://api.github.com/users/lovesegfault/events{/privacy}", "received_events_url": "https://api.github.com/users/lovesegfault/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lovesegfault", "id": 7243783, "node_id": "MDQ6VXNlcjcyNDM3ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/7243783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lovesegfault", "html_url": "https://github.com/lovesegfault", "followers_url": "https://api.github.com/users/lovesegfault/followers", "following_url": "https://api.github.com/users/lovesegfault/following{/other_user}", "gists_url": "https://api.github.com/users/lovesegfault/gists{/gist_id}", "starred_url": "https://api.github.com/users/lovesegfault/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lovesegfault/subscriptions", "organizations_url": "https://api.github.com/users/lovesegfault/orgs", "repos_url": "https://api.github.com/users/lovesegfault/repos", "events_url": "https://api.github.com/users/lovesegfault/events{/privacy}", "received_events_url": "https://api.github.com/users/lovesegfault/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46b885f62b03957b5a89786f87c66b82fbde7253", "url": "https://api.github.com/repos/rust-lang/rust/commits/46b885f62b03957b5a89786f87c66b82fbde7253", "html_url": "https://github.com/rust-lang/rust/commit/46b885f62b03957b5a89786f87c66b82fbde7253"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "8e77af7526e351528151425d1c02861a494b8dae", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67a8666ac8e053981f9de854a96841003f36ced3/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a8666ac8e053981f9de854a96841003f36ced3/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=67a8666ac8e053981f9de854a96841003f36ced3", "patch": "@@ -472,7 +472,8 @@ fn to_str<'a, 'tcx, 'mir>(\n     if let Value::ScalarPair(ptr, len) = val {\n         let len = len.not_undef()?.to_bits(ecx.memory.pointer_size())?;\n         let bytes = ecx.memory.read_bytes(ptr.not_undef()?, Size::from_bytes(len as u64))?;\n-        let str = ::std::str::from_utf8(bytes).map_err(|err| EvalErrorKind::ValidationFailure(err.to_string()))?;\n+        let str = ::std::str::from_utf8(bytes)\n+            .map_err(|err| EvalErrorKind::ValidationFailure(err.to_string()))?;\n         Ok(Symbol::intern(str))\n     } else {\n         bug!(\"panic arg is not a str\")"}, {"sha": "aec7bb0c0d6064916549037e2f850c809d398edb", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/67a8666ac8e053981f9de854a96841003f36ced3/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a8666ac8e053981f9de854a96841003f36ced3/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=67a8666ac8e053981f9de854a96841003f36ced3", "patch": "@@ -252,16 +252,11 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                     // Second argument must be a tuple matching the argument list of sig\n                     let snd_ty = real_sig.inputs_and_output[1];\n                     match snd_ty.sty {\n-<<<<<<< HEAD\n                         ty::Tuple(tys) if sig.inputs().len() == tys.len() =>\n-                            if sig.inputs().iter().zip(tys).all(|(ty, real_ty)| check_ty_compat(ty, real_ty)) {\n-=======\n-                        ty::TyTuple(tys) if sig.inputs().len() == tys.len() =>\n                             if sig.inputs()\n-                                  .iter()\n-                                  .zip(tys)\n-                                  .all(|(ty, real_ty)| check_ty_compat(ty, real_ty)) {\n->>>>>>> 7d30ba9... Fixup long code lines\n+                                .iter()\n+                                .zip(tys)\n+                                .all(|(ty, real_ty)| check_ty_compat(ty, real_ty)) {\n                                 return Ok(true)\n                             },\n                         _ => {}"}]}