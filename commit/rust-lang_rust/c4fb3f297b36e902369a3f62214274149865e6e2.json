{"sha": "c4fb3f297b36e902369a3f62214274149865e6e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZmIzZjI5N2IzNmU5MDIzNjlhM2Y2MjIxNDI3NDE0OTg2NWU2ZTI=", "commit": {"author": {"name": "Wonwoo Choi", "email": "chwo9843@gmail.com", "date": "2020-08-18T06:04:26Z"}, "committer": {"name": "Wonwoo Choi", "email": "chwo9843@gmail.com", "date": "2020-08-18T06:28:56Z"}, "message": "Provide better spans for the match arm without tail expression", "tree": {"sha": "7b81f54a3207df904fab187fda802648a4776e7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b81f54a3207df904fab187fda802648a4776e7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4fb3f297b36e902369a3f62214274149865e6e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4fb3f297b36e902369a3f62214274149865e6e2", "html_url": "https://github.com/rust-lang/rust/commit/c4fb3f297b36e902369a3f62214274149865e6e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4fb3f297b36e902369a3f62214274149865e6e2/comments", "author": {"login": "tirr-c", "id": 2322996, "node_id": "MDQ6VXNlcjIzMjI5OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/2322996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirr-c", "html_url": "https://github.com/tirr-c", "followers_url": "https://api.github.com/users/tirr-c/followers", "following_url": "https://api.github.com/users/tirr-c/following{/other_user}", "gists_url": "https://api.github.com/users/tirr-c/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirr-c/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirr-c/subscriptions", "organizations_url": "https://api.github.com/users/tirr-c/orgs", "repos_url": "https://api.github.com/users/tirr-c/repos", "events_url": "https://api.github.com/users/tirr-c/events{/privacy}", "received_events_url": "https://api.github.com/users/tirr-c/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tirr-c", "id": 2322996, "node_id": "MDQ6VXNlcjIzMjI5OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/2322996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirr-c", "html_url": "https://github.com/tirr-c", "followers_url": "https://api.github.com/users/tirr-c/followers", "following_url": "https://api.github.com/users/tirr-c/following{/other_user}", "gists_url": "https://api.github.com/users/tirr-c/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirr-c/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirr-c/subscriptions", "organizations_url": "https://api.github.com/users/tirr-c/orgs", "repos_url": "https://api.github.com/users/tirr-c/repos", "events_url": "https://api.github.com/users/tirr-c/events{/privacy}", "received_events_url": "https://api.github.com/users/tirr-c/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b97e9b5dc74e705cd01603c5f735652a04460a60", "url": "https://api.github.com/repos/rust-lang/rust/commits/b97e9b5dc74e705cd01603c5f735652a04460a60", "html_url": "https://github.com/rust-lang/rust/commit/b97e9b5dc74e705cd01603c5f735652a04460a60"}], "stats": {"total": 176, "additions": 154, "deletions": 22}, "files": [{"sha": "8212958510a6f88bb5a672b35c5e1cccdb583a69", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c4fb3f297b36e902369a3f62214274149865e6e2/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4fb3f297b36e902369a3f62214274149865e6e2/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=c4fb3f297b36e902369a3f62214274149865e6e2", "patch": "@@ -609,6 +609,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 err.span_label(span, \"expected due to this\");\n             }\n             ObligationCauseCode::MatchExpressionArm(box MatchExpressionArmCause {\n+                semi_span,\n                 source,\n                 ref prior_arms,\n                 last_ty,\n@@ -663,6 +664,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             format!(\"this and all prior arms are found to be of type `{}`\", t),\n                         );\n                     }\n+                    if let Some(sp) = semi_span {\n+                        err.span_suggestion_short(\n+                            sp,\n+                            \"consider removing this semicolon\",\n+                            String::new(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n                 }\n             },\n             ObligationCauseCode::IfExpression(box IfExpressionCause { then, outer, semicolon }) => {"}, {"sha": "f86403fa502bb02e225618a7a95949381e331fcf", "filename": "src/librustc_middle/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4fb3f297b36e902369a3f62214274149865e6e2/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4fb3f297b36e902369a3f62214274149865e6e2/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fmod.rs?ref=c4fb3f297b36e902369a3f62214274149865e6e2", "patch": "@@ -345,6 +345,7 @@ static_assert_size!(ObligationCauseCode<'_>, 32);\n #[derive(Clone, Debug, PartialEq, Eq, Hash, Lift)]\n pub struct MatchExpressionArmCause<'tcx> {\n     pub arm_span: Span,\n+    pub semi_span: Option<Span>,\n     pub source: hir::MatchSource,\n     pub prior_arms: Vec<Span>,\n     pub last_ty: Ty<'tcx>,"}, {"sha": "40088bc06900543a885943d1ff4e1c197da07eac", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c4fb3f297b36e902369a3f62214274149865e6e2/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4fb3f297b36e902369a3f62214274149865e6e2/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=c4fb3f297b36e902369a3f62214274149865e6e2", "patch": "@@ -124,11 +124,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n             } else {\n-                let arm_span = if let hir::ExprKind::Block(blk, _) = &arm.body.kind {\n-                    // Point at the block expr instead of the entire block\n-                    blk.expr.as_ref().map(|e| e.span).unwrap_or(arm.body.span)\n+                let (arm_span, semi_span) = if let hir::ExprKind::Block(blk, _) = &arm.body.kind {\n+                    self.find_block_span(blk, prior_arm_ty)\n                 } else {\n-                    arm.body.span\n+                    (arm.body.span, None)\n                 };\n                 let (span, code) = match i {\n                     // The reason for the first arm to fail is not that the match arms diverge,\n@@ -138,6 +137,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         expr.span,\n                         ObligationCauseCode::MatchExpressionArm(box MatchExpressionArmCause {\n                             arm_span,\n+                            semi_span,\n                             source: match_src,\n                             prior_arms: other_arms.clone(),\n                             last_ty: prior_arm_ty.unwrap(),\n@@ -295,14 +295,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let mut remove_semicolon = None;\n         let error_sp = if let ExprKind::Block(block, _) = &else_expr.kind {\n-            if let Some(expr) = &block.expr {\n-                expr.span\n-            } else if let Some(stmt) = block.stmts.last() {\n-                // possibly incorrect trailing `;` in the else arm\n-                remove_semicolon = self.could_remove_semicolon(block, then_ty);\n-                stmt.span\n-            } else {\n-                // empty block; point at its entirety\n+            let (error_sp, semi_sp) = self.find_block_span(block, Some(then_ty));\n+            remove_semicolon = semi_sp;\n+            if block.expr.is_none() && block.stmts.is_empty() {\n                 // Avoid overlapping spans that aren't as readable:\n                 // ```\n                 // 2 |        let x = if true {\n@@ -333,26 +328,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if outer_sp.is_some() {\n                     outer_sp = Some(self.tcx.sess.source_map().guess_head_span(span));\n                 }\n-                else_expr.span\n             }\n+            error_sp\n         } else {\n             // shouldn't happen unless the parser has done something weird\n             else_expr.span\n         };\n \n         // Compute `Span` of `then` part of `if`-expression.\n         let then_sp = if let ExprKind::Block(block, _) = &then_expr.kind {\n-            if let Some(expr) = &block.expr {\n-                expr.span\n-            } else if let Some(stmt) = block.stmts.last() {\n-                // possibly incorrect trailing `;` in the else arm\n-                remove_semicolon = remove_semicolon.or(self.could_remove_semicolon(block, else_ty));\n-                stmt.span\n-            } else {\n-                // empty block; point at its entirety\n+            let (then_sp, semi_sp) = self.find_block_span(block, Some(else_ty));\n+            remove_semicolon = remove_semicolon.or(semi_sp);\n+            if block.expr.is_none() && block.stmts.is_empty() {\n                 outer_sp = None; // same as in `error_sp`; cleanup output\n-                then_expr.span\n             }\n+            then_sp\n         } else {\n             // shouldn't happen unless the parser has done something weird\n             then_expr.span\n@@ -450,4 +440,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             scrut_ty\n         }\n     }\n+\n+    fn find_block_span(\n+        &self,\n+        block: &'tcx hir::Block<'tcx>,\n+        expected_ty: Option<Ty<'tcx>>,\n+    ) -> (Span, Option<Span>) {\n+        if let Some(expr) = &block.expr {\n+            (expr.span, None)\n+        } else if let Some(stmt) = block.stmts.last() {\n+            // possibly incorrect trailing `;` in the else arm\n+            (stmt.span, expected_ty.and_then(|ty| self.could_remove_semicolon(block, ty)))\n+        } else {\n+            // empty block; point at its entirety\n+            (block.span, None)\n+        }\n+    }\n }"}, {"sha": "9ab40fa3cce940b315ccdaf2dad5999025aa085e", "filename": "src/test/ui/match/match-incompat-type-semi.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c4fb3f297b36e902369a3f62214274149865e6e2/src%2Ftest%2Fui%2Fmatch%2Fmatch-incompat-type-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4fb3f297b36e902369a3f62214274149865e6e2/src%2Ftest%2Fui%2Fmatch%2Fmatch-incompat-type-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-incompat-type-semi.rs?ref=c4fb3f297b36e902369a3f62214274149865e6e2", "patch": "@@ -0,0 +1,42 @@\n+// Diagnostic enhancement explained in issue #75418.\n+// Point at the last statement in the block if there's no tail expression,\n+// and suggest removing the semicolon if appropriate.\n+\n+fn main() {\n+    let _ = match Some(42) {\n+        Some(x) => {\n+            x\n+        },\n+        None => {\n+            0;\n+            //~^ ERROR incompatible types\n+            //~| HELP consider removing this semicolon\n+        },\n+    };\n+\n+    let _ = if let Some(x) = Some(42) {\n+        x\n+    } else {\n+        0;\n+        //~^ ERROR incompatible types\n+        //~| HELP consider removing this semicolon\n+    };\n+\n+    let _ = match Some(42) {\n+        Some(x) => {\n+            x\n+        },\n+        None => {\n+            ();\n+            //~^ ERROR incompatible types\n+        },\n+    };\n+\n+    let _ = match Some(42) {\n+        Some(x) => {\n+            x\n+        },\n+        None => { //~ ERROR incompatible types\n+        },\n+    };\n+}"}, {"sha": "701f15fdc4b60faa7b795d5676b469af4914bb81", "filename": "src/test/ui/match/match-incompat-type-semi.stderr", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/c4fb3f297b36e902369a3f62214274149865e6e2/src%2Ftest%2Fui%2Fmatch%2Fmatch-incompat-type-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4fb3f297b36e902369a3f62214274149865e6e2/src%2Ftest%2Fui%2Fmatch%2Fmatch-incompat-type-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-incompat-type-semi.stderr?ref=c4fb3f297b36e902369a3f62214274149865e6e2", "patch": "@@ -0,0 +1,74 @@\n+error[E0308]: `match` arms have incompatible types\n+  --> $DIR/match-incompat-type-semi.rs:11:13\n+   |\n+LL |       let _ = match Some(42) {\n+   |  _____________-\n+LL | |         Some(x) => {\n+LL | |             x\n+   | |             - this is found to be of type `{integer}`\n+LL | |         },\n+LL | |         None => {\n+LL | |             0;\n+   | |             ^-\n+   | |             ||\n+   | |             |help: consider removing this semicolon\n+   | |             expected integer, found `()`\n+...  |\n+LL | |         },\n+LL | |     };\n+   | |_____- `match` arms have incompatible types\n+\n+error[E0308]: `if` and `else` have incompatible types\n+  --> $DIR/match-incompat-type-semi.rs:20:9\n+   |\n+LL |       let _ = if let Some(x) = Some(42) {\n+   |  _____________-\n+LL | |         x\n+   | |         - expected because of this\n+LL | |     } else {\n+LL | |         0;\n+   | |         ^-\n+   | |         ||\n+   | |         |help: consider removing this semicolon\n+   | |         expected integer, found `()`\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____- `if` and `else` have incompatible types\n+\n+error[E0308]: `match` arms have incompatible types\n+  --> $DIR/match-incompat-type-semi.rs:30:13\n+   |\n+LL |       let _ = match Some(42) {\n+   |  _____________-\n+LL | |         Some(x) => {\n+LL | |             x\n+   | |             - this is found to be of type `{integer}`\n+LL | |         },\n+LL | |         None => {\n+LL | |             ();\n+   | |             ^^^ expected integer, found `()`\n+LL | |\n+LL | |         },\n+LL | |     };\n+   | |_____- `match` arms have incompatible types\n+\n+error[E0308]: `match` arms have incompatible types\n+  --> $DIR/match-incompat-type-semi.rs:39:17\n+   |\n+LL |        let _ = match Some(42) {\n+   |   _____________-\n+LL |  |         Some(x) => {\n+LL |  |             x\n+   |  |             - this is found to be of type `{integer}`\n+LL |  |         },\n+LL |  |         None => {\n+   |  |_________________^\n+LL | ||         },\n+   | ||_________^ expected integer, found `()`\n+LL |  |     };\n+   |  |_____- `match` arms have incompatible types\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}