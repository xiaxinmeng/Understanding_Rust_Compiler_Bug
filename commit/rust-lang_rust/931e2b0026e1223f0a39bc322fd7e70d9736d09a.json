{"sha": "931e2b0026e1223f0a39bc322fd7e70d9736d09a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMWUyYjAwMjZlMTIyM2YwYTM5YmMzMjJmZDdlNzBkOTczNmQwOWE=", "commit": {"author": {"name": "Konrad Borowski", "email": "konrad@borowski.pw", "date": "2018-12-29T16:29:50Z"}, "committer": {"name": "Konrad Borowski", "email": "konrad@borowski.pw", "date": "2018-12-29T16:29:50Z"}, "message": "Use match ergonomics for attrs lint", "tree": {"sha": "bfec080582ded93e9afc5e8617d6f21229037129", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfec080582ded93e9afc5e8617d6f21229037129"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/931e2b0026e1223f0a39bc322fd7e70d9736d09a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/931e2b0026e1223f0a39bc322fd7e70d9736d09a", "html_url": "https://github.com/rust-lang/rust/commit/931e2b0026e1223f0a39bc322fd7e70d9736d09a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/931e2b0026e1223f0a39bc322fd7e70d9736d09a/comments", "author": {"login": "xfix", "id": 1297598, "node_id": "MDQ6VXNlcjEyOTc1OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1297598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xfix", "html_url": "https://github.com/xfix", "followers_url": "https://api.github.com/users/xfix/followers", "following_url": "https://api.github.com/users/xfix/following{/other_user}", "gists_url": "https://api.github.com/users/xfix/gists{/gist_id}", "starred_url": "https://api.github.com/users/xfix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xfix/subscriptions", "organizations_url": "https://api.github.com/users/xfix/orgs", "repos_url": "https://api.github.com/users/xfix/repos", "events_url": "https://api.github.com/users/xfix/events{/privacy}", "received_events_url": "https://api.github.com/users/xfix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xfix", "id": 1297598, "node_id": "MDQ6VXNlcjEyOTc1OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1297598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xfix", "html_url": "https://github.com/xfix", "followers_url": "https://api.github.com/users/xfix/followers", "following_url": "https://api.github.com/users/xfix/following{/other_user}", "gists_url": "https://api.github.com/users/xfix/gists{/gist_id}", "starred_url": "https://api.github.com/users/xfix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xfix/subscriptions", "organizations_url": "https://api.github.com/users/xfix/orgs", "repos_url": "https://api.github.com/users/xfix/repos", "events_url": "https://api.github.com/users/xfix/events{/privacy}", "received_events_url": "https://api.github.com/users/xfix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bf71a8e6286b647bef901b95c031968a9b76b68", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf71a8e6286b647bef901b95c031968a9b76b68", "html_url": "https://github.com/rust-lang/rust/commit/3bf71a8e6286b647bef901b95c031968a9b76b68"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "69e6131d26ae30d6f308f6c1ce5ace4dc6861723", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/931e2b0026e1223f0a39bc322fd7e70d9736d09a/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/931e2b0026e1223f0a39bc322fd7e70d9736d09a/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=931e2b0026e1223f0a39bc322fd7e70d9736d09a", "patch": "@@ -212,7 +212,7 @@ impl LintPass for AttrPass {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n     fn check_attribute(&mut self, cx: &LateContext<'a, 'tcx>, attr: &'tcx Attribute) {\n-        if let Some(ref items) = attr.meta_item_list() {\n+        if let Some(items) = &attr.meta_item_list() {\n             match &*attr.name().as_str() {\n                 \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n                     check_clippy_lint_names(cx, items);\n@@ -224,8 +224,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n             }\n             for item in items {\n                 if_chain! {\n-                    if let NestedMetaItemKind::MetaItem(ref mi) = item.node;\n-                    if let MetaItemKind::NameValue(ref lit) = mi.node;\n+                    if let NestedMetaItemKind::MetaItem(mi) = &item.node;\n+                    if let MetaItemKind::NameValue(lit) = &mi.node;\n                     if mi.name() == \"since\";\n                     then {\n                         check_semver(cx, item.span, lit);\n@@ -244,7 +244,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n                 let skip_unused_imports = item.attrs.iter().any(|attr| attr.name() == \"macro_use\");\n \n                 for attr in &item.attrs {\n-                    if let Some(ref lint_list) = attr.meta_item_list() {\n+                    if let Some(lint_list) = &attr.meta_item_list() {\n                         match &*attr.name().as_str() {\n                             \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n                                 // whitelist `unused_imports` and `deprecated` for `use` items\n@@ -381,22 +381,22 @@ fn is_relevant_trait(tcx: TyCtxt<'_, '_, '_>, item: &TraitItem) -> bool {\n \n fn is_relevant_block(tcx: TyCtxt<'_, '_, '_>, tables: &ty::TypeckTables<'_>, block: &Block) -> bool {\n     if let Some(stmt) = block.stmts.first() {\n-        match stmt.node {\n+        match &stmt.node {\n             StmtKind::Decl(_, _) => true,\n-            StmtKind::Expr(ref expr, _) | StmtKind::Semi(ref expr, _) => is_relevant_expr(tcx, tables, expr),\n+            StmtKind::Expr(expr, _) | StmtKind::Semi(expr, _) => is_relevant_expr(tcx, tables, expr),\n         }\n     } else {\n         block.expr.as_ref().map_or(false, |e| is_relevant_expr(tcx, tables, e))\n     }\n }\n \n fn is_relevant_expr(tcx: TyCtxt<'_, '_, '_>, tables: &ty::TypeckTables<'_>, expr: &Expr) -> bool {\n-    match expr.node {\n-        ExprKind::Block(ref block, _) => is_relevant_block(tcx, tables, block),\n-        ExprKind::Ret(Some(ref e)) => is_relevant_expr(tcx, tables, e),\n+    match &expr.node {\n+        ExprKind::Block(block, _) => is_relevant_block(tcx, tables, block),\n+        ExprKind::Ret(Some(e)) => is_relevant_expr(tcx, tables, e),\n         ExprKind::Ret(None) | ExprKind::Break(_, None) => false,\n-        ExprKind::Call(ref path_expr, _) => {\n-            if let ExprKind::Path(ref qpath) = path_expr.node {\n+        ExprKind::Call(path_expr, _) => {\n+            if let ExprKind::Path(qpath) = &path_expr.node {\n                 if let Some(fun_id) = opt_def_id(tables.qpath_def(qpath, path_expr.hir_id)) {\n                     !match_def_path(tcx, fun_id, &paths::BEGIN_PANIC)\n                 } else {\n@@ -443,7 +443,7 @@ fn check_attrs(cx: &LateContext<'_, '_>, span: Span, name: Name, attrs: &[Attrib\n             }\n         }\n \n-        if let Some(ref values) = attr.meta_item_list() {\n+        if let Some(values) = attr.meta_item_list() {\n             if values.len() != 1 || attr.name() != \"inline\" {\n                 continue;\n             }\n@@ -463,7 +463,7 @@ fn check_attrs(cx: &LateContext<'_, '_>, span: Span, name: Name, attrs: &[Attrib\n }\n \n fn check_semver(cx: &LateContext<'_, '_>, span: Span, lit: &Lit) {\n-    if let LitKind::Str(ref is, _) = lit.node {\n+    if let LitKind::Str(is, _) = lit.node {\n         if Version::parse(&is.as_str()).is_ok() {\n             return;\n         }\n@@ -477,7 +477,7 @@ fn check_semver(cx: &LateContext<'_, '_>, span: Span, lit: &Lit) {\n }\n \n fn is_word(nmi: &NestedMetaItem, expected: &str) -> bool {\n-    if let NestedMetaItemKind::MetaItem(ref mi) = nmi.node {\n+    if let NestedMetaItemKind::MetaItem(mi) = &nmi.node {\n         mi.is_word() && mi.name() == expected\n     } else {\n         false\n@@ -512,7 +512,7 @@ impl EarlyLintPass for CfgAttrPass {\n         if_chain! {\n             // check cfg_attr\n             if attr.name() == \"cfg_attr\";\n-            if let Some(ref items) = attr.meta_item_list();\n+            if let Some(items) = attr.meta_item_list();\n             if items.len() == 2;\n             // check for `rustfmt`\n             if let Some(feature_item) = items[0].meta_item();"}]}