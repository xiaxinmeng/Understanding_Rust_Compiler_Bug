{"sha": "986de65b979bde3968c9c438c4cc9c1f98ba9e2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NmRlNjViOTc5YmRlMzk2OGM5YzQzOGM0Y2M5YzFmOThiYTllMmE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-21T04:28:10Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-21T04:28:10Z"}, "message": "Write output to files", "tree": {"sha": "71186391857282bf25f878e87187f862c5132d77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71186391857282bf25f878e87187f862c5132d77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/986de65b979bde3968c9c438c4cc9c1f98ba9e2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/986de65b979bde3968c9c438c4cc9c1f98ba9e2a", "html_url": "https://github.com/rust-lang/rust/commit/986de65b979bde3968c9c438c4cc9c1f98ba9e2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/986de65b979bde3968c9c438c4cc9c1f98ba9e2a/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eccf43536be15e6c57bd2d00d82bdbaca5406ae2", "url": "https://api.github.com/repos/rust-lang/rust/commits/eccf43536be15e6c57bd2d00d82bdbaca5406ae2", "html_url": "https://github.com/rust-lang/rust/commit/eccf43536be15e6c57bd2d00d82bdbaca5406ae2"}], "stats": {"total": 72, "additions": 64, "deletions": 8}, "files": [{"sha": "dd8f220eb2738db71aaff680af5db78b9ed2834d", "filename": "src/changes.rs", "status": "modified", "additions": 49, "deletions": 6, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/986de65b979bde3968c9c438c4cc9c1f98ba9e2a/src%2Fchanges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986de65b979bde3968c9c438c4cc9c1f98ba9e2a/src%2Fchanges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchanges.rs?ref=986de65b979bde3968c9c438c4cc9c1f98ba9e2a", "patch": "@@ -17,6 +17,9 @@ use strings::string_buffer::StringBuffer;\n use std::collections::HashMap;\n use syntax::codemap::{CodeMap, Span,BytePos};\n use std::fmt;\n+use std::fs::File;\n+use std::io::Write;\n+use WriteMode;\n \n // This is basically a wrapper around a bunch of Ropes which makes it convenient\n // to work with libsyntax. It is badly named.\n@@ -84,8 +87,8 @@ impl<'a> ChangeSet<'a> {\n         }\n     }\n \n-    pub fn push_str(&mut self, file_name: &str, text: &str) {\n-        let buf = self.file_map.get_mut(&*file_name).unwrap();\n+    pub fn push_str(&mut self, filename: &str, text: &str) {\n+        let buf = self.file_map.get_mut(&*filename).unwrap();\n         buf.push_str(text)\n     }\n \n@@ -94,13 +97,13 @@ impl<'a> ChangeSet<'a> {\n         self.push_str(&file_name, text)\n     }\n \n-    pub fn cur_offset(&mut self, file_name: &str) -> usize {\n-        self.file_map[&*file_name].cur_offset()\n+    pub fn cur_offset(&mut self, filename: &str) -> usize {\n+        self.file_map[&*filename].cur_offset()\n     }\n \n     pub fn cur_offset_span(&mut self, span: Span) -> usize {\n-        let file_name = self.codemap.span_to_filename(span);\n-        self.cur_offset(&file_name)\n+        let filename = self.codemap.span_to_filename(span);\n+        self.cur_offset(&filename)\n     }\n \n     // Return an iterator over the entire changed text.\n@@ -112,6 +115,46 @@ impl<'a> ChangeSet<'a> {\n         }\n     }\n \n+    pub fn write_all_files(&self, mode: WriteMode) -> Result<(), ::std::io::Error> {\n+        for filename in self.file_map.keys() {\n+            try!(self.write_file(filename, mode));\n+        }\n+\n+        Ok(())\n+    }\n+\n+    pub fn write_file(&self, filename: &str, mode: WriteMode) -> Result<(), ::std::io::Error> {\n+        let text = &self.file_map[filename];\n+\n+        match mode {\n+            WriteMode::Overwrite => {\n+                // Do a little dance to make writing safer - write to a temp file\n+                // rename the original to a .bk, then rename the temp file to the\n+                // original.\n+                let tmp_name = filename.to_string() + \".tmp\";\n+                let bk_name = filename.to_string() + \".bk\";\n+                {\n+                    // Write text to temp file\n+                    let mut tmp_file = try!(File::create(&tmp_name));\n+                    try!(write!(tmp_file, \"{}\", text));\n+                }\n+\n+                try!(::std::fs::rename(filename, bk_name));\n+                try!(::std::fs::rename(tmp_name, filename));\n+            }\n+            WriteMode::NewFile(extn) => {\n+                let filename = filename.to_string() + \".\" + extn;\n+                let mut file = try!(File::create(&filename));\n+                try!(write!(file, \"{}\", text));\n+            }\n+            _ => {\n+                println!(\"{}:\\n\", filename);\n+                println!(\"{}\", text);\n+            }\n+        }\n+\n+        Ok(())\n+    }\n }\n \n // Iterates over each file in the ChangSet. Yields the filename and the changed"}, {"sha": "f8263e6b0ae8d1dbd379bc66ade3707c96a48770", "filename": "src/mod.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/986de65b979bde3968c9c438c4cc9c1f98ba9e2a/src%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986de65b979bde3968c9c438c4cc9c1f98ba9e2a/src%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmod.rs?ref=986de65b979bde3968c9c438c4cc9c1f98ba9e2a", "patch": "@@ -23,9 +23,9 @@\n // Fix fns and methods properly\n //   dead spans\n //\n-// Writing output\n // Smoke testing till we can use it\n //   end of multi-line string has wspace\n+//   no newline at the end of doc.rs\n \n #[macro_use]\n extern crate log;\n@@ -62,6 +62,15 @@ const TAB_SPACES: usize = 4;\n const FN_BRACE_STYLE: BraceStyle = BraceStyle::SameLineWhere;\n const FN_RETURN_INDENT: ReturnIndent = ReturnIndent::WithArgs;\n \n+#[derive(Copy, Clone, Eq, PartialEq, Debug)]\n+pub enum WriteMode {\n+    Overwrite,\n+    // str is the extension of the new file\n+    NewFile(&'static str),\n+    // Write the output to stdout.\n+    Display,\n+}\n+\n #[derive(Copy, Clone, Eq, PartialEq, Debug)]\n enum BraceStyle {\n     AlwaysNextLine,\n@@ -1062,8 +1071,12 @@ impl<'a> CompilerCalls<'a> for RustFmtCalls {\n             let mut changes = fmt_ast(krate, codemap);\n             fmt_lines(&mut changes);\n \n-            println!(\"{}\", changes);\n             // FIXME(#5) Should be user specified whether to show or replace.\n+            let result = changes.write_all_files(WriteMode::Display);\n+\n+            if let Err(msg) = result {\n+                println!(\"Error writing files: {}\", msg);\n+            }\n         };\n \n         control"}]}