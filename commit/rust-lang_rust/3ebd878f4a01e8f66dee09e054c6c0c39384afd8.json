{"sha": "3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYmQ4NzhmNGEwMWU4ZjY2ZGVlMDllMDU0YzZjMGMzOTM4NGFmZDg=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-19T05:45:24Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-13T03:43:38Z"}, "message": "Make moves explicit in rpass tests", "tree": {"sha": "28f423d49598acb12d1bd03f142e9ff875b0e3dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28f423d49598acb12d1bd03f142e9ff875b0e3dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "html_url": "https://github.com/rust-lang/rust/commit/3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21453480903601700efb52c88a98e9428b03c4d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/21453480903601700efb52c88a98e9428b03c4d3", "html_url": "https://github.com/rust-lang/rust/commit/21453480903601700efb52c88a98e9428b03c4d3"}], "stats": {"total": 377, "additions": 192, "deletions": 185}, "files": [{"sha": "dc861829c11c70837c3e3ef93f4b235634e7e679", "filename": "src/test/run-pass/argument-passing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargument-passing.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -12,7 +12,7 @@ fn f2(a: int, f: fn(int)) -> int { f(1); return a; }\n \n fn main() {\n     let mut a = {mut x: 1}, b = 2, c = 3;\n-    assert (f1(a, &mut b, c) == 6);\n+    assert (f1(a, &mut b, move c) == 6);\n     assert (a.x == 0);\n     assert (b == 10);\n     assert (f2(a.x, |x| a.x = 50 ) == 0);"}, {"sha": "a8e6832d33cc4816c2585c29f2aa520ddc822403", "filename": "src/test/run-pass/auto-ref-sliceable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -4,7 +4,7 @@ trait Pushable<T> {\n \n impl<T> ~[T]: Pushable<T> {\n     fn push_val(&mut self, +t: T) {\n-        self.push(t);\n+        self.push(move t);\n     }\n }\n "}, {"sha": "f50d74a2df25bd6215418d2057d926c2cda5c05e", "filename": "src/test/run-pass/fn-bare-spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -1,7 +1,7 @@\n // This is what the signature to spawn should look like with bare functions\n \n fn spawn<T: Send>(val: T, f: extern fn(T)) {\n-    f(val);\n+    f(move val);\n }\n \n fn f(+i: int) {"}, {"sha": "e95027a4246a813838df9bd8c311d43c4792f484", "filename": "src/test/run-pass/functional-struct-update.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ffunctional-struct-update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ffunctional-struct-update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunctional-struct-update.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -5,7 +5,7 @@ struct Foo {\n \n fn main() {\n     let a = Foo { x: 1, y: 2 };\n-    let c = Foo { x: 4, .. a };\n+    let c = Foo { x: 4, .. a};\n     io::println(fmt!(\"%?\", c));\n }\n "}, {"sha": "e32656894a8ae0e77cc8ae733bbf09e3ec7f0934", "filename": "src/test/run-pass/intrinsic-move-val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -8,6 +8,6 @@ extern mod rusti {\n fn main() {\n     let mut x = @1;\n     let mut y = @2;\n-    rusti::move_val(&mut y, x);\n+    rusti::move_val(&mut y, move x);\n     assert *y == 1;\n }\n\\ No newline at end of file"}, {"sha": "cda85fb166a95a9d14451e788a338e4e6e537aa8", "filename": "src/test/run-pass/issue-2185.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2185.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -28,7 +28,7 @@ fn foldl<A,B,IA:iterable<A>>(self: IA, +b0: B, blk: fn(B, A) -> B) -> B {\n     do self.iter |a| {\n         b <- blk(b, a);\n     }\n-    return b;\n+    move b\n }\n \n fn range(lo: uint, hi: uint, it: fn(uint)) {"}, {"sha": "e91194b009a2b63d283b4c461b95234debd1e1db", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -1,3 +1,5 @@\n+// tjc: I don't know why\n+// xfail-pretty\n mod pipes {\n     #[legacy_exports];\n     use cast::{forget, transmute};\n@@ -42,39 +44,39 @@ mod pipes {\n     // We should consider moving this to core::unsafe, although I\n     // suspect graydon would want us to use void pointers instead.\n     unsafe fn uniquify<T>(+x: *T) -> ~T {\n-        unsafe { cast::transmute(x) }\n+        unsafe { cast::transmute(move x) }\n     }\n \n     fn swap_state_acq(+dst: &mut state, src: state) -> state {\n         unsafe {\n-            transmute(rusti::atomic_xchg_acq(transmute(dst), src as int))\n+            transmute(rusti::atomic_xchg_acq(transmute(move dst), src as int))\n         }\n     }\n \n     fn swap_state_rel(+dst: &mut state, src: state) -> state {\n         unsafe {\n-            transmute(rusti::atomic_xchg_rel(transmute(dst), src as int))\n+            transmute(rusti::atomic_xchg_rel(transmute(move dst), src as int))\n         }\n     }\n \n     fn send<T: Send>(-p: send_packet<T>, -payload: T) {\n         let p = p.unwrap();\n         let p = unsafe { uniquify(p) };\n         assert (*p).payload.is_none();\n-        (*p).payload <- Some(payload);\n+        (*p).payload <- Some(move payload);\n         let old_state = swap_state_rel(&mut (*p).state, full);\n         match old_state {\n           empty => {\n             // Yay, fastpath.\n \n             // The receiver will eventually clean this up.\n-            unsafe { forget(p); }\n+            unsafe { forget(move p); }\n           }\n           full => { fail ~\"duplicate send\" }\n           blocked => {\n \n             // The receiver will eventually clean this up.\n-            unsafe { forget(p); }\n+            unsafe { forget(move p); }\n           }\n           terminated => {\n             // The receiver will never receive this. Rely on drop_glue\n@@ -94,7 +96,7 @@ mod pipes {\n               full => {\n                 let mut payload = None;\n                 payload <-> (*p).payload;\n-                return Some(option::unwrap(payload))\n+                return Some(option::unwrap(move payload))\n               }\n               terminated => {\n                 assert old_state == terminated;\n@@ -109,7 +111,7 @@ mod pipes {\n         match swap_state_rel(&mut (*p).state, terminated) {\n           empty | blocked => {\n             // The receiver will eventually clean up.\n-            unsafe { forget(p) }\n+            unsafe { forget(move p) }\n           }\n           full => {\n             // This is impossible\n@@ -126,7 +128,7 @@ mod pipes {\n         match swap_state_rel(&mut (*p).state, terminated) {\n           empty => {\n             // the sender will clean up\n-            unsafe { forget(p) }\n+            unsafe { forget(move p) }\n           }\n           blocked => {\n             // this shouldn't happen.\n@@ -144,7 +146,7 @@ mod pipes {\n             if self.p != None {\n                 let mut p = None;\n                 p <-> self.p;\n-                sender_terminate(option::unwrap(p))\n+                sender_terminate(option::unwrap(move p))\n             }\n         }\n     }\n@@ -153,7 +155,7 @@ mod pipes {\n         fn unwrap() -> *packet<T> {\n             let mut p = None;\n             p <-> self.p;\n-            option::unwrap(p)\n+            option::unwrap(move p)\n         }\n     }\n \n@@ -169,7 +171,7 @@ mod pipes {\n             if self.p != None {\n                 let mut p = None;\n                 p <-> self.p;\n-                receiver_terminate(option::unwrap(p))\n+                receiver_terminate(option::unwrap(move p))\n             }\n         }\n     }\n@@ -178,7 +180,7 @@ mod pipes {\n         fn unwrap() -> *packet<T> {\n             let mut p = None;\n             p <-> self.p;\n-            option::unwrap(p)\n+            option::unwrap(move p)\n         }\n     }\n \n@@ -204,17 +206,17 @@ mod pingpong {\n           ping(x) => { cast::transmute(ptr::addr_of(&x)) }\n         };\n         let liberated_value <- *addr;\n-        cast::forget(p);\n-        liberated_value\n+        cast::forget(move p);\n+        move liberated_value\n     }\n \n     fn liberate_pong(-p: pong) -> pipes::send_packet<ping> unsafe {\n         let addr : *pipes::send_packet<ping> = match p {\n           pong(x) => { cast::transmute(ptr::addr_of(&x)) }\n         };\n         let liberated_value <- *addr;\n-        cast::forget(p);\n-        liberated_value\n+        cast::forget(move p);\n+        move liberated_value\n     }\n \n     fn init() -> (client::ping, server::ping) {\n@@ -229,16 +231,16 @@ mod pingpong {\n         fn do_ping(-c: ping) -> pong {\n             let (sp, rp) = pipes::entangle();\n \n-            pipes::send(c, ping(sp));\n-            rp\n+            pipes::send(move c, ping(move sp));\n+            move rp\n         }\n \n         fn do_pong(-c: pong) -> (ping, ()) {\n-            let packet = pipes::recv(c);\n+            let packet = pipes::recv(move c);\n             if packet.is_none() {\n                 fail ~\"sender closed the connection\"\n             }\n-            (liberate_pong(option::unwrap(packet)), ())\n+            (liberate_pong(option::unwrap(move packet)), ())\n         }\n     }\n \n@@ -248,32 +250,32 @@ mod pingpong {\n         type pong = pipes::send_packet<pingpong::pong>;\n \n         fn do_ping(-c: ping) -> (pong, ()) {\n-            let packet = pipes::recv(c);\n+            let packet = pipes::recv(move c);\n             if packet.is_none() {\n                 fail ~\"sender closed the connection\"\n             }\n-            (liberate_ping(option::unwrap(packet)), ())\n+            (liberate_ping(option::unwrap(move packet)), ())\n         }\n \n         fn do_pong(-c: pong) -> ping {\n             let (sp, rp) = pipes::entangle();\n-            pipes::send(c, pong(sp));\n-            rp\n+            pipes::send(move c, pong(move sp));\n+            move rp\n         }\n     }\n }\n \n fn client(-chan: pingpong::client::ping) {\n-    let chan = pingpong::client::do_ping(chan);\n+    let chan = pingpong::client::do_ping(move chan);\n     log(error, ~\"Sent ping\");\n-    let (chan, _data) = pingpong::client::do_pong(chan);\n+    let (_chan, _data) = pingpong::client::do_pong(move chan);\n     log(error, ~\"Received pong\");\n }\n \n fn server(-chan: pingpong::server::ping) {\n-    let (chan, _data) = pingpong::server::do_ping(chan);\n+    let (chan, _data) = pingpong::server::do_ping(move chan);\n     log(error, ~\"Received ping\");\n-    let chan = pingpong::server::do_pong(chan);\n+    let _chan = pingpong::server::do_pong(move chan);\n     log(error, ~\"Sent pong\");\n }\n "}, {"sha": "096ee2eed48ee703808d6658ca6064a1bd7a302d", "filename": "src/test/run-pass/issue-2834.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fissue-2834.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fissue-2834.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2834.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -9,7 +9,7 @@ proto! streamp (\n \n fn rendezvous() {\n     let (c, s) = streamp::init();\n-    let streams: ~[streamp::client::open<int>] = ~[c];\n+    let streams: ~[streamp::client::open<int>] = ~[move c];\n \n     error!(\"%?\", streams[0]);\n }"}, {"sha": "5cc39f4d683d265458229a966b32fdb9d4866206", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -48,7 +48,7 @@ fn square_from_char(c: char) -> square {\n }\n \n fn read_board_grid<rdr: Owned io::Reader>(+in: rdr) -> ~[~[square]] {\n-    let in = in as io::Reader;\n+    let in = (move in) as io::Reader;\n     let mut grid = ~[];\n     for in.each_line |line| {\n         let mut row = ~[];"}, {"sha": "c480d382adc03dff25904763faa97b47c6fab1b7", "filename": "src/test/run-pass/issue-2930.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fissue-2930.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fissue-2930.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2930.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -7,5 +7,5 @@ proto! stream (\n fn main() {\n     let (bc, _bp) = stream::init();\n \n-    stream::client::send(bc, ~\"abc\");\n+    stream::client::send(move bc, ~\"abc\");\n }"}, {"sha": "44a96a276ea5069551b3d5c44b9f94deb685a244", "filename": "src/test/run-pass/issue-3168.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fissue-3168.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fissue-3168.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3168.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -2,15 +2,15 @@\n \n fn main() {\n     let (c,p) = pipes::stream();\n-    do task::try {\n+    do task::try |move c| {\n         let (c2,p2) = pipes::stream();\n-        do task::spawn {\n+        do task::spawn |move p2| {\n             p2.recv();\n-            error!(\"brother fails\");\n+            error!(\"sibling fails\");\n             fail;\n         }   \n         let (c3,p3) = pipes::stream();\n-        c.send(c3);\n+        c.send(move c3);\n         c2.send(());\n         error!(\"child blocks\");\n         p3.recv();"}, {"sha": "17e6c03c9541662872878a461b93d7effebbc537", "filename": "src/test/run-pass/issue-3176.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fissue-3176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fissue-3176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3176.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -4,19 +4,19 @@ use pipes::{Select2, Selectable};\n \n fn main() {\n     let (c,p) = pipes::stream();\n-    do task::try {\n+    do task::try |move c| {\n         let (c2,p2) = pipes::stream();\n-        do task::spawn {\n+        do task::spawn |move p2| {\n             p2.recv();\n-            error!(\"brother fails\");\n+            error!(\"sibling fails\");\n             fail;\n         }   \n         let (c3,p3) = pipes::stream();\n-        c.send(c3);\n+        c.send(move c3);\n         c2.send(());\n         error!(\"child blocks\");\n         let (c, p) = pipes::stream();\n-        (p, p3).select();\n+        (move p, move p3).select();\n         c.send(());\n     };  \n     error!(\"parent tries\");"}, {"sha": "8b3005a3589dcb5b3c02c01fa9b49e3f96df729f", "filename": "src/test/run-pass/issue-3668.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fissue-3668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fissue-3668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3668.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -1,3 +1,4 @@\n+// xfail-test\n struct P { child: Option<@mut P> }\n trait PTrait {\n    fn getChildOption() -> Option<@P>;"}, {"sha": "8a5b0e26829cf2c06c47bd7b0363fb6be16e99dd", "filename": "src/test/run-pass/issue-3688-2.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fissue-3688-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fissue-3688-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3688-2.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -1,5 +1,6 @@\n-   fn f(x:int) {\n-       const child: int = x + 1;\n-   }\n+// xfail-test\n+fn f(x:int) {\n+    const child: int = x + 1;\n+}\n \n fn main() {}"}, {"sha": "510fc8ddeaa0fcd4a5bef25fc3a564695a618a92", "filename": "src/test/run-pass/last-use-corner-cases.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Flast-use-corner-cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Flast-use-corner-cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-corner-cases.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -5,7 +5,7 @@ fn main() {\n     // Make sure closing over can be a last use\n     let q = ~10;\n     let addr = ptr::addr_of(&(*q));\n-    let f = fn@() -> *int { ptr::addr_of(&(*q)) };\n+    let f = fn@(move q) -> *int { ptr::addr_of(&(*q)) };\n     assert addr == f();\n \n     // But only when it really is the last use"}, {"sha": "56c6659743d858b089c1030642f1d1dd77607ae1", "filename": "src/test/run-pass/last-use-in-block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Flast-use-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Flast-use-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-block.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -3,14 +3,14 @@\n fn lp<T>(s: ~str, f: fn(~str) -> T) -> T {\n     while false {\n         let r = f(s);\n-        return r;\n+        return (move r);\n     }\n     fail;\n }\n \n fn apply<T>(s: ~str, f: fn(~str) -> T) -> T {\n     fn g<T>(s: ~str, f: fn(~str) -> T) -> T {f(s)}\n-    g(s, |v| { let r = f(v); r })\n+    g(s, |v| { let r = f(v); move r })\n }\n \n fn main() {}"}, {"sha": "d52395b4c7ca3653e043973b16efde4633a7cd23", "filename": "src/test/run-pass/liveness-move-in-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fliveness-move-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fliveness-move-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fliveness-move-in-loop.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -5,7 +5,7 @@ fn the_loop() {\n     loop {\n         let x = 5;\n         if x > 3 {\n-            list += ~[take(x)];\n+            list += ~[take(move x)];\n         } else {\n             break;\n         }"}, {"sha": "bb9a42784674ebe86d62329baddc0e6b2e059d07", "filename": "src/test/run-pass/log-linearized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-linearized.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -9,7 +9,7 @@ type smallintmap<T> = @{mut v: ~[mut option<T>]};\n \n fn mk<T>() -> smallintmap<T> {\n     let v: ~[mut option<T>] = ~[mut];\n-    return @{mut v: v};\n+    return @{mut v: move v};\n }\n \n fn f<T,U>() {"}, {"sha": "eed871ce4b86cdf119f6b328047053f9208ffaf9", "filename": "src/test/run-pass/monomorphized-callees-with-ty-params-3314.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -15,7 +15,7 @@ struct F<A> { a: A }\n \n impl<A: Copy Serializable> F<A>: Serializable {\n     fn serialize<S: Serializer>(s: S) {\n-        self.a.serialize(s);\n+        self.a.serialize(move s);\n     }\n }\n "}, {"sha": "fded13293f39d7f3bc313c36081513c32982e404", "filename": "src/test/run-pass/move-arg-2-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -3,7 +3,7 @@ fn test(-foo: ~~[int]) { assert (foo[0] == 10); }\n fn main() {\n     let x = ~~[10];\n     // Test forgetting a local by move-in\n-    test(x);\n+    test(move x);\n \n     // Test forgetting a temporary by move-in.\n     test(~~[10]);"}, {"sha": "1f2f3b9ad3b2dc49b4a0aaa4abe9f95905822a2b", "filename": "src/test/run-pass/move-arg-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -3,7 +3,7 @@ fn test(-foo: @~[int]) { assert (foo[0] == 10); }\n fn main() {\n     let x = @~[10];\n     // Test forgetting a local by move-in\n-    test(x);\n+    test(move x);\n \n     // Test forgetting a temporary by move-in.\n     test(@~[10]);"}, {"sha": "1db4d9cef748c5a8720ac2c0b13577e7512168c3", "filename": "src/test/run-pass/move-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fmove-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fmove-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -1,3 +1,3 @@\n fn test(-foo: int) { assert (foo == 10); }\n \n-fn main() { let x = 10; test(x); }\n+fn main() { let x = 10; test(move x); }"}, {"sha": "0c02affb1c5af464672b6411a955fdbd822e9fcd", "filename": "src/test/run-pass/move-nullary-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -2,7 +2,7 @@\n fn f2(-thing: fn@()) { }\n \n fn f(-thing: fn@()) {\n-    f2(thing);\n+    f2(move thing);\n }\n \n fn main() {"}, {"sha": "d6ece2c19c35785748fa7e2e3d92d1fff254173d", "filename": "src/test/run-pass/non-legacy-modes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fnon-legacy-modes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fnon-legacy-modes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon-legacy-modes.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -3,7 +3,7 @@ struct X {\n }\n \n fn apply<T>(x: T, f: fn(T)) {\n-    f(x);\n+    f(move x);\n }\n \n fn check_int(x: int) {"}, {"sha": "7481b06d873df11ac1bf87e1e406c9a4099942a6", "filename": "src/test/run-pass/option-unwrap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foption-unwrap.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -9,7 +9,7 @@ struct dtor {\n \n fn unwrap<T>(+o: Option<T>) -> T {\n     match move o {\n-      Some(move v) => v,\n+      Some(move v) => move v,\n       None => fail\n     }\n }\n@@ -19,7 +19,7 @@ fn main() {\n \n     {\n         let b = Some(dtor { x:x });\n-        let c = unwrap(b);\n+        let c = unwrap(move b);\n     }\n \n     assert *x == 0;"}, {"sha": "e59634ad0897b905f58d09de9a19548205bcec09", "filename": "src/test/run-pass/pipe-bank-proto.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -33,15 +33,15 @@ proto! bank (\n )\n \n macro_rules! move_it (\n-    { $x:expr } => { unsafe { let y <- *ptr::addr_of(&($x)); y } }\n+    { $x:expr } => { unsafe { let y <- *ptr::addr_of(&($x)); move y } }\n )\n \n fn switch<T: Send, U>(+endp: pipes::RecvPacket<T>,\n                       f: fn(+v: Option<T>) -> U) -> U {\n-    f(pipes::try_recv(endp))\n+    f(pipes::try_recv(move endp))\n }\n \n-fn move_it<T>(-x: T) -> T { x }\n+fn move_it<T>(-x: T) -> T { move x }\n \n macro_rules! follow (\n     {\n@@ -59,15 +59,15 @@ macro_rules! follow (\n fn client_follow(+bank: bank::client::login) {\n     use bank::*;\n \n-    let bank = client::login(bank, ~\"theincredibleholk\", ~\"1234\");\n-    let bank = switch(bank, follow! (\n-        ok -> connected { connected }\n+    let bank = client::login(move bank, ~\"theincredibleholk\", ~\"1234\");\n+    let bank = switch(move bank, follow! (\n+        ok -> connected { move connected }\n         invalid -> _next { fail ~\"bank closed the connected\" }\n     ));\n \n-    let bank = client::deposit(bank, 100.00);\n-    let bank = client::withdrawal(bank, 50.00);\n-    switch(bank, follow! (\n+    let bank = client::deposit(move bank, 100.00);\n+    let bank = client::withdrawal(move bank, 50.00);\n+    switch(move bank, follow! (\n         money(m) -> _next {\n             io::println(~\"Yay! I got money!\");\n         }\n@@ -80,19 +80,19 @@ fn client_follow(+bank: bank::client::login) {\n fn bank_client(+bank: bank::client::login) {\n     use bank::*;\n \n-    let bank = client::login(bank, ~\"theincredibleholk\", ~\"1234\");\n-    let bank = match try_recv(bank) {\n+    let bank = client::login(move bank, ~\"theincredibleholk\", ~\"1234\");\n+    let bank = match try_recv(move bank) {\n       Some(ok(connected)) => {\n         move_it!(connected)\n       }\n       Some(invalid(_)) => { fail ~\"login unsuccessful\" }\n       None => { fail ~\"bank closed the connection\" }\n     };\n \n-    let bank = client::deposit(bank, 100.00);\n-    let bank = client::withdrawal(bank, 50.00);\n-    match try_recv(bank) {\n-      Some(money(m, _)) => {\n+    let bank = client::deposit(move bank, 100.00);\n+    let bank = client::withdrawal(move bank, 50.00);\n+    match try_recv(move bank) {\n+      Some(money(*)) => {\n         io::println(~\"Yay! I got money!\");\n       }\n       Some(insufficient_funds(_)) => {"}, {"sha": "524541780c074718acd187dfd6bbf762f4147d45", "filename": "src/test/run-pass/pipe-detect-term.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -19,7 +19,7 @@ fn main() {\n     let iotask = uv::global_loop::get();\n     \n     pipes::spawn_service(oneshot::init, |p| { \n-        match try_recv(p) {\n+        match try_recv(move p) {\n           Some(*) => { fail }\n           None => { }\n         }\n@@ -34,11 +34,11 @@ fn main() {\n fn failtest() {\n     let (c, p) = oneshot::init();\n \n-    do task::spawn_with(c) |_c| { \n+    do task::spawn_with(move c) |_c| { \n         fail;\n     }\n \n-    error!(\"%?\", recv(p));\n+    error!(\"%?\", recv(move p));\n     // make sure we get killed if we missed it in the receive.\n     loop { task::yield() }\n }"}, {"sha": "e3a2d29747b6312cbfcbd13a376839558287b7a5", "filename": "src/test/run-pass/pipe-peek.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fpipe-peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fpipe-peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-peek.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -15,7 +15,7 @@ fn main() {\n \n     assert !pipes::peek(&p);\n \n-    oneshot::client::signal(c);\n+    oneshot::client::signal(move c);\n \n     assert pipes::peek(&p);\n }"}, {"sha": "0db7d6cf123a686e99100b621f8125b228827eec", "filename": "src/test/run-pass/pipe-pingpong-bounded.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -25,7 +25,7 @@ mod pingpong {\n                 pong: mk_packet::<pong>()\n             }\n         };\n-        do pipes::entangle_buffer(buffer) |buffer, data| {\n+        do pipes::entangle_buffer(move buffer) |buffer, data| {\n             data.ping.set_buffer_(buffer);\n             data.pong.set_buffer_(buffer);\n             ptr::addr_of(&(data.ping))\n@@ -40,9 +40,9 @@ mod pingpong {\n                 let b = pipe.reuse_buffer();\n                 let s = SendPacketBuffered(ptr::addr_of(&(b.buffer.data.pong)));\n                 let c = RecvPacketBuffered(ptr::addr_of(&(b.buffer.data.pong)));\n-                let message = pingpong::ping(s);\n-                pipes::send(pipe, message);\n-                c\n+                let message = pingpong::ping(move s);\n+                pipes::send(move pipe, move message);\n+                move c\n             }\n         }\n         type ping = pipes::SendPacketBuffered<pingpong::ping,\n@@ -59,9 +59,9 @@ mod pingpong {\n                 let b = pipe.reuse_buffer();\n                 let s = SendPacketBuffered(ptr::addr_of(&(b.buffer.data.ping)));\n                 let c = RecvPacketBuffered(ptr::addr_of(&(b.buffer.data.ping)));\n-                let message = pingpong::pong(s);\n-                pipes::send(pipe, message);\n-                c\n+                let message = pingpong::pong(move s);\n+                pipes::send(move pipe, move message);\n+                move c\n             }\n         }\n         type pong = pipes::SendPacketBuffered<pingpong::pong,\n@@ -77,34 +77,34 @@ mod test {\n     fn client(-chan: pingpong::client::ping) {\n         use pingpong::client;\n \n-        let chan = client::ping(chan); return;\n+        let chan = client::ping(move chan); return;\n         log(error, \"Sent ping\");\n-        let pong(_chan) = recv(chan);\n+        let pong(_chan) = recv(move chan);\n         log(error, \"Received pong\");\n     }\n     \n     fn server(-chan: pingpong::server::ping) {\n         use pingpong::server;\n \n-        let ping(chan) = recv(chan); return;\n+        let ping(chan) = recv(move chan); return;\n         log(error, \"Received ping\");\n-        let _chan = server::pong(chan);\n+        let _chan = server::pong(move chan);\n         log(error, \"Sent pong\");\n     }\n }\n \n fn main() {\n     let (client_, server_) = pingpong::init();\n-    let client_ = ~mut Some(client_);\n-    let server_ = ~mut Some(server_);\n+    let client_ = ~mut Some(move client_);\n+    let server_ = ~mut Some(move server_);\n     do task::spawn |move client_| {\n         let mut client__ = None;\n         *client_ <-> client__;\n-        test::client(option::unwrap(client__));\n+        test::client(option::unwrap(move client__));\n     };\n     do task::spawn |move server_| {\n         let mut server_\u02ca = None;\n         *server_ <-> server_\u02ca;\n-        test::server(option::unwrap(server_\u02ca));\n+        test::server(option::unwrap(move server_\u02ca));\n     };\n }"}, {"sha": "c1c74aefa9c8c1a32d6549235b9ca2a8a63801e5", "filename": "src/test/run-pass/pipe-pingpong-proto.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -20,35 +20,35 @@ mod test {\n     fn client(-chan: pingpong::client::ping) {\n         use pingpong::client;\n \n-        let chan = client::ping(chan);\n+        let chan = client::ping(move chan);\n         log(error, ~\"Sent ping\");\n-        let pong(_chan) = recv(chan);\n+        let pong(_chan) = recv(move chan);\n         log(error, ~\"Received pong\");\n     }\n     \n     fn server(-chan: pingpong::server::ping) {\n         use pingpong::server;\n \n-        let ping(chan) = recv(chan);\n+        let ping(chan) = recv(move chan);\n         log(error, ~\"Received ping\");\n-        let _chan = server::pong(chan);\n+        let _chan = server::pong(move chan);\n         log(error, ~\"Sent pong\");\n     }\n }\n \n fn main() {\n     let (client_, server_) = pingpong::init();\n-    let client_ = ~mut Some(client_);\n-    let server_ = ~mut Some(server_);\n+    let client_ = ~mut Some(move client_);\n+    let server_ = ~mut Some(move server_);\n \n     do task::spawn |move client_| {\n         let mut client__ = None;\n         *client_ <-> client__;\n-        test::client(option::unwrap(client__));\n+        test::client(option::unwrap(move client__));\n     };\n     do task::spawn |move server_| {\n         let mut server_\u02ca = None;\n         *server_ <-> server_\u02ca;\n-        test::server(option::unwrap(server_\u02ca));\n+        test::server(option::unwrap(move server_\u02ca));\n     };\n }"}, {"sha": "7ce8e6ea73d0db7c46cec5f36be8b2ebb459ba19", "filename": "src/test/run-pass/pipe-presentation-examples.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -22,10 +22,10 @@ macro_rules! select_if (\n         ], )*\n     } => {\n         if $index == $count {\n-            match move pipes::try_recv($port) {\n+            match move pipes::try_recv(move $port) {\n               $(Some($message($($(move $x,)+)* move next)) => {\n-                let $next = next;\n-                $e\n+                let $next = move next;\n+                move $e\n               })+\n               _ => fail\n             }\n@@ -90,33 +90,33 @@ fn render(_buffer: &Buffer) {\n }\n \n fn draw_frame(+channel: double_buffer::client::acquire) {\n-    let channel = request(channel);\n+    let channel = request(move channel);\n     select! (\n         channel => {\n             give_buffer(buffer) -> channel {\n                 render(&buffer);\n-                release(channel, move buffer)\n+                release(move channel, move buffer)\n             }\n         }\n     );\n }\n \n fn draw_two_frames(+channel: double_buffer::client::acquire) {\n-    let channel = request(channel);\n+    let channel = request(move channel);\n     let channel = select! (\n         channel => {\n             give_buffer(buffer) -> channel {\n                 render(&buffer);\n-                release(channel, move buffer)\n+                release(move channel, move buffer)\n             }\n         }\n     );\n-    let channel = request(channel);\n+    let channel = request(move channel);\n     select! (\n         channel => {\n             give_buffer(buffer) -> channel {\n                 render(&buffer);\n-                release(channel, move buffer)\n+                release(move channel, move buffer)\n             }\n         }\n     );"}, {"sha": "e3842c86c4c43d0bcf088bd2ebcab53740cba89b", "filename": "src/test/run-pass/pipe-select-macro.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -1,3 +1,5 @@\n+// tjc: un-xfail after snapshot\n+// xfail-test\n // xfail-pretty\n \n // Protocols"}, {"sha": "627cdbee9cabd589b60f52a4ee7cb6d5c7cfb6e4", "filename": "src/test/run-pass/pipe-select.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -27,24 +27,24 @@ fn main() {\n     \n     let c = pipes::spawn_service(stream::init, |p| { \n         error!(\"waiting for pipes\");\n-        let stream::send(x, p) = recv(p);\n+        let stream::send(x, p) = recv(move p);\n         error!(\"got pipes\");\n         let (left, right) : (oneshot::server::waiting,\n                              oneshot::server::waiting)\n-            = x;\n+            = move x;\n         error!(\"selecting\");\n-        let (i, _, _) = select(~[left, right]);\n+        let (i, _, _) = select(~[move left, move right]);\n         error!(\"selected\");\n         assert i == 0;\n \n         error!(\"waiting for pipes\");\n-        let stream::send(x, _) = recv(p);\n+        let stream::send(x, _) = recv(move p);\n         error!(\"got pipes\");\n         let (left, right) : (oneshot::server::waiting,\n                              oneshot::server::waiting)\n-            = x;\n+            = move x;\n         error!(\"selecting\");\n-        let (i, m, _) = select(~[left, right]);\n+        let (i, m, _) = select(~[move left, move right]);\n         error!(\"selected %?\", i);\n         if m.is_some() {\n             assert i == 1;\n@@ -54,20 +54,20 @@ fn main() {\n     let (c1, p1) = oneshot::init();\n     let (_c2, p2) = oneshot::init();\n \n-    let c = send(c, (p1, p2));\n+    let c = send(move c, (move p1, move p2));\n     \n     sleep(iotask, 100);\n \n-    signal(c1);\n+    signal(move c1);\n \n     let (_c1, p1) = oneshot::init();\n     let (c2, p2) = oneshot::init();\n \n-    send(c, (p1, p2));\n+    send(move c, (move p1, move p2));\n \n     sleep(iotask, 100);\n \n-    signal(c2);\n+    signal(move c2);\n \n     test_select2();\n }\n@@ -76,26 +76,26 @@ fn test_select2() {\n     let (ac, ap) = stream::init();\n     let (bc, bp) = stream::init();\n \n-    stream::client::send(ac, 42);\n+    stream::client::send(move ac, 42);\n \n-    match pipes::select2(ap, bp) {\n+    match pipes::select2(move ap, move bp) {\n       either::Left(*) => { }\n       either::Right(*) => { fail }\n     }\n \n-    stream::client::send(bc, ~\"abc\");\n+    stream::client::send(move bc, ~\"abc\");\n \n     error!(\"done with first select2\");\n \n     let (ac, ap) = stream::init();\n     let (bc, bp) = stream::init();\n \n-    stream::client::send(bc, ~\"abc\");\n+    stream::client::send(move bc, ~\"abc\");\n \n-    match pipes::select2(ap, bp) {\n+    match pipes::select2(move ap, move bp) {\n       either::Left(*) => { fail }\n       either::Right(*) => { }\n     }\n \n-    stream::client::send(ac, 42);\n+    stream::client::send(move ac, 42);\n }"}, {"sha": "c9975bec9469efc7b6984f1e1c7a3bd7b9718847", "filename": "src/test/run-pass/pipe-sleep.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -14,10 +14,10 @@ proto! oneshot (\n fn main() {\n     use oneshot::client::*;\n \n-    let c = pipes::spawn_service(oneshot::init, |p| { recv(p); });\n+    let c = pipes::spawn_service(oneshot::init, |p| { recv(move p); });\n \n     let iotask = uv::global_loop::get();\n     sleep(iotask, 500);\n     \n-    signal(c);\n+    signal(move c);\n }\n\\ No newline at end of file"}, {"sha": "834272ca920e855ebb8baa389649221c4ea1208d", "filename": "src/test/run-pass/regions-copy-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -2,8 +2,8 @@ struct closure_box {\n     cl: &fn(),\n }\n \n-fn box_it(x: &r/fn()) -> closure_box/&r {\n-    closure_box {cl: x}\n+fn box_it(+x: &r/fn()) -> closure_box/&r {\n+    closure_box {cl: move x}\n }\n \n fn main() {"}, {"sha": "6622a6aa56976ec518f7164c7d60382ea053e642", "filename": "src/test/run-pass/regions-static-closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -2,8 +2,8 @@ struct closure_box {\n     cl: &fn(),\n }\n \n-fn box_it(x: &r/fn()) -> closure_box/&r {\n-    closure_box {cl: x}\n+fn box_it(+x: &r/fn()) -> closure_box/&r {\n+    closure_box {cl: move x}\n }\n \n fn call_static_closure(cl: closure_box/&static) {\n@@ -12,5 +12,5 @@ fn call_static_closure(cl: closure_box/&static) {\n \n fn main() {\n     let cl_box = box_it(|| debug!(\"Hello, world!\"));\n-    call_static_closure(cl_box);\n+    call_static_closure(move cl_box);\n }"}, {"sha": "f0bea875df90c30d17eda25c2e964a3bbd88ca2b", "filename": "src/test/run-pass/resource-assign-is-not-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -14,8 +14,8 @@ fn main() {\n     // Even though these look like copies, they are guaranteed not to be\n     {\n         let a = r(i);\n-        let b = (a, 10);\n-        let (c, _d) = b;\n+        let b = (move a, 10);\n+        let (c, _d) = move b;\n         log(debug, c);\n     }\n     assert *i == 1;"}, {"sha": "893042842d0915129c0c787661ca4350d500b615", "filename": "src/test/run-pass/resource-cycle.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -24,18 +24,18 @@ enum t = {\n fn main() unsafe {\n     let i1 = ~0;\n     let i1p = cast::reinterpret_cast(&i1);\n-    cast::forget(i1);\n+    cast::forget(move i1);\n     let i2 = ~0;\n     let i2p = cast::reinterpret_cast(&i2);\n-    cast::forget(i2);\n+    cast::forget(move i2);\n \n     let x1 = @t({\n         mut next: None,\n           r: {\n           let rs = r(i1p);\n           debug!(\"r = %x\",\n                  cast::reinterpret_cast::<*r, uint>(&ptr::addr_of(&rs)));\n-          rs }\n+          move rs }\n     });\n     \n     debug!(\"x1 = %x, x1.r = %x\",\n@@ -48,7 +48,7 @@ fn main() unsafe {\n           let rs = r(i2p);\n           debug!(\"r2 = %x\",\n                  cast::reinterpret_cast::<*r, uint>(&ptr::addr_of(&rs)));\n-          rs\n+          move rs\n             }\n     });\n     "}, {"sha": "a38950e17e36aab6558b184f37a679dccbb468ba", "filename": "src/test/run-pass/resource-cycle2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -27,10 +27,10 @@ enum t = {\n fn main() unsafe {\n     let i1 = ~0xA;\n     let i1p = cast::reinterpret_cast(&i1);\n-    cast::forget(i1);\n+    cast::forget(move i1);\n     let i2 = ~0xA;\n     let i2p = cast::reinterpret_cast(&i2);\n-    cast::forget(i2);\n+    cast::forget(move i2);\n \n     let u1 = {a: 0xB, b: 0xC, c: i1p};\n     let u2 = {a: 0xB, b: 0xC, c: i2p};"}, {"sha": "aa0f18089d9e9d3575455562b2ee8153b03724ff", "filename": "src/test/run-pass/resource-cycle3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -34,10 +34,10 @@ enum t = {\n fn main() unsafe {\n     let i1 = ~0xA;\n     let i1p = cast::reinterpret_cast(&i1);\n-    cast::forget(i1);\n+    cast::forget(move i1);\n     let i2 = ~0xA;\n     let i2p = cast::reinterpret_cast(&i2);\n-    cast::forget(i2);\n+    cast::forget(move i2);\n \n     let u1 = {a: 0xB, b: 0xC, c: i1p};\n     let u2 = {a: 0xB, b: 0xC, c: i2p};"}, {"sha": "976225c0e23988bcb39b126ef0db0b0c79261d63", "filename": "src/test/run-pass/rt-sched-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-sched-1.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -35,6 +35,6 @@ fn main() unsafe {\n     };\n     let fptr = cast::reinterpret_cast(&ptr::addr_of(&f));\n     rustrt::start_task(new_task_id, fptr);\n-    cast::forget(f);\n+    cast::forget(move f);\n     comm::recv(po);\n }"}, {"sha": "d6ce85ac3446d9e61e710423954f0b8a21f84d07", "filename": "src/test/run-pass/select-macro.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fselect-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fselect-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fselect-macro.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -17,18 +17,18 @@ macro_rules! select_if (\n         $count:expr,\n         $port:path => [\n             $(type_this $message:path$(($(x $x: ident),+))dont_type_this*\n-              -> $next:ident => { $e:expr }),+\n+              -> $next:ident => { move $e:expr }),+\n         ]\n         $(, $ports:path => [\n             $(type_this $messages:path$(($(x $xs: ident),+))dont_type_this*\n-              -> $nexts:ident => { $es:expr }),+\n+              -> $nexts:ident => { move $es:expr }),+\n         ] )*\n     } => {\n         if $index == $count {\n             match move pipes::try_recv($port) {\n               $(Some($message($($(move $x,)+)* move next)) => {\n-                let $next = next;\n-                $e\n+                let $next = move next;\n+                move $e\n               })+\n               _ => fail\n             }\n@@ -38,7 +38,7 @@ macro_rules! select_if (\n                 $count + 1\n                 $(, $ports => [\n                     $(type_this $messages$(($(x $xs),+))dont_type_this*\n-                      -> $nexts => { $es }),+\n+                      -> $nexts => { move $es }),+\n                 ])*\n             )\n         }\n@@ -54,7 +54,7 @@ macro_rules! select (\n     } => {\n         let index = pipes::selecti([$(($port).header()),+]/_);\n         select_if!(index, 0 $(, $port => [\n-            $(type_this $message$(($(x $x),+))dont_type_this* -> $next => { $e }),+\n+            $(type_this $message$(($(x $x),+))dont_type_this* -> $next => { move $e }),+\n         ])+)\n     }\n )"}, {"sha": "6ce4ff3481559f4c007c4502b9d7e392d6f1cbe5", "filename": "src/test/run-pass/static-method-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -13,13 +13,13 @@ fn andand<T: bool_like Copy>(x1: T, x2: T) -> T {\n \n impl bool: bool_like {\n     static fn select<A>(&&b: bool, +x1: A, +x2: A) -> A {\n-        if b { x1 } else { x2 }\n+        if b { move x1 } else { move x2 }\n     }\n }\n \n impl int: bool_like {\n     static fn select<A>(&&b: int, +x1: A, +x2: A) -> A {\n-        if b != 0 { x1 } else { x2 }\n+        if b != 0 { move x1 } else { move x2 }\n     }\n }\n "}, {"sha": "1244af227f4ae1f1a7094b598b4b28ba1e6eecec", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -19,7 +19,7 @@ fn test05_start(ch : Chan<int>) {\n \n fn test05() {\n     let (ch, po) = pipes::stream();\n-    task::spawn(|| test05_start(ch) );\n+    task::spawn(|move ch| test05_start(ch) );\n     let mut value = po.recv();\n     log(error, value);\n     value = po.recv();"}, {"sha": "55fff5422e3a357c0908c5937b523f8f0ae7844a", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -5,7 +5,7 @@ extern mod std;\n \n fn start(c: pipes::Chan<pipes::Chan<~str>>) {\n     let (ch, p) = pipes::stream();\n-    c.send(ch);\n+    c.send(move ch);\n \n     let mut a;\n     let mut b;\n@@ -14,12 +14,12 @@ fn start(c: pipes::Chan<pipes::Chan<~str>>) {\n     log(error, a);\n     b = p.recv();\n     assert b == ~\"B\";\n-    log(error, b);\n+    log(error, move b);\n }\n \n fn main() {\n     let (ch, p) = pipes::stream();\n-    let child = task::spawn(|| start(ch) );\n+    let child = task::spawn(|move ch| start(ch) );\n \n     let c = p.recv();\n     c.send(~\"A\");"}, {"sha": "86fb20ad818004871466571ebf24e6602eab9d8b", "filename": "src/test/run-pass/task-comm-11.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -5,11 +5,11 @@ extern mod std;\n \n fn start(c: pipes::Chan<pipes::Chan<int>>) {\n     let (ch, p) = pipes::stream();\n-    c.send(ch);\n+    c.send(move ch);\n }\n \n fn main() {\n     let (ch, p) = pipes::stream();\n-    let child = task::spawn(|| start(ch) );\n+    let child = task::spawn(|move ch| start(ch) );\n     let c = p.recv();\n }"}, {"sha": "64ea3fb9d0e59c1091a4ff50579ad359f8b30b58", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -7,7 +7,7 @@ fn start(&&task_number: int) { debug!(\"Started / Finished task.\"); }\n fn test00() {\n     let i: int = 0;\n     let mut result = None;\n-    do task::task().future_result(|+r| { result = Some(r); }).spawn {\n+    do task::task().future_result(|+r| { result = Some(move r); }).spawn {\n         start(i)\n     }\n \n@@ -19,7 +19,7 @@ fn test00() {\n     }\n \n     // Try joining tasks that have already finished.\n-    future::get(&option::unwrap(result));\n+    future::get(&option::unwrap(move result));\n \n     debug!(\"Joined task.\");\n }"}, {"sha": "9827b3c36b92c1b835c344dc0c02aa58dbd2b491", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -12,6 +12,6 @@ fn start(c: pipes::Chan<int>, start: int, number_of_messages: int) {\n fn main() {\n     debug!(\"Check that we don't deadlock.\");\n     let (ch, p) = pipes::stream();\n-    task::try(|| start(ch, 0, 10) );\n+    task::try(|move ch| start(ch, 0, 10) );\n     debug!(\"Joined task\");\n }"}, {"sha": "7f63d22be47a111b4db59a01c08e50aff6b3ebb2", "filename": "src/test/run-pass/task-comm-14.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -9,8 +9,8 @@ fn main() {\n     while (i > 0) {\n         log(debug, i);\n         let (ch, p) = pipes::stream();\n-        po.add(p);\n-        task::spawn(|copy i| child(i, ch) );\n+        po.add(move p);\n+        task::spawn(|move ch, copy i| child(i, ch) );\n         i = i - 1;\n     }\n "}, {"sha": "c3734cb5d9c6b27ef85ce074cf5fb13368fe8d19", "filename": "src/test/run-pass/task-comm-15.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -18,6 +18,6 @@ fn main() {\n     // the child's point of view the receiver may die. We should\n     // drop messages on the floor in this case, and not crash!\n     let (ch, p) = pipes::stream();\n-    task::spawn(|| start(ch, 10));\n+    task::spawn(|move ch| start(ch, 10));\n     p.recv();\n }"}, {"sha": "47bc99b53f4d3b7cf9ed3e98b8b3d51363922474", "filename": "src/test/run-pass/task-comm-16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -91,7 +91,7 @@ fn test_tag() {\n fn test_chan() {\n     let (ch, po) = pipes::stream();\n     let (ch0, po0) = pipes::stream();\n-    ch.send(ch0);\n+    ch.send(move ch0);\n     let ch1 = po.recv();\n     // Does the transmitted channel still work?\n "}, {"sha": "7082cd55ac8327fa568794af5aa3f59d87b533af", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -34,8 +34,8 @@ fn test00() {\n     while i < number_of_tasks {\n         let ch = po.chan();\n         do task::task().future_result(|+r| {\n-            results.push(r);\n-        }).spawn |copy i| {\n+            results.push(move r);\n+        }).spawn |move ch, copy i| {\n             test00_start(ch, i, number_of_messages)\n         }\n         i = i + 1;"}, {"sha": "c34dfb319d823f771c42521c16f7cddd41f80795", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -17,19 +17,19 @@ fn test00() {\n     let number_of_messages: int = 10;\n \n     let c = p.chan();\n-    do task::spawn {\n+    do task::spawn |move c| {\n         test00_start(c, number_of_messages * 0, number_of_messages);\n     }\n     let c = p.chan();\n-    do task::spawn {\n+    do task::spawn |move c| {\n         test00_start(c, number_of_messages * 1, number_of_messages);\n     }\n     let c = p.chan();\n-    do task::spawn {\n+    do task::spawn |move c| {\n         test00_start(c, number_of_messages * 2, number_of_messages);\n     }\n     let c = p.chan();\n-    do task::spawn {\n+    do task::spawn |move c| {\n         test00_start(c, number_of_messages * 3, number_of_messages);\n     }\n "}, {"sha": "5ed5899658d24cfac3bf157ee6b1f9233966da6a", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -18,7 +18,8 @@ fn test00() {\n     let ch = p.chan();\n \n     let mut result = None;\n-    do task::task().future_result(|+r| { result = Some(r); }).spawn {\n+    do task::task().future_result(|+r| { result = Some(move r); }).spawn\n+          |move ch| {\n         test00_start(ch, number_of_messages);\n     }\n \n@@ -29,7 +30,7 @@ fn test00() {\n         i += 1;\n     }\n \n-    future::get(&option::unwrap(result));\n+    future::get(&option::unwrap(move result));\n \n     assert (sum == number_of_messages * (number_of_messages - 1) / 2);\n }"}, {"sha": "aba0bd660052554a2d7ced7e9f353dc6e1eb0a61", "filename": "src/test/run-pass/task-comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -40,7 +40,7 @@ fn test00() {\n     while i < number_of_tasks {\n         i = i + 1;\n         do task::task().future_result(|+r| {\n-            results.push(r);\n+            results.push(move r);\n         }).spawn |copy i| {\n             test00_start(ch, i, number_of_messages);\n         }\n@@ -127,7 +127,7 @@ fn test06() {\n     while i < number_of_tasks {\n         i = i + 1;\n         do task::task().future_result(|+r| {\n-            results.push(r);\n+            results.push(move r);\n         }).spawn |copy i| {\n             test06_start(i);\n         };"}, {"sha": "2dfe48c49511ec1f441342e53d988a5e2021ca60", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -30,7 +30,7 @@ fn main() {\n     assert indirect(~[10, 20]) == ~\"[10, 20]!\";\n \n     fn indirect2<T: to_str>(x: T) -> ~str {\n-        indirect(x)\n+        indirect(move x)\n     }\n     assert indirect2(~[1]) == ~\"[1]!\";\n }"}, {"sha": "3e162e13d78a90350714e7e38290221db3bb3635", "filename": "src/test/run-pass/unique-fn-arg-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Funique-fn-arg-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Funique-fn-arg-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-fn-arg-move.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -4,5 +4,5 @@ fn f(-i: ~int) {\n \n fn main() {\n     let i = ~100;\n-    f(i);\n+    f(move i);\n }\n\\ No newline at end of file"}, {"sha": "11208a969db2aef47d1ef6b9e8ceaf72033e88aa", "filename": "src/test/run-pass/yield.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fyield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fyield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -4,13 +4,13 @@ use task::*;\n \n fn main() {\n     let mut result = None;\n-    task::task().future_result(|+r| { result = Some(r); }).spawn(child);\n+    task::task().future_result(|+r| { result = Some(move r); }).spawn(child);\n     error!(\"1\");\n     yield();\n     error!(\"2\");\n     yield();\n     error!(\"3\");\n-    future::get(&option::unwrap(result));\n+    future::get(&option::unwrap(move result));\n }\n \n fn child() {"}, {"sha": "ec77a68632450007fa914603cc28d43f936ba71e", "filename": "src/test/run-pass/yield1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fyield1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ebd878f4a01e8f66dee09e054c6c0c39384afd8/src%2Ftest%2Frun-pass%2Fyield1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield1.rs?ref=3ebd878f4a01e8f66dee09e054c6c0c39384afd8", "patch": "@@ -4,10 +4,10 @@ use task::*;\n \n fn main() {\n     let mut result = None;\n-    task::task().future_result(|+r| { result = Some(r); }).spawn(child);\n+    task::task().future_result(|+r| { result = Some(move r); }).spawn(child);\n     error!(\"1\");\n     yield();\n-    future::get(&option::unwrap(result));\n+    future::get(&option::unwrap(move result));\n }\n \n fn child() { error!(\"2\"); }"}]}