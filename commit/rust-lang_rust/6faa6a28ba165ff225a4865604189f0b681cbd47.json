{"sha": "6faa6a28ba165ff225a4865604189f0b681cbd47", "node_id": "C_kwDOAAsO6NoAKDZmYWE2YTI4YmExNjVmZjIyNWE0ODY1NjA0MTg5ZjBiNjgxY2JkNDc", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-26T13:12:44Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-26T13:12:44Z"}, "message": "Rustup to rustc 1.61.0-nightly (d53246fed 2022-03-25)", "tree": {"sha": "53916ca4bc711e82e582a3f8a0c28e08c11f8ade", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53916ca4bc711e82e582a3f8a0c28e08c11f8ade"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6faa6a28ba165ff225a4865604189f0b681cbd47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6faa6a28ba165ff225a4865604189f0b681cbd47", "html_url": "https://github.com/rust-lang/rust/commit/6faa6a28ba165ff225a4865604189f0b681cbd47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6faa6a28ba165ff225a4865604189f0b681cbd47/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db591778ac3c93285fec6a5b7332b218131ccf94", "url": "https://api.github.com/repos/rust-lang/rust/commits/db591778ac3c93285fec6a5b7332b218131ccf94", "html_url": "https://github.com/rust-lang/rust/commit/db591778ac3c93285fec6a5b7332b218131ccf94"}], "stats": {"total": 60, "additions": 32, "deletions": 28}, "files": [{"sha": "a8435287d9fde698eb89c37a44b4c32dc5e3f4a5", "filename": "example/mini_core.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6faa6a28ba165ff225a4865604189f0b681cbd47/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6faa6a28ba165ff225a4865604189f0b681cbd47/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=6faa6a28ba165ff225a4865604189f0b681cbd47", "patch": "@@ -14,6 +14,9 @@ unsafe extern \"C\" fn _Unwind_Resume() {\n #[lang = \"sized\"]\n pub trait Sized {}\n \n+#[lang = \"destruct\"]\n+pub trait Destruct {}\n+\n #[lang = \"unsize\"]\n pub trait Unsize<T: ?Sized> {}\n \n@@ -59,6 +62,7 @@ unsafe impl Copy for i16 {}\n unsafe impl Copy for i32 {}\n unsafe impl Copy for isize {}\n unsafe impl Copy for f32 {}\n+unsafe impl Copy for f64 {}\n unsafe impl Copy for char {}\n unsafe impl<'a, T: ?Sized> Copy for &'a T {}\n unsafe impl<T: ?Sized> Copy for *const T {}"}, {"sha": "03900ba101a900b67f484827b237a9842449a9cc", "filename": "patches/0024-core-Disable-portable-simd-test.patch", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6faa6a28ba165ff225a4865604189f0b681cbd47/patches%2F0024-core-Disable-portable-simd-test.patch", "raw_url": "https://github.com/rust-lang/rust/raw/6faa6a28ba165ff225a4865604189f0b681cbd47/patches%2F0024-core-Disable-portable-simd-test.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0024-core-Disable-portable-simd-test.patch?ref=6faa6a28ba165ff225a4865604189f0b681cbd47", "patch": "@@ -11,7 +11,7 @@ diff --git a/library/core/src/lib.rs b/library/core/src/lib.rs\n index aa1ad93..95fbf55 100644\n --- a/library/core/src/lib.rs\n +++ b/library/core/src/lib.rs\n-@@ -398,25 +398,4 @@ pub mod arch {\n+@@ -398,23 +398,4 @@ pub mod arch {\n      }\n  }\n  \n@@ -25,12 +25,10 @@ index aa1ad93..95fbf55 100644\n -#[allow(missing_debug_implementations, dead_code, unsafe_op_in_unsafe_fn, unused_unsafe)]\n -#[allow(rustdoc::bare_urls)]\n -#[unstable(feature = \"portable_simd\", issue = \"86656\")]\n--#[cfg(not(all(miri, doctest)))] // Miri does not support all SIMD intrinsics\n -mod core_simd;\n -\n -#[doc = include_str!(\"../../portable-simd/crates/core_simd/src/core_simd_docs.md\")]\n -#[unstable(feature = \"portable_simd\", issue = \"86656\")]\n--#[cfg(not(all(miri, doctest)))] // Miri does not support all SIMD intrinsics\n -pub mod simd {\n -    #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n -    pub use crate::core_simd::simd::*;\n@@ -41,15 +39,14 @@ diff --git a/library/core/src/slice/mod.rs b/library/core/src/slice/mod.rs\n index cd38c3a..ad632dc 100644\n --- a/library/core/src/slice/mod.rs\n +++ b/library/core/src/slice/mod.rs\n-@@ -17,7 +17,6 @@ use crate::ptr;\n+@@ -17,6 +17,5 @@ use crate::ptr;\n  use crate::result::Result;\n  use crate::result::Result::{Err, Ok};\n- #[cfg(not(miri))] // Miri does not support all SIMD intrinsics\n -use crate::simd::{self, Simd};\n  use crate::slice;\n  \n  #[unstable(\n-@@ -3475,123 +3474,6 @@ impl<T> [T] {\n+@@ -3475,121 +3474,6 @@ impl<T> [T] {\n          }\n      }\n  \n@@ -102,14 +99,13 @@ index cd38c3a..ad632dc 100644\n -    ///         suffix.iter().copied().sum(),\n -    ///     ]);\n -    ///     let sums = middle.iter().copied().fold(sums, f32x4::add);\n--    ///     sums.horizontal_sum()\n+-    ///     sums.reduce_sum()\n -    /// }\n -    ///\n -    /// let numbers: Vec<f32> = (1..101).map(|x| x as _).collect();\n -    /// assert_eq!(basic_simd_sum(&numbers[1..99]), 4949.0);\n -    /// ```\n -    #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n--    #[cfg(not(miri))] // Miri does not support all SIMD intrinsics\n -    pub fn as_simd<const LANES: usize>(&self) -> (&[T], &[Simd<T, LANES>], &[T])\n -    where\n -        Simd<T, LANES>: AsRef<[T; LANES]>,\n@@ -153,7 +149,6 @@ index cd38c3a..ad632dc 100644\n -    /// be lifted in a way that would make it possible to see panics from this\n -    /// method for something like `LANES == 3`.\n -    #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n--    #[cfg(not(miri))] // Miri does not support all SIMD intrinsics\n -    pub fn as_simd_mut<const LANES: usize>(&mut self) -> (&mut [T], &mut [Simd<T, LANES>], &mut [T])\n -    where\n -        Simd<T, LANES>: AsMut<[T; LANES]>,\n@@ -197,15 +192,14 @@ diff --git a/library/std/src/lib.rs b/library/std/src/lib.rs\n index 5dc586d..b6fc48f 100644\n --- a/library/std/src/lib.rs\n +++ b/library/std/src/lib.rs\n-@@ -312,7 +312,6 @@\n+@@ -312,6 +312,5 @@\n  #![feature(panic_can_unwind)]\n  #![feature(panic_unwind)]\n  #![feature(platform_intrinsics)]\n -#![feature(portable_simd)]\n  #![feature(prelude_import)]\n  #![feature(ptr_as_uninit)]\n- #![feature(ptr_internals)]\n-@@ -508,25 +508,6 @@ pub mod time;\n+@@ -508,23 +508,6 @@ pub mod time;\n  #[unstable(feature = \"once_cell\", issue = \"74465\")]\n  pub mod lazy;\n  \n@@ -215,10 +209,8 @@ index 5dc586d..b6fc48f 100644\n -#[allow(missing_debug_implementations, dead_code, unsafe_op_in_unsafe_fn, unused_unsafe)]\n -#[allow(rustdoc::bare_urls)]\n -#[unstable(feature = \"portable_simd\", issue = \"86656\")]\n--#[cfg(not(all(miri, doctest)))] // Miri does not support all SIMD intrinsics\n -mod std_float;\n -\n--#[cfg(not(all(miri, doctest)))] // Miri does not support all SIMD intrinsics\n -#[doc = include_str!(\"../../portable-simd/crates/core_simd/src/core_simd_docs.md\")]\n -#[unstable(feature = \"portable_simd\", issue = \"86656\")]\n -pub mod simd {"}, {"sha": "dc1beae6d2e71311801af88a5d8b496c0cbc51a4", "filename": "patches/0028-core-Disable-long-running-tests.patch", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6faa6a28ba165ff225a4865604189f0b681cbd47/patches%2F0028-core-Disable-long-running-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/6faa6a28ba165ff225a4865604189f0b681cbd47/patches%2F0028-core-Disable-long-running-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0028-core-Disable-long-running-tests.patch?ref=6faa6a28ba165ff225a4865604189f0b681cbd47", "patch": "@@ -1,30 +1,32 @@\n-From 0ffdd8eda8df364391c8ac6e1ce92c73ba9254d4 Mon Sep 17 00:00:00 2001\n+From eb703e627e7a84f1cd8d0d87f0f69da1f0acf765 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n Date: Fri, 3 Dec 2021 12:16:30 +0100\n Subject: [PATCH] Disable long running tests\n \n ---\n- library/core/tests/slice.rs | 3 +++\n- 1 file changed, 3 insertions(+)\n+ library/core/tests/slice.rs | 2 ++\n+ 1 file changed, 2 insertions(+)\n \n diff --git a/library/core/tests/slice.rs b/library/core/tests/slice.rs\n-index 2c8f00a..44847ee 100644\n+index 8402833..84592e0 100644\n --- a/library/core/tests/slice.rs\n +++ b/library/core/tests/slice.rs\n-@@ -2332,7 +2332,8 @@ macro_rules! empty_max_mut {\n-     };\n- }\n+@@ -2462,6 +2462,7 @@ take_tests! {\n+ #[cfg(not(miri))] // unused in Miri\n+ const EMPTY_MAX: &'static [()] = &[(); usize::MAX];\n  \n +/*\n- #[cfg(not(miri))] // Comparing usize::MAX many elements takes forever in Miri (and in rustc without optimizations)\n- take_tests! {\n-     slice: &[(); usize::MAX], method: take,\n-     (take_in_bounds_max_range_to, (..usize::MAX), Some(EMPTY_MAX), &[(); 0]),\n-@@ -2345,3 +2347,4 @@ take_tests! {\n+ // can't be a constant due to const mutability rules\n+ #[cfg(not(miri))] // unused in Miri\n+ macro_rules! empty_max_mut {\n+@@ -2485,6 +2486,7 @@ take_tests! {\n      (take_mut_oob_max_range_to_inclusive, (..=usize::MAX), None, empty_max_mut!()),\n      (take_mut_in_bounds_max_range_from, (usize::MAX..), Some(&mut [] as _), empty_max_mut!()),\n  }\n +*/\n+ \n+ #[test]\n+ fn test_slice_from_ptr_range() {\n -- \n 2.26.2.7.g19db9cfb68\n "}, {"sha": "db14ea2bebca557044f875a723bdae0fb54cd56e", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6faa6a28ba165ff225a4865604189f0b681cbd47/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/6faa6a28ba165ff225a4865604189f0b681cbd47/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=6faa6a28ba165ff225a4865604189f0b681cbd47", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-02-25\"\n+channel = \"nightly-2022-03-26\"\n components = [\"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]"}, {"sha": "b2f46e92eccbf72bb150d2e447b0c4719216326f", "filename": "src/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6faa6a28ba165ff225a4865604189f0b681cbd47/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6faa6a28ba165ff225a4865604189f0b681cbd47/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=6faa6a28ba165ff225a4865604189f0b681cbd47", "patch": "@@ -1252,7 +1252,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     }\n \n     fn do_not_inline(&mut self, _llret: RValue<'gcc>) {\n-        unimplemented!();\n+        // FIMXE(bjorn3): implement\n     }\n \n     fn set_span(&mut self, _span: Span) {}"}, {"sha": "0647d8c28eea269782ff9a05cfaa662709de7a2c", "filename": "src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6faa6a28ba165ff225a4865604189f0b681cbd47/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6faa6a28ba165ff225a4865604189f0b681cbd47/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=6faa6a28ba165ff225a4865604189f0b681cbd47", "patch": "@@ -64,6 +64,7 @@ use rustc_errors::{ErrorGuaranteed, Handler};\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::query::Providers;\n use rustc_session::config::{Lto, OptLevel, OutputFilenames};\n use rustc_session::Session;\n use rustc_span::Symbol;\n@@ -101,6 +102,11 @@ impl CodegenBackend for GccCodegenBackend {\n         *self.supports_128bit_integers.lock().expect(\"lock\") = check_context.get_last_error() == Ok(None);\n     }\n \n+    fn provide(&self, providers: &mut Providers) {\n+        // FIXME compute list of enabled features from cli flags\n+        providers.global_backend_features = |_tcx, ()| vec![];\n+    }\n+\n     fn codegen_crate<'tcx>(&self, tcx: TyCtxt<'tcx>, metadata: EncodedMetadata, need_metadata_module: bool) -> Box<dyn Any> {\n         let target_cpu = target_cpu(tcx.sess);\n         let res = codegen_crate(self.clone(), tcx, target_cpu.to_string(), metadata, need_metadata_module);"}]}