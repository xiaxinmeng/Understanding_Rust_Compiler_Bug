{"sha": "134f797a6309e8f284372c745689bcde17829c30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNGY3OTdhNjMwOWU4ZjI4NDM3MmM3NDU2ODliY2RlMTc4MjljMzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-18T05:01:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-18T05:01:28Z"}, "message": "auto merge of #14230 : alexcrichton/rust/liballoc, r=cmr,huonw\n\nThis commit is part of the libstd facade RFC, issue #13851. This creates a new\r\nlibrary, liballoc, which is intended to be the core allocation library for all\r\nof Rust. It is pinned on the basic assumption that an allocation failure is an\r\nabort or failure.\r\n\r\nThis module has inherited the heap/libc_heap modules from std::rt, the owned/rc\r\nmodules from std, and the arc module from libsync. These three pointers are\r\ncurrently the three most core pointer implementations in Rust.\r\n\r\nThe UnsafeArc type in std::sync should be considered deprecated and replaced by\r\n`Arc<Unsafe<T>>`. This commit does not currently migrate to this type, but future\r\ncommits will continue this refactoring.", "tree": {"sha": "c83e9a016521d21e9c10a553365c0d1b68e6b005", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c83e9a016521d21e9c10a553365c0d1b68e6b005"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/134f797a6309e8f284372c745689bcde17829c30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/134f797a6309e8f284372c745689bcde17829c30", "html_url": "https://github.com/rust-lang/rust/commit/134f797a6309e8f284372c745689bcde17829c30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/134f797a6309e8f284372c745689bcde17829c30/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3da5a5cd18dc2a2177160772725946c3b4512f7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3da5a5cd18dc2a2177160772725946c3b4512f7c", "html_url": "https://github.com/rust-lang/rust/commit/3da5a5cd18dc2a2177160772725946c3b4512f7c"}, {"sha": "4a1d21ab7b8d08398649d9c6a9641acebb6bc01c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a1d21ab7b8d08398649d9c6a9641acebb6bc01c", "html_url": "https://github.com/rust-lang/rust/commit/4a1d21ab7b8d08398649d9c6a9641acebb6bc01c"}], "stats": {"total": 323, "additions": 226, "deletions": 97}, "files": [{"sha": "a0a0bc800c45acff070fbd53616944306d641605", "filename": "mk/crates.mk", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/134f797a6309e8f284372c745689bcde17829c30/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/134f797a6309e8f284372c745689bcde17829c30/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=134f797a6309e8f284372c745689bcde17829c30", "patch": "@@ -51,14 +51,15 @@\n \n TARGET_CRATES := libc std green rustuv native flate arena glob term semver \\\n                  uuid serialize sync getopts collections num test time rand \\\n-\t\t workcache url log regex graphviz core rlibc\n+\t\t workcache url log regex graphviz core rlibc alloc\n HOST_CRATES := syntax rustc rustdoc fourcc hexfloat regex_macros fmt_macros\n CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n TOOLS := compiletest rustdoc rustc\n \n DEPS_core :=\n DEPS_rlibc :=\n-DEPS_std := core libc native:rustrt native:compiler-rt native:backtrace native:jemalloc\n+DEPS_alloc := core libc native:jemalloc\n+DEPS_std := core libc alloc native:rustrt native:backtrace\n DEPS_graphviz := std\n DEPS_green := std rand native:context_switch\n DEPS_rustuv := std native:uv native:uv_support\n@@ -76,7 +77,7 @@ DEPS_serialize := std collections log\n DEPS_term := std collections log\n DEPS_semver := std\n DEPS_uuid := std serialize rand\n-DEPS_sync := std\n+DEPS_sync := std alloc\n DEPS_getopts := std\n DEPS_collections := std rand\n DEPS_fourcc := syntax std\n@@ -101,6 +102,7 @@ TOOL_SOURCE_rustc := $(S)src/driver/driver.rs\n \n ONLY_RLIB_core := 1\n ONLY_RLIB_rlibc := 1\n+ONLY_RLIB_alloc := 1\n \n ################################################################################\n # You should not need to edit below this line"}, {"sha": "1ad79072e75ab3fed01e0a9f792420b7d2bfaf04", "filename": "src/liballoc/arc.rs", "status": "renamed", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/134f797a6309e8f284372c745689bcde17829c30/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134f797a6309e8f284372c745689bcde17829c30/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=134f797a6309e8f284372c745689bcde17829c30", "patch": "@@ -13,11 +13,16 @@\n  * between tasks.\n  */\n \n-use std::mem;\n-use std::ptr;\n-use std::rt::heap::deallocate;\n-use std::sync::atomics;\n-use std::mem::{min_align_of, size_of};\n+use core::atomics;\n+use core::clone::Clone;\n+use core::kinds::{Share, Send};\n+use core::mem::{min_align_of, size_of, drop};\n+use core::mem;\n+use core::ops::{Drop, Deref};\n+use core::option::{Some, None, Option};\n+use core::ptr;\n+use core::ptr::RawPtr;\n+use heap::deallocate;\n \n /// An atomically reference counted wrapper for shared state.\n ///\n@@ -28,6 +33,8 @@ use std::mem::{min_align_of, size_of};\n /// task.\n ///\n /// ```rust\n+/// extern crate sync;\n+///\n /// use sync::Arc;\n ///\n /// fn main() {\n@@ -251,10 +258,16 @@ impl<T: Share + Send> Drop for Weak<T> {\n #[cfg(test)]\n #[allow(experimental)]\n mod tests {\n-    use super::{Arc, Weak};\n+    use std::clone::Clone;\n+    use std::comm::channel;\n+    use std::mem::drop;\n+    use std::ops::{Drop, Deref, DerefMut};\n+    use std::option::{Option, Some, None};\n     use std::sync::atomics;\n     use std::task;\n-    use Mutex;\n+    use std::vec::Vec;\n+    use super::{Arc, Weak};\n+    use sync::Mutex;\n \n     struct Canary(*mut atomics::AtomicUint);\n ", "previous_filename": "src/libsync/arc.rs"}, {"sha": "69cd82a981a59c94ef3421a2edbf8ef41ee50dd7", "filename": "src/liballoc/heap.rs", "status": "renamed", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/134f797a6309e8f284372c745689bcde17829c30/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134f797a6309e8f284372c745689bcde17829c30/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=134f797a6309e8f284372c745689bcde17829c30", "patch": "@@ -11,10 +11,13 @@\n // FIXME: #13994: port to the sized deallocation API when available\n // FIXME: #13996: need a way to mark the `allocate` and `reallocate` return values as `noalias`\n \n-use intrinsics::{abort, cttz32};\n+use core::intrinsics::{abort, cttz32};\n+use core::option::{None, Option};\n+use core::ptr::{RawPtr, mut_null, null};\n use libc::{c_char, c_int, c_void, size_t};\n-use ptr::{RawPtr, mut_null, null};\n-use option::{None, Option};\n+\n+#[cfg(not(test))] use core::raw;\n+#[cfg(not(test))] use util;\n \n #[link(name = \"jemalloc\", kind = \"static\")]\n extern {\n@@ -148,11 +151,12 @@ unsafe fn exchange_free(ptr: *mut u8) {\n #[cfg(not(test))]\n #[lang=\"closure_exchange_malloc\"]\n #[inline]\n+#[allow(deprecated)]\n unsafe fn closure_exchange_malloc(drop_glue: fn(*mut u8), size: uint, align: uint) -> *mut u8 {\n-    let total_size = ::rt::util::get_box_size(size, align);\n+    let total_size = util::get_box_size(size, align);\n     let p = allocate(total_size, 8);\n \n-    let alloc = p as *mut ::raw::Box<()>;\n+    let alloc = p as *mut raw::Box<()>;\n     (*alloc).drop_glue = drop_glue;\n \n     alloc as *mut u8", "previous_filename": "src/libstd/rt/heap.rs"}, {"sha": "1a6d7bfaed0e00a53e8b5c18c92890cb44cd0174", "filename": "src/liballoc/lib.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/134f797a6309e8f284372c745689bcde17829c30/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134f797a6309e8f284372c745689bcde17829c30/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=134f797a6309e8f284372c745689bcde17829c30", "patch": "@@ -0,0 +1,101 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Rust's core allocation library\n+//!\n+//! This is the lowest level library through which allocation in Rust can be\n+//! performed where the allocation is assumed to succeed. This library will\n+//! trigger a task failure when allocation fails.\n+//!\n+//! This library, like libcore, is not intended for general usage, but rather as\n+//! a building block of other libraries. The types and interfaces in this\n+//! library are reexported through the [standard library](../std/index.html),\n+//! and should not be used through this library.\n+//!\n+//! Currently, there are four major definitions in this library.\n+//!\n+//! ## Owned pointers\n+//!\n+//! The [`Box`](owned/index.html) type is the core owned pointer type in rust.\n+//! There can only be one owner of a `Box`, and the owner can decide to mutate\n+//! the contents.\n+//!\n+//! This type can be sent among tasks efficiently as the size of a `Box` value\n+//! is just a pointer. Tree-like data structures are often built on owned\n+//! pointers because each node often has only one owner, the parent.\n+//!\n+//! ## Reference counted pointers\n+//!\n+//! The [`Rc`](rc/index.html) type is a non-threadsafe reference-counted pointer\n+//! type intended for sharing memory within a task. An `Rc` pointer wraps a\n+//! type, `T`, and only allows access to `&T`, a shared reference.\n+//!\n+//! This type is useful when inherited mutability is too constraining for an\n+//! application (such as using `Box`), and is often paired with the `Cell` or\n+//! `RefCell` types in order to allow mutation.\n+//!\n+//! ## Atomically reference counted pointers\n+//!\n+//! The [`Arc`](arc/index.html) type is the threadsafe equivalent of the `Rc`\n+//! type. It provides all the same functionality of `Rc`, except it requires\n+//! that the contained type `T` is shareable. Additionally, `Arc<T>` is itself\n+//! sendable while `Rc<T>` is not.\n+//!\n+//! This types allows for shared access to the contained data, and is often\n+//! paired with synchronization primitives such as mutexes to allow mutation of\n+//! shared resources.\n+//!\n+//! ## Heap interfaces\n+//!\n+//! The [`heap`](heap/index.html) and [`libc_heap`](libc_heap/index.html)\n+//! modules are the unsafe interfaces to the underlying allocation systems. The\n+//! `heap` module is considered the default heap, and is not necessarily backed\n+//! by libc malloc/free.  The `libc_heap` module is defined to be wired up to\n+//! the system malloc/free.\n+\n+#![crate_id = \"alloc#0.11.0-pre\"]\n+#![license = \"MIT/ASL2\"]\n+#![crate_type = \"rlib\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+\n+#![no_std]\n+#![feature(phase)]\n+\n+#[phase(syntax, link)]\n+extern crate core;\n+extern crate libc;\n+\n+// Allow testing this library\n+\n+#[cfg(test)] extern crate sync;\n+#[cfg(test)] extern crate native;\n+#[cfg(test)] #[phase(syntax, link)] extern crate std;\n+#[cfg(test)] #[phase(syntax, link)] extern crate log;\n+\n+// Heaps provided for low-level allocation strategies\n+\n+pub mod heap;\n+pub mod libc_heap;\n+pub mod util;\n+\n+// Primitive types using the heaps above\n+\n+#[cfg(not(test))]\n+pub mod owned;\n+pub mod arc;\n+pub mod rc;\n+\n+#[cfg(not(test))]\n+mod std {\n+    pub use core::fmt;\n+    pub use core::option;\n+}"}, {"sha": "5b189bc672e80bbc410668793c63bb787be86082", "filename": "src/liballoc/libc_heap.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/134f797a6309e8f284372c745689bcde17829c30/src%2Fliballoc%2Flibc_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134f797a6309e8f284372c745689bcde17829c30/src%2Fliballoc%2Flibc_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flibc_heap.rs?ref=134f797a6309e8f284372c745689bcde17829c30", "patch": "@@ -12,8 +12,8 @@\n //! The global (exchange) heap.\n \n use libc::{c_void, size_t, free, malloc, realloc};\n-use ptr::{RawPtr, mut_null};\n-use intrinsics::abort;\n+use core::ptr::{RawPtr, mut_null};\n+use core::intrinsics::abort;\n \n /// A wrapper around libc::malloc, aborting on out-of-memory\n #[inline]", "previous_filename": "src/libstd/rt/libc_heap.rs"}, {"sha": "114fe4eb0d49e614379fd84d56bb3cdb2e389b72", "filename": "src/liballoc/owned.rs", "status": "renamed", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/134f797a6309e8f284372c745689bcde17829c30/src%2Fliballoc%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134f797a6309e8f284372c745689bcde17829c30/src%2Fliballoc%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fowned.rs?ref=134f797a6309e8f284372c745689bcde17829c30", "patch": "@@ -8,17 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations on unique pointer types\n+//! A unique pointer type\n \n-use any::{Any, AnyRefExt};\n-use clone::Clone;\n-use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering};\n-use default::Default;\n-use fmt;\n-use intrinsics;\n-use mem;\n-use raw::TraitObject;\n-use result::{Ok, Err, Result};\n+use core::any::{Any, AnyRefExt};\n+use core::clone::Clone;\n+use core::cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering};\n+use core::default::Default;\n+use core::fmt;\n+use core::intrinsics;\n+use core::mem;\n+use core::raw::TraitObject;\n+use core::result::{Ok, Err, Result};\n \n /// A value that represents the global exchange heap. This is the default\n /// place that the `box` keyword allocates into when no place is supplied.\n@@ -107,7 +107,6 @@ impl<T: fmt::Show> fmt::Show for Box<T> {\n     }\n }\n \n-#[cfg(not(stage0))]\n impl fmt::Show for Box<Any> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.pad(\"Box<Any>\")", "previous_filename": "src/libstd/owned.rs"}, {"sha": "5a877d9362e40e7aa5772ee29a897d066126cf19", "filename": "src/liballoc/rc.rs", "status": "renamed", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/134f797a6309e8f284372c745689bcde17829c30/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134f797a6309e8f284372c745689bcde17829c30/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=134f797a6309e8f284372c745689bcde17829c30", "patch": "@@ -23,17 +23,18 @@ pointers, and then storing the parent pointers as `Weak` pointers.\n \n */\n \n-use mem::transmute;\n-use cell::Cell;\n-use clone::Clone;\n-use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering};\n-use kinds::marker;\n-use ops::{Deref, Drop};\n-use option::{Option, Some, None};\n-use ptr;\n-use ptr::RawPtr;\n-use mem::{min_align_of, size_of};\n-use rt::heap::deallocate;\n+use core::mem::transmute;\n+use core::cell::Cell;\n+use core::clone::Clone;\n+use core::cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering};\n+use core::kinds::marker;\n+use core::ops::{Deref, Drop};\n+use core::option::{Option, Some, None};\n+use core::ptr;\n+use core::ptr::RawPtr;\n+use core::mem::{min_align_of, size_of};\n+\n+use heap::deallocate;\n \n struct RcBox<T> {\n     value: T,\n@@ -230,9 +231,11 @@ impl<T> RcBoxPtr<T> for Weak<T> {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::*;\n-    use super::*;\n-    use cell::RefCell;\n+    use super::{Rc, Weak};\n+    use std::cell::RefCell;\n+    use std::option::{Option, Some, None};\n+    use std::mem::drop;\n+    use std::clone::Clone;\n \n     #[test]\n     fn test_clone() {\n@@ -280,7 +283,7 @@ mod tests {\n     #[test]\n     fn gc_inside() {\n         // see issue #11532\n-        use gc::Gc;\n+        use std::gc::Gc;\n         let a = Rc::new(RefCell::new(Gc::new(1)));\n         assert!(a.try_borrow_mut().is_some());\n     }", "previous_filename": "src/libstd/rc.rs"}, {"sha": "7e35af79eab1cf10f8d10699edff49ca73b378ba", "filename": "src/liballoc/util.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/134f797a6309e8f284372c745689bcde17829c30/src%2Fliballoc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134f797a6309e8f284372c745689bcde17829c30/src%2Fliballoc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Futil.rs?ref=134f797a6309e8f284372c745689bcde17829c30", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![doc(hidden)]\n+\n+use core::mem;\n+use core::raw;\n+\n+#[inline]\n+#[deprecated]\n+pub fn get_box_size(body_size: uint, body_align: uint) -> uint {\n+    let header_size = mem::size_of::<raw::Box<()>>();\n+    let total_size = align_to(header_size, body_align) + body_size;\n+    total_size\n+}\n+\n+// Rounds size to the next alignment. Alignment is required to be a power of\n+// two.\n+#[inline]\n+fn align_to(size: uint, align: uint) -> uint {\n+    assert!(align != 0);\n+    (size + align - 1) & !(align - 1)\n+}"}, {"sha": "ef32483c00ddd058dd3fe8d58c2e0ba08c280e64", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/134f797a6309e8f284372c745689bcde17829c30/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134f797a6309e8f284372c745689bcde17829c30/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=134f797a6309e8f284372c745689bcde17829c30", "patch": "@@ -70,10 +70,6 @@ pub struct Formatter<'a> {\n     /// Optionally specified precision for numeric types\n     pub precision: Option<uint>,\n \n-    #[allow(missing_doc)]\n-    #[cfg(stage0)]\n-    pub buf: &'a mut FormatWriter,\n-    #[cfg(not(stage0))]\n     buf: &'a mut FormatWriter,\n     curarg: slice::Items<'a, Argument<'a>>,\n     args: &'a [Argument<'a>],"}, {"sha": "a45f8a83a249426cb9031f77ee9564ea4a62bbc7", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/134f797a6309e8f284372c745689bcde17829c30/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134f797a6309e8f284372c745689bcde17829c30/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=134f797a6309e8f284372c745689bcde17829c30", "patch": "@@ -124,21 +124,21 @@\n // Make and rand accessible for benchmarking/testcases\n #[cfg(test)] extern crate rand;\n \n-extern crate libc;\n+extern crate alloc;\n extern crate core;\n+extern crate libc;\n \n // Make std testable by not duplicating lang items. See #2912\n #[cfg(test)] extern crate realstd = \"std\";\n-#[cfg(test)] pub use kinds = realstd::kinds;\n-#[cfg(test)] pub use ops = realstd::ops;\n-#[cfg(test)] pub use cmp = realstd::cmp;\n-#[cfg(test)] pub use ty = realstd::ty;\n-#[cfg(test)] pub use owned = realstd::owned;\n+#[cfg(test)] pub use realstd::kinds;\n+#[cfg(test)] pub use realstd::ops;\n+#[cfg(test)] pub use realstd::cmp;\n+#[cfg(test)] pub use realstd::ty;\n \n-#[cfg(not(test))] pub use cmp = core::cmp;\n-#[cfg(not(test))] pub use kinds = core::kinds;\n-#[cfg(not(test))] pub use ops = core::ops;\n-#[cfg(not(test))] pub use ty = core::ty;\n+#[cfg(not(test))] pub use core::cmp;\n+#[cfg(not(test))] pub use core::kinds;\n+#[cfg(not(test))] pub use core::ops;\n+#[cfg(not(test))] pub use core::ty;\n \n pub use core::any;\n pub use core::bool;\n@@ -155,6 +155,9 @@ pub use core::raw;\n pub use core::tuple;\n pub use core::result;\n \n+pub use alloc::owned;\n+pub use alloc::rc;\n+\n // Run tests with libgreen instead of libnative.\n //\n // FIXME: This egregiously hacks around starting the test runner in a different\n@@ -205,10 +208,7 @@ pub mod strbuf;\n \n pub mod ascii;\n \n-pub mod rc;\n pub mod gc;\n-#[cfg(not(test))]\n-pub mod owned;\n \n /* Common traits */\n "}, {"sha": "9d1fd230f5c044ab3adbed33abf031758d80e614", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/134f797a6309e8f284372c745689bcde17829c30/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134f797a6309e8f284372c745689bcde17829c30/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=134f797a6309e8f284372c745689bcde17829c30", "patch": "@@ -251,19 +251,11 @@ macro_rules! format_strbuf(\n /// write!(&mut w, \"formatted {}\", \"arguments\");\n /// ```\n #[macro_export]\n-#[cfg(not(stage0))]\n macro_rules! write(\n     ($dst:expr, $($arg:tt)*) => ({\n         format_args_method!($dst, write_fmt, $($arg)*)\n     })\n )\n-#[cfg(stage0)]\n-#[macro_export]\n-macro_rules! write(\n-    ($dst:expr, $($arg:tt)*) => ({\n-        format_args!(|args| { $dst.write_fmt(args) }, $($arg)*)\n-    })\n-)\n \n /// Equivalent to the `write!` macro, except that a newline is appended after\n /// the message is written."}, {"sha": "240d137adc6e3df70e0a5cd0b181736c93d05a13", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/134f797a6309e8f284372c745689bcde17829c30/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134f797a6309e8f284372c745689bcde17829c30/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=134f797a6309e8f284372c745689bcde17829c30", "patch": "@@ -10,6 +10,7 @@\n \n //! The local, garbage collected heap\n \n+use alloc::util;\n use iter::Iterator;\n use libc::{c_void, free};\n use mem;\n@@ -58,7 +59,7 @@ impl LocalHeap {\n \n     #[inline]\n     pub fn alloc(&mut self, drop_glue: fn(*mut u8), size: uint, align: uint) -> *mut Box {\n-        let total_size = ::rt::util::get_box_size(size, align);\n+        let total_size = util::get_box_size(size, align);\n         let alloc = self.memory_region.malloc(total_size);\n         {\n             // Make sure that we can't use `mybox` outside of this scope"}, {"sha": "daf18346fee2afcfcf0f261e84d7c2ea078e16bf", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/134f797a6309e8f284372c745689bcde17829c30/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134f797a6309e8f284372c745689bcde17829c30/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=134f797a6309e8f284372c745689bcde17829c30", "patch": "@@ -74,6 +74,8 @@ pub use self::unwind::{begin_unwind, begin_unwind_fmt};\n \n pub use self::util::{Stdio, Stdout, Stderr};\n \n+pub use alloc::{heap, libc_heap};\n+\n // FIXME: these probably shouldn't be public...\n #[doc(hidden)]\n pub mod shouldnt_be_public {\n@@ -86,12 +88,6 @@ pub mod shouldnt_be_public {\n // Internal macros used by the runtime.\n mod macros;\n \n-/// Wrappers around malloc / realloc aborting on out-of-memory.\n-pub mod libc_heap;\n-\n-/// The low-level memory allocation API.\n-pub mod heap;\n-\n /// Implementations of language-critical runtime features like @.\n pub mod task;\n "}, {"sha": "c9e82bd16e5412c5535b9fd54ea2e9ae82665115", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/134f797a6309e8f284372c745689bcde17829c30/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134f797a6309e8f284372c745689bcde17829c30/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=134f797a6309e8f284372c745689bcde17829c30", "patch": "@@ -26,23 +26,6 @@ use slice::ImmutableVector;\n // FIXME: Once the runtime matures remove the `true` below to turn off rtassert, etc.\n pub static ENFORCE_SANITY: bool = true || !cfg!(rtopt) || cfg!(rtdebug) || cfg!(rtassert);\n \n-#[deprecated]\n-#[doc(hidden)]\n-#[inline]\n-pub fn get_box_size(body_size: uint, body_align: uint) -> uint {\n-    let header_size = ::mem::size_of::<::raw::Box<()>>();\n-    let total_size = align_to(header_size, body_align) + body_size;\n-    total_size\n-}\n-\n-// Rounds |size| to the nearest |alignment|. Invariant: |alignment| is a power\n-// of two.\n-#[inline]\n-fn align_to(size: uint, align: uint) -> uint {\n-    assert!(align != 0);\n-    (size + align - 1) & !(align - 1)\n-}\n-\n /// Get the number of cores available\n pub fn num_cpus() -> uint {\n     unsafe {"}, {"sha": "3396425928e7d1737bcfc7425bd0163042ae5b3b", "filename": "src/libsync/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/134f797a6309e8f284372c745689bcde17829c30/src%2Flibsync%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134f797a6309e8f284372c745689bcde17829c30/src%2Flibsync%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flib.rs?ref=134f797a6309e8f284372c745689bcde17829c30", "patch": "@@ -27,17 +27,18 @@\n #[cfg(test)]\n #[phase(syntax, link)] extern crate log;\n \n+extern crate alloc;\n+\n pub use comm::{DuplexStream, duplex};\n pub use task_pool::TaskPool;\n pub use future::Future;\n-pub use arc::{Arc, Weak};\n+pub use alloc::arc::{Arc, Weak};\n pub use lock::{Mutex, MutexGuard, Condvar, Barrier,\n                RWLock, RWLockReadGuard, RWLockWriteGuard};\n \n // The mutex/rwlock in this module are not meant for reexport\n pub use raw::{Semaphore, SemaphoreGuard};\n \n-mod arc;\n mod comm;\n mod future;\n mod lock;"}, {"sha": "9f59f587770ea1a2999306553cc0012fe05fff4b", "filename": "src/libsync/lock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/134f797a6309e8f284372c745689bcde17829c30/src%2Flibsync%2Flock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134f797a6309e8f284372c745689bcde17829c30/src%2Flibsync%2Flock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flock.rs?ref=134f797a6309e8f284372c745689bcde17829c30", "patch": "@@ -447,7 +447,7 @@ mod tests {\n     use std::task;\n     use std::task::TaskBuilder;\n \n-    use arc::Arc;\n+    use Arc;\n     use super::{Mutex, Barrier, RWLock};\n \n     #[test]"}, {"sha": "591318d24b23c45c7af18de9131c0d8293521166", "filename": "src/libsync/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/134f797a6309e8f284372c745689bcde17829c30/src%2Flibsync%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134f797a6309e8f284372c745689bcde17829c30/src%2Flibsync%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fraw.rs?ref=134f797a6309e8f284372c745689bcde17829c30", "patch": "@@ -622,7 +622,7 @@ impl<'a> Drop for RWLockReadGuard<'a> {\n \n #[cfg(test)]\n mod tests {\n-    use arc::Arc;\n+    use Arc;\n     use super::{Semaphore, Mutex, RWLock, Condvar};\n \n     use std::mem;"}, {"sha": "045fceef6929c7a41a8af97b6baa83307518ff03", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/134f797a6309e8f284372c745689bcde17829c30/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/134f797a6309e8f284372c745689bcde17829c30/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=134f797a6309e8f284372c745689bcde17829c30", "patch": "@@ -1,3 +1,11 @@\n+S 2014-05-16 5327218\n+  freebsd-x86_64 e91e235c808eb7e8a1e82f7e00c874de9b1df345\n+  linux-i386 3a3b7d68ed42a144fa06c9a49c63966da9adeef2\n+  linux-x86_64 212f9062080a6e6cba472d8530d086ad787bbf72\n+  macos-i386 8306ef93b626cedbc0cb45296a72b294d8e073a0\n+  macos-x86_64 3025ff751d888994431eb3cf970936cd2143f95d\n+  winnt-i386 9b271338ecc29684e7db15c402e8c90b8b152781\n+\n S 2014-05-15 6a2b3d1\n   freebsd-x86_64 afc98b59cb819025fecdb9d145ca4463f857a477\n   linux-i386 d6f7a404412ea34db3d19814ca21fe6fa662b02f"}, {"sha": "bf79d1393b837a555d0f87b0fb002eb3218ca961", "filename": "src/test/compile-fail/no_send-rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/134f797a6309e8f284372c745689bcde17829c30/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134f797a6309e8f284372c745689bcde17829c30/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs?ref=134f797a6309e8f284372c745689bcde17829c30", "patch": "@@ -15,6 +15,6 @@ fn bar<T: Send>(_: T) {}\n fn main() {\n     let x = Rc::new(5);\n     bar(x);\n-    //~^ ERROR instantiating a type parameter with an incompatible type `std::rc::Rc<int>`,\n+    //~^ ERROR instantiating a type parameter with an incompatible type `alloc::rc::Rc<int>`,\n     //         which does not fulfill `Send`\n }"}]}