{"sha": "913ca088fc595aca5c5428460064976d58184a33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxM2NhMDg4ZmM1OTVhY2E1YzU0Mjg0NjAwNjQ5NzZkNTgxODRhMzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-08T19:06:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-08T19:06:58Z"}, "message": "auto merge of #5776 : dbaupp/rust/syntax-parse-large-number, r=thestinger\n\nAddresses #5544 and #5770, as well as a comment left in the documentation of `from_str_bytes_common`, so that there is now an option to ignore underscores.", "tree": {"sha": "1566f1fb788699cd1f00d173de0f16961778ed1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1566f1fb788699cd1f00d173de0f16961778ed1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/913ca088fc595aca5c5428460064976d58184a33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/913ca088fc595aca5c5428460064976d58184a33", "html_url": "https://github.com/rust-lang/rust/commit/913ca088fc595aca5c5428460064976d58184a33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/913ca088fc595aca5c5428460064976d58184a33/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c92936395ce1280c593660ac170b94158dce7d4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c92936395ce1280c593660ac170b94158dce7d4b", "html_url": "https://github.com/rust-lang/rust/commit/c92936395ce1280c593660ac170b94158dce7d4b"}, {"sha": "0c2ceb1a2e93e2e7624d384e19da6783cbb720ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c2ceb1a2e93e2e7624d384e19da6783cbb720ba", "html_url": "https://github.com/rust-lang/rust/commit/0c2ceb1a2e93e2e7624d384e19da6783cbb720ba"}], "stats": {"total": 134, "additions": 104, "deletions": 30}, "files": [{"sha": "fa82001151e2aa1ae5f42704e65adb851b0ca1aa", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/913ca088fc595aca5c5428460064976d58184a33/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913ca088fc595aca5c5428460064976d58184a33/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=913ca088fc595aca5c5428460064976d58184a33", "patch": "@@ -507,7 +507,7 @@ impl num::ToStrRadix for f32 {\n #[inline(always)]\n pub fn from_str(num: &str) -> Option<f32> {\n     strconv::from_str_common(num, 10u, true, true, true,\n-                             strconv::ExpDec, false)\n+                             strconv::ExpDec, false, false)\n }\n \n /**\n@@ -540,7 +540,7 @@ pub fn from_str(num: &str) -> Option<f32> {\n #[inline(always)]\n pub fn from_str_hex(num: &str) -> Option<f32> {\n     strconv::from_str_common(num, 16u, true, true, true,\n-                             strconv::ExpBin, false)\n+                             strconv::ExpBin, false, false)\n }\n \n /**\n@@ -565,7 +565,7 @@ pub fn from_str_hex(num: &str) -> Option<f32> {\n #[inline(always)]\n pub fn from_str_radix(num: &str, rdx: uint) -> Option<f32> {\n     strconv::from_str_common(num, rdx, true, true, false,\n-                             strconv::ExpNone, false)\n+                             strconv::ExpNone, false, false)\n }\n \n impl from_str::FromStr for f32 {"}, {"sha": "67dfabacd0b0ecd11e9e65896f06d463c7211c46", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/913ca088fc595aca5c5428460064976d58184a33/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913ca088fc595aca5c5428460064976d58184a33/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=913ca088fc595aca5c5428460064976d58184a33", "patch": "@@ -529,7 +529,7 @@ impl num::ToStrRadix for f64 {\n #[inline(always)]\n pub fn from_str(num: &str) -> Option<f64> {\n     strconv::from_str_common(num, 10u, true, true, true,\n-                             strconv::ExpDec, false)\n+                             strconv::ExpDec, false, false)\n }\n \n /**\n@@ -562,7 +562,7 @@ pub fn from_str(num: &str) -> Option<f64> {\n #[inline(always)]\n pub fn from_str_hex(num: &str) -> Option<f64> {\n     strconv::from_str_common(num, 16u, true, true, true,\n-                             strconv::ExpBin, false)\n+                             strconv::ExpBin, false, false)\n }\n \n /**\n@@ -587,7 +587,7 @@ pub fn from_str_hex(num: &str) -> Option<f64> {\n #[inline(always)]\n pub fn from_str_radix(num: &str, rdx: uint) -> Option<f64> {\n     strconv::from_str_common(num, rdx, true, true, false,\n-                             strconv::ExpNone, false)\n+                             strconv::ExpNone, false, false)\n }\n \n impl from_str::FromStr for f64 {"}, {"sha": "2508292970303f4e79a8b8fd62e1638ef8a78ed3", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/913ca088fc595aca5c5428460064976d58184a33/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913ca088fc595aca5c5428460064976d58184a33/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=913ca088fc595aca5c5428460064976d58184a33", "patch": "@@ -242,7 +242,7 @@ impl num::ToStrRadix for float {\n #[inline(always)]\n pub fn from_str(num: &str) -> Option<float> {\n     strconv::from_str_common(num, 10u, true, true, true,\n-                             strconv::ExpDec, false)\n+                             strconv::ExpDec, false, false)\n }\n \n /**\n@@ -275,7 +275,7 @@ pub fn from_str(num: &str) -> Option<float> {\n #[inline(always)]\n pub fn from_str_hex(num: &str) -> Option<float> {\n     strconv::from_str_common(num, 16u, true, true, true,\n-                             strconv::ExpBin, false)\n+                             strconv::ExpBin, false, false)\n }\n \n /**\n@@ -300,7 +300,7 @@ pub fn from_str_hex(num: &str) -> Option<float> {\n #[inline(always)]\n pub fn from_str_radix(num: &str, radix: uint) -> Option<float> {\n     strconv::from_str_common(num, radix, true, true, false,\n-                             strconv::ExpNone, false)\n+                             strconv::ExpNone, false, false)\n }\n \n impl from_str::FromStr for float {"}, {"sha": "db90ec7946537e7dc5e7caecbe67e9b0e2c9e07c", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/913ca088fc595aca5c5428460064976d58184a33/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913ca088fc595aca5c5428460064976d58184a33/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=913ca088fc595aca5c5428460064976d58184a33", "patch": "@@ -202,21 +202,21 @@ impl ops::Neg<T> for T {\n #[inline(always)]\n pub fn from_str(s: &str) -> Option<T> {\n     strconv::from_str_common(s, 10u, true, false, false,\n-                         strconv::ExpNone, false)\n+                         strconv::ExpNone, false, false)\n }\n \n /// Parse a string as a number in the given base.\n #[inline(always)]\n pub fn from_str_radix(s: &str, radix: uint) -> Option<T> {\n     strconv::from_str_common(s, radix, true, false, false,\n-                         strconv::ExpNone, false)\n+                         strconv::ExpNone, false, false)\n }\n \n /// Parse a byte slice as a number in the given base.\n #[inline(always)]\n pub fn parse_bytes(buf: &[u8], radix: uint) -> Option<T> {\n     strconv::from_str_bytes_common(buf, radix, true, false, false,\n-                               strconv::ExpNone, false)\n+                               strconv::ExpNone, false, false)\n }\n \n impl FromStr for T {"}, {"sha": "95da5bc29f5df98615e0a5adba48f5451305d1d2", "filename": "src/libcore/num/strconv.rs", "status": "modified", "additions": 52, "deletions": 13, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/913ca088fc595aca5c5428460064976d58184a33/src%2Flibcore%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913ca088fc595aca5c5428460064976d58184a33/src%2Flibcore%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fstrconv.rs?ref=913ca088fc595aca5c5428460064976d58184a33", "patch": "@@ -429,6 +429,8 @@ priv static DIGIT_E_RADIX: uint = ('e' as uint) - ('a' as uint) + 11u;\n  *                  `FFp128`. The exponent string itself is always base 10.\n  *                  Can conflict with `radix`, see Failure.\n  * - `empty_zero` - Whether to accept a empty `buf` as a 0 or not.\n+ * - `ignore_underscores` - Whether all underscores within the string should\n+ *                          be ignored.\n  *\n  * # Return value\n  * Returns `Some(n)` if `buf` parses to a number n without overflowing, and\n@@ -443,16 +445,13 @@ priv static DIGIT_E_RADIX: uint = ('e' as uint) - ('a' as uint) + 11u;\n  *   between digit and exponent sign `'p'`.\n  * - Fails if `radix` > 18 and `special == true` due to conflict\n  *   between digit and lowest first character in `inf` and `NaN`, the `'i'`.\n- *\n- * # Possible improvements\n- * - Could accept option to allow ignoring underscores, allowing for numbers\n- *   formated like `FF_AE_FF_FF`.\n  */\n-pub fn from_str_bytes_common<T:NumCast+Zero+One+Ord+Copy+Div<T,T>+\n+pub fn from_str_bytes_common<T:NumCast+Zero+One+Eq+Ord+Copy+Div<T,T>+\n                                     Mul<T,T>+Sub<T,T>+Neg<T>+Add<T,T>+\n                                     NumStrConv>(\n         buf: &[u8], radix: uint, negative: bool, fractional: bool,\n-        special: bool, exponent: ExponentFormat, empty_zero: bool\n+        special: bool, exponent: ExponentFormat, empty_zero: bool,\n+        ignore_underscores: bool\n         ) -> Option<T> {\n     match exponent {\n         ExpDec if radix >= DIGIT_E_RADIX       // decimal exponent 'e'\n@@ -531,12 +530,16 @@ pub fn from_str_bytes_common<T:NumCast+Zero+One+Ord+Copy+Div<T,T>+\n                     accum -= cast(digit as int);\n                 }\n \n-                // Detect overflow by comparing to last value\n-                if accum_positive && accum < last_accum { return None; }\n-                if !accum_positive && accum > last_accum { return None; }\n+                // Detect overflow by comparing to last value, except\n+                // if we've not seen any non-zero digits.\n+                if last_accum != _0 {\n+                    if accum_positive && accum <= last_accum { return None; }\n+                    if !accum_positive && accum >= last_accum { return None; }\n+                }\n                 last_accum = accum;\n             }\n             None => match c {\n+                '_' if ignore_underscores => {}\n                 'e' | 'E' | 'p' | 'P' => {\n                     exp_found = true;\n                     break;                       // start of exponent\n@@ -580,6 +583,7 @@ pub fn from_str_bytes_common<T:NumCast+Zero+One+Ord+Copy+Div<T,T>+\n                     last_accum = accum;\n                 }\n                 None => match c {\n+                    '_' if ignore_underscores => {}\n                     'e' | 'E' | 'p' | 'P' => {\n                         exp_found = true;\n                         break;                   // start of exponent\n@@ -607,6 +611,7 @@ pub fn from_str_bytes_common<T:NumCast+Zero+One+Ord+Copy+Div<T,T>+\n     if exp_found {\n         let c = buf[i] as char;\n         let base = match (c, exponent) {\n+            // c is never _ so don't need to handle specially\n             ('e', ExpDec) | ('E', ExpDec) => 10u,\n             ('p', ExpBin) | ('P', ExpBin) => 2u,\n             _ => return None // char doesn't fit given exponent format\n@@ -615,7 +620,8 @@ pub fn from_str_bytes_common<T:NumCast+Zero+One+Ord+Copy+Div<T,T>+\n         // parse remaining bytes as decimal integer,\n         // skipping the exponent char\n         let exp: Option<int> = from_str_bytes_common(\n-            buf.slice(i+1, len), 10, true, false, false, ExpNone, false);\n+            buf.slice(i+1, len), 10, true, false, false, ExpNone, false,\n+            ignore_underscores);\n \n         match exp {\n             Some(exp_pow) => {\n@@ -637,11 +643,44 @@ pub fn from_str_bytes_common<T:NumCast+Zero+One+Ord+Copy+Div<T,T>+\n  * `from_str_bytes_common()`, for details see there.\n  */\n #[inline(always)]\n-pub fn from_str_common<T:NumCast+Zero+One+Ord+Copy+Div<T,T>+Mul<T,T>+\n+pub fn from_str_common<T:NumCast+Zero+One+Eq+Ord+Copy+Div<T,T>+Mul<T,T>+\n                               Sub<T,T>+Neg<T>+Add<T,T>+NumStrConv>(\n         buf: &str, radix: uint, negative: bool, fractional: bool,\n-        special: bool, exponent: ExponentFormat, empty_zero: bool\n+        special: bool, exponent: ExponentFormat, empty_zero: bool,\n+        ignore_underscores: bool\n         ) -> Option<T> {\n     from_str_bytes_common(str::to_bytes(buf), radix, negative,\n-                            fractional, special, exponent, empty_zero)\n+                          fractional, special, exponent, empty_zero,\n+                          ignore_underscores)\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use super::*;\n+    use option::*;\n+\n+    #[test]\n+    fn from_str_ignore_underscores() {\n+        let s : Option<u8> = from_str_common(\"__1__\", 2, false, false, false,\n+                                             ExpNone, false, true);\n+        assert_eq!(s, Some(1u8));\n+\n+        let n : Option<u8> = from_str_common(\"__1__\", 2, false, false, false,\n+                                             ExpNone, false, false);\n+        assert_eq!(n, None);\n+\n+        let f : Option<f32> = from_str_common(\"_1_._1_e_1_\", 10, false, true, false,\n+                                              ExpDec, false, true);\n+        assert_eq!(f, Some(1.1e1f32));\n+    }\n+\n+    #[test]\n+    fn from_str_issue5770() {\n+        // try to parse 0b1_1111_1111 = 511 as a u8. Caused problems\n+        // since 255*2+1 == 255 (mod 256) so the overflow wasn't\n+        // detected.\n+        let n : Option<u8> = from_str_common(\"111111111\", 2, false, false, false,\n+                                             ExpNone, false, false);\n+        assert_eq!(n, None);\n+    }\n }"}, {"sha": "39af025217c930328d5f330fc9f5e6e33863c0ef", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/913ca088fc595aca5c5428460064976d58184a33/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913ca088fc595aca5c5428460064976d58184a33/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=913ca088fc595aca5c5428460064976d58184a33", "patch": "@@ -168,21 +168,21 @@ impl ops::Neg<T> for T {\n #[inline(always)]\n pub fn from_str(s: &str) -> Option<T> {\n     strconv::from_str_common(s, 10u, false, false, false,\n-                             strconv::ExpNone, false)\n+                             strconv::ExpNone, false, false)\n }\n \n /// Parse a string as a number in the given base.\n #[inline(always)]\n pub fn from_str_radix(s: &str, radix: uint) -> Option<T> {\n     strconv::from_str_common(s, radix, false, false, false,\n-                             strconv::ExpNone, false)\n+                             strconv::ExpNone, false, false)\n }\n \n /// Parse a byte slice as a number in the given base.\n #[inline(always)]\n pub fn parse_bytes(buf: &[u8], radix: uint) -> Option<T> {\n     strconv::from_str_bytes_common(buf, radix, false, false, false,\n-                                   strconv::ExpNone, false)\n+                                   strconv::ExpNone, false, false)\n }\n \n impl FromStr for T {"}, {"sha": "b6ec15d86413b8594a71c844246dd1b51cff8b02", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/913ca088fc595aca5c5428460064976d58184a33/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913ca088fc595aca5c5428460064976d58184a33/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=913ca088fc595aca5c5428460064976d58184a33", "patch": "@@ -442,7 +442,11 @@ fn scan_number(c: char, rdr: @mut StringReader) -> token::Token {\n         if str::len(num_str) == 0u {\n             rdr.fatal(~\"no valid digits found for number\");\n         }\n-        let parsed = u64::from_str_radix(num_str, base as uint).get();\n+        let parsed = match u64::from_str_radix(num_str, base as uint) {\n+            Some(p) => p,\n+            None => rdr.fatal(~\"int literal is too large\")\n+        };\n+\n         match tp {\n           either::Left(t) => return token::LIT_INT(parsed as i64, t),\n           either::Right(t) => return token::LIT_UINT(parsed, t)\n@@ -503,7 +507,10 @@ fn scan_number(c: char, rdr: @mut StringReader) -> token::Token {\n         if str::len(num_str) == 0u {\n             rdr.fatal(~\"no valid digits found for number\");\n         }\n-        let parsed = u64::from_str_radix(num_str, base as uint).get();\n+        let parsed = match u64::from_str_radix(num_str, base as uint) {\n+            Some(p) => p,\n+            None => rdr.fatal(~\"int literal is too large\")\n+        };\n \n         debug!(\"lexing %s as an unsuffixed integer literal\",\n                num_str);"}, {"sha": "42a18ba5fb76529525c7e8c564611df83644786e", "filename": "src/test/compile-fail/issue-5544-a.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/913ca088fc595aca5c5428460064976d58184a33/src%2Ftest%2Fcompile-fail%2Fissue-5544-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913ca088fc595aca5c5428460064976d58184a33/src%2Ftest%2Fcompile-fail%2Fissue-5544-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5544-a.rs?ref=913ca088fc595aca5c5428460064976d58184a33", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let _i = 18446744073709551616; // 2^64\n+    //~^ ERROR int literal is too large\n+}"}, {"sha": "bbe43e652a800b6abf771995e2f7bc36e27cc782", "filename": "src/test/compile-fail/issue-5544-b.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/913ca088fc595aca5c5428460064976d58184a33/src%2Ftest%2Fcompile-fail%2Fissue-5544-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913ca088fc595aca5c5428460064976d58184a33/src%2Ftest%2Fcompile-fail%2Fissue-5544-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5544-b.rs?ref=913ca088fc595aca5c5428460064976d58184a33", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let _i = 0xff_ffff_ffff_ffff_ffff;\n+    //~^ ERROR int literal is too large\n+}"}]}