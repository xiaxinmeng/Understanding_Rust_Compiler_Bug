{"sha": "e5b2fd67711eeab6146021542937028dff3bf8a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1YjJmZDY3NzExZWVhYjYxNDYwMjE1NDI5MzcwMjhkZmYzYmY4YTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-01T16:23:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-01T19:15:35Z"}, "message": "hard-code expansion of query_group", "tree": {"sha": "01b9e5dadc6a81c94cba5da4a19daea0b6ed7101", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01b9e5dadc6a81c94cba5da4a19daea0b6ed7101"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5b2fd67711eeab6146021542937028dff3bf8a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5b2fd67711eeab6146021542937028dff3bf8a7", "html_url": "https://github.com/rust-lang/rust/commit/e5b2fd67711eeab6146021542937028dff3bf8a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5b2fd67711eeab6146021542937028dff3bf8a7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "832bae8e28768759ba3dc75cf6a10fb333741d8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/832bae8e28768759ba3dc75cf6a10fb333741d8e", "html_url": "https://github.com/rust-lang/rust/commit/832bae8e28768759ba3dc75cf6a10fb333741d8e"}], "stats": {"total": 68, "additions": 60, "deletions": 8}, "files": [{"sha": "ccea4aee39e5418cc1f9775f88ed34b9e4aee21d", "filename": "crates/ra_analysis/src/syntax_highlighting.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e5b2fd67711eeab6146021542937028dff3bf8a7/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b2fd67711eeab6146021542937028dff3bf8a7/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs?ref=e5b2fd67711eeab6146021542937028dff3bf8a7", "patch": "@@ -44,7 +44,7 @@ mod tests {\n             fn main() {\n                 ctry!({ let x = 92; x});\n             }\n-        \",\n+            \",\n         );\n         let highlights = analysis.highlight(file_id).unwrap();\n         assert_eq_dbg(\n@@ -60,4 +60,26 @@ mod tests {\n             &highlights,\n         )\n     }\n+\n+    // FIXME: this test is not really necessary: artifact of the inital hacky\n+    // macros implementation.\n+    #[test]\n+    fn highlight_query_group_macro() {\n+        let (analysis, file_id) = single_file(\n+            \"\n+            salsa::query_group! {\n+                pub trait HirDatabase: SyntaxDatabase {}\n+            }\n+            \",\n+        );\n+        let highlights = analysis.highlight(file_id).unwrap();\n+        assert_eq_dbg(\n+            r#\"[HighlightedRange { range: [20; 32), tag: \"macro\" },\n+                HighlightedRange { range: [13; 18), tag: \"text\" },\n+                HighlightedRange { range: [51; 54), tag: \"keyword\" },\n+                HighlightedRange { range: [55; 60), tag: \"keyword\" },\n+                HighlightedRange { range: [61; 72), tag: \"function\" }]\"#,\n+            &highlights,\n+        )\n+    }\n }"}, {"sha": "932e2b5745de52c85185cd7896c4c3b4c194bc84", "filename": "crates/ra_hir/src/macros.rs", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e5b2fd67711eeab6146021542937028dff3bf8a7/crates%2Fra_hir%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b2fd67711eeab6146021542937028dff3bf8a7/crates%2Fra_hir%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmacros.rs?ref=e5b2fd67711eeab6146021542937028dff3bf8a7", "patch": "@@ -3,7 +3,7 @@ use std::sync::Arc;\n use ra_db::{LocalSyntaxPtr, LocationIntener};\n use ra_syntax::{\n     TextRange, TextUnit, SourceFileNode, AstNode, SyntaxNode,\n-    ast,\n+    ast::{self, NameOwner},\n };\n \n use crate::{SourceRootId, module::ModuleId, SourceItemId, HirDatabase};\n@@ -44,6 +44,7 @@ impl MacroCallLoc {\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum MacroDef {\n     CTry,\n+    QueryGroup,\n }\n \n impl MacroDef {\n@@ -57,14 +58,14 @@ impl MacroDef {\n     fn from_call(macro_call: ast::MacroCall) -> Option<(MacroDef, MacroInput)> {\n         let def = {\n             let path = macro_call.path()?;\n-            if path.qualifier().is_some() {\n-                return None;\n-            }\n             let name_ref = path.segment()?.name_ref()?;\n-            if name_ref.text() != \"ctry\" {\n+            if name_ref.text() == \"ctry\" {\n+                MacroDef::CTry\n+            } else if name_ref.text() == \"query_group\" {\n+                MacroDef::QueryGroup\n+            } else {\n                 return None;\n             }\n-            MacroDef::CTry\n         };\n \n         let input = {\n@@ -77,7 +78,12 @@ impl MacroDef {\n     }\n \n     fn expand(self, input: MacroInput) -> Option<MacroExpansion> {\n-        let MacroDef::CTry = self;\n+        match self {\n+            MacroDef::CTry => self.expand_ctry(input),\n+            MacroDef::QueryGroup => self.expand_query_group(input),\n+        }\n+    }\n+    fn expand_ctry(self, input: MacroInput) -> Option<MacroExpansion> {\n         let text = format!(\n             r\"\n                 fn dummy() {{\n@@ -101,6 +107,30 @@ impl MacroDef {\n         };\n         Some(res)\n     }\n+    fn expand_query_group(self, input: MacroInput) -> Option<MacroExpansion> {\n+        let anchor = \"trait \";\n+        let pos = input.text.find(anchor)? + anchor.len();\n+        let trait_name = input.text[pos..]\n+            .chars()\n+            .take_while(|c| c.is_alphabetic())\n+            .collect::<String>();\n+        if trait_name.is_empty() {\n+            return None;\n+        }\n+        let src_range = TextRange::offset_len((pos as u32).into(), TextUnit::of_str(&trait_name));\n+        let text = format!(r\"trait {} {{ }}\", trait_name);\n+        let file = SourceFileNode::parse(&text);\n+        let trait_def = file.syntax().descendants().find_map(ast::TraitDef::cast)?;\n+        let name = trait_def.name()?;\n+        let ptr = LocalSyntaxPtr::new(trait_def.syntax());\n+        let ranges_map = vec![(src_range, name.syntax().range())];\n+        let res = MacroExpansion {\n+            text,\n+            ranges_map,\n+            ptr,\n+        };\n+        Some(res)\n+    }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]"}]}