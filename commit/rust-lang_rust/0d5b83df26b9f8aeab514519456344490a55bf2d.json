{"sha": "0d5b83df26b9f8aeab514519456344490a55bf2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNWI4M2RmMjZiOWY4YWVhYjUxNDUxOTQ1NjM0NDQ5MGE1NWJmMmQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-24T06:13:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-24T06:13:38Z"}, "message": "Rollup merge of #70259 - wesleywiser:use_reveal_all, r=eddyb\n\nUse Reveal::All in MIR optimizations\n\nResolves some code review feedback in #67662.\n\nFixes #68855\n\nr? @eddyb", "tree": {"sha": "764165d2e1024c908ee4989021872695f02bb554", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/764165d2e1024c908ee4989021872695f02bb554"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d5b83df26b9f8aeab514519456344490a55bf2d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeeaUSCRBK7hj4Ov3rIwAAdHIIAA4J3bsjMPORJlzMr8e3ic9G\nF+ALPM8YPzH7IwhwwE9g2NDEPM+NP0ohi8AEJslw0dC4+PptGiNzbjzjFJHYDbLX\nP05A6+Tx+1xiQebBaRJZG+xjXTmg6MFEa6DeHI261vZT/FHTY4qaNTBS9Ipcpmgt\n+hE+knhE112B7QF1Rga0F6VdX9B0noN2RQpFyNU9fh4qt/v6BIugAMYruQBkIUlC\n/XIz3+tYYOXQVIIIrZl8YGfJoL5QYOY8eXDoan5/9USuuX4YCnTYiYvxRUwgDr8E\nL7GQpl6UmUFk5wE91gUlnVtuzETo2EmZMbATeAH04ZNAH7YdjuKYEBM13VNUMOk=\n=1jMQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 764165d2e1024c908ee4989021872695f02bb554\nparent 7bd86cee49c5643ccc0556ffe019c9711c9fff95\nparent 61d3be8de784e7ec2642c06daa5ff95f226d65d3\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585030418 +0100\ncommitter GitHub <noreply@github.com> 1585030418 +0100\n\nRollup merge of #70259 - wesleywiser:use_reveal_all, r=eddyb\n\nUse Reveal::All in MIR optimizations\n\nResolves some code review feedback in #67662.\n\nFixes #68855\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d5b83df26b9f8aeab514519456344490a55bf2d", "html_url": "https://github.com/rust-lang/rust/commit/0d5b83df26b9f8aeab514519456344490a55bf2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d5b83df26b9f8aeab514519456344490a55bf2d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bd86cee49c5643ccc0556ffe019c9711c9fff95", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd86cee49c5643ccc0556ffe019c9711c9fff95", "html_url": "https://github.com/rust-lang/rust/commit/7bd86cee49c5643ccc0556ffe019c9711c9fff95"}, {"sha": "61d3be8de784e7ec2642c06daa5ff95f226d65d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/61d3be8de784e7ec2642c06daa5ff95f226d65d3", "html_url": "https://github.com/rust-lang/rust/commit/61d3be8de784e7ec2642c06daa5ff95f226d65d3"}], "stats": {"total": 86, "additions": 68, "deletions": 18}, "files": [{"sha": "548c637efb260435f07855f64f33735f9c3e32f3", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0d5b83df26b9f8aeab514519456344490a55bf2d/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5b83df26b9f8aeab514519456344490a55bf2d/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=0d5b83df26b9f8aeab514519456344490a55bf2d", "patch": "@@ -337,14 +337,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     ) -> ConstPropagator<'mir, 'tcx> {\n         let def_id = source.def_id();\n         let substs = &InternalSubsts::identity_for_item(tcx, def_id);\n-        let mut param_env = tcx.param_env(def_id);\n-\n-        // If we're evaluating inside a monomorphic function, then use `Reveal::All` because\n-        // we want to see the same instances that codegen will see. This allows us to `resolve()`\n-        // specializations.\n-        if !substs.needs_subst() {\n-            param_env = param_env.with_reveal_all();\n-        }\n+        let param_env = tcx.param_env(def_id).with_reveal_all();\n \n         let span = tcx.def_span(def_id);\n         let mut ecx = InterpCx::new(tcx.at(span), param_env, ConstPropMachine, ());"}, {"sha": "16c32e138fdf04101ac2565e16e81fb2396d4300", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0d5b83df26b9f8aeab514519456344490a55bf2d/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5b83df26b9f8aeab514519456344490a55bf2d/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=0d5b83df26b9f8aeab514519456344490a55bf2d", "patch": "@@ -3,8 +3,8 @@\n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::mir::visit::*;\n use rustc::mir::*;\n-use rustc::ty::subst::{InternalSubsts, Subst, SubstsRef};\n-use rustc::ty::{self, Instance, InstanceDef, ParamEnv, Ty, TyCtxt, TypeFoldable};\n+use rustc::ty::subst::{Subst, SubstsRef};\n+use rustc::ty::{self, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n use rustc_attr as attr;\n use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::BitSet;\n@@ -66,14 +66,7 @@ impl Inliner<'tcx> {\n \n         let mut callsites = VecDeque::new();\n \n-        let mut param_env = self.tcx.param_env(self.source.def_id());\n-\n-        let substs = &InternalSubsts::identity_for_item(self.tcx, self.source.def_id());\n-\n-        // For monomorphic functions, we can use `Reveal::All` to resolve specialized instances.\n-        if !substs.needs_subst() {\n-            param_env = param_env.with_reveal_all();\n-        }\n+        let param_env = self.tcx.param_env(self.source.def_id()).with_reveal_all();\n \n         // Only do inlining into fn bodies.\n         let id = self.tcx.hir().as_local_hir_id(self.source.def_id()).unwrap();"}, {"sha": "0e9f33b15e2cc1d68f09fcc3321f3df190139521", "filename": "src/test/mir-opt/const_prop/control-flow-simplification.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/0d5b83df26b9f8aeab514519456344490a55bf2d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5b83df26b9f8aeab514519456344490a55bf2d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification.rs?ref=0d5b83df26b9f8aeab514519456344490a55bf2d", "patch": "@@ -0,0 +1,64 @@\n+// compile-flags: -Zmir-opt-level=1\n+\n+trait NeedsDrop:Sized{\n+    const NEEDS:bool=std::mem::needs_drop::<Self>();\n+}\n+\n+impl<This> NeedsDrop for This{}\n+\n+fn hello<T>(){\n+    if <bool>::NEEDS {\n+        panic!()\n+    }\n+}\n+\n+pub fn main() {\n+    hello::<()>();\n+    hello::<Vec<()>>();\n+}\n+\n+// END RUST SOURCE\n+// START rustc.hello.ConstProp.before.mir\n+// let mut _0: ();\n+// let mut _1: bool;\n+// let mut _2: !;\n+// bb0: {\n+//   StorageLive(_1);\n+//   _1 = const <bool as NeedsDrop>::NEEDS;\n+//   switchInt(_1) -> [false: bb1, otherwise: bb2];\n+// }\n+// bb1: {\n+//   _0 = ();\n+//   StorageDead(_1);\n+//   return;\n+// }\n+// bb2: {\n+//   StorageLive(_2);\n+//   const std::rt::begin_panic::<&str>(const \"explicit panic\");\n+// }\n+// END rustc.hello.ConstProp.before.mir\n+// START rustc.hello.ConstProp.after.mir\n+// let mut _0: ();\n+// let mut _1: bool;\n+// let mut _2: !;\n+// bb0: {\n+//   StorageLive(_1);\n+//   _1 = const false;\n+//   switchInt(const false) -> [false: bb1, otherwise: bb2];\n+// }\n+// bb1: {\n+//   _0 = ();\n+//   StorageDead(_1);\n+//   return;\n+// }\n+// bb2: {\n+//   StorageLive(_2);\n+//   const std::rt::begin_panic::<&str>(const \"explicit panic\");\n+// }\n+// END rustc.hello.ConstProp.after.mir\n+// START rustc.hello.PreCodegen.before.mir\n+// let mut _0: ();\n+// bb0: {\n+//   return;\n+// }\n+// END rustc.hello.PreCodegen.before.mir"}]}