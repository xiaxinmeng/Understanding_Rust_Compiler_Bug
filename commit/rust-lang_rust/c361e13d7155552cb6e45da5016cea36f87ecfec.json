{"sha": "c361e13d7155552cb6e45da5016cea36f87ecfec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNjFlMTNkNzE1NTU1MmNiNmU0NWRhNTAxNmNlYTM2Zjg3ZWNmZWM=", "commit": {"author": {"name": "kwantam", "email": "kwantam@gmail.com", "date": "2015-04-18T17:49:51Z"}, "committer": {"name": "kwantam", "email": "kwantam@gmail.com", "date": "2015-04-21T19:31:51Z"}, "message": "implement rfc 1054: split_whitespace() fn, deprecate words()\n\nFor now, words() is left in (but deprecated), and Words is a type alias for\nstruct SplitWhitespace.\n\nAlso cleaned up references to s.words() throughout codebase.\n\nCloses #15628", "tree": {"sha": "eb03f86d7f11029bb49f15e098a55222fa3ea30b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb03f86d7f11029bb49f15e098a55222fa3ea30b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c361e13d7155552cb6e45da5016cea36f87ecfec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c361e13d7155552cb6e45da5016cea36f87ecfec", "html_url": "https://github.com/rust-lang/rust/commit/c361e13d7155552cb6e45da5016cea36f87ecfec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c361e13d7155552cb6e45da5016cea36f87ecfec/comments", "author": {"login": "kwantam", "id": 716593, "node_id": "MDQ6VXNlcjcxNjU5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/716593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kwantam", "html_url": "https://github.com/kwantam", "followers_url": "https://api.github.com/users/kwantam/followers", "following_url": "https://api.github.com/users/kwantam/following{/other_user}", "gists_url": "https://api.github.com/users/kwantam/gists{/gist_id}", "starred_url": "https://api.github.com/users/kwantam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kwantam/subscriptions", "organizations_url": "https://api.github.com/users/kwantam/orgs", "repos_url": "https://api.github.com/users/kwantam/repos", "events_url": "https://api.github.com/users/kwantam/events{/privacy}", "received_events_url": "https://api.github.com/users/kwantam/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kwantam", "id": 716593, "node_id": "MDQ6VXNlcjcxNjU5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/716593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kwantam", "html_url": "https://github.com/kwantam", "followers_url": "https://api.github.com/users/kwantam/followers", "following_url": "https://api.github.com/users/kwantam/following{/other_user}", "gists_url": "https://api.github.com/users/kwantam/gists{/gist_id}", "starred_url": "https://api.github.com/users/kwantam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kwantam/subscriptions", "organizations_url": "https://api.github.com/users/kwantam/orgs", "repos_url": "https://api.github.com/users/kwantam/repos", "events_url": "https://api.github.com/users/kwantam/events{/privacy}", "received_events_url": "https://api.github.com/users/kwantam/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f43c86cda46a423b947be427a5fea2614ca569dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f43c86cda46a423b947be427a5fea2614ca569dc", "html_url": "https://github.com/rust-lang/rust/commit/f43c86cda46a423b947be427a5fea2614ca569dc"}], "stats": {"total": 81, "additions": 53, "deletions": 28}, "files": [{"sha": "b585c2fc6ed95151de6f5198e6a1c5e0c6c09e49", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c361e13d7155552cb6e45da5016cea36f87ecfec/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c361e13d7155552cb6e45da5016cea36f87ecfec/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=c361e13d7155552cb6e45da5016cea36f87ecfec", "patch": "@@ -76,7 +76,7 @@ pub use core::str::{Matches, RMatches};\n pub use core::str::{MatchIndices, RMatchIndices};\n pub use core::str::{from_utf8, Chars, CharIndices, Bytes};\n pub use core::str::{from_utf8_unchecked, ParseBoolError};\n-pub use rustc_unicode::str::{Words, Graphemes, GraphemeIndices};\n+pub use rustc_unicode::str::{SplitWhitespace, Words, Graphemes, GraphemeIndices};\n pub use core::str::pattern;\n \n /*\n@@ -1737,27 +1737,44 @@ impl str {\n         UnicodeStr::grapheme_indices(&self[..], is_extended)\n     }\n \n-    /// An iterator over the non-empty words of `self`.\n-    ///\n-    /// A 'word' is a subsequence separated by any sequence of whitespace.\n-    /// Sequences of whitespace\n-    /// are collapsed, so empty \"words\" are not included.\n+    /// An iterator over the non-empty substrings of `self` which contain no whitespace,\n+    /// and which are separated by any amount of whitespace.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// # #![feature(str_words)]\n+    /// # #![allow(deprecated)]\n     /// let some_words = \" Mary   had\\ta little  \\n\\t lamb\";\n     /// let v: Vec<&str> = some_words.words().collect();\n     ///\n     /// assert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n     /// ```\n+    #[deprecated(reason = \"words() will be removed. Use split_whitespace() instead\",\n+                 since = \"1.1.0\")]\n     #[unstable(feature = \"str_words\",\n                reason = \"the precise algorithm to use is unclear\")]\n+    #[allow(deprecated)]\n     pub fn words(&self) -> Words {\n         UnicodeStr::words(&self[..])\n     }\n \n+    /// An iterator over the non-empty substrings of `self` which contain no whitespace,\n+    /// and which are separated by any amount of whitespace.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let some_words = \" Mary   had\\ta little  \\n\\t lamb\";\n+    /// let v: Vec<&str> = some_words.split_whitespace().collect();\n+    ///\n+    /// assert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n+    /// ```\n+    #[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n+    pub fn split_whitespace(&self) -> SplitWhitespace {\n+        UnicodeStr::split_whitespace(&self[..])\n+    }\n+\n     /// Returns a string's displayed width in columns.\n     ///\n     /// Control characters have zero width."}, {"sha": "5c109dc8104f21492347aa57d7a549d1a5028a10", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c361e13d7155552cb6e45da5016cea36f87ecfec/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c361e13d7155552cb6e45da5016cea36f87ecfec/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=c361e13d7155552cb6e45da5016cea36f87ecfec", "patch": "@@ -14,7 +14,6 @@\n #![feature(hash)]\n #![feature(rand)]\n #![feature(rustc_private)]\n-#![feature(str_words)]\n #![feature(test)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]"}, {"sha": "170f49ab15be553d5177122d4033da1e65bbaf85", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c361e13d7155552cb6e45da5016cea36f87ecfec/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c361e13d7155552cb6e45da5016cea36f87ecfec/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=c361e13d7155552cb6e45da5016cea36f87ecfec", "patch": "@@ -939,9 +939,9 @@ fn test_rsplitn() {\n }\n \n #[test]\n-fn test_words() {\n+fn test_split_whitespace() {\n     let data = \"\\n \\tM\u00e4ry   h\u00e4d\\t\u00e4  little l\u00e4mb\\nLittle l\u00e4mb\\n\";\n-    let words: Vec<&str> = data.words().collect();\n+    let words: Vec<&str> = data.split_whitespace().collect();\n     assert_eq!(words, [\"M\u00e4ry\", \"h\u00e4d\", \"\u00e4\", \"little\", \"l\u00e4mb\", \"Little\", \"l\u00e4mb\"])\n }\n "}, {"sha": "5782c57834eedc6f14ab226aff6ca7f35b1a8b33", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c361e13d7155552cb6e45da5016cea36f87ecfec/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c361e13d7155552cb6e45da5016cea36f87ecfec/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=c361e13d7155552cb6e45da5016cea36f87ecfec", "patch": "@@ -91,7 +91,6 @@\n \n #![deny(missing_docs)]\n #![feature(staged_api)]\n-#![feature(str_words)]\n #![feature(str_char)]\n #![cfg_attr(test, feature(rustc_private))]\n \n@@ -771,7 +770,7 @@ pub fn usage(brief: &str, opts: &[OptGroup]) -> String {\n \n         // Normalize desc to contain words separated by one space character\n         let mut desc_normalized_whitespace = String::new();\n-        for word in desc.words() {\n+        for word in desc.split_whitespace() {\n             desc_normalized_whitespace.push_str(word);\n             desc_normalized_whitespace.push(' ');\n         }"}, {"sha": "5b4d6c144cfb9f67f5be805f86a732e621f15d74", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c361e13d7155552cb6e45da5016cea36f87ecfec/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c361e13d7155552cb6e45da5016cea36f87ecfec/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=c361e13d7155552cb6e45da5016cea36f87ecfec", "patch": "@@ -38,7 +38,6 @@\n #![feature(staged_api)]\n #![feature(std_misc)]\n #![feature(path_ext)]\n-#![feature(str_words)]\n #![feature(str_char)]\n #![feature(into_cow)]\n #![feature(slice_patterns)]"}, {"sha": "f4ea069447fdfc5124a232cac8fe6cea9f5644ee", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c361e13d7155552cb6e45da5016cea36f87ecfec/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c361e13d7155552cb6e45da5016cea36f87ecfec/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=c361e13d7155552cb6e45da5016cea36f87ecfec", "patch": "@@ -418,7 +418,7 @@ macro_rules! options {\n                       -> bool {\n             match v {\n                 Some(s) => {\n-                    for s in s.words() {\n+                    for s in s.split_whitespace() {\n                         slot.push(s.to_string());\n                     }\n                     true\n@@ -431,7 +431,7 @@ macro_rules! options {\n                       -> bool {\n             match v {\n                 Some(s) => {\n-                    let v = s.words().map(|s| s.to_string()).collect();\n+                    let v = s.split_whitespace().map(|s| s.to_string()).collect();\n                     *slot = Some(v);\n                     true\n                 },"}, {"sha": "edfa8db311f358d7da8bd1ab0c4a38545b9478eb", "filename": "src/librustc_unicode/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c361e13d7155552cb6e45da5016cea36f87ecfec/src%2Flibrustc_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c361e13d7155552cb6e45da5016cea36f87ecfec/src%2Flibrustc_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Flib.rs?ref=c361e13d7155552cb6e45da5016cea36f87ecfec", "patch": "@@ -45,7 +45,7 @@ mod u_str;\n pub mod char;\n \n pub mod str {\n-    pub use u_str::{UnicodeStr, Words, Graphemes, GraphemeIndices};\n+    pub use u_str::{UnicodeStr, SplitWhitespace, Words, Graphemes, GraphemeIndices};\n     pub use u_str::{utf8_char_width, is_utf16, Utf16Items, Utf16Item};\n     pub use u_str::{utf16_items, Utf16Encoder};\n }"}, {"sha": "898844e3bf12ba71db877cdf10c8401bc9d9f165", "filename": "src/librustc_unicode/u_str.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c361e13d7155552cb6e45da5016cea36f87ecfec/src%2Flibrustc_unicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c361e13d7155552cb6e45da5016cea36f87ecfec/src%2Flibrustc_unicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fu_str.rs?ref=c361e13d7155552cb6e45da5016cea36f87ecfec", "patch": "@@ -25,10 +25,16 @@ use core::str::Split;\n \n use tables::grapheme::GraphemeCat;\n \n-/// An iterator over the words of a string, separated by a sequence of whitespace\n+#[deprecated(reason = \"struct Words is being replaced by struct SplitWhitespace\",\n+             since = \"1.1.0\")]\n #[unstable(feature = \"str_words\",\n            reason = \"words() will be replaced by split_whitespace() in 1.1.0\")]\n-pub struct Words<'a> {\n+pub type Words<'a> = SplitWhitespace<'a>;\n+\n+/// An iterator over the non-whitespace substrings of a string,\n+/// separated by any amount of whitespace.\n+#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n+pub struct SplitWhitespace<'a> {\n     inner: Filter<Split<'a, fn(char) -> bool>, fn(&&str) -> bool>,\n }\n \n@@ -37,7 +43,9 @@ pub struct Words<'a> {\n pub trait UnicodeStr {\n     fn graphemes<'a>(&'a self, is_extended: bool) -> Graphemes<'a>;\n     fn grapheme_indices<'a>(&'a self, is_extended: bool) -> GraphemeIndices<'a>;\n+    #[allow(deprecated)]\n     fn words<'a>(&'a self) -> Words<'a>;\n+    fn split_whitespace<'a>(&'a self) -> SplitWhitespace<'a>;\n     fn is_whitespace(&self) -> bool;\n     fn is_alphanumeric(&self) -> bool;\n     fn width(&self, is_cjk: bool) -> usize;\n@@ -57,15 +65,21 @@ impl UnicodeStr for str {\n         GraphemeIndices { start_offset: self.as_ptr() as usize, iter: self.graphemes(is_extended) }\n     }\n \n+    #[allow(deprecated)]\n     #[inline]\n     fn words(&self) -> Words {\n+        self.split_whitespace()\n+    }\n+\n+    #[inline]\n+    fn split_whitespace(&self) -> SplitWhitespace {\n         fn is_not_empty(s: &&str) -> bool { !s.is_empty() }\n         let is_not_empty: fn(&&str) -> bool = is_not_empty; // coerce to fn pointer\n \n         fn is_whitespace(c: char) -> bool { c.is_whitespace() }\n         let is_whitespace: fn(char) -> bool = is_whitespace; // coerce to fn pointer\n \n-        Words { inner: self.split(is_whitespace).filter(is_not_empty) }\n+        SplitWhitespace { inner: self.split(is_whitespace).filter(is_not_empty) }\n     }\n \n     #[inline]\n@@ -546,11 +560,11 @@ impl<I> Iterator for Utf16Encoder<I> where I: Iterator<Item=char> {\n     }\n }\n \n-impl<'a> Iterator for Words<'a> {\n+impl<'a> Iterator for SplitWhitespace<'a> {\n     type Item = &'a str;\n \n     fn next(&mut self) -> Option<&'a str> { self.inner.next() }\n }\n-impl<'a> DoubleEndedIterator for Words<'a> {\n+impl<'a> DoubleEndedIterator for SplitWhitespace<'a> {\n     fn next_back(&mut self) -> Option<&'a str> { self.inner.next_back() }\n }"}, {"sha": "17053e4f10ad37760d967c79bfb77676b00d8884", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c361e13d7155552cb6e45da5016cea36f87ecfec/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c361e13d7155552cb6e45da5016cea36f87ecfec/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=c361e13d7155552cb6e45da5016cea36f87ecfec", "patch": "@@ -274,7 +274,7 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n         };\n \n         // Transform the contents of the header into a hyphenated string\n-        let id = s.words().map(|s| s.to_ascii_lowercase())\n+        let id = s.split_whitespace().map(|s| s.to_ascii_lowercase())\n             .collect::<Vec<String>>().connect(\"-\");\n \n         // This is a terrible hack working around how hoedown gives us rendered"}, {"sha": "9c393d6f897372531de74158e42e40d56f4251a9", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c361e13d7155552cb6e45da5016cea36f87ecfec/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c361e13d7155552cb6e45da5016cea36f87ecfec/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=c361e13d7155552cb6e45da5016cea36f87ecfec", "patch": "@@ -31,7 +31,6 @@\n #![feature(std_misc)]\n #![feature(test)]\n #![feature(unicode)]\n-#![feature(str_words)]\n #![feature(path_ext)]\n #![feature(path_relative_from)]\n #![feature(slice_patterns)]\n@@ -240,7 +239,7 @@ pub fn main_args(args: &[String]) -> isize {\n \n     let test_args = matches.opt_strs(\"test-args\");\n     let test_args: Vec<String> = test_args.iter()\n-                                          .flat_map(|s| s.words())\n+                                          .flat_map(|s| s.split_whitespace())\n                                           .map(|s| s.to_string())\n                                           .collect();\n \n@@ -404,13 +403,13 @@ fn rust_input(cratefile: &str, externs: core::Externs, matches: &getopts::Matche\n                     }\n                     clean::NameValue(ref x, ref value)\n                             if \"passes\" == *x => {\n-                        for pass in value.words() {\n+                        for pass in value.split_whitespace() {\n                             passes.push(pass.to_string());\n                         }\n                     }\n                     clean::NameValue(ref x, ref value)\n                             if \"plugins\" == *x => {\n-                        for p in value.words() {\n+                        for p in value.split_whitespace() {\n                             plugins.push(p.to_string());\n                         }\n                     }"}, {"sha": "15f229dbca5d908869512b48cee4d9b62561c781", "filename": "src/test/run-pass/drop-with-type-ascription-1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c361e13d7155552cb6e45da5016cea36f87ecfec/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c361e13d7155552cb6e45da5016cea36f87ecfec/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-1.rs?ref=c361e13d7155552cb6e45da5016cea36f87ecfec", "patch": "@@ -9,11 +9,9 @@\n // except according to those terms.\n \n \n-#![feature(str_words)]\n-\n fn main() {\n     let foo = \"hello\".to_string();\n-    let foo: Vec<&str> = foo.words().collect();\n+    let foo: Vec<&str> = foo.split_whitespace().collect();\n     let invalid_string = &foo[0];\n     assert_eq!(*invalid_string, \"hello\");\n }"}]}