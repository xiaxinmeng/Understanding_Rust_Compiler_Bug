{"sha": "1c927d2f8efdf8488d319b335db70b120dc11c37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjOTI3ZDJmOGVmZGY4NDg4ZDMxOWIzMzVkYjcwYjEyMGRjMTFjMzc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-12T14:42:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-12T14:42:01Z"}, "message": "Merge #8802\n\n8802: Keep comments and attrs when extracting struct from enum variant r=Veykril a=DropDemBits\n\nFixes #6730\r\n\r\nStill unsure if existing visibilities of fields should be forced to pub (which is what was previously done), or if it's okay to keep it in the extracted struct.\n\nCo-authored-by: DropDemBits <r3usrlnd@gmail.com>", "tree": {"sha": "83ae632b7b554ce1f9caadb149538ecb8b02b764", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83ae632b7b554ce1f9caadb149538ecb8b02b764"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c927d2f8efdf8488d319b335db70b120dc11c37", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgm+k5CRBK7hj4Ov3rIwAAQS8IAKNQT5w17qTI6rBfvCDxZWxL\nlsqGaeAKkKd4U6jJJDqWf1JjXj4bOzzyLTuJf+jejXIKC9pIvMak7xlAOTV3w1is\nWzmJdcIZEJi4JYUYEPlQoVVKn70NmXuLD1bdyI9uwNwMD79/nh9rDX2Hw1XQcGXj\nXjOap6lKlhD6MjoDQPAw+gYGtChGRcLFtCoWRuC/IgRb7c+CAJzrxh01A46vEAbu\ndtHWBTSFrYQK51/ZwO7OEUqUW5k9Ms48tgkMX+eKxpGuWbzicjaLZRt3hZcTm1kd\nvCHtJURvCuz8edPpHjC+kKMLQhOHdlx/c4plIrYIL8GtfvKFw4NKcJRAFmt4Z00=\n=2e6/\n-----END PGP SIGNATURE-----\n", "payload": "tree 83ae632b7b554ce1f9caadb149538ecb8b02b764\nparent a5b55828365b602f0ed117c9f1cc2a9eddd42512\nparent 7fefac4bdc5a08cee6b682e7def921f6b8c1384c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1620830521 +0000\ncommitter GitHub <noreply@github.com> 1620830521 +0000\n\nMerge #8802\n\n8802: Keep comments and attrs when extracting struct from enum variant r=Veykril a=DropDemBits\n\nFixes #6730\r\n\r\nStill unsure if existing visibilities of fields should be forced to pub (which is what was previously done), or if it's okay to keep it in the extracted struct.\n\nCo-authored-by: DropDemBits <r3usrlnd@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c927d2f8efdf8488d319b335db70b120dc11c37", "html_url": "https://github.com/rust-lang/rust/commit/1c927d2f8efdf8488d319b335db70b120dc11c37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c927d2f8efdf8488d319b335db70b120dc11c37/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5b55828365b602f0ed117c9f1cc2a9eddd42512", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5b55828365b602f0ed117c9f1cc2a9eddd42512", "html_url": "https://github.com/rust-lang/rust/commit/a5b55828365b602f0ed117c9f1cc2a9eddd42512"}, {"sha": "7fefac4bdc5a08cee6b682e7def921f6b8c1384c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fefac4bdc5a08cee6b682e7def921f6b8c1384c", "html_url": "https://github.com/rust-lang/rust/commit/7fefac4bdc5a08cee6b682e7def921f6b8c1384c"}], "stats": {"total": 135, "additions": 126, "deletions": 9}, "files": [{"sha": "8e2178391946ad1787f1992914c3036d7fbb2167", "filename": "crates/ide_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 126, "deletions": 9, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/1c927d2f8efdf8488d319b335db70b120dc11c37/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c927d2f8efdf8488d319b335db70b120dc11c37/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=1c927d2f8efdf8488d319b335db70b120dc11c37", "patch": "@@ -151,20 +151,37 @@ fn create_struct_def(\n     field_list: &Either<ast::RecordFieldList, ast::TupleFieldList>,\n     visibility: Option<ast::Visibility>,\n ) -> ast::Struct {\n-    let pub_vis = Some(make::visibility_pub());\n+    let pub_vis = make::visibility_pub();\n+\n+    let insert_pub = |node: &'_ SyntaxNode| {\n+        let pub_vis = pub_vis.clone_for_update();\n+        ted::insert(ted::Position::before(node), pub_vis.syntax());\n+    };\n+\n+    // for fields without any existing visibility, use pub visibility\n     let field_list = match field_list {\n         Either::Left(field_list) => {\n-            make::record_field_list(field_list.fields().flat_map(|field| {\n-                Some(make::record_field(pub_vis.clone(), field.name()?, field.ty()?))\n-            }))\n-            .into()\n+            let field_list = field_list.clone_for_update();\n+\n+            field_list\n+                .fields()\n+                .filter(|field| field.visibility().is_none())\n+                .filter_map(|field| field.name())\n+                .for_each(|it| insert_pub(it.syntax()));\n+\n+            field_list.into()\n         }\n-        Either::Right(field_list) => make::tuple_field_list(\n+        Either::Right(field_list) => {\n+            let field_list = field_list.clone_for_update();\n+\n             field_list\n                 .fields()\n-                .flat_map(|field| Some(make::tuple_field(pub_vis.clone(), field.ty()?))),\n-        )\n-        .into(),\n+                .filter(|field| field.visibility().is_none())\n+                .filter_map(|field| field.ty())\n+                .for_each(|it| insert_pub(it.syntax()));\n+\n+            field_list.into()\n+        }\n     };\n \n     make::struct_(visibility, variant_name, None, field_list).clone_for_update()\n@@ -290,6 +307,106 @@ enum A { One(One) }\"#,\n             \"enum A { $0One { foo: u32 } }\",\n             r#\"struct One{ pub foo: u32 }\n \n+enum A { One(One) }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_struct_keep_comments_and_attrs_one_field_named() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            r#\"\n+enum A {\n+    $0One {\n+        // leading comment\n+        /// doc comment\n+        #[an_attr]\n+        foo: u32\n+        // trailing comment\n+    }\n+}\"#,\n+            r#\"\n+struct One{\n+        // leading comment\n+        /// doc comment\n+        #[an_attr]\n+        pub foo: u32\n+        // trailing comment\n+    }\n+\n+enum A {\n+    One(One)\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_struct_keep_comments_and_attrs_several_fields_named() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            r#\"\n+enum A {\n+    $0One {\n+        // comment\n+        /// doc\n+        #[attr]\n+        foo: u32,\n+        // comment\n+        #[attr]\n+        /// doc\n+        bar: u32\n+    }\n+}\"#,\n+            r#\"\n+struct One{\n+        // comment\n+        /// doc\n+        #[attr]\n+        pub foo: u32,\n+        // comment\n+        #[attr]\n+        /// doc\n+        pub bar: u32\n+    }\n+\n+enum A {\n+    One(One)\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_struct_keep_comments_and_attrs_several_fields_tuple() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            \"enum A { $0One(/* comment */ #[attr] u32, /* another */ u32 /* tail */) }\",\n+            r#\"\n+struct One(/* comment */ #[attr] pub u32, /* another */ pub u32 /* tail */);\n+\n+enum A { One(One) }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_struct_keep_existing_visibility_named() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            \"enum A { $0One{ pub a: u32, pub(crate) b: u32, pub(super) c: u32, d: u32 } }\",\n+            r#\"\n+struct One{ pub a: u32, pub(crate) b: u32, pub(super) c: u32, pub d: u32 }\n+\n+enum A { One(One) }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_struct_keep_existing_visibility_tuple() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            \"enum A { $0One(pub u32, pub(crate) u32, pub(super) u32, u32) }\",\n+            r#\"\n+struct One(pub u32, pub(crate) u32, pub(super) u32, pub u32);\n+\n enum A { One(One) }\"#,\n         );\n     }"}]}