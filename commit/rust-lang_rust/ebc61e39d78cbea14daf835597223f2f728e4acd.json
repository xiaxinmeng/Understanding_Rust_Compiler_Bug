{"sha": "ebc61e39d78cbea14daf835597223f2f728e4acd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViYzYxZTM5ZDc4Y2JlYTE0ZGFmODM1NTk3MjIzZjJmNzI4ZTRhY2Q=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-21T03:34:04Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-21T03:34:04Z"}, "message": "Remove temporary fn# syntax", "tree": {"sha": "ce6cbd13b788d5eeec798b743ed5460f54e4a502", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce6cbd13b788d5eeec798b743ed5460f54e4a502"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebc61e39d78cbea14daf835597223f2f728e4acd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebc61e39d78cbea14daf835597223f2f728e4acd", "html_url": "https://github.com/rust-lang/rust/commit/ebc61e39d78cbea14daf835597223f2f728e4acd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebc61e39d78cbea14daf835597223f2f728e4acd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fb9d4f83b9ccbfc84ec04b86da27a58f8789db3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fb9d4f83b9ccbfc84ec04b86da27a58f8789db3", "html_url": "https://github.com/rust-lang/rust/commit/6fb9d4f83b9ccbfc84ec04b86da27a58f8789db3"}], "stats": {"total": 233, "additions": 111, "deletions": 122}, "files": [{"sha": "dbf60316668113ed315bb25c615add8d9e056b81", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -2135,20 +2135,12 @@ fn parse_auth(p: parser) -> ast::_auth {\n     } else { unexpected(p, p.peek()); }\n }\n \n-fn parse_fn_item_proto(p: parser) -> ast::proto {\n-    if p.peek() == token::POUND {\n-        p.bump();\n-        ast::proto_bare\n-    } else {\n-        ast::proto_bare\n-    }\n+fn parse_fn_item_proto(_p: parser) -> ast::proto {\n+    ast::proto_bare\n }\n \n fn parse_fn_ty_proto(p: parser) -> ast::proto {\n-    if p.peek() == token::POUND {\n-        p.bump();\n-        ast::proto_bare\n-    } else if p.peek() == token::AT {\n+    if p.peek() == token::AT {\n         p.bump();\n         ast::proto_shared(ast::sugar_normal)\n     } else {\n@@ -2157,10 +2149,7 @@ fn parse_fn_ty_proto(p: parser) -> ast::proto {\n }\n \n fn parse_fn_anon_proto(p: parser) -> ast::proto {\n-    if p.peek() == token::POUND {\n-        p.bump();\n-        ast::proto_bare\n-    } else if p.peek() == token::AT {\n+    if p.peek() == token::AT {\n         p.bump();\n         ast::proto_shared(ast::sugar_normal)\n     } else {"}, {"sha": "aa77febd228875db0b9a98ada6fb85da88a7d17e", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -195,7 +195,7 @@ fn closure_to_task(cx: cx, configport: port<[u8]>, testfn: fn@()) ->\n         (cx.config, cx.procsrv.chan, testfile), run_test_task);\n }\n \n-fn# run_test_task(args: (common::config, procsrv::reqchan, [u8])) {\n+fn run_test_task(args: (common::config, procsrv::reqchan, [u8])) {\n \n     let (config, procsrv_chan, testfile) = args;\n "}, {"sha": "5caf9f7d57a110c21a0470bc3a2c1d4723aac0ed", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -39,7 +39,7 @@ fn mk() -> handle {\n     let setupport = port();\n     let task = task::spawn_joinable(\n         chan(setupport),\n-        fn# (setupchan: chan<chan<request>>) {\n+        fn (setupchan: chan<chan<request>>) {\n             let reqport = port();\n             let reqchan = chan(reqport);\n             send(setupchan, reqchan);"}, {"sha": "162090af0d76ae1108ccab967db92ff555ea4158", "filename": "src/lib/aio.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Flib%2Faio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Flib%2Faio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Faio.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -49,7 +49,7 @@ fn ip_to_sbuf(ip: net::ip_addr) -> *u8 unsafe {\n     vec::to_ptr(str::bytes(net::format_addr(ip)))\n }\n \n-fn# connect_task(args: (net::ip_addr, int, chan<socket_event>)) {\n+fn connect_task(args: (net::ip_addr, int, chan<socket_event>)) {\n     let (ip, portnum, evt) = args;\n     let connecter = port();\n     rustrt::aio_connect(ip_to_sbuf(ip), portnum, chan(connecter));\n@@ -84,7 +84,7 @@ fn new_client(client: client, evt: chan<socket_event>) {\n     log \"close message sent\";\n }\n \n-fn# accept_task(args: (client, chan<server_event>)) {\n+fn accept_task(args: (client, chan<server_event>)) {\n     let (client, events) = args;\n     log \"accept task was spawned\";\n     let p = port();\n@@ -94,7 +94,7 @@ fn# accept_task(args: (client, chan<server_event>)) {\n     log \"done accepting\";\n }\n \n-fn# server_task(args: (net::ip_addr, int, chan<server_event>,\n+fn server_task(args: (net::ip_addr, int, chan<server_event>,\n                        chan<server>)) {\n     let (ip, portnum, events, server) = args;\n     let accepter = port();\n@@ -111,7 +111,7 @@ fn# server_task(args: (net::ip_addr, int, chan<server_event>,\n     }\n }\n \n-fn# request_task(c: chan<ctx>) {\n+fn request_task(c: chan<ctx>) {\n     // Create a port to accept IO requests on\n     let p = port();\n     // Hand of its channel to our spawner\n@@ -150,7 +150,7 @@ fn# request_task(c: chan<ctx>) {\n     }\n }\n \n-fn# iotask(c: chan<ctx>) {\n+fn iotask(c: chan<ctx>) {\n     log \"io task spawned\";\n     // Initialize before accepting requests\n     rustrt::aio_init();"}, {"sha": "ac56a1f6034afc59439d9f2752f6dc538907e5ba", "filename": "src/lib/task.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -93,16 +93,16 @@ fn unpin() { rustrt::unpin_task(); }\n \n fn set_min_stack(stack_size: uint) { rustrt::set_min_stack(stack_size); }\n \n-fn spawn<~T>(-data: T, f: fn#(T)) -> task {\n+fn spawn<~T>(-data: T, f: fn(T)) -> task {\n     spawn_inner2(data, f, none)\n }\n \n-fn spawn_notify<~T>(-data: T, f: fn#(T),\n+fn spawn_notify<~T>(-data: T, f: fn(T),\n                          notify: comm::chan<task_notification>) -> task {\n     spawn_inner2(data, f, some(notify))\n }\n \n-fn spawn_joinable<~T>(-data: T, f: fn#(T)) -> joinable_task {\n+fn spawn_joinable<~T>(-data: T, f: fn(T)) -> joinable_task {\n     let p = comm::port::<task_notification>();\n     let id = spawn_notify(data, f, comm::chan::<task_notification>(p));\n     ret (id, p);\n@@ -118,11 +118,11 @@ fn spawn_joinable<~T>(-data: T, f: fn#(T)) -> joinable_task {\n //\n // After the transition this should all be rewritten.\n \n-fn spawn_inner2<~T>(-data: T, f: fn#(T),\n+fn spawn_inner2<~T>(-data: T, f: fn(T),\n                     notify: option<comm::chan<task_notification>>)\n     -> task_id {\n \n-    fn wrapper<~T>(-data: *u8, f: fn#(T)) {\n+    fn wrapper<~T>(-data: *u8, f: fn(T)) {\n         let data: ~T = unsafe::reinterpret_cast(data);\n         f(*data);\n     }"}, {"sha": "9ef9391933dcc0aa8341f7aa869853175aea051c", "filename": "src/lib/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Flib%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Flib%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftest.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -43,7 +43,7 @@ type test_name = str;\n // to support isolation of tests into tasks.\n type test_fn<@T> = T;\n \n-type default_test_fn = test_fn<fn#()>;\n+type default_test_fn = test_fn<fn()>;\n \n // The definition of a single test. A test runner will run a list of\n // these.\n@@ -321,7 +321,7 @@ fn run_test<@T>(test: test_desc<T>,\n // We need to run our tests in another task in order to trap test failures.\n // This function only works with functions that don't contain closures.\n fn default_test_to_task(&&f: default_test_fn) -> joinable {\n-    fn# run_task(f: default_test_fn) {\n+    fn run_task(f: default_test_fn) {\n         configure_test_task();\n         f();\n     }"}, {"sha": "f3bede8320da7b20679372548a677c0276f4f8a4", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -27,7 +27,7 @@ import std::comm::send;\n import std::comm::recv;\n \n fn fib(n: int) -> int {\n-    fn# pfib(args: (chan<int>, int)) {\n+    fn pfib(args: (chan<int>, int)) {\n         let (c, n) = args;\n         if n == 0 {\n             send(c, 0);\n@@ -62,7 +62,7 @@ fn parse_opts(argv: [str]) -> config {\n     }\n }\n \n-fn# stress_task(&&id: int) {\n+fn stress_task(&&id: int) {\n     let i = 0;\n     while true {\n         let n = 15;"}, {"sha": "8e12bc7edee670bafb0a1f73115977ec8cc5ea62", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -4,15 +4,15 @@ import std::task;\n import std::uint;\n import std::str;\n \n-fn# f(&&n: uint) {\n+fn f(&&n: uint) {\n     let i = 0u;\n     while i < n {\n         task::join(task::spawn_joinable((), g));\n         i += 1u;\n     }\n }\n \n-fn# g(&&_i: ()) { }\n+fn g(&&_i: ()) { }\n \n fn main(args: [str]) {\n     let n ="}, {"sha": "1c07618284d3df85cddeb86845a00356e70dd8a1", "filename": "src/test/bench/task-perf-vector-party.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -9,7 +9,7 @@ import std::uint;\n import std::str;\n import std::task;\n \n-fn# f(&&n: uint) {\n+fn f(&&n: uint) {\n     for each i in uint::range(0u, n) {\n         let v: [u8] = [];\n         vec::reserve(v, 1000u);"}, {"sha": "f988c931deef97fd236f48d5967c51ac36dd0181", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -75,7 +75,7 @@ mod map_reduce {\n         ret tasks;\n     }\n \n-    fn# map_task(args: (chan<ctrl_proto>, str)) {\n+    fn map_task(args: (chan<ctrl_proto>, str)) {\n         let (ctrl, input) = args;\n         // log_err \"map_task \" + input;\n         let intermediates = map::new_str_hash();\n@@ -108,7 +108,7 @@ mod map_reduce {\n         send(ctrl, mapper_done);\n     }\n \n-    fn# reduce_task(args: (str, chan<chan<reduce_proto>>)) {\n+    fn reduce_task(args: (str, chan<chan<reduce_proto>>)) {\n         let (key, out) = args;\n         let p = port();\n "}, {"sha": "1635a91c14f7229d2dfe2ae4af5377a74cb80073", "filename": "src/test/compile-fail/fn-bare-bind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Fcompile-fail%2Ffn-bare-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Fcompile-fail%2Ffn-bare-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-bare-bind.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -1,9 +1,9 @@\n // error-pattern:mismatched types: expected fn() but found fn@()\n \n-fn# f() {\n+fn f() {\n }\n \n fn main() {\n     // Can't produce a bare function by binding\n-    let g: fn#() = bind f();\n+    let g: fn() = bind f();\n }\n\\ No newline at end of file"}, {"sha": "6d610288c38bf8032d43f9e0093494a05e668bb3", "filename": "src/test/compile-fail/fn-bare-generic-instantiate1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Fcompile-fail%2Ffn-bare-generic-instantiate1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Fcompile-fail%2Ffn-bare-generic-instantiate1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-bare-generic-instantiate1.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -2,9 +2,9 @@\n // Issue #1038\n \n fn main() {\n-    fn# foo<T>() { }\n+    fn foo<T>() { }\n \n     // This wants to build a closure over type int,\n     // but there's no way to do that while still being a bare function\n-    let f: fn#() = foo::<int>;\n+    let f: fn() = foo::<int>;\n }\n\\ No newline at end of file"}, {"sha": "e9e21af1480884ed5ce7622eed8398a6b5359323", "filename": "src/test/compile-fail/fn-bare-generic-instantiate2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Fcompile-fail%2Ffn-bare-generic-instantiate2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Fcompile-fail%2Ffn-bare-generic-instantiate2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-bare-generic-instantiate2.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -2,12 +2,12 @@\n // Issue #1038\n \n fn main() {\n-    fn# foo<T>(i: T) { }\n+    fn foo<T>(i: T) { }\n \n     // This wants to build a closure over type int,\n     // but there's no way to do that while still being a bare function\n     f(foo);\n }\n \n-fn f(i: fn#(&&int)) {\n+fn f(i: fn(&&int)) {\n }\n\\ No newline at end of file"}, {"sha": "ef7cf1d8cc0ea816b4329c40c487209004a19265", "filename": "src/test/compile-fail/spawn-non-nil-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -3,6 +3,6 @@\n use std;\n import std::task;\n \n-fn# f(&&x: int) -> int { ret x; }\n+fn f(&&x: int) -> int { ret x; }\n \n fn main() { task::spawn(10, f); }"}, {"sha": "d11dc4147ef7afdf66338ef3b054c880a0da263a", "filename": "src/test/run-fail/linked-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -6,7 +6,7 @@ import std::task;\n import std::comm::port;\n import std::comm::recv;\n \n-fn# child(&&_i: ()) { assert (1 == 2); }\n+fn child(&&_i: ()) { assert (1 == 2); }\n \n fn main() {\n     let p = port::<int>();"}, {"sha": "1bdea315151f2e313c52da5450c90b488056690c", "filename": "src/test/run-fail/linked-failure2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-fail%2Flinked-failure2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-fail%2Flinked-failure2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure2.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -7,7 +7,7 @@ import std::comm::chan;\n import std::comm::port;\n import std::comm::recv;\n \n-fn# child(&&_i: ()) { fail; }\n+fn child(&&_i: ()) { fail; }\n \n fn main() {\n     let p = port::<int>();"}, {"sha": "608356974089b44a1dce25f8adebec1a369a484b", "filename": "src/test/run-fail/linked-failure3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-fail%2Flinked-failure3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-fail%2Flinked-failure3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure3.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -6,9 +6,9 @@ import std::task;\n import std::comm::port;\n import std::comm::recv;\n \n-fn# grandchild(&&_i: ()) { fail; }\n+fn grandchild(&&_i: ()) { fail; }\n \n-fn# child(&&_i: ()) {\n+fn child(&&_i: ()) {\n     let p = port::<int>();\n     task::spawn((), grandchild);\n     let x = recv(p);"}, {"sha": "c79fa33cf731945fedb9ea0bb76ad46d1aa0940f", "filename": "src/test/run-fail/task-comm-recv-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -4,7 +4,7 @@ use std;\n import std::task;\n import std::comm;\n \n-fn# goodfail(&&_i: ()) {\n+fn goodfail(&&_i: ()) {\n     task::yield();\n     fail \"goodfail\";\n }"}, {"sha": "9705e902d6acdabe11ea6517e13e91ec6887cc96", "filename": "src/test/run-pass/basic-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-1.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -7,7 +7,7 @@ import std::comm::send;\n import std::comm::recv;\n import std::task;\n \n-fn# a(c: chan<int>) { send(c, 10); }\n+fn a(c: chan<int>) { send(c, 10); }\n \n fn main() {\n     let p = port();"}, {"sha": "228c4f96dbb6883b3cb70fdd27ad051bfce6bbcb", "filename": "src/test/run-pass/basic-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-2.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -7,7 +7,7 @@ import std::comm::chan;\n import std::comm::recv;\n import std::task;\n \n-fn# a(c: chan<int>) { log \"task a0\"; log \"task a1\"; send(c, 10); }\n+fn a(c: chan<int>) { log \"task a0\"; log \"task a1\"; send(c, 10); }\n \n fn main() {\n     let p = comm::port();\n@@ -19,7 +19,7 @@ fn main() {\n     log \"Finished.\";\n }\n \n-fn# b(c: chan<int>) {\n+fn b(c: chan<int>) {\n     log \"task b0\";\n     log \"task b1\";\n     log \"task b2\";"}, {"sha": "2547b48f8a5b0aad271de615383f9b4bc90e12ae", "filename": "src/test/run-pass/basic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -7,7 +7,7 @@ import std::comm::chan;\n import std::comm::recv;\n import std::task;\n \n-fn# a(c: chan<int>) {\n+fn a(c: chan<int>) {\n     if true {\n         log \"task a\";\n         log \"task a\";\n@@ -37,7 +37,7 @@ fn main() {\n     log \"children finished, root finishing\";\n }\n \n-fn# b(c: chan<int>) {\n+fn b(c: chan<int>) {\n     if true {\n         log \"task b\";\n         log \"task b\";"}, {"sha": "0a76fbe62b9c2fc2f27a1f3de0b7439b6f7e8f6e", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -87,7 +87,7 @@ fn test_ptr() {\n }\n \n fn test_task() {\n-    fn# f(&&_i: ()) { }\n+    fn f(&&_i: ()) { }\n     let f1 = f, f2 = f;\n     let t1 = task::spawn((), f1);\n     let t2 = task::spawn((), f2);"}, {"sha": "b623098627203fef98fc26a9f1ea6094bd60faa2", "filename": "src/test/run-pass/chan-leak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchan-leak.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -12,7 +12,7 @@ tag request { quit; close(chan<bool>); }\n \n type ctx = chan<request>;\n \n-fn# request_task(c: chan<ctx>) {\n+fn request_task(c: chan<ctx>) {\n     let p = port();\n     send(c, chan(p));\n     let req: request;"}, {"sha": "95c70bc7a7b255ebda942dcbef726329af899940", "filename": "src/test/run-pass/child-outlives-parent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -3,6 +3,6 @@\n use std;\n import std::task;\n \n-fn# child2(&&s: str) { }\n+fn child2(&&s: str) { }\n \n fn main() { let x = task::spawn(\"hi\", child2); }"}, {"sha": "2de0d0e4c90fc8595b4d16a20e8f560f16a593c2", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -16,7 +16,7 @@ fn main() {\n     assert (y == 10);\n }\n \n-fn# child(c: chan<int>) {\n+fn child(c: chan<int>) {\n     log_err \"sending\";\n     send(c, 10);\n     log_err \"value sent\""}, {"sha": "f83e145ac38c4369c26e5019d6194bf97f5eeaad", "filename": "src/test/run-pass/fn-bare-anon-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ffn-bare-anon-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ffn-bare-anon-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-anon-2.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    let f: fn#() = fn# () {\n+    let f: fn() = fn () {\n         log \"This is a bare function\"\n     };\n     let g;"}, {"sha": "8c56f937aee592da6632e05beeadca36ed7c2392", "filename": "src/test/run-pass/fn-bare-anon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ffn-bare-anon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ffn-bare-anon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-anon.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    let f: fn#() = fn# () {\n+    let f: fn() = fn () {\n         log \"This is a bare function\"\n     };\n     f();"}, {"sha": "ce821cbadf4cfdb675dcdd1f7ff5cd77b008e7fb", "filename": "src/test/run-pass/fn-bare-assign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -1,9 +1,9 @@\n-fn# f(i: int, &called: bool) {\n+fn f(i: int, &called: bool) {\n     assert i == 10;\n     called = true;\n }\n \n-fn# g(f: fn#(int, &bool), &called: bool) {\n+fn g(f: fn(int, &bool), &called: bool) {\n     f(10, called);\n }\n "}, {"sha": "58b28df63ae897b02e43f3b01103543d58e44943", "filename": "src/test/run-pass/fn-bare-bind-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ffn-bare-bind-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ffn-bare-bind-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-bind-generic.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -1,4 +1,4 @@\n-fn# f<T>(i: T, j: T, k: T) {\n+fn f<T>(i: T, j: T, k: T) {\n     assert i == j;\n     assert j != k;\n }"}, {"sha": "064e6430f8ad31a88cd0efd7a10c86d1a121650a", "filename": "src/test/run-pass/fn-bare-bind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ffn-bare-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ffn-bare-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-bind.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -1,4 +1,4 @@\n-fn# f(i: int) {\n+fn f(i: int) {\n     assert i == 10;\n }\n "}, {"sha": "9da242f572f4af39d6c3ba1f026acb0057558fee", "filename": "src/test/run-pass/fn-bare-coerce-to-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-block.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -1,4 +1,4 @@\n-fn# bare() {}\n+fn bare() {}\n \n fn likes_block(f: block()) { f() }\n "}, {"sha": "7e0cb1551b28ca3506135c962e7df5a2696a7ea0", "filename": "src/test/run-pass/fn-bare-coerce-to-shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-shared.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -1,4 +1,4 @@\n-fn# bare() {}\n+fn bare() {}\n \n fn likes_shared(f: fn@()) { f() }\n "}, {"sha": "24a4a48eea625ebc12e7329ff8feeb0f9318f65f", "filename": "src/test/run-pass/fn-bare-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ffn-bare-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ffn-bare-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-item.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -1,4 +1,4 @@\n-fn# f() {\n+fn f() {\n     log \"This is a bare function\";\n }\n "}, {"sha": "d575758fd62f316305ab1659e544771c75e53f2b", "filename": "src/test/run-pass/fn-bare-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ffn-bare-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ffn-bare-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-size.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -4,6 +4,6 @@ use std;\n \n fn main() {\n     // Bare functions should just be a pointer\n-    assert std::sys::rustrt::size_of::<fn#()>() ==\n+    assert std::sys::rustrt::size_of::<fn()>() ==\n         std::sys::rustrt::size_of::<int>();\n }\n\\ No newline at end of file"}, {"sha": "f007d9471e241854a95b1d7aa80052c6414dbd39", "filename": "src/test/run-pass/fn-bare-spawn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -1,16 +1,16 @@\n // This is what the signature to spawn should look like with bare functions\n \n-fn spawn<~T>(val: T, f: fn#(T)) {\n+fn spawn<~T>(val: T, f: fn(T)) {\n     f(val);\n }\n \n-fn# f(&&i: int) {\n+fn f(&&i: int) {\n     assert i == 100;\n }\n \n fn main() {\n     spawn(100, f);\n-    spawn(100, fn#(&&i: int) {\n+    spawn(100, fn(&&i: int) {\n         assert i == 100;\n     });\n }\n\\ No newline at end of file"}, {"sha": "08a58046c33b725bcf74796495d98d2e3a1430dd", "filename": "src/test/run-pass/fn-coerce-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -3,5 +3,5 @@ type r = {\n };\n \n fn main() {\n-    let i: r = {field: fn#() { }};\n+    let i: r = {field: fn() { }};\n }\n\\ No newline at end of file"}, {"sha": "cb43371b3c68e69c6b72cdbf8faaddaf49c0edf9", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -36,7 +36,7 @@ mod map_reduce {\n         for i: str in inputs { task::spawn((ctrl, i), map_task); }\n     }\n \n-    fn# map_task(&&args: (chan<ctrl_proto>, str)) {\n+    fn map_task(&&args: (chan<ctrl_proto>, str)) {\n         let (ctrl, input) = args;\n \n         let intermediates = map::new_str_hash();"}, {"sha": "a1df60b4245a1f39626c824eac4d36ae14a1ea55", "filename": "src/test/run-pass/issue-506.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fissue-506.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fissue-506.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-506.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -9,6 +9,6 @@ native \"rust\" mod rustrt {\n     fn task_yield();\n }\n \n-fn# yield_wrap(&&_i: ()) unsafe { rustrt::task_yield(); }\n+fn yield_wrap(&&_i: ()) unsafe { rustrt::task_yield(); }\n \n fn main() { task::spawn((), yield_wrap); }"}, {"sha": "7f405141a7bf86664fa94d2cd1b057b2cfc6d45c", "filename": "src/test/run-pass/issue-507.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fissue-507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fissue-507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-507.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -15,9 +15,9 @@ import std::comm::send;\n import std::comm::port;\n import std::comm::recv;\n \n-fn# grandchild(c: chan<int>) { send(c, 42); }\n+fn grandchild(c: chan<int>) { send(c, 42); }\n \n-fn# child(c: chan<int>) {\n+fn child(c: chan<int>) {\n     let _grandchild = task::spawn_joinable(c, grandchild);\n     join(_grandchild);\n }"}, {"sha": "4827c428aa15d441ca1f565b0ac7ae5f9aba7083", "filename": "src/test/run-pass/issue-687.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fissue-687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fissue-687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-687.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -9,13 +9,13 @@ import std::comm::send;\n \n tag msg { closed; received([u8]); }\n \n-fn# producer(c: chan<[u8]>) {\n+fn producer(c: chan<[u8]>) {\n     send(c, [1u8, 2u8, 3u8, 4u8]);\n     let empty: [u8] = [];\n     send(c, empty);\n }\n \n-fn# packager(&&args: (chan<chan<[u8]>>, chan<msg>)) {\n+fn packager(&&args: (chan<chan<[u8]>>, chan<msg>)) {\n     let (cb, msg) = args;\n     let p: port<[u8]> = port();\n     send(cb, chan(p));"}, {"sha": "09bb40295eaf665443b0a8e02e6391811253ae32", "filename": "src/test/run-pass/ivec-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-tag.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -7,7 +7,7 @@ import std::comm::port;\n import std::comm::send;\n import std::comm::recv;\n \n-fn# producer(c: chan<[u8]>) {\n+fn producer(c: chan<[u8]>) {\n     send(c,\n          [1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8, 8u8, 9u8, 10u8, 11u8, 12u8,\n           13u8]);"}, {"sha": "bbbbcb8045b7718117788146c4cba5c142896f38", "filename": "src/test/run-pass/join.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fjoin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fjoin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fjoin.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -12,4 +12,4 @@ fn main() {\n     log_err \"3\";\n }\n \n-fn# child(&&_i: ()) { log_err \"2\"; }\n+fn child(&&_i: ()) { log_err \"2\"; }"}, {"sha": "3102a66a19216f7f47a3ee0cbaf9af8487e3ba4a", "filename": "src/test/run-pass/lazychan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Flazychan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Flazychan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazychan.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -21,4 +21,4 @@ fn main() {\n     assert (y == 10);\n }\n \n-fn# child(c: chan<int>) { send(c, 10); }\n+fn child(c: chan<int>) { send(c, 10); }"}, {"sha": "054218c283758d8c95c1a5f444526221c55524af", "filename": "src/test/run-pass/linked-failure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Flinked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Flinked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinked-failure.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -5,9 +5,9 @@ import std::task;\n import std::comm::port;\n import std::comm::recv;\n \n-fn# child(&&_i: ()) { assert (1 == 2); }\n+fn child(&&_i: ()) { assert (1 == 2); }\n \n-fn# parent(&&_i: ()) {\n+fn parent(&&_i: ()) {\n     // Since this task isn't supervised it won't bring down the whole\n     // process\n     task::unsupervise();"}, {"sha": "f92943161ececdb19a73cc11d4e49de199d5c262", "filename": "src/test/run-pass/lots-a-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flots-a-fail.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -4,11 +4,11 @@ import std::task;\n import std::comm;\n import std::uint;\n \n-fn# die(&&_i: ()) {\n+fn die(&&_i: ()) {\n     fail;\n }\n \n-fn# iloop(&&_i: ()) {\n+fn iloop(&&_i: ()) {\n     task::unsupervise();\n     task::spawn((), die);\n }"}, {"sha": "f344451e662e390f944c497f2e9367cdc166d9bb", "filename": "src/test/run-pass/many.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fmany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fmany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmany.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -4,7 +4,7 @@ use std;\n import std::task;\n import std::comm;\n \n-fn# sub(&&args: (comm::chan<int>, int)) {\n+fn sub(&&args: (comm::chan<int>, int)) {\n     let (parent, id) = args;\n     if id == 0 {\n         comm::send(parent, 0);"}, {"sha": "d280b256b8ef36bad4184aefd5257a7708b2c5b1", "filename": "src/test/run-pass/send-iloop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-iloop.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -4,11 +4,11 @@ import std::task;\n import std::comm;\n import std::uint;\n \n-fn# die(&&_i: ()) {\n+fn die(&&_i: ()) {\n     fail;\n }\n \n-fn# iloop(&&_i: ()) {\n+fn iloop(&&_i: ()) {\n     task::unsupervise();\n     task::spawn((), die);\n     let p = comm::port::<()>();"}, {"sha": "f77a5dc4d1d9a366f3df9a2881d96bf2d8029084", "filename": "src/test/run-pass/spawn-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-fn.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -4,7 +4,7 @@ use std;\n import std::task::yield;\n import std::task;\n \n-fn# x(&&args: (str, int)) {\n+fn x(&&args: (str, int)) {\n     let (s, n) = args;\n     log s; log n;\n }"}, {"sha": "f04a4f8d8c7d9d2794dc040551d0a162c8c7dfce", "filename": "src/test/run-pass/spawn-module-qualified.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fspawn-module-qualified.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fspawn-module-qualified.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-module-qualified.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -5,5 +5,5 @@ import std::task::spawn_joinable;\n fn main() { let x = spawn_joinable(10, m::child); join(x); }\n \n mod m {\n-    fn# child(&&i: int) { log i; }\n+    fn child(&&i: int) { log i; }\n }"}, {"sha": "70276916e897feea43f95c100d87500a1d66615b", "filename": "src/test/run-pass/spawn-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-types.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -12,7 +12,7 @@ import std::task;\n \n type ctx = comm::chan<int>;\n \n-fn# iotask(&&args: (ctx, str)) {\n+fn iotask(&&args: (ctx, str)) {\n     let (cx, ip) = args;\n     assert (str::eq(ip, \"localhost\"));\n }"}, {"sha": "ce15085ed5bfb089f685adc4d3b10248c56ebebc", "filename": "src/test/run-pass/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -6,7 +6,7 @@ import std::task;\n \n fn main() { let t = task::spawn_joinable(10, child); task::join(t); }\n \n-fn# child(&&i: int) { log_err i; assert (i == 10); }\n+fn child(&&i: int) { log_err i; assert (i == 10); }\n \n // Local Variables:\n // mode: rust;"}, {"sha": "6060d316f39b1328ce9389927cd7027cf004a044", "filename": "src/test/run-pass/spawn2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fspawn2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fspawn2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn2.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -5,7 +5,7 @@ import std::task::spawn;\n \n fn main() { spawn((10, 20, 30, 40, 50, 60, 70, 80, 90), child); }\n \n-fn# child(&&args: (int, int, int, int, int, int, int, int, int)) {\n+fn child(&&args: (int, int, int, int, int, int, int, int, int)) {\n     let (i1, i2, i3, i4, i5, i6, i7, i8, i9) = args;\n     log_err i1;\n     log_err i2;"}, {"sha": "e40f2c3d881e6347c7bb00d75be5083748f68062", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -7,7 +7,7 @@ import std::task;\n \n fn main() { test05(); }\n \n-fn# test05_start(ch : chan<int>) {\n+fn test05_start(ch : chan<int>) {\n     log_err ch;\n     send(ch, 10);\n     log_err \"sent 10\";"}, {"sha": "eb0e0819ed6e7fe6b5ad496c2435eea30f5f5153", "filename": "src/test/run-pass/task-comm-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -5,7 +5,7 @@ import std::task::join;\n \n fn main() { test00(); }\n \n-fn# start(&&_i: ()) { log \"Started / Finished task.\"; }\n+fn start(&&_i: ()) { log \"Started / Finished task.\"; }\n \n fn test00() {\n     let t = spawn_joinable((), start);"}, {"sha": "12146aff535980e2f4c29577640a26d658f08580", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -2,7 +2,7 @@ use std;\n import std::task;\n import std::comm;\n \n-fn# start(c: comm::chan<comm::chan<str>>) {\n+fn start(c: comm::chan<comm::chan<str>>) {\n     let p = comm::port();\n     comm::send(c, comm::chan(p));\n "}, {"sha": "218ab723144ea1fd399c57f0b5ac4424f44de5a5", "filename": "src/test/run-pass/task-comm-11.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -2,7 +2,7 @@ use std;\n import std::comm;\n import std::task;\n \n-fn# start(c: comm::chan<comm::chan<int>>) {\n+fn start(c: comm::chan<comm::chan<int>>) {\n     let p: comm::port<int> = comm::port();\n     comm::send(c, comm::chan(p));\n }"}, {"sha": "ca82b1614aea86e722cf69f6750c8947612ad196", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -3,7 +3,7 @@ import std::task;\n \n fn main() { test00(); }\n \n-fn# start(&&task_number: int) { log \"Started / Finished task.\"; }\n+fn start(&&task_number: int) { log \"Started / Finished task.\"; }\n \n fn test00() {\n     let i: int = 0;"}, {"sha": "d0f59698650b1e8ffcfcdcb234131b7cd029ce22", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -3,7 +3,7 @@ import std::task;\n import std::comm;\n import std::comm::send;\n \n-fn# start(&&args: (comm::chan<int>, int, int)) {\n+fn start(&&args: (comm::chan<int>, int, int)) {\n     let (c, start, number_of_messages) = args;\n     let i: int = 0;\n     while i < number_of_messages { send(c, start + i); i += 1; }"}, {"sha": "fda04fbe7fde95d8fc100040e2b9c6055504be96", "filename": "src/test/run-pass/task-comm-14.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -27,7 +27,7 @@ fn main() {\n     log \"main thread exiting\";\n }\n \n-fn# child(&&args: (int, comm::chan<int>)) {\n+fn child(&&args: (int, comm::chan<int>)) {\n     let (x, ch) = args;\n     log x;\n     comm::send(ch, x);"}, {"sha": "239f636a72f2514fc2cf7c3b96ba55e0ed1f8ef1", "filename": "src/test/run-pass/task-comm-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-comm-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-comm-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-2.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -5,7 +5,7 @@ import std::task;\n \n fn main() { log \"===== SPAWNING and JOINING THREAD TASKS =====\"; test00(); }\n \n-fn# start(&&task_number: int) {\n+fn start(&&task_number: int) {\n     log \"Started task.\";\n     let i: int = 0;\n     while i < 10000 { i = i + 1; }"}, {"sha": "18f14dd15a4060e5d61959a28aec91d10208df69", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -7,7 +7,7 @@ import std::comm::recv;\n \n fn main() { log \"===== WITHOUT THREADS =====\"; test00(); }\n \n-fn# test00_start(&&args: (chan<int>, int, int)) {\n+fn test00_start(&&args: (chan<int>, int, int)) {\n     let (ch, message, count) = args;\n     log \"Starting test00_start\";\n     let i: int = 0;"}, {"sha": "2b7bcb3711807a1e09ff9f7c3f7c8fdf5bed8f7e", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -7,7 +7,7 @@ import comm::port;\n \n fn main() { test00(); }\n \n-fn# test00_start(&&args: (comm::chan<int>, int, int)) {\n+fn test00_start(&&args: (comm::chan<int>, int, int)) {\n     let (c, start, number_of_messages) = args;\n     let i: int = 0;\n     while i < number_of_messages { comm::send(c, start + i); i += 1; }"}, {"sha": "69202c286f78c82fed5ad7fa7795a239894b5a3c", "filename": "src/test/run-pass/task-comm-8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -4,7 +4,7 @@ import std::comm;\n \n fn main() { test00(); }\n \n-fn# test00_start(&&args: (comm::chan<int>, int, int)) {\n+fn test00_start(&&args: (comm::chan<int>, int, int)) {\n     let (c, start, number_of_messages) = args;\n     let i: int = 0;\n     while i < number_of_messages { comm::send(c, start + i); i += 1; }"}, {"sha": "86c58cfbe70a8906f04bd7357ece910553462930", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -4,7 +4,7 @@ import std::comm;\n \n fn main() { test00(); }\n \n-fn# test00_start(&&args: (comm::chan<int>, int)) {\n+fn test00_start(&&args: (comm::chan<int>, int)) {\n     let (c, number_of_messages) = args;\n     let i: int = 0;\n     while i < number_of_messages { comm::send(c, i + 0); i += 1; }"}, {"sha": "d40d397aa401e113de5380d62c43447c14928486", "filename": "src/test/run-pass/task-life-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-life-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Ftask-life-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-life-0.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -2,6 +2,6 @@ use std;\n import std::task;\n fn main() { task::spawn(\"Hello\", child); }\n \n-fn# child(&&s: str) {\n+fn child(&&s: str) {\n \n }"}, {"sha": "4c73e31e1b7fd86785bc4d715ddb7468ac3b5092", "filename": "src/test/run-pass/terminate-in-initializer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -11,13 +11,13 @@ fn test_cont() { let i = 0; while i < 1 { i += 1; let x: @int = cont; } }\n fn test_ret() { let x: @int = ret; }\n \n fn test_fail() {\n-    fn# f(&&_i: ()) { std::task::unsupervise(); let x: @int = fail; }\n+    fn f(&&_i: ()) { std::task::unsupervise(); let x: @int = fail; }\n     std::task::spawn((), f);\n }\n \n fn test_fail_indirect() {\n     fn f() -> ! { fail; }\n-    fn# g(&&_i: ()) { std::task::unsupervise(); let x: @int = f(); }\n+    fn g(&&_i: ()) { std::task::unsupervise(); let x: @int = f(); }\n     std::task::spawn((), g);\n }\n "}, {"sha": "0c149769113e1cb714950a3bc225978a87db4c83", "filename": "src/test/run-pass/threads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthreads.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -9,5 +9,5 @@ fn main() {\n     log \"main thread exiting\";\n }\n \n-fn# child(&&x: int) { log x; }\n+fn child(&&x: int) { log x; }\n "}, {"sha": "57d8ff2e4de65618c5a52172346bd878d5f74d6f", "filename": "src/test/run-pass/unique-send-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send-2.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -3,7 +3,7 @@ import std::comm;\n import std::task;\n import std::uint;\n \n-fn# child(args: (comm::chan<~uint>, uint)) {\n+fn child(args: (comm::chan<~uint>, uint)) {\n     let (c, i) = args;\n     comm::send(c, ~i);\n }"}, {"sha": "a6f08923433e57cb08b0504b7465513909f90b9a", "filename": "src/test/run-pass/unwind-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Funwind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Funwind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-box.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -2,7 +2,7 @@\n use std;\n import std::task;\n \n-fn# f(&&_i: ()) {\n+fn f(&&_i: ()) {\n     task::unsupervise();\n     let a = @0;\n     fail;"}, {"sha": "b47fcd7ef2d28bde9db2f296173bf775b976ea44", "filename": "src/test/run-pass/unwind-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -7,7 +7,7 @@ resource complainer(c: comm::chan<bool>) {\n     comm::send(c, true);\n }\n \n-fn# f(c: comm::chan<bool>) {\n+fn f(c: comm::chan<bool>) {\n     task::unsupervise();\n     let c <- complainer(c);\n     fail;"}, {"sha": "34a80ed33ea65a20fd1bd2ca8019ac94aa26ab3d", "filename": "src/test/run-pass/unwind-resource2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource2.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -6,7 +6,7 @@ import std::comm;\n resource complainer(c: @int) {\n }\n \n-fn# f(&&_i: ()) {\n+fn f(&&_i: ()) {\n     task::unsupervise();\n     let c <- complainer(@0);\n     fail;"}, {"sha": "071fa594a84f463011697889712e40123d581e08", "filename": "src/test/run-pass/unwind-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-unique.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -2,7 +2,7 @@\n use std;\n import std::task;\n \n-fn# f(&&_i: ()) {\n+fn f(&&_i: ()) {\n     task::unsupervise();\n     let a = ~0;\n     fail;"}, {"sha": "19701b54b7978e7f3656909a6fda24e19a64e158", "filename": "src/test/run-pass/yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fyield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fyield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -13,6 +13,6 @@ fn main() {\n     join(other);\n }\n \n-fn# child(&&_i: ()) {\n+fn child(&&_i: ()) {\n     log_err \"4\"; yield(); log_err \"5\"; yield(); log_err \"6\";\n }"}, {"sha": "138c09cffcc9287b05ebdd305cba46508deb9516", "filename": "src/test/run-pass/yield1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fyield1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Frun-pass%2Fyield1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield1.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -10,4 +10,4 @@ fn main() {\n     join(other);\n }\n \n-fn# child(&&_i: ()) { log_err \"2\"; }\n+fn child(&&_i: ()) { log_err \"2\"; }"}, {"sha": "1349831cb87ffc33dde1ed188063e2e7959dba6b", "filename": "src/test/stdtest/task.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Fstdtest%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc61e39d78cbea14daf835597223f2f728e4acd/src%2Ftest%2Fstdtest%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ftask.rs?ref=ebc61e39d78cbea14daf835597223f2f728e4acd", "patch": "@@ -15,25 +15,25 @@ fn test_unsupervise() { }\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"linux\")]\n fn test_unsupervise() {\n-    fn# f(&&_i: ()) { task::unsupervise(); fail; }\n+    fn f(&&_i: ()) { task::unsupervise(); fail; }\n     task::spawn((), f);\n }\n \n #[test]\n fn test_lib_spawn() {\n-    fn# foo(&&_i: ()) { log_err \"Hello, World!\"; }\n+    fn foo(&&_i: ()) { log_err \"Hello, World!\"; }\n     task::spawn((), foo);\n }\n \n #[test]\n fn test_lib_spawn2() {\n-    fn# foo(&&x: int) { assert (x == 42); }\n+    fn foo(&&x: int) { assert (x == 42); }\n     task::spawn(42, foo);\n }\n \n #[test]\n fn test_join_chan() {\n-    fn# winner(&&_i: ()) { }\n+    fn winner(&&_i: ()) { }\n \n     let p = comm::port();\n     task::spawn_notify((), winner, comm::chan(p));\n@@ -56,7 +56,7 @@ fn test_join_chan_fail() { }\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"linux\")]\n fn test_join_chan_fail() {\n-    fn# failer(&&_i: ()) { task::unsupervise(); fail }\n+    fn failer(&&_i: ()) { task::unsupervise(); fail }\n \n     let p = comm::port();\n     task::spawn_notify((), failer, comm::chan(p));\n@@ -71,7 +71,7 @@ fn test_join_chan_fail() {\n \n #[test]\n fn test_join_convenient() {\n-    fn# winner(&&_i: ()) { }\n+    fn winner(&&_i: ()) { }\n     let handle = task::spawn_joinable((), winner);\n     assert (task::tr_success == task::join(handle));\n }\n@@ -80,7 +80,7 @@ fn test_join_convenient() {\n #[ignore]\n fn spawn_polymorphic() {\n     // FIXME #1038: Can't spawn palymorphic functions\n-    /*fn# foo<~T>(x: T) { log_err x; }\n+    /*fn foo<~T>(x: T) { log_err x; }\n \n     task::spawn(true, foo);\n     task::spawn(42, foo);*/"}]}