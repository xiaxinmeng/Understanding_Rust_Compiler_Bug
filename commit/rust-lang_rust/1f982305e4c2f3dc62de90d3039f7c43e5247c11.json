{"sha": "1f982305e4c2f3dc62de90d3039f7c43e5247c11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmOTgyMzA1ZTRjMmYzZGM2MmRlOTBkMzAzOWY3YzQzZTUyNDdjMTE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-08T21:40:06Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-08T21:40:06Z"}, "message": "ToPredicate by value", "tree": {"sha": "365976ba06b216c872327c368a6ae4abb17f34d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/365976ba06b216c872327c368a6ae4abb17f34d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f982305e4c2f3dc62de90d3039f7c43e5247c11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f982305e4c2f3dc62de90d3039f7c43e5247c11", "html_url": "https://github.com/rust-lang/rust/commit/1f982305e4c2f3dc62de90d3039f7c43e5247c11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f982305e4c2f3dc62de90d3039f7c43e5247c11/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ac1525e091d3db28e67adcbbd6db1e1deaa37fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ac1525e091d3db28e67adcbbd6db1e1deaa37fb", "html_url": "https://github.com/rust-lang/rust/commit/8ac1525e091d3db28e67adcbbd6db1e1deaa37fb"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "5ed39948da12b0678e4d005b9f9fa4cbebd5f210", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1f982305e4c2f3dc62de90d3039f7c43e5247c11/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f982305e4c2f3dc62de90d3039f7c43e5247c11/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=1f982305e4c2f3dc62de90d3039f7c43e5247c11", "patch": "@@ -1337,18 +1337,18 @@ impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {\n }\n \n pub trait ToPredicate<'tcx> {\n-    fn to_predicate(&self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;\n }\n \n impl ToPredicate<'tcx> for PredicateKind<'tcx> {\n     #[inline(always)]\n-    fn to_predicate(&self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        tcx.mk_predicate(*self)\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+        tcx.mk_predicate(self)\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<TraitRef<'tcx>> {\n-    fn to_predicate(&self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         ty::PredicateKind::Trait(\n             ty::Binder::dummy(ty::TraitPredicate { trait_ref: self.value }),\n             self.constness,\n@@ -1358,7 +1358,7 @@ impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<TraitRef<'tcx>> {\n }\n \n impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<&TraitRef<'tcx>> {\n-    fn to_predicate(&self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         ty::PredicateKind::Trait(\n             ty::Binder::dummy(ty::TraitPredicate { trait_ref: *self.value }),\n             self.constness,\n@@ -1368,34 +1368,34 @@ impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<&TraitRef<'tcx>> {\n }\n \n impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<PolyTraitRef<'tcx>> {\n-    fn to_predicate(&self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         ty::PredicateKind::Trait(self.value.to_poly_trait_predicate(), self.constness)\n             .to_predicate(tcx)\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<&PolyTraitRef<'tcx>> {\n-    fn to_predicate(&self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         ty::PredicateKind::Trait(self.value.to_poly_trait_predicate(), self.constness)\n             .to_predicate(tcx)\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {\n-    fn to_predicate(&self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        PredicateKind::RegionOutlives(*self).to_predicate(tcx)\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+        PredicateKind::RegionOutlives(self).to_predicate(tcx)\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {\n-    fn to_predicate(&self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        PredicateKind::TypeOutlives(*self).to_predicate(tcx)\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+        PredicateKind::TypeOutlives(self).to_predicate(tcx)\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {\n-    fn to_predicate(&self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        PredicateKind::Projection(*self).to_predicate(tcx)\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+        PredicateKind::Projection(self).to_predicate(tcx)\n     }\n }\n "}]}