{"sha": "ae66171b41b1d05128afd0d666475bc4ba617469", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNjYxNzFiNDFiMWQwNTEyOGFmZDBkNjY2NDc1YmM0YmE2MTc0Njk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-22T13:10:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-22T13:10:49Z"}, "message": "Auto merge of #68069 - JohnTitor:fix-closure-ice, r=matthewjasper\n\nAttempt to fix ICE #68025\n\nFixes #68025", "tree": {"sha": "e57c2ac1597da82fd5e1ceadcabb53f4c12c3918", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e57c2ac1597da82fd5e1ceadcabb53f4c12c3918"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae66171b41b1d05128afd0d666475bc4ba617469", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae66171b41b1d05128afd0d666475bc4ba617469", "html_url": "https://github.com/rust-lang/rust/commit/ae66171b41b1d05128afd0d666475bc4ba617469", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae66171b41b1d05128afd0d666475bc4ba617469/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5abfb156911813185a9ccd70b480cca5f2c97f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5abfb156911813185a9ccd70b480cca5f2c97f1", "html_url": "https://github.com/rust-lang/rust/commit/f5abfb156911813185a9ccd70b480cca5f2c97f1"}, {"sha": "0017f495783324b036ffcaafedf7881725ba1e02", "url": "https://api.github.com/repos/rust-lang/rust/commits/0017f495783324b036ffcaafedf7881725ba1e02", "html_url": "https://github.com/rust-lang/rust/commit/0017f495783324b036ffcaafedf7881725ba1e02"}], "stats": {"total": 72, "additions": 13, "deletions": 59}, "files": [{"sha": "1d3ace933cc43673096ac16cb9a0034f32252d77", "filename": "src/librustc_typeck/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 59, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ae66171b41b1d05128afd0d666475bc4ba617469/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae66171b41b1d05128afd0d666475bc4ba617469/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs?ref=ae66171b41b1d05128afd0d666475bc4ba617469", "patch": "@@ -3,7 +3,6 @@\n //! `ExprUseVisitor` determines how expressions are being used.\n \n pub use self::ConsumeMode::*;\n-use self::OverloadedCallType::*;\n \n // Export these here so that Clippy can use them.\n pub use mc::{Place, PlaceBase, Projection};\n@@ -48,35 +47,6 @@ pub enum MutateMode {\n     WriteAndRead, // x += y\n }\n \n-#[derive(Copy, Clone)]\n-enum OverloadedCallType {\n-    FnOverloadedCall,\n-    FnMutOverloadedCall,\n-    FnOnceOverloadedCall,\n-}\n-\n-impl OverloadedCallType {\n-    fn from_trait_id(tcx: TyCtxt<'_>, trait_id: DefId) -> OverloadedCallType {\n-        for &(maybe_function_trait, overloaded_call_type) in &[\n-            (tcx.lang_items().fn_once_trait(), FnOnceOverloadedCall),\n-            (tcx.lang_items().fn_mut_trait(), FnMutOverloadedCall),\n-            (tcx.lang_items().fn_trait(), FnOverloadedCall),\n-        ] {\n-            match maybe_function_trait {\n-                Some(function_trait) if function_trait == trait_id => return overloaded_call_type,\n-                _ => continue,\n-            }\n-        }\n-\n-        bug!(\"overloaded call didn't map to known function trait\")\n-    }\n-\n-    fn from_method_id(tcx: TyCtxt<'_>, method_id: DefId) -> OverloadedCallType {\n-        let method = tcx.associated_item(method_id);\n-        OverloadedCallType::from_trait_id(tcx, method.container.id())\n-    }\n-}\n-\n ///////////////////////////////////////////////////////////////////////////\n // The ExprUseVisitor type\n //\n@@ -211,7 +181,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n \n             hir::ExprKind::Call(ref callee, ref args) => {\n                 // callee(args)\n-                self.walk_callee(expr, callee);\n+                self.consume_expr(callee);\n                 self.consume_exprs(args);\n             }\n \n@@ -326,34 +296,6 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn walk_callee(&mut self, call: &hir::Expr<'_>, callee: &hir::Expr<'_>) {\n-        let callee_ty = return_if_err!(self.mc.expr_ty_adjusted(callee));\n-        debug!(\"walk_callee: callee={:?} callee_ty={:?}\", callee, callee_ty);\n-        match callee_ty.kind {\n-            ty::FnDef(..) | ty::FnPtr(_) => {\n-                self.consume_expr(callee);\n-            }\n-            ty::Error => {}\n-            _ => {\n-                if let Some(def_id) = self.mc.tables.type_dependent_def_id(call.hir_id) {\n-                    match OverloadedCallType::from_method_id(self.tcx(), def_id) {\n-                        FnMutOverloadedCall => {\n-                            self.borrow_expr(callee, ty::MutBorrow);\n-                        }\n-                        FnOverloadedCall => {\n-                            self.borrow_expr(callee, ty::ImmBorrow);\n-                        }\n-                        FnOnceOverloadedCall => self.consume_expr(callee),\n-                    }\n-                } else {\n-                    self.tcx()\n-                        .sess\n-                        .delay_span_bug(call.span, \"no type-dependent def for overloaded call\");\n-                }\n-            }\n-        }\n-    }\n-\n     fn walk_stmt(&mut self, stmt: &hir::Stmt<'_>) {\n         match stmt.kind {\n             hir::StmtKind::Local(ref local) => {"}, {"sha": "261bfd60aaea9db097de6069da156c719f766d8d", "filename": "src/test/ui/closures/issue-68025.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ae66171b41b1d05128afd0d666475bc4ba617469/src%2Ftest%2Fui%2Fclosures%2Fissue-68025.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae66171b41b1d05128afd0d666475bc4ba617469/src%2Ftest%2Fui%2Fclosures%2Fissue-68025.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-68025.rs?ref=ae66171b41b1d05128afd0d666475bc4ba617469", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+\n+fn foo<F, G>(_: G, _: Box<F>)\n+where\n+    F: Fn(),\n+    G: Fn(Box<F>),\n+{\n+}\n+\n+fn main() {\n+    foo(|f| (*f)(), Box::new(|| {}));\n+}"}]}