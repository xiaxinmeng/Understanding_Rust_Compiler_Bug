{"sha": "2285e35919f5d17188401479863fdf3ac79cf5a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyODVlMzU5MTlmNWQxNzE4ODQwMTQ3OTg2M2ZkZjNhYzc5Y2Y1YTg=", "commit": {"author": {"name": "Basile Desloges", "email": "basile.desloges@gmail.com", "date": "2017-11-16T16:07:33Z"}, "committer": {"name": "Basile Desloges", "email": "basile.desloges@gmail.com", "date": "2017-11-19T19:19:11Z"}, "message": "mir-borrowck: Use Field instead of usize for field index in user description functions", "tree": {"sha": "77f68aef2124ce742b4e80b29a1c73064b78281a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77f68aef2124ce742b4e80b29a1c73064b78281a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2285e35919f5d17188401479863fdf3ac79cf5a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2285e35919f5d17188401479863fdf3ac79cf5a8", "html_url": "https://github.com/rust-lang/rust/commit/2285e35919f5d17188401479863fdf3ac79cf5a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2285e35919f5d17188401479863fdf3ac79cf5a8/comments", "author": {"login": "zilbuz", "id": 434964, "node_id": "MDQ6VXNlcjQzNDk2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/434964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zilbuz", "html_url": "https://github.com/zilbuz", "followers_url": "https://api.github.com/users/zilbuz/followers", "following_url": "https://api.github.com/users/zilbuz/following{/other_user}", "gists_url": "https://api.github.com/users/zilbuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zilbuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zilbuz/subscriptions", "organizations_url": "https://api.github.com/users/zilbuz/orgs", "repos_url": "https://api.github.com/users/zilbuz/repos", "events_url": "https://api.github.com/users/zilbuz/events{/privacy}", "received_events_url": "https://api.github.com/users/zilbuz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zilbuz", "id": 434964, "node_id": "MDQ6VXNlcjQzNDk2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/434964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zilbuz", "html_url": "https://github.com/zilbuz", "followers_url": "https://api.github.com/users/zilbuz/followers", "following_url": "https://api.github.com/users/zilbuz/following{/other_user}", "gists_url": "https://api.github.com/users/zilbuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zilbuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zilbuz/subscriptions", "organizations_url": "https://api.github.com/users/zilbuz/orgs", "repos_url": "https://api.github.com/users/zilbuz/repos", "events_url": "https://api.github.com/users/zilbuz/events{/privacy}", "received_events_url": "https://api.github.com/users/zilbuz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5d291afbfd253cdca60bcf83f2afb2b5719c6ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5d291afbfd253cdca60bcf83f2afb2b5719c6ba", "html_url": "https://github.com/rust-lang/rust/commit/e5d291afbfd253cdca60bcf83f2afb2b5719c6ba"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "08ccf2ebf22f6fc7ca523f9e7debc6317b7935d5", "filename": "src/librustc_mir/borrow_check.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2285e35919f5d17188401479863fdf3ac79cf5a8/src%2Flibrustc_mir%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2285e35919f5d17188401479863fdf3ac79cf5a8/src%2Flibrustc_mir%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check.rs?ref=2285e35919f5d17188401479863fdf3ac79cf5a8", "patch": "@@ -15,7 +15,7 @@ use rustc::hir::def_id::{DefId};\n use rustc::infer::{InferCtxt};\n use rustc::ty::{self, TyCtxt, ParamEnv};\n use rustc::ty::maps::Providers;\n-use rustc::mir::{AssertMessage, BasicBlock, BorrowKind, Location, Lvalue, Local};\n+use rustc::mir::{AssertMessage, BasicBlock, BorrowKind, Field, Location, Lvalue, Local};\n use rustc::mir::{Mir, Mutability, Operand, Projection, ProjectionElem, Rvalue};\n use rustc::mir::{Statement, StatementKind, Terminator, TerminatorKind};\n use transform::nll;\n@@ -1611,7 +1611,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         let is_projection_from_ty_closure = proj.base.ty(self.mir, self.tcx)\n                                 .to_ty(self.tcx).is_closure();\n \n-                        let field_name = self.describe_field(&proj.base, field.index());\n+                        let field_name = self.describe_field(&proj.base, field);\n                         if is_projection_from_ty_closure {\n                             buf.push_str(&format!(\"{}\", field_name));\n                         } else {\n@@ -1650,66 +1650,65 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n-    // FIXME Instead of passing usize, Field should be passed\n-    // End-user visible description of the `field_index`nth field of `base`\n-    fn describe_field(&self, base: &Lvalue, field_index: usize) -> String {\n+    // End-user visible description of the `field`nth field of `base`\n+    fn describe_field(&self, base: &Lvalue, field: Field) -> String {\n         match *base {\n             Lvalue::Local(local) => {\n                 let local = &self.mir.local_decls[local];\n-                self.describe_field_from_ty(&local.ty, field_index)\n+                self.describe_field_from_ty(&local.ty, field)\n             },\n             Lvalue::Static(ref static_) => {\n-                self.describe_field_from_ty(&static_.ty, field_index)\n+                self.describe_field_from_ty(&static_.ty, field)\n             },\n             Lvalue::Projection(ref proj) => {\n                 match proj.elem {\n                     ProjectionElem::Deref =>\n-                        self.describe_field(&proj.base, field_index),\n+                        self.describe_field(&proj.base, field),\n                     ProjectionElem::Downcast(def, variant_index) =>\n-                        format!(\"{}\", def.variants[variant_index].fields[field_index].name),\n+                        format!(\"{}\", def.variants[variant_index].fields[field.index()].name),\n                     ProjectionElem::Field(_, field_type) =>\n-                        self.describe_field_from_ty(&field_type, field_index),\n+                        self.describe_field_from_ty(&field_type, field),\n                     ProjectionElem::Index(..)\n                     | ProjectionElem::ConstantIndex { .. }\n                     | ProjectionElem::Subslice { .. } =>\n-                        format!(\"{}\", self.describe_field(&proj.base, field_index)),\n+                        format!(\"{}\", self.describe_field(&proj.base, field)),\n                 }\n             }\n         }\n     }\n \n     // End-user visible description of the `field_index`nth field of `ty`\n-    fn describe_field_from_ty(&self, ty: &ty::Ty, field_index: usize) -> String {\n+    fn describe_field_from_ty(&self, ty: &ty::Ty, field: Field) -> String {\n         if ty.is_box() {\n             // If the type is a box, the field is described from the boxed type\n-            self.describe_field_from_ty(&ty.boxed_ty(), field_index)\n+            self.describe_field_from_ty(&ty.boxed_ty(), field)\n         }\n         else {\n             match ty.sty {\n                 ty::TyAdt(def, _) => {\n                     if def.is_enum() {\n-                        format!(\"{}\", field_index)\n+                        format!(\"{}\", field.index())\n                     }\n                     else {\n-                        format!(\"{}\", def.struct_variant().fields[field_index].name)\n+                        format!(\"{}\", def.struct_variant().fields[field.index()].name)\n                     }\n                 },\n                 ty::TyTuple(_, _) => {\n-                    format!(\"{}\", field_index)\n+                    format!(\"{}\", field.index())\n                 },\n                 ty::TyRef(_, tnm) | ty::TyRawPtr(tnm) => {\n-                    self.describe_field_from_ty(&tnm.ty, field_index)\n+                    self.describe_field_from_ty(&tnm.ty, field)\n                 },\n                 ty::TyArray(ty, _) | ty::TySlice(ty) => {\n-                    self.describe_field_from_ty(&ty, field_index)\n+                    self.describe_field_from_ty(&ty, field)\n                 },\n                 ty::TyClosure(closure_def_id, _) => {\n                     // Convert the def-id into a node-id. node-ids are only valid for\n                     // the local code in the current crate, so this returns an `Option` in case\n                     // the closure comes from another crate. But in that case we wouldn't\n                     // be borrowck'ing it, so we can just unwrap:\n                     let node_id = self.tcx.hir.as_local_node_id(closure_def_id).unwrap();\n-                    let freevar = self.tcx.with_freevars(node_id, |fv| fv[field_index]);\n+                    let freevar = self.tcx.with_freevars(node_id, |fv| fv[field.index()]);\n \n                     self.tcx.hir.name(freevar.var_id()).to_string()\n                  }"}]}