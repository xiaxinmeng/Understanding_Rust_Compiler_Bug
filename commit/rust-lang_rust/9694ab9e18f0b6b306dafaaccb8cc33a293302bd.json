{"sha": "9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2OTRhYjllMThmMGI2YjMwNmRhZmFhY2NiOGNjMzNhMjkzMzAyYmQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-29T10:09:23Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-21T22:39:19Z"}, "message": "Use Arena inside hir::Body.", "tree": {"sha": "23ee1c82a6ac56849685acf0156a95b149e033f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23ee1c82a6ac56849685acf0156a95b149e033f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "html_url": "https://github.com/rust-lang/rust/commit/9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42c03e4bb47b4758aa4f65c02ef9eba901a801b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/42c03e4bb47b4758aa4f65c02ef9eba901a801b7", "html_url": "https://github.com/rust-lang/rust/commit/42c03e4bb47b4758aa4f65c02ef9eba901a801b7"}], "stats": {"total": 134, "additions": 69, "deletions": 65}, "files": [{"sha": "164e0e85c5acd6eb598082b56339e73eabdaa02f", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "patch": "@@ -130,6 +130,7 @@ macro_rules! arena_types {\n             [] foreign_item: rustc::hir::ForeignItem<$tcx>,\n             [] impl_item_ref: rustc::hir::ImplItemRef,\n             [] macro_def: rustc::hir::MacroDef<$tcx>,\n+            [] param: rustc::hir::Param,\n             [] path: rustc::hir::Path,\n             [] struct_field: rustc::hir::StructField<$tcx>,\n             [] trait_item_ref: rustc::hir::TraitItemRef,"}, {"sha": "bd975c6c95dbc131c8f2f05d50c00c5e7a4e3335", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "patch": "@@ -222,7 +222,7 @@ pub trait Visitor<'v>: Sized {\n         walk_item(self, i)\n     }\n \n-    fn visit_body(&mut self, b: &'v Body) {\n+    fn visit_body(&mut self, b: &'v Body<'v>) {\n         walk_body(self, b);\n     }\n \n@@ -401,8 +401,8 @@ pub fn walk_mod<'v, V: Visitor<'v>>(visitor: &mut V, module: &'v Mod<'v>, mod_hi\n     }\n }\n \n-pub fn walk_body<'v, V: Visitor<'v>>(visitor: &mut V, body: &'v Body) {\n-    walk_list!(visitor, visit_param, &body.params);\n+pub fn walk_body<'v, V: Visitor<'v>>(visitor: &mut V, body: &'v Body<'v>) {\n+    walk_list!(visitor, visit_param, body.params);\n     visitor.visit_expr(&body.value);\n }\n "}, {"sha": "cac4c694316c512804c853688c0f86926e1b79d7", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "patch": "@@ -99,7 +99,7 @@ pub struct LoweringContext<'a, 'hir: 'a> {\n \n     trait_items: BTreeMap<hir::TraitItemId, hir::TraitItem<'hir>>,\n     impl_items: BTreeMap<hir::ImplItemId, hir::ImplItem<'hir>>,\n-    bodies: BTreeMap<hir::BodyId, hir::Body>,\n+    bodies: BTreeMap<hir::BodyId, hir::Body<'hir>>,\n     exported_macros: Vec<hir::MacroDef<'hir>>,\n     non_exported_macro_attrs: Vec<ast::Attribute>,\n \n@@ -3428,7 +3428,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n }\n \n-fn body_ids(bodies: &BTreeMap<hir::BodyId, hir::Body>) -> Vec<hir::BodyId> {\n+fn body_ids(bodies: &BTreeMap<hir::BodyId, hir::Body<'hir>>) -> Vec<hir::BodyId> {\n     // Sorting by span ensures that we get things in order within a\n     // file, and also puts the files in a sensible order.\n     let mut body_ids: Vec<_> = bodies.keys().cloned().collect();"}, {"sha": "d5440663c49a130aaafb8cc99c330e6836ea8188", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "patch": "@@ -5,7 +5,7 @@ use super::ImplTraitTypeIdVisitor;\n use super::AnonymousLifetimeMode;\n use super::ParamMode;\n \n-use crate::hir::{self, HirVec};\n+use crate::hir;\n use crate::hir::ptr::P;\n use crate::hir::def_id::DefId;\n use crate::hir::def::{Res, DefKind};\n@@ -107,7 +107,7 @@ impl<'a, 'lowering, 'hir> Visitor<'a> for ItemLowerer<'a, 'lowering, 'hir> {\n     }\n }\n \n-impl LoweringContext<'_, 'hir> {\n+impl<'hir> LoweringContext<'_, 'hir> {\n     // Same as the method above, but accepts `hir::GenericParam`s\n     // instead of `ast::GenericParam`s.\n     // This should only be used with generics that have already had their\n@@ -1052,7 +1052,7 @@ impl LoweringContext<'_, 'hir> {\n         }\n     }\n \n-    fn record_body(&mut self, params: HirVec<hir::Param>, value: hir::Expr) -> hir::BodyId {\n+    fn record_body(&mut self, params: &'hir [hir::Param], value: hir::Expr) -> hir::BodyId {\n         let body = hir::Body {\n             generator_kind: self.generator_kind,\n             params,\n@@ -1065,7 +1065,7 @@ impl LoweringContext<'_, 'hir> {\n \n     fn lower_body(\n         &mut self,\n-        f: impl FnOnce(&mut LoweringContext<'_, '_>) -> (HirVec<hir::Param>, hir::Expr),\n+        f: impl FnOnce(&mut Self) -> (&'hir [hir::Param], hir::Expr),\n     ) -> hir::BodyId {\n         let prev_gen_kind = self.generator_kind.take();\n         let (parameters, result) = f(self);\n@@ -1089,7 +1089,9 @@ impl LoweringContext<'_, 'hir> {\n         body: impl FnOnce(&mut LoweringContext<'_, '_>) -> hir::Expr,\n     ) -> hir::BodyId {\n         self.lower_body(|this| (\n-            decl.inputs.iter().map(|x| this.lower_param(x)).collect(),\n+            this.arena.alloc_from_iter(\n+                decl.inputs.iter().map(|x| this.lower_param(x))\n+            ),\n             body(this),\n         ))\n     }\n@@ -1111,7 +1113,7 @@ impl LoweringContext<'_, 'hir> {\n     }\n \n     pub(super) fn lower_const_body(&mut self, span: Span, expr: Option<&Expr>) -> hir::BodyId {\n-        self.lower_body(|this| (hir_vec![], match expr {\n+        self.lower_body(|this| (&[], match expr {\n             Some(expr) => this.lower_expr(expr),\n             None => this.expr_err(span),\n         }))\n@@ -1299,7 +1301,8 @@ impl LoweringContext<'_, 'hir> {\n                     );\n                     this.expr_block(P(body), AttrVec::new())\n                 });\n-            (HirVec::from(parameters), this.expr(body_span, async_expr, AttrVec::new()))\n+\n+            (this.arena.alloc_from_iter(parameters), this.expr(body_span, async_expr, AttrVec::new()))\n         })\n     }\n "}, {"sha": "71addc123b8eb329d28a806a1119a77e31a71111", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "patch": "@@ -459,7 +459,7 @@ impl<'hir> Map<'hir> {\n         self.forest.krate.impl_item(id)\n     }\n \n-    pub fn body(&self, id: BodyId) -> &'hir Body {\n+    pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {\n         self.read(id.hir_id);\n \n         // N.B., intentionally bypass `self.forest.krate()` so that we"}, {"sha": "ff6801a85c7e1d28bcd6dcc59452855dd8c9c507", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "patch": "@@ -760,7 +760,7 @@ pub struct Crate<'hir> {\n \n     pub trait_items: BTreeMap<TraitItemId, TraitItem<'hir>>,\n     pub impl_items: BTreeMap<ImplItemId, ImplItem<'hir>>,\n-    pub bodies: BTreeMap<BodyId, Body>,\n+    pub bodies: BTreeMap<BodyId, Body<'hir>>,\n     pub trait_impls: BTreeMap<DefId, Vec<HirId>>,\n \n     /// A list of the body ids written out in the order in which they\n@@ -787,7 +787,7 @@ impl Crate<'hir> {\n         &self.impl_items[&id]\n     }\n \n-    pub fn body(&self, id: BodyId) -> &Body {\n+    pub fn body(&self, id: BodyId) -> &Body<'hir> {\n         &self.bodies[&id]\n     }\n }\n@@ -1353,13 +1353,13 @@ pub struct BodyId {\n /// All bodies have an **owner**, which can be accessed via the HIR\n /// map using `body_owner_def_id()`.\n #[derive(RustcEncodable, RustcDecodable, Debug)]\n-pub struct Body {\n-    pub params: HirVec<Param>,\n+pub struct Body<'hir> {\n+    pub params: &'hir [Param],\n     pub value: Expr,\n     pub generator_kind: Option<GeneratorKind>,\n }\n \n-impl Body {\n+impl Body<'hir> {\n     pub fn id(&self) -> BodyId {\n         BodyId {\n             hir_id: self.value.hir_id,"}, {"sha": "af5e167faa8b783f4fbb8e7b4c5127ccf71e1cb6", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "patch": "@@ -61,7 +61,7 @@ struct BodyResolver<'tcx>(&'tcx hir::Crate<'tcx>);\n impl<'tcx> BodyResolver<'tcx> {\n     /// Returns a reference to the `hir::Body` with the given `BodyId`.\n     /// **Does not do any tracking**; use carefully.\n-    fn body(self, id: hir::BodyId) -> &'tcx hir::Body {\n+    fn body(self, id: hir::BodyId) -> &'tcx hir::Body<'tcx> {\n         self.0.body(id)\n     }\n }"}, {"sha": "1f96f4c65ef6912a1a7f1c33c275c87b83a57031", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "patch": "@@ -266,7 +266,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::Item<'_> {\n     }\n }\n \n-impl<'a> HashStable<StableHashingContext<'a>> for hir::Body {\n+impl<'a> HashStable<StableHashingContext<'a>> for hir::Body<'_> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let hir::Body {\n             params,"}, {"sha": "378d6d78d320388f88fe66a103966db31699236c", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "patch": "@@ -83,8 +83,8 @@ impl<'a, 'tcx> Visitor<'tcx> for FindLocalByTypeVisitor<'a, 'tcx> {\n         intravisit::walk_local(self, local);\n     }\n \n-    fn visit_body(&mut self, body: &'tcx Body) {\n-        for param in &body.params {\n+    fn visit_body(&mut self, body: &'tcx Body<'tcx>) {\n+        for param in body.params {\n             if let (None, Some(ty)) = (\n                 self.found_arg_pattern,\n                 self.node_matches_type(param.hir_id),\n@@ -113,7 +113,7 @@ fn closure_return_type_suggestion(\n     span: Span,\n     err: &mut DiagnosticBuilder<'_>,\n     output: &FunctionRetTy,\n-    body: &Body,\n+    body: &Body<'_>,\n     descr: &str,\n     name: &str,\n     ret: &str,"}, {"sha": "b7d013063438dba7c3cdb37fdc10e9f97b8c8fe7", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "patch": "@@ -924,7 +924,7 @@ for LateContextAndPass<'a, 'tcx, T> {\n         });\n     }\n \n-    fn visit_body(&mut self, body: &'tcx hir::Body) {\n+    fn visit_body(&mut self, body: &'tcx hir::Body<'tcx>) {\n         lint_callback!(self, check_body, body);\n         hir_visit::walk_body(self, body);\n         lint_callback!(self, check_body_post, body);"}, {"sha": "3d6015ecfbff6f5daba0ffd668bc6db6d39eceb0", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "patch": "@@ -87,8 +87,8 @@ macro_rules! late_lint_methods {\n     ($macro:path, $args:tt, [$hir:tt]) => (\n         $macro!($args, [$hir], [\n             fn check_param(a: &$hir hir::Param);\n-            fn check_body(a: &$hir hir::Body);\n-            fn check_body_post(a: &$hir hir::Body);\n+            fn check_body(a: &$hir hir::Body<$hir>);\n+            fn check_body_post(a: &$hir hir::Body<$hir>);\n             fn check_name(a: Span, b: ast::Name);\n             fn check_crate(a: &$hir hir::Crate<$hir>);\n             fn check_crate_post(a: &$hir hir::Crate<$hir>);\n@@ -114,13 +114,13 @@ macro_rules! late_lint_methods {\n             fn check_fn(\n                 a: hir::intravisit::FnKind<$hir>,\n                 b: &$hir hir::FnDecl,\n-                c: &$hir hir::Body,\n+                c: &$hir hir::Body<$hir>,\n                 d: Span,\n                 e: hir::HirId);\n             fn check_fn_post(\n                 a: hir::intravisit::FnKind<$hir>,\n                 b: &$hir hir::FnDecl,\n-                c: &$hir hir::Body,\n+                c: &$hir hir::Body<$hir>,\n                 d: Span,\n                 e: hir::HirId\n             );"}, {"sha": "c5d5bc58112257cdf8e17fb66ad7cb31bb04812c", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "patch": "@@ -715,7 +715,7 @@ impl<'tcx> ScopeTree {\n     pub fn yield_in_scope_for_expr(&self,\n                                    scope: Scope,\n                                    expr_hir_id: hir::HirId,\n-                                   body: &'tcx hir::Body) -> Option<Span> {\n+                                   body: &'tcx hir::Body<'tcx>) -> Option<Span> {\n         self.yield_in_scope(scope).and_then(|YieldData { span, expr_and_pat_count, .. }| {\n             let mut visitor = ExprLocatorVisitor {\n                 hir_id: expr_hir_id,\n@@ -1362,7 +1362,7 @@ impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n         resolve_block(self, b);\n     }\n \n-    fn visit_body(&mut self, body: &'tcx hir::Body) {\n+    fn visit_body(&mut self, body: &'tcx hir::Body<'tcx>) {\n         let body_id = body.id();\n         let owner_id = self.tcx.hir().body_owner(body_id);\n \n@@ -1387,7 +1387,7 @@ impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n \n         // The arguments and `self` are parented to the fn.\n         self.cx.var_parent = self.cx.parent.take();\n-        for param in &body.params {\n+        for param in body.params {\n             self.visit_pat(&param.pat);\n         }\n "}, {"sha": "4b838d040596b98b00d279c2479a43b055904248", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "patch": "@@ -1167,7 +1167,7 @@ fn signal_shadowing_problem(tcx: TyCtxt<'_>, name: ast::Name, orig: Original, sh\n \n // Adds all labels in `b` to `ctxt.labels_in_fn`, signalling a warning\n // if one of the label shadows a lifetime or another label.\n-fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body) {\n+fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body<'_>) {\n     struct GatherLabels<'a, 'tcx> {\n         tcx: TyCtxt<'tcx>,\n         scope: ScopeRef<'a>,"}, {"sha": "08d7a90c7b09b2ff0b71716d6131803bb176bfe1", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "patch": "@@ -298,7 +298,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n         cx: &LateContext<'_, '_>,\n         fk: FnKind<'_>,\n         _: &hir::FnDecl,\n-        _: &hir::Body,\n+        _: &hir::Body<'_>,\n         _: Span,\n         id: hir::HirId,\n     ) {"}, {"sha": "6b6a58102fa8297a26c226b5de1763762174dfe5", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "patch": "@@ -552,7 +552,7 @@ fn construct_fn<'a, 'tcx, A>(\n     abi: Abi,\n     return_ty: Ty<'tcx>,\n     return_ty_span: Span,\n-    body: &'tcx hir::Body,\n+    body: &'tcx hir::Body<'tcx>,\n ) -> Body<'tcx>\n where\n     A: Iterator<Item=ArgInfo<'tcx>>"}, {"sha": "4ebf41fb9d21f1d022ed26d40b7e6ac1bede7800", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "patch": "@@ -76,10 +76,10 @@ impl<'tcx> Visitor<'tcx> for MatchVisitor<'_, 'tcx> {\n         self.check_patterns(false, &loc.pat);\n     }\n \n-    fn visit_body(&mut self, body: &'tcx hir::Body) {\n+    fn visit_body(&mut self, body: &'tcx hir::Body<'tcx>) {\n         intravisit::walk_body(self, body);\n \n-        for param in &body.params {\n+        for param in body.params {\n             self.check_irrefutable(&param.pat, \"function argument\", None);\n             self.check_patterns(false, &param.pat);\n         }"}, {"sha": "6b5b5c823e8b402cedb04a26ce2b501aa8307d17", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "patch": "@@ -75,7 +75,7 @@ enum ConstKind {\n }\n \n impl ConstKind {\n-    fn for_body(body: &hir::Body, hir_map: &Map<'_>) -> Option<Self> {\n+    fn for_body(body: &hir::Body<'_>, hir_map: &Map<'_>) -> Option<Self> {\n         let is_const_fn = |id| hir_map.fn_sig_by_hir_id(id).unwrap().header.is_const();\n \n         let owner = hir_map.body_owner(body.id());\n@@ -215,7 +215,7 @@ impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n         self.recurse_into(kind, |this| hir::intravisit::walk_anon_const(this, anon));\n     }\n \n-    fn visit_body(&mut self, body: &'tcx hir::Body) {\n+    fn visit_body(&mut self, body: &'tcx hir::Body<'tcx>) {\n         let kind = ConstKind::for_body(body, self.tcx.hir());\n         self.recurse_into(kind, |this| hir::intravisit::walk_body(this, body));\n     }"}, {"sha": "f18ecb90fc1d033aa8d42e9bea1fe82d2bfa0671", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "patch": "@@ -371,7 +371,7 @@ fn visit_fn<'tcx>(\n \n     let body = ir.tcx.hir().body(body_id);\n \n-    for param in &body.params {\n+    for param in body.params {\n         let is_shorthand = match param.pat.kind {\n             rustc::hir::PatKind::Struct(..) => true,\n             _ => false,\n@@ -1463,8 +1463,8 @@ impl<'tcx> Liveness<'_, 'tcx> {\n         }\n     }\n \n-    fn warn_about_unused_args(&self, body: &hir::Body, entry_ln: LiveNode) {\n-        for p in &body.params {\n+    fn warn_about_unused_args(&self, body: &hir::Body<'_>, entry_ln: LiveNode) {\n+        for p in body.params {\n             self.check_unused_vars_in_pat(&p.pat, Some(entry_ln), |spans, hir_id, ln, var| {\n                 if self.live_on_entry(ln, var).is_none() {\n                     self.report_dead_assign(hir_id, spans, var, true);"}, {"sha": "46b9a8d7f912a7a6782ecd682097f67963684cfb", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "patch": "@@ -63,7 +63,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &hir::Expr,\n         opt_kind: Option<ty::ClosureKind>,\n         decl: &'tcx hir::FnDecl,\n-        body: &'tcx hir::Body,\n+        body: &'tcx hir::Body<'tcx>,\n         gen: Option<hir::Movability>,\n         expected_sig: Option<ExpectedSig<'tcx>>,\n     ) -> Ty<'tcx> {\n@@ -316,7 +316,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         expr_def_id: DefId,\n         decl: &hir::FnDecl,\n-        body: &hir::Body,\n+        body: &hir::Body<'_>,\n         expected_sig: Option<ExpectedSig<'tcx>>,\n     ) -> ClosureSignatures<'tcx> {\n         if let Some(e) = expected_sig {\n@@ -332,7 +332,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         expr_def_id: DefId,\n         decl: &hir::FnDecl,\n-        body: &hir::Body,\n+        body: &hir::Body<'_>,\n     ) -> ClosureSignatures<'tcx> {\n         debug!(\"sig_of_closure_no_expectation()\");\n \n@@ -392,7 +392,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         expr_def_id: DefId,\n         decl: &hir::FnDecl,\n-        body: &hir::Body,\n+        body: &hir::Body<'_>,\n         expected_sig: ExpectedSig<'tcx>,\n     ) -> ClosureSignatures<'tcx> {\n         debug!(\n@@ -450,7 +450,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         expr_def_id: DefId,\n         decl: &hir::FnDecl,\n-        body: &hir::Body,\n+        body: &hir::Body<'_>,\n         expected_sig: ExpectedSig<'tcx>,\n     ) -> ClosureSignatures<'tcx> {\n         let expr_map_node = self.tcx.hir().get_if_local(expr_def_id).unwrap();\n@@ -482,7 +482,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         expr_def_id: DefId,\n         decl: &hir::FnDecl,\n-        body: &hir::Body,\n+        body: &hir::Body<'_>,\n         expected_sigs: &ClosureSignatures<'tcx>,\n     ) -> InferResult<'tcx, ()> {\n         // Get the signature S that the user gave.\n@@ -590,7 +590,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         expr_def_id: DefId,\n         decl: &hir::FnDecl,\n-        body: &hir::Body,\n+        body: &hir::Body<'_>,\n     ) -> ty::PolyFnSig<'tcx> {\n         let astconv: &dyn AstConv<'_> = self;\n \n@@ -788,7 +788,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn closure_sigs(\n         &self,\n         expr_def_id: DefId,\n-        body: &hir::Body,\n+        body: &hir::Body<'_>,\n         bound_sig: ty::PolyFnSig<'tcx>,\n     ) -> ClosureSignatures<'tcx> {\n         let liberated_sig = self.tcx()"}, {"sha": "1cd1d4fcd3f249cec1fa0399de6182a631dd95a4", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "patch": "@@ -1260,7 +1260,7 @@ fn check_fn<'a, 'tcx>(\n     fn_sig: ty::FnSig<'tcx>,\n     decl: &'tcx hir::FnDecl,\n     fn_id: hir::HirId,\n-    body: &'tcx hir::Body,\n+    body: &'tcx hir::Body<'tcx>,\n     can_be_generator: Option<hir::Movability>,\n ) -> (FnCtxt<'a, 'tcx>, Option<GeneratorTypes<'tcx>>) {\n     let mut fn_sig = fn_sig.clone();\n@@ -1327,7 +1327,7 @@ fn check_fn<'a, 'tcx>(\n     for (param_ty, param) in\n         fn_sig.inputs().iter().copied()\n             .chain(maybe_va_list)\n-            .zip(&body.params)\n+            .zip(body.params)\n     {\n         // Check the pattern.\n         fcx.check_pat_top(&param.pat, param_ty, None);"}, {"sha": "396ff5ce5189cf76308694dad69b7530191a5a9f", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "patch": "@@ -106,7 +106,7 @@ macro_rules! ignore_err {\n // PUBLIC ENTRY POINTS\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n-    pub fn regionck_expr(&self, body: &'tcx hir::Body) {\n+    pub fn regionck_expr(&self, body: &'tcx hir::Body<'tcx>) {\n         let subject = self.tcx.hir().body_owner_def_id(body.id());\n         let id = body.value.hir_id;\n         let mut rcx = RegionCtxt::new(\n@@ -159,7 +159,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// rest of type check and because sometimes we need type\n     /// inference to have completed before we can determine which\n     /// constraints to add.\n-    pub fn regionck_fn(&self, fn_id: hir::HirId, body: &'tcx hir::Body) {\n+    pub fn regionck_fn(&self, fn_id: hir::HirId, body: &'tcx hir::Body<'tcx>) {\n         debug!(\"regionck_fn(id={})\", fn_id);\n         let subject = self.tcx.hir().body_owner_def_id(body.id());\n         let hir_id = body.value.hir_id;\n@@ -300,7 +300,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n     fn visit_fn_body(\n         &mut self,\n         id: hir::HirId, // the id of the fn itself\n-        body: &'tcx hir::Body,\n+        body: &'tcx hir::Body<'tcx>,\n         span: Span,\n     ) {\n         // When we enter a function, we can derive"}, {"sha": "2788aa6b83ef04d1c86a20f7b423ad9cdf5bd1e1", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "patch": "@@ -46,7 +46,7 @@ use syntax::ast;\n use syntax_pos::Span;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n-    pub fn closure_analyze(&self, body: &'tcx hir::Body) {\n+    pub fn closure_analyze(&self, body: &'tcx hir::Body<'tcx>) {\n         InferBorrowKindVisitor { fcx: self }.visit_body(body);\n \n         // it's our job to process these.\n@@ -81,7 +81,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         closure_hir_id: hir::HirId,\n         span: Span,\n-        body: &hir::Body,\n+        body: &hir::Body<'_>,\n         capture_clause: hir::CaptureBy,\n     ) {\n "}, {"sha": "27ce7d7c3e0b53020257407ded2f02c3d337e36e", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "patch": "@@ -32,7 +32,7 @@ use std::mem;\n // resolve_type_vars_in_body, which creates a new TypeTables which\n // doesn't contain any inference types.\n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n-    pub fn resolve_type_vars_in_body(&self, body: &'tcx hir::Body) -> &'tcx ty::TypeckTables<'tcx> {\n+    pub fn resolve_type_vars_in_body(&self, body: &'tcx hir::Body<'tcx>) -> &'tcx ty::TypeckTables<'tcx> {\n         let item_id = self.tcx.hir().body_owner(body.id());\n         let item_def_id = self.tcx.hir().local_def_id(item_id);\n \n@@ -41,7 +41,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let rustc_dump_user_substs = self.tcx.has_attr(item_def_id, sym::rustc_dump_user_substs);\n \n         let mut wbcx = WritebackCx::new(self, body, rustc_dump_user_substs);\n-        for param in &body.params {\n+        for param in body.params {\n             wbcx.visit_node_id(param.pat.span, param.hir_id);\n         }\n         // Type only exists for constants and statics, not functions.\n@@ -102,15 +102,15 @@ struct WritebackCx<'cx, 'tcx> {\n \n     tables: ty::TypeckTables<'tcx>,\n \n-    body: &'tcx hir::Body,\n+    body: &'tcx hir::Body<'tcx>,\n \n     rustc_dump_user_substs: bool,\n }\n \n impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n     fn new(\n         fcx: &'cx FnCtxt<'cx, 'tcx>,\n-        body: &'tcx hir::Body,\n+        body: &'tcx hir::Body<'tcx>,\n         rustc_dump_user_substs: bool,\n     ) -> WritebackCx<'cx, 'tcx> {\n         let owner = body.id().hir_id;\n@@ -265,7 +265,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n         match e.kind {\n             hir::ExprKind::Closure(_, _, body, _, _) => {\n                 let body = self.fcx.tcx.hir().body(body);\n-                for param in &body.params {\n+                for param in body.params {\n                     self.visit_node_id(e.span, param.hir_id);\n                 }\n \n@@ -698,14 +698,14 @@ struct Resolver<'cx, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     infcx: &'cx InferCtxt<'cx, 'tcx>,\n     span: &'cx dyn Locatable,\n-    body: &'tcx hir::Body,\n+    body: &'tcx hir::Body<'tcx>,\n }\n \n impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n     fn new(\n         fcx: &'cx FnCtxt<'cx, 'tcx>,\n         span: &'cx dyn Locatable,\n-        body: &'tcx hir::Body,\n+        body: &'tcx hir::Body<'tcx>,\n     ) -> Resolver<'cx, 'tcx> {\n         Resolver {\n             tcx: fcx.tcx,"}, {"sha": "7e67d30db18435b49000b22655849ce2ef0a548c", "filename": "src/librustc_typeck/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9694ab9e18f0b6b306dafaaccb8cc33a293302bd/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs?ref=9694ab9e18f0b6b306dafaaccb8cc33a293302bd", "patch": "@@ -131,10 +131,10 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         }\n     }\n \n-    pub fn consume_body(&mut self, body: &hir::Body) {\n+    pub fn consume_body(&mut self, body: &hir::Body<'_>) {\n         debug!(\"consume_body(body={:?})\", body);\n \n-        for param in &body.params {\n+        for param in body.params {\n             let param_ty = return_if_err!(self.mc.pat_ty_adjusted(&param.pat));\n             debug!(\"consume_body: param_ty = {:?}\", param_ty);\n "}]}