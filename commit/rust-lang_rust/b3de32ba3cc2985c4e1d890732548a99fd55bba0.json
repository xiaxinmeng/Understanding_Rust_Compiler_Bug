{"sha": "b3de32ba3cc2985c4e1d890732548a99fd55bba0", "node_id": "C_kwDOAAsO6NoAKGIzZGUzMmJhM2NjMjk4NWM0ZTFkODkwNzMyNTQ4YTk5ZmQ1NWJiYTA", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-04-04T00:28:47Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-04-24T13:15:26Z"}, "message": "Add `rename_lint` command", "tree": {"sha": "70e1e94751406544f229b50f7588aee839ce5e9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70e1e94751406544f229b50f7588aee839ce5e9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3de32ba3cc2985c4e1d890732548a99fd55bba0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3de32ba3cc2985c4e1d890732548a99fd55bba0", "html_url": "https://github.com/rust-lang/rust/commit/b3de32ba3cc2985c4e1d890732548a99fd55bba0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3de32ba3cc2985c4e1d890732548a99fd55bba0/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5ef542d376877380fda93ac7c457b5b8ba66833", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5ef542d376877380fda93ac7c457b5b8ba66833", "html_url": "https://github.com/rust-lang/rust/commit/d5ef542d376877380fda93ac7c457b5b8ba66833"}], "stats": {"total": 741, "additions": 523, "deletions": 218}, "files": [{"sha": "7bca17dc0fdc190711a541ca1985ed74d06c295e", "filename": "clippy_dev/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3de32ba3cc2985c4e1d890732548a99fd55bba0/clippy_dev%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b3de32ba3cc2985c4e1d890732548a99fd55bba0/clippy_dev%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FCargo.toml?ref=b3de32ba3cc2985c4e1d890732548a99fd55bba0", "patch": "@@ -4,6 +4,7 @@ version = \"0.0.1\"\n edition = \"2021\"\n \n [dependencies]\n+aho-corasick = \"0.7\"\n clap = \"2.33\"\n indoc = \"1.0\"\n itertools = \"0.10.1\""}, {"sha": "c4bb0b97e25f80e0c79867de1e439099a12d968c", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3de32ba3cc2985c4e1d890732548a99fd55bba0/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3de32ba3cc2985c4e1d890732548a99fd55bba0/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=b3de32ba3cc2985c4e1d890732548a99fd55bba0", "patch": "@@ -1,3 +1,4 @@\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(once_cell)]\n #![feature(rustc_private)]"}, {"sha": "b30f67e69599b3af50b5843c58d78914683db450", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b3de32ba3cc2985c4e1d890732548a99fd55bba0/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3de32ba3cc2985c4e1d890732548a99fd55bba0/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=b3de32ba3cc2985c4e1d890732548a99fd55bba0", "patch": "@@ -18,9 +18,9 @@ fn main() {\n             if matches.is_present(\"print-only\") {\n                 update_lints::print_lints();\n             } else if matches.is_present(\"check\") {\n-                update_lints::run(update_lints::UpdateMode::Check);\n+                update_lints::update(update_lints::UpdateMode::Check);\n             } else {\n-                update_lints::run(update_lints::UpdateMode::Change);\n+                update_lints::update(update_lints::UpdateMode::Change);\n             }\n         },\n         (\"new_lint\", Some(matches)) => {\n@@ -30,7 +30,7 @@ fn main() {\n                 matches.value_of(\"category\"),\n                 matches.is_present(\"msrv\"),\n             ) {\n-                Ok(_) => update_lints::run(update_lints::UpdateMode::Change),\n+                Ok(_) => update_lints::update(update_lints::UpdateMode::Change),\n                 Err(e) => eprintln!(\"Unable to create lint: {}\", e),\n             }\n         },\n@@ -59,6 +59,12 @@ fn main() {\n             let filename = matches.value_of(\"filename\").unwrap();\n             lint::run(filename);\n         },\n+        (\"rename_lint\", Some(matches)) => {\n+            let old_name = matches.value_of(\"old_name\").unwrap();\n+            let new_name = matches.value_of(\"new_name\").unwrap_or(old_name);\n+            let uplift = matches.is_present(\"uplift\");\n+            update_lints::rename(old_name, new_name, uplift);\n+        },\n         _ => {},\n     }\n }\n@@ -232,5 +238,26 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                         .help(\"The path to a file to lint\"),\n                 ),\n         )\n+        .subcommand(\n+            SubCommand::with_name(\"rename_lint\")\n+                .about(\"Renames the given lint\")\n+                .arg(\n+                    Arg::with_name(\"old_name\")\n+                        .index(1)\n+                        .required(true)\n+                        .help(\"The name of the lint to rename\"),\n+                )\n+                .arg(\n+                    Arg::with_name(\"new_name\")\n+                        .index(2)\n+                        .required_unless(\"uplift\")\n+                        .help(\"The new name of the lint\"),\n+                )\n+                .arg(\n+                    Arg::with_name(\"uplift\")\n+                        .long(\"uplift\")\n+                        .help(\"This lint will be uplifted into rustc\"),\n+                ),\n+        )\n         .get_matches()\n }"}, {"sha": "bbce3875e1dba41d172a0689fdc3a309f0254582", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 291, "deletions": 17, "changes": 308, "blob_url": "https://github.com/rust-lang/rust/blob/b3de32ba3cc2985c4e1d890732548a99fd55bba0/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3de32ba3cc2985c4e1d890732548a99fd55bba0/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=b3de32ba3cc2985c4e1d890732548a99fd55bba0", "patch": "@@ -1,11 +1,13 @@\n-use core::fmt::Write;\n+use aho_corasick::AhoCorasickBuilder;\n+use core::fmt::Write as _;\n use itertools::Itertools;\n use rustc_lexer::{tokenize, unescape, LiteralKind, TokenKind};\n use std::collections::{HashMap, HashSet};\n use std::ffi::OsStr;\n use std::fs;\n-use std::path::Path;\n-use walkdir::WalkDir;\n+use std::io::{self, Read as _, Seek as _, Write as _};\n+use std::path::{Path, PathBuf};\n+use walkdir::{DirEntry, WalkDir};\n \n use crate::clippy_project_root;\n \n@@ -30,12 +32,19 @@ pub enum UpdateMode {\n /// # Panics\n ///\n /// Panics if a file path could not read from or then written to\n-#[allow(clippy::too_many_lines)]\n-pub fn run(update_mode: UpdateMode) {\n+pub fn update(update_mode: UpdateMode) {\n     let (lints, deprecated_lints, renamed_lints) = gather_all();\n+    generate_lint_files(update_mode, &lints, &deprecated_lints, &renamed_lints);\n+}\n \n-    let internal_lints = Lint::internal_lints(&lints);\n-    let usable_lints = Lint::usable_lints(&lints);\n+fn generate_lint_files(\n+    update_mode: UpdateMode,\n+    lints: &[Lint],\n+    deprecated_lints: &[DeprecatedLint],\n+    renamed_lints: &[RenamedLint],\n+) {\n+    let internal_lints = Lint::internal_lints(lints);\n+    let usable_lints = Lint::usable_lints(lints);\n     let mut sorted_usable_lints = usable_lints.clone();\n     sorted_usable_lints.sort_by_key(|lint| lint.name.clone());\n \n@@ -87,7 +96,7 @@ pub fn run(update_mode: UpdateMode) {\n     process_file(\n         \"clippy_lints/src/lib.deprecated.rs\",\n         update_mode,\n-        &gen_deprecated(&deprecated_lints),\n+        &gen_deprecated(deprecated_lints),\n     );\n \n     let all_group_lints = usable_lints.iter().filter(|l| {\n@@ -108,10 +117,10 @@ pub fn run(update_mode: UpdateMode) {\n         );\n     }\n \n-    let content = gen_deprecated_lints_test(&deprecated_lints);\n+    let content = gen_deprecated_lints_test(deprecated_lints);\n     process_file(\"tests/ui/deprecated.rs\", update_mode, &content);\n \n-    let content = gen_renamed_lints_test(&renamed_lints);\n+    let content = gen_renamed_lints_test(renamed_lints);\n     process_file(\"tests/ui/rename.rs\", update_mode, &content);\n }\n \n@@ -134,6 +143,209 @@ pub fn print_lints() {\n     println!(\"there are {} lints\", usable_lint_count);\n }\n \n+/// Runs the `rename_lint` command.\n+///\n+/// This does the following:\n+/// * Adds an entry to `renamed_lints.rs`.\n+/// * Renames all lint attributes to the new name (e.g. `#[allow(clippy::lint_name)]`).\n+/// * Renames the lint struct to the new name.\n+/// * Renames the module containing the lint struct to the new name if it shares a name with the\n+///   lint.\n+///\n+/// # Panics\n+/// Panics for the following conditions:\n+/// * If a file path could not read from or then written to\n+/// * If either lint name has a prefix\n+/// * If `old_name` doesn't name an existing lint.\n+/// * If `old_name` names a deprecated or renamed lint.\n+#[allow(clippy::too_many_lines)]\n+pub fn rename(old_name: &str, new_name: &str, uplift: bool) {\n+    if let Some((prefix, _)) = old_name.split_once(\"::\") {\n+        panic!(\"`{}` should not contain the `{}` prefix\", old_name, prefix);\n+    }\n+    if let Some((prefix, _)) = new_name.split_once(\"::\") {\n+        panic!(\"`{}` should not contain the `{}` prefix\", new_name, prefix);\n+    }\n+\n+    let (mut lints, deprecated_lints, mut renamed_lints) = gather_all();\n+    let mut old_lint_index = None;\n+    let mut found_new_name = false;\n+    for (i, lint) in lints.iter().enumerate() {\n+        if lint.name == old_name {\n+            old_lint_index = Some(i);\n+        } else if lint.name == new_name {\n+            found_new_name = true;\n+        }\n+    }\n+    let old_lint_index = old_lint_index.unwrap_or_else(|| panic!(\"could not find lint `{}`\", old_name));\n+\n+    let lint = RenamedLint {\n+        old_name: format!(\"clippy::{}\", old_name),\n+        new_name: if uplift {\n+            new_name.into()\n+        } else {\n+            format!(\"clippy::{}\", new_name)\n+        },\n+    };\n+\n+    // Renamed lints and deprecated lints shouldn't have been found in the lint list, but check just in\n+    // case.\n+    assert!(\n+        !renamed_lints.iter().any(|l| lint.old_name == l.old_name),\n+        \"`{}` has already been renamed\",\n+        old_name\n+    );\n+    assert!(\n+        !deprecated_lints.iter().any(|l| lint.old_name == l.name),\n+        \"`{}` has already been deprecated\",\n+        old_name\n+    );\n+\n+    // Update all lint level attributes. (`clippy::lint_name`)\n+    for file in WalkDir::new(clippy_project_root())\n+        .into_iter()\n+        .map(Result::unwrap)\n+        .filter(|f| {\n+            let name = f.path().file_name();\n+            let ext = f.path().extension();\n+            (ext == Some(OsStr::new(\"rs\")) || ext == Some(OsStr::new(\"fixed\")))\n+                && name != Some(OsStr::new(\"rename.rs\"))\n+                && name != Some(OsStr::new(\"renamed_lints.rs\"))\n+        })\n+    {\n+        rewrite_file(file.path(), |s| {\n+            replace_ident_like(s, &[(&lint.old_name, &lint.new_name)])\n+        });\n+    }\n+\n+    renamed_lints.push(lint);\n+    renamed_lints.sort_by(|lhs, rhs| {\n+        lhs.new_name\n+            .starts_with(\"clippy::\")\n+            .cmp(&rhs.new_name.starts_with(\"clippy::\"))\n+            .reverse()\n+            .then_with(|| lhs.old_name.cmp(&rhs.old_name))\n+    });\n+\n+    write_file(\n+        Path::new(\"clippy_lints/src/renamed_lints.rs\"),\n+        &gen_renamed_lints_list(&renamed_lints),\n+    );\n+\n+    if uplift {\n+        write_file(Path::new(\"tests/ui/rename.rs\"), &gen_renamed_lints_test(&renamed_lints));\n+        println!(\n+            \"`{}` has be uplifted. All the code inside `clippy_lints` related to it needs to be removed manually.\",\n+            old_name\n+        );\n+    } else if found_new_name {\n+        write_file(Path::new(\"tests/ui/rename.rs\"), &gen_renamed_lints_test(&renamed_lints));\n+        println!(\n+            \"`{}` is already defined. The old linting code inside `clippy_lints` needs to be updated/removed manually.\",\n+            new_name\n+        );\n+    } else {\n+        // Rename the lint struct and source files sharing a name with the lint.\n+        let lint = &mut lints[old_lint_index];\n+        let old_name_upper = old_name.to_uppercase();\n+        let new_name_upper = new_name.to_uppercase();\n+        lint.name = new_name.into();\n+\n+        // Rename test files. only rename `.stderr` and `.fixed` files if the new test name doesn't exist.\n+        if try_rename_file(\n+            Path::new(&format!(\"tests/ui/{}.rs\", old_name)),\n+            Path::new(&format!(\"tests/ui/{}.rs\", new_name)),\n+        ) {\n+            try_rename_file(\n+                Path::new(&format!(\"tests/ui/{}.stderr\", old_name)),\n+                Path::new(&format!(\"tests/ui/{}.stderr\", new_name)),\n+            );\n+            try_rename_file(\n+                Path::new(&format!(\"tests/ui/{}.fixed\", old_name)),\n+                Path::new(&format!(\"tests/ui/{}.fixed\", new_name)),\n+            );\n+        }\n+\n+        // Try to rename the file containing the lint if the file name matches the lint's name.\n+        let replacements;\n+        let replacements = if lint.module == old_name\n+            && try_rename_file(\n+                Path::new(&format!(\"clippy_lints/src/{}.rs\", old_name)),\n+                Path::new(&format!(\"clippy_lints/src/{}.rs\", new_name)),\n+            ) {\n+            // Edit the module name in the lint list. Note there could be multiple lints.\n+            for lint in lints.iter_mut().filter(|l| l.module == old_name) {\n+                lint.module = new_name.into();\n+            }\n+            replacements = [(&*old_name_upper, &*new_name_upper), (old_name, new_name)];\n+            replacements.as_slice()\n+        } else if !lint.module.contains(\"::\")\n+            // Catch cases like `methods/lint_name.rs` where the lint is stored in `methods/mod.rs`\n+            && try_rename_file(\n+                Path::new(&format!(\"clippy_lints/src/{}/{}.rs\", lint.module, old_name)),\n+                Path::new(&format!(\"clippy_lints/src/{}/{}.rs\", lint.module, new_name)),\n+            )\n+        {\n+            // Edit the module name in the lint list. Note there could be multiple lints, or none.\n+            let renamed_mod = format!(\"{}::{}\", lint.module, old_name);\n+            for lint in lints.iter_mut().filter(|l| l.module == renamed_mod) {\n+                lint.module = format!(\"{}::{}\", lint.module, new_name);\n+            }\n+            replacements = [(&*old_name_upper, &*new_name_upper), (old_name, new_name)];\n+            replacements.as_slice()\n+        } else {\n+            replacements = [(&*old_name_upper, &*new_name_upper), (\"\", \"\")];\n+            &replacements[0..1]\n+        };\n+\n+        // Don't change `clippy_utils/src/renamed_lints.rs` here as it would try to edit the lint being\n+        // renamed.\n+        for (_, file) in clippy_lints_src_files().filter(|(rel_path, _)| rel_path != OsStr::new(\"renamed_lints.rs\")) {\n+            rewrite_file(file.path(), |s| replace_ident_like(s, replacements));\n+        }\n+\n+        generate_lint_files(UpdateMode::Change, &lints, &deprecated_lints, &renamed_lints);\n+        println!(\"{} has been successfully renamed\", old_name);\n+    }\n+\n+    println!(\"note: `cargo uitest` still needs to be run to update the test results\");\n+}\n+\n+/// Replace substrings if they aren't bordered by identifier characters. Returns `None` if there\n+/// were no replacements.\n+fn replace_ident_like(contents: &str, replacements: &[(&str, &str)]) -> Option<String> {\n+    fn is_ident_char(c: u8) -> bool {\n+        matches!(c, b'a'..=b'z' | b'A'..=b'Z' | b'0'..=b'9' | b'_')\n+    }\n+\n+    let searcher = AhoCorasickBuilder::new()\n+        .dfa(true)\n+        .match_kind(aho_corasick::MatchKind::LeftmostLongest)\n+        .build_with_size::<u16, _, _>(replacements.iter().map(|&(x, _)| x.as_bytes()))\n+        .unwrap();\n+\n+    let mut result = String::with_capacity(contents.len() + 1024);\n+    let mut pos = 0;\n+    let mut edited = false;\n+    for m in searcher.find_iter(contents) {\n+        let (old, new) = replacements[m.pattern()];\n+        result.push_str(&contents[pos..m.start()]);\n+        result.push_str(\n+            if !is_ident_char(contents.as_bytes().get(m.start().wrapping_sub(1)).copied().unwrap_or(0))\n+                && !is_ident_char(contents.as_bytes().get(m.end()).copied().unwrap_or(0))\n+            {\n+                edited = true;\n+                new\n+            } else {\n+                old\n+            },\n+        );\n+        pos = m.end();\n+    }\n+    result.push_str(&contents[pos..]);\n+    edited.then(|| result)\n+}\n+\n fn round_to_fifty(count: usize) -> usize {\n     count / 50 * 50\n }\n@@ -323,19 +535,27 @@ fn gen_renamed_lints_test(lints: &[RenamedLint]) -> String {\n     res\n }\n \n+fn gen_renamed_lints_list(lints: &[RenamedLint]) -> String {\n+    const HEADER: &str = \"\\\n+        // This file is managed by `cargo dev rename_lint`. Prefer using that when possible.\\n\\n\\\n+        #[rustfmt::skip]\\n\\\n+        pub static RENAMED_LINTS: &[(&str, &str)] = &[\\n\";\n+\n+    let mut res = String::from(HEADER);\n+    for lint in lints {\n+        writeln!(res, \"    (\\\"{}\\\", \\\"{}\\\"),\", lint.old_name, lint.new_name).unwrap();\n+    }\n+    res.push_str(\"];\\n\");\n+    res\n+}\n+\n /// Gathers all lints defined in `clippy_lints/src`\n fn gather_all() -> (Vec<Lint>, Vec<DeprecatedLint>, Vec<RenamedLint>) {\n     let mut lints = Vec::with_capacity(1000);\n     let mut deprecated_lints = Vec::with_capacity(50);\n     let mut renamed_lints = Vec::with_capacity(50);\n-    let root_path = clippy_project_root().join(\"clippy_lints/src\");\n \n-    for (rel_path, file) in WalkDir::new(&root_path)\n-        .into_iter()\n-        .map(Result::unwrap)\n-        .filter(|f| f.path().extension() == Some(OsStr::new(\"rs\")))\n-        .map(|f| (f.path().strip_prefix(&root_path).unwrap().to_path_buf(), f))\n-    {\n+    for (rel_path, file) in clippy_lints_src_files() {\n         let path = file.path();\n         let contents =\n             fs::read_to_string(path).unwrap_or_else(|e| panic!(\"Cannot read from `{}`: {}\", path.display(), e));\n@@ -362,6 +582,14 @@ fn gather_all() -> (Vec<Lint>, Vec<DeprecatedLint>, Vec<RenamedLint>) {\n     (lints, deprecated_lints, renamed_lints)\n }\n \n+fn clippy_lints_src_files() -> impl Iterator<Item = (PathBuf, DirEntry)> {\n+    let root_path = clippy_project_root().join(\"clippy_lints/src\");\n+    let iter = WalkDir::new(&root_path).into_iter();\n+    iter.map(Result::unwrap)\n+        .filter(|f| f.path().extension() == Some(OsStr::new(\"rs\")))\n+        .map(move |f| (f.path().strip_prefix(&root_path).unwrap().to_path_buf(), f))\n+}\n+\n macro_rules! match_tokens {\n     ($iter:ident, $($token:ident $({$($fields:tt)*})? $(($capture:ident))?)*) => {\n          {\n@@ -526,6 +754,52 @@ fn replace_region_in_text<'a>(\n     Ok(res)\n }\n \n+fn try_rename_file(old_name: &Path, new_name: &Path) -> bool {\n+    match fs::OpenOptions::new().create_new(true).write(true).open(new_name) {\n+        Ok(file) => drop(file),\n+        Err(e) if matches!(e.kind(), io::ErrorKind::AlreadyExists | io::ErrorKind::NotFound) => return false,\n+        Err(e) => panic_file(e, new_name, \"create\"),\n+    };\n+    match fs::rename(old_name, new_name) {\n+        Ok(()) => true,\n+        Err(e) => {\n+            drop(fs::remove_file(new_name));\n+            if e.kind() == io::ErrorKind::NotFound {\n+                false\n+            } else {\n+                panic_file(e, old_name, \"rename\");\n+            }\n+        },\n+    }\n+}\n+\n+#[allow(clippy::needless_pass_by_value)]\n+fn panic_file(error: io::Error, name: &Path, action: &str) -> ! {\n+    panic!(\"failed to {} file `{}`: {}\", action, name.display(), error)\n+}\n+\n+fn rewrite_file(path: &Path, f: impl FnOnce(&str) -> Option<String>) {\n+    let mut file = fs::OpenOptions::new()\n+        .write(true)\n+        .read(true)\n+        .open(path)\n+        .unwrap_or_else(|e| panic_file(e, path, \"open\"));\n+    let mut buf = String::new();\n+    file.read_to_string(&mut buf)\n+        .unwrap_or_else(|e| panic_file(e, path, \"read\"));\n+    if let Some(new_contents) = f(&buf) {\n+        file.rewind().unwrap_or_else(|e| panic_file(e, path, \"write\"));\n+        file.write_all(new_contents.as_bytes())\n+            .unwrap_or_else(|e| panic_file(e, path, \"write\"));\n+        file.set_len(new_contents.len() as u64)\n+            .unwrap_or_else(|e| panic_file(e, path, \"write\"));\n+    }\n+}\n+\n+fn write_file(path: &Path, contents: &str) {\n+    fs::write(path, contents).unwrap_or_else(|e| panic_file(e, path, \"write\"));\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "bfc03116fe2d9542678069c605ebf0088137b99a", "filename": "clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b3de32ba3cc2985c4e1d890732548a99fd55bba0/clippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3de32ba3cc2985c4e1d890732548a99fd55bba0/clippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Frenamed_lints.rs?ref=b3de32ba3cc2985c4e1d890732548a99fd55bba0", "patch": "@@ -1,37 +1,39 @@\n+// This file is managed by `cargo dev rename_lint`. Prefer using that when possible.\n+\n+#[rustfmt::skip]\n pub static RENAMED_LINTS: &[(&str, &str)] = &[\n-    (\"clippy::stutter\", \"clippy::module_name_repetitions\"),\n-    (\"clippy::new_without_default_derive\", \"clippy::new_without_default\"),\n-    (\"clippy::cyclomatic_complexity\", \"clippy::cognitive_complexity\"),\n-    (\"clippy::const_static_lifetime\", \"clippy::redundant_static_lifetimes\"),\n-    (\"clippy::option_and_then_some\", \"clippy::bind_instead_of_map\"),\n-    (\"clippy::box_vec\", \"clippy::box_collection\"),\n     (\"clippy::block_in_if_condition_expr\", \"clippy::blocks_in_if_conditions\"),\n     (\"clippy::block_in_if_condition_stmt\", \"clippy::blocks_in_if_conditions\"),\n-    (\"clippy::option_map_unwrap_or\", \"clippy::map_unwrap_or\"),\n-    (\"clippy::option_map_unwrap_or_else\", \"clippy::map_unwrap_or\"),\n-    (\"clippy::result_map_unwrap_or_else\", \"clippy::map_unwrap_or\"),\n-    (\"clippy::option_unwrap_used\", \"clippy::unwrap_used\"),\n-    (\"clippy::result_unwrap_used\", \"clippy::unwrap_used\"),\n-    (\"clippy::option_expect_used\", \"clippy::expect_used\"),\n-    (\"clippy::result_expect_used\", \"clippy::expect_used\"),\n+    (\"clippy::box_vec\", \"clippy::box_collection\"),\n+    (\"clippy::const_static_lifetime\", \"clippy::redundant_static_lifetimes\"),\n+    (\"clippy::cyclomatic_complexity\", \"clippy::cognitive_complexity\"),\n+    (\"clippy::disallowed_method\", \"clippy::disallowed_methods\"),\n+    (\"clippy::disallowed_type\", \"clippy::disallowed_types\"),\n     (\"clippy::for_loop_over_option\", \"clippy::for_loops_over_fallibles\"),\n     (\"clippy::for_loop_over_result\", \"clippy::for_loops_over_fallibles\"),\n     (\"clippy::identity_conversion\", \"clippy::useless_conversion\"),\n-    (\"clippy::zero_width_space\", \"clippy::invisible_characters\"),\n-    (\"clippy::single_char_push_str\", \"clippy::single_char_add_str\"),\n     (\"clippy::if_let_some_result\", \"clippy::match_result_ok\"),\n-    (\"clippy::disallowed_type\", \"clippy::disallowed_types\"),\n-    (\"clippy::disallowed_method\", \"clippy::disallowed_methods\"),\n+    (\"clippy::new_without_default_derive\", \"clippy::new_without_default\"),\n+    (\"clippy::option_and_then_some\", \"clippy::bind_instead_of_map\"),\n+    (\"clippy::option_expect_used\", \"clippy::expect_used\"),\n+    (\"clippy::option_map_unwrap_or\", \"clippy::map_unwrap_or\"),\n+    (\"clippy::option_map_unwrap_or_else\", \"clippy::map_unwrap_or\"),\n+    (\"clippy::option_unwrap_used\", \"clippy::unwrap_used\"),\n     (\"clippy::ref_in_deref\", \"clippy::needless_borrow\"),\n+    (\"clippy::result_expect_used\", \"clippy::expect_used\"),\n+    (\"clippy::result_map_unwrap_or_else\", \"clippy::map_unwrap_or\"),\n+    (\"clippy::result_unwrap_used\", \"clippy::unwrap_used\"),\n+    (\"clippy::single_char_push_str\", \"clippy::single_char_add_str\"),\n+    (\"clippy::stutter\", \"clippy::module_name_repetitions\"),\n     (\"clippy::to_string_in_display\", \"clippy::recursive_format_impl\"),\n-    // uplifted lints\n-    (\"clippy::invalid_ref\", \"invalid_value\"),\n-    (\"clippy::into_iter_on_array\", \"array_into_iter\"),\n-    (\"clippy::unused_label\", \"unused_labels\"),\n+    (\"clippy::zero_width_space\", \"clippy::invisible_characters\"),\n     (\"clippy::drop_bounds\", \"drop_bounds\"),\n-    (\"clippy::temporary_cstring_as_ptr\", \"temporary_cstring_as_ptr\"),\n-    (\"clippy::panic_params\", \"non_fmt_panics\"),\n-    (\"clippy::unknown_clippy_lints\", \"unknown_lints\"),\n+    (\"clippy::into_iter_on_array\", \"array_into_iter\"),\n     (\"clippy::invalid_atomic_ordering\", \"invalid_atomic_ordering\"),\n+    (\"clippy::invalid_ref\", \"invalid_value\"),\n     (\"clippy::mem_discriminant_non_enum\", \"enum_intrinsics_non_enums\"),\n+    (\"clippy::panic_params\", \"non_fmt_panics\"),\n+    (\"clippy::temporary_cstring_as_ptr\", \"temporary_cstring_as_ptr\"),\n+    (\"clippy::unknown_clippy_lints\", \"unknown_lints\"),\n+    (\"clippy::unused_label\", \"unused_labels\"),\n ];"}, {"sha": "9c4079ad6d306a39a07518382598878b349d39f9", "filename": "tests/ui/rename.fixed", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/b3de32ba3cc2985c4e1d890732548a99fd55bba0/tests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b3de32ba3cc2985c4e1d890732548a99fd55bba0/tests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.fixed?ref=b3de32ba3cc2985c4e1d890732548a99fd55bba0", "patch": "@@ -4,67 +4,67 @@\n \n // run-rustfix\n \n-#![allow(clippy::module_name_repetitions)]\n-#![allow(clippy::new_without_default)]\n-#![allow(clippy::cognitive_complexity)]\n-#![allow(clippy::redundant_static_lifetimes)]\n-#![allow(clippy::bind_instead_of_map)]\n-#![allow(clippy::box_collection)]\n #![allow(clippy::blocks_in_if_conditions)]\n-#![allow(clippy::map_unwrap_or)]\n-#![allow(clippy::unwrap_used)]\n-#![allow(clippy::expect_used)]\n+#![allow(clippy::box_collection)]\n+#![allow(clippy::redundant_static_lifetimes)]\n+#![allow(clippy::cognitive_complexity)]\n+#![allow(clippy::disallowed_methods)]\n+#![allow(clippy::disallowed_types)]\n #![allow(clippy::for_loops_over_fallibles)]\n #![allow(clippy::useless_conversion)]\n-#![allow(clippy::invisible_characters)]\n-#![allow(clippy::single_char_add_str)]\n #![allow(clippy::match_result_ok)]\n-#![allow(clippy::disallowed_types)]\n-#![allow(clippy::disallowed_methods)]\n+#![allow(clippy::new_without_default)]\n+#![allow(clippy::bind_instead_of_map)]\n+#![allow(clippy::expect_used)]\n+#![allow(clippy::map_unwrap_or)]\n+#![allow(clippy::unwrap_used)]\n #![allow(clippy::needless_borrow)]\n+#![allow(clippy::single_char_add_str)]\n+#![allow(clippy::module_name_repetitions)]\n #![allow(clippy::recursive_format_impl)]\n-#![allow(invalid_value)]\n-#![allow(array_into_iter)]\n-#![allow(unused_labels)]\n+#![allow(clippy::invisible_characters)]\n #![allow(drop_bounds)]\n-#![allow(temporary_cstring_as_ptr)]\n-#![allow(non_fmt_panics)]\n-#![allow(unknown_lints)]\n+#![allow(array_into_iter)]\n #![allow(invalid_atomic_ordering)]\n+#![allow(invalid_value)]\n #![allow(enum_intrinsics_non_enums)]\n-#![warn(clippy::module_name_repetitions)]\n-#![warn(clippy::new_without_default)]\n-#![warn(clippy::cognitive_complexity)]\n-#![warn(clippy::redundant_static_lifetimes)]\n-#![warn(clippy::bind_instead_of_map)]\n-#![warn(clippy::box_collection)]\n+#![allow(non_fmt_panics)]\n+#![allow(temporary_cstring_as_ptr)]\n+#![allow(unknown_lints)]\n+#![allow(unused_labels)]\n #![warn(clippy::blocks_in_if_conditions)]\n #![warn(clippy::blocks_in_if_conditions)]\n-#![warn(clippy::map_unwrap_or)]\n-#![warn(clippy::map_unwrap_or)]\n-#![warn(clippy::map_unwrap_or)]\n-#![warn(clippy::unwrap_used)]\n-#![warn(clippy::unwrap_used)]\n-#![warn(clippy::expect_used)]\n-#![warn(clippy::expect_used)]\n+#![warn(clippy::box_collection)]\n+#![warn(clippy::redundant_static_lifetimes)]\n+#![warn(clippy::cognitive_complexity)]\n+#![warn(clippy::disallowed_methods)]\n+#![warn(clippy::disallowed_types)]\n #![warn(clippy::for_loops_over_fallibles)]\n #![warn(clippy::for_loops_over_fallibles)]\n #![warn(clippy::useless_conversion)]\n-#![warn(clippy::invisible_characters)]\n-#![warn(clippy::single_char_add_str)]\n #![warn(clippy::match_result_ok)]\n-#![warn(clippy::disallowed_types)]\n-#![warn(clippy::disallowed_methods)]\n+#![warn(clippy::new_without_default)]\n+#![warn(clippy::bind_instead_of_map)]\n+#![warn(clippy::expect_used)]\n+#![warn(clippy::map_unwrap_or)]\n+#![warn(clippy::map_unwrap_or)]\n+#![warn(clippy::unwrap_used)]\n #![warn(clippy::needless_borrow)]\n+#![warn(clippy::expect_used)]\n+#![warn(clippy::map_unwrap_or)]\n+#![warn(clippy::unwrap_used)]\n+#![warn(clippy::single_char_add_str)]\n+#![warn(clippy::module_name_repetitions)]\n #![warn(clippy::recursive_format_impl)]\n-#![warn(invalid_value)]\n-#![warn(array_into_iter)]\n-#![warn(unused_labels)]\n+#![warn(clippy::invisible_characters)]\n #![warn(drop_bounds)]\n-#![warn(temporary_cstring_as_ptr)]\n-#![warn(non_fmt_panics)]\n-#![warn(unknown_lints)]\n+#![warn(array_into_iter)]\n #![warn(invalid_atomic_ordering)]\n+#![warn(invalid_value)]\n #![warn(enum_intrinsics_non_enums)]\n+#![warn(non_fmt_panics)]\n+#![warn(temporary_cstring_as_ptr)]\n+#![warn(unknown_lints)]\n+#![warn(unused_labels)]\n \n fn main() {}"}, {"sha": "e83e66b7fbd4211dbfc80dd2c903a5fcb807ca94", "filename": "tests/ui/rename.rs", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/b3de32ba3cc2985c4e1d890732548a99fd55bba0/tests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3de32ba3cc2985c4e1d890732548a99fd55bba0/tests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.rs?ref=b3de32ba3cc2985c4e1d890732548a99fd55bba0", "patch": "@@ -4,67 +4,67 @@\n \n // run-rustfix\n \n-#![allow(clippy::module_name_repetitions)]\n-#![allow(clippy::new_without_default)]\n-#![allow(clippy::cognitive_complexity)]\n-#![allow(clippy::redundant_static_lifetimes)]\n-#![allow(clippy::bind_instead_of_map)]\n-#![allow(clippy::box_collection)]\n #![allow(clippy::blocks_in_if_conditions)]\n-#![allow(clippy::map_unwrap_or)]\n-#![allow(clippy::unwrap_used)]\n-#![allow(clippy::expect_used)]\n+#![allow(clippy::box_collection)]\n+#![allow(clippy::redundant_static_lifetimes)]\n+#![allow(clippy::cognitive_complexity)]\n+#![allow(clippy::disallowed_methods)]\n+#![allow(clippy::disallowed_types)]\n #![allow(clippy::for_loops_over_fallibles)]\n #![allow(clippy::useless_conversion)]\n-#![allow(clippy::invisible_characters)]\n-#![allow(clippy::single_char_add_str)]\n #![allow(clippy::match_result_ok)]\n-#![allow(clippy::disallowed_types)]\n-#![allow(clippy::disallowed_methods)]\n+#![allow(clippy::new_without_default)]\n+#![allow(clippy::bind_instead_of_map)]\n+#![allow(clippy::expect_used)]\n+#![allow(clippy::map_unwrap_or)]\n+#![allow(clippy::unwrap_used)]\n #![allow(clippy::needless_borrow)]\n+#![allow(clippy::single_char_add_str)]\n+#![allow(clippy::module_name_repetitions)]\n #![allow(clippy::recursive_format_impl)]\n-#![allow(invalid_value)]\n-#![allow(array_into_iter)]\n-#![allow(unused_labels)]\n+#![allow(clippy::invisible_characters)]\n #![allow(drop_bounds)]\n-#![allow(temporary_cstring_as_ptr)]\n-#![allow(non_fmt_panics)]\n-#![allow(unknown_lints)]\n+#![allow(array_into_iter)]\n #![allow(invalid_atomic_ordering)]\n+#![allow(invalid_value)]\n #![allow(enum_intrinsics_non_enums)]\n-#![warn(clippy::stutter)]\n-#![warn(clippy::new_without_default_derive)]\n-#![warn(clippy::cyclomatic_complexity)]\n-#![warn(clippy::const_static_lifetime)]\n-#![warn(clippy::option_and_then_some)]\n-#![warn(clippy::box_vec)]\n+#![allow(non_fmt_panics)]\n+#![allow(temporary_cstring_as_ptr)]\n+#![allow(unknown_lints)]\n+#![allow(unused_labels)]\n #![warn(clippy::block_in_if_condition_expr)]\n #![warn(clippy::block_in_if_condition_stmt)]\n-#![warn(clippy::option_map_unwrap_or)]\n-#![warn(clippy::option_map_unwrap_or_else)]\n-#![warn(clippy::result_map_unwrap_or_else)]\n-#![warn(clippy::option_unwrap_used)]\n-#![warn(clippy::result_unwrap_used)]\n-#![warn(clippy::option_expect_used)]\n-#![warn(clippy::result_expect_used)]\n+#![warn(clippy::box_vec)]\n+#![warn(clippy::const_static_lifetime)]\n+#![warn(clippy::cyclomatic_complexity)]\n+#![warn(clippy::disallowed_method)]\n+#![warn(clippy::disallowed_type)]\n #![warn(clippy::for_loop_over_option)]\n #![warn(clippy::for_loop_over_result)]\n #![warn(clippy::identity_conversion)]\n-#![warn(clippy::zero_width_space)]\n-#![warn(clippy::single_char_push_str)]\n #![warn(clippy::if_let_some_result)]\n-#![warn(clippy::disallowed_type)]\n-#![warn(clippy::disallowed_method)]\n+#![warn(clippy::new_without_default_derive)]\n+#![warn(clippy::option_and_then_some)]\n+#![warn(clippy::option_expect_used)]\n+#![warn(clippy::option_map_unwrap_or)]\n+#![warn(clippy::option_map_unwrap_or_else)]\n+#![warn(clippy::option_unwrap_used)]\n #![warn(clippy::ref_in_deref)]\n+#![warn(clippy::result_expect_used)]\n+#![warn(clippy::result_map_unwrap_or_else)]\n+#![warn(clippy::result_unwrap_used)]\n+#![warn(clippy::single_char_push_str)]\n+#![warn(clippy::stutter)]\n #![warn(clippy::to_string_in_display)]\n-#![warn(clippy::invalid_ref)]\n-#![warn(clippy::into_iter_on_array)]\n-#![warn(clippy::unused_label)]\n+#![warn(clippy::zero_width_space)]\n #![warn(clippy::drop_bounds)]\n-#![warn(clippy::temporary_cstring_as_ptr)]\n-#![warn(clippy::panic_params)]\n-#![warn(clippy::unknown_clippy_lints)]\n+#![warn(clippy::into_iter_on_array)]\n #![warn(clippy::invalid_atomic_ordering)]\n+#![warn(clippy::invalid_ref)]\n #![warn(clippy::mem_discriminant_non_enum)]\n+#![warn(clippy::panic_params)]\n+#![warn(clippy::temporary_cstring_as_ptr)]\n+#![warn(clippy::unknown_clippy_lints)]\n+#![warn(clippy::unused_label)]\n \n fn main() {}"}, {"sha": "f811b10d017104220a46575d3aa7d4af4ce9f827", "filename": "tests/ui/rename.stderr", "status": "modified", "additions": 90, "deletions": 90, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/b3de32ba3cc2985c4e1d890732548a99fd55bba0/tests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3de32ba3cc2985c4e1d890732548a99fd55bba0/tests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.stderr?ref=b3de32ba3cc2985c4e1d890732548a99fd55bba0", "patch": "@@ -1,208 +1,208 @@\n-error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n+error: lint `clippy::block_in_if_condition_expr` has been renamed to `clippy::blocks_in_if_conditions`\n   --> $DIR/rename.rs:35:9\n    |\n-LL | #![warn(clippy::stutter)]\n-   |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n+LL | #![warn(clippy::block_in_if_condition_expr)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n    |\n    = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n-error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n+error: lint `clippy::block_in_if_condition_stmt` has been renamed to `clippy::blocks_in_if_conditions`\n   --> $DIR/rename.rs:36:9\n    |\n-LL | #![warn(clippy::new_without_default_derive)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n+LL | #![warn(clippy::block_in_if_condition_stmt)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n-error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n+error: lint `clippy::box_vec` has been renamed to `clippy::box_collection`\n   --> $DIR/rename.rs:37:9\n    |\n-LL | #![warn(clippy::cyclomatic_complexity)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n+LL | #![warn(clippy::box_vec)]\n+   |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::box_collection`\n \n error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redundant_static_lifetimes`\n   --> $DIR/rename.rs:38:9\n    |\n LL | #![warn(clippy::const_static_lifetime)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n \n-error: lint `clippy::option_and_then_some` has been renamed to `clippy::bind_instead_of_map`\n+error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n   --> $DIR/rename.rs:39:9\n    |\n-LL | #![warn(clippy::option_and_then_some)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::bind_instead_of_map`\n+LL | #![warn(clippy::cyclomatic_complexity)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n \n-error: lint `clippy::box_vec` has been renamed to `clippy::box_collection`\n+error: lint `clippy::disallowed_method` has been renamed to `clippy::disallowed_methods`\n   --> $DIR/rename.rs:40:9\n    |\n-LL | #![warn(clippy::box_vec)]\n-   |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::box_collection`\n+LL | #![warn(clippy::disallowed_method)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_methods`\n \n-error: lint `clippy::block_in_if_condition_expr` has been renamed to `clippy::blocks_in_if_conditions`\n+error: lint `clippy::disallowed_type` has been renamed to `clippy::disallowed_types`\n   --> $DIR/rename.rs:41:9\n    |\n-LL | #![warn(clippy::block_in_if_condition_expr)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n+LL | #![warn(clippy::disallowed_type)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_types`\n \n-error: lint `clippy::block_in_if_condition_stmt` has been renamed to `clippy::blocks_in_if_conditions`\n+error: lint `clippy::for_loop_over_option` has been renamed to `clippy::for_loops_over_fallibles`\n   --> $DIR/rename.rs:42:9\n    |\n-LL | #![warn(clippy::block_in_if_condition_stmt)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n+LL | #![warn(clippy::for_loop_over_option)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::for_loops_over_fallibles`\n \n-error: lint `clippy::option_map_unwrap_or` has been renamed to `clippy::map_unwrap_or`\n+error: lint `clippy::for_loop_over_result` has been renamed to `clippy::for_loops_over_fallibles`\n   --> $DIR/rename.rs:43:9\n    |\n-LL | #![warn(clippy::option_map_unwrap_or)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n+LL | #![warn(clippy::for_loop_over_result)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::for_loops_over_fallibles`\n \n-error: lint `clippy::option_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n+error: lint `clippy::identity_conversion` has been renamed to `clippy::useless_conversion`\n   --> $DIR/rename.rs:44:9\n    |\n-LL | #![warn(clippy::option_map_unwrap_or_else)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n+LL | #![warn(clippy::identity_conversion)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::useless_conversion`\n \n-error: lint `clippy::result_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n+error: lint `clippy::if_let_some_result` has been renamed to `clippy::match_result_ok`\n   --> $DIR/rename.rs:45:9\n    |\n-LL | #![warn(clippy::result_map_unwrap_or_else)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n+LL | #![warn(clippy::if_let_some_result)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::match_result_ok`\n \n-error: lint `clippy::option_unwrap_used` has been renamed to `clippy::unwrap_used`\n+error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n   --> $DIR/rename.rs:46:9\n    |\n-LL | #![warn(clippy::option_unwrap_used)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n+LL | #![warn(clippy::new_without_default_derive)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n \n-error: lint `clippy::result_unwrap_used` has been renamed to `clippy::unwrap_used`\n+error: lint `clippy::option_and_then_some` has been renamed to `clippy::bind_instead_of_map`\n   --> $DIR/rename.rs:47:9\n    |\n-LL | #![warn(clippy::result_unwrap_used)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n+LL | #![warn(clippy::option_and_then_some)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::bind_instead_of_map`\n \n error: lint `clippy::option_expect_used` has been renamed to `clippy::expect_used`\n   --> $DIR/rename.rs:48:9\n    |\n LL | #![warn(clippy::option_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n-error: lint `clippy::result_expect_used` has been renamed to `clippy::expect_used`\n+error: lint `clippy::option_map_unwrap_or` has been renamed to `clippy::map_unwrap_or`\n   --> $DIR/rename.rs:49:9\n    |\n-LL | #![warn(clippy::result_expect_used)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n+LL | #![warn(clippy::option_map_unwrap_or)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n-error: lint `clippy::for_loop_over_option` has been renamed to `clippy::for_loops_over_fallibles`\n+error: lint `clippy::option_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n   --> $DIR/rename.rs:50:9\n    |\n-LL | #![warn(clippy::for_loop_over_option)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::for_loops_over_fallibles`\n+LL | #![warn(clippy::option_map_unwrap_or_else)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n-error: lint `clippy::for_loop_over_result` has been renamed to `clippy::for_loops_over_fallibles`\n+error: lint `clippy::option_unwrap_used` has been renamed to `clippy::unwrap_used`\n   --> $DIR/rename.rs:51:9\n    |\n-LL | #![warn(clippy::for_loop_over_result)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::for_loops_over_fallibles`\n+LL | #![warn(clippy::option_unwrap_used)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n-error: lint `clippy::identity_conversion` has been renamed to `clippy::useless_conversion`\n+error: lint `clippy::ref_in_deref` has been renamed to `clippy::needless_borrow`\n   --> $DIR/rename.rs:52:9\n    |\n-LL | #![warn(clippy::identity_conversion)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::useless_conversion`\n+LL | #![warn(clippy::ref_in_deref)]\n+   |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::needless_borrow`\n \n-error: lint `clippy::zero_width_space` has been renamed to `clippy::invisible_characters`\n+error: lint `clippy::result_expect_used` has been renamed to `clippy::expect_used`\n   --> $DIR/rename.rs:53:9\n    |\n-LL | #![warn(clippy::zero_width_space)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::invisible_characters`\n+LL | #![warn(clippy::result_expect_used)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n-error: lint `clippy::single_char_push_str` has been renamed to `clippy::single_char_add_str`\n+error: lint `clippy::result_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n   --> $DIR/rename.rs:54:9\n    |\n-LL | #![warn(clippy::single_char_push_str)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::single_char_add_str`\n+LL | #![warn(clippy::result_map_unwrap_or_else)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n-error: lint `clippy::if_let_some_result` has been renamed to `clippy::match_result_ok`\n+error: lint `clippy::result_unwrap_used` has been renamed to `clippy::unwrap_used`\n   --> $DIR/rename.rs:55:9\n    |\n-LL | #![warn(clippy::if_let_some_result)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::match_result_ok`\n+LL | #![warn(clippy::result_unwrap_used)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n-error: lint `clippy::disallowed_type` has been renamed to `clippy::disallowed_types`\n+error: lint `clippy::single_char_push_str` has been renamed to `clippy::single_char_add_str`\n   --> $DIR/rename.rs:56:9\n    |\n-LL | #![warn(clippy::disallowed_type)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_types`\n+LL | #![warn(clippy::single_char_push_str)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::single_char_add_str`\n \n-error: lint `clippy::disallowed_method` has been renamed to `clippy::disallowed_methods`\n+error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n   --> $DIR/rename.rs:57:9\n    |\n-LL | #![warn(clippy::disallowed_method)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_methods`\n+LL | #![warn(clippy::stutter)]\n+   |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n \n-error: lint `clippy::ref_in_deref` has been renamed to `clippy::needless_borrow`\n+error: lint `clippy::to_string_in_display` has been renamed to `clippy::recursive_format_impl`\n   --> $DIR/rename.rs:58:9\n    |\n-LL | #![warn(clippy::ref_in_deref)]\n-   |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::needless_borrow`\n+LL | #![warn(clippy::to_string_in_display)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::recursive_format_impl`\n \n-error: lint `clippy::to_string_in_display` has been renamed to `clippy::recursive_format_impl`\n+error: lint `clippy::zero_width_space` has been renamed to `clippy::invisible_characters`\n   --> $DIR/rename.rs:59:9\n    |\n-LL | #![warn(clippy::to_string_in_display)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::recursive_format_impl`\n+LL | #![warn(clippy::zero_width_space)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::invisible_characters`\n \n-error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n+error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n   --> $DIR/rename.rs:60:9\n    |\n-LL | #![warn(clippy::invalid_ref)]\n-   |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n+LL | #![warn(clippy::drop_bounds)]\n+   |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n   --> $DIR/rename.rs:61:9\n    |\n LL | #![warn(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `array_into_iter`\n \n-error: lint `clippy::unused_label` has been renamed to `unused_labels`\n+error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n   --> $DIR/rename.rs:62:9\n    |\n-LL | #![warn(clippy::unused_label)]\n-   |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`\n+LL | #![warn(clippy::invalid_atomic_ordering)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n \n-error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n+error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n   --> $DIR/rename.rs:63:9\n    |\n-LL | #![warn(clippy::drop_bounds)]\n-   |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n+LL | #![warn(clippy::invalid_ref)]\n+   |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n \n-error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n+error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n   --> $DIR/rename.rs:64:9\n    |\n-LL | #![warn(clippy::temporary_cstring_as_ptr)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n+LL | #![warn(clippy::mem_discriminant_non_enum)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n \n error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n   --> $DIR/rename.rs:65:9\n    |\n LL | #![warn(clippy::panic_params)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n-error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n+error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n   --> $DIR/rename.rs:66:9\n    |\n-LL | #![warn(clippy::unknown_clippy_lints)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n+LL | #![warn(clippy::temporary_cstring_as_ptr)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n-error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n+error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n   --> $DIR/rename.rs:67:9\n    |\n-LL | #![warn(clippy::invalid_atomic_ordering)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n+LL | #![warn(clippy::unknown_clippy_lints)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n \n-error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n+error: lint `clippy::unused_label` has been renamed to `unused_labels`\n   --> $DIR/rename.rs:68:9\n    |\n-LL | #![warn(clippy::mem_discriminant_non_enum)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n+LL | #![warn(clippy::unused_label)]\n+   |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`\n \n error: aborting due to 34 previous errors\n "}]}