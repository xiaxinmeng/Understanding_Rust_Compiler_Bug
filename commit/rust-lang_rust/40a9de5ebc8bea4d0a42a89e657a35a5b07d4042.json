{"sha": "40a9de5ebc8bea4d0a42a89e657a35a5b07d4042", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwYTlkZTVlYmM4YmVhNGQwYTQyYTg5ZTY1N2EzNWE1YjA3ZDQwNDI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-03T23:58:20Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-14T21:52:06Z"}, "message": "core::rt: Add a very simple ref counted pointer", "tree": {"sha": "1c1b5792110066596fb85df0883559213d33d3e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c1b5792110066596fb85df0883559213d33d3e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40a9de5ebc8bea4d0a42a89e657a35a5b07d4042", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40a9de5ebc8bea4d0a42a89e657a35a5b07d4042", "html_url": "https://github.com/rust-lang/rust/commit/40a9de5ebc8bea4d0a42a89e657a35a5b07d4042", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40a9de5ebc8bea4d0a42a89e657a35a5b07d4042/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "936fce551587fd5584722022252f489c88be292c", "url": "https://api.github.com/repos/rust-lang/rust/commits/936fce551587fd5584722022252f489c88be292c", "html_url": "https://github.com/rust-lang/rust/commit/936fce551587fd5584722022252f489c88be292c"}], "stats": {"total": 146, "additions": 146, "deletions": 0}, "files": [{"sha": "ce3fb71ef2c4e61ef55df1e4ac4ead53cddaf3ff", "filename": "src/libcore/rt/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40a9de5ebc8bea4d0a42a89e657a35a5b07d4042/src%2Flibcore%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40a9de5ebc8bea4d0a42a89e657a35a5b07d4042/src%2Flibcore%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fmod.rs?ref=40a9de5ebc8bea4d0a42a89e657a35a5b07d4042", "patch": "@@ -65,6 +65,9 @@ pub mod logging;\n #[cfg(test)]\n pub mod test;\n \n+/// Reference counting\n+pub mod rc;\n+\n /// Set up a default runtime configuration, given compiler-supplied arguments.\n ///\n /// This is invoked by the `start` _language item_ (unstable::lang) to"}, {"sha": "2ee254466e4b065cd93547c5e0c5b9403a1b4837", "filename": "src/libcore/rt/rc.rs", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/40a9de5ebc8bea4d0a42a89e657a35a5b07d4042/src%2Flibcore%2Frt%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40a9de5ebc8bea4d0a42a89e657a35a5b07d4042/src%2Flibcore%2Frt%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Frc.rs?ref=40a9de5ebc8bea4d0a42a89e657a35a5b07d4042", "patch": "@@ -0,0 +1,143 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! An owned, task-local, reference counted type\n+//!\n+//! # Safety note\n+//!\n+//! XXX There is currently no type-system mechanism for enforcing that\n+//! reference counted types are both allocated on the exchange heap\n+//! and also non-sendable\n+//!\n+//! This doesn't prevent borrowing multiple aliasable mutable pointers\n+\n+use ops::Drop;\n+use clone::Clone;\n+use libc::c_void;\n+use sys;\n+use cast;\n+\n+pub struct RC<T> {\n+    p: *c_void // ~(uint, T)\n+}\n+\n+impl<T> RC<T> {\n+    pub fn new(val: T) -> RC<T> {\n+        unsafe {\n+            let v = ~(1, val);\n+            let p: *c_void = cast::transmute(v);\n+            RC { p: p }\n+        }\n+    }\n+\n+    fn get_mut_state(&mut self) -> *mut (uint, T) {\n+        unsafe {\n+            let p: &mut ~(uint, T) = cast::transmute(&mut self.p);\n+            let p: *mut (uint, T) = &mut **p;\n+            return p;\n+        }\n+    }\n+\n+    fn get_state(&self) -> *(uint, T) {\n+        unsafe {\n+            let p: &~(uint, T) = cast::transmute(&self.p);\n+            let p: *(uint, T) = &**p;\n+            return p;\n+        }\n+    }\n+\n+    pub fn unsafe_borrow_mut(&mut self) -> *mut T {\n+        unsafe {\n+            match *self.get_mut_state() {\n+                (_, ref mut p) => {\n+                    let p: *mut T = p;\n+                    return p;\n+                }\n+            }\n+        }\n+    }\n+\n+    pub fn refcount(&self) -> uint {\n+        unsafe {\n+            match *self.get_state() {\n+                (count, _) => count\n+            }\n+        }\n+    }\n+}\n+\n+#[unsafe_destructor]\n+impl<T> Drop for RC<T> {\n+    fn finalize(&self) {\n+        assert!(self.refcount() > 0);\n+\n+        unsafe {\n+            // XXX: Mutable finalizer\n+            let this: &mut RC<T> = cast::transmute_mut(self);\n+\n+            match *this.get_mut_state() {\n+                (ref mut count, _) => {\n+                    *count = *count - 1\n+                }\n+            }\n+\n+            if this.refcount() == 0 {\n+                let _: ~(uint, T) = cast::transmute(this.p);\n+            }\n+        }\n+    }\n+}\n+\n+impl<T> Clone for RC<T> {\n+    fn clone(&self) -> RC<T> {\n+        unsafe {\n+            // XXX: Mutable clone\n+            let this: &mut RC<T> = cast::transmute_mut(self);\n+\n+            match *this.get_mut_state() {\n+                (ref mut count, _) => {\n+                    *count = *count + 1;\n+                }\n+            }\n+        }\n+\n+        RC { p: self.p }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use super::RC;\n+\n+    #[test]\n+    fn smoke_test() {\n+        unsafe {\n+            let mut v1 = RC::new(100);\n+            assert!(*v1.unsafe_borrow_mut() == 100);\n+            assert!(v1.refcount() == 1);\n+\n+            let mut v2 = v1.clone();\n+            assert!(*v2.unsafe_borrow_mut() == 100);\n+            assert!(v2.refcount() == 2);\n+\n+            *v2.unsafe_borrow_mut() = 200;\n+            assert!(*v2.unsafe_borrow_mut() == 200);\n+            assert!(*v1.unsafe_borrow_mut() == 200);\n+\n+            let v3 = v2.clone();\n+            assert!(v3.refcount() == 3);\n+            {\n+                let _v1 = v1;\n+                let _v2 = v2;\n+            }\n+            assert!(v3.refcount() == 1);\n+        }\n+    }\n+}"}]}