{"sha": "ea8897c9be9e63e5d67ccac47287e5dd7bb0d934", "node_id": "C_kwDOAAsO6NoAKGVhODg5N2M5YmU5ZTYzZTVkNjdjY2FjNDcyODdlNWRkN2JiMGQ5MzQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-30T21:35:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-30T21:35:46Z"}, "message": "Auto merge of #13856 - WaffleLapkin:typeck_try{}, r=Veykril\n\nfix: Type check unstable `try{}` blocks\n\n![Peek 2022-12-29 01-40](https://user-images.githubusercontent.com/38225716/209875594-8bf9c9e2-9998-40b0-8820-28c7f2d9bae4.gif)\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/11843", "tree": {"sha": "42220009364319fb98ecfbc1c1105a37c61552b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42220009364319fb98ecfbc1c1105a37c61552b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea8897c9be9e63e5d67ccac47287e5dd7bb0d934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea8897c9be9e63e5d67ccac47287e5dd7bb0d934", "html_url": "https://github.com/rust-lang/rust/commit/ea8897c9be9e63e5d67ccac47287e5dd7bb0d934", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea8897c9be9e63e5d67ccac47287e5dd7bb0d934/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6892b16336222c98239ead51158741f82a8a1c32", "url": "https://api.github.com/repos/rust-lang/rust/commits/6892b16336222c98239ead51158741f82a8a1c32", "html_url": "https://github.com/rust-lang/rust/commit/6892b16336222c98239ead51158741f82a8a1c32"}, {"sha": "aaa682c534f488b51063e015a23597b344a335ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaa682c534f488b51063e015a23597b344a335ff", "html_url": "https://github.com/rust-lang/rust/commit/aaa682c534f488b51063e015a23597b344a335ff"}], "stats": {"total": 87, "additions": 46, "deletions": 41}, "files": [{"sha": "18e45511a4b49835bc0bab1c51c50b6be2e09b38", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea8897c9be9e63e5d67ccac47287e5dd7bb0d934/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea8897c9be9e63e5d67ccac47287e5dd7bb0d934/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=ea8897c9be9e63e5d67ccac47287e5dd7bb0d934", "patch": "@@ -688,7 +688,7 @@ impl<'a> InferenceContext<'a> {\n         }\n     }\n \n-    /// Replaces Ty::Unknown by a new type var, so we can maybe still infer it.\n+    /// Replaces `Ty::Error` by a new type var, so we can maybe still infer it.\n     fn insert_type_vars_shallow(&mut self, ty: Ty) -> Ty {\n         match ty.kind(Interner) {\n             TyKind::Error => self.table.new_type_var(),"}, {"sha": "d4050f9af49c2a2273d97a70fe7b29369bdca1f3", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ea8897c9be9e63e5d67ccac47287e5dd7bb0d934/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea8897c9be9e63e5d67ccac47287e5dd7bb0d934/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=ea8897c9be9e63e5d67ccac47287e5dd7bb0d934", "patch": "@@ -152,11 +152,20 @@ impl<'a> InferenceContext<'a> {\n                 .1\n             }\n             Expr::TryBlock { body } => {\n-                self.with_breakable_ctx(BreakableKind::Border, self.err_ty(), None, |this| {\n-                    let _inner = this.infer_expr(*body, expected);\n+                // The type that is returned from the try block\n+                let try_ty = self.table.new_type_var();\n+                if let Some(ty) = expected.only_has_type(&mut self.table) {\n+                    self.unify(&try_ty, &ty);\n+                }\n+\n+                // The ok-ish type that is expected from the last expression\n+                let ok_ty = self.resolve_associated_type(try_ty.clone(), self.resolve_ops_try_ok());\n+\n+                self.with_breakable_ctx(BreakableKind::Block, ok_ty.clone(), None, |this| {\n+                    this.infer_expr(*body, &Expectation::has_type(ok_ty));\n                 });\n-                // FIXME should be std::result::Result<{inner}, _>\n-                self.err_ty()\n+\n+                try_ty\n             }\n             Expr::Async { body } => {\n                 let ret_ty = self.table.new_type_var();"}, {"sha": "146145523b242d3098232ad0f92176937b000630", "filename": "crates/hir-ty/src/tests/simple.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ea8897c9be9e63e5d67ccac47287e5dd7bb0d934/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea8897c9be9e63e5d67ccac47287e5dd7bb0d934/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs?ref=ea8897c9be9e63e5d67ccac47287e5dd7bb0d934", "patch": "@@ -2064,17 +2064,17 @@ fn fn_pointer_return() {\n fn block_modifiers_smoke_test() {\n     check_infer(\n         r#\"\n-//- minicore: future\n+//- minicore: future, try\n async fn main() {\n     let x = unsafe { 92 };\n     let y = async { async { () }.await };\n-    let z = try { () };\n+    let z: core::ops::ControlFlow<(), _> = try { () };\n     let w = const { 92 };\n     let t = 'a: { 92 };\n }\n         \"#,\n         expect![[r#\"\n-            16..162 '{     ...2 }; }': ()\n+            16..193 '{     ...2 }; }': ()\n             26..27 'x': i32\n             30..43 'unsafe { 92 }': i32\n             30..43 'unsafe { 92 }': i32\n@@ -2086,17 +2086,17 @@ async fn main() {\n             65..77 'async { () }': impl Future<Output = ()>\n             65..83 'async ....await': ()\n             73..75 '()': ()\n-            95..96 'z': {unknown}\n-            99..109 'try { () }': ()\n-            99..109 'try { () }': {unknown}\n-            105..107 '()': ()\n-            119..120 'w': i32\n-            123..135 'const { 92 }': i32\n-            123..135 'const { 92 }': i32\n-            131..133 '92': i32\n-            145..146 't': i32\n-            149..159 ''a: { 92 }': i32\n-            155..157 '92': i32\n+            95..96 'z': ControlFlow<(), ()>\n+            130..140 'try { () }': ()\n+            130..140 'try { () }': ControlFlow<(), ()>\n+            136..138 '()': ()\n+            150..151 'w': i32\n+            154..166 'const { 92 }': i32\n+            154..166 'const { 92 }': i32\n+            162..164 '92': i32\n+            176..177 't': i32\n+            180..190 ''a: { 92 }': i32\n+            186..188 '92': i32\n         \"#]],\n     )\n }"}, {"sha": "10e637979f2cd889a2d955b0e1cc25f465c79533", "filename": "crates/ide-diagnostics/src/handlers/break_outside_of_loop.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ea8897c9be9e63e5d67ccac47287e5dd7bb0d934/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fbreak_outside_of_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea8897c9be9e63e5d67ccac47287e5dd7bb0d934/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fbreak_outside_of_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fbreak_outside_of_loop.rs?ref=ea8897c9be9e63e5d67ccac47287e5dd7bb0d934", "patch": "@@ -38,12 +38,12 @@ fn foo() {\n     }\n \n     #[test]\n-    fn try_blocks_are_borders() {\n+    fn async_blocks_are_borders() {\n         check_diagnostics(\n             r#\"\n fn foo() {\n     'a: loop {\n-        try {\n+        async {\n                 break;\n               //^^^^^ error: break outside of loop\n                 break 'a;\n@@ -60,12 +60,12 @@ fn foo() {\n     }\n \n     #[test]\n-    fn async_blocks_are_borders() {\n+    fn closures_are_borders() {\n         check_diagnostics(\n             r#\"\n fn foo() {\n     'a: loop {\n-        try {\n+        || {\n                 break;\n               //^^^^^ error: break outside of loop\n                 break 'a;\n@@ -82,39 +82,35 @@ fn foo() {\n     }\n \n     #[test]\n-    fn closures_are_borders() {\n+    fn blocks_pass_through() {\n         check_diagnostics(\n             r#\"\n fn foo() {\n     'a: loop {\n-        try {\n-                break;\n-              //^^^^^ error: break outside of loop\n-                break 'a;\n-              //^^^^^^^^ error: break outside of loop\n-                continue;\n-              //^^^^^^^^ error: continue outside of loop\n-                continue 'a;\n-              //^^^^^^^^^^^ error: continue outside of loop\n-        };\n+        {\n+            break;\n+            break 'a;\n+            continue;\n+            continue 'a;\n+        }\n     }\n }\n \"#,\n         );\n     }\n \n     #[test]\n-    fn blocks_pass_through() {\n+    fn try_blocks_pass_through() {\n         check_diagnostics(\n             r#\"\n fn foo() {\n     'a: loop {\n-        {\n-            break;\n-            break 'a;\n-            continue;\n-            continue 'a;\n-        }\n+        try {\n+                break;\n+                break 'a;\n+                continue;\n+                continue 'a;\n+        };\n     }\n }\n \"#,"}]}