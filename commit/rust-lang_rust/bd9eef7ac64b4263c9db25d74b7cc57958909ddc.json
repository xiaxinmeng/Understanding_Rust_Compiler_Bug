{"sha": "bd9eef7ac64b4263c9db25d74b7cc57958909ddc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkOWVlZjdhYzY0YjQyNjNjOWRiMjVkNzRiN2NjNTc5NTg5MDlkZGM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-04T14:07:13Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T22:22:13Z"}, "message": "DecodeInlinedItem: convert to \"unboxed\" closures", "tree": {"sha": "26f90be71b0dd78b3187c356ccaedba047e66870", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26f90be71b0dd78b3187c356ccaedba047e66870"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd9eef7ac64b4263c9db25d74b7cc57958909ddc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd9eef7ac64b4263c9db25d74b7cc57958909ddc", "html_url": "https://github.com/rust-lang/rust/commit/bd9eef7ac64b4263c9db25d74b7cc57958909ddc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd9eef7ac64b4263c9db25d74b7cc57958909ddc/comments", "author": null, "committer": null, "parents": [{"sha": "98fda878d8d109c7b3337593d5396a3b893aa966", "url": "https://api.github.com/repos/rust-lang/rust/commits/98fda878d8d109c7b3337593d5396a3b893aa966", "html_url": "https://github.com/rust-lang/rust/commit/98fda878d8d109c7b3337593d5396a3b893aa966"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "ac8dfc1675942c37055147762cb438bb94a20568", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bd9eef7ac64b4263c9db25d74b7cc57958909ddc/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd9eef7ac64b4263c9db25d74b7cc57958909ddc/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=bd9eef7ac64b4263c9db25d74b7cc57958909ddc", "patch": "@@ -662,27 +662,27 @@ pub fn get_item_path(cdata: Cmd, id: ast::NodeId) -> Vec<ast_map::PathElem> {\n     item_path(lookup_item(id, cdata.data()))\n }\n \n-pub type DecodeInlinedItem<'a> = for<'tcx> |cdata: Cmd,\n-                                            tcx: &ty::ctxt<'tcx>,\n-                                            path: Vec<ast_map::PathElem>,\n-                                            par_doc: rbml::Doc|: 'a\n-                                            -> Result<&'tcx ast::InlinedItem,\n-                                                      Vec<ast_map::PathElem>>;\n+pub type DecodeInlinedItem<'a> =\n+    Box<for<'tcx> FnMut(Cmd,\n+                        &ty::ctxt<'tcx>,\n+                        Vec<ast_map::PathElem>,\n+                        rbml::Doc)\n+                        -> Result<&'tcx ast::InlinedItem, Vec<ast_map::PathElem>> + 'a>;\n \n pub fn maybe_get_item_ast<'tcx>(cdata: Cmd, tcx: &ty::ctxt<'tcx>, id: ast::NodeId,\n-                                decode_inlined_item: DecodeInlinedItem)\n+                                mut decode_inlined_item: DecodeInlinedItem)\n                                 -> csearch::found_ast<'tcx> {\n     debug!(\"Looking up item: {}\", id);\n     let item_doc = lookup_item(id, cdata.data());\n     let path = item_path(item_doc).init().to_vec();\n-    match decode_inlined_item(cdata, tcx, path, item_doc) {\n+    match decode_inlined_item.call_mut((cdata, tcx, path, item_doc)) {\n         Ok(ii) => csearch::found(ii),\n         Err(path) => {\n             match item_parent_item(item_doc) {\n                 Some(did) => {\n                     let did = translate_def_id(cdata, did);\n                     let parent_item = lookup_item(did.node, cdata.data());\n-                    match decode_inlined_item(cdata, tcx, path, parent_item) {\n+                    match decode_inlined_item.call_mut((cdata, tcx, path, parent_item)) {\n                         Ok(ii) => csearch::found_parent(did, ii),\n                         Err(_) => csearch::not_found\n                     }"}, {"sha": "a95523f2e06005f3f72af857d4a8bd0dc1e6e788", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd9eef7ac64b4263c9db25d74b7cc57958909ddc/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd9eef7ac64b4263c9db25d74b7cc57958909ddc/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=bd9eef7ac64b4263c9db25d74b7cc57958909ddc", "patch": "@@ -132,7 +132,7 @@ fn lookup_variant_by_id<'a>(tcx: &'a ty::ctxt,\n             None => {}\n         }\n         let expr_id = match csearch::maybe_get_item_ast(tcx, enum_def,\n-            |a, b, c, d| astencode::decode_inlined_item(a, b, c, d)) {\n+            box |a, b, c, d| astencode::decode_inlined_item(a, b, c, d)) {\n             csearch::found(&ast::IIItem(ref item)) => match item.node {\n                 ast::ItemEnum(ast::EnumDef { ref variants }, _) => {\n                     // NOTE this doesn't do the right thing, it compares inlined\n@@ -172,7 +172,7 @@ pub fn lookup_const_by_id<'a>(tcx: &'a ty::ctxt, def_id: ast::DefId)\n             None => {}\n         }\n         let expr_id = match csearch::maybe_get_item_ast(tcx, def_id,\n-            |a, b, c, d| astencode::decode_inlined_item(a, b, c, d)) {\n+            box |a, b, c, d| astencode::decode_inlined_item(a, b, c, d)) {\n             csearch::found(&ast::IIItem(ref item)) => match item.node {\n                 ast::ItemConst(_, ref const_expr) => Some(const_expr.id),\n                 _ => None"}, {"sha": "dd1cfc5ad6d823db5c4643adefed5e512d990712", "filename": "src/librustc_trans/trans/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd9eef7ac64b4263c9db25d74b7cc57958909ddc/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd9eef7ac64b4263c9db25d74b7cc57958909ddc/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Finline.rs?ref=bd9eef7ac64b4263c9db25d74b7cc57958909ddc", "patch": "@@ -40,7 +40,7 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n     let csearch_result =\n         csearch::maybe_get_item_ast(\n             ccx.tcx(), fn_id,\n-            |a,b,c,d| astencode::decode_inlined_item(a, b, c, d));\n+            box |a,b,c,d| astencode::decode_inlined_item(a, b, c, d));\n \n     let inline_def = match csearch_result {\n         csearch::not_found => {"}]}