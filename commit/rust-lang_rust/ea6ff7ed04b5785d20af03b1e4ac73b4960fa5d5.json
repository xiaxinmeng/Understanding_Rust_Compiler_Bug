{"sha": "ea6ff7ed04b5785d20af03b1e4ac73b4960fa5d5", "node_id": "C_kwDOAAsO6NoAKGVhNmZmN2VkMDRiNTc4NWQyMGFmMDNiMWU0YWM3M2I0OTYwZmE1ZDU", "commit": {"author": {"name": "Tyler Weaver", "email": "maybe@tylerjw.dev", "date": "2023-01-04T14:06:07Z"}, "committer": {"name": "Tyler Weaver", "email": "maybe@tylerjw.dev", "date": "2023-01-04T14:06:07Z"}, "message": "Apply changes suggested in review", "tree": {"sha": "70082a0b5e7bc22f5b10fd4a610c663cd1745d90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70082a0b5e7bc22f5b10fd4a610c663cd1745d90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea6ff7ed04b5785d20af03b1e4ac73b4960fa5d5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg7SOvb1XvVqyndOg/aB6xzqcLku\ncJTkLKCfEUxpSDkY0AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQMZfZUASlCev08KTnAJsb+wxjU+H+5OcdcR5C7MJxegEYxpLn+1Kr3vyzLNzUJwIaL\n6WoaTPDE6LCgM7N+iPOAM=\n-----END SSH SIGNATURE-----", "payload": "tree 70082a0b5e7bc22f5b10fd4a610c663cd1745d90\nparent 0cee2c50952a11099692652af367b4fea3cb09a6\nauthor Tyler Weaver <maybe@tylerjw.dev> 1672841167 -0700\ncommitter Tyler Weaver <maybe@tylerjw.dev> 1672841167 -0700\n\nApply changes suggested in review\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea6ff7ed04b5785d20af03b1e4ac73b4960fa5d5", "html_url": "https://github.com/rust-lang/rust/commit/ea6ff7ed04b5785d20af03b1e4ac73b4960fa5d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea6ff7ed04b5785d20af03b1e4ac73b4960fa5d5/comments", "author": {"login": "tylerjw", "id": 2490389, "node_id": "MDQ6VXNlcjI0OTAzODk=", "avatar_url": "https://avatars.githubusercontent.com/u/2490389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tylerjw", "html_url": "https://github.com/tylerjw", "followers_url": "https://api.github.com/users/tylerjw/followers", "following_url": "https://api.github.com/users/tylerjw/following{/other_user}", "gists_url": "https://api.github.com/users/tylerjw/gists{/gist_id}", "starred_url": "https://api.github.com/users/tylerjw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tylerjw/subscriptions", "organizations_url": "https://api.github.com/users/tylerjw/orgs", "repos_url": "https://api.github.com/users/tylerjw/repos", "events_url": "https://api.github.com/users/tylerjw/events{/privacy}", "received_events_url": "https://api.github.com/users/tylerjw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tylerjw", "id": 2490389, "node_id": "MDQ6VXNlcjI0OTAzODk=", "avatar_url": "https://avatars.githubusercontent.com/u/2490389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tylerjw", "html_url": "https://github.com/tylerjw", "followers_url": "https://api.github.com/users/tylerjw/followers", "following_url": "https://api.github.com/users/tylerjw/following{/other_user}", "gists_url": "https://api.github.com/users/tylerjw/gists{/gist_id}", "starred_url": "https://api.github.com/users/tylerjw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tylerjw/subscriptions", "organizations_url": "https://api.github.com/users/tylerjw/orgs", "repos_url": "https://api.github.com/users/tylerjw/repos", "events_url": "https://api.github.com/users/tylerjw/events{/privacy}", "received_events_url": "https://api.github.com/users/tylerjw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cee2c50952a11099692652af367b4fea3cb09a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cee2c50952a11099692652af367b4fea3cb09a6", "html_url": "https://github.com/rust-lang/rust/commit/0cee2c50952a11099692652af367b4fea3cb09a6"}], "stats": {"total": 79, "additions": 54, "deletions": 25}, "files": [{"sha": "0b3bf22743fae1b0c446c72112b6be8536a1ef4c", "filename": "clippy_lints/src/methods/case_sensitive_file_extension_comparisons.rs", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ea6ff7ed04b5785d20af03b1e4ac73b4960fa5d5/clippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea6ff7ed04b5785d20af03b1e4ac73b4960fa5d5/clippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs?ref=ea6ff7ed04b5785d20af03b1e4ac73b4960fa5d5", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::snippet_opt;\n use clippy_utils::source::{indent_of, reindent_multiline};\n-use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::is_type_lang_item;\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n@@ -19,8 +19,10 @@ pub(super) fn check<'tcx>(\n     arg: &'tcx Expr<'_>,\n ) {\n     if let ExprKind::MethodCall(path_segment, ..) = recv.kind {\n-        let method_name = path_segment.ident.name.as_str();\n-        if method_name == \"to_lowercase\" || method_name == \"to_uppercase\" {\n+        if matches!(\n+            path_segment.ident.name.as_str(),\n+            \"to_lowercase\" | \"to_uppercase\" | \"to_ascii_lowercase\" | \"to_ascii_uppercase\"\n+        ) {\n             return;\n         }\n     }\n@@ -45,28 +47,29 @@ pub(super) fn check<'tcx>(\n                 \"case-sensitive file extension comparison\",\n                 |diag| {\n                     diag.help(\"consider using a case-insensitive comparison instead\");\n-                    let mut recv_source = Sugg::hir(cx, recv, \"\").to_string();\n+                    if let Some(mut recv_source) = snippet_opt(cx, recv.span) {\n \n-                    if is_type_lang_item(cx, recv_ty, LangItem::String) {\n-                        recv_source = format!(\"&{recv_source}\");\n-                    }\n+                        if !cx.typeck_results().expr_ty(recv).is_ref() {\n+                            recv_source = format!(\"&{recv_source}\");\n+                        }\n \n-                    let suggestion_source = reindent_multiline(\n-                        format!(\n-                            \"std::path::Path::new({})\n-                                .extension()\n-                                .map_or(false, |ext| ext.eq_ignore_ascii_case(\\\"{}\\\"))\",\n-                            recv_source, ext_str.strip_prefix('.').unwrap()).into(),\n-                        true,\n-                        Some(indent_of(cx, call_span).unwrap_or(0) + 4)\n-                    );\n+                        let suggestion_source = reindent_multiline(\n+                            format!(\n+                                \"std::path::Path::new({})\n+                                    .extension()\n+                                    .map_or(false, |ext| ext.eq_ignore_ascii_case(\\\"{}\\\"))\",\n+                                recv_source, ext_str.strip_prefix('.').unwrap()).into(),\n+                            true,\n+                            Some(indent_of(cx, call_span).unwrap_or(0) + 4)\n+                        );\n \n-                    diag.span_suggestion(\n-                        recv.span.to(call_span),\n-                        \"use std::path::Path\",\n-                        suggestion_source,\n-                        Applicability::MaybeIncorrect,\n-                    );\n+                        diag.span_suggestion(\n+                            recv.span.to(call_span),\n+                            \"use std::path::Path\",\n+                            suggestion_source,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n                 }\n             );\n         }"}, {"sha": "5fbaa64db39edb8406855012a3c1ef35e83cce28", "filename": "tests/ui/case_sensitive_file_extension_comparisons.fixed", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ea6ff7ed04b5785d20af03b1e4ac73b4960fa5d5/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ea6ff7ed04b5785d20af03b1e4ac73b4960fa5d5/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.fixed?ref=ea6ff7ed04b5785d20af03b1e4ac73b4960fa5d5", "patch": "@@ -25,6 +25,13 @@ fn main() {\n         .extension()\n         .map_or(false, |ext| ext.eq_ignore_ascii_case(\"ext12\"));\n \n+    // The fixup should preserve the indentation level\n+    {\n+        let _ = std::path::Path::new(\"str\")\n+            .extension()\n+            .map_or(false, |ext| ext.eq_ignore_ascii_case(\"ext12\"));\n+    }\n+\n     // The test struct should not trigger the lint failure with .ext12\n     TestStruct {}.ends_with(\".ext12\");\n "}, {"sha": "3c0d4821f9f3a8ee9ff18b66e51e855cadc3655b", "filename": "tests/ui/case_sensitive_file_extension_comparisons.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ea6ff7ed04b5785d20af03b1e4ac73b4960fa5d5/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea6ff7ed04b5785d20af03b1e4ac73b4960fa5d5/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs?ref=ea6ff7ed04b5785d20af03b1e4ac73b4960fa5d5", "patch": "@@ -19,6 +19,11 @@ fn main() {\n     let _ = String::new().ends_with(\".ext12\");\n     let _ = \"str\".ends_with(\".ext12\");\n \n+    // The fixup should preserve the indentation level\n+    {\n+        let _ = \"str\".ends_with(\".ext12\");\n+    }\n+\n     // The test struct should not trigger the lint failure with .ext12\n     TestStruct {}.ends_with(\".ext12\");\n "}, {"sha": "44c8e3fdf7403d05c6eba7101d231cc6c89d7e14", "filename": "tests/ui/case_sensitive_file_extension_comparisons.stderr", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ea6ff7ed04b5785d20af03b1e4ac73b4960fa5d5/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea6ff7ed04b5785d20af03b1e4ac73b4960fa5d5/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.stderr?ref=ea6ff7ed04b5785d20af03b1e4ac73b4960fa5d5", "patch": "@@ -42,7 +42,21 @@ LL ~         .map_or(false, |ext| ext.eq_ignore_ascii_case(\"ext12\"));\n    |\n \n error: case-sensitive file extension comparison\n-  --> $DIR/case_sensitive_file_extension_comparisons.rs:26:13\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:24:17\n+   |\n+LL |         let _ = \"str\".ends_with(\".ext12\");\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a case-insensitive comparison instead\n+help: use std::path::Path\n+   |\n+LL ~         let _ = std::path::Path::new(\"str\")\n+LL +             .extension()\n+LL ~             .map_or(false, |ext| ext.eq_ignore_ascii_case(\"ext12\"));\n+   |\n+\n+error: case-sensitive file extension comparison\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:31:13\n    |\n LL |     let _ = String::new().ends_with(\".EXT12\");\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -56,7 +70,7 @@ LL ~         .map_or(false, |ext| ext.eq_ignore_ascii_case(\"EXT12\"));\n    |\n \n error: case-sensitive file extension comparison\n-  --> $DIR/case_sensitive_file_extension_comparisons.rs:27:13\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:32:13\n    |\n LL |     let _ = \"str\".ends_with(\".EXT12\");\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -69,5 +83,5 @@ LL +         .extension()\n LL ~         .map_or(false, |ext| ext.eq_ignore_ascii_case(\"EXT12\"));\n    |\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n "}]}