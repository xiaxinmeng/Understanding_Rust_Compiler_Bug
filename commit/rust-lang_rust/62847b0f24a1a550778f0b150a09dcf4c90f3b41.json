{"sha": "62847b0f24a1a550778f0b150a09dcf4c90f3b41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyODQ3YjBmMjRhMWE1NTA3NzhmMGIxNTBhMDlkY2Y0YzkwZjNiNDE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-04-18T02:36:59Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-04-18T22:12:27Z"}, "message": "rustc: Make some typechecker errors non-fatal", "tree": {"sha": "114d1961ee1c93accbb68aae7a612a677a8b5636", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/114d1961ee1c93accbb68aae7a612a677a8b5636"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62847b0f24a1a550778f0b150a09dcf4c90f3b41", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62847b0f24a1a550778f0b150a09dcf4c90f3b41", "html_url": "https://github.com/rust-lang/rust/commit/62847b0f24a1a550778f0b150a09dcf4c90f3b41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62847b0f24a1a550778f0b150a09dcf4c90f3b41/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a864852774e924f1f9bb68da34adca736211545", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a864852774e924f1f9bb68da34adca736211545", "html_url": "https://github.com/rust-lang/rust/commit/2a864852774e924f1f9bb68da34adca736211545"}], "stats": {"total": 79, "additions": 68, "deletions": 11}, "files": [{"sha": "e0c3e71a5a1adf01541a531ad282780142ec7dea", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/62847b0f24a1a550778f0b150a09dcf4c90f3b41/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62847b0f24a1a550778f0b150a09dcf4c90f3b41/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=62847b0f24a1a550778f0b150a09dcf4c90f3b41", "patch": "@@ -195,7 +195,9 @@ pub fn check_pat_variant(pcx: pat_ctxt, pat: @ast::pat, path: @ast::Path,\n         Some(ref subpats) => subpats_len = subpats.len()\n     }\n \n-    if arg_len > 0u {\n+    let mut error_happened = false;\n+\n+    if arg_len > 0 {\n         // N-ary variant.\n         if arg_len != subpats_len {\n             let s = fmt!(\"this pattern has %u field%s, but the corresponding \\\n@@ -205,23 +207,36 @@ pub fn check_pat_variant(pcx: pat_ctxt, pat: @ast::pat, path: @ast::Path,\n                          kind_name,\n                          arg_len,\n                          if arg_len == 1u { ~\"\" } else { ~\"s\" });\n-            // XXX: This should not be fatal.\n-            tcx.sess.span_fatal(pat.span, s);\n+            tcx.sess.span_err(pat.span, s);\n+            error_happened = true;\n         }\n \n-        for subpats.each |pats| {\n-            for vec::each2(*pats, arg_types) |subpat, arg_ty| {\n-              check_pat(pcx, *subpat, *arg_ty);\n+        if !error_happened {\n+            for subpats.each |pats| {\n+                for vec::each2(*pats, arg_types) |subpat, arg_ty| {\n+                    check_pat(pcx, *subpat, *arg_ty);\n+                }\n             }\n         }\n-    } else if subpats_len > 0u {\n-        tcx.sess.span_fatal\n+    } else if subpats_len > 0 {\n+        tcx.sess.span_err\n             (pat.span, fmt!(\"this pattern has %u field%s, but the \\\n                              corresponding %s has no fields\",\n                             subpats_len,\n                             if subpats_len == 1u { ~\"\" }\n                             else { ~\"s\" },\n                             kind_name));\n+        error_happened = true;\n+    }\n+\n+    if error_happened {\n+        let tcx = pcx.fcx.ccx.tcx;\n+\n+        for subpats.each |pats| {\n+            for pats.each |pat| {\n+                check_pat(pcx, *pat, ty::mk_err(tcx));\n+            }\n+        }\n     }\n }\n \n@@ -446,6 +461,7 @@ pub fn check_pat(pcx: pat_ctxt, pat: @ast::pat, expected: ty::t) {\n       ast::pat_struct(path, ref fields, etc) => {\n         // Grab the class data that we care about.\n         let structure = structure_of(fcx, pat.span, expected);\n+        let mut error_happened = false;\n         match structure {\n             ty::ty_struct(cid, ref substs) => {\n                 check_struct_pat(pcx, pat.id, pat.span, expected, path,\n@@ -457,16 +473,21 @@ pub fn check_pat(pcx: pat_ctxt, pat: @ast::pat, expected: ty::t) {\n                     substs);\n             }\n             _ => {\n-                // XXX: This should not be fatal.\n-                tcx.sess.span_fatal(pat.span,\n+                tcx.sess.span_err(pat.span,\n                                     fmt!(\"mismatched types: expected `%s` \\\n                                           but found struct\",\n                                          fcx.infcx().ty_to_str(expected)));\n+                error_happened = true;\n             }\n         }\n \n         // Finally, write in the type.\n-        fcx.write_ty(pat.id, expected);\n+        if error_happened {\n+            fcx.write_error(pat.id);\n+        }\n+        else {\n+            fcx.write_ty(pat.id, expected);\n+        }\n       }\n       ast::pat_tup(ref elts) => {\n         let s = structure_of(fcx, pat.span, expected);"}, {"sha": "14d8b04ade4ebef069c0b4131353f53d1b1a2434", "filename": "src/test/compile-fail/pattern-error-continue.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/62847b0f24a1a550778f0b150a09dcf4c90f3b41/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62847b0f24a1a550778f0b150a09dcf4c90f3b41/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs?ref=62847b0f24a1a550778f0b150a09dcf4c90f3b41", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that certain pattern-match type errors are non-fatal\n+\n+enum A {\n+    B(int, int),\n+    C(int, int, int),\n+    D\n+}\n+\n+struct S {\n+    a: int\n+}\n+\n+fn f(_c: char) {}\n+\n+fn main() {\n+    match B(1, 2) {\n+        B(_, _, _) => (), //~ ERROR this pattern has 3 fields, but\n+        D(_) => (),       //~ ERROR this pattern has 1 field, but\n+        _ => ()\n+    }\n+    match 'c' {\n+        S { _ } => (),   //~ ERROR mismatched types: expected `char` but found struct\n+        _ => ()\n+    }\n+    f(true);            //~ ERROR mismatched types: expected `char` but found `bool`\n+}\n\\ No newline at end of file"}]}