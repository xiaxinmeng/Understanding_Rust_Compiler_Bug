{"sha": "cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiN2E1Mzk1ZGRmYWE3YjhmYzQwZGI1N2IzMmMyMmY2OTc4MGNjZDY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-10T22:38:28Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-11T00:08:36Z"}, "message": "Convert std::map to camel case", "tree": {"sha": "4c79be0560610f8ae49a16670ff9dede47bcaaf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c79be0560610f8ae49a16670ff9dede47bcaaf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "html_url": "https://github.com/rust-lang/rust/commit/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29003c799f41cce948bc043cdd1350ca4bee949e", "url": "https://api.github.com/repos/rust-lang/rust/commits/29003c799f41cce948bc043cdd1350ca4bee949e", "html_url": "https://github.com/rust-lang/rust/commit/29003c799f41cce948bc043cdd1350ca4bee949e"}], "stats": {"total": 769, "additions": 384, "deletions": 385}, "files": [{"sha": "3c3b4300507584af93f915e58079ff56004183bd", "filename": "doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -450,7 +450,7 @@ Two examples of paths with type arguments:\n # use std::map;\n # fn f() {\n # fn id<T:Copy>(t: T) -> T { t }\n-type t = map::hashmap<int,~str>;  // Type arguments used in a type expression\n+type t = map::HashMap<int,~str>;  // Type arguments used in a type expression\n let x = id::<int>(10);           // Type arguments used in a call expression\n # }\n ~~~~"}, {"sha": "0d5ad013d4785a7e66a64d96d9223e3ab8d212da", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -10,7 +10,7 @@ use syntax::diagnostic;\n use result::{Ok, Err};\n use io::WriterUtil;\n use std::{map, json, tempfile, term, sort, getopts};\n-use map::hashmap;\n+use map::HashMap;\n use to_str::to_str;\n use getopts::{optflag, optopt, opt_present};\n \n@@ -71,9 +71,9 @@ type cargo = {\n     libdir: Path,\n     workdir: Path,\n     sourcedir: Path,\n-    sources: map::hashmap<~str, source>,\n+    sources: map::HashMap<~str, source>,\n     mut current_install: ~str,\n-    dep_cache: map::hashmap<~str, bool>,\n+    dep_cache: map::HashMap<~str, bool>,\n     opts: options\n };\n \n@@ -454,7 +454,7 @@ fn parse_source(name: ~str, j: json::Json) -> source {\n     };\n }\n \n-fn try_parse_sources(filename: &Path, sources: map::hashmap<~str, source>) {\n+fn try_parse_sources(filename: &Path, sources: map::HashMap<~str, source>) {\n     if !os::path_exists(filename)  { return; }\n     let c = io::read_whole_file_str(filename);\n     match json::from_str(result::get(c)) {\n@@ -469,7 +469,7 @@ fn try_parse_sources(filename: &Path, sources: map::hashmap<~str, source>) {\n     }\n }\n \n-fn load_one_source_package(src: source, p: map::hashmap<~str, json::Json>) {\n+fn load_one_source_package(src: source, p: map::HashMap<~str, json::Json>) {\n     let name = match p.find(~\"name\") {\n         Some(json::String(n)) => {\n             if !valid_pkg_name(*n) {"}, {"sha": "e9b8486165a4168c83ef4b99e39a646f93302f7b", "filename": "src/libstd/json.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -6,8 +6,8 @@\n use core::cmp::{Eq, Ord};\n use result::{Result, Ok, Err};\n use io::WriterUtil;\n-use map::hashmap;\n-use map::map;\n+use map::HashMap;\n+use map::Map;\n use sort::Sort;\n \n export Json;\n@@ -34,7 +34,7 @@ enum Json {\n     String(@~str),\n     Boolean(bool),\n     List(@~[Json]),\n-    Dict(map::hashmap<~str, Json>),\n+    Dict(map::HashMap<~str, Json>),\n     Null,\n }\n \n@@ -797,7 +797,7 @@ impl <A: ToJson> ~[A]: ToJson {\n     fn to_json() -> Json { List(@self.map(|elt| elt.to_json())) }\n }\n \n-impl <A: ToJson Copy> hashmap<~str, A>: ToJson {\n+impl <A: ToJson Copy> HashMap<~str, A>: ToJson {\n     fn to_json() -> Json {\n         let d = map::str_hash();\n         for self.each() |key, value| {"}, {"sha": "2db34c32c811f1e43f6554b08ad2ee47a320a9b3", "filename": "src/libstd/map.rs", "status": "modified", "additions": 84, "deletions": 84, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -12,19 +12,19 @@ use core::cmp::Eq;\n use hash::Hash;\n use to_bytes::IterBytes;\n \n-export hashmap, hashfn, eqfn, set, map, chained, hashmap, str_hash;\n+export HashMap, hashfn, eqfn, Set, Map, chained, hashmap, str_hash;\n export box_str_hash;\n export bytes_hash, int_hash, uint_hash, set_add;\n export hash_from_vec, hash_from_strs, hash_from_bytes;\n export hash_from_ints, hash_from_uints;\n export vec_from_set;\n \n /// A convenience type to treat a hashmap as a set\n-type set<K:Eq IterBytes Hash> = hashmap<K, ()>;\n+type Set<K:Eq IterBytes Hash> = HashMap<K, ()>;\n \n-type hashmap<K:Eq IterBytes Hash, V> = chained::t<K, V>;\n+type HashMap<K:Eq IterBytes Hash, V> = chained::T<K, V>;\n \n-trait map<K:Eq IterBytes Hash Copy, V: Copy> {\n+trait Map<K:Eq IterBytes Hash Copy, V: Copy> {\n     /// Return the number of elements in the map\n     pure fn size() -> uint;\n \n@@ -86,9 +86,9 @@ trait map<K:Eq IterBytes Hash Copy, V: Copy> {\n }\n \n mod util {\n-    type rational = {num: int, den: int}; // : int::positive(*.den);\n+    type Rational = {num: int, den: int}; // : int::positive(*.den);\n \n-    pure fn rational_leq(x: rational, y: rational) -> bool {\n+    pure fn rational_leq(x: Rational, y: Rational) -> bool {\n         // NB: Uses the fact that rationals have positive denominators WLOG:\n \n         x.num * y.den <= y.num * x.den\n@@ -99,41 +99,41 @@ mod util {\n // FIXME (#2344): package this up and export it as a datatype usable for\n // external code that doesn't want to pay the cost of a box.\n mod chained {\n-    export t, mk, hashmap;\n+    export T, mk, HashMap;\n \n     const initial_capacity: uint = 32u; // 2^5\n \n-    struct entry<K, V> {\n+    struct Entry<K, V> {\n         hash: uint,\n         key: K,\n         value: V,\n-        mut next: Option<@entry<K, V>>\n+        mut next: Option<@Entry<K, V>>\n     }\n \n-    struct hashmap_<K:Eq IterBytes Hash, V> {\n+    struct HashMap_<K:Eq IterBytes Hash, V> {\n         mut count: uint,\n-        mut chains: ~[mut Option<@entry<K,V>>]\n+        mut chains: ~[mut Option<@Entry<K,V>>]\n     }\n \n-    type t<K:Eq IterBytes Hash, V> = @hashmap_<K, V>;\n+    type T<K:Eq IterBytes Hash, V> = @HashMap_<K, V>;\n \n-    enum search_result<K, V> {\n-        not_found,\n-        found_first(uint, @entry<K,V>),\n-        found_after(@entry<K,V>, @entry<K,V>)\n+    enum SearchResult<K, V> {\n+        NotFound,\n+        FoundFirst(uint, @Entry<K,V>),\n+        FoundAfter(@Entry<K,V>, @Entry<K,V>)\n     }\n \n-    priv impl<K:Eq IterBytes Hash, V: Copy> t<K, V> {\n+    priv impl<K:Eq IterBytes Hash, V: Copy> T<K, V> {\n         pure fn search_rem(k: &K, h: uint, idx: uint,\n-                           e_root: @entry<K,V>) -> search_result<K,V> {\n+                           e_root: @Entry<K,V>) -> SearchResult<K,V> {\n             let mut e0 = e_root;\n             let mut comp = 1u;   // for logging\n             loop {\n                 match copy e0.next {\n                   None => {\n                     debug!(\"search_tbl: absent, comp %u, hash %u, idx %u\",\n                            comp, h, idx);\n-                    return not_found;\n+                    return NotFound;\n                   }\n                   Some(e1) => {\n                     comp += 1u;\n@@ -142,7 +142,7 @@ mod chained {\n                             debug!(\"search_tbl: present, comp %u, \\\n                                     hash %u, idx %u\",\n                                    comp, h, idx);\n-                            return found_after(e0, e1);\n+                            return FoundAfter(e0, e1);\n                         } else {\n                             e0 = e1;\n                         }\n@@ -152,20 +152,20 @@ mod chained {\n             };\n         }\n \n-        pure fn search_tbl(k: &K, h: uint) -> search_result<K,V> {\n+        pure fn search_tbl(k: &K, h: uint) -> SearchResult<K,V> {\n             let idx = h % vec::len(self.chains);\n             match copy self.chains[idx] {\n               None => {\n                 debug!(\"search_tbl: none, comp %u, hash %u, idx %u\",\n                        0u, h, idx);\n-                return not_found;\n+                return NotFound;\n               }\n               Some(e) => {\n                 unchecked {\n                     if e.hash == h && e.key == *k {\n                         debug!(\"search_tbl: present, comp %u, hash %u, \\\n                                 idx %u\", 1u, h, idx);\n-                        return found_first(idx, e);\n+                        return FoundFirst(idx, e);\n                     } else {\n                         return self.search_rem(k, h, idx, e);\n                     }\n@@ -186,7 +186,7 @@ mod chained {\n             self.chains = new_chains;\n         }\n \n-        pure fn each_entry(blk: fn(@entry<K,V>) -> bool) {\n+        pure fn each_entry(blk: fn(@Entry<K,V>) -> bool) {\n             // n.b. we can't use vec::iter() here because self.chains\n             // is stored in a mutable location.\n             let mut i = 0u, n = self.chains.len();\n@@ -207,7 +207,7 @@ mod chained {\n         }\n     }\n \n-    impl<K:Eq IterBytes Hash Copy, V: Copy> t<K, V>: map<K, V> {\n+    impl<K:Eq IterBytes Hash Copy, V: Copy> T<K, V>: Map<K, V> {\n         pure fn size() -> uint { self.count }\n \n         fn contains_key(+k: K) -> bool {\n@@ -217,19 +217,19 @@ mod chained {\n         fn contains_key_ref(k: &K) -> bool {\n             let hash = k.hash_keyed(0,0) as uint;\n             match self.search_tbl(k, hash) {\n-              not_found => false,\n-              found_first(*) | found_after(*) => true\n+              NotFound => false,\n+              FoundFirst(*) | FoundAfter(*) => true\n             }\n         }\n \n         fn insert(+k: K, +v: V) -> bool {\n             let hash = k.hash_keyed(0,0) as uint;\n             match self.search_tbl(&k, hash) {\n-              not_found => {\n+              NotFound => {\n                 self.count += 1u;\n                 let idx = hash % vec::len(self.chains);\n                 let old_chain = self.chains[idx];\n-                self.chains[idx] = Some(@entry {\n+                self.chains[idx] = Some(@Entry {\n                     hash: hash,\n                     key: k,\n                     value: v,\n@@ -245,16 +245,16 @@ mod chained {\n \n                 return true;\n               }\n-              found_first(idx, entry) => {\n-                self.chains[idx] = Some(@entry {\n+              FoundFirst(idx, entry) => {\n+                self.chains[idx] = Some(@Entry {\n                     hash: hash,\n                     key: k,\n                     value: v,\n                     next: entry.next});\n                 return false;\n               }\n-              found_after(prev, entry) => {\n-                prev.next = Some(@entry {\n+              FoundAfter(prev, entry) => {\n+                prev.next = Some(@Entry {\n                     hash: hash,\n                     key: k,\n                     value: v,\n@@ -267,9 +267,9 @@ mod chained {\n         pure fn find(+k: K) -> Option<V> {\n             unchecked {\n                 match self.search_tbl(&k, k.hash_keyed(0,0) as uint) {\n-                  not_found => None,\n-                  found_first(_, entry) => Some(entry.value),\n-                  found_after(_, entry) => Some(entry.value)\n+                  NotFound => None,\n+                  FoundFirst(_, entry) => Some(entry.value),\n+                  FoundAfter(_, entry) => Some(entry.value)\n                 }\n             }\n         }\n@@ -284,13 +284,13 @@ mod chained {\n \n         fn remove(+k: K) -> bool {\n             match self.search_tbl(&k, k.hash_keyed(0,0) as uint) {\n-              not_found => false,\n-              found_first(idx, entry) => {\n+              NotFound => false,\n+              FoundFirst(idx, entry) => {\n                 self.count -= 1u;\n                 self.chains[idx] = entry.next;\n                 true\n               }\n-              found_after(eprev, entry) => {\n+              FoundAfter(eprev, entry) => {\n                 self.count -= 1u;\n                 eprev.next = entry.next;\n                 true\n@@ -330,7 +330,7 @@ mod chained {\n         }\n     }\n \n-    impl<K:Eq IterBytes Hash Copy ToStr, V: ToStr Copy> t<K, V>: ToStr {\n+    impl<K:Eq IterBytes Hash Copy ToStr, V: ToStr Copy> T<K, V>: ToStr {\n         fn to_writer(wr: io::Writer) {\n             if self.count == 0u {\n                 wr.write_str(~\"{}\");\n@@ -356,20 +356,20 @@ mod chained {\n         }\n     }\n \n-    impl<K:Eq IterBytes Hash Copy, V: Copy> t<K, V>: ops::Index<K, V> {\n+    impl<K:Eq IterBytes Hash Copy, V: Copy> T<K, V>: ops::Index<K, V> {\n         pure fn index(&&k: K) -> V {\n             unchecked {\n                 self.get(k)\n             }\n         }\n     }\n \n-    fn chains<K,V>(nchains: uint) -> ~[mut Option<@entry<K,V>>] {\n+    fn chains<K,V>(nchains: uint) -> ~[mut Option<@Entry<K,V>>] {\n         vec::to_mut(vec::from_elem(nchains, None))\n     }\n \n-    fn mk<K:Eq IterBytes Hash, V: Copy>() -> t<K,V> {\n-        let slf: t<K, V> = @hashmap_ {count: 0u,\n+    fn mk<K:Eq IterBytes Hash, V: Copy>() -> T<K,V> {\n+        let slf: T<K, V> = @HashMap_ {count: 0u,\n                                       chains: chains(initial_capacity)};\n         slf\n     }\n@@ -380,48 +380,48 @@ Function: hashmap\n \n Construct a hashmap.\n */\n-fn hashmap<K:Eq IterBytes Hash Const, V: Copy>()\n-        -> hashmap<K, V> {\n+fn HashMap<K:Eq IterBytes Hash Const, V: Copy>()\n+        -> HashMap<K, V> {\n     chained::mk()\n }\n \n /// Construct a hashmap for string-slice keys\n-fn str_slice_hash<V: Copy>() -> hashmap<&str, V> {\n-    return hashmap();\n+fn str_slice_hash<V: Copy>() -> HashMap<&str, V> {\n+    return HashMap();\n }\n \n /// Construct a hashmap for string keys\n-fn str_hash<V: Copy>() -> hashmap<~str, V> {\n-    return hashmap();\n+fn str_hash<V: Copy>() -> HashMap<~str, V> {\n+    return HashMap();\n }\n \n /// Construct a hashmap for boxed string keys\n-fn box_str_hash<V: Copy>() -> hashmap<@~str, V> {\n-    hashmap()\n+fn box_str_hash<V: Copy>() -> HashMap<@~str, V> {\n+    HashMap()\n }\n \n /// Construct a hashmap for byte string keys\n-fn bytes_hash<V: Copy>() -> hashmap<~[u8], V> {\n-    return hashmap();\n+fn bytes_hash<V: Copy>() -> HashMap<~[u8], V> {\n+    return HashMap();\n }\n \n /// Construct a hashmap for int keys\n-fn int_hash<V: Copy>() -> hashmap<int, V> {\n-    return hashmap();\n+fn int_hash<V: Copy>() -> HashMap<int, V> {\n+    return HashMap();\n }\n \n /// Construct a hashmap for uint keys\n-fn uint_hash<V: Copy>() -> hashmap<uint, V> {\n-    return hashmap();\n+fn uint_hash<V: Copy>() -> HashMap<uint, V> {\n+    return HashMap();\n }\n \n /// Convenience function for adding keys to a hashmap with nil type keys\n-fn set_add<K:Eq IterBytes Hash Const Copy>(set: set<K>, +key: K) -> bool {\n+fn set_add<K:Eq IterBytes Hash Const Copy>(set: Set<K>, +key: K) -> bool {\n     set.insert(key, ())\n }\n \n /// Convert a set into a vector.\n-fn vec_from_set<T:Eq IterBytes Hash Copy>(s: set<T>) -> ~[T] {\n+fn vec_from_set<T:Eq IterBytes Hash Copy>(s: Set<T>) -> ~[T] {\n     let mut v = ~[];\n     vec::reserve(v, s.size());\n     do s.each_key() |k| {\n@@ -433,8 +433,8 @@ fn vec_from_set<T:Eq IterBytes Hash Copy>(s: set<T>) -> ~[T] {\n \n /// Construct a hashmap from a vector\n fn hash_from_vec<K: Eq IterBytes Hash Const Copy, V: Copy>(\n-    items: &[(K, V)]) -> hashmap<K, V> {\n-    let map = hashmap();\n+    items: &[(K, V)]) -> HashMap<K, V> {\n+    let map = HashMap();\n     do vec::iter(items) |item| {\n         let (key, value) = item;\n         map.insert(key, value);\n@@ -443,28 +443,28 @@ fn hash_from_vec<K: Eq IterBytes Hash Const Copy, V: Copy>(\n }\n \n /// Construct a hashmap from a vector with string keys\n-fn hash_from_strs<V: Copy>(items: &[(~str, V)]) -> hashmap<~str, V> {\n+fn hash_from_strs<V: Copy>(items: &[(~str, V)]) -> HashMap<~str, V> {\n     hash_from_vec(items)\n }\n \n /// Construct a hashmap from a vector with byte keys\n-fn hash_from_bytes<V: Copy>(items: &[(~[u8], V)]) -> hashmap<~[u8], V> {\n+fn hash_from_bytes<V: Copy>(items: &[(~[u8], V)]) -> HashMap<~[u8], V> {\n     hash_from_vec(items)\n }\n \n /// Construct a hashmap from a vector with int keys\n-fn hash_from_ints<V: Copy>(items: &[(int, V)]) -> hashmap<int, V> {\n+fn hash_from_ints<V: Copy>(items: &[(int, V)]) -> HashMap<int, V> {\n     hash_from_vec(items)\n }\n \n /// Construct a hashmap from a vector with uint keys\n-fn hash_from_uints<V: Copy>(items: &[(uint, V)]) -> hashmap<uint, V> {\n+fn hash_from_uints<V: Copy>(items: &[(uint, V)]) -> HashMap<uint, V> {\n     hash_from_vec(items)\n }\n \n // XXX Transitional\n impl<K: Eq IterBytes Hash Copy, V: Copy> @Mut<LinearMap<K, V>>:\n-    map<K, V> {\n+    Map<K, V> {\n     pure fn size() -> uint {\n         unchecked {\n             do self.borrow_const |p| {\n@@ -575,8 +575,8 @@ mod tests {\n         pure fn eq_uint(x: &uint, y: &uint) -> bool { *x == *y }\n         pure fn uint_id(x: &uint) -> uint { *x }\n         debug!(\"uint -> uint\");\n-        let hm_uu: map::hashmap<uint, uint> =\n-            map::hashmap::<uint, uint>();\n+        let hm_uu: map::HashMap<uint, uint> =\n+            map::HashMap::<uint, uint>();\n         assert (hm_uu.insert(10u, 12u));\n         assert (hm_uu.insert(11u, 13u));\n         assert (hm_uu.insert(12u, 14u));\n@@ -591,8 +591,8 @@ mod tests {\n         let eleven: ~str = ~\"eleven\";\n         let twelve: ~str = ~\"twelve\";\n         debug!(\"str -> uint\");\n-        let hm_su: map::hashmap<~str, uint> =\n-            map::hashmap::<~str, uint>();\n+        let hm_su: map::HashMap<~str, uint> =\n+            map::HashMap::<~str, uint>();\n         assert (hm_su.insert(~\"ten\", 12u));\n         assert (hm_su.insert(eleven, 13u));\n         assert (hm_su.insert(~\"twelve\", 14u));\n@@ -605,8 +605,8 @@ mod tests {\n         assert (!hm_su.insert(~\"twelve\", 12u));\n         assert (hm_su.get(~\"twelve\") == 12u);\n         debug!(\"uint -> str\");\n-        let hm_us: map::hashmap<uint, ~str> =\n-            map::hashmap::<uint, ~str>();\n+        let hm_us: map::HashMap<uint, ~str> =\n+            map::HashMap::<uint, ~str>();\n         assert (hm_us.insert(10u, ~\"twelve\"));\n         assert (hm_us.insert(11u, ~\"thirteen\"));\n         assert (hm_us.insert(12u, ~\"fourteen\"));\n@@ -618,8 +618,8 @@ mod tests {\n         assert (!hm_us.insert(12u, ~\"twelve\"));\n         assert hm_us.get(12u) == ~\"twelve\";\n         debug!(\"str -> str\");\n-        let hm_ss: map::hashmap<~str, ~str> =\n-            map::hashmap::<~str, ~str>();\n+        let hm_ss: map::HashMap<~str, ~str> =\n+            map::HashMap::<~str, ~str>();\n         assert (hm_ss.insert(ten, ~\"twelve\"));\n         assert (hm_ss.insert(eleven, ~\"thirteen\"));\n         assert (hm_ss.insert(twelve, ~\"fourteen\"));\n@@ -644,8 +644,8 @@ mod tests {\n         pure fn eq_uint(x: &uint, y: &uint) -> bool { *x == *y }\n         pure fn uint_id(x: &uint) -> uint { *x }\n         debug!(\"uint -> uint\");\n-        let hm_uu: map::hashmap<uint, uint> =\n-            map::hashmap::<uint, uint>();\n+        let hm_uu: map::HashMap<uint, uint> =\n+            map::HashMap::<uint, uint>();\n         let mut i: uint = 0u;\n         while i < num_to_insert {\n             assert (hm_uu.insert(i, i * i));\n@@ -669,8 +669,8 @@ mod tests {\n             i += 1u;\n         }\n         debug!(\"str -> str\");\n-        let hm_ss: map::hashmap<~str, ~str> =\n-            map::hashmap::<~str, ~str>();\n+        let hm_ss: map::HashMap<~str, ~str> =\n+            map::HashMap::<~str, ~str>();\n         i = 0u;\n         while i < num_to_insert {\n             assert hm_ss.insert(uint::to_str(i, 2u), uint::to_str(i * i, 2u));\n@@ -717,8 +717,8 @@ mod tests {\n         assert (hash(&0u) == hash(&1u));\n         assert (hash(&2u) == hash(&3u));\n         assert (hash(&0u) != hash(&2u));\n-        let hm: map::hashmap<uint, uint> =\n-            map::hashmap::<uint, uint>();\n+        let hm: map::HashMap<uint, uint> =\n+            map::HashMap::<uint, uint>();\n         let mut i: uint = 0u;\n         while i < num_to_insert {\n             assert (hm.insert(i, i * i));\n@@ -778,7 +778,7 @@ mod tests {\n     #[test]\n     fn test_contains_key() {\n         let key = ~\"k\";\n-        let map = map::hashmap::<~str, ~str>();\n+        let map = map::HashMap::<~str, ~str>();\n         assert (!map.contains_key(key));\n         map.insert(key, ~\"val\");\n         assert (map.contains_key(key));\n@@ -787,7 +787,7 @@ mod tests {\n     #[test]\n     fn test_find() {\n         let key = ~\"k\";\n-        let map = map::hashmap::<~str, ~str>();\n+        let map = map::HashMap::<~str, ~str>();\n         assert (option::is_none(map.find(key)));\n         map.insert(key, ~\"val\");\n         assert (option::get(map.find(key)) == ~\"val\");\n@@ -796,7 +796,7 @@ mod tests {\n     #[test]\n     fn test_clear() {\n         let key = ~\"k\";\n-        let map = map::hashmap::<~str, ~str>();\n+        let map = map::HashMap::<~str, ~str>();\n         map.insert(key, ~\"val\");\n         assert (map.size() == 1);\n         assert (map.contains_key(key));"}, {"sha": "a83cb8637b553aa0539a47543884dbcf9311609e", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -3,7 +3,7 @@\n #[forbid(deprecated_pattern)];\n \n use core::cmp::Eq;\n-use map::{hashmap, str_hash};\n+use map::{HashMap, str_hash};\n use io::{Reader, ReaderUtil};\n use dvec::DVec;\n use from_str::FromStr;\n@@ -184,7 +184,7 @@ fn encode_plus(s: &str) -> ~str {\n /**\n  * Encode a hashmap to the 'application/x-www-form-urlencoded' media type.\n  */\n-fn encode_form_urlencoded(m: hashmap<~str, @DVec<@~str>>) -> ~str {\n+fn encode_form_urlencoded(m: HashMap<~str, @DVec<@~str>>) -> ~str {\n     let mut out = ~\"\";\n     let mut first = true;\n \n@@ -211,7 +211,7 @@ fn encode_form_urlencoded(m: hashmap<~str, @DVec<@~str>>) -> ~str {\n  * type into a hashmap.\n  */\n fn decode_form_urlencoded(s: ~[u8]) ->\n-    map::hashmap<~str, @dvec::DVec<@~str>> {\n+    map::HashMap<~str, @dvec::DVec<@~str>> {\n     do io::with_bytes_reader(s) |rdr| {\n         let m = str_hash();\n         let mut key = ~\"\";"}, {"sha": "87b238ed596c2b64764391ff7e32a0e0a0e98498", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -8,7 +8,7 @@\n use core::option;\n use core::option::{Some, None};\n use dvec::DVec;\n-use map::map;\n+use map::Map;\n \n // FIXME (#2347): Should not be @; there's a bug somewhere in rustc that\n // requires this to be.\n@@ -66,7 +66,7 @@ fn contains_key<T: Copy>(self: SmallIntMap<T>, key: uint) -> bool {\n }\n \n /// Implements the map::map interface for smallintmap\n-impl<V: Copy> SmallIntMap<V>: map::map<uint, V> {\n+impl<V: Copy> SmallIntMap<V>: map::Map<uint, V> {\n     pure fn size() -> uint {\n         let mut sz = 0u;\n         for self.v.each |item| {\n@@ -146,6 +146,6 @@ impl<V: Copy> SmallIntMap<V>: ops::Index<uint, V> {\n }\n \n /// Cast the given smallintmap to a map::map\n-fn as_map<V: Copy>(s: SmallIntMap<V>) -> map::map<uint, V> {\n-    s as map::map::<uint, V>\n+fn as_map<V: Copy>(s: SmallIntMap<V>) -> map::Map<uint, V> {\n+    s as map::Map::<uint, V>\n }"}, {"sha": "5381c1564a53468d5f2e2bc0694f844e61ac0c1a", "filename": "src/libstd/std.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -61,7 +61,6 @@ mod bitv;\n mod deque;\n mod fun_treemap;\n mod list;\n-#[allow(non_camel_case_types)] // XXX\n mod map;\n mod rope;\n mod smallintmap;"}, {"sha": "d9a7543eed4cf72ade94cdaf4b75b8890cb6dfe6", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -1,5 +1,5 @@\n use std::map;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use ast::*;\n use print::pprust;\n use ast_util::{path_to_ident, stmt_id};\n@@ -79,7 +79,7 @@ enum ast_node {\n     node_block(blk),\n }\n \n-type map = std::map::hashmap<node_id, ast_node>;\n+type map = std::map::HashMap<node_id, ast_node>;\n type ctx = {map: map, mut path: path,\n             mut local_id: uint, diag: span_handler};\n type vt = visit::vt<ctx>;"}, {"sha": "34ddee55a63a5f5ea3aaf9d0ec2f0cc36994e83f", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -259,8 +259,8 @@ impl def_id : core::to_bytes::IterBytes {\n     }\n }\n \n-fn new_def_hash<V: Copy>() -> std::map::hashmap<ast::def_id, V> {\n-    return std::map::hashmap::<ast::def_id, V>();\n+fn new_def_hash<V: Copy>() -> std::map::HashMap<ast::def_id, V> {\n+    return std::map::HashMap::<ast::def_id, V>();\n }\n \n fn block_from_expr(e: @expr) -> blk {"}, {"sha": "67a7b6d3101881271fbbb10f9111147bc872c34e", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -1,7 +1,7 @@\n // Functions dealing with attributes and meta_items\n \n use std::map;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use either::Either;\n use diagnostic::span_handler;\n use ast_util::{spanned, dummy_spanned};"}, {"sha": "1dc8cee6ac9c3b7a98bf0f00367426020c0d6ea1", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -72,7 +72,7 @@ node twice.\n use base::*;\n use codemap::span;\n use std::map;\n-use std::map::hashmap;\n+use std::map::HashMap;\n \n export expand;\n \n@@ -84,8 +84,8 @@ mod syntax {\n     export parse;\n }\n \n-type ser_tps_map = map::hashmap<ast::ident, fn@(@ast::expr) -> ~[@ast::stmt]>;\n-type deser_tps_map = map::hashmap<ast::ident, fn@() -> @ast::expr>;\n+type ser_tps_map = map::HashMap<ast::ident, fn@(@ast::expr) -> ~[@ast::stmt]>;\n+type deser_tps_map = map::HashMap<ast::ident, fn@() -> @ast::expr>;\n \n fn expand(cx: ext_ctxt,\n           span: span,"}, {"sha": "e1114ce8e2a65f5c58c9b8e5d3490bd51a46f771", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -1,4 +1,4 @@\n-use std::map::hashmap;\n+use std::map::HashMap;\n use parse::parser;\n use diagnostic::span_handler;\n use codemap::{codemap, span, expn_info, expanded_from};\n@@ -65,7 +65,7 @@ enum syntax_extension {\n \n // A temporary hard-coded map of methods for expanding syntax extension\n // AST nodes into full ASTs\n-fn syntax_expander_table() -> hashmap<~str, syntax_extension> {\n+fn syntax_expander_table() -> HashMap<~str, syntax_extension> {\n     fn builtin(f: syntax_expander_) -> syntax_extension\n         {normal({expander: f, span: None})}\n     fn builtin_expr_tt(f: syntax_expander_tt_) -> syntax_extension {"}, {"sha": "ffe86c94a243d72c6bc428c1e1754f9390b1a6f0", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -1,4 +1,4 @@\n-use std::map::hashmap;\n+use std::map::HashMap;\n \n use ast::{crate, expr_, expr_mac, mac_invoc, mac_invoc_tt,\n              tt_delim, tt_tok, item_mac};\n@@ -10,7 +10,7 @@ use parse::{parser, parse_expr_from_source_str, new_parser_from_tt};\n \n use codemap::{span, expanded_from};\n \n-fn expand_expr(exts: hashmap<~str, syntax_extension>, cx: ext_ctxt,\n+fn expand_expr(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n                e: expr_, s: span, fld: ast_fold,\n                orig: fn@(expr_, span, ast_fold) -> (expr_, span))\n     -> (expr_, span)\n@@ -132,7 +132,7 @@ fn expand_expr(exts: hashmap<~str, syntax_extension>, cx: ext_ctxt,\n //\n // NB: there is some redundancy between this and expand_item, below, and\n // they might benefit from some amount of semantic and language-UI merger.\n-fn expand_mod_items(exts: hashmap<~str, syntax_extension>, cx: ext_ctxt,\n+fn expand_mod_items(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n                     module_: ast::_mod, fld: ast_fold,\n                     orig: fn@(ast::_mod, ast_fold) -> ast::_mod)\n     -> ast::_mod\n@@ -165,7 +165,7 @@ fn expand_mod_items(exts: hashmap<~str, syntax_extension>, cx: ext_ctxt,\n \n \n // When we enter a module, record it, for the sake of `module!`\n-fn expand_item(exts: hashmap<~str, syntax_extension>,\n+fn expand_item(exts: HashMap<~str, syntax_extension>,\n                cx: ext_ctxt, &&it: @ast::item, fld: ast_fold,\n                orig: fn@(&&@ast::item, ast_fold) -> Option<@ast::item>)\n     -> Option<@ast::item>\n@@ -193,7 +193,7 @@ fn expand_item(exts: hashmap<~str, syntax_extension>,\n \n // Support for item-position macro invocations, exactly the same\n // logic as for expression-position macro invocations.\n-fn expand_item_mac(exts: hashmap<~str, syntax_extension>,\n+fn expand_item_mac(exts: HashMap<~str, syntax_extension>,\n                    cx: ext_ctxt, &&it: @ast::item,\n                    fld: ast_fold) -> Option<@ast::item> {\n     match it.node {"}, {"sha": "56fbb3bb074e5959e86ffc4dbb5a76eb0b6bc619", "filename": "src/libsyntax/ext/simplext.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsimplext.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -1,5 +1,5 @@\n use codemap::span;\n-use std::map::{hashmap, str_hash, uint_hash};\n+use std::map::{HashMap, str_hash, uint_hash};\n use dvec::DVec;\n \n use base::*;\n@@ -123,9 +123,9 @@ fn compose_sels(s1: selector, s2: selector) -> selector {\n \n \n type binders =\n-    {real_binders: hashmap<ident, selector>,\n+    {real_binders: HashMap<ident, selector>,\n      literal_ast_matchers: DVec<selector>};\n-type bindings = hashmap<ident, arb_depth<matchable>>;\n+type bindings = HashMap<ident, arb_depth<matchable>>;\n \n fn acumm_bindings(_cx: ext_ctxt, _b_dest: bindings, _b_src: bindings) { }\n \n@@ -237,9 +237,9 @@ fn follow_for_trans(cx: ext_ctxt, mmaybe: Option<arb_depth<matchable>>,\n \n /* helper for transcribe_exprs: what vars from `b` occur in `e`? */\n fn free_vars(b: bindings, e: @expr, it: fn(ident)) {\n-    let idents: hashmap<ident, ()> = uint_hash::<()>();\n+    let idents: HashMap<ident, ()> = uint_hash::<()>();\n     fn mark_ident(&&i: ident, _fld: ast_fold, b: bindings,\n-                  idents: hashmap<ident, ()>) -> ident {\n+                  idents: HashMap<ident, ()>) -> ident {\n         if b.contains_key(i) { idents.insert(i, ()); }\n         return i;\n     }"}, {"sha": "f32c23c936f6721c253fa5b86e625e4b6cbec88e", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -10,7 +10,7 @@ use parse::parse_sess;\n use dvec::DVec;\n use ast::{matcher, match_tok, match_seq, match_nonterminal, ident};\n use ast_util::mk_sp;\n-use std::map::{hashmap, uint_hash};\n+use std::map::{HashMap, uint_hash};\n \n /* This is an Earley-like parser, without support for in-grammar nonterminals,\n only by calling out to the main rust parser for named nonterminals (which it\n@@ -168,9 +168,9 @@ enum named_match {\n type earley_item = matcher_pos;\n \n fn nameize(p_s: parse_sess, ms: ~[matcher], res: ~[@named_match])\n-    -> hashmap<ident,@named_match> {\n+    -> HashMap<ident,@named_match> {\n     fn n_rec(p_s: parse_sess, m: matcher, res: ~[@named_match],\n-             ret_val: hashmap<ident, @named_match>) {\n+             ret_val: HashMap<ident, @named_match>) {\n         match m {\n           {node: match_tok(_), span: _} => (),\n           {node: match_seq(more_ms, _, _, _, _), span: _} => {\n@@ -191,13 +191,13 @@ fn nameize(p_s: parse_sess, ms: ~[matcher], res: ~[@named_match])\n }\n \n enum parse_result {\n-    success(hashmap<ident, @named_match>),\n+    success(HashMap<ident, @named_match>),\n     failure(codemap::span, ~str),\n     error(codemap::span, ~str)\n }\n \n fn parse_or_else(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader,\n-                 ms: ~[matcher]) -> hashmap<ident, @named_match> {\n+                 ms: ~[matcher]) -> HashMap<ident, @named_match> {\n     match parse(sess, cfg, rdr, ms) {\n       success(m) => m,\n       failure(sp, str) => sess.span_diagnostic.span_fatal(sp, str),"}, {"sha": "ebb62293cc533e2351fee014173fcfa2f49d3d4a", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -7,7 +7,7 @@ use parse::token::{FAT_ARROW, SEMI, LBRACE, RBRACE, nt_matchers, nt_tt};\n use parse::parser::{parser, SOURCE_FILE};\n use macro_parser::{parse, parse_or_else, success, failure, named_match,\n                       matched_seq, matched_nonterminal, error};\n-use std::map::hashmap;\n+use std::map::HashMap;\n use parse::token::special_idents;\n \n fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,"}, {"sha": "f7c7475bfc986f6c5b1503d6cfd90b30f15a590d", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -4,7 +4,7 @@ use macro_parser::{named_match, matched_seq, matched_nonterminal};\n use codemap::span;\n use parse::token::{EOF, INTERPOLATED, IDENT, token, nt_ident,\n                       ident_interner};\n-use std::map::{hashmap, box_str_hash};\n+use std::map::{HashMap, box_str_hash};\n \n export tt_reader,  new_tt_reader, dup_tt_reader, tt_next_token;\n \n@@ -28,7 +28,7 @@ type tt_reader = @{\n     interner: ident_interner,\n     mut cur: tt_frame,\n     /* for MBE-style macro transcription */\n-    interpolations: std::map::hashmap<ident, @named_match>,\n+    interpolations: std::map::HashMap<ident, @named_match>,\n     mut repeat_idx: ~[mut uint],\n     mut repeat_len: ~[uint],\n     /* cached: */\n@@ -40,7 +40,7 @@ type tt_reader = @{\n  *  `src` contains no `tt_seq`s and `tt_nonterminal`s, `interp` can (and\n  *  should) be none. */\n fn new_tt_reader(sp_diag: span_handler, itr: ident_interner,\n-                 interp: Option<std::map::hashmap<ident,@named_match>>,\n+                 interp: Option<std::map::HashMap<ident,@named_match>>,\n                  src: ~[ast::token_tree])\n     -> tt_reader {\n     let r = @{sp_diag: sp_diag, interner: itr,"}, {"sha": "d71d95fd63fe516d48223e59af4e41b63fde34f5", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -1,4 +1,4 @@\n-use std::map::{hashmap};\n+use std::map::{HashMap};\n use ast_util::spanned;\n use parser::parser;\n use lexer::reader;"}, {"sha": "e597d33a836d5c449c4cb9a47645133aeb660bed", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -2,7 +2,7 @@ use print::pprust::expr_to_str;\n \n use result::Result;\n use either::{Either, Left, Right};\n-use std::map::{hashmap, str_hash};\n+use std::map::{HashMap, str_hash};\n use token::{can_begin_expr, is_ident, is_ident_or_path, is_plain_ident,\n                INTERPOLATED};\n use codemap::{span,fss_none};\n@@ -216,7 +216,7 @@ fn parser(sess: parse_sess, cfg: ast::crate_cfg,\n         keywords: token::keyword_table(),\n         restricted_keywords: token::restricted_keyword_table(),\n         strict_keywords: token::strict_keyword_table(),\n-        obsolete_set: std::map::hashmap(),\n+        obsolete_set: std::map::HashMap(),\n     }\n }\n \n@@ -234,12 +234,12 @@ struct parser {\n     mut quote_depth: uint, // not (yet) related to the quasiquoter\n     reader: reader,\n     interner: interner<@~str>,\n-    keywords: hashmap<~str, ()>,\n-    restricted_keywords: hashmap<~str, ()>,\n-    strict_keywords: hashmap<~str, ()>,\n+    keywords: HashMap<~str, ()>,\n+    restricted_keywords: HashMap<~str, ()>,\n+    strict_keywords: HashMap<~str, ()>,\n     /// The set of seen errors about obsolete syntax. Used to suppress\n     /// extra detail when the same error is seen twice\n-    obsolete_set: hashmap<ObsoleteSyntax, ()>,\n+    obsolete_set: HashMap<ObsoleteSyntax, ()>,\n \n     drop {} /* do not copy the parser; its state is tied to outside state */\n }"}, {"sha": "a96b2be6c09e5674dd52473b1c0ed4b4c34c8b20", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -1,6 +1,6 @@\n use util::interner;\n use util::interner::interner;\n-use std::map::{hashmap, str_hash};\n+use std::map::{HashMap, str_hash};\n use std::serialization::{serializer,\n                             deserializer,\n                             serialize_uint,\n@@ -368,7 +368,7 @@ fn mk_fake_ident_interner() -> ident_interner {\n  * that might otherwise contain _value identifiers_.  Strict keywords may not\n  * appear as identifiers.\n  */\n-fn keyword_table() -> hashmap<~str, ()> {\n+fn keyword_table() -> HashMap<~str, ()> {\n     let keywords = str_hash();\n     for contextual_keyword_table().each_key |word| {\n         keywords.insert(word, ());\n@@ -383,7 +383,7 @@ fn keyword_table() -> hashmap<~str, ()> {\n }\n \n /// Keywords that may be used as identifiers\n-fn contextual_keyword_table() -> hashmap<~str, ()> {\n+fn contextual_keyword_table() -> HashMap<~str, ()> {\n     let words = str_hash();\n     let keys = ~[\n         ~\"self\", ~\"static\",\n@@ -408,7 +408,7 @@ fn contextual_keyword_table() -> hashmap<~str, ()> {\n  * * `true` or `false` as identifiers would always be shadowed by\n  *   the boolean constants\n  */\n-fn restricted_keyword_table() -> hashmap<~str, ()> {\n+fn restricted_keyword_table() -> HashMap<~str, ()> {\n     let words = str_hash();\n     let keys = ~[\n         ~\"const\", ~\"copy\",\n@@ -426,7 +426,7 @@ fn restricted_keyword_table() -> hashmap<~str, ()> {\n }\n \n /// Full keywords. May not appear anywhere else.\n-fn strict_keyword_table() -> hashmap<~str, ()> {\n+fn strict_keyword_table() -> HashMap<~str, ()> {\n     let words = str_hash();\n     let keys = ~[\n         ~\"as\", ~\"assert\","}, {"sha": "7e42919f724991cf03f9b82fed7e652af81cd0b6", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -2,18 +2,18 @@\n // allows bidirectional lookup; i.e. given a value, one can easily find the\n // type, and vice versa.\n use std::map;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use dvec::DVec;\n use cmp::Eq;\n use hash::Hash;\n use to_bytes::IterBytes;\n \n type hash_interner<T: Const> =\n-    {map: hashmap<T, uint>,\n+    {map: HashMap<T, uint>,\n      vect: DVec<T>};\n \n fn mk<T:Eq IterBytes Hash Const Copy>() -> interner<T> {\n-    let m = map::hashmap::<T, uint>();\n+    let m = map::HashMap::<T, uint>();\n     let hi: hash_interner<T> =\n         {map: m, vect: DVec()};\n     return hi as interner::<T>;"}, {"sha": "18c63c1934bacc56efbc9d7195a87bce5a9e3979", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -7,7 +7,7 @@ use middle::ty;\n use metadata::{encoder, cstore};\n use middle::trans::common::crate_ctxt;\n use metadata::common::link_meta;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use std::sha1::sha1;\n use syntax::ast;\n use syntax::print::pprust;"}, {"sha": "df3e9e88185d643300a9fafeebbbb98aee221808", "filename": "src/rustc/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Frpath.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -1,5 +1,5 @@\n use std::map;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use metadata::cstore;\n use driver::session;\n use metadata::filesearch;"}, {"sha": "a82fc7ac69a9f982f5b4863d7e766f4d3e7a6634", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -13,7 +13,7 @@ use std::getopts;\n use io::WriterUtil;\n use getopts::{optopt, optmulti, optflag, optflagopt, opt_present};\n use back::{x86, x86_64};\n-use std::map::hashmap;\n+use std::map::HashMap;\n use lib::llvm::llvm;\n \n enum pp_mode {ppm_normal, ppm_expanded, ppm_typed, ppm_identified,"}, {"sha": "c4714ecf9e5ebbc82add0e8d018903268b404f33", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -11,7 +11,7 @@ use core::*;\n // -*- rust -*-\n use result::{Ok, Err};\n use std::getopts;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use getopts::{opt_present};\n use rustc::driver::driver::*;\n use syntax::codemap;"}, {"sha": "64258fcd43abae0222b831f37f8a2c0f79ab7d4f", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -1,4 +1,4 @@\n-use std::map::hashmap;\n+use std::map::HashMap;\n \n use libc::{c_char, c_int, c_uint, c_longlong, c_ulonglong};\n \n@@ -1038,8 +1038,8 @@ fn SetLinkage(Global: ValueRef, Link: Linkage) {\n \n /* Memory-managed object interface to type handles. */\n \n-type type_names = @{type_names: std::map::hashmap<TypeRef, ~str>,\n-                    named_types: std::map::hashmap<~str, TypeRef>};\n+type type_names = @{type_names: std::map::HashMap<TypeRef, ~str>,\n+                    named_types: std::map::HashMap<~str, TypeRef>};\n \n fn associate_type(tn: type_names, s: ~str, t: TypeRef) {\n     assert tn.type_names.insert(t, s);\n@@ -1057,7 +1057,7 @@ fn name_has_type(tn: type_names, s: ~str) -> Option<TypeRef> {\n fn mk_type_names() -> type_names {\n     pure fn hash(t: &TypeRef) -> uint { *t as uint }\n     pure fn eq(a: &TypeRef, b: &TypeRef) -> bool { *a == *b }\n-    @{type_names: std::map::hashmap(),\n+    @{type_names: std::map::HashMap(),\n       named_types: std::map::str_hash()}\n }\n "}, {"sha": "ab7ee46dc6424bed5ce662c44c7613af5bbc51dd", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -5,7 +5,7 @@ use syntax::{ast, ast_util};\n use syntax::attr;\n use syntax::visit;\n use syntax::codemap::span;\n-use std::map::{hashmap, int_hash};\n+use std::map::{HashMap, int_hash};\n use syntax::print::pprust;\n use filesearch::filesearch;\n use common::*;"}, {"sha": "e29a4fd436bc676a0b5a033559db6d21bce7d686", "filename": "src/rustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcsearch.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -10,7 +10,7 @@ use syntax::diagnostic::span_handler;\n use syntax::diagnostic::expect;\n use ast_util::dummy_sp;\n use common::*;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use dvec::DVec;\n \n export class_dtor;"}, {"sha": "be974cb75b5428bbdfabded0958d3b1d088e569b", "filename": "src/rustc/metadata/cstore.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcstore.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -2,7 +2,7 @@\n // crates and libraries\n \n use std::map;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use syntax::{ast, attr};\n use syntax::ast_util::new_def_hash;\n use syntax::parse::token::ident_interner;\n@@ -33,12 +33,12 @@ export get_path;\n // local crate numbers (as generated during this session). Each external\n // crate may refer to types in other external crates, and each has their\n // own crate numbers.\n-type cnum_map = map::hashmap<ast::crate_num, ast::crate_num>;\n+type cnum_map = map::HashMap<ast::crate_num, ast::crate_num>;\n \n // Multiple items may have the same def_id in crate metadata. They may be\n // renamed imports or reexports. This map keeps the \"real\" module path\n // and def_id.\n-type mod_path_map = map::hashmap<ast::def_id, @~str>;\n+type mod_path_map = map::HashMap<ast::def_id, @~str>;\n \n type crate_metadata = @{name: ~str,\n                         data: @~[u8],\n@@ -53,7 +53,7 @@ type crate_metadata = @{name: ~str,\n enum cstore { private(cstore_private), }\n \n type cstore_private =\n-    @{metas: map::hashmap<ast::crate_num, crate_metadata>,\n+    @{metas: map::HashMap<ast::crate_num, crate_metadata>,\n       use_crate_map: use_crate_map,\n       mod_path_map: mod_path_map,\n       mut used_crate_files: ~[Path],\n@@ -62,7 +62,7 @@ type cstore_private =\n       intr: ident_interner};\n \n // Map from node_id's of local use statements to crate numbers\n-type use_crate_map = map::hashmap<ast::node_id, ast::crate_num>;\n+type use_crate_map = map::HashMap<ast::node_id, ast::crate_num>;\n \n // Internal method to retrieve the data from the cstore\n pure fn p(cstore: cstore) -> cstore_private {"}, {"sha": "3f21caafb666c79a21fa5a1e9308e7ed4f564515", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -1,7 +1,7 @@\n // Decoding metadata from a single crate's metadata\n \n use std::{ebml, map};\n-use std::map::{hashmap, str_hash};\n+use std::map::{HashMap, str_hash};\n use io::WriterUtil;\n use dvec::DVec;\n use syntax::{ast, ast_util};"}, {"sha": "313723fc158547dbb768d750aa9c5bfdaac074e8", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -3,7 +3,7 @@\n use util::ppaux::ty_to_str;\n \n use std::{ebml, map};\n-use std::map::hashmap;\n+use std::map::HashMap;\n use io::WriterUtil;\n use ebml::Writer;\n use syntax::ast::*;\n@@ -35,7 +35,7 @@ export encode_ctxt;\n export write_type;\n export encode_def_id;\n \n-type abbrev_map = map::hashmap<ty::t, tyencode::ty_abbrev>;\n+type abbrev_map = map::HashMap<ty::t, tyencode::ty_abbrev>;\n \n type encode_inlined_item = fn@(ecx: @encode_ctxt,\n                                ebml_w: ebml::Writer,\n@@ -45,11 +45,11 @@ type encode_inlined_item = fn@(ecx: @encode_ctxt,\n type encode_parms = {\n     diag: span_handler,\n     tcx: ty::ctxt,\n-    reachable: hashmap<ast::node_id, ()>,\n+    reachable: HashMap<ast::node_id, ()>,\n     reexports: ~[(~str, def_id)],\n     reexports2: middle::resolve::ExportMap2,\n-    item_symbols: hashmap<ast::node_id, ~str>,\n-    discrim_symbols: hashmap<ast::node_id, ~str>,\n+    item_symbols: HashMap<ast::node_id, ~str>,\n+    discrim_symbols: HashMap<ast::node_id, ~str>,\n     link_meta: link_meta,\n     cstore: cstore::cstore,\n     encode_inlined_item: encode_inlined_item\n@@ -72,11 +72,11 @@ enum encode_ctxt = {\n     tcx: ty::ctxt,\n     buf: io::MemBuffer,\n     stats: stats,\n-    reachable: hashmap<ast::node_id, ()>,\n+    reachable: HashMap<ast::node_id, ()>,\n     reexports: ~[(~str, def_id)],\n     reexports2: middle::resolve::ExportMap2,\n-    item_symbols: hashmap<ast::node_id, ~str>,\n-    discrim_symbols: hashmap<ast::node_id, ~str>,\n+    item_symbols: HashMap<ast::node_id, ~str>,\n+    discrim_symbols: HashMap<ast::node_id, ~str>,\n     link_meta: link_meta,\n     cstore: cstore::cstore,\n     encode_inlined_item: encode_inlined_item,"}, {"sha": "0c94213c08c27e4434aab66dc8ddd19d97f21ddb", "filename": "src/rustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftydecode.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -8,7 +8,7 @@ use syntax::ast::*;\n use syntax::ast_util;\n use syntax::ast_util::respan;\n use middle::ty;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use ty::{FnTyBase, FnMeta, FnSig};\n \n export parse_ty_data, parse_def_id, parse_ident;"}, {"sha": "3d2563670239bfee9c3cfd24bcb05b4abc06eb0f", "filename": "src/rustc/metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftyencode.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -1,7 +1,7 @@\n // Type encoding\n \n use io::WriterUtil;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use syntax::ast::*;\n use syntax::diagnostic::span_handler;\n use middle::ty;\n@@ -31,7 +31,7 @@ type ctxt = {\n // Whatever format you choose should not contain pipe characters.\n type ty_abbrev = {pos: uint, len: uint, s: @~str};\n \n-enum abbrev_ctxt { ac_no_abbrevs, ac_use_abbrevs(hashmap<ty::t, ty_abbrev>), }\n+enum abbrev_ctxt { ac_no_abbrevs, ac_use_abbrevs(HashMap<ty::t, ty_abbrev>), }\n \n fn cx_uses_abbrevs(cx: @ctxt) -> bool {\n     match cx.abbrevs {"}, {"sha": "d4891dc677ec0bbf1eb71bd8f587a615286f8bc6", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -10,7 +10,7 @@ use syntax::codemap::span;\n use std::ebml;\n use std::ebml::Writer;\n use std::ebml::get_doc;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use std::serialization::serializer;\n use std::serialization::deserializer;\n use std::serialization::serializer_helpers;"}, {"sha": "99e3005fd0ca4e3e08e875379cd3a769225a749b", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -222,7 +222,7 @@ use syntax::ast_map;\n use syntax::codemap::span;\n use util::ppaux::{ty_to_str, region_to_str, explain_region,\n                   note_and_explain_region};\n-use std::map::{int_hash, hashmap, set};\n+use std::map::{int_hash, HashMap, Set};\n use std::list;\n use std::list::{List, Cons, Nil};\n use result::{Result, Ok, Err};\n@@ -300,7 +300,7 @@ enum borrowck_ctxt {\n // a map mapping id's of expressions of gc'd type (@T, @[], etc) where\n // the box needs to be kept live to the id of the scope for which they\n // must stay live.\n-type root_map = hashmap<root_map_key, ast::node_id>;\n+type root_map = HashMap<root_map_key, ast::node_id>;\n \n // the keys to the root map combine the `id` of the expression with\n // the number of types that it is autodereferenced.  So, for example,\n@@ -311,7 +311,7 @@ type root_map_key = {id: ast::node_id, derefs: uint};\n \n // set of ids of local vars / formal arguments that are modified / moved.\n // this is used in trans for optimization purposes.\n-type mutbl_map = std::map::hashmap<ast::node_id, ()>;\n+type mutbl_map = std::map::HashMap<ast::node_id, ()>;\n \n // Errors that can occur\"]\n enum bckerr_code {\n@@ -392,8 +392,8 @@ type loan = {lp: @loan_path, cmt: cmt, mutbl: ast::mutability};\n /// - `pure_map`: map from block/expr that must be pure to the error message\n ///   that should be reported if they are not pure\n type req_maps = {\n-    req_loan_map: hashmap<ast::node_id, @DVec<@DVec<loan>>>,\n-    pure_map: hashmap<ast::node_id, bckerr>\n+    req_loan_map: HashMap<ast::node_id, @DVec<@DVec<loan>>>,\n+    pure_map: HashMap<ast::node_id, bckerr>\n };\n \n fn save_and_restore<T:Copy,U>(&save_and_restore_t: T, f: fn() -> U) -> U {\n@@ -421,7 +421,7 @@ impl root_map_key : to_bytes::IterBytes {\n }\n \n fn root_map() -> root_map {\n-    return hashmap();\n+    return HashMap();\n \n     pure fn root_map_key_eq(k1: &root_map_key, k2: &root_map_key) -> bool {\n         k1.id == k2.id && k1.derefs == k2.derefs"}, {"sha": "974c9b632ca855668a03aca8a63c073abec05629", "filename": "src/rustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -15,7 +15,7 @@ enum check_loan_ctxt = @{\n     bccx: borrowck_ctxt,\n     req_maps: req_maps,\n \n-    reported: hashmap<ast::node_id, ()>,\n+    reported: HashMap<ast::node_id, ()>,\n \n     // Keep track of whether we're inside a ctor, so as to\n     // allow mutating immutable fields in the same class if"}, {"sha": "28b86f66528ad6016905b63f5fabc773f7882d59", "filename": "src/rustc/middle/capture.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Fcapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Fcapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcapture.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -2,7 +2,7 @@ use syntax::{ast, ast_util};\n use driver::session::session;\n use syntax::codemap::span;\n use std::map;\n-use std::map::hashmap;\n+use std::map::HashMap;\n \n export capture_mode;\n export capture_var;\n@@ -28,7 +28,7 @@ type capture_var = {\n     mode: capture_mode                   // How variable is being accessed\n };\n \n-type capture_map = map::hashmap<ast::def_id, capture_var>;\n+type capture_map = map::HashMap<ast::def_id, capture_var>;\n \n // checks the capture clause for a fn_expr() and issues warnings or\n // errors for any irregularities which we identify."}, {"sha": "1033f2c81c5dfc94cf1dd27265cb41dcc91c3d23", "filename": "src/rustc/middle/check_alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_alt.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -10,7 +10,7 @@ use syntax::visit;\n use driver::session::session;\n use middle::ty;\n use middle::ty::*;\n-use std::map::hashmap;\n+use std::map::HashMap;\n \n fn check_crate(tcx: ty::ctxt, crate: @crate) {\n     visit::visit_crate(*crate, (), visit::mk_vt(@{"}, {"sha": "d7cbd2969a32d56a327a994fe2bdd0459f593547", "filename": "src/rustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_const.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -1,7 +1,7 @@\n use syntax::ast::*;\n use syntax::{visit, ast_util, ast_map};\n use driver::session::session;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use dvec::DVec;\n \n fn check_crate(sess: session, crate: @crate, ast_map: ast_map::map,"}, {"sha": "f59be3e02eca0ae78af12590ab6c4d85f49a6245", "filename": "src/rustc/middle/freevars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ffreevars.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -23,7 +23,7 @@ type freevar_entry = {\n     span: span     //< First span where it is accessed (there can be multiple)\n };\n type freevar_info = @~[@freevar_entry];\n-type freevar_map = hashmap<ast::node_id, freevar_info>;\n+type freevar_map = HashMap<ast::node_id, freevar_info>;\n \n // Searches through part of the AST for all references to locals or\n // upvars in this frame and returns the list of definition IDs thus found."}, {"sha": "4c363a5faf8a6826be36aa46f33544917373444a", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -3,7 +3,7 @@ use syntax::ast::*;\n use syntax::codemap::span;\n use ty::{kind, kind_copyable, kind_noncopyable, kind_const};\n use driver::session::session;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use util::ppaux::{ty_to_str, tys_to_str};\n use syntax::print::pprust::expr_to_str;\n use freevars::freevar_entry;\n@@ -58,7 +58,7 @@ fn kind_to_str(k: kind) -> ~str {\n     str::connect(kinds, ~\" \")\n }\n \n-type rval_map = std::map::hashmap<node_id, ()>;\n+type rval_map = std::map::HashMap<node_id, ()>;\n \n type ctx = {tcx: ty::ctxt,\n             method_map: typeck::method_map,"}, {"sha": "b63a29d770e5e8ef5105daa47519cc577e7dbf0d", "filename": "src/rustc/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flang_items.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -19,7 +19,7 @@ use syntax::ast_util::{local_def};\n use syntax::visit::{default_simple_visitor, mk_simple_visitor};\n use syntax::visit::{visit_crate, visit_item};\n \n-use std::map::{hashmap, str_hash};\n+use std::map::{HashMap, str_hash};\n use str_eq = str::eq;\n \n struct LanguageItems {\n@@ -119,7 +119,7 @@ struct LanguageItemCollector {\n     crate: @crate,\n     session: session,\n \n-    item_refs: hashmap<~str,&mut Option<def_id>>,\n+    item_refs: HashMap<~str,&mut Option<def_id>>,\n }\n \n impl LanguageItemCollector {"}, {"sha": "b41fb004653d02412355f76d76ae36ba9f70c65b", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -4,8 +4,8 @@ use middle::ty;\n use syntax::{ast, ast_util, visit};\n use syntax::attr;\n use syntax::codemap::span;\n-use std::map::{map,hashmap,int_hash,hash_from_strs};\n-use std::smallintmap::{map,SmallIntMap};\n+use std::map::{Map,HashMap,int_hash,hash_from_strs};\n+use std::smallintmap::{Map,SmallIntMap};\n use io::WriterUtil;\n use util::ppaux::{ty_to_str};\n use middle::pat_util::{pat_bindings};\n@@ -95,7 +95,7 @@ type lint_spec = @{lint: lint,\n                    desc: ~str,\n                    default: level};\n \n-type lint_dict = hashmap<~str,lint_spec>;\n+type lint_dict = HashMap<~str,lint_spec>;\n \n /*\n   Pass names should not contain a '-', as the compiler normalizes\n@@ -196,7 +196,7 @@ fn get_lint_dict() -> lint_dict {\n \n // This is a highly not-optimal set of data structure decisions.\n type lint_modes = SmallIntMap<level>;\n-type lint_mode_map = hashmap<ast::node_id, lint_modes>;\n+type lint_mode_map = HashMap<ast::node_id, lint_modes>;\n \n // settings_map maps node ids of items with non-default lint settings\n // to their settings; default_settings contains the settings for everything"}, {"sha": "0500803b0d5de28017e734be4f7bdf96b914be09", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -101,7 +101,7 @@\n  */\n \n use dvec::DVec;\n-use std::map::{hashmap, int_hash, str_hash, uint_hash};\n+use std::map::{HashMap, int_hash, str_hash, uint_hash};\n use syntax::{visit, ast_util};\n use syntax::print::pprust::{expr_to_str};\n use visit::vt;\n@@ -122,7 +122,7 @@ export last_use_map;\n //\n // Very subtle (#2633): borrowck will remove entries from this table\n // if it detects an outstanding loan (that is, the addr is taken).\n-type last_use_map = hashmap<node_id, @DVec<node_id>>;\n+type last_use_map = HashMap<node_id, @DVec<node_id>>;\n \n enum Variable = uint;\n enum LiveNode = uint;\n@@ -274,10 +274,10 @@ struct IrMaps {\n \n     mut num_live_nodes: uint,\n     mut num_vars: uint,\n-    live_node_map: hashmap<node_id, LiveNode>,\n-    variable_map: hashmap<node_id, Variable>,\n-    field_map: hashmap<ident, Variable>,\n-    capture_map: hashmap<node_id, @~[CaptureInfo]>,\n+    live_node_map: HashMap<node_id, LiveNode>,\n+    variable_map: HashMap<node_id, Variable>,\n+    field_map: HashMap<ident, Variable>,\n+    capture_map: HashMap<node_id, @~[CaptureInfo]>,\n     mut var_kinds: ~[VarKind],\n     mut lnks: ~[LiveNodeKind],\n }"}, {"sha": "179467cd3a166b0c99c2d8d533044f533971aa79", "filename": "src/rustc/middle/pat_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fpat_util.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -4,12 +4,12 @@ use syntax::ast_util::{path_to_ident, respan, walk_pat};\n use syntax::fold;\n use syntax::fold::*;\n use syntax::codemap::span;\n-use std::map::hashmap;\n+use std::map::HashMap;\n \n export pat_binding_ids, pat_bindings, pat_id_map;\n export pat_is_variant;\n \n-type pat_id_map = std::map::hashmap<ident, node_id>;\n+type pat_id_map = std::map::HashMap<ident, node_id>;\n \n // This is used because same-named variables in alternative patterns need to\n // use the node_id of their namesake in the first pattern."}, {"sha": "5fb17eb15b98251723d81c5f841eaecafae2c9e3", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -20,7 +20,7 @@ use ty::{region_variance, rv_covariant, rv_invariant, rv_contravariant};\n \n use std::list;\n use std::list::list;\n-use std::map::{hashmap, int_hash};\n+use std::map::{HashMap, int_hash};\n \n type parent = Option<ast::node_id>;\n \n@@ -39,7 +39,7 @@ Encodes the bounding lifetime for a given AST node:\n - Variables and bindings are mapped to the block in which they are declared.\n \n */\n-type region_map = hashmap<ast::node_id, ast::node_id>;\n+type region_map = HashMap<ast::node_id, ast::node_id>;\n \n struct ctxt {\n     sess: session,\n@@ -55,7 +55,7 @@ struct ctxt {\n     // the condition in a while loop is always a parent.  In those\n     // cases, we add the node id of such an expression to this set so\n     // that when we visit it we can view it as a parent.\n-    root_exprs: hashmap<ast::node_id, ()>,\n+    root_exprs: HashMap<ast::node_id, ()>,\n \n     // The parent scope is the innermost block, statement, call, or alt\n     // expression during the execution of which the current expression\n@@ -370,9 +370,9 @@ fn resolve_crate(sess: session, def_map: resolve::DefMap,\n // a worklist.  We can then process the worklist, propagating indirect\n // dependencies until a fixed point is reached.\n \n-type region_paramd_items = hashmap<ast::node_id, region_variance>;\n+type region_paramd_items = HashMap<ast::node_id, region_variance>;\n type region_dep = {ambient_variance: region_variance, id: ast::node_id};\n-type dep_map = hashmap<ast::node_id, @DVec<region_dep>>;\n+type dep_map = HashMap<ast::node_id, @DVec<region_dep>>;\n \n impl region_dep: cmp::Eq {\n     pure fn eq(&&other: region_dep) -> bool {"}, {"sha": "02788d53ba7a8a7c6641cd04ad68d325d98711c3", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -60,19 +60,19 @@ use vec::pop;\n use syntax::parse::token::ident_interner;\n \n use std::list::{Cons, List, Nil};\n-use std::map::{hashmap, int_hash, uint_hash};\n+use std::map::{HashMap, int_hash, uint_hash};\n use str_eq = str::eq;\n \n // Definition mapping\n-type DefMap = hashmap<node_id,def>;\n+type DefMap = HashMap<node_id,def>;\n \n struct binding_info {\n     span: span,\n     binding_mode: binding_mode,\n }\n \n // Map from the name in a pattern to its binding mode.\n-type BindingMap = hashmap<ident,binding_info>;\n+type BindingMap = HashMap<ident,binding_info>;\n \n // Implementation resolution\n //\n@@ -89,15 +89,15 @@ type MethodInfo = {\n type Impl = { did: def_id, ident: ident, methods: ~[@MethodInfo] };\n \n // Trait method resolution\n-type TraitMap = @hashmap<node_id,@DVec<def_id>>;\n+type TraitMap = @HashMap<node_id,@DVec<def_id>>;\n \n // Export mapping\n type Export = { reexp: bool, id: def_id };\n-type ExportMap = hashmap<node_id, ~[Export]>;\n+type ExportMap = HashMap<node_id, ~[Export]>;\n \n // This is the replacement export map. It maps a module to all of the exports\n // within.\n-type ExportMap2 = hashmap<node_id, ~[Export2]>;\n+type ExportMap2 = HashMap<node_id, ~[Export2]>;\n \n struct Export2 {\n     name: ~str,         // The name of the target.\n@@ -317,13 +317,13 @@ fn Atom(n: uint) -> Atom {\n }\n \n /// Creates a hash table of atoms.\n-fn atom_hashmap<V:Copy>() -> hashmap<Atom,V> {\n-  hashmap::<Atom,V>()\n+fn atom_hashmap<V:Copy>() -> HashMap<Atom,V> {\n+  HashMap::<Atom,V>()\n }\n \n /// One local scope.\n struct Rib {\n-    bindings: hashmap<Atom,def_like>,\n+    bindings: HashMap<Atom,def_like>,\n     kind: RibKind,\n }\n \n@@ -414,7 +414,7 @@ struct Module {\n     parent_link: ParentLink,\n     mut def_id: Option<def_id>,\n \n-    children: hashmap<Atom,@NameBindings>,\n+    children: HashMap<Atom,@NameBindings>,\n     imports: DVec<@ImportDirective>,\n \n     // The anonymous children of this node. Anonymous children are pseudo-\n@@ -432,18 +432,18 @@ struct Module {\n     // There will be an anonymous module created around `g` with the ID of the\n     // entry block for `f`.\n \n-    anonymous_children: hashmap<node_id,@Module>,\n+    anonymous_children: HashMap<node_id,@Module>,\n \n     // XXX: This is about to be reworked so that exports are on individual\n     // items, not names.\n     //\n     // The atom is the name of the exported item, while the node ID is the\n     // ID of the export path.\n \n-    exported_names: hashmap<Atom,node_id>,\n+    exported_names: HashMap<Atom,node_id>,\n \n     // The status of resolving each import in this module.\n-    import_resolutions: hashmap<Atom,@ImportResolution>,\n+    import_resolutions: HashMap<Atom,@ImportResolution>,\n \n     // The number of unresolved globs that this module exports.\n     mut glob_count: uint,\n@@ -633,7 +633,7 @@ fn NameBindings() -> NameBindings {\n \n /// Interns the names of the primitive types.\n struct PrimitiveTypeTable {\n-    primitive_types: hashmap<Atom,prim_ty>,\n+    primitive_types: HashMap<Atom,prim_ty>,\n }\n \n impl PrimitiveTypeTable {\n@@ -743,8 +743,8 @@ struct Resolver {\n \n     unused_import_lint_level: level,\n \n-    trait_info: hashmap<def_id,@hashmap<Atom,()>>,\n-    structs: hashmap<def_id,bool>,\n+    trait_info: HashMap<def_id,@HashMap<Atom,()>>,\n+    structs: HashMap<def_id,bool>,\n \n     // The number of imports that are currently unresolved.\n     mut unresolved_imports: uint,\n@@ -1386,7 +1386,7 @@ impl Resolver {\n         visit_block(block, new_parent, visitor);\n     }\n \n-    fn handle_external_def(def: def, modules: hashmap<def_id, @Module>,\n+    fn handle_external_def(def: def, modules: HashMap<def_id, @Module>,\n                            child_name_bindings: @NameBindings,\n                            final_ident: ~str,\n                            atom: Atom, new_parent: ReducedGraphParent) {\n@@ -3835,7 +3835,7 @@ impl Resolver {\n                        mutability: Mutability,\n                        // Maps idents to the node ID for the (outermost)\n                        // pattern that binds them\n-                       bindings_list: Option<hashmap<Atom,node_id>>,\n+                       bindings_list: Option<HashMap<Atom,node_id>>,\n                        visitor: ResolveVisitor) {\n \n         let pat_id = pattern.id;"}, {"sha": "a11dcdd7d75651c6042afffb611ed475210b4812", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -12,7 +12,7 @@ use syntax::codemap::span;\n use syntax::print::pprust::pat_to_str;\n use middle::resolve::DefMap;\n use back::abi;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use dvec::DVec;\n use datum::*;\n use common::*;"}, {"sha": "3b07f375051add54b3a963d94d24e78b82ff65ea", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -15,7 +15,7 @@\n \n use libc::{c_uint, c_ulonglong};\n use std::{map, time, list};\n-use std::map::hashmap;\n+use std::map::HashMap;\n use std::map::{int_hash, str_hash};\n use driver::session;\n use session::session;\n@@ -124,7 +124,7 @@ fn decl_internal_cdecl_fn(llmod: ModuleRef, name: ~str, llty: TypeRef) ->\n     return llfn;\n }\n \n-fn get_extern_fn(externs: hashmap<~str, ValueRef>,\n+fn get_extern_fn(externs: HashMap<~str, ValueRef>,\n                  llmod: ModuleRef, name: ~str,\n                  cc: lib::llvm::CallConv, ty: TypeRef) -> ValueRef {\n     if externs.contains_key(name) { return externs.get(name); }\n@@ -133,7 +133,7 @@ fn get_extern_fn(externs: hashmap<~str, ValueRef>,\n     return f;\n }\n \n-fn get_extern_const(externs: hashmap<~str, ValueRef>, llmod: ModuleRef,\n+fn get_extern_const(externs: HashMap<~str, ValueRef>, llmod: ModuleRef,\n                     name: ~str, ty: TypeRef) -> ValueRef {\n     if externs.contains_key(name) { return externs.get(name); }\n     let c = str::as_c_str(name, |buf| llvm::LLVMAddGlobal(llmod, ty, buf));\n@@ -142,7 +142,7 @@ fn get_extern_const(externs: hashmap<~str, ValueRef>, llmod: ModuleRef,\n }\n \n fn get_simple_extern_fn(cx: block,\n-                        externs: hashmap<~str, ValueRef>,\n+                        externs: HashMap<~str, ValueRef>,\n                         llmod: ModuleRef,\n                         name: ~str, n_args: int) -> ValueRef {\n     let _icx = cx.insn_ctxt(\"get_simple_extern_fn\");\n@@ -153,7 +153,7 @@ fn get_simple_extern_fn(cx: block,\n     return get_extern_fn(externs, llmod, name, lib::llvm::CCallConv, t);\n }\n \n-fn trans_foreign_call(cx: block, externs: hashmap<~str, ValueRef>,\n+fn trans_foreign_call(cx: block, externs: HashMap<~str, ValueRef>,\n                       llmod: ModuleRef, name: ~str, args: ~[ValueRef]) ->\n    ValueRef {\n     let _icx = cx.insn_ctxt(\"trans_foreign_call\");\n@@ -2265,7 +2265,7 @@ fn p2i(ccx: @crate_ctxt, v: ValueRef) -> ValueRef {\n     return llvm::LLVMConstPtrToInt(v, ccx.int_type);\n }\n \n-fn declare_intrinsics(llmod: ModuleRef) -> hashmap<~str, ValueRef> {\n+fn declare_intrinsics(llmod: ModuleRef) -> HashMap<~str, ValueRef> {\n     let T_memmove32_args: ~[TypeRef] =\n         ~[T_ptr(T_i8()), T_ptr(T_i8()), T_i32(), T_i32(), T_i1()];\n     let T_memmove64_args: ~[TypeRef] =\n@@ -2314,7 +2314,7 @@ fn declare_intrinsics(llmod: ModuleRef) -> hashmap<~str, ValueRef> {\n }\n \n fn declare_dbg_intrinsics(llmod: ModuleRef,\n-                          intrinsics: hashmap<~str, ValueRef>) {\n+                          intrinsics: HashMap<~str, ValueRef>) {\n     let declare =\n         decl_cdecl_fn(llmod, ~\"llvm.dbg.declare\",\n                       T_fn(~[T_metadata(), T_metadata()], T_void()));\n@@ -2630,10 +2630,10 @@ fn trans_crate(sess: session::session,\n           tydescs: ty::new_ty_hash(),\n           mut finished_tydescs: false,\n           external: ast_util::new_def_hash(),\n-          monomorphized: map::hashmap(),\n+          monomorphized: map::HashMap(),\n           monomorphizing: ast_util::new_def_hash(),\n           type_use_cache: ast_util::new_def_hash(),\n-          vtables: map::hashmap(),\n+          vtables: map::HashMap(),\n           const_cstr_cache: map::str_hash(),\n           const_globals: int_hash::<ValueRef>(),\n           module_data: str_hash::<ValueRef>(),"}, {"sha": "23b1d964ba3881fadd15c4de91c9acd63e5d1427", "filename": "src/rustc/middle/trans/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -1,4 +1,4 @@\n-use std::map::{hashmap, str_hash};\n+use std::map::{HashMap, str_hash};\n use libc::{c_uint, c_int};\n use lib::llvm::llvm;\n use syntax::codemap;"}, {"sha": "1ba8e22607a186e55b5cd541866728dda0ff10e5", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -16,7 +16,7 @@ use back::link::{\n use util::ppaux::ty_to_str;\n use syntax::ast_map::{path, path_mod, path_name};\n use driver::session::session;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use datum::{Datum, INIT, ByRef, ByValue, FromLvalue};\n \n // ___Good to know (tm)__________________________________________________"}, {"sha": "13c1b139f0a3a4d6fd06b313e17d66530411de36", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -5,7 +5,7 @@\n \n use libc::c_uint;\n use vec::unsafe::to_ptr;\n-use std::map::{hashmap,set};\n+use std::map::{HashMap,Set};\n use syntax::{ast, ast_map};\n use driver::session;\n use session::session;\n@@ -90,7 +90,7 @@ type stats =\n      mut n_null_glues: uint,\n      mut n_real_glues: uint,\n      llvm_insn_ctxt: @mut ~[~str],\n-     llvm_insns: hashmap<~str, uint>,\n+     llvm_insns: HashMap<~str, uint>,\n      fn_times: @mut ~[{ident: ~str, time: int}]};\n \n struct BuilderRef_res {\n@@ -110,50 +110,50 @@ type crate_ctxt = {\n      llmod: ModuleRef,\n      td: target_data,\n      tn: type_names,\n-     externs: hashmap<~str, ValueRef>,\n-     intrinsics: hashmap<~str, ValueRef>,\n-     item_vals: hashmap<ast::node_id, ValueRef>,\n+     externs: HashMap<~str, ValueRef>,\n+     intrinsics: HashMap<~str, ValueRef>,\n+     item_vals: HashMap<ast::node_id, ValueRef>,\n      exp_map: resolve::ExportMap,\n      exp_map2: resolve::ExportMap2,\n      reachable: reachable::map,\n-     item_symbols: hashmap<ast::node_id, ~str>,\n+     item_symbols: HashMap<ast::node_id, ~str>,\n      mut main_fn: Option<ValueRef>,\n      link_meta: link_meta,\n-     enum_sizes: hashmap<ty::t, uint>,\n-     discrims: hashmap<ast::def_id, ValueRef>,\n-     discrim_symbols: hashmap<ast::node_id, ~str>,\n-     tydescs: hashmap<ty::t, @tydesc_info>,\n+     enum_sizes: HashMap<ty::t, uint>,\n+     discrims: HashMap<ast::def_id, ValueRef>,\n+     discrim_symbols: HashMap<ast::node_id, ~str>,\n+     tydescs: HashMap<ty::t, @tydesc_info>,\n      // Set when running emit_tydescs to enforce that no more tydescs are\n      // created.\n      mut finished_tydescs: bool,\n      // Track mapping of external ids to local items imported for inlining\n-     external: hashmap<ast::def_id, Option<ast::node_id>>,\n+     external: HashMap<ast::def_id, Option<ast::node_id>>,\n      // Cache instances of monomorphized functions\n-     monomorphized: hashmap<mono_id, ValueRef>,\n-     monomorphizing: hashmap<ast::def_id, uint>,\n+     monomorphized: HashMap<mono_id, ValueRef>,\n+     monomorphizing: HashMap<ast::def_id, uint>,\n      // Cache computed type parameter uses (see type_use.rs)\n-     type_use_cache: hashmap<ast::def_id, ~[type_use::type_uses]>,\n+     type_use_cache: HashMap<ast::def_id, ~[type_use::type_uses]>,\n      // Cache generated vtables\n-     vtables: hashmap<mono_id, ValueRef>,\n+     vtables: HashMap<mono_id, ValueRef>,\n      // Cache of constant strings,\n-     const_cstr_cache: hashmap<~str, ValueRef>,\n+     const_cstr_cache: HashMap<~str, ValueRef>,\n      // Reverse-direction for const ptrs cast from globals,\n      // since the ptr -> init association is lost any\n      // time a GlobalValue is cast.\n-     const_globals: hashmap<int, ValueRef>,\n-     module_data: hashmap<~str, ValueRef>,\n-     lltypes: hashmap<ty::t, TypeRef>,\n+     const_globals: HashMap<int, ValueRef>,\n+     module_data: HashMap<~str, ValueRef>,\n+     lltypes: HashMap<ty::t, TypeRef>,\n      names: namegen,\n      next_addrspace: addrspace_gen,\n      symbol_hasher: @hash::State,\n-     type_hashcodes: hashmap<ty::t, ~str>,\n-     type_short_names: hashmap<ty::t, ~str>,\n-     all_llvm_symbols: set<~str>,\n+     type_hashcodes: HashMap<ty::t, ~str>,\n+     type_short_names: HashMap<ty::t, ~str>,\n+     all_llvm_symbols: Set<~str>,\n      tcx: ty::ctxt,\n      maps: astencode::maps,\n      stats: stats,\n      upcalls: @upcall::upcalls,\n-     rtcalls: hashmap<~str, ast::def_id>,\n+     rtcalls: HashMap<~str, ast::def_id>,\n      tydesc_type: TypeRef,\n      int_type: TypeRef,\n      float_type: TypeRef,\n@@ -171,7 +171,7 @@ type crate_ctxt = {\n      // used in base::trans_closure\n      // parent_class must be a def_id because ctors can be\n      // inlined, so the parent may be in a different crate\n-     class_ctors: hashmap<ast::node_id, ast::def_id>,\n+     class_ctors: HashMap<ast::node_id, ast::def_id>,\n      mut do_not_commit_warning_issued: bool};\n \n // Types used for llself.\n@@ -231,12 +231,12 @@ type fn_ctxt = @{\n     mut loop_ret: Option<{flagptr: ValueRef, retptr: ValueRef}>,\n \n     // Maps arguments to allocas created for them in llallocas.\n-    llargs: hashmap<ast::node_id, local_val>,\n+    llargs: HashMap<ast::node_id, local_val>,\n     // Maps the def_ids for local variables to the allocas created for\n     // them in llallocas.\n-    lllocals: hashmap<ast::node_id, local_val>,\n+    lllocals: HashMap<ast::node_id, local_val>,\n     // Same as above, but for closure upvars\n-    llupvars: hashmap<ast::node_id, ValueRef>,\n+    llupvars: HashMap<ast::node_id, ValueRef>,\n \n     // The node_id of the function, or -1 if it doesn't correspond to\n     // a user-defined function."}, {"sha": "fe01a202e603385ec6354c20dca2404222d1e247", "filename": "src/rustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -1,5 +1,5 @@\n use std::map;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use lib::llvm::llvm;\n use lib::llvm::ValueRef;\n use trans::common::*;\n@@ -116,7 +116,7 @@ type block_md = {start: codemap::loc, end: codemap::loc};\n type argument_md = {id: ast::node_id};\n type retval_md = {id: ast::node_id};\n \n-type metadata_cache = hashmap<int, ~[debug_metadata]>;\n+type metadata_cache = HashMap<int, ~[debug_metadata]>;\n \n enum debug_metadata {\n     file_metadata(@metadata<file_md>),"}, {"sha": "ddc2017e16a2da76ea9c0a50bdbe085f72642f61", "filename": "src/rustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -716,7 +716,7 @@ fn trans_local_var(bcx: block, ref_id: ast::node_id, def: ast::def) -> Datum {\n \n     fn take_local(bcx: block,\n                   ref_id: ast::node_id,\n-                  table: hashmap<ast::node_id, local_val>,\n+                  table: HashMap<ast::node_id, local_val>,\n                   nid: ast::node_id) -> Datum {\n         let is_last_use = match bcx.ccx().maps.last_use_map.find(ref_id) {\n             None => false,"}, {"sha": "cb00cff9db5d323ae7236925024d7c9444670e2d", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -15,7 +15,7 @@ use common::*;\n use build::*;\n use base::*;\n use type_of::*;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use util::ppaux::ty_to_str;\n use datum::*;\n use callee::*;"}, {"sha": "b923e35765a1f756a98f0200ec5c86b100a5feac", "filename": "src/rustc/middle/trans/impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -12,7 +12,7 @@ use back::{link, abi};\n use lib::llvm::llvm;\n use lib::llvm::{ValueRef, TypeRef};\n use lib::llvm::llvm::LLVMGetParam;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use util::ppaux::{ty_to_str, tys_to_str};\n use callee::*;\n use syntax::print::pprust::expr_to_str;"}, {"sha": "061b260bfbb2caa01aac626f72eada6236e366eb", "filename": "src/rustc/middle/trans/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -10,12 +10,12 @@ use syntax::{visit, ast_util, ast_map};\n use syntax::ast_util::def_id_of_def;\n use syntax::attr;\n use syntax::print::pprust::expr_to_str;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use driver::session::*;\n \n export map, find_reachable;\n \n-type map = std::map::hashmap<node_id, ()>;\n+type map = std::map::HashMap<node_id, ()>;\n \n type ctx = {exp_map: resolve::ExportMap,\n             tcx: ty::ctxt,"}, {"sha": "680d2be7a50413dd3b6348a1bac8a51e54deffec", "filename": "src/rustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -1,4 +1,4 @@\n-use std::map::{hashmap,str_hash};\n+use std::map::{HashMap,str_hash};\n use driver::session::session;\n use lib::llvm::{TypeRef, ValueRef};\n use syntax::ast;"}, {"sha": "f60005f072eaf0be3cc05c4fb77e89565ce2e38a", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -17,7 +17,7 @@ use util::ppaux::ty_to_str;\n use syntax::codemap::span;\n use dvec::DVec;\n \n-use std::map::hashmap;\n+use std::map::HashMap;\n use option::is_some;\n \n use ty_ctxt = middle::ty::ctxt;\n@@ -58,16 +58,16 @@ fn mk_nominal_id(tcx: ty::ctxt, did: ast::def_id,\n     @{did: did, parent_id: parent_id, tps: tps_norm}\n }\n \n-fn new_nominal_id_hash<T: Copy>() -> hashmap<nominal_id, T> {\n-    return hashmap();\n+fn new_nominal_id_hash<T: Copy>() -> HashMap<nominal_id, T> {\n+    return HashMap();\n }\n \n type enum_data = {did: ast::def_id, substs: ty::substs};\n \n type ctxt =\n     {mut next_tag_id: u16,\n      pad: u16,\n-     tag_id_to_index: hashmap<nominal_id, u16>,\n+     tag_id_to_index: HashMap<nominal_id, u16>,\n      tag_order: DVec<enum_data>,\n      resources: interner::interner<nominal_id>,\n      llshapetablesty: TypeRef,"}, {"sha": "1a743ce31d51c332276a7f2db3ec3900b0284fb9", "filename": "src/rustc/middle/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -3,7 +3,7 @@ use lib::llvm::{TypeRef};\n use syntax::ast;\n use lib::llvm::llvm;\n use driver::session::session;\n-use std::map::hashmap;\n+use std::map::HashMap;\n \n export type_of;\n export type_of_dtor;"}, {"sha": "853bb71e84cf73e16b36205768410423c5189720", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -17,7 +17,7 @@\n // much information, but have the disadvantage of being very\n // invasive.)\n \n-use std::map::hashmap;\n+use std::map::HashMap;\n use std::list;\n use std::list::{List, Cons, Nil};\n use driver::session::session;"}, {"sha": "f5d25feccb2d6079d0c5bbab54b5c8663f50f0c8", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -3,7 +3,7 @@\n \n use std::{map, smallintmap};\n use result::Result;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use driver::session;\n use session::session;\n use syntax::{ast, ast_map};\n@@ -228,7 +228,7 @@ type field_ty = {\n // Contains information needed to resolve types and (in the future) look up\n // the types of AST nodes.\n type creader_cache_key = {cnum: int, pos: uint, len: uint};\n-type creader_cache = hashmap<creader_cache_key, t>;\n+type creader_cache = HashMap<creader_cache_key, t>;\n \n impl creader_cache_key : cmp::Eq {\n     pure fn eq(&&other: creader_cache_key) -> bool {\n@@ -304,7 +304,7 @@ impl borrow : cmp::Eq {\n \n type ctxt =\n     @{diag: syntax::diagnostic::span_handler,\n-      interner: hashmap<intern_key, t_box>,\n+      interner: HashMap<intern_key, t_box>,\n       mut next_id: uint,\n       vecs_implicitly_copyable: bool,\n       cstore: metadata::cstore::cstore,\n@@ -323,26 +323,26 @@ type ctxt =\n       // of this node.  This only applies to nodes that refer to entities\n       // parameterized by type parameters, such as generic fns, types, or\n       // other items.\n-      node_type_substs: hashmap<node_id, ~[t]>,\n+      node_type_substs: HashMap<node_id, ~[t]>,\n \n       items: ast_map::map,\n-      intrinsic_defs: hashmap<ast::ident, (ast::def_id, t)>,\n+      intrinsic_defs: HashMap<ast::ident, (ast::def_id, t)>,\n       freevars: freevars::freevar_map,\n       tcache: type_cache,\n       rcache: creader_cache,\n       ccache: constness_cache,\n-      short_names_cache: hashmap<t, @~str>,\n-      needs_drop_cache: hashmap<t, bool>,\n-      needs_unwind_cleanup_cache: hashmap<t, bool>,\n-      kind_cache: hashmap<t, kind>,\n-      ast_ty_to_ty_cache: hashmap<@ast::ty, ast_ty_to_ty_cache_entry>,\n-      enum_var_cache: hashmap<def_id, @~[variant_info]>,\n-      trait_method_cache: hashmap<def_id, @~[method]>,\n-      ty_param_bounds: hashmap<ast::node_id, param_bounds>,\n-      inferred_modes: hashmap<ast::node_id, ast::mode>,\n+      short_names_cache: HashMap<t, @~str>,\n+      needs_drop_cache: HashMap<t, bool>,\n+      needs_unwind_cleanup_cache: HashMap<t, bool>,\n+      kind_cache: HashMap<t, kind>,\n+      ast_ty_to_ty_cache: HashMap<@ast::ty, ast_ty_to_ty_cache_entry>,\n+      enum_var_cache: HashMap<def_id, @~[variant_info]>,\n+      trait_method_cache: HashMap<def_id, @~[method]>,\n+      ty_param_bounds: HashMap<ast::node_id, param_bounds>,\n+      inferred_modes: HashMap<ast::node_id, ast::mode>,\n       // maps the id of borrowed expr to scope of borrowed ptr\n-      borrowings: hashmap<ast::node_id, borrow>,\n-      normalized_cache: hashmap<t, t>};\n+      borrowings: HashMap<ast::node_id, borrow>,\n+      normalized_cache: HashMap<t, t>};\n \n enum tbox_flag {\n     has_params = 1,\n@@ -789,19 +789,19 @@ type ty_param_bounds_and_ty = {bounds: @~[param_bounds],\n                                region_param: Option<region_variance>,\n                                ty: t};\n \n-type type_cache = hashmap<ast::def_id, ty_param_bounds_and_ty>;\n+type type_cache = HashMap<ast::def_id, ty_param_bounds_and_ty>;\n \n-type constness_cache = hashmap<ast::def_id, const_eval::constness>;\n+type constness_cache = HashMap<ast::def_id, const_eval::constness>;\n \n type node_type_table = @smallintmap::SmallIntMap<t>;\n \n fn mk_rcache() -> creader_cache {\n     type val = {cnum: int, pos: uint, len: uint};\n-    return map::hashmap();\n+    return map::HashMap();\n }\n \n-fn new_ty_hash<V: Copy>() -> map::hashmap<t, V> {\n-    map::hashmap()\n+fn new_ty_hash<V: Copy>() -> map::HashMap<t, V> {\n+    map::HashMap()\n }\n \n fn mk_ctxt(s: session::session,\n@@ -810,7 +810,7 @@ fn mk_ctxt(s: session::session,\n            freevars: freevars::freevar_map,\n            region_map: middle::region::region_map,\n            region_paramd_items: middle::region::region_paramd_items) -> ctxt {\n-    let interner = map::hashmap();\n+    let interner = map::HashMap();\n     let vecs_implicitly_copyable =\n         get_lint_level(s.lint_settings.default_settings,\n                        lint::vecs_implicitly_copyable) == allow;\n@@ -835,7 +835,7 @@ fn mk_ctxt(s: session::session,\n       needs_drop_cache: new_ty_hash(),\n       needs_unwind_cleanup_cache: new_ty_hash(),\n       kind_cache: new_ty_hash(),\n-      ast_ty_to_ty_cache: map::hashmap(),\n+      ast_ty_to_ty_cache: map::HashMap(),\n       enum_var_cache: new_def_hash(),\n       trait_method_cache: new_def_hash(),\n       ty_param_bounds: map::int_hash(),\n@@ -1604,7 +1604,7 @@ fn type_needs_unwind_cleanup(cx: ctxt, ty: t) -> bool {\n }\n \n fn type_needs_unwind_cleanup_(cx: ctxt, ty: t,\n-                              tycache: map::hashmap<t, ()>,\n+                              tycache: map::HashMap<t, ()>,\n                               encountered_box: bool) -> bool {\n \n     // Prevent infinite recursion\n@@ -2583,8 +2583,8 @@ pure fn hash_bound_region(br: &bound_region) -> uint {\n     }\n }\n \n-fn br_hashmap<V:Copy>() -> hashmap<bound_region, V> {\n-    map::hashmap()\n+fn br_hashmap<V:Copy>() -> HashMap<bound_region, V> {\n+    map::HashMap()\n }\n \n pure fn hash_region(r: &region) -> uint {\n@@ -3096,7 +3096,7 @@ fn occurs_check(tcx: ctxt, sp: span, vid: TyVid, rt: t) {\n \n // Maintains a little union-set tree for inferred modes.  `canon()` returns\n // the current head value for `m0`.\n-fn canon<T:Copy cmp::Eq>(tbl: hashmap<ast::node_id, ast::inferable<T>>,\n+fn canon<T:Copy cmp::Eq>(tbl: HashMap<ast::node_id, ast::inferable<T>>,\n                          +m0: ast::inferable<T>) -> ast::inferable<T> {\n     match m0 {\n       ast::infer(id) => match tbl.find(id) {"}, {"sha": "fe479bdb2a60710746b29033e4dce2ac63da4539", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -55,7 +55,7 @@ use middle::ty::{arg, field, node_type_table, mk_nil, ty_param_bounds_and_ty};\n use middle::ty::{vstore_uniq};\n use std::smallintmap;\n use std::map;\n-use std::map::{hashmap, int_hash};\n+use std::map::{HashMap, int_hash};\n use std::serialization::{serialize_uint, deserialize_uint};\n use vec::each;\n use syntax::print::pprust::*;\n@@ -122,7 +122,7 @@ type method_map_entry = {\n \n // maps from an expression id that corresponds to a method call to the details\n // of the method to be invoked\n-type method_map = hashmap<ast::node_id, method_map_entry>;\n+type method_map = HashMap<ast::node_id, method_map_entry>;\n \n // Resolutions for bounds of all parameters, left to right, for a given path.\n type vtable_res = @~[vtable_origin];\n@@ -173,12 +173,12 @@ impl vtable_origin {\n     }\n }\n \n-type vtable_map = hashmap<ast::node_id, vtable_res>;\n+type vtable_map = HashMap<ast::node_id, vtable_res>;\n \n // Stores information about provided methods, aka \"default methods\" in traits.\n // Maps from a trait's def_id to a MethodInfo about\n // that method in that trait.\n-type provided_methods_map = hashmap<ast::node_id,\n+type provided_methods_map = HashMap<ast::node_id,\n                                     ~[@resolve::MethodInfo]>;\n \n type ty_param_substs_and_ty = {substs: ty::substs, ty: ty::t};"}, {"sha": "49ed4b81d13fca2826b72363c344973849aa6cd2", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -99,10 +99,10 @@ type self_info = {\n /// share the inherited fields.\n struct inherited {\n     infcx: infer::infer_ctxt,\n-    locals: hashmap<ast::node_id, TyVid>,\n-    node_types: hashmap<ast::node_id, ty::t>,\n-    node_type_substs: hashmap<ast::node_id, ty::substs>,\n-    borrowings: hashmap<ast::node_id, ty::borrow>,\n+    locals: HashMap<ast::node_id, TyVid>,\n+    node_types: HashMap<ast::node_id, ty::t>,\n+    node_type_substs: HashMap<ast::node_id, ty::substs>,\n+    borrowings: HashMap<ast::node_id, ty::borrow>,\n }\n \n struct fn_ctxt {"}, {"sha": "6a61f7ae15e7ee90d81b981eb999c465da733dc6", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -102,7 +102,7 @@ struct lookup {\n     mut self_ty: ty::t,\n     mut derefs: uint,\n     candidates: DVec<candidate>,\n-    candidate_impls: hashmap<def_id, ()>,\n+    candidate_impls: HashMap<def_id, ()>,\n     supplied_tps: ~[ty::t],\n     include_private: bool,\n }"}, {"sha": "79ca4572e504cebcee2f93600616f5d6ed5a0435", "filename": "src/rustc/middle/typeck/coherence.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -32,7 +32,7 @@ use util::ppaux::ty_to_str;\n \n use dvec::DVec;\n use result::Ok;\n-use std::map::{hashmap, int_hash};\n+use std::map::{HashMap, int_hash};\n use uint::range;\n use vec::{len, push};\n \n@@ -121,11 +121,11 @@ fn method_to_MethodInfo(ast_method: @method) -> @MethodInfo {\n struct CoherenceInfo {\n     // Contains implementations of methods that are inherent to a type.\n     // Methods in these implementations don't need to be exported.\n-    inherent_methods: hashmap<def_id,@DVec<@Impl>>,\n+    inherent_methods: HashMap<def_id,@DVec<@Impl>>,\n \n     // Contains implementations of methods associated with a trait. For these,\n     // the associated trait must be imported at the call site.\n-    extension_methods: hashmap<def_id,@DVec<@Impl>>,\n+    extension_methods: HashMap<def_id,@DVec<@Impl>>,\n }\n \n fn CoherenceInfo() -> CoherenceInfo {\n@@ -152,12 +152,12 @@ struct CoherenceChecker {\n     // A mapping from implementations to the corresponding base type\n     // definition ID.\n \n-    base_type_def_ids: hashmap<def_id,def_id>,\n+    base_type_def_ids: HashMap<def_id,def_id>,\n \n     // A set of implementations in privileged scopes; i.e. those\n     // implementations that are defined in the same scope as their base types.\n \n-    privileged_implementations: hashmap<node_id,()>,\n+    privileged_implementations: HashMap<node_id,()>,\n }\n \n impl CoherenceChecker {\n@@ -645,7 +645,7 @@ impl CoherenceChecker {\n \n     // External crate handling\n \n-    fn add_impls_for_module(impls_seen: hashmap<def_id,()>,\n+    fn add_impls_for_module(impls_seen: HashMap<def_id,()>,\n                             crate_store: cstore,\n                             module_def_id: def_id) {\n "}, {"sha": "af1df5d74ff0e0108cb926427726524604c2723e", "filename": "src/rustc/middle/typeck/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -248,7 +248,7 @@ section on \"Type Combining\" below for details.\n \n use std::smallintmap;\n use std::smallintmap::smallintmap;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use middle::ty;\n use middle::ty::{TyVid, IntVid, RegionVid, vid,\n                  ty_int, ty_uint, get, terr_fn, TyVar, IntVar};"}, {"sha": "34291e82d64b76ae934cfd3681e7b6cc23317cc1", "filename": "src/rustc/middle/typeck/infer/region_var_bindings.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -308,7 +308,7 @@ because `&x` was created alone, but is relatable to `&A`.\n use dvec::DVec;\n use result::Result;\n use result::{Ok, Err};\n-use std::map::{hashmap, uint_hash};\n+use std::map::{HashMap, uint_hash};\n use std::cell::{Cell, empty_cell};\n use std::list::{List, Nil, Cons};\n \n@@ -389,13 +389,13 @@ enum UndoLogEntry {\n     AddCombination(CombineMap, TwoRegions)\n }\n \n-type CombineMap = hashmap<TwoRegions, RegionVid>;\n+type CombineMap = HashMap<TwoRegions, RegionVid>;\n \n struct RegionVarBindings {\n     tcx: ty::ctxt,\n     var_spans: DVec<span>,\n     values: Cell<~[ty::region]>,\n-    constraints: hashmap<Constraint, span>,\n+    constraints: HashMap<Constraint, span>,\n     lubs: CombineMap,\n     glbs: CombineMap,\n \n@@ -415,7 +415,7 @@ fn RegionVarBindings(tcx: ty::ctxt) -> RegionVarBindings {\n         tcx: tcx,\n         var_spans: DVec(),\n         values: empty_cell(),\n-        constraints: hashmap(),\n+        constraints: HashMap(),\n         lubs: CombineMap(),\n         glbs: CombineMap(),\n         undo_log: DVec()\n@@ -426,7 +426,7 @@ fn RegionVarBindings(tcx: ty::ctxt) -> RegionVarBindings {\n // `b`!  Not obvious that this is the most efficient way to go about\n // it.\n fn CombineMap() -> CombineMap {\n-    return hashmap();\n+    return HashMap();\n }\n \n pure fn hash_constraint(rc: &Constraint) -> uint {\n@@ -804,10 +804,10 @@ struct SpannedRegion {\n     span: span,\n }\n \n-type TwoRegionsMap = hashmap<TwoRegions, ()>;\n+type TwoRegionsMap = HashMap<TwoRegions, ()>;\n \n fn TwoRegionsMap() -> TwoRegionsMap {\n-    return hashmap();\n+    return HashMap();\n }\n \n impl RegionVarBindings {"}, {"sha": "fc19ce2a2158049391e1ab44bdba6484b1685ef1", "filename": "src/rustc/util/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fcommon.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -1,4 +1,4 @@\n-use std::map::hashmap;\n+use std::map::HashMap;\n use syntax::ast;\n use ast::{ty, pat};\n use syntax::codemap::{span};\n@@ -30,7 +30,7 @@ fn indenter() -> _indenter {\n     _indenter(())\n }\n \n-type flag = hashmap<~str, ()>;\n+type flag = HashMap<~str, ()>;\n \n fn field_expr(f: ast::field) -> @ast::expr { return f.node.expr; }\n "}, {"sha": "f58ed10a4085852114d57ca11bb50fdc9f3126b4", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -1,4 +1,4 @@\n-use std::map::hashmap;\n+use std::map::HashMap;\n use middle::ty;\n use middle::ty::{arg, canon_mode};\n use middle::ty::{bound_copy, bound_const, bound_owned, bound_send,"}, {"sha": "9f32e8f4c6134acd013efd874cb920132c35c061", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -7,7 +7,7 @@\n      Rustdoc from its non-sendableness.\"\n )];\n \n-use std::map::hashmap;\n+use std::map::HashMap;\n use rustc::driver::session;\n use session::{basic_options, options};\n use session::session;"}, {"sha": "3203198586ddd33ef3c37dbf26c87eaab919ceda", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -10,7 +10,7 @@ use doc::item_utils;\n use extract::to_str;\n use syntax::ast;\n use syntax::ast_map;\n-use std::map::hashmap;\n+use std::map::HashMap;\n \n export mk_pass;\n "}, {"sha": "292e37d93c403705c71bee2b9b81a81a14d91e92", "filename": "src/rustdoc/prune_hidden_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustdoc%2Fprune_hidden_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustdoc%2Fprune_hidden_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_hidden_pass.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -1,7 +1,7 @@\n //! Prunes things with the #[doc(hidden)] attribute\n \n use doc::item_utils;\n-use std::map::hashmap;\n+use std::map::HashMap;\n export mk_pass;\n \n fn mk_pass() -> pass {"}, {"sha": "4854ed5beaa1c1256357a26da41ca01d3022b7a9", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -4,7 +4,7 @@ use doc::item_utils;\n use syntax::ast;\n use syntax::print::pprust;\n use syntax::ast_map;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use extract::to_str;\n \n export mk_pass;"}, {"sha": "f98f5a3cafc47991a091f5607c210a9bdc44db79", "filename": "src/test/auxiliary/issue-2631-a.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -5,9 +5,9 @@ use std;\n \n use dvec::*;\n use dvec::DVec;\n-use std::map::hashmap;\n+use std::map::HashMap;\n \n-type header_map = hashmap<~str, @DVec<@~str>>;\n+type header_map = HashMap<~str, @DVec<@~str>>;\n \n // the unused ty param is necessary so this gets monomorphized\n fn request<T: Copy>(req: header_map) {"}, {"sha": "6f3dce6647a7fc577cd9cce8fc98a12681776178", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -28,7 +28,7 @@ fn timed(result: &mut float,\n     *result = (end - start);\n }\n \n-fn int_benchmarks<M: map::map<uint, uint>>(make_map: fn() -> M,\n+fn int_benchmarks<M: map::Map<uint, uint>>(make_map: fn() -> M,\n                                            rng: @rand::Rng,\n                                            num_keys: uint,\n                                            results: &mut Results) {\n@@ -69,7 +69,7 @@ fn int_benchmarks<M: map::map<uint, uint>>(make_map: fn() -> M,\n     }\n }\n \n-fn str_benchmarks<M: map::map<~str, uint>>(make_map: fn() -> M,\n+fn str_benchmarks<M: map::Map<~str, uint>>(make_map: fn() -> M,\n                                            rng: @rand::Rng,\n                                            num_keys: uint,\n                                            results: &mut Results) {\n@@ -156,9 +156,9 @@ fn main(args: ~[~str]) {\n     {\n         let rng = rand::seeded_rng(copy seed);\n         let mut results = empty_results();\n-        int_benchmarks::<map::hashmap<uint, uint>>(\n+        int_benchmarks::<map::HashMap<uint, uint>>(\n             map::uint_hash, rng, num_keys, &mut results);\n-        str_benchmarks::<map::hashmap<~str, uint>>(\n+        str_benchmarks::<map::HashMap<~str, uint>>(\n             map::str_hash, rng, num_keys, &mut results);\n         write_results(\"libstd::map::hashmap\", &results);\n     }"}, {"sha": "e8c77926fd37768dbb5cc3f705f67ec088c88a64", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -4,7 +4,7 @@ use std;\n \n use std::time::precise_time_s;\n use std::map;\n-use std::map::{map, hashmap};\n+use std::map::{Map, HashMap};\n \n use io::{Reader, ReaderUtil};\n \n@@ -66,7 +66,7 @@ fn read_line() {\n fn str_set() {\n     let r = rand::Rng();\n \n-    let s = map::hashmap();\n+    let s = map::HashMap();\n \n     for int::range(0, 1000) |_i| {\n         map::set_add(s, r.gen_str(10));"}, {"sha": "d37f3aad5c23e4dff73133a0ab08a37f22e54e18", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -8,8 +8,8 @@ use std;\n use std::arc;\n use std::time;\n use std::map;\n-use std::map::map;\n-use std::map::hashmap;\n+use std::map::Map;\n+use std::map::HashMap;\n use std::deque;\n use std::deque::Deque;\n use std::par;\n@@ -69,7 +69,7 @@ fn make_edges(scale: uint, edgefactor: uint) -> ~[(node_id, node_id)] {\n \n fn make_graph(N: uint, edges: ~[(node_id, node_id)]) -> graph {\n     let graph = do vec::from_fn(N) |_i| {\n-        map::hashmap::<node_id, ()>()\n+        map::HashMap::<node_id, ()>()\n     };\n \n     do vec::each(edges) |e| {\n@@ -85,7 +85,7 @@ fn make_graph(N: uint, edges: ~[(node_id, node_id)]) -> graph {\n }\n \n fn gen_search_keys(graph: graph, n: uint) -> ~[node_id] {\n-    let keys = map::hashmap::<node_id, ()>();\n+    let keys = map::HashMap::<node_id, ()>();\n     let r = rand::Rng();\n \n     while keys.size() < n {"}, {"sha": "0541e862aa7482bff499880c4fffa690c445a8d6", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -2,7 +2,7 @@\n \n use std;\n use std::map;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use std::sort;\n \n fn print_complements() {"}, {"sha": "c7ada4ef38db486f03996843a96a3f7e1deda1b5", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -4,14 +4,14 @@\n \n use std;\n use std::map;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use std::sort;\n use io::ReaderUtil;\n use pipes::{stream, Port, Chan};\n use cmp::Ord;\n \n // given a map, print a sorted version of it\n-fn sort_and_fmt(mm: hashmap<~[u8], uint>, total: uint) -> ~str { \n+fn sort_and_fmt(mm: HashMap<~[u8], uint>, total: uint) -> ~str { \n    fn pct(xx: uint, yy: uint) -> float {\n       return (xx as float) * 100f / (yy as float);\n    }\n@@ -57,15 +57,15 @@ fn sort_and_fmt(mm: hashmap<~[u8], uint>, total: uint) -> ~str {\n }\n \n // given a map, search for the frequency of a pattern\n-fn find(mm: hashmap<~[u8], uint>, key: ~str) -> uint {\n+fn find(mm: HashMap<~[u8], uint>, key: ~str) -> uint {\n    match mm.find(str::to_bytes(str::to_lower(key))) {\n       option::None      => { return 0u; }\n       option::Some(num) => { return num; }\n    }\n }\n \n // given a map, increment the counter for a key\n-fn update_freq(mm: hashmap<~[u8], uint>, key: &[u8]) {\n+fn update_freq(mm: HashMap<~[u8], uint>, key: &[u8]) {\n     let key = vec::slice(key, 0, key.len());\n     match mm.find(key) {\n       option::None      => { mm.insert(key, 1u      ); }\n@@ -92,7 +92,7 @@ fn windows_with_carry(bb: &[u8], nn: uint,\n fn make_sequence_processor(sz: uint, from_parent: pipes::Port<~[u8]>,\n                            to_parent: pipes::Chan<~str>) {\n    \n-   let freqs: hashmap<~[u8], uint> = map::bytes_hash();\n+   let freqs: HashMap<~[u8], uint> = map::bytes_hash();\n    let mut carry: ~[u8] = ~[];\n    let mut total: uint = 0u;\n "}, {"sha": "e6edb8754db8c799f4b6a1285a59dea8ef888483", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -4,13 +4,13 @@\n \n use std;\n use std::map;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use std::sort;\n use io::ReaderUtil;\n use cmp::Ord;\n \n // given a map, print a sorted version of it\n-fn sort_and_fmt(mm: hashmap<~[u8], uint>, total: uint) -> ~str { \n+fn sort_and_fmt(mm: HashMap<~[u8], uint>, total: uint) -> ~str { \n    fn pct(xx: uint, yy: uint) -> float {\n       return (xx as float) * 100f / (yy as float);\n    }\n@@ -56,15 +56,15 @@ fn sort_and_fmt(mm: hashmap<~[u8], uint>, total: uint) -> ~str {\n }\n \n // given a map, search for the frequency of a pattern\n-fn find(mm: hashmap<~[u8], uint>, key: ~str) -> uint {\n+fn find(mm: HashMap<~[u8], uint>, key: ~str) -> uint {\n    match mm.find(str::to_bytes(str::to_lower(key))) {\n       option::None      => { return 0u; }\n       option::Some(num) => { return num; }\n    }\n }\n \n // given a map, increment the counter for a key\n-fn update_freq(mm: hashmap<~[u8], uint>, key: &[u8]) {\n+fn update_freq(mm: HashMap<~[u8], uint>, key: &[u8]) {\n     let key = vec::slice(key, 0, key.len());\n     match mm.find(key) {\n       option::None      => { mm.insert(key, 1u      ); }\n@@ -91,7 +91,7 @@ fn windows_with_carry(bb: &[u8], nn: uint,\n fn make_sequence_processor(sz: uint, from_parent: comm::Port<~[u8]>,\n                            to_parent: comm::Chan<~str>) {\n    \n-   let freqs: hashmap<~[u8], uint> = map::bytes_hash();\n+   let freqs: HashMap<~[u8], uint> = map::bytes_hash();\n    let mut carry: ~[u8] = ~[];\n    let mut total: uint = 0u;\n "}, {"sha": "19f1c6a4536b4ec450cf762684d17dccc95a62e7", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -14,7 +14,7 @@\n \n use std;\n use io::WriterUtil;\n-use std::map::hashmap;\n+use std::map::HashMap;\n \n struct cmplx {\n     re: f64,"}, {"sha": "b76a0c4dfc55897c896efdeb4b5588859c170b2f", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -16,7 +16,7 @@ use option = option;\n use option::Some;\n use option::None;\n use std::map;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use hash::Hash;\n use io::WriterUtil;\n \n@@ -173,7 +173,7 @@ mod map_reduce {\n         input: K1)\n     {\n         // log(error, \"map_task \" + input);\n-        let intermediates = map::hashmap();\n+        let intermediates = map::HashMap();\n \n         do map(input) |key, val| {\n             let mut c = None;\n@@ -250,7 +250,7 @@ mod map_reduce {\n         // This task becomes the master control task. It task::_spawns\n         // to do the rest.\n \n-        let reducers = map::hashmap();\n+        let reducers = map::HashMap();\n         let mut tasks = start_mappers(map, ctrl, inputs);\n         let mut num_mappers = vec::len(inputs) as int;\n "}, {"sha": "c983f895338f2e2a0201ed00d47e86a3da414aba", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -1,11 +1,11 @@\n //buggy.rs\n use std;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use std::map;\n \n fn main() {\n-    let buggy_map :hashmap<uint, &uint> =\n-      hashmap::<uint, &uint>();\n+    let buggy_map :HashMap<uint, &uint> =\n+      HashMap::<uint, &uint>();\n     buggy_map.insert(42, ~1); //~ ERROR illegal borrow\n     \n     // but it is ok if we use a temporary"}, {"sha": "f9696dd28702c2e8b6ababbafc918dd5c032b2bb", "filename": "src/test/compile-fail/for-loop-decl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -1,9 +1,9 @@\n // error-pattern: mismatched types\n use std;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use std::bitv;\n \n-type fn_info = {vars: hashmap<uint, var_info>};\n+type fn_info = {vars: HashMap<uint, var_info>};\n type var_info = {a: uint, b: uint};\n \n fn bitv_to_str(enclosing: fn_info, v: ~bitv::Bitv) -> str {"}, {"sha": "dce7d2560332dd4857d95222ad932610b70dad98", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -1,12 +1,12 @@\n use std;\n use std::map;\n-use std::map::hashmap;\n-use std::map::map;\n+use std::map::HashMap;\n+use std::map::Map;\n \n // Test that trait types printed in error msgs include the type arguments.\n \n fn main() {\n-    let x: map<~str,~str> = map::str_hash::<~str>() as map::<~str,~str>;\n-    let y: map<uint,~str> = x;\n-    //~^ ERROR mismatched types: expected `@std::map::map<uint,~str>`\n+    let x: Map<~str,~str> = map::str_hash::<~str>() as Map::<~str,~str>;\n+    let y: Map<uint,~str> = x;\n+    //~^ ERROR mismatched types: expected `@std::map::Map<uint,~str>`\n }"}, {"sha": "b0af04cc59f007c7f03f926d5102c89c08f43e57", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -2,11 +2,11 @@\n \n use std;\n use std::map;\n-use std::map::hashmap;\n+use std::map::HashMap;\n \n fn main() {\n     let count = @mut 0u;\n-    let map = map::hashmap();\n+    let map = map::HashMap();\n     let mut arr = ~[];\n     for uint::range(0u, 10u) |i| {\n         arr += ~[@~\"key stuff\"];"}, {"sha": "b4d47f86e1a83da954ef3cef7e094d2898bdf006", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -40,7 +40,7 @@ impl<T: Copy> cat<T> {\n   }\n }\n \n-impl<T: Copy> cat<T> : map<int, T> {\n+impl<T: Copy> cat<T> : Map<int, T> {\n   pure fn size() -> uint { self.meows as uint }\n   fn insert(+k: int, +_v: T) -> bool {\n     self.meows += k;"}, {"sha": "7798bdc3d0ad1fa6a04a08ae0bebfd03d0e2f59c", "filename": "src/test/run-pass/extern-mod-syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -1,5 +1,5 @@\n extern mod std;\n-use std::map::hashmap;\n+use std::map::HashMap;\n \n fn main() {\n     io::println(\"Hello world!\");"}, {"sha": "98bcc8ed36f7b5361058ddf55d02c2f7846cc46c", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -10,7 +10,7 @@ use option = option;\n use option::Some;\n use option::None;\n use std::map;\n-use std::map::hashmap;\n+use std::map::HashMap;\n use comm::Chan;\n use comm::Port;\n use comm::send;\n@@ -38,7 +38,7 @@ mod map_reduce {\n     fn map_task(ctrl: Chan<ctrl_proto>, input: ~str) {\n         let intermediates = map::str_hash();\n \n-        fn emit(im: map::hashmap<~str, int>, ctrl: Chan<ctrl_proto>, key: ~str,\n+        fn emit(im: map::HashMap<~str, int>, ctrl: Chan<ctrl_proto>, key: ~str,\n                 val: ~str) {\n             let mut c;\n             match im.find(key) {\n@@ -65,7 +65,7 @@ mod map_reduce {\n         // This task becomes the master control task. It spawns others\n         // to do the rest.\n \n-        let mut reducers: map::hashmap<~str, int>;\n+        let mut reducers: map::HashMap<~str, int>;\n \n         reducers = map::str_hash();\n "}, {"sha": "0c24f79156862fae309a8d972f534094db641d8c", "filename": "src/test/run-pass/issue-1696.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1696.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -1,6 +1,6 @@\n use std;\n use std::map;\n-use std::map::hashmap;\n+use std::map::HashMap;\n \n fn main() {\n     let m = map::bytes_hash();"}, {"sha": "062e086d00c93df084513108dddbc2f5a443305f", "filename": "src/test/run-pass/issue-2804-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -1,9 +1,9 @@\n // Minimized version of issue-2804.rs. Both check that callee IDs don't\n // clobber the previous node ID in a macro expr\n use std;\n-use std::map::hashmap;\n+use std::map::HashMap;\n \n-fn add_interfaces(managed_ip: ~str, device: std::map::hashmap<~str, int>)  {\n+fn add_interfaces(managed_ip: ~str, device: std::map::HashMap<~str, int>)  {\n      error!(\"%s, %?\", managed_ip, device[~\"interfaces\"]);\n }\n "}, {"sha": "36620108db9ef76d83e1cce1f4f4f9bf8e2d8f2a", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=cb7a5395ddfaa7b8fc40db57b32c22f69780ccd6", "patch": "@@ -1,14 +1,14 @@\n use std;\n use io::WriterUtil;\n-use std::map::hashmap;\n+use std::map::HashMap;\n \n enum object\n {\n     bool_value(bool),\n     int_value(i64),\n }\n \n-fn lookup(table: std::map::hashmap<~str, std::json::Json>, key: ~str, default: ~str) -> ~str\n+fn lookup(table: std::map::HashMap<~str, std::json::Json>, key: ~str, default: ~str) -> ~str\n {\n     match table.find(key)\n     {\n@@ -47,7 +47,7 @@ fn add_interface(store: int, managed_ip: ~str, data: std::json::Json) -> (~str,\n     }\n }\n \n-fn add_interfaces(store: int, managed_ip: ~str, device: std::map::hashmap<~str, std::json::Json>) -> ~[(~str, object)]\n+fn add_interfaces(store: int, managed_ip: ~str, device: std::map::HashMap<~str, std::json::Json>) -> ~[(~str, object)]\n {\n     match device[~\"interfaces\"]\n     {"}]}