{"sha": "0cdbd0814958e174c5481d6bf16bd2a7e53ec981", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZGJkMDgxNDk1OGUxNzRjNTQ4MWQ2YmYxNmJkMmE3ZTUzZWM5ODE=", "commit": {"author": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-25T19:23:44Z"}, "committer": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-25T19:26:06Z"}, "message": "Keep VSCode config mostly backwards compatible", "tree": {"sha": "a58277467e67ebdf8584ad2edf398ca630d6fd35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a58277467e67ebdf8584ad2edf398ca630d6fd35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cdbd0814958e174c5481d6bf16bd2a7e53ec981", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cdbd0814958e174c5481d6bf16bd2a7e53ec981", "html_url": "https://github.com/rust-lang/rust/commit/0cdbd0814958e174c5481d6bf16bd2a7e53ec981", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cdbd0814958e174c5481d6bf16bd2a7e53ec981/comments", "author": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71d2d81dcc879bbb7898df11ac00578e93b27ab5", "url": "https://api.github.com/repos/rust-lang/rust/commits/71d2d81dcc879bbb7898df11ac00578e93b27ab5", "html_url": "https://github.com/rust-lang/rust/commit/71d2d81dcc879bbb7898df11ac00578e93b27ab5"}], "stats": {"total": 155, "additions": 71, "deletions": 84}, "files": [{"sha": "70c723b1996904db51fdf418bc72e2ff3b6aa723", "filename": "crates/ra_lsp_server/src/cargo_check.rs", "status": "modified", "additions": 15, "deletions": 37, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbd0814958e174c5481d6bf16bd2a7e53ec981/crates%2Fra_lsp_server%2Fsrc%2Fcargo_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbd0814958e174c5481d6bf16bd2a7e53ec981/crates%2Fra_lsp_server%2Fsrc%2Fcargo_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcargo_check.rs?ref=0cdbd0814958e174c5481d6bf16bd2a7e53ec981", "patch": "@@ -39,22 +39,14 @@ pub struct CheckWatcher {\n \n impl CheckWatcher {\n     pub fn new(options: &Options, workspace_root: PathBuf) -> CheckWatcher {\n-        let check_enabled = options.cargo_check_enable;\n-        let check_command = options.cargo_check_command.clone();\n-        let check_args = options.cargo_check_args.clone();\n+        let options = options.clone();\n         let shared = Arc::new(RwLock::new(CheckWatcherSharedState::new()));\n \n         let (task_send, task_recv) = unbounded::<CheckTask>();\n         let (cmd_send, cmd_recv) = unbounded::<CheckCommand>();\n         let shared_ = shared.clone();\n         let handle = std::thread::spawn(move || {\n-            let mut check = CheckWatcherState::new(\n-                check_enabled,\n-                check_command,\n-                check_args,\n-                workspace_root,\n-                shared_,\n-            );\n+            let mut check = CheckWatcherState::new(options, workspace_root, shared_);\n             check.run(&task_send, &cmd_recv);\n         });\n \n@@ -68,9 +60,7 @@ impl CheckWatcher {\n }\n \n pub struct CheckWatcherState {\n-    check_enabled: bool,\n-    check_command: Option<String>,\n-    check_args: Vec<String>,\n+    options: Options,\n     workspace_root: PathBuf,\n     running: bool,\n     watcher: WatchThread,\n@@ -162,18 +152,13 @@ pub enum CheckCommand {\n \n impl CheckWatcherState {\n     pub fn new(\n-        check_enabled: bool,\n-        check_command: Option<String>,\n-        check_args: Vec<String>,\n+        options: Options,\n         workspace_root: PathBuf,\n         shared: Arc<RwLock<CheckWatcherSharedState>>,\n     ) -> CheckWatcherState {\n-        let watcher =\n-            WatchThread::new(check_enabled, check_command.as_ref(), &check_args, &workspace_root);\n+        let watcher = WatchThread::new(&options, &workspace_root);\n         CheckWatcherState {\n-            check_enabled,\n-            check_command,\n-            check_args,\n+            options,\n             workspace_root,\n             running: false,\n             watcher,\n@@ -204,12 +189,7 @@ impl CheckWatcherState {\n                 self.shared.write().clear(task_send);\n \n                 self.watcher.cancel();\n-                self.watcher = WatchThread::new(\n-                    self.check_enabled,\n-                    self.check_command.as_ref(),\n-                    &self.check_args,\n-                    &self.workspace_root,\n-                );\n+                self.watcher = WatchThread::new(&self.options, &self.workspace_root);\n             }\n         }\n     }\n@@ -306,25 +286,23 @@ enum CheckEvent {\n }\n \n impl WatchThread {\n-    fn new(\n-        check_enabled: bool,\n-        check_command: Option<&String>,\n-        check_args: &[String],\n-        workspace_root: &PathBuf,\n-    ) -> WatchThread {\n-        let check_command = check_command.cloned().unwrap_or(\"check\".to_string());\n+    fn new(options: &Options, workspace_root: &PathBuf) -> WatchThread {\n         let mut args: Vec<String> = vec![\n-            check_command,\n+            options.cargo_watch_command.clone(),\n             \"--message-format=json\".to_string(),\n             \"--manifest-path\".to_string(),\n             format!(\"{}/Cargo.toml\", workspace_root.to_string_lossy()),\n         ];\n-        args.extend(check_args.iter().cloned());\n+        if options.cargo_watch_all_targets {\n+            args.push(\"--all-targets\".to_string());\n+        }\n+        args.extend(options.cargo_watch_args.iter().cloned());\n \n         let (message_send, message_recv) = unbounded();\n         let (cancel_send, cancel_recv) = unbounded();\n+        let enabled = options.cargo_watch_enable;\n         std::thread::spawn(move || {\n-            if !check_enabled {\n+            if !enabled {\n                 return;\n             }\n "}, {"sha": "2d7948d74aed79fd871a1ab88b99594484784260", "filename": "crates/ra_lsp_server/src/config.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbd0814958e174c5481d6bf16bd2a7e53ec981/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbd0814958e174c5481d6bf16bd2a7e53ec981/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs?ref=0cdbd0814958e174c5481d6bf16bd2a7e53ec981", "patch": "@@ -32,9 +32,10 @@ pub struct ServerConfig {\n \n     pub max_inlay_hint_length: Option<usize>,\n \n-    pub cargo_check_enable: bool,\n-    pub cargo_check_command: Option<String>,\n-    pub cargo_check_args: Vec<String>,\n+    pub cargo_watch_enable: bool,\n+    pub cargo_watch_args: Vec<String>,\n+    pub cargo_watch_command: String,\n+    pub cargo_watch_all_targets: bool,\n \n     /// For internal usage to make integrated tests faster.\n     #[serde(deserialize_with = \"nullable_bool_true\")]\n@@ -55,9 +56,10 @@ impl Default for ServerConfig {\n             use_client_watching: false,\n             lru_capacity: None,\n             max_inlay_hint_length: None,\n-            cargo_check_enable: true,\n-            cargo_check_command: None,\n-            cargo_check_args: vec![],\n+            cargo_watch_enable: true,\n+            cargo_watch_args: Vec::new(),\n+            cargo_watch_command: \"check\".to_string(),\n+            cargo_watch_all_targets: true,\n             with_sysroot: true,\n             feature_flags: FxHashMap::default(),\n             cargo_features: Default::default(),"}, {"sha": "c58af7e473f7fe56eeee32d4d35d207b56f3404e", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbd0814958e174c5481d6bf16bd2a7e53ec981/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbd0814958e174c5481d6bf16bd2a7e53ec981/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=0cdbd0814958e174c5481d6bf16bd2a7e53ec981", "patch": "@@ -127,9 +127,10 @@ pub fn main_loop(\n                     .and_then(|it| it.line_folding_only)\n                     .unwrap_or(false),\n                 max_inlay_hint_length: config.max_inlay_hint_length,\n-                cargo_check_enable: config.cargo_check_enable,\n-                cargo_check_command: config.cargo_check_command,\n-                cargo_check_args: config.cargo_check_args,\n+                cargo_watch_enable: config.cargo_watch_enable,\n+                cargo_watch_args: config.cargo_watch_args,\n+                cargo_watch_command: config.cargo_watch_command,\n+                cargo_watch_all_targets: config.cargo_watch_all_targets,\n             }\n         };\n "}, {"sha": "39a07c01aca018b446b2ad8af0a8f36f23f903e9", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbd0814958e174c5481d6bf16bd2a7e53ec981/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbd0814958e174c5481d6bf16bd2a7e53ec981/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=0cdbd0814958e174c5481d6bf16bd2a7e53ec981", "patch": "@@ -35,9 +35,10 @@ pub struct Options {\n     pub supports_location_link: bool,\n     pub line_folding_only: bool,\n     pub max_inlay_hint_length: Option<usize>,\n-    pub cargo_check_enable: bool,\n-    pub cargo_check_command: Option<String>,\n-    pub cargo_check_args: Vec<String>,\n+    pub cargo_watch_enable: bool,\n+    pub cargo_watch_args: Vec<String>,\n+    pub cargo_watch_command: String,\n+    pub cargo_watch_all_targets: bool,\n }\n \n /// `WorldState` is the primary mutable state of the language server"}, {"sha": "69298e917854ae0c091df4e4b34569a69bacf56d", "filename": "editors/code/package.json", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbd0814958e174c5481d6bf16bd2a7e53ec981/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbd0814958e174c5481d6bf16bd2a7e53ec981/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=0cdbd0814958e174c5481d6bf16bd2a7e53ec981", "patch": "@@ -188,11 +188,6 @@\n                     \"default\": \"ra_lsp_server\",\n                     \"description\": \"Path to ra_lsp_server executable\"\n                 },\n-                \"rust-analyzer.enableCargoCheck\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": true,\n-                    \"description\": \"Run `cargo check` for diagnostics on save\"\n-                },\n                 \"rust-analyzer.excludeGlobs\": {\n                     \"type\": \"array\",\n                     \"default\": [],\n@@ -203,16 +198,26 @@\n                     \"default\": true,\n                     \"description\": \"client provided file watching instead of notify watching.\"\n                 },\n-                \"rust-analyzer.cargo-check.arguments\": {\n+                \"rust-analyzer.cargo-watch.enable\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": true,\n+                    \"description\": \"Run `cargo check` for diagnostics on save\"\n+                },\n+                \"rust-analyzer.cargo-watch.arguments\": {\n                     \"type\": \"array\",\n-                    \"description\": \"`cargo-check` arguments. (e.g: `--features=\\\"shumway,pdf\\\"` will run as `cargo check --features=\\\"shumway,pdf\\\"` )\",\n+                    \"description\": \"`cargo-watch` arguments. (e.g: `--features=\\\"shumway,pdf\\\"` will run as `cargo watch -x \\\"check --features=\\\"shumway,pdf\\\"\\\"` )\",\n                     \"default\": []\n                 },\n-                \"rust-analyzer.cargo-check.command\": {\n+                \"rust-analyzer.cargo-watch.command\": {\n                     \"type\": \"string\",\n-                    \"description\": \"`cargo-check` command. (e.g: `clippy` will run as `cargo clippy` )\",\n+                    \"description\": \"`cargo-watch` command. (e.g: `clippy` will run as `cargo watch -x clippy` )\",\n                     \"default\": \"check\"\n                 },\n+                \"rust-analyzer.cargo-watch.allTargets\": {\n+                    \"type\": \"boolean\",\n+                    \"description\": \"Check all targets and tests (will be passed as `--all-targets`)\",\n+                    \"default\": true\n+                },\n                 \"rust-analyzer.trace.server\": {\n                     \"type\": \"string\",\n                     \"scope\": \"window\",\n@@ -229,17 +234,6 @@\n                     \"default\": \"off\",\n                     \"description\": \"Trace requests to the ra_lsp_server\"\n                 },\n-                \"rust-analyzer.trace.cargo-watch\": {\n-                    \"type\": \"string\",\n-                    \"scope\": \"window\",\n-                    \"enum\": [\n-                        \"off\",\n-                        \"error\",\n-                        \"verbose\"\n-                    ],\n-                    \"default\": \"off\",\n-                    \"description\": \"Trace output of cargo-watch\"\n-                },\n                 \"rust-analyzer.lruCapacity\": {\n                     \"type\": \"number\",\n                     \"default\": null,"}, {"sha": "4b388b80c54b0c0f4baed3ff136832cd0133b8fc", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbd0814958e174c5481d6bf16bd2a7e53ec981/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbd0814958e174c5481d6bf16bd2a7e53ec981/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=0cdbd0814958e174c5481d6bf16bd2a7e53ec981", "patch": "@@ -4,10 +4,11 @@ import { Server } from './server';\n \n const RA_LSP_DEBUG = process.env.__RA_LSP_SERVER_DEBUG;\n \n-export interface CargoCheckOptions {\n-    enabled: boolean;\n+export interface CargoWatchOptions {\n+    enable: boolean;\n     arguments: string[];\n-    command: null | string;\n+    command: string;\n+    allTargets: boolean;\n }\n \n export interface CargoFeatures {\n@@ -29,10 +30,11 @@ export class Config {\n     public featureFlags = {};\n     // for internal use\n     public withSysroot: null | boolean = null;\n-    public cargoCheckOptions: CargoCheckOptions = {\n-        enabled: true,\n+    public cargoWatchOptions: CargoWatchOptions = {\n+        enable: true,\n         arguments: [],\n-        command: null,\n+        command: '',\n+        allTargets: true,\n     };\n     public cargoFeatures: CargoFeatures = {\n         noDefaultFeatures: false,\n@@ -91,27 +93,34 @@ export class Config {\n                 RA_LSP_DEBUG || (config.get('raLspServerPath') as string);\n         }\n \n-        if (config.has('enableCargoCheck')) {\n-            this.cargoCheckOptions.enabled = config.get<boolean>(\n-                'enableCargoCheck',\n+        if (config.has('cargo-watch.enable')) {\n+            this.cargoWatchOptions.enable = config.get<boolean>(\n+                'cargo-watch.enable',\n                 true,\n             );\n         }\n \n         if (config.has('cargo-watch.arguments')) {\n-            this.cargoCheckOptions.arguments = config.get<string[]>(\n+            this.cargoWatchOptions.arguments = config.get<string[]>(\n                 'cargo-watch.arguments',\n                 [],\n             );\n         }\n \n         if (config.has('cargo-watch.command')) {\n-            this.cargoCheckOptions.command = config.get<string>(\n+            this.cargoWatchOptions.command = config.get<string>(\n                 'cargo-watch.command',\n                 '',\n             );\n         }\n \n+        if (config.has('cargo-watch.allTargets')) {\n+            this.cargoWatchOptions.allTargets = config.get<boolean>(\n+                'cargo-watch.allTargets',\n+                true,\n+            );\n+        }\n+\n         if (config.has('lruCapacity')) {\n             this.lruCapacity = config.get('lruCapacity') as number;\n         }"}, {"sha": "1da10ebd06fc1de9edf7d6677a0aab55bf5d42a8", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbd0814958e174c5481d6bf16bd2a7e53ec981/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbd0814958e174c5481d6bf16bd2a7e53ec981/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=0cdbd0814958e174c5481d6bf16bd2a7e53ec981", "patch": "@@ -85,7 +85,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     }\n \n     const watchStatus = new StatusDisplay(\n-        Server.config.cargoCheckOptions.command || 'check',\n+        Server.config.cargoWatchOptions.command,\n     );\n     disposeOnDeactivation(watchStatus);\n "}, {"sha": "ae81af84835b6ddc3a6ff627557dcf2ce0f68851", "filename": "editors/code/src/server.ts", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0cdbd0814958e174c5481d6bf16bd2a7e53ec981/editors%2Fcode%2Fsrc%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/0cdbd0814958e174c5481d6bf16bd2a7e53ec981/editors%2Fcode%2Fsrc%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fserver.ts?ref=0cdbd0814958e174c5481d6bf16bd2a7e53ec981", "patch": "@@ -55,9 +55,11 @@ export class Server {\n                 publishDecorations: true,\n                 lruCapacity: Server.config.lruCapacity,\n                 maxInlayHintLength: Server.config.maxInlayHintLength,\n-                cargoCheckEnable: Server.config.cargoCheckOptions.enabled,\n-                cargoCheckCommand: Server.config.cargoCheckOptions.command,\n-                cargoCheckArgs: Server.config.cargoCheckOptions.arguments,\n+                cargoWatchEnable: Server.config.cargoWatchOptions.enable,\n+                cargoWatchArgumets: Server.config.cargoWatchOptions.arguments,\n+                cargoWatchCommand: Server.config.cargoWatchOptions.command,\n+                cargoWatchAllTargets:\n+                    Server.config.cargoWatchOptions.allTargets,\n                 excludeGlobs: Server.config.excludeGlobs,\n                 useClientWatching: Server.config.useClientWatching,\n                 featureFlags: Server.config.featureFlags,"}]}