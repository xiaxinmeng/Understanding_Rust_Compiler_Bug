{"sha": "a647c0cd68bdd0f15081019f0b21bc31ae23f072", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NDdjMGNkNjhiZGQwZjE1MDgxMDE5ZjBiMjFiYzMxYWUyM2YwNzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-16T14:58:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-16T14:58:14Z"}, "message": "Auto merge of #73402 - Dylan-DPC:rollup-8udzpfu, r=Dylan-DPC\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #73237 (Check for overflow in DroplessArena and align returned memory)\n - #73339 (Don't run generator transform when there's a TyErr)\n - #73372 (Re-order correctly the sections in the sidebar)\n - #73373 (Use track caller for bug! macro)\n - #73380 (Add more info to `x.py build --help` on default value for `-j JOBS`.)\n - #73381 (Fix typo in docs of std::mem)\n - #73389 (Use `Ipv4Addr::from<[u8; 4]>` when possible)\n - #73400 (Fix forge-platform-support URL)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "2e5ec96c4bbeedd4a6951c61505e2dd517037b21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e5ec96c4bbeedd4a6951c61505e2dd517037b21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a647c0cd68bdd0f15081019f0b21bc31ae23f072", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a647c0cd68bdd0f15081019f0b21bc31ae23f072", "html_url": "https://github.com/rust-lang/rust/commit/a647c0cd68bdd0f15081019f0b21bc31ae23f072", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a647c0cd68bdd0f15081019f0b21bc31ae23f072/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "435f97cec1f0d7de95a0b80e95f295ab444b2fce", "url": "https://api.github.com/repos/rust-lang/rust/commits/435f97cec1f0d7de95a0b80e95f295ab444b2fce", "html_url": "https://github.com/rust-lang/rust/commit/435f97cec1f0d7de95a0b80e95f295ab444b2fce"}, {"sha": "b4dd6a0dc43f85d9fcd9cfaf45a5c5d854ee13ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4dd6a0dc43f85d9fcd9cfaf45a5c5d854ee13ae", "html_url": "https://github.com/rust-lang/rust/commit/b4dd6a0dc43f85d9fcd9cfaf45a5c5d854ee13ae"}], "stats": {"total": 172, "additions": 87, "deletions": 85}, "files": [{"sha": "006682f50593662b5cef199b4ec7f4beece47062", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a647c0cd68bdd0f15081019f0b21bc31ae23f072/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/a647c0cd68bdd0f15081019f0b21bc31ae23f072/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=a647c0cd68bdd0f15081019f0b21bc31ae23f072", "patch": "@@ -912,7 +912,7 @@ Compatibility Notes\n [`Duration::mul_f32`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.mul_f32\n [`Duration::mul_f64`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.mul_f64\n [`any::type_name`]: https://doc.rust-lang.org/std/any/fn.type_name.html\n-[forge-platform-support]: https://forge.rust-lang.org/platform-support.html\n+[forge-platform-support]: https://forge.rust-lang.org/release/platform-support.html\n [pipeline-internals]: https://internals.rust-lang.org/t/evaluating-pipelined-rustc-compilation/10199\n \n Version 1.37.0 (2019-08-15)"}, {"sha": "3726115357436166b5fa9e6cf05c616d9cc6d62e", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=a647c0cd68bdd0f15081019f0b21bc31ae23f072", "patch": "@@ -149,7 +149,12 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n             \"N\",\n         );\n         opts.optopt(\"\", \"src\", \"path to the root of the rust checkout\", \"DIR\");\n-        opts.optopt(\"j\", \"jobs\", \"number of jobs to run in parallel\", \"JOBS\");\n+        let j_msg = format!(\n+            \"number of jobs to run in parallel; \\\n+             defaults to {} (this host's logical CPU count)\",\n+            num_cpus::get()\n+        );\n+        opts.optopt(\"j\", \"jobs\", &j_msg, \"JOBS\");\n         opts.optflag(\"h\", \"help\", \"print this help message\");\n         opts.optopt(\n             \"\","}, {"sha": "8bce980cadd1e46221d7c915625248a54cb68d7f", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=a647c0cd68bdd0f15081019f0b21bc31ae23f072", "patch": "@@ -129,7 +129,7 @@ pub use crate::intrinsics::transmute;\n /// erring on the side of (double-)dropping.\n ///\n /// Also, `ManuallyDrop` prevents us from having to \"touch\" `v` after transferring the\n-/// ownership to `s` - the final step of interacting with `v` to dispoe of it without\n+/// ownership to `s` \u2014 the final step of interacting with `v` to dispose of it without\n /// running its destructor is entirely avoided.\n ///\n /// [drop]: fn.drop.html"}, {"sha": "c7009b76e814817042fb3bab5d9cea92f1ae7845", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=a647c0cd68bdd0f15081019f0b21bc31ae23f072", "patch": "@@ -39,8 +39,7 @@ pub struct PanicInfo<'a> {\n impl<'a> PanicInfo<'a> {\n     #[unstable(\n         feature = \"panic_internals\",\n-        reason = \"internal details of the implementation of the `panic!` \\\n-                         and related macros\",\n+        reason = \"internal details of the implementation of the `panic!` and related macros\",\n         issue = \"none\"\n     )]\n     #[doc(hidden)]\n@@ -55,8 +54,7 @@ impl<'a> PanicInfo<'a> {\n \n     #[unstable(\n         feature = \"panic_internals\",\n-        reason = \"internal details of the implementation of the `panic!` \\\n-                         and related macros\",\n+        reason = \"internal details of the implementation of the `panic!` and related macros\",\n         issue = \"none\"\n     )]\n     #[doc(hidden)]\n@@ -244,8 +242,7 @@ impl<'a> Location<'a> {\n impl<'a> Location<'a> {\n     #![unstable(\n         feature = \"panic_internals\",\n-        reason = \"internal details of the implementation of the `panic!` \\\n-                          and related macros\",\n+        reason = \"internal details of the implementation of the `panic!` and related macros\",\n         issue = \"none\"\n     )]\n     #[doc(hidden)]"}, {"sha": "766c69a5f94206ae7944ae635c5f17fbe954c219", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=a647c0cd68bdd0f15081019f0b21bc31ae23f072", "patch": "@@ -22,8 +22,7 @@\n #![allow(dead_code, missing_docs)]\n #![unstable(\n     feature = \"core_panic\",\n-    reason = \"internal details of the implementation of the `panic!` \\\n-              and related macros\",\n+    reason = \"internal details of the implementation of the `panic!` and related macros\",\n     issue = \"none\"\n )]\n "}, {"sha": "66c31cbebcc1efbea0181492aad8a29bcf312231", "filename": "src/librustc_arena/lib.rs", "status": "modified", "additions": 41, "deletions": 31, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Flibrustc_arena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Flibrustc_arena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_arena%2Flib.rs?ref=a647c0cd68bdd0f15081019f0b21bc31ae23f072", "patch": "@@ -333,13 +333,6 @@ impl Default for DroplessArena {\n }\n \n impl DroplessArena {\n-    #[inline]\n-    fn align(&self, align: usize) {\n-        let final_address = ((self.ptr.get() as usize) + align - 1) & !(align - 1);\n-        self.ptr.set(final_address as *mut u8);\n-        assert!(self.ptr <= self.end);\n-    }\n-\n     #[inline(never)]\n     #[cold]\n     fn grow(&self, additional: usize) {\n@@ -370,30 +363,50 @@ impl DroplessArena {\n         }\n     }\n \n+    /// Allocates a byte slice with specified size and alignment from the\n+    /// current memory chunk. Returns `None` if there is no free space left to\n+    /// satisfy the request.\n     #[inline]\n-    pub fn alloc_raw(&self, bytes: usize, align: usize) -> &mut [u8] {\n-        unsafe {\n-            assert!(bytes != 0);\n-\n-            self.align(align);\n+    fn alloc_raw_without_grow(&self, bytes: usize, align: usize) -> Option<*mut u8> {\n+        let ptr = self.ptr.get() as usize;\n+        let end = self.end.get() as usize;\n+        // The allocation request fits into the current chunk iff:\n+        //\n+        // let aligned = align_to(ptr, align);\n+        // ptr <= aligned && aligned + bytes <= end\n+        //\n+        // Except that we work with fixed width integers and need to be careful\n+        // about potential overflow in the calcuation. If the overflow does\n+        // happen, then we definitely don't have enough free and need to grow\n+        // the arena.\n+        let aligned = ptr.checked_add(align - 1)? & !(align - 1);\n+        let new_ptr = aligned.checked_add(bytes)?;\n+        if new_ptr <= end {\n+            self.ptr.set(new_ptr as *mut u8);\n+            Some(aligned as *mut u8)\n+        } else {\n+            None\n+        }\n+    }\n \n-            let future_end = intrinsics::arith_offset(self.ptr.get(), bytes as isize);\n-            if (future_end as *mut u8) > self.end.get() {\n-                self.grow(bytes);\n+    #[inline]\n+    pub fn alloc_raw(&self, bytes: usize, align: usize) -> *mut u8 {\n+        assert!(bytes != 0);\n+        loop {\n+            if let Some(a) = self.alloc_raw_without_grow(bytes, align) {\n+                break a;\n             }\n-\n-            let ptr = self.ptr.get();\n-            // Set the pointer past ourselves\n-            self.ptr.set(intrinsics::arith_offset(self.ptr.get(), bytes as isize) as *mut u8);\n-            slice::from_raw_parts_mut(ptr, bytes)\n+            // No free space left. Allocate a new chunk to satisfy the request.\n+            // On failure the grow will panic or abort.\n+            self.grow(bytes);\n         }\n     }\n \n     #[inline]\n     pub fn alloc<T>(&self, object: T) -> &mut T {\n         assert!(!mem::needs_drop::<T>());\n \n-        let mem = self.alloc_raw(mem::size_of::<T>(), mem::align_of::<T>()) as *mut _ as *mut T;\n+        let mem = self.alloc_raw(mem::size_of::<T>(), mem::align_of::<T>()) as *mut T;\n \n         unsafe {\n             // Write into uninitialized memory.\n@@ -418,13 +431,11 @@ impl DroplessArena {\n         assert!(mem::size_of::<T>() != 0);\n         assert!(!slice.is_empty());\n \n-        let mem = self.alloc_raw(slice.len() * mem::size_of::<T>(), mem::align_of::<T>()) as *mut _\n-            as *mut T;\n+        let mem = self.alloc_raw(slice.len() * mem::size_of::<T>(), mem::align_of::<T>()) as *mut T;\n \n         unsafe {\n-            let arena_slice = slice::from_raw_parts_mut(mem, slice.len());\n-            arena_slice.copy_from_slice(slice);\n-            arena_slice\n+            mem.copy_from_nonoverlapping(slice.as_ptr(), slice.len());\n+            slice::from_raw_parts_mut(mem, slice.len())\n         }\n     }\n \n@@ -467,7 +478,7 @@ impl DroplessArena {\n                     return &mut [];\n                 }\n                 let size = len.checked_mul(mem::size_of::<T>()).unwrap();\n-                let mem = self.alloc_raw(size, mem::align_of::<T>()) as *mut _ as *mut T;\n+                let mem = self.alloc_raw(size, mem::align_of::<T>()) as *mut T;\n                 unsafe { self.write_from_iter(iter, len, mem) }\n             }\n             (_, _) => {\n@@ -482,7 +493,7 @@ impl DroplessArena {\n                         let len = vec.len();\n                         let start_ptr = self\n                             .alloc_raw(len * mem::size_of::<T>(), mem::align_of::<T>())\n-                            as *mut _ as *mut T;\n+                            as *mut T;\n                         vec.as_ptr().copy_to_nonoverlapping(start_ptr, len);\n                         vec.set_len(0);\n                         slice::from_raw_parts_mut(start_ptr, len)\n@@ -526,8 +537,7 @@ pub struct DropArena {\n impl DropArena {\n     #[inline]\n     pub unsafe fn alloc<T>(&self, object: T) -> &mut T {\n-        let mem =\n-            self.arena.alloc_raw(mem::size_of::<T>(), mem::align_of::<T>()) as *mut _ as *mut T;\n+        let mem = self.arena.alloc_raw(mem::size_of::<T>(), mem::align_of::<T>()) as *mut T;\n         // Write into uninitialized memory.\n         ptr::write(mem, object);\n         let result = &mut *mem;\n@@ -550,7 +560,7 @@ impl DropArena {\n         let start_ptr = self\n             .arena\n             .alloc_raw(len.checked_mul(mem::size_of::<T>()).unwrap(), mem::align_of::<T>())\n-            as *mut _ as *mut T;\n+            as *mut T;\n \n         let mut destructors = self.destructors.borrow_mut();\n         // Reserve space for the destructors so we can't panic while adding them"}, {"sha": "a5482b7bdcfeb1a40c69a4b4483727fc093cfa97", "filename": "src/librustc_middle/macros.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Flibrustc_middle%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Flibrustc_middle%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmacros.rs?ref=a647c0cd68bdd0f15081019f0b21bc31ae23f072", "patch": "@@ -1,16 +1,20 @@\n #[macro_export]\n macro_rules! bug {\n-    () => ( bug!(\"impossible case reached\") );\n-    ($($message:tt)*) => ({\n-        $crate::util::bug::bug_fmt(file!(), line!(), format_args!($($message)*))\n-    })\n+    () => ( $crate::bug!(\"impossible case reached\") );\n+    ($msg:expr) => ({ $crate::util::bug::bug_fmt(::std::format_args!($msg)) });\n+    ($msg:expr,) => ({ $crate::bug!($msg) });\n+    ($fmt:expr, $($arg:tt)+) => ({\n+        $crate::util::bug::bug_fmt(::std::format_args!($fmt, $($arg)+))\n+    });\n }\n \n #[macro_export]\n macro_rules! span_bug {\n-    ($span:expr, $($message:tt)*) => ({\n-        $crate::util::bug::span_bug_fmt(file!(), line!(), $span, format_args!($($message)*))\n-    })\n+    ($span:expr, $msg:expr) => ({ $crate::util::bug::span_bug_fmt($span, ::std::format_args!($msg)) });\n+    ($span:expr, $msg:expr,) => ({ $crate::span_bug!($span, $msg) });\n+    ($span:expr, $fmt:expr, $($arg:tt)+) => ({\n+        $crate::util::bug::span_bug_fmt($span, ::std::format_args!($fmt, $($arg)+))\n+    });\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "de2e1046f1cbbb60ea245fbe5655ed737ca21325", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=a647c0cd68bdd0f15081019f0b21bc31ae23f072", "patch": "@@ -189,8 +189,7 @@ fn validate_hir_id_for_typeck_tables(\n         if hir_id.owner != hir_owner {\n             ty::tls::with(|tcx| {\n                 bug!(\n-                    \"node {} with HirId::owner {:?} cannot be placed in \\\n-                     TypeckTables with hir_owner {:?}\",\n+                    \"node {} with HirId::owner {:?} cannot be placed in TypeckTables with hir_owner {:?}\",\n                     tcx.hir().node_to_string(hir_id),\n                     hir_id.owner,\n                     hir_owner"}, {"sha": "76c72e4c2603d53f7d8673b4fe9e73c548351ed9", "filename": "src/librustc_middle/ty/list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Flibrustc_middle%2Fty%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Flibrustc_middle%2Fty%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flist.rs?ref=a647c0cd68bdd0f15081019f0b21bc31ae23f072", "patch": "@@ -55,7 +55,7 @@ impl<T: Copy> List<T> {\n             .dropless\n             .alloc_raw(size, cmp::max(mem::align_of::<T>(), mem::align_of::<usize>()));\n         unsafe {\n-            let result = &mut *(mem.as_mut_ptr() as *mut List<T>);\n+            let result = &mut *(mem as *mut List<T>);\n             // Write the length\n             result.len = slice.len();\n "}, {"sha": "9c3a97d8332f1992c4a2f58f1a83acff28dddadd", "filename": "src/librustc_middle/util/bug.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Flibrustc_middle%2Futil%2Fbug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Flibrustc_middle%2Futil%2Fbug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Futil%2Fbug.rs?ref=a647c0cd68bdd0f15081019f0b21bc31ae23f072", "patch": "@@ -3,34 +3,31 @@\n use crate::ty::{tls, TyCtxt};\n use rustc_span::{MultiSpan, Span};\n use std::fmt;\n+use std::panic::Location;\n \n #[cold]\n #[inline(never)]\n-pub fn bug_fmt(file: &'static str, line: u32, args: fmt::Arguments<'_>) -> ! {\n+#[track_caller]\n+pub fn bug_fmt(args: fmt::Arguments<'_>) -> ! {\n     // this wrapper mostly exists so I don't have to write a fully\n     // qualified path of None::<Span> inside the bug!() macro definition\n-    opt_span_bug_fmt(file, line, None::<Span>, args);\n+    opt_span_bug_fmt(None::<Span>, args, Location::caller());\n }\n \n #[cold]\n #[inline(never)]\n-pub fn span_bug_fmt<S: Into<MultiSpan>>(\n-    file: &'static str,\n-    line: u32,\n-    span: S,\n-    args: fmt::Arguments<'_>,\n-) -> ! {\n-    opt_span_bug_fmt(file, line, Some(span), args);\n+#[track_caller]\n+pub fn span_bug_fmt<S: Into<MultiSpan>>(span: S, args: fmt::Arguments<'_>) -> ! {\n+    opt_span_bug_fmt(Some(span), args, Location::caller());\n }\n \n fn opt_span_bug_fmt<S: Into<MultiSpan>>(\n-    file: &'static str,\n-    line: u32,\n     span: Option<S>,\n     args: fmt::Arguments<'_>,\n+    location: &Location<'_>,\n ) -> ! {\n     tls::with_opt(move |tcx| {\n-        let msg = format!(\"{}:{}: {}\", file, line, args);\n+        let msg = format!(\"{}: {}\", location, args);\n         match (tcx, span) {\n             (Some(tcx), Some(span)) => tcx.sess.diagnostic().span_bug(span, &msg),\n             (Some(tcx), None) => tcx.sess.diagnostic().bug(&msg),"}, {"sha": "acadb5385c9cfa402b5473a2faa05eba5e2cb73f", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=a647c0cd68bdd0f15081019f0b21bc31ae23f072", "patch": "@@ -1222,7 +1222,11 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n                     movability == hir::Movability::Movable,\n                 )\n             }\n-            _ => bug!(),\n+            _ => {\n+                tcx.sess\n+                    .delay_span_bug(body.span, &format!(\"unexpected generator type {}\", gen_ty));\n+                return;\n+            }\n         };\n \n         // Compute GeneratorState<yield_ty, return_ty>"}, {"sha": "1681b73d0c25721a7d034d0a7aa711c56080af42", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=a647c0cd68bdd0f15081019f0b21bc31ae23f072", "patch": "@@ -4338,6 +4338,8 @@ fn sidebar_trait(buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n         }\n     }\n \n+    sidebar.push_str(&sidebar_assoc_items(it));\n+\n     sidebar.push_str(\"<a class=\\\"sidebar-title\\\" href=\\\"#implementors\\\">Implementors</a>\");\n     if t.auto {\n         sidebar.push_str(\n@@ -4346,8 +4348,6 @@ fn sidebar_trait(buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n         );\n     }\n \n-    sidebar.push_str(&sidebar_assoc_items(it));\n-\n     write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar)\n }\n "}, {"sha": "d22ac1d53858429dcc45c9fcbd9c16ce98926400", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=a647c0cd68bdd0f15081019f0b21bc31ae23f072", "patch": "@@ -201,8 +201,7 @@ fn default_hook(info: &PanicInfo<'_>) {\n                 if FIRST_PANIC.swap(false, Ordering::SeqCst) {\n                     let _ = writeln!(\n                         err,\n-                        \"note: run with `RUST_BACKTRACE=1` \\\n-                                           environment variable to display a backtrace\"\n+                        \"note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\"\n                     );\n                 }\n             }\n@@ -454,10 +453,7 @@ fn rust_panic_with_hook(\n     // process real quickly as we don't want to try calling it again as it'll\n     // probably just panic again.\n     if panics > 2 {\n-        util::dumb_print(format_args!(\n-            \"thread panicked while processing \\\n-                                       panic. aborting.\\n\"\n-        ));\n+        util::dumb_print(format_args!(\"thread panicked while processing panic. aborting.\\n\"));\n         intrinsics::abort()\n     }\n \n@@ -489,10 +485,7 @@ fn rust_panic_with_hook(\n         // have limited options. Currently our preference is to\n         // just abort. In the future we may consider resuming\n         // unwinding or otherwise exiting the thread cleanly.\n-        util::dumb_print(format_args!(\n-            \"thread panicked while panicking. \\\n-                                       aborting.\\n\"\n-        ));\n+        util::dumb_print(format_args!(\"thread panicked while panicking. aborting.\\n\"));\n         intrinsics::abort()\n     }\n "}, {"sha": "8a788a9265f63c224dde07486812c60b8c127284", "filename": "src/libstd/sys/hermit/net.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Flibstd%2Fsys%2Fhermit%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a647c0cd68bdd0f15081019f0b21bc31ae23f072/src%2Flibstd%2Fsys%2Fhermit%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fnet.rs?ref=a647c0cd68bdd0f15081019f0b21bc31ae23f072", "patch": "@@ -147,10 +147,7 @@ impl TcpStream {\n             .map_err(|_| io::Error::new(ErrorKind::Other, \"peer_addr failed\"))?;\n \n         let saddr = match ipaddr {\n-            Ipv4(ref addr) => SocketAddr::new(\n-                IpAddr::V4(Ipv4Addr::new(addr.0[0], addr.0[1], addr.0[2], addr.0[3])),\n-                port,\n-            ),\n+            Ipv4(ref addr) => SocketAddr::new(IpAddr::V4(Ipv4Addr::from(addr.0)), port),\n             Ipv6(ref addr) => SocketAddr::new(IpAddr::V6(Ipv6Addr::from(addr.0)), port),\n             _ => {\n                 return Err(io::Error::new(ErrorKind::Other, \"peer_addr failed\"));\n@@ -227,10 +224,7 @@ impl TcpListener {\n         let (handle, ipaddr, port) = abi::tcplistener::accept(self.0.port())\n             .map_err(|_| io::Error::new(ErrorKind::Other, \"accept failed\"))?;\n         let saddr = match ipaddr {\n-            Ipv4(ref addr) => SocketAddr::new(\n-                IpAddr::V4(Ipv4Addr::new(addr.0[0], addr.0[1], addr.0[2], addr.0[3])),\n-                port,\n-            ),\n+            Ipv4(ref addr) => SocketAddr::new(IpAddr::V4(Ipv4Addr::from(addr.0)), port),\n             Ipv6(ref addr) => SocketAddr::new(IpAddr::V6(Ipv6Addr::from(addr.0)), port),\n             _ => {\n                 return Err(io::Error::new(ErrorKind::Other, \"accept failed\"));"}]}