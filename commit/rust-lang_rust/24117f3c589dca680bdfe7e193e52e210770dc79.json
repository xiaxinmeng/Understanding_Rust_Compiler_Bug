{"sha": "24117f3c589dca680bdfe7e193e52e210770dc79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MTE3ZjNjNTg5ZGNhNjgwYmRmZTdlMTkzZTUyZTIxMDc3MGRjNzk=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-05-03T11:09:42Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-05-03T11:09:42Z"}, "message": "rustdoc: fix inserting source code spans for constant values\n\nThis will go wrong when the constants partially result from macro expansion.\nInstead, use the expressions and pretty-print them as Rust code.\n\nFixes: #33302", "tree": {"sha": "d2e04a92095b4bc4b87fd9aa45dd03368644ecde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2e04a92095b4bc4b87fd9aa45dd03368644ecde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24117f3c589dca680bdfe7e193e52e210770dc79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24117f3c589dca680bdfe7e193e52e210770dc79", "html_url": "https://github.com/rust-lang/rust/commit/24117f3c589dca680bdfe7e193e52e210770dc79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24117f3c589dca680bdfe7e193e52e210770dc79/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43c5fef47dcaebea4c77771cc6f187b2a72b3639", "url": "https://api.github.com/repos/rust-lang/rust/commits/43c5fef47dcaebea4c77771cc6f187b2a72b3639", "html_url": "https://github.com/rust-lang/rust/commit/43c5fef47dcaebea4c77771cc6f187b2a72b3639"}], "stats": {"total": 69, "additions": 57, "deletions": 12}, "files": [{"sha": "36eb1a1301c9ded4db01f9b8bccaac9546987330", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/24117f3c589dca680bdfe7e193e52e210770dc79/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24117f3c589dca680bdfe7e193e52e210770dc79/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=24117f3c589dca680bdfe7e193e52e210770dc79", "patch": "@@ -20,6 +20,7 @@ use rustc::hir;\n use rustc::middle::cstore::{self, CrateStore};\n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n+use rustc::hir::print as pprust;\n use rustc::ty::{self, TyCtxt};\n use rustc::ty::subst;\n use rustc::middle::stability;\n@@ -30,7 +31,7 @@ use core::{DocContext, DocAccessLevels};\n use doctree;\n use clean::{self, GetDefId};\n \n-use super::{Clean, ToSource};\n+use super::Clean;\n \n /// Attempt to inline the definition of a local node id into this AST.\n ///\n@@ -333,8 +334,8 @@ pub fn build_impl(cx: &DocContext,\n                 let did = assoc_const.def_id;\n                 let type_scheme = tcx.lookup_item_type(did);\n                 let default = if assoc_const.has_value {\n-                    Some(lookup_const_by_id(tcx, did, None)\n-                         .unwrap().0.span.to_src(cx))\n+                    Some(pprust::expr_to_string(\n+                        lookup_const_by_id(tcx, did, None).unwrap().0))\n                 } else {\n                     None\n                 };\n@@ -479,8 +480,6 @@ fn build_module(cx: &DocContext, tcx: &TyCtxt,\n \n fn build_const(cx: &DocContext, tcx: &TyCtxt,\n                did: DefId) -> clean::Constant {\n-    use rustc::hir::print as pprust;\n-\n     let (expr, ty) = lookup_const_by_id(tcx, did, None).unwrap_or_else(|| {\n         panic!(\"expected lookup_const_by_id to succeed for {:?}\", did);\n     });"}, {"sha": "0a606e1425c4552579b597d27a02d0c1ca733a3e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/24117f3c589dca680bdfe7e193e52e210770dc79/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24117f3c589dca680bdfe7e193e52e210770dc79/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=24117f3c589dca680bdfe7e193e52e210770dc79", "patch": "@@ -39,6 +39,7 @@ use rustc::middle::cstore::{self, CrateStore};\n use rustc::middle::privacy::AccessLevels;\n use rustc::hir::def::Def;\n use rustc::hir::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};\n+use rustc::hir::print as pprust;\n use rustc::ty::subst::{self, ParamSpace, VecPerParamSpace};\n use rustc::ty;\n use rustc::middle::stability;\n@@ -1285,8 +1286,7 @@ impl Clean<Item> for hir::TraitItem {\n         let inner = match self.node {\n             hir::ConstTraitItem(ref ty, ref default) => {\n                 AssociatedConstItem(ty.clean(cx),\n-                                    default.as_ref().map(|expr|\n-                                                         expr.span.to_src(cx)))\n+                                    default.as_ref().map(|e| pprust::expr_to_string(&e)))\n             }\n             hir::MethodTraitItem(ref sig, Some(_)) => {\n                 MethodItem(sig.clean(cx))\n@@ -1316,7 +1316,7 @@ impl Clean<Item> for hir::ImplItem {\n         let inner = match self.node {\n             hir::ImplItemKind::Const(ref ty, ref expr) => {\n                 AssociatedConstItem(ty.clean(cx),\n-                                    Some(expr.span.to_src(cx)))\n+                                    Some(pprust::expr_to_string(expr)))\n             }\n             hir::ImplItemKind::Method(ref sig, _) => {\n                 MethodItem(sig.clean(cx))\n@@ -1635,8 +1635,8 @@ impl Clean<Type> for hir::Ty {\n                 BorrowedRef {lifetime: l.clean(cx), mutability: m.mutbl.clean(cx),\n                              type_: box m.ty.clean(cx)},\n             TyVec(ref ty) => Vector(box ty.clean(cx)),\n-            TyFixedLengthVec(ref ty, ref e) => FixedVector(box ty.clean(cx),\n-                                                           e.span.to_src(cx)),\n+            TyFixedLengthVec(ref ty, ref e) =>\n+                FixedVector(box ty.clean(cx), pprust::expr_to_string(e)),\n             TyTup(ref tys) => Tuple(tys.clean(cx)),\n             TyPath(None, ref p) => {\n                 resolve_type(cx, p.clean(cx), self.id)\n@@ -2185,7 +2185,7 @@ impl Clean<Item> for doctree::Static {\n             inner: StaticItem(Static {\n                 type_: self.type_.clean(cx),\n                 mutability: self.mutability.clean(cx),\n-                expr: self.expr.span.to_src(cx),\n+                expr: pprust::expr_to_string(&self.expr),\n             }),\n         }\n     }\n@@ -2209,7 +2209,7 @@ impl Clean<Item> for doctree::Constant {\n             deprecation: self.depr.clean(cx),\n             inner: ConstantItem(Constant {\n                 type_: self.type_.clean(cx),\n-                expr: self.expr.span.to_src(cx),\n+                expr: pprust::expr_to_string(&self.expr),\n             }),\n         }\n     }"}, {"sha": "b9188e8a4e9bacbb82a7507f72ee12a03a3f9cbf", "filename": "src/test/rustdoc/issue-33302.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/24117f3c589dca680bdfe7e193e52e210770dc79/src%2Ftest%2Frustdoc%2Fissue-33302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24117f3c589dca680bdfe7e193e52e210770dc79/src%2Ftest%2Frustdoc%2Fissue-33302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-33302.rs?ref=24117f3c589dca680bdfe7e193e52e210770dc79", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Ensure constant and array length values are not taken from source\n+// code, which wreaks havoc with macros.\n+\n+#![feature(associated_consts)]\n+\n+macro_rules! make {\n+    ($n:expr) => {\n+        pub struct S;\n+\n+        // @has issue_33302/constant.CST.html \\\n+        //        '//pre[@class=\"rust const\"]' 'pub const CST: i32 = 4 * 4'\n+        pub const CST: i32 = ($n * $n);\n+        // @has issue_33302/static.ST.html \\\n+        //        '//pre[@class=\"rust static\"]' 'pub static ST: i32 = 4 * 4'\n+        pub static ST: i32 = ($n * $n);\n+\n+        pub trait T<X> {\n+            fn ignore(_: &X) {}\n+            const C: X;\n+            // @has issue_33302/trait.T.html \\\n+            //        '//*[@class=\"rust trait\"]' 'const D: i32 = 4 * 4;'\n+            // @has - '//*[@id=\"associatedconstant.D\"]' 'const D: i32 = 4 * 4'\n+            const D: i32 = ($n * $n);\n+        }\n+\n+        // @has issue_33302/struct.S.html \\\n+        //        '//h3[@class=\"impl\"]' 'impl T<[i32; 4 * 4]> for S'\n+        // @has - '//*[@id=\"associatedconstant.C\"]' 'const C: [i32; 4 * 4] = [0; 4 * 4]'\n+        // @has - '//*[@id=\"associatedconstant.D\"]' 'const D: i32 = 4 * 4'\n+        impl T<[i32; ($n * $n)]> for S {\n+            const C: [i32; ($n * $n)] = [0; ($n * $n)];\n+        }\n+    }\n+}\n+\n+make!(4);"}]}