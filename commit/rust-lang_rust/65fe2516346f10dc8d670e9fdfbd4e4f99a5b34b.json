{"sha": "65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZmUyNTE2MzQ2ZjEwZGM4ZDY3MGU5ZmRmYmQ0ZTRmOTlhNWIzNGI=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-01-12T14:55:23Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-01-19T16:30:45Z"}, "message": "Handle lifetime annotations in unreachable code\n\nWe  equate the type in the annotation with the inferred type first so\nthat we have a fully inferred type to perform the well-formedness check\non.", "tree": {"sha": "58eca1afd783b7c256d0918893e3fcb1309c3dcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58eca1afd783b7c256d0918893e3fcb1309c3dcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "html_url": "https://github.com/rust-lang/rust/commit/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed871cb368f6b72dde644b0c21e0f9e62dba1810", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed871cb368f6b72dde644b0c21e0f9e62dba1810", "html_url": "https://github.com/rust-lang/rust/commit/ed871cb368f6b72dde644b0c21e0f9e62dba1810"}], "stats": {"total": 680, "additions": 514, "deletions": 166}, "files": [{"sha": "79c2b89522dbf4683123e7b22723eb9dd4430007", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -1242,7 +1242,7 @@ impl_stable_hash_for!(\n \n impl_stable_hash_for!(\n     struct ty::CanonicalUserTypeAnnotation<'tcx> {\n-        user_ty, span\n+        user_ty, span, inferred_ty\n     }\n );\n "}, {"sha": "649370059f0ea7e01c18e1b87f2ce38ae91d2e4e", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -75,21 +75,20 @@ impl<'a, 'gcx, 'tcx> PlaceTy<'tcx> {\n                          elem: &PlaceElem<'tcx>)\n                          -> PlaceTy<'tcx>\n     {\n-        self.projection_ty_core(tcx, elem, |_, _, ty| -> Result<Ty<'tcx>, ()> { Ok(ty) })\n-            .unwrap()\n+        self.projection_ty_core(tcx, elem, |_, _, ty| ty)\n     }\n \n     /// `place_ty.projection_ty_core(tcx, elem, |...| { ... })`\n     /// projects `place_ty` onto `elem`, returning the appropriate\n     /// `Ty` or downcast variant corresponding to that projection.\n     /// The `handle_field` callback must map a `Field` to its `Ty`,\n     /// (which should be trivial when `T` = `Ty`).\n-    pub fn projection_ty_core<V, T, E>(\n+    pub fn projection_ty_core<V, T>(\n         self,\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         elem: &ProjectionElem<'tcx, V, T>,\n-        mut handle_field: impl FnMut(&Self, &Field, &T) -> Result<Ty<'tcx>, E>)\n-        -> Result<PlaceTy<'tcx>, E>\n+        mut handle_field: impl FnMut(&Self, &Field, &T) -> Ty<'tcx>)\n+        -> PlaceTy<'tcx>\n     where\n         V: ::std::fmt::Debug, T: ::std::fmt::Debug\n     {\n@@ -140,10 +139,10 @@ impl<'a, 'gcx, 'tcx> PlaceTy<'tcx> {\n                     }\n                 },\n             ProjectionElem::Field(ref f, ref fty) =>\n-                PlaceTy::Ty { ty: handle_field(&self, f, fty)? },\n+                PlaceTy::Ty { ty: handle_field(&self, f, fty) },\n         };\n         debug!(\"projection_ty self: {:?} elem: {:?} yields: {:?}\", self, elem, answer);\n-        Ok(answer)\n+        answer\n     }\n }\n "}, {"sha": "598303f29328fb8cb883ef787dcbad0a2b64b055", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -887,6 +887,7 @@ macro_rules! make_mir_visitor {\n                 ty: & $($mutability)* CanonicalUserTypeAnnotation<'tcx>,\n             ) {\n                 self.visit_span(& $($mutability)* ty.span);\n+                self.visit_ty(& $($mutability)* ty.inferred_ty, TyContext::UserTy(ty.span));\n             }\n \n             fn super_ty(&mut self, _ty: & $($mutability)* Ty<'tcx>) {\n@@ -967,6 +968,9 @@ pub enum TyContext {\n         source_info: SourceInfo,\n     },\n \n+    /// The inferred type of a user type annotation.\n+    UserTy(Span),\n+\n     /// The return type of the function.\n     ReturnTy(SourceInfo),\n "}, {"sha": "15f627b3ee8c4ab4d4c0694b8a2f74ecd1262718", "filename": "src/librustc/traits/query/type_op/ascribe_user_type.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -1,28 +1,23 @@\n use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n use traits::query::Fallible;\n use hir::def_id::DefId;\n-use mir::ProjectionKind;\n-use ty::{self, ParamEnvAnd, Ty, TyCtxt};\n+use ty::{ParamEnvAnd, Ty, TyCtxt};\n use ty::subst::UserSubsts;\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct AscribeUserType<'tcx> {\n     pub mir_ty: Ty<'tcx>,\n-    pub variance: ty::Variance,\n     pub def_id: DefId,\n     pub user_substs: UserSubsts<'tcx>,\n-    pub projs: &'tcx ty::List<ProjectionKind<'tcx>>,\n }\n \n impl<'tcx> AscribeUserType<'tcx> {\n     pub fn new(\n         mir_ty: Ty<'tcx>,\n-        variance: ty::Variance,\n         def_id: DefId,\n         user_substs: UserSubsts<'tcx>,\n-        projs: &'tcx ty::List<ProjectionKind<'tcx>>,\n     ) -> Self {\n-        Self { mir_ty, variance, def_id, user_substs, projs }\n+        Self { mir_ty,  def_id, user_substs }\n     }\n }\n \n@@ -52,19 +47,19 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for AscribeUserType<'tcx>\n \n BraceStructTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for AscribeUserType<'tcx> {\n-        mir_ty, variance, def_id, user_substs, projs\n+        mir_ty, def_id, user_substs\n     }\n }\n \n BraceStructLiftImpl! {\n     impl<'a, 'tcx> Lift<'tcx> for AscribeUserType<'a> {\n         type Lifted = AscribeUserType<'tcx>;\n-        mir_ty, variance, def_id, user_substs, projs\n+        mir_ty, def_id, user_substs\n     }\n }\n \n impl_stable_hash_for! {\n     struct AscribeUserType<'tcx> {\n-        mir_ty, variance, def_id, user_substs, projs\n+        mir_ty, def_id, user_substs\n     }\n }"}, {"sha": "4c8f81411163c374a2c464815376fef0f41bf4db", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -813,18 +813,19 @@ pub type CanonicalUserTypeAnnotations<'tcx> =\n pub struct CanonicalUserTypeAnnotation<'tcx> {\n     pub user_ty: CanonicalUserType<'tcx>,\n     pub span: Span,\n+    pub inferred_ty: Ty<'tcx>,\n }\n \n BraceStructTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for CanonicalUserTypeAnnotation<'tcx> {\n-        user_ty, span\n+        user_ty, span, inferred_ty\n     }\n }\n \n BraceStructLiftImpl! {\n     impl<'a, 'tcx> Lift<'tcx> for CanonicalUserTypeAnnotation<'a> {\n         type Lifted = CanonicalUserTypeAnnotation<'tcx>;\n-        user_ty, span\n+        user_ty, span, inferred_ty\n     }\n }\n "}, {"sha": "588f46cb77fe26f845e342178d8567d63911843b", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -7,7 +7,7 @@ use rustc::infer::InferCtxt;\n use rustc::mir::visit::TyContext;\n use rustc::mir::visit::Visitor;\n use rustc::mir::{BasicBlock, BasicBlockData, Location, Mir, Place, Rvalue};\n-use rustc::mir::{Statement, Terminator};\n+use rustc::mir::{SourceInfo, Statement, Terminator};\n use rustc::mir::UserTypeProjection;\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::Substs;\n@@ -66,11 +66,12 @@ impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx\n     /// call. Make them live at the location where they appear.\n     fn visit_ty(&mut self, ty: &ty::Ty<'tcx>, ty_context: TyContext) {\n         match ty_context {\n-            TyContext::ReturnTy(source_info)\n-            | TyContext::YieldTy(source_info)\n-            | TyContext::LocalDecl { source_info, .. } => {\n+            TyContext::ReturnTy(SourceInfo { span, .. })\n+            | TyContext::YieldTy(SourceInfo { span, .. })\n+            | TyContext::UserTy(span)\n+            | TyContext::LocalDecl { source_info: SourceInfo { span, .. }, .. } => {\n                 span_bug!(\n-                    source_info.span,\n+                    span,\n                     \"should not be visiting outside of the CFG: {:?}\",\n                     ty_context\n                 );"}, {"sha": "e6a974fd8cc94d92407d9eead619066d866305d9", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -1,8 +1,5 @@\n use rustc::ty::subst::Substs;\n-use rustc::ty::{\n-    self, ClosureSubsts, GeneratorSubsts, Ty, TypeFoldable,\n-    UserTypeAnnotationIndex, CanonicalUserTypeAnnotation\n-};\n+use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, Ty, TypeFoldable};\n use rustc::mir::{Location, Mir};\n use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n@@ -58,18 +55,6 @@ impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n         debug!(\"visit_ty: ty={:?}\", ty);\n     }\n \n-    fn visit_user_type_annotation(\n-        &mut self,\n-        _index: UserTypeAnnotationIndex,\n-        _ty: &mut CanonicalUserTypeAnnotation,\n-    ) {\n-        // User type annotations represent the types that the user\n-        // wrote in the progarm. We don't want to erase the regions\n-        // from these types: rather, we want to add them as\n-        // constraints at type-check time.\n-        debug!(\"visit_user_type_annotation: skipping renumber\");\n-    }\n-\n     fn visit_substs(&mut self, substs: &mut &'tcx Substs<'tcx>, location: Location) {\n         debug!(\"visit_substs(substs={:?}, location={:?})\", substs, location);\n "}, {"sha": "9ed1d49d05bd127218e29c26fa22c46ea1835948", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 62, "deletions": 56, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -748,7 +748,7 @@ struct TypeChecker<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     /// annotations. Part of the reason for this setup is that it allows us to enforce basic\n     /// WF criteria on the types even if the code that referenced them is dead\n     /// code (see #54943).\n-    instantiated_type_annotations: FxHashMap<UserTypeAnnotationIndex, UserType<'tcx>>,\n+    instantiated_type_annotations: FxHashMap<UserTypeAnnotationIndex, Ty<'tcx>>,\n }\n \n struct BorrowCheckContext<'a, 'tcx: 'a> {\n@@ -920,17 +920,58 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n              self.mir.user_type_annotations\n         );\n         for annotation_index in self.mir.user_type_annotations.indices() {\n-            let CanonicalUserTypeAnnotation { span, ref user_ty } =\n+            let CanonicalUserTypeAnnotation { span, ref user_ty, inferred_ty } =\n                 self.mir.user_type_annotations[annotation_index];\n-            let (mut annotation, _) = self.infcx.instantiate_canonical_with_fresh_inference_vars(\n+            let (annotation, _) = self.infcx.instantiate_canonical_with_fresh_inference_vars(\n                 span, user_ty\n             );\n             match annotation {\n-                UserType::Ty(ref mut ty) =>\n-                    *ty = self.normalize(ty, Locations::All(span)),\n-                _ => {},\n+                UserType::Ty(mut ty) => {\n+                    ty = self.normalize(ty, Locations::All(span));\n+\n+                    if let Err(terr) = self.eq_types(\n+                        ty,\n+                        inferred_ty,\n+                        Locations::All(span),\n+                        ConstraintCategory::BoringNoLocation,\n+                    ) {\n+                        span_mirbug!(\n+                            self,\n+                            self.mir.user_type_annotations[annotation_index],\n+                            \"bad user type ({:?} = {:?}): {:?}\",\n+                            ty,\n+                            inferred_ty,\n+                            terr\n+                        );\n+                    }\n+\n+                    self.prove_predicate(\n+                        ty::Predicate::WellFormed(inferred_ty),\n+                        Locations::All(span),\n+                        ConstraintCategory::TypeAnnotation,\n+                    );\n+                },\n+                UserType::TypeOf(def_id, user_substs) => {\n+                    if let Err(terr) = self.fully_perform_op(\n+                        Locations::All(span),\n+                        ConstraintCategory::BoringNoLocation,\n+                        self.param_env.and(type_op::ascribe_user_type::AscribeUserType::new(\n+                            inferred_ty, def_id, user_substs,\n+                        )),\n+                    ) {\n+                        span_mirbug!(\n+                            self,\n+                            self.mir.user_type_annotations[annotation_index],\n+                            \"bad user type AscribeUserType({:?}, {:?} {:?}): {:?}\",\n+                            inferred_ty,\n+                            def_id,\n+                            user_substs,\n+                            terr\n+                        );\n+                    }\n+                },\n             }\n-            self.instantiated_type_annotations.insert(annotation_index, annotation);\n+            self.instantiated_type_annotations.insert(annotation_index, inferred_ty);\n         }\n         debug!(\n             \"instantiate_user_type_annotations: instantiated_type_annotations={:?}\",\n@@ -1067,58 +1108,23 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             a, v, user_ty, locations,\n         );\n \n-        let type_annotation = self.instantiated_type_annotations[&user_ty.base];\n-        match type_annotation {\n-            UserType::Ty(ty) => {\n-                // The `TypeRelating` code assumes that \"unresolved inference\n-                // variables\" appear in the \"a\" side, so flip `Contravariant`\n-                // ambient variance to get the right relationship.\n-                let v1 = ty::Contravariant.xform(v);\n-                let tcx = self.infcx.tcx;\n+        let annotated_type = self.instantiated_type_annotations[&user_ty.base];\n+        let mut curr_projected_ty = PlaceTy::from_ty(annotated_type);\n \n-                // We need to follow any provided projetions into the type.\n-                //\n-                // if we hit a ty var as we descend, then just skip the\n-                // attempt to relate the mir local with any type.\n-                #[derive(Debug)] struct HitTyVar;\n-                let mut curr_projected_ty: Result<PlaceTy, HitTyVar>;\n-\n-                curr_projected_ty = Ok(PlaceTy::from_ty(ty));\n-                for proj in &user_ty.projs {\n-                    let projected_ty = if let Ok(projected_ty) = curr_projected_ty {\n-                        projected_ty\n-                    } else {\n-                        break;\n-                    };\n-                    curr_projected_ty = projected_ty.projection_ty_core(\n-                        tcx, proj, |this, field, &()| {\n-                            if this.to_ty(tcx).is_ty_var() {\n-                                Err(HitTyVar)\n-                            } else {\n-                                let ty = this.field_ty(tcx, field);\n-                                Ok(self.normalize(ty, locations))\n-                            }\n-                        });\n-                }\n-                debug!(\"user_ty base: {:?} freshened: {:?} projs: {:?} yields: {:?}\",\n-                       user_ty.base, ty, user_ty.projs, curr_projected_ty);\n+        let tcx = self.infcx.tcx;\n \n-                if let Ok(projected_ty) = curr_projected_ty {\n-                    let ty = projected_ty.to_ty(tcx);\n-                    self.relate_types(ty, v1, a, locations, category)?;\n-                }\n-            }\n-            UserType::TypeOf(def_id, user_substs) => {\n-                let projs = self.infcx.tcx.intern_projs(&user_ty.projs);\n-                self.fully_perform_op(\n-                    locations,\n-                    category,\n-                    self.param_env.and(type_op::ascribe_user_type::AscribeUserType::new(\n-                        a, v, def_id, user_substs, projs,\n-                    )),\n-                )?;\n-            }\n+        for proj in &user_ty.projs {\n+            let projected_ty = curr_projected_ty.projection_ty_core(tcx, proj, |this, field, &()| {\n+                let ty = this.field_ty(tcx, field);\n+                self.normalize(ty, locations)\n+            });\n+            curr_projected_ty = projected_ty;\n         }\n+        debug!(\"user_ty base: {:?} freshened: {:?} projs: {:?} yields: {:?}\",\n+                user_ty.base, annotated_type, user_ty.projs, curr_projected_ty);\n+\n+        let ty = curr_projected_ty.to_ty(tcx);\n+        self.relate_types(a, v, ty, locations, category)?;\n \n         Ok(())\n     }"}, {"sha": "31e0c0daa3fa66ad0dc6f9a8a9413c41b0254314", "filename": "src/librustc_mir/build/expr/as_constant.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -31,10 +31,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 value,\n             } => this.as_constant(value),\n             ExprKind::Literal { literal, user_ty } => {\n-                let user_ty = user_ty.map(|ty| {\n+                let user_ty = user_ty.map(|user_ty| {\n                     this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n                         span,\n-                        user_ty: ty,\n+                        user_ty,\n+                        inferred_ty: ty,\n                     })\n                 });\n                 Constant {"}, {"sha": "6bd61ab53fd2182df6c75dfb0ebd0721a9b4d58b", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -134,7 +134,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let place = unpack!(block = this.as_place(block, source));\n                 if let Some(user_ty) = user_ty {\n                     let annotation_index = this.canonical_user_type_annotations.push(\n-                        CanonicalUserTypeAnnotation { span: source_info.span, user_ty }\n+                        CanonicalUserTypeAnnotation {\n+                            span: source_info.span,\n+                            user_ty,\n+                            inferred_ty: expr.ty,\n+                        }\n                     );\n                     this.cfg.push(\n                         block,\n@@ -157,7 +161,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 );\n                 if let Some(user_ty) = user_ty {\n                     let annotation_index = this.canonical_user_type_annotations.push(\n-                        CanonicalUserTypeAnnotation { span: source_info.span, user_ty }\n+                        CanonicalUserTypeAnnotation {\n+                            span: source_info.span,\n+                            user_ty,\n+                            inferred_ty: expr.ty,\n+                        }\n                     );\n                     this.cfg.push(\n                         block,"}, {"sha": "3de2f4757865044f9e020817130dd97493a4209b", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -331,10 +331,12 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         .collect()\n                 };\n \n+                let inferred_ty = expr.ty;\n                 let user_ty = user_ty.map(|ty| {\n                     this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n                         span: source_info.span,\n                         user_ty: ty,\n+                        inferred_ty,\n                     })\n                 });\n                 let adt = box AggregateKind::Adt("}, {"sha": "2f1e8c03f2f7eefddb32199b0b551ac764eaa165", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -303,7 +303,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n                 let ty_source_info = self.source_info(user_ty_span);\n                 let user_ty = box pat_ascription_ty.user_ty(\n-                    &mut self.canonical_user_type_annotations, ty_source_info.span\n+                    &mut self.canonical_user_type_annotations,\n+                    place.ty(&self.local_decls, self.hir.tcx()).to_ty(self.hir.tcx()),\n+                    ty_source_info.span,\n                 );\n                 self.cfg.push(\n                     block,\n@@ -572,11 +574,12 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 // of `user_ty` on any bindings contained with subpattern.\n                 let annotation = CanonicalUserTypeAnnotation {\n                     span: user_ty_span,\n-                    user_ty: user_ty.base,\n+                    user_ty: user_ty.user_ty,\n+                    inferred_ty: subpattern.ty,\n                 };\n                 let projection = UserTypeProjection {\n                     base: self.canonical_user_type_annotations.push(annotation),\n-                    projs: user_ty.projs.clone(),\n+                    projs: Vec::new(),\n                 };\n                 let subpattern_user_ty = pattern_user_ty.push_projection(&projection, user_ty_span);\n                 self.visit_bindings(subpattern, subpattern_user_ty, f)\n@@ -1340,7 +1343,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             );\n \n             let user_ty = box ascription.user_ty.clone().user_ty(\n-                &mut self.canonical_user_type_annotations, source_info.span\n+                &mut self.canonical_user_type_annotations,\n+                ascription.source.ty(&self.local_decls, self.hir.tcx()).to_ty(self.hir.tcx()),\n+                source_info.span\n             );\n             self.cfg.push(\n                 block,"}, {"sha": "9dcccba1a06b596aa8aca1c8f9f9760df7091bbb", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -12,7 +12,7 @@ use hair::util::UserAnnotatedTyHelpers;\n use hair::constant::*;\n \n use rustc::mir::{fmt_const_val, Field, BorrowKind, Mutability};\n-use rustc::mir::{ProjectionElem, UserTypeProjection};\n+use rustc::mir::{UserTypeProjection};\n use rustc::mir::interpret::{Scalar, GlobalId, ConstValue, sign_extend};\n use rustc::ty::{self, Region, TyCtxt, AdtDef, Ty, Lift, UserType};\n use rustc::ty::{CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations};\n@@ -60,26 +60,29 @@ pub struct Pattern<'tcx> {\n \n #[derive(Clone, Debug)]\n pub struct PatternTypeProjection<'tcx> {\n-    pub base: CanonicalUserType<'tcx>,\n-    pub projs: Vec<ProjectionElem<'tcx, (), ()>>,\n+    pub user_ty: CanonicalUserType<'tcx>,\n }\n \n impl<'tcx> PatternTypeProjection<'tcx> {\n     pub(crate) fn from_user_type(user_annotation: CanonicalUserType<'tcx>) -> Self {\n         Self {\n-            base: user_annotation,\n-            projs: Vec::new(),\n+            user_ty: user_annotation,\n         }\n     }\n \n     pub(crate) fn user_ty(\n         self,\n         annotations: &mut CanonicalUserTypeAnnotations<'tcx>,\n+        inferred_ty: Ty<'tcx>,\n         span: Span,\n     ) -> UserTypeProjection<'tcx> {\n         UserTypeProjection {\n-            base: annotations.push(CanonicalUserTypeAnnotation{ span, user_ty: self.base }),\n-            projs: self.projs\n+            base: annotations.push(CanonicalUserTypeAnnotation {\n+                span,\n+                user_ty: self.user_ty,\n+                inferred_ty,\n+            }),\n+            projs: Vec::new(),\n         }\n     }\n }"}, {"sha": "526637e108d40bb861f1f90f19b3e330172e43eb", "filename": "src/librustc_traits/type_op.rs", "status": "modified", "additions": 5, "deletions": 38, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc_traits%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Flibrustc_traits%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op.rs?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -2,8 +2,6 @@ use rustc::infer::at::ToTrace;\n use rustc::infer::canonical::{Canonical, QueryResponse};\n use rustc::infer::InferCtxt;\n use rustc::hir::def_id::DefId;\n-use rustc::mir::ProjectionKind;\n-use rustc::mir::tcx::PlaceTy;\n use rustc::traits::query::type_op::ascribe_user_type::AscribeUserType;\n use rustc::traits::query::type_op::eq::Eq;\n use rustc::traits::query::type_op::normalize::Normalize;\n@@ -44,17 +42,16 @@ fn type_op_ascribe_user_type<'tcx>(\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, |infcx, fulfill_cx, key| {\n             let (\n-                param_env, AscribeUserType { mir_ty, variance, def_id, user_substs, projs }\n+                param_env, AscribeUserType { mir_ty, def_id, user_substs }\n             ) = key.into_parts();\n \n             debug!(\n-                \"type_op_ascribe_user_type: mir_ty={:?} variance={:?} def_id={:?} \\\n-                 user_substs={:?} projs={:?}\",\n-                mir_ty, variance, def_id, user_substs, projs\n+                \"type_op_ascribe_user_type: mir_ty={:?} def_id={:?} user_substs={:?}\",\n+                mir_ty, def_id, user_substs\n             );\n \n             let mut cx = AscribeUserTypeCx { infcx, param_env, fulfill_cx };\n-            cx.relate_mir_and_user_ty(mir_ty, variance, def_id, user_substs, projs)?;\n+            cx.relate_mir_and_user_ty(mir_ty, def_id, user_substs)?;\n \n             Ok(())\n         })\n@@ -112,10 +109,8 @@ impl AscribeUserTypeCx<'me, 'gcx, 'tcx> {\n     fn relate_mir_and_user_ty(\n         &mut self,\n         mir_ty: Ty<'tcx>,\n-        variance: Variance,\n         def_id: DefId,\n         user_substs: UserSubsts<'tcx>,\n-        projs: &[ProjectionKind<'tcx>],\n     ) -> Result<(), NoSolution> {\n         let UserSubsts {\n             user_self_ty,\n@@ -128,35 +123,7 @@ impl AscribeUserTypeCx<'me, 'gcx, 'tcx> {\n         debug!(\"relate_type_and_user_type: ty of def-id is {:?}\", ty);\n         let ty = self.normalize(ty);\n \n-        // We need to follow any provided projetions into the type.\n-        //\n-        // if we hit a ty var as we descend, then just skip the\n-        // attempt to relate the mir local with any type.\n-\n-        struct HitTyVar;\n-        let mut curr_projected_ty: Result<PlaceTy, HitTyVar>;\n-        curr_projected_ty = Ok(PlaceTy::from_ty(ty));\n-        for proj in projs {\n-            let projected_ty = if let Ok(projected_ty) = curr_projected_ty {\n-                projected_ty\n-            } else {\n-                break;\n-            };\n-            curr_projected_ty = projected_ty.projection_ty_core(\n-                tcx, proj, |this, field, &()| {\n-                    if this.to_ty(tcx).is_ty_var() {\n-                        Err(HitTyVar)\n-                    } else {\n-                        let ty = this.field_ty(tcx, field);\n-                        Ok(self.normalize(ty))\n-                    }\n-                });\n-        }\n-\n-        if let Ok(projected_ty) = curr_projected_ty {\n-            let ty = projected_ty.to_ty(tcx);\n-            self.relate(mir_ty, variance, ty)?;\n-        }\n+        self.relate(mir_ty, Variance::Invariant, ty)?;\n \n         // Prove the predicates coming along with `def_id`.\n         //"}, {"sha": "ce4e010674359670526297c83d84bef3cf11d4d9", "filename": "src/test/ui/issue-54943.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fissue-54943.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fissue-54943.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-54943.rs?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -1,7 +1,3 @@\n-// compile-pass\n-// FIXME(#54943) This test targets the scenario where proving the WF requirements of a user\n-// type annotation requires checking dead code. This test should actually fail to compile.\n-\n #![feature(nll)]\n #![allow(warnings)]\n \n@@ -11,7 +7,7 @@ fn boo<'a>() {\n     return;\n \n     let x = foo::<&'a u32>();\n-    //~^ ERROR the type `&'a u32` does not fulfill the required lifetime [E0477]\n+    //~^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "aa68177bcdb58dd5a268d92d21192e24f5620181", "filename": "src/test/ui/issue-54943.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fissue-54943.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fissue-54943.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-54943.stderr?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-54943.rs:9:13\n+   |\n+LL | fn boo<'a>() {\n+   |        -- lifetime `'a` defined here\n+...\n+LL |     let x = foo::<&'a u32>();\n+   |             ^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "597b096dbe60747e62822051882d8ce97c7deaa1", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.stderr?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -2,7 +2,7 @@ error[E0309]: the associated type `<T as MyTrait<'_>>::Output` may not live long\n   --> $DIR/projection-where-clause-env-wrong-bound.rs:17:5\n    |\n LL |     bar::<T::Output>() //~ ERROR may not live long enough\n-   |     ^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as MyTrait<'_>>::Output: 'a`...\n "}, {"sha": "3c2ac474778f9463f3c111527743b7d233287a37", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-none.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-none.stderr?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -2,7 +2,7 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/projection-where-clause-none.rs:16:5\n    |\n LL |     bar::<T::Output>() //~ ERROR the parameter type `T` may not live long enough\n-   |     ^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `T: 'a`...\n "}, {"sha": "a2e3ab41614f699c1355a2c29fb9797e46098f57", "filename": "src/test/ui/nll/ty-outlives/wf-unreachable.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fwf-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fwf-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fwf-unreachable.rs?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -0,0 +1,54 @@\n+// Test that we check that user type annotations are well-formed, even in dead\n+// code.\n+\n+#![feature(nll)]\n+\n+fn uninit<'a>() {\n+    return;\n+    let x: &'static &'a ();                         //~ ERROR lifetime may not live long enough\n+}\n+\n+fn var_type<'a>() {\n+    return;\n+    let x: &'static &'a () = &&();                  //~ ERROR lifetime may not live long enough\n+}\n+\n+fn uninit_infer<'a>() {\n+    let x: &'static &'a _;                          //~ ERROR lifetime may not live long enough\n+    x = && ();\n+}\n+\n+fn infer<'a>() {\n+    return;\n+    let x: &'static &'a _ = &&();                   //~ ERROR lifetime may not live long enough\n+}\n+\n+fn uninit_no_var<'a>() {\n+    return;\n+    let _: &'static &'a ();                         //~ ERROR lifetime may not live long enough\n+}\n+\n+fn no_var<'a>() {\n+    return;\n+    let _: &'static &'a () = &&();                  //~ ERROR lifetime may not live long enough\n+}\n+\n+fn infer_no_var<'a>() {\n+    return;\n+    let _: &'static &'a _ = &&();                   //~ ERROR lifetime may not live long enough\n+}\n+\n+trait X<'a, 'b> {}\n+\n+struct C<'a, 'b, T: X<'a, 'b>>(T, &'a (), &'b ());\n+\n+impl X<'_, '_> for i32 {}\n+impl<'a> X<'a, 'a> for () {}\n+\n+// This type annotation is not well-formed because we substitute `()` for `_`.\n+fn required_substs<'a>() {\n+    return;\n+    let _: C<'static, 'a, _> = C((), &(), &());     //~ ERROR lifetime may not live long enough\n+}\n+\n+fn main() {}"}, {"sha": "14642a1e615df8c89bcd5cd0a5ce0e90e5a13a2b", "filename": "src/test/ui/nll/ty-outlives/wf-unreachable.stderr", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fwf-unreachable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fwf-unreachable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fwf-unreachable.stderr?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -0,0 +1,73 @@\n+error: lifetime may not live long enough\n+  --> $DIR/wf-unreachable.rs:8:12\n+   |\n+LL | fn uninit<'a>() {\n+   |           -- lifetime `'a` defined here\n+LL |     return;\n+LL |     let x: &'static &'a ();                         //~ ERROR lifetime may not live long enough\n+   |            ^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/wf-unreachable.rs:13:12\n+   |\n+LL | fn var_type<'a>() {\n+   |             -- lifetime `'a` defined here\n+LL |     return;\n+LL |     let x: &'static &'a () = &&();                  //~ ERROR lifetime may not live long enough\n+   |            ^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/wf-unreachable.rs:17:12\n+   |\n+LL | fn uninit_infer<'a>() {\n+   |                 -- lifetime `'a` defined here\n+LL |     let x: &'static &'a _;                          //~ ERROR lifetime may not live long enough\n+   |            ^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/wf-unreachable.rs:23:12\n+   |\n+LL | fn infer<'a>() {\n+   |          -- lifetime `'a` defined here\n+LL |     return;\n+LL |     let x: &'static &'a _ = &&();                   //~ ERROR lifetime may not live long enough\n+   |            ^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/wf-unreachable.rs:28:12\n+   |\n+LL | fn uninit_no_var<'a>() {\n+   |                  -- lifetime `'a` defined here\n+LL |     return;\n+LL |     let _: &'static &'a ();                         //~ ERROR lifetime may not live long enough\n+   |            ^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/wf-unreachable.rs:33:12\n+   |\n+LL | fn no_var<'a>() {\n+   |           -- lifetime `'a` defined here\n+LL |     return;\n+LL |     let _: &'static &'a () = &&();                  //~ ERROR lifetime may not live long enough\n+   |            ^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/wf-unreachable.rs:38:12\n+   |\n+LL | fn infer_no_var<'a>() {\n+   |                 -- lifetime `'a` defined here\n+LL |     return;\n+LL |     let _: &'static &'a _ = &&();                   //~ ERROR lifetime may not live long enough\n+   |            ^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/wf-unreachable.rs:51:12\n+   |\n+LL | fn required_substs<'a>() {\n+   |                    -- lifetime `'a` defined here\n+LL |     return;\n+LL |     let _: C<'static, 'a, _> = C((), &(), &());     //~ ERROR lifetime may not live long enough\n+   |            ^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "23b76bb196470984af9a50c1ce09bca138fd3f94", "filename": "src/test/ui/nll/user-annotations/downcast-infer.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdowncast-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdowncast-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdowncast-infer.rs?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -0,0 +1,11 @@\n+// compile-pass\n+\n+// Check that we don't try to downcast `_` when type-checking the annotation.\n+fn main() {\n+    let x = Some(Some(Some(1)));\n+\n+    match x {\n+        Some::<Option<_>>(Some(Some(v))) => (),\n+        _ => (),\n+    }\n+}"}, {"sha": "76ead4e94ef667e7c8f32bf345ac74846edf582d", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.ast.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.ast.stderr?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -0,0 +1,20 @@\n+error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:45:13\n+   |\n+LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 37:15\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:37:15\n+   |\n+LL | fn with_assoc<'a,'b>() {\n+   |               ^^\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 37:18\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:37:18\n+   |\n+LL | fn with_assoc<'a,'b>() {\n+   |                  ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0491`."}, {"sha": "ad94d375b5bb75ce8260f21204961d2cb0d16595", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.mir.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.mir.stderr?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:45:13\n+   |\n+LL | fn with_assoc<'a,'b>() {\n+   |               -- -- lifetime `'b` defined here\n+   |               |\n+   |               lifetime `'a` defined here\n+...\n+LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "1d5349219923063f67d9a6584754cceed4ad00a1", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.rs?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -3,6 +3,9 @@\n // outlive the location in which the type appears, even when the\n // associted type is in a supertype. Issue #22246.\n \n+// revisions: ast mir\n+//[mir]compile-flags: -Z borrowck=mir\n+\n #![allow(dead_code)]\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -40,7 +43,8 @@ fn with_assoc<'a,'b>() {\n     // FIXME (#54943) NLL doesn't enforce WF condition in unreachable code if\n     // `_x` is changed to `_`\n     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n-    //~^ ERROR reference has a longer lifetime\n+    //[ast]~^ ERROR reference has a longer lifetime\n+    //[mir]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "73266ab50fad039344d6976b50920eba8f0fb3a0", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.ast.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.ast.stderr?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -0,0 +1,32 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/regions-free-region-ordering-caller.rs:11:12\n+   |\n+LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |                     ---------     ---------\n+   |                     |\n+   |                     these two types are declared with different lifetimes...\n+LL |     let z: Option<&'b &'a usize> = None;//[ast]~ ERROR E0623\n+   |            ^^^^^^^^^^^^^^^^^^^^^ ...but data from `a` flows into `b` here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/regions-free-region-ordering-caller.rs:17:12\n+   |\n+LL | fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |                     ---------     ---------\n+   |                     |\n+   |                     these two types are declared with different lifetimes...\n+LL |     let y: Paramd<'a> = Paramd { x: a };\n+LL |     let z: Option<&'b Paramd<'a>> = None;//[ast]~ ERROR E0623\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ ...but data from `a` flows into `b` here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/regions-free-region-ordering-caller.rs:22:12\n+   |\n+LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |                     ---------     --------- these two types are declared with different lifetimes...\n+LL |     let z: Option<&'a &'b usize> = None;//[ast]~ ERROR E0623\n+   |            ^^^^^^^^^^^^^^^^^^^^^ ...but data from `b` flows into `a` here\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "abec468c9ea3e185cc09b64212458949b2d79ccf", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.mir.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.mir.stderr?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -0,0 +1,33 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-free-region-ordering-caller.rs:11:12\n+   |\n+LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |          --  -- lifetime `'b` defined here\n+   |          |\n+   |          lifetime `'a` defined here\n+LL |     let z: Option<&'b &'a usize> = None;//[ast]~ ERROR E0623\n+   |            ^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'b`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/regions-free-region-ordering-caller.rs:17:12\n+   |\n+LL | fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |          --  -- lifetime `'b` defined here\n+   |          |\n+   |          lifetime `'a` defined here\n+LL |     let y: Paramd<'a> = Paramd { x: a };\n+LL |     let z: Option<&'b Paramd<'a>> = None;//[ast]~ ERROR E0623\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'b`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/regions-free-region-ordering-caller.rs:22:12\n+   |\n+LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |          --  -- lifetime `'b` defined here\n+   |          |\n+   |          lifetime `'a` defined here\n+LL |     let z: Option<&'a &'b usize> = None;//[ast]~ ERROR E0623\n+   |            ^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "621e6e78b4650861e757420fcffa91f498075a9b", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.rs?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -2,19 +2,25 @@\n // than the thing it points at and ensure that they result in\n // errors. See also regions-free-region-ordering-callee.rs\n \n+// revisions: ast mir\n+//[mir]compile-flags: -Z borrowck=mir\n+\n struct Paramd<'a> { x: &'a usize }\n \n fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n-    let z: Option<&'b &'a usize> = None;//~ ERROR E0623\n+    let z: Option<&'b &'a usize> = None;//[ast]~ ERROR E0623\n+    //[mir]~^ ERROR lifetime may not live long enough\n }\n \n fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n     let y: Paramd<'a> = Paramd { x: a };\n-    let z: Option<&'b Paramd<'a>> = None;//~ ERROR E0623\n+    let z: Option<&'b Paramd<'a>> = None;//[ast]~ ERROR E0623\n+    //[mir]~^ ERROR lifetime may not live long enough\n }\n \n fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n-    let z: Option<&'a &'b usize> = None;//~ ERROR E0623\n+    let z: Option<&'a &'b usize> = None;//[ast]~ ERROR E0623\n+    //[mir]~^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "539343a68294f35415ce28a8e18a50f3bc8c63d4", "filename": "src/test/ui/regions/regions-free-region-ordering-caller1.nll.stderr", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.nll.stderr?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -12,6 +12,21 @@ LL |     let z: &'a & usize = &(&y);\n LL | }\n    | - temporary value is freed at the end of this statement\n \n-error: aborting due to previous error\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/regions-free-region-ordering-caller1.rs:9:27\n+   |\n+LL | fn call1<'a>(x: &'a usize) {\n+   |          -- lifetime `'a` defined here\n+...\n+LL |     let z: &'a & usize = &(&y);\n+   |            -----------    ^^^^ borrowed value does not live long enough\n+   |            |\n+   |            type annotation requires that `y` is borrowed for `'a`\n+...\n+LL | }\n+   | - `y` dropped here while still borrowed\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0716`.\n+Some errors occurred: E0597, E0716.\n+For more information about an error, try `rustc --explain E0597`."}, {"sha": "d83301840088d509b067d7513d0748cd1a9de902", "filename": "src/test/ui/regions/regions-outlives-projection-container-hrtb.ast.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.ast.stderr?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -0,0 +1,37 @@\n+error[E0491]: in type `&'a WithHrAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:35:12\n+   |\n+LL |     let _: &'a WithHrAssoc<TheType<'b>> = loop { };\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 32:15\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:32:15\n+   |\n+LL | fn with_assoc<'a,'b>() {\n+   |               ^^\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 32:18\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:32:18\n+   |\n+LL | fn with_assoc<'a,'b>() {\n+   |                  ^^\n+\n+error[E0491]: in type `&'a WithHrAssocSub<TheType<'b>>`, reference has a longer lifetime than the data it references\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:57:12\n+   |\n+LL |     let _: &'a WithHrAssocSub<TheType<'b>> = loop { };\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 53:19\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:53:19\n+   |\n+LL | fn with_assoc_sub<'a,'b>() {\n+   |                   ^^\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 53:22\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:53:22\n+   |\n+LL | fn with_assoc_sub<'a,'b>() {\n+   |                      ^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0491`."}, {"sha": "5028663ba6d04f6de8c2815ec513fad25fd1f9a1", "filename": "src/test/ui/regions/regions-outlives-projection-container-hrtb.mir.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.mir.stderr?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:35:12\n+   |\n+LL | fn with_assoc<'a,'b>() {\n+   |               -- -- lifetime `'b` defined here\n+   |               |\n+   |               lifetime `'a` defined here\n+...\n+LL |     let _: &'a WithHrAssoc<TheType<'b>> = loop { };\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:57:12\n+   |\n+LL | fn with_assoc_sub<'a,'b>() {\n+   |                   -- -- lifetime `'b` defined here\n+   |                   |\n+   |                   lifetime `'a` defined here\n+...\n+LL |     let _: &'a WithHrAssocSub<TheType<'b>> = loop { };\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "2871d962c42c9d13cd215a945f7f2ca7e461e316", "filename": "src/test/ui/regions/regions-outlives-projection-container-hrtb.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.rs?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -1,6 +1,9 @@\n // Test that structs with higher-ranked where clauses don't generate\n // \"outlives\" requirements. Issue #22246.\n \n+// revisions: ast mir\n+//[mir]compile-flags: -Z borrowck=mir\n+\n #![allow(dead_code)]\n \n \n@@ -30,7 +33,8 @@ fn with_assoc<'a,'b>() {\n     // We get an error because 'b:'a does not hold:\n \n     let _: &'a WithHrAssoc<TheType<'b>> = loop { };\n-    //~^ ERROR reference has a longer lifetime\n+    //[ast]~^ ERROR reference has a longer lifetime\n+    //[mir]~^^ ERROR lifetime may not live long enough\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -51,7 +55,8 @@ fn with_assoc_sub<'a,'b>() {\n     // below to be well-formed, it is not related to the HR relation.\n \n     let _: &'a WithHrAssocSub<TheType<'b>> = loop { };\n-    //~^ ERROR reference has a longer lifetime\n+    //[ast]~^ ERROR reference has a longer lifetime\n+    //[mir]~^^ ERROR lifetime may not live long enough\n }\n \n "}, {"sha": "9e31065ca4eec52842b24537adc67c9be3ac8ed7", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.ast.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.ast.stderr?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -0,0 +1,20 @@\n+error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n+  --> $DIR/regions-outlives-projection-container-wc.rs:37:12\n+   |\n+LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 31:15\n+  --> $DIR/regions-outlives-projection-container-wc.rs:31:15\n+   |\n+LL | fn with_assoc<'a,'b>() {\n+   |               ^^\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 31:18\n+  --> $DIR/regions-outlives-projection-container-wc.rs:31:18\n+   |\n+LL | fn with_assoc<'a,'b>() {\n+   |                  ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0491`."}, {"sha": "880fe17b740e4b508c68f9e508c2eace409e38d1", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.mir.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.mir.stderr?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -0,0 +1,13 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-outlives-projection-container-wc.rs:37:12\n+   |\n+LL | fn with_assoc<'a,'b>() {\n+   |               -- -- lifetime `'b` defined here\n+   |               |\n+   |               lifetime `'a` defined here\n+...\n+LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "37622211327c0ab515d430934b047edd8290f5d1", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.rs?ref=65fe2516346f10dc8d670e9fdfbd4e4f99a5b34b", "patch": "@@ -3,6 +3,9 @@\n // outlive the location in which the type appears, even when the\n // constraint is in a where clause not a bound. Issue #22246.\n \n+// revisions: ast mir\n+//[mir]compile-flags: -Z borrowck=mir\n+\n #![allow(dead_code)]\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -32,7 +35,8 @@ fn with_assoc<'a,'b>() {\n     // which is &'b (), must outlive 'a.\n \n     let _: &'a WithAssoc<TheType<'b>> = loop { };\n-    //~^ ERROR reference has a longer lifetime\n+    //[ast]~^ ERROR reference has a longer lifetime\n+    //[mir]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}]}