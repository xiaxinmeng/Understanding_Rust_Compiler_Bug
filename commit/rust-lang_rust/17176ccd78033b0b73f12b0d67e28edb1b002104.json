{"sha": "17176ccd78033b0b73f12b0d67e28edb1b002104", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MTc2Y2NkNzgwMzNiMGI3M2YxMmIwZDY3ZTI4ZWRiMWIwMDIxMDQ=", "commit": {"author": {"name": "0yoyoyo", "email": "60439919+0yoyoyo@users.noreply.github.com", "date": "2021-02-21T09:38:20Z"}, "committer": {"name": "0yoyoyo", "email": "60439919+0yoyoyo@users.noreply.github.com", "date": "2021-02-21T09:38:20Z"}, "message": "Add indication of anonymous lifetime position", "tree": {"sha": "d84bf0476e704a28286652524c222d7115e118a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d84bf0476e704a28286652524c222d7115e118a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17176ccd78033b0b73f12b0d67e28edb1b002104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17176ccd78033b0b73f12b0d67e28edb1b002104", "html_url": "https://github.com/rust-lang/rust/commit/17176ccd78033b0b73f12b0d67e28edb1b002104", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17176ccd78033b0b73f12b0d67e28edb1b002104/comments", "author": {"login": "0yoyoyo", "id": 60439919, "node_id": "MDQ6VXNlcjYwNDM5OTE5", "avatar_url": "https://avatars.githubusercontent.com/u/60439919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0yoyoyo", "html_url": "https://github.com/0yoyoyo", "followers_url": "https://api.github.com/users/0yoyoyo/followers", "following_url": "https://api.github.com/users/0yoyoyo/following{/other_user}", "gists_url": "https://api.github.com/users/0yoyoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/0yoyoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0yoyoyo/subscriptions", "organizations_url": "https://api.github.com/users/0yoyoyo/orgs", "repos_url": "https://api.github.com/users/0yoyoyo/repos", "events_url": "https://api.github.com/users/0yoyoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/0yoyoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "0yoyoyo", "id": 60439919, "node_id": "MDQ6VXNlcjYwNDM5OTE5", "avatar_url": "https://avatars.githubusercontent.com/u/60439919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0yoyoyo", "html_url": "https://github.com/0yoyoyo", "followers_url": "https://api.github.com/users/0yoyoyo/followers", "following_url": "https://api.github.com/users/0yoyoyo/following{/other_user}", "gists_url": "https://api.github.com/users/0yoyoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/0yoyoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0yoyoyo/subscriptions", "organizations_url": "https://api.github.com/users/0yoyoyo/orgs", "repos_url": "https://api.github.com/users/0yoyoyo/repos", "events_url": "https://api.github.com/users/0yoyoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/0yoyoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fece59b56cbeda4faa7c148ad58569c2bd52a52d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fece59b56cbeda4faa7c148ad58569c2bd52a52d", "html_url": "https://github.com/rust-lang/rust/commit/fece59b56cbeda4faa7c148ad58569c2bd52a52d"}], "stats": {"total": 93, "additions": 43, "deletions": 50}, "files": [{"sha": "f4eb861d61daebd6805dffc8c6148526e5044776", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17176ccd78033b0b73f12b0d67e28edb1b002104/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17176ccd78033b0b73f12b0d67e28edb1b002104/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=17176ccd78033b0b73f12b0d67e28edb1b002104", "patch": "@@ -50,6 +50,7 @@ use super::region_constraints::GenericKind;\n use super::{InferCtxt, RegionVariableOrigin, SubregionOrigin, TypeTrace, ValuePairs};\n \n use crate::infer;\n+use crate::infer::error_reporting::nice_region_error::find_anon_type::find_anon_type;\n use crate::traits::error_reporting::report_object_safety_error;\n use crate::traits::{\n     IfExpressionCause, MatchExpressionArmCause, ObligationCause, ObligationCauseCode,\n@@ -179,7 +180,14 @@ fn msg_span_from_early_bound_and_free_regions(\n         }\n         ty::ReFree(ref fr) => match fr.bound_region {\n             ty::BrAnon(idx) => {\n-                (format!(\"the anonymous lifetime #{} defined on\", idx + 1), tcx.hir().span(node))\n+                if let Some((ty, _)) = find_anon_type(tcx, region, &fr.bound_region) {\n+                    (\"the anonymous lifetime defined on\".to_string(), ty.span)\n+                } else {\n+                    (\n+                        format!(\"the anonymous lifetime #{} defined on\", idx + 1),\n+                        tcx.hir().span(node),\n+                    )\n+                }\n             }\n             _ => (\n                 format!(\"the lifetime `{}` as defined on\", region),"}, {"sha": "7e07a5775bb12f444d805f380d2ad5ee0cf1ecde", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17176ccd78033b0b73f12b0d67e28edb1b002104/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17176ccd78033b0b73f12b0d67e28edb1b002104/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr?ref=17176ccd78033b0b73f12b0d67e28edb1b002104", "patch": "@@ -7,11 +7,11 @@ LL | |         t.test();\n LL | |     });\n    | |______^\n    |\n-note: the parameter type `T` must be valid for the anonymous lifetime #2 defined on the function body at 19:1...\n-  --> $DIR/missing-lifetimes-in-signature-2.rs:19:1\n+note: the parameter type `T` must be valid for the anonymous lifetime defined on the function body at 19:24...\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:19:24\n    |\n LL | fn func<T: Test>(foo: &Foo, t: T) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^\n \n error: aborting due to previous error\n "}, {"sha": "4e7d52978400f710952d347a2700cd472d8ce949", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17176ccd78033b0b73f12b0d67e28edb1b002104/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17176ccd78033b0b73f12b0d67e28edb1b002104/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr?ref=17176ccd78033b0b73f12b0d67e28edb1b002104", "patch": "@@ -6,11 +6,11 @@ LL | fn func<T: Test>(foo: &Foo, t: T) {\n LL |     foo.bar(move |_| {\n    |         ^^^\n    |\n-note: the parameter type `T` must be valid for the anonymous lifetime #2 defined on the function body at 19:1...\n-  --> $DIR/missing-lifetimes-in-signature-2.rs:19:1\n+note: the parameter type `T` must be valid for the anonymous lifetime defined on the function body at 19:24...\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:19:24\n    |\n LL | fn func<T: Test>(foo: &Foo, t: T) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^\n note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature-2.rs:20:13: 23:6]` will meet its required lifetime bounds\n   --> $DIR/missing-lifetimes-in-signature-2.rs:20:9\n    |"}, {"sha": "b509610b89e2699f1626053e30bf78944803e041", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.nll.stderr", "status": "modified", "additions": 16, "deletions": 25, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/17176ccd78033b0b73f12b0d67e28edb1b002104/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17176ccd78033b0b73f12b0d67e28edb1b002104/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr?ref=17176ccd78033b0b73f12b0d67e28edb1b002104", "patch": "@@ -25,56 +25,47 @@ error[E0311]: the parameter type `G` may not live long enough\n LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                     ^^^^^^^^^^^^^^^^^^\n    |\n-note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the function body at 25:1...\n-  --> $DIR/missing-lifetimes-in-signature.rs:25:1\n-   |\n-LL | / fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n-LL | |\n-LL | | where\n-LL | |     G: Get<T>\n-   | |_____________^\n+note: the parameter type `G` must be valid for the anonymous lifetime defined on the function body at 25:26...\n+  --> $DIR/missing-lifetimes-in-signature.rs:25:26\n+   |\n+LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |                          ^^^^^^\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:47:45\n    |\n LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                             ^^^^^^^^^^^^^^^^^^\n    |\n-note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the function body at 47:1...\n-  --> $DIR/missing-lifetimes-in-signature.rs:47:1\n+note: the parameter type `G` must be valid for the anonymous lifetime defined on the function body at 47:34...\n+  --> $DIR/missing-lifetimes-in-signature.rs:47:34\n    |\n-LL | / fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n-LL | |\n-LL | | where\n-LL | |     G: Get<T>\n-   | |_____________^\n+LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |                                  ^^^^^^\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:59:58\n    |\n LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n    |                                                          ^^^^^^^^^^^^^^^^^^\n    |\n-note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the method body at 59:5...\n-  --> $DIR/missing-lifetimes-in-signature.rs:59:5\n+note: the parameter type `G` must be valid for the anonymous lifetime defined on the method body at 59:47...\n+  --> $DIR/missing-lifetimes-in-signature.rs:59:47\n    |\n LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                               ^^^^^^\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:68:45\n    |\n LL | fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n    |                                             ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the function body at 68:1...\n-  --> $DIR/missing-lifetimes-in-signature.rs:68:1\n+note: the parameter type `G` must be valid for the anonymous lifetime defined on the function body at 68:34...\n+  --> $DIR/missing-lifetimes-in-signature.rs:68:34\n    |\n-LL | / fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n-LL | |\n-LL | | where\n-LL | |     G: Get<T>\n-   | |_____________^\n+LL | fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n+   |                                  ^^^^^^\n \n error[E0621]: explicit lifetime required in the type of `dest`\n   --> $DIR/missing-lifetimes-in-signature.rs:73:5"}, {"sha": "789fff7acc29bfca9d9bab28a35aff24c9d62a14", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/17176ccd78033b0b73f12b0d67e28edb1b002104/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17176ccd78033b0b73f12b0d67e28edb1b002104/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=17176ccd78033b0b73f12b0d67e28edb1b002104", "patch": "@@ -33,14 +33,11 @@ error[E0311]: the parameter type `G` may not live long enough\n LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                     ^^^^^^^^^^^^^^^^^^\n    |\n-note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the function body at 25:1...\n-  --> $DIR/missing-lifetimes-in-signature.rs:25:1\n-   |\n-LL | / fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n-LL | |\n-LL | | where\n-LL | |     G: Get<T>\n-   | |_____________^\n+note: the parameter type `G` must be valid for the anonymous lifetime defined on the function body at 25:26...\n+  --> $DIR/missing-lifetimes-in-signature.rs:25:26\n+   |\n+LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |                          ^^^^^^\n note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:30:5: 32:6]` will meet its required lifetime bounds\n   --> $DIR/missing-lifetimes-in-signature.rs:25:37\n    |\n@@ -57,14 +54,11 @@ error[E0311]: the parameter type `G` may not live long enough\n LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                             ^^^^^^^^^^^^^^^^^^\n    |\n-note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the function body at 47:1...\n-  --> $DIR/missing-lifetimes-in-signature.rs:47:1\n+note: the parameter type `G` must be valid for the anonymous lifetime defined on the function body at 47:34...\n+  --> $DIR/missing-lifetimes-in-signature.rs:47:34\n    |\n-LL | / fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n-LL | |\n-LL | | where\n-LL | |     G: Get<T>\n-   | |_____________^\n+LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |                                  ^^^^^^\n note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:52:5: 54:6]` will meet its required lifetime bounds\n   --> $DIR/missing-lifetimes-in-signature.rs:47:45\n    |\n@@ -81,11 +75,11 @@ error[E0311]: the parameter type `G` may not live long enough\n LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n    |                                                          ^^^^^^^^^^^^^^^^^^\n    |\n-note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the method body at 59:5...\n-  --> $DIR/missing-lifetimes-in-signature.rs:59:5\n+note: the parameter type `G` must be valid for the anonymous lifetime defined on the method body at 59:47...\n+  --> $DIR/missing-lifetimes-in-signature.rs:59:47\n    |\n LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                               ^^^^^^\n note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:61:9: 63:10]` will meet its required lifetime bounds\n   --> $DIR/missing-lifetimes-in-signature.rs:59:58\n    |"}]}