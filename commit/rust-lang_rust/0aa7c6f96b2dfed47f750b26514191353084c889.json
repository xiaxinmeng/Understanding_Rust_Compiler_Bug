{"sha": "0aa7c6f96b2dfed47f750b26514191353084c889", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYTdjNmY5NmIyZGZlZDQ3Zjc1MGIyNjUxNDE5MTM1MzA4NGM4ODk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-26T12:17:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-26T12:17:45Z"}, "message": "Rollup merge of #65773 - estebank:sugg-whitespace, r=Centril\n\nIncrease spacing for suggestions in diagnostics\n\nMake the spacing between the code snippet and verbose structured\nsuggestions consistent with note and help messages.\n\nr? @Centril", "tree": {"sha": "fcfa0324ebda5d2726ae5788e41e198445f7223b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcfa0324ebda5d2726ae5788e41e198445f7223b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0aa7c6f96b2dfed47f750b26514191353084c889", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdtDlpCRBK7hj4Ov3rIwAAdHIIABW2cC9nLxFHe0mozPXnfoSN\ngfrq0gx8Y0Req0Cht5ltTg7Sgdptw594jPe88P0IN1/vTEHlGyvbF9cpVceS34uG\npCK6NnPm6YmX4Q6kJuBLXxyCNEv1jC7eUl3ODGIMA+FguiwavLRtEuSV+lYf/3nn\nlC2DsYgnKq8LXwp80rzu0LJ9FvXJMgBcCjF1gslADW0AdB1kseUqk8hQGbtDBAe6\nWJKq9HdxJkODmVc8Zeevr5MjbJLpNPPYMk1PlimNRHQ0wB61ayNkCxqth0yDK4uz\nms3UR/TEP1+DYEcrLuxAgIOYkvrGKT2i9hjEcsXpIt9Ak/IplqiVDxkdamfTO6Y=\n=+4hh\n-----END PGP SIGNATURE-----\n", "payload": "tree fcfa0324ebda5d2726ae5788e41e198445f7223b\nparent 78a4f8c8ce66cda5f17a7cbf2bd7d772d2f8cf8a\nparent 508d0326475e0ceef2ea5755a03cacf181b34d7c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1572092265 +0200\ncommitter GitHub <noreply@github.com> 1572092265 +0200\n\nRollup merge of #65773 - estebank:sugg-whitespace, r=Centril\n\nIncrease spacing for suggestions in diagnostics\n\nMake the spacing between the code snippet and verbose structured\nsuggestions consistent with note and help messages.\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa7c6f96b2dfed47f750b26514191353084c889", "html_url": "https://github.com/rust-lang/rust/commit/0aa7c6f96b2dfed47f750b26514191353084c889", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0aa7c6f96b2dfed47f750b26514191353084c889/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78a4f8c8ce66cda5f17a7cbf2bd7d772d2f8cf8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/78a4f8c8ce66cda5f17a7cbf2bd7d772d2f8cf8a", "html_url": "https://github.com/rust-lang/rust/commit/78a4f8c8ce66cda5f17a7cbf2bd7d772d2f8cf8a"}, {"sha": "508d0326475e0ceef2ea5755a03cacf181b34d7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/508d0326475e0ceef2ea5755a03cacf181b34d7c", "html_url": "https://github.com/rust-lang/rust/commit/508d0326475e0ceef2ea5755a03cacf181b34d7c"}], "stats": {"total": 758, "additions": 744, "deletions": 14}, "files": [{"sha": "2a7f9ad25def00afd6a4e9291b9a19dd801dea52", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -1583,27 +1583,26 @@ impl EmitterWriter {\n         Ok(())\n     }\n \n-    fn emit_messages_default(&mut self,\n-                             level: &Level,\n-                             message: &[(String, Style)],\n-                             code: &Option<DiagnosticId>,\n-                             span: &MultiSpan,\n-                             children: &[SubDiagnostic],\n-                             suggestions: &[CodeSuggestion]) {\n+    fn emit_messages_default(\n+        &mut self,\n+        level: &Level,\n+        message: &[(String, Style)],\n+        code: &Option<DiagnosticId>,\n+        span: &MultiSpan,\n+        children: &[SubDiagnostic],\n+        suggestions: &[CodeSuggestion],\n+    ) {\n         let max_line_num_len = if self.ui_testing {\n             ANONYMIZED_LINE_NUM.len()\n         } else {\n             self.get_max_line_num(span, children).to_string().len()\n         };\n \n-        match self.emit_message_default(span,\n-                                        message,\n-                                        code,\n-                                        level,\n-                                        max_line_num_len,\n-                                        false) {\n+        match self.emit_message_default(span, message, code, level, max_line_num_len, false) {\n             Ok(()) => {\n-                if !children.is_empty() {\n+                if !children.is_empty() || suggestions.iter().any(|s| {\n+                    s.style != SuggestionStyle::CompletelyHidden\n+                }) {\n                     let mut buffer = StyledBuffer::new();\n                     if !self.short_message {\n                         draw_col_separator_no_space(&mut buffer, 0, max_line_num_len + 1);"}, {"sha": "9ee3ff57fb5f0790803553116fb0b53a7c597f6c", "filename": "src/test/rustdoc-ui/intra-links-ambiguity.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Frustdoc-ui%2Fintra-links-ambiguity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Frustdoc-ui%2Fintra-links-ambiguity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-ambiguity.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -23,6 +23,7 @@ error: `ambiguous` is both a struct and a function\n    |\n LL | /// [ambiguous] is ambiguous.\n    |      ^^^^^^^^^ ambiguous link\n+   |\n help: to link to the struct, prefix with the item type\n    |\n LL | /// [struct@ambiguous] is ambiguous.\n@@ -37,6 +38,7 @@ error: `multi_conflict` is a struct, a function, and a macro\n    |\n LL | /// [`multi_conflict`] is a three-way conflict.\n    |      ^^^^^^^^^^^^^^^^ ambiguous link\n+   |\n help: to link to the struct, prefix with the item type\n    |\n LL | /// [`struct@multi_conflict`] is a three-way conflict.\n@@ -55,6 +57,7 @@ error: `type_and_value` is both a module and a constant\n    |\n LL | /// Ambiguous [type_and_value].\n    |                ^^^^^^^^^^^^^^ ambiguous link\n+   |\n help: to link to the module, prefix with the item type\n    |\n LL | /// Ambiguous [module@type_and_value].\n@@ -69,6 +72,7 @@ error: `foo::bar` is both an enum and a function\n    |\n LL | /// Ambiguous non-implied shortcut link [`foo::bar`].\n    |                                          ^^^^^^^^^^ ambiguous link\n+   |\n help: to link to the enum, prefix with the item type\n    |\n LL | /// Ambiguous non-implied shortcut link [`enum@foo::bar`]."}, {"sha": "8ec4338e13f96479dfe257e09b8eef4e43a10b8c", "filename": "src/test/rustdoc-ui/invalid-syntax.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -24,6 +24,7 @@ LL |   /// ```\n LL | | /// \\__________pkt->size___________/          \\_result->size_/ \\__pkt->size__/\n LL | | /// ```\n    | |_______^\n+   |\n help: mark blocks that do not contain Rust code as text\n    |\n LL | /// ```text\n@@ -34,6 +35,7 @@ error: unknown start of token: `\n   |\n 3 |    |     ^^^^^^ did you mean `baz::foobar`?\n   |                              ^\n+  |\n help: Unicode character '`' (Grave Accent) looks like ''' (Single Quote), but it is not\n   |\n 3 |    |     ^^^^^^ did you mean 'baz::foobar`?\n@@ -44,6 +46,7 @@ error: unknown start of token: `\n   |\n 3 |    |     ^^^^^^ did you mean `baz::foobar`?\n   |                                          ^\n+  |\n help: Unicode character '`' (Grave Accent) looks like ''' (Single Quote), but it is not\n   |\n 3 |    |     ^^^^^^ did you mean `baz::foobar'?\n@@ -59,6 +62,7 @@ LL | | /// LL | use foobar::Baz;\n LL | | ///    |     ^^^^^^ did you mean `baz::foobar`?\n LL | | /// ```\n    | |_______^\n+   |\n help: mark blocks that do not contain Rust code as text\n    |\n LL | /// ```text\n@@ -78,6 +82,7 @@ LL |   /// ```\n LL | | /// \\_\n LL | | /// ```\n    | |_______^\n+   |\n help: mark blocks that do not contain Rust code as text\n    |\n LL | /// ```text\n@@ -117,6 +122,7 @@ error: unknown start of token: `\n   |\n 1 | ```\n   | ^\n+  |\n help: Unicode character '`' (Grave Accent) looks like ''' (Single Quote), but it is not\n   |\n 1 | '``\n@@ -127,6 +133,7 @@ error: unknown start of token: `\n   |\n 1 | ```\n   |  ^\n+  |\n help: Unicode character '`' (Grave Accent) looks like ''' (Single Quote), but it is not\n   |\n 1 | `'`\n@@ -137,6 +144,7 @@ error: unknown start of token: `\n   |\n 1 | ```\n   |   ^\n+  |\n help: Unicode character '`' (Grave Accent) looks like ''' (Single Quote), but it is not\n   |\n 1 | ``'\n@@ -196,6 +204,7 @@ LL | | ///\n LL | | ///\n LL | | /// ```\n    | |_______^\n+   |\n help: mark blocks that do not contain Rust code as text\n    |\n LL | /// ```text\n@@ -236,6 +245,7 @@ error: unknown start of token: `\n   |\n 1 | ```\n   | ^\n+  |\n help: Unicode character '`' (Grave Accent) looks like ''' (Single Quote), but it is not\n   |\n 1 | '``\n@@ -264,6 +274,7 @@ error: unknown start of token: `\n   |\n 3 |    |     ^^^^^^ did you mean `baz::foobar`?\n   |                              ^\n+  |\n help: Unicode character '`' (Grave Accent) looks like ''' (Single Quote), but it is not\n   |\n 3 |    |     ^^^^^^ did you mean 'baz::foobar`?"}, {"sha": "246c745cd3385112ca318ad3349eaa8a6489ce10", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     f1(2i32, 4i32);\n    |              ^^^^ expected u32, found i32\n+   |\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n LL |     f1(2i32, 4u32);\n@@ -43,6 +44,7 @@ error[E0308]: mismatched types\n    |\n LL |     let _: i32 = f2(2i32);\n    |                  ^^^^^^^^ expected i32, found u32\n+   |\n help: you can convert an `u32` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     let _: i32 = f2(2i32).try_into().unwrap();"}, {"sha": "05d543a7e486d44ff8ee2869e52255ef3dc5b05d", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error-in-non-macro-position.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `await`\n    |\n LL |     pub mod await {\n    |             ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     pub mod r#await {\n@@ -13,6 +14,7 @@ error: expected identifier, found keyword `await`\n    |\n LL |         pub struct await;\n    |                    ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |         pub struct r#await;\n@@ -23,6 +25,7 @@ error: expected identifier, found keyword `await`\n    |\n LL | use self::outer_mod::await::await;\n    |                      ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | use self::outer_mod::r#await::await;\n@@ -33,6 +36,7 @@ error: expected identifier, found keyword `await`\n    |\n LL | use self::outer_mod::await::await;\n    |                             ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | use self::outer_mod::await::r#await;\n@@ -43,6 +47,7 @@ error: expected identifier, found keyword `await`\n    |\n LL | struct Foo { await: () }\n    |              ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | struct Foo { r#await: () }\n@@ -53,6 +58,7 @@ error: expected identifier, found keyword `await`\n    |\n LL | impl Foo { fn await() {} }\n    |               ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | impl Foo { fn r#await() {} }\n@@ -63,6 +69,7 @@ error: expected identifier, found keyword `await`\n    |\n LL | macro_rules! await {\n    |              ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | macro_rules! r#await {"}, {"sha": "d44d51b8fd15d11d82ecac741b01c11623a36612", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `await`\n    |\n LL |     pub mod await {\n    |             ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     pub mod r#await {\n@@ -13,6 +14,7 @@ error: expected identifier, found keyword `await`\n    |\n LL |         pub struct await;\n    |                    ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |         pub struct r#await;\n@@ -23,6 +25,7 @@ error: expected identifier, found keyword `await`\n    |\n LL | use self::outer_mod::await::await;\n    |                      ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | use self::outer_mod::r#await::await;\n@@ -33,6 +36,7 @@ error: expected identifier, found keyword `await`\n    |\n LL | use self::outer_mod::await::await;\n    |                             ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | use self::outer_mod::await::r#await;\n@@ -43,6 +47,7 @@ error: expected identifier, found keyword `await`\n    |\n LL | macro_rules! await { () => {}; }\n    |              ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | macro_rules! r#await { () => {}; }"}, {"sha": "95ded537ab35bcff071d1b03b8fe52a429dbdacb", "filename": "src/test/ui/async-await/no-const-async.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `async`\n    |\n LL | pub const async fn x() {}\n    |           ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | pub const r#async fn x() {}"}, {"sha": "e015010da13969e8b520cba2ff1e2af75bbe2dc1", "filename": "src/test/ui/bad/bad-crate-name.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fbad%2Fbad-crate-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fbad%2Fbad-crate-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-crate-name.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: crate name using dashes are not valid in `extern crate` statements\n    |\n LL | extern crate krate-name-here;\n    |              ^^^^^^^^^^^^^^^ dash-separated idents are not valid\n+   |\n help: if the original crate name uses dashes you need to use underscores in the code\n    |\n LL | extern crate krate_name_here;"}, {"sha": "ad5e206a9a1be1ccfaa4e4d4d9d82e2687f886d5", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -33,6 +33,7 @@ LL |         &mut [_a,\n    |               |\n    |               data moved here\n    |               move occurs because `_a` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   |\n help: consider removing the `&mut`\n    |\n LL |         [_a,\n@@ -64,6 +65,7 @@ LL |          _b] => {}\n    |          |\n    |          data moved here\n    |          move occurs because `_b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   |\n help: consider removing the `&mut`\n    |\n LL |         ["}, {"sha": "681d0ffea8be8daa1663fefe210e129c47797f09", "filename": "src/test/ui/class-missing-self.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fclass-missing-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fclass-missing-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclass-missing-self.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -9,6 +9,7 @@ error[E0425]: cannot find function `sleep` in this scope\n    |\n LL |       sleep();\n    |       ^^^^^ not found in this scope\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use std::thread::sleep;"}, {"sha": "79ba93130a73aa003ccc79c92ccbbdb09baca41c", "filename": "src/test/ui/confuse-field-and-method/issue-18343.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -6,6 +6,7 @@ LL | struct Obj<F> where F: FnMut() -> u32 {\n ...\n LL |     o.closure();\n    |       ^^^^^^^ field, not a method\n+   |\n help: to call the function stored in `closure`, surround the field access with parentheses\n    |\n LL |     (o.closure)();"}, {"sha": "a44b97184153832988234b9070c5e25e5035ad5f", "filename": "src/test/ui/confuse-field-and-method/issue-2392.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -6,6 +6,7 @@ LL | struct Obj<F> where F: FnOnce() -> u32 {\n ...\n LL |     o_closure.closure();\n    |               ^^^^^^^ field, not a method\n+   |\n help: to call the function stored in `closure`, surround the field access with parentheses\n    |\n LL |     (o_closure.closure)();\n@@ -30,6 +31,7 @@ LL | struct Obj<F> where F: FnOnce() -> u32 {\n ...\n LL |     o_func.closure();\n    |            ^^^^^^^ field, not a method\n+   |\n help: to call the function stored in `closure`, surround the field access with parentheses\n    |\n LL |     (o_func.closure)();\n@@ -43,6 +45,7 @@ LL | struct BoxedObj {\n ...\n LL |     boxed_fn.boxed_closure();\n    |              ^^^^^^^^^^^^^ field, not a method\n+   |\n help: to call the function stored in `boxed_closure`, surround the field access with parentheses\n    |\n LL |     (boxed_fn.boxed_closure)();\n@@ -56,6 +59,7 @@ LL | struct BoxedObj {\n ...\n LL |     boxed_closure.boxed_closure();\n    |                   ^^^^^^^^^^^^^ field, not a method\n+   |\n help: to call the function stored in `boxed_closure`, surround the field access with parentheses\n    |\n LL |     (boxed_closure.boxed_closure)();\n@@ -69,6 +73,7 @@ LL | struct Obj<F> where F: FnOnce() -> u32 {\n ...\n LL |     w.wrap.closure();\n    |            ^^^^^^^ field, not a method\n+   |\n help: to call the function stored in `closure`, surround the field access with parentheses\n    |\n LL |     (w.wrap.closure)();\n@@ -93,6 +98,7 @@ LL | struct Obj<F> where F: FnOnce() -> u32 {\n ...\n LL |     check_expression().closure();\n    |                        ^^^^^^^ field, not a method\n+   |\n help: to call the function stored in `closure`, surround the field access with parentheses\n    |\n LL |     (check_expression().closure)();\n@@ -106,6 +112,7 @@ LL | struct FuncContainer {\n ...\n LL |             (*self.container).f1(1);\n    |                               ^^ field, not a method\n+   |\n help: to call the function stored in `f1`, surround the field access with parentheses\n    |\n LL |             ((*self.container).f1)(1);\n@@ -119,6 +126,7 @@ LL | struct FuncContainer {\n ...\n LL |             (*self.container).f2(1);\n    |                               ^^ field, not a method\n+   |\n help: to call the function stored in `f2`, surround the field access with parentheses\n    |\n LL |             ((*self.container).f2)(1);\n@@ -132,6 +140,7 @@ LL | struct FuncContainer {\n ...\n LL |             (*self.container).f3(1);\n    |                               ^^ field, not a method\n+   |\n help: to call the function stored in `f3`, surround the field access with parentheses\n    |\n LL |             ((*self.container).f3)(1);"}, {"sha": "b2f7894ba0560927ea1e3f7d172fb539b42f021f", "filename": "src/test/ui/confuse-field-and-method/issue-32128.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -6,6 +6,7 @@ LL | struct Example {\n ...\n LL |     demo.example(1);\n    |          ^^^^^^^ field, not a method\n+   |\n help: to call the function stored in `example`, surround the field access with parentheses\n    |\n LL |     (demo.example)(1);"}, {"sha": "af29a9963e1f2eae25a8df363f5a0b429bd2f7f8", "filename": "src/test/ui/confuse-field-and-method/issue-33784.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0599]: no method named `closure` found for type `&Obj<[closure@$DIR/issue\n    |\n LL |     p.closure();\n    |       ^^^^^^^ field, not a method\n+   |\n help: to call the function stored in `closure`, surround the field access with parentheses\n    |\n LL |     (p.closure)();\n@@ -13,6 +14,7 @@ error[E0599]: no method named `fn_ptr` found for type `&&Obj<[closure@$DIR/issue\n    |\n LL |     q.fn_ptr();\n    |       ^^^^^^ field, not a method\n+   |\n help: to call the function stored in `fn_ptr`, surround the field access with parentheses\n    |\n LL |     (q.fn_ptr)();\n@@ -23,6 +25,7 @@ error[E0599]: no method named `c_fn_ptr` found for type `&D` in the current scop\n    |\n LL |     s.c_fn_ptr();\n    |       ^^^^^^^^ field, not a method\n+   |\n help: to call the function stored in `c_fn_ptr`, surround the field access with parentheses\n    |\n LL |     (s.c_fn_ptr)();"}, {"sha": "a2545c8b6f2ace9fa0274f5b8d1f8982ab7af2c2", "filename": "src/test/ui/consts/enum-discr-type-err.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -9,6 +9,7 @@ LL | |     A = F,\n LL | |     B = T,\n LL | | }\n    | |_- in this macro invocation\n+   |\n help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |             $( $v = $s::V.try_into().unwrap(), )*"}, {"sha": "38d222f980d2d08c963a3c71146a945b26986031", "filename": "src/test/ui/crate-in-paths.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fcrate-in-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fcrate-in-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-in-paths.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0425]: cannot find value `Foo` in this scope\n    |\n LL |     Foo;\n    |     ^^^ not found in this scope\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use crate::bar::Foo;"}, {"sha": "a5088a3ee33168adbbaa75b0508fb219c35725f5", "filename": "src/test/ui/deprecation/invalid-literal.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fdeprecation%2Finvalid-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fdeprecation%2Finvalid-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Finvalid-literal.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: malformed `deprecated` attribute input\n    |\n LL | #[deprecated = b\"test\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n help: the following are the possible correct uses\n    |\n LL | #[deprecated]"}, {"sha": "749d1093ccab83246740db429f47a8043da4a967", "filename": "src/test/ui/did_you_mean/issue-40396.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: chained comparison operators require parentheses\n    |\n LL |     (0..13).collect<Vec<i32>>();\n    |                    ^^^^^\n+   |\n help: use `::<...>` instead of `<...>` to specify type arguments\n    |\n LL |     (0..13).collect::<Vec<i32>>();\n@@ -13,6 +14,7 @@ error: chained comparison operators require parentheses\n    |\n LL |     Vec<i32>::new();\n    |        ^^^^^\n+   |\n help: use `::<...>` instead of `<...>` to specify type arguments\n    |\n LL |     Vec::<i32>::new();\n@@ -23,6 +25,7 @@ error: chained comparison operators require parentheses\n    |\n LL |     (0..13).collect<Vec<i32>();\n    |                    ^^^^^\n+   |\n help: use `::<...>` instead of `<...>` to specify type arguments\n    |\n LL |     (0..13).collect::<Vec<i32>();"}, {"sha": "0a2fbe4918f1513e0611838003877f51ff3f4b8e", "filename": "src/test/ui/did_you_mean/issue-43871-enum-instead-of-variant.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0423]: expected function, found enum `Option`\n    |\n LL |     let x = Option(1);\n    |             ^^^^^^\n+   |\n help: try using one of the enum's variants\n    |\n LL |     let x = std::option::Option::None(1);\n@@ -15,6 +16,7 @@ error[E0532]: expected tuple struct/variant, found enum `Option`\n    |\n LL |     if let Option(_) = x {\n    |            ^^^^^^\n+   |\n help: try using one of the enum's variants\n    |\n LL |     if let std::option::Option::None(_) = x {\n@@ -27,6 +29,7 @@ error[E0532]: expected tuple struct/variant, found enum `Example`\n    |\n LL |     if let Example(_) = y {\n    |            ^^^^^^^\n+   |\n help: try using one of the enum's variants\n    |\n LL |     if let Example::Ex(_) = y {\n@@ -45,6 +48,7 @@ error[E0423]: expected function, found enum `ManyVariants`\n    |\n LL |     let z = ManyVariants();\n    |             ^^^^^^^^^^^^\n+   |\n help: try using one of the enum's variants\n    |\n LL |     let z = ManyVariants::One();"}, {"sha": "705c90985d547f0a851edd8d7970380cb8d31cbf", "filename": "src/test/ui/did_you_mean/issue-48492-tuple-destructure-missing-parens.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-48492-tuple-destructure-missing-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-48492-tuple-destructure-missing-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-48492-tuple-destructure-missing-parens.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: unexpected `,` in pattern\n    |\n LL |     while let b1, b2, b3 = reading_frame.next().expect(\"there should be a start codon\") {\n    |                 ^\n+   |\n help: try adding parentheses to match on a tuple..\n    |\n LL |     while let (b1, b2, b3) = reading_frame.next().expect(\"there should be a start codon\") {\n@@ -17,6 +18,7 @@ error: unexpected `,` in pattern\n    |\n LL |     if let b1, b2, b3 = reading_frame.next().unwrap() {\n    |              ^\n+   |\n help: try adding parentheses to match on a tuple..\n    |\n LL |     if let (b1, b2, b3) = reading_frame.next().unwrap() {\n@@ -31,6 +33,7 @@ error: unexpected `,` in pattern\n    |\n LL |         Nucleotide::Adenine, Nucleotide::Cytosine, _ => true\n    |                            ^\n+   |\n help: try adding parentheses to match on a tuple..\n    |\n LL |         (Nucleotide::Adenine, Nucleotide::Cytosine, _) => true\n@@ -45,6 +48,7 @@ error: unexpected `,` in pattern\n    |\n LL |     for x, _barr_body in women.iter().map(|woman| woman.allosomes.clone()) {\n    |          ^\n+   |\n help: try adding parentheses to match on a tuple..\n    |\n LL |     for (x, _barr_body) in women.iter().map(|woman| woman.allosomes.clone()) {\n@@ -59,6 +63,7 @@ error: unexpected `,` in pattern\n    |\n LL |     for x, y @ Allosome::Y(_) in men.iter().map(|man| man.allosomes.clone()) {\n    |          ^\n+   |\n help: try adding parentheses to match on a tuple..\n    |\n LL |     for (x, y @ Allosome::Y(_)) in men.iter().map(|man| man.allosomes.clone()) {\n@@ -73,6 +78,7 @@ error: unexpected `,` in pattern\n    |\n LL |     let women, men: (Vec<Genome>, Vec<Genome>) = genomes.iter().cloned()\n    |              ^\n+   |\n help: try adding parentheses to match on a tuple..\n    |\n LL |     let (women, men): (Vec<Genome>, Vec<Genome>) = genomes.iter().cloned()"}, {"sha": "f194b335fdebd548ebe945ea33765f6848dbcae6", "filename": "src/test/ui/did_you_mean/issue-49746-unicode-confusable-in-float-literal-expt.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -9,6 +9,7 @@ error: unknown start of token: \\u{2212}\n    |\n LL | const UNIVERSAL_GRAVITATIONAL_CONSTANT: f64 = 6.674e\u221211; // m\u00b3\u22c5kg\u207b\u00b9\u22c5s\u207b\u00b2\n    |                                                     ^\n+   |\n help: Unicode character '\u2212' (Minus Sign) looks like '-' (Minus/Hyphen), but it is not\n    |\n LL | const UNIVERSAL_GRAVITATIONAL_CONSTANT: f64 = 6.674e-11; // m\u00b3\u22c5kg\u207b\u00b9\u22c5s\u207b\u00b2"}, {"sha": "792b36e00bbfe101e1e628400def7bb1832cb8cb", "filename": "src/test/ui/did_you_mean/issue-56028-there-is-an-enum-variant.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0412]: cannot find type `Set` in this scope\n    |\n LL | fn setup() -> Set { Set }\n    |               ^^^ not found in this scope\n+   |\n help: there is an enum variant `AffixHeart::Set` and 7 others; try using the variant's enum\n    |\n LL | fn setup() -> AffixHeart { Set }\n@@ -20,6 +21,7 @@ error[E0425]: cannot find value `Set` in this scope\n    |\n LL | fn setup() -> Set { Set }\n    |                     ^^^ not found in this scope\n+   |\n help: possible candidates are found in other modules, you can import them into scope\n    |\n LL | use AffixHeart::Set;"}, {"sha": "d9675d65a2a84eef1bda3764c6d3b3493f168c88", "filename": "src/test/ui/discrim/discrim-ill-typed.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |         OhNo = 0_u8,\n    |                ^^^^ expected i8, found u8\n+   |\n help: change the type of the numeric literal from `u8` to `i8`\n    |\n LL |         OhNo = 0_i8,\n@@ -13,6 +14,7 @@ error[E0308]: mismatched types\n    |\n LL |         OhNo = 0_i8,\n    |                ^^^^ expected u8, found i8\n+   |\n help: change the type of the numeric literal from `i8` to `u8`\n    |\n LL |         OhNo = 0_u8,\n@@ -23,6 +25,7 @@ error[E0308]: mismatched types\n    |\n LL |         OhNo = 0_u16,\n    |                ^^^^^ expected i16, found u16\n+   |\n help: change the type of the numeric literal from `u16` to `i16`\n    |\n LL |         OhNo = 0_i16,\n@@ -33,6 +36,7 @@ error[E0308]: mismatched types\n    |\n LL |         OhNo = 0_i16,\n    |                ^^^^^ expected u16, found i16\n+   |\n help: change the type of the numeric literal from `i16` to `u16`\n    |\n LL |         OhNo = 0_u16,\n@@ -43,6 +47,7 @@ error[E0308]: mismatched types\n    |\n LL |         OhNo = 0_u32,\n    |                ^^^^^ expected i32, found u32\n+   |\n help: change the type of the numeric literal from `u32` to `i32`\n    |\n LL |         OhNo = 0_i32,\n@@ -53,6 +58,7 @@ error[E0308]: mismatched types\n    |\n LL |         OhNo = 0_i32,\n    |                ^^^^^ expected u32, found i32\n+   |\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n LL |         OhNo = 0_u32,\n@@ -63,6 +69,7 @@ error[E0308]: mismatched types\n    |\n LL |         OhNo = 0_u64,\n    |                ^^^^^ expected i64, found u64\n+   |\n help: change the type of the numeric literal from `u64` to `i64`\n    |\n LL |         OhNo = 0_i64,\n@@ -73,6 +80,7 @@ error[E0308]: mismatched types\n    |\n LL |         OhNo = 0_i64,\n    |                ^^^^^ expected u64, found i64\n+   |\n help: change the type of the numeric literal from `i64` to `u64`\n    |\n LL |         OhNo = 0_u64,"}, {"sha": "ec1335cfdb072325942fce6a93873800450d6edf", "filename": "src/test/ui/dotdotdot-expr.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fdotdotdot-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fdotdotdot-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdotdotdot-expr.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: unexpected token: `...`\n    |\n LL |     let _redemptive = 1...21;\n    |                        ^^^\n+   |\n help: use `..` for an exclusive range\n    |\n LL |     let _redemptive = 1..21;"}, {"sha": "77eb44c20653fd1e75edf74349df736d47cb71d2", "filename": "src/test/ui/editions/edition-keywords-2018-2015-parsing.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `async`\n    |\n LL |     let mut async = 1;\n    |             ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let mut r#async = 1;\n@@ -13,6 +14,7 @@ error: expected identifier, found keyword `async`\n    |\n LL |     module::async();\n    |             ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     module::r#async();"}, {"sha": "01f9f00e91cf57c9bdaabf4c9cf2b929c9f5e135", "filename": "src/test/ui/editions/edition-keywords-2018-2018-parsing.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `async`\n    |\n LL |     let mut async = 1;\n    |             ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let mut r#async = 1;\n@@ -13,6 +14,7 @@ error: expected identifier, found keyword `async`\n    |\n LL |     module::async();\n    |             ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     module::r#async();"}, {"sha": "50b0e19133e3c26d53e13898b34eea76f50a3af5", "filename": "src/test/ui/empty/empty-struct-unit-expr.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -19,6 +19,7 @@ LL |     let e4 = E::Empty4();\n    |              ^^^^^^^^^--\n    |              |\n    |              call expression requires function\n+   |\n help: `E::Empty4` is a unit variant, you need to write it without the parenthesis\n    |\n LL |     let e4 = E::Empty4;\n@@ -39,6 +40,7 @@ LL |     let xe4 = XE::XEmpty4();\n    |               ^^^^^^^^^^^--\n    |               |\n    |               call expression requires function\n+   |\n help: `XE::XEmpty4` is a unit variant, you need to write it without the parenthesis\n    |\n LL |     let xe4 = XE::XEmpty4;"}, {"sha": "a3610099294dad30d86403c91138084416386a98", "filename": "src/test/ui/error-codes/E0023.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -33,6 +33,7 @@ LL |     Orange((String, String)),\n ...\n LL |         Fruit::Orange(a, b) => {},\n    |         ^^^^^^^^^^^^^^^^^^^ expected 1 field, found 2\n+   |\n help: missing parenthesis\n    |\n LL |         Fruit::Orange((a, b)) => {},\n@@ -46,6 +47,7 @@ LL |     Banana(()),\n ...\n LL |         Fruit::Banana() => {},\n    |         ^^^^^^^^^^^^^^^ expected 1 field, found 0\n+   |\n help: missing parenthesis\n    |\n LL |         Fruit::Banana(()) => {},"}, {"sha": "4e016dbd1c029232bd4dac47d9eed3d740cd3a21", "filename": "src/test/ui/error-codes/E0423.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: struct literals are not allowed here\n    |\n LL |     if let S { x: _x, y: 2 } = S { x: 1, y: 2 } { println!(\"Ok\"); }\n    |                                ^^^^^^^^^^^^^^^^\n+   |\n help: surround the struct literal with parentheses\n    |\n LL |     if let S { x: _x, y: 2 } = (S { x: 1, y: 2 }) { println!(\"Ok\"); }\n@@ -19,6 +20,7 @@ error: struct literals are not allowed here\n    |\n LL |     for _ in std::ops::Range { start: 0, end: 10 } {}\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n help: surround the struct literal with parentheses\n    |\n LL |     for _ in (std::ops::Range { start: 0, end: 10 }) {}"}, {"sha": "c029060c3fbe1df61c39b73fcec5b7708604a15d", "filename": "src/test/ui/error-codes/E0617.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ferror-codes%2FE0617.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ferror-codes%2FE0617.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0617.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -33,6 +33,7 @@ error[E0617]: can't pass `unsafe extern \"C\" fn(*const i8, ...) {printf}` to vari\n    |\n LL |         printf(::std::ptr::null(), printf);\n    |                                    ^^^^^^\n+   |\n help: cast the value to `unsafe extern \"C\" fn(*const i8, ...)`\n    |\n LL |         printf(::std::ptr::null(), printf as unsafe extern \"C\" fn(*const i8, ...));"}, {"sha": "6ddda3bf8b528c1dcb0725d4ffa98378d54525db", "filename": "src/test/ui/error-codes/E0618.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -8,6 +8,7 @@ LL |     X::Entry();\n    |     ^^^^^^^^--\n    |     |\n    |     call expression requires function\n+   |\n help: `X::Entry` is a unit variant, you need to write it without the parenthesis\n    |\n LL |     X::Entry;"}, {"sha": "45486a5d632be8ff38fd4a3ccccdaeb930b656a0", "filename": "src/test/ui/error-codes/E0642.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ferror-codes%2FE0642.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ferror-codes%2FE0642.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0642.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0642]: patterns aren't allowed in methods without bodies\n    |\n LL |     fn foo((x, y): (i32, i32));\n    |            ^^^^^^\n+   |\n help: give this argument a name or use an underscore to ignore it\n    |\n LL |     fn foo(_: (i32, i32));\n@@ -13,6 +14,7 @@ error[E0642]: patterns aren't allowed in methods without bodies\n    |\n LL |     fn bar((x, y): (i32, i32)) {}\n    |            ^^^^^^\n+   |\n help: give this argument a name or use an underscore to ignore it\n    |\n LL |     fn bar(_: (i32, i32)) {}\n@@ -23,6 +25,7 @@ error[E0642]: patterns aren't allowed in methods without bodies\n    |\n LL |     fn method(S { .. }: S) {}\n    |               ^^^^^^^^\n+   |\n help: give this argument a name or use an underscore to ignore it\n    |\n LL |     fn method(_: S) {}"}, {"sha": "3181d62298cad90a974938cf4a897bdcc61abda6", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-macro_use.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -21,6 +21,7 @@ error: malformed `macro_use` attribute input\n    |\n LL |     #[macro_use = \"2700\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n help: the following are the possible correct uses\n    |\n LL |     #[macro_use] struct S;"}, {"sha": "08513507ecf9604d2ff6881be705540c52395292", "filename": "src/test/ui/float-literal-inference-restrictions.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ffloat-literal-inference-restrictions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ffloat-literal-inference-restrictions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffloat-literal-inference-restrictions.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -15,6 +15,7 @@ error[E0308]: mismatched types\n    |\n LL |     let y: f32 = 1f64;\n    |                  ^^^^ expected f32, found f64\n+   |\n help: change the type of the numeric literal from `f64` to `f32`\n    |\n LL |     let y: f32 = 1f32;"}, {"sha": "8915b747b73dd558c33e4d3f752ba4a27d17defd", "filename": "src/test/ui/fn/fn-compare-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -5,6 +5,7 @@ LL |     let x = f == g;\n    |             - ^^ - fn() {main::g}\n    |             |\n    |             fn() {main::f}\n+   |\n help: you might have forgotten to call this function\n    |\n LL |     let x = f() == g;"}, {"sha": "ddd1e0954893f8d956dbebc496694f169544ff0a", "filename": "src/test/ui/glob-resolve1.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fglob-resolve1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fglob-resolve1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fglob-resolve1.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0425]: cannot find function `fpriv` in this scope\n    |\n LL |     fpriv();\n    |     ^^^^^ not found in this scope\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use bar::fpriv;\n@@ -13,6 +14,7 @@ error[E0425]: cannot find function `epriv` in this scope\n    |\n LL |     epriv();\n    |     ^^^^^ not found in this scope\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use bar::epriv;\n@@ -29,6 +31,7 @@ error[E0425]: cannot find value `C` in this scope\n    |\n LL |     C;\n    |     ^ not found in this scope\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use bar::C;\n@@ -45,6 +48,7 @@ error[E0412]: cannot find type `A` in this scope\n    |\n LL |     foo::<A>();\n    |           ^\n+   |\n help: an enum with a similar name exists\n    |\n LL |     foo::<B>();\n@@ -59,6 +63,7 @@ error[E0412]: cannot find type `C` in this scope\n    |\n LL |     foo::<C>();\n    |           ^\n+   |\n help: an enum with a similar name exists\n    |\n LL |     foo::<B>();\n@@ -73,6 +78,7 @@ error[E0412]: cannot find type `D` in this scope\n    |\n LL |     foo::<D>();\n    |           ^\n+   |\n help: an enum with a similar name exists\n    |\n LL |     foo::<B>();"}, {"sha": "216f7a24a1e3af1377ad9d63cd2e76c55ce84e99", "filename": "src/test/ui/hygiene/expansion-info-reset.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fhygiene%2Fexpansion-info-reset.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fhygiene%2Fexpansion-info-reset.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fexpansion-info-reset.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: format argument must be a string literal\n    |\n LL |     format_args!({ #[derive(Clone)] struct S; });\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n help: you might be missing a string literal to format with\n    |\n LL |     format_args!(\"{}\", { #[derive(Clone)] struct S; });"}, {"sha": "4b382a2b209609e7b1ce7d28139d51464b269ec1", "filename": "src/test/ui/hygiene/globs.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0425]: cannot find function `f` in this scope\n    |\n LL |         f();\n    |         ^ not found in this scope\n+   |\n help: possible candidates are found in other modules, you can import them into scope\n    |\n LL | use foo::f;\n@@ -24,6 +25,7 @@ LL | |         g();\n LL | |         f();\n LL | |     }\n    | |_____- in this macro invocation\n+   |\n help: possible candidates are found in other modules, you can import them into scope\n    |\n LL | use bar::g;"}, {"sha": "23252b6b5f4fcb675a9e8d00f1261e730b6c598d", "filename": "src/test/ui/if/ifmt-bad-format-args.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fif%2Fifmt-bad-format-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fif%2Fifmt-bad-format-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-bad-format-args.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -9,6 +9,7 @@ error: format argument must be a string literal\n    |\n LL |     format_args!(|| {});\n    |                  ^^^^^\n+   |\n help: you might be missing a string literal to format with\n    |\n LL |     format_args!(\"{}\", || {});"}, {"sha": "bfe94119a02f676965ef838ca40fa094b137d61a", "filename": "src/test/ui/impl-trait/impl-generic-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -6,6 +6,7 @@ LL |     fn foo(&self, _: &impl Debug);\n ...\n LL |     fn foo<U: Debug>(&self, _: &U) { }\n    |            ^ expected `impl Trait`, found generic parameter\n+   |\n help: try removing the generic parameter and using `impl Trait` instead\n    |\n LL |     fn foo(&self, _: &impl Debug) { }\n@@ -19,6 +20,7 @@ LL |     fn bar<U: Debug>(&self, _: &U);\n ...\n LL |     fn bar(&self, _: &impl Debug) { }\n    |                       ^^^^^^^^^^ expected generic parameter, found `impl Trait`\n+   |\n help: try changing the `impl Trait` argument to a generic parameter\n    |\n LL |     fn bar<U: Debug>(&self, _: &U) { }"}, {"sha": "82e280b9fb2e148c69b05da19566d3ef49b78049", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: lifetime may not live long enough\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |        -- lifetime `'a` defined here                   ^^^^^^^^^ opaque type requires that `'a` must outlive `'static`\n+   |\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n    |\n LL | type E<'a, 'b> = impl Sized; + 'a"}, {"sha": "097f003575eab040db3d054bd3925f37868b4112", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -5,6 +5,7 @@ LL | fn elided(x: &i32) -> impl Copy { x }\n    |              -        ^^^^^^^^^ opaque type requires that `'1` must outlive `'static`\n    |              |\n    |              let's call the lifetime of this reference `'1`\n+   |\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n@@ -17,6 +18,7 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             --                 ^^^^^^^^^ opaque type requires that `'a` must outlive `'static`\n    |             |\n    |             lifetime `'a` defined here\n+   |\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }"}, {"sha": "423cfcc498980becadccdd67e92954d0cd7fbcd3", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -5,6 +5,7 @@ LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n    |                         -         ^^^^^^^^^^^^^^^^^^^^^^^ opaque type requires that `'1` must outlive `'static`\n    |                         |\n    |                         let's call the lifetime of this reference `'1`\n+   |\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n@@ -17,6 +18,7 @@ LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                    --               ^^^^^^^^^^^^^^^^^^^^^^^ opaque type requires that `'a` must outlive `'static`\n    |                    |\n    |                    lifetime `'a` defined here\n+   |\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {"}, {"sha": "32b638dc465c59b05c812bed61bd95f3ed7aac9a", "filename": "src/test/ui/impl-trait/universal_wrong_bounds.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0404]: expected trait, found derive macro `Debug`\n    |\n LL | fn wants_debug(g: impl Debug) { }\n    |                        ^^^^^ not a trait\n+   |\n help: possible better candidate is found in another module, you can import it into scope\n    |\n LL | use std::fmt::Debug;\n@@ -13,6 +14,7 @@ error[E0404]: expected trait, found derive macro `Debug`\n    |\n LL | fn wants_display(g: impl Debug) { }\n    |                          ^^^^^ not a trait\n+   |\n help: possible better candidate is found in another module, you can import it into scope\n    |\n LL | use std::fmt::Debug;"}, {"sha": "7010a3ccbea83f2a36b451bc9c311a2eca14fed7", "filename": "src/test/ui/indexing-requires-a-uint.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -12,6 +12,7 @@ error[E0308]: mismatched types\n    |\n LL |     bar::<isize>(i);  // i should not be re-coerced back to an isize\n    |                  ^ expected isize, found usize\n+   |\n help: you can convert an `usize` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     bar::<isize>(i.try_into().unwrap());  // i should not be re-coerced back to an isize"}, {"sha": "c26c24f1dc573c9fabd5314e9e739b11ada3b27d", "filename": "src/test/ui/inference/cannot-infer-closure.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0282]: type annotations needed for the closure `fn((), ()) -> std::result\n    |\n LL |         Err(a)?;\n    |         ^^^^^^^ cannot infer type\n+   |\n help: give this closure an explicit return type without `_` placeholders\n    |\n LL |     let x = |a: (), b: ()| -> std::result::Result<(), _> {"}, {"sha": "bbb57d97c39f4176c874bdb3913385f9d8644ad1", "filename": "src/test/ui/integer-literal-suffix-inference.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i8(a16);\n    |           ^^^ expected i8, found i16\n+   |\n help: you can convert an `i16` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     id_i8(a16.try_into().unwrap());\n@@ -13,6 +14,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i8(a32);\n    |           ^^^ expected i8, found i32\n+   |\n help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     id_i8(a32.try_into().unwrap());\n@@ -23,6 +25,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i8(a64);\n    |           ^^^ expected i8, found i64\n+   |\n help: you can convert an `i64` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     id_i8(a64.try_into().unwrap());\n@@ -42,6 +45,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i16(a32);\n    |            ^^^ expected i16, found i32\n+   |\n help: you can convert an `i32` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     id_i16(a32.try_into().unwrap());\n@@ -52,6 +56,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i16(a64);\n    |            ^^^ expected i16, found i64\n+   |\n help: you can convert an `i64` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     id_i16(a64.try_into().unwrap());\n@@ -80,6 +85,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i32(a64);\n    |            ^^^ expected i32, found i64\n+   |\n help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     id_i32(a64.try_into().unwrap());\n@@ -117,6 +123,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i8(c16);\n    |           ^^^ expected i8, found i16\n+   |\n help: you can convert an `i16` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     id_i8(c16.try_into().unwrap());\n@@ -127,6 +134,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i8(c32);\n    |           ^^^ expected i8, found i32\n+   |\n help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     id_i8(c32.try_into().unwrap());\n@@ -137,6 +145,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i8(c64);\n    |           ^^^ expected i8, found i64\n+   |\n help: you can convert an `i64` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     id_i8(c64.try_into().unwrap());\n@@ -156,6 +165,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i16(c32);\n    |            ^^^ expected i16, found i32\n+   |\n help: you can convert an `i32` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     id_i16(c32.try_into().unwrap());\n@@ -166,6 +176,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i16(c64);\n    |            ^^^ expected i16, found i64\n+   |\n help: you can convert an `i64` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     id_i16(c64.try_into().unwrap());\n@@ -194,6 +205,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i32(c64);\n    |            ^^^ expected i32, found i64\n+   |\n help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     id_i32(c64.try_into().unwrap());\n@@ -231,6 +243,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_u8(b16);\n    |           ^^^ expected u8, found u16\n+   |\n help: you can convert an `u16` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     id_u8(b16.try_into().unwrap());\n@@ -241,6 +254,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_u8(b32);\n    |           ^^^ expected u8, found u32\n+   |\n help: you can convert an `u32` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     id_u8(b32.try_into().unwrap());\n@@ -251,6 +265,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_u8(b64);\n    |           ^^^ expected u8, found u64\n+   |\n help: you can convert an `u64` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     id_u8(b64.try_into().unwrap());\n@@ -270,6 +285,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_u16(b32);\n    |            ^^^ expected u16, found u32\n+   |\n help: you can convert an `u32` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     id_u16(b32.try_into().unwrap());\n@@ -280,6 +296,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_u16(b64);\n    |            ^^^ expected u16, found u64\n+   |\n help: you can convert an `u64` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     id_u16(b64.try_into().unwrap());\n@@ -308,6 +325,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_u32(b64);\n    |            ^^^ expected u32, found u64\n+   |\n help: you can convert an `u64` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     id_u32(b64.try_into().unwrap());"}, {"sha": "76c5f39fe1094065f84fa7eb7c47715da14c4227", "filename": "src/test/ui/issues/issue-13359.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo(1*(1 as isize));\n    |         ^^^^^^^^^^^^^^ expected i16, found isize\n+   |\n help: you can convert an `isize` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo((1*(1 as isize)).try_into().unwrap());\n@@ -13,6 +14,7 @@ error[E0308]: mismatched types\n    |\n LL |     bar(1*(1 as usize));\n    |         ^^^^^^^^^^^^^^ expected u32, found usize\n+   |\n help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     bar((1*(1 as usize)).try_into().unwrap());"}, {"sha": "7ffbbbce7a83bf52d368b753fb4a4fa91e76d31d", "filename": "src/test/ui/issues/issue-1362.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-1362.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-1362.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1362.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |   let x: u32 = 20i32;\n    |                ^^^^^ expected u32, found i32\n+   |\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n LL |   let x: u32 = 20u32;"}, {"sha": "28c561462d4106e8fb248fb17c6261cf787fdff7", "filename": "src/test/ui/issues/issue-1448-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-1448-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-1448-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1448-2.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     println!(\"{}\", foo(10i32));\n    |                        ^^^^^ expected u32, found i32\n+   |\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n LL |     println!(\"{}\", foo(10u32));"}, {"sha": "f3242919e0105fa5d52869ab1e5d76d3d69bac44", "filename": "src/test/ui/issues/issue-17546.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0573]: expected type, found variant `NoResult`\n    |\n LL |     fn new() -> NoResult<MyEnum, String> {\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n help: try using the variant's enum\n    |\n LL |     fn new() -> foo::MyEnum {\n@@ -17,6 +18,7 @@ error[E0573]: expected type, found variant `Result`\n    |\n LL |     fn new() -> Result<foo::MyEnum, String> {\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a type\n+   |\n help: possible better candidates are found in other modules, you can import them into scope\n    |\n LL |     use std::fmt::Result;\n@@ -34,6 +36,7 @@ error[E0573]: expected type, found variant `Result`\n    |\n LL | fn new() -> Result<foo::MyEnum, String> {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a type\n+   |\n help: possible better candidates are found in other modules, you can import them into scope\n    |\n LL | use std::fmt::Result;\n@@ -51,6 +54,7 @@ error[E0573]: expected type, found variant `NoResult`\n    |\n LL | fn newer() -> NoResult<foo::MyEnum, String> {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n help: try using the variant's enum\n    |\n LL | fn newer() -> foo::MyEnum {"}, {"sha": "2bddcc2ba56ceaa11b946b5de8f9f549bd06dbc5", "filename": "src/test/ui/issues/issue-22644.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -50,6 +50,7 @@ LL |                    <\n    |                    ^ not interpreted as comparison\n LL |                    4);\n    |                    - interpreted as generic arguments\n+   |\n help: try comparing the cast value\n    |\n LL |     println!(\"{}\", (a\n@@ -64,6 +65,7 @@ LL |                    <\n    |                    ^ not interpreted as comparison\n LL |                    5);\n    |                    - interpreted as generic arguments\n+   |\n help: try comparing the cast value\n    |\n LL |     println!(\"{}\", (a"}, {"sha": "72bca3b0408390ca04eb3e3689e74148995562ca", "filename": "src/test/ui/issues/issue-22933-3.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-22933-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-22933-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22933-3.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0599]: no associated item named `MIN` found for type `u8` in the current\n    |\n LL | const FOO: [u32; u8::MIN as usize] = [];\n    |                      ^^^ associated item not found in `u8`\n+   |\n help: you are looking for the module in `std`, not the primitive type\n    |\n LL | const FOO: [u32; std::u8::MIN as usize] = [];"}, {"sha": "19b67ef2a72cb3da9a638166c9545ed2609995ce", "filename": "src/test/ui/issues/issue-31910.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-31910.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-31910.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31910.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     X = Trait::Number,\n    |         ^^^^^^^^^^^^^ expected isize, found i32\n+   |\n help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     X = Trait::Number.try_into().unwrap(),"}, {"sha": "85acbfb8de4be9106c4ac73c2e57d41452ab17bc", "filename": "src/test/ui/issues/issue-35075.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-35075.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-35075.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35075.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0412]: cannot find type `Foo` in this scope\n    |\n LL |     inner: Foo<T>\n    |            ^^^ not found in this scope\n+   |\n help: there is an enum variant `Baz::Foo`; try using the variant's enum\n    |\n LL |     inner: Baz\n@@ -13,6 +14,7 @@ error[E0412]: cannot find type `Foo` in this scope\n    |\n LL |     Foo(Foo<T>)\n    |         ^^^ not found in this scope\n+   |\n help: there is an enum variant `Baz::Foo`; try using the variant's enum\n    |\n LL |     Foo(Baz)"}, {"sha": "8072141aefd208d9581c669ce7819c402b5a695b", "filename": "src/test/ui/issues/issue-35675.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-35675.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-35675.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35675.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0412]: cannot find type `Apple` in this scope\n    |\n LL | fn should_return_fruit() -> Apple {\n    |                             ^^^^^ not found in this scope\n+   |\n help: there is an enum variant `Fruit::Apple`; try using the variant's enum\n    |\n LL | fn should_return_fruit() -> Fruit {\n@@ -13,6 +14,7 @@ error[E0425]: cannot find function `Apple` in this scope\n    |\n LL |     Apple(5)\n    |     ^^^^^ not found in this scope\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use Fruit::Apple;\n@@ -32,6 +34,7 @@ error[E0425]: cannot find function `Apple` in this scope\n    |\n LL |     Apple(5)\n    |     ^^^^^ not found in this scope\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use Fruit::Apple;\n@@ -51,6 +54,7 @@ error[E0412]: cannot find type `Variant3` in this scope\n    |\n LL | fn bar() -> Variant3 {\n    |             ^^^^^^^^ not found in this scope\n+   |\n help: there is an enum variant `x::Enum::Variant3`; try using the variant's enum\n    |\n LL | fn bar() -> x::Enum {"}, {"sha": "99b243a077792eec0386b3186fd0a244d3f0fd69", "filename": "src/test/ui/issues/issue-35976.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-35976.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-35976.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35976.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: the `wait` method cannot be invoked on a trait object\n    |\n LL |     arg.wait();\n    |         ^^^^\n+   |\n help: another candidate was found in the following trait, perhaps add a `use` for it:\n    |\n LL | use private::Future;"}, {"sha": "1a05c7ab42028239187ea6fe3be8e91565c31e4e", "filename": "src/test/ui/issues/issue-37534.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0404]: expected trait, found derive macro `Hash`\n    |\n LL | struct Foo<T: ?Hash> { }\n    |                ^^^^ not a trait\n+   |\n help: possible better candidate is found in another module, you can import it into scope\n    |\n LL | use std::hash::Hash;"}, {"sha": "cc3c72b496f5f4ea088c587b46c34278a902a630", "filename": "src/test/ui/issues/issue-38293.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-38293.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-38293.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38293.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -9,6 +9,7 @@ error[E0423]: expected function, found module `baz`\n    |\n LL |     baz();\n    |     ^^^ not a function\n+   |\n help: possible better candidate is found in another module, you can import it into scope\n    |\n LL | use bar::baz;"}, {"sha": "f7107d61ac3e255563f9226ace4f3c2bcabefd59", "filename": "src/test/ui/issues/issue-41652/issue-41652.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-41652%2Fissue-41652.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-41652%2Fissue-41652.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41652%2Fissue-41652.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0689]: can't call method `f` on ambiguous numeric type `{integer}`\n    |\n LL |         3.f()\n    |           ^\n+   |\n help: you must specify a concrete type for this numeric value, like `i32`\n    |\n LL |         3_i32.f()"}, {"sha": "4ab272b9e9b3bac429a9849f32db8746a347ca1d", "filename": "src/test/ui/issues/issue-42944.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-42944.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-42944.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42944.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -9,6 +9,7 @@ error[E0425]: cannot find function `B` in this scope\n    |\n LL |         B(());\n    |         ^ not found in this scope\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL |     use foo::B;"}, {"sha": "60a1155c614f6f696b6227d6a8a3f890a3bd033f", "filename": "src/test/ui/issues/issue-4366-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-4366-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-4366-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4366-2.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0412]: cannot find type `Bar` in this scope\n    |\n LL |         fn sub() -> Bar { 1 }\n    |                     ^^^ not found in this scope\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL |         use a::b::Bar;\n@@ -13,6 +14,7 @@ error[E0423]: expected function, found module `foo`\n    |\n LL |     foo();\n    |     ^^^ not a function\n+   |\n help: possible better candidates are found in other modules, you can import them into scope\n    |\n LL | use foo::foo;"}, {"sha": "d931d519117569d3770a808a50cca4bd73f08c88", "filename": "src/test/ui/issues/issue-4366.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-4366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-4366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4366.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0425]: cannot find function `foo` in this scope\n    |\n LL |         fn sub() -> isize { foo(); 1 }\n    |                             ^^^ not found in this scope\n+   |\n help: possible candidates are found in other modules, you can import them into scope\n    |\n LL |         use foo::foo;"}, {"sha": "a98d833969e800f1fe988311b24b68572e259d6c", "filename": "src/test/ui/issues/issue-44406.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-44406.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-44406.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44406.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `true`\n    |\n LL |     foo!(true);\n    |          ^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     foo!(r#true);"}, {"sha": "3460c1dae2299a98e74f976d4a9ddc6e682ec6a4", "filename": "src/test/ui/issues/issue-47377.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -6,6 +6,7 @@ LL |      let _a = b + \", World!\";\n    |               | |\n    |               | `+` cannot be used to concatenate two `&str` strings\n    |               &str\n+   |\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |      let _a = b.to_owned() + \", World!\";"}, {"sha": "f334dcbd916ac9d3d8c3bfd1aea040ef50d87350", "filename": "src/test/ui/issues/issue-47380.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -6,6 +6,7 @@ LL |     println!(\"\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\"); let _a = b + \", World!\";\n    |                                      | |\n    |                                      | `+` cannot be used to concatenate two `&str` strings\n    |                                      &str\n+   |\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     println!(\"\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\"); let _a = b.to_owned() + \", World!\";"}, {"sha": "b9d96dc79075aa3a9b16499124afb936499cf9a5", "filename": "src/test/ui/issues/issue-49257.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-49257.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-49257.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49257.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -6,6 +6,7 @@ LL |     let Point { .., y, } = p;\n    |                 | |\n    |                 | expected `}`\n    |                 `..` must be at the end and cannot have a trailing comma\n+   |\n help: move the `..` to the end of the field list\n    |\n LL |     let Point { y, .. } = p;\n@@ -19,6 +20,7 @@ LL |     let Point { .., y } = p;\n    |                 | |\n    |                 | expected `}`\n    |                 `..` must be at the end and cannot have a trailing comma\n+   |\n help: move the `..` to the end of the field list\n    |\n LL |     let Point { y , .. } = p;"}, {"sha": "df9d10b39507bbcf05bb76c19eeb97c615ecac17", "filename": "src/test/ui/issues/issue-50571.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-50571.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-50571.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50571.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0642]: patterns aren't allowed in methods without bodies\n    |\n LL |     fn foo([a, b]: [i32; 2]) {}\n    |            ^^^^^^\n+   |\n help: give this argument a name or use an underscore to ignore it\n    |\n LL |     fn foo(_: [i32; 2]) {}"}, {"sha": "5c8cac444387da4462d78fda107415b9d05ffe76", "filename": "src/test/ui/issues/issue-50599.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-50599.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-50599.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50599.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0425]: cannot find value `LOG10_2` in module `std::f64`\n    |\n LL |     const M: usize = (f64::from(N) * std::f64::LOG10_2) as usize;\n    |                                                ^^^^^^^ not found in `std::f64`\n+   |\n help: possible candidates are found in other modules, you can import them into scope\n    |\n LL | use std::f32::consts::LOG10_2;"}, {"sha": "c7c4843a0fa80cf5cb68604b04dd9d26afa58c3c", "filename": "src/test/ui/issues/issue-51874.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-51874.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-51874.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51874.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0689]: can't call method `pow` on ambiguous numeric type `{float}`\n    |\n LL |     let a = (1.0).pow(1.0);\n    |                   ^^^\n+   |\n help: you must specify a concrete type for this numeric value, like `f32`\n    |\n LL |     let a = (1.0_f32).pow(1.0);"}, {"sha": "f4f0f17d00199c3860526bae6b47437245a11d2c", "filename": "src/test/ui/issues/issue-5239-1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-5239-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-5239-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5239-1.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -5,6 +5,7 @@ LL |     let x = |ref x: isize| { x += 1; };\n    |                              -^^^^^\n    |                              |\n    |                              cannot use `+=` on type `&isize`\n+   |\n help: `+=` can be used on 'isize', you can dereference `x`\n    |\n LL |     let x = |ref x: isize| { *x += 1; };"}, {"sha": "30fedbe1653c4aef786c954465734f96c5d5f9f1", "filename": "src/test/ui/issues/issue-56685.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-56685.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-56685.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56685.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -19,6 +19,7 @@ error: unused variable: `x`\n    |\n LL |         F::A(x, y) | F::B(x, y) => { y },\n    |              ^            ^\n+   |\n help: consider prefixing with an underscore\n    |\n LL |         F::A(_x, y) | F::B(_x, y) => { y },\n@@ -41,6 +42,7 @@ error: unused variable: `x`\n    |\n LL |     let _ = if let F::A(x, y) | F::B(x, y) = F::A(1, 2) {\n    |                         ^            ^\n+   |\n help: consider prefixing with an underscore\n    |\n LL |     let _ = if let F::A(_x, y) | F::B(_x, y) = F::A(1, 2) {\n@@ -51,6 +53,7 @@ error: unused variable: `x`\n    |\n LL |     while let F::A(x, y) | F::B(x, y) = F::A(1, 2) {\n    |                    ^            ^\n+   |\n help: consider prefixing with an underscore\n    |\n LL |     while let F::A(_x, y) | F::B(_x, y) = F::A(1, 2) {"}, {"sha": "197c4cc967d4da1ea32c3dfa373caf45552cf6af", "filename": "src/test/ui/issues/issue-57198.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-57198.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-57198.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57198.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `for`\n    |\n LL |     m::for();\n    |        ^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     m::r#for();"}, {"sha": "ab9a0130c00b0d49fcbefc96a912b87c1bf4f541", "filename": "src/test/ui/issues/issue-58857.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-58857.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-58857.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58857.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: negative trait bounds are not supported\n    |\n LL | impl<A: !Valid> Conj<A>{}\n    |       ^^^^^^^^ negative trait bounds are not supported\n+   |\n    = help: remove the trait bound\n \n error: aborting due to previous error"}, {"sha": "2397d583488e66a89918eda4935c26b768981878", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -41,6 +41,7 @@ LL |     foo > foo;\n    |     --- ^ --- fn() -> i32 {foo}\n    |     |\n    |     fn() -> i32 {foo}\n+   |\n help: you might have forgotten to call this function\n    |\n LL |     foo() > foo;"}, {"sha": "87aaa03661321dabb767117c8cfa604a4d024c47", "filename": "src/test/ui/issues/issue-62554.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-62554.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-62554.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-62554.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -18,6 +18,7 @@ LL | fn foo(u: u8) { if u8 macro_rules! u8 { (u6) => { fn uuuuuuuuuuu() { use s\n    |                 --    ^^^^^^^^^^^ expected `{`\n    |                 |\n    |                 this `if` statement has a condition, but no block\n+   |\n help: try placing this code inside a block\n    |\n LL | fn foo(u: u8) { if u8 { macro_rules! u8 { (u6) => { fn uuuuuuuuuuu() { use s loo mod u8 {"}, {"sha": "3b00ffc8f6c8dedd3121df958223b0004cdc3e0e", "filename": "src/test/ui/issues/issue-64732.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-64732.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-64732.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64732.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: character literal may only contain one codepoint\n    |\n LL |     let _foo = b'hello\\0';\n    |                 ^^^^^^^^^\n+   |\n help: if you meant to write a byte string literal, use double quotes\n    |\n LL |     let _foo = b\"hello\\0\";\n@@ -13,6 +14,7 @@ error: character literal may only contain one codepoint\n    |\n LL |     let _bar = 'hello';\n    |                ^^^^^^^\n+   |\n help: if you meant to write a `str` literal, use double quotes\n    |\n LL |     let _bar = \"hello\";"}, {"sha": "5a657575c1dbfae4ef4fbe83aede28abe1769b09", "filename": "src/test/ui/issues/issue-8761.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-8761.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fissues%2Fissue-8761.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8761.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     A = 1i64,\n    |         ^^^^ expected isize, found i64\n+   |\n help: change the type of the numeric literal from `i64` to `isize`\n    |\n LL |     A = 1isize,\n@@ -13,6 +14,7 @@ error[E0308]: mismatched types\n    |\n LL |     B = 2u8\n    |         ^^^ expected isize, found u8\n+   |\n help: change the type of the numeric literal from `u8` to `isize`\n    |\n LL |     B = 2isize"}, {"sha": "5f5297be42ac914cb8ecea25cbcf4f0312d05c66", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-pat.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-pat.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `extern`\n    |\n LL |     let extern = 0;\n    |         ^^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#extern = 0;"}, {"sha": "05802f2d36710a42a4c670d2e601cd9f82f483f1", "filename": "src/test/ui/keyword/extern/keyword-extern-as-identifier-use.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fextern%2Fkeyword-extern-as-identifier-use.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `extern`\n    |\n LL | use extern::foo;\n    |     ^^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | use r#extern::foo;"}, {"sha": "a7843a930119a222f6968f014171060903218a1e", "filename": "src/test/ui/lexical-scopes.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Flexical-scopes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Flexical-scopes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexical-scopes.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0574]: expected struct, variant or union type, found type parameter `T`\n    |\n LL |     let t = T { i: 0 };\n    |             ^ not a struct, variant or union type\n+   |\n help: possible better candidate is found in another module, you can import it into scope\n    |\n LL | use T;"}, {"sha": "a2b4f114b95b9fb92e4edc7ac75985cb746baf26", "filename": "src/test/ui/lifetime_starts_expressions.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `loop`\n    |\n LL |     loop { break 'label: loop { break 'label 42; }; }\n    |                          ^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     loop { break 'label: r#loop { break 'label 42; }; }"}, {"sha": "3e77d193fa4773711f65d4b968485113005e1b6c", "filename": "src/test/ui/lint/use_suggestion_json.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -385,6 +385,7 @@ mod foo {\n \\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\n \\u001b[0m\\u001b[1m\\u001b[38;5;12mLL\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m| \\u001b[0m\\u001b[0m    let x: Iter;\\u001b[0m\n \\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m| \\u001b[0m\\u001b[0m           \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9m^^^^\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;9mnot found in this scope\\u001b[0m\n+\\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\n \\u001b[0m\\u001b[1m\\u001b[38;5;14mhelp\\u001b[0m\\u001b[0m: possible candidates are found in other modules, you can import them into scope\\u001b[0m\n \\u001b[0m   \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m|\\u001b[0m\n \\u001b[0m\\u001b[1m\\u001b[38;5;12mLL\\u001b[0m\\u001b[0m \\u001b[0m\\u001b[0m\\u001b[1m\\u001b[38;5;12m| \\u001b[0m\\u001b[0muse std::collections::binary_heap::Iter;\\u001b[0m"}, {"sha": "ff93e9220e98678a264903b3b5a7eea1df4ee18c", "filename": "src/test/ui/loops/loop-break-value-no-repeat.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Floops%2Floop-break-value-no-repeat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Floops%2Floop-break-value-no-repeat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-break-value-no-repeat.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0571]: `break` with value from a `for` loop\n    |\n LL |         break 22\n    |         ^^^^^^^^ can only break with a value inside `loop` or breakable block\n+   |\n help: instead, use `break` on its own without a value inside this `for` loop\n    |\n LL |         break"}, {"sha": "b2e3ebc53ad8e609cde10eb8d48df16267313308", "filename": "src/test/ui/loops/loop-break-value.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -11,6 +11,7 @@ error[E0571]: `break` with value from a `while` loop\n    |\n LL |         break ();\n    |         ^^^^^^^^ can only break with a value inside `loop` or breakable block\n+   |\n help: instead, use `break` on its own without a value inside this `while` loop\n    |\n LL |         break;\n@@ -21,6 +22,7 @@ error[E0571]: `break` with value from a `while` loop\n    |\n LL |             break 'while_loop 123;\n    |             ^^^^^^^^^^^^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n+   |\n help: instead, use `break` on its own without a value inside this `while` loop\n    |\n LL |             break;\n@@ -31,6 +33,7 @@ error[E0571]: `break` with value from a `while let` loop\n    |\n LL |         if break () {\n    |            ^^^^^^^^ can only break with a value inside `loop` or breakable block\n+   |\n help: instead, use `break` on its own without a value inside this `while let` loop\n    |\n LL |         if break {\n@@ -41,6 +44,7 @@ error[E0571]: `break` with value from a `while let` loop\n    |\n LL |         break None;\n    |         ^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n+   |\n help: instead, use `break` on its own without a value inside this `while let` loop\n    |\n LL |         break;\n@@ -51,6 +55,7 @@ error[E0571]: `break` with value from a `while let` loop\n    |\n LL |             break 'while_let_loop \"nope\";\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n+   |\n help: instead, use `break` on its own without a value inside this `while let` loop\n    |\n LL |             break;\n@@ -61,6 +66,7 @@ error[E0571]: `break` with value from a `for` loop\n    |\n LL |         break ();\n    |         ^^^^^^^^ can only break with a value inside `loop` or breakable block\n+   |\n help: instead, use `break` on its own without a value inside this `for` loop\n    |\n LL |         break;\n@@ -71,6 +77,7 @@ error[E0571]: `break` with value from a `for` loop\n    |\n LL |         break [()];\n    |         ^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n+   |\n help: instead, use `break` on its own without a value inside this `for` loop\n    |\n LL |         break;\n@@ -81,6 +88,7 @@ error[E0571]: `break` with value from a `for` loop\n    |\n LL |             break 'for_loop Some(17);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n+   |\n help: instead, use `break` on its own without a value inside this `for` loop\n    |\n LL |             break;"}, {"sha": "6ef4cdcb0200e93708631244636e9a2645089f06", "filename": "src/test/ui/macros/bad_hello.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmacros%2Fbad_hello.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmacros%2Fbad_hello.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fbad_hello.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: format argument must be a string literal\n    |\n LL |     println!(3 + 4);\n    |              ^^^^^\n+   |\n help: you might be missing a string literal to format with\n    |\n LL |     println!(\"{}\", 3 + 4);\n@@ -13,6 +14,7 @@ error: format argument must be a string literal\n    |\n LL |     println!(3, 4);\n    |              ^\n+   |\n help: you might be missing a string literal to format with\n    |\n LL |     println!(\"{} {}\", 3, 4);"}, {"sha": "0e2fb4c8af51399d7d5a683c2f4bee88abef94b2", "filename": "src/test/ui/macros/derive-in-eager-expansion-hang.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmacros%2Fderive-in-eager-expansion-hang.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmacros%2Fderive-in-eager-expansion-hang.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fderive-in-eager-expansion-hang.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -11,6 +11,7 @@ LL | |     }\n ...\n LL |       format_args!(hang!());\n    |                    ------- in this macro invocation\n+   |\n help: you might be missing a string literal to format with\n    |\n LL |     format_args!(\"{}\", hang!());"}, {"sha": "02b704299ff059cdaa6fe69b97d005b6a7a02a8c", "filename": "src/test/ui/macros/format-parse-errors.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -43,6 +43,7 @@ error: format argument must be a string literal\n    |\n LL |     format!(123);\n    |             ^^^\n+   |\n help: you might be missing a string literal to format with\n    |\n LL |     format!(\"{}\", 123);"}, {"sha": "19d977f69a21002509bd8e442c7ba880200bf1aa", "filename": "src/test/ui/macros/issue-30143.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmacros%2Fissue-30143.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmacros%2Fissue-30143.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-30143.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: format argument must be a string literal\n    |\n LL |     println!(0);\n    |              ^\n+   |\n help: you might be missing a string literal to format with\n    |\n LL |     println!(\"{}\", 0);\n@@ -13,6 +14,7 @@ error: format argument must be a string literal\n    |\n LL |     eprintln!('a');\n    |               ^^^\n+   |\n help: you might be missing a string literal to format with\n    |\n LL |     eprintln!(\"{}\", 'a');\n@@ -23,6 +25,7 @@ error: format argument must be a string literal\n    |\n LL |     writeln!(s, true).unwrap();\n    |                 ^^^^\n+   |\n help: you might be missing a string literal to format with\n    |\n LL |     writeln!(s, \"{}\", true).unwrap();"}, {"sha": "85dee9f24fe2f6a2349097d0f727b4cdd08a7b25", "filename": "src/test/ui/macros/macro-backtrace-invalid-internals.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -33,6 +33,7 @@ LL |           2.0.neg()\n ...\n LL |     real_method_stmt!();\n    |     -------------------- in this macro invocation\n+   |\n help: you must specify a concrete type for this numeric value, like `f32`\n    |\n LL |           2.0_f32.neg()\n@@ -73,6 +74,7 @@ LL |           2.0.neg()\n ...\n LL |     let _ = real_method_expr!();\n    |             ------------------- in this macro invocation\n+   |\n help: you must specify a concrete type for this numeric value, like `f32`\n    |\n LL |           2.0_f32.neg()"}, {"sha": "86a6baca053240a7b35db8f63170958b450043ef", "filename": "src/test/ui/macros/macro-outer-attributes.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0425]: cannot find function `bar` in module `a`\n    |\n LL |     a::bar();\n    |        ^^^ not found in `a`\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use b::bar;"}, {"sha": "b2fdbb736c8fc13843b62a7ee4f66dfe241bc32d", "filename": "src/test/ui/macros/macros-nonfatal-errors.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -45,6 +45,7 @@ error: format argument must be a string literal\n    |\n LL |     format!(invalid);\n    |             ^^^^^^^\n+   |\n help: you might be missing a string literal to format with\n    |\n LL |     format!(\"{}\", invalid);"}, {"sha": "28512bf9ef10fed05cd012e5bd10fca1626e6581", "filename": "src/test/ui/malformed/malformed-unwind-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-unwind-2.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0633]: malformed `unwind` attribute input\n    |\n LL | #[unwind(allowed, aborts)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid argument\n+   |\n help: the allowed arguments are `allowed` and `aborts`\n    |\n LL | #[unwind(allowed)]\n@@ -15,6 +16,7 @@ error[E0633]: malformed `unwind` attribute input\n    |\n LL | #[unwind(unsupported)]\n    | ^^^^^^^^^^^^^^^^^^^^^^ invalid argument\n+   |\n help: the allowed arguments are `allowed` and `aborts`\n    |\n LL | #[unwind(allowed)]"}, {"sha": "968b87288c01559c8930be47cecbb1377e302844", "filename": "src/test/ui/meta-expected-error-correct-rev.a.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmeta-expected-error-correct-rev.a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmeta-expected-error-correct-rev.a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmeta-expected-error-correct-rev.a.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     let x: u32 = 22_usize;\n    |                  ^^^^^^^^ expected u32, found usize\n+   |\n help: change the type of the numeric literal from `usize` to `u32`\n    |\n LL |     let x: u32 = 22_u32;"}, {"sha": "8dfbde92f646b015385dba64a3daab57567d4ba8", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -11,6 +11,7 @@ error[E0308]: mismatched types\n    |\n LL |     let y: usize = x.foo();\n    |                    ^^^^^^^ expected usize, found isize\n+   |\n help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     let y: usize = x.foo().try_into().unwrap();"}, {"sha": "d9e250882e1c16c1627d2d2a3078891ca422e952", "filename": "src/test/ui/methods/method-on-ambiguous-numeric-type.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmethods%2Fmethod-on-ambiguous-numeric-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmethods%2Fmethod-on-ambiguous-numeric-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-on-ambiguous-numeric-type.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0689]: can't call method `neg` on ambiguous numeric type `{float}`\n    |\n LL |     let x = 2.0.neg();\n    |                 ^^^\n+   |\n help: you must specify a concrete type for this numeric value, like `f32`\n    |\n LL |     let x = 2.0_f32.neg();\n@@ -13,6 +14,7 @@ error[E0689]: can't call method `neg` on ambiguous numeric type `{float}`\n    |\n LL |     let x = y.neg();\n    |               ^^^\n+   |\n help: you must specify a type for this binding, like `f32`\n    |\n LL |     let y: f32 = 2.0;\n@@ -31,6 +33,7 @@ error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n    |\n LL |     local_bar.pow(2);\n    |               ^^^\n+   |\n help: you must specify a type for this binding, like `i32`\n    |\n LL |     ($ident:ident) => { let $ident: i32 = 42; }"}, {"sha": "a8da87d60bf942d145935e6ae114da7d8e682875", "filename": "src/test/ui/mismatched_types/closure-arg-count-expected-type-issue-47244.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count-expected-type-issue-47244.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count-expected-type-issue-47244.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count-expected-type-issue-47244.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -5,6 +5,7 @@ LL |     let _n = m.iter().map(|_, b| {\n    |                       ^^^ ------ takes 2 distinct arguments\n    |                       |\n    |                       expected closure that takes a single 2-tuple as argument\n+   |\n help: change the closure to accept a tuple instead of individual arguments\n    |\n LL |     let _n = m.iter().map(|(_, b)| {"}, {"sha": "13954343246faaa9f1e5682ac35ee878a5bfe244", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -5,6 +5,7 @@ LL |     [1, 2, 3].sort_by(|| panic!());\n    |               ^^^^^^^ -- takes 0 arguments\n    |               |\n    |               expected closure that takes 2 arguments\n+   |\n help: consider changing the closure to take and ignore the expected arguments\n    |\n LL |     [1, 2, 3].sort_by(|_, _| panic!());\n@@ -25,6 +26,7 @@ LL |     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n    |               ^^^^^^^ ----------------- takes a single 2-tuple as argument\n    |               |\n    |               expected closure that takes 2 distinct arguments\n+   |\n help: change the closure to take multiple arguments instead of a single tuple\n    |\n LL |     [1, 2, 3].sort_by(|tuple, tuple2| panic!());\n@@ -37,6 +39,7 @@ LL |     [1, 2, 3].sort_by(|(tuple, tuple2): (usize, _)| panic!());\n    |               ^^^^^^^ ----------------------------- takes a single 2-tuple as argument\n    |               |\n    |               expected closure that takes 2 distinct arguments\n+   |\n help: change the closure to take multiple arguments instead of a single tuple\n    |\n LL |     [1, 2, 3].sort_by(|tuple, tuple2| panic!());\n@@ -52,6 +55,7 @@ LL |     f(|| panic!());\n    |     ^ -- takes 0 arguments\n    |     |\n    |     expected closure that takes 1 argument\n+   |\n help: consider changing the closure to take and ignore the expected argument\n    |\n LL |     f(|_| panic!());\n@@ -67,6 +71,7 @@ LL |     f(  move    || panic!());\n    |     ^   ---------- takes 0 arguments\n    |     |\n    |     expected closure that takes 1 argument\n+   |\n help: consider changing the closure to take and ignore the expected argument\n    |\n LL |     f(  move    |_| panic!());\n@@ -79,6 +84,7 @@ LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i, x| i);\n    |                                                     ^^^ ------ takes 2 distinct arguments\n    |                                                     |\n    |                                                     expected closure that takes a single 2-tuple as argument\n+   |\n help: change the closure to accept a tuple instead of individual arguments\n    |\n LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|(i, x)| i);\n@@ -91,6 +97,7 @@ LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i: usize, x| i);\n    |                                                     ^^^ ------------- takes 2 distinct arguments\n    |                                                     |\n    |                                                     expected closure that takes a single 2-tuple as argument\n+   |\n help: change the closure to accept a tuple instead of individual arguments\n    |\n LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|(i, x)| i);"}, {"sha": "9d5cd6eeb556c3706cd5c7c5db4624d5ca97927a", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -6,6 +6,7 @@ LL |                   $arr.len() * size_of($arr[0]));\n ...\n LL |     write!(hello);\n    |     -------------- in this macro invocation\n+   |\n help: you can convert an `usize` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |                   ($arr.len() * size_of($arr[0])).try_into().unwrap());"}, {"sha": "47ba1d26be50b23d1798e47dac3bc94ddbf936a0", "filename": "src/test/ui/mismatched_types/numeric-literal-cast.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo(1u8);\n    |         ^^^ expected u16, found u8\n+   |\n help: change the type of the numeric literal from `u8` to `u16`\n    |\n LL |     foo(1u16);\n@@ -13,6 +14,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo1(2f32);\n    |          ^^^^ expected f64, found f32\n+   |\n help: change the type of the numeric literal from `f32` to `f64`\n    |\n LL |     foo1(2f64);\n@@ -23,6 +25,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo2(3i16);\n    |          ^^^^ expected i32, found i16\n+   |\n help: change the type of the numeric literal from `i16` to `i32`\n    |\n LL |     foo2(3i32);"}, {"sha": "207dc78a4b9679633079f6af160595b4b8a3fe3d", "filename": "src/test/ui/mismatched_types/recovered-block.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: missing `struct` for struct definition\n    |\n LL |     pub Foo { text }\n    |        ^\n+   |\n help: add `struct` here to parse `Foo` as a public struct\n    |\n LL |     pub struct Foo { text }"}, {"sha": "c3f2c79fdd21e72575a2e5d89ba1696ab51bf54d", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -42,6 +42,7 @@ LL |         V {},\n ...\n LL |     check(m7::V);\n    |           ^^^^^ did you mean `m7::V { /* fields */ }`?\n+   |\n help: a tuple variant with a similar name exists\n    |\n LL |     check(m7::TV);\n@@ -58,6 +59,7 @@ error[E0423]: expected value, found struct variant `xm7::V`\n    |\n LL |     check(xm7::V);\n    |           ^^^^^^ did you mean `xm7::V { /* fields */ }`?\n+   |\n help: a tuple variant with a similar name exists\n    |\n LL |     check(xm7::TV);"}, {"sha": "f6a86aa43b53459ee417ec197db8437b9c21ee01", "filename": "src/test/ui/nll/ty-outlives/impl-trait-captures.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0621]: explicit lifetime required in the type of `x`\n    |\n LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> {\n    |                         ^^^^^^^^^^^^ lifetime `ReEarlyBound(0, 'a)` required\n+   |\n help: add explicit lifetime `ReEarlyBound(0, 'a)` to the type of `x`\n    |\n LL | fn foo<'a, T>(x: &ReEarlyBound(0, 'a) T) -> impl Foo<'a> {"}, {"sha": "e57d8af5f99b9aac78a2ab24049d4ddbf110deb5", "filename": "src/test/ui/no-implicit-prelude-nested.stderr", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fno-implicit-prelude-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fno-implicit-prelude-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-implicit-prelude-nested.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0405]: cannot find trait `Add` in this scope\n    |\n LL |         impl Add for Test {}\n    |              ^^^ not found in this scope\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL |         use std::ops::Add;\n@@ -13,6 +14,7 @@ error[E0404]: expected trait, found derive macro `Clone`\n    |\n LL |         impl Clone for Test {}\n    |              ^^^^^ not a trait\n+   |\n help: possible better candidates are found in other modules, you can import them into scope\n    |\n LL |         use std::clone::Clone;\n@@ -25,6 +27,7 @@ error[E0405]: cannot find trait `Iterator` in this scope\n    |\n LL |         impl Iterator for Test {}\n    |              ^^^^^^^^ not found in this scope\n+   |\n help: possible candidates are found in other modules, you can import them into scope\n    |\n LL |         use std::iter::Iterator;\n@@ -37,6 +40,7 @@ error[E0405]: cannot find trait `ToString` in this scope\n    |\n LL |         impl ToString for Test {}\n    |              ^^^^^^^^ not found in this scope\n+   |\n help: possible candidates are found in other modules, you can import them into scope\n    |\n LL |         use std::prelude::v1::ToString;\n@@ -55,6 +59,7 @@ error[E0425]: cannot find function `drop` in this scope\n    |\n LL |             drop(2)\n    |             ^^^^ not found in this scope\n+   |\n help: possible candidates are found in other modules, you can import them into scope\n    |\n LL |         use std::mem::drop;\n@@ -67,6 +72,7 @@ error[E0405]: cannot find trait `Add` in this scope\n    |\n LL |     impl Add for Test {}\n    |          ^^^ not found in this scope\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL |     use std::ops::Add;\n@@ -77,6 +83,7 @@ error[E0404]: expected trait, found derive macro `Clone`\n    |\n LL |     impl Clone for Test {}\n    |          ^^^^^ not a trait\n+   |\n help: possible better candidates are found in other modules, you can import them into scope\n    |\n LL |     use std::clone::Clone;\n@@ -89,6 +96,7 @@ error[E0405]: cannot find trait `Iterator` in this scope\n    |\n LL |     impl Iterator for Test {}\n    |          ^^^^^^^^ not found in this scope\n+   |\n help: possible candidates are found in other modules, you can import them into scope\n    |\n LL |     use std::iter::Iterator;\n@@ -101,6 +109,7 @@ error[E0405]: cannot find trait `ToString` in this scope\n    |\n LL |     impl ToString for Test {}\n    |          ^^^^^^^^ not found in this scope\n+   |\n help: possible candidates are found in other modules, you can import them into scope\n    |\n LL |     use std::prelude::v1::ToString;\n@@ -119,6 +128,7 @@ error[E0425]: cannot find function `drop` in this scope\n    |\n LL |         drop(2)\n    |         ^^^^ not found in this scope\n+   |\n help: possible candidates are found in other modules, you can import them into scope\n    |\n LL |     use std::mem::drop;\n@@ -131,6 +141,7 @@ error[E0405]: cannot find trait `Add` in this scope\n    |\n LL |         impl Add for Test {}\n    |              ^^^ not found in this scope\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL |         use std::ops::Add;\n@@ -141,6 +152,7 @@ error[E0404]: expected trait, found derive macro `Clone`\n    |\n LL |         impl Clone for Test {}\n    |              ^^^^^ not a trait\n+   |\n help: possible better candidates are found in other modules, you can import them into scope\n    |\n LL |         use std::clone::Clone;\n@@ -153,6 +165,7 @@ error[E0405]: cannot find trait `Iterator` in this scope\n    |\n LL |         impl Iterator for Test {}\n    |              ^^^^^^^^ not found in this scope\n+   |\n help: possible candidates are found in other modules, you can import them into scope\n    |\n LL |         use std::iter::Iterator;\n@@ -165,6 +178,7 @@ error[E0405]: cannot find trait `ToString` in this scope\n    |\n LL |         impl ToString for Test {}\n    |              ^^^^^^^^ not found in this scope\n+   |\n help: possible candidates are found in other modules, you can import them into scope\n    |\n LL |         use std::prelude::v1::ToString;\n@@ -183,6 +197,7 @@ error[E0425]: cannot find function `drop` in this scope\n    |\n LL |             drop(2)\n    |             ^^^^ not found in this scope\n+   |\n help: possible candidates are found in other modules, you can import them into scope\n    |\n LL |         use std::mem::drop;"}, {"sha": "8b99529f4dd7c8169756cd77b84a63a1df18462c", "filename": "src/test/ui/no-implicit-prelude.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fno-implicit-prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fno-implicit-prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-implicit-prelude.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0405]: cannot find trait `Add` in this scope\n    |\n LL | impl Add for Test {}\n    |      ^^^ not found in this scope\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use std::ops::Add;\n@@ -13,6 +14,7 @@ error[E0404]: expected trait, found derive macro `Clone`\n    |\n LL | impl Clone for Test {}\n    |      ^^^^^ not a trait\n+   |\n help: possible better candidates are found in other modules, you can import them into scope\n    |\n LL | use std::clone::Clone;\n@@ -25,6 +27,7 @@ error[E0405]: cannot find trait `Iterator` in this scope\n    |\n LL | impl Iterator for Test {}\n    |      ^^^^^^^^ not found in this scope\n+   |\n help: possible candidates are found in other modules, you can import them into scope\n    |\n LL | use std::iter::Iterator;\n@@ -37,6 +40,7 @@ error[E0405]: cannot find trait `ToString` in this scope\n    |\n LL | impl ToString for Test {}\n    |      ^^^^^^^^ not found in this scope\n+   |\n help: possible candidates are found in other modules, you can import them into scope\n    |\n LL | use std::prelude::v1::ToString;\n@@ -55,6 +59,7 @@ error[E0425]: cannot find function `drop` in this scope\n    |\n LL |     drop(2)\n    |     ^^^^ not found in this scope\n+   |\n help: possible candidates are found in other modules, you can import them into scope\n    |\n LL | use std::mem::drop;"}, {"sha": "c88495059224b1efd4430f85edd42b9d8e050f77", "filename": "src/test/ui/numeric/const-scope.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -27,6 +27,7 @@ error[E0308]: mismatched types\n    |\n LL |     let c: i32 = 1i8;\n    |                  ^^^ expected i32, found i8\n+   |\n help: change the type of the numeric literal from `i8` to `i32`\n    |\n LL |     let c: i32 = 1i32;\n@@ -37,6 +38,7 @@ error[E0308]: mismatched types\n    |\n LL |     let d: i8 = c;\n    |                 ^ expected i8, found i32\n+   |\n help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     let d: i8 = c.try_into().unwrap();"}, {"sha": "1e8bff7f04aabbefc0b620f86ed11c8f21b63607", "filename": "src/test/ui/numeric/len.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     test(array.len());\n    |          ^^^^^^^^^^^ expected u32, found usize\n+   |\n help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     test(array.len().try_into().unwrap());"}, {"sha": "9f08985bdb3c6bbf8c982cf83741b5b5c3f36bfd", "filename": "src/test/ui/numeric/numeric-cast-2.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     let x: u16 = foo();\n    |                  ^^^^^ expected u16, found i32\n+   |\n help: you can convert an `i32` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     let x: u16 = foo().try_into().unwrap();\n@@ -13,6 +14,7 @@ error[E0308]: mismatched types\n    |\n LL |     let y: i64 = x + x;\n    |                  ^^^^^ expected i64, found u16\n+   |\n help: you can convert an `u16` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |     let y: i64 = (x + x).try_into().unwrap();\n@@ -23,6 +25,7 @@ error[E0308]: mismatched types\n    |\n LL |     let z: i32 = x + x;\n    |                  ^^^^^ expected i32, found u16\n+   |\n help: you can convert an `u16` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     let z: i32 = (x + x).try_into().unwrap();"}, {"sha": "983ea08402503c039dafd9cd3584ee22564760fd", "filename": "src/test/ui/numeric/numeric-cast.stderr", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_u64);\n    |                  ^^^^^ expected usize, found u64\n+   |\n help: you can convert an `u64` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_u64.try_into().unwrap());\n@@ -13,6 +14,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_u32);\n    |                  ^^^^^ expected usize, found u32\n+   |\n help: you can convert an `u32` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_u32.try_into().unwrap());\n@@ -23,6 +25,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_u16);\n    |                  ^^^^^ expected usize, found u16\n+   |\n help: you can convert an `u16` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_u16.try_into().unwrap());\n@@ -33,6 +36,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_u8);\n    |                  ^^^^ expected usize, found u8\n+   |\n help: you can convert an `u8` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_u8.try_into().unwrap());\n@@ -43,6 +47,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_isize);\n    |                  ^^^^^^^ expected usize, found isize\n+   |\n help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_isize.try_into().unwrap());\n@@ -53,6 +58,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_i64);\n    |                  ^^^^^ expected usize, found i64\n+   |\n help: you can convert an `i64` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_i64.try_into().unwrap());\n@@ -63,6 +69,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_i32);\n    |                  ^^^^^ expected usize, found i32\n+   |\n help: you can convert an `i32` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_i32.try_into().unwrap());\n@@ -73,6 +80,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_i16);\n    |                  ^^^^^ expected usize, found i16\n+   |\n help: you can convert an `i16` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_i16.try_into().unwrap());\n@@ -83,6 +91,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_i8);\n    |                  ^^^^ expected usize, found i8\n+   |\n help: you can convert an `i8` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_i8.try_into().unwrap());\n@@ -93,6 +102,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_usize);\n    |                  ^^^^^^^ expected isize, found usize\n+   |\n help: you can convert an `usize` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_usize.try_into().unwrap());\n@@ -103,6 +113,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_u64);\n    |                  ^^^^^ expected isize, found u64\n+   |\n help: you can convert an `u64` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_u64.try_into().unwrap());\n@@ -113,6 +124,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_u32);\n    |                  ^^^^^ expected isize, found u32\n+   |\n help: you can convert an `u32` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_u32.try_into().unwrap());\n@@ -123,6 +135,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_u16);\n    |                  ^^^^^ expected isize, found u16\n+   |\n help: you can convert an `u16` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_u16.try_into().unwrap());\n@@ -133,6 +146,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_u8);\n    |                  ^^^^ expected isize, found u8\n+   |\n help: you can convert an `u8` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_u8.try_into().unwrap());\n@@ -143,6 +157,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_i64);\n    |                  ^^^^^ expected isize, found i64\n+   |\n help: you can convert an `i64` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_i64.try_into().unwrap());\n@@ -153,6 +168,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_i32);\n    |                  ^^^^^ expected isize, found i32\n+   |\n help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_i32.try_into().unwrap());\n@@ -163,6 +179,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_i16);\n    |                  ^^^^^ expected isize, found i16\n+   |\n help: you can convert an `i16` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_i16.try_into().unwrap());\n@@ -173,6 +190,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_i8);\n    |                  ^^^^ expected isize, found i8\n+   |\n help: you can convert an `i8` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_i8.try_into().unwrap());\n@@ -183,6 +201,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(x_usize);\n    |                ^^^^^^^ expected u64, found usize\n+   |\n help: you can convert an `usize` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u64>(x_usize.try_into().unwrap());\n@@ -220,6 +239,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(x_isize);\n    |                ^^^^^^^ expected u64, found isize\n+   |\n help: you can convert an `isize` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u64>(x_isize.try_into().unwrap());\n@@ -230,6 +250,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(x_i64);\n    |                ^^^^^ expected u64, found i64\n+   |\n help: you can convert an `i64` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u64>(x_i64.try_into().unwrap());\n@@ -240,6 +261,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(x_i32);\n    |                ^^^^^ expected u64, found i32\n+   |\n help: you can convert an `i32` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u64>(x_i32.try_into().unwrap());\n@@ -250,6 +272,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(x_i16);\n    |                ^^^^^ expected u64, found i16\n+   |\n help: you can convert an `i16` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u64>(x_i16.try_into().unwrap());\n@@ -260,6 +283,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(x_i8);\n    |                ^^^^ expected u64, found i8\n+   |\n help: you can convert an `i8` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u64>(x_i8.try_into().unwrap());\n@@ -270,6 +294,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(x_usize);\n    |                ^^^^^^^ expected i64, found usize\n+   |\n help: you can convert an `usize` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_usize.try_into().unwrap());\n@@ -280,6 +305,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(x_u64);\n    |                ^^^^^ expected i64, found u64\n+   |\n help: you can convert an `u64` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_u64.try_into().unwrap());\n@@ -290,6 +316,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(x_u32);\n    |                ^^^^^ expected i64, found u32\n+   |\n help: you can convert an `u32` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_u32.try_into().unwrap());\n@@ -300,6 +327,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(x_u16);\n    |                ^^^^^ expected i64, found u16\n+   |\n help: you can convert an `u16` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_u16.try_into().unwrap());\n@@ -310,6 +338,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(x_u8);\n    |                ^^^^ expected i64, found u8\n+   |\n help: you can convert an `u8` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_u8.try_into().unwrap());\n@@ -320,6 +349,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(x_isize);\n    |                ^^^^^^^ expected i64, found isize\n+   |\n help: you can convert an `isize` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_isize.try_into().unwrap());\n@@ -357,6 +387,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_usize);\n    |                ^^^^^^^ expected u32, found usize\n+   |\n help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_usize.try_into().unwrap());\n@@ -367,6 +398,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_u64);\n    |                ^^^^^ expected u32, found u64\n+   |\n help: you can convert an `u64` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_u64.try_into().unwrap());\n@@ -395,6 +427,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_isize);\n    |                ^^^^^^^ expected u32, found isize\n+   |\n help: you can convert an `isize` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_isize.try_into().unwrap());\n@@ -405,6 +438,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_i64);\n    |                ^^^^^ expected u32, found i64\n+   |\n help: you can convert an `i64` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_i64.try_into().unwrap());\n@@ -415,6 +449,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_i32);\n    |                ^^^^^ expected u32, found i32\n+   |\n help: you can convert an `i32` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_i32.try_into().unwrap());\n@@ -425,6 +460,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_i16);\n    |                ^^^^^ expected u32, found i16\n+   |\n help: you can convert an `i16` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_i16.try_into().unwrap());\n@@ -435,6 +471,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_i8);\n    |                ^^^^ expected u32, found i8\n+   |\n help: you can convert an `i8` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_i8.try_into().unwrap());\n@@ -445,6 +482,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_usize);\n    |                ^^^^^^^ expected i32, found usize\n+   |\n help: you can convert an `usize` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_usize.try_into().unwrap());\n@@ -455,6 +493,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_u64);\n    |                ^^^^^ expected i32, found u64\n+   |\n help: you can convert an `u64` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_u64.try_into().unwrap());\n@@ -465,6 +504,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_u32);\n    |                ^^^^^ expected i32, found u32\n+   |\n help: you can convert an `u32` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_u32.try_into().unwrap());\n@@ -475,6 +515,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_u16);\n    |                ^^^^^ expected i32, found u16\n+   |\n help: you can convert an `u16` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_u16.try_into().unwrap());\n@@ -485,6 +526,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_u8);\n    |                ^^^^ expected i32, found u8\n+   |\n help: you can convert an `u8` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_u8.try_into().unwrap());\n@@ -495,6 +537,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_isize);\n    |                ^^^^^^^ expected i32, found isize\n+   |\n help: you can convert an `isize` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_isize.try_into().unwrap());\n@@ -505,6 +548,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_i64);\n    |                ^^^^^ expected i32, found i64\n+   |\n help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_i64.try_into().unwrap());\n@@ -533,6 +577,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_usize);\n    |                ^^^^^^^ expected u16, found usize\n+   |\n help: you can convert an `usize` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_usize.try_into().unwrap());\n@@ -543,6 +588,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_u64);\n    |                ^^^^^ expected u16, found u64\n+   |\n help: you can convert an `u64` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_u64.try_into().unwrap());\n@@ -553,6 +599,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_u32);\n    |                ^^^^^ expected u16, found u32\n+   |\n help: you can convert an `u32` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_u32.try_into().unwrap());\n@@ -572,6 +619,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_isize);\n    |                ^^^^^^^ expected u16, found isize\n+   |\n help: you can convert an `isize` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_isize.try_into().unwrap());\n@@ -582,6 +630,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_i64);\n    |                ^^^^^ expected u16, found i64\n+   |\n help: you can convert an `i64` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_i64.try_into().unwrap());\n@@ -592,6 +641,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_i32);\n    |                ^^^^^ expected u16, found i32\n+   |\n help: you can convert an `i32` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_i32.try_into().unwrap());\n@@ -602,6 +652,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_i16);\n    |                ^^^^^ expected u16, found i16\n+   |\n help: you can convert an `i16` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_i16.try_into().unwrap());\n@@ -612,6 +663,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_i8);\n    |                ^^^^ expected u16, found i8\n+   |\n help: you can convert an `i8` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_i8.try_into().unwrap());\n@@ -622,6 +674,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_usize);\n    |                ^^^^^^^ expected i16, found usize\n+   |\n help: you can convert an `usize` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_usize.try_into().unwrap());\n@@ -632,6 +685,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_u64);\n    |                ^^^^^ expected i16, found u64\n+   |\n help: you can convert an `u64` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_u64.try_into().unwrap());\n@@ -642,6 +696,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_u32);\n    |                ^^^^^ expected i16, found u32\n+   |\n help: you can convert an `u32` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_u32.try_into().unwrap());\n@@ -652,6 +707,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_u16);\n    |                ^^^^^ expected i16, found u16\n+   |\n help: you can convert an `u16` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_u16.try_into().unwrap());\n@@ -662,6 +718,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_u8);\n    |                ^^^^ expected i16, found u8\n+   |\n help: you can convert an `u8` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_u8.try_into().unwrap());\n@@ -672,6 +729,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_isize);\n    |                ^^^^^^^ expected i16, found isize\n+   |\n help: you can convert an `isize` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_isize.try_into().unwrap());\n@@ -682,6 +740,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_i64);\n    |                ^^^^^ expected i16, found i64\n+   |\n help: you can convert an `i64` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_i64.try_into().unwrap());\n@@ -692,6 +751,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_i32);\n    |                ^^^^^ expected i16, found i32\n+   |\n help: you can convert an `i32` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_i32.try_into().unwrap());\n@@ -711,6 +771,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_usize);\n    |               ^^^^^^^ expected u8, found usize\n+   |\n help: you can convert an `usize` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_usize.try_into().unwrap());\n@@ -721,6 +782,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_u64);\n    |               ^^^^^ expected u8, found u64\n+   |\n help: you can convert an `u64` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_u64.try_into().unwrap());\n@@ -731,6 +793,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_u32);\n    |               ^^^^^ expected u8, found u32\n+   |\n help: you can convert an `u32` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_u32.try_into().unwrap());\n@@ -741,6 +804,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_u16);\n    |               ^^^^^ expected u8, found u16\n+   |\n help: you can convert an `u16` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_u16.try_into().unwrap());\n@@ -751,6 +815,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_isize);\n    |               ^^^^^^^ expected u8, found isize\n+   |\n help: you can convert an `isize` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_isize.try_into().unwrap());\n@@ -761,6 +826,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_i64);\n    |               ^^^^^ expected u8, found i64\n+   |\n help: you can convert an `i64` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_i64.try_into().unwrap());\n@@ -771,6 +837,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_i32);\n    |               ^^^^^ expected u8, found i32\n+   |\n help: you can convert an `i32` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_i32.try_into().unwrap());\n@@ -781,6 +848,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_i16);\n    |               ^^^^^ expected u8, found i16\n+   |\n help: you can convert an `i16` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_i16.try_into().unwrap());\n@@ -791,6 +859,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_i8);\n    |               ^^^^ expected u8, found i8\n+   |\n help: you can convert an `i8` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_i8.try_into().unwrap());\n@@ -801,6 +870,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_usize);\n    |               ^^^^^^^ expected i8, found usize\n+   |\n help: you can convert an `usize` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_usize.try_into().unwrap());\n@@ -811,6 +881,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_u64);\n    |               ^^^^^ expected i8, found u64\n+   |\n help: you can convert an `u64` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_u64.try_into().unwrap());\n@@ -821,6 +892,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_u32);\n    |               ^^^^^ expected i8, found u32\n+   |\n help: you can convert an `u32` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_u32.try_into().unwrap());\n@@ -831,6 +903,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_u16);\n    |               ^^^^^ expected i8, found u16\n+   |\n help: you can convert an `u16` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_u16.try_into().unwrap());\n@@ -841,6 +914,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_u8);\n    |               ^^^^ expected i8, found u8\n+   |\n help: you can convert an `u8` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_u8.try_into().unwrap());\n@@ -851,6 +925,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_isize);\n    |               ^^^^^^^ expected i8, found isize\n+   |\n help: you can convert an `isize` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_isize.try_into().unwrap());\n@@ -861,6 +936,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_i64);\n    |               ^^^^^ expected i8, found i64\n+   |\n help: you can convert an `i64` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_i64.try_into().unwrap());\n@@ -871,6 +947,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_i32);\n    |               ^^^^^ expected i8, found i32\n+   |\n help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_i32.try_into().unwrap());\n@@ -881,6 +958,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_i16);\n    |               ^^^^^ expected i8, found i16\n+   |\n help: you can convert an `i16` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_i16.try_into().unwrap());\n@@ -891,6 +969,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f64>(x_usize);\n    |                ^^^^^^^ expected f64, found usize\n+   |\n help: you can cast an `usize to `f64`, producing the floating point representation of the integer,\n    |                                              rounded if necessary\n LL |     foo::<f64>(x_usize as f64);\n@@ -901,6 +980,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f64>(x_u64);\n    |                ^^^^^ expected f64, found u64\n+   |\n help: you can cast an `u64 to `f64`, producing the floating point representation of the integer,\n    |                                              rounded if necessary\n LL |     foo::<f64>(x_u64 as f64);\n@@ -911,6 +991,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f64>(x_u32);\n    |                ^^^^^ expected f64, found u32\n+   |\n help: you can convert an `u32` to `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_u32.into());\n@@ -921,6 +1002,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f64>(x_u16);\n    |                ^^^^^ expected f64, found u16\n+   |\n help: you can convert an `u16` to `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_u16.into());\n@@ -931,6 +1013,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f64>(x_u8);\n    |                ^^^^ expected f64, found u8\n+   |\n help: you can convert an `u8` to `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_u8.into());\n@@ -941,6 +1024,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f64>(x_isize);\n    |                ^^^^^^^ expected f64, found isize\n+   |\n help: you can convert an `isize` to `f64`, producing the floating point representation of the integer, rounded if necessary\n    |\n LL |     foo::<f64>(x_isize as f64);\n@@ -951,6 +1035,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f64>(x_i64);\n    |                ^^^^^ expected f64, found i64\n+   |\n help: you can convert an `i64` to `f64`, producing the floating point representation of the integer, rounded if necessary\n    |\n LL |     foo::<f64>(x_i64 as f64);\n@@ -961,6 +1046,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f64>(x_i32);\n    |                ^^^^^ expected f64, found i32\n+   |\n help: you can convert an `i32` to `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_i32.into());\n@@ -971,6 +1057,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f64>(x_i16);\n    |                ^^^^^ expected f64, found i16\n+   |\n help: you can convert an `i16` to `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_i16.into());\n@@ -981,6 +1068,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f64>(x_i8);\n    |                ^^^^ expected f64, found i8\n+   |\n help: you can convert an `i8` to `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_i8.into());\n@@ -1000,6 +1088,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f32>(x_usize);\n    |                ^^^^^^^ expected f32, found usize\n+   |\n help: you can cast an `usize to `f32`, producing the floating point representation of the integer,\n    |                                              rounded if necessary\n LL |     foo::<f32>(x_usize as f32);\n@@ -1010,6 +1099,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f32>(x_u64);\n    |                ^^^^^ expected f32, found u64\n+   |\n help: you can cast an `u64 to `f32`, producing the floating point representation of the integer,\n    |                                              rounded if necessary\n LL |     foo::<f32>(x_u64 as f32);\n@@ -1020,6 +1110,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f32>(x_u32);\n    |                ^^^^^ expected f32, found u32\n+   |\n help: you can cast an `u32 to `f32`, producing the floating point representation of the integer,\n    |                                              rounded if necessary\n LL |     foo::<f32>(x_u32 as f32);\n@@ -1030,6 +1121,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f32>(x_u16);\n    |                ^^^^^ expected f32, found u16\n+   |\n help: you can convert an `u16` to `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(x_u16.into());\n@@ -1040,6 +1132,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f32>(x_u8);\n    |                ^^^^ expected f32, found u8\n+   |\n help: you can convert an `u8` to `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(x_u8.into());\n@@ -1050,6 +1143,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f32>(x_isize);\n    |                ^^^^^^^ expected f32, found isize\n+   |\n help: you can convert an `isize` to `f32`, producing the floating point representation of the integer, rounded if necessary\n    |\n LL |     foo::<f32>(x_isize as f32);\n@@ -1060,6 +1154,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f32>(x_i64);\n    |                ^^^^^ expected f32, found i64\n+   |\n help: you can convert an `i64` to `f32`, producing the floating point representation of the integer, rounded if necessary\n    |\n LL |     foo::<f32>(x_i64 as f32);\n@@ -1070,6 +1165,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f32>(x_i32);\n    |                ^^^^^ expected f32, found i32\n+   |\n help: you can convert an `i32` to `f32`, producing the floating point representation of the integer, rounded if necessary\n    |\n LL |     foo::<f32>(x_i32 as f32);\n@@ -1080,6 +1176,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f32>(x_i16);\n    |                ^^^^^ expected f32, found i16\n+   |\n help: you can convert an `i16` to `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(x_i16.into());\n@@ -1090,6 +1187,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f32>(x_i8);\n    |                ^^^^ expected f32, found i8\n+   |\n help: you can convert an `i8` to `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(x_i8.into());"}, {"sha": "9bcae4a1888e6c8fe6f112276251d0c7bd5823dc", "filename": "src/test/ui/numeric/numeric-suffix.stderr", "status": "modified", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(42_u64);\n    |                  ^^^^^^ expected usize, found u64\n+   |\n help: change the type of the numeric literal from `u64` to `usize`\n    |\n LL |     foo::<usize>(42_usize);\n@@ -13,6 +14,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(42_u32);\n    |                  ^^^^^^ expected usize, found u32\n+   |\n help: change the type of the numeric literal from `u32` to `usize`\n    |\n LL |     foo::<usize>(42_usize);\n@@ -23,6 +25,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(42_u16);\n    |                  ^^^^^^ expected usize, found u16\n+   |\n help: change the type of the numeric literal from `u16` to `usize`\n    |\n LL |     foo::<usize>(42_usize);\n@@ -33,6 +36,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(42_u8);\n    |                  ^^^^^ expected usize, found u8\n+   |\n help: change the type of the numeric literal from `u8` to `usize`\n    |\n LL |     foo::<usize>(42_usize);\n@@ -43,6 +47,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(42_isize);\n    |                  ^^^^^^^^ expected usize, found isize\n+   |\n help: change the type of the numeric literal from `isize` to `usize`\n    |\n LL |     foo::<usize>(42_usize);\n@@ -53,6 +58,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(42_i64);\n    |                  ^^^^^^ expected usize, found i64\n+   |\n help: change the type of the numeric literal from `i64` to `usize`\n    |\n LL |     foo::<usize>(42_usize);\n@@ -63,6 +69,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(42_i32);\n    |                  ^^^^^^ expected usize, found i32\n+   |\n help: change the type of the numeric literal from `i32` to `usize`\n    |\n LL |     foo::<usize>(42_usize);\n@@ -73,6 +80,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(42_i16);\n    |                  ^^^^^^ expected usize, found i16\n+   |\n help: change the type of the numeric literal from `i16` to `usize`\n    |\n LL |     foo::<usize>(42_usize);\n@@ -83,6 +91,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(42_i8);\n    |                  ^^^^^ expected usize, found i8\n+   |\n help: change the type of the numeric literal from `i8` to `usize`\n    |\n LL |     foo::<usize>(42_usize);\n@@ -93,6 +102,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(42.0_f64);\n    |                  ^^^^^^^^ expected usize, found f64\n+   |\n help: change the type of the numeric literal from `f64` to `usize`\n    |\n LL |     foo::<usize>(42usize);\n@@ -103,6 +113,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(42.0_f32);\n    |                  ^^^^^^^^ expected usize, found f32\n+   |\n help: change the type of the numeric literal from `f32` to `usize`\n    |\n LL |     foo::<usize>(42usize);\n@@ -113,6 +124,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(42_usize);\n    |                  ^^^^^^^^ expected isize, found usize\n+   |\n help: change the type of the numeric literal from `usize` to `isize`\n    |\n LL |     foo::<isize>(42_isize);\n@@ -123,6 +135,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(42_u64);\n    |                  ^^^^^^ expected isize, found u64\n+   |\n help: change the type of the numeric literal from `u64` to `isize`\n    |\n LL |     foo::<isize>(42_isize);\n@@ -133,6 +146,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(42_u32);\n    |                  ^^^^^^ expected isize, found u32\n+   |\n help: change the type of the numeric literal from `u32` to `isize`\n    |\n LL |     foo::<isize>(42_isize);\n@@ -143,6 +157,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(42_u16);\n    |                  ^^^^^^ expected isize, found u16\n+   |\n help: change the type of the numeric literal from `u16` to `isize`\n    |\n LL |     foo::<isize>(42_isize);\n@@ -153,6 +168,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(42_u8);\n    |                  ^^^^^ expected isize, found u8\n+   |\n help: change the type of the numeric literal from `u8` to `isize`\n    |\n LL |     foo::<isize>(42_isize);\n@@ -163,6 +179,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(42_i64);\n    |                  ^^^^^^ expected isize, found i64\n+   |\n help: change the type of the numeric literal from `i64` to `isize`\n    |\n LL |     foo::<isize>(42_isize);\n@@ -173,6 +190,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(42_i32);\n    |                  ^^^^^^ expected isize, found i32\n+   |\n help: change the type of the numeric literal from `i32` to `isize`\n    |\n LL |     foo::<isize>(42_isize);\n@@ -183,6 +201,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(42_i16);\n    |                  ^^^^^^ expected isize, found i16\n+   |\n help: change the type of the numeric literal from `i16` to `isize`\n    |\n LL |     foo::<isize>(42_isize);\n@@ -193,6 +212,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(42_i8);\n    |                  ^^^^^ expected isize, found i8\n+   |\n help: change the type of the numeric literal from `i8` to `isize`\n    |\n LL |     foo::<isize>(42_isize);\n@@ -203,6 +223,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(42.0_f64);\n    |                  ^^^^^^^^ expected isize, found f64\n+   |\n help: change the type of the numeric literal from `f64` to `isize`\n    |\n LL |     foo::<isize>(42isize);\n@@ -213,6 +234,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(42.0_f32);\n    |                  ^^^^^^^^ expected isize, found f32\n+   |\n help: change the type of the numeric literal from `f32` to `isize`\n    |\n LL |     foo::<isize>(42isize);\n@@ -223,6 +245,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(42_usize);\n    |                ^^^^^^^^ expected u64, found usize\n+   |\n help: change the type of the numeric literal from `usize` to `u64`\n    |\n LL |     foo::<u64>(42_u64);\n@@ -233,6 +256,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(42_u32);\n    |                ^^^^^^ expected u64, found u32\n+   |\n help: change the type of the numeric literal from `u32` to `u64`\n    |\n LL |     foo::<u64>(42_u64);\n@@ -243,6 +267,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(42_u16);\n    |                ^^^^^^ expected u64, found u16\n+   |\n help: change the type of the numeric literal from `u16` to `u64`\n    |\n LL |     foo::<u64>(42_u64);\n@@ -253,6 +278,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(42_u8);\n    |                ^^^^^ expected u64, found u8\n+   |\n help: change the type of the numeric literal from `u8` to `u64`\n    |\n LL |     foo::<u64>(42_u64);\n@@ -263,6 +289,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(42_isize);\n    |                ^^^^^^^^ expected u64, found isize\n+   |\n help: change the type of the numeric literal from `isize` to `u64`\n    |\n LL |     foo::<u64>(42_u64);\n@@ -273,6 +300,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(42_i64);\n    |                ^^^^^^ expected u64, found i64\n+   |\n help: change the type of the numeric literal from `i64` to `u64`\n    |\n LL |     foo::<u64>(42_u64);\n@@ -283,6 +311,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(42_i32);\n    |                ^^^^^^ expected u64, found i32\n+   |\n help: change the type of the numeric literal from `i32` to `u64`\n    |\n LL |     foo::<u64>(42_u64);\n@@ -293,6 +322,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(42_i16);\n    |                ^^^^^^ expected u64, found i16\n+   |\n help: change the type of the numeric literal from `i16` to `u64`\n    |\n LL |     foo::<u64>(42_u64);\n@@ -303,6 +333,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(42_i8);\n    |                ^^^^^ expected u64, found i8\n+   |\n help: change the type of the numeric literal from `i8` to `u64`\n    |\n LL |     foo::<u64>(42_u64);\n@@ -313,6 +344,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(42.0_f64);\n    |                ^^^^^^^^ expected u64, found f64\n+   |\n help: change the type of the numeric literal from `f64` to `u64`\n    |\n LL |     foo::<u64>(42u64);\n@@ -323,6 +355,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(42.0_f32);\n    |                ^^^^^^^^ expected u64, found f32\n+   |\n help: change the type of the numeric literal from `f32` to `u64`\n    |\n LL |     foo::<u64>(42u64);\n@@ -333,6 +366,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(42_usize);\n    |                ^^^^^^^^ expected i64, found usize\n+   |\n help: change the type of the numeric literal from `usize` to `i64`\n    |\n LL |     foo::<i64>(42_i64);\n@@ -343,6 +377,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(42_u64);\n    |                ^^^^^^ expected i64, found u64\n+   |\n help: change the type of the numeric literal from `u64` to `i64`\n    |\n LL |     foo::<i64>(42_i64);\n@@ -353,6 +388,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(42_u32);\n    |                ^^^^^^ expected i64, found u32\n+   |\n help: change the type of the numeric literal from `u32` to `i64`\n    |\n LL |     foo::<i64>(42_i64);\n@@ -363,6 +399,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(42_u16);\n    |                ^^^^^^ expected i64, found u16\n+   |\n help: change the type of the numeric literal from `u16` to `i64`\n    |\n LL |     foo::<i64>(42_i64);\n@@ -373,6 +410,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(42_u8);\n    |                ^^^^^ expected i64, found u8\n+   |\n help: change the type of the numeric literal from `u8` to `i64`\n    |\n LL |     foo::<i64>(42_i64);\n@@ -383,6 +421,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(42_isize);\n    |                ^^^^^^^^ expected i64, found isize\n+   |\n help: change the type of the numeric literal from `isize` to `i64`\n    |\n LL |     foo::<i64>(42_i64);\n@@ -393,6 +432,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(42_i32);\n    |                ^^^^^^ expected i64, found i32\n+   |\n help: change the type of the numeric literal from `i32` to `i64`\n    |\n LL |     foo::<i64>(42_i64);\n@@ -403,6 +443,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(42_i16);\n    |                ^^^^^^ expected i64, found i16\n+   |\n help: change the type of the numeric literal from `i16` to `i64`\n    |\n LL |     foo::<i64>(42_i64);\n@@ -413,6 +454,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(42_i8);\n    |                ^^^^^ expected i64, found i8\n+   |\n help: change the type of the numeric literal from `i8` to `i64`\n    |\n LL |     foo::<i64>(42_i64);\n@@ -423,6 +465,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(42.0_f64);\n    |                ^^^^^^^^ expected i64, found f64\n+   |\n help: change the type of the numeric literal from `f64` to `i64`\n    |\n LL |     foo::<i64>(42i64);\n@@ -433,6 +476,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(42.0_f32);\n    |                ^^^^^^^^ expected i64, found f32\n+   |\n help: change the type of the numeric literal from `f32` to `i64`\n    |\n LL |     foo::<i64>(42i64);\n@@ -443,6 +487,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(42_usize);\n    |                ^^^^^^^^ expected u32, found usize\n+   |\n help: change the type of the numeric literal from `usize` to `u32`\n    |\n LL |     foo::<u32>(42_u32);\n@@ -453,6 +498,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(42_u64);\n    |                ^^^^^^ expected u32, found u64\n+   |\n help: change the type of the numeric literal from `u64` to `u32`\n    |\n LL |     foo::<u32>(42_u32);\n@@ -463,6 +509,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(42_u16);\n    |                ^^^^^^ expected u32, found u16\n+   |\n help: change the type of the numeric literal from `u16` to `u32`\n    |\n LL |     foo::<u32>(42_u32);\n@@ -473,6 +520,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(42_u8);\n    |                ^^^^^ expected u32, found u8\n+   |\n help: change the type of the numeric literal from `u8` to `u32`\n    |\n LL |     foo::<u32>(42_u32);\n@@ -483,6 +531,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(42_isize);\n    |                ^^^^^^^^ expected u32, found isize\n+   |\n help: change the type of the numeric literal from `isize` to `u32`\n    |\n LL |     foo::<u32>(42_u32);\n@@ -493,6 +542,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(42_i64);\n    |                ^^^^^^ expected u32, found i64\n+   |\n help: change the type of the numeric literal from `i64` to `u32`\n    |\n LL |     foo::<u32>(42_u32);\n@@ -503,6 +553,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(42_i32);\n    |                ^^^^^^ expected u32, found i32\n+   |\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n LL |     foo::<u32>(42_u32);\n@@ -513,6 +564,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(42_i16);\n    |                ^^^^^^ expected u32, found i16\n+   |\n help: change the type of the numeric literal from `i16` to `u32`\n    |\n LL |     foo::<u32>(42_u32);\n@@ -523,6 +575,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(42_i8);\n    |                ^^^^^ expected u32, found i8\n+   |\n help: change the type of the numeric literal from `i8` to `u32`\n    |\n LL |     foo::<u32>(42_u32);\n@@ -533,6 +586,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(42.0_f64);\n    |                ^^^^^^^^ expected u32, found f64\n+   |\n help: change the type of the numeric literal from `f64` to `u32`\n    |\n LL |     foo::<u32>(42u32);\n@@ -543,6 +597,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(42.0_f32);\n    |                ^^^^^^^^ expected u32, found f32\n+   |\n help: change the type of the numeric literal from `f32` to `u32`\n    |\n LL |     foo::<u32>(42u32);\n@@ -553,6 +608,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(42_usize);\n    |                ^^^^^^^^ expected i32, found usize\n+   |\n help: change the type of the numeric literal from `usize` to `i32`\n    |\n LL |     foo::<i32>(42_i32);\n@@ -563,6 +619,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(42_u64);\n    |                ^^^^^^ expected i32, found u64\n+   |\n help: change the type of the numeric literal from `u64` to `i32`\n    |\n LL |     foo::<i32>(42_i32);\n@@ -573,6 +630,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(42_u32);\n    |                ^^^^^^ expected i32, found u32\n+   |\n help: change the type of the numeric literal from `u32` to `i32`\n    |\n LL |     foo::<i32>(42_i32);\n@@ -583,6 +641,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(42_u16);\n    |                ^^^^^^ expected i32, found u16\n+   |\n help: change the type of the numeric literal from `u16` to `i32`\n    |\n LL |     foo::<i32>(42_i32);\n@@ -593,6 +652,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(42_u8);\n    |                ^^^^^ expected i32, found u8\n+   |\n help: change the type of the numeric literal from `u8` to `i32`\n    |\n LL |     foo::<i32>(42_i32);\n@@ -603,6 +663,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(42_isize);\n    |                ^^^^^^^^ expected i32, found isize\n+   |\n help: change the type of the numeric literal from `isize` to `i32`\n    |\n LL |     foo::<i32>(42_i32);\n@@ -613,6 +674,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(42_i64);\n    |                ^^^^^^ expected i32, found i64\n+   |\n help: change the type of the numeric literal from `i64` to `i32`\n    |\n LL |     foo::<i32>(42_i32);\n@@ -623,6 +685,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(42_i16);\n    |                ^^^^^^ expected i32, found i16\n+   |\n help: change the type of the numeric literal from `i16` to `i32`\n    |\n LL |     foo::<i32>(42_i32);\n@@ -633,6 +696,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(42_i8);\n    |                ^^^^^ expected i32, found i8\n+   |\n help: change the type of the numeric literal from `i8` to `i32`\n    |\n LL |     foo::<i32>(42_i32);\n@@ -643,6 +707,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(42.0_f64);\n    |                ^^^^^^^^ expected i32, found f64\n+   |\n help: change the type of the numeric literal from `f64` to `i32`\n    |\n LL |     foo::<i32>(42i32);\n@@ -653,6 +718,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(42.0_f32);\n    |                ^^^^^^^^ expected i32, found f32\n+   |\n help: change the type of the numeric literal from `f32` to `i32`\n    |\n LL |     foo::<i32>(42i32);\n@@ -663,6 +729,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(42_usize);\n    |                ^^^^^^^^ expected u16, found usize\n+   |\n help: change the type of the numeric literal from `usize` to `u16`\n    |\n LL |     foo::<u16>(42_u16);\n@@ -673,6 +740,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(42_u64);\n    |                ^^^^^^ expected u16, found u64\n+   |\n help: change the type of the numeric literal from `u64` to `u16`\n    |\n LL |     foo::<u16>(42_u16);\n@@ -683,6 +751,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(42_u32);\n    |                ^^^^^^ expected u16, found u32\n+   |\n help: change the type of the numeric literal from `u32` to `u16`\n    |\n LL |     foo::<u16>(42_u16);\n@@ -693,6 +762,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(42_u8);\n    |                ^^^^^ expected u16, found u8\n+   |\n help: change the type of the numeric literal from `u8` to `u16`\n    |\n LL |     foo::<u16>(42_u16);\n@@ -703,6 +773,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(42_isize);\n    |                ^^^^^^^^ expected u16, found isize\n+   |\n help: change the type of the numeric literal from `isize` to `u16`\n    |\n LL |     foo::<u16>(42_u16);\n@@ -713,6 +784,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(42_i64);\n    |                ^^^^^^ expected u16, found i64\n+   |\n help: change the type of the numeric literal from `i64` to `u16`\n    |\n LL |     foo::<u16>(42_u16);\n@@ -723,6 +795,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(42_i32);\n    |                ^^^^^^ expected u16, found i32\n+   |\n help: change the type of the numeric literal from `i32` to `u16`\n    |\n LL |     foo::<u16>(42_u16);\n@@ -733,6 +806,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(42_i16);\n    |                ^^^^^^ expected u16, found i16\n+   |\n help: change the type of the numeric literal from `i16` to `u16`\n    |\n LL |     foo::<u16>(42_u16);\n@@ -743,6 +817,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(42_i8);\n    |                ^^^^^ expected u16, found i8\n+   |\n help: change the type of the numeric literal from `i8` to `u16`\n    |\n LL |     foo::<u16>(42_u16);\n@@ -753,6 +828,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(42.0_f64);\n    |                ^^^^^^^^ expected u16, found f64\n+   |\n help: change the type of the numeric literal from `f64` to `u16`\n    |\n LL |     foo::<u16>(42u16);\n@@ -763,6 +839,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(42.0_f32);\n    |                ^^^^^^^^ expected u16, found f32\n+   |\n help: change the type of the numeric literal from `f32` to `u16`\n    |\n LL |     foo::<u16>(42u16);\n@@ -773,6 +850,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(42_usize);\n    |                ^^^^^^^^ expected i16, found usize\n+   |\n help: change the type of the numeric literal from `usize` to `i16`\n    |\n LL |     foo::<i16>(42_i16);\n@@ -783,6 +861,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(42_u64);\n    |                ^^^^^^ expected i16, found u64\n+   |\n help: change the type of the numeric literal from `u64` to `i16`\n    |\n LL |     foo::<i16>(42_i16);\n@@ -793,6 +872,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(42_u32);\n    |                ^^^^^^ expected i16, found u32\n+   |\n help: change the type of the numeric literal from `u32` to `i16`\n    |\n LL |     foo::<i16>(42_i16);\n@@ -803,6 +883,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(42_u16);\n    |                ^^^^^^ expected i16, found u16\n+   |\n help: change the type of the numeric literal from `u16` to `i16`\n    |\n LL |     foo::<i16>(42_i16);\n@@ -813,6 +894,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(42_u8);\n    |                ^^^^^ expected i16, found u8\n+   |\n help: change the type of the numeric literal from `u8` to `i16`\n    |\n LL |     foo::<i16>(42_i16);\n@@ -823,6 +905,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(42_isize);\n    |                ^^^^^^^^ expected i16, found isize\n+   |\n help: change the type of the numeric literal from `isize` to `i16`\n    |\n LL |     foo::<i16>(42_i16);\n@@ -833,6 +916,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(42_i64);\n    |                ^^^^^^ expected i16, found i64\n+   |\n help: change the type of the numeric literal from `i64` to `i16`\n    |\n LL |     foo::<i16>(42_i16);\n@@ -843,6 +927,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(42_i32);\n    |                ^^^^^^ expected i16, found i32\n+   |\n help: change the type of the numeric literal from `i32` to `i16`\n    |\n LL |     foo::<i16>(42_i16);\n@@ -853,6 +938,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(42_i8);\n    |                ^^^^^ expected i16, found i8\n+   |\n help: change the type of the numeric literal from `i8` to `i16`\n    |\n LL |     foo::<i16>(42_i16);\n@@ -863,6 +949,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(42.0_f64);\n    |                ^^^^^^^^ expected i16, found f64\n+   |\n help: change the type of the numeric literal from `f64` to `i16`\n    |\n LL |     foo::<i16>(42i16);\n@@ -873,6 +960,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(42.0_f32);\n    |                ^^^^^^^^ expected i16, found f32\n+   |\n help: change the type of the numeric literal from `f32` to `i16`\n    |\n LL |     foo::<i16>(42i16);\n@@ -883,6 +971,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(42_usize);\n    |               ^^^^^^^^ expected u8, found usize\n+   |\n help: change the type of the numeric literal from `usize` to `u8`\n    |\n LL |     foo::<u8>(42_u8);\n@@ -893,6 +982,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(42_u64);\n    |               ^^^^^^ expected u8, found u64\n+   |\n help: change the type of the numeric literal from `u64` to `u8`\n    |\n LL |     foo::<u8>(42_u8);\n@@ -903,6 +993,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(42_u32);\n    |               ^^^^^^ expected u8, found u32\n+   |\n help: change the type of the numeric literal from `u32` to `u8`\n    |\n LL |     foo::<u8>(42_u8);\n@@ -913,6 +1004,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(42_u16);\n    |               ^^^^^^ expected u8, found u16\n+   |\n help: change the type of the numeric literal from `u16` to `u8`\n    |\n LL |     foo::<u8>(42_u8);\n@@ -923,6 +1015,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(42_isize);\n    |               ^^^^^^^^ expected u8, found isize\n+   |\n help: change the type of the numeric literal from `isize` to `u8`\n    |\n LL |     foo::<u8>(42_u8);\n@@ -933,6 +1026,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(42_i64);\n    |               ^^^^^^ expected u8, found i64\n+   |\n help: change the type of the numeric literal from `i64` to `u8`\n    |\n LL |     foo::<u8>(42_u8);\n@@ -943,6 +1037,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(42_i32);\n    |               ^^^^^^ expected u8, found i32\n+   |\n help: change the type of the numeric literal from `i32` to `u8`\n    |\n LL |     foo::<u8>(42_u8);\n@@ -953,6 +1048,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(42_i16);\n    |               ^^^^^^ expected u8, found i16\n+   |\n help: change the type of the numeric literal from `i16` to `u8`\n    |\n LL |     foo::<u8>(42_u8);\n@@ -963,6 +1059,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(42_i8);\n    |               ^^^^^ expected u8, found i8\n+   |\n help: change the type of the numeric literal from `i8` to `u8`\n    |\n LL |     foo::<u8>(42_u8);\n@@ -973,6 +1070,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(42.0_f64);\n    |               ^^^^^^^^ expected u8, found f64\n+   |\n help: change the type of the numeric literal from `f64` to `u8`\n    |\n LL |     foo::<u8>(42u8);\n@@ -983,6 +1081,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(42.0_f32);\n    |               ^^^^^^^^ expected u8, found f32\n+   |\n help: change the type of the numeric literal from `f32` to `u8`\n    |\n LL |     foo::<u8>(42u8);\n@@ -993,6 +1092,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(42_usize);\n    |               ^^^^^^^^ expected i8, found usize\n+   |\n help: change the type of the numeric literal from `usize` to `i8`\n    |\n LL |     foo::<i8>(42_i8);\n@@ -1003,6 +1103,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(42_u64);\n    |               ^^^^^^ expected i8, found u64\n+   |\n help: change the type of the numeric literal from `u64` to `i8`\n    |\n LL |     foo::<i8>(42_i8);\n@@ -1013,6 +1114,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(42_u32);\n    |               ^^^^^^ expected i8, found u32\n+   |\n help: change the type of the numeric literal from `u32` to `i8`\n    |\n LL |     foo::<i8>(42_i8);\n@@ -1023,6 +1125,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(42_u16);\n    |               ^^^^^^ expected i8, found u16\n+   |\n help: change the type of the numeric literal from `u16` to `i8`\n    |\n LL |     foo::<i8>(42_i8);\n@@ -1033,6 +1136,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(42_u8);\n    |               ^^^^^ expected i8, found u8\n+   |\n help: change the type of the numeric literal from `u8` to `i8`\n    |\n LL |     foo::<i8>(42_i8);\n@@ -1043,6 +1147,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(42_isize);\n    |               ^^^^^^^^ expected i8, found isize\n+   |\n help: change the type of the numeric literal from `isize` to `i8`\n    |\n LL |     foo::<i8>(42_i8);\n@@ -1053,6 +1158,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(42_i64);\n    |               ^^^^^^ expected i8, found i64\n+   |\n help: change the type of the numeric literal from `i64` to `i8`\n    |\n LL |     foo::<i8>(42_i8);\n@@ -1063,6 +1169,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(42_i32);\n    |               ^^^^^^ expected i8, found i32\n+   |\n help: change the type of the numeric literal from `i32` to `i8`\n    |\n LL |     foo::<i8>(42_i8);\n@@ -1073,6 +1180,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(42_i16);\n    |               ^^^^^^ expected i8, found i16\n+   |\n help: change the type of the numeric literal from `i16` to `i8`\n    |\n LL |     foo::<i8>(42_i8);\n@@ -1083,6 +1191,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(42.0_f64);\n    |               ^^^^^^^^ expected i8, found f64\n+   |\n help: change the type of the numeric literal from `f64` to `i8`\n    |\n LL |     foo::<i8>(42i8);\n@@ -1093,6 +1202,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(42.0_f32);\n    |               ^^^^^^^^ expected i8, found f32\n+   |\n help: change the type of the numeric literal from `f32` to `i8`\n    |\n LL |     foo::<i8>(42i8);\n@@ -1103,6 +1213,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f64>(42_usize);\n    |                ^^^^^^^^ expected f64, found usize\n+   |\n help: change the type of the numeric literal from `usize` to `f64`\n    |\n LL |     foo::<f64>(42_f64);\n@@ -1113,6 +1224,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f64>(42_u64);\n    |                ^^^^^^ expected f64, found u64\n+   |\n help: change the type of the numeric literal from `u64` to `f64`\n    |\n LL |     foo::<f64>(42_f64);\n@@ -1123,6 +1235,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f64>(42_u32);\n    |                ^^^^^^ expected f64, found u32\n+   |\n help: you can convert an `u32` to `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(42_u32.into());\n@@ -1133,6 +1246,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f64>(42_u16);\n    |                ^^^^^^ expected f64, found u16\n+   |\n help: you can convert an `u16` to `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(42_u16.into());\n@@ -1143,6 +1257,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f64>(42_u8);\n    |                ^^^^^ expected f64, found u8\n+   |\n help: you can convert an `u8` to `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(42_u8.into());\n@@ -1153,6 +1268,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f64>(42_isize);\n    |                ^^^^^^^^ expected f64, found isize\n+   |\n help: change the type of the numeric literal from `isize` to `f64`\n    |\n LL |     foo::<f64>(42_f64);\n@@ -1163,6 +1279,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f64>(42_i64);\n    |                ^^^^^^ expected f64, found i64\n+   |\n help: change the type of the numeric literal from `i64` to `f64`\n    |\n LL |     foo::<f64>(42_f64);\n@@ -1173,6 +1290,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f64>(42_i32);\n    |                ^^^^^^ expected f64, found i32\n+   |\n help: you can convert an `i32` to `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(42_i32.into());\n@@ -1183,6 +1301,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f64>(42_i16);\n    |                ^^^^^^ expected f64, found i16\n+   |\n help: you can convert an `i16` to `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(42_i16.into());\n@@ -1193,6 +1312,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f64>(42_i8);\n    |                ^^^^^ expected f64, found i8\n+   |\n help: you can convert an `i8` to `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(42_i8.into());\n@@ -1203,6 +1323,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f64>(42.0_f32);\n    |                ^^^^^^^^ expected f64, found f32\n+   |\n help: change the type of the numeric literal from `f32` to `f64`\n    |\n LL |     foo::<f64>(42.0_f64);\n@@ -1213,6 +1334,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f32>(42_usize);\n    |                ^^^^^^^^ expected f32, found usize\n+   |\n help: change the type of the numeric literal from `usize` to `f32`\n    |\n LL |     foo::<f32>(42_f32);\n@@ -1223,6 +1345,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f32>(42_u64);\n    |                ^^^^^^ expected f32, found u64\n+   |\n help: change the type of the numeric literal from `u64` to `f32`\n    |\n LL |     foo::<f32>(42_f32);\n@@ -1233,6 +1356,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f32>(42_u32);\n    |                ^^^^^^ expected f32, found u32\n+   |\n help: change the type of the numeric literal from `u32` to `f32`\n    |\n LL |     foo::<f32>(42_f32);\n@@ -1243,6 +1367,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f32>(42_u16);\n    |                ^^^^^^ expected f32, found u16\n+   |\n help: you can convert an `u16` to `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(42_u16.into());\n@@ -1253,6 +1378,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f32>(42_u8);\n    |                ^^^^^ expected f32, found u8\n+   |\n help: you can convert an `u8` to `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(42_u8.into());\n@@ -1263,6 +1389,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f32>(42_isize);\n    |                ^^^^^^^^ expected f32, found isize\n+   |\n help: change the type of the numeric literal from `isize` to `f32`\n    |\n LL |     foo::<f32>(42_f32);\n@@ -1273,6 +1400,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f32>(42_i64);\n    |                ^^^^^^ expected f32, found i64\n+   |\n help: change the type of the numeric literal from `i64` to `f32`\n    |\n LL |     foo::<f32>(42_f32);\n@@ -1283,6 +1411,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f32>(42_i32);\n    |                ^^^^^^ expected f32, found i32\n+   |\n help: change the type of the numeric literal from `i32` to `f32`\n    |\n LL |     foo::<f32>(42_f32);\n@@ -1293,6 +1422,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f32>(42_i16);\n    |                ^^^^^^ expected f32, found i16\n+   |\n help: you can convert an `i16` to `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(42_i16.into());\n@@ -1303,6 +1433,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f32>(42_i8);\n    |                ^^^^^ expected f32, found i8\n+   |\n help: you can convert an `i8` to `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(42_i8.into());\n@@ -1313,6 +1444,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<f32>(42.0_f64);\n    |                ^^^^^^^^ expected f32, found f64\n+   |\n help: change the type of the numeric literal from `f64` to `f32`\n    |\n LL |     foo::<f32>(42.0_f32);"}, {"sha": "b9aad01b2929ab6c1bcb16e5a955c8044d33db65", "filename": "src/test/ui/obsolete-in-place/bad.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: unexpected token: `<-`\n    |\n LL |     x <- y;\n    |       ^^\n+   |\n help: if you meant to write a comparison against a negative value, add a space in between `<` and `-`\n    |\n LL |     x < - y;"}, {"sha": "ac0cf0f1f08fa785e79f8a2fd96c1184f3dab773", "filename": "src/test/ui/on-unimplemented/bad-annotation.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: malformed `rustc_on_unimplemented` attribute input\n    |\n LL | #[rustc_on_unimplemented]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n help: the following are the possible correct uses\n    |\n LL | #[rustc_on_unimplemented(/*opt*/ message = \"...\", /*opt*/ label = \"...\", /*opt*/ note = \"...\")]"}, {"sha": "24be32ae9eba679aa052e5acd88bf6b4f425c159", "filename": "src/test/ui/parenthesized-deref-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparenthesized-deref-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparenthesized-deref-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparenthesized-deref-suggestion.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0609]: no field `opts` on type `*const Session`\n    |\n LL |     (sess as *const Session).opts;\n    |                              ^^^^\n+   |\n help: `(sess as *const Session)` is a raw pointer; try dereferencing it\n    |\n LL |     (*(sess as *const Session)).opts;"}, {"sha": "7d0bb0965b6fe7763e5be704988d19a5f5cab0a9", "filename": "src/test/ui/parser/associated-types-project-from-hrtb-explicit.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fassociated-types-project-from-hrtb-explicit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fassociated-types-project-from-hrtb-explicit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassociated-types-project-from-hrtb-explicit.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `for`\n    |\n LL | fn foo2<I>(x: <I as for<'x> Foo<&'x isize>>::A)\n    |                     ^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | fn foo2<I>(x: <I as r#for<'x> Foo<&'x isize>>::A)"}, {"sha": "b59ea97e3b1e0e84988c5b76bf94458bb3514228", "filename": "src/test/ui/parser/bad-value-ident-false.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fbad-value-ident-false.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fbad-value-ident-false.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-value-ident-false.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `false`\n    |\n LL | fn false() { }\n    |    ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | fn r#false() { }"}, {"sha": "12132b0856bf128dfc9749616d3a4f600505131f", "filename": "src/test/ui/parser/bad-value-ident-true.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fbad-value-ident-true.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fbad-value-ident-true.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-value-ident-true.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `true`\n    |\n LL | fn true() { }\n    |    ^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | fn r#true() { }"}, {"sha": "4dcc914f25d79b4b61ceb6dd94cea0bc1c0a69a6", "filename": "src/test/ui/parser/expr-as-stmt.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -35,6 +35,7 @@ error: expected expression, found `>`\n    |\n LL |     } > 0\n    |       ^ expected expression\n+   |\n help: parentheses are required to parse this as an expression\n    |\n LL |     (match x {"}, {"sha": "47c275110b429b0320e40cd2cb2dc850cc06538b", "filename": "src/test/ui/parser/issue-15980.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fissue-15980.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fissue-15980.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-15980.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -6,6 +6,7 @@ LL |         Err(ref e) if e.kind == io::EndOfFile {\n LL |\n LL |             return\n    |             ^^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |             r#return"}, {"sha": "479e7bed1016a32081913f88b92cbbeb76576486", "filename": "src/test/ui/parser/issue-33418.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fissue-33418.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fissue-33418.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-33418.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,20 +3,23 @@ error: negative trait bounds are not supported\n    |\n LL | trait Tr: !SuperA {}\n    |         ^^^^^^^^^ negative trait bounds are not supported\n+   |\n    = help: remove the trait bound\n \n error: negative trait bounds are not supported\n   --> $DIR/issue-33418.rs:5:19\n    |\n LL | trait Tr2: SuperA + !SuperB {}\n    |                   ^^^^^^^^^ negative trait bounds are not supported\n+   |\n    = help: remove the trait bound\n \n error: negative trait bounds are not supported\n   --> $DIR/issue-33418.rs:7:10\n    |\n LL | trait Tr3: !SuperA + SuperB {}\n    |          ^^^^^^^^^ negative trait bounds are not supported\n+   |\n    = help: remove the trait bound\n \n error: negative trait bounds are not supported\n@@ -26,6 +29,7 @@ LL | trait Tr4: !SuperA + SuperB\n    |          ^^^^^^^^^\n LL |     + !SuperC + SuperD {}\n    |     ^^^^^^^^^ negative trait bounds are not supported\n+   |\n    = help: remove the trait bounds\n \n error: negative trait bounds are not supported\n@@ -35,6 +39,7 @@ LL | trait Tr5: !SuperA\n    |          ^^^^^^^^^\n LL |     + !SuperB {}\n    |     ^^^^^^^^^ negative trait bounds are not supported\n+   |\n    = help: remove the trait bounds\n \n error: aborting due to 5 previous errors"}, {"sha": "14869e9c8f5e64645f20dc7f72e9548a92b9dfee", "filename": "src/test/ui/parser/issue-62895.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fissue-62895.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fissue-62895.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62895.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -15,6 +15,7 @@ error: missing `fn` for function definition\n    |\n LL | pub    g() -> is\n    |    ^^^^\n+   |\n help: add `fn` here to parse `g` as a public function\n    |\n LL | pub fn g() -> is"}, {"sha": "e73776dc7b465e92d098b829d6f5eef0391641fe", "filename": "src/test/ui/parser/issue-62973.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fissue-62973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fissue-62973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62973.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -25,6 +25,7 @@ LL |   fn p() { match s { v, E { [) {) }\n LL | |\n LL | |\n    | |_^\n+   |\n help: surround the struct literal with parentheses\n    |\n LL | fn p() { match (s { v, E { [) {) }"}, {"sha": "b355b3a708d4531fa5d0110645a004196121b3f7", "filename": "src/test/ui/parser/keyword-abstract.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-abstract.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-abstract.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-abstract.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found reserved keyword `abstract`\n    |\n LL |     let abstract = ();\n    |         ^^^^^^^^ expected identifier, found reserved keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#abstract = ();"}, {"sha": "dea4afd5c0a1ca87551bd62e2db8a8d7aa682d73", "filename": "src/test/ui/parser/keyword-as-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-as-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-as-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-as-as-identifier.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `as`\n    |\n LL |     let as = \"foo\";\n    |         ^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#as = \"foo\";"}, {"sha": "db05f3956a2a991d29e039a1269cb7dfc5363a45", "filename": "src/test/ui/parser/keyword-break-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-break-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-break-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-break-as-identifier.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `break`\n    |\n LL |     let break = \"foo\";\n    |         ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#break = \"foo\";"}, {"sha": "45c129960ecef342b03a00ffa25c2280bf4a63c3", "filename": "src/test/ui/parser/keyword-const-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-const-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-const-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-const-as-identifier.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `const`\n    |\n LL |     let const = \"foo\";\n    |         ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#const = \"foo\";"}, {"sha": "2ec4b28c94e09eb249969306e69c56faf5ff062a", "filename": "src/test/ui/parser/keyword-continue-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-continue-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-continue-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-continue-as-identifier.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `continue`\n    |\n LL |     let continue = \"foo\";\n    |         ^^^^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#continue = \"foo\";"}, {"sha": "b622806e9166907c684e5b9ec7131f93810f8169", "filename": "src/test/ui/parser/keyword-else-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-else-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-else-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-else-as-identifier.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `else`\n    |\n LL |     let else = \"foo\";\n    |         ^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#else = \"foo\";"}, {"sha": "0f3fa3fb624dce88517c3be01e71d573b53f1268", "filename": "src/test/ui/parser/keyword-enum-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-enum-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-enum-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-enum-as-identifier.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `enum`\n    |\n LL |     let enum = \"foo\";\n    |         ^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#enum = \"foo\";"}, {"sha": "c74e3101729d493835ca9355bc96bd58ca354cb9", "filename": "src/test/ui/parser/keyword-final.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-final.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-final.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-final.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found reserved keyword `final`\n    |\n LL |     let final = ();\n    |         ^^^^^ expected identifier, found reserved keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#final = ();"}, {"sha": "3219eaf24f94f70033d3e6978914955b8a6f9c55", "filename": "src/test/ui/parser/keyword-fn-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-fn-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-fn-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-fn-as-identifier.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `fn`\n    |\n LL |     let fn = \"foo\";\n    |         ^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#fn = \"foo\";"}, {"sha": "30974af74248f20eb5e9b7a172ec1440b3a123ac", "filename": "src/test/ui/parser/keyword-for-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-for-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-for-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-for-as-identifier.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `for`\n    |\n LL |     let for = \"foo\";\n    |         ^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#for = \"foo\";"}, {"sha": "a72030befb38da8472074347676a15c8eb638ca1", "filename": "src/test/ui/parser/keyword-if-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-if-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-if-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-if-as-identifier.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `if`\n    |\n LL |     let if = \"foo\";\n    |         ^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#if = \"foo\";"}, {"sha": "e51c60ed494f3f427f80833c58483c291c126574", "filename": "src/test/ui/parser/keyword-impl-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-impl-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-impl-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-impl-as-identifier.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `impl`\n    |\n LL |     let impl = \"foo\";\n    |         ^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#impl = \"foo\";"}, {"sha": "d580b4518098ccfbf5f3d966a01f35f5b5924a4b", "filename": "src/test/ui/parser/keyword-let-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-let-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-let-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-let-as-identifier.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `let`\n    |\n LL |     let let = \"foo\";\n    |         ^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#let = \"foo\";"}, {"sha": "15c008da353556d3610bb4718274bd427448423c", "filename": "src/test/ui/parser/keyword-loop-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-loop-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-loop-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-loop-as-identifier.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `loop`\n    |\n LL |     let loop = \"foo\";\n    |         ^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#loop = \"foo\";"}, {"sha": "5ba63965c87be9d25d9719660c37b0fa5e8fda9a", "filename": "src/test/ui/parser/keyword-match-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-match-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-match-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-match-as-identifier.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `match`\n    |\n LL |     let match = \"foo\";\n    |         ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#match = \"foo\";"}, {"sha": "7fb1bda3fb0536950c7acdedbaf699d3cbe6081e", "filename": "src/test/ui/parser/keyword-mod-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-mod-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-mod-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-mod-as-identifier.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `mod`\n    |\n LL |     let mod = \"foo\";\n    |         ^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#mod = \"foo\";"}, {"sha": "9721c88cb165d6c2f55cbab9fc3fc1162ff9df71", "filename": "src/test/ui/parser/keyword-move-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-move-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-move-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-move-as-identifier.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `move`\n    |\n LL |     let move = \"foo\";\n    |         ^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#move = \"foo\";"}, {"sha": "8bbc6fc654750fc82eae70bde7b77e72afd08798", "filename": "src/test/ui/parser/keyword-override.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-override.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-override.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-override.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found reserved keyword `override`\n    |\n LL |     let override = ();\n    |         ^^^^^^^^ expected identifier, found reserved keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#override = ();"}, {"sha": "10ff53e29161ef8f9c957c2110c9cd6f01de14d6", "filename": "src/test/ui/parser/keyword-pub-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-pub-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-pub-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-pub-as-identifier.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `pub`\n    |\n LL |     let pub = \"foo\";\n    |         ^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#pub = \"foo\";"}, {"sha": "5b5f2b7ed54fe893e9324fcfd5663f6b279ee85c", "filename": "src/test/ui/parser/keyword-return-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-return-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-return-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-return-as-identifier.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `return`\n    |\n LL |     let return = \"foo\";\n    |         ^^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#return = \"foo\";"}, {"sha": "81aeb9e37abb3650cb511d44b0e48bb70e2ce33b", "filename": "src/test/ui/parser/keyword-static-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-static-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-static-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-static-as-identifier.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `static`\n    |\n LL |     let static = \"foo\";\n    |         ^^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#static = \"foo\";"}, {"sha": "1b287b60197f4a3c15d928ca2bee484b0916f6d2", "filename": "src/test/ui/parser/keyword-struct-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-struct-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-struct-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-struct-as-identifier.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `struct`\n    |\n LL |     let struct = \"foo\";\n    |         ^^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#struct = \"foo\";"}, {"sha": "c3d4d61dbb72a28119639583c7c4aa02d35382cf", "filename": "src/test/ui/parser/keyword-trait-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-trait-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-trait-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-trait-as-identifier.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `trait`\n    |\n LL |     let trait = \"foo\";\n    |         ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#trait = \"foo\";"}, {"sha": "fcd717d6e67127b73a8c3a715906537a4cb5b9c6", "filename": "src/test/ui/parser/keyword-try-as-identifier-edition2018.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-try-as-identifier-edition2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-try-as-identifier-edition2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-try-as-identifier-edition2018.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found reserved keyword `try`\n    |\n LL |     let try = \"foo\";\n    |         ^^^ expected identifier, found reserved keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#try = \"foo\";"}, {"sha": "dfe1958e78fd7e0a823318f5052ac36578596203", "filename": "src/test/ui/parser/keyword-type-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-type-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-type-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-type-as-identifier.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `type`\n    |\n LL |     let type = \"foo\";\n    |         ^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#type = \"foo\";"}, {"sha": "7cef6de0cee80f6c4e73209ce7de3591763711ac", "filename": "src/test/ui/parser/keyword-typeof.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-typeof.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-typeof.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-typeof.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found reserved keyword `typeof`\n    |\n LL |     let typeof = ();\n    |         ^^^^^^ expected identifier, found reserved keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#typeof = ();"}, {"sha": "d714a99dac44995b7c0c4d0b9b325399c9f5c5d3", "filename": "src/test/ui/parser/keyword-unsafe-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-unsafe-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-unsafe-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-unsafe-as-identifier.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `unsafe`\n    |\n LL |     let unsafe = \"foo\";\n    |         ^^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#unsafe = \"foo\";"}, {"sha": "30a6c5b16a354fe2b3a0c19853429d90693f38d7", "filename": "src/test/ui/parser/keyword-use-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-use-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-use-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-use-as-identifier.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `use`\n    |\n LL |     let use = \"foo\";\n    |         ^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#use = \"foo\";"}, {"sha": "38d734ab81244ff67244264c304286e278baba9d", "filename": "src/test/ui/parser/keyword-where-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-where-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-where-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-where-as-identifier.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `where`\n    |\n LL |     let where = \"foo\";\n    |         ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#where = \"foo\";"}, {"sha": "22b5454add8b95fd1128606bd7033f9a96fdaa52", "filename": "src/test/ui/parser/keyword-while-as-identifier.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-while-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword-while-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword-while-as-identifier.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `while`\n    |\n LL |     let while = \"foo\";\n    |         ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#while = \"foo\";"}, {"sha": "c179f4ec56089d5b6792680934242e460caf886d", "filename": "src/test/ui/parser/keyword.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fkeyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkeyword.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `break`\n    |\n LL | pub mod break {\n    |         ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | pub mod r#break {"}, {"sha": "3a545ee282660426e59e41057325408ed7e0ff7c", "filename": "src/test/ui/parser/lex-bad-char-literals-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-2.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: character literal may only contain one codepoint\n    |\n LL |     'nope'\n    |     ^^^^^^\n+   |\n help: if you meant to write a `str` literal, use double quotes\n    |\n LL |     \"nope\""}, {"sha": "ec661ee2a60d4b4d898696463a94a77f03a4832c", "filename": "src/test/ui/parser/lex-bad-char-literals-3.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-3.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: character literal may only contain one codepoint\n    |\n LL | static c: char = '\u25cf\u25cf';\n    |                  ^^^^\n+   |\n help: if you meant to write a `str` literal, use double quotes\n    |\n LL | static c: char = \"\u25cf\u25cf\";\n@@ -13,6 +14,7 @@ error: character literal may only contain one codepoint\n    |\n LL |     let ch: &str = '\u25cf\u25cf';\n    |                    ^^^^\n+   |\n help: if you meant to write a `str` literal, use double quotes\n    |\n LL |     let ch: &str = \"\u25cf\u25cf\";"}, {"sha": "334165a962a06b637a30e64a84aeac192c06086c", "filename": "src/test/ui/parser/lex-bad-char-literals-5.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-5.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: character literal may only contain one codepoint\n    |\n LL | static c: char = '\\x10\\x10';\n    |                  ^^^^^^^^^^\n+   |\n help: if you meant to write a `str` literal, use double quotes\n    |\n LL | static c: char = \"\\x10\\x10\";\n@@ -13,6 +14,7 @@ error: character literal may only contain one codepoint\n    |\n LL |     let ch: &str = '\\x10\\x10';\n    |                    ^^^^^^^^^^\n+   |\n help: if you meant to write a `str` literal, use double quotes\n    |\n LL |     let ch: &str = \"\\x10\\x10\";"}, {"sha": "662cf2657e7b5fe27a3dfb52fdf02f5d07d657d5", "filename": "src/test/ui/parser/lex-bad-char-literals-6.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-6.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: character literal may only contain one codepoint\n    |\n LL |     let x: &str = 'ab';\n    |                   ^^^^\n+   |\n help: if you meant to write a `str` literal, use double quotes\n    |\n LL |     let x: &str = \"ab\";\n@@ -13,6 +14,7 @@ error: character literal may only contain one codepoint\n    |\n LL |     let y: char = 'cd';\n    |                   ^^^^\n+   |\n help: if you meant to write a `str` literal, use double quotes\n    |\n LL |     let y: char = \"cd\";\n@@ -23,6 +25,7 @@ error: character literal may only contain one codepoint\n    |\n LL |     let z = 'ef';\n    |             ^^^^\n+   |\n help: if you meant to write a `str` literal, use double quotes\n    |\n LL |     let z = \"ef\";"}, {"sha": "9fe95c3fd3dd06bf68ac8a455dd8b4d7da4b8680", "filename": "src/test/ui/parser/macro-keyword.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fmacro-keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fmacro-keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro-keyword.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found reserved keyword `macro`\n    |\n LL | fn macro() {\n    |    ^^^^^ expected identifier, found reserved keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | fn r#macro() {"}, {"sha": "980ceeed8c64d22af821aa706826406503a0c43d", "filename": "src/test/ui/parser/macros-no-semicolon-items.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fmacros-no-semicolon-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fmacros-no-semicolon-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacros-no-semicolon-items.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: macros that expand to items must be delimited with braces or followed by\n    |\n LL | macro_rules! foo()\n    |                 ^^\n+   |\n help: change the delimiters to curly braces\n    |\n LL | macro_rules! foo {}\n@@ -22,6 +23,7 @@ LL | |     blah\n LL | |     blah\n LL | | )\n    | |_^\n+   |\n help: change the delimiters to curly braces\n    |\n LL | bar! {"}, {"sha": "3bc451e84e6064af2e05bc9335ee77f638c86d0c", "filename": "src/test/ui/parser/match-arrows-block-then-binop.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fmatch-arrows-block-then-binop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fmatch-arrows-block-then-binop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-arrows-block-then-binop.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected pattern, found `+`\n    |\n LL |       } + 5\n    |         ^ expected pattern\n+   |\n help: parentheses are required to parse this as an expression\n    |\n LL |       0 => ({"}, {"sha": "a0e290a834dfeb8e44ed0a2f1e473f7baabdfd22", "filename": "src/test/ui/parser/mut-patterns.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -47,6 +47,7 @@ error: expected identifier, found reserved keyword `yield`\n    |\n LL |     let mut mut yield(become, await) = r#yield(0, 0);\n    |                 ^^^^^ expected identifier, found reserved keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let mut mut r#yield(become, await) = r#yield(0, 0);\n@@ -57,6 +58,7 @@ error: expected identifier, found reserved keyword `become`\n    |\n LL |     let mut mut yield(become, await) = r#yield(0, 0);\n    |                       ^^^^^^ expected identifier, found reserved keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let mut mut yield(r#become, await) = r#yield(0, 0);\n@@ -67,6 +69,7 @@ error: expected identifier, found keyword `await`\n    |\n LL |     let mut mut yield(become, await) = r#yield(0, 0);\n    |                               ^^^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let mut mut yield(become, r#await) = r#yield(0, 0);"}, {"sha": "f129e1e372f1a66b80c8f038a8503017fb0d31c9", "filename": "src/test/ui/parser/range_inclusive_dotdotdot.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Frange_inclusive_dotdotdot.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Frange_inclusive_dotdotdot.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frange_inclusive_dotdotdot.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: unexpected token: `...`\n    |\n LL |     return ...1;\n    |            ^^^\n+   |\n help: use `..` for an exclusive range\n    |\n LL |     return ..1;\n@@ -17,6 +18,7 @@ error: unexpected token: `...`\n    |\n LL |     let x = ...0;\n    |             ^^^\n+   |\n help: use `..` for an exclusive range\n    |\n LL |     let x = ..0;\n@@ -31,6 +33,7 @@ error: unexpected token: `...`\n    |\n LL |     let x = 5...5;\n    |              ^^^\n+   |\n help: use `..` for an exclusive range\n    |\n LL |     let x = 5..5;\n@@ -45,6 +48,7 @@ error: unexpected token: `...`\n    |\n LL |     for _ in 0...1 {}\n    |               ^^^\n+   |\n help: use `..` for an exclusive range\n    |\n LL |     for _ in 0..1 {}"}, {"sha": "ec7d041647a9f43e12f7ef9a5fd5e43817dd4ead", "filename": "src/test/ui/parser/recover-from-homoglyph.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Frecover-from-homoglyph.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Frecover-from-homoglyph.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-homoglyph.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: unknown start of token: \\u{37e}\n    |\n LL |     println!(\"\")\u037e\n    |                 ^\n+   |\n help: Unicode character '\u037e' (Greek Question Mark) looks like ';' (Semicolon), but it is not\n    |\n LL |     println!(\"\");"}, {"sha": "0d15151b7d4517c0ac9873b6b08a71c033df553c", "filename": "src/test/ui/parser/removed-syntax-field-let.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-let.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `let`\n    |\n LL |     let foo: (),\n    |     ^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     r#let foo: (),"}, {"sha": "85478dcd1dce599715ea07df7359f9b9a9959deb", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -15,6 +15,7 @@ error: chained comparison operators require parentheses\n    |\n LL |     f<X>();\n    |      ^^^\n+   |\n help: use `::<...>` instead of `<...>` to specify type arguments\n    |\n LL |     f::<X>();\n@@ -25,6 +26,7 @@ error: chained comparison operators require parentheses\n    |\n LL |     f<Result<Option<X>, Option<Option<X>>>(1, 2);\n    |      ^^^^^^^^\n+   |\n help: use `::<...>` instead of `<...>` to specify type arguments\n    |\n LL |     f::<Result<Option<X>, Option<Option<X>>>(1, 2);"}, {"sha": "2e59914864abd0fa8d8ecd817ba87b7ff7fffd31", "filename": "src/test/ui/parser/struct-literal-in-for.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -6,6 +6,7 @@ LL |       for x in Foo {\n LL | |         x: 3\n LL | |     }.hi() {\n    | |_____^\n+   |\n help: surround the struct literal with parentheses\n    |\n LL |     for x in (Foo {"}, {"sha": "7a64a42e3c8aa13195ed5a57ad97d487cf463cc5", "filename": "src/test/ui/parser/struct-literal-in-if.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-if.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -6,6 +6,7 @@ LL |       if Foo {\n LL | |         x: 3\n LL | |     }.hi() {\n    | |_____^\n+   |\n help: surround the struct literal with parentheses\n    |\n LL |     if (Foo {"}, {"sha": "98077761e01ccf590383424f53f6daa9694ed913", "filename": "src/test/ui/parser/struct-literal-in-match-discriminant.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-match-discriminant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-match-discriminant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-match-discriminant.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -6,6 +6,7 @@ LL |       match Foo {\n LL | |         x: 3\n LL | |     } {\n    | |_____^\n+   |\n help: surround the struct literal with parentheses\n    |\n LL |     match (Foo {"}, {"sha": "a14df3a220e752251e8b0af11b1f54e460a0508a", "filename": "src/test/ui/parser/struct-literal-in-while.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-while.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -6,6 +6,7 @@ LL |       while Foo {\n LL | |         x: 3\n LL | |     }.hi() {\n    | |_____^\n+   |\n help: surround the struct literal with parentheses\n    |\n LL |     while (Foo {"}, {"sha": "38f4a986e12d4d8ab29a0a1e63ac1ddf8943eab2", "filename": "src/test/ui/parser/struct-literal-restrictions-in-lamda.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -6,6 +6,7 @@ LL |       while || Foo {\n LL | |         x: 3\n LL | |     }.hi() {\n    | |_____^\n+   |\n help: surround the struct literal with parentheses\n    |\n LL |     while || (Foo {"}, {"sha": "4e14eda8f2bfabd4f92fa8c9aacc21e43f8d87b2", "filename": "src/test/ui/parser/unicode-chars.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Funicode-chars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Funicode-chars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funicode-chars.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: unknown start of token: \\u{37e}\n    |\n LL |     let y = 0\u037e\n    |              ^\n+   |\n help: Unicode character '\u037e' (Greek Question Mark) looks like ';' (Semicolon), but it is not\n    |\n LL |     let y = 0;"}, {"sha": "4b0cb96ed211f8a48ba19b4747213544a247b737", "filename": "src/test/ui/parser/unicode-quote-chars.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Funicode-quote-chars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Funicode-quote-chars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funicode-quote-chars.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: unknown start of token: \\u{201c}\n    |\n LL |     println!(\u201chello world\u201d);\n    |              ^\n+   |\n help: Unicode characters '\u201c' (Left Double Quotation Mark) and '\u201d' (Right Double Quotation Mark) look like '\"' (Quotation Mark), but are not\n    |\n LL |     println!(\"hello world\");\n@@ -13,6 +14,7 @@ error: unknown start of token: \\u{201d}\n    |\n LL |     println!(\u201chello world\u201d);\n    |                          ^\n+   |\n help: Unicode character '\u201d' (Right Double Quotation Mark) looks like '\"' (Quotation Mark), but it is not\n    |\n LL |     println!(\u201chello world\");"}, {"sha": "c73e17d2fc9af64f8c67fe6836c3689342686354", "filename": "src/test/ui/parser/use-as-where-use-ends-with-mod-sep.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fuse-as-where-use-ends-with-mod-sep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fparser%2Fuse-as-where-use-ends-with-mod-sep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fuse-as-where-use-ends-with-mod-sep.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `as`\n    |\n LL | use std::any:: as foo;\n    |                ^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | use std::any:: r#as foo;"}, {"sha": "1a76f7c222fc27f54201248c3b00b741473d783c", "filename": "src/test/ui/placement-syntax.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fplacement-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fplacement-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fplacement-syntax.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: unexpected token: `<-`\n    |\n LL |     if x<-1 {\n    |         ^^\n+   |\n help: if you meant to write a comparison against a negative value, add a space in between `<` and `-`\n    |\n LL |     if x< -1 {"}, {"sha": "0886622247a772ac2e5cc21d0dabc8a919ebe4b0", "filename": "src/test/ui/pptypedef.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fpptypedef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fpptypedef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpptypedef.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     let_in(3u32, |i| { assert!(i == 3i32); });\n    |                                     ^^^^ expected u32, found i32\n+   |\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n LL |     let_in(3u32, |i| { assert!(i == 3u32); });\n@@ -13,6 +14,7 @@ error[E0308]: mismatched types\n    |\n LL |     let_in(3i32, |i| { assert!(i == 3u32); });\n    |                                     ^^^^ expected i32, found u32\n+   |\n help: change the type of the numeric literal from `u32` to `i32`\n    |\n LL |     let_in(3i32, |i| { assert!(i == 3i32); });"}, {"sha": "16da57a78e092777f0e371ece3376bb6a3b02dff", "filename": "src/test/ui/privacy/privacy-ns1.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0423]: expected function, found trait `Bar`\n    |\n LL |     Bar();\n    |     ^^^\n+   |\n help: a unit struct with a similar name exists\n    |\n LL |     Baz();\n@@ -21,6 +22,7 @@ error[E0573]: expected type, found function `Bar`\n    |\n LL |     let _x: Box<Bar>;\n    |                 ^^^\n+   |\n help: a struct with a similar name exists\n    |\n LL |     let _x: Box<Baz>;\n@@ -39,6 +41,7 @@ error[E0425]: cannot find function `Bar` in this scope\n    |\n LL |     Bar();\n    |     ^^^\n+   |\n help: a unit struct with a similar name exists\n    |\n LL |     Baz();\n@@ -57,6 +60,7 @@ error[E0412]: cannot find type `Bar` in this scope\n    |\n LL |     let _x: Box<Bar>;\n    |                 ^^^\n+   |\n help: a struct with a similar name exists\n    |\n LL |     let _x: Box<Baz>;"}, {"sha": "f0d5da6868596168d7aca8eecd41a3d2dec431f7", "filename": "src/test/ui/privacy/privacy-ns2.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0423]: expected function, found trait `Bar`\n    |\n LL |     Bar();\n    |     ^^^ not a function\n+   |\n help: possible better candidates are found in other modules, you can import them into scope\n    |\n LL | use foo1::Bar;\n@@ -17,6 +18,7 @@ error[E0423]: expected function, found trait `Bar`\n    |\n LL |     Bar();\n    |     ^^^\n+   |\n help: a unit struct with a similar name exists\n    |\n LL |     Baz();\n@@ -35,6 +37,7 @@ error[E0573]: expected type, found function `Bar`\n    |\n LL |     let _x : Box<Bar>;\n    |                  ^^^ not a type\n+   |\n help: possible better candidates are found in other modules, you can import them into scope\n    |\n LL | use foo1::Bar;\n@@ -49,6 +52,7 @@ error[E0573]: expected type, found function `Bar`\n    |\n LL |     let _x: Box<Bar>;\n    |                 ^^^\n+   |\n help: a struct with a similar name exists\n    |\n LL |     let _x: Box<Baz>;"}, {"sha": "54d10fe0d90119da970d466832ee9d5a1146fcea", "filename": "src/test/ui/proc-macro/mixed-site-span.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -38,6 +38,7 @@ LL | | }\n    |\n LL |   pass_dollar_crate!();\n    |   --------------------- in this macro invocation\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use ItemUse;"}, {"sha": "c44a5961565ab3bd3f9ef31e012f92fc01021ef2", "filename": "src/test/ui/pub/pub-ident-fn-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: missing `fn` for function definition\n    |\n LL | pub foo(s: usize) { bar() }\n    |    ^\n+   |\n help: add `fn` here to parse `foo` as a public function\n    |\n LL | pub fn foo(s: usize) { bar() }"}, {"sha": "0df6c00a31656afc1fac55d628f78cfd57e2cee2", "filename": "src/test/ui/pub/pub-ident-fn-with-lifetime-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime-2.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: missing `fn` for method definition\n    |\n LL | pub   bar<'a>(&self, _s: &'a usize) -> bool { true }\n    |    ^^^\n+   |\n help: add `fn` here to parse `bar` as a public method\n    |\n LL | pub fn bar<'a>(&self, _s: &'a usize) -> bool { true }"}, {"sha": "90c78141adbf664d440b3ea3cd2f258713e0a1d6", "filename": "src/test/ui/pub/pub-ident-fn-with-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: missing `fn` for function definition\n    |\n LL | pub   foo<'a>(_s: &'a usize) -> bool { true }\n    |    ^^^\n+   |\n help: add `fn` here to parse `foo` as a public function\n    |\n LL | pub fn foo<'a>(_s: &'a usize) -> bool { true }"}, {"sha": "928f62133a95bf8b19efdb9c210ffd78b686fa87", "filename": "src/test/ui/pub/pub-ident-fn.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: missing `fn` for function definition\n    |\n LL | pub   foo(_s: usize) -> bool { true }\n    |    ^^^\n+   |\n help: add `fn` here to parse `foo` as a public function\n    |\n LL | pub fn foo(_s: usize) -> bool { true }"}, {"sha": "79597c54e68e2b209944d0bb322e6e8a49f7fa80", "filename": "src/test/ui/pub/pub-ident-struct-with-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct-with-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct-with-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct-with-lifetime.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: missing `struct` for struct definition\n    |\n LL | pub S<'a> {\n    |    ^\n+   |\n help: add `struct` here to parse `S` as a public struct\n    |\n LL | pub struct S<'a> {"}, {"sha": "efd7d1fe76a168a01e4da1fe30333c12100415c6", "filename": "src/test/ui/pub/pub-ident-struct.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: missing `struct` for struct definition\n    |\n LL | pub S {\n    |    ^\n+   |\n help: add `struct` here to parse `S` as a public struct\n    |\n LL | pub struct S {"}, {"sha": "aae79dfbb3fae1707649eda176d1252ac8e5ae2d", "filename": "src/test/ui/repeat_count.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Frepeat_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Frepeat_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat_count.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -42,6 +42,7 @@ error[E0308]: mismatched types\n    |\n LL |     let f = [0; -4_isize];\n    |                 ^^^^^^^^ expected usize, found isize\n+   |\n help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     let f = [0; (-4_isize).try_into().unwrap()];\n@@ -52,6 +53,7 @@ error[E0308]: mismatched types\n    |\n LL |     let f = [0_usize; -1_isize];\n    |                       ^^^^^^^^ expected usize, found isize\n+   |\n help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     let f = [0_usize; (-1_isize).try_into().unwrap()];"}, {"sha": "47e5b803970b5cd938b15dccab939df11c336649", "filename": "src/test/ui/reserved/reserved-become.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Freserved%2Freserved-become.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Freserved%2Freserved-become.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freserved%2Freserved-become.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found reserved keyword `become`\n    |\n LL |     let become = 0;\n    |         ^^^^^^ expected identifier, found reserved keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     let r#become = 0;"}, {"sha": "092051ed874edbb9a69fd6411a9dff91702d9e41", "filename": "src/test/ui/resolve/enums-are-namespaced-xc.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0425]: cannot find value `A` in crate `namespaced_enums`\n    |\n LL |     let _ = namespaced_enums::A;\n    |                               ^ not found in `namespaced_enums`\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use namespaced_enums::Foo::A;\n@@ -13,6 +14,7 @@ error[E0425]: cannot find function `B` in crate `namespaced_enums`\n    |\n LL |     let _ = namespaced_enums::B(10);\n    |                               ^ not found in `namespaced_enums`\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use namespaced_enums::Foo::B;\n@@ -23,6 +25,7 @@ error[E0422]: cannot find struct, variant or union type `C` in crate `namespaced\n    |\n LL |     let _ = namespaced_enums::C { a: 10 };\n    |                               ^ not found in `namespaced_enums`\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use namespaced_enums::Foo::C;"}, {"sha": "31f4998bd83b655c6ccc7191777b4ffb57b9ec5c", "filename": "src/test/ui/resolve/issue-16058.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0574]: expected struct, variant or union type, found enum `Result`\n    |\n LL |         Result {\n    |         ^^^^^^ not a struct, variant or union type\n+   |\n help: possible better candidates are found in other modules, you can import them into scope\n    |\n LL | use std::fmt::Result;"}, {"sha": "6098d4f49015555181ffda511f347805cc4588e6", "filename": "src/test/ui/resolve/issue-17518.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0422]: cannot find struct, variant or union type `E` in this scope\n    |\n LL |     E { name: \"foobar\" };\n    |     ^ not found in this scope\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use SomeEnum::E;"}, {"sha": "27fd612faca9caef101bfdbd2fc4119bff5f9cdb", "filename": "src/test/ui/resolve/issue-21221-1.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0405]: cannot find trait `Mul` in this scope\n    |\n LL | impl Mul for Foo {\n    |      ^^^ not found in this scope\n+   |\n help: possible candidates are found in other modules, you can import them into scope\n    |\n LL | use mul1::Mul;\n@@ -17,6 +18,7 @@ error[E0412]: cannot find type `Mul` in this scope\n    |\n LL | fn getMul() -> Mul {\n    |                ^^^ not found in this scope\n+   |\n help: possible candidates are found in other modules, you can import them into scope\n    |\n LL | use mul1::Mul;\n@@ -40,6 +42,7 @@ error[E0405]: cannot find trait `Div` in this scope\n    |\n LL | impl Div for Foo {\n    |      ^^^ not found in this scope\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use std::ops::Div;"}, {"sha": "b360fda6f9d7c3c3e3e19827bb736e1c5401dd00", "filename": "src/test/ui/resolve/issue-21221-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0405]: cannot find trait `T` in this scope\n    |\n LL | impl T for Foo { }\n    |      ^ not found in this scope\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use foo::bar::T;"}, {"sha": "f2c94d467e25edf9392392984759e0e01637ccd8", "filename": "src/test/ui/resolve/issue-21221-3.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0405]: cannot find trait `OuterTrait` in this scope\n    |\n LL | impl OuterTrait for Foo {}\n    |      ^^^^^^^^^^ not found in this scope\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use issue_21221_3::outer::OuterTrait;"}, {"sha": "0b1527f91bd00f05b0eb6f8a63294b05f255fae9", "filename": "src/test/ui/resolve/issue-21221-4.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0405]: cannot find trait `T` in this scope\n    |\n LL | impl T for Foo {}\n    |      ^ not found in this scope\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use issue_21221_4::T;"}, {"sha": "b7cc79cfed9e65ff721213a4630fe571523b5e71", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0423]: expected value, found enum `n::Z`\n    |\n LL |         n::Z;\n    |         ^^^^\n+   |\n help: try using one of the enum's variants\n    |\n LL |         m::Z::Fn;\n@@ -17,6 +18,7 @@ error[E0423]: expected value, found enum `Z`\n    |\n LL |         Z;\n    |         ^\n+   |\n help: a function with a similar name exists\n    |\n LL |         f;\n@@ -46,6 +48,7 @@ error[E0423]: expected value, found enum `m::E`\n    |\n LL |     let _: E = m::E;\n    |                ^^^^\n+   |\n help: a function with a similar name exists\n    |\n LL |     let _: E = m::f;\n@@ -81,6 +84,7 @@ error[E0423]: expected value, found enum `E`\n    |\n LL |     let _: E = E;\n    |                ^\n+   |\n help: try using one of the enum's variants\n    |\n LL |     let _: E = E::Fn;\n@@ -112,6 +116,7 @@ error[E0412]: cannot find type `Z` in this scope\n    |\n LL |     let _: Z = m::n::Z;\n    |            ^\n+   |\n help: an enum with a similar name exists\n    |\n LL |     let _: E = m::n::Z;\n@@ -126,6 +131,7 @@ error[E0423]: expected value, found enum `m::n::Z`\n    |\n LL |     let _: Z = m::n::Z;\n    |                ^^^^^^^\n+   |\n help: try using one of the enum's variants\n    |\n LL |     let _: Z = m::Z::Fn;\n@@ -140,6 +146,7 @@ error[E0412]: cannot find type `Z` in this scope\n    |\n LL |     let _: Z = m::n::Z::Fn;\n    |            ^\n+   |\n help: an enum with a similar name exists\n    |\n LL |     let _: E = m::n::Z::Fn;\n@@ -154,6 +161,7 @@ error[E0412]: cannot find type `Z` in this scope\n    |\n LL |     let _: Z = m::n::Z::Struct;\n    |            ^\n+   |\n help: an enum with a similar name exists\n    |\n LL |     let _: E = m::n::Z::Struct;\n@@ -179,6 +187,7 @@ error[E0412]: cannot find type `Z` in this scope\n    |\n LL |     let _: Z = m::n::Z::Unit {};\n    |            ^\n+   |\n help: an enum with a similar name exists\n    |\n LL |     let _: E = m::n::Z::Unit {};\n@@ -237,6 +246,7 @@ LL |         let _ = Z::Unit();\n    |                 ^^^^^^^--\n    |                 |\n    |                 call expression requires function\n+   |\n help: `Z::Unit` is a unit variant, you need to write it without the parenthesis\n    |\n LL |         let _ = Z::Unit;\n@@ -267,6 +277,7 @@ LL |     let _: E = m::E::Unit();\n    |                ^^^^^^^^^^--\n    |                |\n    |                call expression requires function\n+   |\n help: `m::E::Unit` is a unit variant, you need to write it without the parenthesis\n    |\n LL |     let _: E = m::E::Unit;\n@@ -297,6 +308,7 @@ LL |     let _: E = E::Unit();\n    |                ^^^^^^^--\n    |                |\n    |                call expression requires function\n+   |\n help: `E::Unit` is a unit variant, you need to write it without the parenthesis\n    |\n LL |     let _: E = E::Unit;"}, {"sha": "51928c32e31f7a96ac2b90dcbf718baca9188e2d", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -29,6 +29,7 @@ error[E0423]: expected value, found struct `xcrate::S`\n    |\n LL |     xcrate::S;\n    |     ^^^^^^^^^ constructor is not visible here due to private fields\n+   |\n help: possible better candidate is found in another module, you can import it into scope\n    |\n LL | use m::S;"}, {"sha": "9a3d5feee0426334b389e74f2fcde97718b98396", "filename": "src/test/ui/resolve/suggest-path-instead-of-mod-dot-item.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -27,6 +27,7 @@ error[E0423]: expected value, found module `a::b`\n    |\n LL |     a::b.J\n    |     ^^^^\n+   |\n help: a constant with a similar name exists\n    |\n LL |     a::I.J\n@@ -57,6 +58,7 @@ error[E0423]: expected value, found module `a::b`\n    |\n LL |     a::b.f()\n    |     ^^^^\n+   |\n help: a constant with a similar name exists\n    |\n LL |     a::I.f()"}, {"sha": "ef451ea847a3721842eaf7def7f20d62a9f778cd", "filename": "src/test/ui/resolve/use_suggestion_placement.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0412]: cannot find type `Path` in this scope\n    |\n LL |     type Bar = Path;\n    |                ^^^^ not found in this scope\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL |     use std::path::Path;\n@@ -13,6 +14,7 @@ error[E0425]: cannot find value `A` in this scope\n    |\n LL |     let _ = A;\n    |             ^ not found in this scope\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use m::A;\n@@ -23,6 +25,7 @@ error[E0412]: cannot find type `HashMap` in this scope\n    |\n LL |     type Dict<K, V> = HashMap<K, V>;\n    |                       ^^^^^^^ not found in this scope\n+   |\n help: possible candidates are found in other modules, you can import them into scope\n    |\n LL | use std::collections::HashMap;"}, {"sha": "01c4737de5ec7d63509d6d4e0093d7e379105f18", "filename": "src/test/ui/rust-2018/dyn-trait-compatibility.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Frust-2018%2Fdyn-trait-compatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Frust-2018%2Fdyn-trait-compatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fdyn-trait-compatibility.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: expected identifier, found keyword `dyn`\n    |\n LL | type A1 = dyn::dyn;\n    |                ^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | type A1 = dyn::r#dyn;"}, {"sha": "3515d42260591563c8bcd71960e81fc1958fcf51", "filename": "src/test/ui/rust-2018/edition-lint-infer-outlives-multispan.stderr", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-infer-outlives-multispan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-infer-outlives-multispan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-infer-outlives-multispan.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -19,6 +19,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct TeeWhereOutlivesAyIsDebugBee<'a, 'b, T> where T: 'a + Debug + 'b {\n    |                                                             ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct TeeWhereOutlivesAyIsDebugBee<'a, 'b, T> where T: Debug {\n@@ -29,6 +30,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct TeeYooOutlivesAyIsDebugBee<'a, 'b, T, U: 'a + Debug + 'b> {\n    |                                                     ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct TeeYooOutlivesAyIsDebugBee<'a, 'b, T, U: Debug> {\n@@ -39,6 +41,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct TeeOutlivesAyYooBeeIsDebug<'a, 'b, T: 'a, U: 'b + Debug> {\n    |                                                ^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct TeeOutlivesAyYooBeeIsDebug<'a, 'b, T, U: Debug> {\n@@ -49,6 +52,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct TeeOutlivesAyYooIsDebugBee<'a, 'b, T: 'a, U: Debug + 'b> {\n    |                                                ^^^^          ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct TeeOutlivesAyYooIsDebugBee<'a, 'b, T, U: Debug> {\n@@ -59,6 +63,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct TeeOutlivesAyYooWhereBee<'a, 'b, T: 'a, U> where U: 'b {\n    |                                              ^^^^    ^^^^^^^^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct TeeOutlivesAyYooWhereBee<'a, 'b, T, U> {\n@@ -69,6 +74,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct TeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U> where U: 'a + Debug + 'b {\n    |                                                                   ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct TeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U> where U: Debug {\n@@ -79,6 +85,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct TeeOutlivesAyYooWhereBeeIsDebug<'a, 'b, T: 'a, U> where U: 'b + Debug {\n    |                                                     ^^^^              ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct TeeOutlivesAyYooWhereBeeIsDebug<'a, 'b, T, U> where U: Debug {\n@@ -89,6 +96,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct TeeOutlivesAyYooWhereIsDebugBee<'a, 'b, T: 'a, U> where U: Debug + 'b {\n    |                                                     ^^^^                   ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct TeeOutlivesAyYooWhereIsDebugBee<'a, 'b, T, U> where U: Debug {\n@@ -99,6 +107,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct TeeWhereOutlivesAyYooWhereBeeIsDebug<'a, 'b, T, U> where T: 'a, U: 'b + Debug {\n    |                                                                     ^^^^^^^   ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct TeeWhereOutlivesAyYooWhereBeeIsDebug<'a, 'b, T, U> where U: Debug {\n@@ -109,6 +118,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct TeeWhereOutlivesAyYooWhereIsDebugBee<'a, 'b, T, U> where T: 'a, U: Debug + 'b {\n    |                                                                     ^^^^^^^        ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct TeeWhereOutlivesAyYooWhereIsDebugBee<'a, 'b, T, U> where U: Debug {\n@@ -119,6 +129,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct BeeOutlivesAyTeeBee<'a, 'b: 'a, T: 'b> {\n    |                                      ^^^^   ^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct BeeOutlivesAyTeeBee<'a, 'b, T> {\n@@ -129,6 +140,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct BeeOutlivesAyTeeAyBee<'a, 'b: 'a, T: 'a + 'b> {\n    |                                        ^^^^   ^^^^^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct BeeOutlivesAyTeeAyBee<'a, 'b, T> {\n@@ -139,6 +151,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct BeeOutlivesAyTeeOutlivesAyIsDebugBee<'a, 'b: 'a, T: 'a + Debug + 'b> {\n    |                                                       ^^^^     ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct BeeOutlivesAyTeeOutlivesAyIsDebugBee<'a, 'b, T: Debug> {\n@@ -149,6 +162,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct BeeWhereAyTeeWhereOutlivesAyIsDebugBee<'a, 'b, T> where 'b: 'a, T: 'a + Debug + 'b {\n    |                                                                    ^^^^^^^^   ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct BeeWhereAyTeeWhereOutlivesAyIsDebugBee<'a, 'b, T> where T: Debug {\n@@ -159,6 +173,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct BeeOutlivesAyTeeYooOutlivesAyIsDebugBee<'a, 'b: 'a, T, U: 'a + Debug + 'b> {\n    |                                                          ^^^^        ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct BeeOutlivesAyTeeYooOutlivesAyIsDebugBee<'a, 'b, T, U: Debug> {\n@@ -169,6 +184,7 @@ error: outlives requirements can be inferred\n    |\n LL |         where U: 'a + Debug + 'b, 'b: 'a\n    |                  ^^^^^     ^^^^^  ^^^^^^\n+   |\n help: remove these bounds\n    |\n LL |         where U: Debug, \n@@ -179,6 +195,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct TeeOutlivesAyIsDebugBee<'a, 'b, T: 'a + Debug + 'b>(&'a &'b T);\n    |                                               ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct TeeOutlivesAyIsDebugBee<'a, 'b, T: Debug>(&'a &'b T);\n@@ -189,6 +206,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct TeeWhereOutlivesAyIsDebugBee<'a, 'b, T>(&'a &'b T) where T: 'a + Debug + 'b;\n    |                                                                        ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct TeeWhereOutlivesAyIsDebugBee<'a, 'b, T>(&'a &'b T) where T: Debug;\n@@ -199,6 +217,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct TeeYooOutlivesAyIsDebugBee<'a, 'b, T, U: 'a + Debug + 'b>(T, &'a &'b U);\n    |                                                     ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct TeeYooOutlivesAyIsDebugBee<'a, 'b, T, U: Debug>(T, &'a &'b U);\n@@ -209,6 +228,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct TeeOutlivesAyYooBeeIsDebug<'a, 'b, T: 'a, U: 'b + Debug>(&'a T, &'b U);\n    |                                                ^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct TeeOutlivesAyYooBeeIsDebug<'a, 'b, T, U: Debug>(&'a T, &'b U);\n@@ -219,6 +239,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct TeeOutlivesAyYooIsDebugBee<'a, 'b, T: 'a, U: Debug + 'b>(&'a T, &'b U);\n    |                                                ^^^^          ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct TeeOutlivesAyYooIsDebugBee<'a, 'b, T, U: Debug>(&'a T, &'b U);\n@@ -229,6 +250,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct TeeOutlivesAyYooWhereBee<'a, 'b, T: 'a, U>(&'a T, &'b U) where U: 'b;\n    |                                              ^^^^                   ^^^^^^^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct TeeOutlivesAyYooWhereBee<'a, 'b, T, U>(&'a T, &'b U) ;\n@@ -239,6 +261,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct TeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U>(T, &'a &'b U) where U: 'a + Debug + 'b;\n    |                                                                                 ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct TeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U>(T, &'a &'b U) where U: Debug;\n@@ -249,6 +272,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct TeeOutlivesAyYooWhereBeeIsDebug<'a, 'b, T: 'a, U>(&'a T, &'b U) where U: 'b + Debug;\n    |                                                     ^^^^                            ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct TeeOutlivesAyYooWhereBeeIsDebug<'a, 'b, T, U>(&'a T, &'b U) where U: Debug;\n@@ -259,6 +283,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct TeeOutlivesAyYooWhereIsDebugBee<'a, 'b, T: 'a, U>(&'a T, &'b U) where U: Debug + 'b;\n    |                                                     ^^^^                                 ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct TeeOutlivesAyYooWhereIsDebugBee<'a, 'b, T, U>(&'a T, &'b U) where U: Debug;\n@@ -269,6 +294,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct TeeWhereAyYooWhereBeeIsDebug<'a, 'b, T, U>(&'a T, &'b U) where T: 'a, U: 'b + Debug;\n    |                                                                           ^^^^^^^   ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct TeeWhereAyYooWhereBeeIsDebug<'a, 'b, T, U>(&'a T, &'b U) where U: Debug;\n@@ -279,6 +305,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct TeeWhereAyYooWhereIsDebugBee<'a, 'b, T, U>(&'a T, &'b U) where T: 'a, U: Debug + 'b;\n    |                                                                           ^^^^^^^        ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct TeeWhereAyYooWhereIsDebugBee<'a, 'b, T, U>(&'a T, &'b U) where U: Debug;\n@@ -289,6 +316,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct BeeOutlivesAyTeeBee<'a, 'b: 'a, T: 'b>(&'a &'b T);\n    |                                      ^^^^   ^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct BeeOutlivesAyTeeBee<'a, 'b, T>(&'a &'b T);\n@@ -299,6 +327,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct BeeOutlivesAyTeeAyBee<'a, 'b: 'a, T: 'a + 'b>(&'a &'b T);\n    |                                        ^^^^   ^^^^^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct BeeOutlivesAyTeeAyBee<'a, 'b, T>(&'a &'b T);\n@@ -309,6 +338,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct BeeOutlivesAyTeeOutlivesAyIsDebugBee<'a, 'b: 'a, T: 'a + Debug + 'b>(&'a &'b T);\n    |                                                       ^^^^     ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct BeeOutlivesAyTeeOutlivesAyIsDebugBee<'a, 'b, T: Debug>(&'a &'b T);\n@@ -319,6 +349,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct BeeWhereAyTeeWhereAyIsDebugBee<'a, 'b, T>(&'a &'b T) where 'b: 'a, T: 'a + Debug + 'b;\n    |                                                                       ^^^^^^^^   ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct BeeWhereAyTeeWhereAyIsDebugBee<'a, 'b, T>(&'a &'b T) where T: Debug;\n@@ -329,6 +360,7 @@ error: outlives requirements can be inferred\n    |\n LL |     struct BeeOutlivesAyTeeYooOutlivesAyIsDebugBee<'a, 'b: 'a, T, U: 'a + Debug + 'b>(T, &'a &'b U);\n    |                                                          ^^^^        ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     struct BeeOutlivesAyTeeYooOutlivesAyIsDebugBee<'a, 'b, T, U: Debug>(T, &'a &'b U);\n@@ -339,6 +371,7 @@ error: outlives requirements can be inferred\n    |\n LL |         where U: 'a + Debug + 'b, 'b: 'a;\n    |                  ^^^^^     ^^^^^  ^^^^^^\n+   |\n help: remove these bounds\n    |\n LL |         where U: Debug, ;\n@@ -349,6 +382,7 @@ error: outlives requirements can be inferred\n    |\n LL |     enum TeeOutlivesAyIsDebugBee<'a, 'b, T: 'a + Debug + 'b> {\n    |                                             ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     enum TeeOutlivesAyIsDebugBee<'a, 'b, T: Debug> {\n@@ -359,6 +393,7 @@ error: outlives requirements can be inferred\n    |\n LL |     enum TeeWhereOutlivesAyIsDebugBee<'a, 'b, T> where T: 'a + Debug + 'b {\n    |                                                           ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     enum TeeWhereOutlivesAyIsDebugBee<'a, 'b, T> where T: Debug {\n@@ -369,6 +404,7 @@ error: outlives requirements can be inferred\n    |\n LL |     enum TeeYooOutlivesAyIsDebugBee<'a, 'b, T, U: 'a + Debug + 'b> {\n    |                                                   ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     enum TeeYooOutlivesAyIsDebugBee<'a, 'b, T, U: Debug> {\n@@ -379,6 +415,7 @@ error: outlives requirements can be inferred\n    |\n LL |     enum TeeOutlivesAyYooBeeIsDebug<'a, 'b, T: 'a, U: 'b + Debug> {\n    |                                              ^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     enum TeeOutlivesAyYooBeeIsDebug<'a, 'b, T, U: Debug> {\n@@ -389,6 +426,7 @@ error: outlives requirements can be inferred\n    |\n LL |     enum TeeOutlivesAyYooIsDebugBee<'a, 'b, T: 'a, U: Debug + 'b> {\n    |                                              ^^^^          ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     enum TeeOutlivesAyYooIsDebugBee<'a, 'b, T, U: Debug> {\n@@ -399,6 +437,7 @@ error: outlives requirements can be inferred\n    |\n LL |     enum TeeOutlivesAyYooWhereBee<'a, 'b, T: 'a, U> where U: 'b {\n    |                                            ^^^^    ^^^^^^^^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     enum TeeOutlivesAyYooWhereBee<'a, 'b, T, U> {\n@@ -409,6 +448,7 @@ error: outlives requirements can be inferred\n    |\n LL |     enum TeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U> where U: 'a + Debug + 'b {\n    |                                                                 ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     enum TeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U> where U: Debug {\n@@ -419,6 +459,7 @@ error: outlives requirements can be inferred\n    |\n LL |     enum TeeOutlivesAyYooWhereBeeIsDebug<'a, 'b, T: 'a, U> where U: 'b + Debug {\n    |                                                   ^^^^              ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     enum TeeOutlivesAyYooWhereBeeIsDebug<'a, 'b, T, U> where U: Debug {\n@@ -429,6 +470,7 @@ error: outlives requirements can be inferred\n    |\n LL |     enum TeeOutlivesAyYooWhereIsDebugBee<'a, 'b, T: 'a, U> where U: Debug + 'b {\n    |                                                   ^^^^                   ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     enum TeeOutlivesAyYooWhereIsDebugBee<'a, 'b, T, U> where U: Debug {\n@@ -439,6 +481,7 @@ error: outlives requirements can be inferred\n    |\n LL |     enum TeeWhereOutlivesAyYooWhereBeeIsDebug<'a, 'b, T, U> where T: 'a, U: 'b + Debug {\n    |                                                                   ^^^^^^^   ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     enum TeeWhereOutlivesAyYooWhereBeeIsDebug<'a, 'b, T, U> where U: Debug {\n@@ -449,6 +492,7 @@ error: outlives requirements can be inferred\n    |\n LL |     enum TeeWhereOutlivesAyYooWhereIsDebugBee<'a, 'b, T, U> where T: 'a, U: Debug + 'b {\n    |                                                                   ^^^^^^^        ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     enum TeeWhereOutlivesAyYooWhereIsDebugBee<'a, 'b, T, U> where U: Debug {\n@@ -459,6 +503,7 @@ error: outlives requirements can be inferred\n    |\n LL |     enum BeeOutlivesAyTeeBee<'a, 'b: 'a, T: 'b> {\n    |                                    ^^^^   ^^^^\n+   |\n help: remove these bounds\n    |\n LL |     enum BeeOutlivesAyTeeBee<'a, 'b, T> {\n@@ -469,6 +514,7 @@ error: outlives requirements can be inferred\n    |\n LL |     enum BeeOutlivesAyTeeAyBee<'a, 'b: 'a, T: 'a + 'b> {\n    |                                      ^^^^   ^^^^^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     enum BeeOutlivesAyTeeAyBee<'a, 'b, T> {\n@@ -479,6 +525,7 @@ error: outlives requirements can be inferred\n    |\n LL |     enum BeeOutlivesAyTeeOutlivesAyIsDebugBee<'a, 'b: 'a, T: 'a + Debug + 'b> {\n    |                                                     ^^^^     ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     enum BeeOutlivesAyTeeOutlivesAyIsDebugBee<'a, 'b, T: Debug> {\n@@ -489,6 +536,7 @@ error: outlives requirements can be inferred\n    |\n LL |     enum BeeWhereAyTeeWhereOutlivesAyIsDebugBee<'a, 'b, T> where 'b: 'a, T: 'a + Debug + 'b {\n    |                                                                  ^^^^^^^^   ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     enum BeeWhereAyTeeWhereOutlivesAyIsDebugBee<'a, 'b, T> where T: Debug {\n@@ -499,6 +547,7 @@ error: outlives requirements can be inferred\n    |\n LL |     enum BeeOutlivesAyTeeYooOutlivesAyIsDebugBee<'a, 'b: 'a, T, U: 'a + Debug + 'b> {\n    |                                                        ^^^^        ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     enum BeeOutlivesAyTeeYooOutlivesAyIsDebugBee<'a, 'b, T, U: Debug> {\n@@ -509,6 +558,7 @@ error: outlives requirements can be inferred\n    |\n LL |     enum BeeWhereAyTeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U> where U: 'a + Debug + 'b, 'b: 'a {\n    |                                                                           ^^^^^     ^^^^^  ^^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     enum BeeWhereAyTeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U> where U: Debug,  {\n@@ -519,6 +569,7 @@ error: outlives requirements can be inferred\n    |\n LL |     union TeeOutlivesAyIsDebugBee<'a, 'b, T: 'a + Debug + 'b> {\n    |                                              ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     union TeeOutlivesAyIsDebugBee<'a, 'b, T: Debug> {\n@@ -529,6 +580,7 @@ error: outlives requirements can be inferred\n    |\n LL |     union TeeWhereOutlivesAyIsDebugBee<'a, 'b, T> where T: 'a + Debug + 'b {\n    |                                                            ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     union TeeWhereOutlivesAyIsDebugBee<'a, 'b, T> where T: Debug {\n@@ -539,6 +591,7 @@ error: outlives requirements can be inferred\n    |\n LL |     union TeeYooOutlivesAyIsDebugBee<'a, 'b, T, U: 'a + Debug + 'b> {\n    |                                                    ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     union TeeYooOutlivesAyIsDebugBee<'a, 'b, T, U: Debug> {\n@@ -549,6 +602,7 @@ error: outlives requirements can be inferred\n    |\n LL |     union TeeOutlivesAyYooBeeIsDebug<'a, 'b, T: 'a, U: 'b + Debug> {\n    |                                               ^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     union TeeOutlivesAyYooBeeIsDebug<'a, 'b, T, U: Debug> {\n@@ -559,6 +613,7 @@ error: outlives requirements can be inferred\n    |\n LL |     union TeeOutlivesAyYooIsDebugBee<'a, 'b, T: 'a, U: Debug + 'b> {\n    |                                               ^^^^          ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     union TeeOutlivesAyYooIsDebugBee<'a, 'b, T, U: Debug> {\n@@ -569,6 +624,7 @@ error: outlives requirements can be inferred\n    |\n LL |     union TeeOutlivesAyYooWhereBee<'a, 'b, T: 'a, U> where U: 'b {\n    |                                             ^^^^    ^^^^^^^^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     union TeeOutlivesAyYooWhereBee<'a, 'b, T, U> {\n@@ -579,6 +635,7 @@ error: outlives requirements can be inferred\n    |\n LL |     union TeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U> where U: 'a + Debug + 'b {\n    |                                                                  ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     union TeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U> where U: Debug {\n@@ -589,6 +646,7 @@ error: outlives requirements can be inferred\n    |\n LL |     union TeeOutlivesAyYooWhereBeeIsDebug<'a, 'b, T: 'a, U> where U: 'b + Debug {\n    |                                                    ^^^^              ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     union TeeOutlivesAyYooWhereBeeIsDebug<'a, 'b, T, U> where U: Debug {\n@@ -599,6 +657,7 @@ error: outlives requirements can be inferred\n    |\n LL |     union TeeOutlivesAyYooWhereIsDebugBee<'a, 'b, T: 'a, U> where U: Debug + 'b {\n    |                                                    ^^^^                   ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     union TeeOutlivesAyYooWhereIsDebugBee<'a, 'b, T, U> where U: Debug {\n@@ -609,6 +668,7 @@ error: outlives requirements can be inferred\n    |\n LL |     union TeeWhereOutlivesAyYooWhereBeeIsDebug<'a, 'b, T, U> where T: 'a, U: 'b + Debug {\n    |                                                                    ^^^^^^^   ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     union TeeWhereOutlivesAyYooWhereBeeIsDebug<'a, 'b, T, U> where U: Debug {\n@@ -619,6 +679,7 @@ error: outlives requirements can be inferred\n    |\n LL |     union TeeWhereOutlivesAyYooWhereIsDebugBee<'a, 'b, T, U> where T: 'a, U: Debug + 'b {\n    |                                                                    ^^^^^^^        ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     union TeeWhereOutlivesAyYooWhereIsDebugBee<'a, 'b, T, U> where U: Debug {\n@@ -629,6 +690,7 @@ error: outlives requirements can be inferred\n    |\n LL |     union BeeOutlivesAyTeeBee<'a, 'b: 'a, T: 'b> {\n    |                                     ^^^^   ^^^^\n+   |\n help: remove these bounds\n    |\n LL |     union BeeOutlivesAyTeeBee<'a, 'b, T> {\n@@ -639,6 +701,7 @@ error: outlives requirements can be inferred\n    |\n LL |     union BeeOutlivesAyTeeAyBee<'a, 'b: 'a, T: 'a + 'b> {\n    |                                       ^^^^   ^^^^^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     union BeeOutlivesAyTeeAyBee<'a, 'b, T> {\n@@ -649,6 +712,7 @@ error: outlives requirements can be inferred\n    |\n LL |     union BeeOutlivesAyTeeOutlivesAyIsDebugBee<'a, 'b: 'a, T: 'a + Debug + 'b> {\n    |                                                      ^^^^     ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     union BeeOutlivesAyTeeOutlivesAyIsDebugBee<'a, 'b, T: Debug> {\n@@ -659,6 +723,7 @@ error: outlives requirements can be inferred\n    |\n LL |     union BeeWhereAyTeeWhereOutlivesAyIsDebugBee<'a, 'b, T> where 'b: 'a, T: 'a + Debug + 'b {\n    |                                                                   ^^^^^^^^   ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     union BeeWhereAyTeeWhereOutlivesAyIsDebugBee<'a, 'b, T> where T: Debug {\n@@ -669,6 +734,7 @@ error: outlives requirements can be inferred\n    |\n LL |     union BeeOutlivesAyTeeYooOutlivesAyIsDebugBee<'a, 'b: 'a, T, U: 'a + Debug + 'b> {\n    |                                                         ^^^^        ^^^^^     ^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     union BeeOutlivesAyTeeYooOutlivesAyIsDebugBee<'a, 'b, T, U: Debug> {\n@@ -679,6 +745,7 @@ error: outlives requirements can be inferred\n    |\n LL |     union BeeWhereAyTeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U> where U: 'a + Debug + 'b, 'b: 'a {\n    |                                                                            ^^^^^     ^^^^^  ^^^^^^\n+   |\n help: remove these bounds\n    |\n LL |     union BeeWhereAyTeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U> where U: Debug,  {"}, {"sha": "c712fd048f191e6d43230f04518f6cc1d3858250", "filename": "src/test/ui/rust-2018/issue-52202-use-suggestions.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Frust-2018%2Fissue-52202-use-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Frust-2018%2Fissue-52202-use-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fissue-52202-use-suggestions.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0422]: cannot find struct, variant or union type `Drain` in this scope\n    |\n LL |     let _d = Drain {};\n    |              ^^^^^ not found in this scope\n+   |\n help: possible candidates are found in other modules, you can import them into scope\n    |\n LL | use crate::plumbing::Drain;"}, {"sha": "713d4b759096ef547a5b97f0dab7d81aabbb70d3", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -5,6 +5,7 @@ LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                          -                     ^^^^^^^^ returning this value requires that `'_` must outlive `'static`\n    |                          |\n    |                          lifetime `'_` defined here\n+   |\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'_`, add `'_` as a constraint\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }"}, {"sha": "b46c6b9b713094f03cd478ec0d4dfc69c7d73973", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -5,6 +5,7 @@ LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                    -          ^^^^^^^^^^ opaque type requires that `'1` must outlive `'static`\n    |                    |\n    |                    let's call the lifetime of this reference `'1`\n+   |\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }"}, {"sha": "e3b871bd86764b18128bdf2f312b1850c8e8b943", "filename": "src/test/ui/self/self_type_keyword.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -65,6 +65,7 @@ error[E0531]: cannot find unit struct/variant or constant `Self` in this scope\n    |\n LL |         mut Self => (),\n    |             ^^^^ not found in this scope\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use foo::Self;"}, {"sha": "c7a95883226518b1a5a0943797785bd9750ca5af", "filename": "src/test/ui/shift-various-bad-types.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -27,6 +27,7 @@ error[E0308]: mismatched types\n    |\n LL |     let _: i32 = 22_i64 >> 1_i32;\n    |                  ^^^^^^^^^^^^^^^ expected i32, found i64\n+   |\n help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     let _: i32 = (22_i64 >> 1_i32).try_into().unwrap();"}, {"sha": "25aa8bb6fb0bcd377c37549b11763c57ca6ed1fa", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -23,6 +23,7 @@ LL | fn center<'m>(_: Single<'m>) {}\n    |           ^^            -- ...is used only here\n    |           |\n    |           this lifetime...\n+   |\n help: elide the single-use lifetime\n    |\n LL | fn center(_: Single<'_>) {}\n@@ -33,6 +34,7 @@ error: lifetime parameter `'y` only used once\n    |\n LL | fn left<'x, 'y>(foo: Double<'x, 'y>) -> &'x u32 { foo.f }\n    |             ^^ this lifetime... -- ...is used only here\n+   |\n help: elide the single-use lifetime\n    |\n LL | fn left<'x>(foo: Double<'x, '_>) -> &'x u32 { foo.f }\n@@ -43,6 +45,7 @@ error: lifetime parameter `'x` only used once\n    |\n LL | fn right<'x, 'y>(foo: Double<'x, 'y>) -> &'y u32 { foo.f }\n    |          ^^ this lifetime... -- ...is used only here\n+   |\n help: elide the single-use lifetime\n    |\n LL | fn right<'y>(foo: Double<'_, 'y>) -> &'y u32 { foo.f }"}, {"sha": "3245d8655e87d84b046ebf99a0f47b3176bca82e", "filename": "src/test/ui/span/issue-35987.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0404]: expected trait, found type parameter `Add`\n    |\n LL | impl<T: Clone, Add> Add for Foo<T> {\n    |                     ^^^ not a trait\n+   |\n help: possible better candidate is found in another module, you can import it into scope\n    |\n LL | use std::ops::Add;"}, {"sha": "2ce5b0c11712ab720545842c6d610bae1cffb89e", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -6,6 +6,7 @@ LL |     let x = \"Hello \" + \"World!\";\n    |             |        |\n    |             |        `+` cannot be used to concatenate two `&str` strings\n    |             &str\n+   |\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let x = \"Hello \".to_owned() + \"World!\";\n@@ -29,6 +30,7 @@ LL |     let x = \"Hello \" + \"World!\".to_owned();\n    |             |        |\n    |             |        `+` cannot be used to concatenate a `&str` with a `String`\n    |             &str\n+   |\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let x = \"Hello \".to_owned() + &\"World!\".to_owned();\n@@ -42,6 +44,7 @@ LL |     let _ = &a + &b;\n    |             |  |\n    |             |  `+` cannot be used to concatenate two `&str` strings\n    |             &std::string::String\n+   |\n help: String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let _ = a + &b;\n@@ -55,6 +58,7 @@ LL |     let _ = &a + b;\n    |             |  |\n    |             |  `+` cannot be used to concatenate a `&str` with a `String`\n    |             &std::string::String\n+   |\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let _ = a + &b;\n@@ -80,6 +84,7 @@ LL |     let _ = e + b;\n    |             | |\n    |             | `+` cannot be used to concatenate a `&str` with a `String`\n    |             &std::string::String\n+   |\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let _ = e.to_owned() + &b;\n@@ -93,6 +98,7 @@ LL |     let _ = e + &b;\n    |             | |\n    |             | `+` cannot be used to concatenate two `&str` strings\n    |             &std::string::String\n+   |\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let _ = e.to_owned() + &b;\n@@ -106,6 +112,7 @@ LL |     let _ = e + d;\n    |             | |\n    |             | `+` cannot be used to concatenate two `&str` strings\n    |             &std::string::String\n+   |\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let _ = e.to_owned() + d;\n@@ -119,6 +126,7 @@ LL |     let _ = e + &d;\n    |             | |\n    |             | `+` cannot be used to concatenate two `&str` strings\n    |             &std::string::String\n+   |\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let _ = e.to_owned() + &d;\n@@ -152,6 +160,7 @@ LL |     let _ = c + &d;\n    |             | |\n    |             | `+` cannot be used to concatenate two `&str` strings\n    |             &str\n+   |\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let _ = c.to_owned() + &d;\n@@ -165,6 +174,7 @@ LL |     let _ = c + d;\n    |             | |\n    |             | `+` cannot be used to concatenate two `&str` strings\n    |             &str\n+   |\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let _ = c.to_owned() + d;"}, {"sha": "90a96e3f174039ff61b035f19100c09ec492c73e", "filename": "src/test/ui/span/missing-unit-argument.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n    |\n LL |     let _: Result<(), String> = Ok();\n    |                                 ^^^^\n+   |\n help: expected the unit value `()`; create it with empty parentheses\n    |\n LL |     let _: Result<(), String> = Ok(());\n@@ -34,6 +35,7 @@ LL | fn bar(():()) {}\n ...\n LL |     bar();\n    |     ^^^^^\n+   |\n help: expected the unit value `()`; create it with empty parentheses\n    |\n LL |     bar(());\n@@ -47,6 +49,7 @@ LL |     fn baz(self, (): ()) { }\n ...\n LL |     S.baz();\n    |       ^^^\n+   |\n help: expected the unit value `()`; create it with empty parentheses\n    |\n LL |     S.baz(());\n@@ -60,6 +63,7 @@ LL |     fn generic<T>(self, _: T) { }\n ...\n LL |     S.generic::<()>();\n    |       ^^^^^^^\n+   |\n help: expected the unit value `()`; create it with empty parentheses\n    |\n LL |     S.generic::<()>(());"}, {"sha": "27d6336974c85e1df9c5ca2de0459a7c1d4bfa0e", "filename": "src/test/ui/str/str-as-char.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fstr%2Fstr-as-char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fstr%2Fstr-as-char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-as-char.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: character literal may only contain one codepoint\n    |\n LL |     println!('\u25cf\u25cf');\n    |              ^^^^\n+   |\n help: if you meant to write a `str` literal, use double quotes\n    |\n LL |     println!(\"\u25cf\u25cf\");"}, {"sha": "d193955af4ba6da1157b846537985c6d1141ad70", "filename": "src/test/ui/str/str-concat-on-double-ref.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -6,6 +6,7 @@ LL |     let c = a + b;\n    |             | |\n    |             | `+` cannot be used to concatenate two `&str` strings\n    |             &std::string::String\n+   |\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let c = a.to_owned() + b;"}, {"sha": "bfc8b24e8ac497f5671cfd06e1bf4ebb1cd62a6c", "filename": "src/test/ui/struct-literal-variant-in-if.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error: struct literals are not allowed here\n    |\n LL |     if x == E::I { field1: true, field2: 42 } {}\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n help: surround the struct literal with parentheses\n    |\n LL |     if x == (E::I { field1: true, field2: 42 }) {}\n@@ -13,6 +14,7 @@ error: struct literals are not allowed here\n    |\n LL |     if x == E::V { field: false } {}\n    |             ^^^^^^^^^^^^^^^^^^^^^\n+   |\n help: surround the struct literal with parentheses\n    |\n LL |     if x == (E::V { field: false }) {}\n@@ -23,6 +25,7 @@ error: struct literals are not allowed here\n    |\n LL |     if x == E::J { field: -42 } {}\n    |             ^^^^^^^^^^^^^^^^^^^\n+   |\n help: surround the struct literal with parentheses\n    |\n LL |     if x == (E::J { field: -42 }) {}\n@@ -33,6 +36,7 @@ error: struct literals are not allowed here\n    |\n LL |     if x == E::K { field: \"\" } {}\n    |             ^^^^^^^^^^^^^^^^^^\n+   |\n help: surround the struct literal with parentheses\n    |\n LL |     if x == (E::K { field: \"\" }) {}"}, {"sha": "22aad3b0a9f584a0e021ee6ceba95464c20f3276", "filename": "src/test/ui/suggestions/no-extern-crate-in-type.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fsuggestions%2Fno-extern-crate-in-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fsuggestions%2Fno-extern-crate-in-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fno-extern-crate-in-type.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0412]: cannot find type `Foo` in this scope\n    |\n LL | type Output = Option<Foo>;\n    |                      ^^^ not found in this scope\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use foo::Foo;"}, {"sha": "7ef959053805be61b945ce9fe69e6fbf5be6914e", "filename": "src/test/ui/suggestions/suggest-closure-return-type-1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-closure-return-type-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-closure-return-type-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-closure-return-type-1.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0282]: type annotations needed for the closure `fn() -> [_; 0]`\n    |\n LL |     let _v = || -> _ { [] };\n    |                        ^^ cannot infer type\n+   |\n help: give this closure an explicit return type without `_` placeholders\n    |\n LL |     let _v = || -> [_; 0] { [] };"}, {"sha": "2a8d7dd5b85dbd3878d10dbd950e3887ca4ff154", "filename": "src/test/ui/suggestions/suggest-closure-return-type-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-closure-return-type-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-closure-return-type-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-closure-return-type-2.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0282]: type annotations needed for the closure `fn() -> [_; 0]`\n    |\n LL |     let _v = || { [] };\n    |                   ^^ cannot infer type\n+   |\n help: give this closure an explicit return type without `_` placeholders\n    |\n LL |     let _v = || -> [_; 0] { [] };"}, {"sha": "67dc4d8fd69b257175c0cb50f94503ea4aa19224", "filename": "src/test/ui/suggestions/suggest-closure-return-type-3.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-closure-return-type-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-closure-return-type-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-closure-return-type-3.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0282]: type annotations needed for the closure `fn() -> [_; 0]`\n    |\n LL |     let _v = || [];\n    |                 ^^ cannot infer type\n+   |\n help: give this closure an explicit return type without `_` placeholders\n    |\n LL |     let _v = || -> [_; 0] { [] };"}, {"sha": "079821e649070ebdb9d218e8732fe34b9f44feef", "filename": "src/test/ui/suggestions/suggest-labels.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-labels.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0426]: use of undeclared label `'fo`\n    |\n LL |         break 'fo;\n    |               ^^^\n+   |\n help: a label with a similar name exists in this scope\n    |\n LL |         break 'foo;\n@@ -13,6 +14,7 @@ error[E0426]: use of undeclared label `'bor`\n    |\n LL |         continue 'bor;\n    |                  ^^^^\n+   |\n help: a label with a similar name exists in this scope\n    |\n LL |         continue 'bar;\n@@ -23,6 +25,7 @@ error[E0426]: use of undeclared label `'longlable`\n    |\n LL |             break 'longlable;\n    |                   ^^^^^^^^^^\n+   |\n help: a label with a similar name exists in this scope\n    |\n LL |             break 'longlabel1;"}, {"sha": "28fef511e04b14a6d4cd8416ef268af1128b9635", "filename": "src/test/ui/suggestions/suggest-on-bare-closure-call.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-on-bare-closure-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-on-bare-closure-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-on-bare-closure-call.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -5,6 +5,7 @@ LL |     let _ = ||{}();\n    |               ^^--\n    |               |\n    |               call expression requires function\n+   |\n help: if you meant to create this closure and immediately call it, surround the closure with parenthesis\n    |\n LL |     let _ = (||{})();"}, {"sha": "5199faa5c8ec6c24fbb0de3c30d123453a693e10", "filename": "src/test/ui/suggestions/suggest-std-when-using-type.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0223]: ambiguous associated type\n    |\n LL |     let pi = f32::consts::PI;\n    |              ^^^^^^^^^^^^^^^\n+   |\n help: you are looking for the module in `std`, not the primitive type\n    |\n LL |     let pi = std::f32::consts::PI;\n@@ -13,6 +14,7 @@ error[E0599]: no function or associated item named `from_utf8` found for type `s\n    |\n LL |         str::from_utf8(bytes)\n    |              ^^^^^^^^^ function or associated item not found in `str`\n+   |\n help: you are looking for the module in `std`, not the primitive type\n    |\n LL |         std::str::from_utf8(bytes)"}, {"sha": "098d76a5c48c689e1cc71f431b000955fe90a644", "filename": "src/test/ui/suggestions/use-type-argument-instead-of-assoc-type.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -20,6 +20,7 @@ LL |     i: Box<dyn T<usize, usize, usize, usize, B=usize>>,\n    |            |\n    |            associated type `A` must be specified\n    |            associated type `C` must be specified\n+   |\n help: if you meant to specify the associated types, write\n    |\n LL |     i: Box<dyn T<usize, usize, A = usize, C = usize, B=usize>>,"}, {"sha": "f4ce548314d110a6dc3aaebd8d44861b317a2a6f", "filename": "src/test/ui/traits/traits-multidispatch-bad.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ftraits%2Ftraits-multidispatch-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ftraits%2Ftraits-multidispatch-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-multidispatch-bad.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     test(22i32, 44i32);\n    |                 ^^^^^ expected u32, found i32\n+   |\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n LL |     test(22i32, 44u32);"}, {"sha": "5820e4699c14f8c3d24cfc29dbf72a045bde9305", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-projection-error.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection-error.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -6,6 +6,7 @@ LL | fn global_bound_is_hidden() -> u8\n ...\n LL |     B::get_x()\n    |     ^^^^^^^^^^ expected u8, found i32\n+   |\n help: you can convert an `i32` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     B::get_x().try_into().unwrap()"}, {"sha": "7547dadf9e209f1924e301a3727c3a768505c6a1", "filename": "src/test/ui/try-block/try-block-in-edition2015.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -6,6 +6,7 @@ LL |     let try_result: Option<_> = try {\n LL |\n LL |         let x = 5;\n    |         ^^^ expected identifier, found keyword\n+   |\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |         r#let x = 5;"}, {"sha": "ae0cf124673dbe7ed61d6f3c3622a4103bdfb349", "filename": "src/test/ui/tutorial-suffix-inference-test.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -12,6 +12,7 @@ error[E0308]: mismatched types\n    |\n LL |     identity_u16(y);\n    |                  ^ expected u16, found i32\n+   |\n help: you can convert an `i32` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     identity_u16(y.try_into().unwrap());\n@@ -22,6 +23,7 @@ error[E0308]: mismatched types\n    |\n LL |     identity_u16(a);\n    |                  ^ expected u16, found isize\n+   |\n help: you can convert an `isize` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     identity_u16(a.try_into().unwrap());"}, {"sha": "801ca5f013b3e8e631ce28edf9d7fc6245118fda", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-alias-caught.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -26,6 +26,7 @@ LL |     Alias::Unit();\n    |     ^^^^^^^^^^^--\n    |     |\n    |     call expression requires function\n+   |\n help: `<Alias>::Unit` is a unit variant, you need to write it without the parenthesis\n    |\n LL |     <Alias>::Unit;"}, {"sha": "a6f24984c8b9b883b0f83ad7503ba3bb975c5ba3", "filename": "src/test/ui/ufcs/ufcs-qpath-self-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -11,6 +11,7 @@ error[E0308]: mismatched types\n    |\n LL |     <i32 as Add<i32>>::add(1u32, 2);\n    |                            ^^^^ expected i32, found u32\n+   |\n help: change the type of the numeric literal from `u32` to `i32`\n    |\n LL |     <i32 as Add<i32>>::add(1i32, 2);\n@@ -21,6 +22,7 @@ error[E0308]: mismatched types\n    |\n LL |     <i32 as Add<i32>>::add(1, 2u32);\n    |                               ^^^^ expected i32, found u32\n+   |\n help: change the type of the numeric literal from `u32` to `i32`\n    |\n LL |     <i32 as Add<i32>>::add(1, 2i32);"}, {"sha": "2479f3e601e2ce2a5dd312eeced1721a1b213d05", "filename": "src/test/ui/unboxed-closures/unboxed-closures-type-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-type-mismatch.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     let z = f(1_usize, 2);\n    |               ^^^^^^^ expected isize, found usize\n+   |\n help: change the type of the numeric literal from `usize` to `isize`\n    |\n LL |     let z = f(1_isize, 2);"}, {"sha": "3ca30ebebbab7794d31b24c8a65d46afc62b7edf", "filename": "src/test/ui/use/use-super-global-path.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fuse%2Fuse-super-global-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fuse%2Fuse-super-global-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-super-global-path.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -15,6 +15,7 @@ error[E0425]: cannot find function `main` in this scope\n    |\n LL |         main();\n    |         ^^^^ not found in this scope\n+   |\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL |     use main;"}, {"sha": "096dd16c63431010da8c3a66ecb7222ec248f294", "filename": "src/test/ui/variants/variant-used-as-type.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fvariants%2Fvariant-used-as-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0aa7c6f96b2dfed47f750b26514191353084c889/src%2Ftest%2Fui%2Fvariants%2Fvariant-used-as-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariants%2Fvariant-used-as-type.stderr?ref=0aa7c6f96b2dfed47f750b26514191353084c889", "patch": "@@ -3,6 +3,7 @@ error[E0573]: expected type, found variant `Ty::A`\n    |\n LL |     B(Ty::A),\n    |       ^^^^^ not a type\n+   |\n help: try using the variant's enum\n    |\n LL |     B(E),\n@@ -15,6 +16,7 @@ error[E0573]: expected type, found variant `E::A`\n    |\n LL | impl E::A {}\n    |      ^^^^ not a type\n+   |\n help: try using the variant's enum\n    |\n LL | impl E {}"}]}