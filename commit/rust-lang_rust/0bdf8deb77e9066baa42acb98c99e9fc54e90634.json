{"sha": "0bdf8deb77e9066baa42acb98c99e9fc54e90634", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZGY4ZGViNzdlOTA2NmJhYTQyYWNiOThjOTllOWZjNTRlOTA2MzQ=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-02T13:08:16Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-02T13:08:16Z"}, "message": "Merge #252\n\n252: Improve 'introduce variable' r=matklad a=flodiebold\n\n - make it possible to extract a prefix of an expression statement (e.g.\r\n   `<|>foo.bar()<|>.baz()`)\r\n - don't turn the last expression in a block into a let statement\r\n - also fix a few typos\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "974d3df4adcf7fb0ef117f4274c7b5d337c57264", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/974d3df4adcf7fb0ef117f4274c7b5d337c57264"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bdf8deb77e9066baa42acb98c99e9fc54e90634", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bdf8deb77e9066baa42acb98c99e9fc54e90634", "html_url": "https://github.com/rust-lang/rust/commit/0bdf8deb77e9066baa42acb98c99e9fc54e90634", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bdf8deb77e9066baa42acb98c99e9fc54e90634/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "bcc2342be6e0206bfd945967e168c08b9d373525", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcc2342be6e0206bfd945967e168c08b9d373525", "html_url": "https://github.com/rust-lang/rust/commit/bcc2342be6e0206bfd945967e168c08b9d373525"}, {"sha": "270645683216c11a81b2b144576d9b18a0d947ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/270645683216c11a81b2b144576d9b18a0d947ad", "html_url": "https://github.com/rust-lang/rust/commit/270645683216c11a81b2b144576d9b18a0d947ad"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "6979251d182132bc223cb047306730b83d49578a", "filename": "crates/ra_editor/src/code_actions.rs", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/0bdf8deb77e9066baa42acb98c99e9fc54e90634/crates%2Fra_editor%2Fsrc%2Fcode_actions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bdf8deb77e9066baa42acb98c99e9fc54e90634/crates%2Fra_editor%2Fsrc%2Fcode_actions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fcode_actions.rs?ref=0bdf8deb77e9066baa42acb98c99e9fc54e90634", "patch": "@@ -122,7 +122,7 @@ pub fn introduce_variable<'a>(\n     let node = find_covering_node(file.syntax(), range);\n     let expr = node.ancestors().filter_map(ast::Expr::cast).next()?;\n \n-    let anchor_stmt = ahchor_stmt(expr)?;\n+    let anchor_stmt = anchor_stmt(expr)?;\n     let indent = anchor_stmt.prev_sibling()?;\n     if indent.kind() != WHITESPACE {\n         return None;\n@@ -133,7 +133,12 @@ pub fn introduce_variable<'a>(\n \n         buf.push_str(\"let var_name = \");\n         expr.syntax().text().push_to(&mut buf);\n-        if expr.syntax().range().start() == anchor_stmt.range().start() {\n+        let is_full_stmt = if let Some(expr_stmt) = ast::ExprStmt::cast(anchor_stmt) {\n+            Some(expr.syntax()) == expr_stmt.expr().map(|e| e.syntax())\n+        } else {\n+            false\n+        };\n+        if is_full_stmt {\n             edit.replace(expr.syntax().range(), buf);\n         } else {\n             buf.push_str(\";\");\n@@ -150,7 +155,7 @@ pub fn introduce_variable<'a>(\n \n     /// Statement or last in the block expression, which will follow\n     /// the freshly introduced var.\n-    fn ahchor_stmt(expr: ast::Expr) -> Option<SyntaxNodeRef> {\n+    fn anchor_stmt(expr: ast::Expr) -> Option<SyntaxNodeRef> {\n         expr.syntax().ancestors().find(|&node| {\n             if ast::Stmt::cast(node).is_some() {\n                 return true;\n@@ -250,7 +255,7 @@ struct Foo { a: i32, }\n     }\n \n     #[test]\n-    fn test_intrdoduce_var_simple() {\n+    fn test_introduce_var_simple() {\n         check_action_range(\n             \"\n fn foo() {\n@@ -266,7 +271,7 @@ fn foo() {\n     }\n \n     #[test]\n-    fn test_intrdoduce_var_expr_stmt() {\n+    fn test_introduce_var_expr_stmt() {\n         check_action_range(\n             \"\n fn foo() {\n@@ -281,7 +286,23 @@ fn foo() {\n     }\n \n     #[test]\n-    fn test_intrdoduce_var_last_expr() {\n+    fn test_introduce_var_part_of_expr_stmt() {\n+        check_action_range(\n+            \"\n+fn foo() {\n+    <|>1<|> + 1;\n+}\",\n+            \"\n+fn foo() {\n+    let <|>var_name = 1;\n+    var_name + 1;\n+}\",\n+            |file, range| introduce_variable(file, range).map(|f| f()),\n+        );\n+    }\n+\n+    #[test]\n+    fn test_introduce_var_last_expr() {\n         check_action_range(\n             \"\n fn foo() {\n@@ -296,4 +317,20 @@ fn foo() {\n         );\n     }\n \n+    #[test]\n+    fn test_introduce_var_last_full_expr() {\n+        check_action_range(\n+            \"\n+fn foo() {\n+    <|>bar(1 + 1)<|>\n+}\",\n+            \"\n+fn foo() {\n+    let <|>var_name = bar(1 + 1);\n+    var_name\n+}\",\n+            |file, range| introduce_variable(file, range).map(|f| f()),\n+        );\n+    }\n+\n }"}, {"sha": "372b8d14cc9251d12fd93f4719bc84d275ff77a9", "filename": "crates/ra_editor/src/edit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bdf8deb77e9066baa42acb98c99e9fc54e90634/crates%2Fra_editor%2Fsrc%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bdf8deb77e9066baa42acb98c99e9fc54e90634/crates%2Fra_editor%2Fsrc%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fedit.rs?ref=0bdf8deb77e9066baa42acb98c99e9fc54e90634", "patch": "@@ -26,7 +26,7 @@ impl EditBuilder {\n     }\n     pub fn finish(self) -> Edit {\n         let mut atoms = self.atoms;\n-        atoms.sort_by_key(|a| a.delete.start());\n+        atoms.sort_by_key(|a| (a.delete.start(), a.delete.end()));\n         for (a1, a2) in atoms.iter().zip(atoms.iter().skip(1)) {\n             assert!(a1.delete.end() <= a2.delete.start())\n         }"}]}