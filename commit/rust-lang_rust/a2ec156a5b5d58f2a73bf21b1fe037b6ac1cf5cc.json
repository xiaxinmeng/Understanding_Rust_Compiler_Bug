{"sha": "a2ec156a5b5d58f2a73bf21b1fe037b6ac1cf5cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZWMxNTZhNWI1ZDU4ZjJhNzNiZjIxYjFmZTAzN2I2YWMxY2Y1Y2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-08T17:13:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-08T17:13:56Z"}, "message": "Auto merge of #58161 - davidtwco:issue-57960, r=arielb1\n\nLower constant patterns with ascribed types.\n\nFixes #57960.\n\nThis PR fixes a bug introduced by #55937 which started checking user\ntype annotations for associated type patterns. Where lowering a\nassociated constant expression would previously return a\n`PatternKind::Constant`, it now returns a `PatternKind::AscribeUserType`\nwith a `PatternKind::Constant` inside, this PR unwraps that to\naccess the constant pattern inside and behaves as before.\n\nr? @pnkfelix", "tree": {"sha": "29a60d54848218c387047656d2529aee28f97ca3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29a60d54848218c387047656d2529aee28f97ca3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2ec156a5b5d58f2a73bf21b1fe037b6ac1cf5cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2ec156a5b5d58f2a73bf21b1fe037b6ac1cf5cc", "html_url": "https://github.com/rust-lang/rust/commit/a2ec156a5b5d58f2a73bf21b1fe037b6ac1cf5cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2ec156a5b5d58f2a73bf21b1fe037b6ac1cf5cc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0710c2026f257b9560f7f84539bc57183c3a02d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0710c2026f257b9560f7f84539bc57183c3a02d3", "html_url": "https://github.com/rust-lang/rust/commit/0710c2026f257b9560f7f84539bc57183c3a02d3"}, {"sha": "6717727fcbc8e07f471b4a6d8fecd600230a5616", "url": "https://api.github.com/repos/rust-lang/rust/commits/6717727fcbc8e07f471b4a6d8fecd600230a5616", "html_url": "https://github.com/rust-lang/rust/commit/6717727fcbc8e07f471b4a6d8fecd600230a5616"}], "stats": {"total": 72, "additions": 68, "deletions": 4}, "files": [{"sha": "eacb11fc1ac07d7709b4717f9a12c65ed92db8ce", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a2ec156a5b5d58f2a73bf21b1fe037b6ac1cf5cc/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ec156a5b5d58f2a73bf21b1fe037b6ac1cf5cc/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=a2ec156a5b5d58f2a73bf21b1fe037b6ac1cf5cc", "patch": "@@ -167,6 +167,17 @@ pub enum PatternKind<'tcx> {\n     },\n }\n \n+impl<'tcx> PatternKind<'tcx> {\n+    /// If this is a `PatternKind::AscribeUserType` then return the subpattern kind, otherwise\n+    /// return this pattern kind.\n+    fn with_user_type_ascription_subpattern(self) -> Self {\n+        match self {\n+            PatternKind::AscribeUserType { subpattern: Pattern { box kind, ..  }, ..  } => kind,\n+            kind => kind,\n+        }\n+    }\n+}\n+\n #[derive(Clone, Copy, Debug, PartialEq)]\n pub struct PatternRange<'tcx> {\n     pub lo: ty::Const<'tcx>,\n@@ -403,9 +414,15 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             PatKind::Lit(ref value) => self.lower_lit(value),\n \n             PatKind::Range(ref lo_expr, ref hi_expr, end) => {\n-                match (self.lower_lit(lo_expr), self.lower_lit(hi_expr)) {\n-                    (PatternKind::Constant { value: lo },\n-                     PatternKind::Constant { value: hi }) => {\n+                match (\n+                    // Look for `PatternKind::Constant` patterns inside of any\n+                    // `PatternKind::AscribeUserType` patterns. Type ascriptions can be safely\n+                    // ignored for the purposes of lowering a range correctly - these are checked\n+                    // elsewhere for well-formedness.\n+                    self.lower_lit(lo_expr).with_user_type_ascription_subpattern(),\n+                    self.lower_lit(hi_expr).with_user_type_ascription_subpattern(),\n+                ) {\n+                    (PatternKind::Constant { value: lo }, PatternKind::Constant { value: hi }) => {\n                         use std::cmp::Ordering;\n                         let cmp = compare_const_vals(\n                             self.tcx,\n@@ -454,7 +471,15 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                             }\n                         }\n                     }\n-                    _ => PatternKind::Wild\n+                    ref pats => {\n+                        self.tcx.sess.delay_span_bug(\n+                            pat.span,\n+                            &format!(\"found bad range pattern `{:?}` outside of error recovery\",\n+                                     pats),\n+                        );\n+\n+                        PatternKind::Wild\n+                    }\n                 }\n             }\n "}, {"sha": "0b52e46c45989b9ea2d76ce845edb3d1912b2471", "filename": "src/test/ui/nll/issue-57960.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a2ec156a5b5d58f2a73bf21b1fe037b6ac1cf5cc/src%2Ftest%2Fui%2Fnll%2Fissue-57960.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ec156a5b5d58f2a73bf21b1fe037b6ac1cf5cc/src%2Ftest%2Fui%2Fnll%2Fissue-57960.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57960.rs?ref=a2ec156a5b5d58f2a73bf21b1fe037b6ac1cf5cc", "patch": "@@ -0,0 +1,39 @@\n+// run-pass\n+\n+#![allow(dead_code)]\n+\n+trait Range {\n+    const FIRST: u8;\n+    const LAST: u8;\n+}\n+\n+struct OneDigit;\n+impl Range for OneDigit {\n+    const FIRST: u8 = 0;\n+    const LAST: u8 = 9;\n+}\n+\n+struct TwoDigits;\n+impl Range for TwoDigits {\n+    const FIRST: u8 = 10;\n+    const LAST: u8 = 99;\n+}\n+\n+struct ThreeDigits;\n+impl Range for ThreeDigits {\n+    const FIRST: u8 = 100;\n+    const LAST: u8 = 255;\n+}\n+\n+fn digits(x: u8) -> u32 {\n+    match x {\n+        OneDigit::FIRST...OneDigit::LAST => 1,\n+        TwoDigits::FIRST...TwoDigits::LAST => 2,\n+        ThreeDigits::FIRST...ThreeDigits::LAST => 3,\n+        _ => unreachable!(),\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(digits(100), 3);\n+}"}]}