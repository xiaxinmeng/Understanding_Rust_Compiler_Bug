{"sha": "6fa49eb0de256760b06a879f8240cb220b7a5435", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYTQ5ZWIwZGUyNTY3NjBiMDZhODc5ZjgyNDBjYjIyMGI3YTU0MzU=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-01-19T20:06:48Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-01-19T20:06:48Z"}, "message": "Merge pull request #562 from fhartwig/str-lit-as-bytes\n\nAdd lint for \"string literal\".as_bytes()", "tree": {"sha": "09763de686d30aca64e8f816397f934d77d4475a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09763de686d30aca64e8f816397f934d77d4475a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fa49eb0de256760b06a879f8240cb220b7a5435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fa49eb0de256760b06a879f8240cb220b7a5435", "html_url": "https://github.com/rust-lang/rust/commit/6fa49eb0de256760b06a879f8240cb220b7a5435", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fa49eb0de256760b06a879f8240cb220b7a5435/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0496f08caf15c53ace0687051a52fbcc3473c25", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0496f08caf15c53ace0687051a52fbcc3473c25", "html_url": "https://github.com/rust-lang/rust/commit/a0496f08caf15c53ace0687051a52fbcc3473c25"}, {"sha": "ea26ae3888bd10046e723ef0c2939605cd57bb6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea26ae3888bd10046e723ef0c2939605cd57bb6c", "html_url": "https://github.com/rust-lang/rust/commit/ea26ae3888bd10046e723ef0c2939605cd57bb6c"}], "stats": {"total": 62, "additions": 61, "deletions": 1}, "files": [{"sha": "f76157a249d0b98d4b6b87f65ff008e48578d1a0", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fa49eb0de256760b06a879f8240cb220b7a5435/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fa49eb0de256760b06a879f8240cb220b7a5435/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=6fa49eb0de256760b06a879f8240cb220b7a5435", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 93 lints included in this crate:\n+There are 94 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -83,6 +83,7 @@ name\n [str_to_string](https://github.com/Manishearth/rust-clippy/wiki#str_to_string)                                 | warn    | using `to_string()` on a str, which should be `to_owned()`\n [string_add](https://github.com/Manishearth/rust-clippy/wiki#string_add)                                       | allow   | using `x + ..` where x is a `String`; suggests using `push_str()` instead\n [string_add_assign](https://github.com/Manishearth/rust-clippy/wiki#string_add_assign)                         | allow   | using `x = x + ..` where x is a `String`; suggests using `push_str()` instead\n+[string_lit_as_bytes](https://github.com/Manishearth/rust-clippy/wiki#string_lit_as_bytes)                     | warn    | calling `as_bytes` on a string literal; suggests using a byte string literal instead\n [string_to_string](https://github.com/Manishearth/rust-clippy/wiki#string_to_string)                           | warn    | calling `String.to_string()` which is a no-op\n [temporary_assignment](https://github.com/Manishearth/rust-clippy/wiki#temporary_assignment)                   | warn    | assignments to temporaries\n [toplevel_ref_arg](https://github.com/Manishearth/rust-clippy/wiki#toplevel_ref_arg)                           | warn    | An entire binding was declared as `ref`, in a function argument (`fn foo(ref x: Bar)`), or a `let` statement (`let ref x = foo()`). In such cases, it is preferred to take references with `&`."}, {"sha": "76d9426b25a1084dc0e79d852ff51746d4f58d14", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa49eb0de256760b06a879f8240cb220b7a5435/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa49eb0de256760b06a879f8240cb220b7a5435/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=6fa49eb0de256760b06a879f8240cb220b7a5435", "patch": "@@ -135,6 +135,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box misc::UsedUnderscoreBinding);\n     reg.register_late_lint_pass(box array_indexing::ArrayIndexing);\n     reg.register_late_lint_pass(box panic::PanicPass);\n+    reg.register_late_lint_pass(box strings::StringLitAsBytes);\n \n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n@@ -225,6 +226,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         ranges::RANGE_ZIP_WITH_LEN,\n         returns::LET_AND_RETURN,\n         returns::NEEDLESS_RETURN,\n+        strings::STRING_LIT_AS_BYTES,\n         temporary_assignment::TEMPORARY_ASSIGNMENT,\n         transmute::USELESS_TRANSMUTE,\n         types::BOX_VEC,"}, {"sha": "16ee08b1894936fba4671690cad29cceffbc900d", "filename": "src/strings.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6fa49eb0de256760b06a879f8240cb220b7a5435/src%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa49eb0de256760b06a879f8240cb220b7a5435/src%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstrings.rs?ref=6fa49eb0de256760b06a879f8240cb220b7a5435", "patch": "@@ -48,6 +48,22 @@ declare_lint! {\n     \"using `x + ..` where x is a `String`; suggests using `push_str()` instead\"\n }\n \n+/// **What it does:** This lint matches the `as_bytes` method called on string\n+/// literals that contain only ascii characters. It is `Warn` by default.\n+///\n+/// **Why is this bad?** Byte string literals (e.g. `b\"foo\"`) can be used instead. They are shorter but less discoverable than `as_bytes()`.\n+///\n+/// **Example:**\n+///\n+/// ```\n+/// let bs = \"a byte string\".as_bytes();\n+/// ```\n+declare_lint! {\n+    pub STRING_LIT_AS_BYTES,\n+    Warn,\n+    \"calling `as_bytes` on a string literal; suggests using a byte string literal instead\"\n+}\n+\n #[derive(Copy, Clone)]\n pub struct StringAdd;\n \n@@ -104,3 +120,36 @@ fn is_add(cx: &LateContext, src: &Expr, target: &Expr) -> bool {\n         _ => false,\n     }\n }\n+\n+#[derive(Copy, Clone)]\n+pub struct StringLitAsBytes;\n+\n+impl LintPass for StringLitAsBytes {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(STRING_LIT_AS_BYTES)\n+    }\n+}\n+\n+impl LateLintPass for StringLitAsBytes {\n+    fn check_expr(&mut self, cx: &LateContext, e: &Expr) {\n+        use std::ascii::AsciiExt;\n+        use syntax::ast::Lit_::LitStr;\n+        use utils::{snippet, in_macro};\n+\n+        if let ExprMethodCall(ref name, _, ref args) = e.node {\n+            if name.node.as_str() == \"as_bytes\" {\n+                if let ExprLit(ref lit) = args[0].node {\n+                    if let LitStr(ref lit_content, _) = lit.node {\n+                        if lit_content.chars().all(|c| c.is_ascii()) && !in_macro(cx, e.span) {\n+                            let msg = format!(\"calling `as_bytes()` on a string literal. \\\n+                                               Consider using a byte string literal instead: \\\n+                                               `b{}`\",\n+                                               snippet(cx, args[0].span, r#\"\"foo\"\"#));\n+                            span_lint(cx, STRING_LIT_AS_BYTES, e.span, &msg);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "7ed93737ffae7569a8c22260e2fcf98f9e5391de", "filename": "tests/compile-fail/strings.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fa49eb0de256760b06a879f8240cb220b7a5435/tests%2Fcompile-fail%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa49eb0de256760b06a879f8240cb220b7a5435/tests%2Fcompile-fail%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstrings.rs?ref=6fa49eb0de256760b06a879f8240cb220b7a5435", "patch": "@@ -44,6 +44,14 @@ fn both() {\n     assert_eq!(&x, &z);\n }\n \n+#[allow(dead_code, unused_variables)]\n+#[deny(string_lit_as_bytes)]\n+fn str_lit_as_bytes() {\n+    let bs = \"hello there\".as_bytes(); //~ERROR calling `as_bytes()`\n+    // no warning, because this cannot be written as a byte string literal:\n+    let ubs = \"\u2603\".as_bytes();\n+}\n+\n fn main() {\n     add_only();\n     add_assign_only();"}]}