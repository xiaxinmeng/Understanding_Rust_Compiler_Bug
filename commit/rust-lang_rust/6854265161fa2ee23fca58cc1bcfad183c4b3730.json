{"sha": "6854265161fa2ee23fca58cc1bcfad183c4b3730", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NTQyNjUxNjFmYTJlZTIzZmNhNThjYzFiY2ZhZDE4M2M0YjM3MzA=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-11T22:37:37Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-11T23:00:30Z"}, "message": "Remove comment that is now false", "tree": {"sha": "b4701f727ef4e8c4bba2a32e3df92d3b0d1a716f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4701f727ef4e8c4bba2a32e3df92d3b0d1a716f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6854265161fa2ee23fca58cc1bcfad183c4b3730", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6854265161fa2ee23fca58cc1bcfad183c4b3730", "html_url": "https://github.com/rust-lang/rust/commit/6854265161fa2ee23fca58cc1bcfad183c4b3730", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6854265161fa2ee23fca58cc1bcfad183c4b3730/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfbb7197d71a6ba48904e06e694bb53810825cf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfbb7197d71a6ba48904e06e694bb53810825cf4", "html_url": "https://github.com/rust-lang/rust/commit/bfbb7197d71a6ba48904e06e694bb53810825cf4"}], "stats": {"total": 69, "additions": 40, "deletions": 29}, "files": [{"sha": "b2dd468236a6d10ae142b790ed7b514b840a373a", "filename": "src/libcore/flate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6854265161fa2ee23fca58cc1bcfad183c4b3730/src%2Flibcore%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6854265161fa2ee23fca58cc1bcfad183c4b3730/src%2Flibcore%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fflate.rs?ref=6854265161fa2ee23fca58cc1bcfad183c4b3730", "patch": "@@ -37,7 +37,7 @@ pub fn deflate_bytes(bytes: &[const u8]) -> ~[u8] {\n                                                    ptr::addr_of(&outsz),\n                                                    lz_norm);\n             assert res as int != 0;\n-            let out = vec::raw::from_buf(res as *u8,\n+            let out = vec::raw::from_buf_raw(res as *u8,\n                                             outsz as uint);\n             libc::free(res);\n             move out\n@@ -55,7 +55,7 @@ pub fn inflate_bytes(bytes: &[const u8]) -> ~[u8] {\n                                                      ptr::addr_of(&outsz),\n                                                      0);\n             assert res as int != 0;\n-            let out = vec::raw::from_buf(res as *u8,\n+            let out = vec::raw::from_buf_raw(res as *u8,\n                                             outsz as uint);\n             libc::free(res);\n             move out"}, {"sha": "afc4a821bb6d4c3bc49e5b0b962669b4435f8121", "filename": "src/libcore/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6854265161fa2ee23fca58cc1bcfad183c4b3730/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6854265161fa2ee23fca58cc1bcfad183c4b3730/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=6854265161fa2ee23fca58cc1bcfad183c4b3730", "patch": "@@ -759,8 +759,8 @@ fn test_cant_dup_task_builder() {\n     let b = task().unlinked();\n     do b.spawn { }\n     // FIXME(#3724): For now, this is a -runtime- failure, because we haven't\n-    // got move mode on self. When 3724 is fixed, this test should fail to compile\n-    // instead, and should go in tests/compile-fail.\n+    // got move mode on self. When 3724 is fixed, this test should fail to\n+    // compile instead, and should go in tests/compile-fail.\n     do b.spawn { } // b should have been consumed by the previous call\n }\n "}, {"sha": "5d6e8584664a8da4d11f7ed7bb4551095b5c78a8", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 32, "deletions": 18, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6854265161fa2ee23fca58cc1bcfad183c4b3730/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6854265161fa2ee23fca58cc1bcfad183c4b3730/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=6854265161fa2ee23fca58cc1bcfad183c4b3730", "patch": "@@ -1657,9 +1657,22 @@ impl<T: Eq> ~[T]: MutableEqVector<T> {\n     }\n }\n \n+\n+/**\n+* Constructs a vector from an unsafe pointer to a buffer\n+*\n+* # Arguments\n+*\n+* * ptr - An unsafe pointer to a buffer of `T`\n+* * elts - The number of elements in the buffer\n+*/\n+// Wrapper for fn in raw: needs to be called by net_tcp::on_tcp_read_cb\n+pub unsafe fn from_buf<T>(ptr: *T, elts: uint) -> ~[T] {\n+    raw::from_buf_raw(ptr, elts)\n+}\n+\n /// Unsafe operations\n-pub mod raw {\n-    // FIXME: This should have crate visibility (#1893 blocks that)\n+mod raw {\n \n     /// The internal representation of a (boxed) vector\n     pub struct VecRepr {\n@@ -1679,22 +1692,6 @@ pub mod raw {\n         mut len: uint\n     };\n \n-    /**\n-     * Constructs a vector from an unsafe pointer to a buffer\n-     *\n-     * # Arguments\n-     *\n-     * * ptr - An unsafe pointer to a buffer of `T`\n-     * * elts - The number of elements in the buffer\n-     */\n-    #[inline(always)]\n-    pub unsafe fn from_buf<T>(ptr: *T, elts: uint) -> ~[T] {\n-        let mut dst = with_capacity(elts);\n-        set_len(&mut dst, elts);\n-        as_mut_buf(dst, |p_dst, _len_dst| ptr::memcpy(p_dst, ptr, elts));\n-        move dst\n-    }\n-\n     /**\n      * Sets the length of a vector\n      *\n@@ -1775,6 +1772,23 @@ pub mod raw {\n         }\n     }\n \n+    /**\n+    * Constructs a vector from an unsafe pointer to a buffer\n+    *\n+    * # Arguments\n+    *\n+    * * ptr - An unsafe pointer to a buffer of `T`\n+    * * elts - The number of elements in the buffer\n+    */\n+    // Was in raw, but needs to be called by net_tcp::on_tcp_read_cb\n+    #[inline(always)]\n+    pub unsafe fn from_buf_raw<T>(ptr: *T, elts: uint) -> ~[T] {\n+        let mut dst = with_capacity(elts);\n+        set_len(&mut dst, elts);\n+        as_mut_buf(dst, |p_dst, _len_dst| ptr::memcpy(p_dst, ptr, elts));\n+        move dst\n+    }\n+\n     /**\n       * Copies data from one vector to another.\n       *"}, {"sha": "6178e64ff18c38c4bb6d2c5261b5402eba645f5d", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6854265161fa2ee23fca58cc1bcfad183c4b3730/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6854265161fa2ee23fca58cc1bcfad183c4b3730/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=6854265161fa2ee23fca58cc1bcfad183c4b3730", "patch": "@@ -190,7 +190,7 @@ impl<T: Send> &MutexARC<T> {\n  *\n  * Will additionally fail if another task has failed while accessing the arc.\n  */\n-// FIXME(#2585) make this a by-move method on the arc\n+// FIXME(#3724) make this a by-move method on the arc\n pub fn unwrap_mutex_arc<T: Send>(arc: MutexARC<T>) -> T {\n     let MutexARC { x: x } <- arc;\n     let inner = unsafe { unwrap_shared_mutable_state(move x) };\n@@ -368,7 +368,7 @@ impl<T: Const Send> &RWARC<T> {\n  * Will additionally fail if another task has failed while accessing the arc\n  * in write mode.\n  */\n-// FIXME(#2585) make this a by-move method on the arc\n+// FIXME(#3724) make this a by-move method on the arc\n pub fn unwrap_rw_arc<T: Const Send>(arc: RWARC<T>) -> T {\n     let RWARC { x: x, _ } <- arc;\n     let inner = unsafe { unwrap_shared_mutable_state(move x) };"}, {"sha": "87dea021f5b7513d8b7768584a114979a47ee70e", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6854265161fa2ee23fca58cc1bcfad183c4b3730/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6854265161fa2ee23fca58cc1bcfad183c4b3730/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=6854265161fa2ee23fca58cc1bcfad183c4b3730", "patch": "@@ -6,9 +6,7 @@ use ip = net_ip;\n use uv::iotask;\n use uv::iotask::IoTask;\n use future_spawn = future::spawn;\n-// FIXME #1935\n-// should be able to, but can't atm, replace w/ result::{result, extensions};\n-use result::*;\n+use result::{Result};\n use libc::size_t;\n use io::{Reader, ReaderUtil, Writer};\n use comm = core::comm;\n@@ -1093,7 +1091,7 @@ extern fn on_tcp_read_cb(stream: *uv::ll::uv_stream_t,\n         log(debug, fmt!(\"tcp on_read_cb nread: %d\", nread as int));\n         let reader_ch = (*socket_data_ptr).reader_ch;\n         let buf_base = uv::ll::get_base_from_buf(buf);\n-        let new_bytes = vec::raw::from_buf(buf_base, nread as uint);\n+        let new_bytes = vec::from_buf(buf_base, nread as uint);\n         core::comm::send(reader_ch, result::Ok(new_bytes));\n       }\n     }"}, {"sha": "31ddcfafa2d6b3f3b86c154478ce631dffac38f0", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6854265161fa2ee23fca58cc1bcfad183c4b3730/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6854265161fa2ee23fca58cc1bcfad183c4b3730/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=6854265161fa2ee23fca58cc1bcfad183c4b3730", "patch": "@@ -233,7 +233,6 @@ fn is_exported(i: ident, m: _mod) -> bool {\n                     }\n                   }\n \n-                  // FIXME: glob-exports aren't supported yet. (#2006)\n                   _ => ()\n                 }\n             }"}]}