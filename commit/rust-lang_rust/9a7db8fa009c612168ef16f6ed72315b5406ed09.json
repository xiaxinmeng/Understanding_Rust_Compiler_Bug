{"sha": "9a7db8fa009c612168ef16f6ed72315b5406ed09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhN2RiOGZhMDA5YzYxMjE2OGVmMTZmNmVkNzIzMTViNTQwNmVkMDk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-24T14:25:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-24T14:25:10Z"}, "message": "simplify roots", "tree": {"sha": "e8f0401fda557ddd705086f87be5a87a6b93c04d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8f0401fda557ddd705086f87be5a87a6b93c04d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a7db8fa009c612168ef16f6ed72315b5406ed09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a7db8fa009c612168ef16f6ed72315b5406ed09", "html_url": "https://github.com/rust-lang/rust/commit/9a7db8fa009c612168ef16f6ed72315b5406ed09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a7db8fa009c612168ef16f6ed72315b5406ed09/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ada1a2689eb33b78402ba739a5fb1e7c011def8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ada1a2689eb33b78402ba739a5fb1e7c011def8", "html_url": "https://github.com/rust-lang/rust/commit/8ada1a2689eb33b78402ba739a5fb1e7c011def8"}], "stats": {"total": 68, "additions": 18, "deletions": 50}, "files": [{"sha": "d1a294c302bd8ed4eed1bde4d3e8908cedac2381", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a7db8fa009c612168ef16f6ed72315b5406ed09/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9a7db8fa009c612168ef16f6ed72315b5406ed09/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9a7db8fa009c612168ef16f6ed72315b5406ed09", "patch": "@@ -508,14 +508,6 @@ dependencies = [\n  \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"once_cell\"\n-version = \"0.1.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"owning_ref\"\n version = \"0.3.3\"\n@@ -610,9 +602,6 @@ name = \"ra_analysis\"\n version = \"0.1.0\"\n dependencies = [\n  \"fst 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"once_cell 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_editor 0.1.0\",\n  \"ra_syntax 0.1.0\",\n  \"rayon 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1330,7 +1319,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum num-integer 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e83d528d2677f0518c570baf2b7abdcf0cd2d248860b68507bdcb3e91d4c0cea\"\n \"checksum num-traits 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b3a5d7cc97d6d30d8b9bc8fa19bf45349ffe46241e8816f50f62f6d6aaabee1\"\n \"checksum num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c51a3322e4bca9d212ad9a158a02abc6934d005490c054a2778df73a70aa0a30\"\n-\"checksum once_cell 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d7ce3535d54560c937c1652ba4a0da66bfc63e0f8e07bed127483afb6e5ee925\"\n \"checksum owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cdf84f41639e037b484f93433aa3897863b561ed65c6e59c7073d7c561710f37\"\n \"checksum parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f0802bff09003b291ba756dc7e79313e51cc31667e94afbe847def490424cde5\"\n \"checksum parking_lot_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad7f7e6ebdc79edff6fdcb87a55b620174f7a989e3eb31b65231f4af57f00b8c\""}, {"sha": "75a9dc84413fb6735313d04f0d60e78a7b7837d2", "filename": "crates/ra_analysis/Cargo.toml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a7db8fa009c612168ef16f6ed72315b5406ed09/crates%2Fra_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9a7db8fa009c612168ef16f6ed72315b5406ed09/crates%2Fra_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2FCargo.toml?ref=9a7db8fa009c612168ef16f6ed72315b5406ed09", "patch": "@@ -6,9 +6,6 @@ authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n \n [dependencies]\n relative-path = \"0.4.0\"\n-log = \"0.4.2\"\n-parking_lot = \"0.6.3\"\n-once_cell = \"0.1.5\"\n rayon = \"1.0.2\"\n fst = \"0.3.1\"\n ra_syntax = { path = \"../ra_syntax\" }"}, {"sha": "f142b6c43a80839af889927d485bf7491913c676", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9a7db8fa009c612168ef16f6ed72315b5406ed09/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7db8fa009c612168ef16f6ed72315b5406ed09/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=9a7db8fa009c612168ef16f6ed72315b5406ed09", "patch": "@@ -16,7 +16,8 @@ use relative_path::RelativePath;\n use rustc_hash::FxHashSet;\n \n use crate::{\n-    descriptors::module::{ModuleTree, Problem},\n+    db::SyntaxDatabase,\n+    descriptors::module::{ModulesDatabase, ModuleTree, Problem},\n     descriptors::{FnDescriptor},\n     roots::{ReadonlySourceRoot, SourceRoot, WritableSourceRoot},\n     CrateGraph, CrateId, Diagnostic, FileId, FileResolver, FileSystemEdit, Position,\n@@ -143,10 +144,10 @@ impl AnalysisImpl {\n             .unwrap()\n     }\n     pub fn file_syntax(&self, file_id: FileId) -> File {\n-        self.root(file_id).syntax(file_id)\n+        self.root(file_id).db().file_syntax(file_id)\n     }\n     pub fn file_line_index(&self, file_id: FileId) -> Arc<LineIndex> {\n-        self.root(file_id).lines(file_id)\n+        self.root(file_id).db().file_lines(file_id)\n     }\n     pub fn world_symbols(&self, query: Query) -> Cancelable<Vec<(FileId, FileSymbol)>> {\n         let mut buf = Vec::new();\n@@ -161,14 +162,14 @@ impl AnalysisImpl {\n     }\n     pub fn parent_module(&self, file_id: FileId) -> Cancelable<Vec<(FileId, FileSymbol)>> {\n         let root = self.root(file_id);\n-        let module_tree = root.module_tree()?;\n+        let module_tree = root.db().module_tree()?;\n \n         let res = module_tree.modules_for_file(file_id)\n             .into_iter()\n             .filter_map(|module_id| {\n                 let link = module_id.parent_link(&module_tree)?;\n                 let file_id = link.owner(&module_tree).file_id(&module_tree);\n-                let syntax = root.syntax(file_id);\n+                let syntax = root.db().file_syntax(file_id);\n                 let decl = link.bind_source(&module_tree, syntax.ast());\n \n                 let sym = FileSymbol {\n@@ -182,7 +183,7 @@ impl AnalysisImpl {\n         Ok(res)\n     }\n     pub fn crate_for(&self, file_id: FileId) -> Cancelable<Vec<CrateId>> {\n-        let module_tree = self.root(file_id).module_tree()?;\n+        let module_tree = self.root(file_id).db().module_tree()?;\n         let crate_graph = &self.data.crate_graph;\n         let res = module_tree.modules_for_file(file_id)\n             .into_iter()\n@@ -202,8 +203,8 @@ impl AnalysisImpl {\n         offset: TextUnit,\n     ) -> Cancelable<Vec<(FileId, FileSymbol)>> {\n         let root = self.root(file_id);\n-        let module_tree = root.module_tree()?;\n-        let file = root.syntax(file_id);\n+        let module_tree = root.db().module_tree()?;\n+        let file = root.db().file_syntax(file_id);\n         let syntax = file.syntax();\n         if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, offset) {\n             // First try to resolve the symbol locally\n@@ -253,7 +254,7 @@ impl AnalysisImpl {\n \n     pub fn find_all_refs(&self, file_id: FileId, offset: TextUnit) -> Vec<(FileId, TextRange)> {\n         let root = self.root(file_id);\n-        let file = root.syntax(file_id);\n+        let file = root.db().file_syntax(file_id);\n         let syntax = file.syntax();\n \n         let mut ret = vec![];\n@@ -285,8 +286,8 @@ impl AnalysisImpl {\n \n     pub fn diagnostics(&self, file_id: FileId) -> Cancelable<Vec<Diagnostic>> {\n         let root = self.root(file_id);\n-        let module_tree = root.module_tree()?;\n-        let syntax = root.syntax(file_id);\n+        let module_tree = root.db().module_tree()?;\n+        let syntax = root.db().file_syntax(file_id);\n \n         let mut res = ra_editor::diagnostics(&syntax)\n             .into_iter()\n@@ -376,7 +377,7 @@ impl AnalysisImpl {\n         offset: TextUnit,\n     ) -> Cancelable<Option<(FnDescriptor, Option<usize>)>> {\n         let root = self.root(file_id);\n-        let file = root.syntax(file_id);\n+        let file = root.db().file_syntax(file_id);\n         let syntax = file.syntax();\n \n         // Find the calling expression and it's NameRef"}, {"sha": "67a239a5c62e4150077e11fe5ee065fd8dceead8", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a7db8fa009c612168ef16f6ed72315b5406ed09/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7db8fa009c612168ef16f6ed72315b5406ed09/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=9a7db8fa009c612168ef16f6ed72315b5406ed09", "patch": "@@ -1,8 +1,4 @@\n-extern crate parking_lot;\n-#[macro_use]\n-extern crate log;\n extern crate fst;\n-extern crate once_cell;\n extern crate ra_editor;\n extern crate ra_syntax;\n extern crate rayon;"}, {"sha": "aa02437200b464abf2203b278fcbff8b047ab3b7", "filename": "crates/ra_analysis/src/roots.rs", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9a7db8fa009c612168ef16f6ed72315b5406ed09/crates%2Fra_analysis%2Fsrc%2Froots.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7db8fa009c612168ef16f6ed72315b5406ed09/crates%2Fra_analysis%2Fsrc%2Froots.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Froots.rs?ref=9a7db8fa009c612168ef16f6ed72315b5406ed09", "patch": "@@ -17,9 +17,7 @@ use crate::{\n \n pub(crate) trait SourceRoot {\n     fn contains(&self, file_id: FileId) -> bool;\n-    fn module_tree(&self) -> Cancelable<Arc<ModuleTree>>;\n-    fn lines(&self, file_id: FileId) -> Arc<LineIndex>;\n-    fn syntax(&self, file_id: FileId) -> File;\n+    fn db(&self) -> &db::RootDatabase;\n     fn symbols(&self, acc: &mut Vec<Arc<SymbolIndex>>) -> Cancelable<()>;\n }\n \n@@ -63,17 +61,11 @@ impl WritableSourceRoot {\n }\n \n impl SourceRoot for WritableSourceRoot {\n-    fn module_tree(&self) -> Cancelable<Arc<ModuleTree>> {\n-        self.db.module_tree()\n-    }\n     fn contains(&self, file_id: FileId) -> bool {\n         self.db.file_set().files.contains(&file_id)\n     }\n-    fn lines(&self, file_id: FileId) -> Arc<LineIndex> {\n-        self.db.file_lines(file_id)\n-    }\n-    fn syntax(&self, file_id: FileId) -> File {\n-        self.db.file_syntax(file_id)\n+    fn db(&self) -> &db::RootDatabase {\n+        &self.db\n     }\n     fn symbols<'a>(&'a self, acc: &mut Vec<Arc<SymbolIndex>>) -> Cancelable<()> {\n         for &file_id in self.db.file_set().files.iter() {\n@@ -114,17 +106,11 @@ impl ReadonlySourceRoot {\n }\n \n impl SourceRoot for ReadonlySourceRoot {\n-    fn module_tree(&self) -> Cancelable<Arc<ModuleTree>> {\n-        self.db.module_tree()\n-    }\n     fn contains(&self, file_id: FileId) -> bool {\n         self.db.file_set().files.contains(&file_id)\n     }\n-    fn lines(&self, file_id: FileId) -> Arc<LineIndex> {\n-        self.db.file_lines(file_id)\n-    }\n-    fn syntax(&self, file_id: FileId) -> File {\n-        self.db.file_syntax(file_id)\n+    fn db(&self) -> &db::RootDatabase {\n+        &self.db\n     }\n     fn symbols(&self, acc: &mut Vec<Arc<SymbolIndex>>) -> Cancelable<()> {\n         acc.push(Arc::clone(&self.symbol_index));"}]}