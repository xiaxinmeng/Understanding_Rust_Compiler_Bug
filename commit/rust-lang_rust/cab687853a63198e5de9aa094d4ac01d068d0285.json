{"sha": "cab687853a63198e5de9aa094d4ac01d068d0285", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYjY4Nzg1M2E2MzE5OGU1ZGU5YWEwOTRkNGFjMDFkMDY4ZDAyODU=", "commit": {"author": {"name": "S\u00e9bastien Paolacci", "email": "sebastien.paolacci@gmail.com", "date": "2013-12-16T18:11:17Z"}, "committer": {"name": "S\u00e9bastien Paolacci", "email": "sebastien.paolacci@gmail.com", "date": "2013-12-16T18:11:17Z"}, "message": "Make BufferedReader propagate 0-byte long reads.\n\nCould prevent callers from catching the situation and lead to e.g early\niterator terminations (cf. `Reader::read_byte') since `None' is only to\nbe returned only on EOF.", "tree": {"sha": "583a009887a1bcbdd2dd444a6dd378ddab52ccf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/583a009887a1bcbdd2dd444a6dd378ddab52ccf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cab687853a63198e5de9aa094d4ac01d068d0285", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cab687853a63198e5de9aa094d4ac01d068d0285", "html_url": "https://github.com/rust-lang/rust/commit/cab687853a63198e5de9aa094d4ac01d068d0285", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cab687853a63198e5de9aa094d4ac01d068d0285/comments", "author": {"login": "spaolacci", "id": 3320120, "node_id": "MDQ6VXNlcjMzMjAxMjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3320120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spaolacci", "html_url": "https://github.com/spaolacci", "followers_url": "https://api.github.com/users/spaolacci/followers", "following_url": "https://api.github.com/users/spaolacci/following{/other_user}", "gists_url": "https://api.github.com/users/spaolacci/gists{/gist_id}", "starred_url": "https://api.github.com/users/spaolacci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spaolacci/subscriptions", "organizations_url": "https://api.github.com/users/spaolacci/orgs", "repos_url": "https://api.github.com/users/spaolacci/repos", "events_url": "https://api.github.com/users/spaolacci/events{/privacy}", "received_events_url": "https://api.github.com/users/spaolacci/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spaolacci", "id": 3320120, "node_id": "MDQ6VXNlcjMzMjAxMjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3320120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spaolacci", "html_url": "https://github.com/spaolacci", "followers_url": "https://api.github.com/users/spaolacci/followers", "following_url": "https://api.github.com/users/spaolacci/following{/other_user}", "gists_url": "https://api.github.com/users/spaolacci/gists{/gist_id}", "starred_url": "https://api.github.com/users/spaolacci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spaolacci/subscriptions", "organizations_url": "https://api.github.com/users/spaolacci/orgs", "repos_url": "https://api.github.com/users/spaolacci/repos", "events_url": "https://api.github.com/users/spaolacci/events{/privacy}", "received_events_url": "https://api.github.com/users/spaolacci/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d52dfbace05c46754f4f6bb5a25f55906c9d7b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d52dfbace05c46754f4f6bb5a25f55906c9d7b0", "html_url": "https://github.com/rust-lang/rust/commit/8d52dfbace05c46754f4f6bb5a25f55906c9d7b0"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "6350fabb018d3d02c9a3ce088735b36c1d068f59", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cab687853a63198e5de9aa094d4ac01d068d0285/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cab687853a63198e5de9aa094d4ac01d068d0285/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=cab687853a63198e5de9aa094d4ac01d068d0285", "patch": "@@ -118,14 +118,14 @@ impl<R: Reader> Reader for BufferedReader<R> {\n     fn read(&mut self, buf: &mut [u8]) -> Option<uint> {\n         let nread = {\n             let available = self.fill();\n-            if available.len() == 0 {\n-                return None;\n-            }\n             let nread = num::min(available.len(), buf.len());\n             vec::bytes::copy_memory(buf, available.slice_to(nread));\n             nread\n         };\n         self.pos += nread;\n+        if nread == 0 && self.inner.eof() && buf.len() != 0 {\n+                return None;\n+        }\n         Some(nread)\n     }\n "}]}