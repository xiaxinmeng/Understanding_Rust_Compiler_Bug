{"sha": "0e59ad4ce3e73abf7a099e33696e4d800e48df1a", "node_id": "C_kwDOAAsO6NoAKDBlNTlhZDRjZTNlNzNhYmY3YTA5OWUzMzY5NmU0ZDgwMGU0OGRmMWE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-22T18:07:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-22T18:07:34Z"}, "message": "Rollup merge of #95196 - RalfJung:unalloc-not-uninit, r=oli-obk\n\nrename LocalState::Uninitialized to Unallocated\n\nThis is to avoid confusion with `Uninit` as in `ScalarMaybeUninit`, which is very different.\n\nr? `@oli-obk`", "tree": {"sha": "91c42ef9b93be692bce74251dcfdaf0914b3f406", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91c42ef9b93be692bce74251dcfdaf0914b3f406"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e59ad4ce3e73abf7a099e33696e4d800e48df1a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiOhBmCRBK7hj4Ov3rIwAAIO8IALENx9t2Pm2eJxl2igSmouvu\n3KgWzXDs4d+jS4/OZ8pDEx+W5nvzQkpd6fQ2L6PICQvMeXA2dJPZA/ZlgGl8ccKJ\nRLm3c6dJN53C2y9h/JY/vmgufRViTZKoRlESA7VHkDMndeGBOi3pnOv78z8dj3d6\naj/pCKIqDJuwPpCO9WYMhRD+NibxAMUxTJ87+iEoo4we4BJU/qLJOVQOUQmNBE3V\nEc0zp1nwOHsK+54JrF1AIWsDxdL2D4vxhDFU2LHQCWPaX4Met37fFEgHeNu94bOV\nBOy/Q9/gpyQfik/z06DA4Bnv4fOxIo/5UJMUW8Piuy2MfHK1zlGiwrTfKdNnNZE=\n=AyAA\n-----END PGP SIGNATURE-----\n", "payload": "tree 91c42ef9b93be692bce74251dcfdaf0914b3f406\nparent 7c380939517de8f3bddd2ed850a6dfdd6d8fcb49\nparent b92a60586a3f121592bded64a1556fae0f69c302\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1647972454 +0100\ncommitter GitHub <noreply@github.com> 1647972454 +0100\n\nRollup merge of #95196 - RalfJung:unalloc-not-uninit, r=oli-obk\n\nrename LocalState::Uninitialized to Unallocated\n\nThis is to avoid confusion with `Uninit` as in `ScalarMaybeUninit`, which is very different.\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e59ad4ce3e73abf7a099e33696e4d800e48df1a", "html_url": "https://github.com/rust-lang/rust/commit/0e59ad4ce3e73abf7a099e33696e4d800e48df1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e59ad4ce3e73abf7a099e33696e4d800e48df1a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c380939517de8f3bddd2ed850a6dfdd6d8fcb49", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c380939517de8f3bddd2ed850a6dfdd6d8fcb49", "html_url": "https://github.com/rust-lang/rust/commit/7c380939517de8f3bddd2ed850a6dfdd6d8fcb49"}, {"sha": "b92a60586a3f121592bded64a1556fae0f69c302", "url": "https://api.github.com/repos/rust-lang/rust/commits/b92a60586a3f121592bded64a1556fae0f69c302", "html_url": "https://github.com/rust-lang/rust/commit/b92a60586a3f121592bded64a1556fae0f69c302"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "d78c7a9fad98381afa344261c17f5c0c9ceb8eb1", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0e59ad4ce3e73abf7a099e33696e4d800e48df1a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e59ad4ce3e73abf7a099e33696e4d800e48df1a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=0e59ad4ce3e73abf7a099e33696e4d800e48df1a", "patch": "@@ -177,11 +177,10 @@ pub struct LocalState<'tcx, Tag: Provenance = AllocId> {\n pub enum LocalValue<Tag: Provenance = AllocId> {\n     /// This local is not currently alive, and cannot be used at all.\n     Dead,\n-    /// This local is alive but not yet initialized. It can be written to\n-    /// but not read from or its address taken. Locals get initialized on\n-    /// first write because for unsized locals, we do not know their size\n-    /// before that.\n-    Uninitialized,\n+    /// This local is alive but not yet allocated. It cannot be read from or have its address taken,\n+    /// and will be allocated on the first write. This is to support unsized locals, where we cannot\n+    /// know their size in advance.\n+    Unallocated,\n     /// A normal, live local.\n     /// Mostly for convenience, we re-use the `Operand` type here.\n     /// This is an optimization over just always having a pointer here;\n@@ -198,7 +197,7 @@ impl<'tcx, Tag: Provenance + 'static> LocalState<'tcx, Tag> {\n     pub fn access(&self) -> InterpResult<'tcx, Operand<Tag>> {\n         match self.value {\n             LocalValue::Dead => throw_ub!(DeadLocal),\n-            LocalValue::Uninitialized => {\n+            LocalValue::Unallocated => {\n                 bug!(\"The type checker should prevent reading from a never-written local\")\n             }\n             LocalValue::Live(val) => Ok(val),\n@@ -216,8 +215,7 @@ impl<'tcx, Tag: Provenance + 'static> LocalState<'tcx, Tag> {\n         match self.value {\n             LocalValue::Dead => throw_ub!(DeadLocal),\n             LocalValue::Live(Operand::Indirect(mplace)) => Ok(Err(mplace)),\n-            ref mut\n-            local @ (LocalValue::Live(Operand::Immediate(_)) | LocalValue::Uninitialized) => {\n+            ref mut local @ (LocalValue::Live(Operand::Immediate(_)) | LocalValue::Unallocated) => {\n                 Ok(Ok(local))\n             }\n         }\n@@ -752,8 +750,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             })?;\n         }\n \n-        // Locals are initially uninitialized.\n-        let dummy = LocalState { value: LocalValue::Uninitialized, layout: Cell::new(None) };\n+        // Locals are initially unallocated.\n+        let dummy = LocalState { value: LocalValue::Unallocated, layout: Cell::new(None) };\n         let mut locals = IndexVec::from_elem(dummy, &body.local_decls);\n \n         // Now mark those locals as dead that we do not want to initialize\n@@ -921,7 +919,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         assert!(local != mir::RETURN_PLACE, \"Cannot make return place live\");\n         trace!(\"{:?} is now live\", local);\n \n-        let local_val = LocalValue::Uninitialized;\n+        let local_val = LocalValue::Unallocated;\n         // StorageLive expects the local to be dead, and marks it live.\n         let old = mem::replace(&mut self.frame_mut().locals[local].value, local_val);\n         if !matches!(old, LocalValue::Dead) {\n@@ -1025,7 +1023,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> std::fmt::Debug\n \n                 match self.ecx.stack()[frame].locals[local].value {\n                     LocalValue::Dead => write!(fmt, \" is dead\")?,\n-                    LocalValue::Uninitialized => write!(fmt, \" is uninitialized\")?,\n+                    LocalValue::Unallocated => write!(fmt, \" is unallocated\")?,\n                     LocalValue::Live(Operand::Indirect(mplace)) => {\n                         write!(\n                             fmt,"}, {"sha": "c4d15d4d187207fa8bc09f646072735de4da6f59", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e59ad4ce3e73abf7a099e33696e4d800e48df1a/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e59ad4ce3e73abf7a099e33696e4d800e48df1a/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=0e59ad4ce3e73abf7a099e33696e4d800e48df1a", "patch": "@@ -244,8 +244,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n     ) -> InterpResult<'tcx, InterpOperand<Self::PointerTag>> {\n         let l = &frame.locals[local];\n \n-        if l.value == LocalValue::Uninitialized {\n-            throw_machine_stop_str!(\"tried to access an uninitialized local\")\n+        if l.value == LocalValue::Unallocated {\n+            throw_machine_stop_str!(\"tried to access an unallocated local\")\n         }\n \n         l.access()\n@@ -442,7 +442,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     /// but not reading from them anymore.\n     fn remove_const(ecx: &mut InterpCx<'mir, 'tcx, ConstPropMachine<'mir, 'tcx>>, local: Local) {\n         ecx.frame_mut().locals[local] =\n-            LocalState { value: LocalValue::Uninitialized, layout: Cell::new(None) };\n+            LocalState { value: LocalValue::Unallocated, layout: Cell::new(None) };\n     }\n \n     fn lint_root(&self, source_info: SourceInfo) -> Option<HirId> {\n@@ -1147,7 +1147,7 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n                     let frame = self.ecx.frame_mut();\n                     frame.locals[local].value =\n                         if let StatementKind::StorageLive(_) = statement.kind {\n-                            LocalValue::Uninitialized\n+                            LocalValue::Unallocated\n                         } else {\n                             LocalValue::Dead\n                         };"}]}