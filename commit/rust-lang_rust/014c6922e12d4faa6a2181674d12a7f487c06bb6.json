{"sha": "014c6922e12d4faa6a2181674d12a7f487c06bb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNGM2OTIyZTEyZDRmYWE2YTIxODE2NzRkMTJhN2Y0ODdjMDZiYjY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2011-08-16T16:03:58Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2011-08-16T21:16:14Z"}, "message": "Change expr foo[T] syntax to foo::<T>.\n\nThis preserves the old syntax for now.", "tree": {"sha": "2cee316e045d2742f3007bf884f460326f136606", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cee316e045d2742f3007bf884f460326f136606"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/014c6922e12d4faa6a2181674d12a7f487c06bb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/014c6922e12d4faa6a2181674d12a7f487c06bb6", "html_url": "https://github.com/rust-lang/rust/commit/014c6922e12d4faa6a2181674d12a7f487c06bb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/014c6922e12d4faa6a2181674d12a7f487c06bb6/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9304b7ee5980b889e941251a8a3990593c496eff", "url": "https://api.github.com/repos/rust-lang/rust/commits/9304b7ee5980b889e941251a8a3990593c496eff", "html_url": "https://github.com/rust-lang/rust/commit/9304b7ee5980b889e941251a8a3990593c496eff"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "2bbebc3c56e17744c680da6f9d9d7ce8b524e33f", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/014c6922e12d4faa6a2181674d12a7f487c06bb6/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014c6922e12d4faa6a2181674d12a7f487c06bb6/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=014c6922e12d4faa6a2181674d12a7f487c06bb6", "patch": "@@ -643,8 +643,8 @@ fn parse_fn_block_arg(p: &parser) -> ast::arg {\n     ret {mode: m, ty: t, ident: i, id: p.get_id()};\n }\n \n-fn parse_seq_to_gt[T](sep: option::t[token::token], f: fn(&parser) -> T,\n-                      p: &parser) -> [T] {\n+fn parse_seq_to_before_gt[T](sep: option::t[token::token],\n+                             f: fn(&parser) -> T, p: &parser) -> [T] {\n     let first = true;\n     let v = ~[];\n     while p.peek() != token::GT &&\n@@ -657,11 +657,27 @@ fn parse_seq_to_gt[T](sep: option::t[token::token], f: fn(&parser) -> T,\n         v += ~[f(p)];\n     }\n \n+    ret v;\n+}\n+\n+fn parse_seq_to_gt[T](sep: option::t[token::token], f: fn(&parser) -> T,\n+                      p: &parser) -> [T] {\n+    let v = parse_seq_to_before_gt(sep, f, p);\n     expect_gt(p);\n \n     ret v;\n }\n \n+fn parse_seq_lt_gt[T](sep: option::t[token::token], f: fn(&parser) -> T,\n+                      p: &parser) -> spanned[[T]] {\n+    let lo = p.get_lo_pos();\n+    expect(p, token::LT);\n+    let result = parse_seq_to_before_gt[T](sep, f, p);\n+    let hi = p.get_hi_pos();\n+    expect_gt(p);\n+    ret spanned(lo, hi, result);\n+}\n+\n fn parse_seq_to_end[T](ket: token::token, sep: option::t[token::token],\n                        f: fn(&parser) -> T , p: &parser) -> [T] {\n     let val = parse_seq_to_before_end(ket, sep, f, p);\n@@ -787,6 +803,17 @@ fn parse_path_and_ty_param_substs(p: &parser) -> ast::path {\n                     {global: path.node.global,\n                      idents: path.node.idents,\n                      types: seq.node});\n+    } else if p.peek() == token::MOD_SEP {\n+        p.bump();\n+\n+        let seq = parse_seq_lt_gt(some(token::COMMA), bind parse_ty(_, false),\n+                                  p);\n+        let hi = seq.span.hi;\n+        path =\n+            spanned(lo, hi,\n+                    {global: path.node.global,\n+                     idents: path.node.idents,\n+                     types: seq.node});\n     }\n     ret path;\n }"}, {"sha": "f7a967fd57c8f5b0fbb7b5316b94c19430ed1548", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/014c6922e12d4faa6a2181674d12a7f487c06bb6/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014c6922e12d4faa6a2181674d12a7f487c06bb6/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=014c6922e12d4faa6a2181674d12a7f487c06bb6", "patch": "@@ -100,7 +100,9 @@ fn stmt_to_str(s: &ast::stmt) -> str { be to_str(s, print_stmt); }\n \n fn item_to_str(i: &@ast::item) -> str { be to_str(i, print_item); }\n \n-fn path_to_str(p: &ast::path) -> str { be to_str(p, print_path); }\n+fn path_to_str(p: &ast::path) -> str {\n+    be to_str(p, bind print_path(_, _, false));\n+}\n \n fn fun_to_str(f: &ast::_fn, name: str, params: &[ast::ty_param]) -> str {\n     let writer = io::string_writer();\n@@ -341,7 +343,7 @@ fn print_type(s: &ps, ty: &@ast::ty) {\n         }\n         bclose(s, ty.span);\n       }\n-      ast::ty_path(path, _) { print_path(s, path); }\n+      ast::ty_path(path, _) { print_path(s, path, false); }\n       ast::ty_type. { word(s.s, \"type\"); }\n       ast::ty_constr(t, cs) {\n         print_type(s, t);\n@@ -690,7 +692,7 @@ fn print_mac(s: &ps, m: &ast::mac) {\n     alt m.node {\n       ast::mac_invoc(path, arg, body) {\n         word(s.s, \"#\");\n-        print_path(s, path);\n+        print_path(s, path, false);\n         alt (arg.node) {\n           ast::expr_vec(_,_,_) {}\n           _ { word(s.s, \" \"); }\n@@ -933,7 +935,7 @@ fn print_expr(s: &ps, expr: &@ast::expr) {\n         print_expr(s, index);\n         pclose(s);\n       }\n-      ast::expr_path(path) { print_path(s, path); }\n+      ast::expr_path(path) { print_path(s, path, true); }\n       ast::expr_fail(maybe_fail_val) {\n         word(s.s, \"fail\");\n         alt maybe_fail_val {\n@@ -1088,7 +1090,7 @@ fn print_for_decl(s: &ps, loc: &@ast::local, coll: &@ast::expr) {\n     print_expr(s, coll);\n }\n \n-fn print_path(s: &ps, path: &ast::path) {\n+fn print_path(s: &ps, path: &ast::path, colons_before_params: bool) {\n     maybe_print_comment(s, path.span.lo);\n     if path.node.global { word(s.s, \"::\"); }\n     let first = true;\n@@ -1097,6 +1099,7 @@ fn print_path(s: &ps, path: &ast::path) {\n         word(s.s, id);\n     }\n     if vec::len(path.node.types) > 0u {\n+        if colons_before_params { word(s.s, \"::\"); }\n         word(s.s, \"<\");\n         commasep(s, inconsistent, path.node.types, print_type);\n         word(s.s, \">\");\n@@ -1112,7 +1115,7 @@ fn print_pat(s: &ps, pat: &@ast::pat) {\n       ast::pat_bind(id) { word(s.s, id); }\n       ast::pat_lit(lit) { print_literal(s, lit); }\n       ast::pat_tag(path, args) {\n-        print_path(s, path);\n+        print_path(s, path, true);\n         if vec::len(args) > 0u {\n             popen(s);\n             commasep(s, inconsistent, args, print_pat);"}]}