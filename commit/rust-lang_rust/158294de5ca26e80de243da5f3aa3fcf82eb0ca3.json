{"sha": "158294de5ca26e80de243da5f3aa3fcf82eb0ca3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ODI5NGRlNWNhMjZlODBkZTI0M2RhNWYzYWEzZmNmODJlYjBjYTM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-17T10:51:49Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-17T10:51:49Z"}, "message": "Update libstd patches for latest nightly and macOS", "tree": {"sha": "4026995fc05e2c49b915c2e7b733c3e953d5f2a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4026995fc05e2c49b915c2e7b733c3e953d5f2a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/158294de5ca26e80de243da5f3aa3fcf82eb0ca3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/158294de5ca26e80de243da5f3aa3fcf82eb0ca3", "html_url": "https://github.com/rust-lang/rust/commit/158294de5ca26e80de243da5f3aa3fcf82eb0ca3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/158294de5ca26e80de243da5f3aa3fcf82eb0ca3/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10ad950130db2e78e70ae2439f3bba965329ea4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/10ad950130db2e78e70ae2439f3bba965329ea4f", "html_url": "https://github.com/rust-lang/rust/commit/10ad950130db2e78e70ae2439f3bba965329ea4f"}], "stats": {"total": 107, "additions": 84, "deletions": 23}, "files": [{"sha": "bbbbaab9ff10dda5aa70aaf2bd77f24911140c36", "filename": "0007-Fix-libstd-building.patch", "status": "modified", "additions": 37, "deletions": 12, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/158294de5ca26e80de243da5f3aa3fcf82eb0ca3/0007-Fix-libstd-building.patch", "raw_url": "https://github.com/rust-lang/rust/raw/158294de5ca26e80de243da5f3aa3fcf82eb0ca3/0007-Fix-libstd-building.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/0007-Fix-libstd-building.patch?ref=158294de5ca26e80de243da5f3aa3fcf82eb0ca3", "patch": "@@ -1,36 +1,37 @@\n-From 40c86527fe92b608a65cc1187901035ebc56b281 Mon Sep 17 00:00:00 2001\n+From d8bb60cc115960702f73f83866cde65dcdcf1cb4 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Sat, 6 Oct 2018 13:21:15 +0200\n+Date: Sat, 17 Nov 2018 11:08:10 +0100\n Subject: [PATCH] Fix libstd building\n \n ---\n  src/libstd/lib.rs            |  6 ------\n  src/libstd/net/ip.rs         | 20 --------------------\n  src/libstd/num.rs            |  2 +-\n+ src/libstd/panic.rs          |  6 ------\n  src/libstd/primitive_docs.rs | 16 ----------------\n- 4 files changed, 1 insertion(+), 43 deletions(-)\n+ 5 files changed, 1 insertion(+), 49 deletions(-)\n \n diff --git a/src/libstd/lib.rs b/src/libstd/lib.rs\n-index 4768e8b..c89f99a 100644\n+index 6110b05..8b0c897 100644\n --- a/src/libstd/lib.rs\n +++ b/src/libstd/lib.rs\n-@@ -257,7 +257,6 @@\n+@@ -255,7 +255,6 @@\n  #![feature(const_cstr_unchecked)]\n  #![feature(core_intrinsics)]\n  #![feature(dropck_eyepatch)]\n -#![feature(duration_as_u128)]\n  #![feature(exact_size_is_empty)]\n  #![feature(external_doc)]\n  #![feature(fixed_size_array)]\n-@@ -287,7 +286,6 @@\n+@@ -286,7 +285,6 @@\n  #![feature(rustc_attrs)]\n  #![feature(rustc_const_unstable)]\n  #![feature(std_internals)]\n -#![cfg_attr(not(stage0), feature(stdsimd))]\n  #![feature(shrink_to)]\n  #![feature(slice_concat_ext)]\n  #![feature(slice_internals)]\n-@@ -410,8 +408,6 @@ pub use core::i16;\n+@@ -402,8 +400,6 @@ pub use core::i16;\n  pub use core::i32;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::i64;\n@@ -39,7 +40,7 @@ index 4768e8b..c89f99a 100644\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::usize;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-@@ -444,8 +440,6 @@ pub use alloc_crate::string;\n+@@ -436,8 +432,6 @@ pub use alloc_crate::string;\n  pub use alloc_crate::vec;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::char;\n@@ -49,10 +50,10 @@ index 4768e8b..c89f99a 100644\n  pub use core::hint;\n  \n diff --git a/src/libstd/net/ip.rs b/src/libstd/net/ip.rs\n-index d45a66e..b25b862 100644\n+index 8685cb7..c4bf4d2 100644\n --- a/src/libstd/net/ip.rs\n +++ b/src/libstd/net/ip.rs\n-@@ -1393,26 +1393,6 @@ impl FromInner<c::in6_addr> for Ipv6Addr {\n+@@ -1392,26 +1392,6 @@ impl FromInner<c::in6_addr> for Ipv6Addr {\n      }\n  }\n  \n@@ -92,8 +93,32 @@ index 3f90c1f..85aab83 100644\n  \n  #[cfg(test)] use fmt;\n  #[cfg(test)] use ops::{Add, Sub, Mul, Div, Rem};\n+diff --git a/src/libstd/panic.rs b/src/libstd/panic.rs\n+index 4bc18a5..5c87035 100644\n+--- a/src/libstd/panic.rs\n++++ b/src/libstd/panic.rs\n+@@ -264,9 +264,6 @@ impl RefUnwindSafe for atomic::AtomicI32 {}\n+ #[cfg(target_has_atomic = \"64\")]\n+ #[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+ impl RefUnwindSafe for atomic::AtomicI64 {}\n+-#[cfg(all(not(stage0), target_has_atomic = \"128\"))]\n+-#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+-impl RefUnwindSafe for atomic::AtomicI128 {}\n+ \n+ #[cfg(target_has_atomic = \"ptr\")]\n+ #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n+@@ -283,9 +280,6 @@ impl RefUnwindSafe for atomic::AtomicU32 {}\n+ #[cfg(target_has_atomic = \"64\")]\n+ #[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+ impl RefUnwindSafe for atomic::AtomicU64 {}\n+-#[cfg(all(not(stage0), target_has_atomic = \"128\"))]\n+-#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+-impl RefUnwindSafe for atomic::AtomicU128 {}\n+ \n+ #[cfg(target_has_atomic = \"8\")]\n+ #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n diff --git a/src/libstd/primitive_docs.rs b/src/libstd/primitive_docs.rs\n-index 8d54728..c36893c 100644\n+index c2a1612..99824c5 100644\n --- a/src/libstd/primitive_docs.rs\n +++ b/src/libstd/primitive_docs.rs\n @@ -809,14 +809,6 @@ mod prim_i32 { }\n@@ -127,5 +152,5 @@ index 8d54728..c36893c 100644\n  //\n  /// The pointer-sized signed integer type.\n -- \n-2.17.1 (Apple Git-112)\n+2.17.2 (Apple Git-113)\n "}, {"sha": "44edafcfcc3cb8a9cb4e32cbd4a17f407787e45d", "filename": "0008-Replace-some-variadic-function-calls-with-unimplemen.patch", "status": "modified", "additions": 47, "deletions": 11, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/158294de5ca26e80de243da5f3aa3fcf82eb0ca3/0008-Replace-some-variadic-function-calls-with-unimplemen.patch", "raw_url": "https://github.com/rust-lang/rust/raw/158294de5ca26e80de243da5f3aa3fcf82eb0ca3/0008-Replace-some-variadic-function-calls-with-unimplemen.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/0008-Replace-some-variadic-function-calls-with-unimplemen.patch?ref=158294de5ca26e80de243da5f3aa3fcf82eb0ca3", "patch": "@@ -1,18 +1,18 @@\n-From 96aefe8fdd28704d903d585f5be6a667d2485582 Mon Sep 17 00:00:00 2001\n+From d1d5c0e5272a8c3f78e9c4eb97c38d8f5d5a6d87 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Thu, 15 Nov 2018 11:41:06 +0100\n+Date: Sat, 17 Nov 2018 11:13:19 +0100\n Subject: [PATCH] Replace some variadic function calls with unimplemented!()\n \n ---\n  src/libstd/sys/unix/fd.rs     | 18 ++++++++++++++++++\n- src/libstd/sys/unix/fs.rs     |  9 +++++++++\n+ src/libstd/sys/unix/fs.rs     | 17 ++++++++++++++++-\n  src/libstd/sys/unix/net.rs    |  3 +++\n  src/libstd/sys/unix/rand.rs   |  3 +++\n  src/libstd/sys/unix/thread.rs |  3 +++\n- 5 files changed, 36 insertions(+)\n+ 5 files changed, 43 insertions(+), 1 deletion(-)\n \n diff --git a/src/libstd/sys/unix/fd.rs b/src/libstd/sys/unix/fd.rs\n-index af33d26..2433ae4 100644\n+index 5a81d6d..919f9d1 100644\n --- a/src/libstd/sys/unix/fd.rs\n +++ b/src/libstd/sys/unix/fd.rs\n @@ -156,9 +156,12 @@ impl FileDesc {\n@@ -99,7 +99,7 @@ index af33d26..2433ae4 100644\n  }\n  \n diff --git a/src/libstd/sys/unix/fs.rs b/src/libstd/sys/unix/fs.rs\n-index add06ae..e0d3f84 100644\n+index add06ae..1a392fc 100644\n --- a/src/libstd/sys/unix/fs.rs\n +++ b/src/libstd/sys/unix/fs.rs\n @@ -465,6 +465,7 @@ impl File {\n@@ -119,15 +119,51 @@ index add06ae..e0d3f84 100644\n      }\n  \n      pub fn file_attr(&self) -> io::Result<FileAttr> {\n-@@ -667,6 +670,7 @@ impl fmt::Debug for File {\n+@@ -535,6 +538,7 @@ impl File {\n+     }\n+ \n+     pub fn datasync(&self) -> io::Result<()> {\n++        /*\n+         cvt_r(|| unsafe { os_datasync(self.0.raw()) })?;\n+         return Ok(());\n+ \n+@@ -547,7 +551,9 @@ impl File {\n+         #[cfg(not(any(target_os = \"macos\",\n+                       target_os = \"ios\",\n+                       target_os = \"linux\")))]\n+-        unsafe fn os_datasync(fd: c_int) -> c_int { libc::fsync(fd) }\n++        unsafe fn os_datasync(fd: c_int) -> c_int { libc::fsync(fd) }]\n++        */\n++        unimplemented!();\n+     }\n+ \n+     pub fn truncate(&self, size: u64) -> io::Result<()> {\n+@@ -643,6 +649,7 @@ impl fmt::Debug for File {\n+ \n+         #[cfg(target_os = \"macos\")]\n+         fn get_path(fd: c_int) -> Option<PathBuf> {\n++            /*\n+             // FIXME: The use of PATH_MAX is generally not encouraged, but it\n+             // is inevitable in this case because macOS defines `fcntl` with\n+             // `F_GETPATH` in terms of `MAXPATHLEN`, and there are no\n+@@ -657,6 +664,8 @@ impl fmt::Debug for File {\n+             buf.truncate(l as usize);\n+             buf.shrink_to_fit();\n+             Some(PathBuf::from(OsString::from_vec(buf)))\n++            */\n++            unimplemented!();\n+         }\n+ \n+         #[cfg(not(any(target_os = \"linux\", target_os = \"macos\")))]\n+@@ -667,6 +676,7 @@ impl fmt::Debug for File {\n  \n          #[cfg(any(target_os = \"linux\", target_os = \"macos\"))]\n          fn get_mode(fd: c_int) -> Option<(bool, bool)> {\n +            /*\n              let mode = unsafe { libc::fcntl(fd, libc::F_GETFL) };\n              if mode == -1 {\n                  return None;\n-@@ -677,6 +681,8 @@ impl fmt::Debug for File {\n+@@ -677,6 +687,8 @@ impl fmt::Debug for File {\n                  libc::O_WRONLY => Some((false, true)),\n                  _ => None\n              }\n@@ -136,15 +172,15 @@ index add06ae..e0d3f84 100644\n          }\n  \n          #[cfg(not(any(target_os = \"linux\", target_os = \"macos\")))]\n-@@ -868,6 +874,7 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n+@@ -868,6 +880,7 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n          len: libc::size_t,\n          flags: libc::c_uint,\n      ) -> libc::c_long {\n +        /*\n          libc::syscall(\n              libc::SYS_copy_file_range,\n              fd_in,\n-@@ -877,6 +884,8 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n+@@ -877,6 +890,8 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n              len,\n              flags,\n          )\n@@ -207,5 +243,5 @@ index f3a45d2..1c2f0ce 100644\n  \n      #[cfg(any(target_os = \"freebsd\",\n -- \n-2.11.0\n+2.17.2 (Apple Git-113)\n "}]}