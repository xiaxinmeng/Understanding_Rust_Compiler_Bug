{"sha": "3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZDVmZGQ4ZDNlNjRlOTU3YTdlYWZlM2Q2ZDBiMTBlZjQxNzBkNTk=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-07-25T02:42:11Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-09-13T04:22:15Z"}, "message": "crate-ify compiler-rt into compiler-builtins\n\nlibcompiler-rt.a is dead, long live libcompiler-builtins.rlib\n\nThis commit moves the logic that used to build libcompiler-rt.a into a\ncompiler-builtins crate on top of the core crate and below the std crate.\nThis new crate still compiles the compiler-rt instrinsics using gcc-rs\nbut produces an .rlib instead of a static library.\n\nAlso, with this commit rustc no longer passes -lcompiler-rt to the\nlinker. This effectively makes the \"no-compiler-rt\" field of target\nspecifications a no-op. Users of `no_std` will have to explicitly add\nthe compiler-builtins crate to their crate dependency graph *if* they\nneed the compiler-rt intrinsics. Users of the `std` have to do nothing\nextra as the std crate depends on compiler-builtins.\n\nFinally, this a step towards lazy compilation of std with Cargo as the\ncompiler-rt intrinsics can now be built by Cargo instead of having to\nbe supplied by the user by some other method.\n\ncloses #34400", "tree": {"sha": "cf7fe432fda547436b1e0355cb5d0cfec689833f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf7fe432fda547436b1e0355cb5d0cfec689833f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "html_url": "https://github.com/rust-lang/rust/commit/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/comments", "author": null, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa9d8cc8ace2c1f22469b4a6c8e1e0352072c675", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa9d8cc8ace2c1f22469b4a6c8e1e0352072c675", "html_url": "https://github.com/rust-lang/rust/commit/fa9d8cc8ace2c1f22469b4a6c8e1e0352072c675"}], "stats": {"total": 1294, "additions": 693, "deletions": 601}, "files": [{"sha": "3574f25d9b7442b1e8e0133a4806a2f29e6985b4", "filename": "mk/clean.mk", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "patch": "@@ -102,7 +102,6 @@ define CLEAN_TARGET_STAGE_N\n clean$(1)_T_$(2)_H_$(3): \\\n \t    $$(foreach crate,$$(CRATES),clean$(1)_T_$(2)_H_$(3)-lib-$$(crate)) \\\n \t    $$(foreach tool,$$(TOOLS) $$(DEBUGGER_BIN_SCRIPTS_ALL),clean$(1)_T_$(2)_H_$(3)-tool-$$(tool))\n-\t$$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/libcompiler-rt.a\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/librun_pass_stage* # For unix\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/run_pass_stage* # For windows\n "}, {"sha": "d2c79441d866f075f6c17423bb1acace939468af", "filename": "mk/crates.mk", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "patch": "@@ -51,7 +51,7 @@\n \n TARGET_CRATES := libc std term \\\n                  getopts collections test rand \\\n-                 core alloc \\\n+                 compiler_builtins core alloc \\\n                  rustc_unicode rustc_bitflags \\\n \t\t alloc_system alloc_jemalloc \\\n \t\t panic_abort panic_unwind unwind\n@@ -65,6 +65,7 @@ HOST_CRATES := syntax syntax_ext proc_macro syntax_pos $(RUSTC_CRATES) rustdoc f\n TOOLS := compiletest rustdoc rustc rustbook error_index_generator\n \n DEPS_core :=\n+DEPS_compiler_builtins := core\n DEPS_alloc := core libc alloc_system\n DEPS_alloc_system := core libc\n DEPS_alloc_jemalloc := core libc native:jemalloc\n@@ -77,12 +78,14 @@ DEPS_panic_abort := libc alloc\n DEPS_panic_unwind := libc alloc unwind\n DEPS_unwind := libc\n \n+RUSTFLAGS_compiler_builtins := -lstatic=compiler-rt\n+\n # FIXME(stage0): change this to just `RUSTFLAGS_panic_abort := ...`\n RUSTFLAGS1_panic_abort := -C panic=abort\n RUSTFLAGS2_panic_abort := -C panic=abort\n RUSTFLAGS3_panic_abort := -C panic=abort\n \n-DEPS_std := core libc rand alloc collections rustc_unicode \\\n+DEPS_std := core libc rand alloc collections compiler_builtins rustc_unicode \\\n \tnative:backtrace \\\n \talloc_system panic_abort panic_unwind unwind\n DEPS_arena := std\n@@ -153,6 +156,7 @@ TOOL_SOURCE_rustc := $(S)src/driver/driver.rs\n TOOL_SOURCE_rustbook := $(S)src/tools/rustbook/main.rs\n TOOL_SOURCE_error_index_generator := $(S)src/tools/error_index_generator/main.rs\n \n+ONLY_RLIB_compiler_builtins := 1\n ONLY_RLIB_core := 1\n ONLY_RLIB_libc := 1\n ONLY_RLIB_alloc := 1"}, {"sha": "dd0136e136216e27c2d62b4f0d6add1cb79630dc", "filename": "mk/main.mk", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "patch": "@@ -455,7 +455,10 @@ endif\n TSREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(HSREQ$(1)_H_$(3)) \\\n \t$$(foreach obj,$$(REQUIRED_OBJECTS_$(2)),\\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(obj))\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(obj)) \\\n+\t$$(TLIB0_T_$(2)_H_$(3))/libcompiler-rt.a\n+# ^ This copies `libcompiler-rt.a` to the stage0 sysroot\n+# ^ TODO(stage0) update this to not copy `libcompiler-rt.a` to stage0\n \n # Prerequisites for a working stageN compiler and libraries, for a specific\n # target"}, {"sha": "6a7a20cbfdb99b1b77f4049adc913b1b7fe07bc8", "filename": "mk/platform.mk", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "patch": "@@ -102,8 +102,6 @@ include $(wildcard $(CFG_SRC_DIR)mk/cfg/*.mk)\n define ADD_INSTALLED_OBJECTS\n   INSTALLED_OBJECTS_$(1) += $$(CFG_INSTALLED_OBJECTS_$(1))\n   REQUIRED_OBJECTS_$(1) += $$(CFG_THIRD_PARTY_OBJECTS_$(1))\n-  INSTALLED_OBJECTS_$(1) += $$(call CFG_STATIC_LIB_NAME_$(1),compiler-rt)\n-  REQUIRED_OBJECTS_$(1) += $$(call CFG_STATIC_LIB_NAME_$(1),compiler-rt)\n endef\n \n $(foreach target,$(CFG_TARGET), \\"}, {"sha": "bcbed333e0f7f3de027d591647ab55a94b413c1d", "filename": "mk/rt.mk", "status": "modified", "additions": 179, "deletions": 161, "changes": 340, "blob_url": "https://github.com/rust-lang/rust/blob/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "patch": "@@ -37,6 +37,16 @@\n ################################################################################\n NATIVE_LIBS := hoedown miniz rust_test_helpers\n \n+# A macro to add a generic implementation of intrinsics iff a arch optimized implementation is not\n+# already in the list.\n+# $(1) is the target\n+# $(2) is the intrinsic\n+define ADD_INTRINSIC\n+  ifeq ($$(findstring X,$$(foreach intrinsic,$$(COMPRT_OBJS_$(1)),$$(if $$(findstring $(2),$$(intrinsic)),X,))),)\n+    COMPRT_OBJS_$(1) += $(2)\n+  endif\n+endef\n+\n # $(1) is the target triple\n define NATIVE_LIBRARIES\n \n@@ -230,167 +240,15 @@ COMPRT_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),compiler-rt)\n COMPRT_LIB_$(1) := $$(RT_OUTPUT_DIR_$(1))/$$(COMPRT_NAME_$(1))\n COMPRT_BUILD_DIR_$(1) := $$(RT_OUTPUT_DIR_$(1))/compiler-rt\n \n-# GENERIC_SOURCES in CMakeLists.txt\n-COMPRT_OBJS_$(1) := \\\n-  absvdi2.o \\\n-  absvsi2.o \\\n-  adddf3.o \\\n-  addsf3.o \\\n-  addvdi3.o \\\n-  addvsi3.o \\\n-  apple_versioning.o \\\n-  ashldi3.o \\\n-  ashrdi3.o \\\n-  clear_cache.o \\\n-  clzdi2.o \\\n-  clzsi2.o \\\n-  cmpdi2.o \\\n-  comparedf2.o \\\n-  comparesf2.o \\\n-  ctzdi2.o \\\n-  ctzsi2.o \\\n-  divdc3.o \\\n-  divdf3.o \\\n-  divdi3.o \\\n-  divmoddi4.o \\\n-  divmodsi4.o \\\n-  divsc3.o \\\n-  divsf3.o \\\n-  divsi3.o \\\n-  divxc3.o \\\n-  extendsfdf2.o \\\n-  extendhfsf2.o \\\n-  ffsdi2.o \\\n-  fixdfdi.o \\\n-  fixdfsi.o \\\n-  fixsfdi.o \\\n-  fixsfsi.o \\\n-  fixunsdfdi.o \\\n-  fixunsdfsi.o \\\n-  fixunssfdi.o \\\n-  fixunssfsi.o \\\n-  fixunsxfdi.o \\\n-  fixunsxfsi.o \\\n-  fixxfdi.o \\\n-  floatdidf.o \\\n-  floatdisf.o \\\n-  floatdixf.o \\\n-  floatsidf.o \\\n-  floatsisf.o \\\n-  floatundidf.o \\\n-  floatundisf.o \\\n-  floatundixf.o \\\n-  floatunsidf.o \\\n-  floatunsisf.o \\\n-  int_util.o \\\n-  lshrdi3.o \\\n-  moddi3.o \\\n-  modsi3.o \\\n-  muldc3.o \\\n-  muldf3.o \\\n-  muldi3.o \\\n-  mulodi4.o \\\n-  mulosi4.o \\\n-  muloti4.o \\\n-  mulsc3.o \\\n-  mulsf3.o \\\n-  mulvdi3.o \\\n-  mulvsi3.o \\\n-  mulxc3.o \\\n-  negdf2.o \\\n-  negdi2.o \\\n-  negsf2.o \\\n-  negvdi2.o \\\n-  negvsi2.o \\\n-  paritydi2.o \\\n-  paritysi2.o \\\n-  popcountdi2.o \\\n-  popcountsi2.o \\\n-  powidf2.o \\\n-  powisf2.o \\\n-  powixf2.o \\\n-  subdf3.o \\\n-  subsf3.o \\\n-  subvdi3.o \\\n-  subvsi3.o \\\n-  truncdfhf2.o \\\n-  truncdfsf2.o \\\n-  truncsfhf2.o \\\n-  ucmpdi2.o \\\n-  udivdi3.o \\\n-  udivmoddi4.o \\\n-  udivmodsi4.o \\\n-  udivsi3.o \\\n-  umoddi3.o \\\n-  umodsi3.o\n-\n-ifeq ($$(findstring ios,$(1)),)\n-COMPRT_OBJS_$(1) += \\\n-  absvti2.o \\\n-  addtf3.o \\\n-  addvti3.o \\\n-  ashlti3.o \\\n-  ashrti3.o \\\n-  clzti2.o \\\n-  cmpti2.o \\\n-  ctzti2.o \\\n-  divtf3.o \\\n-  divti3.o \\\n-  ffsti2.o \\\n-  fixdfti.o \\\n-  fixsfti.o \\\n-  fixunsdfti.o \\\n-  fixunssfti.o \\\n-  fixunsxfti.o \\\n-  fixxfti.o \\\n-  floattidf.o \\\n-  floattisf.o \\\n-  floattixf.o \\\n-  floatuntidf.o \\\n-  floatuntisf.o \\\n-  floatuntixf.o \\\n-  lshrti3.o \\\n-  modti3.o \\\n-  multf3.o \\\n-  multi3.o \\\n-  mulvti3.o \\\n-  negti2.o \\\n-  negvti2.o \\\n-  parityti2.o \\\n-  popcountti2.o \\\n-  powitf2.o \\\n-  subtf3.o \\\n-  subvti3.o \\\n-  trampoline_setup.o \\\n-  ucmpti2.o \\\n-  udivmodti4.o \\\n-  udivti3.o \\\n-  umodti3.o\n-endif\n-\n-ifeq ($$(findstring apple,$(1)),apple)\n-COMPRT_OBJS_$(1) +=  \\\n-\t    atomic_flag_clear.o \\\n-\t    atomic_flag_clear_explicit.o \\\n-\t    atomic_flag_test_and_set.o \\\n-\t    atomic_flag_test_and_set_explicit.o \\\n-\t    atomic_signal_fence.o \\\n-\t    atomic_thread_fence.o\n-endif\n+# We must avoid compiling both a generic implementation (e.g. `floatdidf.c) and an arch optimized\n+# implementation (e.g. `x86_64/floatdidf.S) of the same symbol (e.g. `floatdidf) because that causes\n+# linker errors. To avoid that, we first add all the arch optimized implementations and then add the\n+# generic implementations if and only if its arch optimized version is not already in the list. This\n+# last part is handled by the ADD_INTRINSIC macro.\n \n-\n-ifeq ($$(findstring windows,$(1)),)\n-COMPRT_OBJS_$(1) += emutls.o\n-endif\n+COMPRT_OBJS_$(1) :=\n \n ifeq ($$(findstring msvc,$(1)),)\n-\n-ifeq ($$(findstring freebsd,$(1)),)\n-COMPRT_OBJS_$(1) += gcc_personality_v0.o\n-endif\n-\n-COMPRT_OBJS_$(1) += emutls.o\n-\n ifeq ($$(findstring x86_64,$(1)),x86_64)\n COMPRT_OBJS_$(1) += \\\n       x86_64/chkstk.o \\\n@@ -540,9 +398,168 @@ COMPRT_OBJS_$(1) += \\\n   arm/unordsf2vfp.o\n endif\n \n+$(foreach intrinsic,absvdi2.o \\\n+  absvsi2.o \\\n+  adddf3.o \\\n+  addsf3.o \\\n+  addvdi3.o \\\n+  addvsi3.o \\\n+  apple_versioning.o \\\n+  ashldi3.o \\\n+  ashrdi3.o \\\n+  clear_cache.o \\\n+  clzdi2.o \\\n+  clzsi2.o \\\n+  cmpdi2.o \\\n+  comparedf2.o \\\n+  comparesf2.o \\\n+  ctzdi2.o \\\n+  ctzsi2.o \\\n+  divdc3.o \\\n+  divdf3.o \\\n+  divdi3.o \\\n+  divmoddi4.o \\\n+  divmodsi4.o \\\n+  divsc3.o \\\n+  divsf3.o \\\n+  divsi3.o \\\n+  divxc3.o \\\n+  extendsfdf2.o \\\n+  extendhfsf2.o \\\n+  ffsdi2.o \\\n+  fixdfdi.o \\\n+  fixdfsi.o \\\n+  fixsfdi.o \\\n+  fixsfsi.o \\\n+  fixunsdfdi.o \\\n+  fixunsdfsi.o \\\n+  fixunssfdi.o \\\n+  fixunssfsi.o \\\n+  fixunsxfdi.o \\\n+  fixunsxfsi.o \\\n+  fixxfdi.o \\\n+  floatdidf.o \\\n+  floatdisf.o \\\n+  floatdixf.o \\\n+  floatsidf.o \\\n+  floatsisf.o \\\n+  floatundidf.o \\\n+  floatundisf.o \\\n+  floatundixf.o \\\n+  floatunsidf.o \\\n+  floatunsisf.o \\\n+  int_util.o \\\n+  lshrdi3.o \\\n+  moddi3.o \\\n+  modsi3.o \\\n+  muldc3.o \\\n+  muldf3.o \\\n+  muldi3.o \\\n+  mulodi4.o \\\n+  mulosi4.o \\\n+  muloti4.o \\\n+  mulsc3.o \\\n+  mulsf3.o \\\n+  mulvdi3.o \\\n+  mulvsi3.o \\\n+  mulxc3.o \\\n+  negdf2.o \\\n+  negdi2.o \\\n+  negsf2.o \\\n+  negvdi2.o \\\n+  negvsi2.o \\\n+  paritydi2.o \\\n+  paritysi2.o \\\n+  popcountdi2.o \\\n+  popcountsi2.o \\\n+  powidf2.o \\\n+  powisf2.o \\\n+  powixf2.o \\\n+  subdf3.o \\\n+  subsf3.o \\\n+  subvdi3.o \\\n+  subvsi3.o \\\n+  truncdfhf2.o \\\n+  truncdfsf2.o \\\n+  truncsfhf2.o \\\n+  ucmpdi2.o \\\n+  udivdi3.o \\\n+  udivmoddi4.o \\\n+  udivmodsi4.o \\\n+  udivsi3.o \\\n+  umoddi3.o \\\n+  umodsi3.o,\n+  $(call ADD_INTRINSIC,$(1),$(intrinsic)))\n+\n+ifeq ($$(findstring ios,$(1)),)\n+$(foreach intrinsic,absvti2.o \\\n+  addtf3.o \\\n+  addvti3.o \\\n+  ashlti3.o \\\n+  ashrti3.o \\\n+  clzti2.o \\\n+  cmpti2.o \\\n+  ctzti2.o \\\n+  divtf3.o \\\n+  divti3.o \\\n+  ffsti2.o \\\n+  fixdfti.o \\\n+  fixsfti.o \\\n+  fixunsdfti.o \\\n+  fixunssfti.o \\\n+  fixunsxfti.o \\\n+  fixxfti.o \\\n+  floattidf.o \\\n+  floattisf.o \\\n+  floattixf.o \\\n+  floatuntidf.o \\\n+  floatuntisf.o \\\n+  floatuntixf.o \\\n+  lshrti3.o \\\n+  modti3.o \\\n+  multf3.o \\\n+  multi3.o \\\n+  mulvti3.o \\\n+  negti2.o \\\n+  negvti2.o \\\n+  parityti2.o \\\n+  popcountti2.o \\\n+  powitf2.o \\\n+  subtf3.o \\\n+  subvti3.o \\\n+  trampoline_setup.o \\\n+  ucmpti2.o \\\n+  udivmodti4.o \\\n+  udivti3.o \\\n+  umodti3.o,\n+  $(call ADD_INTRINSIC,$(1),$(intrinsic)))\n+endif\n+\n+ifeq ($$(findstring apple,$(1)),apple)\n+$(foreach intrinsic,atomic_flag_clear.o \\\n+  atomic_flag_clear_explicit.o \\\n+  atomic_flag_test_and_set.o \\\n+  atomic_flag_test_and_set_explicit.o \\\n+  atomic_signal_fence.o \\\n+  atomic_thread_fence.o,\n+  $(call ADD_INTRINSIC,$(1),$(intrinsic)))\n+endif\n+\n+ifeq ($$(findstring windows,$(1)),)\n+$(call ADD_INTRINSIC,$(1),emutls.o)\n+endif\n+\n+ifeq ($$(findstring msvc,$(1)),)\n+\n+ifeq ($$(findstring freebsd,$(1)),)\n+$(call ADD_INTRINSIC,$(1),gcc_personality_v0.o)\n+endif\n+\n+$(call ADD_INTRINSIC,$(1),emutls.o)\n+endif\n+\n ifeq ($$(findstring aarch64,$(1)),aarch64)\n-COMPRT_OBJS_$(1) += \\\n-  comparetf2.o \\\n+$(foreach intrinsic,comparetf2.o \\\n   extenddftf2.o \\\n   extendsftf2.o \\\n   fixtfdi.o \\\n@@ -557,7 +574,8 @@ COMPRT_OBJS_$(1) += \\\n   floatunsitf.o \\\n   multc3.o \\\n   trunctfdf2.o \\\n-  trunctfsf2.o\n+  trunctfsf2.o,\n+  $(call ADD_INTRINSIC,$(1),$(intrinsic)))\n endif\n \n ifeq ($$(findstring msvc,$(1)),msvc)"}, {"sha": "a1e286e162ffa2ba5b92f47b0bf751c2e5bc8cb6", "filename": "src/bootstrap/clean.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Fbootstrap%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Fbootstrap%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fclean.rs?ref=3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "patch": "@@ -28,7 +28,6 @@ pub fn clean(build: &Build) {\n \n         let out = build.out.join(host);\n \n-        rm_rf(build, &out.join(\"compiler-rt\"));\n         rm_rf(build, &out.join(\"doc\"));\n \n         for stage in 0..4 {"}, {"sha": "60bf52a514c37feea1ef0bc332a1090bd3baec12", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "patch": "@@ -35,13 +35,23 @@ pub fn std<'a>(build: &'a Build, target: &str, compiler: &Compiler<'a>) {\n     println!(\"Building stage{} std artifacts ({} -> {})\", compiler.stage,\n              compiler.host, target);\n \n-    // Move compiler-rt into place as it'll be required by the compiler when\n-    // building the standard library to link the dylib of libstd\n     let libdir = build.sysroot_libdir(compiler, target);\n     let _ = fs::remove_dir_all(&libdir);\n     t!(fs::create_dir_all(&libdir));\n-    copy(&build.compiler_rt_built.borrow()[target],\n-         &libdir.join(staticlib(\"compiler-rt\", target)));\n+    // FIXME(stage0) remove this `if` after the next snapshot\n+    // The stage0 compiler still passes the `-lcompiler-rt` flag to the linker but now `bootstrap`\n+    // never builds a `libcopmiler-rt.a`! We'll fill the hole by simply copying stage0's\n+    // `libcompiler-rt.a` to where the stage1's one is expected (though we could as well just use\n+    // an empty `.a` archive). Note that the symbols of that stage0 `libcompiler-rt.a` won't make\n+    // it to the final binary because now `libcore.rlib` also contains the symbols that\n+    // `libcompiler-rt.a` provides. Since that rlib appears first in the linker arguments, its\n+    // symbols are used instead of `libcompiler-rt.a`'s.\n+    if compiler.stage == 0 {\n+        let rtlib = &staticlib(\"compiler-rt\", target);\n+        let src = build.rustc.parent().unwrap().parent().unwrap().join(\"lib\").join(\"rustlib\")\n+            .join(target).join(\"lib\").join(rtlib);\n+        copy(&src, &libdir.join(rtlib));\n+    }\n \n     // Some platforms have startup objects that may be required to produce the\n     // libstd dynamic library, for example.\n@@ -83,12 +93,10 @@ pub fn std_link(build: &Build,\n \n     // If we're linking one compiler host's output into another, then we weren't\n     // called from the `std` method above. In that case we clean out what's\n-    // already there and then also link compiler-rt into place.\n+    // already there.\n     if host != compiler.host {\n         let _ = fs::remove_dir_all(&libdir);\n         t!(fs::create_dir_all(&libdir));\n-        copy(&build.compiler_rt_built.borrow()[target],\n-             &libdir.join(staticlib(\"compiler-rt\", target)));\n     }\n     add_to_sysroot(&out_dir, &libdir);\n "}, {"sha": "4beba5c8852b66ef4bd8ef0c843746d3e519b972", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "patch": "@@ -28,7 +28,6 @@ extern crate rustc_serialize;\n extern crate toml;\n extern crate regex;\n \n-use std::cell::RefCell;\n use std::collections::HashMap;\n use std::env;\n use std::fs::{self, File};\n@@ -131,7 +130,6 @@ pub struct Build {\n     // Runtime state filled in later on\n     cc: HashMap<String, (gcc::Tool, Option<PathBuf>)>,\n     cxx: HashMap<String, gcc::Tool>,\n-    compiler_rt_built: RefCell<HashMap<String, PathBuf>>,\n }\n \n /// The various \"modes\" of invoking Cargo.\n@@ -198,7 +196,6 @@ impl Build {\n             package_vers: String::new(),\n             cc: HashMap::new(),\n             cxx: HashMap::new(),\n-            compiler_rt_built: RefCell::new(HashMap::new()),\n             gdb_version: None,\n             lldb_version: None,\n             lldb_python_dir: None,\n@@ -252,9 +249,6 @@ impl Build {\n                 Llvm { _dummy } => {\n                     native::llvm(self, target.target);\n                 }\n-                CompilerRt { _dummy } => {\n-                    native::compiler_rt(self, target.target);\n-                }\n                 TestHelpers { _dummy } => {\n                     native::test_helpers(self, target.target);\n                 }\n@@ -839,11 +833,6 @@ impl Build {\n         }\n     }\n \n-    /// Root output directory for compiler-rt compiled for `target`\n-    fn compiler_rt_out(&self, target: &str) -> PathBuf {\n-        self.out.join(target).join(\"compiler-rt\")\n-    }\n-\n     /// Root output directory for rust_test_helpers library compiled for\n     /// `target`\n     fn test_helpers_out(&self, target: &str) -> PathBuf {"}, {"sha": "df6408e5fe1c8ac2010abcfdd3222a6b61b976d5", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 396, "changes": 397, "blob_url": "https://github.com/rust-lang/rust/blob/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "patch": "@@ -27,7 +27,7 @@ use cmake;\n use gcc;\n \n use Build;\n-use util::{staticlib, up_to_date};\n+use util::up_to_date;\n \n /// Compile LLVM for `target`.\n pub fn llvm(build: &Build, target: &str) {\n@@ -131,401 +131,6 @@ fn check_llvm_version(build: &Build, llvm_config: &Path) {\n     panic!(\"\\n\\nbad LLVM version: {}, need >=3.5\\n\\n\", version)\n }\n \n-/// Compiles the `compiler-rt` library, or at least the builtins part of it.\n-///\n-/// Note that while compiler-rt has a build system associated with it, we\n-/// specifically don't use it here. The compiler-rt build system, written in\n-/// CMake, is actually *very* difficult to work with in terms of getting it to\n-/// compile on all the relevant platforms we want it to compile on. In the end\n-/// it became so much pain to work with local patches, work around the oddities\n-/// of the build system, etc, that we're just building everything by hand now.\n-///\n-/// In general compiler-rt is just a bunch of intrinsics that are in practice\n-/// *very* stable. We just need to make sure that all the relevant functions and\n-/// such are compiled somewhere and placed in an object file somewhere.\n-/// Eventually, these should all be written in Rust!\n-///\n-/// So below you'll find a listing of every single file in the compiler-rt repo\n-/// that we're compiling. We just reach in and compile with the `gcc` crate\n-/// which should have all the relevant flags and such already configured.\n-///\n-/// The risk here is that if we update compiler-rt we may need to compile some\n-/// new intrinsics, but to be honest we surely don't use all of the intrinsics\n-/// listed below today so the likelihood of us actually needing a new intrinsic\n-/// is quite low. The failure case is also just that someone reports a link\n-/// error (if any) and then we just add it to the list. Overall, that cost is\n-/// far far less than working with compiler-rt's build system over time.\n-pub fn compiler_rt(build: &Build, target: &str) {\n-    let build_dir = build.compiler_rt_out(target);\n-    let output = build_dir.join(staticlib(\"compiler-rt\", target));\n-    build.compiler_rt_built.borrow_mut().insert(target.to_string(),\n-                                                output.clone());\n-    t!(fs::create_dir_all(&build_dir));\n-\n-    let mut cfg = gcc::Config::new();\n-    cfg.cargo_metadata(false)\n-       .out_dir(&build_dir)\n-       .target(target)\n-       .host(&build.config.build)\n-       .opt_level(2)\n-       .debug(false);\n-\n-    if target.contains(\"msvc\") {\n-        // Don't pull in extra libraries on MSVC\n-        cfg.flag(\"/Zl\");\n-\n-        // Emulate C99 and C++11's __func__ for MSVC prior to 2013 CTP\n-        cfg.define(\"__func__\", Some(\"__FUNCTION__\"));\n-    } else {\n-        // Turn off various features of gcc and such, mostly copying\n-        // compiler-rt's build system already\n-        cfg.flag(\"-fno-builtin\");\n-        cfg.flag(\"-fvisibility=hidden\");\n-        cfg.flag(\"-fomit-frame-pointer\");\n-        cfg.flag(\"-ffreestanding\");\n-    }\n-\n-    let mut sources = vec![\n-        \"absvdi2.c\",\n-        \"absvsi2.c\",\n-        \"adddf3.c\",\n-        \"addsf3.c\",\n-        \"addvdi3.c\",\n-        \"addvsi3.c\",\n-        \"apple_versioning.c\",\n-        \"ashldi3.c\",\n-        \"ashrdi3.c\",\n-        \"clear_cache.c\",\n-        \"clzdi2.c\",\n-        \"clzsi2.c\",\n-        \"cmpdi2.c\",\n-        \"comparedf2.c\",\n-        \"comparesf2.c\",\n-        \"ctzdi2.c\",\n-        \"ctzsi2.c\",\n-        \"divdc3.c\",\n-        \"divdf3.c\",\n-        \"divdi3.c\",\n-        \"divmoddi4.c\",\n-        \"divmodsi4.c\",\n-        \"divsc3.c\",\n-        \"divsf3.c\",\n-        \"divsi3.c\",\n-        \"divxc3.c\",\n-        \"extendsfdf2.c\",\n-        \"extendhfsf2.c\",\n-        \"ffsdi2.c\",\n-        \"fixdfdi.c\",\n-        \"fixdfsi.c\",\n-        \"fixsfdi.c\",\n-        \"fixsfsi.c\",\n-        \"fixunsdfdi.c\",\n-        \"fixunsdfsi.c\",\n-        \"fixunssfdi.c\",\n-        \"fixunssfsi.c\",\n-        \"fixunsxfdi.c\",\n-        \"fixunsxfsi.c\",\n-        \"fixxfdi.c\",\n-        \"floatdidf.c\",\n-        \"floatdisf.c\",\n-        \"floatdixf.c\",\n-        \"floatsidf.c\",\n-        \"floatsisf.c\",\n-        \"floatundidf.c\",\n-        \"floatundisf.c\",\n-        \"floatundixf.c\",\n-        \"floatunsidf.c\",\n-        \"floatunsisf.c\",\n-        \"int_util.c\",\n-        \"lshrdi3.c\",\n-        \"moddi3.c\",\n-        \"modsi3.c\",\n-        \"muldc3.c\",\n-        \"muldf3.c\",\n-        \"muldi3.c\",\n-        \"mulodi4.c\",\n-        \"mulosi4.c\",\n-        \"muloti4.c\",\n-        \"mulsc3.c\",\n-        \"mulsf3.c\",\n-        \"mulvdi3.c\",\n-        \"mulvsi3.c\",\n-        \"mulxc3.c\",\n-        \"negdf2.c\",\n-        \"negdi2.c\",\n-        \"negsf2.c\",\n-        \"negvdi2.c\",\n-        \"negvsi2.c\",\n-        \"paritydi2.c\",\n-        \"paritysi2.c\",\n-        \"popcountdi2.c\",\n-        \"popcountsi2.c\",\n-        \"powidf2.c\",\n-        \"powisf2.c\",\n-        \"powixf2.c\",\n-        \"subdf3.c\",\n-        \"subsf3.c\",\n-        \"subvdi3.c\",\n-        \"subvsi3.c\",\n-        \"truncdfhf2.c\",\n-        \"truncdfsf2.c\",\n-        \"truncsfhf2.c\",\n-        \"ucmpdi2.c\",\n-        \"udivdi3.c\",\n-        \"udivmoddi4.c\",\n-        \"udivmodsi4.c\",\n-        \"udivsi3.c\",\n-        \"umoddi3.c\",\n-        \"umodsi3.c\",\n-    ];\n-\n-    if !target.contains(\"ios\") {\n-        sources.extend(vec![\n-            \"absvti2.c\",\n-            \"addtf3.c\",\n-            \"addvti3.c\",\n-            \"ashlti3.c\",\n-            \"ashrti3.c\",\n-            \"clzti2.c\",\n-            \"cmpti2.c\",\n-            \"ctzti2.c\",\n-            \"divtf3.c\",\n-            \"divti3.c\",\n-            \"ffsti2.c\",\n-            \"fixdfti.c\",\n-            \"fixsfti.c\",\n-            \"fixunsdfti.c\",\n-            \"fixunssfti.c\",\n-            \"fixunsxfti.c\",\n-            \"fixxfti.c\",\n-            \"floattidf.c\",\n-            \"floattisf.c\",\n-            \"floattixf.c\",\n-            \"floatuntidf.c\",\n-            \"floatuntisf.c\",\n-            \"floatuntixf.c\",\n-            \"lshrti3.c\",\n-            \"modti3.c\",\n-            \"multf3.c\",\n-            \"multi3.c\",\n-            \"mulvti3.c\",\n-            \"negti2.c\",\n-            \"negvti2.c\",\n-            \"parityti2.c\",\n-            \"popcountti2.c\",\n-            \"powitf2.c\",\n-            \"subtf3.c\",\n-            \"subvti3.c\",\n-            \"trampoline_setup.c\",\n-            \"ucmpti2.c\",\n-            \"udivmodti4.c\",\n-            \"udivti3.c\",\n-            \"umodti3.c\",\n-        ]);\n-    }\n-\n-    if target.contains(\"apple\") {\n-        sources.extend(vec![\n-            \"atomic_flag_clear.c\",\n-            \"atomic_flag_clear_explicit.c\",\n-            \"atomic_flag_test_and_set.c\",\n-            \"atomic_flag_test_and_set_explicit.c\",\n-            \"atomic_signal_fence.c\",\n-            \"atomic_thread_fence.c\",\n-        ]);\n-    }\n-\n-    if !target.contains(\"windows\") {\n-        sources.push(\"emutls.c\");\n-    }\n-\n-    if target.contains(\"msvc\") {\n-        if target.contains(\"x86_64\") {\n-            sources.extend(vec![\n-                \"x86_64/floatdidf.c\",\n-                \"x86_64/floatdisf.c\",\n-                \"x86_64/floatdixf.c\",\n-            ]);\n-        }\n-    } else {\n-        if !target.contains(\"freebsd\") {\n-            sources.push(\"gcc_personality_v0.c\");\n-        }\n-\n-        if target.contains(\"x86_64\") {\n-            sources.extend(vec![\n-                \"x86_64/chkstk.S\",\n-                \"x86_64/chkstk2.S\",\n-                \"x86_64/floatdidf.c\",\n-                \"x86_64/floatdisf.c\",\n-                \"x86_64/floatdixf.c\",\n-                \"x86_64/floatundidf.S\",\n-                \"x86_64/floatundisf.S\",\n-                \"x86_64/floatundixf.S\",\n-            ]);\n-        }\n-\n-        if target.contains(\"i386\") ||\n-           target.contains(\"i586\") ||\n-           target.contains(\"i686\") {\n-            sources.extend(vec![\n-                \"i386/ashldi3.S\",\n-                \"i386/ashrdi3.S\",\n-                \"i386/chkstk.S\",\n-                \"i386/chkstk2.S\",\n-                \"i386/divdi3.S\",\n-                \"i386/floatdidf.S\",\n-                \"i386/floatdisf.S\",\n-                \"i386/floatdixf.S\",\n-                \"i386/floatundidf.S\",\n-                \"i386/floatundisf.S\",\n-                \"i386/floatundixf.S\",\n-                \"i386/lshrdi3.S\",\n-                \"i386/moddi3.S\",\n-                \"i386/muldi3.S\",\n-                \"i386/udivdi3.S\",\n-                \"i386/umoddi3.S\",\n-            ]);\n-        }\n-    }\n-\n-    if target.contains(\"arm\") && !target.contains(\"ios\") {\n-        sources.extend(vec![\n-            \"arm/aeabi_cdcmp.S\",\n-            \"arm/aeabi_cdcmpeq_check_nan.c\",\n-            \"arm/aeabi_cfcmp.S\",\n-            \"arm/aeabi_cfcmpeq_check_nan.c\",\n-            \"arm/aeabi_dcmp.S\",\n-            \"arm/aeabi_div0.c\",\n-            \"arm/aeabi_drsub.c\",\n-            \"arm/aeabi_fcmp.S\",\n-            \"arm/aeabi_frsub.c\",\n-            \"arm/aeabi_idivmod.S\",\n-            \"arm/aeabi_ldivmod.S\",\n-            \"arm/aeabi_memcmp.S\",\n-            \"arm/aeabi_memcpy.S\",\n-            \"arm/aeabi_memmove.S\",\n-            \"arm/aeabi_memset.S\",\n-            \"arm/aeabi_uidivmod.S\",\n-            \"arm/aeabi_uldivmod.S\",\n-            \"arm/bswapdi2.S\",\n-            \"arm/bswapsi2.S\",\n-            \"arm/clzdi2.S\",\n-            \"arm/clzsi2.S\",\n-            \"arm/comparesf2.S\",\n-            \"arm/divmodsi4.S\",\n-            \"arm/divsi3.S\",\n-            \"arm/modsi3.S\",\n-            \"arm/switch16.S\",\n-            \"arm/switch32.S\",\n-            \"arm/switch8.S\",\n-            \"arm/switchu8.S\",\n-            \"arm/sync_synchronize.S\",\n-            \"arm/udivmodsi4.S\",\n-            \"arm/udivsi3.S\",\n-            \"arm/umodsi3.S\",\n-        ]);\n-    }\n-\n-    if target.contains(\"armv7\") {\n-        sources.extend(vec![\n-            \"arm/sync_fetch_and_add_4.S\",\n-            \"arm/sync_fetch_and_add_8.S\",\n-            \"arm/sync_fetch_and_and_4.S\",\n-            \"arm/sync_fetch_and_and_8.S\",\n-            \"arm/sync_fetch_and_max_4.S\",\n-            \"arm/sync_fetch_and_max_8.S\",\n-            \"arm/sync_fetch_and_min_4.S\",\n-            \"arm/sync_fetch_and_min_8.S\",\n-            \"arm/sync_fetch_and_nand_4.S\",\n-            \"arm/sync_fetch_and_nand_8.S\",\n-            \"arm/sync_fetch_and_or_4.S\",\n-            \"arm/sync_fetch_and_or_8.S\",\n-            \"arm/sync_fetch_and_sub_4.S\",\n-            \"arm/sync_fetch_and_sub_8.S\",\n-            \"arm/sync_fetch_and_umax_4.S\",\n-            \"arm/sync_fetch_and_umax_8.S\",\n-            \"arm/sync_fetch_and_umin_4.S\",\n-            \"arm/sync_fetch_and_umin_8.S\",\n-            \"arm/sync_fetch_and_xor_4.S\",\n-            \"arm/sync_fetch_and_xor_8.S\",\n-        ]);\n-    }\n-\n-    if target.contains(\"eabihf\") {\n-        sources.extend(vec![\n-            \"arm/adddf3vfp.S\",\n-            \"arm/addsf3vfp.S\",\n-            \"arm/divdf3vfp.S\",\n-            \"arm/divsf3vfp.S\",\n-            \"arm/eqdf2vfp.S\",\n-            \"arm/eqsf2vfp.S\",\n-            \"arm/extendsfdf2vfp.S\",\n-            \"arm/fixdfsivfp.S\",\n-            \"arm/fixsfsivfp.S\",\n-            \"arm/fixunsdfsivfp.S\",\n-            \"arm/fixunssfsivfp.S\",\n-            \"arm/floatsidfvfp.S\",\n-            \"arm/floatsisfvfp.S\",\n-            \"arm/floatunssidfvfp.S\",\n-            \"arm/floatunssisfvfp.S\",\n-            \"arm/gedf2vfp.S\",\n-            \"arm/gesf2vfp.S\",\n-            \"arm/gtdf2vfp.S\",\n-            \"arm/gtsf2vfp.S\",\n-            \"arm/ledf2vfp.S\",\n-            \"arm/lesf2vfp.S\",\n-            \"arm/ltdf2vfp.S\",\n-            \"arm/ltsf2vfp.S\",\n-            \"arm/muldf3vfp.S\",\n-            \"arm/mulsf3vfp.S\",\n-            \"arm/negdf2vfp.S\",\n-            \"arm/negsf2vfp.S\",\n-            \"arm/nedf2vfp.S\",\n-            \"arm/nesf2vfp.S\",\n-            \"arm/restore_vfp_d8_d15_regs.S\",\n-            \"arm/save_vfp_d8_d15_regs.S\",\n-            \"arm/subdf3vfp.S\",\n-            \"arm/subsf3vfp.S\",\n-            \"arm/truncdfsf2vfp.S\",\n-            \"arm/unorddf2vfp.S\",\n-            \"arm/unordsf2vfp.S\",\n-        ]);\n-    }\n-\n-    if target.contains(\"aarch64\") {\n-        sources.extend(vec![\n-            \"comparetf2.c\",\n-            \"extenddftf2.c\",\n-            \"extendsftf2.c\",\n-            \"fixtfdi.c\",\n-            \"fixtfsi.c\",\n-            \"fixtfti.c\",\n-            \"fixunstfdi.c\",\n-            \"fixunstfsi.c\",\n-            \"fixunstfti.c\",\n-            \"floatditf.c\",\n-            \"floatsitf.c\",\n-            \"floatunditf.c\",\n-            \"floatunsitf.c\",\n-            \"multc3.c\",\n-            \"trunctfdf2.c\",\n-            \"trunctfsf2.c\",\n-        ]);\n-    }\n-\n-    let mut out_of_date = false;\n-    for src in sources {\n-        let src = build.src.join(\"src/compiler-rt/lib/builtins\").join(src);\n-        out_of_date = out_of_date || !up_to_date(&src, &output);\n-        cfg.file(src);\n-    }\n-    if !out_of_date {\n-        return\n-    }\n-    cfg.compile(\"libcompiler-rt.a\");\n-}\n-\n /// Compiles the `rust_test_helpers.c` library which we used in various\n /// `run-pass` test suites for ABI testing.\n pub fn test_helpers(build: &Build, target: &str) {"}, {"sha": "5f391b70fbe88b76ef958360ad0487785ef50e91", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "patch": "@@ -82,7 +82,6 @@ macro_rules! targets {\n             // There aren't really any parameters to this, but empty structs\n             // with braces are unstable so we just pick something that works.\n             (llvm, Llvm { _dummy: () }),\n-            (compiler_rt, CompilerRt { _dummy: () }),\n             (test_helpers, TestHelpers { _dummy: () }),\n             (debugger_scripts, DebuggerScripts { stage: u32 }),\n \n@@ -334,8 +333,7 @@ impl<'a> Step<'a> {\n                 vec![self.libstd(compiler)]\n             }\n             Source::Libstd { compiler } => {\n-                vec![self.compiler_rt(()),\n-                     self.rustc(compiler.stage).target(compiler.host)]\n+                vec![self.rustc(compiler.stage).target(compiler.host)]\n             }\n             Source::LibrustcLink { compiler, host } => {\n                 vec![self.librustc(compiler),\n@@ -348,7 +346,6 @@ impl<'a> Step<'a> {\n                 vec![self.libstd(compiler),\n                      self.target(host).rustc(compiler.stage)]\n             }\n-            Source::CompilerRt { _dummy } => Vec::new(),\n             Source::Llvm { _dummy } => Vec::new(),\n             Source::TestHelpers { _dummy } => Vec::new(),\n             Source::DebuggerScripts { stage: _ } => Vec::new(),"}, {"sha": "a52873fc326b8af9ddfba69d7ccbf6a713b1d857", "filename": "src/libcompiler_builtins/Cargo.toml", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibcompiler_builtins%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibcompiler_builtins%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins%2FCargo.toml?ref=3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "patch": "@@ -0,0 +1,15 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+build = \"build.rs\"\n+name = \"compiler_builtins\"\n+version = \"0.0.0\"\n+\n+[lib]\n+name = \"compiler_builtins\"\n+path = \"lib.rs\"\n+\n+[dependencies]\n+core = { path = \"../libcore\" }\n+\n+[build-dependencies]\n+gcc = \"0.3.27\""}, {"sha": "fb8e45c1fe133b960044a58f22f9e4849be1247b", "filename": "src/libcompiler_builtins/build.rs", "status": "added", "additions": 402, "deletions": 0, "changes": 402, "blob_url": "https://github.com/rust-lang/rust/blob/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibcompiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibcompiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins%2Fbuild.rs?ref=3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "patch": "@@ -0,0 +1,402 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Compiles the `compiler-rt` library, or at least the builtins part of it.\n+//!\n+//! Note that while compiler-rt has a build system associated with it, we\n+//! specifically don't use it here. The compiler-rt build system, written in\n+//! CMake, is actually *very* difficult to work with in terms of getting it to\n+//! compile on all the relevant platforms we want it to compile on. In the end\n+//! it became so much pain to work with local patches, work around the oddities\n+//! of the build system, etc, that we're just building everything by hand now.\n+//!\n+//! In general compiler-rt is just a bunch of intrinsics that are in practice\n+//! *very* stable. We just need to make sure that all the relevant functions and\n+//! such are compiled somewhere and placed in an object file somewhere.\n+//! Eventually, these should all be written in Rust!\n+//!\n+//! So below you'll find a listing of every single file in the compiler-rt repo\n+//! that we're compiling. We just reach in and compile with the `gcc` crate\n+//! which should have all the relevant flags and such already configured.\n+//!\n+//! The risk here is that if we update compiler-rt we may need to compile some\n+//! new intrinsics, but to be honest we surely don't use all of the intrinsics\n+//! listed below today so the likelihood of us actually needing a new intrinsic\n+//! is quite low. The failure case is also just that someone reports a link\n+//! error (if any) and then we just add it to the list. Overall, that cost is\n+//! far far less than working with compiler-rt's build system over time.\n+\n+extern crate gcc;\n+\n+use std::collections::BTreeMap;\n+use std::env;\n+use std::path::Path;\n+\n+struct Sources {\n+    // SYMBOL -> PATH TO SOURCE\n+    map: BTreeMap<&'static str, &'static str>,\n+}\n+\n+impl Sources {\n+    fn new() -> Sources {\n+        Sources { map: BTreeMap::new() }\n+    }\n+\n+    fn extend(&mut self, sources: &[&'static str]) {\n+        // NOTE Some intrinsics have both a generic implementation (e.g. `floatdidf.c`) and an arch\n+        // optimized implementation (`x86_64/floatdidf.c`). In those cases, we keep the arch\n+        // optimized implementation and discard the generic implementation. If we don't and keep\n+        // both implementations, the linker will yell at us about duplicate symbols!\n+        for &src in sources {\n+            let symbol = Path::new(src).file_stem().unwrap().to_str().unwrap();\n+            if src.contains(\"/\") {\n+                // Arch-optimized implementation (preferred)\n+                self.map.insert(symbol, src);\n+            } else {\n+                // Generic implementation\n+                if !self.map.contains_key(symbol) {\n+                    self.map.insert(symbol, src);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let target = env::var(\"TARGET\").unwrap();\n+    let cfg = &mut gcc::Config::new();\n+\n+    if target.contains(\"msvc\") {\n+        // Don't pull in extra libraries on MSVC\n+        cfg.flag(\"/Zl\");\n+\n+        // Emulate C99 and C++11's __func__ for MSVC prior to 2013 CTP\n+        cfg.define(\"__func__\", Some(\"__FUNCTION__\"));\n+    } else {\n+        // Turn off various features of gcc and such, mostly copying\n+        // compiler-rt's build system already\n+        cfg.flag(\"-fno-builtin\");\n+        cfg.flag(\"-fvisibility=hidden\");\n+        cfg.flag(\"-fomit-frame-pointer\");\n+        cfg.flag(\"-ffreestanding\");\n+    }\n+\n+    let mut sources = Sources::new();\n+    sources.extend(&[\"absvdi2.c\",\n+                     \"absvsi2.c\",\n+                     \"adddf3.c\",\n+                     \"addsf3.c\",\n+                     \"addvdi3.c\",\n+                     \"addvsi3.c\",\n+                     \"apple_versioning.c\",\n+                     \"ashldi3.c\",\n+                     \"ashrdi3.c\",\n+                     \"clear_cache.c\",\n+                     \"clzdi2.c\",\n+                     \"clzsi2.c\",\n+                     \"cmpdi2.c\",\n+                     \"comparedf2.c\",\n+                     \"comparesf2.c\",\n+                     \"ctzdi2.c\",\n+                     \"ctzsi2.c\",\n+                     \"divdc3.c\",\n+                     \"divdf3.c\",\n+                     \"divdi3.c\",\n+                     \"divmoddi4.c\",\n+                     \"divmodsi4.c\",\n+                     \"divsc3.c\",\n+                     \"divsf3.c\",\n+                     \"divsi3.c\",\n+                     \"divxc3.c\",\n+                     \"extendsfdf2.c\",\n+                     \"extendhfsf2.c\",\n+                     \"ffsdi2.c\",\n+                     \"fixdfdi.c\",\n+                     \"fixdfsi.c\",\n+                     \"fixsfdi.c\",\n+                     \"fixsfsi.c\",\n+                     \"fixunsdfdi.c\",\n+                     \"fixunsdfsi.c\",\n+                     \"fixunssfdi.c\",\n+                     \"fixunssfsi.c\",\n+                     \"fixunsxfdi.c\",\n+                     \"fixunsxfsi.c\",\n+                     \"fixxfdi.c\",\n+                     \"floatdidf.c\",\n+                     \"floatdisf.c\",\n+                     \"floatdixf.c\",\n+                     \"floatsidf.c\",\n+                     \"floatsisf.c\",\n+                     \"floatundidf.c\",\n+                     \"floatundisf.c\",\n+                     \"floatundixf.c\",\n+                     \"floatunsidf.c\",\n+                     \"floatunsisf.c\",\n+                     \"int_util.c\",\n+                     \"lshrdi3.c\",\n+                     \"moddi3.c\",\n+                     \"modsi3.c\",\n+                     \"muldc3.c\",\n+                     \"muldf3.c\",\n+                     \"muldi3.c\",\n+                     \"mulodi4.c\",\n+                     \"mulosi4.c\",\n+                     \"muloti4.c\",\n+                     \"mulsc3.c\",\n+                     \"mulsf3.c\",\n+                     \"mulvdi3.c\",\n+                     \"mulvsi3.c\",\n+                     \"mulxc3.c\",\n+                     \"negdf2.c\",\n+                     \"negdi2.c\",\n+                     \"negsf2.c\",\n+                     \"negvdi2.c\",\n+                     \"negvsi2.c\",\n+                     \"paritydi2.c\",\n+                     \"paritysi2.c\",\n+                     \"popcountdi2.c\",\n+                     \"popcountsi2.c\",\n+                     \"powidf2.c\",\n+                     \"powisf2.c\",\n+                     \"powixf2.c\",\n+                     \"subdf3.c\",\n+                     \"subsf3.c\",\n+                     \"subvdi3.c\",\n+                     \"subvsi3.c\",\n+                     \"truncdfhf2.c\",\n+                     \"truncdfsf2.c\",\n+                     \"truncsfhf2.c\",\n+                     \"ucmpdi2.c\",\n+                     \"udivdi3.c\",\n+                     \"udivmoddi4.c\",\n+                     \"udivmodsi4.c\",\n+                     \"udivsi3.c\",\n+                     \"umoddi3.c\",\n+                     \"umodsi3.c\"]);\n+\n+    if !target.contains(\"ios\") {\n+        sources.extend(&[\"absvti2.c\",\n+                         \"addtf3.c\",\n+                         \"addvti3.c\",\n+                         \"ashlti3.c\",\n+                         \"ashrti3.c\",\n+                         \"clzti2.c\",\n+                         \"cmpti2.c\",\n+                         \"ctzti2.c\",\n+                         \"divtf3.c\",\n+                         \"divti3.c\",\n+                         \"ffsti2.c\",\n+                         \"fixdfti.c\",\n+                         \"fixsfti.c\",\n+                         \"fixunsdfti.c\",\n+                         \"fixunssfti.c\",\n+                         \"fixunsxfti.c\",\n+                         \"fixxfti.c\",\n+                         \"floattidf.c\",\n+                         \"floattisf.c\",\n+                         \"floattixf.c\",\n+                         \"floatuntidf.c\",\n+                         \"floatuntisf.c\",\n+                         \"floatuntixf.c\",\n+                         \"lshrti3.c\",\n+                         \"modti3.c\",\n+                         \"multf3.c\",\n+                         \"multi3.c\",\n+                         \"mulvti3.c\",\n+                         \"negti2.c\",\n+                         \"negvti2.c\",\n+                         \"parityti2.c\",\n+                         \"popcountti2.c\",\n+                         \"powitf2.c\",\n+                         \"subtf3.c\",\n+                         \"subvti3.c\",\n+                         \"trampoline_setup.c\",\n+                         \"ucmpti2.c\",\n+                         \"udivmodti4.c\",\n+                         \"udivti3.c\",\n+                         \"umodti3.c\"]);\n+    }\n+\n+    if target.contains(\"apple\") {\n+        sources.extend(&[\"atomic_flag_clear.c\",\n+                         \"atomic_flag_clear_explicit.c\",\n+                         \"atomic_flag_test_and_set.c\",\n+                         \"atomic_flag_test_and_set_explicit.c\",\n+                         \"atomic_signal_fence.c\",\n+                         \"atomic_thread_fence.c\"]);\n+    }\n+\n+    if !target.contains(\"windows\") {\n+        sources.extend(&[\"emutls.c\"]);\n+    }\n+\n+    if target.contains(\"msvc\") {\n+        if target.contains(\"x86_64\") {\n+            sources.extend(&[\"x86_64/floatdidf.c\", \"x86_64/floatdisf.c\", \"x86_64/floatdixf.c\"]);\n+        }\n+    } else {\n+        if !target.contains(\"freebsd\") {\n+            sources.extend(&[\"gcc_personality_v0.c\"]);\n+        }\n+\n+        if target.contains(\"x86_64\") {\n+            sources.extend(&[\"x86_64/chkstk.S\",\n+                             \"x86_64/chkstk2.S\",\n+                             \"x86_64/floatdidf.c\",\n+                             \"x86_64/floatdisf.c\",\n+                             \"x86_64/floatdixf.c\",\n+                             \"x86_64/floatundidf.S\",\n+                             \"x86_64/floatundisf.S\",\n+                             \"x86_64/floatundixf.S\"]);\n+        }\n+\n+        if target.contains(\"i386\") || target.contains(\"i586\") || target.contains(\"i686\") {\n+            sources.extend(&[\"i386/ashldi3.S\",\n+                             \"i386/ashrdi3.S\",\n+                             \"i386/chkstk.S\",\n+                             \"i386/chkstk2.S\",\n+                             \"i386/divdi3.S\",\n+                             \"i386/floatdidf.S\",\n+                             \"i386/floatdisf.S\",\n+                             \"i386/floatdixf.S\",\n+                             \"i386/floatundidf.S\",\n+                             \"i386/floatundisf.S\",\n+                             \"i386/floatundixf.S\",\n+                             \"i386/lshrdi3.S\",\n+                             \"i386/moddi3.S\",\n+                             \"i386/muldi3.S\",\n+                             \"i386/udivdi3.S\",\n+                             \"i386/umoddi3.S\"]);\n+        }\n+    }\n+\n+    if target.contains(\"arm\") && !target.contains(\"ios\") {\n+        sources.extend(&[\"arm/aeabi_cdcmp.S\",\n+                         \"arm/aeabi_cdcmpeq_check_nan.c\",\n+                         \"arm/aeabi_cfcmp.S\",\n+                         \"arm/aeabi_cfcmpeq_check_nan.c\",\n+                         \"arm/aeabi_dcmp.S\",\n+                         \"arm/aeabi_div0.c\",\n+                         \"arm/aeabi_drsub.c\",\n+                         \"arm/aeabi_fcmp.S\",\n+                         \"arm/aeabi_frsub.c\",\n+                         \"arm/aeabi_idivmod.S\",\n+                         \"arm/aeabi_ldivmod.S\",\n+                         \"arm/aeabi_memcmp.S\",\n+                         \"arm/aeabi_memcpy.S\",\n+                         \"arm/aeabi_memmove.S\",\n+                         \"arm/aeabi_memset.S\",\n+                         \"arm/aeabi_uidivmod.S\",\n+                         \"arm/aeabi_uldivmod.S\",\n+                         \"arm/bswapdi2.S\",\n+                         \"arm/bswapsi2.S\",\n+                         \"arm/clzdi2.S\",\n+                         \"arm/clzsi2.S\",\n+                         \"arm/comparesf2.S\",\n+                         \"arm/divmodsi4.S\",\n+                         \"arm/divsi3.S\",\n+                         \"arm/modsi3.S\",\n+                         \"arm/switch16.S\",\n+                         \"arm/switch32.S\",\n+                         \"arm/switch8.S\",\n+                         \"arm/switchu8.S\",\n+                         \"arm/sync_synchronize.S\",\n+                         \"arm/udivmodsi4.S\",\n+                         \"arm/udivsi3.S\",\n+                         \"arm/umodsi3.S\"]);\n+    }\n+\n+    if target.contains(\"armv7\") {\n+        sources.extend(&[\"arm/sync_fetch_and_add_4.S\",\n+                         \"arm/sync_fetch_and_add_8.S\",\n+                         \"arm/sync_fetch_and_and_4.S\",\n+                         \"arm/sync_fetch_and_and_8.S\",\n+                         \"arm/sync_fetch_and_max_4.S\",\n+                         \"arm/sync_fetch_and_max_8.S\",\n+                         \"arm/sync_fetch_and_min_4.S\",\n+                         \"arm/sync_fetch_and_min_8.S\",\n+                         \"arm/sync_fetch_and_nand_4.S\",\n+                         \"arm/sync_fetch_and_nand_8.S\",\n+                         \"arm/sync_fetch_and_or_4.S\",\n+                         \"arm/sync_fetch_and_or_8.S\",\n+                         \"arm/sync_fetch_and_sub_4.S\",\n+                         \"arm/sync_fetch_and_sub_8.S\",\n+                         \"arm/sync_fetch_and_umax_4.S\",\n+                         \"arm/sync_fetch_and_umax_8.S\",\n+                         \"arm/sync_fetch_and_umin_4.S\",\n+                         \"arm/sync_fetch_and_umin_8.S\",\n+                         \"arm/sync_fetch_and_xor_4.S\",\n+                         \"arm/sync_fetch_and_xor_8.S\"]);\n+    }\n+\n+    if target.contains(\"eabihf\") {\n+        sources.extend(&[\"arm/adddf3vfp.S\",\n+                         \"arm/addsf3vfp.S\",\n+                         \"arm/divdf3vfp.S\",\n+                         \"arm/divsf3vfp.S\",\n+                         \"arm/eqdf2vfp.S\",\n+                         \"arm/eqsf2vfp.S\",\n+                         \"arm/extendsfdf2vfp.S\",\n+                         \"arm/fixdfsivfp.S\",\n+                         \"arm/fixsfsivfp.S\",\n+                         \"arm/fixunsdfsivfp.S\",\n+                         \"arm/fixunssfsivfp.S\",\n+                         \"arm/floatsidfvfp.S\",\n+                         \"arm/floatsisfvfp.S\",\n+                         \"arm/floatunssidfvfp.S\",\n+                         \"arm/floatunssisfvfp.S\",\n+                         \"arm/gedf2vfp.S\",\n+                         \"arm/gesf2vfp.S\",\n+                         \"arm/gtdf2vfp.S\",\n+                         \"arm/gtsf2vfp.S\",\n+                         \"arm/ledf2vfp.S\",\n+                         \"arm/lesf2vfp.S\",\n+                         \"arm/ltdf2vfp.S\",\n+                         \"arm/ltsf2vfp.S\",\n+                         \"arm/muldf3vfp.S\",\n+                         \"arm/mulsf3vfp.S\",\n+                         \"arm/negdf2vfp.S\",\n+                         \"arm/negsf2vfp.S\",\n+                         \"arm/nedf2vfp.S\",\n+                         \"arm/nesf2vfp.S\",\n+                         \"arm/restore_vfp_d8_d15_regs.S\",\n+                         \"arm/save_vfp_d8_d15_regs.S\",\n+                         \"arm/subdf3vfp.S\",\n+                         \"arm/subsf3vfp.S\",\n+                         \"arm/truncdfsf2vfp.S\",\n+                         \"arm/unorddf2vfp.S\",\n+                         \"arm/unordsf2vfp.S\"]);\n+    }\n+\n+    if target.contains(\"aarch64\") {\n+        sources.extend(&[\"comparetf2.c\",\n+                         \"extenddftf2.c\",\n+                         \"extendsftf2.c\",\n+                         \"fixtfdi.c\",\n+                         \"fixtfsi.c\",\n+                         \"fixtfti.c\",\n+                         \"fixunstfdi.c\",\n+                         \"fixunstfsi.c\",\n+                         \"fixunstfti.c\",\n+                         \"floatditf.c\",\n+                         \"floatsitf.c\",\n+                         \"floatunditf.c\",\n+                         \"floatunsitf.c\",\n+                         \"multc3.c\",\n+                         \"trunctfdf2.c\",\n+                         \"trunctfsf2.c\"]);\n+    }\n+\n+    for src in sources.map.values() {\n+        cfg.file(Path::new(\"../compiler-rt/lib/builtins\").join(src));\n+    }\n+\n+    cfg.compile(\"libcompiler-rt.a\");\n+}"}, {"sha": "ad1d1edbeba29bcd0a148c1c570e1cc83637deba", "filename": "src/libcompiler_builtins/lib.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibcompiler_builtins%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibcompiler_builtins%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins%2Flib.rs?ref=3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![cfg_attr(not(stage0), feature(compiler_builtins))]\n+#![no_std]\n+#![cfg_attr(not(stage0), compiler_builtins)]\n+\n+#![crate_name = \"compiler_builtins\"]\n+#![crate_type = \"rlib\"]"}, {"sha": "b8465e63b1c8abe555c6aba7d31c06169b2dd311", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "patch": "@@ -210,6 +210,7 @@ pub trait CrateStore<'tcx> {\n     fn is_explicitly_linked(&self, cnum: ast::CrateNum) -> bool;\n     fn is_allocator(&self, cnum: ast::CrateNum) -> bool;\n     fn is_panic_runtime(&self, cnum: ast::CrateNum) -> bool;\n+    fn is_compiler_builtins(&self, cnum: ast::CrateNum) -> bool;\n     fn panic_strategy(&self, cnum: ast::CrateNum) -> PanicStrategy;\n     fn extern_crate(&self, cnum: ast::CrateNum) -> Option<ExternCrate>;\n     fn crate_attrs(&self, cnum: ast::CrateNum) -> Vec<ast::Attribute>;\n@@ -405,6 +406,7 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn is_explicitly_linked(&self, cnum: ast::CrateNum) -> bool { bug!(\"is_explicitly_linked\") }\n     fn is_allocator(&self, cnum: ast::CrateNum) -> bool { bug!(\"is_allocator\") }\n     fn is_panic_runtime(&self, cnum: ast::CrateNum) -> bool { bug!(\"is_panic_runtime\") }\n+    fn is_compiler_builtins(&self, cnum: ast::CrateNum) -> bool { bug!(\"is_compiler_builtins\") }\n     fn panic_strategy(&self, cnum: ast::CrateNum) -> PanicStrategy {\n         bug!(\"panic_strategy\")\n     }"}, {"sha": "9ccfdbb129c7352bceab72900939f340660c7512", "filename": "src/librustc_back/target/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs?ref=3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "patch": "@@ -18,7 +18,6 @@ pub fn target() -> Result<Target, String> {\n         dynamic_linking: false,\n         executables: true,\n         exe_suffix: \".js\".to_string(),\n-        no_compiler_rt: true,\n         linker_is_gnu: true,\n         allow_asm: false,\n         obj_is_bitcode: true,"}, {"sha": "9ba6591f587c4d91d9f1c211665863c57367ab99", "filename": "src/librustc_back/target/le32_unknown_nacl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibrustc_back%2Ftarget%2Fle32_unknown_nacl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibrustc_back%2Ftarget%2Fle32_unknown_nacl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fle32_unknown_nacl.rs?ref=3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "patch": "@@ -22,7 +22,6 @@ pub fn target() -> TargetResult {\n         dynamic_linking: false,\n         executables: true,\n         exe_suffix: \".pexe\".to_string(),\n-        no_compiler_rt: false,\n         linker_is_gnu: true,\n         allow_asm: false,\n         max_atomic_width: 32,"}, {"sha": "1a26ffaf1e134aab30a54d03f1bbfda446ba412c", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "patch": "@@ -306,9 +306,6 @@ pub struct TargetOptions {\n     pub allows_weak_linkage: bool,\n     /// Whether the linker support rpaths or not. Defaults to false.\n     pub has_rpath: bool,\n-    /// Whether to disable linking to compiler-rt. Defaults to false, as LLVM\n-    /// will emit references to the functions that compiler-rt provides.\n-    pub no_compiler_rt: bool,\n     /// Whether to disable linking to the default libraries, typically corresponds\n     /// to `-nodefaultlibs`. Defaults to true.\n     pub no_default_libraries: bool,\n@@ -381,7 +378,6 @@ impl Default for TargetOptions {\n             linker_is_gnu: false,\n             allows_weak_linkage: true,\n             has_rpath: false,\n-            no_compiler_rt: false,\n             no_default_libraries: true,\n             position_independent_executables: false,\n             pre_link_objects_exe: Vec::new(),\n@@ -524,7 +520,6 @@ impl Target {\n         key!(linker_is_gnu, bool);\n         key!(allows_weak_linkage, bool);\n         key!(has_rpath, bool);\n-        key!(no_compiler_rt, bool);\n         key!(no_default_libraries, bool);\n         key!(position_independent_executables, bool);\n         key!(archive_format);\n@@ -667,7 +662,6 @@ impl ToJson for Target {\n         target_option_val!(linker_is_gnu);\n         target_option_val!(allows_weak_linkage);\n         target_option_val!(has_rpath);\n-        target_option_val!(no_compiler_rt);\n         target_option_val!(no_default_libraries);\n         target_option_val!(position_independent_executables);\n         target_option_val!(archive_format);"}, {"sha": "21cf3240321bf6dd8f7fc33b9fddc06aa8ee6695", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "patch": "@@ -346,6 +346,10 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.get_crate_data(cnum).is_panic_runtime()\n     }\n \n+    fn is_compiler_builtins(&self, cnum: ast::CrateNum) -> bool {\n+        self.get_crate_data(cnum).is_compiler_builtins()\n+    }\n+\n     fn panic_strategy(&self, cnum: ast::CrateNum) -> PanicStrategy {\n         self.get_crate_data(cnum).panic_strategy()\n     }"}, {"sha": "bc3d92c11a1ea8923bd8590b0dc026cbd419d472", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "patch": "@@ -340,6 +340,11 @@ impl CrateMetadata {\n         attr::contains_name(&attrs, \"needs_panic_runtime\")\n     }\n \n+    pub fn is_compiler_builtins(&self) -> bool {\n+        let attrs = decoder::get_crate_attributes(self.data());\n+        attr::contains_name(&attrs, \"compiler_builtins\")\n+    }\n+\n     pub fn panic_strategy(&self) -> PanicStrategy {\n         decoder::get_panic_strategy(self.data())\n     }"}, {"sha": "3ba12ddba293dd01a9d3ff6660795fef92bbd31f", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "patch": "@@ -573,10 +573,6 @@ fn write_rlib_bytecode_object_v1(writer: &mut Write,\n fn link_staticlib(sess: &Session, objects: &[PathBuf], out_filename: &Path,\n                   tempdir: &Path) {\n     let mut ab = link_rlib(sess, None, objects, out_filename, tempdir);\n-    if !sess.target.target.options.no_compiler_rt {\n-        ab.add_native_library(\"compiler-rt\");\n-    }\n-\n     let mut all_native_libs = vec![];\n \n     each_linked_rlib(sess, &mut |cnum, path| {\n@@ -640,9 +636,6 @@ fn link_natively(sess: &Session,\n         let mut linker = trans.linker_info.to_linker(&mut cmd, &sess);\n         link_args(&mut *linker, sess, crate_type, tmpdir,\n                   objects, out_filename, outputs);\n-        if !sess.target.target.options.no_compiler_rt {\n-            linker.link_staticlib(\"compiler-rt\");\n-        }\n     }\n     cmd.args(&sess.target.target.options.late_link_args);\n     for obj in &sess.target.target.options.post_link_objects {\n@@ -939,6 +932,12 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n         // symbols from the dylib.\n         let src = sess.cstore.used_crate_source(cnum);\n         match data[cnum as usize - 1] {\n+            // We must always link the `compiler_builtins` crate statically. Even if it was already\n+            // \"included\" in a dylib (e.g. `libstd` when `-C prefer-dynamic` is used)\n+            _ if sess.cstore.is_compiler_builtins(cnum) => {\n+                add_static_crate(cmd, sess, tmpdir, crate_type,\n+                                 &src.rlib.unwrap().0, sess.cstore.is_no_builtins(cnum))\n+            }\n             Linkage::NotLinked |\n             Linkage::IncludedFromDylib => {}\n             Linkage::Static => {"}, {"sha": "21e6acc37f3d511845b9f8faf4d771a6ae0937e9", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "patch": "@@ -19,6 +19,7 @@ collections = { path = \"../libcollections\" }\n core = { path = \"../libcore\" }\n libc = { path = \"../rustc/libc_shim\" }\n rand = { path = \"../librand\" }\n+compiler_builtins = { path = \"../libcompiler_builtins\" }\n rustc_unicode = { path = \"../librustc_unicode\" }\n unwind = { path = \"../libunwind\" }\n "}, {"sha": "d227fb1404f47219e0666caf92b9c13b42341ee9", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "patch": "@@ -322,6 +322,9 @@ extern crate unwind;\n #[cfg(stage0)]\n extern crate alloc_system;\n \n+// compiler-rt intrinsics\n+extern crate compiler_builtins;\n+\n // Make std testable by not duplicating lang items and other globals. See #2912\n #[cfg(test)] extern crate std as realstd;\n "}, {"sha": "27b97a0ad665bcc58657ba0168edb8719c1642e9", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "patch": "@@ -298,6 +298,10 @@ declare_features! (\n \n     // elide `'static` lifetimes in `static`s and `const`s\n     (active, static_in_const, \"1.13.0\", Some(35897)),\n+\n+    // Used to identify the `compiler_builtins` crate\n+    // rustc internal\n+    (active, compiler_builtins, \"1.13.0\", None),\n );\n \n declare_features! (\n@@ -537,6 +541,12 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n                                                           libcore functions that are inlined \\\n                                                           across crates and will never be stable\",\n                                                           cfg_fn!(rustc_attrs))),\n+    (\"compiler_builtins\", Whitelisted, Gated(\"compiler_builtins\",\n+                                             \"the `#[compiler_builtins]` attribute is used to \\\n+                                              identify the `compiler_builtins` crate which \\\n+                                              contains compiler-rt intrinsics and will never be \\\n+                                              stable\",\n+                                          cfg_fn!(compiler_builtins))),\n \n     (\"allow_internal_unstable\", Normal, Gated(\"allow_internal_unstable\",\n                                               EXPLAIN_ALLOW_INTERNAL_UNSTABLE,"}, {"sha": "747322b32f32060002ca35a38acd0f2caba854be", "filename": "src/rustc/std_shim/Cargo.lock", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Frustc%2Fstd_shim%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Frustc%2Fstd_shim%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fstd_shim%2FCargo.lock?ref=3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "patch": "@@ -43,6 +43,14 @@ dependencies = [\n  \"rustc_unicode 0.0.0\",\n ]\n \n+[[package]]\n+name = \"compiler_builtins\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"core 0.0.0\",\n+ \"gcc 0.3.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"core\"\n version = \"0.0.0\"\n@@ -100,6 +108,7 @@ dependencies = [\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"collections 0.0.0\",\n+ \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n  \"gcc 0.3.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.0.0\","}, {"sha": "f9334f1d3b072ca7372c6b20a968b07b7803ada0", "filename": "src/test/compile-fail/feature-gate-compiler-builtins.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Ftest%2Fcompile-fail%2Ffeature-gate-compiler-builtins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59/src%2Ftest%2Fcompile-fail%2Ffeature-gate-compiler-builtins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-compiler-builtins.rs?ref=3fd5fdd8d3e64e957a7eafe3d6d0b10ef4170d59", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![compiler_builtins] //~ ERROR the `#[compiler_builtins]` attribute is\n+\n+fn main() {}\n+"}]}