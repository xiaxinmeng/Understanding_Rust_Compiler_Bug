{"sha": "619880e5546d7a0a5b33ee22b972e4acd6bbcf37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxOTg4MGU1NTQ2ZDdhMGE1YjMzZWUyMmI5NzJlNGFjZDZiYmNmMzc=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-07T18:04:52Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-14T07:48:13Z"}, "message": "Fix tests with auxiliary docs", "tree": {"sha": "75380a40caf3832524cfb47c67f8128794c091a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75380a40caf3832524cfb47c67f8128794c091a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/619880e5546d7a0a5b33ee22b972e4acd6bbcf37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/619880e5546d7a0a5b33ee22b972e4acd6bbcf37", "html_url": "https://github.com/rust-lang/rust/commit/619880e5546d7a0a5b33ee22b972e4acd6bbcf37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/619880e5546d7a0a5b33ee22b972e4acd6bbcf37/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "975471ca4d5e141c4c885d4715e06671f862eeb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/975471ca4d5e141c4c885d4715e06671f862eeb7", "html_url": "https://github.com/rust-lang/rust/commit/975471ca4d5e141c4c885d4715e06671f862eeb7"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "6eb7edf85aa5f7c5597faafe9d66d3c833667136", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/619880e5546d7a0a5b33ee22b972e4acd6bbcf37/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619880e5546d7a0a5b33ee22b972e4acd6bbcf37/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=619880e5546d7a0a5b33ee22b972e4acd6bbcf37", "patch": "@@ -1729,7 +1729,7 @@ impl<'test> TestCx<'test> {\n         self.config.target.contains(\"vxworks\") && !self.is_vxworks_pure_static()\n     }\n \n-    fn compose_and_run_compiler(&self, mut rustc: Command, input: Option<String>) -> ProcRes {\n+    fn build_all_auxiliary(&self, rustc: &mut Command) -> PathBuf {\n         let aux_dir = self.aux_output_dir_name();\n \n         if !self.props.aux_builds.is_empty() {\n@@ -1748,6 +1748,11 @@ impl<'test> TestCx<'test> {\n             rustc.arg(\"--extern\").arg(format!(\"{}={}/{}\", aux_name, aux_dir.display(), lib_name));\n         }\n \n+        aux_dir\n+    }\n+\n+    fn compose_and_run_compiler(&self, mut rustc: Command, input: Option<String>) -> ProcRes {\n+        let aux_dir = self.build_all_auxiliary(&mut rustc);\n         self.props.unset_rustc_env.clone().iter().fold(&mut rustc, |rustc, v| rustc.env_remove(v));\n         rustc.envs(self.props.rustc_env.clone());\n         self.compose_and_run(\n@@ -2359,13 +2364,26 @@ impl<'test> TestCx<'test> {\n         // We need to create a new struct for the lifetimes on `config` to work.\n         let new_rustdoc = TestCx {\n             config: &Config {\n-                // FIXME: use beta or a user-specified rustdoc instead of hardcoding\n-                // the default toolchain\n+                // FIXME: use beta or a user-specified rustdoc instead of\n+                // hardcoding the default toolchain\n                 rustdoc_path: Some(\"rustdoc\".into()),\n+                // Needed for building auxiliary docs below\n+                rustc_path: \"rustc\".into(),\n                 ..self.config.clone()\n             },\n             ..*self\n         };\n+\n+        let output_file = TargetLocation::ThisDirectory(new_rustdoc.aux_output_dir_name());\n+        let mut rustc = new_rustdoc.make_compile_args(\n+            &new_rustdoc.testpaths.file,\n+            output_file,\n+            EmitMetadata::No,\n+            AllowUnused::Yes,\n+        );\n+        rustc.arg(\"-L\").arg(&new_rustdoc.aux_output_dir_name());\n+        new_rustdoc.build_all_auxiliary(&mut dbg!(rustc));\n+\n         let proc_res = new_rustdoc.document(&compare_dir);\n         if !proc_res.status.success() {\n             proc_res.fatal(Some(\"failed to run nightly rustdoc\"), || ());\n@@ -2390,6 +2408,7 @@ impl<'test> TestCx<'test> {\n \n         let has_delta = Command::new(\"delta\")\n             .arg(\"--version\")\n+            .stdout(Stdio::null())\n             .status()\n             .map_or(false, |status| status.success());\n         let mut diff = Command::new(\"diff\");"}]}