{"sha": "56c8581b901427ee3e63052c531f3ba3b1ec112d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2Yzg1ODFiOTAxNDI3ZWUzZTYzMDUyYzUzMWYzYmEzYjFlYzExMmQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-09T16:11:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-09T16:11:16Z"}, "message": "Put displays at the end", "tree": {"sha": "f31bae40498218a51c368b0ae1c18018ac1d9565", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f31bae40498218a51c368b0ae1c18018ac1d9565"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56c8581b901427ee3e63052c531f3ba3b1ec112d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56c8581b901427ee3e63052c531f3ba3b1ec112d", "html_url": "https://github.com/rust-lang/rust/commit/56c8581b901427ee3e63052c531f3ba3b1ec112d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56c8581b901427ee3e63052c531f3ba3b1ec112d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9285cbffb66e1c497469fedc5c181b7f295742fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9285cbffb66e1c497469fedc5c181b7f295742fd", "html_url": "https://github.com/rust-lang/rust/commit/9285cbffb66e1c497469fedc5c181b7f295742fd"}], "stats": {"total": 1408, "additions": 706, "deletions": 702}, "files": [{"sha": "8b348ad6e1369ac18db51c3832573ad35c2e010e", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 690, "deletions": 690, "changes": 1380, "blob_url": "https://github.com/rust-lang/rust/blob/56c8581b901427ee3e63052c531f3ba3b1ec112d/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56c8581b901427ee3e63052c531f3ba3b1ec112d/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=56c8581b901427ee3e63052c531f3ba3b1ec112d", "patch": "@@ -10,11 +10,6 @@ use crate::{\n pub struct SourceFile {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for SourceFile {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for SourceFile {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == SOURCE_FILE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -36,11 +31,6 @@ impl SourceFile {\n pub struct FnDef {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for FnDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for FnDef {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == FN_DEF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -73,11 +63,6 @@ impl FnDef {\n pub struct RetType {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for RetType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for RetType {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == RET_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -97,11 +82,6 @@ impl RetType {\n pub struct StructDef {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for StructDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for StructDef {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == STRUCT_DEF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -127,11 +107,6 @@ impl StructDef {\n pub struct UnionDef {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for UnionDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for UnionDef {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == UNION_DEF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -158,11 +133,6 @@ impl UnionDef {\n pub struct RecordFieldDefList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for RecordFieldDefList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for RecordFieldDefList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_FIELD_DEF_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -183,11 +153,6 @@ impl RecordFieldDefList {\n pub struct RecordFieldDef {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for RecordFieldDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for RecordFieldDef {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_FIELD_DEF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -209,11 +174,6 @@ impl RecordFieldDef {}\n pub struct TupleFieldDefList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for TupleFieldDefList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for TupleFieldDefList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TUPLE_FIELD_DEF_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -234,11 +194,6 @@ impl TupleFieldDefList {\n pub struct TupleFieldDef {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for TupleFieldDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for TupleFieldDef {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TUPLE_FIELD_DEF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -259,11 +214,6 @@ impl TupleFieldDef {\n pub struct EnumDef {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for EnumDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for EnumDef {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == ENUM_DEF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -288,11 +238,6 @@ impl EnumDef {\n pub struct EnumVariantList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for EnumVariantList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for EnumVariantList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == ENUM_VARIANT_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -313,11 +258,6 @@ impl EnumVariantList {\n pub struct EnumVariant {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for EnumVariant {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for EnumVariant {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == ENUM_VARIANT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -342,11 +282,6 @@ impl EnumVariant {\n pub struct TraitDef {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for TraitDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for TraitDef {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TRAIT_DEF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -374,11 +309,6 @@ impl TraitDef {\n pub struct Module {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for Module {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for Module {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == MODULE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -403,11 +333,6 @@ impl Module {\n pub struct ItemList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for ItemList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for ItemList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == ITEM_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -430,11 +355,6 @@ impl ItemList {\n pub struct ConstDef {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for ConstDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for ConstDef {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == CONST_DEF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -463,11 +383,6 @@ impl ConstDef {\n pub struct StaticDef {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for StaticDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for StaticDef {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == STATIC_DEF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -496,11 +411,6 @@ impl StaticDef {\n pub struct TypeAliasDef {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for TypeAliasDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for TypeAliasDef {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_ALIAS_DEF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -529,11 +439,6 @@ impl TypeAliasDef {\n pub struct ImplDef {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for ImplDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for ImplDef {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == IMPL_DEF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -560,11 +465,6 @@ impl ImplDef {\n pub struct ParenType {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for ParenType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for ParenType {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == PAREN_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -585,11 +485,6 @@ impl ParenType {\n pub struct TupleType {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for TupleType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for TupleType {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TUPLE_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -610,11 +505,6 @@ impl TupleType {\n pub struct NeverType {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for NeverType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for NeverType {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == NEVER_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -633,11 +523,6 @@ impl NeverType {\n pub struct PathType {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for PathType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for PathType {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == PATH_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -656,11 +541,6 @@ impl PathType {\n pub struct PointerType {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for PointerType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for PointerType {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == POINTER_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -681,11 +561,6 @@ impl PointerType {\n pub struct ArrayType {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for ArrayType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for ArrayType {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == ARRAY_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -708,11 +583,6 @@ impl ArrayType {\n pub struct SliceType {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for SliceType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for SliceType {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == SLICE_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -733,11 +603,6 @@ impl SliceType {\n pub struct ReferenceType {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for ReferenceType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for ReferenceType {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == REFERENCE_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -759,11 +624,6 @@ impl ReferenceType {\n pub struct PlaceholderType {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for PlaceholderType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for PlaceholderType {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == PLACEHOLDER_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -782,11 +642,6 @@ impl PlaceholderType {\n pub struct FnPointerType {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for FnPointerType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for FnPointerType {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == FN_POINTER_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -809,11 +664,6 @@ impl FnPointerType {\n pub struct ForType {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for ForType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for ForType {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == FOR_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -834,11 +684,6 @@ impl ForType {\n pub struct ImplTraitType {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for ImplTraitType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for ImplTraitType {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == IMPL_TRAIT_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -858,11 +703,6 @@ impl ImplTraitType {\n pub struct DynTraitType {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for DynTraitType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for DynTraitType {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == DYN_TRAIT_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -882,11 +722,6 @@ impl DynTraitType {\n pub struct TupleExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for TupleExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for TupleExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TUPLE_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -908,11 +743,6 @@ impl TupleExpr {\n pub struct ArrayExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for ArrayExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for ArrayExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == ARRAY_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -935,11 +765,6 @@ impl ArrayExpr {\n pub struct ParenExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for ParenExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for ParenExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == PAREN_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -961,11 +786,6 @@ impl ParenExpr {\n pub struct PathExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for PathExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for PathExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == PATH_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -984,11 +804,6 @@ impl PathExpr {\n pub struct LambdaExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for LambdaExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for LambdaExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == LAMBDA_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1013,11 +828,6 @@ impl LambdaExpr {\n pub struct IfExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for IfExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for IfExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == IF_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1038,11 +848,6 @@ impl IfExpr {\n pub struct LoopExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for LoopExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for LoopExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == LOOP_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1063,11 +868,6 @@ impl LoopExpr {\n pub struct TryBlockExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for TryBlockExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for TryBlockExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TRY_BLOCK_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1088,11 +888,6 @@ impl TryBlockExpr {\n pub struct ForExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for ForExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for ForExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == FOR_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1116,11 +911,6 @@ impl ForExpr {\n pub struct WhileExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for WhileExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for WhileExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == WHILE_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1142,11 +932,6 @@ impl WhileExpr {\n pub struct ContinueExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for ContinueExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for ContinueExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == CONTINUE_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1167,11 +952,6 @@ impl ContinueExpr {\n pub struct BreakExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for BreakExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for BreakExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == BREAK_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1193,11 +973,6 @@ impl BreakExpr {\n pub struct Label {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for Label {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for Label {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == LABEL }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1216,11 +991,6 @@ impl Label {\n pub struct BlockExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for BlockExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for BlockExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == BLOCK_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1242,11 +1012,6 @@ impl BlockExpr {\n pub struct ReturnExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for ReturnExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for ReturnExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == RETURN_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1266,11 +1031,6 @@ impl ReturnExpr {\n pub struct CallExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for CallExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for CallExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == CALL_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1290,11 +1050,6 @@ impl CallExpr {\n pub struct MethodCallExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for MethodCallExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for MethodCallExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == METHOD_CALL_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1318,11 +1073,6 @@ impl MethodCallExpr {\n pub struct IndexExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for IndexExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for IndexExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == INDEX_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1343,11 +1093,6 @@ impl IndexExpr {\n pub struct FieldExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for FieldExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for FieldExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == FIELD_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1369,11 +1114,6 @@ impl FieldExpr {\n pub struct AwaitExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for AwaitExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for AwaitExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == AWAIT_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1395,11 +1135,6 @@ impl AwaitExpr {\n pub struct TryExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for TryExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for TryExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TRY_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1420,11 +1155,6 @@ impl TryExpr {\n pub struct CastExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for CastExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for CastExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == CAST_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1446,11 +1176,6 @@ impl CastExpr {\n pub struct RefExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for RefExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for RefExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == REF_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1473,11 +1198,6 @@ impl RefExpr {\n pub struct PrefixExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for PrefixExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for PrefixExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == PREFIX_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1498,11 +1218,6 @@ impl PrefixExpr {\n pub struct BoxExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for BoxExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for BoxExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == BOX_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1523,11 +1238,6 @@ impl BoxExpr {\n pub struct RangeExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for RangeExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for RangeExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == RANGE_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1547,11 +1257,6 @@ impl RangeExpr {\n pub struct BinExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for BinExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for BinExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == BIN_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1571,11 +1276,6 @@ impl BinExpr {\n pub struct Literal {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for Literal {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for Literal {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == LITERAL }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1594,11 +1294,6 @@ impl Literal {\n pub struct MatchExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for MatchExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for MatchExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == MATCH_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1620,11 +1315,6 @@ impl MatchExpr {\n pub struct MatchArmList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for MatchArmList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for MatchArmList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == MATCH_ARM_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1646,11 +1336,6 @@ impl MatchArmList {\n pub struct MatchArm {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for MatchArm {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for MatchArm {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == MATCH_ARM }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1673,11 +1358,6 @@ impl MatchArm {\n pub struct MatchGuard {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for MatchGuard {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for MatchGuard {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == MATCH_GUARD }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1697,11 +1377,6 @@ impl MatchGuard {\n pub struct RecordLit {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for RecordLit {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for RecordLit {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_LIT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1721,11 +1396,6 @@ impl RecordLit {\n pub struct RecordFieldList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for RecordFieldList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for RecordFieldList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_FIELD_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1748,11 +1418,6 @@ impl RecordFieldList {\n pub struct RecordField {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for RecordField {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for RecordField {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_FIELD }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1774,11 +1439,6 @@ impl RecordField {\n pub struct OrPat {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for OrPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for OrPat {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == OR_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1797,11 +1457,6 @@ impl OrPat {\n pub struct ParenPat {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for ParenPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for ParenPat {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == PAREN_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1822,11 +1477,6 @@ impl ParenPat {\n pub struct RefPat {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for RefPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for RefPat {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == REF_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1847,11 +1497,6 @@ impl RefPat {\n pub struct BoxPat {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for BoxPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for BoxPat {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == BOX_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1871,11 +1516,6 @@ impl BoxPat {\n pub struct BindPat {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for BindPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for BindPat {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == BIND_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1898,11 +1538,6 @@ impl BindPat {\n pub struct PlaceholderPat {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for PlaceholderPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for PlaceholderPat {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == PLACEHOLDER_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1921,11 +1556,6 @@ impl PlaceholderPat {\n pub struct DotDotPat {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for DotDotPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for DotDotPat {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == DOT_DOT_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1944,11 +1574,6 @@ impl DotDotPat {\n pub struct PathPat {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for PathPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for PathPat {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == PATH_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1967,11 +1592,6 @@ impl PathPat {\n pub struct SlicePat {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for SlicePat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for SlicePat {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == SLICE_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1992,11 +1612,6 @@ impl SlicePat {\n pub struct RangePat {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for RangePat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for RangePat {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == RANGE_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2015,11 +1630,6 @@ impl RangePat {\n pub struct LiteralPat {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for LiteralPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for LiteralPat {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == LITERAL_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2038,11 +1648,6 @@ impl LiteralPat {\n pub struct MacroPat {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for MacroPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for MacroPat {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == MACRO_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2061,11 +1666,6 @@ impl MacroPat {\n pub struct RecordPat {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for RecordPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for RecordPat {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2087,11 +1687,6 @@ impl RecordPat {\n pub struct RecordFieldPatList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for RecordFieldPatList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for RecordFieldPatList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_FIELD_PAT_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2117,11 +1712,6 @@ impl RecordFieldPatList {\n pub struct RecordFieldPat {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for RecordFieldPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for RecordFieldPat {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_FIELD_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2143,11 +1733,6 @@ impl RecordFieldPat {\n pub struct TupleStructPat {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for TupleStructPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for TupleStructPat {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TUPLE_STRUCT_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2169,11 +1754,6 @@ impl TupleStructPat {\n pub struct TuplePat {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for TuplePat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for TuplePat {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TUPLE_PAT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2194,11 +1774,6 @@ impl TuplePat {\n pub struct Visibility {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for Visibility {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for Visibility {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == VISIBILITY }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2220,11 +1795,6 @@ impl Visibility {\n pub struct Name {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for Name {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for Name {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == NAME }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2243,11 +1813,6 @@ impl Name {\n pub struct NameRef {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for NameRef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for NameRef {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == NAME_REF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2266,11 +1831,6 @@ impl NameRef {\n pub struct MacroCall {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for MacroCall {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for MacroCall {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == MACRO_CALL }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2295,11 +1855,6 @@ impl MacroCall {\n pub struct Attr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for Attr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for Attr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == ATTR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2324,11 +1879,6 @@ impl Attr {\n pub struct TokenTree {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for TokenTree {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for TokenTree {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TOKEN_TREE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2345,11 +1895,6 @@ impl TokenTree {}\n pub struct TypeParamList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for TypeParamList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for TypeParamList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_PARAM_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2373,11 +1918,6 @@ impl TypeParamList {\n pub struct TypeParam {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for TypeParam {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for TypeParam {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_PARAM }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2400,11 +1940,6 @@ impl TypeParam {\n pub struct ConstParam {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for ConstParam {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for ConstParam {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == CONST_PARAM }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2427,11 +1962,6 @@ impl ConstParam {\n pub struct LifetimeParam {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for LifetimeParam {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for LifetimeParam {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == LIFETIME_PARAM }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2451,11 +1981,6 @@ impl LifetimeParam {\n pub struct TypeBound {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for TypeBound {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for TypeBound {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_BOUND }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2476,11 +2001,6 @@ impl TypeBound {\n pub struct TypeBoundList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for TypeBoundList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for TypeBoundList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_BOUND_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2499,11 +2019,6 @@ impl TypeBoundList {\n pub struct WherePred {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for WherePred {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for WherePred {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == WHERE_PRED }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2524,11 +2039,6 @@ impl WherePred {\n pub struct WhereClause {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for WhereClause {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for WhereClause {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == WHERE_CLAUSE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2548,11 +2058,6 @@ impl WhereClause {\n pub struct Abi {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for Abi {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for Abi {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == ABI }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2571,11 +2076,6 @@ impl Abi {\n pub struct ExprStmt {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for ExprStmt {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for ExprStmt {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == EXPR_STMT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2596,11 +2096,6 @@ impl ExprStmt {\n pub struct LetStmt {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for LetStmt {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for LetStmt {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == LET_STMT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2624,11 +2119,6 @@ impl LetStmt {\n pub struct Condition {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for Condition {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for Condition {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == CONDITION }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2650,11 +2140,6 @@ impl Condition {\n pub struct Block {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for Block {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for Block {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == BLOCK }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2678,11 +2163,6 @@ impl Block {\n pub struct ParamList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for ParamList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for ParamList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == PARAM_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2704,11 +2184,6 @@ impl ParamList {\n pub struct SelfParam {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for SelfParam {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for SelfParam {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == SELF_PARAM }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2731,11 +2206,6 @@ impl SelfParam {\n pub struct Param {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for Param {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for Param {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == PARAM }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2757,11 +2227,6 @@ impl Param {\n pub struct UseItem {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for UseItem {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for UseItem {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == USE_ITEM }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2783,11 +2248,6 @@ impl UseItem {\n pub struct UseTree {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for UseTree {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for UseTree {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == USE_TREE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2809,11 +2269,6 @@ impl UseTree {\n pub struct Alias {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for Alias {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for Alias {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == ALIAS }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2833,11 +2288,6 @@ impl Alias {\n pub struct UseTreeList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for UseTreeList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for UseTreeList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == USE_TREE_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2858,11 +2308,6 @@ impl UseTreeList {\n pub struct ExternCrateItem {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for ExternCrateItem {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for ExternCrateItem {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == EXTERN_CRATE_ITEM }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2886,11 +2331,6 @@ impl ExternCrateItem {\n pub struct ArgList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for ArgList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for ArgList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == ARG_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2911,11 +2351,6 @@ impl ArgList {\n pub struct Path {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for Path {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for Path {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == PATH }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2935,11 +2370,6 @@ impl Path {\n pub struct PathSegment {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for PathSegment {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for PathSegment {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == PATH_SEGMENT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2965,11 +2395,6 @@ impl PathSegment {\n pub struct TypeArgList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for TypeArgList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for TypeArgList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_ARG_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2995,11 +2420,6 @@ impl TypeArgList {\n pub struct TypeArg {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for TypeArg {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for TypeArg {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_ARG }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3018,11 +2438,6 @@ impl TypeArg {\n pub struct AssocTypeArg {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for AssocTypeArg {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for AssocTypeArg {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == ASSOC_TYPE_ARG }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3044,11 +2459,6 @@ impl AssocTypeArg {\n pub struct LifetimeArg {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for LifetimeArg {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for LifetimeArg {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == LIFETIME_ARG }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3067,11 +2477,6 @@ impl LifetimeArg {\n pub struct ConstArg {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for ConstArg {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for ConstArg {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == CONST_ARG }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3092,11 +2497,6 @@ impl ConstArg {\n pub struct MacroItems {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for MacroItems {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for MacroItems {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == MACRO_ITEMS }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3115,11 +2515,6 @@ impl MacroItems {}\n pub struct MacroStmts {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for MacroStmts {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for MacroStmts {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == MACRO_STMTS }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3139,11 +2534,6 @@ impl MacroStmts {\n pub struct ExternItemList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for ExternItemList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for ExternItemList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == EXTERN_ITEM_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3166,11 +2556,6 @@ impl ExternItemList {\n pub struct ExternBlock {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for ExternBlock {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for ExternBlock {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == EXTERN_BLOCK }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3190,11 +2575,6 @@ impl ExternBlock {\n pub struct MetaItem {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for MetaItem {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for MetaItem {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == META_ITEM }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3216,11 +2596,6 @@ impl MetaItem {\n pub struct MacroDef {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl std::fmt::Display for MacroDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for MacroDef {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == MACRO_DEF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3251,11 +2626,6 @@ impl From<EnumDef> for NominalDef {\n impl From<UnionDef> for NominalDef {\n     fn from(node: UnionDef) -> NominalDef { NominalDef::UnionDef(node) }\n }\n-impl std::fmt::Display for NominalDef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for NominalDef {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3298,11 +2668,6 @@ impl From<TypeParam> for GenericParam {\n impl From<ConstParam> for GenericParam {\n     fn from(node: ConstParam) -> GenericParam { GenericParam::ConstParam(node) }\n }\n-impl std::fmt::Display for GenericParam {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for GenericParam {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3346,11 +2711,6 @@ impl From<ConstArg> for GenericArg {\n impl From<AssocTypeArg> for GenericArg {\n     fn from(node: AssocTypeArg) -> GenericArg { GenericArg::AssocTypeArg(node) }\n }\n-impl std::fmt::Display for GenericArg {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for GenericArg {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3432,11 +2792,6 @@ impl From<ImplTraitType> for TypeRef {\n impl From<DynTraitType> for TypeRef {\n     fn from(node: DynTraitType) -> TypeRef { TypeRef::DynTraitType(node) }\n }\n-impl std::fmt::Display for TypeRef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for TypeRef {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3542,11 +2897,6 @@ impl From<MacroCall> for ModuleItem {\n impl From<ExternBlock> for ModuleItem {\n     fn from(node: ExternBlock) -> ModuleItem { ModuleItem::ExternBlock(node) }\n }\n-impl std::fmt::Display for ModuleItem {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for ModuleItem {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3613,11 +2963,6 @@ impl From<TypeAliasDef> for ImplItem {\n impl From<ConstDef> for ImplItem {\n     fn from(node: ConstDef) -> ImplItem { ImplItem::ConstDef(node) }\n }\n-impl std::fmt::Display for ImplItem {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for ImplItem {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3655,11 +3000,6 @@ impl From<FnDef> for ExternItem {\n impl From<StaticDef> for ExternItem {\n     fn from(node: StaticDef) -> ExternItem { ExternItem::StaticDef(node) }\n }\n-impl std::fmt::Display for ExternItem {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for ExternItem {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3812,11 +3152,6 @@ impl From<MacroCall> for Expr {\n impl From<BoxExpr> for Expr {\n     fn from(node: BoxExpr) -> Expr { Expr::BoxExpr(node) }\n }\n-impl std::fmt::Display for Expr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for Expr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -3966,11 +3301,6 @@ impl From<LiteralPat> for Pat {\n impl From<MacroPat> for Pat {\n     fn from(node: MacroPat) -> Pat { Pat::MacroPat(node) }\n }\n-impl std::fmt::Display for Pat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for Pat {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -4032,11 +3362,6 @@ impl From<RecordFieldPat> for RecordInnerPat {\n impl From<BindPat> for RecordInnerPat {\n     fn from(node: BindPat) -> RecordInnerPat { RecordInnerPat::BindPat(node) }\n }\n-impl std::fmt::Display for RecordInnerPat {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for RecordInnerPat {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -4070,11 +3395,6 @@ impl From<Literal> for AttrInput {\n impl From<TokenTree> for AttrInput {\n     fn from(node: TokenTree) -> AttrInput { AttrInput::TokenTree(node) }\n }\n-impl std::fmt::Display for AttrInput {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for AttrInput {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -4108,11 +3428,6 @@ impl From<LetStmt> for Stmt {\n impl From<ExprStmt> for Stmt {\n     fn from(node: ExprStmt) -> Stmt { Stmt::ExprStmt(node) }\n }\n-impl std::fmt::Display for Stmt {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for Stmt {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -4146,11 +3461,6 @@ impl From<RecordFieldDefList> for FieldDefList {\n impl From<TupleFieldDefList> for FieldDefList {\n     fn from(node: TupleFieldDefList) -> FieldDefList { FieldDefList::TupleFieldDefList(node) }\n }\n-impl std::fmt::Display for FieldDefList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl AstNode for FieldDefList {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n@@ -4175,3 +3485,693 @@ impl AstNode for FieldDefList {\n         }\n     }\n }\n+impl std::fmt::Display for NominalDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for GenericParam {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for GenericArg {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for TypeRef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ModuleItem {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ImplItem {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ExternItem {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for Expr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for Pat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for RecordInnerPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for AttrInput {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for Stmt {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for FieldDefList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for SourceFile {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for FnDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for RetType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for StructDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for UnionDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for RecordFieldDefList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for RecordFieldDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for TupleFieldDefList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for TupleFieldDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for EnumDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for EnumVariantList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for EnumVariant {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for TraitDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for Module {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ItemList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ConstDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for StaticDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for TypeAliasDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ImplDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ParenType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for TupleType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for NeverType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for PathType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for PointerType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ArrayType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for SliceType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ReferenceType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for PlaceholderType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for FnPointerType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ForType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ImplTraitType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for DynTraitType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for TupleExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ArrayExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ParenExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for PathExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for LambdaExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for IfExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for LoopExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for TryBlockExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ForExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for WhileExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ContinueExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for BreakExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for Label {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for BlockExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ReturnExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for CallExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for MethodCallExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for IndexExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for FieldExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for AwaitExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for TryExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for CastExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for RefExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for PrefixExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for BoxExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for RangeExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for BinExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for Literal {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for MatchExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for MatchArmList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for MatchArm {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for MatchGuard {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for RecordLit {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for RecordFieldList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for RecordField {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for OrPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ParenPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for RefPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for BoxPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for BindPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for PlaceholderPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for DotDotPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for PathPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for SlicePat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for RangePat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for LiteralPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for MacroPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for RecordPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for RecordFieldPatList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for RecordFieldPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for TupleStructPat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for TuplePat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for Visibility {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for Name {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for NameRef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for MacroCall {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for Attr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for TokenTree {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for TypeParamList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for TypeParam {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ConstParam {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for LifetimeParam {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for TypeBound {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for TypeBoundList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for WherePred {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for WhereClause {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for Abi {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ExprStmt {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for LetStmt {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for Condition {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for Block {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ParamList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for SelfParam {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for Param {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for UseItem {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for UseTree {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for Alias {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for UseTreeList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ExternCrateItem {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ArgList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for Path {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for PathSegment {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for TypeArgList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for TypeArg {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for AssocTypeArg {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for LifetimeArg {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ConstArg {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for MacroItems {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for MacroStmts {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ExternItemList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ExternBlock {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for MetaItem {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for MacroDef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}"}, {"sha": "6657c9fc5f08cd4aa136838002932bc447c01043", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/56c8581b901427ee3e63052c531f3ba3b1ec112d/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56c8581b901427ee3e63052c531f3ba3b1ec112d/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=56c8581b901427ee3e63052c531f3ba3b1ec112d", "patch": "@@ -230,12 +230,6 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: AstSrc<'_>) -> Result<String> {\n                 pub(crate) syntax: SyntaxNode,\n             }\n \n-            impl std::fmt::Display for #name {\n-                fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-                    std::fmt::Display::fmt(self.syntax(), f)\n-                }\n-            }\n-\n             impl AstNode for #name {\n                 fn can_cast(kind: SyntaxKind) -> bool {\n                     kind == #kind\n@@ -280,12 +274,6 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: AstSrc<'_>) -> Result<String> {\n             }\n             )*\n \n-            impl std::fmt::Display for #name {\n-                fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-                    std::fmt::Display::fmt(self.syntax(), f)\n-                }\n-            }\n-\n             impl AstNode for #name {\n                 fn can_cast(kind: SyntaxKind) -> bool {\n                     match kind {\n@@ -315,6 +303,21 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: AstSrc<'_>) -> Result<String> {\n         }\n     });\n \n+    let displays = grammar\n+        .enums\n+        .iter()\n+        .map(|it| format_ident!(\"{}\", it.name))\n+        .chain(grammar.nodes.iter().map(|it| format_ident!(\"{}\", it.name)))\n+        .map(|name| {\n+            quote! {\n+                impl std::fmt::Display for #name {\n+                    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+                        std::fmt::Display::fmt(self.syntax(), f)\n+                    }\n+                }\n+            }\n+        });\n+\n     let defined_nodes: HashSet<_> = grammar.nodes.iter().map(|node| node.name).collect();\n \n     for node in kinds\n@@ -336,6 +339,7 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: AstSrc<'_>) -> Result<String> {\n \n         #(#nodes)*\n         #(#enums)*\n+        #(#displays)*\n     };\n \n     let pretty = crate::reformat(ast)?;"}]}