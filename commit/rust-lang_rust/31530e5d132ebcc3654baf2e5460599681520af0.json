{"sha": "31530e5d132ebcc3654baf2e5460599681520af0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNTMwZTVkMTMyZWJjYzM2NTRiYWYyZTU0NjA1OTk2ODE1MjBhZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-20T21:27:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-20T21:27:47Z"}, "message": "Auto merge of #78162 - GuillaumeGomez:rollup-6a4qiqu, r=GuillaumeGomez\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #78046 (Add codegen test for issue #73827)\n - #78061 (Optimize const value interning for ZST types)\n - #78070 (we can test std and core panic macros together)\n - #78076 (Move orphan module-name/mod.rs files into module-name.rs files)\n - #78129 (Wrapping intrinsics doc links update.)\n - #78133 (Add some MIR-related regression tests)\n - #78144 (Don't update `entries` in `TypedArena` if T does not need drop)\n - #78145 (Drop unneeded `mut`)\n - #78157 (Remove unused type from librustdoc)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "9e92112bbc2a82a2ab40b39833bd74aa22c208ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e92112bbc2a82a2ab40b39833bd74aa22c208ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31530e5d132ebcc3654baf2e5460599681520af0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31530e5d132ebcc3654baf2e5460599681520af0", "html_url": "https://github.com/rust-lang/rust/commit/31530e5d132ebcc3654baf2e5460599681520af0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31530e5d132ebcc3654baf2e5460599681520af0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "981346fc07dd5ef414c5b1b21999f7604cece006", "url": "https://api.github.com/repos/rust-lang/rust/commits/981346fc07dd5ef414c5b1b21999f7604cece006", "html_url": "https://github.com/rust-lang/rust/commit/981346fc07dd5ef414c5b1b21999f7604cece006"}, {"sha": "1df5346bf2d17e13b02514398f6bd729a37c7f87", "url": "https://api.github.com/repos/rust-lang/rust/commits/1df5346bf2d17e13b02514398f6bd729a37c7f87", "html_url": "https://github.com/rust-lang/rust/commit/1df5346bf2d17e13b02514398f6bd729a37c7f87"}], "stats": {"total": 332, "additions": 242, "deletions": 90}, "files": [{"sha": "1a85a46ed74f0a8c607f8a09ae5bec561a01d6cc", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31530e5d132ebcc3654baf2e5460599681520af0/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31530e5d132ebcc3654baf2e5460599681520af0/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=31530e5d132ebcc3654baf2e5460599681520af0", "patch": "@@ -217,8 +217,12 @@ impl<T> TypedArena<T> {\n             let mut chunks = self.chunks.borrow_mut();\n             let mut new_cap;\n             if let Some(last_chunk) = chunks.last_mut() {\n-                let used_bytes = self.ptr.get() as usize - last_chunk.start() as usize;\n-                last_chunk.entries = used_bytes / mem::size_of::<T>();\n+                // If a type is `!needs_drop`, we don't need to keep track of how many elements\n+                // the chunk stores - the field will be ignored anyway.\n+                if mem::needs_drop::<T>() {\n+                    let used_bytes = self.ptr.get() as usize - last_chunk.start() as usize;\n+                    last_chunk.entries = used_bytes / mem::size_of::<T>();\n+                }\n \n                 // If the previous chunk's len is less than HUGE_PAGE\n                 // bytes, then this chunk will be least double the previous"}, {"sha": "56e769ba6b71014c5c8f21241ba8dc35d860e074", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31530e5d132ebcc3654baf2e5460599681520af0/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31530e5d132ebcc3654baf2e5460599681520af0/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=31530e5d132ebcc3654baf2e5460599681520af0", "patch": "@@ -390,7 +390,7 @@ impl Printer {\n         self.scan_stack.pop_front().unwrap()\n     }\n \n-    fn scan_top(&mut self) -> usize {\n+    fn scan_top(&self) -> usize {\n         *self.scan_stack.front().unwrap()\n     }\n \n@@ -484,7 +484,7 @@ impl Printer {\n         self.pending_indentation += amount;\n     }\n \n-    fn get_top(&mut self) -> PrintStackElem {\n+    fn get_top(&self) -> PrintStackElem {\n         *self.print_stack.last().unwrap_or({\n             &PrintStackElem { offset: 0, pbreak: PrintStackBreak::Broken(Breaks::Inconsistent) }\n         })"}, {"sha": "029a6cb664dc359fae56d47385bfbd4b81e89e1b", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31530e5d132ebcc3654baf2e5460599681520af0/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31530e5d132ebcc3654baf2e5460599681520af0/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=31530e5d132ebcc3654baf2e5460599681520af0", "patch": "@@ -63,7 +63,7 @@ impl<'a> Comments<'a> {\n     }\n \n     pub fn trailing_comment(\n-        &mut self,\n+        &self,\n         span: rustc_span::Span,\n         next_pos: Option<BytePos>,\n     ) -> Option<Comment> {"}, {"sha": "0421eabc2dc0522e2aedb223b30a57b138da4e0c", "filename": "compiler/rustc_middle/src/mir/coverage.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/31530e5d132ebcc3654baf2e5460599681520af0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31530e5d132ebcc3654baf2e5460599681520af0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs?ref=31530e5d132ebcc3654baf2e5460599681520af0", "previous_filename": "compiler/rustc_middle/src/mir/coverage/mod.rs"}, {"sha": "e1071454e6501444f6d05f103f054f3d32a1c935", "filename": "compiler/rustc_middle/src/mir/terminator.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/31530e5d132ebcc3654baf2e5460599681520af0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31530e5d132ebcc3654baf2e5460599681520af0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs?ref=31530e5d132ebcc3654baf2e5460599681520af0", "previous_filename": "compiler/rustc_middle/src/mir/terminator/mod.rs"}, {"sha": "945791eddc8f14cca15694780a76e61f3a2f74e4", "filename": "compiler/rustc_mir/src/interpret/intern.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31530e5d132ebcc3654baf2e5460599681520af0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31530e5d132ebcc3654baf2e5460599681520af0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs?ref=31530e5d132ebcc3654baf2e5460599681520af0", "patch": "@@ -187,6 +187,12 @@ impl<'rt, 'mir, 'tcx: 'mir, M: CompileTimeMachine<'mir, 'tcx>> ValueVisitor<'mir\n                 return walked;\n             }\n         }\n+\n+        // ZSTs do not need validation unless they're uninhabited\n+        if mplace.layout.is_zst() && !mplace.layout.abi.is_uninhabited() {\n+            return Ok(());\n+        }\n+\n         self.walk_aggregate(mplace, fields)\n     }\n "}, {"sha": "05e6c4804ff6526ff4d66bbffc2c6fb460718e40", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/31530e5d132ebcc3654baf2e5460599681520af0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31530e5d132ebcc3654baf2e5460599681520af0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=31530e5d132ebcc3654baf2e5460599681520af0", "previous_filename": "compiler/rustc_trait_selection/src/traits/codegen/mod.rs"}, {"sha": "dbc7921a62a674a319abf0811213c72f2e4f6107", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31530e5d132ebcc3654baf2e5460599681520af0/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31530e5d132ebcc3654baf2e5460599681520af0/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=31530e5d132ebcc3654baf2e5460599681520af0", "patch": "@@ -1660,22 +1660,22 @@ extern \"rust-intrinsic\" {\n     /// Returns (a + b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n-    /// primitives via the `checked_add` method. For example,\n-    /// [`u32::checked_add`]\n+    /// primitives via the `wrapping_add` method. For example,\n+    /// [`u32::wrapping_add`]\n     #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n     pub fn wrapping_add<T: Copy>(a: T, b: T) -> T;\n     /// Returns (a - b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n-    /// primitives via the `checked_sub` method. For example,\n-    /// [`u32::checked_sub`]\n+    /// primitives via the `wrapping_sub` method. For example,\n+    /// [`u32::wrapping_sub`]\n     #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n     pub fn wrapping_sub<T: Copy>(a: T, b: T) -> T;\n     /// Returns (a * b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n-    /// primitives via the `checked_mul` method. For example,\n-    /// [`u32::checked_mul`]\n+    /// primitives via the `wrapping_mul` method. For example,\n+    /// [`u32::wrapping_mul`]\n     #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n     pub fn wrapping_mul<T: Copy>(a: T, b: T) -> T;\n "}, {"sha": "616f0efcd75678b741b828335dcb68b007d4549e", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/31530e5d132ebcc3654baf2e5460599681520af0/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31530e5d132ebcc3654baf2e5460599681520af0/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=31530e5d132ebcc3654baf2e5460599681520af0", "patch": "@@ -85,12 +85,6 @@ mod theme;\n mod visit_ast;\n mod visit_lib;\n \n-struct Output {\n-    krate: clean::Crate,\n-    renderinfo: config::RenderInfo,\n-    renderopts: config::RenderOptions,\n-}\n-\n pub fn main() {\n     rustc_driver::set_sigpipe_handler();\n     rustc_driver::install_ice_hook();\n@@ -521,15 +515,12 @@ fn main_options(options: config::Options) -> MainResult {\n \n     krate.version = crate_version;\n \n-    let out = Output { krate, renderinfo, renderopts };\n-\n     if show_coverage {\n         // if we ran coverage, bail early, we don't need to also generate docs at this point\n         // (also we didn't load in any of the useful passes)\n         return Ok(());\n     }\n \n-    let Output { krate, renderinfo, renderopts } = out;\n     info!(\"going to format\");\n     let (error_format, edition, debugging_options) = diag_opts;\n     let diag = core::new_handler(error_format, None, &debugging_options);"}, {"sha": "d07eaa75b7a82d5dd213cd17154d62f40dcdd728", "filename": "src/test/codegen/issue-73827-bounds-check-index-in-subexpr.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/31530e5d132ebcc3654baf2e5460599681520af0/src%2Ftest%2Fcodegen%2Fissue-73827-bounds-check-index-in-subexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31530e5d132ebcc3654baf2e5460599681520af0/src%2Ftest%2Fcodegen%2Fissue-73827-bounds-check-index-in-subexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-73827-bounds-check-index-in-subexpr.rs?ref=31530e5d132ebcc3654baf2e5460599681520af0", "patch": "@@ -0,0 +1,18 @@\n+// This test checks that bounds checks are elided when\n+// index is part of a (x | y) < C style condition\n+\n+// min-llvm-version: 11.0.0\n+// compile-flags: -O\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK-LABEL: @get\n+#[no_mangle]\n+pub fn get(array: &[u8; 8], x: usize, y: usize) -> u8 {\n+    if x > 7 || y > 7 {\n+        0\n+    } else {\n+        // CHECK-NOT: panic_bounds_check\n+        array[y]\n+    }\n+}"}, {"sha": "ada9feec8971e15386755f80553d2fccc55bc2c0", "filename": "src/test/ui/consts/const-eval/const_panic.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/31530e5d132ebcc3654baf2e5460599681520af0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31530e5d132ebcc3654baf2e5460599681520af0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs?ref=31530e5d132ebcc3654baf2e5460599681520af0", "patch": "@@ -1,11 +1,26 @@\n #![feature(const_panic)]\n #![crate_type = \"lib\"]\n \n-pub const Z: () = panic!(\"cheese\");\n+const Z: () = std::panic!(\"cheese\");\n //~^ ERROR any use of this value will cause an error\n \n-pub const Y: () = unreachable!();\n+const Z2: () = std::panic!();\n //~^ ERROR any use of this value will cause an error\n \n-pub const X: () = unimplemented!();\n+const Y: () = std::unreachable!();\n+//~^ ERROR any use of this value will cause an error\n+\n+const X: () = std::unimplemented!();\n+//~^ ERROR any use of this value will cause an error\n+\n+const Z_CORE: () = core::panic!(\"cheese\");\n+//~^ ERROR any use of this value will cause an error\n+\n+const Z2_CORE: () = core::panic!();\n+//~^ ERROR any use of this value will cause an error\n+\n+const Y_CORE: () = core::unreachable!();\n+//~^ ERROR any use of this value will cause an error\n+\n+const X_CORE: () = core::unimplemented!();\n //~^ ERROR any use of this value will cause an error"}, {"sha": "e4ca1f4fa26a2ef19b882232cbe172c4d41fed3d", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 66, "deletions": 16, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/31530e5d132ebcc3654baf2e5460599681520af0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31530e5d132ebcc3654baf2e5460599681520af0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=31530e5d132ebcc3654baf2e5460599681520af0", "patch": "@@ -1,33 +1,83 @@\n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:4:19\n+  --> $DIR/const_panic.rs:4:15\n    |\n-LL | pub const Z: () = panic!(\"cheese\");\n-   | ------------------^^^^^^^^^^^^^^^^-\n-   |                   |\n-   |                   the evaluated program panicked at 'cheese', $DIR/const_panic.rs:4:19\n+LL | const Z: () = std::panic!(\"cheese\");\n+   | --------------^^^^^^^^^^^^^^^^^^^^^-\n+   |               |\n+   |               the evaluated program panicked at 'cheese', $DIR/const_panic.rs:4:15\n    |\n    = note: `#[deny(const_err)]` on by default\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:7:19\n+  --> $DIR/const_panic.rs:7:16\n    |\n-LL | pub const Y: () = unreachable!();\n-   | ------------------^^^^^^^^^^^^^^-\n-   |                   |\n-   |                   the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:7:19\n+LL | const Z2: () = std::panic!();\n+   | ---------------^^^^^^^^^^^^^-\n+   |                |\n+   |                the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:7:16\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:10:19\n+  --> $DIR/const_panic.rs:10:15\n    |\n-LL | pub const X: () = unimplemented!();\n-   | ------------------^^^^^^^^^^^^^^^^-\n-   |                   |\n-   |                   the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:10:19\n+LL | const Y: () = std::unreachable!();\n+   | --------------^^^^^^^^^^^^^^^^^^^-\n+   |               |\n+   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:10:15\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 3 previous errors\n+error: any use of this value will cause an error\n+  --> $DIR/const_panic.rs:13:15\n+   |\n+LL | const X: () = std::unimplemented!();\n+   | --------------^^^^^^^^^^^^^^^^^^^^^-\n+   |               |\n+   |               the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:13:15\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const_panic.rs:16:20\n+   |\n+LL | const Z_CORE: () = core::panic!(\"cheese\");\n+   | -------------------^^^^^^^^^^^^^^^^^^^^^^-\n+   |                    |\n+   |                    the evaluated program panicked at 'cheese', $DIR/const_panic.rs:16:20\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const_panic.rs:19:21\n+   |\n+LL | const Z2_CORE: () = core::panic!();\n+   | --------------------^^^^^^^^^^^^^^-\n+   |                     |\n+   |                     the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:19:21\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const_panic.rs:22:20\n+   |\n+LL | const Y_CORE: () = core::unreachable!();\n+   | -------------------^^^^^^^^^^^^^^^^^^^^-\n+   |                    |\n+   |                    the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:22:20\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const_panic.rs:25:20\n+   |\n+LL | const X_CORE: () = core::unimplemented!();\n+   | -------------------^^^^^^^^^^^^^^^^^^^^^^-\n+   |                    |\n+   |                    the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:25:20\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 8 previous errors\n "}, {"sha": "e42685e9c76b0f586083c68664dec122f6d42988", "filename": "src/test/ui/consts/const-eval/const_panic_libcore.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/981346fc07dd5ef414c5b1b21999f7604cece006/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/981346fc07dd5ef414c5b1b21999f7604cece006/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.rs?ref=981346fc07dd5ef414c5b1b21999f7604cece006", "patch": "@@ -1,12 +0,0 @@\n-#![no_std]\n-#![crate_type = \"lib\"]\n-#![feature(const_panic)]\n-\n-const Z: () = panic!(\"cheese\");\n-//~^ ERROR any use of this value will cause an error\n-\n-const Y: () = unreachable!();\n-//~^ ERROR any use of this value will cause an error\n-\n-const X: () = unimplemented!();\n-//~^ ERROR any use of this value will cause an error"}, {"sha": "6b03e847def140dbf98864f75a05aaef99254ad9", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_bin.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/31530e5d132ebcc3654baf2e5460599681520af0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31530e5d132ebcc3654baf2e5460599681520af0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs?ref=31530e5d132ebcc3654baf2e5460599681520af0", "previous_filename": "src/test/ui/consts/const-eval/const_panic_libcore_main.rs"}, {"sha": "9eeddc464f5ad489e16da2a8c2d9200c5befc43d", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_bin.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31530e5d132ebcc3654baf2e5460599681520af0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31530e5d132ebcc3654baf2e5460599681520af0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr?ref=31530e5d132ebcc3654baf2e5460599681520af0", "patch": "@@ -1,31 +1,31 @@\n error: any use of this value will cause an error\n-  --> $DIR/const_panic_libcore.rs:5:15\n+  --> $DIR/const_panic_libcore_bin.rs:9:15\n    |\n LL | const Z: () = panic!(\"cheese\");\n    | --------------^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'cheese', $DIR/const_panic_libcore.rs:5:15\n+   |               the evaluated program panicked at 'cheese', $DIR/const_panic_libcore_bin.rs:9:15\n    |\n    = note: `#[deny(const_err)]` on by default\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic_libcore.rs:8:15\n+  --> $DIR/const_panic_libcore_bin.rs:12:15\n    |\n LL | const Y: () = unreachable!();\n    | --------------^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore.rs:8:15\n+   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_bin.rs:12:15\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic_libcore.rs:11:15\n+  --> $DIR/const_panic_libcore_bin.rs:15:15\n    |\n LL | const X: () = unimplemented!();\n    | --------------^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore.rs:11:15\n+   |               the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore_bin.rs:15:15\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n ", "previous_filename": "src/test/ui/consts/const-eval/const_panic_libcore.stderr"}, {"sha": "c5887ff8c5697c373476633d906f20d78f67e34d", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_main.stderr", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/981346fc07dd5ef414c5b1b21999f7604cece006/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/981346fc07dd5ef414c5b1b21999f7604cece006/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr?ref=981346fc07dd5ef414c5b1b21999f7604cece006", "patch": "@@ -1,33 +0,0 @@\n-error: any use of this value will cause an error\n-  --> $DIR/const_panic_libcore_main.rs:9:15\n-   |\n-LL | const Z: () = panic!(\"cheese\");\n-   | --------------^^^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'cheese', $DIR/const_panic_libcore_main.rs:9:15\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: any use of this value will cause an error\n-  --> $DIR/const_panic_libcore_main.rs:12:15\n-   |\n-LL | const Y: () = unreachable!();\n-   | --------------^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_main.rs:12:15\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: any use of this value will cause an error\n-  --> $DIR/const_panic_libcore_main.rs:15:15\n-   |\n-LL | const X: () = unimplemented!();\n-   | --------------^^^^^^^^^^^^^^^^-\n-   |               |\n-   |               the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore_main.rs:15:15\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "4f1bd45e90a19c25f7b31b8a9167e97c15eaed05", "filename": "src/test/ui/issues/issue-68010-large-zst-consts.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31530e5d132ebcc3654baf2e5460599681520af0/src%2Ftest%2Fui%2Fissues%2Fissue-68010-large-zst-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31530e5d132ebcc3654baf2e5460599681520af0/src%2Ftest%2Fui%2Fissues%2Fissue-68010-large-zst-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-68010-large-zst-consts.rs?ref=31530e5d132ebcc3654baf2e5460599681520af0", "patch": "@@ -0,0 +1,5 @@\n+// build-pass\n+\n+fn main() {\n+    println!(\"{}\", [(); std::usize::MAX].len());\n+}"}, {"sha": "f8b318d58ba2adb115f16953c71ad723561557c8", "filename": "src/test/ui/mir/auxiliary/issue_76375_aux.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/31530e5d132ebcc3654baf2e5460599681520af0/src%2Ftest%2Fui%2Fmir%2Fauxiliary%2Fissue_76375_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31530e5d132ebcc3654baf2e5460599681520af0/src%2Ftest%2Fui%2Fmir%2Fauxiliary%2Fissue_76375_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fauxiliary%2Fissue_76375_aux.rs?ref=31530e5d132ebcc3654baf2e5460599681520af0", "patch": "@@ -0,0 +1,14 @@\n+// edition:2018\n+// compile-flags: -Z mir-opt-level=2 -Z unsound-mir-opts\n+\n+#[inline(always)]\n+pub fn f(s: bool) -> String {\n+    let a = \"Hello world!\".to_string();\n+    let b = a;\n+    let c = b;\n+    if s {\n+        c\n+    } else {\n+        String::new()\n+    }\n+}"}, {"sha": "14884a97fabcbc4763b9954875d3c1780852a939", "filename": "src/test/ui/mir/issue-68841.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/31530e5d132ebcc3654baf2e5460599681520af0/src%2Ftest%2Fui%2Fmir%2Fissue-68841.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31530e5d132ebcc3654baf2e5460599681520af0/src%2Ftest%2Fui%2Fmir%2Fissue-68841.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-68841.rs?ref=31530e5d132ebcc3654baf2e5460599681520af0", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -Z mir-opt-level=2\n+// edition:2018\n+// build-pass\n+\n+#![feature(async_closure)]\n+\n+use std::future::Future;\n+\n+fn async_closure() -> impl Future<Output = u8> {\n+    (async move || -> u8 { 42 })()\n+}\n+\n+fn main() {\n+    let _fut = async_closure();\n+}"}, {"sha": "6e7211c2ee60e29918107a4f5171a992f56cfad2", "filename": "src/test/ui/mir/issue-75053.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/31530e5d132ebcc3654baf2e5460599681520af0/src%2Ftest%2Fui%2Fmir%2Fissue-75053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31530e5d132ebcc3654baf2e5460599681520af0/src%2Ftest%2Fui%2Fmir%2Fissue-75053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-75053.rs?ref=31530e5d132ebcc3654baf2e5460599681520af0", "patch": "@@ -0,0 +1,48 @@\n+// compile-flags: -Z mir-opt-level=2\n+// build-pass\n+\n+#![feature(type_alias_impl_trait)]\n+\n+use std::marker::PhantomData;\n+\n+trait MyIndex<T> {\n+    type O;\n+    fn my_index(self) -> Self::O;\n+}\n+trait MyFrom<T>: Sized {\n+    type Error;\n+    fn my_from(value: T) -> Result<Self, Self::Error>;\n+}\n+\n+trait F {}\n+impl F for () {}\n+type DummyT<T> = impl F;\n+fn _dummy_t<T>() -> DummyT<T> {}\n+\n+struct Phantom1<T>(PhantomData<T>);\n+struct Phantom2<T>(PhantomData<T>);\n+struct Scope<T>(Phantom2<DummyT<T>>);\n+\n+impl<T> Scope<T> {\n+    fn new() -> Self {\n+        unimplemented!()\n+    }\n+}\n+\n+impl<T> MyFrom<Phantom2<T>> for Phantom1<T> {\n+    type Error = ();\n+    fn my_from(_: Phantom2<T>) -> Result<Self, Self::Error> {\n+        unimplemented!()\n+    }\n+}\n+\n+impl<T: MyFrom<Phantom2<DummyT<U>>>, U> MyIndex<Phantom1<T>> for Scope<U> {\n+    type O = T;\n+    fn my_index(self) -> Self::O {\n+        MyFrom::my_from(self.0).ok().unwrap()\n+    }\n+}\n+\n+fn main() {\n+    let _pos: Phantom1<DummyT<()>> = Scope::new().my_index();\n+}"}, {"sha": "ef459f6a28ec8864669d944a5b889a0d3a47bcde", "filename": "src/test/ui/mir/issue-76375.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/31530e5d132ebcc3654baf2e5460599681520af0/src%2Ftest%2Fui%2Fmir%2Fissue-76375.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31530e5d132ebcc3654baf2e5460599681520af0/src%2Ftest%2Fui%2Fmir%2Fissue-76375.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-76375.rs?ref=31530e5d132ebcc3654baf2e5460599681520af0", "patch": "@@ -0,0 +1,15 @@\n+// edition:2018\n+// build-pass\n+// compile-flags: -Z mir-opt-level=2 -L.\n+// aux-build:issue_76375_aux.rs\n+\n+#![crate_type = \"lib\"]\n+\n+extern crate issue_76375_aux;\n+\n+pub async fn g() {\n+    issue_76375_aux::f(true);\n+    h().await;\n+}\n+\n+pub async fn h() {}"}, {"sha": "b24faa6f885c78b078289086ecc8a54073fa40dd", "filename": "src/test/ui/mir/issue-77911.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/31530e5d132ebcc3654baf2e5460599681520af0/src%2Ftest%2Fui%2Fmir%2Fissue-77911.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31530e5d132ebcc3654baf2e5460599681520af0/src%2Ftest%2Fui%2Fmir%2Fissue-77911.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-77911.rs?ref=31530e5d132ebcc3654baf2e5460599681520af0", "patch": "@@ -0,0 +1,16 @@\n+// compile-flags: -Z mir-opt-level=2\n+// ignore-cloudabi no std::fs\n+// build-pass\n+\n+use std::fs::File;\n+use std::io::{BufRead, BufReader};\n+\n+fn file_lines() -> impl Iterator<Item = String> {\n+    BufReader::new(File::open(\"\").unwrap())\n+        .lines()\n+        .map(Result::unwrap)\n+}\n+\n+fn main() {\n+    for _ in file_lines() {}\n+}"}]}