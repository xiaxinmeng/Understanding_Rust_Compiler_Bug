{"sha": "5bf2ad3018de1f5a94bed2685211f3694f94249c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZjJhZDMwMThkZTFmNWE5NGJlZDI2ODUyMTFmMzY5NGY5NDI0OWM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-08-20T04:25:08Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-08-20T18:28:37Z"}, "message": "syntax: Optimize some literal parsing\n\nCurrently in the `wasm-bindgen` project we have a very very large crate that's\nprocedurally generated, `web-sys`. To generate this crate we parse all of a\nbrowser's WebIDL and we then generate bindings for all of the APIs contained\nwithin.\n\nThe resulting Rust file is 18MB large (wow!) and currently takes a very long\ntime to compile in debug mode. On the nightly compiler a *debug* build takes 90s\nfor the crate to finish. I was curious what was taking so long and upon\ninvestigating a *massive* portion of the time was spent in the `lit_token`\nmethod of the compiler, primarily formatting strings via `format!`.\n\nUpon some more investigation it looks like the `byte_str_lit` was allocating an\nerror message once per byte, causing a very large number of allocations to\nhappen for large literals, of which wasm-bindgen generates quite a few (some are\nMB large).\n\nThis commit fixes the issue by lazily allocating the error message, only doing\nso if the error message is actually needed (which should be never). As a result,\nthe debug mode compilation time for our `web-sys` crate decreased from 90s to\n20s, a very nice improvement! (although we've still got some work to do).", "tree": {"sha": "c9ca53fb9b49d99775cbe6e39a5319fd2ed6716a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9ca53fb9b49d99775cbe6e39a5319fd2ed6716a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bf2ad3018de1f5a94bed2685211f3694f94249c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf2ad3018de1f5a94bed2685211f3694f94249c", "html_url": "https://github.com/rust-lang/rust/commit/5bf2ad3018de1f5a94bed2685211f3694f94249c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bf2ad3018de1f5a94bed2685211f3694f94249c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ac79c718475fd29b8be34dde667b683390c2aee", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ac79c718475fd29b8be34dde667b683390c2aee", "html_url": "https://github.com/rust-lang/rust/commit/3ac79c718475fd29b8be34dde667b683390c2aee"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "2795d5c8f917089f06af2929665c732429a82b1c", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5bf2ad3018de1f5a94bed2685211f3694f94249c/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf2ad3018de1f5a94bed2685211f3694f94249c/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=5bf2ad3018de1f5a94bed2685211f3694f94249c", "patch": "@@ -532,7 +532,7 @@ fn byte_lit(lit: &str) -> (u8, usize) {\n fn byte_str_lit(lit: &str) -> Lrc<Vec<u8>> {\n     let mut res = Vec::with_capacity(lit.len());\n \n-    let error = |i| format!(\"lexer should have rejected {} at {}\", lit, i);\n+    let error = |i| panic!(\"lexer should have rejected {} at {}\", lit, i);\n \n     /// Eat everything up to a non-whitespace\n     fn eat<I: Iterator<Item=(usize, u8)>>(it: &mut iter::Peekable<I>) {\n@@ -551,12 +551,11 @@ fn byte_str_lit(lit: &str) -> Lrc<Vec<u8>> {\n     loop {\n         match chars.next() {\n             Some((i, b'\\\\')) => {\n-                let em = error(i);\n-                match chars.peek().expect(&em).1 {\n+                match chars.peek().unwrap_or_else(|| error(i)).1 {\n                     b'\\n' => eat(&mut chars),\n                     b'\\r' => {\n                         chars.next();\n-                        if chars.peek().expect(&em).1 != b'\\n' {\n+                        if chars.peek().unwrap_or_else(|| error(i)).1 != b'\\n' {\n                             panic!(\"lexer accepted bare CR\");\n                         }\n                         eat(&mut chars);\n@@ -573,8 +572,7 @@ fn byte_str_lit(lit: &str) -> Lrc<Vec<u8>> {\n                 }\n             },\n             Some((i, b'\\r')) => {\n-                let em = error(i);\n-                if chars.peek().expect(&em).1 != b'\\n' {\n+                if chars.peek().unwrap_or_else(|| error(i)).1 != b'\\n' {\n                     panic!(\"lexer accepted bare CR\");\n                 }\n                 chars.next();"}]}