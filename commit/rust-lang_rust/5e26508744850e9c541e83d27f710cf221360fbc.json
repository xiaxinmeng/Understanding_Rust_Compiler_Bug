{"sha": "5e26508744850e9c541e83d27f710cf221360fbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMjY1MDg3NDQ4NTBlOWM1NDFlODNkMjdmNzEwY2YyMjEzNjBmYmM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-16T09:47:18Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-25T18:07:19Z"}, "message": "refactor DefPathData variants\n\nIn particular, remove the name from the Impl, since that name is\nsynthesized and is not predictable (it tends to break incr. comp.).\n\nAlso rename the variants to be a bit more uniform and remove some\ndistinctions that we were not really taking advantage of anywhere.", "tree": {"sha": "4b63797d18c7831528959a8d15a2c412b30ce22e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b63797d18c7831528959a8d15a2c412b30ce22e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e26508744850e9c541e83d27f710cf221360fbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e26508744850e9c541e83d27f710cf221360fbc", "html_url": "https://github.com/rust-lang/rust/commit/5e26508744850e9c541e83d27f710cf221360fbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e26508744850e9c541e83d27f710cf221360fbc/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b6270b53794adf62e16918a159e5e5eecb9a60e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b6270b53794adf62e16918a159e5e5eecb9a60e", "html_url": "https://github.com/rust-lang/rust/commit/7b6270b53794adf62e16918a159e5e5eecb9a60e"}], "stats": {"total": 47, "additions": 24, "deletions": 23}, "files": [{"sha": "4ae03b1b9d722d5ac8c62cad666e5afa90f2d95c", "filename": "src/librustc/front/map/collector.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5e26508744850e9c541e83d27f710cf221360fbc/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e26508744850e9c541e83d27f710cf221360fbc/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs?ref=5e26508744850e9c541e83d27f710cf221360fbc", "patch": "@@ -133,11 +133,16 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n         // Pick the def data. This need not be unique, but the more\n         // information we encapsulate into\n         let def_data = match i.node {\n-            ItemDefaultImpl(..) | ItemImpl(..) => DefPathData::Impl(i.name),\n-            ItemEnum(..) | ItemStruct(..) | ItemTrait(..) => DefPathData::Type(i.name),\n-            ItemExternCrate(..) | ItemMod(..) => DefPathData::Mod(i.name),\n-            ItemStatic(..) | ItemConst(..) | ItemFn(..) => DefPathData::Value(i.name),\n-            _ => DefPathData::Misc,\n+            ItemDefaultImpl(..) | ItemImpl(..) =>\n+                DefPathData::Impl,\n+            ItemEnum(..) | ItemStruct(..) | ItemTrait(..) |\n+            ItemExternCrate(..) | ItemMod(..) | ItemForeignMod(..) |\n+            ItemTy(..) =>\n+                DefPathData::TypeNs(i.name),\n+            ItemStatic(..) | ItemConst(..) | ItemFn(..) =>\n+                DefPathData::ValueNs(i.name),\n+            ItemUse(..) =>\n+                DefPathData::Misc,\n         };\n \n         self.insert_def(i.id, NodeItem(i), def_data);\n@@ -202,7 +207,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n     fn visit_foreign_item(&mut self, foreign_item: &'ast ForeignItem) {\n         self.insert_def(foreign_item.id,\n                         NodeForeignItem(foreign_item),\n-                        DefPathData::Value(foreign_item.name));\n+                        DefPathData::ValueNs(foreign_item.name));\n \n         let parent_node = self.parent_node;\n         self.parent_node = foreign_item.id;\n@@ -222,8 +227,8 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n \n     fn visit_trait_item(&mut self, ti: &'ast TraitItem) {\n         let def_data = match ti.node {\n-            MethodTraitItem(..) | ConstTraitItem(..) => DefPathData::Value(ti.name),\n-            TypeTraitItem(..) => DefPathData::Type(ti.name),\n+            MethodTraitItem(..) | ConstTraitItem(..) => DefPathData::ValueNs(ti.name),\n+            TypeTraitItem(..) => DefPathData::TypeNs(ti.name),\n         };\n \n         self.insert(ti.id, NodeTraitItem(ti));\n@@ -246,8 +251,8 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n \n     fn visit_impl_item(&mut self, ii: &'ast ImplItem) {\n         let def_data = match ii.node {\n-            ImplItemKind::Method(..) | ImplItemKind::Const(..) => DefPathData::Value(ii.name),\n-            ImplItemKind::Type(..) => DefPathData::Type(ii.name),\n+            ImplItemKind::Method(..) | ImplItemKind::Const(..) => DefPathData::ValueNs(ii.name),\n+            ImplItemKind::Type(..) => DefPathData::TypeNs(ii.name),\n         };\n \n         self.insert_def(ii.id, NodeImplItem(ii), def_data);"}, {"sha": "82574b852297aba88db676c7186203bc0f1c0d07", "filename": "src/librustc/front/map/definitions.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5e26508744850e9c541e83d27f710cf221360fbc/src%2Flibrustc%2Ffront%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e26508744850e9c541e83d27f710cf221360fbc/src%2Flibrustc%2Ffront%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fdefinitions.rs?ref=5e26508744850e9c541e83d27f710cf221360fbc", "patch": "@@ -144,10 +144,9 @@ pub enum DefPathData {\n     Misc,\n \n     // Different kinds of items and item-like things:\n-    Impl(ast::Name),\n-    Type(ast::Name),\n-    Mod(ast::Name),\n-    Value(ast::Name),\n+    Impl,\n+    TypeNs(ast::Name), // something in the type NS\n+    ValueNs(ast::Name), // something in the value NS\n     MacroDef(ast::Name),\n     ClosureExpr,\n \n@@ -159,10 +158,6 @@ pub enum DefPathData {\n     StructCtor, // implicit ctor for a tuple-like struct\n     Initializer, // initializer for a const\n     Binding(ast::Name), // pattern binding\n-\n-    // An external crate that does not have an `extern crate` in this\n-    // crate.\n-    DetachedCrate(ast::Name),\n }\n \n impl Definitions {\n@@ -247,20 +242,21 @@ impl DefPathData {\n     pub fn as_interned_str(&self) -> InternedString {\n         use self::DefPathData::*;\n         match *self {\n-            Impl(name) |\n-            Type(name) |\n-            Mod(name) |\n-            Value(name) |\n+            TypeNs(name) |\n+            ValueNs(name) |\n             MacroDef(name) |\n             TypeParam(name) |\n             LifetimeDef(name) |\n             EnumVariant(name) |\n-            DetachedCrate(name) |\n             Binding(name) |\n             Field(name) => {\n                 name.as_str()\n             }\n \n+            Impl => {\n+                InternedString::new(\"{{impl}}\")\n+            }\n+\n             // note that this does not show up in user printouts\n             CrateRoot => {\n                 InternedString::new(\"{{root}}\")"}]}