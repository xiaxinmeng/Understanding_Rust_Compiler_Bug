{"sha": "619a8185a607b216c64b58d230c3949ccef98a37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxOWE4MTg1YTYwN2IyMTZjNjRiNThkMjMwYzM5NDljY2VmOThhMzc=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-09-07T19:03:03Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-09-24T21:05:12Z"}, "message": "Give closures types", "tree": {"sha": "7d0691791f25b351248545ca8d415c4a3734a346", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d0691791f25b351248545ca8d415c4a3734a346"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/619a8185a607b216c64b58d230c3949ccef98a37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/619a8185a607b216c64b58d230c3949ccef98a37", "html_url": "https://github.com/rust-lang/rust/commit/619a8185a607b216c64b58d230c3949ccef98a37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/619a8185a607b216c64b58d230c3949ccef98a37/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36fb3f53d712a11b7e3fc4bbd92094d1c8f19522", "url": "https://api.github.com/repos/rust-lang/rust/commits/36fb3f53d712a11b7e3fc4bbd92094d1c8f19522", "html_url": "https://github.com/rust-lang/rust/commit/36fb3f53d712a11b7e3fc4bbd92094d1c8f19522"}], "stats": {"total": 99, "additions": 78, "deletions": 21}, "files": [{"sha": "99c247a0b296e2bef6ba8137692cfddbe7520954", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/619a8185a607b216c64b58d230c3949ccef98a37/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619a8185a607b216c64b58d230c3949ccef98a37/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=619a8185a607b216c64b58d230c3949ccef98a37", "patch": "@@ -551,6 +551,14 @@ impl DefWithBody {\n             DefWithBody::Static(s) => s.resolver(db),\n         }\n     }\n+\n+    pub(crate) fn krate(self, db: &impl HirDatabase) -> Option<Crate> {\n+        match self {\n+            DefWithBody::Const(c) => c.krate(db),\n+            DefWithBody::Function(f) => f.krate(db),\n+            DefWithBody::Static(s) => s.krate(db),\n+        }\n+    }\n }\n \n pub trait HasBody: Copy {\n@@ -671,6 +679,10 @@ impl Function {\n         self.id.module(db)\n     }\n \n+    pub fn krate(self, db: &impl DefDatabase) -> Option<Crate> {\n+        self.module(db).krate(db)\n+    }\n+\n     pub fn name(self, db: &impl HirDatabase) -> Name {\n         self.data(db).name.clone()\n     }\n@@ -745,6 +757,10 @@ impl Const {\n         self.id.module(db)\n     }\n \n+    pub fn krate(self, db: &impl DefDatabase) -> Option<Crate> {\n+        self.module(db).krate(db)\n+    }\n+\n     pub fn data(self, db: &impl HirDatabase) -> Arc<ConstData> {\n         db.const_data(self)\n     }\n@@ -824,6 +840,10 @@ impl Static {\n         self.id.module(db)\n     }\n \n+    pub fn krate(self, db: &impl DefDatabase) -> Option<Crate> {\n+        self.module(db).krate(db)\n+    }\n+\n     pub fn data(self, db: &impl HirDatabase) -> Arc<ConstData> {\n         db.static_data(self)\n     }"}, {"sha": "e6ecbe1ea7f62921226360f2bcc9dde7b53e9402", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/619a8185a607b216c64b58d230c3949ccef98a37/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619a8185a607b216c64b58d230c3949ccef98a37/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=619a8185a607b216c64b58d230c3949ccef98a37", "patch": "@@ -16,7 +16,10 @@ use std::ops::Deref;\n use std::sync::Arc;\n use std::{fmt, mem};\n \n-use crate::{db::HirDatabase, type_ref::Mutability, Adt, GenericParams, Name, Trait, TypeAlias};\n+use crate::{\n+    db::HirDatabase, expr::ExprId, type_ref::Mutability, Adt, DefWithBody, GenericParams, Name,\n+    Trait, TypeAlias,\n+};\n use display::{HirDisplay, HirFormatter};\n \n pub(crate) use autoderef::autoderef;\n@@ -100,6 +103,12 @@ pub enum TypeCtor {\n     /// couldn't find a better representation.  In that case, we generate\n     /// an **application type** like `(Iterator::Item)<T>`.\n     AssociatedType(TypeAlias),\n+\n+    /// The type of a specific closure.\n+    ///\n+    /// The closure signature is stored in a `FnPtr` type in the first type\n+    /// parameter.\n+    Closure { def: DefWithBody, expr: ExprId },\n }\n \n /// A nominal type with (maybe 0) type parameters. This might be a primitive\n@@ -481,6 +490,10 @@ impl Ty {\n                     let sig = db.callable_item_signature(def);\n                     Some(sig.subst(&a_ty.parameters))\n                 }\n+                TypeCtor::Closure { .. } => {\n+                    let sig_param = &a_ty.parameters[0];\n+                    sig_param.callable_sig(db)\n+                }\n                 _ => None,\n             },\n             _ => None,\n@@ -720,6 +733,14 @@ impl HirDisplay for ApplicationTy {\n                     write!(f, \">\")?;\n                 }\n             }\n+            TypeCtor::Closure { .. } => {\n+                let sig = self.parameters[0]\n+                    .callable_sig(f.db)\n+                    .expect(\"first closure parameter should contain signature\");\n+                write!(f, \"|\")?;\n+                f.write_joined(sig.params(), \", \")?;\n+                write!(f, \"| -> {}\", sig.ret().display(f.db))?;\n+            }\n         }\n         Ok(())\n     }"}, {"sha": "c04f2a0c468f484cee5ade64d04dda7624860d09", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/619a8185a607b216c64b58d230c3949ccef98a37/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619a8185a607b216c64b58d230c3949ccef98a37/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=619a8185a607b216c64b58d230c3949ccef98a37", "patch": "@@ -885,18 +885,32 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             Expr::Lambda { body, args, arg_types } => {\n                 assert_eq!(args.len(), arg_types.len());\n \n+                let mut sig_tys = Vec::new();\n+\n                 for (arg_pat, arg_type) in args.iter().zip(arg_types.iter()) {\n                     let expected = if let Some(type_ref) = arg_type {\n                         self.make_ty(type_ref)\n                     } else {\n                         Ty::Unknown\n                     };\n-                    self.infer_pat(*arg_pat, &expected, BindingMode::default());\n+                    let arg_ty = self.infer_pat(*arg_pat, &expected, BindingMode::default());\n+                    sig_tys.push(arg_ty);\n                 }\n \n-                // FIXME: infer lambda type etc.\n-                let _body_ty = self.infer_expr(*body, &Expectation::none());\n-                Ty::Unknown\n+                // add return type\n+                let ret_ty = self.new_type_var();\n+                sig_tys.push(ret_ty.clone());\n+                let sig_ty = Ty::apply(\n+                    TypeCtor::FnPtr { num_args: sig_tys.len() as u16 - 1 },\n+                    sig_tys.into(),\n+                );\n+                let closure_ty = Ty::apply_one(\n+                    TypeCtor::Closure { def: self.body.owner(), expr: tgt_expr },\n+                    sig_ty,\n+                );\n+\n+                self.infer_expr(*body, &Expectation::has_type(ret_ty));\n+                closure_ty\n             }\n             Expr::Call { callee, args } => {\n                 let callee_ty = self.infer_expr(*callee, &Expectation::none());"}, {"sha": "eb8770ec4ffc936bfbbeb447c4782889e96e61c5", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/619a8185a607b216c64b58d230c3949ccef98a37/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619a8185a607b216c64b58d230c3949ccef98a37/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=619a8185a607b216c64b58d230c3949ccef98a37", "patch": "@@ -1077,7 +1077,6 @@ fn test(x: &i32) {\n }\n \"#),\n         @r###\"\n-\n     [9; 10) 'x': &i32\n     [18; 369) '{     ...o_x; }': ()\n     [28; 29) 'y': &i32\n@@ -1107,8 +1106,8 @@ fn test(x: &i32) {\n     [177; 205) '{     ...     }': ()\n     [191; 192) 'h': {unknown}\n     [195; 198) 'val': {unknown}\n-    [215; 221) 'lambda': {unknown}\n-    [224; 256) '|a: u6...b; c }': {unknown}\n+    [215; 221) 'lambda': |u64, u64, i32| -> i32\n+    [224; 256) '|a: u6...b; c }': |u64, u64, i32| -> i32\n     [225; 226) 'a': u64\n     [233; 234) 'b': u64\n     [236; 237) 'c': i32\n@@ -2836,12 +2835,11 @@ fn test() -> u64 {\n }\n \"#),\n         @r###\"\n-\n     [44; 102) '{     ...0(2) }': u64\n     [54; 55) 'a': S\n     [58; 59) 'S': S(fn(u32) -> u64) -> S\n     [58; 68) 'S(|i| 2*i)': S\n-    [60; 67) '|i| 2*i': fn(u32) -> u64\n+    [60; 67) '|i| 2*i': |i32| -> i32\n     [61; 62) 'i': i32\n     [64; 65) '2': i32\n     [64; 67) '2*i': i32\n@@ -4019,20 +4017,20 @@ fn test() {\n     [188; 192) '1i32': i32\n     [199; 200) 'x': Option<i32>\n     [199; 215) 'x.map(...v + 1)': {unknown}\n-    [205; 214) '|v| v + 1': {unknown}\n+    [205; 214) '|v| v + 1': |{unknown}| -> i32\n     [206; 207) 'v': {unknown}\n     [209; 210) 'v': {unknown}\n     [209; 214) 'v + 1': i32\n     [213; 214) '1': i32\n     [221; 222) 'x': Option<i32>\n     [221; 237) 'x.map(... 1u64)': {unknown}\n-    [227; 236) '|_v| 1u64': {unknown}\n+    [227; 236) '|_v| 1u64': |{unknown}| -> u64\n     [228; 230) '_v': {unknown}\n     [232; 236) '1u64': u64\n     [247; 248) 'y': Option<i64>\n     [264; 265) 'x': Option<i32>\n     [264; 277) 'x.map(|_v| 1)': Option<i64>\n-    [270; 276) '|_v| 1': {unknown}\n+    [270; 276) '|_v| 1': |{unknown}| -> i32\n     [271; 273) '_v': {unknown}\n     [275; 276) '1': i32\n     \"###\n@@ -4060,17 +4058,17 @@ fn test<F: FnOnce(u32) -> u64>(f: F) {\n     [85; 86) 'f': F\n     [85; 89) 'f(1)': {unknown}\n     [87; 88) '1': i32\n-    [99; 100) 'g': {unknown}\n-    [103; 112) '|v| v + 1': {unknown}\n-    [104; 105) 'v': {unknown}\n-    [107; 108) 'v': {unknown}\n+    [99; 100) 'g': |u64| -> i32\n+    [103; 112) '|v| v + 1': |u64| -> i32\n+    [104; 105) 'v': u64\n+    [107; 108) 'v': u64\n     [107; 112) 'v + 1': i32\n     [111; 112) '1': i32\n-    [118; 119) 'g': {unknown}\n-    [118; 125) 'g(1u64)': {unknown}\n+    [118; 119) 'g': |u64| -> i32\n+    [118; 125) 'g(1u64)': i32\n     [120; 124) '1u64': u64\n-    [135; 136) 'h': {unknown}\n-    [139; 152) '|v| 1u128 + v': {unknown}\n+    [135; 136) 'h': |u128| -> u128\n+    [139; 152) '|v| 1u128 + v': |u128| -> u128\n     [140; 141) 'v': u128\n     [143; 148) '1u128': u128\n     [143; 152) '1u128 + v': u128"}, {"sha": "34e623931eaf820a207bc960cd83ab2c107bc1cf", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/619a8185a607b216c64b58d230c3949ccef98a37/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/619a8185a607b216c64b58d230c3949ccef98a37/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=619a8185a607b216c64b58d230c3949ccef98a37", "patch": "@@ -571,6 +571,10 @@ pub(crate) fn struct_datum_query(\n                 type_alias.krate(db) != Some(krate),\n             )\n         }\n+        TypeCtor::Closure { def, .. } => {\n+            let upstream = def.krate(db) != Some(krate);\n+            (1, vec![], upstream)\n+        }\n     };\n     let flags = chalk_rust_ir::StructFlags {\n         upstream,"}]}