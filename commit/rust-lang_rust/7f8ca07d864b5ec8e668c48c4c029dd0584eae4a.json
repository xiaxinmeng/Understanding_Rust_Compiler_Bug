{"sha": "7f8ca07d864b5ec8e668c48c4c029dd0584eae4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmOGNhMDdkODY0YjVlYzhlNjY4YzQ4YzRjMDI5ZGQwNTg0ZWFlNGE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-08T21:06:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-08T21:06:42Z"}, "message": "G: extern crate", "tree": {"sha": "ddf968cb2da4e95bb8cb247a261a1baa87664718", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddf968cb2da4e95bb8cb247a261a1baa87664718"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f8ca07d864b5ec8e668c48c4c029dd0584eae4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f8ca07d864b5ec8e668c48c4c029dd0584eae4a", "html_url": "https://github.com/rust-lang/rust/commit/7f8ca07d864b5ec8e668c48c4c029dd0584eae4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f8ca07d864b5ec8e668c48c4c029dd0584eae4a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cf2d6afee52fe248c8a032346c5bdb6dc7cd928", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cf2d6afee52fe248c8a032346c5bdb6dc7cd928", "html_url": "https://github.com/rust-lang/rust/commit/0cf2d6afee52fe248c8a032346c5bdb6dc7cd928"}], "stats": {"total": 184, "additions": 122, "deletions": 62}, "files": [{"sha": "c475826e4c827a98116be6aa55ffae43b7a7fc8c", "filename": "grammar.ron", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f8ca07d864b5ec8e668c48c4c029dd0584eae4a/grammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/7f8ca07d864b5ec8e668c48c4c029dd0584eae4a/grammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/grammar.ron?ref=7f8ca07d864b5ec8e668c48c4c029dd0584eae4a", "patch": "@@ -8,6 +8,9 @@ Grammar(\n         \"impl\",\n         \"true\",\n         \"false\",\n+        \"as\",\n+        \"extern\",\n+        \"crate\",\n     ],\n     tokens: [\n         \"ERROR\",\n@@ -67,8 +70,10 @@ Grammar(\n         \"STRUCT_ITEM\",\n         \"STRUCT_FIELD\",\n         \"FN_ITEM\",\n+        \"EXTERN_CRATE_ITEM\",\n         \"ATTR\",\n         \"META_ITEM\",\n         \"LITERAL\",\n+        \"ALIAS\",\n     ]\n )\n\\ No newline at end of file"}, {"sha": "9b174679c4122086c7da852fc425c739d5f01a68", "filename": "src/parser/event_parser/grammar/items.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f8ca07d864b5ec8e668c48c4c029dd0584eae4a/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8ca07d864b5ec8e668c48c4c029dd0584eae4a/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems.rs?ref=7f8ca07d864b5ec8e668c48c4c029dd0584eae4a", "patch": "@@ -11,7 +11,7 @@ pub(super) fn mod_items(p: &mut Parser) {\n \n fn item_first(p: &Parser) -> bool {\n     match p.current() {\n-        STRUCT_KW | FN_KW => true,\n+        STRUCT_KW | FN_KW | EXTERN_KW => true,\n         _ => false,\n     }\n }\n@@ -41,7 +41,8 @@ fn item(p: &mut Parser) -> bool {\n     // || node_if(p, FN_KW, FN_ITEM, fn_item)\n     // || node_if(p, MOD_KW, MOD_ITEM, mod_item)\n     // || node_if(p, TYPE_KW, TYPE_ITEM, type_item)\n-    node_if(p, STRUCT_KW, STRUCT_ITEM, struct_item)\n+    node_if(p, [EXTERN_KW, CRATE_KW], EXTERN_CRATE_ITEM, extern_crate_item)\n+        || node_if(p, STRUCT_KW, STRUCT_ITEM, struct_item)\n         || node_if(p, FN_KW, FN_ITEM, fn_item)\n }\n \n@@ -50,6 +51,10 @@ fn struct_item(p: &mut Parser) {\n         && p.curly_block(|p| comma_list(p, EOF, struct_field));\n }\n \n+fn extern_crate_item(p: &mut Parser) {\n+    p.expect(IDENT) && alias(p) && p.expect(SEMI);\n+}\n+\n fn struct_field(p: &mut Parser) -> bool {\n     node_if(p, IDENT, STRUCT_FIELD, |p| {\n         p.expect(COLON) && p.expect(IDENT);"}, {"sha": "dd1270eae8f2dfd8420274b536ef765619a55fd2", "filename": "src/parser/event_parser/grammar/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7f8ca07d864b5ec8e668c48c4c029dd0584eae4a/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8ca07d864b5ec8e668c48c4c029dd0584eae4a/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs?ref=7f8ca07d864b5ec8e668c48c4c029dd0584eae4a", "patch": "@@ -18,6 +18,13 @@ pub(crate) fn file(p: &mut Parser) {\n fn visibility(_: &mut Parser) {\n }\n \n+fn alias(p: &mut Parser) -> bool {\n+    node_if(p, AS_KW, ALIAS, |p| {\n+        p.expect(IDENT);\n+    });\n+    true //FIXME: return false if three are errors\n+}\n+\n fn node_if<F: FnOnce(&mut Parser), L: Lookahead>(\n     p: &mut Parser,\n     first: L,"}, {"sha": "6db82051eacb03cba1f6b2503902fe1d38814841", "filename": "src/syntax_kinds.rs", "status": "modified", "additions": 72, "deletions": 59, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/7f8ca07d864b5ec8e668c48c4c029dd0584eae4a/src%2Fsyntax_kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8ca07d864b5ec8e668c48c4c029dd0584eae4a/src%2Fsyntax_kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds.rs?ref=7f8ca07d864b5ec8e668c48c4c029dd0584eae4a", "patch": "@@ -9,66 +9,71 @@ pub const TRAIT_KW: SyntaxKind = SyntaxKind(4);\n pub const IMPL_KW: SyntaxKind = SyntaxKind(5);\n pub const TRUE_KW: SyntaxKind = SyntaxKind(6);\n pub const FALSE_KW: SyntaxKind = SyntaxKind(7);\n-pub const ERROR: SyntaxKind = SyntaxKind(8);\n-pub const IDENT: SyntaxKind = SyntaxKind(9);\n-pub const UNDERSCORE: SyntaxKind = SyntaxKind(10);\n-pub const WHITESPACE: SyntaxKind = SyntaxKind(11);\n-pub const INT_NUMBER: SyntaxKind = SyntaxKind(12);\n-pub const FLOAT_NUMBER: SyntaxKind = SyntaxKind(13);\n-pub const SEMI: SyntaxKind = SyntaxKind(14);\n-pub const COMMA: SyntaxKind = SyntaxKind(15);\n-pub const DOT: SyntaxKind = SyntaxKind(16);\n-pub const DOTDOT: SyntaxKind = SyntaxKind(17);\n-pub const DOTDOTDOT: SyntaxKind = SyntaxKind(18);\n-pub const DOTDOTEQ: SyntaxKind = SyntaxKind(19);\n-pub const L_PAREN: SyntaxKind = SyntaxKind(20);\n-pub const R_PAREN: SyntaxKind = SyntaxKind(21);\n-pub const L_CURLY: SyntaxKind = SyntaxKind(22);\n-pub const R_CURLY: SyntaxKind = SyntaxKind(23);\n-pub const L_BRACK: SyntaxKind = SyntaxKind(24);\n-pub const R_BRACK: SyntaxKind = SyntaxKind(25);\n-pub const L_ANGLE: SyntaxKind = SyntaxKind(26);\n-pub const R_ANGLE: SyntaxKind = SyntaxKind(27);\n-pub const AT: SyntaxKind = SyntaxKind(28);\n-pub const POUND: SyntaxKind = SyntaxKind(29);\n-pub const TILDE: SyntaxKind = SyntaxKind(30);\n-pub const QUESTION: SyntaxKind = SyntaxKind(31);\n-pub const COLON: SyntaxKind = SyntaxKind(32);\n-pub const COLONCOLON: SyntaxKind = SyntaxKind(33);\n-pub const DOLLAR: SyntaxKind = SyntaxKind(34);\n-pub const EQ: SyntaxKind = SyntaxKind(35);\n-pub const EQEQ: SyntaxKind = SyntaxKind(36);\n-pub const FAT_ARROW: SyntaxKind = SyntaxKind(37);\n-pub const NEQ: SyntaxKind = SyntaxKind(38);\n-pub const EXCL: SyntaxKind = SyntaxKind(39);\n-pub const LIFETIME: SyntaxKind = SyntaxKind(40);\n-pub const CHAR: SyntaxKind = SyntaxKind(41);\n-pub const BYTE: SyntaxKind = SyntaxKind(42);\n-pub const STRING: SyntaxKind = SyntaxKind(43);\n-pub const RAW_STRING: SyntaxKind = SyntaxKind(44);\n-pub const BYTE_STRING: SyntaxKind = SyntaxKind(45);\n-pub const RAW_BYTE_STRING: SyntaxKind = SyntaxKind(46);\n-pub const PLUS: SyntaxKind = SyntaxKind(47);\n-pub const MINUS: SyntaxKind = SyntaxKind(48);\n-pub const STAR: SyntaxKind = SyntaxKind(49);\n-pub const SLASH: SyntaxKind = SyntaxKind(50);\n-pub const CARET: SyntaxKind = SyntaxKind(51);\n-pub const PERCENT: SyntaxKind = SyntaxKind(52);\n-pub const AMPERSAND: SyntaxKind = SyntaxKind(53);\n-pub const PIPE: SyntaxKind = SyntaxKind(54);\n-pub const THIN_ARROW: SyntaxKind = SyntaxKind(55);\n-pub const COMMENT: SyntaxKind = SyntaxKind(56);\n-pub const DOC_COMMENT: SyntaxKind = SyntaxKind(57);\n-pub const SHEBANG: SyntaxKind = SyntaxKind(58);\n-pub const FILE: SyntaxKind = SyntaxKind(59);\n-pub const STRUCT_ITEM: SyntaxKind = SyntaxKind(60);\n-pub const STRUCT_FIELD: SyntaxKind = SyntaxKind(61);\n-pub const FN_ITEM: SyntaxKind = SyntaxKind(62);\n-pub const ATTR: SyntaxKind = SyntaxKind(63);\n-pub const META_ITEM: SyntaxKind = SyntaxKind(64);\n-pub const LITERAL: SyntaxKind = SyntaxKind(65);\n+pub const AS_KW: SyntaxKind = SyntaxKind(8);\n+pub const EXTERN_KW: SyntaxKind = SyntaxKind(9);\n+pub const CRATE_KW: SyntaxKind = SyntaxKind(10);\n+pub const ERROR: SyntaxKind = SyntaxKind(11);\n+pub const IDENT: SyntaxKind = SyntaxKind(12);\n+pub const UNDERSCORE: SyntaxKind = SyntaxKind(13);\n+pub const WHITESPACE: SyntaxKind = SyntaxKind(14);\n+pub const INT_NUMBER: SyntaxKind = SyntaxKind(15);\n+pub const FLOAT_NUMBER: SyntaxKind = SyntaxKind(16);\n+pub const SEMI: SyntaxKind = SyntaxKind(17);\n+pub const COMMA: SyntaxKind = SyntaxKind(18);\n+pub const DOT: SyntaxKind = SyntaxKind(19);\n+pub const DOTDOT: SyntaxKind = SyntaxKind(20);\n+pub const DOTDOTDOT: SyntaxKind = SyntaxKind(21);\n+pub const DOTDOTEQ: SyntaxKind = SyntaxKind(22);\n+pub const L_PAREN: SyntaxKind = SyntaxKind(23);\n+pub const R_PAREN: SyntaxKind = SyntaxKind(24);\n+pub const L_CURLY: SyntaxKind = SyntaxKind(25);\n+pub const R_CURLY: SyntaxKind = SyntaxKind(26);\n+pub const L_BRACK: SyntaxKind = SyntaxKind(27);\n+pub const R_BRACK: SyntaxKind = SyntaxKind(28);\n+pub const L_ANGLE: SyntaxKind = SyntaxKind(29);\n+pub const R_ANGLE: SyntaxKind = SyntaxKind(30);\n+pub const AT: SyntaxKind = SyntaxKind(31);\n+pub const POUND: SyntaxKind = SyntaxKind(32);\n+pub const TILDE: SyntaxKind = SyntaxKind(33);\n+pub const QUESTION: SyntaxKind = SyntaxKind(34);\n+pub const COLON: SyntaxKind = SyntaxKind(35);\n+pub const COLONCOLON: SyntaxKind = SyntaxKind(36);\n+pub const DOLLAR: SyntaxKind = SyntaxKind(37);\n+pub const EQ: SyntaxKind = SyntaxKind(38);\n+pub const EQEQ: SyntaxKind = SyntaxKind(39);\n+pub const FAT_ARROW: SyntaxKind = SyntaxKind(40);\n+pub const NEQ: SyntaxKind = SyntaxKind(41);\n+pub const EXCL: SyntaxKind = SyntaxKind(42);\n+pub const LIFETIME: SyntaxKind = SyntaxKind(43);\n+pub const CHAR: SyntaxKind = SyntaxKind(44);\n+pub const BYTE: SyntaxKind = SyntaxKind(45);\n+pub const STRING: SyntaxKind = SyntaxKind(46);\n+pub const RAW_STRING: SyntaxKind = SyntaxKind(47);\n+pub const BYTE_STRING: SyntaxKind = SyntaxKind(48);\n+pub const RAW_BYTE_STRING: SyntaxKind = SyntaxKind(49);\n+pub const PLUS: SyntaxKind = SyntaxKind(50);\n+pub const MINUS: SyntaxKind = SyntaxKind(51);\n+pub const STAR: SyntaxKind = SyntaxKind(52);\n+pub const SLASH: SyntaxKind = SyntaxKind(53);\n+pub const CARET: SyntaxKind = SyntaxKind(54);\n+pub const PERCENT: SyntaxKind = SyntaxKind(55);\n+pub const AMPERSAND: SyntaxKind = SyntaxKind(56);\n+pub const PIPE: SyntaxKind = SyntaxKind(57);\n+pub const THIN_ARROW: SyntaxKind = SyntaxKind(58);\n+pub const COMMENT: SyntaxKind = SyntaxKind(59);\n+pub const DOC_COMMENT: SyntaxKind = SyntaxKind(60);\n+pub const SHEBANG: SyntaxKind = SyntaxKind(61);\n+pub const FILE: SyntaxKind = SyntaxKind(62);\n+pub const STRUCT_ITEM: SyntaxKind = SyntaxKind(63);\n+pub const STRUCT_FIELD: SyntaxKind = SyntaxKind(64);\n+pub const FN_ITEM: SyntaxKind = SyntaxKind(65);\n+pub const EXTERN_CRATE_ITEM: SyntaxKind = SyntaxKind(66);\n+pub const ATTR: SyntaxKind = SyntaxKind(67);\n+pub const META_ITEM: SyntaxKind = SyntaxKind(68);\n+pub const LITERAL: SyntaxKind = SyntaxKind(69);\n+pub const ALIAS: SyntaxKind = SyntaxKind(70);\n \n-static INFOS: [SyntaxInfo; 66] = [\n+static INFOS: [SyntaxInfo; 71] = [\n     SyntaxInfo { name: \"USE_KW\" },\n     SyntaxInfo { name: \"FN_KW\" },\n     SyntaxInfo { name: \"STRUCT_KW\" },\n@@ -77,6 +82,9 @@ static INFOS: [SyntaxInfo; 66] = [\n     SyntaxInfo { name: \"IMPL_KW\" },\n     SyntaxInfo { name: \"TRUE_KW\" },\n     SyntaxInfo { name: \"FALSE_KW\" },\n+    SyntaxInfo { name: \"AS_KW\" },\n+    SyntaxInfo { name: \"EXTERN_KW\" },\n+    SyntaxInfo { name: \"CRATE_KW\" },\n     SyntaxInfo { name: \"ERROR\" },\n     SyntaxInfo { name: \"IDENT\" },\n     SyntaxInfo { name: \"UNDERSCORE\" },\n@@ -132,9 +140,11 @@ static INFOS: [SyntaxInfo; 66] = [\n     SyntaxInfo { name: \"STRUCT_ITEM\" },\n     SyntaxInfo { name: \"STRUCT_FIELD\" },\n     SyntaxInfo { name: \"FN_ITEM\" },\n+    SyntaxInfo { name: \"EXTERN_CRATE_ITEM\" },\n     SyntaxInfo { name: \"ATTR\" },\n     SyntaxInfo { name: \"META_ITEM\" },\n     SyntaxInfo { name: \"LITERAL\" },\n+    SyntaxInfo { name: \"ALIAS\" },\n ];\n \n pub(crate) fn syntax_info(kind: SyntaxKind) -> &'static SyntaxInfo {\n@@ -151,6 +161,9 @@ pub(crate) fn ident_to_keyword(ident: &str) -> Option<SyntaxKind> {\n        \"impl\" => Some(IMPL_KW),\n        \"true\" => Some(TRUE_KW),\n        \"false\" => Some(FALSE_KW),\n+       \"as\" => Some(AS_KW),\n+       \"extern\" => Some(EXTERN_KW),\n+       \"crate\" => Some(CRATE_KW),\n        _ => None,\n    }\n }"}, {"sha": "4adb1587e40d271e185700b6b483e863f7c78b8f", "filename": "tests/data/lexer/0011_keywords.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f8ca07d864b5ec8e668c48c4c029dd0584eae4a/tests%2Fdata%2Flexer%2F0011_keywords.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8ca07d864b5ec8e668c48c4c029dd0584eae4a/tests%2Fdata%2Flexer%2F0011_keywords.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0011_keywords.rs?ref=7f8ca07d864b5ec8e668c48c4c029dd0584eae4a", "patch": "@@ -1 +1 @@\n-fn use struct trait enum impl true false\n+fn use struct trait enum impl true false as extern crate"}, {"sha": "bf8ceffd49005a217a55ec2c24c33c0cfaa10488", "filename": "tests/data/lexer/0011_keywords.txt", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f8ca07d864b5ec8e668c48c4c029dd0584eae4a/tests%2Fdata%2Flexer%2F0011_keywords.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7f8ca07d864b5ec8e668c48c4c029dd0584eae4a/tests%2Fdata%2Flexer%2F0011_keywords.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0011_keywords.txt?ref=7f8ca07d864b5ec8e668c48c4c029dd0584eae4a", "patch": "@@ -13,4 +13,10 @@ WHITESPACE 1 \" \"\n TRUE_KW 4 \"true\"\n WHITESPACE 1 \" \"\n FALSE_KW 5 \"false\"\n+WHITESPACE 1 \" \"\n+AS_KW 2 \"as\"\n+WHITESPACE 1 \" \"\n+EXTERN_KW 6 \"extern\"\n+WHITESPACE 1 \" \"\n+CRATE_KW 5 \"crate\"\n WHITESPACE 1 \"\\n\""}, {"sha": "3ce33667659030b3b61d5d0077b0ab73ce1bd3fb", "filename": "tests/data/parser/ok/0007_extern_crate.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f8ca07d864b5ec8e668c48c4c029dd0584eae4a/tests%2Fdata%2Fparser%2Fok%2F0007_extern_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8ca07d864b5ec8e668c48c4c029dd0584eae4a/tests%2Fdata%2Fparser%2Fok%2F0007_extern_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0007_extern_crate.rs?ref=7f8ca07d864b5ec8e668c48c4c029dd0584eae4a", "patch": "@@ -0,0 +1,2 @@\n+extern crate foo;\n+extern crate foo as bar;"}, {"sha": "902c80f7dbcff7f9aa84dcbd07e14ad4b243480b", "filename": "tests/data/parser/ok/0007_extern_crate.txt", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7f8ca07d864b5ec8e668c48c4c029dd0584eae4a/tests%2Fdata%2Fparser%2Fok%2F0007_extern_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7f8ca07d864b5ec8e668c48c4c029dd0584eae4a/tests%2Fdata%2Fparser%2Fok%2F0007_extern_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Fok%2F0007_extern_crate.txt?ref=7f8ca07d864b5ec8e668c48c4c029dd0584eae4a", "patch": "@@ -0,0 +1,22 @@\n+FILE@[0; 43)\n+  EXTERN_CRATE_ITEM@[0; 18)\n+    EXTERN_KW@[0; 6)\n+    WHITESPACE@[6; 7)\n+    CRATE_KW@[7; 12)\n+    WHITESPACE@[12; 13)\n+    IDENT@[13; 16)\n+    SEMI@[16; 17)\n+    WHITESPACE@[17; 18)\n+  EXTERN_CRATE_ITEM@[18; 43)\n+    EXTERN_KW@[18; 24)\n+    WHITESPACE@[24; 25)\n+    CRATE_KW@[25; 30)\n+    WHITESPACE@[30; 31)\n+    IDENT@[31; 34)\n+    ALIAS@[34; 41)\n+      WHITESPACE@[34; 35)\n+      AS_KW@[35; 37)\n+      WHITESPACE@[37; 38)\n+      IDENT@[38; 41)\n+    SEMI@[41; 42)\n+    WHITESPACE@[42; 43)"}]}