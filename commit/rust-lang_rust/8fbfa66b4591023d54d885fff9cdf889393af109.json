{"sha": "8fbfa66b4591023d54d885fff9cdf889393af109", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmYmZhNjZiNDU5MTAyM2Q1NGQ4ODVmZmY5Y2RmODg5MzkzYWYxMDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-09T21:56:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-09T21:56:13Z"}, "message": "auto merge of #19563 : alexcrichton/rust/issue-19501, r=pnkfelix\n\nOne of the causes of #19501 was that the metadata on OSX was getting corrupted.\r\nFor any one particular invocation of the compiler the metadata file inside of an\r\nrlib archive would have extra bytes appended to the end of it. These extra bytes\r\nend up confusing rbml and have it run off the end of the array (resulting in the\r\nout of bounds detected).\r\n\r\nThis commit prepends the length of metadata to the start of the metadata to\r\nensure that we always slice the precise amount that we want, and it also\r\nun-ignores the test from #19502.\r\n\r\nCloses #19501", "tree": {"sha": "e83c1ade6b92a43ae1f3e3f16087893a61988f43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e83c1ade6b92a43ae1f3e3f16087893a61988f43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fbfa66b4591023d54d885fff9cdf889393af109", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fbfa66b4591023d54d885fff9cdf889393af109", "html_url": "https://github.com/rust-lang/rust/commit/8fbfa66b4591023d54d885fff9cdf889393af109", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fbfa66b4591023d54d885fff9cdf889393af109/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b25e100173effba685d076cee16f8af150078617", "url": "https://api.github.com/repos/rust-lang/rust/commits/b25e100173effba685d076cee16f8af150078617", "html_url": "https://github.com/rust-lang/rust/commit/b25e100173effba685d076cee16f8af150078617"}, {"sha": "daafff508c24a721fa38112563de518af63539e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/daafff508c24a721fa38112563de518af63539e7", "html_url": "https://github.com/rust-lang/rust/commit/daafff508c24a721fa38112563de518af63539e7"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "bb1c75b075c2b2f3ce2e24d74cab849ec00b36ad", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8fbfa66b4591023d54d885fff9cdf889393af109/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fbfa66b4591023d54d885fff9cdf889393af109/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=8fbfa66b4591023d54d885fff9cdf889393af109", "patch": "@@ -231,9 +231,18 @@ impl crate_metadata {\n \n impl MetadataBlob {\n     pub fn as_slice<'a>(&'a self) -> &'a [u8] {\n-        match *self {\n+        let slice = match *self {\n             MetadataVec(ref vec) => vec.as_slice(),\n             MetadataArchive(ref ar) => ar.as_slice(),\n+        };\n+        if slice.len() < 4 {\n+            &[]\n+        } else {\n+            let len = ((slice[0] as u32) << 24) |\n+                      ((slice[1] as u32) << 16) |\n+                      ((slice[2] as u32) << 8) |\n+                      ((slice[3] as u32) << 0);\n+            slice.slice(4, len as uint + 4)\n         }\n     }\n }"}, {"sha": "a3f56f7f655f5ee31d787254bc5916ab617c95a5", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8fbfa66b4591023d54d885fff9cdf889393af109/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fbfa66b4591023d54d885fff9cdf889393af109/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=8fbfa66b4591023d54d885fff9cdf889393af109", "patch": "@@ -1979,7 +1979,32 @@ pub const metadata_encoding_version : &'static [u8] = &[b'r', b'u', b's', b't',\n pub fn encode_metadata(parms: EncodeParams, krate: &ast::Crate) -> Vec<u8> {\n     let mut wr = SeekableMemWriter::new();\n     encode_metadata_inner(&mut wr, parms, krate);\n-    wr.unwrap().into_iter().collect()\n+    let mut v = wr.unwrap();\n+\n+    // And here we run into yet another obscure archive bug: in which metadata\n+    // loaded from archives may have trailing garbage bytes. Awhile back one of\n+    // our tests was failing sporadially on the OSX 64-bit builders (both nopt\n+    // and opt) by having rbml generate an out-of-bounds panic when looking at\n+    // metadata.\n+    //\n+    // Upon investigation it turned out that the metadata file inside of an rlib\n+    // (and ar archive) was being corrupted. Some compilations would generate a\n+    // metadata file which would end in a few extra bytes, while other\n+    // compilations would not have these extra bytes appended to the end. These\n+    // extra bytes were interpreted by rbml as an extra tag, so they ended up\n+    // being interpreted causing the out-of-bounds.\n+    //\n+    // The root cause of why these extra bytes were appearing was never\n+    // discovered, and in the meantime the solution we're employing is to insert\n+    // the length of the metadata to the start of the metadata. Later on this\n+    // will allow us to slice the metadata to the precise length that we just\n+    // generated regardless of trailing bytes that end up in it.\n+    let len = v.len() as u32;\n+    v.insert(0, (len >>  0) as u8);\n+    v.insert(0, (len >>  8) as u8);\n+    v.insert(0, (len >> 16) as u8);\n+    v.insert(0, (len >> 24) as u8);\n+    return v;\n }\n \n fn encode_metadata_inner(wr: &mut SeekableMemWriter,"}, {"sha": "cd79a95dace7afcef69ac94f66e180f2218617d6", "filename": "src/test/run-pass-fulldeps/issue-13560.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8fbfa66b4591023d54d885fff9cdf889393af109/src%2Ftest%2Frun-pass-fulldeps%2Fissue-13560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fbfa66b4591023d54d885fff9cdf889393af109/src%2Ftest%2Frun-pass-fulldeps%2Fissue-13560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-13560.rs?ref=8fbfa66b4591023d54d885fff9cdf889393af109", "patch": "@@ -11,7 +11,6 @@\n // aux-build:issue-13560-1.rs\n // aux-build:issue-13560-2.rs\n // aux-build:issue-13560-3.rs\n-// ignore-pretty FIXME #19501\n // ignore-stage1\n \n // Regression test for issue #13560, the test itself is all in the dependent"}]}