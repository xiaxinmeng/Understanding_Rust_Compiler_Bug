{"sha": "d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZTlkYjBkY2YwZmM1Y2Q2NTg1YTg2MTQ1YmZlZDVlYTNjNTUwMzE=", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-09-16T20:05:14Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-09-16T22:06:31Z"}, "message": "feat(rustc_parse): recover from pre-RFC-2000 const generics syntax\n\nFixes #89013", "tree": {"sha": "dd1f386eb00616ab149eaded516addf2065d8cc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd1f386eb00616ab149eaded516addf2065d8cc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031", "html_url": "https://github.com/rust-lang/rust/commit/d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b5ddf36fdc784106b3a064d93dd054c32b1f10f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b5ddf36fdc784106b3a064d93dd054c32b1f10f", "html_url": "https://github.com/rust-lang/rust/commit/2b5ddf36fdc784106b3a064d93dd054c32b1f10f"}], "stats": {"total": 198, "additions": 197, "deletions": 1}, "files": [{"sha": "4e4130dfc23069f9c2c286d1c41be42332767bf0", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031", "patch": "@@ -495,11 +495,16 @@ impl<'a> Parser<'a> {\n             None => {\n                 let after_eq = eq.shrink_to_hi();\n                 let before_next = self.token.span.shrink_to_lo();\n+                let the_type_placeholder = if matches!(self.token.kind, token::Comma | token::Gt) {\n+                    \" TheType\"\n+                } else {\n+                    \" TheType \"\n+                };\n                 self.struct_span_err(after_eq.to(before_next), \"missing type to the right of `=`\")\n                     .span_suggestion(\n                         self.sess.source_map().next_point(eq).to(before_next),\n                         \"to constrain the associated type, add a type after `=`\",\n-                        \" TheType\".to_string(),\n+                        the_type_placeholder.to_string(),\n                         Applicability::HasPlaceholders,\n                     )\n                     .span_suggestion(\n@@ -572,6 +577,19 @@ impl<'a> Parser<'a> {\n                     return self.recover_const_arg(start, err).map(Some);\n                 }\n             }\n+        } else if self.eat_keyword_noexpect(kw::Const) {\n+            // Detect and recover from the old, pre-RFC2000 syntax for const generics.\n+            let mut err = self.struct_span_err(\n+                start,\n+                \"expected lifetime, type, or constant, found keyword `const`\",\n+            );\n+            if self.check_const_arg() {\n+                err.emit();\n+                GenericArg::Const(self.parse_const_arg()?)\n+            } else {\n+                let after_kw_const = self.token.span;\n+                return self.recover_const_arg(after_kw_const, err).map(Some);\n+            }\n         } else {\n             return Ok(None);\n         };"}, {"sha": "99d8e9dea910d2976c2b3707974b9ad5ec72fc50", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-no-assoc.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-assoc.rs?ref=d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031", "patch": "@@ -0,0 +1,16 @@\n+trait Foo<const N: usize> {\n+    fn do_x(&self) -> [u8; N];\n+}\n+\n+struct Bar;\n+\n+const T: usize = 42;\n+\n+impl Foo<const 3> for Bar {\n+//~^ERROR expected lifetime, type, or constant, found keyword `const`\n+    fn do_x(&self) -> [u8; 3] {\n+        [0u8; 3]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "533d381fa3136952ee7e2c3cbb0013d439ef88fe", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-no-assoc.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-assoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-assoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-assoc.stderr?ref=d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031", "patch": "@@ -0,0 +1,8 @@\n+error: expected lifetime, type, or constant, found keyword `const`\n+  --> $DIR/issue-89013-no-assoc.rs:9:10\n+   |\n+LL | impl Foo<const 3> for Bar {\n+   |          ^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "b73b3e2910453059b5aa327c0b84b943b85a59b2", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-no-kw.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.rs?ref=d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031", "patch": "@@ -0,0 +1,18 @@\n+trait Foo<const N: usize> {\n+    fn do_x(&self) -> [u8; N];\n+}\n+\n+struct Bar;\n+\n+const T: usize = 42;\n+\n+impl Foo<N = 3> for Bar {\n+//~^ERROR cannot constrain an associated constant to a value\n+//~^^ERROR this trait takes 1 generic argument but 0 generic arguments\n+//~^^^ERROR associated type bindings are not allowed here\n+    fn do_x(&self) -> [u8; 3] {\n+        [0u8; 3]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "76828155576711ffddc7547787580d142ab88ba4", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-no-kw.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr?ref=d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031", "patch": "@@ -0,0 +1,35 @@\n+error: cannot constrain an associated constant to a value\n+  --> $DIR/issue-89013-no-kw.rs:9:10\n+   |\n+LL | impl Foo<N = 3> for Bar {\n+   |          -^^^-\n+   |          |   |\n+   |          |   ...cannot be constrained to this value\n+   |          this associated constant...\n+\n+error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n+  --> $DIR/issue-89013-no-kw.rs:9:6\n+   |\n+LL | impl Foo<N = 3> for Bar {\n+   |      ^^^ expected 1 generic argument\n+   |\n+note: trait defined here, with 1 generic parameter: `N`\n+  --> $DIR/issue-89013-no-kw.rs:1:7\n+   |\n+LL | trait Foo<const N: usize> {\n+   |       ^^^       -\n+help: add missing generic argument\n+   |\n+LL | impl Foo<N, N = 3> for Bar {\n+   |          ++\n+\n+error[E0229]: associated type bindings are not allowed here\n+  --> $DIR/issue-89013-no-kw.rs:9:10\n+   |\n+LL | impl Foo<N = 3> for Bar {\n+   |          ^^^^^ associated type not allowed here\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0107, E0229.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "c34936d197620b8aab70539770f9d21db79848bb", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-type.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-type.rs?ref=d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031", "patch": "@@ -0,0 +1,17 @@\n+trait Foo<const N: usize> {\n+    fn do_x(&self) -> [u8; N];\n+}\n+\n+struct Bar;\n+\n+const T: usize = 42;\n+\n+impl Foo<N = type 3> for Bar {\n+//~^ERROR missing type to the right of `=`\n+//~^^ERROR found keyword `type`\n+    fn do_x(&self) -> [u8; 3] {\n+        [0u8; 3]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "0f33f4b0df60c4cd27fe97e489570534ecf21271", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-type.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-type.stderr?ref=d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031", "patch": "@@ -0,0 +1,24 @@\n+error: missing type to the right of `=`\n+  --> $DIR/issue-89013-type.rs:9:13\n+   |\n+LL | impl Foo<N = type 3> for Bar {\n+   |             ^\n+   |\n+help: to constrain the associated type, add a type after `=`\n+   |\n+LL | impl Foo<N = TheType type 3> for Bar {\n+   |              +++++++\n+help: remove the `=` if `N` is a type\n+   |\n+LL - impl Foo<N = type 3> for Bar {\n+LL + impl Foo<N type 3> for Bar {\n+   | \n+\n+error: expected one of `,`, `>`, a const expression, lifetime, or type, found keyword `type`\n+  --> $DIR/issue-89013-type.rs:9:14\n+   |\n+LL | impl Foo<N = type 3> for Bar {\n+   |              ^^^^ expected one of `,`, `>`, a const expression, lifetime, or type\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d5ded44188a02c960242a5bd53b1ab5731af50a9", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.rs?ref=d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031", "patch": "@@ -0,0 +1,19 @@\n+trait Foo<const N: usize> {\n+    fn do_x(&self) -> [u8; N];\n+}\n+\n+struct Bar;\n+\n+const T: usize = 42;\n+\n+impl Foo<N = const 3> for Bar {\n+//~^ERROR expected lifetime, type, or constant, found keyword `const`\n+//~^^ERROR cannot constrain an associated constant to a value\n+//~^^^ERROR this trait takes 1 generic argument but 0 generic arguments\n+//~^^^^ERROR associated type bindings are not allowed here\n+    fn do_x(&self) -> [u8; 3] {\n+        [0u8; 3]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "3df459ce16285000d04123ab57cf06a895163dda", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr?ref=d8e9db0dcf0fc5cd6585a86145bfed5ea3c55031", "patch": "@@ -0,0 +1,41 @@\n+error: expected lifetime, type, or constant, found keyword `const`\n+  --> $DIR/issue-89013.rs:9:14\n+   |\n+LL | impl Foo<N = const 3> for Bar {\n+   |              ^^^^^\n+\n+error: cannot constrain an associated constant to a value\n+  --> $DIR/issue-89013.rs:9:10\n+   |\n+LL | impl Foo<N = const 3> for Bar {\n+   |          -^^^^^^^^^-\n+   |          |         |\n+   |          |         ...cannot be constrained to this value\n+   |          this associated constant...\n+\n+error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n+  --> $DIR/issue-89013.rs:9:6\n+   |\n+LL | impl Foo<N = const 3> for Bar {\n+   |      ^^^ expected 1 generic argument\n+   |\n+note: trait defined here, with 1 generic parameter: `N`\n+  --> $DIR/issue-89013.rs:1:7\n+   |\n+LL | trait Foo<const N: usize> {\n+   |       ^^^       -\n+help: add missing generic argument\n+   |\n+LL | impl Foo<N, N = const 3> for Bar {\n+   |          ++\n+\n+error[E0229]: associated type bindings are not allowed here\n+  --> $DIR/issue-89013.rs:9:10\n+   |\n+LL | impl Foo<N = const 3> for Bar {\n+   |          ^^^^^^^^^^^ associated type not allowed here\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0107, E0229.\n+For more information about an error, try `rustc --explain E0107`."}]}