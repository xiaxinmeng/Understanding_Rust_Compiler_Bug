{"sha": "e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "node_id": "C_kwDOAAsO6NoAKGU5NDgyN2U1YjA5YjViMDk4ZWExMGQwYzU3YTg0ODkyZmM3M2I1YTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-18T13:35:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-18T13:35:43Z"}, "message": "Auto merge of #103188 - JohnTitor:rollup-pwilam1, r=JohnTitor\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #103023 (Adding `fuchsia-ignore` and `needs-unwind` to compiler test cases)\n - #103142 (Make diagnostic for unsatisfied `Termination` bounds more precise)\n - #103154 (Fix typo in `ReverseSearcher` docs)\n - #103159 (Remove the redundant `Some(try_opt!(..))` in `checked_pow`)\n - #103163 (Remove all uses of array_assume_init)\n - #103168 (Stabilize asm_sym)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "1b68930008142c76d8d72208ab23fd192ba04884", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b68930008142c76d8d72208ab23fd192ba04884"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "html_url": "https://github.com/rust-lang/rust/commit/e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21b246587c2687935bd6004ffa5dcc4f4dd6600d", "url": "https://api.github.com/repos/rust-lang/rust/commits/21b246587c2687935bd6004ffa5dcc4f4dd6600d", "html_url": "https://github.com/rust-lang/rust/commit/21b246587c2687935bd6004ffa5dcc4f4dd6600d"}, {"sha": "6e7d206a7bd2ea10c151a0916e3f325b14e91311", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e7d206a7bd2ea10c151a0916e3f325b14e91311", "html_url": "https://github.com/rust-lang/rust/commit/6e7d206a7bd2ea10c151a0916e3f325b14e91311"}], "stats": {"total": 296, "additions": 161, "deletions": 135}, "files": [{"sha": "450cdf246b1502cdc084f30bc70dd220031eea85", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -192,16 +192,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         }\n                     }\n                     InlineAsmOperand::Sym { ref sym } => {\n-                        if !self.tcx.features().asm_sym {\n-                            feature_err(\n-                                &sess.parse_sess,\n-                                sym::asm_sym,\n-                                *op_sp,\n-                                \"sym operands for inline assembly are unstable\",\n-                            )\n-                            .emit();\n-                        }\n-\n                         let static_def_id = self\n                             .resolver\n                             .get_partial_res(sym.id)"}, {"sha": "38c1eac7adf6966c9d8b6d88ce0df853ed4152b7", "filename": "compiler/rustc_codegen_gcc/tests/run/asm.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/compiler%2Frustc_codegen_gcc%2Ftests%2Frun%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/compiler%2Frustc_codegen_gcc%2Ftests%2Frun%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Ftests%2Frun%2Fasm.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -3,11 +3,12 @@\n // Run-time:\n //   status: 0\n \n-#![feature(asm_const, asm_sym)]\n+#![feature(asm_const)]\n \n use std::arch::{asm, global_asm};\n \n-global_asm!(\"\n+global_asm!(\n+    \"\n     .global add_asm\n add_asm:\n      mov rax, rdi\n@@ -132,7 +133,9 @@ fn main() {\n     assert_eq!(x, 43);\n \n     // check sym fn\n-    extern \"C\" fn foo() -> u64 { 42 }\n+    extern \"C\" fn foo() -> u64 {\n+        42\n+    }\n     let x: u64;\n     unsafe {\n         asm!(\"call {}\", sym foo, lateout(\"rax\") x);"}, {"sha": "54bf5a2c34b826575e18d9d34aa8d80306b5a3b2", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -53,6 +53,8 @@ declare_features! (\n     (accepted, abi_sysv64, \"1.24.0\", Some(36167), None),\n     /// Allows using ADX intrinsics from `core::arch::{x86, x86_64}`.\n     (accepted, adx_target_feature, \"1.61.0\", Some(44839), None),\n+    /// Allows using `sym` operands in inline assembly.\n+    (accepted, asm_sym, \"CURRENT_RUSTC_VERSION\", Some(93333), None),\n     /// Allows the definition of associated constants in `trait` or `impl` blocks.\n     (accepted, associated_consts, \"1.20.0\", Some(29646), None),\n     /// Allows using associated `type`s in `trait`s."}, {"sha": "1b8d683b13361a407b61efca99071af4748324d6", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -300,8 +300,6 @@ declare_features! (\n     (active, asm_const, \"1.58.0\", Some(93332), None),\n     /// Enables experimental inline assembly support for additional architectures.\n     (active, asm_experimental_arch, \"1.58.0\", Some(93335), None),\n-    /// Allows using `sym` operands in inline assembly.\n-    (active, asm_sym, \"1.58.0\", Some(93333), None),\n     /// Allows the `may_unwind` option in inline assembly.\n     (active, asm_unwind, \"1.58.0\", Some(93334), None),\n     /// Allows users to enforce equality of associated constants `TraitImpl<AssocConst=3>`."}, {"sha": "3fe79370c374d378929d12cabec1a847c675af86", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -451,6 +451,7 @@ symbols! {\n         call_once,\n         caller_location,\n         capture_disjoint_fields,\n+        cause,\n         cdylib,\n         ceilf32,\n         ceilf64,"}, {"sha": "5eef54c6330db122111ce99744231c0057f3c883", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -164,6 +164,10 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             flags.push((sym::from_desugaring, Some(format!(\"{:?}\", k))));\n         }\n \n+        if let ObligationCauseCode::MainFunctionType = obligation.cause.code() {\n+            flags.push((sym::cause, Some(\"MainFunctionType\".to_string())));\n+        }\n+\n         // Add all types without trimmed paths.\n         ty::print::with_no_trimmed_paths!({\n             let generics = self.tcx.generics_of(def_id);"}, {"sha": "ce36b116f139b11b5c54c462314572f0354e8660", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -125,9 +125,9 @@\n #![feature(iter_advance_by)]\n #![feature(iter_next_chunk)]\n #![feature(layout_for_ptr)]\n-#![feature(maybe_uninit_array_assume_init)]\n #![feature(maybe_uninit_slice)]\n #![feature(maybe_uninit_uninit_array)]\n+#![feature(maybe_uninit_uninit_array_transpose)]\n #![cfg_attr(test, feature(new_uninit))]\n #![feature(nonnull_slice_from_raw_parts)]\n #![feature(pattern)]"}, {"sha": "02cc7691a82db6af72b99fd9c735e17656ea048b", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -223,7 +223,7 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n \n             self.ptr = self.ptr.wrapping_byte_add(N);\n             // Safety: ditto\n-            return Ok(unsafe { MaybeUninit::array_assume_init(raw_ary) });\n+            return Ok(unsafe { raw_ary.transpose().assume_init() });\n         }\n \n         if len < N {\n@@ -241,7 +241,7 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n         return unsafe {\n             ptr::copy_nonoverlapping(self.ptr, raw_ary.as_mut_ptr() as *mut T, N);\n             self.ptr = self.ptr.add(N);\n-            Ok(MaybeUninit::array_assume_init(raw_ary))\n+            Ok(raw_ary.transpose().assume_init())\n         };\n     }\n "}, {"sha": "b91c630183d4fe707231b70e483f4b202d5dafde", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -104,8 +104,7 @@ impl<T, const N: usize> IntoIter<T, N> {\n     ///\n     /// ```\n     /// #![feature(array_into_iter_constructors)]\n-    ///\n-    /// #![feature(maybe_uninit_array_assume_init)]\n+    /// #![feature(maybe_uninit_uninit_array_transpose)]\n     /// #![feature(maybe_uninit_uninit_array)]\n     /// use std::array::IntoIter;\n     /// use std::mem::MaybeUninit;\n@@ -134,7 +133,7 @@ impl<T, const N: usize> IntoIter<T, N> {\n     ///     }\n     ///\n     ///     // SAFETY: We've initialized all N items\n-    ///     unsafe { Ok(MaybeUninit::array_assume_init(buffer)) }\n+    ///     unsafe { Ok(buffer.transpose().assume_init()) }\n     /// }\n     ///\n     /// let r: [_; 4] = next_chunk(&mut (10..16)).unwrap();"}, {"sha": "04dd821efdec0d2d8d66789323eb6181ff994571", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -912,7 +912,7 @@ where\n \n     mem::forget(guard);\n     // SAFETY: All elements of the array were populated in the loop above.\n-    let output = unsafe { MaybeUninit::array_assume_init(array) };\n+    let output = unsafe { array.transpose().assume_init() };\n     Ok(Try::from_output(output))\n }\n "}, {"sha": "81f050cb283d47bc94879ea2e77d0cf912988355", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -869,7 +869,7 @@ macro_rules! int_impl {\n             // Deal with the final bit of the exponent separately, since\n             // squaring the base afterwards is not necessary and may cause a\n             // needless overflow.\n-            Some(try_opt!(acc.checked_mul(base)))\n+            acc.checked_mul(base)\n         }\n \n         /// Saturating integer addition. Computes `self + rhs`, saturating at the numeric"}, {"sha": "f186b468e64cbac85b375f466f6b0d9943c8ac12", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -990,7 +990,7 @@ macro_rules! uint_impl {\n             // squaring the base afterwards is not necessary and may cause a\n             // needless overflow.\n \n-            Some(try_opt!(acc.checked_mul(base)))\n+            acc.checked_mul(base)\n         }\n \n         /// Saturating integer addition. Computes `self + rhs`, saturating at"}, {"sha": "ec2cb429e67bf471bf9117f73796f786136adb46", "filename": "library/core/src/str/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -267,7 +267,7 @@ pub unsafe trait Searcher<'a> {\n /// The index ranges returned by this trait are not required\n /// to exactly match those of the forward search in reverse.\n ///\n-/// For the reason why this trait is marked unsafe, see them\n+/// For the reason why this trait is marked unsafe, see the\n /// parent trait [`Searcher`].\n pub unsafe trait ReverseSearcher<'a>: Searcher<'a> {\n     /// Performs the next search step starting from the back."}, {"sha": "b1f492381b136af2d04b57c1ce558712dbc0921e", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -49,8 +49,8 @@\n #![feature(slice_from_ptr_range)]\n #![feature(split_as_slice)]\n #![feature(maybe_uninit_uninit_array)]\n-#![feature(maybe_uninit_array_assume_init)]\n #![feature(maybe_uninit_write_slice)]\n+#![feature(maybe_uninit_uninit_array_transpose)]\n #![feature(min_specialization)]\n #![feature(numfmt)]\n #![feature(step_trait)]"}, {"sha": "b0cc08a15f0a0e7a85c9cff0f903cecca8618c90", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -163,18 +163,18 @@ fn assume_init_good() {\n \n #[test]\n fn uninit_array_assume_init() {\n-    let mut array: [MaybeUninit<i16>; 5] = MaybeUninit::uninit_array();\n+    let mut array = [MaybeUninit::<i16>::uninit(); 5];\n     array[0].write(3);\n     array[1].write(1);\n     array[2].write(4);\n     array[3].write(1);\n     array[4].write(5);\n \n-    let array = unsafe { MaybeUninit::array_assume_init(array) };\n+    let array = unsafe { array.transpose().assume_init() };\n \n     assert_eq!(array, [3, 1, 4, 1, 5]);\n \n-    let [] = unsafe { MaybeUninit::<!>::array_assume_init([]) };\n+    let [] = unsafe { [MaybeUninit::<!>::uninit(); 0].transpose().assume_init() };\n }\n \n #[test]"}, {"sha": "400d25beb26f3d521387b5933e8a30ab6d1507b2", "filename": "library/std/src/process.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -2154,8 +2154,16 @@ pub fn id() -> u32 {\n #[cfg_attr(not(test), lang = \"termination\")]\n #[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]\n #[rustc_on_unimplemented(\n-    message = \"`main` has invalid return type `{Self}`\",\n-    label = \"`main` can only return types that implement `{Termination}`\"\n+    on(\n+        all(not(bootstrap), cause = \"MainFunctionType\"),\n+        message = \"`main` has invalid return type `{Self}`\",\n+        label = \"`main` can only return types that implement `{Termination}`\"\n+    ),\n+    on(\n+        bootstrap,\n+        message = \"`main` has invalid return type `{Self}`\",\n+        label = \"`main` can only return types that implement `{Termination}`\"\n+    )\n )]\n pub trait Termination {\n     /// Is called to get the representation of the value as status code."}, {"sha": "103d91caf4ccd4c4e716cd3aeaed69e8086e078a", "filename": "src/doc/unstable-book/src/language-features/asm-sym.md", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/21b246587c2687935bd6004ffa5dcc4f4dd6600d/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-sym.md", "raw_url": "https://github.com/rust-lang/rust/raw/21b246587c2687935bd6004ffa5dcc4f4dd6600d/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-sym.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-sym.md?ref=21b246587c2687935bd6004ffa5dcc4f4dd6600d", "patch": "@@ -1,13 +0,0 @@\n-# `asm_sym`\n-\n-The tracking issue for this feature is: [#93333]\n-\n-[#93333]: https://github.com/rust-lang/rust/issues/93333\n-\n-------------------------\n-\n-This feature adds a `sym <path>` operand type to `asm!` and `global_asm!`.\n-- `<path>` must refer to a `fn` or `static`.\n-- A mangled symbol name referring to the item is substituted into the asm template string.\n-- The substituted string does not include any modifiers (e.g. GOT, PLT, relocations, etc).\n-- `<path>` is allowed to point to a `#[thread_local]` static, in which case the asm code can combine the symbol with relocations (e.g. `@plt`, `@TPOFF`) to read from thread-local data."}, {"sha": "66c39a48c6e1d5fbc1ecb2ea3207c5dedeb4af37", "filename": "src/test/assembly/asm/aarch64-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -2,7 +2,7 @@\n // compile-flags: --target aarch64-unknown-linux-gnu\n // needs-llvm-components: aarch64\n \n-#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_sym)]\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register, non_camel_case_types)]"}, {"sha": "b22a26ce36f140d975e81843bc6da7b3ad16ad83", "filename": "src/test/assembly/asm/arm-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -3,7 +3,7 @@\n // compile-flags: -C target-feature=+neon\n // needs-llvm-components: arm\n \n-#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_sym)]\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register, non_camel_case_types)]"}, {"sha": "b2d11a8826f6be04d76793911d9825b9ec91dd90", "filename": "src/test/assembly/asm/avr-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Favr-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Favr-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Favr-types.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -2,7 +2,7 @@\n // compile-flags: --target avr-unknown-gnu-atmega328\n // needs-llvm-components: avr\n \n-#![feature(no_core, lang_items, rustc_attrs, asm_sym, asm_experimental_arch)]\n+#![feature(no_core, lang_items, rustc_attrs, asm_experimental_arch)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(non_camel_case_types)]"}, {"sha": "e177b8d0dbe509a31ba53357bea539f39595fc30", "filename": "src/test/assembly/asm/bpf-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Fbpf-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Fbpf-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fbpf-types.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -2,7 +2,7 @@\n // compile-flags: --target bpfel-unknown-none -C target_feature=+alu32\n // needs-llvm-components: bpf\n \n-#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_sym, asm_experimental_arch)]\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_experimental_arch)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register, non_camel_case_types)]"}, {"sha": "0b361a7ed963d99510d4a44467e4513d7fe0d9af", "filename": "src/test/assembly/asm/global_asm.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fglobal_asm.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -4,7 +4,7 @@\n // compile-flags: -C llvm-args=--x86-asm-syntax=intel\n // compile-flags: -C symbol-mangling-version=v0\n \n-#![feature(asm_const, asm_sym)]\n+#![feature(asm_const)]\n #![crate_type = \"rlib\"]\n \n use std::arch::global_asm;\n@@ -28,4 +28,6 @@ global_asm!(\"lea rax, [rip + {}]\", sym MY_STATIC);\n // CHECK: call _RNvCsiubXh4Yz005_10global_asm6foobar\n global_asm!(\"call {}\", sym foobar);\n // CHECK: _RNvCsiubXh4Yz005_10global_asm6foobar:\n-fn foobar() { loop {} }\n+fn foobar() {\n+    loop {}\n+}"}, {"sha": "af16faedbc4a2ed04e4ba18eb4ffec401b3560b1", "filename": "src/test/assembly/asm/hexagon-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -2,7 +2,7 @@\n // compile-flags: --target hexagon-unknown-linux-musl\n // needs-llvm-components: hexagon\n \n-#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_sym, asm_experimental_arch)]\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_experimental_arch)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register, non_camel_case_types)]"}, {"sha": "6aa28b062db8a0a9aa5ba8d17630469b6efa617d", "filename": "src/test/assembly/asm/mips-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Fmips-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Fmips-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fmips-types.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -5,7 +5,7 @@\n //[mips64] compile-flags: --target mips64-unknown-linux-gnuabi64\n //[mips64] needs-llvm-components: mips\n \n-#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_sym, asm_experimental_arch)]\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_experimental_arch)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register, non_camel_case_types)]"}, {"sha": "2c73b3b098de49eaf1116e915c193e474c1a4dae", "filename": "src/test/assembly/asm/msp430-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Fmsp430-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Fmsp430-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fmsp430-types.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -2,7 +2,7 @@\n // compile-flags: --target msp430-none-elf\n // needs-llvm-components: msp430\n \n-#![feature(no_core, lang_items, rustc_attrs, asm_sym, asm_experimental_arch, asm_const)]\n+#![feature(no_core, lang_items, rustc_attrs, asm_experimental_arch, asm_const)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(non_camel_case_types)]"}, {"sha": "c319946b5f5c11dc456904941c3c6e13337be323", "filename": "src/test/assembly/asm/nvptx-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -3,7 +3,7 @@\n // compile-flags: --crate-type cdylib\n // needs-llvm-components: nvptx\n \n-#![feature(no_core, lang_items, rustc_attrs, asm_sym, asm_experimental_arch)]\n+#![feature(no_core, lang_items, rustc_attrs, asm_experimental_arch)]\n #![no_core]\n \n #[rustc_builtin_macro]"}, {"sha": "e27b005206835ee6de6f1b46cfd4c46169c5469a", "filename": "src/test/assembly/asm/powerpc-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -5,7 +5,7 @@\n //[powerpc64] compile-flags: --target powerpc64-unknown-linux-gnu\n //[powerpc64] needs-llvm-components: powerpc\n \n-#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_sym, asm_experimental_arch)]\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_experimental_arch)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register, non_camel_case_types)]"}, {"sha": "f18ba294d0cff82d709231a36c17cf4a45591711", "filename": "src/test/assembly/asm/riscv-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -6,7 +6,7 @@\n //[riscv32] needs-llvm-components: riscv\n // compile-flags: -C target-feature=+d\n \n-#![feature(no_core, lang_items, rustc_attrs, asm_sym)]\n+#![feature(no_core, lang_items, rustc_attrs)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register)]"}, {"sha": "2fb404dd9b280c49240554d5c041b89ec3f3ab90", "filename": "src/test/assembly/asm/s390x-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Fs390x-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Fs390x-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fs390x-types.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -3,7 +3,7 @@\n //[s390x] compile-flags: --target s390x-unknown-linux-gnu\n //[s390x] needs-llvm-components: systemz\n \n-#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_sym, asm_experimental_arch)]\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_experimental_arch)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register, non_camel_case_types)]"}, {"sha": "3b1ac1b455ad8c478cf2873c76ee63fd751eae17", "filename": "src/test/assembly/asm/wasm-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Fwasm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Fwasm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fwasm-types.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -3,7 +3,7 @@\n // compile-flags: --crate-type cdylib\n // needs-llvm-components: webassembly\n \n-#![feature(no_core, lang_items, rustc_attrs, asm_sym, asm_experimental_arch)]\n+#![feature(no_core, lang_items, rustc_attrs, asm_experimental_arch)]\n #![no_core]\n \n #[rustc_builtin_macro]"}, {"sha": "81be79cbaac18c25d8e9516bd8bb6327bdb6b92d", "filename": "src/test/assembly/asm/x86-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -7,7 +7,7 @@\n // compile-flags: -C llvm-args=--x86-asm-syntax=intel\n // compile-flags: -C target-feature=+avx512bw\n \n-#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_sym)]\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register, non_camel_case_types)]"}, {"sha": "39330693677ebcdff0e968761a74f8b28128119f", "filename": "src/test/ui/abi/abi-sysv64-register-usage.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -6,20 +6,30 @@\n // ignore-arm\n // ignore-aarch64\n // needs-asm-support\n-#![feature(asm_sym)]\n \n #[cfg(target_arch = \"x86_64\")]\n-pub extern \"sysv64\" fn all_the_registers(rdi: i64, rsi: i64, rdx: i64,\n-                                         rcx: i64, r8 : i64, r9 : i64,\n-                                         xmm0: f32, xmm1: f32, xmm2: f32,\n-                                         xmm3: f32, xmm4: f32, xmm5: f32,\n-                                         xmm6: f32, xmm7: f32) -> i64 {\n+pub extern \"sysv64\" fn all_the_registers(\n+    rdi: i64,\n+    rsi: i64,\n+    rdx: i64,\n+    rcx: i64,\n+    r8: i64,\n+    r9: i64,\n+    xmm0: f32,\n+    xmm1: f32,\n+    xmm2: f32,\n+    xmm3: f32,\n+    xmm4: f32,\n+    xmm5: f32,\n+    xmm6: f32,\n+    xmm7: f32,\n+) -> i64 {\n     assert_eq!(rdi, 1);\n     assert_eq!(rsi, 2);\n     assert_eq!(rdx, 3);\n     assert_eq!(rcx, 4);\n-    assert_eq!(r8,  5);\n-    assert_eq!(r9,  6);\n+    assert_eq!(r8, 5);\n+    assert_eq!(r9, 6);\n     assert_eq!(xmm0, 1.0f32);\n     assert_eq!(xmm1, 2.0f32);\n     assert_eq!(xmm2, 4.0f32);"}, {"sha": "9ccb8ed67626911743fb35ae16f017d33c805e38", "filename": "src/test/ui/asm/aarch64/bad-reg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -1,7 +1,7 @@\n // only-aarch64\n // compile-flags: -C target-feature=+neon\n \n-#![feature(asm_const, asm_sym)]\n+#![feature(asm_const)]\n \n use std::arch::asm;\n "}, {"sha": "6af8728bbaa96f59ab08dc004f85b72ef146ea4d", "filename": "src/test/ui/asm/aarch64/may_unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fmay_unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fmay_unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fmay_unwind.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -2,7 +2,7 @@\n // run-pass\n // needs-asm-support\n \n-#![feature(asm_sym, asm_unwind)]\n+#![feature(asm_unwind)]\n \n use std::arch::asm;\n use std::panic::{catch_unwind, resume_unwind, AssertUnwindSafe};"}, {"sha": "6a6cdb00d5173d20d6ea320de1b96c8e20996eea", "filename": "src/test/ui/asm/aarch64/sym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsym.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -3,7 +3,7 @@\n // needs-asm-support\n // run-pass\n \n-#![feature(thread_local, asm_sym)]\n+#![feature(thread_local)]\n \n use std::arch::asm;\n "}, {"sha": "0ce1f1d8f7f4ad33ac6926ed5e09576b03027e54", "filename": "src/test/ui/asm/aarch64/type-check-2-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -1,6 +1,6 @@\n // only-aarch64\n \n-#![feature(repr_simd, never_type, asm_sym)]\n+#![feature(repr_simd, never_type)]\n \n use std::arch::{asm, global_asm};\n "}, {"sha": "1c71c1185d465509392530a2a61de049a7a26781", "filename": "src/test/ui/asm/aarch64/type-check-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -1,6 +1,6 @@\n // only-aarch64\n \n-#![feature(repr_simd, never_type, asm_sym)]\n+#![feature(repr_simd, never_type)]\n \n use std::arch::{asm, global_asm};\n "}, {"sha": "caa9b7dbce6a8fa2a8238371f98fff3a3de754b9", "filename": "src/test/ui/asm/generic-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Fgeneric-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Fgeneric-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fgeneric-const.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -1,7 +1,7 @@\n // needs-asm-support\n // build-pass\n \n-#![feature(asm_const, asm_sym)]\n+#![feature(asm_const)]\n \n use std::arch::asm;\n "}, {"sha": "2f3716ca77f65a743efcf7b805c7049988c41ceb", "filename": "src/test/ui/asm/naked-functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -4,7 +4,7 @@\n // ignore-wasm32\n \n #![feature(naked_functions)]\n-#![feature(asm_const, asm_sym, asm_unwind)]\n+#![feature(asm_const, asm_unwind)]\n #![crate_type = \"lib\"]\n \n use std::arch::asm;"}, {"sha": "59f7b36afcd89bc466ad4723aa2bb229f3808df7", "filename": "src/test/ui/asm/type-check-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -3,7 +3,7 @@\n // ignore-spirv\n // ignore-wasm32\n \n-#![feature(asm_const, asm_sym)]\n+#![feature(asm_const)]\n \n use std::arch::{asm, global_asm};\n "}, {"sha": "f5728079a6a564fb18542534423f8031bee2e2ce", "filename": "src/test/ui/asm/x86_64/bad-reg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -1,7 +1,7 @@\n // only-x86_64\n // compile-flags: -C target-feature=+avx2\n \n-#![feature(asm_const, asm_sym)]\n+#![feature(asm_const)]\n \n use std::arch::asm;\n "}, {"sha": "954f8c5ccc33dc26e175001d89516c02ebcf940e", "filename": "src/test/ui/asm/x86_64/issue-96797.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-96797.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-96797.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-96797.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -7,8 +7,6 @@\n \n // regression test for #96797\n \n-#![feature(asm_sym)]\n-\n use std::arch::global_asm;\n \n #[no_mangle]"}, {"sha": "c11f0938d0b6c22416bb206975bc09ab7526833a", "filename": "src/test/ui/asm/x86_64/may_unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fmay_unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fmay_unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fmay_unwind.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -3,7 +3,7 @@\n // needs-asm-support\n // needs-unwind\n \n-#![feature(asm_sym, asm_unwind)]\n+#![feature(asm_unwind)]\n \n use std::arch::asm;\n use std::panic::{catch_unwind, resume_unwind, AssertUnwindSafe};"}, {"sha": "06589431a445f0b66d5dfc038df209c48b8416d8", "filename": "src/test/ui/asm/x86_64/multiple-clobber-abi.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fmultiple-clobber-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fmultiple-clobber-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fmultiple-clobber-abi.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -4,8 +4,6 @@\n \n // Checks that multiple clobber_abi options can be used\n \n-#![feature(asm_sym)]\n-\n use std::arch::asm;\n \n extern \"sysv64\" fn foo(x: i32) -> i32 {"}, {"sha": "93ef4f090622e673ac59a00b16fb60ebec49c30c", "filename": "src/test/ui/asm/x86_64/sym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -3,7 +3,7 @@\n // needs-asm-support\n // run-pass\n \n-#![feature(thread_local, asm_sym)]\n+#![feature(thread_local)]\n \n use std::arch::asm;\n "}, {"sha": "80b29ec870fc1c32dc9879afe4bc575817e20d99", "filename": "src/test/ui/asm/x86_64/type-check-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -1,6 +1,6 @@\n // only-x86_64\n \n-#![feature(repr_simd, never_type, asm_sym)]\n+#![feature(repr_simd, never_type)]\n \n use std::arch::{asm, global_asm};\n "}, {"sha": "3d5d3807c530e7f7c1bb7b0e629bd0b51a9025c0", "filename": "src/test/ui/asm/x86_64/type-check-4.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-4.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -1,14 +1,13 @@\n // only-x86_64\n // compile-flags: -C target-feature=+avx512f\n \n-#![feature(asm_const, asm_sym)]\n+#![feature(asm_const)]\n \n use std::arch::{asm, global_asm};\n \n use std::arch::x86_64::{_mm256_setzero_ps, _mm_setzero_ps};\n \n-fn main() {\n-}\n+fn main() {}\n \n // Constants must be... constant\n "}, {"sha": "3875bcc21125204aaca5f4aed21ce179ae18d6b5", "filename": "src/test/ui/asm/x86_64/type-check-4.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-4.stderr?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -1,21 +1,21 @@\n error[E0013]: constants cannot refer to statics\n-  --> $DIR/type-check-4.rs:22:25\n+  --> $DIR/type-check-4.rs:21:25\n    |\n LL | global_asm!(\"{}\", const S);\n    |                         ^\n    |\n    = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n error[E0013]: constants cannot refer to statics\n-  --> $DIR/type-check-4.rs:25:35\n+  --> $DIR/type-check-4.rs:24:35\n    |\n LL | global_asm!(\"{}\", const const_foo(S));\n    |                                   ^\n    |\n    = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n error[E0013]: constants cannot refer to statics\n-  --> $DIR/type-check-4.rs:28:35\n+  --> $DIR/type-check-4.rs:27:35\n    |\n LL | global_asm!(\"{}\", const const_bar(S));\n    |                                   ^"}, {"sha": "8198df91095f94acd111902c194f58d3cea735f4", "filename": "src/test/ui/asm/x86_64/type-check-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -1,6 +1,6 @@\n // only-x86_64\n \n-#![feature(repr_simd, never_type, asm_sym)]\n+#![feature(repr_simd, never_type)]\n \n use std::arch::asm;\n "}, {"sha": "5d06fcdebc6b10205573b0503f38687b997b98a5", "filename": "src/test/ui/command/command-current-dir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fcommand%2Fcommand-current-dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fcommand%2Fcommand-current-dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand%2Fcommand-current-dir.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // ignore-emscripten no processes\n // ignore-sgx no processes\n+// ignore-fuchsia Needs directory creation privilege\n \n use std::env;\n use std::fs;"}, {"sha": "0de6b3abb18bb093faca77161f60ff29edac66db", "filename": "src/test/ui/feature-gates/feature-gate-asm_sym.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/21b246587c2687935bd6004ffa5dcc4f4dd6600d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b246587c2687935bd6004ffa5dcc4f4dd6600d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.rs?ref=21b246587c2687935bd6004ffa5dcc4f4dd6600d", "patch": "@@ -1,19 +0,0 @@\n-// only-x86_64\n-\n-use std::arch::asm;\n-\n-fn bar<const N: usize>() {}\n-\n-fn foo<const N: usize>() {\n-    unsafe {\n-        asm!(\"mov eax, {}\", sym bar::<N>);\n-        //~^ ERROR sym operands for inline assembly are unstable\n-    }\n-}\n-\n-fn main() {\n-    unsafe {\n-        asm!(\"mov eax, {}\", sym foo::<0>);\n-        //~^ ERROR sym operands for inline assembly are unstable\n-    }\n-}"}, {"sha": "d4b16f60b0b4196ffa862e44221794c70f2b4360", "filename": "src/test/ui/feature-gates/feature-gate-asm_sym.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/21b246587c2687935bd6004ffa5dcc4f4dd6600d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b246587c2687935bd6004ffa5dcc4f4dd6600d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.stderr?ref=21b246587c2687935bd6004ffa5dcc4f4dd6600d", "patch": "@@ -1,21 +0,0 @@\n-error[E0658]: sym operands for inline assembly are unstable\n-  --> $DIR/feature-gate-asm_sym.rs:9:29\n-   |\n-LL |         asm!(\"mov eax, {}\", sym bar::<N>);\n-   |                             ^^^^^^^^^^^^\n-   |\n-   = note: see issue #93333 <https://github.com/rust-lang/rust/issues/93333> for more information\n-   = help: add `#![feature(asm_sym)]` to the crate attributes to enable\n-\n-error[E0658]: sym operands for inline assembly are unstable\n-  --> $DIR/feature-gate-asm_sym.rs:16:29\n-   |\n-LL |         asm!(\"mov eax, {}\", sym foo::<0>);\n-   |                             ^^^^^^^^^^^^\n-   |\n-   = note: see issue #93333 <https://github.com/rust-lang/rust/issues/93333> for more information\n-   = help: add `#![feature(asm_sym)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "68d9c4de4d1bf117843ff4af3ce6c871ff7e32d2", "filename": "src/test/ui/issues/issue-30490.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fissues%2Fissue-30490.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fissues%2Fissue-30490.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30490.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // ignore-emscripten no processes\n // ignore-sgx no processes\n+// ignore-fuchsia Child I/O swaps not privileged\n \n // Previously libstd would set stdio descriptors of a child process\n // by `dup`ing the requested descriptors to inherit directly into the"}, {"sha": "16dba6292db9875e86f62c45d85374922468d3a5", "filename": "src/test/ui/process/process-spawn-with-unicode-params.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fprocess%2Fprocess-spawn-with-unicode-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fprocess%2Fprocess-spawn-with-unicode-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fprocess-spawn-with-unicode-params.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -9,6 +9,7 @@\n \n // ignore-emscripten no processes\n // ignore-sgx no processes\n+// ignore-fuchsia Filesystem manipulation privileged\n \n use std::io::prelude::*;\n use std::io;"}, {"sha": "a75c91cc90df7355ff06cd92cc0e46f1b6f0e558", "filename": "src/test/ui/rfc-1937-termination-trait/issue-103052-1.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-1.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -0,0 +1,11 @@\n+// Check that we don't blindly emit a diagnostic claiming that \"`main` has an invalid return type\"\n+// if we encounter a type that doesn't implement `std::process::Termination` and is not actually\n+// the return type of the program entry `main`.\n+\n+fn receive(_: impl std::process::Termination) {}\n+\n+struct Something;\n+\n+fn main() {\n+    receive(Something); //~ ERROR the trait bound `Something: Termination` is not satisfied\n+}"}, {"sha": "409dede1a90ac2ea77c2e54b9aa8501f61ab5279", "filename": "src/test/ui/rfc-1937-termination-trait/issue-103052-1.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-1.stderr?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the trait bound `Something: Termination` is not satisfied\n+  --> $DIR/issue-103052-1.rs:10:13\n+   |\n+LL |     receive(Something);\n+   |     ------- ^^^^^^^^^ the trait `Termination` is not implemented for `Something`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `receive`\n+  --> $DIR/issue-103052-1.rs:5:20\n+   |\n+LL | fn receive(_: impl std::process::Termination) {}\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `receive`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "fa9182b6deeb770a5936e196d621fbe4e9f2aec6", "filename": "src/test/ui/rfc-1937-termination-trait/issue-103052-2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-2.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -0,0 +1,18 @@\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+mod child {\n+    trait Main {\n+        fn main() -> impl std::process::Termination;\n+    }\n+\n+    struct Something;\n+\n+    impl Main for () {\n+        fn main() -> Something { //~ ERROR the trait bound `Something: Termination` is not satisfied\n+            Something\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a700c72ea689f5133de30160fed3906670f0006b", "filename": "src/test/ui/rfc-1937-termination-trait/issue-103052-2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-2.stderr?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `Something: Termination` is not satisfied\n+  --> $DIR/issue-103052-2.rs:12:22\n+   |\n+LL |         fn main() -> Something {\n+   |                      ^^^^^^^^^ the trait `Termination` is not implemented for `Something`\n+   |\n+note: required by a bound in `Main::main::{opaque#0}`\n+  --> $DIR/issue-103052-2.rs:6:27\n+   |\n+LL |         fn main() -> impl std::process::Termination;\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Main::main::{opaque#0}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "6ee32314607ad899ec4415f770aa967e6897b504", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -1,14 +1,13 @@\n-error[E0277]: `main` has invalid return type `f32`\n+error[E0277]: the trait bound `f32: Termination` is not satisfied\n   --> $DIR/termination-trait-test-wrong-type.rs:6:1\n    |\n LL |   #[test]\n    |   ------- in this procedural macro expansion\n LL | / fn can_parse_zero_as_f32() -> Result<f32, ParseFloatError> {\n LL | |     \"0\".parse()\n LL | | }\n-   | |_^ `main` can only return types that implement `Termination`\n+   | |_^ the trait `Termination` is not implemented for `f32`\n    |\n-   = help: the trait `Termination` is not implemented for `f32`\n    = note: required for `Result<f32, ParseFloatError>` to implement `Termination`\n note: required by a bound in `assert_test_result`\n   --> $SRC_DIR/test/src/lib.rs:LL:COL"}, {"sha": "02fee1a00da6d6378b162fc3a8f35faf12737823", "filename": "src/test/ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-fn-signature-verification-for-explicit-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-fn-signature-verification-for-explicit-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-fn-signature-verification-for-explicit-return-type.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// ignore-fuchsia Test must be run out-of-process\n \n #![feature(test)]\n "}, {"sha": "53acca34133a42c473a9e5377fab55e072c18648", "filename": "src/test/ui/test-attrs/test-thread-capture.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-thread-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-thread-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-thread-capture.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -5,6 +5,7 @@\n // exec-env:RUST_BACKTRACE=0\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n // ignore-emscripten no threads support\n+// needs-unwind\n \n #[test]\n fn thready_pass() {"}, {"sha": "c712a78afb0f18e37fd30899f96c77302aa127f1", "filename": "src/test/ui/test-attrs/test-thread-capture.run.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-thread-capture.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-thread-capture.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-thread-capture.run.stdout?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -10,7 +10,7 @@ fee\n fie\n foe\n fum\n-thread 'main' panicked at 'explicit panic', $DIR/test-thread-capture.rs:31:5\n+thread 'main' panicked at 'explicit panic', $DIR/test-thread-capture.rs:32:5\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n "}, {"sha": "2b57eb8aae19d4d6f1e811b270c238d5e34b2df9", "filename": "src/test/ui/test-attrs/test-thread-nocapture.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-thread-nocapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-thread-nocapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-thread-nocapture.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -5,6 +5,7 @@\n // exec-env:RUST_BACKTRACE=0\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n // ignore-emscripten no threads support\n+// needs-unwind\n \n #[test]\n fn thready_pass() {"}, {"sha": "0a12a052819c95c6440706780075a082af3d62bb", "filename": "src/test/ui/test-attrs/test-thread-nocapture.run.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-thread-nocapture.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-thread-nocapture.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-thread-nocapture.run.stderr?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -1,2 +1,2 @@\n-thread 'main' panicked at 'explicit panic', $DIR/test-thread-nocapture.rs:31:5\n+thread 'main' panicked at 'explicit panic', $DIR/test-thread-nocapture.rs:32:5\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"}, {"sha": "6d1fba64e4216161299ebacadd186e7c94afba05", "filename": "src/test/ui/threads-sendsync/sync-send-in-std.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fthreads-sendsync%2Fsync-send-in-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94827e5b09b5b098ea10d0c57a84892fc73b5a7/src%2Ftest%2Fui%2Fthreads-sendsync%2Fsync-send-in-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fsync-send-in-std.rs?ref=e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "patch": "@@ -2,6 +2,7 @@\n \n // ignore-wasm32-bare networking not available\n // ignore-sgx ToSocketAddrs cannot be used for DNS Resolution\n+// ignore-fuchsia Req. test-harness networking privileges\n \n use std::net::ToSocketAddrs;\n "}]}