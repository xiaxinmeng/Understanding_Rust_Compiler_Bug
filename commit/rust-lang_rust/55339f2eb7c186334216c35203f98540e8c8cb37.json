{"sha": "55339f2eb7c186334216c35203f98540e8c8cb37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MzM5ZjJlYjdjMTg2MzM0MjE2YzM1MjAzZjk4NTQwZThjOGNiMzc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-11T10:27:33Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-13T10:04:26Z"}, "message": "small cleanup in ConstEvalErr::struct_generic", "tree": {"sha": "2a819000a065b7a1bac40fe710cbb8838741188b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a819000a065b7a1bac40fe710cbb8838741188b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55339f2eb7c186334216c35203f98540e8c8cb37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55339f2eb7c186334216c35203f98540e8c8cb37", "html_url": "https://github.com/rust-lang/rust/commit/55339f2eb7c186334216c35203f98540e8c8cb37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55339f2eb7c186334216c35203f98540e8c8cb37/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6457b29104028bbb3af5efeefed7343d85576320", "url": "https://api.github.com/repos/rust-lang/rust/commits/6457b29104028bbb3af5efeefed7343d85576320", "html_url": "https://github.com/rust-lang/rust/commit/6457b29104028bbb3af5efeefed7343d85576320"}], "stats": {"total": 71, "additions": 40, "deletions": 31}, "files": [{"sha": "64d32690545765cf42ee1c9d43c0fac451e68a33", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 40, "deletions": 31, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/55339f2eb7c186334216c35203f98540e8c8cb37/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55339f2eb7c186334216c35203f98540e8c8cb37/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=55339f2eb7c186334216c35203f98540e8c8cb37", "patch": "@@ -126,9 +126,15 @@ impl<'tcx> ConstEvalErr<'tcx> {\n         }\n     }\n \n-    /// Sets the message passed in via `message` and adds span labels before handing control back\n-    /// to `emit` to do any final processing. It's the caller's responsibility to call emit(),\n-    /// stash(), etc. within the `emit` function to dispose of the diagnostic properly.\n+    /// Create a diagnostic for this const eval error.\n+    ///\n+    /// Sets the message passed in via `message` and adds span labels with detailed error\n+    /// information before handing control back to `emit` to do any final processing.\n+    /// It's the caller's responsibility to call emit(), stash(), etc. within the `emit`\n+    /// function to dispose of the diagnostic properly.\n+    ///\n+    /// If `lint_root.is_some()` report it as a lint, else report it as a hard error.\n+    /// (Except that for some errors, we ignore all that -- see `must_error` below.)\n     fn struct_generic(\n         &self,\n         tcx: TyCtxtAt<'tcx>,\n@@ -141,6 +147,7 @@ impl<'tcx> ConstEvalErr<'tcx> {\n                 return Err(ErrorHandled::TooGeneric);\n             }\n             err_inval!(TypeckError) => return Err(ErrorHandled::Reported),\n+            // We must *always* hard error on these, even if the caller wants just a lint.\n             err_inval!(Layout(LayoutError::SizeOverflow(_))) => true,\n             _ => false,\n         };\n@@ -155,10 +162,11 @@ impl<'tcx> ConstEvalErr<'tcx> {\n             err => err.to_string(),\n         };\n \n-        let add_span_labels = |err: &mut DiagnosticBuilder<'_>| {\n-            if !must_error {\n-                err.span_label(self.span, err_msg.clone());\n+        let finish = |mut err: DiagnosticBuilder<'_>, span_msg: Option<String>| {\n+            if let Some(span_msg) = span_msg {\n+                err.span_label(self.span, span_msg);\n             }\n+            // Add spans for the stacktrace.\n             // Skip the last, which is just the environment of the constant.  The stacktrace\n             // is sometimes empty because we create \"fake\" eval contexts in CTFE to do work\n             // on constant values.\n@@ -167,35 +175,36 @@ impl<'tcx> ConstEvalErr<'tcx> {\n                     err.span_label(frame_info.call_site, frame_info.to_string());\n                 }\n             }\n+            // Let the caller finish the job.\n+            emit(err)\n         };\n \n-        if let (Some(lint_root), false) = (lint_root, must_error) {\n-            let hir_id = self\n-                .stacktrace\n-                .iter()\n-                .rev()\n-                .filter_map(|frame| frame.lint_root)\n-                .next()\n-                .unwrap_or(lint_root);\n-            tcx.struct_span_lint_hir(\n-                rustc_session::lint::builtin::CONST_ERR,\n-                hir_id,\n-                tcx.span,\n-                |lint| {\n-                    let mut err = lint.build(message);\n-                    add_span_labels(&mut err);\n-                    emit(err);\n-                },\n-            );\n+        if must_error {\n+            // The `message` makes little sense here, this is a more serious error than the\n+            // caller thinks anyway.\n+            finish(struct_error(tcx, &err_msg), None);\n         } else {\n-            let mut err = if must_error {\n-                struct_error(tcx, &err_msg)\n+            // Regular case.\n+            if let Some(lint_root) = lint_root {\n+                // Report as lint.\n+                let hir_id = self\n+                    .stacktrace\n+                    .iter()\n+                    .rev()\n+                    .filter_map(|frame| frame.lint_root)\n+                    .next()\n+                    .unwrap_or(lint_root);\n+                tcx.struct_span_lint_hir(\n+                    rustc_session::lint::builtin::CONST_ERR,\n+                    hir_id,\n+                    tcx.span,\n+                    |lint| finish(lint.build(message), Some(err_msg)),\n+                );\n             } else {\n-                struct_error(tcx, message)\n-            };\n-            add_span_labels(&mut err);\n-            emit(err);\n-        };\n+                // Report as hard error.\n+                finish(struct_error(tcx, message), Some(err_msg));\n+            }\n+        }\n         Ok(())\n     }\n }"}]}