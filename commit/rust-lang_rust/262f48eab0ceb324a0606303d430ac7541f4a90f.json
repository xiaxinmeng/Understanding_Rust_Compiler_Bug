{"sha": "262f48eab0ceb324a0606303d430ac7541f4a90f", "node_id": "C_kwDOAAsO6NoAKDI2MmY0OGVhYjBjZWIzMjRhMDYwNjMwM2Q0MzBhYzc1NDFmNGE5MGY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-18T21:00:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-18T21:00:49Z"}, "message": "Rollup merge of #92924 - dtolnay:pptracing, r=Mark-Simulacrum\n\nDelete pretty printer tracing\n\nThese are left over from 2011. I did not find these helpful at all in my work on https://github.com/dtolnay/prettyplease despite doing significant refactors to this code. Learning what these messages all refer to is harder than putting in your own messages to log exactly what is relevant to specifically the thing that you are working on debugging.", "tree": {"sha": "af10bd6fea79a9e5c91557066062755ebe2835b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af10bd6fea79a9e5c91557066062755ebe2835b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/262f48eab0ceb324a0606303d430ac7541f4a90f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh5yqBCRBK7hj4Ov3rIwAAVC0IABRU5zy2MMkafe8FpbcL7N1+\nrwZFZ7ePtttg+9Dngz47btOppqp1of1lnubCNuD7miW7hWWQHAJBV8qpMMMrG16a\nPb6GUVtXZCnv1NmAlEiLLcL9+QTra+3bZzKKrcp3U5h4NNGMOa2D4eKfgRy7ag+4\nTq2wAqBBAM4W+m24etEFFuTxJiD414e5IFyzyx1/a7uKVvD5VfLcbpgOj3utkZJ/\nESh3WlLCB/DgzT0nSIOkrws6cJJhKzs+f5bMvER8jIoiIdbH23WAWKCDtq1ujSAI\nbJUE7Lv/JwDVMhIBEGszW8pz/EvnVqsRr8dn5Kr4GqjQlXSc00yd4w4jT85riU4=\n=jrh0\n-----END PGP SIGNATURE-----\n", "payload": "tree af10bd6fea79a9e5c91557066062755ebe2835b1\nparent 5a4f47460b14780d63303a4a52319a7f44654bb5\nparent fe86dcf0cc72ff526eb2be45757cdc0e7a990e6a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642539649 +0100\ncommitter GitHub <noreply@github.com> 1642539649 +0100\n\nRollup merge of #92924 - dtolnay:pptracing, r=Mark-Simulacrum\n\nDelete pretty printer tracing\n\nThese are left over from 2011. I did not find these helpful at all in my work on https://github.com/dtolnay/prettyplease despite doing significant refactors to this code. Learning what these messages all refer to is harder than putting in your own messages to log exactly what is relevant to specifically the thing that you are working on debugging.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/262f48eab0ceb324a0606303d430ac7541f4a90f", "html_url": "https://github.com/rust-lang/rust/commit/262f48eab0ceb324a0606303d430ac7541f4a90f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/262f48eab0ceb324a0606303d430ac7541f4a90f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a4f47460b14780d63303a4a52319a7f44654bb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a4f47460b14780d63303a4a52319a7f44654bb5", "html_url": "https://github.com/rust-lang/rust/commit/5a4f47460b14780d63303a4a52319a7f44654bb5"}, {"sha": "fe86dcf0cc72ff526eb2be45757cdc0e7a990e6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe86dcf0cc72ff526eb2be45757cdc0e7a990e6a", "html_url": "https://github.com/rust-lang/rust/commit/fe86dcf0cc72ff526eb2be45757cdc0e7a990e6a"}], "stats": {"total": 54, "additions": 0, "deletions": 54}, "files": [{"sha": "4c02b21dd71e9d9cfd06e388923ddb6aaa55111d", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/262f48eab0ceb324a0606303d430ac7541f4a90f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/262f48eab0ceb324a0606303d430ac7541f4a90f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=262f48eab0ceb324a0606303d430ac7541f4a90f", "patch": "@@ -3433,7 +3433,6 @@ version = \"0.0.0\"\n dependencies = [\n  \"rustc_ast\",\n  \"rustc_span\",\n- \"tracing\",\n ]\n \n [[package]]"}, {"sha": "5ad8714e9fec999dd71591a64daa47c2652ddae1", "filename": "compiler/rustc_ast_pretty/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/262f48eab0ceb324a0606303d430ac7541f4a90f/compiler%2Frustc_ast_pretty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/262f48eab0ceb324a0606303d430ac7541f4a90f/compiler%2Frustc_ast_pretty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2FCargo.toml?ref=262f48eab0ceb324a0606303d430ac7541f4a90f", "patch": "@@ -7,6 +7,5 @@ edition = \"2021\"\n doctest = false\n \n [dependencies]\n-tracing = \"0.1\"\n rustc_span = { path = \"../rustc_span\" }\n rustc_ast = { path = \"../rustc_ast\" }"}, {"sha": "25437f8b53a94e4250a933433ad23077382eef3a", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/262f48eab0ceb324a0606303d430ac7541f4a90f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/262f48eab0ceb324a0606303d430ac7541f4a90f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=262f48eab0ceb324a0606303d430ac7541f4a90f", "patch": "@@ -138,7 +138,6 @@ use ring::RingBuffer;\n use std::borrow::Cow;\n use std::collections::VecDeque;\n use std::fmt;\n-use tracing::debug;\n \n /// How to break. Described in more detail in the module docs.\n #[derive(Clone, Copy, PartialEq)]\n@@ -193,22 +192,6 @@ impl fmt::Display for Token {\n     }\n }\n \n-fn buf_str(buf: &RingBuffer<BufEntry>, left: usize, right: usize, lim: usize) -> String {\n-    let mut i = left;\n-    let mut l = lim;\n-    let mut s = String::from(\"[\");\n-    while i != right && l != 0 {\n-        l -= 1;\n-        if i != left {\n-            s.push_str(\", \");\n-        }\n-        s.push_str(&format!(\"{}={}\", buf[i].size, &buf[i].token));\n-        i += 1;\n-    }\n-    s.push(']');\n-    s\n-}\n-\n #[derive(Copy, Clone)]\n enum PrintStackBreak {\n     Fits,\n@@ -267,7 +250,6 @@ impl Default for BufEntry {\n impl Printer {\n     pub fn new() -> Self {\n         let linewidth = 78;\n-        debug!(\"Printer::new {}\", linewidth);\n         let mut buf = RingBuffer::new();\n         buf.advance_right();\n         Printer {\n@@ -310,16 +292,13 @@ impl Printer {\n         } else {\n             self.advance_right();\n         }\n-        debug!(\"pp Begin({})/buffer Vec<{},{}>\", b.offset, self.left, self.right);\n         self.scan_push(BufEntry { token: Token::Begin(b), size: -self.right_total });\n     }\n \n     fn scan_end(&mut self) {\n         if self.scan_stack.is_empty() {\n-            debug!(\"pp End/print Vec<{},{}>\", self.left, self.right);\n             self.print_end();\n         } else {\n-            debug!(\"pp End/buffer Vec<{},{}>\", self.left, self.right);\n             self.advance_right();\n             self.scan_push(BufEntry { token: Token::End, size: -1 });\n         }\n@@ -334,18 +313,15 @@ impl Printer {\n         } else {\n             self.advance_right();\n         }\n-        debug!(\"pp Break({})/buffer Vec<{},{}>\", b.offset, self.left, self.right);\n         self.check_stack(0);\n         self.scan_push(BufEntry { token: Token::Break(b), size: -self.right_total });\n         self.right_total += b.blank_space;\n     }\n \n     fn scan_string(&mut self, s: Cow<'static, str>) {\n         if self.scan_stack.is_empty() {\n-            debug!(\"pp String('{}')/print Vec<{},{}>\", s, self.left, self.right);\n             self.print_string(s);\n         } else {\n-            debug!(\"pp String('{}')/buffer Vec<{},{}>\", s, self.left, self.right);\n             self.advance_right();\n             let len = s.len() as isize;\n             self.buf[self.right] = BufEntry { token: Token::String(s), size: len };\n@@ -355,18 +331,8 @@ impl Printer {\n     }\n \n     fn check_stream(&mut self) {\n-        debug!(\n-            \"check_stream Vec<{}, {}> with left_total={}, right_total={}\",\n-            self.left, self.right, self.left_total, self.right_total\n-        );\n         if self.right_total - self.left_total > self.space {\n-            debug!(\n-                \"scan window is {}, longer than space on line ({})\",\n-                self.right_total - self.left_total,\n-                self.space\n-            );\n             if Some(&self.left) == self.scan_stack.back() {\n-                debug!(\"setting {} to infinity and popping\", self.left);\n                 let scanned = self.scan_pop_bottom();\n                 self.buf[scanned].size = SIZE_INFINITY;\n             }\n@@ -378,7 +344,6 @@ impl Printer {\n     }\n \n     fn scan_push(&mut self, entry: BufEntry) {\n-        debug!(\"scan_push {}\", self.right);\n         self.buf[self.right] = entry;\n         self.scan_stack.push_front(self.right);\n     }\n@@ -401,11 +366,6 @@ impl Printer {\n     }\n \n     fn advance_left(&mut self) {\n-        debug!(\n-            \"advance_left Vec<{},{}>, sizeof({})={}\",\n-            self.left, self.right, self.left, self.buf[self.left].size\n-        );\n-\n         let mut left_size = self.buf[self.left].size;\n \n         while left_size >= 0 {\n@@ -465,14 +425,12 @@ impl Printer {\n     }\n \n     fn print_newline(&mut self, amount: isize) {\n-        debug!(\"NEWLINE {}\", amount);\n         self.out.push('\\n');\n         self.pending_indentation = 0;\n         self.indent(amount);\n     }\n \n     fn indent(&mut self, amount: isize) {\n-        debug!(\"INDENT {}\", amount);\n         self.pending_indentation += amount;\n     }\n \n@@ -485,40 +443,33 @@ impl Printer {\n     fn print_begin(&mut self, b: BeginToken, l: isize) {\n         if l > self.space {\n             let col = self.margin - self.space + b.offset;\n-            debug!(\"print Begin -> push broken block at col {}\", col);\n             self.print_stack\n                 .push(PrintStackElem { offset: col, pbreak: PrintStackBreak::Broken(b.breaks) });\n         } else {\n-            debug!(\"print Begin -> push fitting block\");\n             self.print_stack.push(PrintStackElem { offset: 0, pbreak: PrintStackBreak::Fits });\n         }\n     }\n \n     fn print_end(&mut self) {\n-        debug!(\"print End -> pop End\");\n         self.print_stack.pop().unwrap();\n     }\n \n     fn print_break(&mut self, b: BreakToken, l: isize) {\n         let top = self.get_top();\n         match top.pbreak {\n             PrintStackBreak::Fits => {\n-                debug!(\"print Break({}) in fitting block\", b.blank_space);\n                 self.space -= b.blank_space;\n                 self.indent(b.blank_space);\n             }\n             PrintStackBreak::Broken(Breaks::Consistent) => {\n-                debug!(\"print Break({}+{}) in consistent block\", top.offset, b.offset);\n                 self.print_newline(top.offset + b.offset);\n                 self.space = self.margin - (top.offset + b.offset);\n             }\n             PrintStackBreak::Broken(Breaks::Inconsistent) => {\n                 if l > self.space {\n-                    debug!(\"print Break({}+{}) w/ newline in inconsistent\", top.offset, b.offset);\n                     self.print_newline(top.offset + b.offset);\n                     self.space = self.margin - (top.offset + b.offset);\n                 } else {\n-                    debug!(\"print Break({}) w/o newline in inconsistent\", b.blank_space);\n                     self.indent(b.blank_space);\n                     self.space -= b.blank_space;\n                 }\n@@ -528,7 +479,6 @@ impl Printer {\n \n     fn print_string(&mut self, s: Cow<'static, str>) {\n         let len = s.len() as isize;\n-        debug!(\"print String({})\", s);\n         // assert!(len <= space);\n         self.space -= len;\n \n@@ -545,8 +495,6 @@ impl Printer {\n     }\n \n     fn print(&mut self, token: Token, l: isize) {\n-        debug!(\"print {} {} (remaining line space={})\", token, l, self.space);\n-        debug!(\"{}\", buf_str(&self.buf, self.left, self.right, 6));\n         match token {\n             Token::Begin(b) => self.print_begin(b, l),\n             Token::End => self.print_end(),"}]}