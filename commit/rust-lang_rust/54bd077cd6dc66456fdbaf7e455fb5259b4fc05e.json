{"sha": "54bd077cd6dc66456fdbaf7e455fb5259b4fc05e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YmQwNzdjZDZkYzY2NDU2ZmRiYWY3ZTQ1NWZiNTI1OWI0ZmMwNWU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-15T10:01:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-15T10:01:14Z"}, "message": "Rollup merge of #73331 - hermitcore:listen, r=kennytm\n\nextend network support for HermitCore\n\n- add basic support of TcpListerner for HermitCore\n- revise TcpStream to support peer_addr", "tree": {"sha": "b00b77257a80bccbed0b3732f5a46451548d559e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b00b77257a80bccbed0b3732f5a46451548d559e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54bd077cd6dc66456fdbaf7e455fb5259b4fc05e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe50brCRBK7hj4Ov3rIwAAdHIIAEloTW/bFFmbftGtCs8VDTJH\nPq1oLDfC3sZ01N8xHxVk/DVuJzofcgr2hx9vqjfaun+wzcGKnacxhGh5Op9LScyV\njVswBptAh2XwWknMArElBc5pWKxNgTjSwlCN7HToh4Imzv6nB1ChcWU2bWXdbK/5\naAeiuJ7ZSXCzp3skXla/CVGhjtmTaHKEwZIdo9KcncauIivu1OOdnQXj4qjDpX5m\niMnW/XgVPxPwuUki4ZqyRrvepFz4NH/yRhSG62YKDbAtw02LUj86LmlKUHNpwuXu\nMPAsaW708BnqLseJv9pEQfYGlmnqyEtKgGI4bq5I8o/nUQQt6naakBSmoTeq9oM=\n=CyX/\n-----END PGP SIGNATURE-----\n", "payload": "tree b00b77257a80bccbed0b3732f5a46451548d559e\nparent 202499fb4377ccf27893211c2fa10a1e948bc1eb\nparent 76f1581a25a27029279bb5eac17971ba68df1dbe\nauthor Ralf Jung <post@ralfj.de> 1592215274 +0200\ncommitter GitHub <noreply@github.com> 1592215274 +0200\n\nRollup merge of #73331 - hermitcore:listen, r=kennytm\n\nextend network support for HermitCore\n\n- add basic support of TcpListerner for HermitCore\n- revise TcpStream to support peer_addr\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54bd077cd6dc66456fdbaf7e455fb5259b4fc05e", "html_url": "https://github.com/rust-lang/rust/commit/54bd077cd6dc66456fdbaf7e455fb5259b4fc05e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54bd077cd6dc66456fdbaf7e455fb5259b4fc05e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "202499fb4377ccf27893211c2fa10a1e948bc1eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/202499fb4377ccf27893211c2fa10a1e948bc1eb", "html_url": "https://github.com/rust-lang/rust/commit/202499fb4377ccf27893211c2fa10a1e948bc1eb"}, {"sha": "76f1581a25a27029279bb5eac17971ba68df1dbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/76f1581a25a27029279bb5eac17971ba68df1dbe", "html_url": "https://github.com/rust-lang/rust/commit/76f1581a25a27029279bb5eac17971ba68df1dbe"}], "stats": {"total": 137, "additions": 88, "deletions": 49}, "files": [{"sha": "009767934d447c0853ceacf5d089f0ac3e7ef6a9", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54bd077cd6dc66456fdbaf7e455fb5259b4fc05e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/54bd077cd6dc66456fdbaf7e455fb5259b4fc05e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=54bd077cd6dc66456fdbaf7e455fb5259b4fc05e", "patch": "@@ -1434,9 +1434,9 @@ dependencies = [\n \n [[package]]\n name = \"hermit-abi\"\n-version = \"0.1.13\"\n+version = \"0.1.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"91780f809e750b0a89f5544be56617ff6b1227ee485bcb06ebe10cdf89bd3b71\"\n+checksum = \"b9586eedd4ce6b3c498bc3b4dd92fc9f11166aa908a914071953768066c67909\"\n dependencies = [\n  \"compiler_builtins\",\n  \"libc\","}, {"sha": "83029a8642097e107b7223322e99ff838e9469b7", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54bd077cd6dc66456fdbaf7e455fb5259b4fc05e/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/54bd077cd6dc66456fdbaf7e455fb5259b4fc05e/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=54bd077cd6dc66456fdbaf7e455fb5259b4fc05e", "patch": "@@ -41,7 +41,7 @@ dlmalloc = { version = \"0.1\", features = ['rustc-dep-of-std'] }\n fortanix-sgx-abi = { version = \"0.3.2\", features = ['rustc-dep-of-std'] }\n \n [target.'cfg(all(any(target_arch = \"x86_64\", target_arch = \"aarch64\"), target_os = \"hermit\"))'.dependencies]\n-hermit-abi = { version = \"0.1.13\", features = ['rustc-dep-of-std'] }\n+hermit-abi = { version = \"0.1.14\", features = ['rustc-dep-of-std'] }\n \n [target.wasm32-wasi.dependencies]\n wasi = { version = \"0.9.0\", features = ['rustc-dep-of-std'], default-features = false }"}, {"sha": "9e588c4265ac2199784ba0393e8a43c850904ca0", "filename": "src/libstd/sys/hermit/net.rs", "status": "modified", "additions": 85, "deletions": 46, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/54bd077cd6dc66456fdbaf7e455fb5259b4fc05e/src%2Flibstd%2Fsys%2Fhermit%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54bd077cd6dc66456fdbaf7e455fb5259b4fc05e/src%2Flibstd%2Fsys%2Fhermit%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fnet.rs?ref=54bd077cd6dc66456fdbaf7e455fb5259b4fc05e", "patch": "@@ -1,10 +1,13 @@\n use crate::convert::TryFrom;\n use crate::fmt;\n use crate::io::{self, ErrorKind, IoSlice, IoSliceMut};\n-use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};\n+use crate::net::{IpAddr, Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};\n use crate::str;\n+use crate::sync::Arc;\n use crate::sys::hermit::abi;\n+use crate::sys::hermit::abi::IpAddress::{Ipv4, Ipv6};\n use crate::sys::{unsupported, Void};\n+use crate::sys_common::AsInner;\n use crate::time::Duration;\n \n /// Checks whether the HermitCore's socket interface has been started already, and\n@@ -17,14 +20,33 @@ pub fn init() -> io::Result<()> {\n     Ok(())\n }\n \n-pub struct TcpStream(abi::Handle);\n+#[derive(Debug, Clone)]\n+pub struct Socket(abi::Handle);\n+\n+impl AsInner<abi::Handle> for Socket {\n+    fn as_inner(&self) -> &abi::Handle {\n+        &self.0\n+    }\n+}\n+\n+impl Drop for Socket {\n+    fn drop(&mut self) {\n+        let _ = abi::tcpstream::close(self.0);\n+    }\n+}\n+\n+// Arc is used to count the number of used sockets.\n+// Only if all sockets are released, the drop\n+// method will close the socket.\n+#[derive(Clone)]\n+pub struct TcpStream(Arc<Socket>);\n \n impl TcpStream {\n     pub fn connect(addr: io::Result<&SocketAddr>) -> io::Result<TcpStream> {\n         let addr = addr?;\n \n         match abi::tcpstream::connect(addr.ip().to_string().as_bytes(), addr.port(), None) {\n-            Ok(handle) => Ok(TcpStream(handle)),\n+            Ok(handle) => Ok(TcpStream(Arc::new(Socket(handle)))),\n             _ => {\n                 Err(io::Error::new(ErrorKind::Other, \"Unable to initiate a connection on a socket\"))\n             }\n@@ -37,39 +59,42 @@ impl TcpStream {\n             saddr.port(),\n             Some(duration.as_millis() as u64),\n         ) {\n-            Ok(handle) => Ok(TcpStream(handle)),\n+            Ok(handle) => Ok(TcpStream(Arc::new(Socket(handle)))),\n             _ => {\n                 Err(io::Error::new(ErrorKind::Other, \"Unable to initiate a connection on a socket\"))\n             }\n         }\n     }\n \n     pub fn set_read_timeout(&self, duration: Option<Duration>) -> io::Result<()> {\n-        abi::tcpstream::set_read_timeout(self.0, duration.map(|d| d.as_millis() as u64))\n+        abi::tcpstream::set_read_timeout(*self.0.as_inner(), duration.map(|d| d.as_millis() as u64))\n             .map_err(|_| io::Error::new(ErrorKind::Other, \"Unable to set timeout value\"))\n     }\n \n     pub fn set_write_timeout(&self, duration: Option<Duration>) -> io::Result<()> {\n-        abi::tcpstream::set_write_timeout(self.0, duration.map(|d| d.as_millis() as u64))\n-            .map_err(|_| io::Error::new(ErrorKind::Other, \"Unable to set timeout value\"))\n+        abi::tcpstream::set_write_timeout(\n+            *self.0.as_inner(),\n+            duration.map(|d| d.as_millis() as u64),\n+        )\n+        .map_err(|_| io::Error::new(ErrorKind::Other, \"Unable to set timeout value\"))\n     }\n \n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n-        let duration = abi::tcpstream::get_read_timeout(self.0)\n+        let duration = abi::tcpstream::get_read_timeout(*self.0.as_inner())\n             .map_err(|_| io::Error::new(ErrorKind::Other, \"Unable to determine timeout value\"))?;\n \n         Ok(duration.map(|d| Duration::from_millis(d)))\n     }\n \n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n-        let duration = abi::tcpstream::get_write_timeout(self.0)\n+        let duration = abi::tcpstream::get_write_timeout(*self.0.as_inner())\n             .map_err(|_| io::Error::new(ErrorKind::Other, \"Unable to determine timeout value\"))?;\n \n         Ok(duration.map(|d| Duration::from_millis(d)))\n     }\n \n     pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {\n-        abi::tcpstream::peek(self.0, buf)\n+        abi::tcpstream::peek(*self.0.as_inner(), buf)\n             .map_err(|_| io::Error::new(ErrorKind::Other, \"set_nodelay failed\"))\n     }\n \n@@ -81,18 +106,11 @@ impl TcpStream {\n         let mut size: usize = 0;\n \n         for i in ioslice.iter_mut() {\n-            let mut pos: usize = 0;\n-\n-            while pos < i.len() {\n-                let ret = abi::tcpstream::read(self.0, &mut i[pos..])\n-                    .map_err(|_| io::Error::new(ErrorKind::Other, \"Unable to read on socket\"))?;\n-\n-                if ret == 0 {\n-                    return Ok(size);\n-                } else {\n-                    size += ret;\n-                    pos += ret;\n-                }\n+            let ret = abi::tcpstream::read(*self.0.as_inner(), &mut i[0..])\n+                .map_err(|_| io::Error::new(ErrorKind::Other, \"Unable to read on socket\"))?;\n+\n+            if ret != 0 {\n+                size += ret;\n             }\n         }\n \n@@ -112,7 +130,7 @@ impl TcpStream {\n         let mut size: usize = 0;\n \n         for i in ioslice.iter() {\n-            size += abi::tcpstream::write(self.0, i)\n+            size += abi::tcpstream::write(*self.0.as_inner(), i)\n                 .map_err(|_| io::Error::new(ErrorKind::Other, \"Unable to write on socket\"))?;\n         }\n \n@@ -125,42 +143,53 @@ impl TcpStream {\n     }\n \n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n-        Err(io::Error::new(ErrorKind::Other, \"peer_addr isn't supported\"))\n+        let (ipaddr, port) = abi::tcpstream::peer_addr(*self.0.as_inner())\n+            .map_err(|_| io::Error::new(ErrorKind::Other, \"peer_addr failed\"))?;\n+\n+        let saddr = match ipaddr {\n+            Ipv4(ref addr) => SocketAddr::new(\n+                IpAddr::V4(Ipv4Addr::new(addr.0[0], addr.0[1], addr.0[2], addr.0[3])),\n+                port,\n+            ),\n+            Ipv6(ref addr) => SocketAddr::new(IpAddr::V6(Ipv6Addr::from(addr.0)), port),\n+            _ => {\n+                return Err(io::Error::new(ErrorKind::Other, \"peer_addr failed\"));\n+            }\n+        };\n+\n+        Ok(saddr)\n     }\n \n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n         Err(io::Error::new(ErrorKind::Other, \"socket_addr isn't supported\"))\n     }\n \n     pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {\n-        abi::tcpstream::shutdown(self.0, how as i32)\n+        abi::tcpstream::shutdown(*self.0.as_inner(), how as i32)\n             .map_err(|_| io::Error::new(ErrorKind::Other, \"unable to shutdown socket\"))\n     }\n \n     pub fn duplicate(&self) -> io::Result<TcpStream> {\n-        let handle = abi::tcpstream::duplicate(self.0)\n-            .map_err(|_| io::Error::new(ErrorKind::Other, \"unable to duplicate stream\"))?;\n-\n-        Ok(TcpStream(handle))\n+        Ok(self.clone())\n     }\n \n     pub fn set_nodelay(&self, mode: bool) -> io::Result<()> {\n-        abi::tcpstream::set_nodelay(self.0, mode)\n+        abi::tcpstream::set_nodelay(*self.0.as_inner(), mode)\n             .map_err(|_| io::Error::new(ErrorKind::Other, \"set_nodelay failed\"))\n     }\n \n     pub fn nodelay(&self) -> io::Result<bool> {\n-        abi::tcpstream::nodelay(self.0)\n+        abi::tcpstream::nodelay(*self.0.as_inner())\n             .map_err(|_| io::Error::new(ErrorKind::Other, \"nodelay failed\"))\n     }\n \n     pub fn set_ttl(&self, tll: u32) -> io::Result<()> {\n-        abi::tcpstream::set_tll(self.0, tll)\n+        abi::tcpstream::set_tll(*self.0.as_inner(), tll)\n             .map_err(|_| io::Error::new(ErrorKind::Other, \"unable to set TTL\"))\n     }\n \n     pub fn ttl(&self) -> io::Result<u32> {\n-        abi::tcpstream::get_tll(self.0)\n+        abi::tcpstream::get_tll(*self.0.as_inner())\n             .map_err(|_| io::Error::new(ErrorKind::Other, \"unable to get TTL\"))\n     }\n \n@@ -169,40 +198,50 @@ impl TcpStream {\n     }\n \n     pub fn set_nonblocking(&self, mode: bool) -> io::Result<()> {\n-        abi::tcpstream::set_nonblocking(self.0, mode)\n+        abi::tcpstream::set_nonblocking(*self.0.as_inner(), mode)\n             .map_err(|_| io::Error::new(ErrorKind::Other, \"unable to set blocking mode\"))\n     }\n }\n \n-impl Drop for TcpStream {\n-    fn drop(&mut self) {\n-        let _ = abi::tcpstream::close(self.0);\n-    }\n-}\n-\n impl fmt::Debug for TcpStream {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         Ok(())\n     }\n }\n \n-pub struct TcpListener(abi::Handle);\n+#[derive(Clone)]\n+pub struct TcpListener(SocketAddr);\n \n impl TcpListener {\n-    pub fn bind(_: io::Result<&SocketAddr>) -> io::Result<TcpListener> {\n-        Err(io::Error::new(ErrorKind::Other, \"not supported\"))\n+    pub fn bind(addr: io::Result<&SocketAddr>) -> io::Result<TcpListener> {\n+        let addr = addr?;\n+\n+        Ok(TcpListener(*addr))\n     }\n \n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n-        Err(io::Error::new(ErrorKind::Other, \"not supported\"))\n+        Ok(self.0)\n     }\n \n     pub fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {\n-        Err(io::Error::new(ErrorKind::Other, \"not supported\"))\n+        let (handle, ipaddr, port) = abi::tcplistener::accept(self.0.port())\n+            .map_err(|_| io::Error::new(ErrorKind::Other, \"accept failed\"))?;\n+        let saddr = match ipaddr {\n+            Ipv4(ref addr) => SocketAddr::new(\n+                IpAddr::V4(Ipv4Addr::new(addr.0[0], addr.0[1], addr.0[2], addr.0[3])),\n+                port,\n+            ),\n+            Ipv6(ref addr) => SocketAddr::new(IpAddr::V6(Ipv6Addr::from(addr.0)), port),\n+            _ => {\n+                return Err(io::Error::new(ErrorKind::Other, \"accept failed\"));\n+            }\n+        };\n+\n+        Ok((TcpStream(Arc::new(Socket(handle))), saddr))\n     }\n \n     pub fn duplicate(&self) -> io::Result<TcpListener> {\n-        Err(io::Error::new(ErrorKind::Other, \"not supported\"))\n+        Ok(self.clone())\n     }\n \n     pub fn set_ttl(&self, _: u32) -> io::Result<()> {"}]}