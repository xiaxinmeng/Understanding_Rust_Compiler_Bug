{"sha": "b6f9295654b8bcad0c3cdd0651741082cedd6e75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZjkyOTU2NTRiOGJjYWQwYzNjZGQwNjUxNzQxMDgyY2VkZDZlNzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-08T12:03:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-08T12:03:38Z"}, "message": "auto merge of #6317 : brson/rust/durable, r=z0w0\n\n#6312", "tree": {"sha": "b29e10e73d2444dcdee9757f4db9060cee6862e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b29e10e73d2444dcdee9757f4db9060cee6862e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6f9295654b8bcad0c3cdd0651741082cedd6e75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6f9295654b8bcad0c3cdd0651741082cedd6e75", "html_url": "https://github.com/rust-lang/rust/commit/b6f9295654b8bcad0c3cdd0651741082cedd6e75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6f9295654b8bcad0c3cdd0651741082cedd6e75/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83838aa429b430f842e21c48ab472feb9aa5f2a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/83838aa429b430f842e21c48ab472feb9aa5f2a7", "html_url": "https://github.com/rust-lang/rust/commit/83838aa429b430f842e21c48ab472feb9aa5f2a7"}, {"sha": "3df7ed15b788508f711889eef1e3825352a46354", "url": "https://api.github.com/repos/rust-lang/rust/commits/3df7ed15b788508f711889eef1e3825352a46354", "html_url": "https://github.com/rust-lang/rust/commit/3df7ed15b788508f711889eef1e3825352a46354"}], "stats": {"total": 267, "additions": 144, "deletions": 123}, "files": [{"sha": "15b0be7b4bce5f94f81166355dbcc7938f0374cf", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6f9295654b8bcad0c3cdd0651741082cedd6e75/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/b6f9295654b8bcad0c3cdd0651741082cedd6e75/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=b6f9295654b8bcad0c3cdd0651741082cedd6e75", "patch": "@@ -72,7 +72,7 @@ they contained the following prologue:\n \n /* Reexported core operators */\n \n-pub use kinds::{Const, Copy, Owned, Durable};\n+pub use kinds::{Const, Copy, Owned};\n pub use ops::{Drop};\n pub use ops::{Add, Sub, Mul, Div, Rem, Neg, Not};\n pub use ops::{BitAnd, BitOr, BitXor};"}, {"sha": "eeafc4cf786a57655e90bbec30881054b9c24ddd", "filename": "src/libcore/kinds.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6f9295654b8bcad0c3cdd0651741082cedd6e75/src%2Flibcore%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f9295654b8bcad0c3cdd0651741082cedd6e75/src%2Flibcore%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fkinds.rs?ref=b6f9295654b8bcad0c3cdd0651741082cedd6e75", "patch": "@@ -30,8 +30,6 @@ The 4 kinds are\n * Const - types that are deeply immutable. Const types are used for\n   freezable data structures.\n \n-* Durable - types that do not contain borrowed pointers.\n-\n `Copy` types include both implicitly copyable types that the compiler\n will copy automatically and non-implicitly copyable types that require\n the `copy` keyword to copy. Types that do not implement `Copy` may\n@@ -55,6 +53,7 @@ pub trait Const {\n }\n \n #[lang=\"durable\"]\n+#[cfg(stage0)]\n pub trait Durable {\n     // Empty.\n }"}, {"sha": "d263d2cdbee9e99d684f1e56e603c05e785276ba", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6f9295654b8bcad0c3cdd0651741082cedd6e75/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f9295654b8bcad0c3cdd0651741082cedd6e75/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=b6f9295654b8bcad0c3cdd0651741082cedd6e75", "patch": "@@ -13,7 +13,7 @@\n /* Reexported core operators */\n \n pub use either::{Either, Left, Right};\n-pub use kinds::{Const, Copy, Owned, Durable};\n+pub use kinds::{Const, Copy, Owned};\n pub use ops::{Add, Sub, Mul, Div, Rem, Neg, Not};\n pub use ops::{BitAnd, BitOr, BitXor};\n pub use ops::{Drop};"}, {"sha": "d4b02a0ad9bbfde11a442e8c13305a66c9d0fcd2", "filename": "src/libcore/task/local_data.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b6f9295654b8bcad0c3cdd0651741082cedd6e75/src%2Flibcore%2Ftask%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f9295654b8bcad0c3cdd0651741082cedd6e75/src%2Flibcore%2Ftask%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data.rs?ref=b6f9295654b8bcad0c3cdd0651741082cedd6e75", "patch": "@@ -49,7 +49,7 @@ pub type LocalDataKey<'self,T> = &'self fn(v: @T);\n  * Remove a task-local data value from the table, returning the\n  * reference that was originally created to insert it.\n  */\n-pub unsafe fn local_data_pop<T:Durable>(\n+pub unsafe fn local_data_pop<T: 'static>(\n     key: LocalDataKey<T>) -> Option<@T> {\n \n     local_pop(Handle::new(), key)\n@@ -58,7 +58,7 @@ pub unsafe fn local_data_pop<T:Durable>(\n  * Retrieve a task-local data value. It will also be kept alive in the\n  * table until explicitly removed.\n  */\n-pub unsafe fn local_data_get<T:Durable>(\n+pub unsafe fn local_data_get<T: 'static>(\n     key: LocalDataKey<T>) -> Option<@T> {\n \n     local_get(Handle::new(), key)\n@@ -67,7 +67,7 @@ pub unsafe fn local_data_get<T:Durable>(\n  * Store a value in task-local data. If this key already has a value,\n  * that value is overwritten (and its destructor is run).\n  */\n-pub unsafe fn local_data_set<T:Durable>(\n+pub unsafe fn local_data_set<T: 'static>(\n     key: LocalDataKey<T>, data: @T) {\n \n     local_set(Handle::new(), key, data)\n@@ -76,7 +76,7 @@ pub unsafe fn local_data_set<T:Durable>(\n  * Modify a task-local data value. If the function returns 'None', the\n  * data is removed (and its reference dropped).\n  */\n-pub unsafe fn local_data_modify<T:Durable>(\n+pub unsafe fn local_data_modify<T: 'static>(\n     key: LocalDataKey<T>,\n     modify_fn: &fn(Option<@T>) -> Option<@T>) {\n \n@@ -215,3 +215,12 @@ fn test_tls_cleanup_on_failure() {\n         fail!();\n     }\n }\n+\n+#[test]\n+fn test_static_pointer() {\n+    unsafe {\n+        fn key(_x: @&'static int) { }\n+        static VALUE: int = 0;\n+        local_data_set(key, @&VALUE);\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "7240e0ca0a5ff382dc60db08b0717b356ce7a210", "filename": "src/libcore/task/local_data_priv.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b6f9295654b8bcad0c3cdd0651741082cedd6e75/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f9295654b8bcad0c3cdd0651741082cedd6e75/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data_priv.rs?ref=b6f9295654b8bcad0c3cdd0651741082cedd6e75", "patch": "@@ -44,7 +44,7 @@ impl Handle {\n }\n \n pub trait LocalData { }\n-impl<T:Durable> LocalData for @T { }\n+impl<T: 'static> LocalData for @T { }\n \n impl Eq for @LocalData {\n     fn eq(&self, other: &@LocalData) -> bool {\n@@ -131,15 +131,15 @@ unsafe fn get_newsched_local_map(local: *mut LocalStorage) -> TaskLocalMap {\n     }\n }\n \n-unsafe fn key_to_key_value<T:Durable>(key: LocalDataKey<T>) -> *libc::c_void {\n+unsafe fn key_to_key_value<T: 'static>(key: LocalDataKey<T>) -> *libc::c_void {\n     // Keys are closures, which are (fnptr,envptr) pairs. Use fnptr.\n     // Use reintepret_cast -- transmute would leak (forget) the closure.\n     let pair: (*libc::c_void, *libc::c_void) = cast::transmute_copy(&key);\n     pair.first()\n }\n \n // If returning Some(..), returns with @T with the map's reference. Careful!\n-unsafe fn local_data_lookup<T:Durable>(\n+unsafe fn local_data_lookup<T: 'static>(\n     map: TaskLocalMap, key: LocalDataKey<T>)\n     -> Option<(uint, *libc::c_void)> {\n \n@@ -157,7 +157,7 @@ unsafe fn local_data_lookup<T:Durable>(\n     }\n }\n \n-unsafe fn local_get_helper<T:Durable>(\n+unsafe fn local_get_helper<T: 'static>(\n     handle: Handle, key: LocalDataKey<T>,\n     do_pop: bool) -> Option<@T> {\n \n@@ -179,21 +179,21 @@ unsafe fn local_get_helper<T:Durable>(\n }\n \n \n-pub unsafe fn local_pop<T:Durable>(\n+pub unsafe fn local_pop<T: 'static>(\n     handle: Handle,\n     key: LocalDataKey<T>) -> Option<@T> {\n \n     local_get_helper(handle, key, true)\n }\n \n-pub unsafe fn local_get<T:Durable>(\n+pub unsafe fn local_get<T: 'static>(\n     handle: Handle,\n     key: LocalDataKey<T>) -> Option<@T> {\n \n     local_get_helper(handle, key, false)\n }\n \n-pub unsafe fn local_set<T:Durable>(\n+pub unsafe fn local_set<T: 'static>(\n     handle: Handle, key: LocalDataKey<T>, data: @T) {\n \n     let map = get_local_map(handle);\n@@ -225,7 +225,7 @@ pub unsafe fn local_set<T:Durable>(\n     }\n }\n \n-pub unsafe fn local_modify<T:Durable>(\n+pub unsafe fn local_modify<T: 'static>(\n     handle: Handle, key: LocalDataKey<T>,\n     modify_fn: &fn(Option<@T>) -> Option<@T>) {\n "}, {"sha": "c94dc3046dfd413fd17a07009d3bec6bb7567ed1", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 79, "deletions": 85, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/b6f9295654b8bcad0c3cdd0651741082cedd6e75/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f9295654b8bcad0c3cdd0651741082cedd6e75/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=b6f9295654b8bcad0c3cdd0651741082cedd6e75", "patch": "@@ -34,56 +34,55 @@ pub enum LangItem {\n     ConstTraitLangItem,         // 0\n     CopyTraitLangItem,          // 1\n     OwnedTraitLangItem,         // 2\n-    DurableTraitLangItem,       // 3\n-\n-    DropTraitLangItem,          // 4\n-\n-    AddTraitLangItem,           // 5\n-    SubTraitLangItem,           // 6\n-    MulTraitLangItem,           // 7\n-    DivTraitLangItem,           // 8\n-    RemTraitLangItem,           // 9\n-    NegTraitLangItem,           // 10\n-    NotTraitLangItem,           // 11\n-    BitXorTraitLangItem,        // 12\n-    BitAndTraitLangItem,        // 13\n-    BitOrTraitLangItem,         // 14\n-    ShlTraitLangItem,           // 15\n-    ShrTraitLangItem,           // 16\n-    IndexTraitLangItem,         // 17\n-\n-    EqTraitLangItem,            // 18\n-    OrdTraitLangItem,           // 19\n-\n-    StrEqFnLangItem,            // 20\n-    UniqStrEqFnLangItem,        // 21\n-    AnnihilateFnLangItem,       // 22\n-    LogTypeFnLangItem,          // 23\n-    FailFnLangItem,             // 24\n-    FailBoundsCheckFnLangItem,  // 25\n-    ExchangeMallocFnLangItem,   // 26\n-    ExchangeFreeFnLangItem,     // 27\n-    MallocFnLangItem,           // 28\n-    FreeFnLangItem,             // 29\n-    BorrowAsImmFnLangItem,      // 30\n-    BorrowAsMutFnLangItem,      // 31\n-    ReturnToMutFnLangItem,      // 32\n-    CheckNotBorrowedFnLangItem, // 33\n-    StrDupUniqFnLangItem,       // 34\n-    RecordBorrowFnLangItem,     // 35\n-    UnrecordBorrowFnLangItem,   // 36\n-\n-    StartFnLangItem,            // 37\n+\n+    DropTraitLangItem,          // 3\n+\n+    AddTraitLangItem,           // 4\n+    SubTraitLangItem,           // 5\n+    MulTraitLangItem,           // 6\n+    DivTraitLangItem,           // 7\n+    RemTraitLangItem,           // 8\n+    NegTraitLangItem,           // 9\n+    NotTraitLangItem,           // 10\n+    BitXorTraitLangItem,        // 11\n+    BitAndTraitLangItem,        // 12\n+    BitOrTraitLangItem,         // 13\n+    ShlTraitLangItem,           // 14\n+    ShrTraitLangItem,           // 15\n+    IndexTraitLangItem,         // 16\n+\n+    EqTraitLangItem,            // 17\n+    OrdTraitLangItem,           // 18\n+\n+    StrEqFnLangItem,            // 19\n+    UniqStrEqFnLangItem,        // 20\n+    AnnihilateFnLangItem,       // 21\n+    LogTypeFnLangItem,          // 22\n+    FailFnLangItem,             // 23\n+    FailBoundsCheckFnLangItem,  // 24\n+    ExchangeMallocFnLangItem,   // 25\n+    ExchangeFreeFnLangItem,     // 26\n+    MallocFnLangItem,           // 27\n+    FreeFnLangItem,             // 28\n+    BorrowAsImmFnLangItem,      // 29\n+    BorrowAsMutFnLangItem,      // 30\n+    ReturnToMutFnLangItem,      // 31\n+    CheckNotBorrowedFnLangItem, // 32\n+    StrDupUniqFnLangItem,       // 33\n+    RecordBorrowFnLangItem,     // 34\n+    UnrecordBorrowFnLangItem,   // 35\n+\n+    StartFnLangItem,            // 36\n }\n \n pub struct LanguageItems {\n-    items: [Option<def_id>, ..38]\n+    items: [Option<def_id>, ..37]\n }\n \n pub impl LanguageItems {\n     pub fn new() -> LanguageItems {\n         LanguageItems {\n-            items: [ None, ..38 ]\n+            items: [ None, ..37 ]\n         }\n     }\n \n@@ -100,45 +99,44 @@ pub impl LanguageItems {\n             0  => \"const\",\n             1  => \"copy\",\n             2  => \"owned\",\n-            3  => \"durable\",\n-\n-            4  => \"drop\",\n-\n-            5  => \"add\",\n-            6  => \"sub\",\n-            7  => \"mul\",\n-            8  => \"div\",\n-            9  => \"rem\",\n-            10 => \"neg\",\n-            11 => \"not\",\n-            12 => \"bitxor\",\n-            13 => \"bitand\",\n-            14 => \"bitor\",\n-            15 => \"shl\",\n-            16 => \"shr\",\n-            17 => \"index\",\n-            18 => \"eq\",\n-            19 => \"ord\",\n-\n-            20 => \"str_eq\",\n-            21 => \"uniq_str_eq\",\n-            22 => \"annihilate\",\n-            23 => \"log_type\",\n-            24 => \"fail_\",\n-            25 => \"fail_bounds_check\",\n-            26 => \"exchange_malloc\",\n-            27 => \"exchange_free\",\n-            28 => \"malloc\",\n-            29 => \"free\",\n-            30 => \"borrow_as_imm\",\n-            31 => \"borrow_as_mut\",\n-            32 => \"return_to_mut\",\n-            33 => \"check_not_borrowed\",\n-            34 => \"strdup_uniq\",\n-            35 => \"record_borrow\",\n-            36 => \"unrecord_borrow\",\n-\n-            37 => \"start\",\n+\n+            3  => \"drop\",\n+\n+            4  => \"add\",\n+            5  => \"sub\",\n+            6  => \"mul\",\n+            7  => \"div\",\n+            8  => \"rem\",\n+            9 => \"neg\",\n+            10 => \"not\",\n+            11 => \"bitxor\",\n+            12 => \"bitand\",\n+            13 => \"bitor\",\n+            14 => \"shl\",\n+            15 => \"shr\",\n+            16 => \"index\",\n+            17 => \"eq\",\n+            18 => \"ord\",\n+\n+            19 => \"str_eq\",\n+            20 => \"uniq_str_eq\",\n+            21 => \"annihilate\",\n+            22 => \"log_type\",\n+            23 => \"fail_\",\n+            24 => \"fail_bounds_check\",\n+            25 => \"exchange_malloc\",\n+            26 => \"exchange_free\",\n+            27 => \"malloc\",\n+            28 => \"free\",\n+            29 => \"borrow_as_imm\",\n+            30 => \"borrow_as_mut\",\n+            31 => \"return_to_mut\",\n+            32 => \"check_not_borrowed\",\n+            33 => \"strdup_uniq\",\n+            34 => \"record_borrow\",\n+            35 => \"unrecord_borrow\",\n+\n+            36 => \"start\",\n \n             _ => \"???\"\n         }\n@@ -155,9 +153,6 @@ pub impl LanguageItems {\n     pub fn owned_trait(&const self) -> def_id {\n         self.items[OwnedTraitLangItem as uint].get()\n     }\n-    pub fn durable_trait(&const self) -> def_id {\n-        self.items[DurableTraitLangItem as uint].get()\n-    }\n \n     pub fn drop_trait(&const self) -> def_id {\n         self.items[DropTraitLangItem as uint].get()\n@@ -274,7 +269,6 @@ fn LanguageItemCollector(crate: @crate,\n     item_refs.insert(@~\"const\", ConstTraitLangItem as uint);\n     item_refs.insert(@~\"copy\", CopyTraitLangItem as uint);\n     item_refs.insert(@~\"owned\", OwnedTraitLangItem as uint);\n-    item_refs.insert(@~\"durable\", DurableTraitLangItem as uint);\n \n     item_refs.insert(@~\"drop\", DropTraitLangItem as uint);\n "}, {"sha": "0baad7e7b7a7bb8bc08c02d3ac9be650c8b59a0c", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b6f9295654b8bcad0c3cdd0651741082cedd6e75/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f9295654b8bcad0c3cdd0651741082cedd6e75/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=b6f9295654b8bcad0c3cdd0651741082cedd6e75", "patch": "@@ -101,7 +101,7 @@ pub fn get_region_reporting_err(\n     }\n }\n \n-pub fn ast_region_to_region<AC:AstConv,RS:region_scope + Copy + Durable>(\n+pub fn ast_region_to_region<AC:AstConv,RS:region_scope + Copy + 'static>(\n     self: &AC,\n     rscope: &RS,\n     default_span: span,\n@@ -126,7 +126,7 @@ pub fn ast_region_to_region<AC:AstConv,RS:region_scope + Copy + Durable>(\n     get_region_reporting_err(self.tcx(), span, opt_lifetime, res)\n }\n \n-fn ast_path_substs<AC:AstConv,RS:region_scope + Copy + Durable>(\n+fn ast_path_substs<AC:AstConv,RS:region_scope + Copy + 'static>(\n     self: &AC,\n     rscope: &RS,\n     def_id: ast::def_id,\n@@ -180,7 +180,7 @@ fn ast_path_substs<AC:AstConv,RS:region_scope + Copy + Durable>(\n     substs {self_r:self_r, self_ty:self_ty, tps:tps}\n }\n \n-pub fn ast_path_to_substs_and_ty<AC:AstConv,RS:region_scope + Copy + Durable>(\n+pub fn ast_path_to_substs_and_ty<AC:AstConv,RS:region_scope + Copy + 'static>(\n     self: &AC,\n     rscope: &RS,\n     did: ast::def_id,\n@@ -197,7 +197,7 @@ pub fn ast_path_to_substs_and_ty<AC:AstConv,RS:region_scope + Copy + Durable>(\n     ty_param_substs_and_ty { substs: substs, ty: ty }\n }\n \n-pub fn ast_path_to_trait_ref<AC:AstConv,RS:region_scope + Copy + Durable>(\n+pub fn ast_path_to_trait_ref<AC:AstConv,RS:region_scope + Copy + 'static>(\n     self: &AC,\n     rscope: &RS,\n     trait_def_id: ast::def_id,\n@@ -221,7 +221,7 @@ pub fn ast_path_to_trait_ref<AC:AstConv,RS:region_scope + Copy + Durable>(\n }\n \n \n-pub fn ast_path_to_ty<AC:AstConv,RS:region_scope + Copy + Durable>(\n+pub fn ast_path_to_ty<AC:AstConv,RS:region_scope + Copy + 'static>(\n         self: &AC,\n         rscope: &RS,\n         did: ast::def_id,\n@@ -243,10 +243,10 @@ pub static NO_TPS: uint = 2;\n // Parses the programmer's textual representation of a type into our\n // internal notion of a type. `getter` is a function that returns the type\n // corresponding to a definition ID:\n-pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Copy + Durable>(\n+pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Copy + 'static>(\n     self: &AC, rscope: &RS, ast_ty: @ast::Ty) -> ty::t {\n \n-    fn ast_mt_to_mt<AC:AstConv, RS:region_scope + Copy + Durable>(\n+    fn ast_mt_to_mt<AC:AstConv, RS:region_scope + Copy + 'static>(\n         self: &AC, rscope: &RS, mt: &ast::mt) -> ty::mt {\n \n         ty::mt {ty: ast_ty_to_ty(self, rscope, mt.ty), mutbl: mt.mutbl}\n@@ -255,7 +255,7 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Copy + Durable>(\n     // Handle @, ~, and & being able to mean estrs and evecs.\n     // If a_seq_ty is a str or a vec, make it an estr/evec.\n     // Also handle first-class trait types.\n-    fn mk_pointer<AC:AstConv,RS:region_scope + Copy + Durable>(\n+    fn mk_pointer<AC:AstConv,RS:region_scope + Copy + 'static>(\n         self: &AC,\n         rscope: &RS,\n         a_seq_ty: &ast::mt,\n@@ -497,7 +497,7 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Copy + Durable>(\n }\n \n pub fn ty_of_arg<AC:AstConv,\n-                 RS:region_scope + Copy + Durable>(\n+                 RS:region_scope + Copy + 'static>(\n                  self: &AC,\n                  rscope: &RS,\n                  a: ast::arg,\n@@ -549,7 +549,7 @@ struct SelfInfo {\n     self_transform: ast::self_ty\n }\n \n-pub fn ty_of_method<AC:AstConv,RS:region_scope + Copy + Durable>(\n+pub fn ty_of_method<AC:AstConv,RS:region_scope + Copy + 'static>(\n     self: &AC,\n     rscope: &RS,\n     purity: ast::purity,\n@@ -567,7 +567,7 @@ pub fn ty_of_method<AC:AstConv,RS:region_scope + Copy + Durable>(\n     (a.get(), b)\n }\n \n-pub fn ty_of_bare_fn<AC:AstConv,RS:region_scope + Copy + Durable>(\n+pub fn ty_of_bare_fn<AC:AstConv,RS:region_scope + Copy + 'static>(\n     self: &AC,\n     rscope: &RS,\n     purity: ast::purity,\n@@ -580,7 +580,7 @@ pub fn ty_of_bare_fn<AC:AstConv,RS:region_scope + Copy + Durable>(\n     b\n }\n \n-fn ty_of_method_or_bare_fn<AC:AstConv,RS:region_scope + Copy + Durable>(\n+fn ty_of_method_or_bare_fn<AC:AstConv,RS:region_scope + Copy + 'static>(\n     self: &AC,\n     rscope: &RS,\n     purity: ast::purity,\n@@ -616,7 +616,7 @@ fn ty_of_method_or_bare_fn<AC:AstConv,RS:region_scope + Copy + Durable>(\n                                 output: output_ty}\n             });\n \n-    fn transform_self_ty<AC:AstConv,RS:region_scope + Copy + Durable>(\n+    fn transform_self_ty<AC:AstConv,RS:region_scope + Copy + 'static>(\n         self: &AC,\n         rscope: &RS,\n         self_info: &SelfInfo) -> Option<ty::t>\n@@ -649,7 +649,7 @@ fn ty_of_method_or_bare_fn<AC:AstConv,RS:region_scope + Copy + Durable>(\n     }\n }\n \n-pub fn ty_of_closure<AC:AstConv,RS:region_scope + Copy + Durable>(\n+pub fn ty_of_closure<AC:AstConv,RS:region_scope + Copy + 'static>(\n         self: &AC,\n         rscope: &RS,\n         sigil: ast::Sigil,"}, {"sha": "33153bde5ac686d2687ee9ff8592c1c4b9966929", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6f9295654b8bcad0c3cdd0651741082cedd6e75/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f9295654b8bcad0c3cdd0651741082cedd6e75/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=b6f9295654b8bcad0c3cdd0651741082cedd6e75", "patch": "@@ -116,7 +116,7 @@ pub fn collect_item_types(ccx: @mut CrateCtxt, crate: @ast::crate) {\n }\n \n impl CrateCtxt {\n-    fn to_ty<RS:region_scope + Copy + Durable>(\n+    fn to_ty<RS:region_scope + Copy + 'static>(\n         &self, rs: &RS, ast_ty: @ast::Ty) -> ty::t\n     {\n         ast_ty_to_ty(self, rs, ast_ty)\n@@ -1179,7 +1179,7 @@ pub fn ty_generics(ccx: &CrateCtxt,\n          * enum consisting of a newtyped Ty or a region) to ty's\n          * notion of ty param bounds, which can either be user-defined\n          * traits, or one of the four built-in traits (formerly known\n-         * as kinds): Const, Copy, Durable, and Send.\n+         * as kinds): Const, Copy, and Send.\n          */\n \n         @ast_bounds.flat_map_to_vec(|b| {\n@@ -1194,8 +1194,6 @@ pub fn ty_generics(ccx: &CrateCtxt,\n                         ~[ty::bound_copy]\n                     } else if trait_ref.def_id == li.const_trait() {\n                         ~[ty::bound_const]\n-                    } else if trait_ref.def_id == li.durable_trait() {\n-                        ~[ty::bound_durable]\n                     } else {\n                         // Must be a user-defined trait\n                         ~[ty::bound_trait(trait_ref)]"}, {"sha": "316792f688f4692a9e50b89b349f4c3780e4df5a", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6f9295654b8bcad0c3cdd0651741082cedd6e75/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f9295654b8bcad0c3cdd0651741082cedd6e75/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=b6f9295654b8bcad0c3cdd0651741082cedd6e75", "patch": "@@ -266,7 +266,7 @@ pub struct binding_rscope {\n     region_param_names: RegionParamNames,\n }\n \n-pub fn in_binding_rscope<RS:region_scope + Copy + Durable>(\n+pub fn in_binding_rscope<RS:region_scope + Copy + 'static>(\n         self: &RS,\n         region_param_names: RegionParamNames)\n      -> binding_rscope {"}, {"sha": "4c7f2edc6b048545253e894a1fb66f85424ce70e", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6f9295654b8bcad0c3cdd0651741082cedd6e75/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f9295654b8bcad0c3cdd0651741082cedd6e75/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=b6f9295654b8bcad0c3cdd0651741082cedd6e75", "patch": "@@ -148,7 +148,7 @@ fn get<'r, T>(elts: &'r [Option<T>], i: uint) -> &'r T {\n mod tests {\n     use super::*;\n     use core::cmp::Eq;\n-    use core::kinds::{Durable, Copy};\n+    use core::kinds::Copy;\n \n     #[test]\n     fn test_simple() {\n@@ -232,7 +232,7 @@ mod tests {\n     }\n \n     #[cfg(test)]\n-    fn test_parameterized<T:Copy + Eq + Durable>(a: T, b: T, c: T, d: T) {\n+    fn test_parameterized<T:Copy + Eq>(a: T, b: T, c: T, d: T) {\n         let mut deq = Deque::new();\n         assert!(deq.len() == 0);\n         deq.add_front(a);"}, {"sha": "391e9b39610c0af4a4179275c6b90a3e6ab4f4d3", "filename": "src/test/auxiliary/issue4516_ty_param_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6f9295654b8bcad0c3cdd0651741082cedd6e75/src%2Ftest%2Fauxiliary%2Fissue4516_ty_param_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f9295654b8bcad0c3cdd0651741082cedd6e75/src%2Ftest%2Fauxiliary%2Fissue4516_ty_param_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue4516_ty_param_lib.rs?ref=b6f9295654b8bcad0c3cdd0651741082cedd6e75", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub fn to_closure<A:Durable + Copy>(x: A) -> @fn() -> A {\n+pub fn to_closure<A:'static + Copy>(x: A) -> @fn() -> A {\n     let result: @fn() -> A = || copy x;\n     result\n }"}, {"sha": "42cf9c793d11811117b7af00c4c91dc5c5e046c8", "filename": "src/test/compile-fail/core-tls-store-pointer.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b6f9295654b8bcad0c3cdd0651741082cedd6e75/src%2Ftest%2Fcompile-fail%2Fcore-tls-store-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f9295654b8bcad0c3cdd0651741082cedd6e75/src%2Ftest%2Fcompile-fail%2Fcore-tls-store-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcore-tls-store-pointer.rs?ref=b6f9295654b8bcad0c3cdd0651741082cedd6e75", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Testing that we can't store a borrowed pointer it task-local storage\n+\n+use core::task::local_data::*;\n+\n+fn key(_x: @&int) { }\n+\n+fn main() {\n+    unsafe {\n+        local_data_set(key, @&0); //~ ERROR does not fulfill `'static`\n+    }\n+}\n\\ No newline at end of file"}]}