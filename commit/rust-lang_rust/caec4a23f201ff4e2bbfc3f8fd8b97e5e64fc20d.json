{"sha": "caec4a23f201ff4e2bbfc3f8fd8b97e5e64fc20d", "node_id": "C_kwDOAAsO6NoAKGNhZWM0YTIzZjIwMWZmNGUyYmJmYzNmOGZkOGI5N2U1ZTY0ZmMyMGQ", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-01-16T20:03:16Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-01-20T21:05:26Z"}, "message": "Extra cfg_hide a bit to handle inner cfgs", "tree": {"sha": "4753d4ed25f5af7af392f7d06bb3b7e893055ef4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4753d4ed25f5af7af392f7d06bb3b7e893055ef4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caec4a23f201ff4e2bbfc3f8fd8b97e5e64fc20d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caec4a23f201ff4e2bbfc3f8fd8b97e5e64fc20d", "html_url": "https://github.com/rust-lang/rust/commit/caec4a23f201ff4e2bbfc3f8fd8b97e5e64fc20d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caec4a23f201ff4e2bbfc3f8fd8b97e5e64fc20d/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd005f53c204136732c446dc476afc1266de730b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd005f53c204136732c446dc476afc1266de730b", "html_url": "https://github.com/rust-lang/rust/commit/fd005f53c204136732c446dc476afc1266de730b"}], "stats": {"total": 27, "additions": 11, "deletions": 16}, "files": [{"sha": "afa02f1e5c73edc2b764e08b188a9266cbd09a34", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/caec4a23f201ff4e2bbfc3f8fd8b97e5e64fc20d/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caec4a23f201ff4e2bbfc3f8fd8b97e5e64fc20d/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=caec4a23f201ff4e2bbfc3f8fd8b97e5e64fc20d", "patch": "@@ -8,6 +8,7 @@ use std::mem;\n use std::ops;\n \n use rustc_ast::{LitKind, MetaItem, MetaItemKind, NestedMetaItem};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_feature::Features;\n use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{sym, Symbol};\n@@ -45,7 +46,7 @@ impl Cfg {\n     /// Parses a `NestedMetaItem` into a `Cfg`.\n     fn parse_nested(\n         nested_cfg: &NestedMetaItem,\n-        exclude: &[Symbol],\n+        exclude: &FxHashSet<Cfg>,\n     ) -> Result<Option<Cfg>, InvalidCfgError> {\n         match nested_cfg {\n             NestedMetaItem::MetaItem(ref cfg) => Cfg::parse_without(cfg, exclude),\n@@ -57,7 +58,7 @@ impl Cfg {\n \n     crate fn parse_without(\n         cfg: &MetaItem,\n-        exclude: &[Symbol],\n+        exclude: &FxHashSet<Cfg>,\n     ) -> Result<Option<Cfg>, InvalidCfgError> {\n         let name = match cfg.ident() {\n             Some(ident) => ident.name,\n@@ -70,19 +71,13 @@ impl Cfg {\n         };\n         match cfg.kind {\n             MetaItemKind::Word => {\n-                if exclude.contains(&name) {\n-                    Ok(None)\n-                } else {\n-                    Ok(Some(Cfg::Cfg(name, None)))\n-                }\n+                let cfg = Cfg::Cfg(name, None);\n+                if exclude.contains(&cfg) { Ok(None) } else { Ok(Some(cfg)) }\n             }\n             MetaItemKind::NameValue(ref lit) => match lit.kind {\n                 LitKind::Str(value, _) => {\n-                    if exclude.contains(&name) {\n-                        Ok(None)\n-                    } else {\n-                        Ok(Some(Cfg::Cfg(name, Some(value))))\n-                    }\n+                    let cfg = Cfg::Cfg(name, Some(value));\n+                    if exclude.contains(&cfg) { Ok(None) } else { Ok(Some(cfg)) }\n                 }\n                 _ => Err(InvalidCfgError {\n                     // FIXME: if the main #[cfg] syntax decided to support non-string literals,\n@@ -126,7 +121,7 @@ impl Cfg {\n     /// If the content is not properly formatted, it will return an error indicating what and where\n     /// the error is.\n     crate fn parse(cfg: &MetaItem) -> Result<Cfg, InvalidCfgError> {\n-        Self::parse_without(cfg, &[]).map(|ret| ret.unwrap())\n+        Self::parse_without(cfg, &FxHashSet::default()).map(|ret| ret.unwrap())\n     }\n \n     /// Checks whether the given configuration can be matched in the current session."}, {"sha": "92e8b89311577e98237d0d48aef4271b5f2032e3", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/caec4a23f201ff4e2bbfc3f8fd8b97e5e64fc20d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caec4a23f201ff4e2bbfc3f8fd8b97e5e64fc20d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=caec4a23f201ff4e2bbfc3f8fd8b97e5e64fc20d", "patch": "@@ -831,11 +831,10 @@ impl AttributesExt for [ast::Attribute] {\n                 self.iter()\n                     .filter(|attr| attr.has_name(sym::cfg))\n                     .filter_map(|attr| single(attr.meta_item_list()?))\n-                    .filter_map(|attr| match Cfg::parse_without(attr.meta_item()?, &[sym::test]) {\n+                    .filter_map(|attr| match Cfg::parse_without(attr.meta_item()?, hidden_cfg) {\n                         Ok(Some(c)) => Some(c),\n                         _ => None,\n                     })\n-                    .filter(|cfg| !hidden_cfg.contains(cfg))\n                     .fold(Cfg::True, |cfg, new_cfg| cfg & new_cfg)\n             } else {\n                 Cfg::True"}, {"sha": "2cbb3324a5e0499051584b0e1281f6e86061f26b", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/caec4a23f201ff4e2bbfc3f8fd8b97e5e64fc20d/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caec4a23f201ff4e2bbfc3f8fd8b97e5e64fc20d/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=caec4a23f201ff4e2bbfc3f8fd8b97e5e64fc20d", "patch": "@@ -141,6 +141,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     })\n                     .collect::<Vec<_>>()\n             })\n+            .chain([Cfg::Cfg(sym::test, None)].into_iter())\n             .collect();\n \n         self.cx.cache.exact_paths = self.exact_paths;"}, {"sha": "636957fe9980d51df43f2fcc587461a0e2601e63", "filename": "src/test/rustdoc/doc-cfg-hide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caec4a23f201ff4e2bbfc3f8fd8b97e5e64fc20d/src%2Ftest%2Frustdoc%2Fdoc-cfg-hide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caec4a23f201ff4e2bbfc3f8fd8b97e5e64fc20d/src%2Ftest%2Frustdoc%2Fdoc-cfg-hide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-cfg-hide.rs?ref=caec4a23f201ff4e2bbfc3f8fd8b97e5e64fc20d", "patch": "@@ -26,7 +26,7 @@ pub struct Hyperdulia;\n \n // @has 'oud/struct.Oystercatcher.html'\n // @count   - '//*[@class=\"stab portability\"]' 1\n-// @matches - '//*[@class=\"stab portability\"]' 'crate features solecism and oystercatcher'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature oystercatcher only'\n // compile-flags:--cfg feature=\"oystercatcher\"\n #[cfg(all(feature = \"solecism\", feature = \"oystercatcher\"))]\n pub struct Oystercatcher;"}]}