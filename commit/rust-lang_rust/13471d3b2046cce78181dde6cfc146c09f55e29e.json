{"sha": "13471d3b2046cce78181dde6cfc146c09f55e29e", "node_id": "C_kwDOAAsO6NoAKDEzNDcxZDNiMjA0NmNjZTc4MTgxZGRlNmNmYzE0NmMwOWY1NWUyOWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-02T17:38:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-02T17:38:31Z"}, "message": "Auto merge of #108654 - LeSeulArtichaut:revert-99767, r=compiler-errors\n\nRevert stabilization of `#![feature(target_feature_11)]`\n\nThis reverts #99767 due to the presence of bugs #108645 and #108646.\n\ncc `@joshtriplett`\ncc tracking issue #69098\nr? `@ghost`", "tree": {"sha": "690c63fff5bbb82c24fc29684e3d4fc8da04de92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/690c63fff5bbb82c24fc29684e3d4fc8da04de92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13471d3b2046cce78181dde6cfc146c09f55e29e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13471d3b2046cce78181dde6cfc146c09f55e29e", "html_url": "https://github.com/rust-lang/rust/commit/13471d3b2046cce78181dde6cfc146c09f55e29e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13471d3b2046cce78181dde6cfc146c09f55e29e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e966bcd03f6d0fae41f58cf80bcb10566ab971a", "html_url": "https://github.com/rust-lang/rust/commit/7e966bcd03f6d0fae41f58cf80bcb10566ab971a"}, {"sha": "bfe5189904b49092639fd9e0d9df6e9b001cd961", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfe5189904b49092639fd9e0d9df6e9b001cd961", "html_url": "https://github.com/rust-lang/rust/commit/bfe5189904b49092639fd9e0d9df6e9b001cd961"}], "stats": {"total": 229, "additions": 151, "deletions": 78}, "files": [{"sha": "7d5c0048626c9dadc7308059409382c2813d79a5", "filename": "compiler/rustc_codegen_ssa/src/codegen_attrs.rs", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -224,23 +224,34 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n             if !tcx.is_closure(did.to_def_id())\n                 && tcx.fn_sig(did).skip_binder().unsafety() == hir::Unsafety::Normal\n             {\n-                // The `#[target_feature]` attribute is allowed on\n-                // WebAssembly targets on all functions, including safe\n-                // ones. Other targets have conditions on the usage of\n-                // `#[target_feature]` because on most targets\n-                // execution of instructions that are not supported is\n-                // considered undefined behavior. For WebAssembly which is a\n-                // 100% safe target at execution time it's not possible to\n-                // execute undefined instructions, and even if a future\n-                // feature was added in some form for this it would be a\n-                // deterministic trap. There is no undefined behavior when\n-                // executing WebAssembly so `#[target_feature]` is allowed\n-                // on safe functions (but again, only for WebAssembly)\n-                //\n-                // Note that this is also allowed if `actually_rustdoc` so\n-                // if a target is documenting some wasm-specific code then\n-                // it's not spuriously denied.\n-                if !(tcx.sess.target.is_like_wasm || tcx.sess.opts.actually_rustdoc) {\n+                if tcx.sess.target.is_like_wasm || tcx.sess.opts.actually_rustdoc {\n+                    // The `#[target_feature]` attribute is allowed on\n+                    // WebAssembly targets on all functions, including safe\n+                    // ones. Other targets require that `#[target_feature]` is\n+                    // only applied to unsafe functions (pending the\n+                    // `target_feature_11` feature) because on most targets\n+                    // execution of instructions that are not supported is\n+                    // considered undefined behavior. For WebAssembly which is a\n+                    // 100% safe target at execution time it's not possible to\n+                    // execute undefined instructions, and even if a future\n+                    // feature was added in some form for this it would be a\n+                    // deterministic trap. There is no undefined behavior when\n+                    // executing WebAssembly so `#[target_feature]` is allowed\n+                    // on safe functions (but again, only for WebAssembly)\n+                    //\n+                    // Note that this is also allowed if `actually_rustdoc` so\n+                    // if a target is documenting some wasm-specific code then\n+                    // it's not spuriously denied.\n+                } else if !tcx.features().target_feature_11 {\n+                    let mut err = feature_err(\n+                        &tcx.sess.parse_sess,\n+                        sym::target_feature_11,\n+                        attr.span,\n+                        \"`#[target_feature(..)]` can only be applied to `unsafe` functions\",\n+                    );\n+                    err.span_label(tcx.def_span(did), \"not an `unsafe` function\");\n+                    err.emit();\n+                } else {\n                     check_target_feature_trait_unsafe(tcx, did, attr.span);\n                 }\n             }\n@@ -467,7 +478,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n     });\n \n     // #73631: closures inherit `#[target_feature]` annotations\n-    if tcx.is_closure(did.to_def_id()) {\n+    if tcx.features().target_feature_11 && tcx.is_closure(did.to_def_id()) {\n         let owner_id = tcx.parent(did.to_def_id());\n         if tcx.def_kind(owner_id).has_codegen_attrs() {\n             codegen_fn_attrs"}, {"sha": "e7b2df34ccca2bd27698e21e12ac719ea7d22d42", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -314,8 +314,6 @@ declare_features! (\n     (accepted, struct_variant, \"1.0.0\", None, None),\n     /// Allows `#[target_feature(...)]`.\n     (accepted, target_feature, \"1.27.0\", None, None),\n-    /// Allows the use of `#[target_feature]` on safe functions.\n-    (accepted, target_feature_11, \"CURRENT_RUSTC_VERSION\", Some(69098), None),\n     /// Allows `fn main()` with return types which implements `Termination` (RFC 1937).\n     (accepted, termination_trait, \"1.26.0\", Some(43301), None),\n     /// Allows `#[test]` functions where the return type implements `Termination` (RFC 1937)."}, {"sha": "a01914f969eb725343b00a35d08f0a3105c3dcd7", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -510,6 +510,8 @@ declare_features! (\n     (active, strict_provenance, \"1.61.0\", Some(95228), None),\n     /// Allows string patterns to dereference values to match them.\n     (active, string_deref_patterns, \"1.67.0\", Some(87121), None),\n+    /// Allows the use of `#[target_feature]` on safe functions.\n+    (active, target_feature_11, \"1.45.0\", Some(69098), None),\n     /// Allows using `#[thread_local]` on `static` items.\n     (active, thread_local, \"1.0.0\", Some(29594), None),\n     /// Allows defining `trait X = A + B;` alias items."}, {"sha": "24bad799fc85a8b58e7e345c2f66656d5feebc21", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -233,6 +233,7 @@\n #![feature(simd_ffi)]\n #![feature(staged_api)]\n #![feature(stmt_expr_attributes)]\n+#![feature(target_feature_11)]\n #![feature(trait_alias)]\n #![feature(transparent_unions)]\n #![feature(try_blocks)]"}, {"sha": "e30a5e116ea4b3d8e66835280ffdbb3d6da162af", "filename": "tests/mir-opt/inline/inline_compatibility.inlined_no_sanitize.Inline.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -4,14 +4,14 @@\n   fn inlined_no_sanitize() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline_compatibility.rs:+0:37: +0:37\n       let _1: ();                          // in scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:18\n-+     scope 1 (inlined no_sanitize) {      // at $DIR/inline_compatibility.rs:23:5: 23:18\n++     scope 1 (inlined no_sanitize) {      // at $DIR/inline_compatibility.rs:24:5: 24:18\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:18\n -         _1 = no_sanitize() -> bb1;       // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:18\n -                                          // mir::Constant\n--                                          // + span: $DIR/inline_compatibility.rs:23:5: 23:16\n+-                                          // + span: $DIR/inline_compatibility.rs:24:5: 24:16\n -                                          // + literal: Const { ty: unsafe fn() {no_sanitize}, val: Value(<ZST>) }\n -     }\n - "}, {"sha": "c2b3c46a30c69c5c22f3afff45b8b7776a0838cf", "filename": "tests/mir-opt/inline/inline_compatibility.inlined_target_feature.Inline.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -4,14 +4,14 @@\n   fn inlined_target_feature() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline_compatibility.rs:+0:40: +0:40\n       let _1: ();                          // in scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:21\n-+     scope 1 (inlined target_feature) {   // at $DIR/inline_compatibility.rs:12:5: 12:21\n++     scope 1 (inlined target_feature) {   // at $DIR/inline_compatibility.rs:13:5: 13:21\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:21\n -         _1 = target_feature() -> bb1;    // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:21\n -                                          // mir::Constant\n--                                          // + span: $DIR/inline_compatibility.rs:12:5: 12:19\n+-                                          // + span: $DIR/inline_compatibility.rs:13:5: 13:19\n -                                          // + literal: Const { ty: unsafe fn() {target_feature}, val: Value(<ZST>) }\n -     }\n - "}, {"sha": "0ca5a5f70b7fddaf4b2b17caa8bcea5a709108e2", "filename": "tests/mir-opt/inline/inline_compatibility.not_inlined_c_variadic.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_c_variadic.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_c_variadic.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_c_variadic.Inline.diff?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -12,7 +12,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:9: +1:10\n           _1 = sum(const 4_u32, const 4_u32, const 30_u32, const 200_u32, const 1000_u32) -> bb1; // scope 0 at $DIR/inline_compatibility.rs:+1:13: +1:52\n                                            // mir::Constant\n-                                           // + span: $DIR/inline_compatibility.rs:41:13: 41:16\n+                                           // + span: $DIR/inline_compatibility.rs:42:13: 42:16\n                                            // + literal: Const { ty: unsafe extern \"C\" fn(u32, ...) -> u32 {sum}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "00d405c77f91de0a4c19eb5a32bc1024c1d3ce1b", "filename": "tests/mir-opt/inline/inline_compatibility.not_inlined_no_sanitize.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_no_sanitize.Inline.diff?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -9,7 +9,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:18\n           _1 = no_sanitize() -> bb1;       // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:18\n                                            // mir::Constant\n-                                           // + span: $DIR/inline_compatibility.rs:28:5: 28:16\n+                                           // + span: $DIR/inline_compatibility.rs:29:5: 29:16\n                                            // + literal: Const { ty: unsafe fn() {no_sanitize}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "8b9c86f5515a38bc118b9802ace9a403ea6f208b", "filename": "tests/mir-opt/inline/inline_compatibility.not_inlined_target_feature.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_compatibility.not_inlined_target_feature.Inline.diff?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -9,7 +9,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:21\n           _1 = target_feature() -> bb1;    // scope 0 at $DIR/inline_compatibility.rs:+1:5: +1:21\n                                            // mir::Constant\n-                                           // + span: $DIR/inline_compatibility.rs:17:5: 17:19\n+                                           // + span: $DIR/inline_compatibility.rs:18:5: 18:19\n                                            // + literal: Const { ty: unsafe fn() {target_feature}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "30aff0a64efb91ff24c9c1cf24e74531e4502080", "filename": "tests/mir-opt/inline/inline_compatibility.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fmir-opt%2Finline%2Finline_compatibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fmir-opt%2Finline%2Finline_compatibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_compatibility.rs?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -4,6 +4,7 @@\n \n #![crate_type = \"lib\"]\n #![feature(no_sanitize)]\n+#![feature(target_feature_11)]\n #![feature(c_variadic)]\n \n // EMIT_MIR inline_compatibility.inlined_target_feature.Inline.diff"}, {"sha": "669fd7e7e46e527441ef9998c111f89cc388132f", "filename": "tests/ui/asm/x86_64/issue-89875.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Fasm%2Fx86_64%2Fissue-89875.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Fasm%2Fx86_64%2Fissue-89875.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm%2Fx86_64%2Fissue-89875.rs?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -2,6 +2,8 @@\n // needs-asm-support\n // only-x86_64\n \n+#![feature(target_feature_11)]\n+\n use std::arch::asm;\n \n #[target_feature(enable = \"avx\")]"}, {"sha": "e0842bfa4cde4fb9b16130a2474efc28f4519dfc", "filename": "tests/ui/rfcs/rfc-2396-target_feature-11/check-pass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fcheck-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fcheck-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fcheck-pass.rs?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -11,6 +11,8 @@\n // revisions: mir thir\n // [thir]compile-flags: -Z thir-unsafeck\n \n+#![feature(target_feature_11)]\n+\n #[target_feature(enable = \"sse2\")]\n const fn sse2() {}\n "}, {"sha": "a59d7c2d784c7b5830a5e1545d4460588c45ffe6", "filename": "tests/ui/rfcs/rfc-2396-target_feature-11/closures-inherit-target_feature.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fclosures-inherit-target_feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fclosures-inherit-target_feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fclosures-inherit-target_feature.rs?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -5,6 +5,8 @@\n // [thir]compile-flags: -Z thir-unsafeck\n // only-x86_64\n \n+#![feature(target_feature_11)]\n+\n #[target_feature(enable=\"avx\")]\n fn also_use_avx() {\n     println!(\"Hello from AVX\")"}, {"sha": "975d7a1f694c6960933369479a9e60933a026e8f", "filename": "tests/ui/rfcs/rfc-2396-target_feature-11/feature-gate-target_feature_11.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffeature-gate-target_feature_11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffeature-gate-target_feature_11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffeature-gate-target_feature_11.rs?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -0,0 +1,6 @@\n+// only-x86_64\n+\n+#[target_feature(enable = \"sse2\")] //~ ERROR can only be applied to `unsafe` functions\n+fn foo() {}\n+\n+fn main() {}"}, {"sha": "18917fd2556cf08aea3ff4994a4ab5b891c55bed", "filename": "tests/ui/rfcs/rfc-2396-target_feature-11/feature-gate-target_feature_11.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffeature-gate-target_feature_11.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffeature-gate-target_feature_11.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffeature-gate-target_feature_11.stderr?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -0,0 +1,14 @@\n+error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n+  --> $DIR/feature-gate-target_feature_11.rs:3:1\n+   |\n+LL | #[target_feature(enable = \"sse2\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn foo() {}\n+   | -------- not an `unsafe` function\n+   |\n+   = note: see issue #69098 <https://github.com/rust-lang/rust/issues/69098> for more information\n+   = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "b0ac5dc44ad9a67a77a0dd7b4c3c4253b5ad430b", "filename": "tests/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.mir.stderr?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/fn-ptr.rs:9:21\n+  --> $DIR/fn-ptr.rs:11:21\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ---------------------------------- `#[target_feature]` added here"}, {"sha": "c95d4a08e48bb1dc87506a37f827b2562298d2be", "filename": "tests/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.rs?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -2,6 +2,8 @@\n // [thir]compile-flags: -Z thir-unsafeck\n // only-x86_64\n \n+#![feature(target_feature_11)]\n+\n #[target_feature(enable = \"sse2\")]\n fn foo() {}\n "}, {"sha": "b0ac5dc44ad9a67a77a0dd7b4c3c4253b5ad430b", "filename": "tests/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.thir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.thir.stderr?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/fn-ptr.rs:9:21\n+  --> $DIR/fn-ptr.rs:11:21\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ---------------------------------- `#[target_feature]` added here"}, {"sha": "43bda49624e96e91df4fa34f046ca999f849ff6f", "filename": "tests/ui/rfcs/rfc-2396-target_feature-11/fn-traits.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.rs?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -1,5 +1,7 @@\n // only-x86_64\n \n+#![feature(target_feature_11)]\n+\n #[target_feature(enable = \"avx\")]\n fn foo() {}\n "}, {"sha": "fc7bf22775dd715188c1f287f14c96737a96b791", "filename": "tests/ui/rfcs/rfc-2396-target_feature-11/fn-traits.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: expected a `Fn<()>` closure, found `fn() {foo}`\n-  --> $DIR/fn-traits.rs:22:10\n+  --> $DIR/fn-traits.rs:24:10\n    |\n LL |     call(foo);\n    |     ---- ^^^ expected an `Fn<()>` closure, found `fn() {foo}`\n@@ -10,13 +10,13 @@ LL |     call(foo);\n    = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }`\n    = note: `#[target_feature]` functions do not implement the `Fn` traits\n note: required by a bound in `call`\n-  --> $DIR/fn-traits.rs:9:17\n+  --> $DIR/fn-traits.rs:11:17\n    |\n LL | fn call(f: impl Fn()) {\n    |                 ^^^^ required by this bound in `call`\n \n error[E0277]: expected a `FnMut<()>` closure, found `fn() {foo}`\n-  --> $DIR/fn-traits.rs:23:14\n+  --> $DIR/fn-traits.rs:25:14\n    |\n LL |     call_mut(foo);\n    |     -------- ^^^ expected an `FnMut<()>` closure, found `fn() {foo}`\n@@ -27,13 +27,13 @@ LL |     call_mut(foo);\n    = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }`\n    = note: `#[target_feature]` functions do not implement the `Fn` traits\n note: required by a bound in `call_mut`\n-  --> $DIR/fn-traits.rs:13:21\n+  --> $DIR/fn-traits.rs:15:21\n    |\n LL | fn call_mut(f: impl FnMut()) {\n    |                     ^^^^^^^ required by this bound in `call_mut`\n \n error[E0277]: expected a `FnOnce<()>` closure, found `fn() {foo}`\n-  --> $DIR/fn-traits.rs:24:15\n+  --> $DIR/fn-traits.rs:26:15\n    |\n LL |     call_once(foo);\n    |     --------- ^^^ expected an `FnOnce<()>` closure, found `fn() {foo}`\n@@ -44,13 +44,13 @@ LL |     call_once(foo);\n    = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }`\n    = note: `#[target_feature]` functions do not implement the `Fn` traits\n note: required by a bound in `call_once`\n-  --> $DIR/fn-traits.rs:17:22\n+  --> $DIR/fn-traits.rs:19:22\n    |\n LL | fn call_once(f: impl FnOnce()) {\n    |                      ^^^^^^^^ required by this bound in `call_once`\n \n error[E0277]: expected a `Fn<()>` closure, found `unsafe fn() {foo_unsafe}`\n-  --> $DIR/fn-traits.rs:26:10\n+  --> $DIR/fn-traits.rs:28:10\n    |\n LL |     call(foo_unsafe);\n    |     ---- ^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n@@ -61,13 +61,13 @@ LL |     call(foo_unsafe);\n    = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }`\n    = note: `#[target_feature]` functions do not implement the `Fn` traits\n note: required by a bound in `call`\n-  --> $DIR/fn-traits.rs:9:17\n+  --> $DIR/fn-traits.rs:11:17\n    |\n LL | fn call(f: impl Fn()) {\n    |                 ^^^^ required by this bound in `call`\n \n error[E0277]: expected a `FnMut<()>` closure, found `unsafe fn() {foo_unsafe}`\n-  --> $DIR/fn-traits.rs:28:14\n+  --> $DIR/fn-traits.rs:30:14\n    |\n LL |     call_mut(foo_unsafe);\n    |     -------- ^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n@@ -78,13 +78,13 @@ LL |     call_mut(foo_unsafe);\n    = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }`\n    = note: `#[target_feature]` functions do not implement the `Fn` traits\n note: required by a bound in `call_mut`\n-  --> $DIR/fn-traits.rs:13:21\n+  --> $DIR/fn-traits.rs:15:21\n    |\n LL | fn call_mut(f: impl FnMut()) {\n    |                     ^^^^^^^ required by this bound in `call_mut`\n \n error[E0277]: expected a `FnOnce<()>` closure, found `unsafe fn() {foo_unsafe}`\n-  --> $DIR/fn-traits.rs:30:15\n+  --> $DIR/fn-traits.rs:32:15\n    |\n LL |     call_once(foo_unsafe);\n    |     --------- ^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n@@ -95,7 +95,7 @@ LL |     call_once(foo_unsafe);\n    = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }`\n    = note: `#[target_feature]` functions do not implement the `Fn` traits\n note: required by a bound in `call_once`\n-  --> $DIR/fn-traits.rs:17:22\n+  --> $DIR/fn-traits.rs:19:22\n    |\n LL | fn call_once(f: impl FnOnce()) {\n    |                      ^^^^^^^^ required by this bound in `call_once`"}, {"sha": "033dcdfc08db036e397eb0110d9507ae7a6bbd2d", "filename": "tests/ui/rfcs/rfc-2396-target_feature-11/issue-99876.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fissue-99876.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fissue-99876.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fissue-99876.rs?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n \n+#![feature(target_feature_11)]\n+\n struct S<T>(T)\n where\n     [T; (|| {}, 1).1]: Copy;"}, {"sha": "0ef7b8b09f11fd8db36d0d868e38834da722fb42", "filename": "tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.mir.stderr?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -1,77 +1,77 @@\n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:21:5\n+  --> $DIR/safe-calls.rs:23:5\n    |\n LL |     sse2();\n    |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:24:5\n+  --> $DIR/safe-calls.rs:26:5\n    |\n LL |     avx_bmi2();\n    |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:27:5\n+  --> $DIR/safe-calls.rs:29:5\n    |\n LL |     Quux.avx_bmi2();\n    |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:34:5\n+  --> $DIR/safe-calls.rs:36:5\n    |\n LL |     avx_bmi2();\n    |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:37:5\n+  --> $DIR/safe-calls.rs:39:5\n    |\n LL |     Quux.avx_bmi2();\n    |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:44:5\n+  --> $DIR/safe-calls.rs:46:5\n    |\n LL |     sse2();\n    |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:47:5\n+  --> $DIR/safe-calls.rs:49:5\n    |\n LL |     avx_bmi2();\n    |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:50:5\n+  --> $DIR/safe-calls.rs:52:5\n    |\n LL |     Quux.avx_bmi2();\n    |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:58:5\n+  --> $DIR/safe-calls.rs:60:5\n    |\n LL |     sse2();\n    |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:63:18\n+  --> $DIR/safe-calls.rs:65:18\n    |\n LL | const name: () = sse2();\n    |                  ^^^^^^ call to function with `#[target_feature]`"}, {"sha": "cebc6f947840459fce5f103c60c5b1f5a4d5883e", "filename": "tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.rs?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -2,6 +2,8 @@\n // [thir]compile-flags: -Z thir-unsafeck\n // only-x86_64\n \n+#![feature(target_feature_11)]\n+\n #[target_feature(enable = \"sse2\")]\n const fn sse2() {}\n "}, {"sha": "c75ac6e8b9ae0c9561a60837bd4c03f3de2a10b2", "filename": "tests/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.thir.stderr?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -1,77 +1,77 @@\n error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:21:5\n+  --> $DIR/safe-calls.rs:23:5\n    |\n LL |     sse2();\n    |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:24:5\n+  --> $DIR/safe-calls.rs:26:5\n    |\n LL |     avx_bmi2();\n    |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:27:5\n+  --> $DIR/safe-calls.rs:29:5\n    |\n LL |     Quux.avx_bmi2();\n    |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:34:5\n+  --> $DIR/safe-calls.rs:36:5\n    |\n LL |     avx_bmi2();\n    |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:37:5\n+  --> $DIR/safe-calls.rs:39:5\n    |\n LL |     Quux.avx_bmi2();\n    |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:44:5\n+  --> $DIR/safe-calls.rs:46:5\n    |\n LL |     sse2();\n    |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:47:5\n+  --> $DIR/safe-calls.rs:49:5\n    |\n LL |     avx_bmi2();\n    |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:50:5\n+  --> $DIR/safe-calls.rs:52:5\n    |\n LL |     Quux.avx_bmi2();\n    |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:58:5\n+  --> $DIR/safe-calls.rs:60:5\n    |\n LL |     sse2();\n    |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:63:18\n+  --> $DIR/safe-calls.rs:65:18\n    |\n LL | const name: () = sse2();\n    |                  ^^^^^^ call to function with `#[target_feature]`"}, {"sha": "7314fa8cced2aa5921147578de949b0696901594", "filename": "tests/ui/rfcs/rfc-2396-target_feature-11/trait-impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ftrait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ftrait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ftrait-impl.rs?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -1,5 +1,7 @@\n // only-x86_64\n \n+#![feature(target_feature_11)]\n+\n trait Foo {\n     fn foo(&self);\n     unsafe fn unsf_foo(&self);"}, {"sha": "07d6e09005906c19cbe33076d7c6193c1ade7337", "filename": "tests/ui/rfcs/rfc-2396-target_feature-11/trait-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ftrait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ftrait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ftrait-impl.stderr?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -1,5 +1,5 @@\n error: `#[target_feature(..)]` cannot be applied to safe trait method\n-  --> $DIR/trait-impl.rs:11:5\n+  --> $DIR/trait-impl.rs:13:5\n    |\n LL |     #[target_feature(enable = \"sse2\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot be applied to safe trait method"}, {"sha": "ad1b6e96be6249e3184faace63c44be54d28e871", "filename": "tests/ui/target-feature/invalid-attribute.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.rs?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -25,6 +25,12 @@\n //~^ ERROR malformed `target_feature` attribute\n unsafe fn foo() {}\n \n+#[target_feature(enable = \"sse2\")]\n+//~^ ERROR `#[target_feature(..)]` can only be applied to `unsafe` functions\n+//~| NOTE see issue #69098\n+fn bar() {}\n+//~^ NOTE not an `unsafe` function\n+\n #[target_feature(enable = \"sse2\")]\n //~^ ERROR attribute should be applied to a function\n mod another {}\n@@ -69,8 +75,8 @@ trait Quux {\n \n impl Quux for Foo {\n     #[target_feature(enable = \"sse2\")]\n-    //~^ ERROR `#[target_feature(..)]` cannot be applied to safe trait method\n-    //~| NOTE cannot be applied to safe trait method\n+    //~^ ERROR `#[target_feature(..)]` can only be applied to `unsafe` functions\n+    //~| NOTE see issue #69098\n     fn foo() {}\n     //~^ NOTE not an `unsafe` function\n }\n@@ -80,8 +86,9 @@ fn main() {\n     //~^ ERROR attribute should be applied to a function\n     unsafe {\n         foo();\n+        bar();\n     }\n-    //~^^^ NOTE not a function\n+    //~^^^^ NOTE not a function\n \n     #[target_feature(enable = \"sse2\")]\n     //~^ ERROR attribute should be applied to a function"}, {"sha": "a2adfc67f08001322711a338f9cdbb292cc94beb", "filename": "tests/ui/target-feature/invalid-attribute.stderr", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13471d3b2046cce78181dde6cfc146c09f55e29e/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr?ref=13471d3b2046cce78181dde6cfc146c09f55e29e", "patch": "@@ -5,7 +5,7 @@ LL | #[target_feature = \"+sse2\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[target_feature(enable = \"name\")]`\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:28:1\n+  --> $DIR/invalid-attribute.rs:34:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -14,7 +14,7 @@ LL | mod another {}\n    | -------------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:33:1\n+  --> $DIR/invalid-attribute.rs:39:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -23,7 +23,7 @@ LL | const FOO: usize = 7;\n    | --------------------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:38:1\n+  --> $DIR/invalid-attribute.rs:44:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -32,7 +32,7 @@ LL | struct Foo;\n    | ----------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:43:1\n+  --> $DIR/invalid-attribute.rs:49:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -41,7 +41,7 @@ LL | enum Bar {}\n    | ----------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:48:1\n+  --> $DIR/invalid-attribute.rs:54:1\n    |\n LL |   #[target_feature(enable = \"sse2\")]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -54,7 +54,7 @@ LL | | }\n    | |_- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:56:1\n+  --> $DIR/invalid-attribute.rs:62:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -63,18 +63,19 @@ LL | trait Baz {}\n    | ------------ not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:79:5\n+  --> $DIR/invalid-attribute.rs:85:5\n    |\n LL |       #[target_feature(enable = \"sse2\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |\n LL | /     unsafe {\n LL | |         foo();\n+LL | |         bar();\n LL | |     }\n    | |_____- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:86:5\n+  --> $DIR/invalid-attribute.rs:93:5\n    |\n LL |     #[target_feature(enable = \"sse2\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -100,20 +101,36 @@ error: malformed `target_feature` attribute input\n LL | #[target_feature(disable = \"baz\")]\n    |                  ^^^^^^^^^^^^^^^ help: must be of the form: `enable = \"..\"`\n \n+error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n+  --> $DIR/invalid-attribute.rs:28:1\n+   |\n+LL | #[target_feature(enable = \"sse2\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | fn bar() {}\n+   | -------- not an `unsafe` function\n+   |\n+   = note: see issue #69098 <https://github.com/rust-lang/rust/issues/69098> for more information\n+   = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n+\n error: cannot use `#[inline(always)]` with `#[target_feature]`\n-  --> $DIR/invalid-attribute.rs:61:1\n+  --> $DIR/invalid-attribute.rs:67:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n \n-error: `#[target_feature(..)]` cannot be applied to safe trait method\n-  --> $DIR/invalid-attribute.rs:71:5\n+error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n+  --> $DIR/invalid-attribute.rs:77:5\n    |\n LL |     #[target_feature(enable = \"sse2\")]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot be applied to safe trait method\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL |     fn foo() {}\n    |     -------- not an `unsafe` function\n+   |\n+   = note: see issue #69098 <https://github.com/rust-lang/rust/issues/69098> for more information\n+   = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 15 previous errors\n \n+For more information about this error, try `rustc --explain E0658`."}]}