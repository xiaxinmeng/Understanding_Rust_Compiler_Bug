{"sha": "6a2525ccb84179d00991fdebf19084a976d676f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMjUyNWNjYjg0MTc5ZDAwOTkxZmRlYmYxOTA4NGE5NzZkNjc2ZjM=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-06-28T16:45:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-28T16:45:51Z"}, "message": "Merge pull request #1536 from CBenoit/master\n\nAdd lint `&ref x` patterns that could be just `x`", "tree": {"sha": "5b966cdac7f0f57d43e76b60aea1aa6afc3b444d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b966cdac7f0f57d43e76b60aea1aa6afc3b444d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a2525ccb84179d00991fdebf19084a976d676f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2525ccb84179d00991fdebf19084a976d676f3", "html_url": "https://github.com/rust-lang/rust/commit/6a2525ccb84179d00991fdebf19084a976d676f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a2525ccb84179d00991fdebf19084a976d676f3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "687fe1e1a936eb2f3baa94208bc2b075fbf4f7be", "url": "https://api.github.com/repos/rust-lang/rust/commits/687fe1e1a936eb2f3baa94208bc2b075fbf4f7be", "html_url": "https://github.com/rust-lang/rust/commit/687fe1e1a936eb2f3baa94208bc2b075fbf4f7be"}, {"sha": "e9964e762feb3dd9845b509ff46f32b08d03b8cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9964e762feb3dd9845b509ff46f32b08d03b8cc", "html_url": "https://github.com/rust-lang/rust/commit/e9964e762feb3dd9845b509ff46f32b08d03b8cc"}], "stats": {"total": 64, "additions": 63, "deletions": 1}, "files": [{"sha": "bd2da3f361b30d8c2c7d14cc4692d41ebb121827", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a2525ccb84179d00991fdebf19084a976d676f3/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/6a2525ccb84179d00991fdebf19084a976d676f3/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=6a2525ccb84179d00991fdebf19084a976d676f3", "patch": "@@ -471,6 +471,7 @@ All notable changes to this project will be documented in this file.\n [`mutex_integer`]: https://github.com/Manishearth/rust-clippy/wiki#mutex_integer\n [`needless_bool`]: https://github.com/Manishearth/rust-clippy/wiki#needless_bool\n [`needless_borrow`]: https://github.com/Manishearth/rust-clippy/wiki#needless_borrow\n+[`needless_borrowed_reference`]: https://github.com/Manishearth/rust-clippy/wiki#needless_borrowed_reference\n [`needless_continue`]: https://github.com/Manishearth/rust-clippy/wiki#needless_continue\n [`needless_lifetimes`]: https://github.com/Manishearth/rust-clippy/wiki#needless_lifetimes\n [`needless_pass_by_value`]: https://github.com/Manishearth/rust-clippy/wiki#needless_pass_by_value"}, {"sha": "6f4770ae669f6bb096ea5e91a235272af017fdaa", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a2525ccb84179d00991fdebf19084a976d676f3/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/6a2525ccb84179d00991fdebf19084a976d676f3/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=6a2525ccb84179d00991fdebf19084a976d676f3", "patch": "@@ -180,7 +180,7 @@ transparently:\n \n ## Lints\n \n-There are 199 lints included in this crate:\n+There are 200 lints included in this crate:\n \n name                                                                                                                   | default | triggers on\n -----------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -290,6 +290,7 @@ name\n [mutex_integer](https://github.com/Manishearth/rust-clippy/wiki#mutex_integer)                                         | allow   | using a mutex for an integer type\n [needless_bool](https://github.com/Manishearth/rust-clippy/wiki#needless_bool)                                         | warn    | if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`\n [needless_borrow](https://github.com/Manishearth/rust-clippy/wiki#needless_borrow)                                     | warn    | taking a reference that is going to be automatically dereferenced\n+[needless_borrowed_reference](https://github.com/Manishearth/rust-clippy/wiki#needless_borrowed_reference)             | warn    | taking a needless borrowed reference\n [needless_continue](https://github.com/Manishearth/rust-clippy/wiki#needless_continue)                                 | warn    | `continue` statements that can be replaced by a rearrangement of code\n [needless_lifetimes](https://github.com/Manishearth/rust-clippy/wiki#needless_lifetimes)                               | warn    | using explicit lifetimes for references in function arguments when elision rules would allow omitting them\n [needless_pass_by_value](https://github.com/Manishearth/rust-clippy/wiki#needless_pass_by_value)                       | warn    | functions taking arguments by value, but not consuming them in its body"}, {"sha": "1ef7f3d3513f4c4b224e2241c7df2a85e0970aef", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2525ccb84179d00991fdebf19084a976d676f3/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2525ccb84179d00991fdebf19084a976d676f3/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=6a2525ccb84179d00991fdebf19084a976d676f3", "patch": "@@ -115,6 +115,7 @@ pub mod mut_reference;\n pub mod mutex_atomic;\n pub mod needless_bool;\n pub mod needless_borrow;\n+pub mod needless_borrowed_ref;\n pub mod needless_continue;\n pub mod needless_pass_by_value;\n pub mod needless_update;\n@@ -475,6 +476,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         needless_bool::BOOL_COMPARISON,\n         needless_bool::NEEDLESS_BOOL,\n         needless_borrow::NEEDLESS_BORROW,\n+        needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE,\n         needless_continue::NEEDLESS_CONTINUE,\n         needless_pass_by_value::NEEDLESS_PASS_BY_VALUE,\n         needless_update::NEEDLESS_UPDATE,"}, {"sha": "dd6f1f22bd6b0bfd6bb3536985733999ebc96b96", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6a2525ccb84179d00991fdebf19084a976d676f3/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2525ccb84179d00991fdebf19084a976d676f3/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=6a2525ccb84179d00991fdebf19084a976d676f3", "patch": "@@ -0,0 +1,58 @@\n+//! Checks for useless borrowed references.\n+//!\n+//! This lint is **warn** by default\n+\n+use rustc::lint::*;\n+use rustc::hir::{MutImmutable, Pat, PatKind, BindingMode};\n+use rustc::ty;\n+use utils::{span_lint, in_macro};\n+\n+/// **What it does:** Checks for useless borrowed references.\n+///\n+/// **Why is this bad?** It is completely useless and make the code look more complex than it actually is.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+///     let mut v = Vec::<String>::new();\n+///     let _ = v.iter_mut().filter(|&ref a| a.is_empty());\n+/// ```\n+/// This clojure takes a reference on something that has been matched as a reference and de-referenced.\n+/// As such, it could just be |a| a.is_empty()\n+declare_lint! {\n+    pub NEEDLESS_BORROWED_REFERENCE,\n+    Warn,\n+    \"taking a needless borrowed reference\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct NeedlessBorrowedRef;\n+\n+impl LintPass for NeedlessBorrowedRef {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(NEEDLESS_BORROWED_REFERENCE)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrowedRef {\n+    fn check_pat(&mut self, cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat) {\n+        if in_macro(pat.span) {\n+            // OK, simple enough, lints doesn't check in macro.\n+            return;\n+        }\n+\n+        if_let_chain! {[\n+            // Pat is a pattern whose node\n+            // is a binding which \"involves\" a immutable reference...\n+            let PatKind::Binding(BindingMode::BindByRef(MutImmutable), ..) = pat.node,\n+            // Pattern's type is a reference. Get the type and mutability of referenced value (tam: TypeAndMut).\n+            let ty::TyRef(_, ref tam) = cx.tables.pat_ty(pat).sty,\n+            // This is an immutable reference.\n+            tam.mutbl == MutImmutable,\n+        ], {\n+            span_lint(cx, NEEDLESS_BORROWED_REFERENCE, pat.span, \"this pattern takes a reference on something that is being de-referenced\")\n+        }}\n+    }\n+}\n+"}]}