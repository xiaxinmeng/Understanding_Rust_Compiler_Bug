{"sha": "845b06542e01c618a5df47b091ec7b72cea8e2e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NWIwNjU0MmUwMWM2MThhNWRmNDdiMDkxZWM3YjcyY2VhOGUyZTM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-29T23:06:05Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-02-01T03:35:56Z"}, "message": "messing around with pipes and stages", "tree": {"sha": "5d54f58424b516c8a4a62beb66bc67bb49665949", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d54f58424b516c8a4a62beb66bc67bb49665949"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/845b06542e01c618a5df47b091ec7b72cea8e2e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/845b06542e01c618a5df47b091ec7b72cea8e2e3", "html_url": "https://github.com/rust-lang/rust/commit/845b06542e01c618a5df47b091ec7b72cea8e2e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/845b06542e01c618a5df47b091ec7b72cea8e2e3/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0281d991c7150a5cf1921e89a62e9427d0a6de6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0281d991c7150a5cf1921e89a62e9427d0a6de6", "html_url": "https://github.com/rust-lang/rust/commit/e0281d991c7150a5cf1921e89a62e9427d0a6de6"}], "stats": {"total": 53, "additions": 44, "deletions": 9}, "files": [{"sha": "052daeaeb2a818bdeb4f42e8e4fc000cfa53c4f6", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/845b06542e01c618a5df47b091ec7b72cea8e2e3/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/845b06542e01c618a5df47b091ec7b72cea8e2e3/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=845b06542e01c618a5df47b091ec7b72cea8e2e3", "patch": "@@ -143,14 +143,9 @@ pub fn BufferHeader() -> BufferHeader {\n // This is for protocols to associate extra data to thread around.\n #[doc(hidden)]\n #[cfg(stage0)]\n-type Buffer<T: Owned> = {\n-    header: BufferHeader,\n-    data: T,\n-};\n-#[doc(hidden)]\n #[cfg(stage1)]\n+type Buffer<T> = { header: BufferHeader, data: T };\n #[cfg(stage2)]\n-#[cfg(stage3)]\n pub struct Buffer<T> {\n     header: BufferHeader,\n     data: T,\n@@ -247,7 +242,6 @@ pub fn mk_packet<T: Owned>() -> Packet<T> {\n         payload: None,\n     }\n }\n-\n #[doc(hidden)]\n #[cfg(stage0)]\n fn unibuffer<T: Owned>() -> ~Buffer<Packet<T>> {\n@@ -264,10 +258,23 @@ fn unibuffer<T: Owned>() -> ~Buffer<Packet<T>> {\n     }\n     move b\n }\n-#[doc(hidden)]\n #[cfg(stage1)]\n+fn unibuffer<T>() -> ~Buffer<Packet<T>> {\n+    let b = ~{\n+        header: BufferHeader(),\n+        data: Packet {\n+            header: PacketHeader(),\n+            payload: None,\n+        }\n+    };\n+\n+    unsafe {\n+        b.data.header.buffer = reinterpret_cast(&b);\n+    }\n+    move b\n+}\n+#[doc(hidden)]\n #[cfg(stage2)]\n-#[cfg(stage3)]\n fn unibuffer<T>() -> ~Buffer<Packet<T>> {\n     let b = ~Buffer {\n         header: BufferHeader(),"}, {"sha": "aaa909b369481bf064381d919d74fb71e8a43ab4", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/845b06542e01c618a5df47b091ec7b72cea8e2e3/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/845b06542e01c618a5df47b091ec7b72cea8e2e3/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=845b06542e01c618a5df47b091ec7b72cea8e2e3", "patch": "@@ -355,6 +355,34 @@ pub impl protocol: gen_init {\n         }))\n     }\n \n+    #[cfg(stage0)]\n+    fn gen_init_bounded(ext_cx: ext_ctxt) -> @ast::expr {\n+        debug!(\"gen_init_bounded\");\n+        let buffer_fields = self.gen_buffer_init(ext_cx);\n+        let buffer = quote_expr!(~{\n+            header: ::pipes::BufferHeader(),\n+            data: $buffer_fields,\n+        });\n+\n+        let entangle_body = ext_cx.block_expr(\n+            ext_cx.block(\n+                self.states.map_to_vec(\n+                    |s| ext_cx.parse_stmt(\n+                        fmt!(\"data.%s.set_buffer_(buffer)\",\n+                             s.name))),\n+                ext_cx.parse_expr(\n+                    fmt!(\"::ptr::addr_of(&(data.%s))\",\n+                         self.states[0].name))));\n+\n+        quote_expr!({\n+            let buffer = $buffer;\n+            do ::pipes::entangle_buffer(move buffer) |buffer, data| {\n+                $entangle_body\n+            }\n+        })\n+    }\n+    #[cfg(stage1)]\n+    #[cfg(stage2)]\n     fn gen_init_bounded(ext_cx: ext_ctxt) -> @ast::expr {\n         debug!(\"gen_init_bounded\");\n         let buffer_fields = self.gen_buffer_init(ext_cx);"}]}