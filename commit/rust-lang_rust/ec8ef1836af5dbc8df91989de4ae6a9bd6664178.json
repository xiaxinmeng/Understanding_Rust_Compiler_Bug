{"sha": "ec8ef1836af5dbc8df91989de4ae6a9bd6664178", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjOGVmMTgzNmFmNWRiYzhkZjkxOTg5ZGU0YWU2YTliZDY2NjQxNzg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-22T13:57:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-22T13:57:56Z"}, "message": "Rollup merge of #58059 - RalfJung:before_exec, r=alexcrichton\n\ndeprecate before_exec in favor of unsafe pre_exec\n\nFixes https://github.com/rust-lang/rust/issues/39575\n\nAs per the [lang team decision](https://github.com/rust-lang/rust/issues/39575#issuecomment-442993358):\n\n> The language team agreed that before_exec should be unsafe, and leaves the details of a transition plan to the libs team.\n\nCc @alexcrichton @rust-lang/libs how would you like to proceed?", "tree": {"sha": "66c92d32c3458e20601ca139a1f799725f67dd35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66c92d32c3458e20601ca139a1f799725f67dd35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec8ef1836af5dbc8df91989de4ae6a9bd6664178", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcb//lCRBK7hj4Ov3rIwAAdHIIAImeF2dpB9HP6Hg44pWChq9B\n+XOAiLOZavlLpKDEG3x9pfh+y8vnPGSEY1T1it/tHcYTHrZttf3+vsoIfscoQFBS\nrE7KMrUEi/xEkL1I6mZumaHDePvzQP+0n+X4L+foTd1vnD/X1yremLcndftMkRlR\nuZS1nCTmYx8HdRBtMDfhLZ/4UL6geGA5wadJztYB4UchyHbP+z6VkIjbDBsU1F4+\nr1CWZOGUqtHvfLIMuN56OPbeqHcI3dbAXh/qhlbVGQAidk7OihVqPo0ow2+Gz4Ne\n20K2QoYucHezVP/UzipikjNVoWxqZ4V8cDFaNzISfb6aUEF7srj/DcW6L41jk78=\n=qFC6\n-----END PGP SIGNATURE-----\n", "payload": "tree 66c92d32c3458e20601ca139a1f799725f67dd35\nparent 0bcb66469cbe9e93f077a4c3fe1d5c9a8d615bc8\nparent e023403da2da17ba7320c53c415b960c93348247\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1550843876 +0100\ncommitter GitHub <noreply@github.com> 1550843876 +0100\n\nRollup merge of #58059 - RalfJung:before_exec, r=alexcrichton\n\ndeprecate before_exec in favor of unsafe pre_exec\n\nFixes https://github.com/rust-lang/rust/issues/39575\n\nAs per the [lang team decision](https://github.com/rust-lang/rust/issues/39575#issuecomment-442993358):\n\n> The language team agreed that before_exec should be unsafe, and leaves the details of a transition plan to the libs team.\n\nCc @alexcrichton @rust-lang/libs how would you like to proceed?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec8ef1836af5dbc8df91989de4ae6a9bd6664178", "html_url": "https://github.com/rust-lang/rust/commit/ec8ef1836af5dbc8df91989de4ae6a9bd6664178", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec8ef1836af5dbc8df91989de4ae6a9bd6664178/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bcb66469cbe9e93f077a4c3fe1d5c9a8d615bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bcb66469cbe9e93f077a4c3fe1d5c9a8d615bc8", "html_url": "https://github.com/rust-lang/rust/commit/0bcb66469cbe9e93f077a4c3fe1d5c9a8d615bc8"}, {"sha": "e023403da2da17ba7320c53c415b960c93348247", "url": "https://api.github.com/repos/rust-lang/rust/commits/e023403da2da17ba7320c53c415b960c93348247", "html_url": "https://github.com/rust-lang/rust/commit/e023403da2da17ba7320c53c415b960c93348247"}], "stats": {"total": 266, "additions": 171, "deletions": 95}, "files": [{"sha": "020075531dd0e0420f22f2e4248dae215ed87890", "filename": "src/libstd/sys/redox/ext/process.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ec8ef1836af5dbc8df91989de4ae6a9bd6664178/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8ef1836af5dbc8df91989de4ae6a9bd6664178/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs?ref=ec8ef1836af5dbc8df91989de4ae6a9bd6664178", "patch": "@@ -36,7 +36,7 @@ pub trait CommandExt {\n     /// will be called and the spawn operation will immediately return with a\n     /// failure.\n     ///\n-    /// # Notes\n+    /// # Notes and Safety\n     ///\n     /// This closure will be run in the context of the child process after a\n     /// `fork`. This primarily means that any modifications made to memory on\n@@ -45,12 +45,32 @@ pub trait CommandExt {\n     /// like `malloc` or acquiring a mutex are not guaranteed to work (due to\n     /// other threads perhaps still running when the `fork` was run).\n     ///\n+    /// This also means that all resources such as file descriptors and\n+    /// memory-mapped regions got duplicated. It is your responsibility to make\n+    /// sure that the closure does not violate library invariants by making\n+    /// invalid use of these duplicates.\n+    ///\n     /// When this closure is run, aspects such as the stdio file descriptors and\n     /// working directory have successfully been changed, so output to these\n     /// locations may not appear where intended.\n+    #[stable(feature = \"process_pre_exec\", since = \"1.34.0\")]\n+    unsafe fn pre_exec<F>(&mut self, f: F) -> &mut process::Command\n+        where F: FnMut() -> io::Result<()> + Send + Sync + 'static;\n+\n+    /// Schedules a closure to be run just before the `exec` function is\n+    /// invoked.\n+    ///\n+    /// This method is stable and usable, but it should be unsafe. To fix\n+    /// that, it got deprecated in favor of the unsafe [`pre_exec`].\n+    ///\n+    /// [`pre_exec`]: #tymethod.pre_exec\n     #[stable(feature = \"process_exec\", since = \"1.15.0\")]\n+    #[rustc_deprecated(since = \"1.37.0\", reason = \"should be unsafe, use `pre_exec` instead\")]\n     fn before_exec<F>(&mut self, f: F) -> &mut process::Command\n-        where F: FnMut() -> io::Result<()> + Send + Sync + 'static;\n+        where F: FnMut() -> io::Result<()> + Send + Sync + 'static\n+    {\n+        unsafe { self.pre_exec(f) }\n+    }\n \n     /// Performs all the required setup by this `Command`, followed by calling\n     /// the `execvp` syscall.\n@@ -87,10 +107,10 @@ impl CommandExt for process::Command {\n         self\n     }\n \n-    fn before_exec<F>(&mut self, f: F) -> &mut process::Command\n+    unsafe fn pre_exec<F>(&mut self, f: F) -> &mut process::Command\n         where F: FnMut() -> io::Result<()> + Send + Sync + 'static\n     {\n-        self.as_inner_mut().before_exec(Box::new(f));\n+        self.as_inner_mut().pre_exec(Box::new(f));\n         self\n     }\n "}, {"sha": "81af8eb553d00c15f9312b6a9e9c28c42018a888", "filename": "src/libstd/sys/redox/process.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec8ef1836af5dbc8df91989de4ae6a9bd6664178/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8ef1836af5dbc8df91989de4ae6a9bd6664178/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs?ref=ec8ef1836af5dbc8df91989de4ae6a9bd6664178", "patch": "@@ -116,8 +116,10 @@ impl Command {\n         self.gid = Some(id);\n     }\n \n-    pub fn before_exec(&mut self,\n-                       f: Box<dyn FnMut() -> io::Result<()> + Send + Sync>) {\n+    pub unsafe fn pre_exec(\n+        &mut self,\n+        f: Box<dyn FnMut() -> io::Result<()> + Send + Sync>,\n+    ) {\n         self.closures.push(f);\n     }\n "}, {"sha": "b487bb889bafa5ca115b2638d0e8a6a2832ee8a0", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ec8ef1836af5dbc8df91989de4ae6a9bd6664178/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8ef1836af5dbc8df91989de4ae6a9bd6664178/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=ec8ef1836af5dbc8df91989de4ae6a9bd6664178", "patch": "@@ -36,7 +36,7 @@ pub trait CommandExt {\n     /// will be called and the spawn operation will immediately return with a\n     /// failure.\n     ///\n-    /// # Notes\n+    /// # Notes and Safety\n     ///\n     /// This closure will be run in the context of the child process after a\n     /// `fork`. This primarily means that any modifications made to memory on\n@@ -45,12 +45,32 @@ pub trait CommandExt {\n     /// like `malloc` or acquiring a mutex are not guaranteed to work (due to\n     /// other threads perhaps still running when the `fork` was run).\n     ///\n+    /// This also means that all resources such as file descriptors and\n+    /// memory-mapped regions got duplicated. It is your responsibility to make\n+    /// sure that the closure does not violate library invariants by making\n+    /// invalid use of these duplicates.\n+    ///\n     /// When this closure is run, aspects such as the stdio file descriptors and\n     /// working directory have successfully been changed, so output to these\n     /// locations may not appear where intended.\n+    #[stable(feature = \"process_pre_exec\", since = \"1.34.0\")]\n+    unsafe fn pre_exec<F>(&mut self, f: F) -> &mut process::Command\n+        where F: FnMut() -> io::Result<()> + Send + Sync + 'static;\n+\n+    /// Schedules a closure to be run just before the `exec` function is\n+    /// invoked.\n+    ///\n+    /// This method is stable and usable, but it should be unsafe. To fix\n+    /// that, it got deprecated in favor of the unsafe [`pre_exec`].\n+    ///\n+    /// [`pre_exec`]: #tymethod.pre_exec\n     #[stable(feature = \"process_exec\", since = \"1.15.0\")]\n+    #[rustc_deprecated(since = \"1.37.0\", reason = \"should be unsafe, use `pre_exec` instead\")]\n     fn before_exec<F>(&mut self, f: F) -> &mut process::Command\n-        where F: FnMut() -> io::Result<()> + Send + Sync + 'static;\n+        where F: FnMut() -> io::Result<()> + Send + Sync + 'static\n+    {\n+        unsafe { self.pre_exec(f) }\n+    }\n \n     /// Performs all the required setup by this `Command`, followed by calling\n     /// the `execvp` syscall.\n@@ -97,10 +117,10 @@ impl CommandExt for process::Command {\n         self\n     }\n \n-    fn before_exec<F>(&mut self, f: F) -> &mut process::Command\n+    unsafe fn pre_exec<F>(&mut self, f: F) -> &mut process::Command\n         where F: FnMut() -> io::Result<()> + Send + Sync + 'static\n     {\n-        self.as_inner_mut().before_exec(Box::new(f));\n+        self.as_inner_mut().pre_exec(Box::new(f));\n         self\n     }\n "}, {"sha": "7fa256e59b2db294c5f1dc513ed4348716274893", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec8ef1836af5dbc8df91989de4ae6a9bd6664178/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8ef1836af5dbc8df91989de4ae6a9bd6664178/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=ec8ef1836af5dbc8df91989de4ae6a9bd6664178", "patch": "@@ -149,8 +149,10 @@ impl Command {\n         &mut self.closures\n     }\n \n-    pub fn before_exec(&mut self,\n-                       f: Box<dyn FnMut() -> io::Result<()> + Send + Sync>) {\n+    pub unsafe fn pre_exec(\n+        &mut self,\n+        f: Box<dyn FnMut() -> io::Result<()> + Send + Sync>,\n+    ) {\n         self.closures.push(f);\n     }\n "}, {"sha": "91d2636b2ae63e28ba6d4d3d570ad60fb78abc48", "filename": "src/test/run-pass/command-before-exec.rs", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/0bcb66469cbe9e93f077a4c3fe1d5c9a8d615bc8/src%2Ftest%2Frun-pass%2Fcommand-before-exec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bcb66469cbe9e93f077a4c3fe1d5c9a8d615bc8/src%2Ftest%2Frun-pass%2Fcommand-before-exec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcommand-before-exec.rs?ref=0bcb66469cbe9e93f077a4c3fe1d5c9a8d615bc8", "patch": "@@ -1,83 +0,0 @@\n-#![allow(stable_features)]\n-// ignore-windows - this is a unix-specific test\n-// ignore-cloudabi no processes\n-// ignore-emscripten no processes\n-\n-#![feature(process_exec, rustc_private)]\n-\n-extern crate libc;\n-\n-use std::env;\n-use std::io::Error;\n-use std::os::unix::process::CommandExt;\n-use std::process::Command;\n-use std::sync::Arc;\n-use std::sync::atomic::{AtomicUsize, Ordering};\n-\n-fn main() {\n-    if let Some(arg) = env::args().nth(1) {\n-        match &arg[..] {\n-            \"test1\" => println!(\"hello2\"),\n-            \"test2\" => assert_eq!(env::var(\"FOO\").unwrap(), \"BAR\"),\n-            \"test3\" => assert_eq!(env::current_dir().unwrap()\n-                                      .to_str().unwrap(), \"/\"),\n-            \"empty\" => {}\n-            _ => panic!(\"unknown argument: {}\", arg),\n-        }\n-        return\n-    }\n-\n-    let me = env::current_exe().unwrap();\n-\n-    let output = Command::new(&me).arg(\"test1\").before_exec(|| {\n-        println!(\"hello\");\n-        Ok(())\n-    }).output().unwrap();\n-    assert!(output.status.success());\n-    assert!(output.stderr.is_empty());\n-    assert_eq!(output.stdout, b\"hello\\nhello2\\n\");\n-\n-    let output = Command::new(&me).arg(\"test2\").before_exec(|| {\n-        env::set_var(\"FOO\", \"BAR\");\n-        Ok(())\n-    }).output().unwrap();\n-    assert!(output.status.success());\n-    assert!(output.stderr.is_empty());\n-    assert!(output.stdout.is_empty());\n-\n-    let output = Command::new(&me).arg(\"test3\").before_exec(|| {\n-        env::set_current_dir(\"/\").unwrap();\n-        Ok(())\n-    }).output().unwrap();\n-    assert!(output.status.success());\n-    assert!(output.stderr.is_empty());\n-    assert!(output.stdout.is_empty());\n-\n-    let output = Command::new(&me).arg(\"bad\").before_exec(|| {\n-        Err(Error::from_raw_os_error(102))\n-    }).output().unwrap_err();\n-    assert_eq!(output.raw_os_error(), Some(102));\n-\n-    let pid = unsafe { libc::getpid() };\n-    assert!(pid >= 0);\n-    let output = Command::new(&me).arg(\"empty\").before_exec(move || {\n-        let child = unsafe { libc::getpid() };\n-        assert!(child >= 0);\n-        assert!(pid != child);\n-        Ok(())\n-    }).output().unwrap();\n-    assert!(output.status.success());\n-    assert!(output.stderr.is_empty());\n-    assert!(output.stdout.is_empty());\n-\n-    let mem = Arc::new(AtomicUsize::new(0));\n-    let mem2 = mem.clone();\n-    let output = Command::new(&me).arg(\"empty\").before_exec(move || {\n-        assert_eq!(mem2.fetch_add(1, Ordering::SeqCst), 0);\n-        Ok(())\n-    }).output().unwrap();\n-    assert!(output.status.success());\n-    assert!(output.stderr.is_empty());\n-    assert!(output.stdout.is_empty());\n-    assert_eq!(mem.load(Ordering::SeqCst), 0);\n-}"}, {"sha": "21783fedd39c9ada818cfe30db07fdc311919bfd", "filename": "src/test/run-pass/command-pre-exec.rs", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/ec8ef1836af5dbc8df91989de4ae6a9bd6664178/src%2Ftest%2Frun-pass%2Fcommand-pre-exec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8ef1836af5dbc8df91989de4ae6a9bd6664178/src%2Ftest%2Frun-pass%2Fcommand-pre-exec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcommand-pre-exec.rs?ref=ec8ef1836af5dbc8df91989de4ae6a9bd6664178", "patch": "@@ -0,0 +1,115 @@\n+#![allow(stable_features)]\n+// ignore-windows - this is a unix-specific test\n+// ignore-cloudabi no processes\n+// ignore-emscripten no processes\n+#![feature(process_exec, rustc_private)]\n+\n+extern crate libc;\n+\n+use std::env;\n+use std::io::Error;\n+use std::os::unix::process::CommandExt;\n+use std::process::Command;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+use std::sync::Arc;\n+\n+fn main() {\n+    if let Some(arg) = env::args().nth(1) {\n+        match &arg[..] {\n+            \"test1\" => println!(\"hello2\"),\n+            \"test2\" => assert_eq!(env::var(\"FOO\").unwrap(), \"BAR\"),\n+            \"test3\" => assert_eq!(env::current_dir().unwrap().to_str().unwrap(), \"/\"),\n+            \"empty\" => {}\n+            _ => panic!(\"unknown argument: {}\", arg),\n+        }\n+        return;\n+    }\n+\n+    let me = env::current_exe().unwrap();\n+\n+    let output = unsafe {\n+        Command::new(&me)\n+            .arg(\"test1\")\n+            .pre_exec(|| {\n+                println!(\"hello\");\n+                Ok(())\n+            })\n+            .output()\n+            .unwrap()\n+    };\n+    assert!(output.status.success());\n+    assert!(output.stderr.is_empty());\n+    assert_eq!(output.stdout, b\"hello\\nhello2\\n\");\n+\n+    let output = unsafe {\n+        Command::new(&me)\n+            .arg(\"test2\")\n+            .pre_exec(|| {\n+                env::set_var(\"FOO\", \"BAR\");\n+                Ok(())\n+            })\n+            .output()\n+            .unwrap()\n+    };\n+    assert!(output.status.success());\n+    assert!(output.stderr.is_empty());\n+    assert!(output.stdout.is_empty());\n+\n+    let output = unsafe {\n+        Command::new(&me)\n+            .arg(\"test3\")\n+            .pre_exec(|| {\n+                env::set_current_dir(\"/\").unwrap();\n+                Ok(())\n+            })\n+            .output()\n+            .unwrap()\n+    };\n+    assert!(output.status.success());\n+    assert!(output.stderr.is_empty());\n+    assert!(output.stdout.is_empty());\n+\n+    let output = unsafe {\n+        Command::new(&me)\n+            .arg(\"bad\")\n+            .pre_exec(|| Err(Error::from_raw_os_error(102)))\n+            .output()\n+            .unwrap_err()\n+    };\n+    assert_eq!(output.raw_os_error(), Some(102));\n+\n+    let pid = unsafe { libc::getpid() };\n+    assert!(pid >= 0);\n+    let output = unsafe {\n+        Command::new(&me)\n+            .arg(\"empty\")\n+            .pre_exec(move || {\n+                let child = libc::getpid();\n+                assert!(child >= 0);\n+                assert!(pid != child);\n+                Ok(())\n+            })\n+            .output()\n+            .unwrap()\n+    };\n+    assert!(output.status.success());\n+    assert!(output.stderr.is_empty());\n+    assert!(output.stdout.is_empty());\n+\n+    let mem = Arc::new(AtomicUsize::new(0));\n+    let mem2 = mem.clone();\n+    let output = unsafe {\n+        Command::new(&me)\n+            .arg(\"empty\")\n+            .pre_exec(move || {\n+                assert_eq!(mem2.fetch_add(1, Ordering::SeqCst), 0);\n+                Ok(())\n+            })\n+            .output()\n+            .unwrap()\n+    };\n+    assert!(output.status.success());\n+    assert!(output.stderr.is_empty());\n+    assert!(output.stdout.is_empty());\n+    assert_eq!(mem.load(Ordering::SeqCst), 0);\n+}"}]}