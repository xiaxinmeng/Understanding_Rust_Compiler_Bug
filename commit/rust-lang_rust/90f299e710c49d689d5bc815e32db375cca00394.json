{"sha": "90f299e710c49d689d5bc815e32db375cca00394", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZjI5OWU3MTBjNDlkNjg5ZDViYzgxNWUzMmRiMzc1Y2NhMDAzOTQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-07T19:48:43Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-07T19:48:43Z"}, "message": "Permit view items in native modules.", "tree": {"sha": "d2ee1e9784a2e2a9ff5184d2d1f75327ba315d22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2ee1e9784a2e2a9ff5184d2d1f75327ba315d22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90f299e710c49d689d5bc815e32db375cca00394", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90f299e710c49d689d5bc815e32db375cca00394", "html_url": "https://github.com/rust-lang/rust/commit/90f299e710c49d689d5bc815e32db375cca00394", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90f299e710c49d689d5bc815e32db375cca00394/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfa85968c346e7d7892a7399cc2b79bfb7e0e5ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfa85968c346e7d7892a7399cc2b79bfb7e0e5ef", "html_url": "https://github.com/rust-lang/rust/commit/dfa85968c346e7d7892a7399cc2b79bfb7e0e5ef"}], "stats": {"total": 70, "additions": 61, "deletions": 9}, "files": [{"sha": "ed1e21142c56653ff67d482956583dc639f8feb9", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/90f299e710c49d689d5bc815e32db375cca00394/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f299e710c49d689d5bc815e32db375cca00394/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=90f299e710c49d689d5bc815e32db375cca00394", "patch": "@@ -265,6 +265,11 @@ tag mod_index_entry {\n     mie_tag_variant(@item /* tag item */, uint /* variant index */);\n }\n \n+tag native_mod_index_entry {\n+    nmie_view_item(@view_item);\n+    nmie_item(@native_item);\n+}\n+\n type mod_index = hashmap[ident,mod_index_entry];\n type _mod = rec(vec[@view_item] view_items,\n                 vec[@item] items,\n@@ -277,9 +282,10 @@ tag native_abi {\n \n type native_mod = rec(str native_name,\n                       native_abi abi,\n+                      vec[@view_item] view_items,\n                       vec[@native_item] items,\n                       native_mod_index index);\n-type native_mod_index = hashmap[ident,@native_item];\n+type native_mod_index = hashmap[ident,native_mod_index_entry];\n \n type variant_arg = rec(@ty ty, def_id id);\n type variant = rec(str name, vec[variant_arg] args, def_id id, ann ann);\n@@ -359,10 +365,23 @@ fn index_item(mod_index index, @item it) {\n fn index_native_item(native_mod_index index, @native_item it) {\n     alt (it.node) {\n         case (ast.native_item_ty(?id, _)) {\n-            index.insert(id, it);\n+            index.insert(id, ast.nmie_item(it));\n         }\n         case (ast.native_item_fn(?id, _, _, _, _)) {\n-            index.insert(id, it);\n+            index.insert(id, ast.nmie_item(it));\n+        }\n+    }\n+}\n+\n+fn index_native_view_item(native_mod_index index, @view_item it) {\n+    alt (it.node) {\n+        case(ast.view_item_import(?def_ident,_,_,_)) {\n+            index.insert(def_ident, ast.nmie_view_item(it));\n+        }\n+        case(ast.view_item_export(_)) {\n+            // NB: don't index these, they might collide with\n+            // the import or use that they're exporting. Have\n+            // to do linear search for exports.\n         }\n     }\n }"}, {"sha": "6f3111c74d0bda2489113e3c0b9367f798137e6a", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/90f299e710c49d689d5bc815e32db375cca00394/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f299e710c49d689d5bc815e32db375cca00394/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=90f299e710c49d689d5bc815e32db375cca00394", "patch": "@@ -1846,8 +1846,11 @@ impure fn parse_native_item(parser p) -> @ast.native_item {\n impure fn parse_native_mod_items(parser p,\n                                  str native_name,\n                                  ast.native_abi abi) -> ast.native_mod {\n-    auto index = new_str_hash[@ast.native_item]();\n+    auto index = new_str_hash[ast.native_mod_index_entry]();\n     let vec[@ast.native_item] items = vec();\n+\n+    auto view_items = parse_native_view(p, index);\n+\n     while (p.peek() != token.RBRACE) {\n         auto item = parse_native_item(p);\n         items += vec(item);\n@@ -1856,7 +1859,9 @@ impure fn parse_native_mod_items(parser p,\n         ast.index_native_item(index, item);\n     }\n     ret rec(native_name=native_name, abi=abi,\n-            items=items, index=index);\n+            view_items=view_items,\n+            items=items,\n+            index=index);\n }\n \n fn default_native_name(session.session sess, str id) -> str {\n@@ -2230,6 +2235,19 @@ impure fn parse_view(parser p, ast.mod_index index) -> vec[@ast.view_item] {\n     ret items;\n }\n \n+impure fn parse_native_view(parser p, ast.native_mod_index index)\n+    -> vec[@ast.view_item] {\n+    let vec[@ast.view_item] items = vec();\n+    while (is_view_item(p.peek())) {\n+        auto item = parse_view_item(p);\n+        items += vec(item);\n+\n+        ast.index_native_view_item(index, item);\n+    }\n+    ret items;\n+}\n+\n+\n impure fn parse_crate_from_source_file(parser p) -> @ast.crate {\n     auto lo = p.get_span();\n     auto hi = lo;"}, {"sha": "8a1dc70faaf11e937835cdf04f6bdcf5b19c7124", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/90f299e710c49d689d5bc815e32db375cca00394/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f299e710c49d689d5bc815e32db375cca00394/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=90f299e710c49d689d5bc815e32db375cca00394", "patch": "@@ -957,8 +957,14 @@ fn fold_native_item[ENV](&ENV env, ast_fold[ENV] fld,\n \n fn fold_native_mod[ENV](&ENV e, ast_fold[ENV] fld,\n                         &ast.native_mod m) -> ast.native_mod {\n+    let vec[@view_item] view_items = vec();\n     let vec[@native_item] items = vec();\n-    auto index = new_str_hash[@ast.native_item]();\n+    auto index = new_str_hash[ast.native_mod_index_entry]();\n+\n+    for (@view_item vi in m.view_items) {\n+        auto new_vi = fold_view_item[ENV](e, fld, vi);\n+        append[@view_item](view_items, new_vi);\n+    }\n \n     for (@native_item i in m.items) {\n         auto new_item = fold_native_item[ENV](e, fld, i);\n@@ -968,6 +974,7 @@ fn fold_native_mod[ENV](&ENV e, ast_fold[ENV] fld,\n \n     ret fld.fold_native_mod(e, rec(native_name=m.native_name,\n                                    abi=m.abi,\n+                                   view_items=view_items,\n                                    items=items,\n                                    index=index));\n }"}, {"sha": "5b6db63166579ce8b98fcd2faf9f667fa2528ac8", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/90f299e710c49d689d5bc815e32db375cca00394/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f299e710c49d689d5bc815e32db375cca00394/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=90f299e710c49d689d5bc815e32db375cca00394", "patch": "@@ -300,11 +300,19 @@ fn lookup_name_wrapped(&env e, ast.ident i) -> option.t[tup(@env, def_wrap)] {\n     }\n \n     fn check_native_mod(ast.ident i, ast.native_mod m) -> option.t[def_wrap] {\n+\n         alt (m.index.find(i)) {\n-            case (some[@ast.native_item](?item)) {\n-                ret some(found_def_native_item(item));\n+            case (some[ast.native_mod_index_entry](?ent)) {\n+                alt (ent) {\n+                    case (ast.nmie_view_item(?view_item)) {\n+                        ret some(found_def_view(view_item));\n+                    }\n+                    case (ast.nmie_item(?item)) {\n+                        ret some(found_def_native_item(item));\n+                    }\n+                }\n             }\n-            case (_) {\n+            case (none[ast.native_mod_index_entry]) {\n                 ret none[def_wrap];\n             }\n         }"}]}