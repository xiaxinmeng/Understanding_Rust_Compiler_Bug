{"sha": "84843b73dc8e54f1e8c1e4418b7d56dbd513dd65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ODQzYjczZGM4ZTU0ZjFlOGMxZTQ0MThiN2Q1NmRiZDUxM2RkNjU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-06T15:12:23Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-09T06:36:40Z"}, "message": "Merge E0410 into E0408", "tree": {"sha": "da3c9b014cac6b40ca92bf7714fcfc15e1c5b908", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da3c9b014cac6b40ca92bf7714fcfc15e1c5b908"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84843b73dc8e54f1e8c1e4418b7d56dbd513dd65", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXMC/4AAoJEDu/TT4u95+Y8QIQAJB8SL4qyVQrMs0aNhDNhuqV\nINuXqXY8aDSzUjH8wbY0CM0oUxORRaSwDAJkeITmgRJRq1mwkVJI8Tz1mLdUzjj4\nRbfARl6Q5/SQbpzip1vqRtdmmEDcjMvG5UHPrfRyl4nEkVUmonphg+IkdMJ+oDvV\nuROaP7h+RiJd56hiT7WZY16f5D75lhZxZU3bkLrIxVk6NtMjn5mAl9Munllo7+2D\n21N8f0P69vExvGhX4fc9WCKqkFOrhBS8R3Z90vu69GxjtuRFzUSV9U+7eKZ4Mh3t\nRmCNr1zETMbx8B4Po9e1AuWCUnWzKmGDTuSvl+ZTUm42HgS9WQ3725UG3Zi192WT\nKeVhgPXk1t1YaZJW7MjNd5oYOe20j8mUmeP7+7UKZKcIn8ZDBYAsoM+Dsq7XGkv5\nokIkyCJ/O1rFzbmsj093ersjX+KiYR2ba0OVqFiPUKBgSDHOB/I6wuQMtKldf7GH\nCUaMperFfMcjdOgHcjgictPHVKRxS9nR7fHg8HCNmlD6/fnJZJELo3ARJOERiGwr\nJDmdeVcFW8Vdbtv8ygn0pzWRqXfVqqjDpKM9sdxq/oa2APBXgLvkM2A1l3sUtslc\np3Q2zcFmuLOei/BPG1x3cUzKSRvDTBvUCxWuRtvvaaFQVJGr5MQeKQnKMWnJDenV\nuRKhbN4aPjBNwnwvb68g\n=TTpS\n-----END PGP SIGNATURE-----", "payload": "tree da3c9b014cac6b40ca92bf7714fcfc15e1c5b908\nparent cf8a1b0998fb561e76acfe4b8269a4df5fb60bc8\nauthor Manish Goregaokar <manishsmail@gmail.com> 1462547543 +0530\ncommitter Manish Goregaokar <manishsmail@gmail.com> 1462775800 -0700\n\nMerge E0410 into E0408\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84843b73dc8e54f1e8c1e4418b7d56dbd513dd65", "html_url": "https://github.com/rust-lang/rust/commit/84843b73dc8e54f1e8c1e4418b7d56dbd513dd65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84843b73dc8e54f1e8c1e4418b7d56dbd513dd65/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf8a1b0998fb561e76acfe4b8269a4df5fb60bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf8a1b0998fb561e76acfe4b8269a4df5fb60bc8", "html_url": "https://github.com/rust-lang/rust/commit/cf8a1b0998fb561e76acfe4b8269a4df5fb60bc8"}], "stats": {"total": 54, "additions": 22, "deletions": 32}, "files": [{"sha": "351486220528952eae1c86f36257182369671e96", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/84843b73dc8e54f1e8c1e4418b7d56dbd513dd65/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84843b73dc8e54f1e8c1e4418b7d56dbd513dd65/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=84843b73dc8e54f1e8c1e4418b7d56dbd513dd65", "patch": "@@ -506,12 +506,11 @@ Example of erroneous code:\n ```compile_fail\n match x {\n     Some(y) | None => { /* use y */ } // error: variable `y` from pattern #1 is\n-                                      // not bound in pattern #2\n+                                      //        not bound in pattern #2\n     _ => ()\n }\n ```\n \n-\n Here, `y` is bound to the contents of the `Some` and can be used within the\n block corresponding to the match arm. However, in case `x` is `None`, we have\n not specified what `y` is, and the block will use a nonexistent variable.\n@@ -530,14 +529,15 @@ or, bind the variable to a field of the same type in all sub-patterns of the\n or pattern:\n \n ```\n-let x = (0,2);\n+let x = (0, 2);\n match x {\n     (0, y) | (y, 0) => { /* use y */}\n+    _ => {}\n }\n ```\n \n In this example, if `x` matches the pattern `(0, _)`, the second field is set\n-to `y`, and if it matches `(_, 0)`, the first field is set to `y`, so in all\n+to `y`. If it matches `(_, 0)`, the first field is set to `y`; so in all\n cases `y` is set to some value.\n \"##,\n \n@@ -548,36 +548,35 @@ across patterns.\n Example of erroneous code:\n \n ```compile_fail\n-let x = (0,2);\n+let x = (0, 2);\n match x {\n     (0, ref y) | (y, 0) => { /* use y */} // error: variable `y` is bound with\n-                                          // different mode in pattern #2 than\n-                                          // in pattern #1\n+                                          //        different mode in pattern #2\n+                                          //        than in pattern #1\n     _ => ()\n }\n ```\n \n-\n Here, `y` is bound by-value in one case and by-reference in the other.\n \n To fix this error, just use the same mode in both cases.\n-Generally using `ref` or `ref mut` where not already used will fix this.\n+Generally using `ref` or `ref mut` where not already used will fix this:\n \n-```\n-let x = (0,2);\n+```ignore\n+let x = (0, 2);\n match x {\n     (0, ref y) | (ref y, 0) => { /* use y */}\n     _ => ()\n }\n ```\n \n-Alternatively, split the pattern\n+Alternatively, split the pattern:\n \n-```compile_fail\n-let x = (0,2);\n+```\n+let x = (0, 2);\n match x {\n-    (0, ref y) => { /* use y */}\n     (y, 0) => { /* use y */ }\n+    (0, ref y) => { /* use y */}\n     _ => ()\n }\n ```"}, {"sha": "e3c2a9300baf83beb1ade0215b497dcf950a4555", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/84843b73dc8e54f1e8c1e4418b7d56dbd513dd65/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84843b73dc8e54f1e8c1e4418b7d56dbd513dd65/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=84843b73dc8e54f1e8c1e4418b7d56dbd513dd65", "patch": "@@ -126,12 +126,10 @@ enum ResolutionError<'a> {\n     TypeNotMemberOfTrait(Name, &'a str),\n     /// error E0438: const is not a member of trait\n     ConstNotMemberOfTrait(Name, &'a str),\n-    /// error E0408: variable `{}` from pattern #1 is not bound in pattern\n-    VariableNotBoundInPattern(Name, usize),\n+    /// error E0408: variable `{}` from pattern #{} is not bound in pattern #{}\n+    VariableNotBoundInPattern(Name, usize, usize),\n     /// error E0409: variable is bound with different mode in pattern #{} than in pattern #1\n     VariableBoundWithDifferentMode(Name, usize),\n-    /// error E0410: variable from pattern is not bound in pattern #1\n-    VariableNotBoundInParentPattern(Name, usize),\n     /// error E0411: use of `Self` outside of an impl or trait\n     SelfUsedOutsideImplOrTrait,\n     /// error E0412: use of undeclared\n@@ -272,13 +270,14 @@ fn resolve_struct_error<'b, 'a: 'b, 'tcx: 'a>(resolver: &'b Resolver<'a, 'tcx>,\n                              const_,\n                              trait_)\n         }\n-        ResolutionError::VariableNotBoundInPattern(variable_name, pattern_number) => {\n+        ResolutionError::VariableNotBoundInPattern(variable_name, from, to) => {\n             struct_span_err!(resolver.session,\n                              span,\n                              E0408,\n-                             \"variable `{}` from pattern #1 is not bound in pattern #{}\",\n+                             \"variable `{}` from pattern #{} is not bound in pattern #{}\",\n                              variable_name,\n-                             pattern_number)\n+                             from,\n+                             to)\n         }\n         ResolutionError::VariableBoundWithDifferentMode(variable_name, pattern_number) => {\n             struct_span_err!(resolver.session,\n@@ -289,14 +288,6 @@ fn resolve_struct_error<'b, 'a: 'b, 'tcx: 'a>(resolver: &'b Resolver<'a, 'tcx>,\n                              variable_name,\n                              pattern_number)\n         }\n-        ResolutionError::VariableNotBoundInParentPattern(variable_name, pattern_number) => {\n-            struct_span_err!(resolver.session,\n-                             span,\n-                             E0410,\n-                             \"variable `{}` from pattern #{} is not bound in pattern #1\",\n-                             variable_name,\n-                             pattern_number)\n-        }\n         ResolutionError::SelfUsedOutsideImplOrTrait => {\n             struct_span_err!(resolver.session,\n                              span,\n@@ -2038,7 +2029,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     None => {\n                         resolve_error(self,\n                                       p.span,\n-                                      ResolutionError::VariableNotBoundInPattern(key, i + 1));\n+                                      ResolutionError::VariableNotBoundInPattern(key, 1, i + 1));\n                     }\n                     Some(binding_i) => {\n                         if binding_0.binding_mode != binding_i.binding_mode {\n@@ -2055,7 +2046,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 if !map_0.contains_key(&key) {\n                     resolve_error(self,\n                                   binding.span,\n-                                  ResolutionError::VariableNotBoundInParentPattern(key, i + 1));\n+                                  ResolutionError::VariableNotBoundInPattern(key, i + 1, 1));\n                 }\n             }\n         }"}]}