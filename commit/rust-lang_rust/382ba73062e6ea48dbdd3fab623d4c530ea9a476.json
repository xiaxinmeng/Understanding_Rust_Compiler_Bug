{"sha": "382ba73062e6ea48dbdd3fab623d4c530ea9a476", "node_id": "C_kwDOAAsO6NoAKDM4MmJhNzMwNjJlNmVhNDhkYmRkM2ZhYjYyM2Q0YzUzMGVhOWE0NzY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-22T15:04:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-22T15:04:12Z"}, "message": "Rollup merge of #100331 - lo48576:try-reserve-preserve-on-failure, r=thomcc\n\nGuarantee `try_reserve` preserves the contents on error\n\nUpdate doc comments to make the guarantee explicit. However, some\nimplementations does not have the statement though.\n\n* `HashMap`, `HashSet`: require guarantees on hashbrown side.\n* `PathBuf`: simply redirecting to `OsString`.\n\nFixes #99606.", "tree": {"sha": "e00d640851fa41eb78d7732eec15d14db06a5d6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e00d640851fa41eb78d7732eec15d14db06a5d6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/382ba73062e6ea48dbdd3fab623d4c530ea9a476", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjA5rsCRBK7hj4Ov3rIwAA+ocIAHQE0TWixvAlnAz9Wd8p2c8o\nROxNt87Y7it5vAJmydYmgdTbwQkUVm2jubYuL2w6AJz3C0CclYzHAQXThRcF/2ne\nYhOjtzvbrQRmOotN9EmUSqz1zfTvbFx6n/kWyCaXMIWdDa7IlljsdfRaYT7po7vB\nkLsXPaghduqh77Wmwl4ZT5zC4fzZGVSnSWdPvpWqJqIIvO0g/UosSX/UYNsICkFC\nPGGZ07RzCJVuEPtaZ5JQTM7FH/nT6rAUiUqWkfZ+9wUyiC02Z7h059ubUUbE2FV8\n2uA2lHG0sCNz6STQ2tT+mc2+f7iFO/+VDR6K1JeNapKPfZnSGgekex+ey2DbRLQ=\n=scVX\n-----END PGP SIGNATURE-----\n", "payload": "tree e00d640851fa41eb78d7732eec15d14db06a5d6b\nparent c1a5ec7faf6c32af2f0aae1af4420e1bb1a3a7fe\nparent 2bb7e1e6edf58c39faabb67cfab63dd8109d8055\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1661180652 +0530\ncommitter GitHub <noreply@github.com> 1661180652 +0530\n\nRollup merge of #100331 - lo48576:try-reserve-preserve-on-failure, r=thomcc\n\nGuarantee `try_reserve` preserves the contents on error\n\nUpdate doc comments to make the guarantee explicit. However, some\nimplementations does not have the statement though.\n\n* `HashMap`, `HashSet`: require guarantees on hashbrown side.\n* `PathBuf`: simply redirecting to `OsString`.\n\nFixes #99606.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/382ba73062e6ea48dbdd3fab623d4c530ea9a476", "html_url": "https://github.com/rust-lang/rust/commit/382ba73062e6ea48dbdd3fab623d4c530ea9a476", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/382ba73062e6ea48dbdd3fab623d4c530ea9a476/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1a5ec7faf6c32af2f0aae1af4420e1bb1a3a7fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a5ec7faf6c32af2f0aae1af4420e1bb1a3a7fe", "html_url": "https://github.com/rust-lang/rust/commit/c1a5ec7faf6c32af2f0aae1af4420e1bb1a3a7fe"}, {"sha": "2bb7e1e6edf58c39faabb67cfab63dd8109d8055", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bb7e1e6edf58c39faabb67cfab63dd8109d8055", "html_url": "https://github.com/rust-lang/rust/commit/2bb7e1e6edf58c39faabb67cfab63dd8109d8055"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "4583bc9a158efc02c059e239c40962faf529f9ce", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/382ba73062e6ea48dbdd3fab623d4c530ea9a476/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/382ba73062e6ea48dbdd3fab623d4c530ea9a476/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=382ba73062e6ea48dbdd3fab623d4c530ea9a476", "patch": "@@ -1010,7 +1010,8 @@ impl<T> BinaryHeap<T> {\n     /// current length. The allocator may reserve more space to speculatively\n     /// avoid frequent allocations. After calling `try_reserve`, capacity will be\n     /// greater than or equal to `self.len() + additional` if it returns\n-    /// `Ok(())`. Does nothing if capacity is already sufficient.\n+    /// `Ok(())`. Does nothing if capacity is already sufficient. This method\n+    /// preserves the contents even if an error occurs.\n     ///\n     /// # Errors\n     ///"}, {"sha": "347a938fd0c5896b92650c5aecd6901431c1918b", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/382ba73062e6ea48dbdd3fab623d4c530ea9a476/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/382ba73062e6ea48dbdd3fab623d4c530ea9a476/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=382ba73062e6ea48dbdd3fab623d4c530ea9a476", "patch": "@@ -794,7 +794,8 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// in the given deque. The collection may reserve more space to speculatively avoid\n     /// frequent reallocations. After calling `try_reserve`, capacity will be\n     /// greater than or equal to `self.len() + additional` if it returns\n-    /// `Ok(())`. Does nothing if capacity is already sufficient.\n+    /// `Ok(())`. Does nothing if capacity is already sufficient. This method\n+    /// preserves the contents even if an error occurs.\n     ///\n     /// # Errors\n     ///"}, {"sha": "e28ace4795f994aaf89123fc443087bef8075dfc", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/382ba73062e6ea48dbdd3fab623d4c530ea9a476/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/382ba73062e6ea48dbdd3fab623d4c530ea9a476/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=382ba73062e6ea48dbdd3fab623d4c530ea9a476", "patch": "@@ -1080,7 +1080,8 @@ impl String {\n     /// current length. The allocator may reserve more space to speculatively\n     /// avoid frequent allocations. After calling `try_reserve`, capacity will be\n     /// greater than or equal to `self.len() + additional` if it returns\n-    /// `Ok(())`. Does nothing if capacity is already sufficient.\n+    /// `Ok(())`. Does nothing if capacity is already sufficient. This method\n+    /// preserves the contents even if an error occurs.\n     ///\n     /// # Errors\n     ///"}, {"sha": "fe983274b5c721dec8784afca7424bf0b4a4baad", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/382ba73062e6ea48dbdd3fab623d4c530ea9a476/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/382ba73062e6ea48dbdd3fab623d4c530ea9a476/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=382ba73062e6ea48dbdd3fab623d4c530ea9a476", "patch": "@@ -875,7 +875,8 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// in the given `Vec<T>`. The collection may reserve more space to speculatively avoid\n     /// frequent reallocations. After calling `try_reserve`, capacity will be\n     /// greater than or equal to `self.len() + additional` if it returns\n-    /// `Ok(())`. Does nothing if capacity is already sufficient.\n+    /// `Ok(())`. Does nothing if capacity is already sufficient. This method\n+    /// preserves the contents even if an error occurs.\n     ///\n     /// # Errors\n     ///"}, {"sha": "80ed34157e6dcd24b221c81a9dd50a12827dc892", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/382ba73062e6ea48dbdd3fab623d4c530ea9a476/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/382ba73062e6ea48dbdd3fab623d4c530ea9a476/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=382ba73062e6ea48dbdd3fab623d4c530ea9a476", "patch": "@@ -290,7 +290,8 @@ impl OsString {\n     /// in the given `OsString`. The string may reserve more space to speculatively avoid\n     /// frequent reallocations. After calling `try_reserve`, capacity will be\n     /// greater than or equal to `self.len() + additional` if it returns `Ok(())`.\n-    /// Does nothing if capacity is already sufficient.\n+    /// Does nothing if capacity is already sufficient. This method preserves\n+    /// the contents even if an error occurs.\n     ///\n     /// See the main `OsString` documentation information about encoding and capacity units.\n     ///"}, {"sha": "33e20756163fd8761989eb9cf209053909575ed5", "filename": "library/std/src/sys_common/wtf8.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/382ba73062e6ea48dbdd3fab623d4c530ea9a476/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/382ba73062e6ea48dbdd3fab623d4c530ea9a476/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs?ref=382ba73062e6ea48dbdd3fab623d4c530ea9a476", "patch": "@@ -236,7 +236,8 @@ impl Wtf8Buf {\n     /// in the given `Wtf8Buf`. The `Wtf8Buf` may reserve more space to avoid\n     /// frequent reallocations. After calling `try_reserve`, capacity will be\n     /// greater than or equal to `self.len() + additional`. Does nothing if\n-    /// capacity is already sufficient.\n+    /// capacity is already sufficient. This method preserves the contents even\n+    /// if an error occurs.\n     ///\n     /// # Errors\n     ///"}]}