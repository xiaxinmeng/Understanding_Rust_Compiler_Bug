{"sha": "f26fdce9917992f71e561cef44a52fb5bd2e6de9", "node_id": "C_kwDOAAsO6NoAKGYyNmZkY2U5OTE3OTkyZjcxZTU2MWNlZjQ0YTUyZmI1YmQyZTZkZTk", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-29T01:10:56Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-29T04:16:53Z"}, "message": "Improve HIR stats collector.\n\nAdds and removes some `visit_*` methods accordingly, improving\ncoverage, and avoiding some double counting. Brings it in line with the\nAST stats collector.", "tree": {"sha": "331391f166f46c4cde5a808e01b12b485a3cf01b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/331391f166f46c4cde5a808e01b12b485a3cf01b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f26fdce9917992f71e561cef44a52fb5bd2e6de9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f26fdce9917992f71e561cef44a52fb5bd2e6de9", "html_url": "https://github.com/rust-lang/rust/commit/f26fdce9917992f71e561cef44a52fb5bd2e6de9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f26fdce9917992f71e561cef44a52fb5bd2e6de9/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a52fbe5366b98480dd9653ac0c0b4afaf6d6ebd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a52fbe5366b98480dd9653ac0c0b4afaf6d6ebd", "html_url": "https://github.com/rust-lang/rust/commit/0a52fbe5366b98480dd9653ac0c0b4afaf6d6ebd"}], "stats": {"total": 316, "additions": 246, "deletions": 70}, "files": [{"sha": "c67283024284410c2b7fff65a55d8766f21c9a96", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 194, "deletions": 50, "changes": 244, "blob_url": "https://github.com/rust-lang/rust/blob/f26fdce9917992f71e561cef44a52fb5bd2e6de9/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26fdce9917992f71e561cef44a52fb5bd2e6de9/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=f26fdce9917992f71e561cef44a52fb5bd2e6de9", "patch": "@@ -168,6 +168,22 @@ impl<'k> StatCollector<'k> {\n     }\n }\n \n+// Used to avoid boilerplate for types with many variants.\n+macro_rules! record_variants {\n+    (\n+        ($self:ident, $val:expr, $kind:expr, $id:expr, $mod:ident, $ty:ty, $tykind:ident),\n+        [$($variant:ident),*]\n+    ) => {\n+        match $kind {\n+            $(\n+                $mod::$tykind::$variant { .. } => {\n+                    $self.record_variant(stringify!($ty), stringify!($variant), $id, $val)\n+                }\n+            )*\n+        }\n+    };\n+}\n+\n impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     fn visit_param(&mut self, param: &'v hir::Param<'v>) {\n         self.record(\"Param\", Id::Node(param.hir_id), param);\n@@ -200,12 +216,46 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_item(&mut self, i: &'v hir::Item<'v>) {\n-        self.record(\"Item\", Id::Node(i.hir_id()), i);\n+        record_variants!(\n+            (self, i, i.kind, Id::Node(i.hir_id()), hir, Item, ItemKind),\n+            [\n+                ExternCrate,\n+                Use,\n+                Static,\n+                Const,\n+                Fn,\n+                Macro,\n+                Mod,\n+                ForeignMod,\n+                GlobalAsm,\n+                TyAlias,\n+                OpaqueTy,\n+                Enum,\n+                Struct,\n+                Union,\n+                Trait,\n+                TraitAlias,\n+                Impl\n+            ]\n+        );\n         hir_visit::walk_item(self, i)\n     }\n \n+    fn visit_body(&mut self, b: &'v hir::Body<'v>) {\n+        self.record(\"Body\", Id::None, b);\n+        hir_visit::walk_body(self, b);\n+    }\n+\n+    fn visit_mod(&mut self, m: &'v hir::Mod<'v>, _s: Span, n: HirId) {\n+        self.record(\"Mod\", Id::None, m);\n+        hir_visit::walk_mod(self, m, n)\n+    }\n+\n     fn visit_foreign_item(&mut self, i: &'v hir::ForeignItem<'v>) {\n-        self.record(\"ForeignItem\", Id::Node(i.hir_id()), i);\n+        record_variants!(\n+            (self, i, i.kind, Id::Node(i.hir_id()), hir, ForeignItem, ForeignItemKind),\n+            [Fn, Static, Type]\n+        );\n         hir_visit::walk_foreign_item(self, i)\n     }\n \n@@ -220,7 +270,10 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_stmt(&mut self, s: &'v hir::Stmt<'v>) {\n-        self.record(\"Stmt\", Id::Node(s.hir_id), s);\n+        record_variants!(\n+            (self, s, s.kind, Id::Node(s.hir_id), hir, Stmt, StmtKind),\n+            [Local, Item, Expr, Semi]\n+        );\n         hir_visit::walk_stmt(self, s)\n     }\n \n@@ -230,20 +283,80 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_pat(&mut self, p: &'v hir::Pat<'v>) {\n-        self.record(\"Pat\", Id::Node(p.hir_id), p);\n+        record_variants!(\n+            (self, p, p.kind, Id::Node(p.hir_id), hir, Pat, PatKind),\n+            [Wild, Binding, Struct, TupleStruct, Or, Path, Tuple, Box, Ref, Lit, Range, Slice]\n+        );\n         hir_visit::walk_pat(self, p)\n     }\n \n-    fn visit_expr(&mut self, ex: &'v hir::Expr<'v>) {\n-        self.record(\"Expr\", Id::Node(ex.hir_id), ex);\n-        hir_visit::walk_expr(self, ex)\n+    fn visit_pat_field(&mut self, f: &'v hir::PatField<'v>) {\n+        self.record(\"PatField\", Id::Node(f.hir_id), f);\n+        hir_visit::walk_pat_field(self, f)\n+    }\n+\n+    fn visit_expr(&mut self, e: &'v hir::Expr<'v>) {\n+        record_variants!(\n+            (self, e, e.kind, Id::Node(e.hir_id), hir, Expr, ExprKind),\n+            [\n+                Box, ConstBlock, Array, Call, MethodCall, Tup, Binary, Unary, Lit, Cast, Type,\n+                DropTemps, Let, If, Loop, Match, Closure, Block, Assign, AssignOp, Field, Index,\n+                Path, AddrOf, Break, Continue, Ret, InlineAsm, Struct, Repeat, Yield, Err\n+            ]\n+        );\n+        hir_visit::walk_expr(self, e)\n+    }\n+\n+    fn visit_let_expr(&mut self, lex: &'v hir::Let<'v>) {\n+        self.record(\"Let\", Id::Node(lex.hir_id), lex);\n+        hir_visit::walk_let_expr(self, lex)\n+    }\n+\n+    fn visit_expr_field(&mut self, f: &'v hir::ExprField<'v>) {\n+        self.record(\"ExprField\", Id::Node(f.hir_id), f);\n+        hir_visit::walk_expr_field(self, f)\n     }\n \n     fn visit_ty(&mut self, t: &'v hir::Ty<'v>) {\n-        self.record(\"Ty\", Id::Node(t.hir_id), t);\n+        record_variants!(\n+            (self, t, t.kind, Id::Node(t.hir_id), hir, Ty, TyKind),\n+            [\n+                Slice,\n+                Array,\n+                Ptr,\n+                Rptr,\n+                BareFn,\n+                Never,\n+                Tup,\n+                Path,\n+                OpaqueDef,\n+                TraitObject,\n+                Typeof,\n+                Infer,\n+                Err\n+            ]\n+        );\n         hir_visit::walk_ty(self, t)\n     }\n \n+    fn visit_generic_param(&mut self, p: &'v hir::GenericParam<'v>) {\n+        self.record(\"GenericParam\", Id::Node(p.hir_id), p);\n+        hir_visit::walk_generic_param(self, p)\n+    }\n+\n+    fn visit_generics(&mut self, g: &'v hir::Generics<'v>) {\n+        self.record(\"Generics\", Id::None, g);\n+        hir_visit::walk_generics(self, g)\n+    }\n+\n+    fn visit_where_predicate(&mut self, p: &'v hir::WherePredicate<'v>) {\n+        record_variants!(\n+            (self, p, p, Id::None, hir, WherePredicate, WherePredicate),\n+            [BoundPredicate, RegionPredicate, EqPredicate]\n+        );\n+        hir_visit::walk_where_predicate(self, p)\n+    }\n+\n     fn visit_fn(\n         &mut self,\n         fk: hir_visit::FnKind<'v>,\n@@ -256,24 +369,49 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_fn(self, fk, fd, b, s, id)\n     }\n \n-    fn visit_where_predicate(&mut self, predicate: &'v hir::WherePredicate<'v>) {\n-        self.record(\"WherePredicate\", Id::None, predicate);\n-        hir_visit::walk_where_predicate(self, predicate)\n+    fn visit_use(&mut self, p: &'v hir::Path<'v>, hir_id: hir::HirId) {\n+        // This is `visit_use`, but the type is `Path` so record it that way.\n+        self.record(\"Path\", Id::None, p);\n+        hir_visit::walk_use(self, p, hir_id)\n     }\n \n     fn visit_trait_item(&mut self, ti: &'v hir::TraitItem<'v>) {\n-        self.record(\"TraitItem\", Id::Node(ti.hir_id()), ti);\n+        record_variants!(\n+            (self, ti, ti.kind, Id::Node(ti.hir_id()), hir, TraitItem, TraitItemKind),\n+            [Const, Fn, Type]\n+        );\n         hir_visit::walk_trait_item(self, ti)\n     }\n \n+    fn visit_trait_item_ref(&mut self, ti: &'v hir::TraitItemRef) {\n+        self.record(\"TraitItemRef\", Id::Node(ti.id.hir_id()), ti);\n+        hir_visit::walk_trait_item_ref(self, ti)\n+    }\n+\n     fn visit_impl_item(&mut self, ii: &'v hir::ImplItem<'v>) {\n-        self.record(\"ImplItem\", Id::Node(ii.hir_id()), ii);\n+        record_variants!(\n+            (self, ii, ii.kind, Id::Node(ii.hir_id()), hir, ImplItem, ImplItemKind),\n+            [Const, Fn, TyAlias]\n+        );\n         hir_visit::walk_impl_item(self, ii)\n     }\n \n-    fn visit_param_bound(&mut self, bounds: &'v hir::GenericBound<'v>) {\n-        self.record(\"GenericBound\", Id::None, bounds);\n-        hir_visit::walk_param_bound(self, bounds)\n+    fn visit_foreign_item_ref(&mut self, fi: &'v hir::ForeignItemRef) {\n+        self.record(\"ForeignItemRef\", Id::Node(fi.id.hir_id()), fi);\n+        hir_visit::walk_foreign_item_ref(self, fi)\n+    }\n+\n+    fn visit_impl_item_ref(&mut self, ii: &'v hir::ImplItemRef) {\n+        self.record(\"ImplItemRef\", Id::Node(ii.id.hir_id()), ii);\n+        hir_visit::walk_impl_item_ref(self, ii)\n+    }\n+\n+    fn visit_param_bound(&mut self, b: &'v hir::GenericBound<'v>) {\n+        record_variants!(\n+            (self, b, b, Id::None, hir, GenericBound, GenericBound),\n+            [Trait, LangItemTrait, Outlives]\n+        );\n+        hir_visit::walk_param_bound(self, b)\n     }\n \n     fn visit_field_def(&mut self, s: &'v hir::FieldDef<'v>) {\n@@ -286,14 +424,17 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_variant(self, v)\n     }\n \n-    fn visit_lifetime(&mut self, lifetime: &'v hir::Lifetime) {\n-        self.record(\"Lifetime\", Id::Node(lifetime.hir_id), lifetime);\n-        hir_visit::walk_lifetime(self, lifetime)\n-    }\n-\n-    fn visit_qpath(&mut self, qpath: &'v hir::QPath<'v>, id: hir::HirId, span: Span) {\n-        self.record(\"QPath\", Id::None, qpath);\n-        hir_visit::walk_qpath(self, qpath, id, span)\n+    fn visit_generic_arg(&mut self, ga: &'v hir::GenericArg<'v>) {\n+        record_variants!(\n+            (self, ga, ga, Id::Node(ga.hir_id()), hir, GenericArg, GenericArg),\n+            [Lifetime, Type, Const, Infer]\n+        );\n+        match ga {\n+            hir::GenericArg::Lifetime(lt) => self.visit_lifetime(lt),\n+            hir::GenericArg::Type(ty) => self.visit_ty(ty),\n+            hir::GenericArg::Const(ct) => self.visit_anon_const(&ct.value),\n+            hir::GenericArg::Infer(inf) => self.visit_infer(inf),\n+        }\n     }\n \n     fn visit_path(&mut self, path: &'v hir::Path<'v>, _id: hir::HirId) {\n@@ -306,6 +447,11 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_path_segment(self, path_span, path_segment)\n     }\n \n+    fn visit_generic_args(&mut self, sp: Span, ga: &'v hir::GenericArgs<'v>) {\n+        self.record(\"GenericArgs\", Id::None, ga);\n+        hir_visit::walk_generic_args(self, sp, ga)\n+    }\n+\n     fn visit_assoc_type_binding(&mut self, type_binding: &'v hir::TypeBinding<'v>) {\n         self.record(\"TypeBinding\", Id::Node(type_binding.hir_id), type_binding);\n         hir_visit::walk_assoc_type_binding(self, type_binding)\n@@ -314,36 +460,25 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     fn visit_attribute(&mut self, attr: &'v ast::Attribute) {\n         self.record(\"Attribute\", Id::Attr(attr.id), attr);\n     }\n-}\n \n-// Used to avoid boilerplate for types with many variants.\n-macro_rules! record_variants {\n-    (\n-        ($self:ident, $val:expr, $kind:expr, $ty:ty, $tykind:ident), // mandatory pieces\n-        [$($variant:ident),*]\n-    ) => {\n-        match $kind {\n-            $(\n-                ast::$tykind::$variant { .. } => {\n-                    $self.record_variant(stringify!($ty), stringify!($variant), Id::None, $val)\n-                }\n-            )*\n-        }\n-    };\n+    fn visit_inline_asm(&mut self, asm: &'v hir::InlineAsm<'v>, id: HirId) {\n+        self.record(\"InlineAsm\", Id::None, asm);\n+        hir_visit::walk_inline_asm(self, asm, id);\n+    }\n }\n \n impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n     fn visit_foreign_item(&mut self, i: &'v ast::ForeignItem) {\n         record_variants!(\n-            (self, i, i.kind, ForeignItem, ForeignItemKind),\n+            (self, i, i.kind, Id::None, ast, ForeignItem, ForeignItemKind),\n             [Static, Fn, TyAlias, MacCall]\n         );\n         ast_visit::walk_foreign_item(self, i)\n     }\n \n     fn visit_item(&mut self, i: &'v ast::Item) {\n         record_variants!(\n-            (self, i, i.kind, Item, ItemKind),\n+            (self, i, i.kind, Id::None, ast, Item, ItemKind),\n             [\n                 ExternCrate,\n                 Use,\n@@ -379,7 +514,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n \n     fn visit_stmt(&mut self, s: &'v ast::Stmt) {\n         record_variants!(\n-            (self, s, s.kind, Stmt, StmtKind),\n+            (self, s, s.kind, Id::None, ast, Stmt, StmtKind),\n             [Local, Item, Expr, Semi, Empty, MacCall]\n         );\n         ast_visit::walk_stmt(self, s)\n@@ -397,7 +532,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n \n     fn visit_pat(&mut self, p: &'v ast::Pat) {\n         record_variants!(\n-            (self, p, p.kind, Pat, PatKind),\n+            (self, p, p.kind, Id::None, ast, Pat, PatKind),\n             [\n                 Wild,\n                 Ident,\n@@ -421,7 +556,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n \n     fn visit_expr(&mut self, e: &'v ast::Expr) {\n         record_variants!(\n-            (self, e, e.kind, Expr, ExprKind),\n+            (self, e, e.kind, Id::None, ast, Expr, ExprKind),\n             [\n                 Box, Array, ConstBlock, Call, MethodCall, Tup, Binary, Unary, Lit, Cast, Type, Let,\n                 If, While, ForLoop, Loop, Match, Closure, Block, Async, Await, TryBlock, Assign,\n@@ -434,7 +569,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n \n     fn visit_ty(&mut self, t: &'v ast::Ty) {\n         record_variants!(\n-            (self, t, t.kind, Ty, TyKind),\n+            (self, t, t.kind, Id::None, ast, Ty, TyKind),\n             [\n                 Slice,\n                 Array,\n@@ -466,7 +601,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n \n     fn visit_where_predicate(&mut self, p: &'v ast::WherePredicate) {\n         record_variants!(\n-            (self, p, p, WherePredicate, WherePredicate),\n+            (self, p, p, Id::None, ast, WherePredicate, WherePredicate),\n             [BoundPredicate, RegionPredicate, EqPredicate]\n         );\n         ast_visit::walk_where_predicate(self, p)\n@@ -479,14 +614,17 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n \n     fn visit_assoc_item(&mut self, i: &'v ast::AssocItem, ctxt: ast_visit::AssocCtxt) {\n         record_variants!(\n-            (self, i, i.kind, AssocItem, AssocItemKind),\n+            (self, i, i.kind, Id::None, ast, AssocItem, AssocItemKind),\n             [Const, Fn, TyAlias, MacCall]\n         );\n         ast_visit::walk_assoc_item(self, i, ctxt);\n     }\n \n     fn visit_param_bound(&mut self, b: &'v ast::GenericBound, _ctxt: BoundKind) {\n-        record_variants!((self, b, b, GenericBound, GenericBound), [Trait, Outlives]);\n+        record_variants!(\n+            (self, b, b, Id::None, ast, GenericBound, GenericBound),\n+            [Trait, Outlives]\n+        );\n         ast_visit::walk_param_bound(self, b)\n     }\n \n@@ -519,12 +657,18 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n     // common, so we implement `visit_generic_args` and tolerate the double\n     // counting in the former case.\n     fn visit_generic_args(&mut self, sp: Span, g: &'v ast::GenericArgs) {\n-        record_variants!((self, g, g, GenericArgs, GenericArgs), [AngleBracketed, Parenthesized]);\n+        record_variants!(\n+            (self, g, g, Id::None, ast, GenericArgs, GenericArgs),\n+            [AngleBracketed, Parenthesized]\n+        );\n         ast_visit::walk_generic_args(self, sp, g)\n     }\n \n     fn visit_attribute(&mut self, attr: &'v ast::Attribute) {\n-        record_variants!((self, attr, attr.kind, Attribute, AttrKind), [Normal, DocComment]);\n+        record_variants!(\n+            (self, attr, attr.kind, Id::None, ast, Attribute, AttrKind),\n+            [Normal, DocComment]\n+        );\n         ast_visit::walk_attribute(self, attr)\n     }\n "}, {"sha": "78f709975556fd4858334fff99e87d9bd1b09088", "filename": "src/test/ui/stats/hir-stats.stderr", "status": "modified", "additions": 52, "deletions": 20, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/f26fdce9917992f71e561cef44a52fb5bd2e6de9/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f26fdce9917992f71e561cef44a52fb5bd2e6de9/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr?ref=f26fdce9917992f71e561cef44a52fb5bd2e6de9", "patch": "@@ -118,28 +118,60 @@ ast-stats-2\n hir-stats HIR STATS\n hir-stats Name                Accumulated Size         Count     Item Size\n hir-stats ----------------------------------------------------------------\n-hir-stats Param                     64 ( 0.7%)             2            32\n-hir-stats Local                     64 ( 0.7%)             1            64\n-hir-stats ForeignItem               72 ( 0.8%)             1            72\n+hir-stats ForeignItemRef            24 ( 0.2%)             1            24\n+hir-stats Mod                       32 ( 0.3%)             1            32\n+hir-stats ExprField                 40 ( 0.4%)             1            40\n+hir-stats TraitItemRef              56 ( 0.6%)             2            28\n+hir-stats Param                     64 ( 0.6%)             2            32\n+hir-stats Local                     64 ( 0.6%)             1            64\n+hir-stats InlineAsm                 72 ( 0.7%)             1            72\n+hir-stats ImplItemRef               72 ( 0.7%)             2            36\n hir-stats FieldDef                  96 ( 1.0%)             2            48\n hir-stats Arm                       96 ( 1.0%)             2            48\n+hir-stats Body                      96 ( 1.0%)             3            32\n hir-stats Stmt                      96 ( 1.0%)             3            32\n-hir-stats FnDecl                   120 ( 1.3%)             3            40\n-hir-stats Attribute                128 ( 1.4%)             4            32\n-hir-stats Lifetime                 128 ( 1.4%)             4            32\n-hir-stats Variant                  160 ( 1.7%)             2            80\n-hir-stats ImplItem                 176 ( 1.9%)             2            88\n-hir-stats GenericBound             192 ( 2.1%)             4            48\n-hir-stats TraitItem                192 ( 2.1%)             2            96\n-hir-stats WherePredicate           216 ( 2.3%)             3            72\n-hir-stats Block                    288 ( 3.1%)             6            48\n-hir-stats QPath                    408 ( 4.4%)            17            24\n-hir-stats Pat                      440 ( 4.8%)             5            88\n-hir-stats Expr                     672 ( 7.3%)            12            56\n-hir-stats Item                     960 (10.4%)            12            80\n-hir-stats Ty                     1_152 (12.4%)            16            72\n-hir-stats Path                   1_296 (14.0%)            27            48\n-hir-stats PathSegment            2_240 (24.2%)            40            56\n+hir-stats - Local                     32 ( 0.3%)             1\n+hir-stats - Semi                      32 ( 0.3%)             1\n+hir-stats - Expr                      32 ( 0.3%)             1\n+hir-stats FnDecl                   120 ( 1.2%)             3            40\n+hir-stats Attribute                128 ( 1.3%)             4            32\n+hir-stats GenericArgs              144 ( 1.4%)             3            48\n+hir-stats Variant                  160 ( 1.6%)             2            80\n+hir-stats GenericArg               160 ( 1.6%)             4            40\n+hir-stats - Type                      40 ( 0.4%)             1\n+hir-stats - Lifetime                 120 ( 1.2%)             3\n+hir-stats GenericBound             192 ( 1.9%)             4            48\n+hir-stats - Trait                    192 ( 1.9%)             4\n+hir-stats WherePredicate           216 ( 2.1%)             3            72\n+hir-stats - BoundPredicate           216 ( 2.1%)             3\n+hir-stats Block                    288 ( 2.9%)             6            48\n+hir-stats GenericParam             400 ( 4.0%)             5            80\n+hir-stats Pat                      440 ( 4.4%)             5            88\n+hir-stats - Wild                      88 ( 0.9%)             1\n+hir-stats - Struct                    88 ( 0.9%)             1\n+hir-stats - Binding                  264 ( 2.6%)             3\n+hir-stats Generics                 560 ( 5.5%)            10            56\n+hir-stats Expr                     672 ( 6.7%)            12            56\n+hir-stats - Path                      56 ( 0.6%)             1\n+hir-stats - Struct                    56 ( 0.6%)             1\n+hir-stats - Match                     56 ( 0.6%)             1\n+hir-stats - InlineAsm                 56 ( 0.6%)             1\n+hir-stats - Lit                      112 ( 1.1%)             2\n+hir-stats - Block                    336 ( 3.3%)             6\n+hir-stats Item                     960 ( 9.5%)            12            80\n+hir-stats - Trait                     80 ( 0.8%)             1\n+hir-stats - Enum                      80 ( 0.8%)             1\n+hir-stats - ExternCrate               80 ( 0.8%)             1\n+hir-stats - ForeignMod                80 ( 0.8%)             1\n+hir-stats - Impl                      80 ( 0.8%)             1\n+hir-stats - Fn                       160 ( 1.6%)             2\n+hir-stats - Use                      400 ( 4.0%)             5\n+hir-stats Ty                     1_080 (10.7%)            15            72\n+hir-stats - Ptr                       72 ( 0.7%)             1\n+hir-stats - Rptr                      72 ( 0.7%)             1\n+hir-stats - Path                     936 ( 9.3%)            13\n+hir-stats Path                   1_536 (15.2%)            32            48\n+hir-stats PathSegment            2_240 (22.2%)            40            56\n hir-stats ----------------------------------------------------------------\n-hir-stats Total                  9_256\n+hir-stats Total                 10_104\n hir-stats"}]}