{"sha": "d9519791590170fd77aa45cc9a802539eaf16efc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NTE5NzkxNTkwMTcwZmQ3N2FhNDVjYzlhODAyNTM5ZWFmMTZlZmM=", "commit": {"author": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2018-12-14T17:00:35Z"}, "committer": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2018-12-25T18:49:55Z"}, "message": "test translate_offset_with_edit against simple impl for single edits", "tree": {"sha": "ebd711bfab97eea59dff07623f7b3b55482b6cb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebd711bfab97eea59dff07623f7b3b55482b6cb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9519791590170fd77aa45cc9a802539eaf16efc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9519791590170fd77aa45cc9a802539eaf16efc", "html_url": "https://github.com/rust-lang/rust/commit/d9519791590170fd77aa45cc9a802539eaf16efc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9519791590170fd77aa45cc9a802539eaf16efc/comments", "author": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dee426e1b120cd12fc608df77f977d4800b6655d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dee426e1b120cd12fc608df77f977d4800b6655d", "html_url": "https://github.com/rust-lang/rust/commit/dee426e1b120cd12fc608df77f977d4800b6655d"}], "stats": {"total": 139, "additions": 104, "deletions": 35}, "files": [{"sha": "a63eac57a13a3e49dcb8a114997848f993a5d28f", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9519791590170fd77aa45cc9a802539eaf16efc/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d9519791590170fd77aa45cc9a802539eaf16efc/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d9519791590170fd77aa45cc9a802539eaf16efc", "patch": "@@ -763,6 +763,7 @@ dependencies = [\n  \"languageserver-types 0.53.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proptest 0.8.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_analysis 0.1.0\",\n  \"ra_editor 0.1.0\",\n  \"ra_syntax 0.1.0\","}, {"sha": "d73ff158f97f9944a920d9c58ddb69cb46c8a181", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9519791590170fd77aa45cc9a802539eaf16efc/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d9519791590170fd77aa45cc9a802539eaf16efc/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=d9519791590170fd77aa45cc9a802539eaf16efc", "patch": "@@ -34,6 +34,8 @@ ra_analysis = { path = \"../ra_analysis\" }\n gen_lsp_server = { path = \"../gen_lsp_server\" }\n ra_vfs = { path = \"../ra_vfs\" }\n \n+proptest = \"0.8.7\"\n+\n [dev-dependencies]\n tempdir = \"0.3.7\"\n-test_utils = { path = \"../test_utils\" }\n+test_utils = { path = \"../test_utils\" }\n\\ No newline at end of file"}, {"sha": "1db4991759c1a395228be4b76a03eaaf73d2b17b", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/d9519791590170fd77aa45cc9a802539eaf16efc/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9519791590170fd77aa45cc9a802539eaf16efc/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=d9519791590170fd77aa45cc9a802539eaf16efc", "patch": "@@ -386,3 +386,64 @@ where\n         self.iter.next().map(|item| item.conv_with(self.ctx))\n     }\n }\n+\n+#[cfg(test)]\n+mod test {\n+    use proptest::{prelude::*, proptest, proptest_helper};\n+    use super::*;\n+    use ra_text_edit::test_utils::{arb_text, arb_offset, arb_edits};\n+\n+    #[derive(Debug)]\n+    struct ArbTextWithOffsetAndEdits {\n+        text: String,\n+        offset: TextUnit,\n+        edits: Vec<AtomTextEdit>,\n+    }\n+\n+    fn arb_text_with_offset_and_edits() -> BoxedStrategy<ArbTextWithOffsetAndEdits> {\n+        arb_text()\n+            .prop_flat_map(|text| {\n+                (arb_offset(&text), arb_edits(&text), Just(text)).prop_map(\n+                    |(offset, edits, text)| ArbTextWithOffsetAndEdits {\n+                        text,\n+                        offset,\n+                        edits,\n+                    },\n+                )\n+            })\n+            .boxed()\n+    }\n+\n+    fn translate_offset_with_edit_naive(\n+        pre_edit_text: String,\n+        offset: TextUnit,\n+        edits: &[AtomTextEdit],\n+    ) -> LineCol {\n+        // apply edits ordered from last to first\n+        // since they should not overlap we can just use start()\n+        let mut edits: Vec<AtomTextEdit> = edits.to_vec();\n+        edits.sort_by_key(|x| -(x.delete.start().to_usize() as isize));\n+\n+        let mut text = pre_edit_text;\n+\n+        for edit in &edits {\n+            let range = edit.delete.start().to_usize()..edit.delete.end().to_usize();\n+            text.replace_range(range, &edit.insert);\n+        }\n+\n+        let line_index = LineIndex::new(&text);\n+\n+        line_index.line_col(offset)\n+    }\n+\n+    proptest! {\n+        #[test]\n+        fn test_translate_offset_with_edit(x in arb_text_with_offset_and_edits()) {\n+            if x.edits.len() <= 1 {\n+                let expected = translate_offset_with_edit_naive(x.text.clone(), x.offset, &x.edits);\n+                let actual = translate_offset_with_edit(&LineIndex::new(&x.text), x.offset, &x.edits);\n+                assert_eq!(actual, expected);\n+            }\n+        }\n+    }\n+}"}, {"sha": "e0db49688e18faaa8bd87dd98448f48644b40e9f", "filename": "crates/ra_text_edit/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9519791590170fd77aa45cc9a802539eaf16efc/crates%2Fra_text_edit%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d9519791590170fd77aa45cc9a802539eaf16efc/crates%2Fra_text_edit%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2FCargo.toml?ref=d9519791590170fd77aa45cc9a802539eaf16efc", "patch": "@@ -7,7 +7,7 @@ publish = false\n \n [dependencies]\n text_unit = \"0.1.5\"\n+proptest = \"0.8.7\"\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }\n-proptest = \"0.8.7\""}, {"sha": "89600413ad2f022497a158f734774a2ade73d256", "filename": "crates/ra_text_edit/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9519791590170fd77aa45cc9a802539eaf16efc/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9519791590170fd77aa45cc9a802539eaf16efc/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Flib.rs?ref=d9519791590170fd77aa45cc9a802539eaf16efc", "patch": "@@ -1,6 +1,5 @@\n mod text_edit;\n pub mod text_utils;\n-#[cfg(test)]\n pub mod test_utils;\n \n pub use crate::text_edit::{TextEdit, TextEditBuilder};"}, {"sha": "4a0ebc08ecfdd96e34d69145db05f20aac0d1c98", "filename": "crates/ra_text_edit/src/test_utils.rs", "status": "modified", "additions": 38, "deletions": 32, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/d9519791590170fd77aa45cc9a802539eaf16efc/crates%2Fra_text_edit%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9519791590170fd77aa45cc9a802539eaf16efc/crates%2Fra_text_edit%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Ftest_utils.rs?ref=d9519791590170fd77aa45cc9a802539eaf16efc", "patch": "@@ -1,4 +1,4 @@\n-use proptest::{prelude::*, proptest, proptest_helper};\n+use proptest::prelude::*;\n use text_unit::{TextUnit, TextRange};\n use crate::AtomTextEdit;\n \n@@ -66,42 +66,48 @@ pub fn arb_edits(text: &str) -> BoxedStrategy<Vec<AtomTextEdit>> {\n         .boxed()\n }\n \n-fn arb_text_with_edits() -> BoxedStrategy<(String, Vec<AtomTextEdit>)> {\n-    let text = arb_text();\n-    text.prop_flat_map(|s| {\n-        let edits = arb_edits(&s);\n-        (Just(s), edits)\n-    })\n-    .boxed()\n-}\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use proptest::{proptest, proptest_helper};\n \n-fn intersect(r1: TextRange, r2: TextRange) -> Option<TextRange> {\n-    let start = r1.start().max(r2.start());\n-    let end = r1.end().min(r2.end());\n-    if start <= end {\n-        Some(TextRange::from_to(start, end))\n-    } else {\n-        None\n+    fn arb_text_with_edits() -> BoxedStrategy<(String, Vec<AtomTextEdit>)> {\n+        let text = arb_text();\n+        text.prop_flat_map(|s| {\n+            let edits = arb_edits(&s);\n+            (Just(s), edits)\n+        })\n+        .boxed()\n     }\n-}\n \n-proptest! {\n-    #[test]\n-    fn atom_text_edits_are_valid((text, edits) in arb_text_with_edits()) {\n-        proptest_atom_text_edits_are_valid(text, edits)\n+    fn intersect(r1: TextRange, r2: TextRange) -> Option<TextRange> {\n+        let start = r1.start().max(r2.start());\n+        let end = r1.end().min(r2.end());\n+        if start <= end {\n+            Some(TextRange::from_to(start, end))\n+        } else {\n+            None\n+        }\n     }\n-}\n-\n-fn proptest_atom_text_edits_are_valid(text: String, edits: Vec<AtomTextEdit>) {\n-    // slicing doesn't panic\n-    for e in &edits {\n-        let _ = &text[e.delete];\n+    proptest! {\n+        #[test]\n+        fn atom_text_edits_are_valid((text, edits) in arb_text_with_edits()) {\n+            proptest_atom_text_edits_are_valid(text, edits)\n+        }\n     }\n-    // ranges do not overlap\n-    for (i1, e1) in edits.iter().skip(1).enumerate() {\n-        for e2 in &edits[0..i1] {\n-            if intersect(e1.delete, e2.delete).is_some() {\n-                assert!(false, \"Overlapping ranges {} {}\", e1.delete, e2.delete);\n+\n+    fn proptest_atom_text_edits_are_valid(text: String, edits: Vec<AtomTextEdit>) {\n+        // slicing doesn't panic\n+        for e in &edits {\n+            let _ = &text[e.delete];\n+        }\n+        // ranges do not overlap\n+        for i in 1..edits.len() {\n+            let e1 = &edits[i];\n+            for e2 in &edits[0..i] {\n+                if intersect(e1.delete, e2.delete).is_some() {\n+                    assert!(false, \"Overlapping ranges {} {}\", e1.delete, e2.delete);\n+                }\n             }\n         }\n     }"}]}