{"sha": "2b172194686f0769e70d95cf6d8f571bc29a023e", "node_id": "C_kwDOAAsO6NoAKDJiMTcyMTk0Njg2ZjA3NjllNzBkOTVjZjZkOGY1NzFiYzI5YTAyM2U", "commit": {"author": {"name": "Nika Layzell", "email": "nika@thelayzells.com", "date": "2021-06-29T20:36:10Z"}, "committer": {"name": "Nika Layzell", "email": "nika@thelayzells.com", "date": "2022-06-17T03:16:30Z"}, "message": "proc_macro: use macros to simplify aggregate Mark/Unmark definitions", "tree": {"sha": "6191614ffd7dcee52308637375f1c87c63d9d260", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6191614ffd7dcee52308637375f1c87c63d9d260"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b172194686f0769e70d95cf6d8f571bc29a023e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b172194686f0769e70d95cf6d8f571bc29a023e", "html_url": "https://github.com/rust-lang/rust/commit/2b172194686f0769e70d95cf6d8f571bc29a023e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b172194686f0769e70d95cf6d8f571bc29a023e/comments", "author": {"login": "mystor", "id": 1261662, "node_id": "MDQ6VXNlcjEyNjE2NjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1261662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mystor", "html_url": "https://github.com/mystor", "followers_url": "https://api.github.com/users/mystor/followers", "following_url": "https://api.github.com/users/mystor/following{/other_user}", "gists_url": "https://api.github.com/users/mystor/gists{/gist_id}", "starred_url": "https://api.github.com/users/mystor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mystor/subscriptions", "organizations_url": "https://api.github.com/users/mystor/orgs", "repos_url": "https://api.github.com/users/mystor/repos", "events_url": "https://api.github.com/users/mystor/events{/privacy}", "received_events_url": "https://api.github.com/users/mystor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mystor", "id": 1261662, "node_id": "MDQ6VXNlcjEyNjE2NjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1261662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mystor", "html_url": "https://github.com/mystor", "followers_url": "https://api.github.com/users/mystor/followers", "following_url": "https://api.github.com/users/mystor/following{/other_user}", "gists_url": "https://api.github.com/users/mystor/gists{/gist_id}", "starred_url": "https://api.github.com/users/mystor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mystor/subscriptions", "organizations_url": "https://api.github.com/users/mystor/orgs", "repos_url": "https://api.github.com/users/mystor/repos", "events_url": "https://api.github.com/users/mystor/events{/privacy}", "received_events_url": "https://api.github.com/users/mystor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1793ee06589193a33f7f3d6670928dcb5a0f4742", "url": "https://api.github.com/repos/rust-lang/rust/commits/1793ee06589193a33f7f3d6670928dcb5a0f4742", "html_url": "https://github.com/rust-lang/rust/commit/1793ee06589193a33f7f3d6670928dcb5a0f4742"}], "stats": {"total": 58, "additions": 34, "deletions": 24}, "files": [{"sha": "22b4b047396bf06efa9cd9fb8205d04fa3c40f03", "filename": "library/proc_macro/src/bridge/mod.rs", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/2b172194686f0769e70d95cf6d8f571bc29a023e/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b172194686f0769e70d95cf6d8f571bc29a023e/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs?ref=2b172194686f0769e70d95cf6d8f571bc29a023e", "patch": "@@ -409,6 +409,39 @@ rpc_encode_decode!(\n     }\n );\n \n+macro_rules! mark_compound {\n+    (enum $name:ident <$($T:ident),+> { $($variant:ident $(($field:ident))?),* $(,)? }) => {\n+        impl<$($T: Mark),+> Mark for $name <$($T),+> {\n+            type Unmarked = $name <$($T::Unmarked),+>;\n+            fn mark(unmarked: Self::Unmarked) -> Self {\n+                match unmarked {\n+                    $($name::$variant $(($field))? => {\n+                        $name::$variant $((Mark::mark($field)))?\n+                    })*\n+                }\n+            }\n+        }\n+\n+        impl<$($T: Unmark),+> Unmark for $name <$($T),+> {\n+            type Unmarked = $name <$($T::Unmarked),+>;\n+            fn unmark(self) -> Self::Unmarked {\n+                match self {\n+                    $($name::$variant $(($field))? => {\n+                        $name::$variant $((Unmark::unmark($field)))?\n+                    })*\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+macro_rules! compound_traits {\n+    ($($t:tt)*) => {\n+        rpc_encode_decode!($($t)*);\n+        mark_compound!($($t)*);\n+    };\n+}\n+\n #[derive(Clone)]\n pub enum TokenTree<G, P, I, L> {\n     Group(G),\n@@ -417,30 +450,7 @@ pub enum TokenTree<G, P, I, L> {\n     Literal(L),\n }\n \n-impl<G: Mark, P: Mark, I: Mark, L: Mark> Mark for TokenTree<G, P, I, L> {\n-    type Unmarked = TokenTree<G::Unmarked, P::Unmarked, I::Unmarked, L::Unmarked>;\n-    fn mark(unmarked: Self::Unmarked) -> Self {\n-        match unmarked {\n-            TokenTree::Group(tt) => TokenTree::Group(G::mark(tt)),\n-            TokenTree::Punct(tt) => TokenTree::Punct(P::mark(tt)),\n-            TokenTree::Ident(tt) => TokenTree::Ident(I::mark(tt)),\n-            TokenTree::Literal(tt) => TokenTree::Literal(L::mark(tt)),\n-        }\n-    }\n-}\n-impl<G: Unmark, P: Unmark, I: Unmark, L: Unmark> Unmark for TokenTree<G, P, I, L> {\n-    type Unmarked = TokenTree<G::Unmarked, P::Unmarked, I::Unmarked, L::Unmarked>;\n-    fn unmark(self) -> Self::Unmarked {\n-        match self {\n-            TokenTree::Group(tt) => TokenTree::Group(tt.unmark()),\n-            TokenTree::Punct(tt) => TokenTree::Punct(tt.unmark()),\n-            TokenTree::Ident(tt) => TokenTree::Ident(tt.unmark()),\n-            TokenTree::Literal(tt) => TokenTree::Literal(tt.unmark()),\n-        }\n-    }\n-}\n-\n-rpc_encode_decode!(\n+compound_traits!(\n     enum TokenTree<G, P, I, L> {\n         Group(tt),\n         Punct(tt),"}]}