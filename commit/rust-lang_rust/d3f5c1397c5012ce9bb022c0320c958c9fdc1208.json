{"sha": "d3f5c1397c5012ce9bb022c0320c958c9fdc1208", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZjVjMTM5N2M1MDEyY2U5YmIwMjJjMDMyMGM5NThjOWZkYzEyMDg=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-04T21:17:07Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:45Z"}, "message": "libcore: impl CharEq for FnMut(char) -> bool implementors", "tree": {"sha": "01d5d2cb13541d1ff89bc26dbfa0ced578aaa23d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01d5d2cb13541d1ff89bc26dbfa0ced578aaa23d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3f5c1397c5012ce9bb022c0320c958c9fdc1208", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3f5c1397c5012ce9bb022c0320c958c9fdc1208", "html_url": "https://github.com/rust-lang/rust/commit/d3f5c1397c5012ce9bb022c0320c958c9fdc1208", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3f5c1397c5012ce9bb022c0320c958c9fdc1208/comments", "author": null, "committer": null, "parents": [{"sha": "aa921b61622a6dc08d5c70cb6a217b1f6d304aac", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa921b61622a6dc08d5c70cb6a217b1f6d304aac", "html_url": "https://github.com/rust-lang/rust/commit/aa921b61622a6dc08d5c70cb6a217b1f6d304aac"}], "stats": {"total": 19, "additions": 6, "deletions": 13}, "files": [{"sha": "328a64acaf8b484e79441d991d1bee262e4d5598", "filename": "src/libcore/str.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d3f5c1397c5012ce9bb022c0320c958c9fdc1208/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f5c1397c5012ce9bb022c0320c958c9fdc1208/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=d3f5c1397c5012ce9bb022c0320c958c9fdc1208", "patch": "@@ -31,6 +31,7 @@ use mem;\n use num::Int;\n use option::Option;\n use option::Option::{None, Some};\n+use ops::FnMut;\n use ptr::RawPtr;\n use raw::{Repr, Slice};\n use slice::{mod, SlicePrelude};\n@@ -136,15 +137,7 @@ impl CharEq for char {\n     fn only_ascii(&self) -> bool { (*self as uint) < 128 }\n }\n \n-impl<'a> CharEq for |char|: 'a -> bool {\n-    #[inline]\n-    fn matches(&mut self, c: char) -> bool { (*self)(c) }\n-\n-    #[inline]\n-    fn only_ascii(&self) -> bool { false }\n-}\n-\n-impl CharEq for extern \"Rust\" fn(char) -> bool {\n+impl<F> CharEq for F where F: FnMut(char) -> bool {\n     #[inline]\n     fn matches(&mut self, c: char) -> bool { (*self)(c) }\n \n@@ -2142,11 +2135,11 @@ impl StrPrelude for str {\n \n     #[inline]\n     fn trim_chars<C: CharEq>(&self, mut to_trim: C) -> &str {\n-        let cur = match self.find(|c: char| !to_trim.matches(c)) {\n+        let cur = match self.find(|&mut: c: char| !to_trim.matches(c)) {\n             None => \"\",\n             Some(i) => unsafe { self.slice_unchecked(i, self.len()) }\n         };\n-        match cur.rfind(|c: char| !to_trim.matches(c)) {\n+        match cur.rfind(|&mut: c: char| !to_trim.matches(c)) {\n             None => \"\",\n             Some(i) => {\n                 let right = cur.char_range_at(i).next;\n@@ -2157,15 +2150,15 @@ impl StrPrelude for str {\n \n     #[inline]\n     fn trim_left_chars<C: CharEq>(&self, mut to_trim: C) -> &str {\n-        match self.find(|c: char| !to_trim.matches(c)) {\n+        match self.find(|&mut: c: char| !to_trim.matches(c)) {\n             None => \"\",\n             Some(first) => unsafe { self.slice_unchecked(first, self.len()) }\n         }\n     }\n \n     #[inline]\n     fn trim_right_chars<C: CharEq>(&self, mut to_trim: C) -> &str {\n-        match self.rfind(|c: char| !to_trim.matches(c)) {\n+        match self.rfind(|&mut: c: char| !to_trim.matches(c)) {\n             None => \"\",\n             Some(last) => {\n                 let next = self.char_range_at(last).next;"}]}