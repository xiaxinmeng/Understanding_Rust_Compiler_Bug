{"sha": "73d5cb0a456116f142e773a803715bbdb25988b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczZDVjYjBhNDU2MTE2ZjE0MmU3NzNhODAzNzE1YmJkYjI1OTg4YjE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-06-09T17:59:43Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-06-09T19:27:13Z"}, "message": "expand: Give reasonable NodeIds to lints associated with macro expansions", "tree": {"sha": "8acd50ae815ef3a7d850e98803d4a9064fd72ae9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8acd50ae815ef3a7d850e98803d4a9064fd72ae9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73d5cb0a456116f142e773a803715bbdb25988b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73d5cb0a456116f142e773a803715bbdb25988b1", "html_url": "https://github.com/rust-lang/rust/commit/73d5cb0a456116f142e773a803715bbdb25988b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73d5cb0a456116f142e773a803715bbdb25988b1/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "feb3536eba10c2e4585d066629598f03d5ddc7c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/feb3536eba10c2e4585d066629598f03d5ddc7c6", "html_url": "https://github.com/rust-lang/rust/commit/feb3536eba10c2e4585d066629598f03d5ddc7c6"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "1b164eae5a34594eb10a36d7d3c313cb348020d9", "filename": "src/librustc_builtin_macros/source_util.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/73d5cb0a456116f142e773a803715bbdb25988b1/src%2Flibrustc_builtin_macros%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d5cb0a456116f142e773a803715bbdb25988b1/src%2Flibrustc_builtin_macros%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fsource_util.rs?ref=73d5cb0a456116f142e773a803715bbdb25988b1", "patch": "@@ -122,6 +122,7 @@ pub fn expand_include<'cx>(\n \n     struct ExpandResult<'a> {\n         p: Parser<'a>,\n+        node_id: ast::NodeId,\n     }\n     impl<'a> base::MacResult for ExpandResult<'a> {\n         fn make_expr(mut self: Box<ExpandResult<'a>>) -> Option<P<ast::Expr>> {\n@@ -130,7 +131,7 @@ pub fn expand_include<'cx>(\n                 self.p.sess.buffer_lint(\n                     &INCOMPLETE_INCLUDE,\n                     self.p.token.span,\n-                    ast::CRATE_NODE_ID,\n+                    self.node_id,\n                     \"include macro expected single expression in source\",\n                 );\n             }\n@@ -158,7 +159,7 @@ pub fn expand_include<'cx>(\n         }\n     }\n \n-    Box::new(ExpandResult { p })\n+    Box::new(ExpandResult { p, node_id: cx.resolver.lint_node_id(cx.current_expansion.id) })\n }\n \n // include_str! : read the given file, insert it as a literal string expr"}, {"sha": "a57ae798ffcebf34fe6d8bd87ac776c05f195105", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73d5cb0a456116f142e773a803715bbdb25988b1/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d5cb0a456116f142e773a803715bbdb25988b1/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=73d5cb0a456116f142e773a803715bbdb25988b1", "patch": "@@ -915,6 +915,9 @@ pub trait Resolver {\n \n     fn check_unused_macros(&mut self);\n \n+    /// Some parent node that is close enough to the given macro call.\n+    fn lint_node_id(&mut self, expn_id: ExpnId) -> NodeId;\n+\n     fn has_derive_copy(&self, expn_id: ExpnId) -> bool;\n     fn add_derive_copy(&mut self, expn_id: ExpnId);\n     fn cfg_accessible(&mut self, expn_id: ExpnId, path: &ast::Path) -> Result<bool, Indeterminate>;"}, {"sha": "b63dd653c4dd8a5209447745508ffc1421c8aab2", "filename": "src/librustc_hir/definitions.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73d5cb0a456116f142e773a803715bbdb25988b1/src%2Flibrustc_hir%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d5cb0a456116f142e773a803715bbdb25988b1/src%2Flibrustc_hir%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdefinitions.rs?ref=73d5cb0a456116f142e773a803715bbdb25988b1", "patch": "@@ -519,6 +519,12 @@ impl Definitions {\n         let old_index = self.placeholder_field_indices.insert(node_id, index);\n         assert!(old_index.is_none(), \"placeholder field index is reset for a node ID\");\n     }\n+\n+    pub fn lint_node_id(&mut self, expn_id: ExpnId) -> ast::NodeId {\n+        self.invocation_parents\n+            .get(&expn_id)\n+            .map_or(ast::CRATE_NODE_ID, |id| self.def_id_to_node_id[*id])\n+    }\n }\n \n impl DefPathData {"}, {"sha": "1b49722355e54133bf79c9a2cfc0fc732753a883", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/73d5cb0a456116f142e773a803715bbdb25988b1/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d5cb0a456116f142e773a803715bbdb25988b1/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=73d5cb0a456116f142e773a803715bbdb25988b1", "patch": "@@ -288,7 +288,8 @@ impl<'a> base::Resolver for Resolver<'a> {\n \n         // Derives are not included when `invocations` are collected, so we have to add them here.\n         let parent_scope = &ParentScope { derives, ..parent_scope };\n-        let (ext, res) = self.smart_resolve_macro_path(path, kind, parent_scope, force)?;\n+        let node_id = self.lint_node_id(eager_expansion_root);\n+        let (ext, res) = self.smart_resolve_macro_path(path, kind, parent_scope, node_id, force)?;\n \n         let span = invoc.span();\n         invoc_id.set_expn_data(ext.expn_data(\n@@ -338,6 +339,10 @@ impl<'a> base::Resolver for Resolver<'a> {\n         }\n     }\n \n+    fn lint_node_id(&mut self, expn_id: ExpnId) -> NodeId {\n+        self.definitions.lint_node_id(expn_id)\n+    }\n+\n     fn has_derive_copy(&self, expn_id: ExpnId) -> bool {\n         self.containers_deriving_copy.contains(&expn_id)\n     }\n@@ -390,6 +395,7 @@ impl<'a> Resolver<'a> {\n         path: &ast::Path,\n         kind: MacroKind,\n         parent_scope: &ParentScope<'a>,\n+        node_id: NodeId,\n         force: bool,\n     ) -> Result<(Lrc<SyntaxExtension>, Res), Indeterminate> {\n         let (ext, res) = match self.resolve_macro_path(path, Some(kind), parent_scope, true, force)\n@@ -430,7 +436,7 @@ impl<'a> Resolver<'a> {\n             _ => panic!(\"expected `DefKind::Macro` or `Res::NonMacroAttr`\"),\n         };\n \n-        self.check_stability_and_deprecation(&ext, path);\n+        self.check_stability_and_deprecation(&ext, path, node_id);\n \n         Ok(if ext.macro_kind() != kind {\n             let expected = kind.descr_expected();\n@@ -984,13 +990,17 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    fn check_stability_and_deprecation(&mut self, ext: &SyntaxExtension, path: &ast::Path) {\n+    fn check_stability_and_deprecation(\n+        &mut self,\n+        ext: &SyntaxExtension,\n+        path: &ast::Path,\n+        node_id: NodeId,\n+    ) {\n         let span = path.span;\n         if let Some(stability) = &ext.stability {\n             if let StabilityLevel::Unstable { reason, issue, is_soft } = stability.level {\n                 let feature = stability.feature;\n                 if !self.active_features.contains(&feature) && !span.allows_unstable(feature) {\n-                    let node_id = ast::CRATE_NODE_ID;\n                     let lint_buffer = &mut self.lint_buffer;\n                     let soft_handler =\n                         |lint, span, msg: &_| lint_buffer.buffer_lint(lint, node_id, span, msg);"}, {"sha": "58388bafbeddf27bbafbc3d21e0336c00603adcd", "filename": "src/librustc_session/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/73d5cb0a456116f142e773a803715bbdb25988b1/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d5cb0a456116f142e773a803715bbdb25988b1/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint%2Fbuiltin.rs?ref=73d5cb0a456116f142e773a803715bbdb25988b1", "patch": "@@ -606,6 +606,7 @@ declare_lint_pass! {\n         INLINE_NO_SANITIZE,\n         ASM_SUB_REGISTER,\n         UNSAFE_OP_IN_UNSAFE_FN,\n+        INCOMPLETE_INCLUDE,\n     ]\n }\n "}]}