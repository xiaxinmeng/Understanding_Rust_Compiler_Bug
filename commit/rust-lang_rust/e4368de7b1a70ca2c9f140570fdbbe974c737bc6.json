{"sha": "e4368de7b1a70ca2c9f140570fdbbe974c737bc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MzY4ZGU3YjFhNzBjYTJjOWYxNDA1NzBmZGJiZTk3NGM3MzdiYzY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-03-18T01:45:49Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-08-29T08:34:53Z"}, "message": "Suggestion for call on immutable binding of mutable type\n\nWhen calling a method requiring a mutable self borrow on an inmutable\nto a mutable borrow of the type, suggest making the binding mutable.\n\nFix #83241.", "tree": {"sha": "2560770cfe5b18100c28b6b05e4ef1751b88ae69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2560770cfe5b18100c28b6b05e4ef1751b88ae69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4368de7b1a70ca2c9f140570fdbbe974c737bc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4368de7b1a70ca2c9f140570fdbbe974c737bc6", "html_url": "https://github.com/rust-lang/rust/commit/e4368de7b1a70ca2c9f140570fdbbe974c737bc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4368de7b1a70ca2c9f140570fdbbe974c737bc6/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "757a65bfdf504f6c9177514abb385618e784f0a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/757a65bfdf504f6c9177514abb385618e784f0a5", "html_url": "https://github.com/rust-lang/rust/commit/757a65bfdf504f6c9177514abb385618e784f0a5"}], "stats": {"total": 222, "additions": 188, "deletions": 34}, "files": [{"sha": "f8a1b05f063c65d8028c50cd633f92a5e2e4edf0", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 53, "deletions": 7, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e4368de7b1a70ca2c9f140570fdbbe974c737bc6/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4368de7b1a70ca2c9f140570fdbbe974c737bc6/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=e4368de7b1a70ca2c9f140570fdbbe974c737bc6", "patch": "@@ -5,7 +5,10 @@ use rustc_middle::mir::{Mutability, Place, PlaceRef, ProjectionElem};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::{\n     hir::place::PlaceBase,\n-    mir::{self, ClearCrossCrate, Local, LocalDecl, LocalInfo, LocalKind, Location},\n+    mir::{\n+        self, BindingForm, ClearCrossCrate, ImplicitSelfKind, Local, LocalDecl, LocalInfo,\n+        LocalKind, Location,\n+    },\n };\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::{kw, Symbol};\n@@ -241,13 +244,56 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     .map(|l| mut_borrow_of_mutable_ref(l, self.local_names[local]))\n                     .unwrap_or(false) =>\n             {\n+                let decl = &self.body.local_decls[local];\n                 err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n-                err.span_suggestion(\n-                    span,\n-                    \"try removing `&mut` here\",\n-                    String::new(),\n-                    Applicability::MaybeIncorrect,\n-                );\n+                if let Some(mir::Statement {\n+                    source_info,\n+                    kind:\n+                        mir::StatementKind::Assign(box (\n+                            _,\n+                            mir::Rvalue::Ref(\n+                                _,\n+                                mir::BorrowKind::Mut { allow_two_phase_borrow: false },\n+                                _,\n+                            ),\n+                        )),\n+                    ..\n+                }) = &self.body[location.block].statements.get(location.statement_index)\n+                {\n+                    match decl.local_info {\n+                        Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n+                            mir::VarBindingForm {\n+                                binding_mode: ty::BindingMode::BindByValue(Mutability::Not),\n+                                opt_ty_info: Some(sp),\n+                                opt_match_place: _,\n+                                pat_span: _,\n+                            },\n+                        )))) => {\n+                            err.span_note(sp, \"the binding is already a mutable borrow\");\n+                        }\n+                        _ => {\n+                            err.span_note(\n+                                decl.source_info.span,\n+                                \"the binding is already a mutable borrow\",\n+                            );\n+                        }\n+                    }\n+                    err.span_help(source_info.span, \"try removing `&mut` here\");\n+                } else if decl.mutability == Mutability::Not\n+                    && !matches!(\n+                        decl.local_info,\n+                        Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::ImplicitSelf(\n+                            ImplicitSelfKind::MutRef\n+                        ))))\n+                    )\n+                {\n+                    err.span_suggestion_verbose(\n+                        decl.source_info.span.shrink_to_lo(),\n+                        \"consider making the binding mutable\",\n+                        \"mut \".to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n             }\n \n             // We want to suggest users use `let mut` for local (user"}, {"sha": "7cdb16b282d540253dd756071d02611639dc3ef5", "filename": "src/test/ui/borrowck/mut-borrow-of-mut-ref.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e4368de7b1a70ca2c9f140570fdbbe974c737bc6/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4368de7b1a70ca2c9f140570fdbbe974c737bc6/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.rs?ref=e4368de7b1a70ca2c9f140570fdbbe974c737bc6", "patch": "@@ -2,12 +2,36 @@\n #![crate_type = \"rlib\"]\n \n pub fn f(b: &mut i32) {\n-    g(&mut b);\n+    //~^ NOTE the binding is already a mutable borrow\n+    //~| NOTE the binding is already a mutable borrow\n+    h(&mut b);\n     //~^ ERROR cannot borrow\n+    //~| NOTE cannot borrow as mutable\n     //~| HELP try removing `&mut` here\n     g(&mut &mut b);\n     //~^ ERROR cannot borrow\n+    //~| NOTE cannot borrow as mutable\n     //~| HELP try removing `&mut` here\n }\n \n-pub fn g(_: &mut i32) {}\n+pub fn g(b: &mut i32) { //~ NOTE the binding is already a mutable borrow\n+    h(&mut &mut b);\n+    //~^ ERROR cannot borrow\n+    //~| NOTE cannot borrow as mutable\n+    //~| HELP try removing `&mut` here\n+}\n+\n+pub fn h(_: &mut i32) {}\n+\n+trait Foo {\n+    fn bar(&mut self);\n+}\n+\n+impl Foo for &mut String {\n+    fn bar(&mut self) {}\n+}\n+\n+pub fn baz(f: &mut String) { //~ HELP consider making the binding mutable\n+    f.bar(); //~ ERROR cannot borrow `f` as mutable, as it is not declared as mutable\n+    //~^ NOTE cannot borrow as mutable\n+}"}, {"sha": "3ed54179b98dbf5a86770de500e4d53e15aeaa38", "filename": "src/test/ui/borrowck/mut-borrow-of-mut-ref.stderr", "status": "modified", "additions": 54, "deletions": 10, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/e4368de7b1a70ca2c9f140570fdbbe974c737bc6/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4368de7b1a70ca2c9f140570fdbbe974c737bc6/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr?ref=e4368de7b1a70ca2c9f140570fdbbe974c737bc6", "patch": "@@ -1,21 +1,65 @@\n error[E0596]: cannot borrow `b` as mutable, as it is not declared as mutable\n-  --> $DIR/mut-borrow-of-mut-ref.rs:5:7\n+  --> $DIR/mut-borrow-of-mut-ref.rs:7:7\n    |\n-LL |     g(&mut b);\n+LL |     h(&mut b);\n+   |       ^^^^^^ cannot borrow as mutable\n+   |\n+note: the binding is already a mutable borrow\n+  --> $DIR/mut-borrow-of-mut-ref.rs:4:13\n+   |\n+LL | pub fn f(b: &mut i32) {\n+   |             ^^^^^^^^\n+help: try removing `&mut` here\n+  --> $DIR/mut-borrow-of-mut-ref.rs:7:7\n+   |\n+LL |     h(&mut b);\n    |       ^^^^^^\n-   |       |\n-   |       cannot borrow as mutable\n-   |       help: try removing `&mut` here\n \n error[E0596]: cannot borrow `b` as mutable, as it is not declared as mutable\n-  --> $DIR/mut-borrow-of-mut-ref.rs:8:12\n+  --> $DIR/mut-borrow-of-mut-ref.rs:11:12\n    |\n LL |     g(&mut &mut b);\n+   |            ^^^^^^ cannot borrow as mutable\n+   |\n+note: the binding is already a mutable borrow\n+  --> $DIR/mut-borrow-of-mut-ref.rs:4:13\n+   |\n+LL | pub fn f(b: &mut i32) {\n+   |             ^^^^^^^^\n+help: try removing `&mut` here\n+  --> $DIR/mut-borrow-of-mut-ref.rs:11:12\n+   |\n+LL |     g(&mut &mut b);\n+   |            ^^^^^^\n+\n+error[E0596]: cannot borrow `b` as mutable, as it is not declared as mutable\n+  --> $DIR/mut-borrow-of-mut-ref.rs:18:12\n+   |\n+LL |     h(&mut &mut b);\n+   |            ^^^^^^ cannot borrow as mutable\n+   |\n+note: the binding is already a mutable borrow\n+  --> $DIR/mut-borrow-of-mut-ref.rs:17:13\n+   |\n+LL | pub fn g(b: &mut i32) {\n+   |             ^^^^^^^^\n+help: try removing `&mut` here\n+  --> $DIR/mut-borrow-of-mut-ref.rs:18:12\n+   |\n+LL |     h(&mut &mut b);\n    |            ^^^^^^\n-   |            |\n-   |            cannot borrow as mutable\n-   |            help: try removing `&mut` here\n \n-error: aborting due to 2 previous errors\n+error[E0596]: cannot borrow `f` as mutable, as it is not declared as mutable\n+  --> $DIR/mut-borrow-of-mut-ref.rs:35:5\n+   |\n+LL |     f.bar();\n+   |     ^ cannot borrow as mutable\n+   |\n+help: consider making the binding mutable\n+   |\n+LL | pub fn baz(mut f: &mut String) {\n+   |            ^^^\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0596`."}, {"sha": "88617381236d7377fe5717f613c14c52193f9a27", "filename": "src/test/ui/did_you_mean/issue-31424.stderr", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e4368de7b1a70ca2c9f140570fdbbe974c737bc6/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4368de7b1a70ca2c9f140570fdbbe974c737bc6/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr?ref=e4368de7b1a70ca2c9f140570fdbbe974c737bc6", "patch": "@@ -1,11 +1,19 @@\n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-31424.rs:7:9\n    |\n+LL |         (&mut self).bar();\n+   |         ^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+note: the binding is already a mutable borrow\n+  --> $DIR/issue-31424.rs:6:12\n+   |\n+LL |     fn foo(&mut self) {\n+   |            ^^^^^^^^^\n+help: try removing `&mut` here\n+  --> $DIR/issue-31424.rs:7:9\n+   |\n LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^\n-   |         |\n-   |         cannot borrow as mutable\n-   |         help: try removing `&mut` here\n \n warning: function cannot return without recursing\n   --> $DIR/issue-31424.rs:13:5\n@@ -22,11 +30,19 @@ LL |         (&mut self).bar();\n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-31424.rs:16:9\n    |\n+LL |         (&mut self).bar();\n+   |         ^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+note: the binding is already a mutable borrow\n+  --> $DIR/issue-31424.rs:13:18\n+   |\n+LL |     fn bar(self: &mut Self) {\n+   |                  ^^^^^^^^^\n+help: try removing `&mut` here\n+  --> $DIR/issue-31424.rs:16:9\n+   |\n LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^\n-   |         |\n-   |         cannot borrow as mutable\n-   |         help: try removing `&mut` here\n \n error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "a8c031686c0816dbaf504238dbb9eb72af363e37", "filename": "src/test/ui/did_you_mean/issue-34126.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e4368de7b1a70ca2c9f140570fdbbe974c737bc6/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4368de7b1a70ca2c9f140570fdbbe974c737bc6/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr?ref=e4368de7b1a70ca2c9f140570fdbbe974c737bc6", "patch": "@@ -1,11 +1,19 @@\n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-34126.rs:6:18\n    |\n+LL |         self.run(&mut self);\n+   |                  ^^^^^^^^^ cannot borrow as mutable\n+   |\n+note: the binding is already a mutable borrow\n+  --> $DIR/issue-34126.rs:5:14\n+   |\n+LL |     fn start(&mut self) {\n+   |              ^^^^^^^^^\n+help: try removing `&mut` here\n+  --> $DIR/issue-34126.rs:6:18\n+   |\n LL |         self.run(&mut self);\n    |                  ^^^^^^^^^\n-   |                  |\n-   |                  cannot borrow as mutable\n-   |                  help: try removing `&mut` here\n \n error[E0502]: cannot borrow `self` as mutable because it is also borrowed as immutable\n   --> $DIR/issue-34126.rs:6:18"}, {"sha": "18696f57c44aef80ac01115c80833feece008a1c", "filename": "src/test/ui/nll/issue-51191.stderr", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e4368de7b1a70ca2c9f140570fdbbe974c737bc6/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4368de7b1a70ca2c9f140570fdbbe974c737bc6/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr?ref=e4368de7b1a70ca2c9f140570fdbbe974c737bc6", "patch": "@@ -13,11 +13,19 @@ LL |         (&mut self).bar();\n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-51191.rs:7:9\n    |\n+LL |         (&mut self).bar();\n+   |         ^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+note: the binding is already a mutable borrow\n+  --> $DIR/issue-51191.rs:4:18\n+   |\n+LL |     fn bar(self: &mut Self) {\n+   |                  ^^^^^^^^^\n+help: try removing `&mut` here\n+  --> $DIR/issue-51191.rs:7:9\n+   |\n LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^\n-   |         |\n-   |         cannot borrow as mutable\n-   |         help: try removing `&mut` here\n \n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-51191.rs:13:9\n@@ -42,11 +50,19 @@ LL |         (&mut self).bar();\n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-51191.rs:28:9\n    |\n+LL |         (&mut self).bar();\n+   |         ^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+note: the binding is already a mutable borrow\n+  --> $DIR/issue-51191.rs:27:16\n+   |\n+LL |     fn mtblref(&mut self) {\n+   |                ^^^^^^^^^\n+help: try removing `&mut` here\n+  --> $DIR/issue-51191.rs:28:9\n+   |\n LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^\n-   |         |\n-   |         cannot borrow as mutable\n-   |         help: try removing `&mut` here\n \n error: aborting due to 5 previous errors; 1 warning emitted\n "}]}