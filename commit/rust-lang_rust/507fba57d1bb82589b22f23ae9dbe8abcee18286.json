{"sha": "507fba57d1bb82589b22f23ae9dbe8abcee18286", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwN2ZiYTU3ZDFiYjgyNTg5YjIyZjIzYWU5ZGJlOGFiY2VlMTgyODY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-01T23:16:53Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-02T00:57:03Z"}, "message": "syntax: Allow any block-like expr to be used as alt arm w/o comma separator", "tree": {"sha": "64dbe2936c18e17469cd1cb85488c8d392ba501b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64dbe2936c18e17469cd1cb85488c8d392ba501b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/507fba57d1bb82589b22f23ae9dbe8abcee18286", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/507fba57d1bb82589b22f23ae9dbe8abcee18286", "html_url": "https://github.com/rust-lang/rust/commit/507fba57d1bb82589b22f23ae9dbe8abcee18286", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/507fba57d1bb82589b22f23ae9dbe8abcee18286/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd17d347b08e2a42a62069e3474832f615036130", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd17d347b08e2a42a62069e3474832f615036130", "html_url": "https://github.com/rust-lang/rust/commit/fd17d347b08e2a42a62069e3474832f615036130"}], "stats": {"total": 133, "additions": 99, "deletions": 34}, "files": [{"sha": "a2ac336f60529b1ed45e4799fc32cd0687ee2d37", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/507fba57d1bb82589b22f23ae9dbe8abcee18286/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507fba57d1bb82589b22f23ae9dbe8abcee18286/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=507fba57d1bb82589b22f23ae9dbe8abcee18286", "patch": "@@ -588,13 +588,6 @@ fn view_path_id(p: @view_path) -> node_id {\n     }\n }\n \n-fn lone_block_expr(blk: blk) -> option<@ast::expr> {\n-    if blk.node.view_items.len() != 0 { ret none; }\n-    if blk.node.stmts.len() != 0 { ret none; }\n-    if blk.node.rules != default_blk { ret none; }\n-    ret blk.node.expr;\n-}\n-\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "ada3810b45f2f30716c88f121e99a5fd40cc3b97", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/507fba57d1bb82589b22f23ae9dbe8abcee18286/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507fba57d1bb82589b22f23ae9dbe8abcee18286/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=507fba57d1bb82589b22f23ae9dbe8abcee18286", "patch": "@@ -1477,9 +1477,10 @@ class parser {\n     // For distingishing between record literals and blocks\n     fn looking_at_record_literal() -> bool {\n         let lookahead = self.look_ahead(1);\n-        self.token_is_keyword(~\"mut\", lookahead) ||\n-            (is_plain_ident(lookahead) &&\n-             self.look_ahead(2) == token::COLON)\n+        self.token == token::LBRACE &&\n+            (self.token_is_keyword(~\"mut\", lookahead) ||\n+             (is_plain_ident(lookahead) &&\n+              self.look_ahead(2) == token::COLON))\n     }\n \n     fn parse_record_literal() -> expr_ {\n@@ -1518,26 +1519,30 @@ class parser {\n             let pats = self.parse_pats();\n             let mut guard = none;\n             if self.eat_keyword(~\"if\") { guard = some(self.parse_expr()); }\n-            let blk = if self.token != token::FAT_ARROW {\n-                self.parse_block()\n+            let expr = if self.token != token::FAT_ARROW {\n+                self.parse_block_expr(self.last_span.lo, default_blk)\n             } else {\n                 self.bump();\n-                if self.token == token::LBRACE\n-                    && !self.looking_at_record_literal() {\n-                    self.parse_block()\n-                } else {\n-                    let expr = self.parse_expr();\n-                    if self.token != token::RBRACE {\n-                        self.expect(token::COMMA);\n-                    }\n-                    {node: {view_items: ~[],\n-                            stmts: ~[],\n-                            expr: some(expr),\n-                            id: self.get_id(),\n-                            rules: default_blk},\n-                     span: expr.span}\n-                }\n+                self.parse_expr_res(RESTRICT_STMT_EXPR)\n             };\n+\n+            let require_comma =\n+                classify::expr_requires_semi_to_be_stmt(expr)\n+                && self.token != token::RBRACE;\n+\n+            if require_comma {\n+                self.expect(token::COMMA);\n+            } else {\n+                self.eat(token::COMMA);\n+            }\n+\n+            let blk = {node: {view_items: ~[],\n+                              stmts: ~[],\n+                              expr: some(expr),\n+                              id: self.get_id(),\n+                              rules: default_blk},\n+                       span: expr.span};\n+\n             vec::push(arms, {pats: pats, guard: guard, body: blk});\n         }\n         let mut hi = self.span.hi;"}, {"sha": "b02bebf58b7b2d9686b08c7d70c154564e11b9dd", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/507fba57d1bb82589b22f23ae9dbe8abcee18286/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507fba57d1bb82589b22f23ae9dbe8abcee18286/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=507fba57d1bb82589b22f23ae9dbe8abcee18286", "patch": "@@ -6,7 +6,7 @@ import pp::{break_offset, word, printer,\n             inconsistent, eof};\n import diagnostic;\n import ast::{required, provided};\n-import ast_util::{operator_prec, lone_block_expr};\n+import ast_util::{operator_prec};\n import dvec::{dvec, extensions};\n import parse::classify::*;\n import util::interner;\n@@ -1052,17 +1052,21 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n               none { }\n             }\n             word_space(s, ~\"=>\");\n-            alt lone_block_expr(arm.body) {\n+            // Extract the expression from the extra block the parser adds\n+            assert arm.body.node.view_items.is_empty();\n+            assert arm.body.node.stmts.is_empty();\n+            assert arm.body.node.rules == ast::default_blk;\n+            alt arm.body.node.expr {\n               some(expr) => {\n                 end(s); // close the ibox for the pattern\n                 print_expr(s, expr);\n-                if i < len - 1 { word(s.s, ~\",\"); }\n+                if expr_requires_semi_to_be_stmt(expr)\n+                    && i < len - 1 {\n+                    word(s.s, ~\",\");\n+                }\n                 end(s); // close enclosing cbox\n               }\n-              none => {\n-                print_possibly_embedded_block(s, arm.body, block_normal,\n-                                              alt_indent_unit);\n-              }\n+              none => fail\n             }\n         }\n         bclose_(s, expr.span, alt_indent_unit);"}, {"sha": "037e0c8b517011a24f64ab3c19838acacee191bb", "filename": "src/test/compile-fail/alt-arrows-block-then-binop.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/507fba57d1bb82589b22f23ae9dbe8abcee18286/src%2Ftest%2Fcompile-fail%2Falt-arrows-block-then-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507fba57d1bb82589b22f23ae9dbe8abcee18286/src%2Ftest%2Fcompile-fail%2Falt-arrows-block-then-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-arrows-block-then-binop.rs?ref=507fba57d1bb82589b22f23ae9dbe8abcee18286", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+\n+    alt 0 {\n+      0 => {\n+      } + 5 //~ ERROR unexpected token: `+`\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "100ec11cd962545e4fdd4b334fb8708fb6de1481", "filename": "src/test/run-pass/alt-arrows-blocky-commas.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/507fba57d1bb82589b22f23ae9dbe8abcee18286/src%2Ftest%2Frun-pass%2Falt-arrows-blocky-commas.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507fba57d1bb82589b22f23ae9dbe8abcee18286/src%2Ftest%2Frun-pass%2Falt-arrows-blocky-commas.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-arrows-blocky-commas.rs?ref=507fba57d1bb82589b22f23ae9dbe8abcee18286", "patch": "@@ -0,0 +1,56 @@\n+// no-reformat\n+// Testing the presense or absense of commas separating block-structure\n+// alt arm expressions\n+\n+fn fun(_f: fn()) {\n+}\n+\n+fn it(_f: fn() -> bool) {\n+}\n+\n+fn main() {\n+\n+    alt 0 {\n+      00 => {\n+      }\n+      01 => if true {\n+      } else {\n+      }\n+      03 => alt 0 {\n+        _ => ()\n+      }\n+      04 => do fun {\n+      }\n+      05 => for it {\n+      }\n+      06 => while false {\n+      }\n+      07 => loop {\n+      }\n+      08 => unsafe {\n+      }\n+      09 => unchecked {\n+      }\n+      10 => {\n+      },\n+      11 => if true {\n+      } else {\n+      },\n+      13 => alt 0 {\n+        _ => ()\n+      },\n+      14 => do fun {\n+      },\n+      15 => for it {\n+      },\n+      16 => while false {\n+      },\n+      17 => loop {\n+      },\n+      18 => unsafe {\n+      },\n+      19 => unchecked {\n+      },\n+      _ => ()\n+    }\n+}\n\\ No newline at end of file"}]}