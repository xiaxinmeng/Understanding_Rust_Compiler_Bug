{"sha": "993eae1816525e5cf855e448363098edd5935276", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5M2VhZTE4MTY1MjVlNWNmODU1ZTQ0ODM2MzA5OGVkZDU5MzUyNzY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-03-10T17:04:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-03-10T17:13:53Z"}, "message": "rustc: Support auto-retry linking on a segfault\n\nThis is a last-ditch attempt to help our pain with dealing with #38878 on the\nbots. A new environment variable is added to the compiler,\n`RUSTC_RETRY_LINKER_ON_SEGFAULT`, which will instruct the compiler to\nautomatically retry the final linker invocation if it looks like the linker\nsegfaulted (up to 2 extra times).\n\nUnfortunately there have been no successful attempts to debug #38878. The only\ninformation seems to be that the linker (e.g. `ld` on OSX) is segfaulting\nsomewhere in some thread pool implementation. This appears to be spurious as\nfailed PRs will later merge.\n\nThe hope is that this helps the queue keep moving without clogging and delaying\nPRs due to #38878.", "tree": {"sha": "76c4c2b3d17273c7bbfff248b54f7007cd6635d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76c4c2b3d17273c7bbfff248b54f7007cd6635d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/993eae1816525e5cf855e448363098edd5935276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/993eae1816525e5cf855e448363098edd5935276", "html_url": "https://github.com/rust-lang/rust/commit/993eae1816525e5cf855e448363098edd5935276", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/993eae1816525e5cf855e448363098edd5935276/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aaa60611cb7d89b03da8e56653ce09b0203f81d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aaa60611cb7d89b03da8e56653ce09b0203f81d", "html_url": "https://github.com/rust-lang/rust/commit/5aaa60611cb7d89b03da8e56653ce09b0203f81d"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "42684d70d36a9daa5a01b8ec37b02341f850b12e", "filename": ".travis.yml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/993eae1816525e5cf855e448363098edd5935276/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/993eae1816525e5cf855e448363098edd5935276/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=993eae1816525e5cf855e448363098edd5935276", "patch": "@@ -44,6 +44,7 @@ matrix:\n         RUST_CHECK_TARGET=check\n         RUST_CONFIGURE_ARGS=--build=x86_64-apple-darwin\n         SRC=.\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n       os: osx\n       osx_image: xcode8.2\n       install: &osx_install_sccache >\n@@ -53,6 +54,7 @@ matrix:\n         RUST_CHECK_TARGET=check\n         RUST_CONFIGURE_ARGS=--build=i686-apple-darwin\n         SRC=.\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n       os: osx\n       osx_image: xcode8.2\n       install: *osx_install_sccache\n@@ -62,6 +64,7 @@ matrix:\n         RUST_CONFIGURE_ARGS=\"--build=i686-apple-darwin --enable-extended\"\n         SRC=.\n         DEPLOY=1\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n       os: osx\n       osx_image: xcode8.2\n       install: >\n@@ -74,6 +77,7 @@ matrix:\n         RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-extended\"\n         SRC=.\n         DEPLOY=1\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n       os: osx\n       osx_image: xcode8.2\n       install: *osx_install_sccache\n@@ -88,6 +92,7 @@ matrix:\n         RUST_CONFIGURE_ARGS=\"--enable-extended\"\n         SRC=.\n         DEPLOY_ALT=1\n+        RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n       os: osx\n       osx_image: xcode8.2\n       install: *osx_install_sccache"}, {"sha": "a1703b1c155eb0535410d5002c3221c070721b40", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/993eae1816525e5cf855e448363098edd5935276/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/993eae1816525e5cf855e448363098edd5935276/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=993eae1816525e5cf855e448363098edd5935276", "patch": "@@ -752,8 +752,54 @@ fn link_natively(sess: &Session,\n     sess.abort_if_errors();\n \n     // Invoke the system linker\n+    //\n+    // Note that there's a terribly awful hack that really shouldn't be present\n+    // in any compiler. Here an environment variable is supported to\n+    // automatically retry the linker invocation if the linker looks like it\n+    // segfaulted.\n+    //\n+    // Gee that seems odd, normally segfaults are things we want to know about!\n+    // Unfortunately though in rust-lang/rust#38878 we're experiencing the\n+    // linker segfaulting on Travis quite a bit which is causing quite a bit of\n+    // pain to land PRs when they spuriously fail due to a segfault.\n+    //\n+    // The issue #38878 has some more debugging information on it as well, but\n+    // this unfortunately looks like it's just a race condition in OSX's linker\n+    // with some thread pool working in the background. It seems that no one\n+    // currently knows a fix for this so in the meantime we're left with this...\n     info!(\"{:?}\", &cmd);\n-    let prog = time(sess.time_passes(), \"running linker\", || cmd.output());\n+    let retry_on_segfault = env::var(\"RUSTC_RETRY_LINKER_ON_SEGFAULT\").is_ok();\n+    let mut prog;\n+    let mut i = 0;\n+    loop {\n+        i += 1;\n+        prog = time(sess.time_passes(), \"running linker\", || cmd.output());\n+        if !retry_on_segfault || i > 3 {\n+            break\n+        }\n+        let output = match prog {\n+            Ok(ref output) => output,\n+            Err(_) => break,\n+        };\n+        if output.status.success() {\n+            break\n+        }\n+        let mut out = output.stderr.clone();\n+        out.extend(&output.stdout);\n+        let out = String::from_utf8_lossy(&out);\n+        let msg = \"clang: error: unable to execute command: \\\n+                   Segmentation fault: 11\";\n+        if !out.contains(msg) {\n+            break\n+        }\n+\n+        sess.struct_warn(\"looks like the linker segfaulted when we tried to \\\n+                          call it, automatically retrying again\")\n+            .note(&format!(\"{:?}\", cmd))\n+            .note(&out)\n+            .emit();\n+    }\n+\n     match prog {\n         Ok(prog) => {\n             fn escape_string(s: &[u8]) -> String {"}]}