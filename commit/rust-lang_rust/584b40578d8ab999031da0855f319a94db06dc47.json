{"sha": "584b40578d8ab999031da0855f319a94db06dc47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NGI0MDU3OGQ4YWI5OTkwMzFkYTA4NTVmMzE5YTk0ZGIwNmRjNDc=", "commit": {"author": {"name": "Nathan Stocks", "email": "nathan.stocks@gmail.com", "date": "2017-03-31T04:18:27Z"}, "committer": {"name": "Nathan Stocks", "email": "nathan.stocks@gmail.com", "date": "2017-04-02T18:56:52Z"}, "message": "Vastly improve the help output.\n\n- Don't print 'unknown subcommand' at the top of the help message.  The help message now clearly instructs the user to provide a subcommand.\n- Clarify the usage line.  Subcommand is required.  Don't echo invalid input back out in the usage line (what the...???).  args renamed to paths, because that's what all the args are referred to elsewhere.\n- List the available subcommands immediately following the usage line.  It's the one required argument, after all.\n- Slightly improve the extra documentation for the build, test, and doc commands.\n- Don't print 'Available invocations:' at all.  It occurred immediately before 'Available paths:'.\n- Clearly state that running with '-h -v' will produce a list of available paths.", "tree": {"sha": "be82bbc7a1840a09708dc289aa49f37c3e17d0fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be82bbc7a1840a09708dc289aa49f37c3e17d0fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/584b40578d8ab999031da0855f319a94db06dc47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/584b40578d8ab999031da0855f319a94db06dc47", "html_url": "https://github.com/rust-lang/rust/commit/584b40578d8ab999031da0855f319a94db06dc47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/584b40578d8ab999031da0855f319a94db06dc47/comments", "author": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "committer": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "e1c1e09867e489a41170e726fe64281caaca087a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1c1e09867e489a41170e726fe64281caaca087a", "html_url": "https://github.com/rust-lang/rust/commit/e1c1e09867e489a41170e726fe64281caaca087a"}], "stats": {"total": 53, "additions": 26, "deletions": 27}, "files": [{"sha": "1a260050a942292a56c3338d90bb9f937eb204f3", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/584b40578d8ab999031da0855f319a94db06dc47/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584b40578d8ab999031da0855f319a94db06dc47/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=584b40578d8ab999031da0855f319a94db06dc47", "patch": "@@ -90,19 +90,31 @@ impl Flags {\n         opts.optflag(\"h\", \"help\", \"print this help message\");\n \n         let usage = |n, opts: &Options| -> ! {\n-            let subcommand = args.get(0).map(|s| &**s);\n-            let brief = format!(\"Usage: x.py <subcommand> [options] [<args>...]\");\n+            let subcommand_help = format!(\"\\\n+Usage: x.py <subcommand> [options] [<paths>...]\n+\n+Subcommands:\n+    build       Compile either the compiler or libraries\n+    test        Build and run some test suites\n+    bench       Build and run some benchmarks\n+    doc         Build documentation\n+    clean       Clean out build directories\n+    dist        Build and/or install distribution artifacts\n \n-            println!(\"{}\", opts.usage(&brief));\n+To learn more about a subcommand, run `./x.py <subcommand> -h`\");\n+\n+            println!(\"{}\", opts.usage(&subcommand_help));\n+\n+            let subcommand = args.get(0).map(|s| &**s);\n             match subcommand {\n                 Some(\"build\") => {\n                     println!(\"\\\n Arguments:\n-    This subcommand accepts a number of positional arguments of directories to\n-    the crates and/or artifacts to compile. For example:\n+    This subcommand accepts a number of paths to directories to the crates \n+    and/or artifacts to compile. For example:\n \n         ./x.py build src/libcore\n-        ./x.py build src/libproc_macro\n+        ./x.py build src/libcore src/libproc_macro\n         ./x.py build src/libstd --stage 1\n \n     If no arguments are passed then the complete artifacts for that stage are\n@@ -120,8 +132,8 @@ Arguments:\n                 Some(\"test\") => {\n                     println!(\"\\\n Arguments:\n-    This subcommand accepts a number of positional arguments of directories to\n-    tests that should be compiled and run. For example:\n+    This subcommand accepts a number of paths to directories to tests that\n+    should be compiled and run. For example:\n \n         ./x.py test src/test/run-pass\n         ./x.py test src/libstd --test-args hash_map\n@@ -138,12 +150,12 @@ Arguments:\n                 Some(\"doc\") => {\n                     println!(\"\\\n Arguments:\n-    This subcommand accepts a number of positional arguments of directories of\n-    documentation to build. For example:\n+    This subcommand accepts a number of paths to directories of documentation\n+    to build. For example:\n \n         ./x.py doc src/doc/book\n         ./x.py doc src/doc/nomicon\n-        ./x.py doc src/libstd\n+        ./x.py doc src/doc/book src/libstd\n \n     If no arguments are passed then everything is documented:\n \n@@ -155,14 +167,14 @@ Arguments:\n                 _ => {}\n             }\n \n+\n             if let Some(subcommand) = subcommand {\n                 if subcommand == \"build\" ||\n                    subcommand == \"test\" ||\n                    subcommand == \"bench\" ||\n                    subcommand == \"doc\" ||\n                    subcommand == \"clean\" ||\n                    subcommand == \"dist\"  {\n-                    println!(\"Available invocations:\");\n                     if args.iter().any(|a| a == \"-v\") {\n                         let flags = Flags::parse(&[\"build\".to_string()]);\n                         let mut config = Config::default();\n@@ -171,26 +183,14 @@ Arguments:\n                         metadata::build(&mut build);\n                         step::build_rules(&build).print_help(subcommand);\n                     } else {\n-                        println!(\"    ... elided, run `./x.py {} -h -v` to see\",\n+                        println!(\"Run `./x.py {} -h -v` to see a list of available paths.\",\n                                  subcommand);\n                     }\n \n                     println!(\"\");\n                 }\n             }\n \n-println!(\"\\\n-Subcommands:\n-    build       Compile either the compiler or libraries\n-    test        Build and run some test suites\n-    bench       Build and run some benchmarks\n-    doc         Build documentation\n-    clean       Clean out build directories\n-    dist        Build and/or install distribution artifacts\n-\n-To learn more about a subcommand, run `./x.py <subcommand> -h`\n-\");\n-\n             process::exit(n);\n         };\n         if args.len() == 0 {\n@@ -256,8 +256,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\n                 }\n             }\n             \"--help\" => usage(0, &opts),\n-            cmd => {\n-                println!(\"unknown subcommand: {}\", cmd);\n+            _ => {\n                 usage(1, &opts);\n             }\n         };"}]}