{"sha": "e9e27e6a6258b3adf00a5dd35d2676656224880d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ZTI3ZTZhNjI1OGIzYWRmMDBhNWRkMzVkMjY3NjY1NjIyNDg4MGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-12T12:00:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-12T12:00:50Z"}, "message": "Auto merge of #54715 - oli-obk:nll_deref_promotion, r=RalfJung\n\nFix #54224 (const promotion regression)\n\nr? @eddyb", "tree": {"sha": "32202eba23a393846aa58d688b983e147d8e0181", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32202eba23a393846aa58d688b983e147d8e0181"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9e27e6a6258b3adf00a5dd35d2676656224880d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9e27e6a6258b3adf00a5dd35d2676656224880d", "html_url": "https://github.com/rust-lang/rust/commit/e9e27e6a6258b3adf00a5dd35d2676656224880d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9e27e6a6258b3adf00a5dd35d2676656224880d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "849a0e9c40ef79efec0802334fe10406ea3e7256", "url": "https://api.github.com/repos/rust-lang/rust/commits/849a0e9c40ef79efec0802334fe10406ea3e7256", "html_url": "https://github.com/rust-lang/rust/commit/849a0e9c40ef79efec0802334fe10406ea3e7256"}, {"sha": "76f8a90d53a3f212820e95260257105dd1da9910", "url": "https://api.github.com/repos/rust-lang/rust/commits/76f8a90d53a3f212820e95260257105dd1da9910", "html_url": "https://github.com/rust-lang/rust/commit/76f8a90d53a3f212820e95260257105dd1da9910"}], "stats": {"total": 73, "additions": 59, "deletions": 14}, "files": [{"sha": "5e7050caeaf28a81354bd59a58657bb18da813b0", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e9e27e6a6258b3adf00a5dd35d2676656224880d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e27e6a6258b3adf00a5dd35d2676656224880d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=e9e27e6a6258b3adf00a5dd35d2676656224880d", "patch": "@@ -495,20 +495,22 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     this.super_place(place, context, location);\n                     match proj.elem {\n                         ProjectionElem::Deref => {\n-                            if let Mode::Fn = this.mode {\n-                                this.add(Qualif::NOT_CONST);\n-                            } else {\n-                                let base_ty = proj.base.ty(this.mir, this.tcx).to_ty(this.tcx);\n-                                if let ty::RawPtr(_) = base_ty.sty {\n-                                    if !this.tcx.sess.features_untracked().const_raw_ptr_deref {\n-                                        emit_feature_err(\n-                                            &this.tcx.sess.parse_sess, \"const_raw_ptr_deref\",\n-                                            this.span, GateIssue::Language,\n-                                            &format!(\n-                                                \"dereferencing raw pointers in {}s is unstable\",\n-                                                this.mode,\n-                                            ),\n-                                        );\n+                            this.add(Qualif::NOT_CONST);\n+                            let base_ty = proj.base.ty(this.mir, this.tcx).to_ty(this.tcx);\n+                            match this.mode {\n+                                Mode::Fn => {},\n+                                _ => {\n+                                    if let ty::RawPtr(_) = base_ty.sty {\n+                                        if !this.tcx.sess.features_untracked().const_raw_ptr_deref {\n+                                            emit_feature_err(\n+                                                &this.tcx.sess.parse_sess, \"const_raw_ptr_deref\",\n+                                                this.span, GateIssue::Language,\n+                                                &format!(\n+                                                    \"dereferencing raw pointers in {}s is unstable\",\n+                                                    this.mode,\n+                                                ),\n+                                            );\n+                                        }\n                                     }\n                                 }\n                             }\n@@ -732,8 +734,11 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     (CastTy::Ptr(_), CastTy::Int(_)) |\n                     (CastTy::FnPtr, CastTy::Int(_)) => {\n                         if let Mode::Fn = self.mode {\n+                            // in normal functions, mark such casts as not promotable\n                             self.add(Qualif::NOT_CONST);\n                         } else if !self.tcx.sess.features_untracked().const_raw_ptr_to_usize_cast {\n+                            // in const fn and constants require the feature gate\n+                            // FIXME: make it unsafe inside const fn and constants\n                             emit_feature_err(\n                                 &self.tcx.sess.parse_sess, \"const_raw_ptr_to_usize_cast\",\n                                 self.span, GateIssue::Language,\n@@ -756,8 +761,11 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                             op == BinOp::Offset);\n \n                     if let Mode::Fn = self.mode {\n+                        // raw pointer operations are not allowed inside promoteds\n                         self.add(Qualif::NOT_CONST);\n                     } else if !self.tcx.sess.features_untracked().const_compare_raw_pointers {\n+                        // require the feature gate inside constants and const fn\n+                        // FIXME: make it unsafe to use these operations\n                         emit_feature_err(\n                             &self.tcx.sess.parse_sess,\n                             \"const_compare_raw_pointers\","}, {"sha": "b5a8fe8819cdd6091b2be1b41244549cd6aad7e2", "filename": "src/test/ui/consts/issue-54224.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e9e27e6a6258b3adf00a5dd35d2676656224880d/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e27e6a6258b3adf00a5dd35d2676656224880d/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.rs?ref=e9e27e6a6258b3adf00a5dd35d2676656224880d", "patch": "@@ -0,0 +1,14 @@\n+#![feature(nll)]\n+\n+const FOO: Option<&[[u8; 3]]> = Some(&[*b\"foo\"]); //~ ERROR temporary value dropped while borrowed\n+\n+use std::borrow::Cow;\n+\n+pub const X: [u8; 3] = *b\"ABC\";\n+pub const Y: Cow<'static, [ [u8; 3] ]> = Cow::Borrowed(&[X]);\n+\n+\n+pub const Z: Cow<'static, [ [u8; 3] ]> = Cow::Borrowed(&[*b\"ABC\"]);\n+//~^ ERROR temporary value dropped while borrowed\n+\n+fn main() {}"}, {"sha": "39879254cf85d87b819c30099ac362902b8e0919", "filename": "src/test/ui/consts/issue-54224.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e9e27e6a6258b3adf00a5dd35d2676656224880d/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9e27e6a6258b3adf00a5dd35d2676656224880d/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-54224.stderr?ref=e9e27e6a6258b3adf00a5dd35d2676656224880d", "patch": "@@ -0,0 +1,23 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/issue-54224.rs:3:39\n+   |\n+LL | const FOO: Option<&[[u8; 3]]> = Some(&[*b\"foo\"]); //~ ERROR temporary value dropped while borrowed\n+   |                                       ^^^^^^^^^- temporary value is freed at the end of this statement\n+   |                                       |\n+   |                                       creates a temporary which is freed while still in use\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/issue-54224.rs:11:57\n+   |\n+LL | pub const Z: Cow<'static, [ [u8; 3] ]> = Cow::Borrowed(&[*b\"ABC\"]);\n+   |                                                         ^^^^^^^^^- temporary value is freed at the end of this statement\n+   |                                                         |\n+   |                                                         creates a temporary which is freed while still in use\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}]}