{"sha": "08de1b4fa57ca78ad13026950b3eb024b7d2abf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZGUxYjRmYTU3Y2E3OGFkMTMwMjY5NTBiM2ViMDI0YjdkMmFiZjM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-18T17:58:42Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-18T17:58:42Z"}, "message": "Implement `RawAttr::filter`", "tree": {"sha": "99279afbe385ee36fdcd3921a4a89784439705cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99279afbe385ee36fdcd3921a4a89784439705cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08de1b4fa57ca78ad13026950b3eb024b7d2abf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08de1b4fa57ca78ad13026950b3eb024b7d2abf3", "html_url": "https://github.com/rust-lang/rust/commit/08de1b4fa57ca78ad13026950b3eb024b7d2abf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08de1b4fa57ca78ad13026950b3eb024b7d2abf3/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03c177af89efcc238053b59069eda2c1c6772622", "url": "https://api.github.com/repos/rust-lang/rust/commits/03c177af89efcc238053b59069eda2c1c6772622", "html_url": "https://github.com/rust-lang/rust/commit/03c177af89efcc238053b59069eda2c1c6772622"}], "stats": {"total": 79, "additions": 76, "deletions": 3}, "files": [{"sha": "b8d9c2682227e4280bdde344a02d02b281f04cb1", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 61, "deletions": 3, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/08de1b4fa57ca78ad13026950b3eb024b7d2abf3/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08de1b4fa57ca78ad13026950b3eb024b7d2abf3/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=08de1b4fa57ca78ad13026950b3eb024b7d2abf3", "patch": "@@ -122,9 +122,67 @@ impl RawAttrs {\n     }\n \n     /// Processes `cfg_attr`s, returning the resulting semantic `Attrs`.\n-    pub(crate) fn filter(self, _db: &dyn DefDatabase, _krate: CrateId) -> Attrs {\n-        // FIXME actually implement this\n-        Attrs(self)\n+    pub(crate) fn filter(self, db: &dyn DefDatabase, krate: CrateId) -> Attrs {\n+        let has_cfg_attrs = self.iter().any(|attr| {\n+            attr.path.as_ident().map_or(false, |name| *name == hir_expand::name![cfg_attr])\n+        });\n+        if !has_cfg_attrs {\n+            return Attrs(self);\n+        }\n+\n+        let crate_graph = db.crate_graph();\n+        let new_attrs = self\n+            .iter()\n+            .filter_map(|attr| {\n+                let attr = attr.clone();\n+                let is_cfg_attr =\n+                    attr.path.as_ident().map_or(false, |name| *name == hir_expand::name![cfg_attr]);\n+                if !is_cfg_attr {\n+                    return Some(attr);\n+                }\n+\n+                let subtree = match &attr.input {\n+                    Some(AttrInput::TokenTree(it)) => it,\n+                    _ => return Some(attr),\n+                };\n+\n+                // Input subtree is: `(cfg, attr)`\n+                // Split it up into a `cfg` and an `attr` subtree.\n+                // FIXME: There should be a common API for this.\n+                let mut saw_comma = false;\n+                let (mut cfg, attr): (Vec<_>, Vec<_>) =\n+                    subtree.clone().token_trees.into_iter().partition(|tree| {\n+                        if saw_comma {\n+                            return false;\n+                        }\n+\n+                        match tree {\n+                            tt::TokenTree::Leaf(tt::Leaf::Punct(p)) if p.char == ',' => {\n+                                saw_comma = true;\n+                            }\n+                            _ => {}\n+                        }\n+\n+                        true\n+                    });\n+                cfg.pop(); // `,` ends up in here\n+\n+                let cfg = Subtree { delimiter: subtree.delimiter, token_trees: cfg };\n+                let cfg = CfgExpr::parse(&cfg);\n+\n+                let cfg_options = &crate_graph[krate].cfg_options;\n+                if cfg_options.check(&cfg) == Some(false) {\n+                    None\n+                } else {\n+                    let attr = Subtree { delimiter: None, token_trees: attr };\n+                    let attr = ast::Attr::parse(&attr.to_string()).ok()?;\n+                    let hygiene = Hygiene::new_unhygienic(); // FIXME\n+                    Attr::from_src(attr, &hygiene)\n+                }\n+            })\n+            .collect();\n+\n+        Attrs(RawAttrs { entries: Some(new_attrs) })\n     }\n }\n "}, {"sha": "77eeee3fe9fff44bdc2349d044bca0b36074def1", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08de1b4fa57ca78ad13026950b3eb024b7d2abf3/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08de1b4fa57ca78ad13026950b3eb024b7d2abf3/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=08de1b4fa57ca78ad13026950b3eb024b7d2abf3", "patch": "@@ -153,6 +153,7 @@ pub mod known {\n         // Special names\n         macro_rules,\n         doc,\n+        cfg_attr,\n         // Components of known path (value or mod name)\n         std,\n         core,"}, {"sha": "1a078f6b4cf4bc42525f47065830cfa6ede4f2fc", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08de1b4fa57ca78ad13026950b3eb024b7d2abf3/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08de1b4fa57ca78ad13026950b3eb024b7d2abf3/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=08de1b4fa57ca78ad13026950b3eb024b7d2abf3", "patch": "@@ -133,6 +133,10 @@ pub(crate) mod fragments {\n \n         m.complete(p, MACRO_STMTS);\n     }\n+\n+    pub(crate) fn attr(p: &mut Parser) {\n+        attributes::outer_attrs(p)\n+    }\n }\n \n pub(crate) fn reparser("}, {"sha": "ab8e4c70e80955fbac22a026ff8d1564c126ef99", "filename": "crates/parser/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/08de1b4fa57ca78ad13026950b3eb024b7d2abf3/crates%2Fparser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08de1b4fa57ca78ad13026950b3eb024b7d2abf3/crates%2Fparser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flib.rs?ref=08de1b4fa57ca78ad13026950b3eb024b7d2abf3", "patch": "@@ -99,6 +99,8 @@ pub enum FragmentKind {\n     // FIXME: use separate fragment kinds for macro inputs and outputs?\n     Items,\n     Statements,\n+\n+    Attr,\n }\n \n pub fn parse_fragment(\n@@ -118,6 +120,7 @@ pub fn parse_fragment(\n         FragmentKind::Statement => grammar::fragments::stmt,\n         FragmentKind::Items => grammar::fragments::macro_items,\n         FragmentKind::Statements => grammar::fragments::macro_stmts,\n+        FragmentKind::Attr => grammar::fragments::attr,\n     };\n     parse_from_tokens(token_source, tree_sink, parser)\n }"}, {"sha": "4d272f367ad39ba4ac36f93b3fd5a98fc7322fa3", "filename": "crates/syntax/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/08de1b4fa57ca78ad13026950b3eb024b7d2abf3/crates%2Fsyntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08de1b4fa57ca78ad13026950b3eb024b7d2abf3/crates%2Fsyntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Flib.rs?ref=08de1b4fa57ca78ad13026950b3eb024b7d2abf3", "patch": "@@ -205,6 +205,13 @@ impl ast::Type {\n     }\n }\n \n+impl ast::Attr {\n+    /// Returns `text`, parsed as an attribute, but only if it has no errors.\n+    pub fn parse(text: &str) -> Result<Self, ()> {\n+        parsing::parse_text_fragment(text, parser::FragmentKind::Attr)\n+    }\n+}\n+\n /// Matches a `SyntaxNode` against an `ast` type.\n ///\n /// # Example:"}]}