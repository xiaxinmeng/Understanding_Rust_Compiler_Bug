{"sha": "6a2127be28a837215801f4ac3cd7d46ef7c4485b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMjEyN2JlMjhhODM3MjE1ODAxZjRhYzNjZDdkNDZlZjdjNDQ4NWI=", "commit": {"author": {"name": "Matthew Hall", "email": "matthew@quickbeam.me.uk", "date": "2020-04-02T17:42:30Z"}, "committer": {"name": "Matthew Hall", "email": "matthew@quickbeam.me.uk", "date": "2020-04-02T17:42:30Z"}, "message": "Cleanup checking for existing impls in impl From assist\n\nUse the trait solver to check if there's an existing implementation of\nFrom<type_in_enum_variant> for the enum.", "tree": {"sha": "2bacfb7f92c7059a5975fd5f256122b08190f93d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bacfb7f92c7059a5975fd5f256122b08190f93d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a2127be28a837215801f4ac3cd7d46ef7c4485b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2127be28a837215801f4ac3cd7d46ef7c4485b", "html_url": "https://github.com/rust-lang/rust/commit/6a2127be28a837215801f4ac3cd7d46ef7c4485b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a2127be28a837215801f4ac3cd7d46ef7c4485b/comments", "author": {"login": "mattyhall", "id": 5175499, "node_id": "MDQ6VXNlcjUxNzU0OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/5175499?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattyhall", "html_url": "https://github.com/mattyhall", "followers_url": "https://api.github.com/users/mattyhall/followers", "following_url": "https://api.github.com/users/mattyhall/following{/other_user}", "gists_url": "https://api.github.com/users/mattyhall/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattyhall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattyhall/subscriptions", "organizations_url": "https://api.github.com/users/mattyhall/orgs", "repos_url": "https://api.github.com/users/mattyhall/repos", "events_url": "https://api.github.com/users/mattyhall/events{/privacy}", "received_events_url": "https://api.github.com/users/mattyhall/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mattyhall", "id": 5175499, "node_id": "MDQ6VXNlcjUxNzU0OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/5175499?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattyhall", "html_url": "https://github.com/mattyhall", "followers_url": "https://api.github.com/users/mattyhall/followers", "following_url": "https://api.github.com/users/mattyhall/following{/other_user}", "gists_url": "https://api.github.com/users/mattyhall/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattyhall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattyhall/subscriptions", "organizations_url": "https://api.github.com/users/mattyhall/orgs", "repos_url": "https://api.github.com/users/mattyhall/repos", "events_url": "https://api.github.com/users/mattyhall/events{/privacy}", "received_events_url": "https://api.github.com/users/mattyhall/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fee60181fea56ebe6b5e4aeb11cf9df25a1d087", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fee60181fea56ebe6b5e4aeb11cf9df25a1d087", "html_url": "https://github.com/rust-lang/rust/commit/1fee60181fea56ebe6b5e4aeb11cf9df25a1d087"}], "stats": {"total": 72, "additions": 24, "deletions": 48}, "files": [{"sha": "864373aa5d58e2031684d4e8fe652ded492c0b4f", "filename": "crates/ra_assists/src/handlers/add_from_impl_for_enum.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6a2127be28a837215801f4ac3cd7d46ef7c4485b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2127be28a837215801f4ac3cd7d46ef7c4485b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs?ref=6a2127be28a837215801f4ac3cd7d46ef7c4485b", "patch": "@@ -1,4 +1,3 @@\n-use hir::ImplDef;\n use ra_syntax::{\n     ast::{self, AstNode, NameOwner},\n     TextUnit,\n@@ -99,18 +98,7 @@ fn already_has_from_impl(\n     };\n     let var_ty = hir_enum_var.fields(sema.db)[0].signature_ty(sema.db);\n \n-    let krate = match scope.module() {\n-        Some(s) => s.krate(),\n-        _ => return false,\n-    };\n-    let impls = ImplDef::for_trait(sema.db, krate, from_trait);\n-    let imp = impls.iter().find(|imp| {\n-        let targets_enum = imp.target_ty(sema.db) == e_ty;\n-        let param_matches = imp.target_trait_substs_matches(sema.db, &[var_ty.clone()]);\n-        targets_enum && param_matches\n-    });\n-\n-    imp.is_some()\n+    e_ty.impls_trait(sema.db, from_trait, &[var_ty.clone()])\n }\n \n #[cfg(test)]\n@@ -192,7 +180,7 @@ impl From<String> for A {\n         A::Two(v)\n     }\n }\n-    \n+\n pub trait From<T> {\n     fn from(T) -> Self;\n }\"#,\n@@ -209,7 +197,7 @@ impl From<String> for A {\n         A::Two(v)\n     }\n }\n-    \n+\n pub trait From<T> {\n     fn from(T) -> Self;\n }\"#,"}, {"sha": "c6f3bdb8eb610bc61734da5ce17ce68234ec1d8c", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 21, "deletions": 33, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/6a2127be28a837215801f4ac3cd7d46ef7c4485b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2127be28a837215801f4ac3cd7d46ef7c4485b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=6a2127be28a837215801f4ac3cd7d46ef7c4485b", "patch": "@@ -23,7 +23,7 @@ use hir_expand::{\n };\n use hir_ty::{\n     autoderef, display::HirFormatter, expr::ExprValidator, method_resolution, ApplicationTy,\n-    Canonical, InEnvironment, Substs, TraitEnvironment, Ty, TyDefId, TypeCtor, TypeWalk,\n+    Canonical, InEnvironment, Substs, TraitEnvironment, Ty, TyDefId, TypeCtor,\n };\n use ra_db::{CrateId, Edition, FileId};\n use ra_prof::profile;\n@@ -960,38 +960,6 @@ impl ImplDef {\n         db.impl_data(self.id).target_trait.clone()\n     }\n \n-    pub fn target_trait_substs_matches(&self, db: &dyn HirDatabase, typs: &[Type]) -> bool {\n-        let type_ref = match self.target_trait(db) {\n-            Some(typ_ref) => typ_ref,\n-            None => return false,\n-        };\n-        let resolver = self.id.resolver(db.upcast());\n-        let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n-        let ty = Ty::from_hir(&ctx, &type_ref);\n-        let d = match ty.dyn_trait_ref() {\n-            Some(d) => d,\n-            None => return false,\n-        };\n-        let mut matches = true;\n-        let mut i = 0;\n-        d.substs.walk(&mut |t| {\n-            if matches {\n-                if i >= typs.len() {\n-                    matches = false;\n-                    return;\n-                }\n-                match t {\n-                    Ty::Bound(_) => matches = i == 0,\n-                    _ => {\n-                        matches = *t == typs[i].ty.value;\n-                        i += 1;\n-                    }\n-                }\n-            }\n-        });\n-        matches\n-    }\n-\n     pub fn target_type(&self, db: &dyn HirDatabase) -> TypeRef {\n         db.impl_data(self.id).target_type.clone()\n     }\n@@ -1116,6 +1084,26 @@ impl Type {\n         )\n     }\n \n+    pub fn impls_trait(&self, db: &dyn HirDatabase, trait_: Trait, args: &[Type]) -> bool {\n+        let trait_ref = hir_ty::TraitRef {\n+            trait_: trait_.id,\n+            substs: Substs::build_for_def(db, trait_.id)\n+                .push(self.ty.value.clone())\n+                .fill(args.iter().map(|t| t.ty.value.clone()))\n+                .build(),\n+        };\n+\n+        let goal = Canonical {\n+            value: hir_ty::InEnvironment::new(\n+                self.ty.environment.clone(),\n+                hir_ty::Obligation::Trait(trait_ref),\n+            ),\n+            num_vars: 0,\n+        };\n+\n+        db.trait_solve(self.krate, goal).is_some()\n+    }\n+\n     // FIXME: this method is broken, as it doesn't take closures into account.\n     pub fn as_callable(&self) -> Option<CallableDef> {\n         Some(self.ty.value.as_callable()?.0)"}]}