{"sha": "25c15cdbe070f49d708f34750df2632e38bd4846", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YzE1Y2RiZTA3MGY0OWQ3MDhmMzQ3NTBkZjI2MzJlMzhiZDQ4NDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-22T11:32:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-22T11:32:50Z"}, "message": "Auto merge of #71511 - hi-rustin:rustin-patch-rename-assoc, r=eddyb,varkor\n\nRename AssociatedItems to AssocItems\n\nSigned-off-by: Rustin-Liu <rustin.liu@gmail.com>\n\nPart of https://github.com/rust-lang/rust/issues/60163#issuecomment-605308641", "tree": {"sha": "06f2d03e79a1f4b913b4e6ffdef35ad604b89696", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06f2d03e79a1f4b913b4e6ffdef35ad604b89696"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25c15cdbe070f49d708f34750df2632e38bd4846", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25c15cdbe070f49d708f34750df2632e38bd4846", "html_url": "https://github.com/rust-lang/rust/commit/25c15cdbe070f49d708f34750df2632e38bd4846", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25c15cdbe070f49d708f34750df2632e38bd4846/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88b99dec2a4d103b8153ca9300bf0fbebdf65bda", "url": "https://api.github.com/repos/rust-lang/rust/commits/88b99dec2a4d103b8153ca9300bf0fbebdf65bda", "html_url": "https://github.com/rust-lang/rust/commit/88b99dec2a4d103b8153ca9300bf0fbebdf65bda"}, {"sha": "6c3f5b85351ba62d4eea875964781cfd924d1ca2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c3f5b85351ba62d4eea875964781cfd924d1ca2", "html_url": "https://github.com/rust-lang/rust/commit/6c3f5b85351ba62d4eea875964781cfd924d1ca2"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "08fa12aa3718fb8dce5e4f30faeb5744f74328c3", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25c15cdbe070f49d708f34750df2632e38bd4846/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c15cdbe070f49d708f34750df2632e38bd4846/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=25c15cdbe070f49d708f34750df2632e38bd4846", "patch": "@@ -564,7 +564,7 @@ rustc_queries! {\n     }\n \n     /// Collects the associated items defined on a trait or impl.\n-    query associated_items(key: DefId) -> ty::AssociatedItems<'tcx> {\n+    query associated_items(key: DefId) -> ty::AssocItems<'tcx> {\n         storage(ArenaCacheSelector<'tcx>)\n         desc { |tcx| \"collecting associated items of {}\", tcx.def_path_str(key) }\n     }"}, {"sha": "d005f63ed4383b4365d9790cd715a8746000547c", "filename": "compiler/rustc_middle/src/ty/assoc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25c15cdbe070f49d708f34750df2632e38bd4846/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c15cdbe070f49d708f34750df2632e38bd4846/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs?ref=25c15cdbe070f49d708f34750df2632e38bd4846", "patch": "@@ -96,15 +96,15 @@ impl AssocKind {\n /// it is relatively expensive. Instead, items are indexed by `Symbol` and hygienic comparison is\n /// done only on items with the same name.\n #[derive(Debug, Clone, PartialEq, HashStable)]\n-pub struct AssociatedItems<'tcx> {\n+pub struct AssocItems<'tcx> {\n     pub(super) items: SortedIndexMultiMap<u32, Symbol, &'tcx ty::AssocItem>,\n }\n \n-impl<'tcx> AssociatedItems<'tcx> {\n+impl<'tcx> AssocItems<'tcx> {\n     /// Constructs an `AssociatedItems` map from a series of `ty::AssocItem`s in definition order.\n     pub fn new(items_in_def_order: impl IntoIterator<Item = &'tcx ty::AssocItem>) -> Self {\n         let items = items_in_def_order.into_iter().map(|item| (item.ident.name, item)).collect();\n-        AssociatedItems { items }\n+        AssocItems { items }\n     }\n \n     /// Returns a slice of associated items in the order they were defined."}, {"sha": "38e5ce6fd831c686c56856e10a35b6e02b66d863", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25c15cdbe070f49d708f34750df2632e38bd4846/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c15cdbe070f49d708f34750df2632e38bd4846/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=25c15cdbe070f49d708f34750df2632e38bd4846", "patch": "@@ -210,9 +210,9 @@ fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n     }\n }\n \n-fn associated_items(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssociatedItems<'_> {\n+fn associated_items(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssocItems<'_> {\n     let items = tcx.associated_item_def_ids(def_id).iter().map(|did| tcx.associated_item(*did));\n-    ty::AssociatedItems::new(items)\n+    ty::AssocItems::new(items)\n }\n \n fn def_ident_span(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Span> {"}, {"sha": "c69389e7b432b1578de4879b47add8b147c64bb1", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25c15cdbe070f49d708f34750df2632e38bd4846/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c15cdbe070f49d708f34750df2632e38bd4846/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs?ref=25c15cdbe070f49d708f34750df2632e38bd4846", "patch": "@@ -24,8 +24,8 @@ impl InherentOverlapChecker<'tcx> {\n     /// namespace.\n     fn impls_have_common_items(\n         &self,\n-        impl_items1: &ty::AssociatedItems<'_>,\n-        impl_items2: &ty::AssociatedItems<'_>,\n+        impl_items1: &ty::AssocItems<'_>,\n+        impl_items2: &ty::AssocItems<'_>,\n     ) -> bool {\n         let mut impl_items1 = &impl_items1;\n         let mut impl_items2 = &impl_items2;"}]}