{"sha": "d3eb3b42aa59c44c25c7f51cfa07a06d05b6a073", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZWIzYjQyYWE1OWM0NGMyNWM3ZjUxY2ZhMDdhMDZkMDViNmEwNzM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-22T08:06:20Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-22T08:06:20Z"}, "message": "Minimize calls to hash function in map.rs", "tree": {"sha": "83bd8dfb04f32dd94de64136a73fcc87355d24dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83bd8dfb04f32dd94de64136a73fcc87355d24dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3eb3b42aa59c44c25c7f51cfa07a06d05b6a073", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3eb3b42aa59c44c25c7f51cfa07a06d05b6a073", "html_url": "https://github.com/rust-lang/rust/commit/d3eb3b42aa59c44c25c7f51cfa07a06d05b6a073", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3eb3b42aa59c44c25c7f51cfa07a06d05b6a073/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "117aff86884c2b6a6c8520b8bfbffdb5cadb930f", "url": "https://api.github.com/repos/rust-lang/rust/commits/117aff86884c2b6a6c8520b8bfbffdb5cadb930f", "html_url": "https://github.com/rust-lang/rust/commit/117aff86884c2b6a6c8520b8bfbffdb5cadb930f"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "6c7c0363254d4fa936d44a035bc72bcc0ac995d5", "filename": "src/lib/map.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d3eb3b42aa59c44c25c7f51cfa07a06d05b6a073/src%2Flib%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3eb3b42aa59c44c25c7f51cfa07a06d05b6a073/src%2Flib%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmap.rs?ref=d3eb3b42aa59c44c25c7f51cfa07a06d05b6a073", "patch": "@@ -46,18 +46,16 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n     // is always a power of 2), so that all buckets are probed for a\n     // fixed key.\n \n-    fn hashl[K](&hashfn[K] hasher, uint nbkts, &K key) -> uint {\n-        ret (hasher(key) >>> (sys.rustrt.size_of[uint]() * 8u / 2u));\n+    fn hashl(uint n, uint nbkts) -> uint {\n+        ret (n >>> 16u);\n     }\n \n-    fn hashr[K](&hashfn[K] hasher, uint nbkts, &K key) -> uint {\n-        ret ((((~ 0u) >>> (sys.rustrt.size_of[uint]() * 8u / 2u))\n-              & hasher(key)) * 2u + 1u);\n+    fn hashr(uint n, uint nbkts) -> uint {\n+        ret ((((~ 0u) >>> 16u) & n) * 2u + 1u);\n     }\n \n-    fn hash[K](&hashfn[K] hasher, uint nbkts, &K key, uint i) -> uint {\n-        ret (hashl[K](hasher, nbkts, key)\n-             + i * hashr[K](hasher, nbkts, key)) % nbkts;\n+    fn hash(uint h, uint nbkts, uint i) -> uint {\n+        ret (hashl(h, nbkts) + i * hashr(h, nbkts)) % nbkts;\n     }\n \n     /**\n@@ -73,8 +71,9 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n         -> bool\n         {\n             let uint i = 0u;\n+            let uint h = hasher(key);\n             while (i < nbkts) {\n-                let uint j = hash[K](hasher, nbkts, key, i);\n+                let uint j = hash(h, nbkts, i);\n                 alt (bkts.(j)) {\n                     case (some[K, V](?k, _)) {\n                         if (eqer(key, k)) {\n@@ -100,8 +99,9 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n         -> option.t[V]\n         {\n             let uint i = 0u;\n+            let uint h = hasher(key);\n             while (i < nbkts) {\n-                let uint j = (hash[K](hasher, nbkts, key, i));\n+                let uint j = (hash(h, nbkts, i));\n                 alt (bkts.(j)) {\n                     case (some[K, V](?k, ?v)) {\n                         if (eqer(key, k)) {\n@@ -189,8 +189,9 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n \n             fn remove(&K key) -> option.t[V] {\n                 let uint i = 0u;\n+                let uint h = hasher(key);\n                 while (i < nbkts) {\n-                    let uint j = (hash[K](hasher, nbkts, key, i));\n+                    let uint j = (hash(h, nbkts, i));\n                     alt (bkts.(j)) {\n                         case (some[K, V](?k, ?v)) {\n                             if (eqer(key, k)) {"}]}