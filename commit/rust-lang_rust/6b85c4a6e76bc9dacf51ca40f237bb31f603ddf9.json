{"sha": "6b85c4a6e76bc9dacf51ca40f237bb31f603ddf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiODVjNGE2ZTc2YmM5ZGFjZjUxY2E0MGYyMzdiYjMxZjYwM2RkZjk=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-05T06:24:12Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-05T06:24:12Z"}, "message": "Format inner attributes in match expr", "tree": {"sha": "063199a76a3fe950391b736c5fdb822485d99ddd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/063199a76a3fe950391b736c5fdb822485d99ddd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b85c4a6e76bc9dacf51ca40f237bb31f603ddf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b85c4a6e76bc9dacf51ca40f237bb31f603ddf9", "html_url": "https://github.com/rust-lang/rust/commit/6b85c4a6e76bc9dacf51ca40f237bb31f603ddf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b85c4a6e76bc9dacf51ca40f237bb31f603ddf9/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4bf413956c5e70dfe42cbca062fcb349ecdff5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4bf413956c5e70dfe42cbca062fcb349ecdff5d", "html_url": "https://github.com/rust-lang/rust/commit/d4bf413956c5e70dfe42cbca062fcb349ecdff5d"}], "stats": {"total": 57, "additions": 42, "deletions": 15}, "files": [{"sha": "f56f3f8779ed4c672f9b2f849596eafa4cc6a7e8", "filename": "src/expr.rs", "status": "modified", "additions": 42, "deletions": 15, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/6b85c4a6e76bc9dacf51ca40f237bb31f603ddf9/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b85c4a6e76bc9dacf51ca40f237bb31f603ddf9/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=6b85c4a6e76bc9dacf51ca40f237bb31f603ddf9", "patch": "@@ -31,8 +31,9 @@ use rewrite::{Rewrite, RewriteContext};\n use string::{rewrite_string, StringFormat};\n use types::{can_be_overflowed_type, rewrite_path, PathContext};\n use utils::{binary_search, colon_spaces, contains_skip, extra_offset, first_line_width,\n-            last_line_extendable, last_line_width, left_most_sub_expr, mk_sp, paren_overhead,\n-            semicolon_for_stmt, stmt_expr, trimmed_last_line_width, wrap_str};\n+            inner_attributes, last_line_extendable, last_line_width, left_most_sub_expr, mk_sp,\n+            outer_attributes, paren_overhead, semicolon_for_stmt, stmt_expr,\n+            trimmed_last_line_width, wrap_str};\n use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n \n@@ -54,15 +55,13 @@ fn combine_attr_and_expr(\n     expr: &ast::Expr,\n     expr_str: &str,\n ) -> Option<String> {\n-    let attr_str = try_opt!((&*expr.attrs).rewrite(context, shape));\n+    let attrs = outer_attributes(&expr.attrs);\n+    let attr_str = try_opt!(attrs.rewrite(context, shape));\n     let separator = if attr_str.is_empty() {\n         String::new()\n     } else {\n         // Try to recover comments between the attributes and the expression if available.\n-        let missing_snippet = context.snippet(mk_sp(\n-            expr.attrs[expr.attrs.len() - 1].span.hi,\n-            expr.span.lo,\n-        ));\n+        let missing_snippet = context.snippet(mk_sp(attrs[attrs.len() - 1].span.hi, expr.span.lo));\n         let comment_opening_pos = missing_snippet.chars().position(|c| c == '/');\n         let prefer_same_line = if let Some(pos) = comment_opening_pos {\n             !missing_snippet[..pos].contains('\\n')\n@@ -198,7 +197,7 @@ pub fn format_expr(\n             }\n         }\n         ast::ExprKind::Match(ref cond, ref arms) => {\n-            rewrite_match(context, cond, arms, shape, expr.span)\n+            rewrite_match(context, cond, arms, shape, expr.span, &expr.attrs)\n         }\n         ast::ExprKind::Path(ref qself, ref path) => {\n             rewrite_path(context, PathContext::Expr, qself.as_ref(), path, shape)\n@@ -1531,6 +1530,7 @@ fn rewrite_match(\n     arms: &[ast::Arm],\n     shape: Shape,\n     span: Span,\n+    attrs: &[ast::Attribute],\n ) -> Option<String> {\n     if arms.is_empty() {\n         return None;\n@@ -1558,11 +1558,42 @@ fn rewrite_match(\n         _ => \" \",\n     };\n \n+    let nested_indent_str = shape\n+        .indent\n+        .block_indent(context.config)\n+        .to_string(context.config);\n+    // Inner attributes.\n+    let inner_attrs = &inner_attributes(attrs);\n+    let inner_attrs_str = if inner_attrs.is_empty() {\n+        String::new()\n+    } else {\n+        try_opt!(\n+            inner_attrs\n+                .rewrite(context, shape)\n+                .map(|s| format!(\"\\n{}{}\", nested_indent_str, s))\n+        )\n+    };\n+\n+    let open_brace_pos = if inner_attrs.is_empty() {\n+        context\n+            .codemap\n+            .span_after(mk_sp(cond.span.hi, arms[0].span().lo), \"{\")\n+    } else {\n+        inner_attrs[inner_attrs.len() - 1].span().hi\n+    };\n+\n     Some(format!(\n-        \"match {}{}{{{}\\n{}}}\",\n+        \"match {}{}{{{}{}\\n{}}}\",\n         cond_str,\n         block_sep,\n-        try_opt!(rewrite_match_arms(context, arms, shape, span, cond.span.hi)),\n+        inner_attrs_str,\n+        try_opt!(rewrite_match_arms(\n+            context,\n+            arms,\n+            shape,\n+            span,\n+            open_brace_pos,\n+        )),\n         shape.indent.to_string(context.config),\n     ))\n }\n@@ -1586,7 +1617,7 @@ fn rewrite_match_arms(\n     arms: &[ast::Arm],\n     shape: Shape,\n     span: Span,\n-    cond_end_pos: BytePos,\n+    open_brace_pos: BytePos,\n ) -> Option<String> {\n     let mut result = String::new();\n \n@@ -1597,10 +1628,6 @@ fn rewrite_match_arms(\n     }.with_max_width(context.config);\n     let arm_indent_str = arm_shape.indent.to_string(context.config);\n \n-    let open_brace_pos = context\n-        .codemap\n-        .span_after(mk_sp(cond_end_pos, arms[0].span().lo), \"{\");\n-\n     let arm_num = arms.len();\n     for (i, arm) in arms.iter().enumerate() {\n         // Make sure we get the stuff between arms."}]}