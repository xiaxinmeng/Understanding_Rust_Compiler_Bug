{"sha": "7ddc245b145bf8b1a1d6472ff7b43a2acd8f2ed7", "node_id": "C_kwDOAAsO6NoAKDdkZGMyNDViMTQ1YmY4YjFhMWQ2NDcyZmY3YjQzYTJhY2Q4ZjJlZDc", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2023-04-07T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2023-04-07T00:00:00Z"}, "message": "./x.py test --bless", "tree": {"sha": "770c05ea19ecd90df02725df5ed713d1f2436e19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/770c05ea19ecd90df02725df5ed713d1f2436e19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ddc245b145bf8b1a1d6472ff7b43a2acd8f2ed7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ddc245b145bf8b1a1d6472ff7b43a2acd8f2ed7", "html_url": "https://github.com/rust-lang/rust/commit/7ddc245b145bf8b1a1d6472ff7b43a2acd8f2ed7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ddc245b145bf8b1a1d6472ff7b43a2acd8f2ed7/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67b46141804132919a7976b3484cbcf6055e431e", "url": "https://api.github.com/repos/rust-lang/rust/commits/67b46141804132919a7976b3484cbcf6055e431e", "html_url": "https://github.com/rust-lang/rust/commit/67b46141804132919a7976b3484cbcf6055e431e"}], "stats": {"total": 478, "additions": 296, "deletions": 182}, "files": [{"sha": "6184a0acd1879bdbbe35ad531610fd036b332bcf", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff", "status": "modified", "additions": 76, "deletions": 47, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/7ddc245b145bf8b1a1d6472ff7b43a2acd8f2ed7/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7ddc245b145bf8b1a1d6472ff7b43a2acd8f2ed7/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff?ref=7ddc245b145bf8b1a1d6472ff7b43a2acd8f2ed7", "patch": "@@ -14,36 +14,45 @@\n +         let mut _6: std::option::Option<u16>; // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n +         let mut _7: std::result::Result<u16, std::num::TryFromIntError>; // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n +         scope 2 {\n-+             scope 3 (inlined Result::<u16, TryFromIntError>::ok) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-+                 debug self => _7;        // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n-+                 let mut _8: isize;       // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n-+                 let _9: u16;             // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n-+                 scope 4 {\n-+                     debug x => _9;       // in scope 4 at $SRC_DIR/core/src/result.rs:LL:COL\n++             scope 3 (inlined <u32 as TryInto<u16>>::try_into) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++                 debug self => _4;        // in scope 3 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n++                 scope 4 (inlined convert::num::<impl TryFrom<u32> for u16>::try_from) { // at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n++                     debug u => _4;       // in scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++                     let mut _8: bool;    // in scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++                     let mut _9: u32;     // in scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++                     let mut _10: u16;    // in scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n +                 }\n-+                 scope 5 {\n-+                     scope 6 {\n-+                         debug x => const TryFromIntError(()); // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n++             }\n++             scope 5 (inlined Result::<u16, TryFromIntError>::ok) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++                 debug self => _7;        // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++                 let mut _11: isize;      // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++                 let _12: u16;            // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++                 scope 6 {\n++                     debug x => _12;      // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n++                 }\n++                 scope 7 {\n++                     scope 8 {\n++                         debug x => const TryFromIntError(()); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n +                     }\n +                 }\n +             }\n-+             scope 7 (inlined #[track_caller] Option::<u16>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-+                 debug self => _6;        // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n-+                 let mut _10: &std::option::Option<u16>; // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n-+                 let mut _11: isize;      // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n-+                 scope 8 {\n-+                     debug val => _5;     // in scope 8 at $SRC_DIR/core/src/option.rs:LL:COL\n++             scope 9 (inlined #[track_caller] Option::<u16>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++                 debug self => _6;        // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 let mut _13: &std::option::Option<u16>; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 let mut _14: isize;      // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 scope 10 {\n++                     debug val => _5;     // in scope 10 at $SRC_DIR/core/src/option.rs:LL:COL\n +                 }\n-+                 scope 9 {\n-+                     scope 11 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n-+                         scope 12 {\n-+                             scope 13 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n++                 scope 11 {\n++                     scope 13 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n++                         scope 14 {\n++                             scope 15 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n +                             }\n +                         }\n +                     }\n +                 }\n-+                 scope 10 (inlined Option::<u16>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n-+                     debug self => _10;   // in scope 10 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 scope 12 (inlined Option::<u16>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n++                     debug self => _13;   // in scope 12 at $SRC_DIR/core/src/option.rs:LL:COL\n +                 }\n +             }\n +         }\n@@ -55,58 +64,78 @@\n           StorageLive(_4);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n           _4 = _2;                         // scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n -         _0 = core::num::<impl u16>::unchecked_shl(move _3, move _4) -> bb1; // scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:23\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/unchecked_shifts.rs:11:7: 11:20\n+-                                          // + literal: Const { ty: unsafe fn(u16, u32) -> u16 {core::num::<impl u16>::unchecked_shl}, val: Value(<ZST>) }\n +         StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n +         StorageLive(_6);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n +         StorageLive(_7);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-+         _7 = <u32 as TryInto<u16>>::try_into(_4) -> bb1; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-                                           // mir::Constant\n--                                          // + span: $DIR/unchecked_shifts.rs:11:7: 11:20\n--                                          // + literal: Const { ty: unsafe fn(u16, u32) -> u16 {core::num::<impl u16>::unchecked_shl}, val: Value(<ZST>) }\n-+                                          // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-+                                          // + literal: Const { ty: fn(u32) -> Result<u16, <u32 as TryInto<u16>>::Error> {<u32 as TryInto<u16>>::try_into}, val: Value(<ZST>) }\n++         StorageLive(_8);                 // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         StorageLive(_9);                 // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         _9 = const 65535_u32;            // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         _8 = Gt(_4, move _9);            // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         StorageDead(_9);                 // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         switchInt(move _8) -> [0: bb4, otherwise: bb3]; // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n       }\n   \n       bb1: {\n-+         StorageLive(_9);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-+         _8 = discriminant(_7);           // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n-+     }\n-+ \n-+     bb2: {\n-+         StorageDead(_9);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         StorageDead(_12);                // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n +         StorageDead(_7);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-+         StorageLive(_10);                // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-+         _11 = discriminant(_6);          // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n-+         switchInt(move _11) -> [1: bb7, otherwise: bb5]; // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++         StorageLive(_13);                // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         _14 = discriminant(_6);          // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n++         switchInt(move _14) -> [1: bb9, otherwise: bb7]; // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n +     }\n + \n-+     bb3: {\n++     bb2: {\n +         StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n           StorageDead(_4);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:22: +1:23\n           StorageDead(_3);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:22: +1:23\n           return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n +     }\n + \n++     bb3: {\n++         _7 = Result::<u16, TryFromIntError>::Err(const TryFromIntError(())); // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++                                          // mir::Constant\n++                                          // + span: no-location\n++                                          // + literal: Const { ty: TryFromIntError, val: Value(<ZST>) }\n++         goto -> bb5;                     // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++     }\n++ \n +     bb4: {\n-+         _6 = Option::<u16>::None;        // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         goto -> bb2;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++         StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         _10 = _4 as u16 (IntToInt);      // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         _7 = Result::<u16, TryFromIntError>::Ok(move _10); // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         goto -> bb5;                     // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n +     }\n + \n +     bb5: {\n-+         unreachable;                     // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++         StorageDead(_8);                 // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         StorageLive(_12);                // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         _11 = discriminant(_7);          // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++         switchInt(move _11) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n +     }\n + \n +     bb6: {\n-+         _9 = move ((_7 as Ok).0: u16);   // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         _6 = Option::<u16>::Some(move _9); // scope 4 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         goto -> bb2;                     // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++         _6 = Option::<u16>::None;        // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n++         goto -> bb1;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n +     }\n + \n +     bb7: {\n-+         _5 = move ((_6 as Some).0: u16); // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n-+         StorageDead(_10);                // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         unreachable;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb8: {\n++         _12 = move ((_7 as Ok).0: u16);  // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++         _6 = Option::<u16>::Some(move _12); // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n++         goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb9: {\n++         _5 = move ((_6 as Some).0: u16); // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n++         StorageDead(_13);                // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n +         StorageDead(_6);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-+         _0 = unchecked_shl::<u16>(_3, move _5) -> [return: bb3, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         _0 = unchecked_shl::<u16>(_3, move _5) -> [return: bb2, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n +                                          // mir::Constant\n +                                          // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n +                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u16, u16) -> u16 {unchecked_shl::<u16>}, val: Value(<ZST>) }"}, {"sha": "726b6bbf93b5ccd7739867a83e5308e015e36665", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "status": "modified", "additions": 72, "deletions": 44, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/7ddc245b145bf8b1a1d6472ff7b43a2acd8f2ed7/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7ddc245b145bf8b1a1d6472ff7b43a2acd8f2ed7/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir?ref=7ddc245b145bf8b1a1d6472ff7b43a2acd8f2ed7", "patch": "@@ -11,36 +11,45 @@ fn unchecked_shl_unsigned_smaller(_1: u16, _2: u32) -> u16 {\n         let mut _4: std::option::Option<u16>; // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         let mut _5: std::result::Result<u16, std::num::TryFromIntError>; // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         scope 2 {\n-            scope 3 (inlined Result::<u16, TryFromIntError>::ok) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-                debug self => _5;        // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n-                let mut _6: isize;       // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n-                let _7: u16;             // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n-                scope 4 {\n-                    debug x => _7;       // in scope 4 at $SRC_DIR/core/src/result.rs:LL:COL\n+            scope 3 (inlined <u32 as TryInto<u16>>::try_into) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                debug self => _2;        // in scope 3 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                scope 4 (inlined convert::num::<impl TryFrom<u32> for u16>::try_from) { // at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                    debug u => _2;       // in scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                    let mut _6: bool;    // in scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                    let mut _7: u32;     // in scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                    let mut _8: u16;     // in scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n                 }\n-                scope 5 {\n-                    scope 6 {\n-                        debug x => const TryFromIntError(()); // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+            }\n+            scope 5 (inlined Result::<u16, TryFromIntError>::ok) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                debug self => _5;        // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+                let mut _9: isize;       // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+                let _10: u16;            // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+                scope 6 {\n+                    debug x => _10;      // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+                }\n+                scope 7 {\n+                    scope 8 {\n+                        debug x => const TryFromIntError(()); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n                     }\n                 }\n             }\n-            scope 7 (inlined #[track_caller] Option::<u16>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-                debug self => _4;        // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n-                let mut _8: &std::option::Option<u16>; // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n-                let mut _9: isize;       // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n-                scope 8 {\n-                    debug val => _3;     // in scope 8 at $SRC_DIR/core/src/option.rs:LL:COL\n+            scope 9 (inlined #[track_caller] Option::<u16>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                debug self => _4;        // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+                let mut _11: &std::option::Option<u16>; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+                let mut _12: isize;      // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+                scope 10 {\n+                    debug val => _3;     // in scope 10 at $SRC_DIR/core/src/option.rs:LL:COL\n                 }\n-                scope 9 {\n-                    scope 11 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n-                        scope 12 {\n-                            scope 13 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                scope 11 {\n+                    scope 13 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                        scope 14 {\n+                            scope 15 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n                             }\n                         }\n                     }\n                 }\n-                scope 10 (inlined Option::<u16>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n-                    debug self => _8;    // in scope 10 at $SRC_DIR/core/src/option.rs:LL:COL\n+                scope 12 (inlined Option::<u16>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                    debug self => _11;   // in scope 12 at $SRC_DIR/core/src/option.rs:LL:COL\n                 }\n             }\n         }\n@@ -50,51 +59,70 @@ fn unchecked_shl_unsigned_smaller(_1: u16, _2: u32) -> u16 {\n         StorageLive(_3);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         StorageLive(_4);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        _5 = <u32 as TryInto<u16>>::try_into(_2) -> bb1; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-                                         // + literal: Const { ty: fn(u32) -> Result<u16, <u32 as TryInto<u16>>::Error> {<u32 as TryInto<u16>>::try_into}, val: Value(<ZST>) }\n+        StorageLive(_6);                 // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageLive(_7);                 // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _7 = const 65535_u32;            // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _6 = Gt(_2, move _7);            // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageDead(_7);                 // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        switchInt(move _6) -> [0: bb4, otherwise: bb3]; // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n     }\n \n     bb1: {\n-        StorageLive(_7);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        _6 = discriminant(_5);           // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n-        switchInt(move _6) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageDead(_10);                // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageLive(_11);                // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _12 = discriminant(_4);          // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+        switchInt(move _12) -> [1: bb9, otherwise: bb7]; // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n     }\n \n     bb2: {\n-        StorageDead(_7);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        StorageLive(_8);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        _9 = discriminant(_4);           // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n-        switchInt(move _9) -> [1: bb7, otherwise: bb5]; // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n     }\n \n     bb3: {\n-        StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n+        _5 = Result::<u16, TryFromIntError>::Err(const TryFromIntError(())); // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: no-location\n+                                         // + literal: Const { ty: TryFromIntError, val: Value(<ZST>) }\n+        goto -> bb5;                     // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n     }\n \n     bb4: {\n-        _4 = Option::<u16>::None;        // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        goto -> bb2;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageLive(_8);                 // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _8 = _2 as u16 (IntToInt);       // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _5 = Result::<u16, TryFromIntError>::Ok(move _8); // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageDead(_8);                 // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        goto -> bb5;                     // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n     }\n \n     bb5: {\n-        unreachable;                     // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageDead(_6);                 // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageLive(_10);                // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _9 = discriminant(_5);           // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        switchInt(move _9) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n     }\n \n     bb6: {\n-        _7 = move ((_5 as Ok).0: u16);   // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _4 = Option::<u16>::Some(move _7); // scope 4 at $SRC_DIR/core/src/result.rs:LL:COL\n-        goto -> bb2;                     // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _4 = Option::<u16>::None;        // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+        goto -> bb1;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n     }\n \n     bb7: {\n-        _3 = move ((_4 as Some).0: u16); // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n-        StorageDead(_8);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        unreachable;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb8: {\n+        _10 = move ((_5 as Ok).0: u16);  // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _4 = Option::<u16>::Some(move _10); // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb9: {\n+        _3 = move ((_4 as Some).0: u16); // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_11);                // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        _0 = unchecked_shl::<u16>(_1, move _3) -> [return: bb3, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _0 = unchecked_shl::<u16>(_1, move _3) -> [return: bb2, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u16, u16) -> u16 {unchecked_shl::<u16>}, val: Value(<ZST>) }"}, {"sha": "35d5b6e72f28f175382492ef80c04ef71b10bd14", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shr_signed_smaller.Inline.diff", "status": "modified", "additions": 76, "deletions": 47, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/7ddc245b145bf8b1a1d6472ff7b43a2acd8f2ed7/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7ddc245b145bf8b1a1d6472ff7b43a2acd8f2ed7/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.diff?ref=7ddc245b145bf8b1a1d6472ff7b43a2acd8f2ed7", "patch": "@@ -14,36 +14,45 @@\n +         let mut _6: std::option::Option<i16>; // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n +         let mut _7: std::result::Result<i16, std::num::TryFromIntError>; // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n +         scope 2 {\n-+             scope 3 (inlined Result::<i16, TryFromIntError>::ok) { // at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-+                 debug self => _7;        // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n-+                 let mut _8: isize;       // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n-+                 let _9: i16;             // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n-+                 scope 4 {\n-+                     debug x => _9;       // in scope 4 at $SRC_DIR/core/src/result.rs:LL:COL\n++             scope 3 (inlined <u32 as TryInto<i16>>::try_into) { // at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++                 debug self => _4;        // in scope 3 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n++                 scope 4 (inlined convert::num::<impl TryFrom<u32> for i16>::try_from) { // at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n++                     debug u => _4;       // in scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++                     let mut _8: bool;    // in scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++                     let mut _9: u32;     // in scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++                     let mut _10: i16;    // in scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n +                 }\n-+                 scope 5 {\n-+                     scope 6 {\n-+                         debug x => const TryFromIntError(()); // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n++             }\n++             scope 5 (inlined Result::<i16, TryFromIntError>::ok) { // at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++                 debug self => _7;        // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++                 let mut _11: isize;      // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++                 let _12: i16;            // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++                 scope 6 {\n++                     debug x => _12;      // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n++                 }\n++                 scope 7 {\n++                     scope 8 {\n++                         debug x => const TryFromIntError(()); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n +                     }\n +                 }\n +             }\n-+             scope 7 (inlined #[track_caller] Option::<i16>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-+                 debug self => _6;        // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n-+                 let mut _10: &std::option::Option<i16>; // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n-+                 let mut _11: isize;      // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n-+                 scope 8 {\n-+                     debug val => _5;     // in scope 8 at $SRC_DIR/core/src/option.rs:LL:COL\n++             scope 9 (inlined #[track_caller] Option::<i16>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++                 debug self => _6;        // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 let mut _13: &std::option::Option<i16>; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 let mut _14: isize;      // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 scope 10 {\n++                     debug val => _5;     // in scope 10 at $SRC_DIR/core/src/option.rs:LL:COL\n +                 }\n-+                 scope 9 {\n-+                     scope 11 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n-+                         scope 12 {\n-+                             scope 13 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n++                 scope 11 {\n++                     scope 13 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n++                         scope 14 {\n++                             scope 15 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n +                             }\n +                         }\n +                     }\n +                 }\n-+                 scope 10 (inlined Option::<i16>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n-+                     debug self => _10;   // in scope 10 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 scope 12 (inlined Option::<i16>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n++                     debug self => _13;   // in scope 12 at $SRC_DIR/core/src/option.rs:LL:COL\n +                 }\n +             }\n +         }\n@@ -55,58 +64,78 @@\n           StorageLive(_4);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n           _4 = _2;                         // scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n -         _0 = core::num::<impl i16>::unchecked_shr(move _3, move _4) -> bb1; // scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:23\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/unchecked_shifts.rs:17:7: 17:20\n+-                                          // + literal: Const { ty: unsafe fn(i16, u32) -> i16 {core::num::<impl i16>::unchecked_shr}, val: Value(<ZST>) }\n +         StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n +         StorageLive(_6);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n +         StorageLive(_7);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-+         _7 = <u32 as TryInto<i16>>::try_into(_4) -> bb1; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-                                           // mir::Constant\n--                                          // + span: $DIR/unchecked_shifts.rs:17:7: 17:20\n--                                          // + literal: Const { ty: unsafe fn(i16, u32) -> i16 {core::num::<impl i16>::unchecked_shr}, val: Value(<ZST>) }\n-+                                          // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-+                                          // + literal: Const { ty: fn(u32) -> Result<i16, <u32 as TryInto<i16>>::Error> {<u32 as TryInto<i16>>::try_into}, val: Value(<ZST>) }\n++         StorageLive(_8);                 // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         StorageLive(_9);                 // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         _9 = const 32767_u32;            // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         _8 = Gt(_4, move _9);            // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         StorageDead(_9);                 // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         switchInt(move _8) -> [0: bb4, otherwise: bb3]; // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n       }\n   \n       bb1: {\n-+         StorageLive(_9);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-+         _8 = discriminant(_7);           // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n-+     }\n-+ \n-+     bb2: {\n-+         StorageDead(_9);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         StorageDead(_12);                // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n +         StorageDead(_7);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-+         StorageLive(_10);                // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-+         _11 = discriminant(_6);          // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n-+         switchInt(move _11) -> [1: bb7, otherwise: bb5]; // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++         StorageLive(_13);                // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         _14 = discriminant(_6);          // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n++         switchInt(move _14) -> [1: bb9, otherwise: bb7]; // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n +     }\n + \n-+     bb3: {\n++     bb2: {\n +         StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n           StorageDead(_4);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:22: +1:23\n           StorageDead(_3);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:22: +1:23\n           return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n +     }\n + \n++     bb3: {\n++         _7 = Result::<i16, TryFromIntError>::Err(const TryFromIntError(())); // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++                                          // mir::Constant\n++                                          // + span: no-location\n++                                          // + literal: Const { ty: TryFromIntError, val: Value(<ZST>) }\n++         goto -> bb5;                     // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++     }\n++ \n +     bb4: {\n-+         _6 = Option::<i16>::None;        // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         goto -> bb2;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++         StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         _10 = _4 as i16 (IntToInt);      // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         _7 = Result::<i16, TryFromIntError>::Ok(move _10); // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         goto -> bb5;                     // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n +     }\n + \n +     bb5: {\n-+         unreachable;                     // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++         StorageDead(_8);                 // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n++         StorageLive(_12);                // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         _11 = discriminant(_7);          // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++         switchInt(move _11) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n +     }\n + \n +     bb6: {\n-+         _9 = move ((_7 as Ok).0: i16);   // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         _6 = Option::<i16>::Some(move _9); // scope 4 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         goto -> bb2;                     // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++         _6 = Option::<i16>::None;        // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n++         goto -> bb1;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n +     }\n + \n +     bb7: {\n-+         _5 = move ((_6 as Some).0: i16); // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n-+         StorageDead(_10);                // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         unreachable;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb8: {\n++         _12 = move ((_7 as Ok).0: i16);  // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++         _6 = Option::<i16>::Some(move _12); // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n++         goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb9: {\n++         _5 = move ((_6 as Some).0: i16); // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n++         StorageDead(_13);                // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n +         StorageDead(_6);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-+         _0 = unchecked_shr::<i16>(_3, move _5) -> [return: bb3, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         _0 = unchecked_shr::<i16>(_3, move _5) -> [return: bb2, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n +                                          // mir::Constant\n +                                          // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n +                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(i16, i16) -> i16 {unchecked_shr::<i16>}, val: Value(<ZST>) }"}, {"sha": "b006085b54c587c42ecb0b4b6b67023f77d2bb4e", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "status": "modified", "additions": 72, "deletions": 44, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/7ddc245b145bf8b1a1d6472ff7b43a2acd8f2ed7/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7ddc245b145bf8b1a1d6472ff7b43a2acd8f2ed7/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir?ref=7ddc245b145bf8b1a1d6472ff7b43a2acd8f2ed7", "patch": "@@ -11,36 +11,45 @@ fn unchecked_shr_signed_smaller(_1: i16, _2: u32) -> i16 {\n         let mut _4: std::option::Option<i16>; // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n         let mut _5: std::result::Result<i16, std::num::TryFromIntError>; // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n         scope 2 {\n-            scope 3 (inlined Result::<i16, TryFromIntError>::ok) { // at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-                debug self => _5;        // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n-                let mut _6: isize;       // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n-                let _7: i16;             // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n-                scope 4 {\n-                    debug x => _7;       // in scope 4 at $SRC_DIR/core/src/result.rs:LL:COL\n+            scope 3 (inlined <u32 as TryInto<i16>>::try_into) { // at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+                debug self => _2;        // in scope 3 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                scope 4 (inlined convert::num::<impl TryFrom<u32> for i16>::try_from) { // at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                    debug u => _2;       // in scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                    let mut _6: bool;    // in scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                    let mut _7: u32;     // in scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                    let mut _8: i16;     // in scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n                 }\n-                scope 5 {\n-                    scope 6 {\n-                        debug x => const TryFromIntError(()); // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+            }\n+            scope 5 (inlined Result::<i16, TryFromIntError>::ok) { // at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+                debug self => _5;        // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+                let mut _9: isize;       // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+                let _10: i16;            // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+                scope 6 {\n+                    debug x => _10;      // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+                }\n+                scope 7 {\n+                    scope 8 {\n+                        debug x => const TryFromIntError(()); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n                     }\n                 }\n             }\n-            scope 7 (inlined #[track_caller] Option::<i16>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-                debug self => _4;        // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n-                let mut _8: &std::option::Option<i16>; // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n-                let mut _9: isize;       // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n-                scope 8 {\n-                    debug val => _3;     // in scope 8 at $SRC_DIR/core/src/option.rs:LL:COL\n+            scope 9 (inlined #[track_caller] Option::<i16>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+                debug self => _4;        // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+                let mut _11: &std::option::Option<i16>; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+                let mut _12: isize;      // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+                scope 10 {\n+                    debug val => _3;     // in scope 10 at $SRC_DIR/core/src/option.rs:LL:COL\n                 }\n-                scope 9 {\n-                    scope 11 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n-                        scope 12 {\n-                            scope 13 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                scope 11 {\n+                    scope 13 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                        scope 14 {\n+                            scope 15 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n                             }\n                         }\n                     }\n                 }\n-                scope 10 (inlined Option::<i16>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n-                    debug self => _8;    // in scope 10 at $SRC_DIR/core/src/option.rs:LL:COL\n+                scope 12 (inlined Option::<i16>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                    debug self => _11;   // in scope 12 at $SRC_DIR/core/src/option.rs:LL:COL\n                 }\n             }\n         }\n@@ -50,51 +59,70 @@ fn unchecked_shr_signed_smaller(_1: i16, _2: u32) -> i16 {\n         StorageLive(_3);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n         StorageLive(_4);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n         StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-        _5 = <u32 as TryInto<i16>>::try_into(_2) -> bb1; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-                                         // + literal: Const { ty: fn(u32) -> Result<i16, <u32 as TryInto<i16>>::Error> {<u32 as TryInto<i16>>::try_into}, val: Value(<ZST>) }\n+        StorageLive(_6);                 // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageLive(_7);                 // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _7 = const 32767_u32;            // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _6 = Gt(_2, move _7);            // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageDead(_7);                 // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        switchInt(move _6) -> [0: bb4, otherwise: bb3]; // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n     }\n \n     bb1: {\n-        StorageLive(_7);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-        _6 = discriminant(_5);           // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n-        switchInt(move _6) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageDead(_10);                // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        StorageLive(_11);                // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        _12 = discriminant(_4);          // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+        switchInt(move _12) -> [1: bb9, otherwise: bb7]; // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n     }\n \n     bb2: {\n-        StorageDead(_7);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-        StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-        StorageLive(_8);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-        _9 = discriminant(_4);           // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n-        switchInt(move _9) -> [1: bb7, otherwise: bb5]; // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n     }\n \n     bb3: {\n-        StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-        return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n+        _5 = Result::<i16, TryFromIntError>::Err(const TryFromIntError(())); // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: no-location\n+                                         // + literal: Const { ty: TryFromIntError, val: Value(<ZST>) }\n+        goto -> bb5;                     // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n     }\n \n     bb4: {\n-        _4 = Option::<i16>::None;        // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        goto -> bb2;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageLive(_8);                 // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _8 = _2 as i16 (IntToInt);       // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _5 = Result::<i16, TryFromIntError>::Ok(move _8); // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageDead(_8);                 // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        goto -> bb5;                     // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n     }\n \n     bb5: {\n-        unreachable;                     // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageDead(_6);                 // scope 4 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageLive(_10);                // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        _9 = discriminant(_5);           // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        switchInt(move _9) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n     }\n \n     bb6: {\n-        _7 = move ((_5 as Ok).0: i16);   // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _4 = Option::<i16>::Some(move _7); // scope 4 at $SRC_DIR/core/src/result.rs:LL:COL\n-        goto -> bb2;                     // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _4 = Option::<i16>::None;        // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+        goto -> bb1;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n     }\n \n     bb7: {\n-        _3 = move ((_4 as Some).0: i16); // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n-        StorageDead(_8);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        unreachable;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb8: {\n+        _10 = move ((_5 as Ok).0: i16);  // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _4 = Option::<i16>::Some(move _10); // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb9: {\n+        _3 = move ((_4 as Some).0: i16); // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_11);                // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n         StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-        _0 = unchecked_shr::<i16>(_1, move _3) -> [return: bb3, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        _0 = unchecked_shr::<i16>(_1, move _3) -> [return: bb2, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(i16, i16) -> i16 {unchecked_shr::<i16>}, val: Value(<ZST>) }"}]}