{"sha": "e465032daf0d2594c09ad693b2ae816b96e883b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NjUwMzJkYWYwZDI1OTRjMDlhZDY5M2IyYWU4MTZiOTZlODgzYjI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-14T10:34:48Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-14T10:34:48Z"}, "message": "Merge #534\n\n534: Add visibility to hover r=matklad a=kjeremy\n\n\n\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>", "tree": {"sha": "202df810d4688053e01771a76607ef8dd9611af3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/202df810d4688053e01771a76607ef8dd9611af3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e465032daf0d2594c09ad693b2ae816b96e883b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e465032daf0d2594c09ad693b2ae816b96e883b2", "html_url": "https://github.com/rust-lang/rust/commit/e465032daf0d2594c09ad693b2ae816b96e883b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e465032daf0d2594c09ad693b2ae816b96e883b2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "a901cb4f342b0a784e716e29934999cc036dc835", "url": "https://api.github.com/repos/rust-lang/rust/commits/a901cb4f342b0a784e716e29934999cc036dc835", "html_url": "https://github.com/rust-lang/rust/commit/a901cb4f342b0a784e716e29934999cc036dc835"}, {"sha": "da326dca6005fa23fa6f8524bde1abd3a156c0c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/da326dca6005fa23fa6f8524bde1abd3a156c0c7", "html_url": "https://github.com/rust-lang/rust/commit/da326dca6005fa23fa6f8524bde1abd3a156c0c7"}], "stats": {"total": 65, "additions": 23, "deletions": 42}, "files": [{"sha": "d73c5bc31412c9b3b0674d70fdd6271da21df74e", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 23, "deletions": 42, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/e465032daf0d2594c09ad693b2ae816b96e883b2/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e465032daf0d2594c09ad693b2ae816b96e883b2/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=e465032daf0d2594c09ad693b2ae816b96e883b2", "patch": "@@ -1,7 +1,7 @@\n use ra_db::{Cancelable, SyntaxDatabase};\n use ra_syntax::{\n     AstNode, SyntaxNode, TreeArc,\n-    ast::{self, NameOwner},\n+    ast::self,\n     algo::{find_covering_node, find_node_at_offset, find_leaf_at_offset, visit::{visitor, Visitor}},\n };\n \n@@ -137,48 +137,29 @@ impl NavigationTarget {\n     fn description(&self, db: &RootDatabase) -> Option<String> {\n         // TODO: After type inference is done, add type information to improve the output\n         let node = self.node(db)?;\n-        // TODO: Refactor to be have less repetition\n+\n+        fn visit_node<T>(node: &T, label: &str) -> Option<String>\n+        where\n+            T: ast::NameOwner + ast::VisibilityOwner,\n+        {\n+            let mut string = node\n+                .visibility()\n+                .map(|v| format!(\"{} \", v.syntax().text()))\n+                .unwrap_or_default();\n+            string.push_str(label);\n+            node.name()?.syntax().text().push_to(&mut string);\n+            Some(string)\n+        }\n+\n         visitor()\n-            .visit(|node: &ast::FnDef| {\n-                let mut string = \"fn \".to_string();\n-                node.name()?.syntax().text().push_to(&mut string);\n-                Some(string)\n-            })\n-            .visit(|node: &ast::StructDef| {\n-                let mut string = \"struct \".to_string();\n-                node.name()?.syntax().text().push_to(&mut string);\n-                Some(string)\n-            })\n-            .visit(|node: &ast::EnumDef| {\n-                let mut string = \"enum \".to_string();\n-                node.name()?.syntax().text().push_to(&mut string);\n-                Some(string)\n-            })\n-            .visit(|node: &ast::TraitDef| {\n-                let mut string = \"trait \".to_string();\n-                node.name()?.syntax().text().push_to(&mut string);\n-                Some(string)\n-            })\n-            .visit(|node: &ast::Module| {\n-                let mut string = \"mod \".to_string();\n-                node.name()?.syntax().text().push_to(&mut string);\n-                Some(string)\n-            })\n-            .visit(|node: &ast::TypeDef| {\n-                let mut string = \"type \".to_string();\n-                node.name()?.syntax().text().push_to(&mut string);\n-                Some(string)\n-            })\n-            .visit(|node: &ast::ConstDef| {\n-                let mut string = \"const \".to_string();\n-                node.name()?.syntax().text().push_to(&mut string);\n-                Some(string)\n-            })\n-            .visit(|node: &ast::StaticDef| {\n-                let mut string = \"static \".to_string();\n-                node.name()?.syntax().text().push_to(&mut string);\n-                Some(string)\n-            })\n+            .visit(|node: &ast::FnDef| visit_node(node, \"fn \"))\n+            .visit(|node: &ast::StructDef| visit_node(node, \"struct \"))\n+            .visit(|node: &ast::EnumDef| visit_node(node, \"enum \"))\n+            .visit(|node: &ast::TraitDef| visit_node(node, \"trait \"))\n+            .visit(|node: &ast::Module| visit_node(node, \"mod \"))\n+            .visit(|node: &ast::TypeDef| visit_node(node, \"type \"))\n+            .visit(|node: &ast::ConstDef| visit_node(node, \"const \"))\n+            .visit(|node: &ast::StaticDef| visit_node(node, \"static \"))\n             .accept(&node)?\n     }\n }"}]}