{"sha": "2ff7ea4de291b437912c5082b6c92fefe7d6457f", "node_id": "C_kwDOAAsO6NoAKDJmZjdlYTRkZTI5MWI0Mzc5MTJjNTA4MmI2YzkyZmVmZTdkNjQ1N2Y", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-16T22:11:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-16T22:11:22Z"}, "message": "Auto merge of #91182 - ChrisDenton:command-broken-symlink, r=m-ou-se\n\nMaintain broken symlink behaviour for the Windows exe resolver\n\nWhen the resolver was updated to remove the current directory from the search path (see #87704), care was take to avoid unintentional changes that hadn't been discussed. However, I missed the broken symlink behaviour. This PR fixes that.\n\n**Edit** This turned out to be more important than I first realised. There are some types of application stubs that will redirect to the actual process when run using `CreateProcessW`, but due to the way they're implemented they cannot be opened normally using a `File::open` that follows reparse points. So this doesn't work with our current `exists` and `try_exists` methods.\n\nFixes #91177", "tree": {"sha": "8164a5370c5a3e1a028c071f19b967d51183cd04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8164a5370c5a3e1a028c071f19b967d51183cd04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ff7ea4de291b437912c5082b6c92fefe7d6457f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ff7ea4de291b437912c5082b6c92fefe7d6457f", "html_url": "https://github.com/rust-lang/rust/commit/2ff7ea4de291b437912c5082b6c92fefe7d6457f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ff7ea4de291b437912c5082b6c92fefe7d6457f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75d9a0ae210dcd078b3985e3550b59064e6603bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/75d9a0ae210dcd078b3985e3550b59064e6603bc", "html_url": "https://github.com/rust-lang/rust/commit/75d9a0ae210dcd078b3985e3550b59064e6603bc"}, {"sha": "9a7a8b925530ed5e97981c52929f94a5f41fcdc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a7a8b925530ed5e97981c52929f94a5f41fcdc7", "html_url": "https://github.com/rust-lang/rust/commit/9a7a8b925530ed5e97981c52929f94a5f41fcdc7"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "c7b6290693ea0f4c0f56ccff542260cd25bd719e", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ff7ea4de291b437912c5082b6c92fefe7d6457f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ff7ea4de291b437912c5082b6c92fefe7d6457f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=2ff7ea4de291b437912c5082b6c92fefe7d6457f", "patch": "@@ -83,6 +83,7 @@ pub const CSTR_GREATER_THAN: c_int = 3;\n pub const FILE_ATTRIBUTE_READONLY: DWORD = 0x1;\n pub const FILE_ATTRIBUTE_DIRECTORY: DWORD = 0x10;\n pub const FILE_ATTRIBUTE_REPARSE_POINT: DWORD = 0x400;\n+pub const INVALID_FILE_ATTRIBUTES: DWORD = DWORD::MAX;\n \n pub const FILE_SHARE_DELETE: DWORD = 0x4;\n pub const FILE_SHARE_READ: DWORD = 0x1;\n@@ -1075,6 +1076,7 @@ extern \"system\" {\n         lpBuffer: LPWSTR,\n         lpFilePart: *mut LPWSTR,\n     ) -> DWORD;\n+    pub fn GetFileAttributesW(lpFileName: LPCWSTR) -> DWORD;\n }\n \n #[link(name = \"ws2_32\")]"}, {"sha": "fafd1412d4cb31a54c98b403b3822fade1363d2d", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2ff7ea4de291b437912c5082b6c92fefe7d6457f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ff7ea4de291b437912c5082b6c92fefe7d6457f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=2ff7ea4de291b437912c5082b6c92fefe7d6457f", "patch": "@@ -394,7 +394,7 @@ fn resolve_exe<'a>(\n \n         // Append `.exe` if not already there.\n         path = path::append_suffix(path, EXE_SUFFIX.as_ref());\n-        if path.try_exists().unwrap_or(false) {\n+        if program_exists(&path) {\n             return Ok(path);\n         } else {\n             // It's ok to use `set_extension` here because the intent is to\n@@ -415,7 +415,7 @@ fn resolve_exe<'a>(\n             if !has_extension {\n                 path.set_extension(EXE_EXTENSION);\n             }\n-            if let Ok(true) = path.try_exists() { Some(path) } else { None }\n+            if program_exists(&path) { Some(path) } else { None }\n         });\n         if let Some(path) = result {\n             return Ok(path);\n@@ -485,6 +485,21 @@ where\n     None\n }\n \n+/// Check if a file exists without following symlinks.\n+fn program_exists(path: &Path) -> bool {\n+    unsafe {\n+        to_u16s(path)\n+            .map(|path| {\n+                // Getting attributes using `GetFileAttributesW` does not follow symlinks\n+                // and it will almost always be successful if the link exists.\n+                // There are some exceptions for special system files (e.g. the pagefile)\n+                // but these are not executable.\n+                c::GetFileAttributesW(path.as_ptr()) != c::INVALID_FILE_ATTRIBUTES\n+            })\n+            .unwrap_or(false)\n+    }\n+}\n+\n impl Stdio {\n     fn to_handle(&self, stdio_id: c::DWORD, pipe: &mut Option<AnonPipe>) -> io::Result<Handle> {\n         match *self {"}, {"sha": "d18c3d855bcce0e5ae1ccec17380cbbd9bd3995e", "filename": "library/std/src/sys/windows/process/tests.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2ff7ea4de291b437912c5082b6c92fefe7d6457f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ff7ea4de291b437912c5082b6c92fefe7d6457f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs?ref=2ff7ea4de291b437912c5082b6c92fefe7d6457f", "patch": "@@ -135,6 +135,8 @@ fn windows_env_unicode_case() {\n fn windows_exe_resolver() {\n     use super::resolve_exe;\n     use crate::io;\n+    use crate::sys::fs::symlink;\n+    use crate::sys_common::io::test::tmpdir;\n \n     let env_paths = || env::var_os(\"PATH\");\n \n@@ -178,4 +180,13 @@ fn windows_exe_resolver() {\n     // The application's directory is also searched.\n     let current_exe = env::current_exe().unwrap();\n     assert!(resolve_exe(current_exe.file_name().unwrap().as_ref(), empty_paths, None).is_ok());\n+\n+    // Create a temporary path and add a broken symlink.\n+    let temp = tmpdir();\n+    let mut exe_path = temp.path().to_owned();\n+    exe_path.push(\"exists.exe\");\n+    symlink(\"<DOES NOT EXIST>\".as_ref(), &exe_path).unwrap();\n+\n+    // A broken symlink should still be resolved.\n+    assert!(resolve_exe(OsStr::new(\"exists.exe\"), empty_paths, Some(temp.path().as_ref())).is_ok());\n }"}]}