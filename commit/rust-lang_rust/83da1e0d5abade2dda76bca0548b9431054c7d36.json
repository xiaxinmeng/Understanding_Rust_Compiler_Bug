{"sha": "83da1e0d5abade2dda76bca0548b9431054c7d36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZGExZTBkNWFiYWRlMmRkYTc2YmNhMDU0OGI5NDMxMDU0YzdkMzY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-26T12:49:17Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-26T12:49:17Z"}, "message": "Simplify logic around first_arg", "tree": {"sha": "751f3560cc548de7b3b75f3effed7275f9c26125", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/751f3560cc548de7b3b75f3effed7275f9c26125"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83da1e0d5abade2dda76bca0548b9431054c7d36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83da1e0d5abade2dda76bca0548b9431054c7d36", "html_url": "https://github.com/rust-lang/rust/commit/83da1e0d5abade2dda76bca0548b9431054c7d36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83da1e0d5abade2dda76bca0548b9431054c7d36/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "050b417a74a5f55a91ae25f0b841a6d04219ce34", "url": "https://api.github.com/repos/rust-lang/rust/commits/050b417a74a5f55a91ae25f0b841a6d04219ce34", "html_url": "https://github.com/rust-lang/rust/commit/050b417a74a5f55a91ae25f0b841a6d04219ce34"}], "stats": {"total": 23, "additions": 6, "deletions": 17}, "files": [{"sha": "c5c3b7999257953280ec7b266c6412dc9f25947f", "filename": "src/abi/mod.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/83da1e0d5abade2dda76bca0548b9431054c7d36/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83da1e0d5abade2dda76bca0548b9431054c7d36/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=83da1e0d5abade2dda76bca0548b9431054c7d36", "patch": "@@ -10,7 +10,6 @@ use rustc_target::abi::call::{Conv, FnAbi};\n use rustc_target::spec::abi::Abi;\n \n use cranelift_codegen::ir::{AbiParam, SigRef};\n-use smallvec::smallvec;\n \n use self::pass_mode::*;\n use crate::prelude::*;\n@@ -385,7 +384,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n         Indirect(SigRef, Value),\n     }\n \n-    let (func_ref, first_arg) = match instance {\n+    let (func_ref, first_arg_override) = match instance {\n         // Trait object call\n         Some(Instance { def: InstanceDef::Virtual(_, idx), .. }) => {\n             if fx.clif_comments.enabled() {\n@@ -400,18 +399,13 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n             let sig = clif_sig_from_fn_abi(fx.tcx, fx.triple(), &fn_abi);\n             let sig = fx.bcx.import_signature(sig);\n \n-            (CallTarget::Indirect(sig, method), smallvec![ptr])\n+            (CallTarget::Indirect(sig, method), Some(ptr))\n         }\n \n         // Normal call\n         Some(instance) => {\n             let func_ref = fx.get_function_ref(instance);\n-            (\n-                CallTarget::Direct(func_ref),\n-                args.get(0)\n-                    .map(|arg| adjust_arg_for_abi(fx, *arg, &fn_abi.args[0]))\n-                    .unwrap_or(smallvec![]),\n-            )\n+            (CallTarget::Direct(func_ref), None)\n         }\n \n         // Indirect call\n@@ -425,12 +419,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n             let sig = clif_sig_from_fn_abi(fx.tcx, fx.triple(), &fn_abi);\n             let sig = fx.bcx.import_signature(sig);\n \n-            (\n-                CallTarget::Indirect(sig, func),\n-                args.get(0)\n-                    .map(|arg| adjust_arg_for_abi(fx, *arg, &fn_abi.args[0]))\n-                    .unwrap_or(smallvec![]),\n-            )\n+            (CallTarget::Indirect(sig, func), None)\n         }\n     };\n \n@@ -443,11 +432,11 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n             let regular_args_count = args.len();\n             let mut call_args: Vec<Value> = return_ptr\n                 .into_iter()\n-                .chain(first_arg.into_iter())\n+                .chain(first_arg_override.into_iter())\n                 .chain(\n                     args.into_iter()\n                         .enumerate()\n-                        .skip(1)\n+                        .skip(if first_arg_override.is_some() { 1 } else { 0 })\n                         .map(|(i, arg)| adjust_arg_for_abi(fx, arg, &fn_abi.args[i]).into_iter())\n                         .flatten(),\n                 )"}]}