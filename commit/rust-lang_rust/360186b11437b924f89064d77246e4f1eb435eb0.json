{"sha": "360186b11437b924f89064d77246e4f1eb435eb0", "node_id": "C_kwDOAAsO6NoAKDM2MDE4NmIxMTQzN2I5MjRmODkwNjRkNzcyNDZlNGYxZWI0MzVlYjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-31T05:11:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-31T05:11:43Z"}, "message": "Auto merge of #2166 - RalfJung:tests, r=oli-obk\n\nui_test tweaks\n\n- support multiple filters\n- make `./miri check` also cover ui_test\n- Run opt-level=4 tests again, but only the \"run\" tests\n\nr? `@oli-obk`", "tree": {"sha": "fc2d06d0d08578aa0a00c9f2ca3eb13ad6122de7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc2d06d0d08578aa0a00c9f2ca3eb13ad6122de7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/360186b11437b924f89064d77246e4f1eb435eb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/360186b11437b924f89064d77246e4f1eb435eb0", "html_url": "https://github.com/rust-lang/rust/commit/360186b11437b924f89064d77246e4f1eb435eb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/360186b11437b924f89064d77246e4f1eb435eb0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa589d3dc77802a42cc931244325e936b65f4dd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa589d3dc77802a42cc931244325e936b65f4dd7", "html_url": "https://github.com/rust-lang/rust/commit/aa589d3dc77802a42cc931244325e936b65f4dd7"}, {"sha": "962957f11f456949395535037b45b98d18bbcf19", "url": "https://api.github.com/repos/rust-lang/rust/commits/962957f11f456949395535037b45b98d18bbcf19", "html_url": "https://github.com/rust-lang/rust/commit/962957f11f456949395535037b45b98d18bbcf19"}], "stats": {"total": 116, "additions": 72, "deletions": 44}, "files": [{"sha": "080bd9204db547051088d3f3d26b634b7809c79c", "filename": "ci.sh", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/360186b11437b924f89064d77246e4f1eb435eb0/ci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/360186b11437b924f89064d77246e4f1eb435eb0/ci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci.sh?ref=360186b11437b924f89064d77246e4f1eb435eb0", "patch": "@@ -26,8 +26,7 @@ function run_tests {\n     # optimizations up all the way).\n     # Optimizations change diagnostics (mostly backtraces), so we don't check them\n     #FIXME(#2155): we want to only run the pass and panic tests here, not the fail tests.\n-    #MIRIFLAGS=\"-O -Zmir-opt-level=4\" MIRI_SKIP_UI_CHECKS=1 ./miri test --locked\n-    true\n+    MIRIFLAGS=\"-O -Zmir-opt-level=4\" MIRI_SKIP_UI_CHECKS=1 ./miri test --locked -- tests/{run-pass,run-fail}\n   fi\n \n   # On Windows, there is always \"python\", not \"python3\" or \"python2\"."}, {"sha": "5c9cb81885c924b3e6f8d76317748c1f41a34e2f", "filename": "miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/360186b11437b924f89064d77246e4f1eb435eb0/miri", "raw_url": "https://github.com/rust-lang/rust/raw/360186b11437b924f89064d77246e4f1eb435eb0/miri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri?ref=360186b11437b924f89064d77246e4f1eb435eb0", "patch": "@@ -115,7 +115,7 @@ install|install-debug)\n     ;;\n check|check-debug)\n     # Check, and let caller control flags.\n-    cargo check $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml \"$@\"\n+    cargo check $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml --all-targets \"$@\"\n     cargo check $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml \"$@\"\n     ;;\n build|build-debug)"}, {"sha": "3830b1c1bd548109ca7a95b3507fa20107919563", "filename": "tests/compiletest.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/360186b11437b924f89064d77246e4f1eb435eb0/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360186b11437b924f89064d77246e4f1eb435eb0/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=360186b11437b924f89064d77246e4f1eb435eb0", "patch": "@@ -47,7 +47,8 @@ fn run_tests(mode: Mode, path: &str, target: Option<String>) {\n         (true, true) => panic!(\"cannot use MIRI_BLESS and MIRI_SKIP_UI_CHECKS at the same time\"),\n     };\n \n-    let path_filter = std::env::args().skip(1).next();\n+    // Pass on all arguments as filters.\n+    let path_filter = std::env::args().skip(1);\n \n     let config = Config {\n         args: flags,\n@@ -56,7 +57,7 @@ fn run_tests(mode: Mode, path: &str, target: Option<String>) {\n         stdout_filters: STDOUT.clone(),\n         root_dir: PathBuf::from(path),\n         mode,\n-        path_filter,\n+        path_filter: path_filter.collect(),\n         program: miri_path(),\n         output_conflict_handling,\n     };\n@@ -105,8 +106,6 @@ regexes! {\n     r\"\\\\\"                           => \"/\",\n     // erase platform file paths\n     \"sys/[a-z]+/\"                    => \"sys/PLATFORM/\",\n-    // erase error annotations in tests\n-    r\"\\s*//~.*\"                      => \"\",\n }\n \n fn ui(mode: Mode, path: &str) {"}, {"sha": "6052efe02e06af3929a6fda2e116fe55574dc402", "filename": "ui_test/src/lib.rs", "status": "modified", "additions": 56, "deletions": 29, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/360186b11437b924f89064d77246e4f1eb435eb0/ui_test%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360186b11437b924f89064d77246e4f1eb435eb0/ui_test%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Flib.rs?ref=360186b11437b924f89064d77246e4f1eb435eb0", "patch": "@@ -30,8 +30,8 @@ pub struct Config {\n     pub mode: Mode,\n     pub program: PathBuf,\n     pub output_conflict_handling: OutputConflictHandling,\n-    /// Only run tests with this string in their path/name\n-    pub path_filter: Option<String>,\n+    /// Only run tests with one of these strings in their path/name\n+    pub path_filter: Vec<String>,\n }\n \n #[derive(Debug)]\n@@ -61,6 +61,7 @@ pub fn run_tests(config: Config) {\n     let failures = Mutex::new(vec![]);\n     let succeeded = AtomicUsize::default();\n     let ignored = AtomicUsize::default();\n+    let filtered = AtomicUsize::default();\n \n     crossbeam::scope(|s| {\n         for _ in 0..std::thread::available_parallelism().unwrap().get() {\n@@ -77,22 +78,22 @@ pub fn run_tests(config: Config) {\n                     if !path.extension().map(|ext| ext == \"rs\").unwrap_or(false) {\n                         continue;\n                     }\n-                    if let Some(path_filter) = &config.path_filter {\n-                        if !path.display().to_string().contains(path_filter) {\n-                            ignored.fetch_add(1, Ordering::Relaxed);\n-                            eprintln!(\n-                                \"{} .. {}\",\n-                                path.display(),\n-                                \"ignored (command line filter)\".yellow()\n-                            );\n+                    if !config.path_filter.is_empty() {\n+                        let path_display = path.display().to_string();\n+                        if !config.path_filter.iter().any(|filter| path_display.contains(filter)) {\n+                            filtered.fetch_add(1, Ordering::Relaxed);\n                             continue;\n                         }\n                     }\n                     let comments = Comments::parse_file(&path);\n                     // Ignore file if only/ignore rules do (not) apply\n                     if ignore_file(&comments, &target) {\n                         ignored.fetch_add(1, Ordering::Relaxed);\n-                        eprintln!(\"{} .. {}\", path.display(), \"ignored\".yellow());\n+                        eprintln!(\n+                            \"{} ... {}\",\n+                            path.display(),\n+                            \"ignored (in-test comment)\".yellow()\n+                        );\n                         continue;\n                     }\n                     // Run the test for all revisions\n@@ -101,7 +102,7 @@ pub fn run_tests(config: Config) {\n                     {\n                         let (m, errors) = run_test(&path, &config, &target, &revision, &comments);\n \n-                        // Using `format` to prevent messages from threads from getting intermingled.\n+                        // Using a single `eprintln!` to prevent messages from threads from getting intermingled.\n                         let mut msg = format!(\"{} \", path.display());\n                         if !revision.is_empty() {\n                             write!(msg, \"(revision `{revision}`) \").unwrap();\n@@ -125,6 +126,7 @@ pub fn run_tests(config: Config) {\n     let failures = failures.into_inner().unwrap();\n     let succeeded = succeeded.load(Ordering::Relaxed);\n     let ignored = ignored.load(Ordering::Relaxed);\n+    let filtered = filtered.load(Ordering::Relaxed);\n     if !failures.is_empty() {\n         for (path, miri, revision, errors) in &failures {\n             eprintln!();\n@@ -168,19 +170,22 @@ pub fn run_tests(config: Config) {\n             }\n         }\n         eprintln!(\n-            \"{} tests failed, {} tests passed, {} ignored\",\n+            \"test result: {}. {} tests failed, {} tests passed, {} ignored, {} filtered out\",\n+            \"FAIL\".red(),\n             failures.len().to_string().red().bold(),\n             succeeded.to_string().green(),\n-            ignored.to_string().yellow()\n+            ignored.to_string().yellow(),\n+            filtered.to_string().yellow(),\n         );\n         std::process::exit(1);\n     }\n     eprintln!();\n     eprintln!(\n-        \"test result: {}. {} tests passed, {} ignored\",\n+        \"test result: {}. {} tests passed, {} ignored, {} filtered out\",\n         \"ok\".green(),\n         succeeded.to_string().green(),\n-        ignored.to_string().yellow()\n+        ignored.to_string().yellow(),\n+        filtered.to_string().yellow(),\n     );\n     eprintln!();\n }\n@@ -230,6 +235,34 @@ fn run_test(\n     }\n     let output = miri.output().expect(\"could not execute miri\");\n     let mut errors = config.mode.ok(output.status);\n+    check_test_result(\n+        path,\n+        config,\n+        target,\n+        revision,\n+        comments,\n+        &mut errors,\n+        &output.stdout,\n+        &output.stderr,\n+    );\n+    (miri, errors)\n+}\n+\n+fn check_test_result(\n+    path: &Path,\n+    config: &Config,\n+    target: &str,\n+    revision: &str,\n+    comments: &Comments,\n+    errors: &mut Errors,\n+    stdout: &[u8],\n+    stderr: &[u8],\n+) {\n+    // Always remove annotation comments from stderr.\n+    let annotations = Regex::new(r\"\\s*//~.*\").unwrap();\n+    let stderr = std::str::from_utf8(stderr).unwrap();\n+    let stderr = annotations.replace_all(stderr, \"\");\n+    let stdout = std::str::from_utf8(stdout).unwrap();\n     // Check output files (if any)\n     let revised = |extension: &str| {\n         if revision.is_empty() {\n@@ -240,41 +273,36 @@ fn run_test(\n     };\n     // Check output files against actual output\n     check_output(\n-        &output.stderr,\n+        &stderr,\n         path,\n-        &mut errors,\n+        errors,\n         revised(\"stderr\"),\n         target,\n         &config.stderr_filters,\n         &config,\n         comments,\n     );\n     check_output(\n-        &output.stdout,\n+        &stdout,\n         path,\n-        &mut errors,\n+        errors,\n         revised(\"stdout\"),\n         target,\n         &config.stdout_filters,\n         &config,\n         comments,\n     );\n     // Check error annotations in the source against output\n-    check_annotations(&output.stderr, &mut errors, config, revision, comments);\n-    (miri, errors)\n+    check_annotations(&stderr, errors, config, revision, comments);\n }\n \n fn check_annotations(\n-    unnormalized_stderr: &[u8],\n+    unnormalized_stderr: &str,\n     errors: &mut Errors,\n     config: &Config,\n     revision: &str,\n     comments: &Comments,\n ) {\n-    let unnormalized_stderr = std::str::from_utf8(unnormalized_stderr).unwrap();\n-    // erase annotations from the stderr so they don't match themselves\n-    let annotations = Regex::new(r\"\\s*//~.*\").unwrap();\n-    let unnormalized_stderr = annotations.replace(unnormalized_stderr, \"\");\n     let mut found_annotation = false;\n     if let Some((ref error_pattern, definition_line)) = comments.error_pattern {\n         if !unnormalized_stderr.contains(error_pattern) {\n@@ -312,7 +340,7 @@ fn check_annotations(\n }\n \n fn check_output(\n-    output: &[u8],\n+    output: &str,\n     path: &Path,\n     errors: &mut Errors,\n     kind: String,\n@@ -321,7 +349,6 @@ fn check_output(\n     config: &Config,\n     comments: &Comments,\n ) {\n-    let output = std::str::from_utf8(&output).unwrap();\n     let output = normalize(path, output, filters, comments);\n     let path = output_path(path, comments, kind, target);\n     match config.output_conflict_handling {"}, {"sha": "d0ef1195d888aec8f7dc33f668b0e937ad9fd85c", "filename": "ui_test/src/tests.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/360186b11437b924f89064d77246e4f1eb435eb0/ui_test%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360186b11437b924f89064d77246e4f1eb435eb0/ui_test%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Ftests.rs?ref=360186b11437b924f89064d77246e4f1eb435eb0", "patch": "@@ -1,16 +1,16 @@\n use std::path::{Path, PathBuf};\n \n-use super::{check_annotations, Comments, Config, Error, Mode, OutputConflictHandling};\n+use super::*;\n \n fn config() -> Config {\n     Config {\n         args: vec![],\n         target: None,\n         stderr_filters: vec![],\n         stdout_filters: vec![],\n-        root_dir: PathBuf::from(\".\"),\n+        root_dir: PathBuf::from(\"$RUSTROOT\"),\n         mode: Mode::Fail,\n-        path_filter: None,\n+        path_filter: vec![],\n         program: PathBuf::from(\"cake\"),\n         output_conflict_handling: OutputConflictHandling::Error,\n     }\n@@ -25,10 +25,12 @@ fn main() {\n     let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address $HEX is unallocated)\n }\n     \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s);\n+    let path = Path::new(\"$DIR/<dummy>\");\n+    let comments = Comments::parse(&path, s);\n     let mut errors = vec![];\n     let config = config();\n-    let unnormalized_stderr = r\"\n+    // Crucially, the intended error string *does* appear in this output, as a quote of the comment itself.\n+    let stderr = br\"\n error: Undefined Behavior: type validation failed: encountered a dangling reference (address 0x10 is unallocated)\n   --> tests/compile-fail/validity/dangling_ref1.rs:6:29\n    |\n@@ -42,9 +44,10 @@ LL |     let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountere\n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n error: aborting due to previous error\n     \";\n-    check_annotations(unnormalized_stderr.as_bytes(), &mut errors, &config, \"\", &comments);\n+    check_test_result(&path, &config, \"\", \"\", &comments, &mut errors, /*stdout*/ br\"\", stderr);\n+    // The \"OutputDiffers\" is because we cannot open the .rs file\n     match &errors[..] {\n-        [Error::PatternNotFound { .. }] => {}\n-        _ => panic!(\"{:#?}\", errors),\n+        [Error::OutputDiffers { .. }, Error::PatternNotFound { .. }] => {}\n+        _ => panic!(\"not the expected error: {:#?}\", errors),\n     }\n }"}]}