{"sha": "d1dde99e4b3d43d044cdead7240bbd5f0d7a0ce5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZGRlOTllNGIzZDQzZDA0NGNkZWFkNzI0MGJiZDVmMGQ3YTBjZTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-05T20:50:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-05T20:50:46Z"}, "message": "auto merge of #8992 : chris-morgan/rust/unreachable-macro, r=brson\n\nRationale: having a function which fails means that the location of\r\nfailure which is output is that of the unreachable() function, rather\r\nthan the caller.\r\n\r\nThis is part of #8991 but is not all of it; current usage of\r\n``std::util::unreachable()`` must remain so for the moment, until a new\r\nsnapshot is made; then I will remove that function entirely in favour of\r\nusing this macro.", "tree": {"sha": "d9d1e76108ade6e6ea323f3bd54dbaff36e1c833", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9d1e76108ade6e6ea323f3bd54dbaff36e1c833"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1dde99e4b3d43d044cdead7240bbd5f0d7a0ce5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1dde99e4b3d43d044cdead7240bbd5f0d7a0ce5", "html_url": "https://github.com/rust-lang/rust/commit/d1dde99e4b3d43d044cdead7240bbd5f0d7a0ce5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1dde99e4b3d43d044cdead7240bbd5f0d7a0ce5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d84a7b5ae3b3a820fb0a26292632856ceb959b3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d84a7b5ae3b3a820fb0a26292632856ceb959b3e", "html_url": "https://github.com/rust-lang/rust/commit/d84a7b5ae3b3a820fb0a26292632856ceb959b3e"}, {"sha": "6b7b8f2682780306860a38cdc7138f603e859fde", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b7b8f2682780306860a38cdc7138f603e859fde", "html_url": "https://github.com/rust-lang/rust/commit/6b7b8f2682780306860a38cdc7138f603e859fde"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "ea277a8a625e728115738f892648c8f522d2762e", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d1dde99e4b3d43d044cdead7240bbd5f0d7a0ce5/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1dde99e4b3d43d044cdead7240bbd5f0d7a0ce5/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=d1dde99e4b3d43d044cdead7240bbd5f0d7a0ce5", "patch": "@@ -884,6 +884,36 @@ pub fn std_macros() -> @str {\n         )\n     )\n \n+    // FIXME(#6266): change the /* to /** when attributes are supported on macros\n+    // (Though even then\u2014is it going to work according to the clear intent here?)\n+    /*\n+    A utility macro for indicating unreachable code. It will fail if\n+    executed. This is occasionally useful to put after loops that never\n+    terminate normally, but instead directly return from a function.\n+\n+    # Example\n+\n+    ~~~ {.rust}\n+    fn choose_weighted_item(v: &[Item]) -> Item {\n+        assert!(!v.is_empty());\n+        let mut so_far = 0u;\n+        for v.each |item| {\n+            so_far += item.weight;\n+            if so_far > 100 {\n+                return item;\n+            }\n+        }\n+        // The above loop always returns, so we must hint to the\n+        // type checker that it isn't possible to get down here\n+        unreachable!();\n+    }\n+    ~~~\n+\n+    */\n+    macro_rules! unreachable (() => (\n+        fail!(\\\"internal error: entered unreachable code\\\");\n+    ))\n+\n     macro_rules! condition (\n \n         { pub $c:ident: $input:ty -> $out:ty; } => {"}]}