{"sha": "d453281bb2b5608c5655f116b7722a2514063555", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NTMyODFiYjJiNTYwOGM1NjU1ZjExNmI3NzIyYTI1MTQwNjM1NTU=", "commit": {"author": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-04-02T00:24:30Z"}, "committer": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-04-02T08:13:16Z"}, "message": "vscode: add goto definition from rust file to syntax tree editor", "tree": {"sha": "ab05167036b984972475265983e73f042eb55fa8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab05167036b984972475265983e73f042eb55fa8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d453281bb2b5608c5655f116b7722a2514063555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d453281bb2b5608c5655f116b7722a2514063555", "html_url": "https://github.com/rust-lang/rust/commit/d453281bb2b5608c5655f116b7722a2514063555", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d453281bb2b5608c5655f116b7722a2514063555/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98f7842e408587fdaca3d15d8eda677b689a035a", "url": "https://api.github.com/repos/rust-lang/rust/commits/98f7842e408587fdaca3d15d8eda677b689a035a", "html_url": "https://github.com/rust-lang/rust/commit/98f7842e408587fdaca3d15d8eda677b689a035a"}], "stats": {"total": 88, "additions": 83, "deletions": 5}, "files": [{"sha": "c1af7122fb2dfaf30b5e8f062a64a6733795d2de", "filename": "editors/code/src/commands/syntax_tree.ts", "status": "modified", "additions": 83, "deletions": 5, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/d453281bb2b5608c5655f116b7722a2514063555/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d453281bb2b5608c5655f116b7722a2514063555/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts?ref=d453281bb2b5608c5655f116b7722a2514063555", "patch": "@@ -83,17 +83,43 @@ class TextDocumentContentProvider implements vscode.TextDocumentContentProvider\n // FIXME: consider implementing this via the Tree View API?\n // https://code.visualstudio.com/api/extension-guides/tree-view\n class AstInspector implements vscode.HoverProvider, Disposable {\n-    private static readonly astDecorationType = vscode.window.createTextEditorDecorationType({\n+    private readonly astDecorationType = vscode.window.createTextEditorDecorationType({\n         borderColor: new vscode.ThemeColor('rust_analyzer.syntaxTreeBorder'),\n         borderStyle: \"solid\",\n         borderWidth: \"2px\",\n \n     });\n     private rustEditor: undefined | RustEditor;\n \n+    // Lazy rust token range -> syntax tree file range.\n+    private readonly rust2Ast = new Lazy(() => {\n+        const astEditor = this.findAstTextEditor();\n+        if (!this.rustEditor || !astEditor) return undefined;\n+\n+        console.time(\"Build goto def index\");\n+        let buf: [vscode.Range, vscode.Range][] = [];\n+        for (let i = 0; i < astEditor.document.lineCount; ++i) {\n+            const astLine = astEditor.document.lineAt(i);\n+\n+            // Heuristically look for nodes with quoted text (which are token nodes)\n+            const isTokenNode = astLine.text.lastIndexOf('\"') >= 0;\n+            if (!isTokenNode) continue;\n+\n+            const rustRange = this.parseRustTextRange(this.rustEditor.document, astLine.text);\n+            if (!rustRange) continue;\n+\n+            buf.push([rustRange, this.findAstRange(astLine)]);\n+        }\n+\n+        console.timeEnd(\"Build goto def index\");\n+        return buf;\n+    });\n+\n     constructor(ctx: Ctx) {\n         ctx.pushCleanup(vscode.languages.registerHoverProvider({ scheme: AST_FILE_SCHEME }, this));\n+        ctx.pushCleanup(vscode.languages.registerDefinitionProvider({ language: \"rust\" }, this));\n         vscode.workspace.onDidCloseTextDocument(this.onDidCloseTextDocument, this, ctx.subscriptions);\n+        vscode.workspace.onDidChangeTextDocument(this.onDidChangeTextDocument, this, ctx.subscriptions);\n         vscode.window.onDidChangeVisibleTextEditors(this.onDidChangeVisibleTextEditors, this, ctx.subscriptions);\n \n         ctx.pushCleanup(this);\n@@ -102,27 +128,64 @@ class AstInspector implements vscode.HoverProvider, Disposable {\n         this.setRustEditor(undefined);\n     }\n \n+    private onDidChangeTextDocument(event: vscode.TextDocumentChangeEvent) {\n+        if (this.rustEditor && event.document.uri.toString() === this.rustEditor.document.uri.toString()) {\n+            this.rust2Ast.reset();\n+        }\n+    }\n+\n     private onDidCloseTextDocument(doc: vscode.TextDocument) {\n         if (this.rustEditor && doc.uri.toString() === this.rustEditor.document.uri.toString()) {\n             this.setRustEditor(undefined);\n         }\n     }\n \n     private onDidChangeVisibleTextEditors(editors: vscode.TextEditor[]) {\n-        if (editors.every(suspect => suspect.document.uri.scheme !== AST_FILE_SCHEME)) {\n+        if (!this.findAstTextEditor()) {\n             this.setRustEditor(undefined);\n             return;\n         }\n         this.setRustEditor(editors.find(isRustEditor));\n     }\n \n+    private findAstTextEditor(): undefined | vscode.TextEditor {\n+        return vscode.window.visibleTextEditors.find(it => it.document.uri.scheme === AST_FILE_SCHEME);\n+    }\n+\n     private setRustEditor(newRustEditor: undefined | RustEditor) {\n-        if (newRustEditor !== this.rustEditor) {\n-            this.rustEditor?.setDecorations(AstInspector.astDecorationType, []);\n+        if (this.rustEditor && this.rustEditor !== newRustEditor) {\n+            this.rustEditor.setDecorations(this.astDecorationType, []);\n+            this.rust2Ast.reset();\n         }\n         this.rustEditor = newRustEditor;\n     }\n \n+    // additional positional params are omitted\n+    provideDefinition(doc: vscode.TextDocument, pos: vscode.Position): vscode.ProviderResult<vscode.DefinitionLink[]> {\n+        if (!this.rustEditor || doc.uri.toString() !== this.rustEditor.document.uri.toString()) return;\n+\n+        const astEditor = this.findAstTextEditor();\n+        if (!astEditor) return;\n+\n+        console.time(\"Goto def\");\n+        const rust2AstRanges = this.rust2Ast.get()?.find(([rustRange, _]) => rustRange.contains(pos));\n+        console.timeEnd(\"Goto def\");\n+        if (!rust2AstRanges) return;\n+\n+        const [rustFileRange, astFileRange] = rust2AstRanges;\n+\n+        astEditor.revealRange(astFileRange);\n+        astEditor.selection = new vscode.Selection(astFileRange.start, astFileRange.end);\n+\n+        return [{\n+            targetRange: astFileRange,\n+            targetUri: astEditor.document.uri,\n+            originSelectionRange: rustFileRange,\n+            targetSelectionRange: astFileRange,\n+        }];\n+    }\n+\n+    // additional positional params are omitted\n     provideHover(doc: vscode.TextDocument, hoverPosition: vscode.Position): vscode.ProviderResult<vscode.Hover> {\n         if (!this.rustEditor) return;\n \n@@ -131,7 +194,7 @@ class AstInspector implements vscode.HoverProvider, Disposable {\n         const rustTextRange = this.parseRustTextRange(this.rustEditor.document, astTextLine.text);\n         if (!rustTextRange) return;\n \n-        this.rustEditor.setDecorations(AstInspector.astDecorationType, [rustTextRange]);\n+        this.rustEditor.setDecorations(this.astDecorationType, [rustTextRange]);\n         this.rustEditor.revealRange(rustTextRange);\n \n         const rustSourceCode = this.rustEditor.document.getText(rustTextRange);\n@@ -156,3 +219,18 @@ class AstInspector implements vscode.HoverProvider, Disposable {\n         return new vscode.Range(begin, end);\n     }\n }\n+\n+class Lazy<T> {\n+    val: undefined | T;\n+\n+    constructor(private readonly compute: () => undefined | T) {}\n+\n+    get() {\n+        return this.val ?? (this.val = this.compute());\n+    }\n+\n+    reset() {\n+        this.val = undefined;\n+    }\n+\n+}"}]}