{"sha": "dce14cfacc232e80dbed68430183085fd39dea02", "node_id": "C_kwDOAAsO6NoAKGRjZTE0Y2ZhY2MyMzJlODBkYmVkNjg0MzAxODMwODVmZDM5ZGVhMDI", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2022-02-21T19:47:56Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2022-02-28T05:02:11Z"}, "message": "Remove LLVM attribute removal\n\nThis was necessary before, because `declare_raw_fn` would always apply\nthe default optimization attributes to every declared function,\nand then `attributes::from_fn_attrs` would have to remove the default\nattributes in the case of, e.g. `#[optimize(speed)]` in a `-Os` build.\n\nHowever, every relevant callsite of `declare_raw_fn` (i.e. where we\nactually generate code for the function, and not e.g. a call to an\nintrinsic, where optimization attributes don't [?] matter)\ncalls `from_fn_attrs`, so we can simply remove the attribute setting\nfrom `declare_raw_fn`, and rely on `from_fn_attrs` to apply the correct\nattributes all at once.", "tree": {"sha": "483be9d1d51cf400032527314b0c6bea8d2b06b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/483be9d1d51cf400032527314b0c6bea8d2b06b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dce14cfacc232e80dbed68430183085fd39dea02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dce14cfacc232e80dbed68430183085fd39dea02", "html_url": "https://github.com/rust-lang/rust/commit/dce14cfacc232e80dbed68430183085fd39dea02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dce14cfacc232e80dbed68430183085fd39dea02/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b07d59f794d8fffb628f82c9c8156f5457de5e49", "url": "https://api.github.com/repos/rust-lang/rust/commits/b07d59f794d8fffb628f82c9c8156f5457de5e49", "html_url": "https://github.com/rust-lang/rust/commit/b07d59f794d8fffb628f82c9c8156f5457de5e49"}], "stats": {"total": 100, "additions": 13, "deletions": 87}, "files": [{"sha": "39e7060e291af5c422aa318d4b2af1d52c0aae9a", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 9, "deletions": 39, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/dce14cfacc232e80dbed68430183085fd39dea02/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce14cfacc232e80dbed68430183085fd39dea02/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=dce14cfacc232e80dbed68430183085fd39dea02", "patch": "@@ -28,12 +28,6 @@ pub fn apply_to_llfn(llfn: &Value, idx: AttributePlace, attrs: &[&Attribute]) {\n     }\n }\n \n-pub fn remove_from_llfn(llfn: &Value, idx: AttributePlace, attrs: &[AttributeKind]) {\n-    if !attrs.is_empty() {\n-        llvm::RemoveFunctionAttributes(llfn, idx, attrs);\n-    }\n-}\n-\n pub fn apply_to_callsite(callsite: &Value, idx: AttributePlace, attrs: &[&Attribute]) {\n     if !attrs.is_empty() {\n         llvm::AddCallSiteAttributes(callsite, idx, attrs);\n@@ -217,38 +211,23 @@ pub fn non_lazy_bind_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attribute\n     }\n }\n \n-/// Returns attributes to remove and to add, respectively,\n-/// to set the default optimizations attrs on a function.\n+/// Get the default optimizations attrs for a function.\n #[inline]\n pub(crate) fn default_optimisation_attrs<'ll>(\n     cx: &CodegenCx<'ll, '_>,\n-) -> (\n-    // Attributes to remove\n-    SmallVec<[AttributeKind; 3]>,\n-    // Attributes to add\n-    SmallVec<[&'ll Attribute; 2]>,\n-) {\n-    let mut to_remove = SmallVec::new();\n-    let mut to_add = SmallVec::new();\n+) -> SmallVec<[&'ll Attribute; 2]> {\n+    let mut attrs = SmallVec::new();\n     match cx.sess().opts.optimize {\n         OptLevel::Size => {\n-            to_remove.push(llvm::AttributeKind::MinSize);\n-            to_add.push(llvm::AttributeKind::OptimizeForSize.create_attr(cx.llcx));\n-            to_remove.push(llvm::AttributeKind::OptimizeNone);\n+            attrs.push(llvm::AttributeKind::OptimizeForSize.create_attr(cx.llcx));\n         }\n         OptLevel::SizeMin => {\n-            to_add.push(llvm::AttributeKind::MinSize.create_attr(cx.llcx));\n-            to_add.push(llvm::AttributeKind::OptimizeForSize.create_attr(cx.llcx));\n-            to_remove.push(llvm::AttributeKind::OptimizeNone);\n-        }\n-        OptLevel::No => {\n-            to_remove.push(llvm::AttributeKind::MinSize);\n-            to_remove.push(llvm::AttributeKind::OptimizeForSize);\n-            to_remove.push(llvm::AttributeKind::OptimizeNone);\n+            attrs.push(llvm::AttributeKind::MinSize.create_attr(cx.llcx));\n+            attrs.push(llvm::AttributeKind::OptimizeForSize.create_attr(cx.llcx));\n         }\n         _ => {}\n     }\n-    (to_remove, to_add)\n+    attrs\n }\n \n /// Composite function which sets LLVM attributes for function depending on its AST (`#[attribute]`)\n@@ -260,25 +239,17 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n ) {\n     let codegen_fn_attrs = cx.tcx.codegen_fn_attrs(instance.def_id());\n \n-    let mut to_remove = SmallVec::<[_; 4]>::new();\n     let mut to_add = SmallVec::<[_; 16]>::new();\n \n     match codegen_fn_attrs.optimize {\n         OptimizeAttr::None => {\n-            let (to_remove_opt, to_add_opt) = default_optimisation_attrs(cx);\n-            to_remove.extend(to_remove_opt);\n-            to_add.extend(to_add_opt);\n-        }\n-        OptimizeAttr::Speed => {\n-            to_remove.push(llvm::AttributeKind::MinSize);\n-            to_remove.push(llvm::AttributeKind::OptimizeForSize);\n-            to_remove.push(llvm::AttributeKind::OptimizeNone);\n+            to_add.extend(default_optimisation_attrs(cx));\n         }\n         OptimizeAttr::Size => {\n             to_add.push(llvm::AttributeKind::MinSize.create_attr(cx.llcx));\n             to_add.push(llvm::AttributeKind::OptimizeForSize.create_attr(cx.llcx));\n-            to_remove.push(llvm::AttributeKind::OptimizeNone);\n         }\n+        OptimizeAttr::Speed => {}\n     }\n \n     let inline = if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NAKED) {\n@@ -425,7 +396,6 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n         to_add.push(llvm::CreateAttrStringValue(cx.llcx, cstr!(\"target-features\"), &val));\n     }\n \n-    attributes::remove_from_llfn(llfn, Function, &to_remove);\n     attributes::apply_to_llfn(llfn, Function, &to_add);\n }\n "}, {"sha": "5a5c4f7f8603de4342f6265a60d1ae3e778e8f3b", "filename": "compiler/rustc_codegen_llvm/src/declare.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dce14cfacc232e80dbed68430183085fd39dea02/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce14cfacc232e80dbed68430183085fd39dea02/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs?ref=dce14cfacc232e80dbed68430183085fd39dea02", "patch": "@@ -41,21 +41,15 @@ fn declare_raw_fn<'ll>(\n     llvm::SetFunctionCallConv(llfn, callconv);\n     llvm::SetUnnamedAddress(llfn, unnamed);\n \n-    let mut attrs_to_remove = SmallVec::<[_; 4]>::new();\n-    let mut attrs_to_add = SmallVec::<[_; 4]>::new();\n+    let mut attrs = SmallVec::<[_; 4]>::new();\n \n     if cx.tcx.sess.opts.cg.no_redzone.unwrap_or(cx.tcx.sess.target.disable_redzone) {\n-        attrs_to_add.push(llvm::AttributeKind::NoRedZone.create_attr(cx.llcx));\n+        attrs.push(llvm::AttributeKind::NoRedZone.create_attr(cx.llcx));\n     }\n \n-    let (to_remove, to_add) = attributes::default_optimisation_attrs(cx);\n-    attrs_to_remove.extend(to_remove);\n-    attrs_to_add.extend(to_add);\n+    attrs.extend(attributes::non_lazy_bind_attr(cx));\n \n-    attrs_to_add.extend(attributes::non_lazy_bind_attr(cx));\n-\n-    attributes::remove_from_llfn(llfn, Function, &attrs_to_remove);\n-    attributes::apply_to_llfn(llfn, Function, &attrs_to_add);\n+    attributes::apply_to_llfn(llfn, Function, &attrs);\n \n     llfn\n }"}, {"sha": "b72c06158c76cd34e465339861d9e4879d4cabcf", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dce14cfacc232e80dbed68430183085fd39dea02/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce14cfacc232e80dbed68430183085fd39dea02/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=dce14cfacc232e80dbed68430183085fd39dea02", "patch": "@@ -1201,12 +1201,6 @@ extern \"C\" {\n         Attrs: *const &'a Attribute,\n         AttrsLen: size_t,\n     );\n-    pub fn LLVMRustRemoveFunctionAttributes(\n-        Fn: &Value,\n-        index: c_uint,\n-        Attrs: *const AttributeKind,\n-        AttrsLen: size_t,\n-    );\n \n     // Operations on parameters\n     pub fn LLVMIsAArgument(Val: &Value) -> Option<&Value>;"}, {"sha": "4892b8d4a84c696e620d52a0934e5a21bde868b7", "filename": "compiler/rustc_codegen_llvm/src/llvm/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dce14cfacc232e80dbed68430183085fd39dea02/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce14cfacc232e80dbed68430183085fd39dea02/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs?ref=dce14cfacc232e80dbed68430183085fd39dea02", "patch": "@@ -37,12 +37,6 @@ pub fn AddFunctionAttributes<'ll>(llfn: &'ll Value, idx: AttributePlace, attrs:\n     }\n }\n \n-pub fn RemoveFunctionAttributes(llfn: &Value, idx: AttributePlace, attrs: &[AttributeKind]) {\n-    unsafe {\n-        LLVMRustRemoveFunctionAttributes(llfn, idx.as_uint(), attrs.as_ptr(), attrs.len());\n-    }\n-}\n-\n pub fn AddCallSiteAttributes<'ll>(\n     callsite: &'ll Value,\n     idx: AttributePlace,"}, {"sha": "3a1994f9a5780218f358460eaaae00776db470ac", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dce14cfacc232e80dbed68430183085fd39dea02/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/dce14cfacc232e80dbed68430183085fd39dea02/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=dce14cfacc232e80dbed68430183085fd39dea02", "patch": "@@ -250,38 +250,12 @@ template<typename T> static inline void AddAttributes(T *t, unsigned Index,\n   t->setAttributes(PALNew);\n }\n \n-template<typename T> static inline void RemoveAttributes(T *t, unsigned Index,\n-                                                         LLVMRustAttribute *RustAttrs,\n-                                                         size_t RustAttrsLen) {\n-  AttributeList PAL = t->getAttributes();\n-  AttributeList PALNew;\n-#if LLVM_VERSION_LT(14, 0)\n-  AttrBuilder B;\n-  for (LLVMRustAttribute RustAttr : makeArrayRef(RustAttrs, RustAttrsLen))\n-    B.addAttribute(fromRust(RustAttr));\n-  PALNew = PAL.removeAttributes(t->getContext(), Index, B);\n-#else\n-  AttributeMask Mask;\n-  for (LLVMRustAttribute RustAttr : makeArrayRef(RustAttrs, RustAttrsLen))\n-    Mask.addAttribute(fromRust(RustAttr));\n-  PALNew = PAL.removeAttributesAtIndex(t->getContext(), Index, Mask);\n-#endif\n-  t->setAttributes(PALNew);\n-}\n-\n extern \"C\" void LLVMRustAddFunctionAttributes(LLVMValueRef Fn, unsigned Index,\n                                               LLVMAttributeRef *Attrs, size_t AttrsLen) {\n   Function *F = unwrap<Function>(Fn);\n   AddAttributes(F, Index, Attrs, AttrsLen);\n }\n \n-extern \"C\" void LLVMRustRemoveFunctionAttributes(LLVMValueRef Fn, unsigned Index,\n-                                                 LLVMRustAttribute *RustAttrs,\n-                                                 size_t RustAttrsLen) {\n-  Function *F = unwrap<Function>(Fn);\n-  RemoveAttributes(F, Index, RustAttrs, RustAttrsLen);\n-}\n-\n extern \"C\" void LLVMRustAddCallSiteAttributes(LLVMValueRef Instr, unsigned Index,\n                                               LLVMAttributeRef *Attrs, size_t AttrsLen) {\n   CallBase *Call = unwrap<CallBase>(Instr);"}]}