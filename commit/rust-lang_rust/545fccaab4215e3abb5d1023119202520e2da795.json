{"sha": "545fccaab4215e3abb5d1023119202520e2da795", "node_id": "C_kwDOAAsO6NoAKDU0NWZjY2FhYjQyMTVlM2FiYjVkMTAyMzExOTIwMjUyMGUyZGE3OTU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-03T10:12:49Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-25T08:11:16Z"}, "message": "Add a test for scalar pair layout validation", "tree": {"sha": "98e00f6496eef9dac2c96369216e6317cc528cdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98e00f6496eef9dac2c96369216e6317cc528cdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/545fccaab4215e3abb5d1023119202520e2da795", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/545fccaab4215e3abb5d1023119202520e2da795", "html_url": "https://github.com/rust-lang/rust/commit/545fccaab4215e3abb5d1023119202520e2da795", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/545fccaab4215e3abb5d1023119202520e2da795/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccaa28bf694a4a8081e2a2e0e4c84842f4205ed0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccaa28bf694a4a8081e2a2e0e4c84842f4205ed0", "html_url": "https://github.com/rust-lang/rust/commit/ccaa28bf694a4a8081e2a2e0e4c84842f4205ed0"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "b24e0cc37aa65ec8f7f5db4b266e817efbe412a9", "filename": "src/test/ui/consts/const-eval/ub-nonnull.32bit.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/545fccaab4215e3abb5d1023119202520e2da795/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/545fccaab4215e3abb5d1023119202520e2da795/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.32bit.stderr?ref=545fccaab4215e3abb5d1023119202520e2da795", "patch": "@@ -65,6 +65,17 @@ LL | const BAD_RANGE2: RestrictedRange2 = unsafe { RestrictedRange2(20) };\n                14 00 00 00                                     \u2502 ....\n            }\n \n-error: aborting due to 7 previous errors\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-nonnull.rs:50:1\n+   |\n+LL | const NULL_FAT_PTR: NonNull<dyn Send> = unsafe {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0, but expected something greater or equal to 1\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 8, align: 4) {\n+               00 00 00 00 \u257e\u2500alloc26\u2500\u257c                         \u2502 ....\u257e\u2500\u2500\u257c\n+           }\n+\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "92b8d017c0b77e404b5a63a4f5166e6d1a3f1686", "filename": "src/test/ui/consts/const-eval/ub-nonnull.64bit.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/545fccaab4215e3abb5d1023119202520e2da795/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/545fccaab4215e3abb5d1023119202520e2da795/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.64bit.stderr?ref=545fccaab4215e3abb5d1023119202520e2da795", "patch": "@@ -65,6 +65,17 @@ LL | const BAD_RANGE2: RestrictedRange2 = unsafe { RestrictedRange2(20) };\n                14 00 00 00                                     \u2502 ....\n            }\n \n-error: aborting due to 7 previous errors\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-nonnull.rs:50:1\n+   |\n+LL | const NULL_FAT_PTR: NonNull<dyn Send> = unsafe {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0, but expected something greater or equal to 1\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 16, align: 8) {\n+               00 00 00 00 00 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc26\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ........\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+           }\n+\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "49092582267c8c9e4cd233044b7ade02c47a06e6", "filename": "src/test/ui/consts/const-eval/ub-nonnull.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/545fccaab4215e3abb5d1023119202520e2da795/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545fccaab4215e3abb5d1023119202520e2da795/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs?ref=545fccaab4215e3abb5d1023119202520e2da795", "patch": "@@ -1,5 +1,5 @@\n // stderr-per-bitwidth\n-#![feature(rustc_attrs)]\n+#![feature(rustc_attrs, ptr_metadata)]\n #![allow(invalid_value)] // make sure we cannot allow away the errors tested here\n \n use std::mem;\n@@ -47,4 +47,11 @@ struct RestrictedRange2(u32);\n const BAD_RANGE2: RestrictedRange2 = unsafe { RestrictedRange2(20) };\n //~^ ERROR it is undefined behavior to use this value\n \n+const NULL_FAT_PTR: NonNull<dyn Send> = unsafe {\n+//~^ ERROR it is undefined behavior to use this value\n+    let x: &dyn Send = &42;\n+    let meta = std::ptr::metadata(x);\n+    mem::transmute((0_usize, meta))\n+};\n+\n fn main() {}"}]}