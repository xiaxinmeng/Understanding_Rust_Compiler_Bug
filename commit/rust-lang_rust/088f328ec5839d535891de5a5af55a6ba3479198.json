{"sha": "088f328ec5839d535891de5a5af55a6ba3479198", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4OGYzMjhlYzU4MzlkNTM1ODkxZGU1YTVhZjU1YTZiYTM0NzkxOTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-02T22:27:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-02T22:27:24Z"}, "message": "Auto merge of #46382 - alexcrichton:thinlto-default, r=michaelwoerister\n\nrustc: Prepare to enable ThinLTO by default\n\nThis commit *almost* enables ThinLTO and multiple codegen units in release mode by\ndefault but is blocked on #46346 now before pulling the trigger.", "tree": {"sha": "8791bd764e2af2c8ea0010cf479ab4199dfd5ac2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8791bd764e2af2c8ea0010cf479ab4199dfd5ac2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/088f328ec5839d535891de5a5af55a6ba3479198", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/088f328ec5839d535891de5a5af55a6ba3479198", "html_url": "https://github.com/rust-lang/rust/commit/088f328ec5839d535891de5a5af55a6ba3479198", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/088f328ec5839d535891de5a5af55a6ba3479198/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9b0897c5d42a4dfa425db799073c6feb21b0178", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9b0897c5d42a4dfa425db799073c6feb21b0178", "html_url": "https://github.com/rust-lang/rust/commit/f9b0897c5d42a4dfa425db799073c6feb21b0178"}, {"sha": "855f6d1483e023cea3b7988db294ed9767e15359", "url": "https://api.github.com/repos/rust-lang/rust/commits/855f6d1483e023cea3b7988db294ed9767e15359", "html_url": "https://github.com/rust-lang/rust/commit/855f6d1483e023cea3b7988db294ed9767e15359"}], "stats": {"total": 280, "additions": 154, "deletions": 126}, "files": [{"sha": "d1adec264450a9105ff39af176403d3cb93ef211", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/088f328ec5839d535891de5a5af55a6ba3479198/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088f328ec5839d535891de5a5af55a6ba3479198/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=088f328ec5839d535891de5a5af55a6ba3479198", "patch": "@@ -383,8 +383,13 @@ top_level_options!(\n         // try to not rely on this too much.\n         actually_rustdoc: bool [TRACKED],\n \n-        // Number of object files/codegen units to produce on the backend\n+        // Specifications of codegen units / ThinLTO which are forced as a\n+        // result of parsing command line options. These are not necessarily\n+        // what rustc was invoked with, but massaged a bit to agree with\n+        // commands like `--emit llvm-ir` which they're often incompatible with\n+        // if we otherwise use the defaults of rustc.\n         cli_forced_codegen_units: Option<usize> [UNTRACKED],\n+        cli_forced_thinlto: Option<bool> [UNTRACKED],\n     }\n );\n \n@@ -566,6 +571,7 @@ pub fn basic_options() -> Options {\n         debug_assertions: true,\n         actually_rustdoc: false,\n         cli_forced_codegen_units: None,\n+        cli_forced_thinlto: None,\n     }\n }\n \n@@ -1163,7 +1169,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n                  \"run the non-lexical lifetimes MIR pass\"),\n     trans_time_graph: bool = (false, parse_bool, [UNTRACKED],\n         \"generate a graphical HTML report of time spent in trans and LLVM\"),\n-    thinlto: bool = (false, parse_bool, [TRACKED],\n+    thinlto: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"enable ThinLTO when possible\"),\n     inline_in_all_cgus: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"control whether #[inline] functions are in all cgus\"),\n@@ -1599,6 +1605,7 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n \n     let mut cg = build_codegen_options(matches, error_format);\n     let mut codegen_units = cg.codegen_units;\n+    let mut thinlto = None;\n \n     // Issue #30063: if user requests llvm-related output to one\n     // particular path, disable codegen-units.\n@@ -1620,9 +1627,13 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n                     }\n                     early_warn(error_format, \"resetting to default -C codegen-units=1\");\n                     codegen_units = Some(1);\n+                    thinlto = Some(false);\n                 }\n             }\n-            _ => codegen_units = Some(1),\n+            _ => {\n+                codegen_units = Some(1);\n+                thinlto = Some(false);\n+            }\n         }\n     }\n \n@@ -1832,6 +1843,7 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n         debug_assertions,\n         actually_rustdoc: false,\n         cli_forced_codegen_units: codegen_units,\n+        cli_forced_thinlto: thinlto,\n     },\n     cfg)\n }"}, {"sha": "df5805bacd41ae8a1248c59a0195c4a60a1fbb55", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 82, "deletions": 21, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/088f328ec5839d535891de5a5af55a6ba3479198/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088f328ec5839d535891de5a5af55a6ba3479198/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=088f328ec5839d535891de5a5af55a6ba3479198", "patch": "@@ -656,30 +656,91 @@ impl Session {\n             return n as usize\n         }\n \n+        // Why is 16 codegen units the default all the time?\n+        //\n+        // The main reason for enabling multiple codegen units by default is to\n+        // leverage the ability for the trans backend to do translation and\n+        // codegen in parallel. This allows us, especially for large crates, to\n+        // make good use of all available resources on the machine once we've\n+        // hit that stage of compilation. Large crates especially then often\n+        // take a long time in trans/codegen and this helps us amortize that\n+        // cost.\n+        //\n+        // Note that a high number here doesn't mean that we'll be spawning a\n+        // large number of threads in parallel. The backend of rustc contains\n+        // global rate limiting through the `jobserver` crate so we'll never\n+        // overload the system with too much work, but rather we'll only be\n+        // optimizing when we're otherwise cooperating with other instances of\n+        // rustc.\n+        //\n+        // Rather a high number here means that we should be able to keep a lot\n+        // of idle cpus busy. By ensuring that no codegen unit takes *too* long\n+        // to build we'll be guaranteed that all cpus will finish pretty closely\n+        // to one another and we should make relatively optimal use of system\n+        // resources\n+        //\n+        // Note that the main cost of codegen units is that it prevents LLVM\n+        // from inlining across codegen units. Users in general don't have a lot\n+        // of control over how codegen units are split up so it's our job in the\n+        // compiler to ensure that undue performance isn't lost when using\n+        // codegen units (aka we can't require everyone to slap `#[inline]` on\n+        // everything).\n+        //\n+        // If we're compiling at `-O0` then the number doesn't really matter too\n+        // much because performance doesn't matter and inlining is ok to lose.\n+        // In debug mode we just want to try to guarantee that no cpu is stuck\n+        // doing work that could otherwise be farmed to others.\n+        //\n+        // In release mode, however (O1 and above) performance does indeed\n+        // matter! To recover the loss in performance due to inlining we'll be\n+        // enabling ThinLTO by default (the function for which is just below).\n+        // This will ensure that we recover any inlining wins we otherwise lost\n+        // through codegen unit partitioning.\n+        //\n+        // ---\n+        //\n+        // Ok that's a lot of words but the basic tl;dr; is that we want a high\n+        // number here -- but not too high. Additionally we're \"safe\" to have it\n+        // always at the same number at all optimization levels.\n+        //\n+        // As a result 16 was chosen here! Mostly because it was a power of 2\n+        // and most benchmarks agreed it was roughly a local optimum. Not very\n+        // scientific.\n         match self.opts.optimize {\n-            // If we're compiling at `-O0` then default to 16 codegen units.\n-            // The number here shouldn't matter too too much as debug mode\n-            // builds don't rely on performance at all, meaning that lost\n-            // opportunities for inlining through multiple codegen units is\n-            // a non-issue.\n-            //\n-            // Note that the high number here doesn't mean that we'll be\n-            // spawning a large number of threads in parallel. The backend\n-            // of rustc contains global rate limiting through the\n-            // `jobserver` crate so we'll never overload the system with too\n-            // much work, but rather we'll only be optimizing when we're\n-            // otherwise cooperating with other instances of rustc.\n-            //\n-            // Rather the high number here means that we should be able to\n-            // keep a lot of idle cpus busy. By ensuring that no codegen\n-            // unit takes *too* long to build we'll be guaranteed that all\n-            // cpus will finish pretty closely to one another and we should\n-            // make relatively optimal use of system resources\n             config::OptLevel::No => 16,\n+            _ => 1, // FIXME(#46346) this should be 16\n+        }\n+    }\n \n-            // All other optimization levels default use one codegen unit,\n-            // the historical default in Rust for a Long Time.\n-            _ => 1,\n+    /// Returns whether ThinLTO is enabled for this compilation\n+    pub fn thinlto(&self) -> bool {\n+        // If processing command line options determined that we're incompatible\n+        // with ThinLTO (e.g. `-C lto --emit llvm-ir`) then return that option.\n+        if let Some(enabled) = self.opts.cli_forced_thinlto {\n+            return enabled\n+        }\n+\n+        // If explicitly specified, use that with the next highest priority\n+        if let Some(enabled) = self.opts.debugging_opts.thinlto {\n+            return enabled\n+        }\n+\n+        // If there's only one codegen unit and LTO isn't enabled then there's\n+        // no need for ThinLTO so just return false.\n+        if self.codegen_units() == 1 && !self.lto() {\n+            return false\n+        }\n+\n+        // Right now ThinLTO isn't compatible with incremental compilation.\n+        if self.opts.incremental.is_some() {\n+            return false\n+        }\n+\n+        // Now we're in \"defaults\" territory. By default we enable ThinLTO for\n+        // optimized compiles (anything greater than O0).\n+        match self.opts.optimize {\n+            config::OptLevel::No => false,\n+            _ => true,\n         }\n     }\n }"}, {"sha": "cb883e0349f31cb16c8038f48d906c1d9f775e7e", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/088f328ec5839d535891de5a5af55a6ba3479198/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088f328ec5839d535891de5a5af55a6ba3479198/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=088f328ec5839d535891de5a5af55a6ba3479198", "patch": "@@ -1402,8 +1402,9 @@ fn start_executing_work(tcx: TyCtxt,\n         // for doesn't require full LTO. Some targets require one LLVM module\n         // (they effectively don't have a linker) so it's up to us to use LTO to\n         // link everything together.\n-        thinlto: sess.opts.debugging_opts.thinlto &&\n-            !sess.target.target.options.requires_lto,\n+        thinlto: sess.thinlto() &&\n+            !sess.target.target.options.requires_lto &&\n+            unsafe { llvm::LLVMRustThinLTOAvailable() },\n \n         no_landing_pads: sess.no_landing_pads(),\n         save_temps: sess.opts.cg.save_temps,"}, {"sha": "bfc72ff06aa7072c3889605f0b5f30ddff7ead71", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/088f328ec5839d535891de5a5af55a6ba3479198/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088f328ec5839d535891de5a5af55a6ba3479198/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=088f328ec5839d535891de5a5af55a6ba3479198", "patch": "@@ -704,7 +704,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     check_for_rustc_errors_attr(tcx);\n \n-    if tcx.sess.opts.debugging_opts.thinlto {\n+    if let Some(true) = tcx.sess.opts.debugging_opts.thinlto {\n         if unsafe { !llvm::LLVMRustThinLTOAvailable() } {\n             tcx.sess.fatal(\"this compiler's LLVM does not support ThinLTO\");\n         }"}, {"sha": "b5cf6d7d34fcc61bc78ec3ef3f842ce4c73aed91", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/088f328ec5839d535891de5a5af55a6ba3479198/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088f328ec5839d535891de5a5af55a6ba3479198/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=088f328ec5839d535891de5a5af55a6ba3479198", "patch": "@@ -252,8 +252,26 @@ fn output_fileline(w: &mut Write,\n // Note that this demangler isn't quite as fancy as it could be. We have lots\n // of other information in our symbols like hashes, version, type information,\n // etc. Additionally, this doesn't handle glue symbols at all.\n-pub fn demangle(writer: &mut Write, s: &str, format: PrintFormat) -> io::Result<()> {\n-    // First validate the symbol. If it doesn't look like anything we're\n+pub fn demangle(writer: &mut Write, mut s: &str, format: PrintFormat) -> io::Result<()> {\n+    // During ThinLTO LLVM may import and rename internal symbols, so strip out\n+    // those endings first as they're one of the last manglings applied to\n+    // symbol names.\n+    let llvm = \".llvm.\";\n+    if let Some(i) = s.find(llvm) {\n+        let candidate = &s[i + llvm.len()..];\n+        let all_hex = candidate.chars().all(|c| {\n+            match c {\n+                'A' ... 'F' | '0' ... '9' => true,\n+                _ => false,\n+            }\n+        });\n+\n+        if all_hex {\n+            s = &s[..i];\n+        }\n+    }\n+\n+    // Validate the symbol. If it doesn't look like anything we're\n     // expecting, we just print it literally. Note that we must handle non-rust\n     // symbols because we could have any function in the backtrace.\n     let mut valid = true;"}, {"sha": "1e52ad571b8ecd072f44c20f2816830378bafc8c", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 23, "deletions": 87, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/088f328ec5839d535891de5a5af55a6ba3479198/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/088f328ec5839d535891de5a5af55a6ba3479198/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=088f328ec5839d535891de5a5af55a6ba3479198", "patch": "@@ -11,6 +11,7 @@\n #include <stdio.h>\n \n #include <vector>\n+#include <set>\n \n #include \"rustllvm.h\"\n \n@@ -885,86 +886,6 @@ getFirstDefinitionForLinker(const GlobalValueSummaryList &GVSummaryList) {\n   return FirstDefForLinker->get();\n }\n \n-// This is a helper function we added that isn't present in LLVM's source.\n-//\n-// The way LTO works in Rust is that we typically have a number of symbols that\n-// we know ahead of time need to be preserved. We want to ensure that ThinLTO\n-// doesn't accidentally internalize any of these and otherwise is always\n-// ready to keep them linking correctly.\n-//\n-// This function will recursively walk the `GUID` provided and all of its\n-// references, as specified in the `Index`. In other words, we're taking a\n-// `GUID` as input, adding it to `Preserved`, and then taking all `GUID`\n-// items that the input references and recursing.\n-static void\n-addPreservedGUID(const ModuleSummaryIndex &Index,\n-                 DenseSet<GlobalValue::GUID> &Preserved,\n-                 GlobalValue::GUID GUID) {\n-  if (Preserved.count(GUID))\n-    return;\n-  Preserved.insert(GUID);\n-\n-#if LLVM_VERSION_GE(5, 0)\n-  auto Info = Index.getValueInfo(GUID);\n-  if (!Info) {\n-    return;\n-  }\n-  for (auto &Summary : Info.getSummaryList()) {\n-    for (auto &Ref : Summary->refs()) {\n-      addPreservedGUID(Index, Preserved, Ref.getGUID());\n-    }\n-\n-    GlobalValueSummary *GVSummary = Summary.get();\n-    if (isa<FunctionSummary>(GVSummary)) {\n-      auto *FS = cast<FunctionSummary>(GVSummary);\n-      for (auto &Call: FS->calls()) {\n-        addPreservedGUID(Index, Preserved, Call.first.getGUID());\n-      }\n-      for (auto &GUID: FS->type_tests()) {\n-        addPreservedGUID(Index, Preserved, GUID);\n-      }\n-    }\n-    if (isa<AliasSummary>(GVSummary)) {\n-      auto *AS = cast<AliasSummary>(GVSummary);\n-      auto GUID = AS->getAliasee().getOriginalName();\n-      addPreservedGUID(Index, Preserved, GUID);\n-    }\n-  }\n-#else\n-  auto SummaryList = Index.findGlobalValueSummaryList(GUID);\n-  if (SummaryList == Index.end())\n-    return;\n-  for (auto &Summary : SummaryList->second) {\n-    for (auto &Ref : Summary->refs()) {\n-      if (Ref.isGUID()) {\n-        addPreservedGUID(Index, Preserved, Ref.getGUID());\n-      } else {\n-        auto Value = Ref.getValue();\n-        addPreservedGUID(Index, Preserved, Value->getGUID());\n-      }\n-    }\n-\n-    if (auto *FS = dyn_cast<FunctionSummary>(Summary.get())) {\n-      for (auto &Call: FS->calls()) {\n-        if (Call.first.isGUID()) {\n-          addPreservedGUID(Index, Preserved, Call.first.getGUID());\n-        } else {\n-          auto Value = Call.first.getValue();\n-          addPreservedGUID(Index, Preserved, Value->getGUID());\n-        }\n-      }\n-      for (auto &GUID: FS->type_tests()) {\n-        addPreservedGUID(Index, Preserved, GUID);\n-      }\n-    }\n-    if (auto *AS = dyn_cast<AliasSummary>(Summary.get())) {\n-      auto GUID = AS->getAliasee().getOriginalName();\n-      addPreservedGUID(Index, Preserved, GUID);\n-    }\n-  }\n-#endif\n-}\n-\n // The main entry point for creating the global ThinLTO analysis. The structure\n // here is basically the same as before threads are spawned in the `run`\n // function of `lib/LTO/ThinLTOCodeGenerator.cpp`.\n@@ -1004,12 +925,10 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n   Ret->Index.collectDefinedGVSummariesPerModule(Ret->ModuleToDefinedGVSummaries);\n \n   // Convert the preserved symbols set from string to GUID, this is then needed\n-  // for internalization. We use `addPreservedGUID` to include any transitively\n-  // used symbol as well.\n+  // for internalization.\n   for (int i = 0; i < num_symbols; i++) {\n-    addPreservedGUID(Ret->Index,\n-                     Ret->GUIDPreservedSymbols,\n-                     GlobalValue::getGUID(preserved_symbols[i]));\n+    auto GUID = GlobalValue::getGUID(preserved_symbols[i]);\n+    Ret->GUIDPreservedSymbols.insert(GUID);\n   }\n \n   // Collect the import/export lists for all modules from the call-graph in the\n@@ -1038,7 +957,8 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n   // Resolve LinkOnce/Weak symbols, this has to be computed early be cause it\n   // impacts the caching.\n   //\n-  // This is copied from `lib/LTO/ThinLTOCodeGenerator.cpp`\n+  // This is copied from `lib/LTO/ThinLTOCodeGenerator.cpp` with some of this\n+  // being lifted from `lib/LTO/LTO.cpp` as well\n   StringMap<std::map<GlobalValue::GUID, GlobalValue::LinkageTypes>> ResolvedODR;\n   DenseMap<GlobalValue::GUID, const GlobalValueSummary *> PrevailingCopy;\n   for (auto &I : Ret->Index) {\n@@ -1062,11 +982,27 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n     ResolvedODR[ModuleIdentifier][GUID] = NewLinkage;\n   };\n   thinLTOResolveWeakForLinkerInIndex(Ret->Index, isPrevailing, recordNewLinkage);\n+\n+  // Here we calculate an `ExportedGUIDs` set for use in the `isExported`\n+  // callback below. This callback below will dictate the linkage for all\n+  // summaries in the index, and we basically just only want to ensure that dead\n+  // symbols are internalized. Otherwise everything that's already external\n+  // linkage will stay as external, and internal will stay as internal.\n+  std::set<GlobalValue::GUID> ExportedGUIDs;\n+  for (auto &List : Ret->Index) {\n+    for (auto &GVS: List.second) {\n+      if (!GlobalValue::isExternalLinkage(GVS->linkage()))\n+        continue;\n+      auto GUID = GVS->getOriginalName();\n+      if (!DeadSymbols.count(GUID))\n+        ExportedGUIDs.insert(GUID);\n+    }\n+  }\n   auto isExported = [&](StringRef ModuleIdentifier, GlobalValue::GUID GUID) {\n     const auto &ExportList = Ret->ExportLists.find(ModuleIdentifier);\n     return (ExportList != Ret->ExportLists.end() &&\n       ExportList->second.count(GUID)) ||\n-      Ret->GUIDPreservedSymbols.count(GUID);\n+      ExportedGUIDs.count(GUID);\n   };\n   thinLTOInternalizeAndPromoteInIndex(Ret->Index, isExported);\n "}, {"sha": "bafb78fc213e39192585d2b91f0cd3c4343928a5", "filename": "src/test/run-fail/mir_trans_no_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/088f328ec5839d535891de5a5af55a6ba3479198/src%2Ftest%2Frun-fail%2Fmir_trans_no_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088f328ec5839d535891de5a5af55a6ba3479198/src%2Ftest%2Frun-fail%2Fmir_trans_no_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_trans_no_landing_pads.rs?ref=088f328ec5839d535891de5a5af55a6ba3479198", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z no-landing-pads\n+// compile-flags: -Z no-landing-pads -C codegen-units=1\n // error-pattern:converging_fn called\n use std::io::{self, Write};\n "}, {"sha": "998ee7470bbe9d53ed0ab5a1075d0ae9e7c629d4", "filename": "src/test/run-fail/mir_trans_no_landing_pads_diverging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/088f328ec5839d535891de5a5af55a6ba3479198/src%2Ftest%2Frun-fail%2Fmir_trans_no_landing_pads_diverging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088f328ec5839d535891de5a5af55a6ba3479198/src%2Ftest%2Frun-fail%2Fmir_trans_no_landing_pads_diverging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_trans_no_landing_pads_diverging.rs?ref=088f328ec5839d535891de5a5af55a6ba3479198", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z no-landing-pads\n+// compile-flags: -Z no-landing-pads -C codegen-units=1\n // error-pattern:diverging_fn called\n use std::io::{self, Write};\n "}, {"sha": "7f8a741465b30598b32e32b73592c94a8720ab1c", "filename": "src/test/run-pass-fulldeps/auxiliary/issue-16723.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/088f328ec5839d535891de5a5af55a6ba3479198/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue-16723.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088f328ec5839d535891de5a5af55a6ba3479198/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue-16723.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue-16723.rs?ref=088f328ec5839d535891de5a5af55a6ba3479198", "previous_filename": "src/test/run-pass-fulldeps/auxiliary/issue_16723_multiple_items_syntax_ext.rs"}, {"sha": "f56983c14b1bc88e560746d0b7c483bea01f1a67", "filename": "src/test/run-pass-fulldeps/auxiliary/outlive-expansion-phase.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/088f328ec5839d535891de5a5af55a6ba3479198/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Foutlive-expansion-phase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088f328ec5839d535891de5a5af55a6ba3479198/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Foutlive-expansion-phase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Foutlive-expansion-phase.rs?ref=088f328ec5839d535891de5a5af55a6ba3479198", "previous_filename": "src/test/run-pass-fulldeps/auxiliary/plugin_crate_outlive_expansion_phase.rs"}, {"sha": "bacfa8d1ead5a8da0b522c728b55ead708253684", "filename": "src/test/run-pass-fulldeps/issue-16723.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/088f328ec5839d535891de5a5af55a6ba3479198/src%2Ftest%2Frun-pass-fulldeps%2Fissue-16723.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088f328ec5839d535891de5a5af55a6ba3479198/src%2Ftest%2Frun-pass-fulldeps%2Fissue-16723.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-16723.rs?ref=088f328ec5839d535891de5a5af55a6ba3479198", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n // ignore-stage1\n-// aux-build:issue_16723_multiple_items_syntax_ext.rs\n+// aux-build:issue-16723.rs\n #![feature(plugin)]\n-#![plugin(issue_16723_multiple_items_syntax_ext)]\n+#![plugin(issue_16723)]\n \n multiple_items!();\n ", "previous_filename": "src/test/run-pass-fulldeps/issue_16723_multiple_items_syntax_ext.rs"}, {"sha": "6eb3e510724f35cb8b3b7a660e90927e324f48ef", "filename": "src/test/run-pass-fulldeps/outlive-expansion-phase.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/088f328ec5839d535891de5a5af55a6ba3479198/src%2Ftest%2Frun-pass-fulldeps%2Foutlive-expansion-phase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088f328ec5839d535891de5a5af55a6ba3479198/src%2Ftest%2Frun-pass-fulldeps%2Foutlive-expansion-phase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Foutlive-expansion-phase.rs?ref=088f328ec5839d535891de5a5af55a6ba3479198", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:plugin_crate_outlive_expansion_phase.rs\n+// aux-build:outlive-expansion-phase.rs\n // ignore-stage1\n \n #![feature(plugin)]\n-#![plugin(plugin_crate_outlive_expansion_phase)]\n+#![plugin(outlive_expansion_phase)]\n \n pub fn main() {}", "previous_filename": "src/test/run-pass-fulldeps/macro-crate-outlive-expansion-phase.rs"}, {"sha": "73f123045d2494181ae515026a36d53c9fad4185", "filename": "src/test/run-pass/no-landing-pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/088f328ec5839d535891de5a5af55a6ba3479198/src%2Ftest%2Frun-pass%2Fno-landing-pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088f328ec5839d535891de5a5af55a6ba3479198/src%2Ftest%2Frun-pass%2Fno-landing-pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fno-landing-pads.rs?ref=088f328ec5839d535891de5a5af55a6ba3479198", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z no-landing-pads\n+// compile-flags: -Z no-landing-pads -C codegen-units=1\n // ignore-emscripten no threads support\n \n use std::thread;"}, {"sha": "b62d80b589fda548e3ac21eca0dfc8bcc4a809ac", "filename": "src/test/run-pass/specialization/auxiliary/cross_crates_defaults.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/088f328ec5839d535891de5a5af55a6ba3479198/src%2Ftest%2Frun-pass%2Fspecialization%2Fauxiliary%2Fcross_crates_defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088f328ec5839d535891de5a5af55a6ba3479198/src%2Ftest%2Frun-pass%2Fspecialization%2Fauxiliary%2Fcross_crates_defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fauxiliary%2Fcross_crates_defaults.rs?ref=088f328ec5839d535891de5a5af55a6ba3479198", "previous_filename": "src/test/run-pass/specialization/auxiliary/specialization_cross_crate_defaults.rs"}, {"sha": "132520dcb736e5bfb8512d5f3a2488b4509f5ac5", "filename": "src/test/run-pass/specialization/cross-crate-defaults.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/088f328ec5839d535891de5a5af55a6ba3479198/src%2Ftest%2Frun-pass%2Fspecialization%2Fcross-crate-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/088f328ec5839d535891de5a5af55a6ba3479198/src%2Ftest%2Frun-pass%2Fspecialization%2Fcross-crate-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fcross-crate-defaults.rs?ref=088f328ec5839d535891de5a5af55a6ba3479198", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:specialization_cross_crate_defaults.rs\n+// aux-build:cross_crates_defaults.rs\n \n #![feature(specialization)]\n \n-extern crate specialization_cross_crate_defaults;\n+extern crate cross_crates_defaults;\n \n-use specialization_cross_crate_defaults::*;\n+use cross_crates_defaults::*;\n \n struct LocalDefault;\n struct LocalOverride;", "previous_filename": "src/test/run-pass/specialization/specialization-cross-crate-defaults.rs"}]}