{"sha": "98300516072c6afd0e93654b325f5924b60dea53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MzAwNTE2MDcyYzZhZmQwZTkzNjU0YjMyNWY1OTI0YjYwZGVhNTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-21T01:06:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-21T01:06:47Z"}, "message": "auto merge of #18441 : mdinger/rust/literals, r=steveklabnik\n\nCloses #18415\r\n\r\nThis links [`std::str`](http://doc.rust-lang.org/std/str/index.html) documentation to [literals](http://doc.rust-lang.org/reference.html#literals) in the reference guide and collects examples of literals into one group at the beginning of the section. ~~The new tables are not exhaustive (some escapes were skipped) and so I try to link back to the respective sections where more detail is located.~~ The tables are are mostly exhaustive. I misunderstood some of the whitespace codes.\r\n\r\nI don't think the tables actually look that nice if that's important and I'm not sure how it could be improved. I think it does do a good job of collecting available options together. I think listing the escapes together is particularly helpful because they vary with type and are embedded in paragraphs.\r\n\r\n[EDIT]\r\nThe [ascii table](http://man-ascii.com/) is here and may be useful.", "tree": {"sha": "f7f46d5b72a9df36b7296fc014bf80e3702a1e16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7f46d5b72a9df36b7296fc014bf80e3702a1e16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98300516072c6afd0e93654b325f5924b60dea53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98300516072c6afd0e93654b325f5924b60dea53", "html_url": "https://github.com/rust-lang/rust/commit/98300516072c6afd0e93654b325f5924b60dea53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98300516072c6afd0e93654b325f5924b60dea53/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "770378a313a573776b16237a46b75bafa49072c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/770378a313a573776b16237a46b75bafa49072c1", "html_url": "https://github.com/rust-lang/rust/commit/770378a313a573776b16237a46b75bafa49072c1"}, {"sha": "16bb4e6400607ae51a929fe1c034fe709a57bb92", "url": "https://api.github.com/repos/rust-lang/rust/commits/16bb4e6400607ae51a929fe1c034fe709a57bb92", "html_url": "https://github.com/rust-lang/rust/commit/16bb4e6400607ae51a929fe1c034fe709a57bb92"}], "stats": {"total": 66, "additions": 63, "deletions": 3}, "files": [{"sha": "4bba6bef5cfe045916f8c1feda92a23e3226b36e", "filename": "src/doc/reference.md", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/98300516072c6afd0e93654b325f5924b60dea53/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/98300516072c6afd0e93654b325f5924b60dea53/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=98300516072c6afd0e93654b325f5924b60dea53", "patch": "@@ -225,6 +225,52 @@ reserved for future extension, that is, the above gives the lexical\n grammar, but a Rust parser will reject everything but the 12 special\n cases mentioned in [Number literals](#number-literals) below.\n \n+#### Examples\n+\n+##### Characters and strings\n+\n+|   | Example | Number of `#` pairs allowed | Available characters | Escapes | Equivalent to |\n+|---|---------|-----------------------------|----------------------|---------|---------------|\n+| [Character](#character-literals) | `'H'` | `N/A` | All unicode | `\\'` & [Byte escapes](#byte-escapes) & [Unicode escapes](#unicode-escapes) | `N/A` |\n+| [String](#string-literals) | `\"hello\"` | `N/A` | All unicode | `\\\"` & [Byte escapes](#byte-escapes) & [Unicode escapes](#unicode-escapes) | `N/A` |\n+| [Raw](#raw-string-literals) | `r##\"hello\"##`  | `0...` | All unicode | `N/A` | `N/A` |\n+| [Byte](#byte-literals) | `b'H'` | `N/A` | All ASCII | `\\'` & [Byte escapes](#byte-escapes) | `u8` |\n+| [Byte string](#byte-string-literals) | `b\"hello\"` | `N/A`  | All ASCII | `\\\"` & [Byte escapes](#byte-escapes) | `&'static [u8]` |\n+| [Raw byte string](#raw-byte-string-literals) | `br##\"hello\"##` | `0...` | All ASCII | `N/A` | `&'static [u8]` (unsure...not stated) |\n+\n+##### Byte escapes\n+\n+|   | Name |\n+|---|------|\n+| `\\x7F` | 8-bit character code (exactly 2 digits) |\n+| `\\n` | Newline |\n+| `\\r` | Carriage return |\n+| `\\t` | Tab |\n+| `\\\\` | Backslash |\n+\n+##### Unicode escapes\n+|   | Name |\n+|---|------|\n+| `\\u7FFF` | 16-bit character code (exactly 4 digits) |\n+| `\\U7EEEFFFF` | 32-bit character code (exactly 8 digits) |\n+\n+##### Numbers\n+\n+| [Number literals](#number-literals)`*` | Example | Exponentiation | Suffixes |\n+|----------------------------------------|---------|----------------|----------|\n+| Decimal integer | `98_222i` | `N/A` | Integer suffixes |\n+| Hex integer | `0xffi` | `N/A` | Integer suffixes |\n+| Octal integer | `0o77i` | `N/A` | Integer suffixes |\n+| Binary integer | `0b1111_0000i` | `N/A` | Integer suffixes |\n+| Floating-point | `123.0E+77f64` | `Optional` | Floating-point suffixes |\n+\n+`*` All number literals allow `_` as a visual separator: `1_234.0E+18f64`\n+\n+##### Suffixes\n+| Integer | Floating-point |\n+|---------|----------------|\n+| `i` (`int`), `u` (`uint`), `u8`, `i8`, `u16`, `i16`, `u32`, `i32`, `u64`, `i64` | `f32`, `f64` |\n+\n #### Character and string literals\n \n ```{.ebnf .gram}\n@@ -253,15 +299,21 @@ nonzero_dec: '1' | '2' | '3' | '4'\n            | '5' | '6' | '7' | '8' | '9' ;\n ```\n \n+##### Character literals\n+\n A _character literal_ is a single Unicode character enclosed within two\n `U+0027` (single-quote) characters, with the exception of `U+0027` itself,\n which must be _escaped_ by a preceding U+005C character (`\\`).\n \n+##### String literals\n+\n A _string literal_ is a sequence of any Unicode characters enclosed within two\n `U+0022` (double-quote) characters, with the exception of `U+0022` itself,\n which must be _escaped_ by a preceding `U+005C` character (`\\`), or a _raw\n string literal_.\n \n+##### Character escapes\n+\n Some additional _escapes_ are available in either character or non-raw string\n literals. An escape starts with a `U+005C` (`\\`) and continues with one of the\n following forms:\n@@ -281,6 +333,8 @@ following forms:\n * The _backslash escape_ is the character `U+005C` (`\\`) which must be\n   escaped in order to denote *itself*.\n \n+##### Raw string literals\n+\n Raw string literals do not process any escapes. They start with the character\n `U+0072` (`r`), followed by zero or more of the character `U+0023` (`#`) and a\n `U+0022` (double-quote) character. The _raw string body_ is not defined in the\n@@ -322,12 +376,16 @@ raw_byte_string : '\"' raw_byte_string_body '\"' | '#' raw_byte_string '#' ;\n \n ```\n \n+##### Byte literals\n+\n A _byte literal_ is a single ASCII character (in the `U+0000` to `U+007F`\n range) enclosed within two `U+0027` (single-quote) characters, with the\n exception of `U+0027` itself, which must be _escaped_ by a preceding U+005C\n character (`\\`), or a single _escape_. It is equivalent to a `u8` unsigned\n 8-bit integer _number literal_.\n \n+##### Byte string literals\n+\n A _byte string literal_ is a sequence of ASCII characters and _escapes_\n enclosed within two `U+0022` (double-quote) characters, with the exception of\n `U+0022` itself, which must be _escaped_ by a preceding `U+005C` character\n@@ -347,6 +405,8 @@ following forms:\n * The _backslash escape_ is the character `U+005C` (`\\`) which must be\n   escaped in order to denote its ASCII encoding `0x5C`.\n \n+##### Raw byte string literals\n+\n Raw byte string literals do not process any escapes. They start with the\n character `U+0062` (`b`), followed by `U+0072` (`r`), followed by zero or more\n of the character `U+0023` (`#`), and a `U+0022` (double-quote) character. The"}, {"sha": "a7df5f4644ad560819d0df33a7ffa60f37420a8e", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98300516072c6afd0e93654b325f5924b60dea53/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98300516072c6afd0e93654b325f5924b60dea53/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=98300516072c6afd0e93654b325f5924b60dea53", "patch": "@@ -42,9 +42,9 @@\n //! # Representation\n //!\n //! Rust's string type, `str`, is a sequence of Unicode scalar values encoded as a\n-//! stream of UTF-8 bytes. All strings are guaranteed to be validly encoded UTF-8\n-//! sequences. Additionally, strings are not null-terminated and can thus contain\n-//! null bytes.\n+//! stream of UTF-8 bytes. All [strings](../../reference.html#literals) are\n+//! guaranteed to be validly encoded UTF-8 sequences. Additionally, strings are\n+//! not null-terminated and can thus contain null bytes.\n //!\n //! The actual representation of strings have direct mappings to slices: `&str`\n //! is the same as `&[u8]`."}]}