{"sha": "cfbbd91a886e2394e7411f9d7f4966dcbd454764", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmYmJkOTFhODg2ZTIzOTRlNzQxMWY5ZDdmNDk2NmRjYmQ0NTQ3NjQ=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-07-28T07:24:59Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-08-11T12:09:08Z"}, "message": "Require source implementations for Diagnostic", "tree": {"sha": "baa61b0cd6e1b7424d7760402e1dafb21dc3fe72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baa61b0cd6e1b7424d7760402e1dafb21dc3fe72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfbbd91a886e2394e7411f9d7f4966dcbd454764", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfbbd91a886e2394e7411f9d7f4966dcbd454764", "html_url": "https://github.com/rust-lang/rust/commit/cfbbd91a886e2394e7411f9d7f4966dcbd454764", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfbbd91a886e2394e7411f9d7f4966dcbd454764/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21184a1b2a4bea57a7666432749b171414136c60", "url": "https://api.github.com/repos/rust-lang/rust/commits/21184a1b2a4bea57a7666432749b171414136c60", "html_url": "https://github.com/rust-lang/rust/commit/21184a1b2a4bea57a7666432749b171414136c60"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "30db48f86828d1820bba8a62b08df4bf08f9eaef", "filename": "crates/ra_hir_def/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfbbd91a886e2394e7411f9d7f4966dcbd454764/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfbbd91a886e2394e7411f9d7f4966dcbd454764/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs?ref=cfbbd91a886e2394e7411f9d7f4966dcbd454764", "patch": "@@ -18,7 +18,7 @@ impl Diagnostic for UnresolvedModule {\n     fn message(&self) -> String {\n         \"unresolved module\".to_string()\n     }\n-    fn fix_source(&self) -> InFile<SyntaxNodePtr> {\n+    fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile::new(self.file, self.decl.clone().into())\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {"}, {"sha": "90a3b87f96a81b72964b127b0079dcb3e3c14509", "filename": "crates/ra_hir_expand/src/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cfbbd91a886e2394e7411f9d7f4966dcbd454764/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfbbd91a886e2394e7411f9d7f4966dcbd454764/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs?ref=cfbbd91a886e2394e7411f9d7f4966dcbd454764", "patch": "@@ -22,9 +22,11 @@ use crate::{db::AstDatabase, InFile};\n \n pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n     fn message(&self) -> String;\n-    fn fix_source(&self) -> InFile<SyntaxNodePtr>;\n-    fn source(&self) -> InFile<SyntaxNodePtr> {\n-        self.fix_source()\n+    /// A source to be used in highlighting and other visual representations\n+    fn source(&self) -> InFile<SyntaxNodePtr>;\n+    /// A source to be used during the fix application\n+    fn fix_source(&self) -> InFile<SyntaxNodePtr> {\n+        self.source()\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static);\n     fn is_experimental(&self) -> bool {\n@@ -39,8 +41,9 @@ pub trait AstDiagnostic {\n \n impl dyn Diagnostic {\n     pub fn syntax_node(&self, db: &impl AstDatabase) -> SyntaxNode {\n-        let node = db.parse_or_expand(self.source().file_id).unwrap();\n-        self.source().value.to_node(&node)\n+        let source = self.source();\n+        let node = db.parse_or_expand(source.file_id).unwrap();\n+        source.value.to_node(&node)\n     }\n \n     pub fn downcast_ref<D: Diagnostic>(&self) -> Option<&D> {"}, {"sha": "efca096199558c36ca79ab75a54789a5a98f935f", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cfbbd91a886e2394e7411f9d7f4966dcbd454764/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfbbd91a886e2394e7411f9d7f4966dcbd454764/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=cfbbd91a886e2394e7411f9d7f4966dcbd454764", "patch": "@@ -37,7 +37,7 @@ impl Diagnostic for NoSuchField {\n         \"no such field\".to_string()\n     }\n \n-    fn fix_source(&self) -> InFile<SyntaxNodePtr> {\n+    fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile::new(self.file, self.field.clone().into())\n     }\n \n@@ -137,7 +137,7 @@ impl Diagnostic for MissingMatchArms {\n     fn message(&self) -> String {\n         String::from(\"Missing match arm\")\n     }\n-    fn fix_source(&self) -> InFile<SyntaxNodePtr> {\n+    fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.match_expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n@@ -155,7 +155,7 @@ impl Diagnostic for MissingOkInTailExpr {\n     fn message(&self) -> String {\n         \"wrap return expression in Ok\".to_string()\n     }\n-    fn fix_source(&self) -> InFile<SyntaxNodePtr> {\n+    fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n@@ -182,7 +182,7 @@ impl Diagnostic for BreakOutsideOfLoop {\n     fn message(&self) -> String {\n         \"break outside of loop\".to_string()\n     }\n-    fn fix_source(&self) -> InFile<SyntaxNodePtr> {\n+    fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n@@ -209,7 +209,7 @@ impl Diagnostic for MissingUnsafe {\n     fn message(&self) -> String {\n         format!(\"This operation is unsafe and requires an unsafe function or block\")\n     }\n-    fn fix_source(&self) -> InFile<SyntaxNodePtr> {\n+    fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n@@ -239,7 +239,7 @@ impl Diagnostic for MismatchedArgCount {\n         let s = if self.expected == 1 { \"\" } else { \"s\" };\n         format!(\"Expected {} argument{}, found {}\", self.expected, s, self.found)\n     }\n-    fn fix_source(&self) -> InFile<SyntaxNodePtr> {\n+    fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.call_expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {"}]}