{"sha": "22aa7f98c5cfb28aee0205f56ee1a6ee781ab2ba", "node_id": "C_kwDOAAsO6NoAKDIyYWE3Zjk4YzVjZmIyOGFlZTAyMDVmNTZlZTFhNmVlNzgxYWIyYmE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-04T17:46:11Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-04T17:46:11Z"}, "message": "call_function: make the unit-return-type case more convenient", "tree": {"sha": "3ec5c72b46cf4904f177f7f693b7c972b4360fd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ec5c72b46cf4904f177f7f693b7c972b4360fd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22aa7f98c5cfb28aee0205f56ee1a6ee781ab2ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22aa7f98c5cfb28aee0205f56ee1a6ee781ab2ba", "html_url": "https://github.com/rust-lang/rust/commit/22aa7f98c5cfb28aee0205f56ee1a6ee781ab2ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22aa7f98c5cfb28aee0205f56ee1a6ee781ab2ba/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "984b46cc7da5ce769652375898c8b7298b01a3da", "url": "https://api.github.com/repos/rust-lang/rust/commits/984b46cc7da5ce769652375898c8b7298b01a3da", "html_url": "https://github.com/rust-lang/rust/commit/984b46cc7da5ce769652375898c8b7298b01a3da"}], "stats": {"total": 36, "additions": 19, "deletions": 17}, "files": [{"sha": "d75b4f5fa6d2ab04ca5bf3c3d01651266b944335", "filename": "src/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22aa7f98c5cfb28aee0205f56ee1a6ee781ab2ba/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22aa7f98c5cfb28aee0205f56ee1a6ee781ab2ba/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=22aa7f98c5cfb28aee0205f56ee1a6ee781ab2ba", "patch": "@@ -289,7 +289,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n                 start_instance,\n                 Abi::Rust,\n                 &[Scalar::from_pointer(main_ptr, &ecx).into(), argc.into(), argv],\n-                &ret_place.into(),\n+                Some(&ret_place.into()),\n                 StackPopCleanup::Root { cleanup: true },\n             )?;\n         }\n@@ -298,7 +298,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n                 entry_instance,\n                 Abi::Rust,\n                 &[argc.into(), argv],\n-                &ret_place.into(),\n+                Some(&ret_place.into()),\n                 StackPopCleanup::Root { cleanup: true },\n             )?;\n         }"}, {"sha": "c051d44fa25617eb01c167c29fc7cec37279ac74", "filename": "src/helpers.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/22aa7f98c5cfb28aee0205f56ee1a6ee781ab2ba/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22aa7f98c5cfb28aee0205f56ee1a6ee781ab2ba/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=22aa7f98c5cfb28aee0205f56ee1a6ee781ab2ba", "patch": "@@ -235,12 +235,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n     /// Call a function: Push the stack frame and pass the arguments.\n     /// For now, arguments must be scalars (so that the caller does not have to know the layout).\n+    ///\n+    /// If you do not provie a return place, a dangling zero-sized place will be created\n+    /// for your convenience.\n     fn call_function(\n         &mut self,\n         f: ty::Instance<'tcx>,\n         caller_abi: Abi,\n         args: &[Immediate<Tag>],\n-        dest: &PlaceTy<'tcx, Tag>,\n+        dest: Option<&PlaceTy<'tcx, Tag>>,\n         stack_pop: StackPopCleanup,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n@@ -256,7 +259,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // Push frame.\n         let mir = this.load_mir(f.def, None)?;\n-        this.push_stack_frame(f, mir, dest, stack_pop)?;\n+        let dest = match dest {\n+            Some(dest) => *dest,\n+            None => MPlaceTy::dangling(this.layout_of(mir.return_ty())?).into(),\n+        };\n+        this.push_stack_frame(f, mir, &dest, stack_pop)?;\n \n         // Initialize arguments.\n         let mut callee_args = this.frame().body.args_iter();"}, {"sha": "c356dd86676da67e5d3c0db63b74484f1c2205f3", "filename": "src/shims/panic.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/22aa7f98c5cfb28aee0205f56ee1a6ee781ab2ba/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22aa7f98c5cfb28aee0205f56ee1a6ee781ab2ba/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=22aa7f98c5cfb28aee0205f56ee1a6ee781ab2ba", "patch": "@@ -91,12 +91,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Now we make a function call, and pass `data` as first and only argument.\n         let f_instance = this.get_ptr_fn(try_fn)?.as_instance()?;\n         trace!(\"try_fn: {:?}\", f_instance);\n-        let ret_place = MPlaceTy::dangling(this.machine.layouts.unit).into();\n         this.call_function(\n             f_instance,\n             Abi::Rust,\n             &[data.into()],\n-            &ret_place,\n+            None,\n             // Directly return to caller.\n             StackPopCleanup::Goto { ret: Some(ret), unwind: StackPopUnwind::Skip },\n         )?;\n@@ -144,12 +143,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let f_instance =\n                 this.get_ptr_fn(this.scalar_to_ptr(catch_unwind.catch_fn)?)?.as_instance()?;\n             trace!(\"catch_fn: {:?}\", f_instance);\n-            let ret_place = MPlaceTy::dangling(this.machine.layouts.unit).into();\n             this.call_function(\n                 f_instance,\n                 Abi::Rust,\n                 &[catch_unwind.data.into(), payload.into()],\n-                &ret_place,\n+                None,\n                 // Directly return to caller of `try`.\n                 StackPopCleanup::Goto { ret: Some(catch_unwind.ret), unwind: StackPopUnwind::Skip },\n             )?;\n@@ -175,7 +173,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             panic,\n             Abi::Rust,\n             &[msg.to_ref(this)],\n-            &MPlaceTy::dangling(this.machine.layouts.unit).into(),\n+            None,\n             StackPopCleanup::Goto { ret: None, unwind },\n         )\n     }\n@@ -204,7 +202,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     panic_bounds_check,\n                     Abi::Rust,\n                     &[index.into(), len.into()],\n-                    &MPlaceTy::dangling(this.machine.layouts.unit).into(),\n+                    None,\n                     StackPopCleanup::Goto {\n                         ret: None,\n                         unwind: match unwind {"}, {"sha": "5a72c872b04d067504749a048d54a3eda432cd1a", "filename": "src/shims/tls.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/22aa7f98c5cfb28aee0205f56ee1a6ee781ab2ba/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22aa7f98c5cfb28aee0205f56ee1a6ee781ab2ba/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=22aa7f98c5cfb28aee0205f56ee1a6ee781ab2ba", "patch": "@@ -253,12 +253,11 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // The signature of this function is `unsafe extern \"system\" fn(h: c::LPVOID, dwReason: c::DWORD, pv: c::LPVOID)`.\n         let reason = this.eval_path_scalar(&[\"std\", \"sys\", \"windows\", \"c\", \"DLL_THREAD_DETACH\"])?;\n-        let ret_place = MPlaceTy::dangling(this.machine.layouts.unit).into();\n         this.call_function(\n             thread_callback,\n             Abi::System { unwind: false },\n             &[Scalar::null_ptr(this).into(), reason.into(), Scalar::null_ptr(this).into()],\n-            &ret_place,\n+            None,\n             StackPopCleanup::Root { cleanup: true },\n         )?;\n \n@@ -276,12 +275,11 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if let Some((instance, data)) = this.machine.tls.macos_thread_dtors.remove(&thread_id) {\n             trace!(\"Running macos dtor {:?} on {:?} at {:?}\", instance, data, thread_id);\n \n-            let ret_place = MPlaceTy::dangling(this.machine.layouts.unit).into();\n             this.call_function(\n                 instance,\n                 Abi::C { unwind: false },\n                 &[data.into()],\n-                &ret_place,\n+                None,\n                 StackPopCleanup::Root { cleanup: true },\n             )?;\n \n@@ -319,12 +317,11 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 \"data can't be NULL when dtor is called!\"\n             );\n \n-            let ret_place = MPlaceTy::dangling(this.machine.layouts.unit).into();\n             this.call_function(\n                 instance,\n                 Abi::C { unwind: false },\n                 &[ptr.into()],\n-                &ret_place,\n+                None,\n                 StackPopCleanup::Root { cleanup: true },\n             )?;\n "}, {"sha": "8dc5f81354a32b9bfee25023134bb78b9b25adea", "filename": "src/shims/unix/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22aa7f98c5cfb28aee0205f56ee1a6ee781ab2ba/src%2Fshims%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22aa7f98c5cfb28aee0205f56ee1a6ee781ab2ba/src%2Fshims%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fthread.rs?ref=22aa7f98c5cfb28aee0205f56ee1a6ee781ab2ba", "patch": "@@ -47,7 +47,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             instance,\n             Abi::C { unwind: false },\n             &[*func_arg],\n-            &ret_place.into(),\n+            Some(&ret_place.into()),\n             StackPopCleanup::Root { cleanup: true },\n         )?;\n "}]}