{"sha": "e08a6c2068aad3539cf0fa58e097962e3a3cf0b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwOGE2YzIwNjhhYWQzNTM5Y2YwZmE1OGUwOTc5NjJlM2EzY2YwYjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-14T21:33:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-14T21:33:17Z"}, "message": "Auto merge of #34797 - doomrobo:fix-import-trait-method, r=jseyfried\n\nFixed issue where importing a trait method directly and then calling the method causes a compiler panic\n\nThe code below triggers the panic, and is included in a new regression test.\n\n```rust\ntrait Foo {\n    fn foo();\n}\n\nuse Foo::foo;\n\nfn main() {\n    foo();\n}\n```\nThe bug is caused by `librustc_resolve` allowing the illegal binding to be imported even after displaying the error message above.\n\nThe fix amounts to importing a dummy binding (`rustc::hir::def::Def::Err`) instead of the actual trait method.", "tree": {"sha": "1f30733ee9c15f00428faa79f64acb2c9dab6a1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f30733ee9c15f00428faa79f64acb2c9dab6a1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e08a6c2068aad3539cf0fa58e097962e3a3cf0b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e08a6c2068aad3539cf0fa58e097962e3a3cf0b5", "html_url": "https://github.com/rust-lang/rust/commit/e08a6c2068aad3539cf0fa58e097962e3a3cf0b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e08a6c2068aad3539cf0fa58e097962e3a3cf0b5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78d49bfac2bbcd48de522199212a1209f498e834", "url": "https://api.github.com/repos/rust-lang/rust/commits/78d49bfac2bbcd48de522199212a1209f498e834", "html_url": "https://github.com/rust-lang/rust/commit/78d49bfac2bbcd48de522199212a1209f498e834"}, {"sha": "5a99d798577a1e5a3e5434bad4b68835b708f6c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a99d798577a1e5a3e5434bad4b68835b708f6c0", "html_url": "https://github.com/rust-lang/rust/commit/5a99d798577a1e5a3e5434bad4b68835b708f6c0"}], "stats": {"total": 45, "additions": 35, "deletions": 10}, "files": [{"sha": "681d9ec735b4fd1f491cb6e5e508299be29ff2bd", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e08a6c2068aad3539cf0fa58e097962e3a3cf0b5/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08a6c2068aad3539cf0fa58e097962e3a3cf0b5/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=e08a6c2068aad3539cf0fa58e097962e3a3cf0b5", "patch": "@@ -400,26 +400,30 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         }\n     }\n \n-    /// Resolves an `ImportResolvingError` into the correct enum discriminant\n-    /// and passes that on to `resolve_error`.\n-    fn import_resolving_error(&self, e: ImportResolvingError<'b>) {\n-        // If it's a single failed import then create a \"fake\" import\n-        // resolution for it so that later resolve stages won't complain.\n-        if let SingleImport { target, .. } = e.import_directive.subclass {\n+    // Define a \"dummy\" resolution containing a Def::Err as a placeholder for a\n+    // failed resolution\n+    fn import_dummy_binding(&self, source_module: Module<'b>, directive: &'b ImportDirective<'b>) {\n+        if let SingleImport { target, .. } = directive.subclass {\n             let dummy_binding = self.resolver.arenas.alloc_name_binding(NameBinding {\n                 kind: NameBindingKind::Def(Def::Err),\n                 span: DUMMY_SP,\n                 vis: ty::Visibility::Public,\n             });\n-            let dummy_binding = e.import_directive.import(dummy_binding, None);\n+            let dummy_binding = directive.import(dummy_binding, None);\n \n-            let _ = e.source_module.try_define_child(target, ValueNS, dummy_binding.clone());\n-            let _ = e.source_module.try_define_child(target, TypeNS, dummy_binding);\n+            let _ = source_module.try_define_child(target, ValueNS, dummy_binding.clone());\n+            let _ = source_module.try_define_child(target, TypeNS, dummy_binding);\n         }\n+    }\n \n+    /// Resolves an `ImportResolvingError` into the correct enum discriminant\n+    /// and passes that on to `resolve_error`.\n+    fn import_resolving_error(&self, e: ImportResolvingError<'b>) {\n+        // If the error is a single failed import then create a \"fake\" import\n+        // resolution for it so that later resolve stages won't complain.\n+        self.import_dummy_binding(e.source_module, e.import_directive);\n         let path = import_path_to_string(&e.import_directive.module_path,\n                                          &e.import_directive.subclass);\n-\n         resolve_error(self.resolver,\n                       e.span,\n                       ResolutionError::UnresolvedImport(Some((&path, &e.help))));\n@@ -500,6 +504,10 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                 if !binding.is_importable() {\n                     let msg = format!(\"`{}` is not directly importable\", target);\n                     span_err!(self.resolver.session, directive.span, E0253, \"{}\", &msg);\n+                    // Do not import this illegal binding. Import a dummy binding and pretend\n+                    // everything is fine\n+                    self.import_dummy_binding(module_, directive);\n+                    return Success(());\n                 }\n \n                 let privacy_error = if !self.resolver.is_accessible(binding.vis) {"}, {"sha": "75081b10d862ed42a7648d7867f8020a62176c29", "filename": "src/test/compile-fail/import-trait-method.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e08a6c2068aad3539cf0fa58e097962e3a3cf0b5/src%2Ftest%2Fcompile-fail%2Fimport-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e08a6c2068aad3539cf0fa58e097962e3a3cf0b5/src%2Ftest%2Fcompile-fail%2Fimport-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-trait-method.rs?ref=e08a6c2068aad3539cf0fa58e097962e3a3cf0b5", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    fn foo();\n+}\n+\n+use Foo::foo; //~ ERROR not directly importable\n+\n+fn main() { foo(); }"}]}