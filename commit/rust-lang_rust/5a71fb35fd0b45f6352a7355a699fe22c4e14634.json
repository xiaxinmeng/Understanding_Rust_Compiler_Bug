{"sha": "5a71fb35fd0b45f6352a7355a699fe22c4e14634", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNzFmYjM1ZmQwYjQ1ZjYzNTJhNzM1NWE2OTlmZTIyYzRlMTQ2MzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-24T00:00:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-24T00:00:28Z"}, "message": "Auto merge of #36684 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 7 pull requests\n\n- Successful merges: #36018, #36498, #36500, #36559, #36566, #36578, #36664\n- Failed merges:", "tree": {"sha": "1b83f4c699285fd3f06f81e0e54eaf99c21fe478", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b83f4c699285fd3f06f81e0e54eaf99c21fe478"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a71fb35fd0b45f6352a7355a699fe22c4e14634", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a71fb35fd0b45f6352a7355a699fe22c4e14634", "html_url": "https://github.com/rust-lang/rust/commit/5a71fb35fd0b45f6352a7355a699fe22c4e14634", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a71fb35fd0b45f6352a7355a699fe22c4e14634/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee959a8cbe8d2931546248ac61f278e38ae8bc68", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee959a8cbe8d2931546248ac61f278e38ae8bc68", "html_url": "https://github.com/rust-lang/rust/commit/ee959a8cbe8d2931546248ac61f278e38ae8bc68"}, {"sha": "f342ece6d47d4fad07d3306ce0210a9927cb9b86", "url": "https://api.github.com/repos/rust-lang/rust/commits/f342ece6d47d4fad07d3306ce0210a9927cb9b86", "html_url": "https://github.com/rust-lang/rust/commit/f342ece6d47d4fad07d3306ce0210a9927cb9b86"}], "stats": {"total": 187, "additions": 112, "deletions": 75}, "files": [{"sha": "586b29646c59ea7ac0945c3c72ab7afc0d94ec2a", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a71fb35fd0b45f6352a7355a699fe22c4e14634/configure", "raw_url": "https://github.com/rust-lang/rust/raw/5a71fb35fd0b45f6352a7355a699fe22c4e14634/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=5a71fb35fd0b45f6352a7355a699fe22c4e14634", "patch": "@@ -676,7 +676,7 @@ valopt_nosave local-rust-root \"/usr/local\" \"set prefix for local rust binary\"\n valopt_nosave host \"${CFG_BUILD}\" \"GNUs ./configure syntax LLVM host triples\"\n valopt_nosave target \"${CFG_HOST}\" \"GNUs ./configure syntax LLVM target triples\"\n valopt_nosave mandir \"${CFG_PREFIX}/share/man\" \"install man pages in PATH\"\n-valopt_nosave docdir \"${CFG_PREFIX}/share/doc/rust\" \"install man pages in PATH\"\n+valopt_nosave docdir \"${CFG_PREFIX}/share/doc/rust\" \"install documentation in PATH\"\n \n # On Windows this determines root of the subtree for target libraries.\n # Host runtime libs always go to 'bin'."}, {"sha": "2c2260a8e60c76fc76cbeddeffd1dd5048b92cc0", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=5a71fb35fd0b45f6352a7355a699fe22c4e14634", "patch": "@@ -131,7 +131,8 @@ def stage0_data(rust_root):\n def format_build_time(duration):\n     return str(datetime.timedelta(seconds=int(duration)))\n \n-class RustBuild:\n+\n+class RustBuild(object):\n     def download_stage0(self):\n         cache_dst = os.path.join(self.build_dir, \"cache\")\n         rustc_cache = os.path.join(cache_dst, self.stage0_rustc_date())\n@@ -142,7 +143,7 @@ def download_stage0(self):\n             os.makedirs(cargo_cache)\n \n         if self.rustc().startswith(self.bin_root()) and \\\n-           (not os.path.exists(self.rustc()) or self.rustc_out_of_date()):\n+                (not os.path.exists(self.rustc()) or self.rustc_out_of_date()):\n             if os.path.exists(self.bin_root()):\n                 shutil.rmtree(self.bin_root())\n             channel = self.stage0_rustc_channel()\n@@ -165,7 +166,7 @@ def download_stage0(self):\n                 f.write(self.stage0_rustc_date())\n \n         if self.cargo().startswith(self.bin_root()) and \\\n-           (not os.path.exists(self.cargo()) or self.cargo_out_of_date()):\n+                (not os.path.exists(self.cargo()) or self.cargo_out_of_date()):\n             channel = self.stage0_cargo_channel()\n             filename = \"cargo-{}-{}.tar.gz\".format(channel, self.build)\n             url = \"https://static.rust-lang.org/cargo-dist/\" + self.stage0_cargo_date()\n@@ -238,8 +239,8 @@ def rustc(self):\n \n     def get_string(self, line):\n         start = line.find('\"')\n-        end = start + 1 + line[start+1:].find('\"')\n-        return line[start+1:end]\n+        end = start + 1 + line[start + 1:].find('\"')\n+        return line[start + 1:end]\n \n     def exe_suffix(self):\n         if sys.platform == 'win32':"}, {"sha": "262db5673e8cf2c1775341aab6e9b1bc2fa12ec6", "filename": "src/doc/rust.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Fdoc%2Frust.css", "raw_url": "https://github.com/rust-lang/rust/raw/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Fdoc%2Frust.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.css?ref=5a71fb35fd0b45f6352a7355a699fe22c4e14634", "patch": "@@ -159,7 +159,7 @@ em {\n \n footer {\n     border-top: 1px solid #ddd;\n-    font-size: 14.3px;\n+    font-size: 14px;\n     font-style: italic;\n     padding-top: 5px;\n     margin-top: 3em;"}, {"sha": "eb562877c85732702a0d449808f67f4d463fd030", "filename": "src/etc/debugger_pretty_printers_common.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Fetc%2Fdebugger_pretty_printers_common.py", "raw_url": "https://github.com/rust-lang/rust/raw/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Fetc%2Fdebugger_pretty_printers_common.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fdebugger_pretty_printers_common.py?ref=5a71fb35fd0b45f6352a7355a699fe22c4e14634", "patch": "@@ -328,7 +328,7 @@ def extract_length_and_ptr_from_slice(slice_val):\n UNQUALIFIED_TYPE_MARKERS = frozenset([\"(\", \"[\", \"&\", \"*\"])\n \n def extract_type_name(qualified_type_name):\n-    '''Extracts the type name from a fully qualified path'''\n+    \"\"\"Extracts the type name from a fully qualified path\"\"\"\n     if qualified_type_name[0] in UNQUALIFIED_TYPE_MARKERS:\n         return qualified_type_name\n "}, {"sha": "afac8d6bbaefcdc4d33984e22fa91210e89a37ee", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=5a71fb35fd0b45f6352a7355a699fe22c4e14634", "patch": "@@ -170,7 +170,7 @@ def rust_pretty_printer_lookup_function(gdb_val):\n #=------------------------------------------------------------------------------\n # Pretty Printer Classes\n #=------------------------------------------------------------------------------\n-class RustStructPrinter:\n+class RustStructPrinter(object):\n     def __init__(self, val, omit_first_field, omit_type_name, is_tuple_like):\n         self.__val = val\n         self.__omit_first_field = omit_first_field\n@@ -205,11 +205,12 @@ def display_hint(self):\n             return \"\"\n \n \n-class RustSlicePrinter:\n+class RustSlicePrinter(object):\n     def __init__(self, val):\n         self.__val = val\n \n-    def display_hint(self):\n+    @staticmethod\n+    def display_hint():\n         return \"array\"\n \n     def to_string(self):\n@@ -226,7 +227,7 @@ def children(self):\n             yield (str(index), (raw_ptr + index).dereference())\n \n \n-class RustStringSlicePrinter:\n+class RustStringSlicePrinter(object):\n     def __init__(self, val):\n         self.__val = val\n \n@@ -236,11 +237,12 @@ def to_string(self):\n         return '\"%s\"' % raw_ptr.string(encoding=\"utf-8\", length=length)\n \n \n-class RustStdVecPrinter:\n+class RustStdVecPrinter(object):\n     def __init__(self, val):\n         self.__val = val\n \n-    def display_hint(self):\n+    @staticmethod\n+    def display_hint():\n         return \"array\"\n \n     def to_string(self):\n@@ -255,7 +257,7 @@ def children(self):\n             yield (str(index), (gdb_ptr + index).dereference())\n \n \n-class RustStdStringPrinter:\n+class RustStdStringPrinter(object):\n     def __init__(self, val):\n         self.__val = val\n \n@@ -266,7 +268,7 @@ def to_string(self):\n                                                             length=length)\n \n \n-class RustCStyleVariantPrinter:\n+class RustCStyleVariantPrinter(object):\n     def __init__(self, val):\n         assert val.type.get_dwarf_type_kind() == rustpp.DWARF_TYPE_CODE_ENUM\n         self.__val = val\n@@ -275,7 +277,7 @@ def to_string(self):\n         return str(self.__val.get_wrapped_value())\n \n \n-class IdentityPrinter:\n+class IdentityPrinter(object):\n     def __init__(self, string):\n         self.string = string\n "}, {"sha": "4952cf4f82c3b22c026200f20a5b83d3aad94c7d", "filename": "src/etc/lldb_batchmode.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Fetc%2Flldb_batchmode.py", "raw_url": "https://github.com/rust-lang/rust/raw/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Fetc%2Flldb_batchmode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flldb_batchmode.py?ref=5a71fb35fd0b45f6352a7355a699fe22c4e14634", "patch": "@@ -37,14 +37,14 @@\n \n \n def print_debug(s):\n-    \"Print something if DEBUG_OUTPUT is True\"\n+    \"\"\"Print something if DEBUG_OUTPUT is True\"\"\"\n     global DEBUG_OUTPUT\n     if DEBUG_OUTPUT:\n         print(\"DEBUG: \" + str(s))\n \n \n def normalize_whitespace(s):\n-    \"Replace newlines, tabs, multiple spaces, etc with exactly one space\"\n+    \"\"\"Replace newlines, tabs, multiple spaces, etc with exactly one space\"\"\"\n     return re.sub(\"\\s+\", \" \", s)\n \n \n@@ -71,7 +71,7 @@ def breakpoint_callback(frame, bp_loc, dict):\n \n \n def execute_command(command_interpreter, command):\n-    \"Executes a single CLI command\"\n+    \"\"\"Executes a single CLI command\"\"\"\n     global new_breakpoints\n     global registered_breakpoints\n "}, {"sha": "335acae5fb6f7df5817da3b5a14b6bfb4f539f4e", "filename": "src/etc/lldb_rust_formatters.py", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Fetc%2Flldb_rust_formatters.py", "raw_url": "https://github.com/rust-lang/rust/raw/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Fetc%2Flldb_rust_formatters.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flldb_rust_formatters.py?ref=5a71fb35fd0b45f6352a7355a699fe22c4e14634", "patch": "@@ -171,10 +171,10 @@ def print_val(lldb_val, internal_dict):\n #=--------------------------------------------------------------------------------------------------\n \n def print_struct_val(val, internal_dict, omit_first_field, omit_type_name, is_tuple_like):\n-    '''\n+    \"\"\"\n     Prints a struct, tuple, or tuple struct value with Rust syntax.\n     Ignores any fields before field_start_index.\n-    '''\n+    \"\"\"\n     assert val.type.get_dwarf_type_kind() == rustpp.DWARF_TYPE_CODE_STRUCT\n \n     if omit_type_name:\n@@ -221,7 +221,7 @@ def render_child(child_index):\n                        \"body\": body}\n \n def print_pointer_val(val, internal_dict):\n-    '''Prints a pointer value with Rust syntax'''\n+    \"\"\"Prints a pointer value with Rust syntax\"\"\"\n     assert val.type.get_dwarf_type_kind() == rustpp.DWARF_TYPE_CODE_PTR\n     sigil = \"&\"\n     type_name = val.type.get_unqualified_type_name()\n@@ -275,8 +275,8 @@ def print_std_string_val(val, internal_dict):\n #=--------------------------------------------------------------------------------------------------\n \n def print_array_of_values(array_name, data_ptr_val, length, internal_dict):\n-    '''Prints a contigous memory range, interpreting it as values of the\n-       pointee-type of data_ptr_val.'''\n+    \"\"\"Prints a contigous memory range, interpreting it as values of the\n+       pointee-type of data_ptr_val.\"\"\"\n \n     data_ptr_type = data_ptr_val.type\n     assert data_ptr_type.get_dwarf_type_kind() == rustpp.DWARF_TYPE_CODE_PTR"}, {"sha": "e3c08bb35e075cf9b4de507728884fb8504952f4", "filename": "src/etc/platform-intrinsics/generator.py", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py", "raw_url": "https://github.com/rust-lang/rust/raw/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py?ref=5a71fb35fd0b45f6352a7355a699fe22c4e14634", "patch": "@@ -119,16 +119,19 @@ class Void(Type):\n     def __init__(self):\n         Type.__init__(self, 0)\n \n-    def compiler_ctor(self):\n+    @staticmethod\n+    def compiler_ctor():\n         return '::VOID'\n \n     def compiler_ctor_ref(self):\n         return '&' + self.compiler_ctor()\n \n-    def rust_name(self):\n+    @staticmethod\n+    def rust_name():\n         return '()'\n \n-    def type_info(self, platform_info):\n+    @staticmethod\n+    def type_info(platform_info):\n         return None\n \n     def __eq__(self, other):\n@@ -282,7 +285,7 @@ def __eq__(self, other):\n \n class Pointer(Type):\n     def __init__(self, elem, llvm_elem, const):\n-        self._elem = elem;\n+        self._elem = elem\n         self._llvm_elem = llvm_elem\n         self._const = const\n         Type.__init__(self, BITWIDTH_POINTER)\n@@ -503,7 +506,7 @@ def monomorphise(self):\n             # must be a power of two\n             assert width & (width - 1) == 0\n             def recur(processed, untouched):\n-                if untouched == []:\n+                if not untouched:\n                     ret = processed[0]\n                     args = processed[1:]\n                     yield MonomorphicIntrinsic(self._platform, self.intrinsic, width,\n@@ -756,22 +759,26 @@ class ExternBlock(object):\n     def __init__(self):\n         pass\n \n-    def open(self, platform):\n+    @staticmethod\n+    def open(platform):\n         return 'extern \"platform-intrinsic\" {'\n \n-    def render(self, mono):\n+    @staticmethod\n+    def render(mono):\n         return '    fn {}{}{};'.format(mono.platform_prefix(),\n                                        mono.intrinsic_name(),\n                                        mono.intrinsic_signature())\n \n-    def close(self):\n+    @staticmethod\n+    def close():\n         return '}'\n \n class CompilerDefs(object):\n     def __init__(self):\n         pass\n \n-    def open(self, platform):\n+    @staticmethod\n+    def open(platform):\n         return '''\\\n // Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n@@ -798,7 +805,8 @@ def open(self, platform):\n     if !name.starts_with(\"{0}\") {{ return None }}\n     Some(match &name[\"{0}\".len()..] {{'''.format(platform.platform_prefix())\n \n-    def render(self, mono):\n+    @staticmethod\n+    def render(mono):\n         return '''\\\n         \"{}\" => Intrinsic {{\n             inputs: {{ static INPUTS: [&'static Type; {}] = [{}]; &INPUTS }},\n@@ -810,7 +818,8 @@ def render(self, mono):\n                       mono.compiler_ret(),\n                       mono.llvm_name())\n \n-    def close(self):\n+    @staticmethod\n+    def close():\n         return '''\\\n         _ => return None,\n     })"}, {"sha": "bc141877b373f49b0c19b5977b2e25ada528fc45", "filename": "src/etc/test-float-parse/runtests.py", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Fetc%2Ftest-float-parse%2Fruntests.py", "raw_url": "https://github.com/rust-lang/rust/raw/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Fetc%2Ftest-float-parse%2Fruntests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Fruntests.py?ref=5a71fb35fd0b45f6352a7355a699fe22c4e14634", "patch": "@@ -177,15 +177,13 @@ def run(test):\n \n \n def interact(proc, queue):\n-    line = \"\"\n     n = 0\n     while proc.poll() is None:\n         line = proc.stdout.readline()\n         if not line:\n             continue\n         assert line.endswith('\\n'), \"incomplete line: \" + repr(line)\n         queue.put(line)\n-        line = \"\"\n         n += 1\n         if n % UPDATE_EVERY_N == 0:\n             msg(\"got\", str(n // 1000) + \"k\", \"records\")"}, {"sha": "bddc83f63d25de55f785edddd399dfdd7fcc7645", "filename": "src/etc/unicode.py", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=5a71fb35fd0b45f6352a7355a699fe22c4e14634", "patch": "@@ -82,28 +82,28 @@ def load_unicode_data(f):\n     canon_decomp = {}\n     compat_decomp = {}\n \n-    udict = {};\n-    range_start = -1;\n+    udict = {}\n+    range_start = -1\n     for line in fileinput.input(f):\n-        data = line.split(';');\n+        data = line.split(';')\n         if len(data) != 15:\n             continue\n-        cp = int(data[0], 16);\n+        cp = int(data[0], 16)\n         if is_surrogate(cp):\n             continue\n         if range_start >= 0:\n             for i in xrange(range_start, cp):\n-                udict[i] = data;\n-            range_start = -1;\n+                udict[i] = data\n+            range_start = -1\n         if data[1].endswith(\", First>\"):\n-            range_start = cp;\n-            continue;\n-        udict[cp] = data;\n+            range_start = cp\n+            continue\n+        udict[cp] = data\n \n     for code in udict:\n-        [code_org, name, gencat, combine, bidi,\n+        (code_org, name, gencat, combine, bidi,\n          decomp, deci, digit, num, mirror,\n-         old, iso, upcase, lowcase, titlecase ] = udict[code];\n+         old, iso, upcase, lowcase, titlecase) = udict[code]\n \n         # generate char to char direct common and simple conversions\n         # uppercase to lowercase\n@@ -382,7 +382,7 @@ def emit_bool_trie(f, name, t_data, is_pub=True):\n     global bytes_old, bytes_new\n     bytes_old += 8 * len(t_data)\n     CHUNK = 64\n-    rawdata = [False] * 0x110000;\n+    rawdata = [False] * 0x110000\n     for (lo, hi) in t_data:\n         for cp in range(lo, hi + 1):\n             rawdata[cp] = True"}, {"sha": "452e9f74829efb0938401e7531c912ee8eec4072", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=5a71fb35fd0b45f6352a7355a699fe22c4e14634", "patch": "@@ -726,18 +726,18 @@ impl<T> VecDeque<T> {\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let mut vector: VecDeque<u32> = VecDeque::new();\n+    /// let mut vector = VecDeque::new();\n     ///\n     /// vector.push_back(0);\n     /// vector.push_back(1);\n     /// vector.push_back(2);\n     ///\n-    /// assert_eq!(vector.as_slices(), (&[0u32, 1, 2] as &[u32], &[] as &[u32]));\n+    /// assert_eq!(vector.as_slices(), (&[0, 1, 2][..], &[][..]));\n     ///\n     /// vector.push_front(10);\n     /// vector.push_front(9);\n     ///\n-    /// assert_eq!(vector.as_slices(), (&[9u32, 10] as &[u32], &[0u32, 1, 2] as &[u32]));\n+    /// assert_eq!(vector.as_slices(), (&[9, 10][..], &[0, 1, 2][..]));\n     /// ```\n     #[inline]\n     #[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]\n@@ -764,7 +764,7 @@ impl<T> VecDeque<T> {\n     /// ```\n     /// use std::collections::VecDeque;\n     ///\n-    /// let mut vector: VecDeque<u32> = VecDeque::new();\n+    /// let mut vector = VecDeque::new();\n     ///\n     /// vector.push_back(0);\n     /// vector.push_back(1);\n@@ -774,7 +774,7 @@ impl<T> VecDeque<T> {\n     ///\n     /// vector.as_mut_slices().0[0] = 42;\n     /// vector.as_mut_slices().1[0] = 24;\n-    /// assert_eq!(vector.as_slices(), (&[42u32, 10] as &[u32], &[24u32, 1] as &[u32]));\n+    /// assert_eq!(vector.as_slices(), (&[42, 10][..], &[24, 1][..]));\n     /// ```\n     #[inline]\n     #[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]"}, {"sha": "70b0b810c6c4805801c5b41095a3ae045ae4de9b", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=5a71fb35fd0b45f6352a7355a699fe22c4e14634", "patch": "@@ -180,7 +180,7 @@ impl<'tcx> Mir<'tcx> {\n         Some(Local::new(idx))\n     }\n \n-    /// Counts the number of locals, such that that local_index\n+    /// Counts the number of locals, such that local_index\n     /// will always return an index smaller than this count.\n     pub fn count_locals(&self) -> usize {\n         self.arg_decls.len() +"}, {"sha": "717b8923a16358a5edcccdcfc421f90bf64615d5", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5a71fb35fd0b45f6352a7355a699fe22c4e14634", "patch": "@@ -2808,7 +2808,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     /// See `ParameterEnvironment` struct def'n for details.\n     /// If you were using `free_id: NodeId`, you might try `self.region_maps.item_extent(free_id)`\n-    /// for the `free_id_outlive` parameter. (But note that that is not always quite right.)\n+    /// for the `free_id_outlive` parameter. (But note that this is not always quite right.)\n     pub fn construct_parameter_environment(self,\n                                            span: Span,\n                                            def_id: DefId,"}, {"sha": "6456b72dfb56cbe5b5bc78c9bd5bc811bbb0b81a", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=5a71fb35fd0b45f6352a7355a699fe22c4e14634", "patch": "@@ -473,7 +473,8 @@ impl EmitterWriter {\n         if spans_updated {\n             children.push(SubDiagnostic {\n                 level: Level::Note,\n-                message: \"this error originates in a macro from the standard library\".to_string(),\n+                message:\"this error originates in a macro outside of the current \\\n+                         crate\".to_string(),\n                 span: MultiSpan::new(),\n                 render_span: None\n             });"}, {"sha": "429bc7490fc7b34fa10f615b7bf36115d6026169", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=5a71fb35fd0b45f6352a7355a699fe22c4e14634", "patch": "@@ -153,7 +153,7 @@\n //! The collection algorithm handles this more or less transparently. If it is\n //! about to create a translation item for something with an external `DefId`,\n //! it will take a look if the MIR for that item is available, and if so just\n-//! proceed normally. If the MIR is not available, it assumes that that item is\n+//! proceed normally. If the MIR is not available, it assumes that the item is\n //! just linked to and no node is created; which is exactly what we want, since\n //! no machine code should be generated in the current crate for such an item.\n //!"}, {"sha": "881352cb73e181902748b7c5abdff3c86254d0ea", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=5a71fb35fd0b45f6352a7355a699fe22c4e14634", "patch": "@@ -17,7 +17,7 @@\n //! the `render_inner_with_highlighting` or `render_with_highlighting`\n //! functions. For more advanced use cases (if you want to supply your own css\n //! classes or control how the HTML is generated, or even generate something\n-//! other then HTML), then you should implement the the `Writer` trait and use a\n+//! other then HTML), then you should implement the `Writer` trait and use a\n //! `Classifier`.\n \n use html::escape::Escape;"}, {"sha": "9a6cded5b4ce7d2927f357968535dac4bfbd235a", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=5a71fb35fd0b45f6352a7355a699fe22c4e14634", "patch": "@@ -1,3 +1,5 @@\n+@import \"normalize.css\";\n+\n /**\n  * Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n  * file at the top-level directory of this distribution and at\n@@ -59,8 +61,6 @@\n     src: local('Source Code Pro Semibold'), url(\"SourceCodePro-Semibold.woff\") format('woff');\n }\n \n-@import \"normalize.css\";\n-\n * {\n   -webkit-box-sizing: border-box;\n      -moz-box-sizing: border-box;\n@@ -284,7 +284,7 @@ h3.impl > .out-of-band {\n     font-size: 21px;\n }\n \n-h4 > code, h3 > code, invisible > code {\n+h4 > code, h3 > code, .invisible > code {\n     position: inherit;\n }\n \n@@ -459,7 +459,8 @@ a {\n .content .search-results td:first-child { padding-right: 0; }\n .content .search-results td:first-child a { padding-right: 10px; }\n \n-tr.result span.primitive::after { content: ' (primitive type)'; font-style: italic; color: black}\n+tr.result span.primitive::after { content: ' (primitive type)'; font-style: italic; color: black;\n+}\n \n body.blur > :not(#help) {\n     filter: blur(8px);"}, {"sha": "6a9a24f69960a32c0750318e0318389132643a72", "filename": "src/librustdoc/html/static/styles/main.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css?ref=5a71fb35fd0b45f6352a7355a699fe22c4e14634", "patch": "@@ -107,7 +107,7 @@ nav.main .current {\n     border-bottom-color: #000;\n }\n nav.main .separator {\n-    border-color: 1px solid #000;\n+    border: 1px solid #000;\n }\n a {\n     color: #000;"}, {"sha": "d6a5efbd279a549f1ec5a9487fafc8d608ecb3b6", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=5a71fb35fd0b45f6352a7355a699fe22c4e14634", "patch": "@@ -228,9 +228,14 @@ impl CString {\n \n     /// Retakes ownership of a `CString` that was transferred to C.\n     ///\n+    /// Additionally, the length of the string will be recalculated from the pointer.\n+    ///\n+    /// # Safety\n+    ///\n     /// This should only ever be called with a pointer that was earlier\n-    /// obtained by calling `into_raw` on a `CString`. Additionally, the length\n-    /// of the string will be recalculated from the pointer.\n+    /// obtained by calling `into_raw` on a `CString`. Other usage (e.g. trying to take\n+    /// ownership of a string that was allocated by foreign code) is likely to lead\n+    /// to undefined behavior or allocator corruption.\n     #[stable(feature = \"cstr_memory\", since = \"1.4.0\")]\n     pub unsafe fn from_raw(ptr: *mut c_char) -> CString {\n         let len = libc::strlen(ptr) + 1; // Including the NUL byte"}, {"sha": "10a0c567e142f7a2f35092a5d913afc582b7cf55", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=5a71fb35fd0b45f6352a7355a699fe22c4e14634", "patch": "@@ -83,7 +83,7 @@ impl Duration {\n \n     /// Returns the number of whole seconds represented by this duration.\n     ///\n-    /// The extra precision represented by this duration is ignored (e.g. extra\n+    /// The extra precision represented by this duration is ignored (i.e. extra\n     /// nanoseconds are not represented in the returned value).\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n@@ -93,7 +93,7 @@ impl Duration {\n     ///\n     /// This method does **not** return the length of the duration when\n     /// represented by nanoseconds. The returned number always represents a\n-    /// fractional portion of a second (e.g. it is less than one billion).\n+    /// fractional portion of a second (i.e. it is less than one billion).\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n     pub fn subsec_nanos(&self) -> u32 { self.nanos }"}, {"sha": "f887459836c6b0baeb68279fa87ac334ff1a1428", "filename": "src/test/run-pass/issue-9837.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Ftest%2Frun-pass%2Fissue-9837.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Ftest%2Frun-pass%2Fissue-9837.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9837.rs?ref=5a71fb35fd0b45f6352a7355a699fe22c4e14634", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const C1: i32 = 0x12345678;\n+const C2: isize = C1 as i16 as isize;\n+\n+enum E {\n+    V = C2\n+}\n+\n+fn main() {\n+    assert_eq!(C2 as u64, E::V as u64);\n+}"}, {"sha": "87255dfe7747673b7be9b215df55da55c16fb64c", "filename": "src/test/ui/codemap_tests/bad-format-args.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr?ref=5a71fb35fd0b45f6352a7355a699fe22c4e14634", "patch": "@@ -4,23 +4,23 @@ error: requires at least a format string argument\n 12 |     format!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro from the standard library\n+   = note: this error originates in a macro outside of the current crate\n \n error: expected token: `,`\n   --> $DIR/bad-format-args.rs:13:5\n    |\n 13 |     format!(\"\" 1);\n    |     ^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro from the standard library\n+   = note: this error originates in a macro outside of the current crate\n \n error: expected token: `,`\n   --> $DIR/bad-format-args.rs:14:5\n    |\n 14 |     format!(\"\", 1 1);\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro from the standard library\n+   = note: this error originates in a macro outside of the current crate\n \n error: aborting due to 3 previous errors\n "}, {"sha": "d65b34f3f4164cf8dd7b912d4c777155240b9813", "filename": "src/test/ui/codemap_tests/issue-28308.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr?ref=5a71fb35fd0b45f6352a7355a699fe22c4e14634", "patch": "@@ -4,7 +4,7 @@ error: cannot apply unary operator `!` to type `&'static str`\n 12 |     assert!(\"foo\");\n    |     ^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro from the standard library\n+   = note: this error originates in a macro outside of the current crate\n \n error: aborting due to previous error\n "}, {"sha": "73a1c5bae85e274aa663a52cbf9673edc829a00d", "filename": "src/test/ui/codemap_tests/repair_span_std_macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Ftest%2Fui%2Fcodemap_tests%2Frepair_span_std_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Ftest%2Fui%2Fcodemap_tests%2Frepair_span_std_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Frepair_span_std_macros.stderr?ref=5a71fb35fd0b45f6352a7355a699fe22c4e14634", "patch": "@@ -5,7 +5,7 @@ error[E0282]: unable to infer enough type information about `_`\n    |             ^^^^^^ cannot infer type for `_`\n    |\n    = note: type annotations or generic parameter binding required\n-   = note: this error originates in a macro from the standard library\n+   = note: this error originates in a macro outside of the current crate\n \n error: aborting due to previous error\n "}, {"sha": "84db85ac092dbfbf3d199d7d489ca97983da83db", "filename": "src/test/ui/cross-crate-macro-backtrace/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a71fb35fd0b45f6352a7355a699fe22c4e14634/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.stderr?ref=5a71fb35fd0b45f6352a7355a699fe22c4e14634", "patch": "@@ -4,7 +4,7 @@ error: invalid reference to argument `0` (no arguments given)\n 16 |     myprintln!(\"{}\"); //~ ERROR in this macro\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro from the standard library\n+   = note: this error originates in a macro outside of the current crate\n \n error: aborting due to previous error\n "}]}