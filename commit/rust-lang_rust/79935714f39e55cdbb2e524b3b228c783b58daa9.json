{"sha": "79935714f39e55cdbb2e524b3b228c783b58daa9", "node_id": "C_kwDOAAsO6NoAKDc5OTM1NzE0ZjM5ZTU1Y2RiYjJlNTI0YjNiMjI4Yzc4M2I1OGRhYTk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-20T09:21:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-20T09:21:14Z"}, "message": "Rollup merge of #90930 - Nilstrieb:fix-non-const-value-ice, r=estebank\n\nFix `non-constant value` ICE (#90878)\n\nThis also fixes the same suggestion, which was kind of broken, because it just searched for the last occurence of `const` to replace with a `let`. This works great in some cases, but when there is no const and a leading space to the file, it doesn't work and panic with overflow because it thought that it had found a const.\n\nI also changed the suggestion to only trigger if the `const` and the non-constant value are on the same line, because if they aren't, the suggestion is very likely to be wrong.\n\nAlso don't trigger the suggestion if the found `const` is on line 0, because that triggers the ICE.\n\nAsking Esteban to review since he was the last one to change the relevant code.\n\nr? ``@estebank``\n\nFixes #90878", "tree": {"sha": "9497d608f6633f4ba3cc95fa3a550c1f8e512f89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9497d608f6633f4ba3cc95fa3a550c1f8e512f89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79935714f39e55cdbb2e524b3b228c783b58daa9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhmL4KCRBK7hj4Ov3rIwAAAaYIACGDhB5Vu1/iyT9LNj/Nae5f\nlLrz9cJ1hjYYlAHN8jOVWdBobXlP17UpTHDI59FHeZYz5sJti/ttLFNgANSSLjui\nujvaoGPVwmp8mXhO01LSgddTXPeoZZ2G26TAUUT0ZcClL7KizEQBS7Kb0t5nDsgL\nZylUaJN6h1nAX4uOmJGwkG737RfAw37umIyWRodG7S7QM/bNjIN0EeibdmT5soPd\nCzgLcoPHrUSIxmsgjORe9u/PqmP3XXxuBZU3K5LDH5yLWyftrfgVUtwfN274qy0M\nkVzs/TyrqxBKnaJgE+KVgPjfJBbF/sewRsvCNIyynFZzQaJ3+efxpcWoEIkLb+8=\n=SuSe\n-----END PGP SIGNATURE-----\n", "payload": "tree 9497d608f6633f4ba3cc95fa3a550c1f8e512f89\nparent 81f3ae8997e9e5806dadc5c2ef2786407c1f795d\nparent 96c37c8a6a4bbfe34a81754e174bfc2e41d194f6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1637400074 +0100\ncommitter GitHub <noreply@github.com> 1637400074 +0100\n\nRollup merge of #90930 - Nilstrieb:fix-non-const-value-ice, r=estebank\n\nFix `non-constant value` ICE (#90878)\n\nThis also fixes the same suggestion, which was kind of broken, because it just searched for the last occurence of `const` to replace with a `let`. This works great in some cases, but when there is no const and a leading space to the file, it doesn't work and panic with overflow because it thought that it had found a const.\n\nI also changed the suggestion to only trigger if the `const` and the non-constant value are on the same line, because if they aren't, the suggestion is very likely to be wrong.\n\nAlso don't trigger the suggestion if the found `const` is on line 0, because that triggers the ICE.\n\nAsking Esteban to review since he was the last one to change the relevant code.\n\nr? ``@estebank``\n\nFixes #90878\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79935714f39e55cdbb2e524b3b228c783b58daa9", "html_url": "https://github.com/rust-lang/rust/commit/79935714f39e55cdbb2e524b3b228c783b58daa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79935714f39e55cdbb2e524b3b228c783b58daa9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81f3ae8997e9e5806dadc5c2ef2786407c1f795d", "url": "https://api.github.com/repos/rust-lang/rust/commits/81f3ae8997e9e5806dadc5c2ef2786407c1f795d", "html_url": "https://github.com/rust-lang/rust/commit/81f3ae8997e9e5806dadc5c2ef2786407c1f795d"}, {"sha": "96c37c8a6a4bbfe34a81754e174bfc2e41d194f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/96c37c8a6a4bbfe34a81754e174bfc2e41d194f6", "html_url": "https://github.com/rust-lang/rust/commit/96c37c8a6a4bbfe34a81754e174bfc2e41d194f6"}], "stats": {"total": 128, "additions": 125, "deletions": 3}, "files": [{"sha": "2e4cb4ff7270d75cd451d9b0f3e3ef301667ec56", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/79935714f39e55cdbb2e524b3b228c783b58daa9/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79935714f39e55cdbb2e524b3b228c783b58daa9/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=79935714f39e55cdbb2e524b3b228c783b58daa9", "patch": "@@ -450,12 +450,24 @@ impl<'a> Resolver<'a> {\n                 // let foo =...\n                 //     ^^^ given this Span\n                 // ------- get this Span to have an applicable suggestion\n+\n+                // edit:\n+                // only do this if the const and usage of the non-constant value are on the same line\n+                // the further the two are apart, the higher the chance of the suggestion being wrong\n+                // also make sure that the pos for the suggestion is not 0 (ICE #90878)\n+\n                 let sp =\n                     self.session.source_map().span_extend_to_prev_str(ident.span, current, true);\n-                if sp.lo().0 == 0 {\n+\n+                let pos_for_suggestion = sp.lo().0.saturating_sub(current.len() as u32);\n+\n+                if sp.lo().0 == 0\n+                    || pos_for_suggestion == 0\n+                    || self.session.source_map().is_multiline(sp)\n+                {\n                     err.span_label(ident.span, &format!(\"this would need to be a `{}`\", sugg));\n                 } else {\n-                    let sp = sp.with_lo(BytePos(sp.lo().0 - current.len() as u32));\n+                    let sp = sp.with_lo(BytePos(pos_for_suggestion));\n                     err.span_suggestion(\n                         sp,\n                         &format!(\"consider using `{}` instead of `{}`\", sugg, current),"}, {"sha": "1445c59710cc34bc3290470c92ed3fad1a462cb5", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79935714f39e55cdbb2e524b3b228c783b58daa9/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79935714f39e55cdbb2e524b3b228c783b58daa9/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=79935714f39e55cdbb2e524b3b228c783b58daa9", "patch": "@@ -1935,6 +1935,7 @@ pub struct Loc {\n #[derive(Debug)]\n pub struct SourceFileAndLine {\n     pub sf: Lrc<SourceFile>,\n+    /// Index of line, starting from 0.\n     pub line: usize,\n }\n #[derive(Debug)]"}, {"sha": "7e3f18cc9d5931a20534204415421179323537e2", "filename": "src/test/ui/consts/issue-90878-2.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/79935714f39e55cdbb2e524b3b228c783b58daa9/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79935714f39e55cdbb2e524b3b228c783b58daa9/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-2.rs?ref=79935714f39e55cdbb2e524b3b228c783b58daa9", "patch": "@@ -0,0 +1,12 @@\n+ #![l=|x|[b;x ]] //~ ERROR unexpected token: `|x| [b; x]`\n+//~^ ERROR cannot find attribute `l` in this scope\n+//~^^ ERROR attempt to use a non-constant value in a constant [E0435]\n+//~^^^ ERROR cannot find value `b` in this scope [E0425]\n+\n+// notice the space at the start,\n+// we can't attach any attributes to this file because it needs to be at the start\n+\n+// this example has been slightly modified (adding ]] at the end), so that it actually works here\n+// it still produces the same issue though\n+\n+fn main() {}"}, {"sha": "9e167424995a7dc5fde235d5be51bc277fc5369e", "filename": "src/test/ui/consts/issue-90878-2.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/79935714f39e55cdbb2e524b3b228c783b58daa9/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79935714f39e55cdbb2e524b3b228c783b58daa9/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-2.stderr?ref=79935714f39e55cdbb2e524b3b228c783b58daa9", "patch": "@@ -0,0 +1,30 @@\n+error: unexpected token: `|x| [b; x]`\n+  --> $DIR/issue-90878-2.rs:1:7\n+   |\n+LL |  #![l=|x|[b;x ]]\n+   |       ^^^^^^^^^\n+\n+error: cannot find attribute `l` in this scope\n+  --> $DIR/issue-90878-2.rs:1:5\n+   |\n+LL |  #![l=|x|[b;x ]]\n+   |     ^\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/issue-90878-2.rs:1:13\n+   |\n+LL |  #![l=|x|[b;x ]]\n+   |        -    ^\n+   |        |\n+   |        this would need to be a `const`\n+\n+error[E0425]: cannot find value `b` in this scope\n+  --> $DIR/issue-90878-2.rs:1:11\n+   |\n+LL |  #![l=|x|[b;x ]]\n+   |           ^ help: a local variable with a similar name exists: `x`\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0425, E0435.\n+For more information about an error, try `rustc --explain E0425`."}, {"sha": "0e36646eb49f58eedff95a5fc96483dd99cb7b50", "filename": "src/test/ui/consts/issue-90878-3.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79935714f39e55cdbb2e524b3b228c783b58daa9/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79935714f39e55cdbb2e524b3b228c783b58daa9/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-3.rs?ref=79935714f39e55cdbb2e524b3b228c783b58daa9", "patch": "@@ -0,0 +1,6 @@\n+\n+fn main() {\n+    |x: usize| [0; x];  //~ ERROR attempt to use a non-constant value in a constant [E0435]\n+    // (note the newline before \"fn\")\n+}\n+// ignore-tidy-leading-newlines"}, {"sha": "1bcc0eb37877b758e8e96e6385466e415072dae7", "filename": "src/test/ui/consts/issue-90878-3.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/79935714f39e55cdbb2e524b3b228c783b58daa9/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79935714f39e55cdbb2e524b3b228c783b58daa9/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-3.stderr?ref=79935714f39e55cdbb2e524b3b228c783b58daa9", "patch": "@@ -0,0 +1,11 @@\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/issue-90878-3.rs:3:20\n+   |\n+LL |     |x: usize| [0; x];\n+   |      -             ^\n+   |      |\n+   |      this would need to be a `const`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0435`."}, {"sha": "43f6fe5f3800d8b0a1a5c347a749f0cb47be0441", "filename": "src/test/ui/consts/issue-90878.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79935714f39e55cdbb2e524b3b228c783b58daa9/src%2Ftest%2Fui%2Fconsts%2Fissue-90878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79935714f39e55cdbb2e524b3b228c783b58daa9/src%2Ftest%2Fui%2Fconsts%2Fissue-90878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90878.rs?ref=79935714f39e55cdbb2e524b3b228c783b58daa9", "patch": "@@ -0,0 +1,4 @@\n+ fn main() {\n+    |x: usize| [0; x];  //~ ERROR attempt to use a non-constant value in a constant [E0435]\n+    // (note the space before \"fn\")\n+}"}, {"sha": "c038fc622d46865230e73f1a3d8001b72b1bdfa0", "filename": "src/test/ui/consts/issue-90878.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/79935714f39e55cdbb2e524b3b228c783b58daa9/src%2Ftest%2Fui%2Fconsts%2Fissue-90878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79935714f39e55cdbb2e524b3b228c783b58daa9/src%2Ftest%2Fui%2Fconsts%2Fissue-90878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90878.stderr?ref=79935714f39e55cdbb2e524b3b228c783b58daa9", "patch": "@@ -0,0 +1,11 @@\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/issue-90878.rs:2:20\n+   |\n+LL |     |x: usize| [0; x];\n+   |      -             ^\n+   |      |\n+   |      this would need to be a `const`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0435`."}, {"sha": "1a20b1e09d7be67f80b56b9b3156bce3e197db74", "filename": "src/test/ui/consts/non-const-value-in-const.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/79935714f39e55cdbb2e524b3b228c783b58daa9/src%2Ftest%2Fui%2Fconsts%2Fnon-const-value-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79935714f39e55cdbb2e524b3b228c783b58daa9/src%2Ftest%2Fui%2Fconsts%2Fnon-const-value-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fnon-const-value-in-const.rs?ref=79935714f39e55cdbb2e524b3b228c783b58daa9", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let x = 5;\n+    const Y: i32 = x; //~ ERROR attempt to use a non-constant value in a constant [E0435]\n+\n+    let x = 5;\n+    let _ = [0; x]; //~ ERROR attempt to use a non-constant value in a constant [E0435]\n+}"}, {"sha": "0ce4b4b7053344e07ec8c923975a2e7fca67a1e4", "filename": "src/test/ui/consts/non-const-value-in-const.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/79935714f39e55cdbb2e524b3b228c783b58daa9/src%2Ftest%2Fui%2Fconsts%2Fnon-const-value-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79935714f39e55cdbb2e524b3b228c783b58daa9/src%2Ftest%2Fui%2Fconsts%2Fnon-const-value-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fnon-const-value-in-const.stderr?ref=79935714f39e55cdbb2e524b3b228c783b58daa9", "patch": "@@ -0,0 +1,20 @@\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/non-const-value-in-const.rs:3:20\n+   |\n+LL |     const Y: i32 = x;\n+   |     -------        ^ non-constant value\n+   |     |\n+   |     help: consider using `let` instead of `const`: `let Y`\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/non-const-value-in-const.rs:6:17\n+   |\n+LL |     let x = 5;\n+   |     ----- help: consider using `const` instead of `let`: `const x`\n+...\n+LL |     let _ = [0; x];\n+   |                 ^ non-constant value\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0435`."}, {"sha": "6ece94771401d5ab2ae0b668704ab95934efe5f6", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/79935714f39e55cdbb2e524b3b228c783b58daa9/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79935714f39e55cdbb2e524b3b228c783b58daa9/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=79935714f39e55cdbb2e524b3b228c783b58daa9", "patch": "@@ -266,6 +266,8 @@ pub fn check(path: &Path, bad: &mut bool) {\n             contains_ignore_directive(can_contain, &contents, \"end-whitespace\");\n         let mut skip_trailing_newlines =\n             contains_ignore_directive(can_contain, &contents, \"trailing-newlines\");\n+        let mut skip_leading_newlines =\n+            contains_ignore_directive(can_contain, &contents, \"leading-newlines\");\n         let mut skip_copyright = contains_ignore_directive(can_contain, &contents, \"copyright\");\n         let mut leading_new_lines = false;\n         let mut trailing_new_lines = 0;\n@@ -350,7 +352,10 @@ pub fn check(path: &Path, bad: &mut bool) {\n             }\n         }\n         if leading_new_lines {\n-            tidy_error!(bad, \"{}: leading newline\", file.display());\n+            let mut err = |_| {\n+                tidy_error!(bad, \"{}: leading newline\", file.display());\n+            };\n+            suppressible_tidy_err!(err, skip_leading_newlines, \"mising leading newline\");\n         }\n         let mut err = |msg: &str| {\n             tidy_error!(bad, \"{}: {}\", file.display(), msg);\n@@ -395,6 +400,9 @@ pub fn check(path: &Path, bad: &mut bool) {\n         if let Directive::Ignore(false) = skip_trailing_newlines {\n             tidy_error!(bad, \"{}: ignoring trailing newlines unnecessarily\", file.display());\n         }\n+        if let Directive::Ignore(false) = skip_leading_newlines {\n+            tidy_error!(bad, \"{}: ignoring leading newlines unnecessarily\", file.display());\n+        }\n         if let Directive::Ignore(false) = skip_copyright {\n             tidy_error!(bad, \"{}: ignoring copyright unnecessarily\", file.display());\n         }"}]}