{"sha": "f3217a5c9c2e838cacaf68fe9d54230be7faca6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMjE3YTVjOWMyZTgzOGNhY2FmNjhmZTlkNTQyMzBiZTdmYWNhNmM=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-05-02T11:47:11Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-05-07T14:35:33Z"}, "message": "Check SIMD vector types", "tree": {"sha": "eecbb51a09ab74d5ba66421ff4bed28713511a4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eecbb51a09ab74d5ba66421ff4bed28713511a4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3217a5c9c2e838cacaf68fe9d54230be7faca6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3217a5c9c2e838cacaf68fe9d54230be7faca6c", "html_url": "https://github.com/rust-lang/rust/commit/f3217a5c9c2e838cacaf68fe9d54230be7faca6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3217a5c9c2e838cacaf68fe9d54230be7faca6c/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e0c6fa5b693e90498045e582a5f66f6a78d67d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e0c6fa5b693e90498045e582a5f66f6a78d67d0", "html_url": "https://github.com/rust-lang/rust/commit/8e0c6fa5b693e90498045e582a5f66f6a78d67d0"}], "stats": {"total": 54, "additions": 51, "deletions": 3}, "files": [{"sha": "d06c1efbc3045d3a0ffd0a3e2918b5c2802c6d5d", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f3217a5c9c2e838cacaf68fe9d54230be7faca6c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3217a5c9c2e838cacaf68fe9d54230be7faca6c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=f3217a5c9c2e838cacaf68fe9d54230be7faca6c", "patch": "@@ -2381,6 +2381,14 @@ pub fn type_is_signed(ty: t) -> bool {\n     }\n }\n \n+pub fn type_is_machine(ty: t) -> bool {\n+    match get(ty).sty {\n+        ty_int(ast::ty_i) | ty_uint(ast::ty_u) | ty_float(ast::ty_f) => false,\n+        ty_int(*) | ty_uint(*) | ty_float(*) => true,\n+        _ => false\n+    }\n+}\n+\n // Whether a type is Plain Old Data -- meaning it does not contain pointers\n // that the cycle collector might care about.\n pub fn type_is_pod(cx: ctxt, ty: t) -> bool {\n@@ -3896,7 +3904,7 @@ pub fn has_attr(tcx: ctxt, did: def_id, attr: &str) -> bool {\n                     attrs: ref attrs,\n                     _\n                 }, _)) => attr::attrs_contains_name(*attrs, attr),\n-            _ => tcx.sess.bug(fmt!(\"lookup_packed: %? is not an item\",\n+            _ => tcx.sess.bug(fmt!(\"has_attr: %? is not an item\",\n                                    did))\n         }\n     } else {\n@@ -3908,11 +3916,16 @@ pub fn has_attr(tcx: ctxt, did: def_id, attr: &str) -> bool {\n     }\n }\n \n-/// Determine whether an item is annotated with `#[packed]` or not\n+/// Determine whether an item is annotated with `#[packed]`\n pub fn lookup_packed(tcx: ctxt, did: def_id) -> bool {\n     has_attr(tcx, did, \"packed\")\n }\n \n+/// Determine whether an item is annotated with `#[simd]` \n+pub fn lookup_simd(tcx: ctxt, did: def_id) -> bool {\n+    has_attr(tcx, did, \"simd\")\n+}\n+\n // Look up a field ID, whether or not it's local\n // Takes a list of type substs in case the struct is generic\n pub fn lookup_field_type(tcx: ctxt,"}, {"sha": "9d547a9584f7c41dc2f4c5d4cebeaaffb73aa338", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f3217a5c9c2e838cacaf68fe9d54230be7faca6c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3217a5c9c2e838cacaf68fe9d54230be7faca6c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=f3217a5c9c2e838cacaf68fe9d54230be7faca6c", "patch": "@@ -561,8 +561,14 @@ pub fn check_no_duplicate_fields(tcx: ty::ctxt,\n }\n \n pub fn check_struct(ccx: @mut CrateCtxt, id: ast::node_id, span: span) {\n+    let tcx = ccx.tcx;\n+\n     // Check that the class is instantiable\n-    check_instantiable(ccx.tcx, span, id);\n+    check_instantiable(tcx, span, id);\n+\n+    if ty::lookup_simd(tcx, local_def(id)) {\n+        check_simd(tcx, span, id);\n+    }\n }\n \n pub fn check_item(ccx: @mut CrateCtxt, it: @ast::item) {\n@@ -3047,6 +3053,35 @@ pub fn check_instantiable(tcx: ty::ctxt,\n     }\n }\n \n+pub fn check_simd(tcx: ty::ctxt, sp: span, id: ast::node_id) {\n+    let t = ty::node_id_to_type(tcx, id);\n+    if ty::type_needs_subst(t) {\n+        tcx.sess.span_err(sp, \"SIMD vector cannot be generic\");\n+        return;\n+    }\n+    match ty::get(t).sty {\n+        ty::ty_struct(did, ref substs) => {\n+            let fields = ty::lookup_struct_fields(tcx, did);\n+            if fields.is_empty() {\n+                tcx.sess.span_err(sp, \"SIMD vector cannot be empty\");\n+                return;\n+            }\n+            let e = ty::lookup_field_type(tcx, did, fields[0].id, substs);\n+            if !vec::all(fields,\n+                         |f| ty::lookup_field_type(tcx, did, f.id, substs) == e) {\n+                tcx.sess.span_err(sp, \"SIMD vector should be homogeneous\");\n+                return;\n+            }\n+            if !ty::type_is_machine(e) {\n+                tcx.sess.span_err(sp, \"SIMD vector element type should be \\\n+                                       machine type\");\n+                return;\n+            }\n+        }\n+        _ => ()\n+    }\n+}\n+\n pub fn check_enum_variants(ccx: @mut CrateCtxt,\n                            sp: span,\n                            vs: &[ast::variant],"}]}