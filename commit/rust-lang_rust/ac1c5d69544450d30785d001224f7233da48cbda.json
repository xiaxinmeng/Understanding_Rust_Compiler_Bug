{"sha": "ac1c5d69544450d30785d001224f7233da48cbda", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMWM1ZDY5NTQ0NDUwZDMwNzg1ZDAwMTIyNGY3MjMzZGE0OGNiZGE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-03T09:54:18Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-03T09:54:18Z"}, "message": "Rustup to rustc 1.44.0-nightly (537ccdf3a 2020-04-02)", "tree": {"sha": "de4195fc6dd1cc038c32f5b5e091bc1f7e43a56b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de4195fc6dd1cc038c32f5b5e091bc1f7e43a56b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac1c5d69544450d30785d001224f7233da48cbda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac1c5d69544450d30785d001224f7233da48cbda", "html_url": "https://github.com/rust-lang/rust/commit/ac1c5d69544450d30785d001224f7233da48cbda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac1c5d69544450d30785d001224f7233da48cbda/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17f99b4a964a4ade86da447088c0a3fc2de43270", "url": "https://api.github.com/repos/rust-lang/rust/commits/17f99b4a964a4ade86da447088c0a3fc2de43270", "html_url": "https://github.com/rust-lang/rust/commit/17f99b4a964a4ade86da447088c0a3fc2de43270"}], "stats": {"total": 180, "additions": 128, "deletions": 52}, "files": [{"sha": "bb0ceb229f46fdcc5ca21e43a785e644918bf0de", "filename": "build_sysroot/alloc_system/lib.rs", "status": "modified", "additions": 89, "deletions": 18, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/ac1c5d69544450d30785d001224f7233da48cbda/build_sysroot%2Falloc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1c5d69544450d30785d001224f7233da48cbda/build_sysroot%2Falloc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2Falloc_system%2Flib.rs?ref=ac1c5d69544450d30785d001224f7233da48cbda", "patch": "@@ -18,6 +18,7 @@\n #![feature(nll)]\n #![feature(staged_api)]\n #![feature(rustc_attrs)]\n+#![feature(alloc_layout_extra)]\n #![cfg_attr(\n     all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n     feature(integer_atomics, stdsimd)\n@@ -41,8 +42,10 @@ const MIN_ALIGN: usize = 8;\n               target_arch = \"sparc64\")))]\n #[allow(dead_code)]\n const MIN_ALIGN: usize = 16;\n-use core::alloc::{AllocRef, GlobalAlloc, AllocErr, Layout};\n+use core::alloc::*;\n use core::ptr::NonNull;\n+use core::intrinsics;\n+\n /// The default memory allocator provided by the operating system.\n ///\n /// This is based on `malloc` on Unix platforms and `HeapAlloc` on Windows,\n@@ -72,29 +75,97 @@ pub struct System;\n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n unsafe impl AllocRef for System {\n     #[inline]\n-    fn alloc(&mut self, layout: Layout) -> Result<(NonNull<u8>, usize), AllocErr> {\n-        NonNull::new(unsafe { GlobalAlloc::alloc(self, layout) })\n-            .ok_or(AllocErr)\n-            .map(|p| (p, layout.size()))\n+    fn alloc(&mut self, layout: Layout, init: AllocInit) -> Result<MemoryBlock, AllocErr> {\n+        unsafe {\n+            let size = layout.size();\n+            if size == 0 {\n+                Ok(MemoryBlock { ptr: layout.dangling(), size: 0 })\n+            } else {\n+                let raw_ptr = match init {\n+                    AllocInit::Uninitialized => GlobalAlloc::alloc(self, layout),\n+                    AllocInit::Zeroed => GlobalAlloc::alloc_zeroed(self, layout),\n+                };\n+                let ptr = NonNull::new(raw_ptr).ok_or(AllocErr)?;\n+                Ok(MemoryBlock { ptr, size })\n+            }\n+        }\n     }\n+\n     #[inline]\n-    fn alloc_zeroed(&mut self, layout: Layout) -> Result<(NonNull<u8>, usize), AllocErr> {\n-        NonNull::new(unsafe { GlobalAlloc::alloc_zeroed(self, layout) })\n-            .ok_or(AllocErr)\n-            .map(|p| (p, layout.size()))\n+    unsafe fn dealloc(&mut self, ptr: NonNull<u8>, layout: Layout) {\n+        if layout.size() != 0 {\n+            GlobalAlloc::dealloc(self, ptr.as_ptr(), layout)\n+        }\n     }\n+\n     #[inline]\n-    unsafe fn dealloc(&mut self, ptr: NonNull<u8>, layout: Layout) {\n-        GlobalAlloc::dealloc(self, ptr.as_ptr(), layout)\n+    unsafe fn grow(\n+        &mut self,\n+        ptr: NonNull<u8>,\n+        layout: Layout,\n+        new_size: usize,\n+        placement: ReallocPlacement,\n+        init: AllocInit,\n+    ) -> Result<MemoryBlock, AllocErr> {\n+        let size = layout.size();\n+        debug_assert!(\n+            new_size >= size,\n+            \"`new_size` must be greater than or equal to `memory.size()`\"\n+        );\n+\n+        if size == new_size {\n+            return Ok(MemoryBlock { ptr, size });\n+        }\n+\n+        match placement {\n+            ReallocPlacement::InPlace => Err(AllocErr),\n+            ReallocPlacement::MayMove if layout.size() == 0 => {\n+                let new_layout = Layout::from_size_align_unchecked(new_size, layout.align());\n+                self.alloc(new_layout, init)\n+            }\n+            ReallocPlacement::MayMove => {\n+                // `realloc` probably checks for `new_size > size` or something similar.\n+                intrinsics::assume(new_size > size);\n+                let ptr = GlobalAlloc::realloc(self, ptr.as_ptr(), layout, new_size);\n+                let memory =\n+                    MemoryBlock { ptr: NonNull::new(ptr).ok_or(AllocErr)?, size: new_size };\n+                init.init_offset(memory, size);\n+                Ok(memory)\n+            }\n+        }\n     }\n+\n     #[inline]\n-    unsafe fn realloc(&mut self,\n-                      ptr: NonNull<u8>,\n-                      layout: Layout,\n-                      new_size: usize) -> Result<(NonNull<u8>, usize), AllocErr> {\n-        NonNull::new(GlobalAlloc::realloc(self, ptr.as_ptr(), layout, new_size))\n-            .ok_or(AllocErr)\n-            .map(|p| (p, layout.size()))\n+    unsafe fn shrink(\n+        &mut self,\n+        ptr: NonNull<u8>,\n+        layout: Layout,\n+        new_size: usize,\n+        placement: ReallocPlacement,\n+    ) -> Result<MemoryBlock, AllocErr> {\n+        let size = layout.size();\n+        debug_assert!(\n+            new_size <= size,\n+            \"`new_size` must be smaller than or equal to `memory.size()`\"\n+        );\n+\n+        if size == new_size {\n+            return Ok(MemoryBlock { ptr, size });\n+        }\n+\n+        match placement {\n+            ReallocPlacement::InPlace => Err(AllocErr),\n+            ReallocPlacement::MayMove if new_size == 0 => {\n+                self.dealloc(ptr, layout);\n+                Ok(MemoryBlock { ptr: layout.dangling(), size: 0 })\n+            }\n+            ReallocPlacement::MayMove => {\n+                // `realloc` probably checks for `new_size < size` or something similar.\n+                intrinsics::assume(new_size < size);\n+                let ptr = GlobalAlloc::realloc(self, ptr.as_ptr(), layout, new_size);\n+                Ok(MemoryBlock { ptr: NonNull::new(ptr).ok_or(AllocErr)?, size: new_size })\n+            }\n+        }\n     }\n }\n #[cfg(any(windows, unix, target_os = \"cloudabi\", target_os = \"redox\"))]"}, {"sha": "6eacfad019a0a1a531c9d9ac83d924ea6e207d76", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac1c5d69544450d30785d001224f7233da48cbda/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/ac1c5d69544450d30785d001224f7233da48cbda/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=ac1c5d69544450d30785d001224f7233da48cbda", "patch": "@@ -1 +1 @@\n-nightly-2020-04-02\n+nightly-2020-04-03"}, {"sha": "eae9ede3305c86ddc83e688dac4b35c6095d6cf0", "filename": "src/abi/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac1c5d69544450d30785d001224f7233da48cbda/src%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1c5d69544450d30785d001224f7233da48cbda/src%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fcomments.rs?ref=ac1c5d69544450d30785d001224f7233da48cbda", "patch": "@@ -62,7 +62,7 @@ pub(super) fn add_local_place_comments<'tcx>(\n     local: Local,\n ) {\n     let TyAndLayout { ty, layout } = place.layout();\n-    let ty::layout::Layout {\n+    let rustc_target::abi::Layout {\n         size,\n         align,\n         abi: _,"}, {"sha": "68af0e6ca0fa86b1c82a8c02fd6ad8c067036856", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac1c5d69544450d30785d001224f7233da48cbda/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1c5d69544450d30785d001224f7233da48cbda/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=ac1c5d69544450d30785d001224f7233da48cbda", "patch": "@@ -82,11 +82,11 @@ pub(super) fn get_pass_mode<'tcx>(tcx: TyCtxt<'tcx>, layout: TyAndLayout<'tcx>)\n         PassMode::NoPass\n     } else {\n         match &layout.abi {\n-            layout::Abi::Uninhabited => PassMode::NoPass,\n-            layout::Abi::Scalar(scalar) => {\n+            Abi::Uninhabited => PassMode::NoPass,\n+            Abi::Scalar(scalar) => {\n                 PassMode::ByVal(scalar_to_clif_type(tcx, scalar.clone()))\n             }\n-            layout::Abi::ScalarPair(a, b) => {\n+            Abi::ScalarPair(a, b) => {\n                 let a = scalar_to_clif_type(tcx, a.clone());\n                 let b = scalar_to_clif_type(tcx, b.clone());\n                 if a == types::I128 && b == types::I128 {\n@@ -100,9 +100,9 @@ pub(super) fn get_pass_mode<'tcx>(tcx: TyCtxt<'tcx>, layout: TyAndLayout<'tcx>)\n             }\n \n             // FIXME implement Vector Abi in a cg_llvm compatible way\n-            layout::Abi::Vector { .. } => PassMode::ByRef { sized: true },\n+            Abi::Vector { .. } => PassMode::ByRef { sized: true },\n \n-            &layout::Abi::Aggregate { sized } => PassMode::ByRef { sized },\n+            &Abi::Aggregate { sized } => PassMode::ByRef { sized },\n         }\n     }\n }"}, {"sha": "b5f67c7ea01cd94e70cad4c7e6b9fd97a29e5d5e", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac1c5d69544450d30785d001224f7233da48cbda/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1c5d69544450d30785d001224f7233da48cbda/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=ac1c5d69544450d30785d001224f7233da48cbda", "patch": "@@ -592,7 +592,7 @@ fn trans_stmt<'tcx>(\n                     lval.write_cvalue(fx, CValue::by_val(len, usize_layout));\n                 }\n                 Rvalue::NullaryOp(NullOp::Box, content_ty) => {\n-                    use rustc_middle::middle::lang_items::ExchangeMallocFnLangItem;\n+                    use rustc_hir::lang_items::ExchangeMallocFnLangItem;\n \n                     let usize_type = fx.clif_type(fx.tcx.types.usize).unwrap();\n                     let content_ty = fx.monomorphize(content_ty);"}, {"sha": "a3e636dddfb9f5854e4ec8d2e8e4f1fe1c5f62e1", "filename": "src/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac1c5d69544450d30785d001224f7233da48cbda/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1c5d69544450d30785d001224f7233da48cbda/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=ac1c5d69544450d30785d001224f7233da48cbda", "patch": "@@ -1,4 +1,4 @@\n-use rustc_middle::ty::layout::{Integer, Primitive};\n+use rustc_target::abi::{Integer, Primitive};\n use rustc_target::spec::{HasTargetSpec, Target};\n use rustc_index::vec::IndexVec;\n \n@@ -304,8 +304,8 @@ impl<'tcx, B: Backend + 'static> layout::HasTyCtxt<'tcx> for FunctionCx<'_, 'tcx\n     }\n }\n \n-impl<'tcx, B: Backend + 'static> layout::HasDataLayout for FunctionCx<'_, 'tcx, B> {\n-    fn data_layout(&self) -> &layout::TargetDataLayout {\n+impl<'tcx, B: Backend + 'static> rustc_target::abi::HasDataLayout for FunctionCx<'_, 'tcx, B> {\n+    fn data_layout(&self) -> &rustc_target::abi::TargetDataLayout {\n         &self.tcx.data_layout\n     }\n }"}, {"sha": "2882ecd078649d7134ef8b8915b95d426962a379", "filename": "src/constant.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac1c5d69544450d30785d001224f7233da48cbda/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1c5d69544450d30785d001224f7233da48cbda/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=ac1c5d69544450d30785d001224f7233da48cbda", "patch": "@@ -6,7 +6,8 @@ use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{\n     read_target_uint, AllocId, Allocation, ConstValue, GlobalAlloc, InterpResult, Scalar,\n };\n-use rustc_middle::ty::{layout::Align, Const, ConstKind};\n+use rustc_middle::ty::{Const, ConstKind};\n+use rustc_target::abi::Align;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_mir::interpret::{\n     ImmTy, InterpCx, Machine, Memory, MemoryKind, OpTy, PlaceTy, Pointer,"}, {"sha": "3c6c8469be8d164991210f477508887ac107bdf7", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac1c5d69544450d30785d001224f7233da48cbda/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1c5d69544450d30785d001224f7233da48cbda/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=ac1c5d69544450d30785d001224f7233da48cbda", "patch": "@@ -16,7 +16,7 @@ use gimli::{Encoding, Format, LineEncoding, RunTimeEndian, X86_64};\n pub(crate) use emit::{DebugReloc, DebugRelocName};\n \n fn target_endian(tcx: TyCtxt) -> RunTimeEndian {\n-    use rustc_middle::ty::layout::Endian;\n+    use rustc_target::abi::Endian;\n \n     match tcx.data_layout.endian {\n         Endian::Big => RunTimeEndian::Big,"}, {"sha": "b51851f0dc9df611fc17e4a252c2079702726ec5", "filename": "src/discriminant.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ac1c5d69544450d30785d001224f7233da48cbda/src%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1c5d69544450d30785d001224f7233da48cbda/src%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiscriminant.rs?ref=ac1c5d69544450d30785d001224f7233da48cbda", "patch": "@@ -1,5 +1,7 @@\n //! Adapted from https://github.com/rust-lang/rust/blob/d760df5aea483aae041c9a241e7acacf48f75035/src/librustc_codegen_ssa/mir/place.rs\n \n+use rustc_target::abi::{DiscriminantKind, Int, Variants};\n+\n use crate::prelude::*;\n \n pub(crate) fn codegen_set_discriminant<'tcx>(\n@@ -12,13 +14,13 @@ pub(crate) fn codegen_set_discriminant<'tcx>(\n         return;\n     }\n     match layout.variants {\n-        layout::Variants::Single { index } => {\n+        Variants::Single { index } => {\n             assert_eq!(index, variant_index);\n         }\n-        layout::Variants::Multiple {\n+        Variants::Multiple {\n             discr: _,\n             discr_index,\n-            discr_kind: layout::DiscriminantKind::Tag,\n+            discr_kind: DiscriminantKind::Tag,\n             variants: _,\n         } => {\n             let ptr = place.place_field(fx, mir::Field::new(discr_index));\n@@ -30,11 +32,11 @@ pub(crate) fn codegen_set_discriminant<'tcx>(\n             let discr = CValue::const_val(fx, ptr.layout(), to);\n             ptr.write_cvalue(fx, discr);\n         }\n-        layout::Variants::Multiple {\n+        Variants::Multiple {\n             discr: _,\n             discr_index,\n             discr_kind:\n-                layout::DiscriminantKind::Niche {\n+                DiscriminantKind::Niche {\n                     dataful_variant,\n                     ref niche_variants,\n                     niche_start,\n@@ -59,7 +61,7 @@ pub(crate) fn codegen_get_discriminant<'tcx>(\n ) -> CValue<'tcx> {\n     let layout = value.layout();\n \n-    if layout.abi == layout::Abi::Uninhabited {\n+    if layout.abi == Abi::Uninhabited {\n         return trap_unreachable_ret_value(\n             fx,\n             dest_layout,\n@@ -68,14 +70,14 @@ pub(crate) fn codegen_get_discriminant<'tcx>(\n     }\n \n     let (discr_scalar, discr_index, discr_kind) = match &layout.variants {\n-        layout::Variants::Single { index } => {\n+        Variants::Single { index } => {\n             let discr_val = layout\n                 .ty\n                 .discriminant_for_variant(fx.tcx, *index)\n                 .map_or(u128::from(index.as_u32()), |discr| discr.val);\n             return CValue::const_val(fx, dest_layout, discr_val);\n         }\n-        layout::Variants::Multiple {\n+        Variants::Multiple {\n             discr,\n             discr_index,\n             discr_kind,\n@@ -91,15 +93,15 @@ pub(crate) fn codegen_get_discriminant<'tcx>(\n \n     // Decode the discriminant (specifically if it's niche-encoded).\n     match *discr_kind {\n-        layout::DiscriminantKind::Tag => {\n+        DiscriminantKind::Tag => {\n             let signed = match discr_scalar.value {\n-                layout::Int(_, signed) => signed,\n+                Int(_, signed) => signed,\n                 _ => false,\n             };\n             let val = clif_intcast(fx, encoded_discr, cast_to, signed);\n             return CValue::by_val(val, dest_layout);\n         }\n-        layout::DiscriminantKind::Niche {\n+        DiscriminantKind::Niche {\n             dataful_variant,\n             ref niche_variants,\n             niche_start,"}, {"sha": "8c8e9aae5d04393b098fae0f811d3e4296c706a7", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac1c5d69544450d30785d001224f7233da48cbda/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1c5d69544450d30785d001224f7233da48cbda/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=ac1c5d69544450d30785d001224f7233da48cbda", "patch": "@@ -144,7 +144,7 @@ fn lane_type_and_count<'tcx>(\n ) -> (TyAndLayout<'tcx>, u16) {\n     assert!(layout.ty.is_simd());\n     let lane_count = match layout.fields {\n-        layout::FieldsShape::Array { stride: _, count } => u16::try_from(count).unwrap(),\n+        rustc_target::abi::FieldsShape::Array { stride: _, count } => u16::try_from(count).unwrap(),\n         _ => unreachable!(\"lane_type_and_count({:?})\", layout),\n     };\n     let lane_layout = layout.field(&ty::layout::LayoutCx {"}, {"sha": "6a1839c3b1f3996752699d70a39f27c9649bf03e", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac1c5d69544450d30785d001224f7233da48cbda/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1c5d69544450d30785d001224f7233da48cbda/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ac1c5d69544450d30785d001224f7233da48cbda", "patch": "@@ -8,6 +8,7 @@ extern crate rustc_middle;\n extern crate rustc_codegen_ssa;\n extern crate rustc_data_structures;\n extern crate rustc_driver;\n+extern crate rustc_errors;\n extern crate rustc_fs_util;\n extern crate rustc_hir;\n extern crate rustc_incremental;\n@@ -21,11 +22,11 @@ extern crate rustc_ast;\n \n use std::any::Any;\n \n+use rustc_errors::ErrorReported;\n use rustc_middle::dep_graph::{DepGraph, WorkProduct, WorkProductId};\n use rustc_middle::middle::cstore::{EncodedMetadata, MetadataLoader};\n use rustc_session::config::OutputFilenames;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::util::common::ErrorReported;\n use rustc_codegen_ssa::traits::CodegenBackend;\n \n use cranelift_codegen::settings;\n@@ -72,7 +73,8 @@ mod prelude {\n     pub(crate) use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n     pub(crate) use rustc_middle::mir::{self, *};\n     pub(crate) use rustc_session::Session;\n-    pub(crate) use rustc_middle::ty::layout::{self, Abi, LayoutOf, Scalar, Size, TyAndLayout, VariantIdx};\n+    pub(crate) use rustc_middle::ty::layout::{self, TyAndLayout};\n+    pub(crate) use rustc_target::abi::{Abi, LayoutOf, Scalar, Size, VariantIdx};\n     pub(crate) use rustc_middle::ty::{\n         self, FnSig, Instance, InstanceDef, ParamEnv, Ty, TyCtxt, TypeAndMut, TypeFoldable,\n     };"}, {"sha": "f575d68cff2ad0133b9357e98399d0e31a654fb1", "filename": "src/main_shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac1c5d69544450d30785d001224f7233da48cbda/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1c5d69544450d30785d001224f7233da48cbda/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=ac1c5d69544450d30785d001224f7233da48cbda", "patch": "@@ -3,7 +3,7 @@ use crate::prelude::*;\n /// Create the `main` function which will initialize the rust runtime and call\n /// users main function.\n pub(crate) fn maybe_create_entry_wrapper(tcx: TyCtxt<'_>, module: &mut Module<impl Backend + 'static>) {\n-    use rustc_middle::middle::lang_items::StartFnLangItem;\n+    use rustc_hir::lang_items::StartFnLangItem;\n     use rustc_session::config::EntryFnType;\n \n     let (main_def_id, use_start_lang_item) = match tcx.entry_fn(LOCAL_CRATE) {"}, {"sha": "63ce64ab57dce3dbbe31dad722b51eeaff34464f", "filename": "src/value_and_place.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac1c5d69544450d30785d001224f7233da48cbda/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1c5d69544450d30785d001224f7233da48cbda/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=ac1c5d69544450d30785d001224f7233da48cbda", "patch": "@@ -118,8 +118,8 @@ impl<'tcx> CValue<'tcx> {\n         match self.0 {\n             CValueInner::ByRef(ptr, None) => {\n                 let clif_ty = match layout.abi {\n-                    layout::Abi::Scalar(ref scalar) => scalar_to_clif_type(fx.tcx, scalar.clone()),\n-                    layout::Abi::Vector { ref element, count } => {\n+                    Abi::Scalar(ref scalar) => scalar_to_clif_type(fx.tcx, scalar.clone()),\n+                    Abi::Vector { ref element, count } => {\n                         scalar_to_clif_type(fx.tcx, element.clone())\n                             .by(u16::try_from(count).unwrap()).unwrap()\n                     }\n@@ -142,7 +142,7 @@ impl<'tcx> CValue<'tcx> {\n         match self.0 {\n             CValueInner::ByRef(ptr, None) => {\n                 let (a_scalar, b_scalar) = match &layout.abi {\n-                    layout::Abi::ScalarPair(a, b) => (a, b),\n+                    Abi::ScalarPair(a, b) => (a, b),\n                     _ => unreachable!(\"load_scalar_pair({:?})\", self),\n                 };\n                 let b_offset = scalar_pair_calculate_b_offset(fx.tcx, a_scalar, b_scalar);\n@@ -167,7 +167,7 @@ impl<'tcx> CValue<'tcx> {\n         match self.0 {\n             CValueInner::ByVal(val) => {\n                 match layout.abi {\n-                    layout::Abi::Vector { element: _, count } => {\n+                    Abi::Vector { element: _, count } => {\n                         let count = u8::try_from(count).expect(\"SIMD type with more than 255 lanes???\");\n                         let field = u8::try_from(field.index()).unwrap();\n                         assert!(field < count);"}, {"sha": "d67cc6e865eeda0ec8045d7a2fc6cdd8f749578d", "filename": "src/vtable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac1c5d69544450d30785d001224f7233da48cbda/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1c5d69544450d30785d001224f7233da48cbda/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=ac1c5d69544450d30785d001224f7233da48cbda", "patch": "@@ -177,8 +177,8 @@ fn write_usize(tcx: TyCtxt, buf: &mut [u8], idx: usize, num: u64) {\n     let mut target = &mut buf[idx * usize_size..(idx + 1) * usize_size];\n \n     match tcx.data_layout.endian {\n-        layout::Endian::Little => target.write_uint::<LittleEndian>(num, usize_size),\n-        layout::Endian::Big => target.write_uint::<BigEndian>(num, usize_size),\n+        rustc_target::abi::Endian::Little => target.write_uint::<LittleEndian>(num, usize_size),\n+        rustc_target::abi::Endian::Big => target.write_uint::<BigEndian>(num, usize_size),\n     }\n     .unwrap()\n }"}]}