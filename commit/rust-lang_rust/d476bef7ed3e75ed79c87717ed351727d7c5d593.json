{"sha": "d476bef7ed3e75ed79c87717ed351727d7c5d593", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NzZiZWY3ZWQzZTc1ZWQ3OWM4NzcxN2VkMzUxNzI3ZDdjNWQ1OTM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-04-04T20:32:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-04T20:32:21Z"}, "message": "Merge pull request #1436 from Ryan1729/master\n\nfix for #1419 and #1425", "tree": {"sha": "75acb71bb3b97065b69f4478c09f34df69eb8699", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75acb71bb3b97065b69f4478c09f34df69eb8699"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d476bef7ed3e75ed79c87717ed351727d7c5d593", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d476bef7ed3e75ed79c87717ed351727d7c5d593", "html_url": "https://github.com/rust-lang/rust/commit/d476bef7ed3e75ed79c87717ed351727d7c5d593", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d476bef7ed3e75ed79c87717ed351727d7c5d593/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f63815ee951ce9bb5a5959883b370cf757f7f50a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f63815ee951ce9bb5a5959883b370cf757f7f50a", "html_url": "https://github.com/rust-lang/rust/commit/f63815ee951ce9bb5a5959883b370cf757f7f50a"}, {"sha": "eb25ac5e11cc99713d512d2f5518f94d7de18eb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb25ac5e11cc99713d512d2f5518f94d7de18eb0", "html_url": "https://github.com/rust-lang/rust/commit/eb25ac5e11cc99713d512d2f5518f94d7de18eb0"}], "stats": {"total": 80, "additions": 69, "deletions": 11}, "files": [{"sha": "2c2b4ef63ea1a713908f3e7d3a27f2eb74a959f0", "filename": "src/chains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d476bef7ed3e75ed79c87717ed351727d7c5d593/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d476bef7ed3e75ed79c87717ed351727d7c5d593/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=d476bef7ed3e75ed79c87717ed351727d7c5d593", "patch": "@@ -441,5 +441,5 @@ fn rewrite_method_call(method_name: ast::Ident,\n     let callee_str = format!(\".{}{}\", method_name, type_str);\n     let span = mk_sp(lo, span.hi);\n \n-    rewrite_call(context, &callee_str, &args[1..], span, shape)\n+    rewrite_call(context, &callee_str, &args[1..], span, shape, false)\n }"}, {"sha": "b472f283c6cf1e56eafb0161f6c6a8b89aff025f", "filename": "src/expr.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d476bef7ed3e75ed79c87717ed351727d7c5d593/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d476bef7ed3e75ed79c87717ed351727d7c5d593/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=d476bef7ed3e75ed79c87717ed351727d7c5d593", "patch": "@@ -71,7 +71,7 @@ fn format_expr(expr: &ast::Expr,\n         }\n         ast::ExprKind::Call(ref callee, ref args) => {\n             let inner_span = mk_sp(callee.span.hi, expr.span.hi);\n-            rewrite_call(context, &**callee, args, inner_span, shape)\n+            rewrite_call(context, &**callee, args, inner_span, shape, false)\n         }\n         ast::ExprKind::Paren(ref subexpr) => rewrite_paren(context, subexpr, shape),\n         ast::ExprKind::Binary(ref op, ref lhs, ref rhs) => {\n@@ -1597,12 +1597,20 @@ pub fn rewrite_call<R>(context: &RewriteContext,\n                        callee: &R,\n                        args: &[ptr::P<ast::Expr>],\n                        span: Span,\n-                       shape: Shape)\n+                       shape: Shape,\n+                       force_no_trailing_comma: bool)\n                        -> Option<String>\n     where R: Rewrite\n {\n-    let closure =\n-        |callee_max_width| rewrite_call_inner(context, callee, callee_max_width, args, span, shape);\n+    let closure = |callee_max_width| {\n+        rewrite_call_inner(context,\n+                           callee,\n+                           callee_max_width,\n+                           args,\n+                           span,\n+                           shape,\n+                           force_no_trailing_comma)\n+    };\n \n     // 2 is for parens\n     let max_width = try_opt!(shape.width.checked_sub(2));\n@@ -1614,7 +1622,8 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n                          max_callee_width: usize,\n                          args: &[ptr::P<ast::Expr>],\n                          span: Span,\n-                         shape: Shape)\n+                         shape: Shape,\n+                         force_no_trailing_comma: bool)\n                          -> Result<String, Ordering>\n     where R: Rewrite\n {\n@@ -1721,9 +1730,11 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n     let fmt = ListFormatting {\n         tactic: tactic,\n         separator: \",\",\n-        trailing_separator: match context.config.fn_call_style {\n-            IndentStyle::Visual => SeparatorTactic::Never,\n-            IndentStyle::Block => context.config.trailing_comma,\n+        trailing_separator: if force_no_trailing_comma ||\n+                               context.config.fn_call_style == IndentStyle::Visual {\n+            SeparatorTactic::Never\n+        } else {\n+            context.config.trailing_comma\n         },\n         shape: nested_shape,\n         ends_with_newline: false,"}, {"sha": "fd5578e7f00464da110aa710b98ae721de8bd5c3", "filename": "src/macros.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d476bef7ed3e75ed79c87717ed351727d7c5d593/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d476bef7ed3e75ed79c87717ed351727d7c5d593/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=d476bef7ed3e75ed79c87717ed351727d7c5d593", "patch": "@@ -144,8 +144,9 @@ pub fn rewrite_macro(mac: &ast::Mac,\n \n     match style {\n         MacroStyle::Parens => {\n-            // Format macro invocation as function call.\n-            rewrite_call(context, &macro_name, &expr_vec, mac.span, shape).map(|rw| {\n+            // Format macro invocation as function call, forcing no trailing\n+            // comma because not all macros support them.\n+            rewrite_call(context, &macro_name, &expr_vec, mac.span, shape, true).map(|rw| {\n                 match position {\n                     MacroPosition::Item => format!(\"{};\", rw),\n                     _ => rw,"}, {"sha": "a5c93a5e2f23fd2ae9d36223c5015647fbbe56a0", "filename": "tests/source/expr-block.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d476bef7ed3e75ed79c87717ed351727d7c5d593/tests%2Fsource%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d476bef7ed3e75ed79c87717ed351727d7c5d593/tests%2Fsource%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr-block.rs?ref=d476bef7ed3e75ed79c87717ed351727d7c5d593", "patch": "@@ -109,3 +109,14 @@ fn function_calls() {\n                              span.lo,\n                              span.hi)\n }\n+\n+fn macros() {\n+    baz!(do_not, add, trailing, commas, inside, of, function, like, macros, even, if_they, are, long);\n+\n+    baz!(one_item_macro_which_is_also_loooooooooooooooooooooooooooooooooooooooooooooooong);\n+\n+    let _ = match option {\n+        None => baz!(function, like, macro_as, expression, which, is, loooooooooooooooong),\n+        Some(p) => baz!(one_item_macro_as_expression_which_is_also_loooooooooooooooong),\n+    };\n+}"}, {"sha": "99f0d2fbf5090efa66c90280624577c34c7d5f15", "filename": "tests/target/expr-block.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d476bef7ed3e75ed79c87717ed351727d7c5d593/tests%2Ftarget%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d476bef7ed3e75ed79c87717ed351727d7c5d593/tests%2Ftarget%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr-block.rs?ref=d476bef7ed3e75ed79c87717ed351727d7c5d593", "patch": "@@ -149,3 +149,38 @@ fn function_calls() {\n         span.hi,\n     )\n }\n+\n+fn macros() {\n+    baz!(\n+        do_not,\n+        add,\n+        trailing,\n+        commas,\n+        inside,\n+        of,\n+        function,\n+        like,\n+        macros,\n+        even,\n+        if_they,\n+        are,\n+        long\n+    );\n+\n+    baz!(one_item_macro_which_is_also_loooooooooooooooooooooooooooooooooooooooooooooooong);\n+\n+    let _ = match option {\n+        None => {\n+            baz!(\n+                function,\n+                like,\n+                macro_as,\n+                expression,\n+                which,\n+                is,\n+                loooooooooooooooong\n+            )\n+        }\n+        Some(p) => baz!(one_item_macro_as_expression_which_is_also_loooooooooooooooong),\n+    };\n+}"}]}