{"sha": "11823872240d83aa5075575056414cd7d29eba3f", "node_id": "C_kwDOAAsO6NoAKDExODIzODcyMjQwZDgzYWE1MDc1NTc1MDU2NDE0Y2Q3ZDI5ZWJhM2Y", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-20T15:29:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-20T15:29:12Z"}, "message": "Auto merge of #12329 - jonas-schievink:build-script-errors, r=jonas-schievink\n\nfix: Don't swallow build script errors", "tree": {"sha": "b7698bd4fc047dee90920b2cfca1adf7379b3886", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7698bd4fc047dee90920b2cfca1adf7379b3886"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11823872240d83aa5075575056414cd7d29eba3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11823872240d83aa5075575056414cd7d29eba3f", "html_url": "https://github.com/rust-lang/rust/commit/11823872240d83aa5075575056414cd7d29eba3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11823872240d83aa5075575056414cd7d29eba3f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a978e1404cdfa6f83818717b2dcdc989e8bc09f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a978e1404cdfa6f83818717b2dcdc989e8bc09f", "html_url": "https://github.com/rust-lang/rust/commit/2a978e1404cdfa6f83818717b2dcdc989e8bc09f"}, {"sha": "33939a3db1da5a9e9c0009e50d3b70318a0b84a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/33939a3db1da5a9e9c0009e50d3b70318a0b84a4", "html_url": "https://github.com/rust-lang/rust/commit/33939a3db1da5a9e9c0009e50d3b70318a0b84a4"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "d4792633efbd4895a989fc3227d4591821cac394", "filename": "crates/project-model/src/build_scripts.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/11823872240d83aa5075575056414cd7d29eba3f/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11823872240d83aa5075575056414cd7d29eba3f/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs?ref=11823872240d83aa5075575056414cd7d29eba3f", "patch": "@@ -7,6 +7,7 @@\n //! here, but it covers procedural macros as well.\n \n use std::{\n+    cell::RefCell,\n     io,\n     path::PathBuf,\n     process::{Command, Stdio},\n@@ -107,15 +108,15 @@ impl WorkspaceBuildScripts {\n             by_id.insert(workspace[package].id.clone(), package);\n         }\n \n-        let mut cfg_err = None;\n-        let mut stderr = String::new();\n+        let errors = RefCell::new(String::new());\n+        let push_err = |err: &str| {\n+            let mut e = errors.borrow_mut();\n+            e.push_str(err);\n+            e.push('\\n');\n+        };\n         let output = stdx::process::streaming_output(\n             cmd,\n             &mut |line| {\n-                if cfg_err.is_some() {\n-                    return;\n-                }\n-\n                 // Copy-pasted from existing cargo_metadata. It seems like we\n                 // should be using serde_stacker here?\n                 let mut deserializer = serde_json::Deserializer::from_str(line);\n@@ -135,7 +136,7 @@ impl WorkspaceBuildScripts {\n                                 match cfg.parse::<CfgFlag>() {\n                                     Ok(it) => acc.push(it),\n                                     Err(err) => {\n-                                        cfg_err = Some(format!(\n+                                        push_err(&format!(\n                                             \"invalid cfg from cargo-metadata: {}\",\n                                             err\n                                         ));\n@@ -177,15 +178,18 @@ impl WorkspaceBuildScripts {\n                     }\n                     Message::CompilerMessage(message) => {\n                         progress(message.target.name);\n+\n+                        if let Some(diag) = message.message.rendered.as_deref() {\n+                            push_err(diag);\n+                        }\n                     }\n                     Message::BuildFinished(_) => {}\n                     Message::TextLine(_) => {}\n                     _ => {}\n                 }\n             },\n             &mut |line| {\n-                stderr.push_str(line);\n-                stderr.push('\\n');\n+                push_err(line);\n             },\n         )?;\n \n@@ -205,16 +209,12 @@ impl WorkspaceBuildScripts {\n             }\n         }\n \n-        if let Some(cfg_err) = cfg_err {\n-            stderr.push_str(&cfg_err);\n-            stderr.push('\\n');\n-        }\n-\n+        let mut errors = errors.into_inner();\n         if !output.status.success() {\n-            if stderr.is_empty() {\n-                stderr = \"cargo check failed\".to_string();\n+            if errors.is_empty() {\n+                errors = \"cargo check failed\".to_string();\n             }\n-            res.error = Some(stderr)\n+            res.error = Some(errors);\n         }\n \n         Ok(res)"}]}