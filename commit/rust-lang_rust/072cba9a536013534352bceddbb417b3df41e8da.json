{"sha": "072cba9a536013534352bceddbb417b3df41e8da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MmNiYTlhNTM2MDEzNTM0MzUyYmNlZGRiYjQxN2IzZGY0MWU4ZGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-15T06:40:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-15T06:40:20Z"}, "message": "Auto merge of #25422 - cactorium:unsafe_errors, r=huonw\n\nFor https://github.com/rust-lang/rust/issues/24407", "tree": {"sha": "43124edbaedf632428d5ef03ed0a4fac1263a038", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43124edbaedf632428d5ef03ed0a4fac1263a038"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/072cba9a536013534352bceddbb417b3df41e8da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/072cba9a536013534352bceddbb417b3df41e8da", "html_url": "https://github.com/rust-lang/rust/commit/072cba9a536013534352bceddbb417b3df41e8da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/072cba9a536013534352bceddbb417b3df41e8da/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0077ffe547a17ca05835c10a178bb9091e509820", "url": "https://api.github.com/repos/rust-lang/rust/commits/0077ffe547a17ca05835c10a178bb9091e509820", "html_url": "https://github.com/rust-lang/rust/commit/0077ffe547a17ca05835c10a178bb9091e509820"}, {"sha": "190de695f58e9cb71d9b799b13570b33f4422363", "url": "https://api.github.com/repos/rust-lang/rust/commits/190de695f58e9cb71d9b799b13570b33f4422363", "html_url": "https://github.com/rust-lang/rust/commit/190de695f58e9cb71d9b799b13570b33f4422363"}], "stats": {"total": 74, "additions": 70, "deletions": 4}, "files": [{"sha": "58d0963274181153b923e7562b1f4d98ac4076df", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 70, "deletions": 4, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/072cba9a536013534352bceddbb417b3df41e8da/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/072cba9a536013534352bceddbb417b3df41e8da/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=072cba9a536013534352bceddbb417b3df41e8da", "patch": "@@ -364,6 +364,76 @@ it has been disabled for now.\n [iss20126]: https://github.com/rust-lang/rust/issues/20126\n \"##,\n \n+E0197: r##\"\n+Inherent implementations (one that do not implement a trait but provide\n+methods associated with a type) are always safe because they are not\n+implementing an unsafe trait. Removing the `unsafe` keyword from the inherent\n+implementation will resolve this error.\n+\n+```\n+struct Foo;\n+\n+// this will cause this error\n+unsafe impl Foo { }\n+// converting it to this will fix it\n+impl Foo { }\n+```\n+\n+\"##,\n+\n+E0198: r##\"\n+A negative implementation is one that excludes a type from implementing a\n+particular trait. Not being able to use a trait is always a safe operation,\n+so negative implementations are always safe and never need to be marked as\n+unsafe.\n+\n+```\n+struct Foo;\n+\n+// unsafe is unnecessary\n+unsafe impl !Clone for Foo { }\n+// this will compile\n+impl !Clone for Foo { }\n+```\n+\n+\"##,\n+\n+E0199: r##\"\n+Safe traits should not have unsafe implementations, therefore marking an\n+implementation for a safe trait unsafe will cause a compiler error. Removing the\n+unsafe marker on the trait noted in the error will resolve this problem.\n+\n+```\n+struct Foo;\n+\n+trait Bar { }\n+\n+// this won't compile because Bar is safe\n+unsafe impl Bar for Foo { }\n+// this will compile\n+impl Bar for Foo { }\n+```\n+\n+\"##,\n+\n+E0200: r##\"\n+Unsafe traits must have unsafe implementations. This error occurs when an\n+implementation for an unsafe trait isn't marked as unsafe. This may be resolved\n+by marking the unsafe implementation as unsafe.\n+\n+```\n+struct Foo;\n+\n+unsafe trait Bar { }\n+\n+// this won't compile because Bar is unsafe and impl isn't unsafe\n+impl Bar for Foo { }\n+// this will compile\n+unsafe impl Bar for Foo { }\n+```\n+\n+\"##,\n+\n E0201: r##\"\n It is an error to define a method--a trait method or an inherent method--more\n than once.\n@@ -648,10 +718,6 @@ register_diagnostics! {\n     E0194,\n     E0195, // lifetime parameters or bounds on method do not match the trait declaration\n     E0196, // cannot determine a type for this closure\n-    E0197, // inherent impls cannot be declared as unsafe\n-    E0198, // negative implementations are not unsafe\n-    E0199, // implementing trait is not unsafe\n-    E0200, // trait requires an `unsafe impl` declaration\n     E0202, // associated items are not allowed in inherent impls\n     E0203, // type parameter has more than one relaxed default bound,\n            // and only one is supported"}]}