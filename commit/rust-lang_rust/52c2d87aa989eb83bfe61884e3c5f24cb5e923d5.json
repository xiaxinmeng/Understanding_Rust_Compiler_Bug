{"sha": "52c2d87aa989eb83bfe61884e3c5f24cb5e923d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyYzJkODdhYTk4OWViODNiZmU2MTg4NGUzYzVmMjRjYjVlOTIzZDU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-05T21:18:25Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-31T19:23:49Z"}, "message": "remove unused normalize field", "tree": {"sha": "26ebdd48ed0eaf8d66054cbf99d9cb72d4eaf4ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26ebdd48ed0eaf8d66054cbf99d9cb72d4eaf4ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52c2d87aa989eb83bfe61884e3c5f24cb5e923d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52c2d87aa989eb83bfe61884e3c5f24cb5e923d5", "html_url": "https://github.com/rust-lang/rust/commit/52c2d87aa989eb83bfe61884e3c5f24cb5e923d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52c2d87aa989eb83bfe61884e3c5f24cb5e923d5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "824000aee3b9fd594a3da3eb38462fa341f0fa81", "url": "https://api.github.com/repos/rust-lang/rust/commits/824000aee3b9fd594a3da3eb38462fa341f0fa81", "html_url": "https://github.com/rust-lang/rust/commit/824000aee3b9fd594a3da3eb38462fa341f0fa81"}], "stats": {"total": 25, "additions": 1, "deletions": 24}, "files": [{"sha": "37c2a8f0d2cfc534b71cfdce817dd576a97ac6f1", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/52c2d87aa989eb83bfe61884e3c5f24cb5e923d5/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c2d87aa989eb83bfe61884e3c5f24cb5e923d5/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=52c2d87aa989eb83bfe61884e3c5f24cb5e923d5", "patch": "@@ -136,13 +136,6 @@ pub struct InferCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     // avoid reporting the same error twice.\n     pub reported_trait_errors: RefCell<FnvHashSet<traits::TraitErrorKey<'tcx>>>,\n \n-    // This is a temporary field used for toggling on normalization in the inference context,\n-    // as we move towards the approach described here:\n-    // https://internals.rust-lang.org/t/flattening-the-contexts-for-fun-and-profit/2293\n-    // At a point sometime in the future normalization will be done by the typing context\n-    // directly.\n-    normalize: bool,\n-\n     // Sadly, the behavior of projection varies a bit depending on the\n     // stage of compilation. The specifics are given in the\n     // documentation for `Reveal`.\n@@ -458,7 +451,6 @@ pub struct InferCtxtBuilder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     tables: Option<RefCell<ty::Tables<'tcx>>>,\n     param_env: Option<ty::ParameterEnvironment<'gcx>>,\n     projection_mode: Reveal,\n-    normalize: bool\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'gcx> {\n@@ -473,7 +465,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'gcx> {\n             tables: tables.map(RefCell::new),\n             param_env: param_env,\n             projection_mode: projection_mode,\n-            normalize: false\n         }\n     }\n \n@@ -485,7 +476,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'gcx> {\n             tables: None,\n             param_env: None,\n             projection_mode: projection_mode,\n-            normalize: false\n         }\n     }\n \n@@ -506,7 +496,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'gcx> {\n             evaluation_cache: traits::EvaluationCache::new(),\n             projection_cache: RefCell::new(traits::ProjectionCache::new()),\n             reported_trait_errors: RefCell::new(FnvHashSet()),\n-            normalize: false,\n             projection_mode: Reveal::NotSpecializable,\n             tainted_by_errors_flag: Cell::new(false),\n             err_count_on_creation: self.sess.err_count(),\n@@ -525,7 +514,6 @@ impl<'a, 'gcx, 'tcx> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n             ref tables,\n             ref mut param_env,\n             projection_mode,\n-            normalize\n         } = *self;\n         let tables = if let Some(ref tables) = *tables {\n             InferTables::Local(tables)\n@@ -547,7 +535,6 @@ impl<'a, 'gcx, 'tcx> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n             selection_cache: traits::SelectionCache::new(),\n             evaluation_cache: traits::EvaluationCache::new(),\n             reported_trait_errors: RefCell::new(FnvHashSet()),\n-            normalize: normalize,\n             projection_mode: projection_mode,\n             tainted_by_errors_flag: Cell::new(false),\n             err_count_on_creation: tcx.sess.err_count(),\n@@ -1702,17 +1689,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n \n         let closure_ty = self.tcx.closure_type(def_id, substs);\n-        if self.normalize {\n-            let closure_ty = self.tcx.erase_regions(&closure_ty);\n-\n-            if !closure_ty.has_projection_types() {\n-                return closure_ty;\n-            }\n-\n-            self.normalize_projections_in(&closure_ty)\n-        } else {\n-            closure_ty\n-        }\n+        closure_ty\n     }\n }\n "}]}