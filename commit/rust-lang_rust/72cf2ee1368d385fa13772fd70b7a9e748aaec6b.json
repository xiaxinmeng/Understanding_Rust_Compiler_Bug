{"sha": "72cf2ee1368d385fa13772fd70b7a9e748aaec6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyY2YyZWUxMzY4ZDM4NWZhMTM3NzJmZDcwYjdhOWU3NDhhYWVjNmI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-11T16:00:21Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-07-19T05:58:28Z"}, "message": "debuginfo: Implemented trait_method branch in create_function_metadata().", "tree": {"sha": "3e8f95315d708e16d2b2dba4a966ee89e15c1edc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e8f95315d708e16d2b2dba4a966ee89e15c1edc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72cf2ee1368d385fa13772fd70b7a9e748aaec6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72cf2ee1368d385fa13772fd70b7a9e748aaec6b", "html_url": "https://github.com/rust-lang/rust/commit/72cf2ee1368d385fa13772fd70b7a9e748aaec6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72cf2ee1368d385fa13772fd70b7a9e748aaec6b/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1c5c798c7b8d7b556144ed3ba286936fb8ba639", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1c5c798c7b8d7b556144ed3ba286936fb8ba639", "html_url": "https://github.com/rust-lang/rust/commit/a1c5c798c7b8d7b556144ed3ba286936fb8ba639"}], "stats": {"total": 83, "additions": 61, "deletions": 22}, "files": [{"sha": "9684dbd6bf97a73894b1c1d7e04a7f3fc004ad0c", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 34, "deletions": 22, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/72cf2ee1368d385fa13772fd70b7a9e748aaec6b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72cf2ee1368d385fa13772fd70b7a9e748aaec6b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=72cf2ee1368d385fa13772fd70b7a9e748aaec6b", "patch": "@@ -280,30 +280,42 @@ pub fn create_function_metadata(fcx: fn_ctxt) -> DISubprogram {\n \n     let fnitem = cx.tcx.items.get_copy(&fcx.id);\n     let (ident, ret_ty, id) = match fnitem {\n-      ast_map::node_item(ref item, _) => {\n-        match item.node {\n-          ast::item_fn(ast::fn_decl { output: ref ty, _}, _, _, _, _) => {\n-            (item.ident, ty, item.id)\n-          }\n-          _ => fcx.ccx.sess.span_bug(item.span,\n-                                     \"create_function_metadata: item bound to non-function\")\n+        ast_map::node_item(ref item, _) => {\n+            match item.node {\n+                ast::item_fn(ast::fn_decl { output: ref ty, _}, _, _, _, _) => {\n+                    (item.ident, ty, item.id)\n+                }\n+                _ => fcx.ccx.sess.span_bug(item.span,\n+                                           \"create_function_metadata: item bound to non-function\")\n+            }\n         }\n-      }\n-      ast_map::node_method(@ast::method { decl: ast::fn_decl { output: ref ty, _ },\n-                           id: id, ident: ident, _}, _, _) => {\n-          (ident, ty, id)\n-      }\n-      ast_map::node_expr(ref expr) => {\n-        match expr.node {\n-          ast::expr_fn_block(ref decl, _) => {\n-            let name = gensym_name(\"fn\");\n-            (name, &decl.output, expr.id)\n-          }\n-          _ => fcx.ccx.sess.span_bug(expr.span,\n-                  \"create_function_metadata: expected an expr_fn_block here\")\n+        ast_map::node_method(@ast::method { decl: ast::fn_decl { output: ref ty, _ },\n+                             id: id, ident: ident, _}, _, _) => {\n+            (ident, ty, id)\n         }\n-      }\n-      _ => fcx.ccx.sess.bug(\"create_function_metadata: unexpected sort of node\")\n+        ast_map::node_expr(ref expr) => {\n+            match expr.node {\n+                ast::expr_fn_block(ref decl, _) => {\n+                    let name = gensym_name(\"fn\");\n+                    (name, &decl.output, expr.id)\n+                }\n+                _ => fcx.ccx.sess.span_bug(expr.span,\n+                        \"create_function_metadata: expected an expr_fn_block here\")\n+            }\n+        }\n+        ast_map::node_trait_method(\n+            @ast::provided(\n+                @ast::method {\n+                    decl: ast::fn_decl { output: ref ty, _ },\n+                    id: id,\n+                    ident: ident,\n+                    _}\n+            ),\n+            _def_id,\n+            _path) => {\n+            (ident, ty, id)\n+        }\n+        _ => fcx.ccx.sess.bug(\"create_function_metadata: unexpected sort of node\")\n     };\n \n     match dbg_cx(cx).created_functions.find(&id) {"}, {"sha": "d4faae415d2021e0ee17157644e601df0351fcc1", "filename": "src/test/run-pass/issue-7712.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/72cf2ee1368d385fa13772fd70b7a9e748aaec6b/src%2Ftest%2Frun-pass%2Fissue-7712.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72cf2ee1368d385fa13772fd70b7a9e748aaec6b/src%2Ftest%2Frun-pass%2Fissue-7712.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7712.rs?ref=72cf2ee1368d385fa13772fd70b7a9e748aaec6b", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-Z debug-info\n+\n+#[allow(default_methods)];\n+\n+pub trait TraitWithDefaultMethod {\n+    pub fn method(self) {\n+        ()\n+    }\n+}\n+\n+struct MyStruct;\n+\n+impl TraitWithDefaultMethod for MyStruct { }\n+\n+fn main() {\n+    MyStruct.method();\n+}\n\\ No newline at end of file"}]}