{"sha": "40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZmQyYmRjZmVjN2EzMGEyY2NlMGQ0YTJjYzA4ZDA5ZTY0Y2FiZWI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-18T22:20:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-18T22:20:43Z"}, "message": "Rollup merge of #72804 - estebank:opaque-missing-lts-in-fn-2, r=nikomatsakis\n\nFurther tweak lifetime errors involving `dyn Trait` and `impl Trait` in return position\n\n* Suggest substituting `'static` lifetime in impl/dyn `Trait + 'static` instead of `Trait + 'static + '_`\n* When `'static` is explicit, also suggest constraining argument with it\n* Reduce verbosity of suggestion message and mention lifetime in label\n* Tweak output for overlapping required/captured spans\n* Give these errors an error code\n\nFollow up to #72543.\n\nr? @nikomatsakis", "tree": {"sha": "2e3e2f8e3065fbaa7761329779288ea5cbebe6c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e3e2f8e3065fbaa7761329779288ea5cbebe6c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe6+i7CRBK7hj4Ov3rIwAAdHIIABVoGUdETJGN5GLGLmEo72A2\neFz3Mgw+NrQlocLve+/noyl/RPr0qEEfy+Afh42k/6QwKT7uWn7MiTVabNEe7Ay/\nx1v9av67u7qQIGK84gioZmO7NCtfVGFAdavLou4d9zcyjHVa3eM3efLlR+ebdOuj\nm+ppasvkx0gHpGyxtOsW6RsAZYlYZeWhq0URY7EIQgU1JOkpsTbvYHOM6LyquNnm\nHBiKHWPzntF7z8jkq4FnF/Tu+UyrlMCy5HKSf9YycTLTRyvGUJix6i+UC4hxckID\n2+IV3mEHiaquHmIdKOav1w0fIjfCuX1H8MOOLcDJ+JXIMNC3dRCh6LYE1zxfO7U=\n=MsRh\n-----END PGP SIGNATURE-----\n", "payload": "tree 2e3e2f8e3065fbaa7761329779288ea5cbebe6c6\nparent 9262fc2a68133330a8f78c73afa54b3ff09724b5\nparent bfe1434d3bb849d3eb993c42fb57aa0819f9be65\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592518843 -0700\ncommitter GitHub <noreply@github.com> 1592518843 -0700\n\nRollup merge of #72804 - estebank:opaque-missing-lts-in-fn-2, r=nikomatsakis\n\nFurther tweak lifetime errors involving `dyn Trait` and `impl Trait` in return position\n\n* Suggest substituting `'static` lifetime in impl/dyn `Trait + 'static` instead of `Trait + 'static + '_`\n* When `'static` is explicit, also suggest constraining argument with it\n* Reduce verbosity of suggestion message and mention lifetime in label\n* Tweak output for overlapping required/captured spans\n* Give these errors an error code\n\nFollow up to #72543.\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "html_url": "https://github.com/rust-lang/rust/commit/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9262fc2a68133330a8f78c73afa54b3ff09724b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9262fc2a68133330a8f78c73afa54b3ff09724b5", "html_url": "https://github.com/rust-lang/rust/commit/9262fc2a68133330a8f78c73afa54b3ff09724b5"}, {"sha": "bfe1434d3bb849d3eb993c42fb57aa0819f9be65", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfe1434d3bb849d3eb993c42fb57aa0819f9be65", "html_url": "https://github.com/rust-lang/rust/commit/bfe1434d3bb849d3eb993c42fb57aa0819f9be65"}], "stats": {"total": 816, "additions": 611, "deletions": 205}, "files": [{"sha": "99ef226f94aaeba79ba54f86f629c160374d4c44", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "patch": "@@ -439,6 +439,7 @@ E0752: include_str!(\"./error_codes/E0752.md\"),\n E0753: include_str!(\"./error_codes/E0753.md\"),\n E0754: include_str!(\"./error_codes/E0754.md\"),\n E0758: include_str!(\"./error_codes/E0758.md\"),\n+E0759: include_str!(\"./error_codes/E0759.md\"),\n E0760: include_str!(\"./error_codes/E0760.md\"),\n E0761: include_str!(\"./error_codes/E0761.md\"),\n E0762: include_str!(\"./error_codes/E0762.md\"),"}, {"sha": "a74759bdf634b0c5deb874b8269468d5d2981507", "filename": "src/librustc_error_codes/error_codes/E0759.md", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Flibrustc_error_codes%2Ferror_codes%2FE0759.md", "raw_url": "https://github.com/rust-lang/rust/raw/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Flibrustc_error_codes%2Ferror_codes%2FE0759.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0759.md?ref=40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "patch": "@@ -0,0 +1,67 @@\n+A `'static` requirement in a return type involving a trait is not fulfilled.\n+\n+Erroneous code examples:\n+\n+```compile_fail,E0759\n+use std::fmt::Debug;\n+\n+fn foo(x: &i32) -> impl Debug {\n+    x\n+}\n+```\n+\n+```compile_fail,E0759\n+# use std::fmt::Debug;\n+fn bar(x: &i32) -> Box<dyn Debug> {\n+    Box::new(x)\n+}\n+```\n+\n+These examples have the same semantics as the following:\n+\n+```compile_fail,E0759\n+# use std::fmt::Debug;\n+fn foo(x: &i32) -> impl Debug + 'static {\n+    x\n+}\n+```\n+\n+```compile_fail,E0759\n+# use std::fmt::Debug;\n+fn bar(x: &i32) -> Box<dyn Debug + 'static> {\n+    Box::new(x)\n+}\n+```\n+\n+Both [`dyn Trait`] and [`impl Trait`] in return types have a an implicit\n+`'static` requirement, meaning that the value implementing them that is being\n+returned has to be either a `'static` borrow or an owned value.\n+\n+In order to change the requirement from `'static` to be a lifetime derived from\n+its arguments, you can add an explicit bound, either to an anonymous lifetime\n+`'_` or some appropriate named lifetime.\n+\n+```\n+# use std::fmt::Debug;\n+fn foo(x: &i32) -> impl Debug + '_ {\n+    x\n+}\n+fn bar(x: &i32) -> Box<dyn Debug + '_> {\n+    Box::new(x)\n+}\n+```\n+\n+These are equivalent to the following explicit lifetime annotations:\n+\n+```\n+# use std::fmt::Debug;\n+fn foo<'a>(x: &'a i32) -> impl Debug + 'a {\n+    x\n+}\n+fn bar<'a>(x: &'a i32) -> Box<dyn Debug + 'a> {\n+    Box::new(x)\n+}\n+```\n+\n+[`dyn Trait`]: https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\n+[`impl Trait`]: https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits"}, {"sha": "9cfa11dd7c813ff7ffdb2aeab7847b821fbdb939", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "patch": "@@ -2035,8 +2035,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             self.tcx.sess,\n             var_origin.span(),\n             E0495,\n-            \"cannot infer an appropriate lifetime{} \\\n-             due to conflicting requirements\",\n+            \"cannot infer an appropriate lifetime{} due to conflicting requirements\",\n             var_description\n         )\n     }"}, {"sha": "82feebc80292a27476089da8f8cfbc7b271fdec5", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 157, "deletions": 33, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "patch": "@@ -1,14 +1,15 @@\n //! Error Reporting for static impl Traits.\n \n-use crate::infer::error_reporting::msg_span_from_free_region;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n-use rustc_errors::{Applicability, ErrorReported};\n+use rustc_errors::{struct_span_err, Applicability, ErrorReported};\n+use rustc_hir::{GenericBound, ItemKind, Lifetime, LifetimeName, TyKind};\n use rustc_middle::ty::RegionKind;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// Print the error message for lifetime errors when the return type is a static impl Trait.\n     pub(super) fn try_report_static_impl_trait(&self) -> Option<ErrorReported> {\n+        debug!(\"try_report_static_impl_trait(error={:?})\", self.error);\n         if let Some(ref error) = self.error {\n             if let RegionResolutionError::SubSupConflict(\n                 _,\n@@ -17,18 +18,36 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 sub_r,\n                 sup_origin,\n                 sup_r,\n-            ) = error.clone()\n+            ) = error\n             {\n+                debug!(\n+                    \"try_report_static_impl_trait(var={:?}, sub={:?} {:?} sup={:?} {:?})\",\n+                    var_origin, sub_origin, sub_r, sup_origin, sup_r\n+                );\n                 let anon_reg_sup = self.tcx().is_suitable_region(sup_r)?;\n-                let (fn_return_span, is_dyn) =\n-                    self.tcx().return_type_impl_or_dyn_trait(anon_reg_sup.def_id)?;\n-                if sub_r == &RegionKind::ReStatic {\n+                debug!(\"try_report_static_impl_trait: anon_reg_sup={:?}\", anon_reg_sup);\n+                let fn_return = self.tcx().return_type_impl_or_dyn_trait(anon_reg_sup.def_id)?;\n+                debug!(\"try_report_static_impl_trait: fn_return={:?}\", fn_return);\n+                if **sub_r == RegionKind::ReStatic {\n                     let sp = var_origin.span();\n                     let return_sp = sub_origin.span();\n-                    let mut err =\n-                        self.tcx().sess.struct_span_err(sp, \"cannot infer an appropriate lifetime\");\n                     let param_info = self.find_param_with_region(sup_r, sub_r)?;\n-                    err.span_label(param_info.param_ty_span, \"data with this lifetime...\");\n+                    let (lifetime_name, lifetime) = if sup_r.has_name() {\n+                        (sup_r.to_string(), format!(\"lifetime `{}`\", sup_r))\n+                    } else {\n+                        (\"'_\".to_owned(), \"an anonymous lifetime `'_`\".to_string())\n+                    };\n+                    let mut err = struct_span_err!(\n+                        self.tcx().sess,\n+                        sp,\n+                        E0759,\n+                        \"cannot infer an appropriate lifetime\"\n+                    );\n+                    err.span_label(\n+                        param_info.param_ty_span,\n+                        &format!(\"this data with {}...\", lifetime),\n+                    );\n+                    debug!(\"try_report_static_impl_trait: param_info={:?}\", param_info);\n \n                     // We try to make the output have fewer overlapping spans if possible.\n                     if (sp == sup_origin.span() || !return_sp.overlaps(sup_origin.span()))\n@@ -38,41 +57,146 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n \n                         // Customize the spans and labels depending on their relative order so\n                         // that split sentences flow correctly.\n-                        if sup_origin.span().shrink_to_hi() <= return_sp.shrink_to_lo() {\n-                            err.span_label(sup_origin.span(), \"...is captured here...\");\n-                            err.span_label(return_sp, \"...and required to be `'static` by this\");\n+                        if sup_origin.span().overlaps(return_sp) && sp == sup_origin.span() {\n+                            // Avoid the following:\n+                            //\n+                            // error: cannot infer an appropriate lifetime\n+                            //   --> $DIR/must_outlive_least_region_or_bound.rs:18:50\n+                            //    |\n+                            // LL | fn foo(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n+                            //    |           ----                      ---------^-\n+                            //\n+                            // and instead show:\n+                            //\n+                            // error: cannot infer an appropriate lifetime\n+                            //   --> $DIR/must_outlive_least_region_or_bound.rs:18:50\n+                            //    |\n+                            // LL | fn foo(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n+                            //    |           ----                               ^\n+                            err.span_label(\n+                                sup_origin.span(),\n+                                \"...is captured here, requiring it to live as long as `'static`\",\n+                            );\n                         } else {\n-                            err.span_label(return_sp, \"...is required to be `'static` by this...\");\n-                            err.span_label(sup_origin.span(), \"...and is captured here\");\n+                            err.span_label(sup_origin.span(), \"...is captured here...\");\n+                            if return_sp < sup_origin.span() {\n+                                err.span_note(\n+                                    return_sp,\n+                                    \"...and is required to live as long as `'static` here\",\n+                                );\n+                            } else {\n+                                err.span_label(\n+                                    return_sp,\n+                                    \"...and is required to live as long as `'static` here\",\n+                                );\n+                            }\n                         }\n                     } else {\n                         err.span_label(\n                             return_sp,\n-                            \"...is captured and required to be `'static` here\",\n+                            \"...is captured and required to live as long as `'static` here\",\n                         );\n                     }\n \n-                    let (lifetime, _) = msg_span_from_free_region(self.tcx(), sup_r);\n-\n-                    let lifetime_name =\n-                        if sup_r.has_name() { sup_r.to_string() } else { \"'_\".to_owned() };\n                     // only apply this suggestion onto functions with\n                     // explicit non-desugar'able return.\n-                    if fn_return_span.desugaring_kind().is_none() {\n-                        let msg = format!(\n-                            \"to permit non-static references in {} `{} Trait` value, you can add \\\n-                             an explicit bound for {}\",\n-                            if is_dyn { \"a\" } else { \"an\" },\n-                            if is_dyn { \"dyn\" } else { \"impl\" },\n-                            lifetime,\n-                        );\n+                    if fn_return.span.desugaring_kind().is_none() {\n                         // FIXME: account for the need of parens in `&(dyn Trait + '_)`\n-                        err.span_suggestion_verbose(\n-                            fn_return_span.shrink_to_hi(),\n-                            &msg,\n-                            format!(\" + {}\", lifetime_name),\n-                            Applicability::MaybeIncorrect,\n-                        );\n+\n+                        let consider = \"consider changing the\";\n+                        let declare = \"to declare that the\";\n+                        let arg = match param_info.param.pat.simple_ident() {\n+                            Some(simple_ident) => format!(\"argument `{}`\", simple_ident),\n+                            None => \"the argument\".to_string(),\n+                        };\n+                        let explicit =\n+                            format!(\"you can add an explicit `{}` lifetime bound\", lifetime_name);\n+                        let explicit_static =\n+                            format!(\"explicit `'static` bound to the lifetime of {}\", arg);\n+                        let captures = format!(\"captures data from {}\", arg);\n+                        let add_static_bound =\n+                            \"alternatively, add an explicit `'static` bound to this reference\";\n+                        let plus_lt = format!(\" + {}\", lifetime_name);\n+                        match fn_return.kind {\n+                            TyKind::OpaqueDef(item_id, _) => {\n+                                let item = self.tcx().hir().item(item_id.id);\n+                                let opaque = if let ItemKind::OpaqueTy(opaque) = &item.kind {\n+                                    opaque\n+                                } else {\n+                                    err.emit();\n+                                    return Some(ErrorReported);\n+                                };\n+\n+                                if let Some(span) = opaque\n+                                    .bounds\n+                                    .iter()\n+                                    .filter_map(|arg| match arg {\n+                                        GenericBound::Outlives(Lifetime {\n+                                            name: LifetimeName::Static,\n+                                            span,\n+                                            ..\n+                                        }) => Some(*span),\n+                                        _ => None,\n+                                    })\n+                                    .next()\n+                                {\n+                                    err.span_suggestion_verbose(\n+                                        span,\n+                                        &format!(\"{} `impl Trait`'s {}\", consider, explicit_static),\n+                                        lifetime_name,\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                    err.span_suggestion_verbose(\n+                                        param_info.param_ty_span,\n+                                        add_static_bound,\n+                                        param_info.param_ty.to_string(),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                } else {\n+                                    err.span_suggestion_verbose(\n+                                        fn_return.span.shrink_to_hi(),\n+                                        &format!(\n+                                            \"{declare} `impl Trait` {captures}, {explicit}\",\n+                                            declare = declare,\n+                                            captures = captures,\n+                                            explicit = explicit,\n+                                        ),\n+                                        plus_lt,\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                };\n+                            }\n+                            TyKind::TraitObject(_, lt) => match lt.name {\n+                                LifetimeName::ImplicitObjectLifetimeDefault => {\n+                                    err.span_suggestion_verbose(\n+                                        fn_return.span.shrink_to_hi(),\n+                                        &format!(\n+                                            \"{declare} trait object {captures}, {explicit}\",\n+                                            declare = declare,\n+                                            captures = captures,\n+                                            explicit = explicit,\n+                                        ),\n+                                        plus_lt,\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                }\n+                                _ => {\n+                                    err.span_suggestion_verbose(\n+                                        lt.span,\n+                                        &format!(\"{} trait object's {}\", consider, explicit_static),\n+                                        lifetime_name,\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                    err.span_suggestion_verbose(\n+                                        param_info.param_ty_span,\n+                                        add_static_bound,\n+                                        param_info.param_ty.to_string(),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                }\n+                            },\n+                            _ => {}\n+                        }\n                     }\n                     err.emit();\n                     return Some(ErrorReported);"}, {"sha": "62d6de2d71e6ddb10f6789b5a0923034bce2c795", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "patch": "@@ -1405,7 +1405,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         })\n     }\n \n-    pub fn return_type_impl_or_dyn_trait(&self, scope_def_id: DefId) -> Option<(Span, bool)> {\n+    pub fn return_type_impl_or_dyn_trait(\n+        &self,\n+        scope_def_id: DefId,\n+    ) -> Option<&'tcx hir::Ty<'tcx>> {\n         let hir_id = self.hir().as_local_hir_id(scope_def_id.expect_local());\n         let hir_output = match self.hir().get(hir_id) {\n             Node::Item(hir::Item {\n@@ -1451,15 +1454,17 @@ impl<'tcx> TyCtxt<'tcx> {\n                 let output = self.erase_late_bound_regions(&sig.output());\n                 if output.is_impl_trait() {\n                     let fn_decl = self.hir().fn_decl_by_hir_id(hir_id).unwrap();\n-                    Some((fn_decl.output.span(), false))\n+                    if let hir::FnRetTy::Return(ty) = fn_decl.output {\n+                        return Some(ty);\n+                    }\n                 } else {\n                     let mut v = TraitObjectVisitor(vec![]);\n                     rustc_hir::intravisit::walk_ty(&mut v, hir_output);\n                     if v.0.len() == 1 {\n-                        return Some((v.0[0], true));\n+                        return Some(v.0[0]);\n                     }\n-                    None\n                 }\n+                None\n             }\n             _ => None,\n         }"}, {"sha": "a2812e117ed39571f9e7e154bfdf27c4f1237143", "filename": "src/librustc_middle/ty/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Flibrustc_middle%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Flibrustc_middle%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fdiagnostics.rs?ref=40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "patch": "@@ -236,21 +236,24 @@ pub fn suggest_constraining_type_param(\n     }\n }\n \n-pub struct TraitObjectVisitor(pub Vec<rustc_span::Span>);\n-impl<'v> hir::intravisit::Visitor<'v> for TraitObjectVisitor {\n+pub struct TraitObjectVisitor<'tcx>(pub Vec<&'tcx hir::Ty<'tcx>>);\n+impl<'v> hir::intravisit::Visitor<'v> for TraitObjectVisitor<'v> {\n     type Map = rustc_hir::intravisit::ErasedMap<'v>;\n \n     fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<Self::Map> {\n         hir::intravisit::NestedVisitorMap::None\n     }\n \n-    fn visit_ty(&mut self, ty: &hir::Ty<'_>) {\n+    fn visit_ty(&mut self, ty: &'v hir::Ty<'v>) {\n         if let hir::TyKind::TraitObject(\n             _,\n-            hir::Lifetime { name: hir::LifetimeName::ImplicitObjectLifetimeDefault, .. },\n+            hir::Lifetime {\n+                name: hir::LifetimeName::ImplicitObjectLifetimeDefault | hir::LifetimeName::Static,\n+                ..\n+            },\n         ) = ty.kind\n         {\n-            self.0.push(ty.span);\n+            self.0.push(ty);\n         }\n     }\n }"}, {"sha": "0f58b158904db0a2fb3aa8fdb2e5c935c07e2707", "filename": "src/test/ui/async-await/issues/issue-62097.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr?ref=40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "patch": "@@ -1,13 +1,14 @@\n-error: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/issue-62097.rs:12:31\n    |\n LL |     pub async fn run_dummy_fn(&self) {\n    |                               ^^^^^\n    |                               |\n-   |                               data with this lifetime...\n+   |                               this data with an anonymous lifetime `'_`...\n    |                               ...is captured here...\n LL |         foo(|| self.bar()).await;\n-   |         --- ...and required to be `'static` by this\n+   |         --- ...and is required to live as long as `'static` here\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "ca9ca8a9debe2a62dfee8a8b31a77f81506bb096", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "patch": "@@ -26,7 +26,34 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                ^^^^^^^^^^^^^^\n \n error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:12:69\n+  --> $DIR/must_outlive_least_region_or_bound.rs:9:46\n+   |\n+LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n+   |               -                              ^ returning this value requires that `'1` must outlive `'static`\n+   |               |\n+   |               let's call the lifetime of this reference `'1`\n+   |\n+   = help: consider replacing `'1` with `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/must_outlive_least_region_or_bound.rs:12:55\n+   |\n+LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n+   |              -- lifetime `'a` defined here            ^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n+\n+error[E0621]: explicit lifetime required in the type of `x`\n+  --> $DIR/must_outlive_least_region_or_bound.rs:15:41\n+   |\n+LL | fn foo<'a>(x: &i32) -> impl Copy + 'a { x }\n+   |               ----                      ^ lifetime `'a` required\n+   |               |\n+   |               help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/must_outlive_least_region_or_bound.rs:33:69\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |               -- lifetime `'a` defined here                         ^ returning this value requires that `'a` must outlive `'static`\n@@ -35,7 +62,7 @@ LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:17:61\n+  --> $DIR/must_outlive_least_region_or_bound.rs:38:61\n    |\n LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n    |                          --  -- lifetime `'b` defined here  ^^^^^^^^^^^^^^^^ opaque type requires that `'b` must outlive `'a`\n@@ -45,13 +72,14 @@ LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32\n    = help: consider adding the following bound: `'b: 'a`\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:22:51\n+  --> $DIR/must_outlive_least_region_or_bound.rs:43:51\n    |\n LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n    |                                                   ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `T: 'static`...\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 8 previous errors\n \n-For more information about this error, try `rustc --explain E0310`.\n+Some errors have detailed explanations: E0310, E0621.\n+For more information about an error, try `rustc --explain E0310`."}, {"sha": "837244b022721c266bd9353b960e2e2b961daf7e", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs?ref=40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "patch": "@@ -6,6 +6,27 @@ fn elided(x: &i32) -> impl Copy { x }\n fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n //~^ ERROR cannot infer an appropriate lifetime\n \n+fn elided2(x: &i32) -> impl Copy + 'static { x }\n+//~^ ERROR cannot infer an appropriate lifetime\n+\n+fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n+//~^ ERROR cannot infer an appropriate lifetime\n+\n+fn foo<'a>(x: &i32) -> impl Copy + 'a { x }\n+//~^ ERROR explicit lifetime required in the type of `x`\n+\n+fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n+//~^ ERROR cannot infer an appropriate lifetime\n+\n+fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n+//~^ ERROR cannot infer an appropriate lifetime\n+\n+fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n+//~^ ERROR cannot infer an appropriate lifetime\n+\n+fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n+//~^ ERROR cannot infer an appropriate lifetime\n+\n trait LifetimeTrait<'a> {}\n impl<'a> LifetimeTrait<'a> for &'a i32 {}\n "}, {"sha": "e1fa4f02b6fcf770f2585118eae9c58c507983f4", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 149, "deletions": 25, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "patch": "@@ -1,47 +1,113 @@\n-error: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:3:35\n    |\n LL | fn elided(x: &i32) -> impl Copy { x }\n-   |              ----     ---------   ^ ...and is captured here\n-   |              |        |\n-   |              |        ...is required to be `'static` by this...\n-   |              data with this lifetime...\n+   |              ----                 ^ ...is captured here...\n+   |              |\n+   |              this data with an anonymous lifetime `'_`...\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the anonymous lifetime #1 defined on the function body at 3:1\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/must_outlive_least_region_or_bound.rs:3:23\n+   |\n+LL | fn elided(x: &i32) -> impl Copy { x }\n+   |                       ^^^^^^^^^\n+help: to declare that the `impl Trait` captures data from argument `x`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                                 ^^^^\n \n-error: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:6:44\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n-   |                    -------     ---------   ^ ...and is captured here\n-   |                    |           |\n-   |                    |           ...is required to be `'static` by this...\n-   |                    data with this lifetime...\n+   |                    -------                 ^ ...is captured here...\n+   |                    |\n+   |                    this data with lifetime `'a`...\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the lifetime `'a` as defined on the function body at 6:13\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/must_outlive_least_region_or_bound.rs:6:32\n+   |\n+LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n+   |                                ^^^^^^^^^\n+help: to declare that the `impl Trait` captures data from argument `x`, you can add an explicit `'a` lifetime bound\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                          ^^^^\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/must_outlive_least_region_or_bound.rs:12:69\n+error[E0759]: cannot infer an appropriate lifetime\n+  --> $DIR/must_outlive_least_region_or_bound.rs:9:46\n+   |\n+LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n+   |               ----                           ^ ...is captured here...\n+   |               |\n+   |               this data with an anonymous lifetime `'_`...\n+   |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/must_outlive_least_region_or_bound.rs:9:24\n+   |\n+LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n+   |                        ^^^^^^^^^^^^^^^^^^^\n+help: consider changing the `impl Trait`'s explicit `'static` bound to the lifetime of argument `x`\n+   |\n+LL | fn elided2(x: &i32) -> impl Copy + '_ { x }\n+   |                                    ^^\n+help: alternatively, add an explicit `'static` bound to this reference\n+   |\n+LL | fn elided2(x: &'static i32) -> impl Copy + 'static { x }\n+   |               ^^^^^^^^^^^^\n+\n+error[E0759]: cannot infer an appropriate lifetime\n+  --> $DIR/must_outlive_least_region_or_bound.rs:12:55\n+   |\n+LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n+   |                     -------                           ^ ...is captured here...\n+   |                     |\n+   |                     this data with lifetime `'a`...\n+   |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/must_outlive_least_region_or_bound.rs:12:33\n+   |\n+LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n+   |                                 ^^^^^^^^^^^^^^^^^^^\n+help: consider changing the `impl Trait`'s explicit `'static` bound to the lifetime of argument `x`\n+   |\n+LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'a { x }\n+   |                                             ^^\n+help: alternatively, add an explicit `'static` bound to this reference\n+   |\n+LL | fn explicit2<'a>(x: &'static i32) -> impl Copy + 'static { x }\n+   |                     ^^^^^^^^^^^^\n+\n+error[E0621]: explicit lifetime required in the type of `x`\n+  --> $DIR/must_outlive_least_region_or_bound.rs:15:24\n+   |\n+LL | fn foo<'a>(x: &i32) -> impl Copy + 'a { x }\n+   |               ----     ^^^^^^^^^^^^^^ lifetime `'a` required\n+   |               |\n+   |               help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n+\n+error[E0759]: cannot infer an appropriate lifetime\n+  --> $DIR/must_outlive_least_region_or_bound.rs:33:69\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n-   |                      -------     --------------------------------   ^ ...and is captured here\n-   |                      |           |\n-   |                      |           ...is required to be `'static` by this...\n-   |                      data with this lifetime...\n+   |                      ------- this data with lifetime `'a`...        ^ ...is captured here...\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the lifetime `'a` as defined on the function body at 12:15\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/must_outlive_least_region_or_bound.rs:33:34\n+   |\n+LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider changing the `impl Trait`'s explicit `'static` bound to the lifetime of argument `x`\n    |\n-LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static + 'a { x }\n-   |                                                                   ^^^^\n+LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'a { x }\n+   |                                                           ^^\n+help: alternatively, add an explicit `'static` bound to this reference\n+   |\n+LL | fn with_bound<'a>(x: &'static i32) -> impl LifetimeTrait<'a> + 'static { x }\n+   |                      ^^^^^^^^^^^^\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/must_outlive_least_region_or_bound.rs:17:61\n+  --> $DIR/must_outlive_least_region_or_bound.rs:38:61\n    |\n LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n    |                                                 -------     ^^^^^^^^^^^^^^^^\n@@ -50,14 +116,72 @@ LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32\n    |                                                 this parameter and the return type are declared with different lifetimes...\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:22:51\n+  --> $DIR/must_outlive_least_region_or_bound.rs:43:51\n    |\n LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n    |                                 --                ^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n    |                                 |\n    |                                 help: consider adding an explicit lifetime bound...: `T: 'static +`\n \n-error: aborting due to 5 previous errors\n+error[E0759]: cannot infer an appropriate lifetime\n+  --> $DIR/must_outlive_least_region_or_bound.rs:18:50\n+   |\n+LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n+   |               ----                               ^ ...is captured here, requiring it to live as long as `'static`\n+   |               |\n+   |               this data with an anonymous lifetime `'_`...\n+   |\n+help: to declare that the trait object captures data from argument `x`, you can add an explicit `'_` lifetime bound\n+   |\n+LL | fn elided3(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n+   |                                      ^^^^\n+\n+error[E0759]: cannot infer an appropriate lifetime\n+  --> $DIR/must_outlive_least_region_or_bound.rs:21:59\n+   |\n+LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n+   |                     -------                               ^ ...is captured here, requiring it to live as long as `'static`\n+   |                     |\n+   |                     this data with lifetime `'a`...\n+   |\n+help: to declare that the trait object captures data from argument `x`, you can add an explicit `'a` lifetime bound\n+   |\n+LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }\n+   |                                               ^^^^\n+\n+error[E0759]: cannot infer an appropriate lifetime\n+  --> $DIR/must_outlive_least_region_or_bound.rs:24:60\n+   |\n+LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n+   |               ----                                         ^ ...is captured here, requiring it to live as long as `'static`\n+   |               |\n+   |               this data with an anonymous lifetime `'_`...\n+   |\n+help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `x`\n+   |\n+LL | fn elided4(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n+   |                                        ^^\n+help: alternatively, add an explicit `'static` bound to this reference\n+   |\n+LL | fn elided4(x: &'static i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n+   |               ^^^^^^^^^^^^\n+\n+error[E0759]: cannot infer an appropriate lifetime\n+  --> $DIR/must_outlive_least_region_or_bound.rs:27:69\n+   |\n+LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n+   |                     ------- this data with lifetime `'a`...         ^ ...is captured here, requiring it to live as long as `'static`\n+   |\n+help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `x`\n+   |\n+LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }\n+   |                                                 ^^\n+help: alternatively, add an explicit `'static` bound to this reference\n+   |\n+LL | fn explicit4<'a>(x: &'static i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n+   |                     ^^^^^^^^^^^^\n+\n+error: aborting due to 12 previous errors\n \n-Some errors have detailed explanations: E0310, E0623.\n+Some errors have detailed explanations: E0310, E0621, E0623, E0759.\n For more information about an error, try `rustc --explain E0310`."}, {"sha": "df0db6e4fc6df927297d9793d271390de5bc21dd", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "patch": "@@ -1,36 +1,43 @@\n-error: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/static-return-lifetime-infered.rs:7:16\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                         -----     ----------------------- ...is required to be `'static` by this...\n-   |                         |\n-   |                         data with this lifetime...\n+   |                         ----- this data with an anonymous lifetime `'_`...\n LL |         self.x.iter().map(|a| a.0)\n    |         ------ ^^^^\n    |         |\n-   |         ...and is captured here\n+   |         ...is captured here...\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the anonymous lifetime #1 defined on the method body at 6:5\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/static-return-lifetime-infered.rs:6:35\n+   |\n+LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n+help: to declare that the `impl Trait` captures data from argument `self`, you can add an explicit `'_` lifetime bound\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                                           ^^^^\n \n-error: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/static-return-lifetime-infered.rs:11:16\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                        --------     ----------------------- ...is required to be `'static` by this...\n-   |                        |\n-   |                        data with this lifetime...\n+   |                        -------- this data with lifetime `'a`...\n LL |         self.x.iter().map(|a| a.0)\n    |         ------ ^^^^\n    |         |\n-   |         ...and is captured here\n+   |         ...is captured here...\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the lifetime `'a` as defined on the method body at 10:20\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/static-return-lifetime-infered.rs:10:37\n+   |\n+LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^^^\n+help: to declare that the `impl Trait` captures data from argument `self`, you can add an explicit `'a` lifetime bound\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n    |                                                             ^^^^\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "919594fc9af4b434967d1975e1a23b41346c5f6e", "filename": "src/test/ui/issues/issue-16922.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr?ref=40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "patch": "@@ -1,18 +1,16 @@\n-error: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/issue-16922.rs:4:14\n    |\n LL | fn foo<T: Any>(value: &T) -> Box<dyn Any> {\n-   |                       -- data with this lifetime...\n+   |                       -- this data with an anonymous lifetime `'_`...\n LL |     Box::new(value) as Box<dyn Any>\n-   |     ---------^^^^^-\n-   |     |        |\n-   |     |        ...and is captured here\n-   |     ...is required to be `'static` by this...\n+   |              ^^^^^ ...is captured here, requiring it to live as long as `'static`\n    |\n-help: to permit non-static references in a `dyn Trait` value, you can add an explicit bound for the anonymous lifetime #1 defined on the function body at 3:1\n+help: to declare that the trait object captures data from argument `value`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn foo<T: Any>(value: &T) -> Box<dyn Any + '_> {\n    |                                          ^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "1b1e0d9610724b6e83c1a48c19e2a0ff427fb158", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-box-error.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr?ref=40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "patch": "@@ -1,13 +1,13 @@\n-error: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/object-lifetime-default-from-box-error.rs:18:5\n    |\n LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait> {\n-   |             --------------- data with this lifetime...\n+   |             --------------- this data with an anonymous lifetime `'_`...\n ...\n LL |     ss.r\n-   |     ^^^^ ...is captured and required to be `'static` here\n+   |     ^^^^ ...is captured and required to live as long as `'static` here\n    |\n-help: to permit non-static references in a `dyn Trait` value, you can add an explicit bound for the anonymous lifetime #2 defined on the function body at 14:1\n+help: to declare that the trait object captures data from argument `ss`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait + '_> {\n    |                                                   ^^^^\n@@ -23,4 +23,5 @@ LL |     ss.r = b;\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0621`.\n+Some errors have detailed explanations: E0621, E0759.\n+For more information about an error, try `rustc --explain E0621`."}, {"sha": "7e8f78067e08af9d8d699016cb12f2e4026488e3", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.nll.stderr", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr?ref=40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "patch": "@@ -1,21 +1,21 @@\n-error[E0621]: explicit lifetime required in the type of `v`\n+error: lifetime may not live long enough\n   --> $DIR/region-object-lifetime-in-coercion.rs:8:12\n    |\n LL | fn a(v: &[u8]) -> Box<dyn Foo + 'static> {\n-   |         ----- help: add explicit lifetime `'static` to the type of `v`: `&'static [u8]`\n+   |         - let's call the lifetime of this reference `'1`\n LL |     let x: Box<dyn Foo + 'static> = Box::new(v);\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'1` must outlive `'static`\n \n-error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/region-object-lifetime-in-coercion.rs:14:5\n+error: lifetime may not live long enough\n+  --> $DIR/region-object-lifetime-in-coercion.rs:13:5\n    |\n LL | fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n-   |         ----- help: add explicit lifetime `'static` to the type of `v`: `&'static [u8]`\n+   |         - let's call the lifetime of this reference `'1`\n LL |     Box::new(v)\n-   |     ^^^^^^^^^^^ lifetime `'static` required\n+   |     ^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/region-object-lifetime-in-coercion.rs:20:5\n+  --> $DIR/region-object-lifetime-in-coercion.rs:19:5\n    |\n LL | fn c(v: &[u8]) -> Box<dyn Foo> {\n    |         - let's call the lifetime of this reference `'1`\n@@ -24,7 +24,7 @@ LL |     Box::new(v)\n    |     ^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/region-object-lifetime-in-coercion.rs:24:5\n+  --> $DIR/region-object-lifetime-in-coercion.rs:23:5\n    |\n LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {\n    |      -- -- lifetime `'b` defined here\n@@ -37,4 +37,3 @@ LL |     Box::new(v)\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "5d199149c39b860d029bc80728988afe33c76b25", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.rs?ref=40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "patch": "@@ -5,13 +5,12 @@ trait Foo {}\n impl<'a> Foo for &'a [u8] {}\n \n fn a(v: &[u8]) -> Box<dyn Foo + 'static> {\n-    let x: Box<dyn Foo + 'static> = Box::new(v);\n-    //~^ ERROR explicit lifetime required in the type of `v` [E0621]\n+    let x: Box<dyn Foo + 'static> = Box::new(v); //~ ERROR cannot infer an appropriate lifetime\n     x\n }\n \n fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n-    Box::new(v) //~ ERROR explicit lifetime required in the type of `v` [E0621]\n+    Box::new(v) //~ ERROR cannot infer an appropriate lifetime\n }\n \n fn c(v: &[u8]) -> Box<dyn Foo> {"}, {"sha": "7f5a3a47976c7d38f812fa9fb9a1232657dd2a1c", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 39, "deletions": 24, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "patch": "@@ -1,61 +1,76 @@\n-error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/region-object-lifetime-in-coercion.rs:8:37\n+error[E0759]: cannot infer an appropriate lifetime\n+  --> $DIR/region-object-lifetime-in-coercion.rs:8:46\n    |\n LL | fn a(v: &[u8]) -> Box<dyn Foo + 'static> {\n-   |         ----- help: add explicit lifetime `'static` to the type of `v`: `&'static [u8]`\n+   |         ----- this data with an anonymous lifetime `'_`...\n LL |     let x: Box<dyn Foo + 'static> = Box::new(v);\n-   |                                     ^^^^^^^^^^^ lifetime `'static` required\n+   |                                              ^ ...is captured here, requiring it to live as long as `'static`\n+   |\n+help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n+   |\n+LL | fn a(v: &[u8]) -> Box<dyn Foo + '_> {\n+   |                                 ^^\n+help: alternatively, add an explicit `'static` bound to this reference\n+   |\n+LL | fn a(v: &'static [u8]) -> Box<dyn Foo + 'static> {\n+   |         ^^^^^^^^^^^^^\n \n-error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/region-object-lifetime-in-coercion.rs:14:5\n+error[E0759]: cannot infer an appropriate lifetime\n+  --> $DIR/region-object-lifetime-in-coercion.rs:13:14\n    |\n LL | fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n-   |         ----- help: add explicit lifetime `'static` to the type of `v`: `&'static [u8]`\n+   |         ----- this data with an anonymous lifetime `'_`...\n LL |     Box::new(v)\n-   |     ^^^^^^^^^^^ lifetime `'static` required\n+   |              ^ ...is captured here, requiring it to live as long as `'static`\n+   |\n+help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n+   |\n+LL | fn b(v: &[u8]) -> Box<dyn Foo + '_> {\n+   |                                 ^^\n+help: alternatively, add an explicit `'static` bound to this reference\n+   |\n+LL | fn b(v: &'static [u8]) -> Box<dyn Foo + 'static> {\n+   |         ^^^^^^^^^^^^^\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/region-object-lifetime-in-coercion.rs:20:14\n+error[E0759]: cannot infer an appropriate lifetime\n+  --> $DIR/region-object-lifetime-in-coercion.rs:19:14\n    |\n LL | fn c(v: &[u8]) -> Box<dyn Foo> {\n-   |         ----- data with this lifetime...\n+   |         ----- this data with an anonymous lifetime `'_`...\n ...\n LL |     Box::new(v)\n-   |     ---------^-\n-   |     |        |\n-   |     |        ...and is captured here\n-   |     ...is required to be `'static` by this...\n+   |              ^ ...is captured here, requiring it to live as long as `'static`\n    |\n-help: to permit non-static references in a `dyn Trait` value, you can add an explicit bound for the anonymous lifetime #1 defined on the function body at 17:1\n+help: to declare that the trait object captures data from argument `v`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn c(v: &[u8]) -> Box<dyn Foo + '_> {\n    |                               ^^^^\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/region-object-lifetime-in-coercion.rs:24:14\n+  --> $DIR/region-object-lifetime-in-coercion.rs:23:14\n    |\n LL |     Box::new(v)\n    |              ^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 23:6...\n-  --> $DIR/region-object-lifetime-in-coercion.rs:23:6\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 22:6...\n+  --> $DIR/region-object-lifetime-in-coercion.rs:22:6\n    |\n LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {\n    |      ^^\n note: ...so that the expression is assignable\n-  --> $DIR/region-object-lifetime-in-coercion.rs:24:14\n+  --> $DIR/region-object-lifetime-in-coercion.rs:23:14\n    |\n LL |     Box::new(v)\n    |              ^\n    = note: expected `&[u8]`\n               found `&'a [u8]`\n-note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 23:9...\n-  --> $DIR/region-object-lifetime-in-coercion.rs:23:9\n+note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 22:9...\n+  --> $DIR/region-object-lifetime-in-coercion.rs:22:9\n    |\n LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {\n    |         ^^\n note: ...so that the expression is assignable\n-  --> $DIR/region-object-lifetime-in-coercion.rs:24:5\n+  --> $DIR/region-object-lifetime-in-coercion.rs:23:5\n    |\n LL |     Box::new(v)\n    |     ^^^^^^^^^^^\n@@ -64,5 +79,5 @@ LL |     Box::new(v)\n \n error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0495, E0621.\n+Some errors have detailed explanations: E0495, E0759.\n For more information about an error, try `rustc --explain E0495`."}, {"sha": "114e4052aae09b63159cc61e3899af7c0e982403", "filename": "src/test/ui/regions/regions-close-object-into-object-2.stderr", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr?ref=40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "patch": "@@ -1,28 +1,20 @@\n-error[E0495]: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/regions-close-object-into-object-2.rs:10:11\n    |\n+LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n+   |                         ------------------ this data with lifetime `'a`...\n LL |     box B(&*v) as Box<dyn X>\n-   |           ^^^\n-   |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 9:6...\n-  --> $DIR/regions-close-object-into-object-2.rs:9:6\n+   |           ^^^ ...is captured here, requiring it to live as long as `'static`\n    |\n-LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n-   |      ^^\n-note: ...so that the type `(dyn A<T> + 'a)` is not borrowed for too long\n-  --> $DIR/regions-close-object-into-object-2.rs:10:11\n+help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n    |\n-LL |     box B(&*v) as Box<dyn X>\n-   |           ^^^\n-   = note: but, the lifetime must be valid for the static lifetime...\n-note: ...so that the expression is assignable\n-  --> $DIR/regions-close-object-into-object-2.rs:10:5\n+LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'a> {\n+   |                                                            ^^\n+help: alternatively, add an explicit `'static` bound to this reference\n    |\n-LL |     box B(&*v) as Box<dyn X>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected `std::boxed::Box<(dyn X + 'static)>`\n-              found `std::boxed::Box<dyn X>`\n+LL | fn g<'a, T: 'static>(v: std::boxed::Box<(dyn A<T> + 'static)>) -> Box<dyn X + 'static> {\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0495`.\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "850d81940791fd168afbe9224765cf642bbaaf61", "filename": "src/test/ui/regions/regions-close-object-into-object-4.stderr", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr?ref=40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "patch": "@@ -1,28 +1,20 @@\n-error[E0495]: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/regions-close-object-into-object-4.rs:10:11\n    |\n+LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n+   |                   ---------------- this data with lifetime `'a`...\n LL |     box B(&*v) as Box<dyn X>\n-   |           ^^^\n-   |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 9:6...\n-  --> $DIR/regions-close-object-into-object-4.rs:9:6\n+   |           ^^^ ...is captured here, requiring it to live as long as `'static`\n    |\n-LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n-   |      ^^\n-note: ...so that the type `(dyn A<U> + 'a)` is not borrowed for too long\n-  --> $DIR/regions-close-object-into-object-4.rs:10:11\n+help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n    |\n-LL |     box B(&*v) as Box<dyn X>\n-   |           ^^^\n-   = note: but, the lifetime must be valid for the static lifetime...\n-note: ...so that the expression is assignable\n-  --> $DIR/regions-close-object-into-object-4.rs:10:5\n+LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'a> {\n+   |                                                    ^^\n+help: alternatively, add an explicit `'static` bound to this reference\n    |\n-LL |     box B(&*v) as Box<dyn X>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected `std::boxed::Box<(dyn X + 'static)>`\n-              found `std::boxed::Box<dyn X>`\n+LL | fn i<'a, T, U>(v: std::boxed::Box<(dyn A<U> + 'static)>) -> Box<dyn X + 'static> {\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0495`.\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "75890b8581537fc7b6ef6d36a42c00cdc94a232f", "filename": "src/test/ui/regions/regions-proc-bound-capture.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.nll.stderr?ref=40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/regions-proc-bound-capture.rs:9:5\n+   |\n+LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n+   |                   - let's call the lifetime of this reference `'1`\n+LL |     // This is illegal, because the region bound on `proc` is 'static.\n+LL |     Box::new(move || { *x })\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "8617c0e9da8f76f51a6319847965b265e8aff148", "filename": "src/test/ui/regions/regions-proc-bound-capture.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.rs?ref=40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "patch": "@@ -4,9 +4,9 @@ fn borrowed_proc<'a>(x: &'a isize) -> Box<dyn FnMut()->(isize) + 'a> {\n     Box::new(move|| { *x })\n }\n \n-fn static_proc(x: &isize) -> Box<dyn FnMut()->(isize) + 'static> {\n+fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n     // This is illegal, because the region bound on `proc` is 'static.\n-    Box::new(move|| { *x }) //~ ERROR explicit lifetime required in the type of `x` [E0621]\n+    Box::new(move || { *x }) //~ ERROR cannot infer an appropriate lifetime\n }\n \n fn main() { }"}, {"sha": "67eee3bb6e28127bbd8db3417d40386340b6a38f", "filename": "src/test/ui/regions/regions-proc-bound-capture.stderr", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr?ref=40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "patch": "@@ -1,12 +1,21 @@\n-error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/regions-proc-bound-capture.rs:9:5\n+error[E0759]: cannot infer an appropriate lifetime\n+  --> $DIR/regions-proc-bound-capture.rs:9:14\n    |\n-LL | fn static_proc(x: &isize) -> Box<dyn FnMut()->(isize) + 'static> {\n-   |                   ------ help: add explicit lifetime `'static` to the type of `x`: `&'static isize`\n+LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n+   |                   ------ this data with an anonymous lifetime `'_`...\n LL |     // This is illegal, because the region bound on `proc` is 'static.\n-LL |     Box::new(move|| { *x })\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n+LL |     Box::new(move || { *x })\n+   |              ^^^^^^^^^^^^^^ ...is captured here, requiring it to live as long as `'static`\n+   |\n+help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `x`\n+   |\n+LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + '_> {\n+   |                                                           ^^\n+help: alternatively, add an explicit `'static` bound to this reference\n+   |\n+LL | fn static_proc(x: &'static isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n+   |                   ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0621`.\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "88bd990b1e81b095e1c01ce8da9f0802b787ff90", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "patch": "@@ -1,11 +1,12 @@\n-error: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:16\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                ^^^^  ----------     ---------- ...and required to be `'static` by this\n+   |                ^^^^  ----------     ---------- ...and is required to live as long as `'static` here\n    |                |     |\n-   |                |     data with this lifetime...\n+   |                |     this data with an anonymous lifetime `'_`...\n    |                ...is captured here...\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "2e10ab3d3f9b84a8c1802524008ab8020e311bd2", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.stderr", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr?ref=40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "patch": "@@ -1,16 +1,21 @@\n-error: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:44\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                ----------     ----------   ^^^^ ...and is captured here\n-   |                |              |\n-   |                |              ...is required to be `'static` by this...\n-   |                data with this lifetime...\n+   |                ----------                  ^^^^ ...is captured here...\n+   |                |\n+   |                this data with an anonymous lifetime `'_`...\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the anonymous lifetime #1 defined on the method body at 6:5\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:31\n+   |\n+LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n+   |                               ^^^^^^^^^^\n+help: to declare that the `impl Trait` captures data from argument `self`, you can add an explicit `'_` lifetime bound\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                                          ^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "9ab060328537b56b08f0f3dcf6b023edfcd3fea5", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "patch": "@@ -6,20 +6,23 @@ LL | fn baz<G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |        |\n    |        help: consider introducing lifetime `'a` here: `'a,`\n \n-error: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/missing-lifetimes-in-signature.rs:19:5\n    |\n LL |   fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce()\n-   |                            ------     ------------- ...is required to be `'static` by this...\n-   |                            |\n-   |                            data with this lifetime...\n+   |                            ------ this data with an anonymous lifetime `'_`...\n ...\n LL | /     move || {\n LL | |         *dest = g.get();\n LL | |     }\n-   | |_____^ ...and is captured here\n+   | |_____^ ...is captured here...\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the anonymous lifetime #1 defined on the function body at 15:1\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/missing-lifetimes-in-signature.rs:15:37\n+   |\n+LL | fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce()\n+   |                                     ^^^^^^^^^^^^^\n+help: to declare that the `impl Trait` captures data from argument `dest`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                                   ^^^^\n@@ -122,5 +125,5 @@ LL | fn bak<'a, G, T>(g: G, dest: &'a mut T) -> impl FnOnce() + 'a\n \n error: aborting due to 7 previous errors\n \n-Some errors have detailed explanations: E0261, E0309, E0621.\n+Some errors have detailed explanations: E0261, E0309, E0621, E0759.\n For more information about an error, try `rustc --explain E0261`."}, {"sha": "dda5de431d30944e4e0f9a1f4f6c5c221773c609", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=40fd2bdcfec7a30a2cce0d4a2cc08d09e64cabeb", "patch": "@@ -1,16 +1,17 @@\n-error: cannot infer an appropriate lifetime\n+error[E0759]: cannot infer an appropriate lifetime\n   --> $DIR/dyn-trait-underscore.rs:8:20\n    |\n LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n-   |                ---- data with this lifetime...\n+   |                ---- this data with an anonymous lifetime `'_`...\n LL |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n LL |     Box::new(items.iter())\n-   |     ---------------^^^^--- ...is captured and required to be `'static` here\n+   |     ---------------^^^^--- ...is captured and required to live as long as `'static` here\n    |\n-help: to permit non-static references in a `dyn Trait` value, you can add an explicit bound for the anonymous lifetime #1 defined on the function body at 6:1\n+help: to declare that the trait object captures data from argument `items`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T> + '_> {\n    |                                                   ^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0759`."}]}