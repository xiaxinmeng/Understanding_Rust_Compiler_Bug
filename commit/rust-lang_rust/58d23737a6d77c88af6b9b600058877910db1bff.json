{"sha": "58d23737a6d77c88af6b9b600058877910db1bff", "node_id": "C_kwDOAAsO6NoAKDU4ZDIzNzM3YTZkNzdjODhhZjZiOWI2MDAwNTg4Nzc5MTBkYjFiZmY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-22T15:04:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-22T15:04:15Z"}, "message": "Rollup merge of #100820 - WaffleLapkin:use_ptr_is_aligned_methods, r=scottmcm\n\nUse pointer `is_aligned*` methods\n\nThis PR replaces some manual alignment checks with calls to `pointer::{is_aligned, is_aligned_to}` and removes a useless pointer cast.\n\nr? `@scottmcm`\n\n_split off from #100746_", "tree": {"sha": "4a523ca51052626d9d4740324d442c58cc8b46fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a523ca51052626d9d4740324d442c58cc8b46fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58d23737a6d77c88af6b9b600058877910db1bff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjA5rvCRBK7hj4Ov3rIwAANEcIAB+fJVVUwPxlZX+jEoKs3d+q\nFJO6uS2JTXPaiI3VOYj7DwwIpfgQd5JYYnvhpZcN/wPQN10GD7n7v12YZoMe/J2+\nc9oIWH5rnHjLGpvEZ/gU0Y5alvV7yB0CEEvGu6/3pNm0Y+8TwP9UW4Htt9DnAmKF\nmeLX0xhw1AVCVdh6qcgR2c1s2WYFvUrg9s5KWkf5IYyK025HP1BfHqUDs8ZYd9fN\nuaIsMdsxbdYQM/CpqUcgW890389dZnis3qn4JGgqNrGdqGWmXMGklLXYGADsZrT1\njdy8FTMPkeYrBGTPyRi9hwZv/p7d5YytK9lZsR4B9vl0Mvf6Bm2A3zZPC9NfeYk=\n=jew/\n-----END PGP SIGNATURE-----\n", "payload": "tree 4a523ca51052626d9d4740324d442c58cc8b46fc\nparent 75b7089d1efbb80c810ce906ff96a9da8bdd9a9c\nparent efef211876b193ebc5e33dc9414c5a3dc14e9739\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1661180655 +0530\ncommitter GitHub <noreply@github.com> 1661180655 +0530\n\nRollup merge of #100820 - WaffleLapkin:use_ptr_is_aligned_methods, r=scottmcm\n\nUse pointer `is_aligned*` methods\n\nThis PR replaces some manual alignment checks with calls to `pointer::{is_aligned, is_aligned_to}` and removes a useless pointer cast.\n\nr? `@scottmcm`\n\n_split off from #100746_\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58d23737a6d77c88af6b9b600058877910db1bff", "html_url": "https://github.com/rust-lang/rust/commit/58d23737a6d77c88af6b9b600058877910db1bff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58d23737a6d77c88af6b9b600058877910db1bff/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75b7089d1efbb80c810ce906ff96a9da8bdd9a9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/75b7089d1efbb80c810ce906ff96a9da8bdd9a9c", "html_url": "https://github.com/rust-lang/rust/commit/75b7089d1efbb80c810ce906ff96a9da8bdd9a9c"}, {"sha": "efef211876b193ebc5e33dc9414c5a3dc14e9739", "url": "https://api.github.com/repos/rust-lang/rust/commits/efef211876b193ebc5e33dc9414c5a3dc14e9739", "html_url": "https://github.com/rust-lang/rust/commit/efef211876b193ebc5e33dc9414c5a3dc14e9739"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "4351548811d2eb9a0ab594cfbce590fb8747cd38", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58d23737a6d77c88af6b9b600058877910db1bff/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d23737a6d77c88af6b9b600058877910db1bff/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=58d23737a6d77c88af6b9b600058877910db1bff", "patch": "@@ -148,7 +148,7 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n \n     #[inline]\n     fn next(&mut self) -> Option<T> {\n-        if self.ptr as *const _ == self.end {\n+        if self.ptr == self.end {\n             None\n         } else if mem::size_of::<T>() == 0 {\n             // purposefully don't use 'ptr.offset' because for"}, {"sha": "99bfb2a45ed90434fc79f63d492ed539313bb330", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58d23737a6d77c88af6b9b600058877910db1bff/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d23737a6d77c88af6b9b600058877910db1bff/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=58d23737a6d77c88af6b9b600058877910db1bff", "patch": "@@ -38,6 +38,7 @@\n #![feature(const_str_from_utf8)]\n #![feature(nonnull_slice_from_raw_parts)]\n #![feature(panic_update_hook)]\n+#![feature(pointer_is_aligned)]\n #![feature(slice_flatten)]\n #![feature(thin_box)]\n #![feature(bench_black_box)]"}, {"sha": "e008b0cc35718dd8fe0533cb41f61ac66c44eb41", "filename": "library/alloc/tests/thin_box.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58d23737a6d77c88af6b9b600058877910db1bff/library%2Falloc%2Ftests%2Fthin_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d23737a6d77c88af6b9b600058877910db1bff/library%2Falloc%2Ftests%2Fthin_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fthin_box.rs?ref=58d23737a6d77c88af6b9b600058877910db1bff", "patch": "@@ -48,11 +48,11 @@ fn verify_aligned<T>(ptr: *const T) {\n     // practice these checks are mostly just smoke-detectors for an extremely\n     // broken `ThinBox` impl, since it's an extremely subtle piece of code.\n     let ptr = core::hint::black_box(ptr);\n-    let align = core::mem::align_of::<T>();\n     assert!(\n-        (ptr.addr() & (align - 1)) == 0 && !ptr.is_null(),\n-        \"misaligned ThinBox data; valid pointers to `{}` should be aligned to {align}: {ptr:p}\",\n-        core::any::type_name::<T>(),\n+        ptr.is_aligned() && !ptr.is_null(),\n+        \"misaligned ThinBox data; valid pointers to `{ty}` should be aligned to {align}: {ptr:p}\",\n+        ty = core::any::type_name::<T>(),\n+        align = core::mem::align_of::<T>(),\n     );\n }\n "}, {"sha": "441d2382686935b5dc321c095c45d2f7f274f787", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58d23737a6d77c88af6b9b600058877910db1bff/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d23737a6d77c88af6b9b600058877910db1bff/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=58d23737a6d77c88af6b9b600058877910db1bff", "patch": "@@ -2139,7 +2139,7 @@ pub(crate) use assert_unsafe_precondition;\n /// Checks whether `ptr` is properly aligned with respect to\n /// `align_of::<T>()`.\n pub(crate) fn is_aligned_and_not_null<T>(ptr: *const T) -> bool {\n-    !ptr.is_null() && ptr.addr() % mem::align_of::<T>() == 0\n+    !ptr.is_null() && ptr.is_aligned()\n }\n \n /// Checks whether the regions of memory starting at `src` and `dst` of size"}, {"sha": "71bbf4317e0a5a8767e18763389ad7bd03407d1e", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58d23737a6d77c88af6b9b600058877910db1bff/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d23737a6d77c88af6b9b600058877910db1bff/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=58d23737a6d77c88af6b9b600058877910db1bff", "patch": "@@ -296,6 +296,7 @@\n #![feature(panic_can_unwind)]\n #![feature(panic_info_message)]\n #![feature(panic_internals)]\n+#![feature(pointer_is_aligned)]\n #![feature(portable_simd)]\n #![feature(prelude_2024)]\n #![feature(provide_any)]"}, {"sha": "5409bd1777c2aadbe1f73a5ccb21326d58db3bce", "filename": "library/std/src/sys/sgx/abi/usercalls/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58d23737a6d77c88af6b9b600058877910db1bff/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d23737a6d77c88af6b9b600058877910db1bff/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs?ref=58d23737a6d77c88af6b9b600058877910db1bff", "patch": "@@ -117,7 +117,7 @@ pub unsafe trait UserSafe {\n     /// * the pointer is null.\n     /// * the pointed-to range is not in user memory.\n     unsafe fn check_ptr(ptr: *const Self) {\n-        let is_aligned = |p: *const u8| -> bool { 0 == p.addr() & (Self::align_of() - 1) };\n+        let is_aligned = |p: *const u8| -> bool { p.is_aligned_to(Self::align_of()) };\n \n         assert!(is_aligned(ptr as *const u8));\n         assert!(is_user_range(ptr as _, mem::size_of_val(unsafe { &*ptr })));\n@@ -386,7 +386,7 @@ pub(crate) unsafe fn copy_to_userspace(src: *const u8, dst: *mut u8, len: usize)\n         unsafe {\n             copy_bytewise_to_userspace(src, dst, len);\n         }\n-    } else if len % 8 == 0 && dst as usize % 8 == 0 {\n+    } else if len % 8 == 0 && dst.is_aligned_to(8) {\n         // Copying 8-byte aligned quadwords: copy quad word per quad word\n         unsafe {\n             copy_quadwords(src, dst, len);"}]}