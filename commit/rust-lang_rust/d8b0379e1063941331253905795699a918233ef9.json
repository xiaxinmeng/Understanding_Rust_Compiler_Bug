{"sha": "d8b0379e1063941331253905795699a918233ef9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4YjAzNzllMTA2Mzk0MTMzMTI1MzkwNTc5NTY5OWE5MTgyMzNlZjk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-04T20:44:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-04T20:44:00Z"}, "message": "Add functions to DefId", "tree": {"sha": "18a7ef94cdf6575ed1954648287b284c3ace6451", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18a7ef94cdf6575ed1954648287b284c3ace6451"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8b0379e1063941331253905795699a918233ef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8b0379e1063941331253905795699a918233ef9", "html_url": "https://github.com/rust-lang/rust/commit/d8b0379e1063941331253905795699a918233ef9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8b0379e1063941331253905795699a918233ef9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "947e3350e045aab1db9b232542425a3faa856907", "url": "https://api.github.com/repos/rust-lang/rust/commits/947e3350e045aab1db9b232542425a3faa856907", "html_url": "https://github.com/rust-lang/rust/commit/947e3350e045aab1db9b232542425a3faa856907"}], "stats": {"total": 173, "additions": 90, "deletions": 83}, "files": [{"sha": "f483ed0455ae1a0f0656ea3fb7082acba218c221", "filename": "crates/ra_analysis/src/completion/reference_completion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8b0379e1063941331253905795699a918233ef9/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b0379e1063941331253905795699a918233ef9/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs?ref=d8b0379e1063941331253905795699a918233ef9", "patch": "@@ -163,7 +163,7 @@ fn complete_path(\n     };\n     let target_module = match def_id.resolve(db)? {\n         Def::Module(it) => it,\n-        Def::Item => return Ok(()),\n+        _ => return Ok(()),\n     };\n     let module_scope = target_module.scope(db)?;\n     let completions = module_scope.entries().map(|(name, _res)| CompletionItem {"}, {"sha": "b8d774eb5820d98f8e4487d2c24d40fc3f596f0c", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d8b0379e1063941331253905795699a918233ef9/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b0379e1063941331253905795699a918233ef9/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=d8b0379e1063941331253905795699a918233ef9", "patch": "@@ -1,7 +1,7 @@\n use std::sync::Arc;\n use salsa::{self, Database};\n use ra_db::{LocationIntener, BaseDatabase};\n-use hir::{self, DefId, DefLoc, FnId, SourceItemId};\n+use hir::{self, DefId, DefLoc};\n \n use crate::{\n     symbol_index,\n@@ -15,7 +15,6 @@ pub(crate) struct RootDatabase {\n \n #[derive(Debug, Default)]\n struct IdMaps {\n-    fns: LocationIntener<SourceItemId, FnId>,\n     defs: LocationIntener<DefLoc, DefId>,\n }\n \n@@ -58,12 +57,6 @@ impl AsRef<LocationIntener<DefLoc, DefId>> for RootDatabase {\n     }\n }\n \n-impl AsRef<LocationIntener<hir::SourceItemId, FnId>> for RootDatabase {\n-    fn as_ref(&self) -> &LocationIntener<hir::SourceItemId, FnId> {\n-        &self.id_maps.fns\n-    }\n-}\n-\n salsa::database_storage! {\n     pub(crate) struct RootDatabaseStorage for RootDatabase {\n         impl ra_db::FilesDatabase {"}, {"sha": "fe1dfefea15626c20ffbb49e619854090857afe5", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d8b0379e1063941331253905795699a918233ef9/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b0379e1063941331253905795699a918233ef9/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=d8b0379e1063941331253905795699a918233ef9", "patch": "@@ -210,7 +210,7 @@ impl AnalysisImpl {\n         let syntax = file.syntax();\n         if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, position.offset) {\n             if let Some(fn_descr) =\n-                hir::Function::guess_for_name_ref(&*self.db, position.file_id, name_ref)\n+                hir::Function::guess_for_name_ref(&*self.db, position.file_id, name_ref)?\n             {\n                 let scope = fn_descr.scope(&*self.db);\n                 // First try to resolve the symbol locally\n@@ -257,11 +257,11 @@ impl AnalysisImpl {\n         Ok(vec![])\n     }\n \n-    pub fn find_all_refs(&self, position: FilePosition) -> Vec<(FileId, TextRange)> {\n+    pub fn find_all_refs(&self, position: FilePosition) -> Cancelable<Vec<(FileId, TextRange)>> {\n         let file = self.db.source_file(position.file_id);\n         // Find the binding associated with the offset\n-        let (binding, descr) = match find_binding(&self.db, &file, position) {\n-            None => return Vec::new(),\n+        let (binding, descr) = match find_binding(&self.db, &file, position)? {\n+            None => return Ok(Vec::new()),\n             Some(it) => it,\n         };\n \n@@ -274,25 +274,36 @@ impl AnalysisImpl {\n                 .map(|ref_desc| (position.file_id, ref_desc.range)),\n         );\n \n-        return ret;\n+        return Ok(ret);\n \n         fn find_binding<'a>(\n             db: &db::RootDatabase,\n             source_file: &'a SourceFileNode,\n             position: FilePosition,\n-        ) -> Option<(ast::BindPat<'a>, hir::Function)> {\n+        ) -> Cancelable<Option<(ast::BindPat<'a>, hir::Function)>> {\n             let syntax = source_file.syntax();\n             if let Some(binding) = find_node_at_offset::<ast::BindPat>(syntax, position.offset) {\n-                let descr = hir::Function::guess_for_bind_pat(db, position.file_id, binding)?;\n-                return Some((binding, descr));\n+                let descr = ctry!(hir::Function::guess_for_bind_pat(\n+                    db,\n+                    position.file_id,\n+                    binding\n+                )?);\n+                return Ok(Some((binding, descr)));\n             };\n-            let name_ref = find_node_at_offset::<ast::NameRef>(syntax, position.offset)?;\n-            let descr = hir::Function::guess_for_name_ref(db, position.file_id, name_ref)?;\n+            let name_ref = ctry!(find_node_at_offset::<ast::NameRef>(syntax, position.offset));\n+            let descr = ctry!(hir::Function::guess_for_name_ref(\n+                db,\n+                position.file_id,\n+                name_ref\n+            )?);\n             let scope = descr.scope(db);\n-            let resolved = scope.resolve_local_name(name_ref)?;\n+            let resolved = ctry!(scope.resolve_local_name(name_ref));\n             let resolved = resolved.ptr().resolve(source_file);\n-            let binding = find_node_at_offset::<ast::BindPat>(syntax, resolved.range().end())?;\n-            Some((binding, descr))\n+            let binding = ctry!(find_node_at_offset::<ast::BindPat>(\n+                syntax,\n+                resolved.range().end()\n+            ));\n+            Ok(Some((binding, descr)))\n         }\n     }\n \n@@ -408,7 +419,9 @@ impl AnalysisImpl {\n             if fs.kind == FN_DEF {\n                 let fn_file = self.db.source_file(fn_file_id);\n                 if let Some(fn_def) = find_node_at_offset(fn_file.syntax(), fs.node_range.start()) {\n-                    let descr = hir::Function::guess_from_source(&*self.db, fn_file_id, fn_def);\n+                    let descr = ctry!(hir::Function::guess_from_source(\n+                        &*self.db, fn_file_id, fn_def\n+                    )?);\n                     if let Some(descriptor) = descr.signature_info(&*self.db) {\n                         // If we have a calling expression let's find which argument we are on\n                         let mut current_parameter = None;"}, {"sha": "90528edfdec7a010a30d4be5a0b6ca61ba022d04", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8b0379e1063941331253905795699a918233ef9/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b0379e1063941331253905795699a918233ef9/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=d8b0379e1063941331253905795699a918233ef9", "patch": "@@ -248,7 +248,7 @@ impl Analysis {\n         self.imp.approximately_resolve_symbol(position)\n     }\n     pub fn find_all_refs(&self, position: FilePosition) -> Cancelable<Vec<(FileId, TextRange)>> {\n-        Ok(self.imp.find_all_refs(position))\n+        self.imp.find_all_refs(position)\n     }\n     pub fn doc_comment_for(\n         &self,"}, {"sha": "ff41fd326a06426c41b2e309110590c32ad27c1c", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8b0379e1063941331253905795699a918233ef9/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b0379e1063941331253905795699a918233ef9/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=d8b0379e1063941331253905795699a918233ef9", "patch": "@@ -7,10 +7,11 @@ use ra_syntax::{\n use ra_db::{SourceRootId, LocationIntener, SyntaxDatabase, FileId, Cancelable};\n \n use crate::{\n-    DefLoc, DefId, FnId,\n+    DefLoc, DefId,\n     SourceFileItems, SourceItemId,\n     query_definitions,\n     FnScopes,\n+    function::FnId,\n     module::{ModuleId, ModuleTree, ModuleSource,\n     nameres::{ItemMap, InputModuleItems}},\n };\n@@ -19,7 +20,6 @@ salsa::query_group! {\n \n pub trait HirDatabase: SyntaxDatabase\n     + AsRef<LocationIntener<DefLoc, DefId>>\n-    + AsRef<LocationIntener<SourceItemId, FnId>>\n {\n     fn fn_scopes(fn_id: FnId) -> Arc<FnScopes> {\n         type FnScopesQuery;"}, {"sha": "a6757601e163fe93152ff61b779dd9d2be7b6c94", "filename": "crates/ra_hir/src/function/mod.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d8b0379e1063941331253905795699a918233ef9/crates%2Fra_hir%2Fsrc%2Ffunction%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b0379e1063941331253905795699a918233ef9/crates%2Fra_hir%2Fsrc%2Ffunction%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffunction%2Fmod.rs?ref=d8b0379e1063941331253905795699a918233ef9", "patch": "@@ -12,19 +12,15 @@ use ra_syntax::{\n use ra_db::FileId;\n \n use crate::{\n-    FnId, HirDatabase, SourceItemId,\n+    Cancelable,\n+    DefLoc, DefKind, DefId, HirDatabase, SourceItemId,\n+    Module,\n };\n \n pub use self::scope::FnScopes;\n \n-impl FnId {\n-    pub fn get(db: &impl HirDatabase, file_id: FileId, fn_def: ast::FnDef) -> FnId {\n-        let file_items = db.file_items(file_id);\n-        let item_id = file_items.id_of(fn_def.syntax());\n-        let item_id = SourceItemId { file_id, item_id };\n-        FnId::from_loc(db, &item_id)\n-    }\n-}\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub struct FnId(pub(crate) DefId);\n \n pub struct Function {\n     fn_id: FnId,\n@@ -35,35 +31,44 @@ impl Function {\n         db: &impl HirDatabase,\n         file_id: FileId,\n         fn_def: ast::FnDef,\n-    ) -> Function {\n-        let fn_id = FnId::get(db, file_id, fn_def);\n-        Function { fn_id }\n+    ) -> Cancelable<Option<Function>> {\n+        let module = ctry!(Module::guess_from_child_node(db, file_id, fn_def.syntax())?);\n+        let file_items = db.file_items(file_id);\n+        let item_id = file_items.id_of(fn_def.syntax());\n+        let source_item_id = SourceItemId { file_id, item_id };\n+        let def_loc = DefLoc {\n+            kind: DefKind::Function,\n+            source_root_id: module.source_root_id,\n+            module_id: module.module_id,\n+            source_item_id,\n+        };\n+        let fn_id = FnId(def_loc.id(db));\n+        Ok(Some(Function { fn_id }))\n     }\n \n     pub fn guess_for_name_ref(\n         db: &impl HirDatabase,\n         file_id: FileId,\n         name_ref: ast::NameRef,\n-    ) -> Option<Function> {\n+    ) -> Cancelable<Option<Function>> {\n         Function::guess_for_node(db, file_id, name_ref.syntax())\n     }\n \n     pub fn guess_for_bind_pat(\n         db: &impl HirDatabase,\n         file_id: FileId,\n         bind_pat: ast::BindPat,\n-    ) -> Option<Function> {\n+    ) -> Cancelable<Option<Function>> {\n         Function::guess_for_node(db, file_id, bind_pat.syntax())\n     }\n \n     fn guess_for_node(\n         db: &impl HirDatabase,\n         file_id: FileId,\n         node: SyntaxNodeRef,\n-    ) -> Option<Function> {\n-        let fn_def = node.ancestors().find_map(ast::FnDef::cast)?;\n-        let res = Function::guess_from_source(db, file_id, fn_def);\n-        Some(res)\n+    ) -> Cancelable<Option<Function>> {\n+        let fn_def = ctry!(node.ancestors().find_map(ast::FnDef::cast));\n+        Function::guess_from_source(db, file_id, fn_def)\n     }\n \n     pub fn scope(&self, db: &impl HirDatabase) -> Arc<FnScopes> {"}, {"sha": "dbcc5e46da9103674b41cec337e4766e7f1c0980", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d8b0379e1063941331253905795699a918233ef9/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b0379e1063941331253905795699a918233ef9/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=d8b0379e1063941331253905795699a918233ef9", "patch": "@@ -41,29 +41,14 @@ pub use self::{\n \n pub use self::function::FnSignatureInfo;\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct FnId(u32);\n-ra_db::impl_numeric_id!(FnId);\n-\n-impl FnId {\n-    pub fn from_loc(\n-        db: &impl AsRef<LocationIntener<SourceItemId, FnId>>,\n-        loc: &SourceItemId,\n-    ) -> FnId {\n-        db.as_ref().loc2id(loc)\n-    }\n-    pub fn loc(self, db: &impl AsRef<LocationIntener<SourceItemId, FnId>>) -> SourceItemId {\n-        db.as_ref().id2loc(self)\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct DefId(u32);\n ra_db::impl_numeric_id!(DefId);\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub(crate) enum DefKind {\n     Module,\n+    Function,\n     Item,\n }\n \n@@ -89,6 +74,7 @@ impl DefLoc {\n \n pub enum Def {\n     Module(Module),\n+    Function(Function),\n     Item,\n }\n \n@@ -100,7 +86,7 @@ impl DefId {\n                 let descr = Module::new(db, loc.source_root_id, loc.module_id)?;\n                 Def::Module(descr)\n             }\n-            DefKind::Item => Def::Item,\n+            DefKind::Item | DefKind::Function => Def::Item,\n         };\n         Ok(res)\n     }"}, {"sha": "e855df11d1f77e2dad3ddbcaa05b27f34265c608", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d8b0379e1063941331253905795699a918233ef9/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b0379e1063941331253905795699a918233ef9/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=d8b0379e1063941331253905795699a918233ef9", "patch": "@@ -6,7 +6,7 @@ use ra_db::{LocationIntener, BaseDatabase, FilePosition, mock::FileMap, FileId,\n use relative_path::RelativePathBuf;\n use test_utils::{parse_fixture, CURSOR_MARKER, extract_offset};\n \n-use crate::{db, DefId, DefLoc, FnId, SourceItemId};\n+use crate::{db, DefId, DefLoc};\n \n #[derive(Debug)]\n pub(crate) struct MockDatabase {\n@@ -65,7 +65,6 @@ impl MockDatabase {\n \n #[derive(Debug, Default)]\n struct IdMaps {\n-    fns: LocationIntener<SourceItemId, FnId>,\n     defs: LocationIntener<DefLoc, DefId>,\n }\n \n@@ -117,12 +116,6 @@ impl AsRef<LocationIntener<DefLoc, DefId>> for MockDatabase {\n     }\n }\n \n-impl AsRef<LocationIntener<SourceItemId, FnId>> for MockDatabase {\n-    fn as_ref(&self) -> &LocationIntener<SourceItemId, FnId> {\n-        &self.id_maps.fns\n-    }\n-}\n-\n impl MockDatabase {\n     pub(crate) fn log(&self, f: impl FnOnce()) -> Vec<salsa::Event<MockDatabase>> {\n         *self.events.lock() = Some(Vec::new());"}, {"sha": "11e6e8e75a01622db35c8ba5b041239ad04a95bb", "filename": "crates/ra_hir/src/module/mod.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d8b0379e1063941331253905795699a918233ef9/crates%2Fra_hir%2Fsrc%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b0379e1063941331253905795699a918233ef9/crates%2Fra_hir%2Fsrc%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fmod.rs?ref=d8b0379e1063941331253905795699a918233ef9", "patch": "@@ -8,7 +8,7 @@ use ra_editor::find_node_at_offset;\n use ra_syntax::{\n     algo::generate,\n     ast::{self, AstNode, NameOwner},\n-    SmolStr, SyntaxNode,\n+    SmolStr, SyntaxNode, SyntaxNodeRef,\n };\n use ra_db::{SourceRootId, FileId, FilePosition, Cancelable};\n use relative_path::RelativePathBuf;\n@@ -25,8 +25,8 @@ pub use self::nameres::ModuleScope;\n #[derive(Debug, Clone)]\n pub struct Module {\n     tree: Arc<ModuleTree>,\n-    source_root_id: SourceRootId,\n-    module_id: ModuleId,\n+    pub(crate) source_root_id: SourceRootId,\n+    pub(crate) module_id: ModuleId,\n }\n \n impl Module {\n@@ -57,6 +57,23 @@ impl Module {\n         Module::guess_from_source(db, module_source)\n     }\n \n+    pub fn guess_from_child_node(\n+        db: &impl HirDatabase,\n+        file_id: FileId,\n+        node: SyntaxNodeRef,\n+    ) -> Cancelable<Option<Module>> {\n+        let module_source = if let Some(m) = node\n+            .ancestors()\n+            .filter_map(ast::Module::cast)\n+            .find(|it| !it.has_semi())\n+        {\n+            ModuleSource::new_inline(db, file_id, m)\n+        } else {\n+            ModuleSource::new_file(db, file_id)\n+        };\n+        Module::guess_from_source(db, module_source)\n+    }\n+\n     fn guess_from_source(\n         db: &impl HirDatabase,\n         module_source: ModuleSource,"}, {"sha": "e4d721601df94f67cf6a49a75fb48ea1fc7aed98", "filename": "crates/ra_hir/src/query_definitions.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d8b0379e1063941331253905795699a918233ef9/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b0379e1063941331253905795699a918233ef9/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs?ref=d8b0379e1063941331253905795699a918233ef9", "patch": "@@ -11,21 +11,21 @@ use ra_syntax::{\n use ra_db::{SourceRootId, FileId, Cancelable,};\n \n use crate::{\n-        FnId,\n-        SourceFileItems, SourceItemId,\n-        db::HirDatabase,\n-        function::FnScopes,\n-        module::{\n-            ModuleSource, ModuleSourceNode, ModuleId,\n-            imp::Submodule,\n-            nameres::{InputModuleItems, ItemMap, Resolver},\n-        },\n+    SourceFileItems, SourceItemId, DefKind,\n+    db::HirDatabase,\n+    function::{FnScopes, FnId},\n+    module::{\n+        ModuleSource, ModuleSourceNode, ModuleId,\n+        imp::Submodule,\n+        nameres::{InputModuleItems, ItemMap, Resolver},\n+    },\n };\n \n /// Resolve `FnId` to the corresponding `SyntaxNode`\n pub(super) fn fn_syntax(db: &impl HirDatabase, fn_id: FnId) -> FnDefNode {\n-    let item_id = fn_id.loc(db);\n-    let syntax = db.file_item(item_id);\n+    let def_loc = fn_id.0.loc(db);\n+    assert!(def_loc.kind == DefKind::Function);\n+    let syntax = db.file_item(def_loc.source_item_id);\n     FnDef::cast(syntax.borrowed()).unwrap().owned()\n }\n "}]}