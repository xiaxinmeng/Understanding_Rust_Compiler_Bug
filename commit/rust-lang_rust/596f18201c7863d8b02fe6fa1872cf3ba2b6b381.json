{"sha": "596f18201c7863d8b02fe6fa1872cf3ba2b6b381", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NmYxODIwMWM3ODYzZDhiMDJmZTZmYTE4NzJjZjNiYTJiNmIzODE=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2019-02-12T03:31:37Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2019-02-14T03:40:17Z"}, "message": "impl Deref/DerefMut for IoVec types\n\nReturning &'a mut [u8] was unsound, and we may as well just have them\ndirectly deref to their slices to make it easier to work with them.", "tree": {"sha": "1b152d89591c590eb92bf1b18591836e88ccf347", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b152d89591c590eb92bf1b18591836e88ccf347"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/596f18201c7863d8b02fe6fa1872cf3ba2b6b381", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/596f18201c7863d8b02fe6fa1872cf3ba2b6b381", "html_url": "https://github.com/rust-lang/rust/commit/596f18201c7863d8b02fe6fa1872cf3ba2b6b381", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31bcec648aa57391115f877a2ca022d7ff6415aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/31bcec648aa57391115f877a2ca022d7ff6415aa", "html_url": "https://github.com/rust-lang/rust/commit/31bcec648aa57391115f877a2ca022d7ff6415aa"}], "stats": {"total": 100, "additions": 53, "deletions": 47}, "files": [{"sha": "d8a5f5a4d8cb005aed506cd89f1ee9c2d71a64b5", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=596f18201c7863d8b02fe6fa1872cf3ba2b6b381", "patch": "@@ -236,7 +236,7 @@ impl<R: Read> Read for BufReader<R> {\n     }\n \n     fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n-        let total_len = bufs.iter().map(|b| b.as_slice().len()).sum::<usize>();\n+        let total_len = bufs.iter().map(|b| b.len()).sum::<usize>();\n         if self.pos == self.cap && total_len >= self.buf.len() {\n             return self.inner.read_vectored(bufs);\n         }\n@@ -595,7 +595,7 @@ impl<W: Write> Write for BufWriter<W> {\n     }\n \n     fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n-        let total_len = bufs.iter().map(|b| b.as_slice().len()).sum::<usize>();\n+        let total_len = bufs.iter().map(|b| b.len()).sum::<usize>();\n         if self.buf.len() + total_len > self.buf.capacity() {\n             self.flush_buf()?;\n         }"}, {"sha": "d1739894a2775e740b9c8bf51ae15375f77b046b", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=596f18201c7863d8b02fe6fa1872cf3ba2b6b381", "patch": "@@ -224,7 +224,6 @@ impl<T> Read for Cursor<T> where T: AsRef<[u8]> {\n     fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n         let mut nread = 0;\n         for buf in bufs {\n-            let buf = buf.as_mut_slice();\n             let n = self.read(buf)?;\n             nread += n;\n             if n < buf.len() {\n@@ -272,7 +271,6 @@ fn slice_write_vectored(\n {\n     let mut nwritten = 0;\n     for buf in bufs {\n-        let buf = buf.as_slice();\n         let n = slice_write(pos_mut, slice, buf)?;\n         nwritten += n;\n         if n < buf.len() {\n@@ -317,7 +315,7 @@ fn vec_write_vectored(\n {\n     let mut nwritten = 0;\n     for buf in bufs {\n-        nwritten += vec_write(pos_mut, vec, buf.as_slice())?;\n+        nwritten += vec_write(pos_mut, vec, buf)?;\n     }\n     Ok(nwritten)\n }"}, {"sha": "57d8cf40a798b0596168317117a629f87ee86d95", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=596f18201c7863d8b02fe6fa1872cf3ba2b6b381", "patch": "@@ -196,7 +196,7 @@ impl<'a> Read for &'a [u8] {\n     fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n         let mut nread = 0;\n         for buf in bufs {\n-            nread += self.read(buf.as_mut_slice())?;\n+            nread += self.read(buf)?;\n             if self.is_empty() {\n                 break;\n             }\n@@ -269,7 +269,7 @@ impl<'a> Write for &'a mut [u8] {\n     fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n         let mut nwritten = 0;\n         for buf in bufs {\n-            nwritten += self.write(buf.as_slice())?;\n+            nwritten += self.write(buf)?;\n             if self.is_empty() {\n                 break;\n             }\n@@ -303,10 +303,10 @@ impl Write for Vec<u8> {\n \n     #[inline]\n     fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n-        let len = bufs.iter().map(|b| b.as_slice().len()).sum();\n+        let len = bufs.iter().map(|b| b.len()).sum();\n         self.reserve(len);\n         for buf in bufs {\n-            self.extend_from_slice(buf.as_slice());\n+            self.extend_from_slice(buf);\n         }\n         Ok(len)\n     }"}, {"sha": "7f9c5a0316c8be9fc99dbfcf7715cee2028c7a32", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=596f18201c7863d8b02fe6fa1872cf3ba2b6b381", "patch": "@@ -264,6 +264,7 @@ use fmt;\n use slice;\n use str;\n use memchr;\n+use ops::{Deref, DerefMut};\n use ptr;\n use sys;\n \n@@ -531,7 +532,7 @@ pub trait Read {\n     /// `read`.\n     #[unstable(feature = \"iovec\", issue = \"0\")]\n     fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> Result<usize> {\n-        match bufs.iter_mut().map(|b| b.as_mut_slice()).find(|b| !b.is_empty()) {\n+        match bufs.iter_mut().find(|b| !b.is_empty()) {\n             Some(buf) => self.read(buf),\n             None => Ok(0),\n         }\n@@ -896,7 +897,7 @@ pub struct IoVecMut<'a>(sys::io::IoVecMut<'a>);\n #[unstable(feature = \"iovec\", issue = \"0\")]\n impl<'a> fmt::Debug for IoVecMut<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Debug::fmt(self.as_slice(), fmt)\n+        fmt::Debug::fmt(self.0.as_slice(), fmt)\n     }\n }\n \n@@ -911,18 +912,22 @@ impl<'a> IoVecMut<'a> {\n     pub fn new(buf: &'a mut [u8]) -> IoVecMut<'a> {\n         IoVecMut(sys::io::IoVecMut::new(buf))\n     }\n+}\n+\n+#[unstable(feature = \"iovec\", issue = \"0\")]\n+impl<'a> Deref for IoVecMut<'a> {\n+    type Target = [u8];\n \n-    /// Returns a shared reference to the inner slice.\n-    #[unstable(feature = \"iovec\", issue = \"0\")]\n     #[inline]\n-    pub fn as_slice(&self) -> &'a [u8] {\n+    fn deref(&self) -> &[u8] {\n         self.0.as_slice()\n     }\n+}\n \n-    /// Returns a mutable reference to the inner slice.\n-    #[unstable(feature = \"iovec\", issue = \"0\")]\n+#[unstable(feature = \"iovec\", issue = \"0\")]\n+impl<'a> DerefMut for IoVecMut<'a> {\n     #[inline]\n-    pub fn as_mut_slice(&mut self) -> &'a mut [u8] {\n+    fn deref_mut(&mut self) -> &mut [u8] {\n         self.0.as_mut_slice()\n     }\n }\n@@ -939,7 +944,7 @@ pub struct IoVec<'a>(sys::io::IoVec<'a>);\n #[unstable(feature = \"iovec\", issue = \"0\")]\n impl<'a> fmt::Debug for IoVec<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Debug::fmt(self.as_slice(), fmt)\n+        fmt::Debug::fmt(self.0.as_slice(), fmt)\n     }\n }\n \n@@ -954,11 +959,14 @@ impl<'a> IoVec<'a> {\n     pub fn new(buf: &'a [u8]) -> IoVec<'a> {\n         IoVec(sys::io::IoVec::new(buf))\n     }\n+}\n+\n+#[unstable(feature = \"iovec\", issue = \"0\")]\n+impl<'a> Deref for IoVec<'a> {\n+    type Target = [u8];\n \n-    /// Returns a shared reference to the inner slice.\n-    #[unstable(feature = \"iovec\", issue = \"0\")]\n     #[inline]\n-    pub fn as_slice(&self) -> &'a [u8] {\n+    fn deref(&self) -> &[u8] {\n         self.0.as_slice()\n     }\n }\n@@ -1103,7 +1111,7 @@ pub trait Write {\n     /// `write`.\n     #[unstable(feature = \"iovec\", issue = \"0\")]\n     fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> Result<usize> {\n-        match bufs.iter().map(|b| b.as_slice()).find(|b| !b.is_empty()) {\n+        match bufs.iter().find(|b| !b.is_empty()) {\n             Some(buf) => self.write(buf),\n             None => Ok(0),\n         }\n@@ -1813,7 +1821,7 @@ impl<T: Read, U: Read> Read for Chain<T, U> {\n     fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> Result<usize> {\n         if !self.done_first {\n             match self.first.read_vectored(bufs)? {\n-                0 if bufs.iter().any(|b| !b.as_slice().is_empty()) => self.done_first = true,\n+                0 if bufs.iter().any(|b| !b.is_empty()) => self.done_first = true,\n                 n => return Ok(n),\n             }\n         }"}, {"sha": "5ce955eb1e4af049f84a3a9bda520d2be93530da", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=596f18201c7863d8b02fe6fa1872cf3ba2b6b381", "patch": "@@ -156,7 +156,7 @@ impl Read for Repeat {\n     fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n         let mut nwritten = 0;\n         for buf in bufs {\n-            nwritten += self.read(buf.as_mut_slice())?;\n+            nwritten += self.read(buf)?;\n         }\n         Ok(nwritten)\n     }\n@@ -207,7 +207,7 @@ impl Write for Sink {\n \n     #[inline]\n     fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n-        let total_len = bufs.iter().map(|b| b.as_slice().len()).sum();\n+        let total_len = bufs.iter().map(|b| b.len()).sum();\n         Ok(total_len)\n     }\n "}, {"sha": "8b02d3fd19d304f19d5c58a444e2ab8dfdc41678", "filename": "src/libstd/sys/cloudabi/io.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fsys%2Fcloudabi%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fsys%2Fcloudabi%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fio.rs?ref=596f18201c7863d8b02fe6fa1872cf3ba2b6b381", "patch": "@@ -7,7 +7,7 @@ impl<'a> IoVec<'a> {\n     }\n \n     #[inline]\n-    pub fn as_slice(&self) -> &'a [u8] {\n+    pub fn as_slice(&self) -> &[u8] {\n         self.0\n     }\n }\n@@ -21,12 +21,12 @@ impl<'a> IoVecMut<'a> {\n     }\n \n     #[inline]\n-    pub fn as_slice(&self) -> &'a [u8] {\n+    pub fn as_slice(&self) -> &[u8] {\n         self.0\n     }\n \n     #[inline]\n-    pub fn as_mut_slice(&mut self) -> &'a mut [u8] {\n+    pub fn as_mut_slice(&mut self) -> &mut [u8] {\n         self.0\n     }\n }"}, {"sha": "8b02d3fd19d304f19d5c58a444e2ab8dfdc41678", "filename": "src/libstd/sys/redox/io.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fsys%2Fredox%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fsys%2Fredox%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fio.rs?ref=596f18201c7863d8b02fe6fa1872cf3ba2b6b381", "patch": "@@ -7,7 +7,7 @@ impl<'a> IoVec<'a> {\n     }\n \n     #[inline]\n-    pub fn as_slice(&self) -> &'a [u8] {\n+    pub fn as_slice(&self) -> &[u8] {\n         self.0\n     }\n }\n@@ -21,12 +21,12 @@ impl<'a> IoVecMut<'a> {\n     }\n \n     #[inline]\n-    pub fn as_slice(&self) -> &'a [u8] {\n+    pub fn as_slice(&self) -> &[u8] {\n         self.0\n     }\n \n     #[inline]\n-    pub fn as_mut_slice(&mut self) -> &'a mut [u8] {\n+    pub fn as_mut_slice(&mut self) -> &mut [u8] {\n         self.0\n     }\n }"}, {"sha": "4396a6f963c7384977adc09828048ea7b6022b76", "filename": "src/libstd/sys/redox/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs?ref=596f18201c7863d8b02fe6fa1872cf3ba2b6b381", "patch": "@@ -35,7 +35,7 @@ impl TcpStream {\n     }\n \n     pub fn read_vectored(&self, buf: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n-        match buf.iter_mut().map(|b| b.as_mut_slice()).find(|b| !b.is_empty()) {\n+        match buf.iter_mut().find(|b| !b.is_empty()) {\n             Some(buf) => self.read(buf),\n             None => Ok(0),\n         }\n@@ -46,7 +46,7 @@ impl TcpStream {\n     }\n \n     pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n-        match buf.iter().map(|b| b.as_slice()).find(|b| !b.is_empty()) {\n+        match buf.iter().find(|b| !b.is_empty()) {\n             Some(buf) => self.write(buf),\n             None => Ok(0),\n         }"}, {"sha": "8b02d3fd19d304f19d5c58a444e2ab8dfdc41678", "filename": "src/libstd/sys/sgx/io.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fsys%2Fsgx%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fsys%2Fsgx%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fio.rs?ref=596f18201c7863d8b02fe6fa1872cf3ba2b6b381", "patch": "@@ -7,7 +7,7 @@ impl<'a> IoVec<'a> {\n     }\n \n     #[inline]\n-    pub fn as_slice(&self) -> &'a [u8] {\n+    pub fn as_slice(&self) -> &[u8] {\n         self.0\n     }\n }\n@@ -21,12 +21,12 @@ impl<'a> IoVecMut<'a> {\n     }\n \n     #[inline]\n-    pub fn as_slice(&self) -> &'a [u8] {\n+    pub fn as_slice(&self) -> &[u8] {\n         self.0\n     }\n \n     #[inline]\n-    pub fn as_mut_slice(&mut self) -> &'a mut [u8] {\n+    pub fn as_mut_slice(&mut self) -> &mut [u8] {\n         self.0\n     }\n }"}, {"sha": "f46ed022b21481fd508697f79958e38ec7c0b3c2", "filename": "src/libstd/sys/sgx/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs?ref=596f18201c7863d8b02fe6fa1872cf3ba2b6b381", "patch": "@@ -105,7 +105,7 @@ impl TcpStream {\n \n     pub fn read_vectored(&self, buf: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n         let buf = match buf.get(0) {\n-            Some(buf) => buf.as_mut_slice(),\n+            Some(buf) => buf,\n             None => return Ok(0),\n         };\n         self.read(buf)\n@@ -117,7 +117,7 @@ impl TcpStream {\n \n     pub fn write_vectored(&self, buf: &[IoVec<'_>]) -> io::Result<usize> {\n         let buf = match buf.get(0) {\n-            Some(buf) => buf.as_slice(),\n+            Some(buf) => buf,\n             None => return Ok(0),\n         };\n         self.read(buf)"}, {"sha": "65e4c6e0577509027d6a3c49b6efa27d3a661fb5", "filename": "src/libstd/sys/unix/io.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fsys%2Funix%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fsys%2Funix%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fio.rs?ref=596f18201c7863d8b02fe6fa1872cf3ba2b6b381", "patch": "@@ -21,7 +21,7 @@ impl<'a> IoVec<'a> {\n     }\n \n     #[inline]\n-    pub fn as_slice(&self) -> &'a [u8] {\n+    pub fn as_slice(&self) -> &[u8] {\n         unsafe {\n             slice::from_raw_parts(self.vec.iov_base as *mut u8, self.vec.iov_len)\n         }\n@@ -46,14 +46,14 @@ impl<'a> IoVecMut<'a> {\n     }\n \n     #[inline]\n-    pub fn as_slice(&self) -> &'a [u8] {\n+    pub fn as_slice(&self) -> &[u8] {\n         unsafe {\n             slice::from_raw_parts(self.vec.iov_base as *mut u8, self.vec.iov_len)\n         }\n     }\n \n     #[inline]\n-    pub fn as_mut_slice(&mut self) -> &'a mut [u8] {\n+    pub fn as_mut_slice(&mut self) -> &mut [u8] {\n         unsafe {\n             slice::from_raw_parts_mut(self.vec.iov_base as *mut u8, self.vec.iov_len)\n         }"}, {"sha": "8b02d3fd19d304f19d5c58a444e2ab8dfdc41678", "filename": "src/libstd/sys/wasm/io.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fsys%2Fwasm%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fsys%2Fwasm%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fio.rs?ref=596f18201c7863d8b02fe6fa1872cf3ba2b6b381", "patch": "@@ -7,7 +7,7 @@ impl<'a> IoVec<'a> {\n     }\n \n     #[inline]\n-    pub fn as_slice(&self) -> &'a [u8] {\n+    pub fn as_slice(&self) -> &[u8] {\n         self.0\n     }\n }\n@@ -21,12 +21,12 @@ impl<'a> IoVecMut<'a> {\n     }\n \n     #[inline]\n-    pub fn as_slice(&self) -> &'a [u8] {\n+    pub fn as_slice(&self) -> &[u8] {\n         self.0\n     }\n \n     #[inline]\n-    pub fn as_mut_slice(&mut self) -> &'a mut [u8] {\n+    pub fn as_mut_slice(&mut self) -> &mut [u8] {\n         self.0\n     }\n }"}, {"sha": "662e304792386e303a4633d2164c02736faf7f3f", "filename": "src/libstd/sys/windows/io.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fsys%2Fwindows%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596f18201c7863d8b02fe6fa1872cf3ba2b6b381/src%2Flibstd%2Fsys%2Fwindows%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fio.rs?ref=596f18201c7863d8b02fe6fa1872cf3ba2b6b381", "patch": "@@ -22,7 +22,7 @@ impl<'a> IoVec<'a> {\n     }\n \n     #[inline]\n-    pub fn as_slice(&self) -> &'a [u8] {\n+    pub fn as_slice(&self) -> &[u8] {\n         unsafe {\n             slice::from_raw_parts(self.vec.buf as *mut u8, self.vec.len as usize)\n         }\n@@ -48,14 +48,14 @@ impl<'a> IoVecMut<'a> {\n     }\n \n     #[inline]\n-    pub fn as_slice(&self) -> &'a [u8] {\n+    pub fn as_slice(&self) -> &[u8] {\n         unsafe {\n             slice::from_raw_parts(self.vec.buf as *mut u8, self.vec.len as usize)\n         }\n     }\n \n     #[inline]\n-    pub fn as_mut_slice(&mut self) -> &'a mut [u8] {\n+    pub fn as_mut_slice(&mut self) -> &mut [u8] {\n         unsafe {\n             slice::from_raw_parts_mut(self.vec.buf as *mut u8, self.vec.len as usize)\n         }"}]}