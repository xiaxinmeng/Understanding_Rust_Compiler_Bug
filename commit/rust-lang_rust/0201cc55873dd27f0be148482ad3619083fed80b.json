{"sha": "0201cc55873dd27f0be148482ad3619083fed80b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMDFjYzU1ODczZGQyN2YwYmUxNDg0ODJhZDM2MTkwODNmZWQ4MGI=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-18T19:25:49Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-18T20:28:06Z"}, "message": "Fix writing errors", "tree": {"sha": "e98ceabfe5e22fb0b3716d62365b2e0886ec8826", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e98ceabfe5e22fb0b3716d62365b2e0886ec8826"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0201cc55873dd27f0be148482ad3619083fed80b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0201cc55873dd27f0be148482ad3619083fed80b", "html_url": "https://github.com/rust-lang/rust/commit/0201cc55873dd27f0be148482ad3619083fed80b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0201cc55873dd27f0be148482ad3619083fed80b/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85941c72497e69653b847744a447ae51b433d4ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/85941c72497e69653b847744a447ae51b433d4ba", "html_url": "https://github.com/rust-lang/rust/commit/85941c72497e69653b847744a447ae51b433d4ba"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "c975ad144e263985afe02a777b112287390ee5f0", "filename": "src/helpers.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0201cc55873dd27f0be148482ad3619083fed80b/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0201cc55873dd27f0be148482ad3619083fed80b/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=0201cc55873dd27f0be148482ad3619083fed80b", "patch": "@@ -353,36 +353,33 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n     fn write_os_str_to_c_string(&mut self, os_str: &OsStr, ptr: Pointer<Tag>, size: u64) -> InterpResult<'tcx> {\n         let bytes = os_str_to_bytes(os_str)?;\n+        let len = bytes.len();\n         // If `size` is smaller or equal than `bytes.len()`, writing `bytes` plus the required null\n         // terminator to memory using the `ptr` pointer would cause an overflow.\n-        if (bytes.len() as u64) < size {\n+        if (len as u64) < size {\n             let this = self.eval_context_mut();\n             let tcx = &{ this.tcx.tcx };\n+            let buffer = this.memory.get_mut(ptr.alloc_id)?.get_bytes_mut(tcx, ptr, Size::from_bytes(len as u64 + 1))?;\n+            buffer[..len].copy_from_slice(bytes);\n             // This is ok because the buffer was strictly larger than `bytes`, so after adding the\n             // null terminator, the buffer size is larger or equal to `bytes.len()`, meaning that\n             // `bytes` actually fit inside tbe buffer.\n-            this.memory\n-                .get_mut(ptr.alloc_id)?\n-                .write_bytes(tcx, ptr, &bytes)?;\n-            // We write the `/0` terminator\n-            let tail_ptr = ptr.offset(Size::from_bytes(bytes.len() as u64 + 1), this)?;\n-            this.memory\n-                .get_mut(ptr.alloc_id)?\n-                .write_bytes(tcx, tail_ptr, b\"0\")\n+            buffer[len] = 0;\n+            Ok(())\n         } else {\n             throw_unsup_format!(\"OsString is larger than destination\")\n         }\n     }\n }\n \n #[cfg(target_os = \"unix\")]\n-fn bytes_to_os_str<'tcx, 'a>(bytes: &'a[u8]) -> InterpResult<'tcx, &'a OsStr> {\n-    Ok(std::os::unix::ffi::OsStringExt::from_bytes(bytes))\n+fn os_str_to_bytes<'tcx, 'a>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n+    std::os::unix::ffi::OsStringExt::into_bytes(os_str)\n }\n \n #[cfg(target_os = \"unix\")]\n-fn os_str_to_bytes<'tcx, 'a>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n-    std::os::unix::ffi::OsStringExt::into_bytes(os_str)\n+fn bytes_to_os_str<'tcx, 'a>(bytes: &'a[u8]) -> InterpResult<'tcx, &'a OsStr> {\n+    Ok(std::os::unix::ffi::OsStringExt::from_bytes(bytes))\n }\n \n // On non-unix platforms the best we can do to transform bytes from/to OS strings is to do the"}]}