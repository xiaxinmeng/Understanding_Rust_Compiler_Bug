{"sha": "b8defc6cc44196638ed4421fafe3c84864a2e40b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZGVmYzZjYzQ0MTk2NjM4ZWQ0NDIxZmFmZTNjODQ4NjRhMmU0MGI=", "commit": {"author": {"name": "Tristian Celestin", "email": "tcelesti@redhat.com", "date": "2017-02-26T03:55:43Z"}, "committer": {"name": "Tristian Celestin", "email": "tcelesti@redhat.com", "date": "2017-02-26T04:05:37Z"}, "message": "Warn on calls to `std::mem::drop` or `std::mem::forget` with a `Copy` type", "tree": {"sha": "6d78d62a0502037038a3860994b64b805cfd48fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d78d62a0502037038a3860994b64b805cfd48fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8defc6cc44196638ed4421fafe3c84864a2e40b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8defc6cc44196638ed4421fafe3c84864a2e40b", "html_url": "https://github.com/rust-lang/rust/commit/b8defc6cc44196638ed4421fafe3c84864a2e40b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8defc6cc44196638ed4421fafe3c84864a2e40b/comments", "author": null, "committer": null, "parents": [{"sha": "96291e7d1c0cff5fd4d4c937a00d205ca6d9e833", "url": "https://api.github.com/repos/rust-lang/rust/commits/96291e7d1c0cff5fd4d4c937a00d205ca6d9e833", "html_url": "https://github.com/rust-lang/rust/commit/96291e7d1c0cff5fd4d4c937a00d205ca6d9e833"}], "stats": {"total": 560, "additions": 551, "deletions": 9}, "files": [{"sha": "a4412292158fe6b250df1ca1cc146336b58f0034", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8defc6cc44196638ed4421fafe3c84864a2e40b/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/b8defc6cc44196638ed4421fafe3c84864a2e40b/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=b8defc6cc44196638ed4421fafe3c84864a2e40b", "patch": "@@ -312,6 +312,7 @@ All notable changes to this project will be documented in this file.\n [`doc_markdown`]: https://github.com/Manishearth/rust-clippy/wiki#doc_markdown\n [`double_neg`]: https://github.com/Manishearth/rust-clippy/wiki#double_neg\n [`double_parens`]: https://github.com/Manishearth/rust-clippy/wiki#double_parens\n+[`drop_copy`]: https://github.com/Manishearth/rust-clippy/wiki#drop_copy\n [`drop_ref`]: https://github.com/Manishearth/rust-clippy/wiki#drop_ref\n [`duplicate_underscore_argument`]: https://github.com/Manishearth/rust-clippy/wiki#duplicate_underscore_argument\n [`empty_enum`]: https://github.com/Manishearth/rust-clippy/wiki#empty_enum\n@@ -333,6 +334,7 @@ All notable changes to this project will be documented in this file.\n [`for_kv_map`]: https://github.com/Manishearth/rust-clippy/wiki#for_kv_map\n [`for_loop_over_option`]: https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_option\n [`for_loop_over_result`]: https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_result\n+[`forget_copy`]: https://github.com/Manishearth/rust-clippy/wiki#forget_copy\n [`forget_ref`]: https://github.com/Manishearth/rust-clippy/wiki#forget_ref\n [`get_unwrap`]: https://github.com/Manishearth/rust-clippy/wiki#get_unwrap\n [`identity_op`]: https://github.com/Manishearth/rust-clippy/wiki#identity_op"}, {"sha": "9e3e3e0d482b1e88d483163b9adc73d478e1cc9f", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8defc6cc44196638ed4421fafe3c84864a2e40b/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b8defc6cc44196638ed4421fafe3c84864a2e40b/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b8defc6cc44196638ed4421fafe3c84864a2e40b", "patch": "@@ -180,7 +180,7 @@ transparently:\n \n ## Lints\n \n-There are 192 lints included in this crate:\n+There are 196 lints included in this crate:\n \n name                                                                                                                   | default | triggers on\n -----------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -218,6 +218,7 @@ name\n [doc_markdown](https://github.com/Manishearth/rust-clippy/wiki#doc_markdown)                                           | warn    | presence of `_`, `::` or camel-case outside backticks in documentation\n [double_neg](https://github.com/Manishearth/rust-clippy/wiki#double_neg)                                               | warn    | `--x`, which is a double negation of `x` and not a pre-decrement as in C/C++\n [double_parens](https://github.com/Manishearth/rust-clippy/wiki#double_parens)                                         | warn    | Warn on unnecessary double parentheses\n+[drop_copy](https://github.com/Manishearth/rust-clippy/wiki#drop_copy)                                                 | warn    | calls to `std::mem::drop` with a value that implements Copy\n [drop_ref](https://github.com/Manishearth/rust-clippy/wiki#drop_ref)                                                   | warn    | calls to `std::mem::drop` with a reference instead of an owned value\n [duplicate_underscore_argument](https://github.com/Manishearth/rust-clippy/wiki#duplicate_underscore_argument)         | warn    | function arguments having names which only differ by an underscore\n [empty_enum](https://github.com/Manishearth/rust-clippy/wiki#empty_enum)                                               | allow   | enum with no variants\n@@ -238,6 +239,7 @@ name\n [for_kv_map](https://github.com/Manishearth/rust-clippy/wiki#for_kv_map)                                               | warn    | looping on a map using `iter` when `keys` or `values` would do\n [for_loop_over_option](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_option)                           | warn    | for-looping over an `Option`, which is more clearly expressed as an `if let`\n [for_loop_over_result](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_result)                           | warn    | for-looping over a `Result`, which is more clearly expressed as an `if let`\n+[forget_copy](https://github.com/Manishearth/rust-clippy/wiki#forget_copy)                                             | warn    | calls to `std::mem::forget` with a value that implements Copy\n [forget_ref](https://github.com/Manishearth/rust-clippy/wiki#forget_ref)                                               | warn    | calls to `std::mem::forget` with a reference instead of an owned value\n [get_unwrap](https://github.com/Manishearth/rust-clippy/wiki#get_unwrap)                                               | warn    | using `.get().unwrap()` or `.get_mut().unwrap()` when using `[]` would work instead\n [identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                                             | warn    | using identity operations, e.g. `x + 0` or `y / 1`"}, {"sha": "16259f33e7e24e18265df8335f32361f913cfa2f", "filename": "clippy_lints/src/drop_forget_copy.rs", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/b8defc6cc44196638ed4421fafe3c84864a2e40b/clippy_lints%2Fsrc%2Fdrop_forget_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8defc6cc44196638ed4421fafe3c84864a2e40b/clippy_lints%2Fsrc%2Fdrop_forget_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_copy.rs?ref=b8defc6cc44196638ed4421fafe3c84864a2e40b", "patch": "@@ -0,0 +1,96 @@\n+use rustc::lint::*;\n+use rustc::ty;\n+use rustc::hir::*;\n+use utils::{match_def_path, paths, span_note_and_lint};\n+\n+/// **What it does:** Checks for calls to `std::mem::drop` with a value\n+/// that derives the Copy trait\n+///\n+/// **Why is this bad?** Calling `std::mem::drop` [does nothing for types that\n+/// implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html), since the\n+/// value will be copied and moved into the function on invocation.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let x:i32 = 42;   // i32 implements Copy\n+/// std::mem::drop(x) // A copy of x is passed to the function, leaving the original unaffected\n+/// ```\n+declare_lint! {\n+    pub DROP_COPY,\n+    Warn,\n+    \"calls to `std::mem::drop` with a value that implements Copy\"\n+}\n+\n+/// **What it does:** Checks for calls to `std::mem::forget` with a value that\n+/// derives the Copy trait\n+///\n+/// **Why is this bad?** Calling `std::mem::forget` [does nothing for types that\n+/// implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html) since the\n+/// value will be copied and moved into the function on invocation.\n+///\n+/// An alternative, but also valid, explanation is that Copy types do not implement\n+/// the Drop trait, which means they have no destructors. Without a destructor, there\n+/// is nothing for `std::mem::forget` to ignore.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let x:i32 = 42;     // i32 implements Copy\n+/// std::mem::forget(x) // A copy of x is passed to the function, leaving the original unaffected\n+/// ```\n+declare_lint! {\n+    pub FORGET_COPY,\n+    Warn,\n+    \"calls to `std::mem::forget` with a value that implements Copy\"\n+}\n+\n+#[allow(missing_copy_implementations)]\n+pub struct Pass;\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(DROP_COPY, FORGET_COPY)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if_let_chain!{[\n+            let ExprCall(ref path, ref args) = expr.node,\n+            let ExprPath(ref qpath) = path.node,\n+            args.len() == 1,\n+        ], {\n+            let def_id = cx.tables.qpath_def(qpath, path.id).def_id();\n+            let lint;\n+            let msg;\n+\n+            if match_def_path(cx.tcx, def_id, &paths::DROP) {\n+                lint = DROP_COPY;\n+                msg = \"call to `std::mem::drop` with a value that implements Copy. \\\n+                       Dropping a copy leaves the original intact.\";\n+            } else if match_def_path(cx.tcx, def_id, &paths::MEM_FORGET) {\n+                lint = FORGET_COPY;\n+                msg = \"call to `std::mem::forget` with a value that implements Copy. \\\n+                       Forgetting a copy leaves the original intact.\";\n+            } else {\n+                return;\n+            }\n+\n+            let arg = &args[0];\n+            let arg_ty = cx.tables.expr_ty(arg);\n+\n+            let parameter_environment = ty::ParameterEnvironment::for_item(cx.tcx, arg.id);\n+            if !arg_ty.moves_by_default(cx.tcx.global_tcx(), &parameter_environment, arg.span) {\n+                span_note_and_lint(cx,\n+                                   lint,\n+                                   expr.span,\n+                                   msg,\n+                                   arg.span,\n+                                   &format!(\"argument has type {}\", arg_ty.sty));\n+            }\n+        }}\n+    }\n+}"}, {"sha": "edf568f1c7face656995a3eb7e75a4bcda2428a9", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8defc6cc44196638ed4421fafe3c84864a2e40b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8defc6cc44196638ed4421fafe3c84864a2e40b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b8defc6cc44196638ed4421fafe3c84864a2e40b", "patch": "@@ -72,6 +72,7 @@ pub mod cyclomatic_complexity;\n pub mod derive;\n pub mod doc;\n pub mod double_parens;\n+pub mod drop_forget_copy;\n pub mod drop_forget_ref;\n pub mod empty_enum;\n pub mod entry;\n@@ -269,6 +270,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         max_single_char_names: conf.max_single_char_names,\n     });\n     reg.register_late_lint_pass(box drop_forget_ref::Pass);\n+    reg.register_late_lint_pass(box drop_forget_copy::Pass);\n     reg.register_late_lint_pass(box empty_enum::EmptyEnum);\n     reg.register_late_lint_pass(box types::AbsurdExtremeComparisons);\n     reg.register_late_lint_pass(box types::InvalidUpcastComparisons);\n@@ -375,6 +377,8 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         derive::EXPL_IMPL_CLONE_ON_COPY,\n         doc::DOC_MARKDOWN,\n         double_parens::DOUBLE_PARENS,\n+        drop_forget_copy::DROP_COPY,\n+        drop_forget_copy::FORGET_COPY,\n         drop_forget_ref::DROP_REF,\n         drop_forget_ref::FORGET_REF,\n         entry::MAP_ENTRY,"}, {"sha": "d92c053476f2d44da09275f18ad2c8d75676cc4c", "filename": "tests/ui/drop_forget_copy.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b8defc6cc44196638ed4421fafe3c84864a2e40b/tests%2Fui%2Fdrop_forget_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8defc6cc44196638ed4421fafe3c84864a2e40b/tests%2Fui%2Fdrop_forget_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_copy.rs?ref=b8defc6cc44196638ed4421fafe3c84864a2e40b", "patch": "@@ -0,0 +1,62 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(drop_copy, forget_copy)]\n+#![allow(toplevel_ref_arg, drop_ref, forget_ref, unused_mut)]\n+\n+use std::mem::{drop, forget};\n+use std::vec::Vec;\n+\n+#[derive(Copy, Clone)]\n+struct SomeStruct {\n+}\n+\n+struct AnotherStruct {\n+    x: u8,\n+    y: u8,\n+    z: Vec<u8>\n+}\n+\n+impl Clone for AnotherStruct {\n+    fn clone(& self) -> AnotherStruct {\n+        AnotherStruct{x: self.x, y: self.y, z: self.z.clone()}\n+    }\n+}\n+\n+fn main() {\n+    let s1 = SomeStruct {};\n+    let s2 = s1;\n+    let s3 = &s1;\n+    let mut s4 = s1;\n+    let ref s5 = s1;\n+\n+    drop(s1);\n+    drop(s2);\n+    drop(s3);\n+    drop(s4);\n+    drop(s5);\n+\n+    forget(s1);\n+    forget(s2);\n+    forget(s3);\n+    forget(s4);\n+    forget(s5);\n+\n+    let a1 = AnotherStruct {x: 255, y: 0, z: vec![1, 2, 3]};\n+    let a2 = &a1;\n+    let mut a3 = a1.clone();\n+    let ref a4 = a1;\n+    let a5 = a1.clone();\n+\n+    drop(a2);\n+    drop(a3);\n+    drop(a4);\n+    drop(a5);\n+\n+    forget(a2);\n+    let a3 = &a1;\n+    forget(a3);\n+    forget(a4);\n+    let a5 = a1.clone();\n+    forget(a5);\n+}"}, {"sha": "79ad1dbabebae60517a6f337baee9223dc4e1cf2", "filename": "tests/ui/drop_forget_copy.stderr", "status": "added", "additions": 192, "deletions": 0, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/b8defc6cc44196638ed4421fafe3c84864a2e40b/tests%2Fui%2Fdrop_forget_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8defc6cc44196638ed4421fafe3c84864a2e40b/tests%2Fui%2Fdrop_forget_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_copy.stderr?ref=b8defc6cc44196638ed4421fafe3c84864a2e40b", "patch": "@@ -0,0 +1,192 @@\n+error: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n+  --> $DIR/drop_forget_copy.rs:33:5\n+   |\n+33 |     drop(s1);\n+   |     ^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/drop_forget_copy.rs:4:9\n+   |\n+4  | #![deny(drop_copy, forget_copy)]\n+   |         ^^^^^^^^^\n+note: argument has type SomeStruct\n+  --> $DIR/drop_forget_copy.rs:33:10\n+   |\n+33 |     drop(s1);\n+   |          ^^\n+\n+error: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n+  --> $DIR/drop_forget_copy.rs:34:5\n+   |\n+34 |     drop(s2);\n+   |     ^^^^^^^^\n+   |\n+note: argument has type SomeStruct\n+  --> $DIR/drop_forget_copy.rs:34:10\n+   |\n+34 |     drop(s2);\n+   |          ^^\n+\n+error: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n+  --> $DIR/drop_forget_copy.rs:35:5\n+   |\n+35 |     drop(s3);\n+   |     ^^^^^^^^\n+   |\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_copy.rs:35:10\n+   |\n+35 |     drop(s3);\n+   |          ^^\n+\n+error: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n+  --> $DIR/drop_forget_copy.rs:36:5\n+   |\n+36 |     drop(s4);\n+   |     ^^^^^^^^\n+   |\n+note: argument has type SomeStruct\n+  --> $DIR/drop_forget_copy.rs:36:10\n+   |\n+36 |     drop(s4);\n+   |          ^^\n+\n+error: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n+  --> $DIR/drop_forget_copy.rs:37:5\n+   |\n+37 |     drop(s5);\n+   |     ^^^^^^^^\n+   |\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_copy.rs:37:10\n+   |\n+37 |     drop(s5);\n+   |          ^^\n+\n+error: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+  --> $DIR/drop_forget_copy.rs:39:5\n+   |\n+39 |     forget(s1);\n+   |     ^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/drop_forget_copy.rs:4:20\n+   |\n+4  | #![deny(drop_copy, forget_copy)]\n+   |                    ^^^^^^^^^^^\n+note: argument has type SomeStruct\n+  --> $DIR/drop_forget_copy.rs:39:12\n+   |\n+39 |     forget(s1);\n+   |            ^^\n+\n+error: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+  --> $DIR/drop_forget_copy.rs:40:5\n+   |\n+40 |     forget(s2);\n+   |     ^^^^^^^^^^\n+   |\n+note: argument has type SomeStruct\n+  --> $DIR/drop_forget_copy.rs:40:12\n+   |\n+40 |     forget(s2);\n+   |            ^^\n+\n+error: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+  --> $DIR/drop_forget_copy.rs:41:5\n+   |\n+41 |     forget(s3);\n+   |     ^^^^^^^^^^\n+   |\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_copy.rs:41:12\n+   |\n+41 |     forget(s3);\n+   |            ^^\n+\n+error: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+  --> $DIR/drop_forget_copy.rs:42:5\n+   |\n+42 |     forget(s4);\n+   |     ^^^^^^^^^^\n+   |\n+note: argument has type SomeStruct\n+  --> $DIR/drop_forget_copy.rs:42:12\n+   |\n+42 |     forget(s4);\n+   |            ^^\n+\n+error: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+  --> $DIR/drop_forget_copy.rs:43:5\n+   |\n+43 |     forget(s5);\n+   |     ^^^^^^^^^^\n+   |\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_copy.rs:43:12\n+   |\n+43 |     forget(s5);\n+   |            ^^\n+\n+error: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n+  --> $DIR/drop_forget_copy.rs:51:5\n+   |\n+51 |     drop(a2);\n+   |     ^^^^^^^^\n+   |\n+note: argument has type &AnotherStruct\n+  --> $DIR/drop_forget_copy.rs:51:10\n+   |\n+51 |     drop(a2);\n+   |          ^^\n+\n+error: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n+  --> $DIR/drop_forget_copy.rs:53:5\n+   |\n+53 |     drop(a4);\n+   |     ^^^^^^^^\n+   |\n+note: argument has type &AnotherStruct\n+  --> $DIR/drop_forget_copy.rs:53:10\n+   |\n+53 |     drop(a4);\n+   |          ^^\n+\n+error: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+  --> $DIR/drop_forget_copy.rs:56:5\n+   |\n+56 |     forget(a2);\n+   |     ^^^^^^^^^^\n+   |\n+note: argument has type &AnotherStruct\n+  --> $DIR/drop_forget_copy.rs:56:12\n+   |\n+56 |     forget(a2);\n+   |            ^^\n+\n+error: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+  --> $DIR/drop_forget_copy.rs:58:5\n+   |\n+58 |     forget(a3);\n+   |     ^^^^^^^^^^\n+   |\n+note: argument has type &AnotherStruct\n+  --> $DIR/drop_forget_copy.rs:58:12\n+   |\n+58 |     forget(a3);\n+   |            ^^\n+\n+error: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+  --> $DIR/drop_forget_copy.rs:59:5\n+   |\n+59 |     forget(a4);\n+   |     ^^^^^^^^^^\n+   |\n+note: argument has type &AnotherStruct\n+  --> $DIR/drop_forget_copy.rs:59:12\n+   |\n+59 |     forget(a4);\n+   |            ^^\n+\n+error: aborting due to 15 previous errors\n+"}, {"sha": "bbda347c9a9748f6659af730f33797bd5e175202", "filename": "tests/ui/drop_forget_ref.stderr", "status": "modified", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/b8defc6cc44196638ed4421fafe3c84864a2e40b/tests%2Fui%2Fdrop_forget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8defc6cc44196638ed4421fafe3c84864a2e40b/tests%2Fui%2Fdrop_forget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_ref.stderr?ref=b8defc6cc44196638ed4421fafe3c84864a2e40b", "patch": "@@ -15,6 +15,19 @@ note: argument has type &SomeStruct\n 12 |     drop(&SomeStruct);\n    |          ^^^^^^^^^^^\n \n+warning: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n+  --> $DIR/drop_forget_ref.rs:12:5\n+   |\n+12 |     drop(&SomeStruct);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(drop_copy)] on by default\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:12:10\n+   |\n+12 |     drop(&SomeStruct);\n+   |          ^^^^^^^^^^^\n+\n error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n   --> $DIR/drop_forget_ref.rs:13:5\n    |\n@@ -32,6 +45,19 @@ note: argument has type &SomeStruct\n 13 |     forget(&SomeStruct);\n    |            ^^^^^^^^^^^\n \n+warning: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+  --> $DIR/drop_forget_ref.rs:13:5\n+   |\n+13 |     forget(&SomeStruct);\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(forget_copy)] on by default\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:13:12\n+   |\n+13 |     forget(&SomeStruct);\n+   |            ^^^^^^^^^^^\n+\n error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n   --> $DIR/drop_forget_ref.rs:16:5\n    |\n@@ -44,6 +70,19 @@ note: argument has type &SomeStruct\n 16 |     drop(&owned1);\n    |          ^^^^^^^\n \n+warning: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n+  --> $DIR/drop_forget_ref.rs:16:5\n+   |\n+16 |     drop(&owned1);\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(drop_copy)] on by default\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:16:10\n+   |\n+16 |     drop(&owned1);\n+   |          ^^^^^^^\n+\n error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n   --> $DIR/drop_forget_ref.rs:17:5\n    |\n@@ -56,6 +95,19 @@ note: argument has type &&SomeStruct\n 17 |     drop(&&owned1);\n    |          ^^^^^^^^\n \n+warning: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n+  --> $DIR/drop_forget_ref.rs:17:5\n+   |\n+17 |     drop(&&owned1);\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(drop_copy)] on by default\n+note: argument has type &&SomeStruct\n+  --> $DIR/drop_forget_ref.rs:17:10\n+   |\n+17 |     drop(&&owned1);\n+   |          ^^^^^^^^\n+\n error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n   --> $DIR/drop_forget_ref.rs:18:5\n    |\n@@ -80,6 +132,19 @@ note: argument has type &SomeStruct\n 21 |     forget(&owned2);\n    |            ^^^^^^^\n \n+warning: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+  --> $DIR/drop_forget_ref.rs:21:5\n+   |\n+21 |     forget(&owned2);\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(forget_copy)] on by default\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:21:12\n+   |\n+21 |     forget(&owned2);\n+   |            ^^^^^^^\n+\n error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n   --> $DIR/drop_forget_ref.rs:22:5\n    |\n@@ -92,6 +157,19 @@ note: argument has type &&SomeStruct\n 22 |     forget(&&owned2);\n    |            ^^^^^^^^\n \n+warning: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+  --> $DIR/drop_forget_ref.rs:22:5\n+   |\n+22 |     forget(&&owned2);\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(forget_copy)] on by default\n+note: argument has type &&SomeStruct\n+  --> $DIR/drop_forget_ref.rs:22:12\n+   |\n+22 |     forget(&&owned2);\n+   |            ^^^^^^^^\n+\n error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n   --> $DIR/drop_forget_ref.rs:23:5\n    |\n@@ -116,6 +194,19 @@ note: argument has type &SomeStruct\n 27 |     drop(reference1);\n    |          ^^^^^^^^^^\n \n+warning: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n+  --> $DIR/drop_forget_ref.rs:27:5\n+   |\n+27 |     drop(reference1);\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(drop_copy)] on by default\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:27:10\n+   |\n+27 |     drop(reference1);\n+   |          ^^^^^^^^^^\n+\n error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n   --> $DIR/drop_forget_ref.rs:28:5\n    |\n@@ -128,6 +219,19 @@ note: argument has type &SomeStruct\n 28 |     forget(&*reference1);\n    |            ^^^^^^^^^^^^\n \n+warning: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+  --> $DIR/drop_forget_ref.rs:28:5\n+   |\n+28 |     forget(&*reference1);\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(forget_copy)] on by default\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:28:12\n+   |\n+28 |     forget(&*reference1);\n+   |            ^^^^^^^^^^^^\n+\n error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n   --> $DIR/drop_forget_ref.rs:31:5\n    |\n@@ -164,6 +268,19 @@ note: argument has type &SomeStruct\n 36 |     drop(reference4);\n    |          ^^^^^^^^^^\n \n+warning: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n+  --> $DIR/drop_forget_ref.rs:36:5\n+   |\n+36 |     drop(reference4);\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(drop_copy)] on by default\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:36:10\n+   |\n+36 |     drop(reference4);\n+   |          ^^^^^^^^^^\n+\n error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n   --> $DIR/drop_forget_ref.rs:37:5\n    |\n@@ -176,6 +293,19 @@ note: argument has type &SomeStruct\n 37 |     forget(reference4);\n    |            ^^^^^^^^^^\n \n+warning: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+  --> $DIR/drop_forget_ref.rs:37:5\n+   |\n+37 |     forget(reference4);\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(forget_copy)] on by default\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:37:12\n+   |\n+37 |     forget(reference4);\n+   |            ^^^^^^^^^^\n+\n error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n   --> $DIR/drop_forget_ref.rs:42:5\n    |\n@@ -188,6 +318,19 @@ note: argument has type &T\n 42 |     drop(&val);\n    |          ^^^^\n \n+warning: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n+  --> $DIR/drop_forget_ref.rs:42:5\n+   |\n+42 |     drop(&val);\n+   |     ^^^^^^^^^^\n+   |\n+   = note: #[warn(drop_copy)] on by default\n+note: argument has type &T\n+  --> $DIR/drop_forget_ref.rs:42:10\n+   |\n+42 |     drop(&val);\n+   |          ^^^^\n+\n error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n   --> $DIR/drop_forget_ref.rs:48:5\n    |\n@@ -200,6 +343,19 @@ note: argument has type &T\n 48 |     forget(&val);\n    |            ^^^^\n \n+warning: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+  --> $DIR/drop_forget_ref.rs:48:5\n+   |\n+48 |     forget(&val);\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: #[warn(forget_copy)] on by default\n+note: argument has type &T\n+  --> $DIR/drop_forget_ref.rs:48:12\n+   |\n+48 |     forget(&val);\n+   |            ^^^^\n+\n error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n   --> $DIR/drop_forget_ref.rs:56:5\n    |\n@@ -212,6 +368,19 @@ note: argument has type &SomeStruct\n 56 |     std::mem::drop(&SomeStruct);\n    |                    ^^^^^^^^^^^\n \n+warning: call to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n+  --> $DIR/drop_forget_ref.rs:56:5\n+   |\n+56 |     std::mem::drop(&SomeStruct);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(drop_copy)] on by default\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:56:20\n+   |\n+56 |     std::mem::drop(&SomeStruct);\n+   |                    ^^^^^^^^^^^\n+\n error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n   --> $DIR/drop_forget_ref.rs:59:5\n    |\n@@ -224,5 +393,18 @@ note: argument has type &SomeStruct\n 59 |     std::mem::forget(&SomeStruct);\n    |                      ^^^^^^^^^^^\n \n+warning: call to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+  --> $DIR/drop_forget_ref.rs:59:5\n+   |\n+59 |     std::mem::forget(&SomeStruct);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(forget_copy)] on by default\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:59:22\n+   |\n+59 |     std::mem::forget(&SomeStruct);\n+   |                      ^^^^^^^^^^^\n+\n error: aborting due to 18 previous errors\n "}, {"sha": "e553afcf05f6a8ad896edda7c87d1059eccb5395", "filename": "tests/ui/mem_forget.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8defc6cc44196638ed4421fafe3c84864a2e40b/tests%2Fui%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8defc6cc44196638ed4421fafe3c84864a2e40b/tests%2Fui%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_forget.rs?ref=b8defc6cc44196638ed4421fafe3c84864a2e40b", "patch": "@@ -1,13 +1,15 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n+\n use std::sync::Arc;\n use std::rc::Rc;\n \n use std::mem::forget as forgetSomething;\n use std::mem as memstuff;\n \n #[deny(mem_forget)]\n+#[allow(forget_copy)]\n fn main() {\n     let five: i32 = 5;\n     forgetSomething(five);"}, {"sha": "21cb65f82eb741c464f38e684223c0605d8b1713", "filename": "tests/ui/mem_forget.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8defc6cc44196638ed4421fafe3c84864a2e40b/tests%2Fui%2Fmem_forget.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8defc6cc44196638ed4421fafe3c84864a2e40b/tests%2Fui%2Fmem_forget.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_forget.stderr?ref=b8defc6cc44196638ed4421fafe3c84864a2e40b", "patch": "@@ -1,25 +1,25 @@\n error: usage of mem::forget on Drop type\n-  --> $DIR/mem_forget.rs:16:5\n+  --> $DIR/mem_forget.rs:18:5\n    |\n-16 |     memstuff::forget(six);\n+18 |     memstuff::forget(six);\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/mem_forget.rs:10:8\n+  --> $DIR/mem_forget.rs:11:8\n    |\n-10 | #[deny(mem_forget)]\n+11 | #[deny(mem_forget)]\n    |        ^^^^^^^^^^\n \n error: usage of mem::forget on Drop type\n-  --> $DIR/mem_forget.rs:20:5\n+  --> $DIR/mem_forget.rs:22:5\n    |\n-20 |     std::mem::forget(seven);\n+22 |     std::mem::forget(seven);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: usage of mem::forget on Drop type\n-  --> $DIR/mem_forget.rs:24:5\n+  --> $DIR/mem_forget.rs:26:5\n    |\n-24 |     forgetSomething(eight);\n+26 |     forgetSomething(eight);\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors"}]}