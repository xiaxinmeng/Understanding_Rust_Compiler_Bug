{"sha": "03de5c4a14e58f45fb411b9369f98508473416ae", "node_id": "C_kwDOAAsO6NoAKDAzZGU1YzRhMTRlNThmNDVmYjQxMWI5MzY5Zjk4NTA4NDczNDE2YWU", "commit": {"author": {"name": "Yoshiki Matsuda", "email": "myskjp@gmail.com", "date": "2022-05-29T15:46:12Z"}, "committer": {"name": "Yoshiki Matsuda", "email": "myskjp@gmail.com", "date": "2022-07-02T13:54:37Z"}, "message": "create an empty file even in case of MetadataKind::None", "tree": {"sha": "0e5e87a9981244d423d8f8df3ae5a102586bb2bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e5e87a9981244d423d8f8df3ae5a102586bb2bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03de5c4a14e58f45fb411b9369f98508473416ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03de5c4a14e58f45fb411b9369f98508473416ae", "html_url": "https://github.com/rust-lang/rust/commit/03de5c4a14e58f45fb411b9369f98508473416ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03de5c4a14e58f45fb411b9369f98508473416ae/comments", "author": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eb64b4901f43d01aa6bd9a39ef299c0380fd600", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eb64b4901f43d01aa6bd9a39ef299c0380fd600", "html_url": "https://github.com/rust-lang/rust/commit/7eb64b4901f43d01aa6bd9a39ef299c0380fd600"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "b08b1247c6deea4a4046da58146bddb9d3a8a2e7", "filename": "compiler/rustc_metadata/src/fs.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/03de5c4a14e58f45fb411b9369f98508473416ae/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03de5c4a14e58f45fb411b9369f98508473416ae/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs?ref=03de5c4a14e58f45fb411b9369f98508473416ae", "patch": "@@ -68,13 +68,24 @@ pub fn encode_and_write_metadata(\n         .unwrap_or_else(|err| tcx.sess.fatal(&format!(\"couldn't create a temp dir: {}\", err)));\n     let metadata_tmpdir = MaybeTempDir::new(metadata_tmpdir, tcx.sess.opts.cg.save_temps);\n     let metadata_filename = metadata_tmpdir.as_ref().join(METADATA_FILENAME);\n+    let need_metadata_file = tcx.sess.opts.output_types.contains_key(&OutputType::Metadata);\n     let metadata = match metadata_kind {\n         MetadataKind::None => {\n-            if tcx.sess.opts.json_artifact_notifications {\n-                tcx.sess\n-                    .parse_sess\n-                    .span_diagnostic\n-                    .emit_artifact_notification(&out_filename, \"metadata\");\n+            if need_metadata_file {\n+                // Though creating the empty file here seems to be meaningless, cargo expects it.\n+                if let Err(e) = std::fs::File::create(&out_filename) {\n+                    tcx.sess.fatal(&format!(\n+                        \"failed to create the file {}: {}\",\n+                        out_filename.display(),\n+                        e\n+                    ));\n+                }\n+                if tcx.sess.opts.json_artifact_notifications {\n+                    tcx.sess\n+                        .parse_sess\n+                        .span_diagnostic\n+                        .emit_artifact_notification(&out_filename, \"metadata\");\n+                }\n             }\n             EncodedMetadata::empty()\n         }\n@@ -83,7 +94,6 @@ pub fn encode_and_write_metadata(\n \n             let _prof_timer = tcx.sess.prof.generic_activity(\"write_crate_metadata\");\n \n-            let need_metadata_file = tcx.sess.opts.output_types.contains_key(&OutputType::Metadata);\n             let (metadata_filename, metadata_tmpdir) = if need_metadata_file {\n                 if let Err(e) = non_durable_rename(&metadata_filename, &out_filename) {\n                     tcx.sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e));"}]}