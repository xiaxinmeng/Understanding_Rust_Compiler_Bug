{"sha": "ad4777dbca1d4d1b052db01b1191862c9fbbad64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNDc3N2RiY2ExZDRkMWIwNTJkYjAxYjExOTE4NjJjOWZiYmFkNjQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-18T10:13:30Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-28T19:37:59Z"}, "message": "Deduplicate information in E0599", "tree": {"sha": "399130954829f62afcb8578d8e6da0ae0a58ef5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/399130954829f62afcb8578d8e6da0ae0a58ef5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad4777dbca1d4d1b052db01b1191862c9fbbad64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad4777dbca1d4d1b052db01b1191862c9fbbad64", "html_url": "https://github.com/rust-lang/rust/commit/ad4777dbca1d4d1b052db01b1191862c9fbbad64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad4777dbca1d4d1b052db01b1191862c9fbbad64/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8993b99ae28a1f8e3c11231a17e645feee66ea2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8993b99ae28a1f8e3c11231a17e645feee66ea2f", "html_url": "https://github.com/rust-lang/rust/commit/8993b99ae28a1f8e3c11231a17e645feee66ea2f"}], "stats": {"total": 94, "additions": 46, "deletions": 48}, "files": [{"sha": "8eb42f019843dd2fcbe4c3ede8a714b59e1bc220", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 36, "deletions": 18, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ad4777dbca1d4d1b052db01b1191862c9fbbad64/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad4777dbca1d4d1b052db01b1191862c9fbbad64/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=ad4777dbca1d4d1b052db01b1191862c9fbbad64", "patch": "@@ -538,16 +538,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let mut bound_spans = vec![];\n                     let mut bound_list = unsatisfied_predicates\n                         .iter()\n-                        .map(|p| {\n+                        .filter_map(|p| {\n                             let self_ty = p.self_ty();\n                             match &self_ty.kind {\n-                                ty::Adt(def, _) => bound_spans.push((\n-                                    self.tcx.sess.source_map().def_span(self.tcx.def_span(def.did)),\n-                                    format!(\n-                                        \"this type doesn't satisfy the bound `{}`\",\n-                                        p.print_only_trait_path()\n-                                    ),\n-                                )),\n+                                ty::Adt(def, _) => {\n+                                    bound_spans.push((\n+                                        self.tcx\n+                                            .sess\n+                                            .source_map()\n+                                            .def_span(self.tcx.def_span(def.did)),\n+                                        format!(\n+                                            \"the method `{}` exists but this type doesn't satisfy \\\n+                                             the bound `{}: {}`\",\n+                                            item_name,\n+                                            p.self_ty(),\n+                                            p.print_only_trait_path()\n+                                        ),\n+                                    ));\n+                                    None\n+                                }\n                                 ty::Dynamic(preds, _) => {\n                                     for pred in *preds.skip_binder() {\n                                         match pred {\n@@ -558,18 +567,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                                         .source_map()\n                                                         .def_span(self.tcx.def_span(tr.def_id)),\n                                                     format!(\n-                                                        \"this trait doesn't satisfy the bound `{}`\",\n+                                                        \"the method `{}` exists but this trait \\\n+                                                         doesn't satisfy the bound `{}: {}`\",\n+                                                        item_name,\n+                                                        p.self_ty(),\n                                                         p.print_only_trait_path()\n                                                     ),\n                                                 )),\n                                             ty::ExistentialPredicate::Projection(_)\n                                             | ty::ExistentialPredicate::AutoTrait(_) => {}\n                                         }\n                                     }\n+                                    None\n                                 }\n-                                _ => {}\n-                            };\n-                            format!(\"`{}: {}`\", p.self_ty(), p.print_only_trait_path())\n+                                _ => Some(format!(\n+                                    \"`{}: {}`\",\n+                                    p.self_ty(),\n+                                    p.print_only_trait_path()\n+                                )),\n+                            }\n                         })\n                         .collect::<Vec<_>>();\n                     bound_list.sort();\n@@ -579,12 +595,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     for (span, msg) in bound_spans.into_iter() {\n                         err.span_label(span, &msg);\n                     }\n-                    let bound_list = bound_list.join(\"\\n\");\n-                    err.note(&format!(\n-                        \"the method `{}` exists but the following trait bounds were not \\\n-                         satisfied:\\n{}\",\n-                        item_name, bound_list\n-                    ));\n+                    if !bound_list.is_empty() {\n+                        let bound_list = bound_list.join(\"\\n\");\n+                        err.note(&format!(\n+                            \"the method `{}` exists but the following trait bounds were not \\\n+                             satisfied:\\n{}\",\n+                            item_name, bound_list\n+                        ));\n+                    }\n                 }\n \n                 if actual.is_numeric() && actual.is_fresh() {"}, {"sha": "fd74d99229914692d86d739bde655068e1e392d2", "filename": "src/test/ui/derives/derive-assoc-type-not-impl.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad4777dbca1d4d1b052db01b1191862c9fbbad64/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad4777dbca1d4d1b052db01b1191862c9fbbad64/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr?ref=ad4777dbca1d4d1b052db01b1191862c9fbbad64", "patch": "@@ -5,13 +5,11 @@ LL | struct Bar<T: Foo> {\n    | ------------------ method `clone` not found for this\n ...\n LL | struct NotClone;\n-   | ---------------- this type doesn't satisfy the bound `std::clone::Clone`\n+   | ---------------- the method `clone` exists but this type doesn't satisfy the bound `NotClone: std::clone::Clone`\n ...\n LL |     Bar::<NotClone> { x: 1 }.clone();\n    |                              ^^^^^ method not found in `Bar<NotClone>`\n    |\n-   = note: the method `clone` exists but the following trait bounds were not satisfied:\n-           `NotClone: std::clone::Clone`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `std::clone::Clone`"}, {"sha": "4a5940f610e66e310dc762e4ebe20934a8716c12", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad4777dbca1d4d1b052db01b1191862c9fbbad64/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad4777dbca1d4d1b052db01b1191862c9fbbad64/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=ad4777dbca1d4d1b052db01b1191862c9fbbad64", "patch": "@@ -16,10 +16,7 @@ LL |         .collect();\n   ::: $SRC_DIR/libcore/iter/adapters/mod.rs:LL:COL\n    |\n LL | pub struct Cloned<I> {\n-   | -------------------- this type doesn't satisfy the bound `std::iter::Iterator`\n-   |\n-   = note: the method `collect` exists but the following trait bounds were not satisfied:\n-           `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]>>: std::iter::Iterator`\n+   | -------------------- the method `collect` exists but this type doesn't satisfy the bound `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]>>: std::iter::Iterator`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "aa38e4da01885180f12c43b125f0d00377768c47", "filename": "src/test/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad4777dbca1d4d1b052db01b1191862c9fbbad64/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad4777dbca1d4d1b052db01b1191862c9fbbad64/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=ad4777dbca1d4d1b052db01b1191862c9fbbad64", "patch": "@@ -38,13 +38,11 @@ LL | pub struct Foo;\n    | ---------------\n    | |\n    | method `take` not found for this\n-   | this type doesn't satisfy the bound `std::iter::Iterator`\n+   | the method `take` exists but this type doesn't satisfy the bound `Foo: std::iter::Iterator`\n ...\n LL |      .take()\n    |       ^^^^ method not found in `Foo`\n    |\n-   = note: the method `take` exists but the following trait bounds were not satisfied:\n-           `Foo: std::iter::Iterator`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following traits define an item `take`, perhaps you need to implement one of them:\n            candidate #1: `std::io::Read`"}, {"sha": "dc0bd310de81ccaded8f42af247e61d25dad5950", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad4777dbca1d4d1b052db01b1191862c9fbbad64/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad4777dbca1d4d1b052db01b1191862c9fbbad64/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=ad4777dbca1d4d1b052db01b1191862c9fbbad64", "patch": "@@ -7,11 +7,10 @@ LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n   ::: $SRC_DIR/libcore/iter/adapters/mod.rs:LL:COL\n    |\n LL | pub struct Filter<I, P> {\n-   | ----------------------- this type doesn't satisfy the bound `std::iter::Iterator`\n+   | ----------------------- the method `count` exists but this type doesn't satisfy the bound `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>: std::iter::Iterator`\n    |\n    = note: the method `count` exists but the following trait bounds were not satisfied:\n            `[closure@$DIR/issue-36053-2.rs:11:39: 11:53]: std::ops::FnMut<(&_,)>`\n-           `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>: std::iter::Iterator`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/issue-36053-2.rs:11:32"}, {"sha": "e95141b393ae0f3cc6b2bedff404b0e38d6c8d25", "filename": "src/test/ui/mismatched_types/method-help-unsatisfied-bound.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad4777dbca1d4d1b052db01b1191862c9fbbad64/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad4777dbca1d4d1b052db01b1191862c9fbbad64/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr?ref=ad4777dbca1d4d1b052db01b1191862c9fbbad64", "patch": "@@ -2,13 +2,10 @@ error[E0599]: no method named `unwrap` found for enum `std::result::Result<(), F\n   --> $DIR/method-help-unsatisfied-bound.rs:5:7\n    |\n LL | struct Foo;\n-   | ----------- this type doesn't satisfy the bound `std::fmt::Debug`\n+   | ----------- the method `unwrap` exists but this type doesn't satisfy the bound `Foo: std::fmt::Debug`\n ...\n LL |     a.unwrap();\n    |       ^^^^^^ method not found in `std::result::Result<(), Foo>`\n-   |\n-   = note: the method `unwrap` exists but the following trait bounds were not satisfied:\n-           `Foo: std::fmt::Debug`\n \n error: aborting due to previous error\n "}, {"sha": "2738bac8cc8574fd35c6c2a6651d81c2cc5f55fa", "filename": "src/test/ui/specialization/defaultimpl/specialization-trait-not-implemented.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad4777dbca1d4d1b052db01b1191862c9fbbad64/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad4777dbca1d4d1b052db01b1191862c9fbbad64/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr?ref=ad4777dbca1d4d1b052db01b1191862c9fbbad64", "patch": "@@ -8,13 +8,11 @@ LL | struct MyStruct;\n    | ----------------\n    | |\n    | method `foo_one` not found for this\n-   | this type doesn't satisfy the bound `Foo`\n+   | the method `foo_one` exists but this type doesn't satisfy the bound `MyStruct: Foo`\n ...\n LL |     println!(\"{}\", MyStruct.foo_one());\n    |                             ^^^^^^^ method not found in `MyStruct`\n    |\n-   = note: the method `foo_one` exists but the following trait bounds were not satisfied:\n-           `MyStruct: Foo`\n    = help: items from traits can only be used if the trait is implemented and in scope\n \n error: aborting due to previous error"}, {"sha": "c0d99c56cc0389f49568b39c7d22cc254771b90a", "filename": "src/test/ui/union/union-derive-clone.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad4777dbca1d4d1b052db01b1191862c9fbbad64/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad4777dbca1d4d1b052db01b1191862c9fbbad64/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr?ref=ad4777dbca1d4d1b052db01b1191862c9fbbad64", "patch": "@@ -14,13 +14,11 @@ LL | union U5<T> {\n    | ----------- method `clone` not found for this\n ...\n LL | struct CloneNoCopy;\n-   | ------------------- this type doesn't satisfy the bound `std::marker::Copy`\n+   | ------------------- the method `clone` exists but this type doesn't satisfy the bound `CloneNoCopy: std::marker::Copy`\n ...\n LL |     let w = u.clone();\n    |               ^^^^^ method not found in `U5<CloneNoCopy>`\n    |\n-   = note: the method `clone` exists but the following trait bounds were not satisfied:\n-           `CloneNoCopy: std::marker::Copy`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `std::clone::Clone`"}, {"sha": "b786a3d6d86fce36d90acf8cc10c4db51026024c", "filename": "src/test/ui/unique-object-noncopyable.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad4777dbca1d4d1b052db01b1191862c9fbbad64/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad4777dbca1d4d1b052db01b1191862c9fbbad64/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr?ref=ad4777dbca1d4d1b052db01b1191862c9fbbad64", "patch": "@@ -4,15 +4,12 @@ error[E0599]: no method named `clone` found for struct `std::boxed::Box<dyn Foo>\n LL | trait Foo {\n    | ---------\n    | |\n-   | this trait doesn't satisfy the bound `std::clone::Clone`\n-   | this trait doesn't satisfy the bound `std::marker::Sized`\n+   | the method `clone` exists but this trait doesn't satisfy the bound `dyn Foo: std::clone::Clone`\n+   | the method `clone` exists but this trait doesn't satisfy the bound `dyn Foo: std::marker::Sized`\n ...\n LL |     let _z = y.clone();\n    |                ^^^^^ method not found in `std::boxed::Box<dyn Foo>`\n    |\n-   = note: the method `clone` exists but the following trait bounds were not satisfied:\n-           `dyn Foo: std::clone::Clone`\n-           `dyn Foo: std::marker::Sized`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `std::clone::Clone`"}, {"sha": "26b82ecda48e93cec64c04fc3958520c96f77853", "filename": "src/test/ui/unique-pinned-nocopy.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad4777dbca1d4d1b052db01b1191862c9fbbad64/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad4777dbca1d4d1b052db01b1191862c9fbbad64/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr?ref=ad4777dbca1d4d1b052db01b1191862c9fbbad64", "patch": "@@ -2,13 +2,11 @@ error[E0599]: no method named `clone` found for struct `std::boxed::Box<R>` in t\n   --> $DIR/unique-pinned-nocopy.rs:12:16\n    |\n LL | struct R {\n-   | -------- this type doesn't satisfy the bound `std::clone::Clone`\n+   | -------- the method `clone` exists but this type doesn't satisfy the bound `R: std::clone::Clone`\n ...\n LL |     let _j = i.clone();\n    |                ^^^^^ method not found in `std::boxed::Box<R>`\n    |\n-   = note: the method `clone` exists but the following trait bounds were not satisfied:\n-           `R: std::clone::Clone`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `std::clone::Clone`"}]}