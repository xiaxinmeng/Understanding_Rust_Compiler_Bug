{"sha": "6fcba8826fd26028341a35d88b07208378ac05ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmY2JhODgyNmZkMjYwMjgzNDFhMzVkODhiMDcyMDgzNzhhYzA1ZWE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-30T16:13:02Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-31T00:37:56Z"}, "message": "Test fixes and rebase conflicts", "tree": {"sha": "c72f2a907d7fc13d914e31dcc0b4dc6527d1f262", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c72f2a907d7fc13d914e31dcc0b4dc6527d1f262"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fcba8826fd26028341a35d88b07208378ac05ea", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fcba8826fd26028341a35d88b07208378ac05ea", "html_url": "https://github.com/rust-lang/rust/commit/6fcba8826fd26028341a35d88b07208378ac05ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fcba8826fd26028341a35d88b07208378ac05ea/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c10c1633772aae3075f1d24c7741a074ddde5527", "url": "https://api.github.com/repos/rust-lang/rust/commits/c10c1633772aae3075f1d24c7741a074ddde5527", "html_url": "https://github.com/rust-lang/rust/commit/c10c1633772aae3075f1d24c7741a074ddde5527"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "39de04c27cecb15e0b857ff2f3ecf55e9078d149", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fcba8826fd26028341a35d88b07208378ac05ea/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcba8826fd26028341a35d88b07208378ac05ea/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=6fcba8826fd26028341a35d88b07208378ac05ea", "patch": "@@ -28,7 +28,7 @@\n //! one function. Currently, the actual symbol is declared in the standard\n //! library, but the location of this may change over time.\n \n-#![allow(dead_code, missing_doc)]\n+#![allow(dead_code, missing_docs)]\n \n use fmt;\n use intrinsics;\n@@ -63,7 +63,7 @@ fn panic_bounds_check(file_line: &(&'static str, uint),\n #[cfg(stage0)]\n #[cold] #[inline(never)]\n pub fn panic_fmt(fmt: &fmt::Arguments, file_line: &(&'static str, uint)) -> ! {\n-    #[allow(ctypes)]\n+    #[allow(improper_ctypes)]\n     extern {\n         #[lang = \"fail_fmt\"]\n         fn panic_impl(fmt: &fmt::Arguments, file: &'static str,\n@@ -104,7 +104,7 @@ fn panic_bounds_check(file_line: &(&'static str, uint),\n #[cfg(not(stage0))]\n #[cold] #[inline(never)]\n pub fn panic_fmt(fmt: &fmt::Arguments, file_line: &(&'static str, uint)) -> ! {\n-    #[allow(ctypes)]\n+    #[allow(improper_ctypes)]\n     extern {\n         #[lang = \"panic_fmt\"]\n         fn panic_impl(fmt: &fmt::Arguments, file: &'static str,"}, {"sha": "c17c541fc01e64a0c558e8979c83deaa6ea29824", "filename": "src/libnative/io/timer_windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcba8826fd26028341a35d88b07208378ac05ea/src%2Flibnative%2Fio%2Ftimer_windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcba8826fd26028341a35d88b07208378ac05ea/src%2Flibnative%2Fio%2Ftimer_windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_windows.rs?ref=6fcba8826fd26028341a35d88b07208378ac05ea", "patch": "@@ -79,7 +79,7 @@ fn helper(input: libc::HANDLE, messages: Receiver<Req>, _: ()) {\n             }\n         } else {\n             let remove = {\n-                match chans.get_mut(idx as uint - 1) {\n+                match &mut chans[idx as uint - 1] {\n                     &(ref mut c, oneshot) => { c.call(); oneshot }\n                 }\n             };"}, {"sha": "aa8e1ed270368d578dbab7822b3118a19203c4dd", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcba8826fd26028341a35d88b07208378ac05ea/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcba8826fd26028341a35d88b07208378ac05ea/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=6fcba8826fd26028341a35d88b07208378ac05ea", "patch": "@@ -254,7 +254,7 @@ impl LintStore {\n \n     }\n \n-    #[allow(unused_variable)]\n+    #[allow(unused_variables)]\n     fn find_lint(&self, lint_name: &str, sess: &Session, span: Option<Span>)\n                  -> Option<LintId>\n     {"}, {"sha": "ec6eef07c9541f123c36326944433fe09051ac2a", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcba8826fd26028341a35d88b07208378ac05ea/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcba8826fd26028341a35d88b07208378ac05ea/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=6fcba8826fd26028341a35d88b07208378ac05ea", "patch": "@@ -286,6 +286,7 @@ pub mod dl {\n     use os;\n     use ptr;\n     use result::{Ok, Err, Result};\n+    use slice::ImmutableSlice;\n     use str::StrSlice;\n     use str;\n     use string::String;"}, {"sha": "d4e6251cebeb0204975a726d5dc33d84eb66f68a", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcba8826fd26028341a35d88b07208378ac05ea/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcba8826fd26028341a35d88b07208378ac05ea/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=6fcba8826fd26028341a35d88b07208378ac05ea", "patch": "@@ -144,7 +144,7 @@ pub mod windows {\n     use option::{None, Option};\n     use option;\n     use os::TMPBUF_SZ;\n-    use slice::MutableSlice;\n+    use slice::{MutableSlice, ImmutableSlice};\n     use string::String;\n     use str::StrSlice;\n     use vec::Vec;"}, {"sha": "f751655c9ff622e31b85b3c3fb0e4aa984bbccd3", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcba8826fd26028341a35d88b07208378ac05ea/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcba8826fd26028341a35d88b07208378ac05ea/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=6fcba8826fd26028341a35d88b07208378ac05ea", "patch": "@@ -540,7 +540,7 @@ fn mk_delim(cx: &ExtCtxt, sp: Span, delim: token::DelimToken) -> P<ast::Expr> {\n     mk_token_path(cx, sp, name)\n }\n \n-#[allow(non_uppercase_statics)] // NOTE(stage0): remove this attribute after the next snapshot\n+#[allow(non_upper_case_globals)]\n fn mk_token(cx: &ExtCtxt, sp: Span, tok: &token::Token) -> P<ast::Expr> {\n     match *tok {\n         token::BinOp(binop) => {"}, {"sha": "d56aa8da72a8421e5f2721f80162368bd6807730", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6fcba8826fd26028341a35d88b07208378ac05ea/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcba8826fd26028341a35d88b07208378ac05ea/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=6fcba8826fd26028341a35d88b07208378ac05ea", "patch": "@@ -110,10 +110,10 @@ pub enum DelimToken {\n }\n \n #[cfg(stage0)]\n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n pub const ModName: bool = true;\n #[cfg(stage0)]\n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n pub const Plain: bool = false;\n \n #[deriving(Clone, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n@@ -263,7 +263,7 @@ impl Token {\n \n     /// Returns `true` if the token is a path that is not followed by a `::`\n     /// token.\n-    #[allow(non_uppercase_statics)] // NOTE(stage0): remove this attribute after the next snapshot\n+    #[allow(non_upper_case_globals)]\n     pub fn is_plain_ident(&self) -> bool {\n         match *self {\n             Ident(_, Plain) => true,\n@@ -311,7 +311,7 @@ impl Token {\n     }\n \n     /// Returns `true` if the token is a given keyword, `kw`.\n-    #[allow(non_uppercase_statics)] // NOTE(stage0): remove this attribute after the next snapshot\n+    #[allow(non_upper_case_globals)]\n     pub fn is_keyword(&self, kw: keywords::Keyword) -> bool {\n         match *self {\n             Ident(sid, Plain) => kw.to_name() == sid.name,\n@@ -321,7 +321,7 @@ impl Token {\n \n     /// Returns `true` if the token is either a special identifier, or a strict\n     /// or reserved keyword.\n-    #[allow(non_uppercase_statics)] // NOTE(stage0): remove this attribute after the next snapshot\n+    #[allow(non_upper_case_globals)]\n     pub fn is_any_keyword(&self) -> bool {\n         match *self {\n             Ident(sid, Plain) => {\n@@ -338,7 +338,7 @@ impl Token {\n     }\n \n     /// Returns `true` if the token may not appear as an identifier.\n-    #[allow(non_uppercase_statics)] // NOTE(stage0): remove this attribute after the next snapshot\n+    #[allow(non_upper_case_globals)]\n     pub fn is_strict_keyword(&self) -> bool {\n         match *self {\n             Ident(sid, Plain) => {\n@@ -364,7 +364,7 @@ impl Token {\n \n     /// Returns `true` if the token is a keyword that has been reserved for\n     /// possible future use.\n-    #[allow(non_uppercase_statics)] // NOTE(stage0): remove this attribute after the next snapshot\n+    #[allow(non_upper_case_globals)]\n     pub fn is_reserved_keyword(&self) -> bool {\n         match *self {\n             Ident(sid, Plain) => {"}, {"sha": "9f258aee746f2312643c467075e59878ccc26feb", "filename": "src/test/compile-fail/coerce-bare-fn-to-closure-and-proc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fcba8826fd26028341a35d88b07208378ac05ea/src%2Ftest%2Fcompile-fail%2Fcoerce-bare-fn-to-closure-and-proc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcba8826fd26028341a35d88b07208378ac05ea/src%2Ftest%2Fcompile-fail%2Fcoerce-bare-fn-to-closure-and-proc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-bare-fn-to-closure-and-proc.rs?ref=6fcba8826fd26028341a35d88b07208378ac05ea", "patch": "@@ -14,8 +14,8 @@ fn main() {\n     let f = foo;\n     let f_closure: || = f;\n     //~^ ERROR: cannot coerce non-statically resolved bare fn to closure\n-    //~^ HELP: consider embedding the function in a closure\n+    //~^^ HELP: consider embedding the function in a closure\n     let f_proc: proc() = f;\n     //~^ ERROR: cannot coerce non-statically resolved bare fn to closure\n-    //~^ HELP: consider embedding the function in a closure\n+    //~^^ HELP: consider embedding the function in a closure\n }"}]}