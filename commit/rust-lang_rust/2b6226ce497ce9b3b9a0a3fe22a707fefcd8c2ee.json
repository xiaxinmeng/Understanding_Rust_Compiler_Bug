{"sha": "2b6226ce497ce9b3b9a0a3fe22a707fefcd8c2ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiNjIyNmNlNDk3Y2U5YjNiOWEwYTNmZTIyYTcwN2ZlZmNkOGMyZWU=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-09-26T05:00:49Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2020-11-03T00:31:51Z"}, "message": "fix: resolve some parser related bugs", "tree": {"sha": "4fe5dfbd6a561ec4b15d52a3969851f1c7404304", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fe5dfbd6a561ec4b15d52a3969851f1c7404304"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b6226ce497ce9b3b9a0a3fe22a707fefcd8c2ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b6226ce497ce9b3b9a0a3fe22a707fefcd8c2ee", "html_url": "https://github.com/rust-lang/rust/commit/2b6226ce497ce9b3b9a0a3fe22a707fefcd8c2ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b6226ce497ce9b3b9a0a3fe22a707fefcd8c2ee/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86a41bc80befae44ef8f59625c6225da9f955c83", "url": "https://api.github.com/repos/rust-lang/rust/commits/86a41bc80befae44ef8f59625c6225da9f955c83", "html_url": "https://github.com/rust-lang/rust/commit/86a41bc80befae44ef8f59625c6225da9f955c83"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "3a72fb6be881c958a431c4b538939c5f08a47a07", "filename": "src/syntux/parser.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2b6226ce497ce9b3b9a0a3fe22a707fefcd8c2ee/src%2Fsyntux%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b6226ce497ce9b3b9a0a3fe22a707fefcd8c2ee/src%2Fsyntux%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntux%2Fparser.rs?ref=2b6226ce497ce9b3b9a0a3fe22a707fefcd8c2ee", "patch": "@@ -65,8 +65,11 @@ impl<'a> ParserBuilder<'a> {\n         let parser = match Self::parser(sess.inner(), input) {\n             Ok(p) => p,\n             Err(db) => {\n-                sess.emit_diagnostics(db);\n-                return Err(ParserError::ParserCreationError);\n+                if let Some(diagnostics) = db {\n+                    sess.emit_diagnostics(diagnostics);\n+                    return Err(ParserError::ParserCreationError);\n+                }\n+                return Err(ParserError::ParsePanicError);\n             }\n         };\n \n@@ -76,14 +79,18 @@ impl<'a> ParserBuilder<'a> {\n     fn parser(\n         sess: &'a rustc_session::parse::ParseSess,\n         input: Input,\n-    ) -> Result<rustc_parse::parser::Parser<'a>, Vec<Diagnostic>> {\n+    ) -> Result<rustc_parse::parser::Parser<'a>, Option<Vec<Diagnostic>>> {\n         match input {\n-            Input::File(ref file) => Ok(new_parser_from_file(sess, file, None)),\n+            Input::File(ref file) => catch_unwind(AssertUnwindSafe(move || {\n+                new_parser_from_file(sess, file, None)\n+            }))\n+            .map_err(|_| None),\n             Input::Text(text) => rustc_parse::maybe_new_parser_from_source_str(\n                 sess,\n                 rustc_span::FileName::Custom(\"stdin\".to_owned()),\n                 text,\n-            ),\n+            )\n+            .map_err(|db| Some(db)),\n         }\n     }\n }\n@@ -120,8 +127,10 @@ impl<'a> Parser<'a> {\n             match parser.parse_mod(&TokenKind::Eof, ast::Unsafe::No) {\n                 Ok(result) => Some(result),\n                 Err(mut e) => {\n-                    e.cancel();\n-                    sess.reset_errors();\n+                    sess.emit_or_cancel_diagnostic(&mut e);\n+                    if sess.can_reset_errors() {\n+                        sess.reset_errors();\n+                    }\n                     None\n                 }\n             }"}, {"sha": "ef5ad62674ee9b200ff5c777f8ad91d34382553f", "filename": "src/syntux/session.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2b6226ce497ce9b3b9a0a3fe22a707fefcd8c2ee/src%2Fsyntux%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b6226ce497ce9b3b9a0a3fe22a707fefcd8c2ee/src%2Fsyntux%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntux%2Fsession.rs?ref=2b6226ce497ce9b3b9a0a3fe22a707fefcd8c2ee", "patch": "@@ -230,6 +230,17 @@ impl ParseSess {\n         }\n     }\n \n+    pub(crate) fn emit_or_cancel_diagnostic(&self, diagnostic: &mut Diagnostic) {\n+        self.parse_sess.span_diagnostic.emit_diagnostic(diagnostic);\n+        // The Handler will check whether the diagnostic should be emitted\n+        // based on the user's rustfmt configuration and the originating file\n+        // that caused the parser error. If the Handler determined it should skip\n+        // emission then we need to ensure the diagnostic is cancelled.\n+        if !diagnostic.cancelled() {\n+            diagnostic.cancel();\n+        }\n+    }\n+\n     pub(super) fn can_reset_errors(&self) -> bool {\n         *self.can_reset_errors.borrow()\n     }"}]}