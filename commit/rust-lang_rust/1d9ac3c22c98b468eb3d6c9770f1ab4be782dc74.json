{"sha": "1d9ac3c22c98b468eb3d6c9770f1ab4be782dc74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkOWFjM2MyMmM5OGI0NjhlYjNkNmM5NzcwZjFhYjRiZTc4MmRjNzQ=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-02-09T08:57:42Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-02-09T08:58:05Z"}, "message": "Fix const generics in GAT", "tree": {"sha": "6657617e20b11ca8fbf19f40eb2f83efa5cc4767", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6657617e20b11ca8fbf19f40eb2f83efa5cc4767"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d9ac3c22c98b468eb3d6c9770f1ab4be782dc74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d9ac3c22c98b468eb3d6c9770f1ab4be782dc74", "html_url": "https://github.com/rust-lang/rust/commit/1d9ac3c22c98b468eb3d6c9770f1ab4be782dc74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d9ac3c22c98b468eb3d6c9770f1ab4be782dc74/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36931ce3d90e1927e8589d973cc8d18103ede460", "url": "https://api.github.com/repos/rust-lang/rust/commits/36931ce3d90e1927e8589d973cc8d18103ede460", "html_url": "https://github.com/rust-lang/rust/commit/36931ce3d90e1927e8589d973cc8d18103ede460"}], "stats": {"total": 114, "additions": 114, "deletions": 0}, "files": [{"sha": "ef17ab9ccd137ecc9b75d57630b51e727e051cb8", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1d9ac3c22c98b468eb3d6c9770f1ab4be782dc74/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d9ac3c22c98b468eb3d6c9770f1ab4be782dc74/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=1d9ac3c22c98b468eb3d6c9770f1ab4be782dc74", "patch": "@@ -29,6 +29,48 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n         let parent_node = tcx.hir().get(parent_node_id);\n \n         match parent_node {\n+            Node::Ty(hir_ty @ Ty { kind: TyKind::Path(QPath::TypeRelative(_, segment)), .. }) => {\n+                let id = tcx\n+                    .hir()\n+                    .parent_iter(hir_id)\n+                    .filter(|(_, node)| matches!(node, Node::Item(_)))\n+                    .map(|(id, _)| id)\n+                    .next()\n+                    .unwrap();\n+\n+                let item_did = tcx.hir().local_def_id(id).to_def_id();\n+                let item_ctxt = &ItemCtxt::new(tcx, item_did) as &dyn crate::astconv::AstConv<'_>;\n+                let ty = item_ctxt.ast_ty_to_ty(hir_ty);\n+\n+                if let ty::Projection(projection) = ty.kind() {\n+                    let generics = tcx.generics_of(projection.item_def_id);\n+\n+                    let arg_index = segment\n+                        .args\n+                        .and_then(|args| {\n+                            args.args\n+                                .iter()\n+                                .filter(|arg| arg.is_const())\n+                                .position(|arg| arg.id() == hir_id)\n+                        })\n+                        .unwrap_or_else(|| {\n+                            bug!(\"no arg matching AnonConst in segment\");\n+                        });\n+\n+                    return generics\n+                        .params\n+                        .iter()\n+                        .filter(|param| matches!(param.kind, ty::GenericParamDefKind::Const))\n+                        .nth(arg_index)\n+                        .map(|param| param.def_id);\n+                }\n+\n+                tcx.sess.delay_span_bug(\n+                    tcx.def_span(def_id),\n+                    \"unexpected non-GAT usage of an anon const\",\n+                );\n+                return None;\n+            }\n             Node::Expr(&Expr {\n                 kind:\n                     ExprKind::MethodCall(segment, ..) | ExprKind::Path(QPath::TypeRelative(_, segment)),"}, {"sha": "2284767debb4dfed0590ed48a4fcd094846eeefd", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d9ac3c22c98b468eb3d6c9770f1ab4be782dc74/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d9ac3c22c98b468eb3d6c9770f1ab4be782dc74/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=1d9ac3c22c98b468eb3d6c9770f1ab4be782dc74", "patch": "@@ -56,6 +56,7 @@ This API is completely unstable and subject to change.\n */\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(bindings_after_at)]\n #![feature(bool_to_option)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "ab33ef6f2442c4c0a9777c7967054e8677ef7e35", "filename": "src/test/ui/generic-associated-types/const-generics-gat-in-trait-return-type-1.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1d9ac3c22c98b468eb3d6c9770f1ab4be782dc74/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d9ac3c22c98b468eb3d6c9770f1ab4be782dc74/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-1.rs?ref=1d9ac3c22c98b468eb3d6c9770f1ab4be782dc74", "patch": "@@ -0,0 +1,22 @@\n+// run-pass\n+#![feature(generic_associated_types)]\n+#![allow(incomplete_features)]\n+\n+// This test unsures that with_opt_const_param returns the\n+// def_id of the N param in the Foo::Assoc GAT.\n+\n+trait Foo {\n+    type Assoc<const N: usize>;\n+    fn foo(&self) -> Self::Assoc<3>;\n+}\n+\n+impl Foo for () {\n+    type Assoc<const N: usize> = [(); N];\n+    fn foo(&self) -> Self::Assoc<3> {\n+        [(); 3]\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(().foo(), [(); 3]);\n+}"}, {"sha": "ba9a82ae721092a9a9c94ed6a3bfc8af3e534bd1", "filename": "src/test/ui/generic-associated-types/const-generics-gat-in-trait-return-type-2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1d9ac3c22c98b468eb3d6c9770f1ab4be782dc74/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d9ac3c22c98b468eb3d6c9770f1ab4be782dc74/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-2.rs?ref=1d9ac3c22c98b468eb3d6c9770f1ab4be782dc74", "patch": "@@ -0,0 +1,22 @@\n+// run-pass\n+#![feature(generic_associated_types)]\n+#![allow(incomplete_features)]\n+\n+// This test unsures that with_opt_const_param returns the\n+// def_id of the N param in the Foo::Assoc GAT.\n+\n+trait Foo {\n+    type Assoc<const N: usize>;\n+    fn foo<const N: usize>(&self) -> Self::Assoc<N>;\n+}\n+\n+impl Foo for () {\n+    type Assoc<const N: usize> = [(); N];\n+    fn foo<const N: usize>(&self) -> Self::Assoc<N> {\n+        [(); N]\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(().foo::<10>(), [(); 10]);\n+}"}, {"sha": "9da5334056a37e9844abbde110073fc47a82874e", "filename": "src/test/ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1d9ac3c22c98b468eb3d6c9770f1ab4be782dc74/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d9ac3c22c98b468eb3d6c9770f1ab4be782dc74/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst-generics-gat-in-trait-return-type-3.rs?ref=1d9ac3c22c98b468eb3d6c9770f1ab4be782dc74", "patch": "@@ -0,0 +1,27 @@\n+// run-pass\n+#![feature(generic_associated_types)]\n+#![allow(incomplete_features)]\n+\n+// This test unsures that with_opt_const_param returns the\n+// def_id of the N param in the Bar::Assoc GAT.\n+\n+trait Bar {\n+    type Assoc<const N: usize>;\n+}\n+trait Foo: Bar {\n+    fn foo(&self) -> Self::Assoc<3>;\n+}\n+\n+impl Bar for () {\n+    type Assoc<const N: usize> = [(); N];\n+}\n+\n+impl Foo for () {\n+    fn foo(&self) -> Self::Assoc<3> {\n+        [(); 3]\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(().foo(), [(); 3]);\n+}"}]}