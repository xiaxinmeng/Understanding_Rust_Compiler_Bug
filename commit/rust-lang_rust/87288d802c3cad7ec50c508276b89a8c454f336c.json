{"sha": "87288d802c3cad7ec50c508276b89a8c454f336c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3Mjg4ZDgwMmMzY2FkN2VjNTBjNTA4Mjc2Yjg5YThjNDU0ZjMzNmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-25T09:41:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-25T09:50:46Z"}, "message": "pack enum variants into arena", "tree": {"sha": "b9dcccf99c868b6b2abf75e08fc56f42869b9ce5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9dcccf99c868b6b2abf75e08fc56f42869b9ce5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87288d802c3cad7ec50c508276b89a8c454f336c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87288d802c3cad7ec50c508276b89a8c454f336c", "html_url": "https://github.com/rust-lang/rust/commit/87288d802c3cad7ec50c508276b89a8c454f336c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87288d802c3cad7ec50c508276b89a8c454f336c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4a351b736632f0c01d9c51ce1cd3b4b4c6194d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4a351b736632f0c01d9c51ce1cd3b4b4c6194d9", "html_url": "https://github.com/rust-lang/rust/commit/c4a351b736632f0c01d9c51ce1cd3b4b4c6194d9"}], "stats": {"total": 129, "additions": 55, "deletions": 74}, "files": [{"sha": "dc936e826ae4f7a7f4e795fa8d4228aa62be6104", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 26, "deletions": 49, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/87288d802c3cad7ec50c508276b89a8c454f336c/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87288d802c3cad7ec50c508276b89a8c454f336c/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=87288d802c3cad7ec50c508276b89a8c454f336c", "patch": "@@ -3,6 +3,7 @@\n \n use std::sync::Arc;\n \n+use ra_arena::{RawId, Arena, impl_arena_id};\n use ra_syntax::{\n     TreeArc,\n     ast::{self, NameOwner, StructFlavor}\n@@ -12,7 +13,6 @@ use crate::{\n     Name, AsName, Struct, Enum, EnumVariant, Crate,\n     HirDatabase, HirFileId,\n     type_ref::TypeRef,\n-    ids::LocationCtx,\n };\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n@@ -66,77 +66,54 @@ fn variants(enum_def: &ast::EnumDef) -> impl Iterator<Item = &ast::EnumVariant>\n }\n \n impl EnumVariant {\n-    pub fn source_impl(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::EnumVariant>) {\n+    pub(crate) fn source_impl(\n+        &self,\n+        db: &impl HirDatabase,\n+    ) -> (HirFileId, TreeArc<ast::EnumVariant>) {\n         let (file_id, enum_def) = self.parent.source(db);\n         let var = variants(&*enum_def)\n-            .nth(self.idx as usize)\n+            .zip(db.enum_data(self.parent).variants.iter())\n+            .find(|(_syntax, (id, _))| *id == self.id)\n             .unwrap()\n+            .0\n             .to_owned();\n         (file_id, var)\n     }\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub(crate) struct EnumVariantId(RawId);\n+impl_arena_id!(EnumVariantId);\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct EnumData {\n     pub(crate) name: Option<Name>,\n-    pub(crate) variants: Vec<(Name, EnumVariant)>,\n+    pub(crate) variants: Arena<EnumVariantId, EnumVariantData>,\n }\n \n impl EnumData {\n-    fn new(enum_def: &ast::EnumDef, variants: Vec<(Name, EnumVariant)>) -> Self {\n-        let name = enum_def.name().map(|n| n.as_name());\n-        EnumData { name, variants }\n-    }\n-\n     pub(crate) fn enum_data_query(db: &impl HirDatabase, e: Enum) -> Arc<EnumData> {\n         let (_file_id, enum_def) = e.source(db);\n-        let variants = variants(&*enum_def)\n-            .enumerate()\n-            .filter_map(|(idx, variant_def)| {\n-                let name = variant_def.name()?.as_name();\n-                let var = EnumVariant {\n-                    parent: e,\n-                    idx: idx as u32,\n-                };\n-                Some((name, var))\n-            })\n-            .collect();\n-\n-        Arc::new(EnumData::new(&*enum_def, variants))\n+        let mut res = EnumData {\n+            name: enum_def.name().map(|n| n.as_name()),\n+            variants: Arena::default(),\n+        };\n+        for var in variants(&*enum_def) {\n+            let data = EnumVariantData {\n+                name: var.name().map(|it| it.as_name()),\n+                variant_data: Arc::new(VariantData::new(var.flavor())),\n+            };\n+            res.variants.alloc(data);\n+        }\n+\n+        Arc::new(res)\n     }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct EnumVariantData {\n     pub(crate) name: Option<Name>,\n     pub(crate) variant_data: Arc<VariantData>,\n-    pub(crate) parent_enum: Enum,\n-}\n-\n-impl EnumVariantData {\n-    fn new(variant_def: &ast::EnumVariant, parent_enum: Enum) -> EnumVariantData {\n-        let name = variant_def.name().map(|n| n.as_name());\n-        let variant_data = VariantData::new(variant_def.flavor());\n-        let variant_data = Arc::new(variant_data);\n-        EnumVariantData {\n-            name,\n-            variant_data,\n-            parent_enum,\n-        }\n-    }\n-\n-    pub(crate) fn enum_variant_data_query(\n-        db: &impl HirDatabase,\n-        var: EnumVariant,\n-    ) -> Arc<EnumVariantData> {\n-        let (file_id, variant_def) = var.source(db);\n-        let enum_def = variant_def.parent_enum();\n-        let ctx = LocationCtx::new(db, var.module(db), file_id);\n-        let e = Enum {\n-            id: ctx.to_def(enum_def),\n-        };\n-        Arc::new(EnumVariantData::new(&*variant_def, e))\n-    }\n }\n \n /// A single field of an enum variant or struct"}, {"sha": "249a4aba993243fc43b62b4d1a3c77ed56eeacb5", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/87288d802c3cad7ec50c508276b89a8c454f336c/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87288d802c3cad7ec50c508276b89a8c454f336c/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=87288d802c3cad7ec50c508276b89a8c454f336c", "patch": "@@ -11,7 +11,7 @@ use crate::{\n     db::HirDatabase,\n     expr::BodySyntaxMapping,\n     ty::{InferenceResult, VariantDef},\n-    adt::VariantData,\n+    adt::{VariantData, EnumVariantId},\n     generics::GenericParams,\n     docs::{Documentation, Docs, docs_from_ast},\n     module_tree::ModuleId,\n@@ -252,8 +252,20 @@ impl Enum {\n         db.enum_data(*self).name.clone()\n     }\n \n-    pub fn variants(&self, db: &impl HirDatabase) -> Vec<(Name, EnumVariant)> {\n-        db.enum_data(*self).variants.clone()\n+    pub fn variants(&self, db: &impl HirDatabase) -> Vec<EnumVariant> {\n+        db.enum_data(*self)\n+            .variants\n+            .iter()\n+            .map(|(id, _)| EnumVariant { parent: *self, id })\n+            .collect()\n+    }\n+\n+    pub fn variant(&self, db: &impl HirDatabase, name: &Name) -> Option<EnumVariant> {\n+        db.enum_data(*self)\n+            .variants\n+            .iter()\n+            .find(|(_id, data)| data.name.as_ref() == Some(name))\n+            .map(|(id, _)| EnumVariant { parent: *self, id })\n     }\n \n     pub fn generic_params(&self, db: &impl HirDatabase) -> Arc<GenericParams> {\n@@ -270,7 +282,7 @@ impl Docs for Enum {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct EnumVariant {\n     pub(crate) parent: Enum,\n-    pub(crate) idx: u32,\n+    pub(crate) id: EnumVariantId,\n }\n \n impl EnumVariant {\n@@ -285,11 +297,13 @@ impl EnumVariant {\n     }\n \n     pub fn name(&self, db: &impl HirDatabase) -> Option<Name> {\n-        db.enum_variant_data(*self).name.clone()\n+        db.enum_data(self.parent).variants[self.id].name.clone()\n     }\n \n     pub fn variant_data(&self, db: &impl HirDatabase) -> Arc<VariantData> {\n-        db.enum_variant_data(*self).variant_data.clone()\n+        db.enum_data(self.parent).variants[self.id]\n+            .variant_data\n+            .clone()\n     }\n \n     pub fn fields(&self, db: &impl HirDatabase) -> Vec<StructField> {"}, {"sha": "5a29e54d649f296c8002eb46915de5e2dcd2f498", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/87288d802c3cad7ec50c508276b89a8c454f336c/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87288d802c3cad7ec50c508276b89a8c454f336c/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=87288d802c3cad7ec50c508276b89a8c454f336c", "patch": "@@ -8,12 +8,12 @@ use crate::{\n     SourceFileItems, SourceItemId, Crate, Module, HirInterner,\n     query_definitions,\n     Function, FnSignature, FnScopes,\n-    Struct, Enum, EnumVariant,\n+    Struct, Enum,\n     macros::MacroExpansion,\n     module_tree::ModuleTree,\n     nameres::{ItemMap, lower::{LoweredModule, ImportSourceMap}},\n     ty::{InferenceResult, Ty, method_resolution::CrateImplBlocks, TypableDef, VariantDef},\n-    adt::{StructData, EnumData, EnumVariantData},\n+    adt::{StructData, EnumData},\n     impl_block::ModuleImplBlocks,\n     generics::{GenericParams, GenericDef},\n };\n@@ -35,9 +35,6 @@ pub trait HirDatabase: SyntaxDatabase + AsRef<HirInterner> {\n     #[salsa::invoke(crate::adt::EnumData::enum_data_query)]\n     fn enum_data(&self, e: Enum) -> Arc<EnumData>;\n \n-    #[salsa::invoke(crate::adt::EnumVariantData::enum_variant_data_query)]\n-    fn enum_variant_data(&self, var: EnumVariant) -> Arc<EnumVariantData>;\n-\n     #[salsa::invoke(crate::ty::infer)]\n     fn infer(&self, func: Function) -> Arc<InferenceResult>;\n "}, {"sha": "1a83a5c87ac8d6f25d29917e4d253e90ac637807", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/87288d802c3cad7ec50c508276b89a8c454f336c/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87288d802c3cad7ec50c508276b89a8c454f336c/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=87288d802c3cad7ec50c508276b89a8c454f336c", "patch": "@@ -231,7 +231,6 @@ salsa::database_storage! {\n             fn type_for_field() for db::TypeForFieldQuery;\n             fn struct_data() for db::StructDataQuery;\n             fn enum_data() for db::EnumDataQuery;\n-            fn enum_variant_data() for db::EnumVariantDataQuery;\n             fn impls_in_module() for db::ImplsInModuleQuery;\n             fn impls_in_crate() for db::ImplsInCrateQuery;\n             fn body_hir() for db::BodyHirQuery;"}, {"sha": "028c1882f72524fcd46d4fa12b192ccea8cf798f", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/87288d802c3cad7ec50c508276b89a8c454f336c/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87288d802c3cad7ec50c508276b89a8c454f336c/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=87288d802c3cad7ec50c508276b89a8c454f336c", "patch": "@@ -397,13 +397,8 @@ impl ItemMap {\n                 ModuleDef::Enum(e) => {\n                     // enum variant\n                     tested_by!(item_map_enum_importing);\n-                    let matching_variant = e\n-                        .variants(db)\n-                        .into_iter()\n-                        .find(|(n, _variant)| n == &segment.name);\n-\n-                    match matching_variant {\n-                        Some((_n, variant)) => PerNs::both(variant.into(), (*e).into()),\n+                    match e.variant(db, &segment.name) {\n+                        Some(variant) => PerNs::both(variant.into(), (*e).into()),\n                         None => PerNs::none(),\n                     }\n                 }"}, {"sha": "e3f1d42f815712bbb3059bd669d13ab6dc6563da", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87288d802c3cad7ec50c508276b89a8c454f336c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87288d802c3cad7ec50c508276b89a8c454f336c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=87288d802c3cad7ec50c508276b89a8c454f336c", "patch": "@@ -27,18 +27,18 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n             }\n         }\n         hir::ModuleDef::Enum(e) => {\n-            e.variants(ctx.db)\n-                .into_iter()\n-                .for_each(|(variant_name, variant)| {\n+            e.variants(ctx.db).into_iter().for_each(|variant| {\n+                if let Some(name) = variant.name(ctx.db) {\n                     CompletionItem::new(\n                         CompletionKind::Reference,\n                         ctx.source_range(),\n-                        variant_name.to_string(),\n+                        name.to_string(),\n                     )\n                     .kind(CompletionItemKind::EnumVariant)\n                     .set_documentation(variant.docs(ctx.db))\n                     .add_to(acc)\n-                });\n+                }\n+            });\n         }\n         _ => return,\n     };"}, {"sha": "11305613c820b29788a30ce8060418bf93daeff0", "filename": "crates/ra_ide_api/src/db.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/87288d802c3cad7ec50c508276b89a8c454f336c/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87288d802c3cad7ec50c508276b89a8c454f336c/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdb.rs?ref=87288d802c3cad7ec50c508276b89a8c454f336c", "patch": "@@ -104,7 +104,6 @@ salsa::database_storage! {\n             fn type_for_field() for hir::db::TypeForFieldQuery;\n             fn struct_data() for hir::db::StructDataQuery;\n             fn enum_data() for hir::db::EnumDataQuery;\n-            fn enum_variant_data() for hir::db::EnumVariantDataQuery;\n             fn impls_in_module() for hir::db::ImplsInModuleQuery;\n             fn impls_in_crate() for hir::db::ImplsInCrateQuery;\n             fn body_hir() for hir::db::BodyHirQuery;"}]}