{"sha": "7d5c7b8083acc8fe6bb466bb11c60d597384f978", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNWM3YjgwODNhY2M4ZmU2YmI0NjZiYjExYzYwZDU5NzM4NGY5Nzg=", "commit": {"author": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-10-24T13:42:55Z"}, "committer": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-10-24T14:05:03Z"}, "message": "extra: Add getter methods to extra::rational::Ratio\n\nAfter merging 0ada7c7, user code have not been able to access to `Ratio`'s numerator and denominator fields.\nIn some algorithms, it is needed to get an rational number's numerator or denominator, but keeping these fields private is necessary for guaranteeing that `Ratio` numbers are irreducible.\nSo, I added the getter methods `numer()` and `denom()`.\n\nAs a bonus, this commit adds utility methods relating to the ratio-integer conversion.", "tree": {"sha": "cea5a12a124da58f30802c21b41c842fcae3daf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cea5a12a124da58f30802c21b41c842fcae3daf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d5c7b8083acc8fe6bb466bb11c60d597384f978", "comment_count": 13, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d5c7b8083acc8fe6bb466bb11c60d597384f978", "html_url": "https://github.com/rust-lang/rust/commit/7d5c7b8083acc8fe6bb466bb11c60d597384f978", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d5c7b8083acc8fe6bb466bb11c60d597384f978/comments", "author": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7075eb36254e673fad1055148ee1a02447371215", "url": "https://api.github.com/repos/rust-lang/rust/commits/7075eb36254e673fad1055148ee1a02447371215", "html_url": "https://github.com/rust-lang/rust/commit/7075eb36254e673fad1055148ee1a02447371215"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "2f470a83cdc31c4d6b93a65f4fb12b78770a3ba7", "filename": "src/libextra/num/rational.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/7d5c7b8083acc8fe6bb466bb11c60d597384f978/src%2Flibextra%2Fnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5c7b8083acc8fe6bb466bb11c60d597384f978/src%2Flibextra%2Fnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Frational.rs?ref=7d5c7b8083acc8fe6bb466bb11c60d597384f978", "patch": "@@ -57,6 +57,30 @@ impl<T: Clone + Integer + Ord>\n         ret\n     }\n \n+    /// Convert to an integer.\n+    #[inline]\n+    pub fn to_integer(&self) -> T {\n+        self.trunc().numer\n+    }\n+\n+    /// Gets an immutable reference to the numerator.\n+    #[inline]\n+    pub fn numer<'a>(&'a self) -> &'a T {\n+        &self.numer\n+    }\n+\n+    /// Gets an immutable reference to the denominator.\n+    #[inline]\n+    pub fn denom<'a>(&'a self) -> &'a T {\n+        &self.denom\n+    }\n+\n+    /// Return true if the rational number is an integer (denominator is 1).\n+    #[inline]\n+    pub fn is_integer(&self) -> bool {\n+        self.denom == One::one()\n+    }\n+\n     /// Put self into lowest terms, with denom > 0.\n     fn reduce(&mut self) {\n         let g : T = self.numer.gcd(&self.denom);\n@@ -362,6 +386,48 @@ mod test {\n     }\n \n \n+    #[test]\n+    fn test_to_integer() {\n+        assert_eq!(_0.to_integer(), 0);\n+        assert_eq!(_1.to_integer(), 1);\n+        assert_eq!(_2.to_integer(), 2);\n+        assert_eq!(_1_2.to_integer(), 0);\n+        assert_eq!(_3_2.to_integer(), 1);\n+        assert_eq!(_neg1_2.to_integer(), 0);\n+    }\n+\n+\n+    #[test]\n+    fn test_numer() {\n+        assert_eq!(_0.numer(), &0);\n+        assert_eq!(_1.numer(), &1);\n+        assert_eq!(_2.numer(), &2);\n+        assert_eq!(_1_2.numer(), &1);\n+        assert_eq!(_3_2.numer(), &3);\n+        assert_eq!(_neg1_2.numer(), &(-1));\n+    }\n+    #[test]\n+    fn test_denom() {\n+        assert_eq!(_0.denom(), &1);\n+        assert_eq!(_1.denom(), &1);\n+        assert_eq!(_2.denom(), &1);\n+        assert_eq!(_1_2.denom(), &2);\n+        assert_eq!(_3_2.denom(), &2);\n+        assert_eq!(_neg1_2.denom(), &2);\n+    }\n+\n+\n+    #[test]\n+    fn test_is_integer() {\n+        assert!(_0.is_integer());\n+        assert!(_1.is_integer());\n+        assert!(_2.is_integer());\n+        assert!(!_1_2.is_integer());\n+        assert!(!_3_2.is_integer());\n+        assert!(!_neg1_2.is_integer());\n+    }\n+\n+\n     mod arith {\n         use super::*;\n         use super::super::*;"}]}