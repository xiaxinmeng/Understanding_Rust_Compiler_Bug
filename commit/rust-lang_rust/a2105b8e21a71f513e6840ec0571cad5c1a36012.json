{"sha": "a2105b8e21a71f513e6840ec0571cad5c1a36012", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMTA1YjhlMjFhNzFmNTEzZTY4NDBlYzA1NzFjYWQ1YzFhMzYwMTI=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2018-04-25T21:42:57Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2018-04-25T21:42:57Z"}, "message": "make RawVec::empty const", "tree": {"sha": "525e93f087997576b0b359150bc3dbf22c083ebb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/525e93f087997576b0b359150bc3dbf22c083ebb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2105b8e21a71f513e6840ec0571cad5c1a36012", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2105b8e21a71f513e6840ec0571cad5c1a36012", "html_url": "https://github.com/rust-lang/rust/commit/a2105b8e21a71f513e6840ec0571cad5c1a36012", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2105b8e21a71f513e6840ec0571cad5c1a36012/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "256096da9ee680366b839f912e8d3ecccc0da033", "url": "https://api.github.com/repos/rust-lang/rust/commits/256096da9ee680366b839f912e8d3ecccc0da033", "html_url": "https://github.com/rust-lang/rust/commit/256096da9ee680366b839f912e8d3ecccc0da033"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "fe18979fb51c71347fae9707aed39411326e6800", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a2105b8e21a71f513e6840ec0571cad5c1a36012/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2105b8e21a71f513e6840ec0571cad5c1a36012/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=a2105b8e21a71f513e6840ec0571cad5c1a36012", "patch": "@@ -54,6 +54,7 @@ pub struct RawVec<T, A: Alloc = Global> {\n }\n \n impl<T, A: Alloc> RawVec<T, A> {\n+    // FIXME: this should be made `const` when `if` statements are allowed\n     /// Like `new` but parameterized over the choice of allocator for\n     /// the returned RawVec.\n     pub fn new_in(a: A) -> Self {\n@@ -68,6 +69,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n         }\n     }\n \n+    // FIXME: this should removed when `new_in` can be made `const`\n     /// Like `empty` but parametrized over the choice of allocator for the returned `RawVec`.\n     pub const fn empty_in(a: A) -> Self {\n         // Unique::empty() doubles as \"unallocated\" and \"zero-sized allocation\"\n@@ -134,9 +136,10 @@ impl<T> RawVec<T, Global> {\n         Self::new_in(Global)\n     }\n \n+    // FIXME: this should removed when `new` can be made `const`\n     /// Create a `RawVec` with capcity 0 (on the system heap), regardless of `T`, without\n     /// allocating.\n-    pub fn empty() -> Self {\n+    pub const fn empty() -> Self {\n         Self::empty_in(Global)\n     }\n "}]}