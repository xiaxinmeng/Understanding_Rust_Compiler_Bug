{"sha": "8d6ce3177bd5d4d05723dec1cdd869effc926fc3", "node_id": "C_kwDOAAsO6NoAKDhkNmNlMzE3N2JkNWQ0ZDA1NzIzZGVjMWNkZDg2OWVmZmM5MjZmYzM", "commit": {"author": {"name": "Doru-Florin Blanzeanu", "email": "blanzeanu.doru@protonmail.com", "date": "2022-10-16T19:31:03Z"}, "committer": {"name": "Doru-Florin Blanzeanu", "email": "blanzeanu.doru@protonmail.com", "date": "2022-10-24T10:43:48Z"}, "message": "Add new lint `rewind_instead_of_seek_to_start`\n\nSigned-off-by: Doru-Florin Blanzeanu <blanzeanu.doru@protonmail.com>", "tree": {"sha": "697ae96dd3b5c5de362dcf0b6c60b2823cb2d848", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/697ae96dd3b5c5de362dcf0b6c60b2823cb2d848"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d6ce3177bd5d4d05723dec1cdd869effc926fc3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAAhcAAAAHc3NoLXJzYQAAAAMBAAEAAAIBALz0ayFLchIYjexhdAtl9B\nnMu93u/Og8kCa1G7kmyujm3/KmZ5DpcDesaUyYcLMsw3EpyEQ9JtCXCGVc8thezPp/4/rp\nQXWib/tvh3MAfyrskit1kdo5nGr6xpybPL2UCZQtcxzWBpjacHd4C5w0B2BCQGjK3cwjhC\nuhlYyQ5VnfSmFH9UDvxj9dp5Pps/XBKeJi+460G9nahGXcPiFm2RlyadPXEvx0qbU6Tg88\nIuVL9/QxMI2xh7yoXdeZHE5Hn97u9FSL0S8Hah9m7xX9GWq0E7B7uducWQmEXFu/p38Nsr\ndxCBRjccfKEGxlnyaBJ1L0cLzVfPuyQmEf1/38vAxWr9SUX4dFa0wDn5f34goD/b7/Xzjg\nDsfO32vLUtCcuv7+a5LyfqpDPAdFcgd4pvQpkAjWiQNldscCT/X56hay6cC+73EYXcr7Mf\nfQVwLxIp8C/oFJrTWgMZy6BIHh92rdWleI5guD7TDTdOUJN9yAsjMUK3UisIhtikP/++5P\nboFmnJKcqJSoK0nuXKrPNy2lTcwSzowC3aeUivToQSoj4QAMOd904Bz7pkpqHa7xklXhKx\nOlx2RrfqL50uL2ivk63ftLr+dWmK+st5cAgtiBOkm4z/BCIoD7CNU9Jo0ZOHuNEfwFaswQ\ntilBsb230D+P2Gb9G01+UESxnECdkxgjAAAAA2dpdAAAAAAAAAAGc2hhNTEyAAACFAAAAA\nxyc2Etc2hhMi01MTIAAAIAQ5LQq3Qu+kuJ8aXKm6AAnt/f+emN+DjAl6me0Z5PSYkTnHqx\nNwVMANJ/1whuEBCQh3DiqCpZCejc0Sks0OAC6kXjkzHk5GbrdtVWk4YDmjlw+r8bb0KcfZ\ncRvTUIVKX3e8AZi8KsPg04vSKsVz/w1aRyOM/cjuDowM35xMlar4nr0E5rNccU6W9jfDqb\nhdnSMLKNBRcpkGsynzRCZkLMerYwwBTL6GQznVpcqGCe3MMmM3+kxQlOELI5wPpqjOR9Em\nVJGzJMjDbLfe6RIWcbZjRf7CjWBAZJyyJopUZlb3//Nd0mzcmO/2tnRQt++B9pV3OI8bZw\nJcqjSZJzP73nLPY4YUqHZxt34s2tr46spraqdk1gP87vPqhdaQlb6WELkKg4jhfN1JJQ8v\nicgvPGx0VimbiltoydvAOp87WUixcYcVRPZAwo3cR0PqgGRNY1+33TUk74NL3Tisbcd10b\n8SQHtOWe1o4nzc8G+PBWZJ7RsnPVuGFzbMo3UgpIK9deTGbYPZEMHxe6zD8IUFiygz0iML\nkZskv5Q2kfRj8UFBU0o9Naw2SZjvVTIz+6uL8KnA8UFvXsdbsjtdquUxA3jnNKq8gV7V4h\nc0z2GAeLtQZ6vSA/30wG22J3hPUj02AzxyXQeUI6Q3bAg7GZtdIUH9u6rcefd8+A7nkSP/\ni9Y0U=\n-----END SSH SIGNATURE-----", "payload": "tree 697ae96dd3b5c5de362dcf0b6c60b2823cb2d848\nparent 5b09d4e1f7082aff024faf27263f78e7fc7190a2\nauthor Doru-Florin Blanzeanu <blanzeanu.doru@protonmail.com> 1665948663 +0000\ncommitter Doru-Florin Blanzeanu <blanzeanu.doru@protonmail.com> 1666608228 +0000\n\nAdd new lint `rewind_instead_of_seek_to_start`\n\nSigned-off-by: Doru-Florin Blanzeanu <blanzeanu.doru@protonmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d6ce3177bd5d4d05723dec1cdd869effc926fc3", "html_url": "https://github.com/rust-lang/rust/commit/8d6ce3177bd5d4d05723dec1cdd869effc926fc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d6ce3177bd5d4d05723dec1cdd869effc926fc3/comments", "author": {"login": "dorublanzeanu", "id": 13020154, "node_id": "MDQ6VXNlcjEzMDIwMTU0", "avatar_url": "https://avatars.githubusercontent.com/u/13020154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dorublanzeanu", "html_url": "https://github.com/dorublanzeanu", "followers_url": "https://api.github.com/users/dorublanzeanu/followers", "following_url": "https://api.github.com/users/dorublanzeanu/following{/other_user}", "gists_url": "https://api.github.com/users/dorublanzeanu/gists{/gist_id}", "starred_url": "https://api.github.com/users/dorublanzeanu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dorublanzeanu/subscriptions", "organizations_url": "https://api.github.com/users/dorublanzeanu/orgs", "repos_url": "https://api.github.com/users/dorublanzeanu/repos", "events_url": "https://api.github.com/users/dorublanzeanu/events{/privacy}", "received_events_url": "https://api.github.com/users/dorublanzeanu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dorublanzeanu", "id": 13020154, "node_id": "MDQ6VXNlcjEzMDIwMTU0", "avatar_url": "https://avatars.githubusercontent.com/u/13020154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dorublanzeanu", "html_url": "https://github.com/dorublanzeanu", "followers_url": "https://api.github.com/users/dorublanzeanu/followers", "following_url": "https://api.github.com/users/dorublanzeanu/following{/other_user}", "gists_url": "https://api.github.com/users/dorublanzeanu/gists{/gist_id}", "starred_url": "https://api.github.com/users/dorublanzeanu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dorublanzeanu/subscriptions", "organizations_url": "https://api.github.com/users/dorublanzeanu/orgs", "repos_url": "https://api.github.com/users/dorublanzeanu/repos", "events_url": "https://api.github.com/users/dorublanzeanu/events{/privacy}", "received_events_url": "https://api.github.com/users/dorublanzeanu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b09d4e1f7082aff024faf27263f78e7fc7190a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b09d4e1f7082aff024faf27263f78e7fc7190a2", "html_url": "https://github.com/rust-lang/rust/commit/5b09d4e1f7082aff024faf27263f78e7fc7190a2"}], "stats": {"total": 311, "additions": 311, "deletions": 0}, "files": [{"sha": "09f914fe0ca8c208883862b4cc27a538c4817dc0", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d6ce3177bd5d4d05723dec1cdd869effc926fc3/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/8d6ce3177bd5d4d05723dec1cdd869effc926fc3/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=8d6ce3177bd5d4d05723dec1cdd869effc926fc3", "patch": "@@ -4195,6 +4195,7 @@ Released 2018-09-13\n [`result_unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_unwrap_used\n [`return_self_not_must_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use\n [`reversed_empty_ranges`]: https://rust-lang.github.io/rust-clippy/master/index.html#reversed_empty_ranges\n+[`rewind_instead_of_seek_to_start`]: https://rust-lang.github.io/rust-clippy/master/index.html#rewind_instead_of_seek_to_start\n [`same_functions_in_if_condition`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_functions_in_if_condition\n [`same_item_push`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_item_push\n [`same_name_method`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_name_method"}, {"sha": "ad482cfc2e7bc4162bd8d7a05c668dfa0720bd24", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d6ce3177bd5d4d05723dec1cdd869effc926fc3/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6ce3177bd5d4d05723dec1cdd869effc926fc3/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=8d6ce3177bd5d4d05723dec1cdd869effc926fc3", "patch": "@@ -361,6 +361,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::methods::RANGE_ZIP_WITH_LEN_INFO,\n     crate::methods::REPEAT_ONCE_INFO,\n     crate::methods::RESULT_MAP_OR_INTO_OPTION_INFO,\n+    crate::methods::REWIND_INSTEAD_OF_SEEK_TO_START_INFO,\n     crate::methods::SEARCH_IS_SOME_INFO,\n     crate::methods::SHOULD_IMPLEMENT_TRAIT_INFO,\n     crate::methods::SINGLE_CHAR_ADD_STR_INFO,"}, {"sha": "e794af7d64b67a71124f6e41a1de58a53f433953", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8d6ce3177bd5d4d05723dec1cdd869effc926fc3/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6ce3177bd5d4d05723dec1cdd869effc926fc3/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=8d6ce3177bd5d4d05723dec1cdd869effc926fc3", "patch": "@@ -68,6 +68,7 @@ mod or_then_unwrap;\n mod path_buf_push_overwrite;\n mod range_zip_with_len;\n mod repeat_once;\n+mod rewind_instead_of_seek_to_start;\n mod search_is_some;\n mod single_char_add_str;\n mod single_char_insert_string;\n@@ -3066,6 +3067,37 @@ declare_clippy_lint! {\n     \"iterating on map using `iter` when `keys` or `values` would do\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Checks for jumps to the start of a stream that implements `Seek`\n+    /// and uses the `seek` method providing `Start` as parameter.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// Readability. There is a specific method that was implemented for\n+    /// this exact scenario.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # use std::io;\n+    /// fn foo<T: io::Seek>(t: &mut T) {\n+    ///     t.seek(io::SeekFrom::Start(0));\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::io;\n+    /// fn foo<T: io::Seek>(t: &mut T) {\n+    ///     t.rewind();\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.66.0\"]\n+    pub REWIND_INSTEAD_OF_SEEK_TO_START,\n+    complexity,\n+    \"jumping to the start of stream using `seek` method\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n@@ -3190,6 +3222,7 @@ impl_lint_pass!(Methods => [\n     VEC_RESIZE_TO_ZERO,\n     VERBOSE_FILE_READS,\n     ITER_KV_MAP,\n+    REWIND_INSTEAD_OF_SEEK_TO_START,\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -3604,6 +3637,9 @@ impl Methods {\n                 (\"resize\", [count_arg, default_arg]) => {\n                     vec_resize_to_zero::check(cx, expr, count_arg, default_arg, span);\n                 },\n+                (\"seek\", [arg]) => {\n+                    rewind_instead_of_seek_to_start::check(cx, expr, recv, arg, span);\n+                },\n                 (\"sort\", []) => {\n                     stable_sort_primitive::check(cx, expr, recv);\n                 },"}, {"sha": "97b33dec843ee20986deef95ad583ec033a6feb4", "filename": "clippy_lints/src/methods/rewind_instead_of_seek_to_start.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8d6ce3177bd5d4d05723dec1cdd869effc926fc3/clippy_lints%2Fsrc%2Fmethods%2Frewind_instead_of_seek_to_start.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6ce3177bd5d4d05723dec1cdd869effc926fc3/clippy_lints%2Fsrc%2Fmethods%2Frewind_instead_of_seek_to_start.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Frewind_instead_of_seek_to_start.rs?ref=8d6ce3177bd5d4d05723dec1cdd869effc926fc3", "patch": "@@ -0,0 +1,45 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::ty::implements_trait;\n+use clippy_utils::{get_trait_def_id, match_def_path, paths};\n+use rustc_ast::ast::{LitIntType, LitKind};\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::LateContext;\n+use rustc_span::Span;\n+\n+use super::REWIND_INSTEAD_OF_SEEK_TO_START;\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'_>,\n+    recv: &'tcx Expr<'_>,\n+    arg: &'tcx Expr<'_>,\n+    name_span: Span,\n+) {\n+    // Get receiver type\n+    let ty = cx.typeck_results().expr_ty(recv).peel_refs();\n+\n+    if let Some(seek_trait_id) = get_trait_def_id(cx, &paths::STD_IO_SEEK) &&\n+        implements_trait(cx, ty, seek_trait_id, &[]) &&\n+        let ExprKind::Call(func, args1) = arg.kind &&\n+        let ExprKind::Path(ref path) = func.kind &&\n+        let Some(def_id) = cx.qpath_res(path, func.hir_id).opt_def_id() &&\n+        match_def_path(cx, def_id, &paths::STD_IO_SEEKFROM_START) &&\n+        args1.len() == 1 &&\n+        let ExprKind::Lit(ref lit) = args1[0].kind &&\n+        let LitKind::Int(0, LitIntType::Unsuffixed) = lit.node\n+    {\n+        let method_call_span = expr.span.with_lo(name_span.lo());\n+        span_lint_and_then(\n+            cx,\n+            REWIND_INSTEAD_OF_SEEK_TO_START,\n+            method_call_span,\n+            \"used `seek` to go to the start of the stream\",\n+            |diag| {\n+                let app = Applicability::MachineApplicable;\n+\n+                diag.span_suggestion(method_call_span, \"replace with\", \"rewind()\", app);\n+            },\n+        );\n+    }\n+}"}, {"sha": "e37c7e34c0c7a8a9aaa962e7b6637e7f746034c0", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d6ce3177bd5d4d05723dec1cdd869effc926fc3/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6ce3177bd5d4d05723dec1cdd869effc926fc3/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=8d6ce3177bd5d4d05723dec1cdd869effc926fc3", "patch": "@@ -115,6 +115,8 @@ pub const STDERR: [&str; 4] = [\"std\", \"io\", \"stdio\", \"stderr\"];\n pub const STDOUT: [&str; 4] = [\"std\", \"io\", \"stdio\", \"stdout\"];\n pub const CONVERT_IDENTITY: [&str; 3] = [\"core\", \"convert\", \"identity\"];\n pub const STD_FS_CREATE_DIR: [&str; 3] = [\"std\", \"fs\", \"create_dir\"];\n+pub const STD_IO_SEEK: [&str; 3] = [\"std\", \"io\", \"Seek\"];\n+pub const STD_IO_SEEKFROM_START: [&str; 4] = [\"std\", \"io\", \"SeekFrom\", \"Start\"];\n pub const STRING_AS_MUT_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_mut_str\"];\n pub const STRING_AS_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_str\"];\n pub const STRING_NEW: [&str; 4] = [\"alloc\", \"string\", \"String\", \"new\"];"}, {"sha": "bef11b2312a8c67c125880cccee95be4e9acded0", "filename": "src/docs/rewind_instead_of_seek_to_start.txt", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8d6ce3177bd5d4d05723dec1cdd869effc926fc3/src%2Fdocs%2Frewind_instead_of_seek_to_start.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8d6ce3177bd5d4d05723dec1cdd869effc926fc3/src%2Fdocs%2Frewind_instead_of_seek_to_start.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs%2Frewind_instead_of_seek_to_start.txt?ref=8d6ce3177bd5d4d05723dec1cdd869effc926fc3", "patch": "@@ -0,0 +1,22 @@\n+### What it does\n+\n+Checks for jumps to the start of a stream that implements `Seek`\n+and uses the `seek` method providing `Start` as parameter.\n+\n+### Why is this bad?\n+\n+Readability. There is a specific method that was implemented for\n+this exact scenario.\n+\n+### Example\n+```\n+fn foo<T: io::Seek>(t: &mut T) {\n+    t.seek(io::SeekFrom::Start(0));\n+}\n+```\n+Use instead:\n+```\n+fn foo<T: io::Seek>(t: &mut T) {\n+    t.rewind();\n+}\n+```\n\\ No newline at end of file"}, {"sha": "037a288b69b53f12a81deeedd2dc731c0e744c72", "filename": "tests/ui/rewind_instead_of_seek_to_start.fixed", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/8d6ce3177bd5d4d05723dec1cdd869effc926fc3/tests%2Fui%2Frewind_instead_of_seek_to_start.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8d6ce3177bd5d4d05723dec1cdd869effc926fc3/tests%2Fui%2Frewind_instead_of_seek_to_start.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frewind_instead_of_seek_to_start.fixed?ref=8d6ce3177bd5d4d05723dec1cdd869effc926fc3", "patch": "@@ -0,0 +1,94 @@\n+// run-rustfix\n+#![allow(unused)]\n+#![warn(clippy::rewind_instead_of_seek_to_start)]\n+\n+use std::fs::OpenOptions;\n+use std::io::{Read, Seek, SeekFrom, Write};\n+\n+struct StructWithSeekMethod {}\n+\n+impl StructWithSeekMethod {\n+    fn seek(&mut self, from: SeekFrom) {}\n+}\n+\n+trait MySeekTrait {\n+    fn seek(&mut self, from: SeekFrom) {}\n+}\n+\n+struct StructWithSeekTrait {}\n+impl MySeekTrait for StructWithSeekTrait {}\n+\n+// This should NOT trigger clippy warning because\n+// StructWithSeekMethod does not implement std::io::Seek;\n+fn seek_to_start_false_method(t: &mut StructWithSeekMethod) {\n+    t.seek(SeekFrom::Start(0));\n+}\n+\n+// This should NOT trigger clippy warning because\n+// StructWithSeekMethod does not implement std::io::Seek;\n+fn seek_to_start_method_owned_false<T>(mut t: StructWithSeekMethod) {\n+    t.seek(SeekFrom::Start(0));\n+}\n+\n+// This should NOT trigger clippy warning because\n+// StructWithSeekMethod does not implement std::io::Seek;\n+fn seek_to_start_false_trait(t: &mut StructWithSeekTrait) {\n+    t.seek(SeekFrom::Start(0));\n+}\n+\n+// This should NOT trigger clippy warning because\n+// StructWithSeekMethod does not implement std::io::Seek;\n+fn seek_to_start_false_trait_owned<T>(mut t: StructWithSeekTrait) {\n+    t.seek(SeekFrom::Start(0));\n+}\n+\n+// This should NOT trigger clippy warning because\n+// StructWithSeekMethod does not implement std::io::Seek;\n+fn seek_to_start_false_trait_bound<T: MySeekTrait>(t: &mut T) {\n+    t.seek(SeekFrom::Start(0));\n+}\n+\n+// This should trigger clippy warning\n+fn seek_to_start<T: Seek>(t: &mut T) {\n+    t.rewind();\n+}\n+\n+// This should trigger clippy warning\n+fn owned_seek_to_start<T: Seek>(mut t: T) {\n+    t.rewind();\n+}\n+\n+// This should NOT trigger clippy warning because\n+// it does not seek to start\n+fn seek_to_5<T: Seek>(t: &mut T) {\n+    t.seek(SeekFrom::Start(5));\n+}\n+\n+// This should NOT trigger clippy warning because\n+// it does not seek to start\n+fn seek_to_end<T: Seek>(t: &mut T) {\n+    t.seek(SeekFrom::End(0));\n+}\n+\n+fn main() {\n+    let mut f = OpenOptions::new()\n+        .write(true)\n+        .read(true)\n+        .create(true)\n+        .open(\"foo.txt\")\n+        .unwrap();\n+\n+    let mut my_struct_trait = StructWithSeekTrait {};\n+    seek_to_start_false_trait_bound(&mut my_struct_trait);\n+\n+    let hello = \"Hello!\\n\";\n+    write!(f, \"{hello}\").unwrap();\n+    seek_to_5(&mut f);\n+    seek_to_end(&mut f);\n+    seek_to_start(&mut f);\n+\n+    let mut buf = String::new();\n+    f.read_to_string(&mut buf).unwrap();\n+\n+    assert_eq!(&buf, hello);\n+}"}, {"sha": "2622425128d6d8ceb9e88ae67fadc63d51d63b7c", "filename": "tests/ui/rewind_instead_of_seek_to_start.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/8d6ce3177bd5d4d05723dec1cdd869effc926fc3/tests%2Fui%2Frewind_instead_of_seek_to_start.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d6ce3177bd5d4d05723dec1cdd869effc926fc3/tests%2Fui%2Frewind_instead_of_seek_to_start.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frewind_instead_of_seek_to_start.rs?ref=8d6ce3177bd5d4d05723dec1cdd869effc926fc3", "patch": "@@ -0,0 +1,94 @@\n+// run-rustfix\n+#![allow(unused)]\n+#![warn(clippy::rewind_instead_of_seek_to_start)]\n+\n+use std::fs::OpenOptions;\n+use std::io::{Read, Seek, SeekFrom, Write};\n+\n+struct StructWithSeekMethod {}\n+\n+impl StructWithSeekMethod {\n+    fn seek(&mut self, from: SeekFrom) {}\n+}\n+\n+trait MySeekTrait {\n+    fn seek(&mut self, from: SeekFrom) {}\n+}\n+\n+struct StructWithSeekTrait {}\n+impl MySeekTrait for StructWithSeekTrait {}\n+\n+// This should NOT trigger clippy warning because\n+// StructWithSeekMethod does not implement std::io::Seek;\n+fn seek_to_start_false_method(t: &mut StructWithSeekMethod) {\n+    t.seek(SeekFrom::Start(0));\n+}\n+\n+// This should NOT trigger clippy warning because\n+// StructWithSeekMethod does not implement std::io::Seek;\n+fn seek_to_start_method_owned_false<T>(mut t: StructWithSeekMethod) {\n+    t.seek(SeekFrom::Start(0));\n+}\n+\n+// This should NOT trigger clippy warning because\n+// StructWithSeekMethod does not implement std::io::Seek;\n+fn seek_to_start_false_trait(t: &mut StructWithSeekTrait) {\n+    t.seek(SeekFrom::Start(0));\n+}\n+\n+// This should NOT trigger clippy warning because\n+// StructWithSeekMethod does not implement std::io::Seek;\n+fn seek_to_start_false_trait_owned<T>(mut t: StructWithSeekTrait) {\n+    t.seek(SeekFrom::Start(0));\n+}\n+\n+// This should NOT trigger clippy warning because\n+// StructWithSeekMethod does not implement std::io::Seek;\n+fn seek_to_start_false_trait_bound<T: MySeekTrait>(t: &mut T) {\n+    t.seek(SeekFrom::Start(0));\n+}\n+\n+// This should trigger clippy warning\n+fn seek_to_start<T: Seek>(t: &mut T) {\n+    t.seek(SeekFrom::Start(0));\n+}\n+\n+// This should trigger clippy warning\n+fn owned_seek_to_start<T: Seek>(mut t: T) {\n+    t.seek(SeekFrom::Start(0));\n+}\n+\n+// This should NOT trigger clippy warning because\n+// it does not seek to start\n+fn seek_to_5<T: Seek>(t: &mut T) {\n+    t.seek(SeekFrom::Start(5));\n+}\n+\n+// This should NOT trigger clippy warning because\n+// it does not seek to start\n+fn seek_to_end<T: Seek>(t: &mut T) {\n+    t.seek(SeekFrom::End(0));\n+}\n+\n+fn main() {\n+    let mut f = OpenOptions::new()\n+        .write(true)\n+        .read(true)\n+        .create(true)\n+        .open(\"foo.txt\")\n+        .unwrap();\n+\n+    let mut my_struct_trait = StructWithSeekTrait {};\n+    seek_to_start_false_trait_bound(&mut my_struct_trait);\n+\n+    let hello = \"Hello!\\n\";\n+    write!(f, \"{hello}\").unwrap();\n+    seek_to_5(&mut f);\n+    seek_to_end(&mut f);\n+    seek_to_start(&mut f);\n+\n+    let mut buf = String::new();\n+    f.read_to_string(&mut buf).unwrap();\n+\n+    assert_eq!(&buf, hello);\n+}"}, {"sha": "f985471ac0573318d7aa7f0a8317698974c3141a", "filename": "tests/ui/rewind_instead_of_seek_to_start.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8d6ce3177bd5d4d05723dec1cdd869effc926fc3/tests%2Fui%2Frewind_instead_of_seek_to_start.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d6ce3177bd5d4d05723dec1cdd869effc926fc3/tests%2Fui%2Frewind_instead_of_seek_to_start.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frewind_instead_of_seek_to_start.stderr?ref=8d6ce3177bd5d4d05723dec1cdd869effc926fc3", "patch": "@@ -0,0 +1,16 @@\n+error: used `seek` to go to the start of the stream\n+  --> $DIR/rewind_instead_of_seek_to_start.rs:53:7\n+   |\n+LL |     t.seek(SeekFrom::Start(0));\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `rewind()`\n+   |\n+   = note: `-D clippy::rewind-instead-of-seek-to-start` implied by `-D warnings`\n+\n+error: used `seek` to go to the start of the stream\n+  --> $DIR/rewind_instead_of_seek_to_start.rs:58:7\n+   |\n+LL |     t.seek(SeekFrom::Start(0));\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `rewind()`\n+\n+error: aborting due to 2 previous errors\n+"}]}