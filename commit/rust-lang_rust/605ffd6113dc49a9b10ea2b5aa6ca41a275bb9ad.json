{"sha": "605ffd6113dc49a9b10ea2b5aa6ca41a275bb9ad", "node_id": "C_kwDOAAsO6NoAKDYwNWZmZDYxMTNkYzQ5YTliMTBlYTJiNWFhNmNhNDFhMjc1YmI5YWQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-29T23:04:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-29T23:04:15Z"}, "message": "Rollup merge of #93441 - notriddle:notriddle/collect-crate-doc-links-very-early, r=petrochenkov\n\nrustdoc: load the set of in-scope traits for modules with no docstring\n\nFixes #93428\n\nThis fix is a response to a couple of special cases related to the `module_id`, which is eventually used for trait candidates:\n\n  * The module id is always set to the current crate, when checking `crate::`.\n\n    Normally, the set of in-scope traits would be set in `load_links_in_attrs`, but if there are no doc comments, then that loop will never run.\n\n  * the module id is set to the parent module, when resolving a module that is spelled like this:\n\n        // Notice how we use an outlined doc comment here!\n        // [`Test::my_fn`]\n        mod something {\n        }\n\n    As with the above problem with `crate::`, we need to make sure the module gets its traits in scope resolved, even if it has no doc comments of its own.", "tree": {"sha": "3cd698034f471c7dda9cb4e746684b6c41e17e64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cd698034f471c7dda9cb4e746684b6c41e17e64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/605ffd6113dc49a9b10ea2b5aa6ca41a275bb9ad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh9cfvCRBK7hj4Ov3rIwAAN4QIAF2IxXem81Zu3uIbWjvcyGMO\n0erPWKeb85et1/c8Mt/Bksv56YoeifgGctDwSduhn4e09o7gvGdMrYe1Y+ZwpT9T\nRIIlbZXb9ivcRdQZ+coOzIee1+0GCusthglrmHilb4w69Vje0CrlnCM7yB2OhOR3\nRI0h2BElrvFlStnm9Ukzp+ocjqFJuSLCgxyYiY7KqtMCG4uGY87NOcfH2SoF5p82\nw+Q+X0luKRIabiSusa2tHcvMvFUURcnGvOt1H4x2BuROYOlY/Bz0/9T6JRYzpTK5\nFxZPCC6cTPF4ktq4W9sBjH9+TlgL0SwUHFy8tM4yRtzscF+6LJk0hxtwW6VEqHk=\n=he1q\n-----END PGP SIGNATURE-----\n", "payload": "tree 3cd698034f471c7dda9cb4e746684b6c41e17e64\nparent 329753e24867a5dd8a3c0467e220ef28878d118c\nparent 3903ca197e55f209b2415e566b4b8f407f6fe899\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643497455 +0100\ncommitter GitHub <noreply@github.com> 1643497455 +0100\n\nRollup merge of #93441 - notriddle:notriddle/collect-crate-doc-links-very-early, r=petrochenkov\n\nrustdoc: load the set of in-scope traits for modules with no docstring\n\nFixes #93428\n\nThis fix is a response to a couple of special cases related to the `module_id`, which is eventually used for trait candidates:\n\n  * The module id is always set to the current crate, when checking `crate::`.\n\n    Normally, the set of in-scope traits would be set in `load_links_in_attrs`, but if there are no doc comments, then that loop will never run.\n\n  * the module id is set to the parent module, when resolving a module that is spelled like this:\n\n        // Notice how we use an outlined doc comment here!\n        // [`Test::my_fn`]\n        mod something {\n        }\n\n    As with the above problem with `crate::`, we need to make sure the module gets its traits in scope resolved, even if it has no doc comments of its own.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/605ffd6113dc49a9b10ea2b5aa6ca41a275bb9ad", "html_url": "https://github.com/rust-lang/rust/commit/605ffd6113dc49a9b10ea2b5aa6ca41a275bb9ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/605ffd6113dc49a9b10ea2b5aa6ca41a275bb9ad/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "329753e24867a5dd8a3c0467e220ef28878d118c", "url": "https://api.github.com/repos/rust-lang/rust/commits/329753e24867a5dd8a3c0467e220ef28878d118c", "html_url": "https://github.com/rust-lang/rust/commit/329753e24867a5dd8a3c0467e220ef28878d118c"}, {"sha": "3903ca197e55f209b2415e566b4b8f407f6fe899", "url": "https://api.github.com/repos/rust-lang/rust/commits/3903ca197e55f209b2415e566b4b8f407f6fe899", "html_url": "https://github.com/rust-lang/rust/commit/3903ca197e55f209b2415e566b4b8f407f6fe899"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "86662ebaaca215505d5baaddb3de1bd8b7a45306", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/605ffd6113dc49a9b10ea2b5aa6ca41a275bb9ad/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/605ffd6113dc49a9b10ea2b5aa6ca41a275bb9ad/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=605ffd6113dc49a9b10ea2b5aa6ca41a275bb9ad", "patch": "@@ -920,6 +920,7 @@ fn trait_assoc_to_impl_assoc_item<'tcx>(\n ///\n /// NOTE: this cannot be a query because more traits could be available when more crates are compiled!\n /// So it is not stable to serialize cross-crate.\n+#[instrument(level = \"debug\", skip(cx))]\n fn trait_impls_for<'a>(\n     cx: &mut DocContext<'a>,\n     ty: Ty<'a>,"}, {"sha": "edd4e9da66d99043010da3582f9a6163278b457d", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/605ffd6113dc49a9b10ea2b5aa6ca41a275bb9ad/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/605ffd6113dc49a9b10ea2b5aa6ca41a275bb9ad/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=605ffd6113dc49a9b10ea2b5aa6ca41a275bb9ad", "patch": "@@ -32,6 +32,11 @@ crate fn early_resolve_intra_doc_links(\n         all_trait_impls: Default::default(),\n     };\n \n+    // Because of the `crate::` prefix, any doc comment can reference\n+    // the crate root's set of in-scope traits. This line makes sure\n+    // it's available.\n+    loader.add_traits_in_scope(CRATE_DEF_ID.to_def_id());\n+\n     // Overridden `visit_item` below doesn't apply to the crate root,\n     // so we have to visit its attributes and reexports separately.\n     loader.load_links_in_attrs(&krate.attrs, krate.span);\n@@ -180,6 +185,11 @@ impl Visitor<'_> for IntraLinkCrateLoader<'_, '_> {\n         if let ItemKind::Mod(..) = item.kind {\n             let old_mod = mem::replace(&mut self.current_mod, self.resolver.local_def_id(item.id));\n \n+            // A module written with a outline doc comments will resolve traits relative\n+            // to the parent module. Make sure the parent module's traits-in-scope are\n+            // loaded, even if the module itself has no doc comments.\n+            self.add_traits_in_parent_scope(self.current_mod.to_def_id());\n+\n             self.load_links_in_attrs(&item.attrs, item.span);\n             self.process_module_children_or_reexports(self.current_mod.to_def_id());\n             visit::walk_item(self, item);"}, {"sha": "bacbcabfc6009a6cf76df43577b970ff8fe7bd12", "filename": "src/test/rustdoc/intra-doc/crate-relative.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/605ffd6113dc49a9b10ea2b5aa6ca41a275bb9ad/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcrate-relative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/605ffd6113dc49a9b10ea2b5aa6ca41a275bb9ad/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcrate-relative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcrate-relative.rs?ref=605ffd6113dc49a9b10ea2b5aa6ca41a275bb9ad", "patch": "@@ -0,0 +1,13 @@\n+pub struct Test<'a> {\n+    data: &'a (),\n+}\n+\n+impl<'a> Test<'a> {\n+    pub fn do_test(&self) {}\n+}\n+\n+// @has crate_relative/demo/index.html\n+// @has - '//a/@href' '../struct.Test.html#method.do_test'\n+pub mod demo {\n+    //! [`crate::Test::do_test`]\n+}"}, {"sha": "49d3399b972f5c83a8815cf7372cff82fe5d9c9e", "filename": "src/test/rustdoc/intra-doc/mod-relative.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/605ffd6113dc49a9b10ea2b5aa6ca41a275bb9ad/src%2Ftest%2Frustdoc%2Fintra-doc%2Fmod-relative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/605ffd6113dc49a9b10ea2b5aa6ca41a275bb9ad/src%2Ftest%2Frustdoc%2Fintra-doc%2Fmod-relative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fmod-relative.rs?ref=605ffd6113dc49a9b10ea2b5aa6ca41a275bb9ad", "patch": "@@ -0,0 +1,17 @@\n+pub mod wrapper {\n+\n+    pub struct Test<'a> {\n+        data: &'a (),\n+    }\n+\n+    impl<'a> Test<'a> {\n+        pub fn do_test(&self) {}\n+    }\n+\n+    // @has mod_relative/wrapper/demo/index.html\n+    // @has - '//a/@href' '../struct.Test.html#method.do_test'\n+    /// [`Test::do_test`]\n+    pub mod demo {\n+    }\n+\n+}"}]}