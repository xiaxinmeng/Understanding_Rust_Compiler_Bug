{"sha": "6976494781f810193535eebc73e5bda73ba9eddf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NzY0OTQ3ODFmODEwMTkzNTM1ZWViYzczZTViZGE3M2JhOWVkZGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-07T10:57:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-07T10:57:49Z"}, "message": "Add comparisons guideline to style", "tree": {"sha": "ad1ae69a1161c7afd9794faa5b586f90b66fdf99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad1ae69a1161c7afd9794faa5b586f90b66fdf99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6976494781f810193535eebc73e5bda73ba9eddf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6976494781f810193535eebc73e5bda73ba9eddf", "html_url": "https://github.com/rust-lang/rust/commit/6976494781f810193535eebc73e5bda73ba9eddf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6976494781f810193535eebc73e5bda73ba9eddf/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdf2f6226b4ce58a2407d7d3fa3b700f6e76e60a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdf2f6226b4ce58a2407d7d3fa3b700f6e76e60a", "html_url": "https://github.com/rust-lang/rust/commit/fdf2f6226b4ce58a2407d7d3fa3b700f6e76e60a"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "cc06d41221e8d9c0c0236c1db4792d01a35ffd0a", "filename": "docs/dev/style.md", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6976494781f810193535eebc73e5bda73ba9eddf/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/6976494781f810193535eebc73e5bda73ba9eddf/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=6976494781f810193535eebc73e5bda73ba9eddf", "patch": "@@ -144,6 +144,20 @@ fn foo() {\n In the \"Not as good\" version, the precondition that `1` is a valid char boundary is checked in `is_string_literal` and used in `foo`.\n In the \"Good\" version, the precondition check and usage are checked in the same block, and then encoded in the types.\n \n+When checking a boolean precondition, prefer `if !invariant` to `if negated_invariant`:\n+\n+```rust\n+// Good\n+if !(idx < len) {\n+    return None;\n+}\n+\n+// Not as good\n+if idx >= len {\n+    return None;\n+}\n+```\n+\n ## Getters & Setters\n \n If a field can have any value without breaking invariants, make the field public.\n@@ -382,6 +396,19 @@ fn foo() -> Option<Bar> {\n }\n ```\n \n+## Comparisons\n+\n+Use `<`/`<=`, avoid `>`/`>=`.\n+Less-then comparisons are more intuitive, they correspond spatially to [real line](https://en.wikipedia.org/wiki/Real_line)\n+\n+```rs\n+// Good\n+assert!(lo <= x && x <= hi);\n+\n+// Not as good\n+assert!(x >= lo && x <= hi>);\n+```\n+\n ## Documentation\n \n For `.md` and `.adoc` files, prefer a sentence-per-line format, don't wrap lines."}]}