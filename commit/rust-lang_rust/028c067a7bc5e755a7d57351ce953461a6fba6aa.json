{"sha": "028c067a7bc5e755a7d57351ce953461a6fba6aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyOGMwNjdhN2JjNWU3NTVhN2Q1NzM1MWNlOTUzNDYxYTZmYmE2YWE=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-04-06T19:12:08Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-04-06T19:12:08Z"}, "message": "Rollup merge of #32724 - sanxiyn:outdated-comment, r=dotdash\n\nRemove outdated comment\n\nThe corresponding code was removed in #31824. Also remove code duplication and rename the function.", "tree": {"sha": "36e1a29c89ab0f60aa6421277a8c8e37df7bef27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36e1a29c89ab0f60aa6421277a8c8e37df7bef27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/028c067a7bc5e755a7d57351ce953461a6fba6aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/028c067a7bc5e755a7d57351ce953461a6fba6aa", "html_url": "https://github.com/rust-lang/rust/commit/028c067a7bc5e755a7d57351ce953461a6fba6aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/028c067a7bc5e755a7d57351ce953461a6fba6aa/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7154b39ee08bebf18b1531a18ac2c457636052d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7154b39ee08bebf18b1531a18ac2c457636052d", "html_url": "https://github.com/rust-lang/rust/commit/f7154b39ee08bebf18b1531a18ac2c457636052d"}, {"sha": "a09a3acbbd31fe3ea1c11938b6958d87f6096810", "url": "https://api.github.com/repos/rust-lang/rust/commits/a09a3acbbd31fe3ea1c11938b6958d87f6096810", "html_url": "https://github.com/rust-lang/rust/commit/a09a3acbbd31fe3ea1c11938b6958d87f6096810"}], "stats": {"total": 25, "additions": 5, "deletions": 20}, "files": [{"sha": "9135b656736a25672d97ef4c8d30a2db6f8846ce", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/028c067a7bc5e755a7d57351ce953461a6fba6aa/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/028c067a7bc5e755a7d57351ce953461a6fba6aa/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=028c067a7bc5e755a7d57351ce953461a6fba6aa", "patch": "@@ -51,16 +51,8 @@ impl<'a, 'b, 'tcx:'b> DerefMut for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n \n impl<'a, 'b, 'tcx> UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n     // We have information about whether `use` (import) directives are actually\n-    // used now. If an import is not used at all, we signal a lint error. If an\n-    // import is only used for a single namespace, we remove the other namespace\n-    // from the recorded privacy information. That means in privacy.rs, we will\n-    // only check imports and namespaces which are used. In particular, this\n-    // means that if an import could name either a public or private item, we\n-    // will check the correct thing, dependent on how the import is used.\n-    fn finalize_import(&mut self, id: ast::NodeId, span: Span) {\n-        debug!(\"finalizing import uses for {:?}\",\n-               self.session.codemap().span_to_snippet(span));\n-\n+    // used now. If an import is not used at all, we signal a lint error.\n+    fn check_import(&mut self, id: ast::NodeId, span: Span) {\n         if !self.used_imports.contains(&(id, TypeNS)) &&\n            !self.used_imports.contains(&(id, ValueNS)) {\n             self.session.add_lint(lint::builtin::UNUSED_IMPORTS,\n@@ -95,23 +87,16 @@ impl<'a, 'b, 'v, 'tcx> Visitor<'v> for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n             hir::ItemUse(ref p) => {\n                 match p.node {\n                     ViewPathSimple(_, _) => {\n-                        self.finalize_import(item.id, p.span)\n+                        self.check_import(item.id, p.span)\n                     }\n \n                     ViewPathList(_, ref list) => {\n                         for i in list {\n-                            self.finalize_import(i.node.id(), i.span);\n+                            self.check_import(i.node.id(), i.span);\n                         }\n                     }\n                     ViewPathGlob(_) => {\n-                        if !self.used_imports.contains(&(item.id, TypeNS)) &&\n-                           !self.used_imports.contains(&(item.id, ValueNS)) {\n-                            self.session\n-                                .add_lint(lint::builtin::UNUSED_IMPORTS,\n-                                          item.id,\n-                                          p.span,\n-                                          \"unused import\".to_string());\n-                        }\n+                        self.check_import(item.id, p.span)\n                     }\n                 }\n             }"}]}