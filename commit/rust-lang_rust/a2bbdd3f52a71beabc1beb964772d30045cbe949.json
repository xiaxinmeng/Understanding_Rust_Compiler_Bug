{"sha": "a2bbdd3f52a71beabc1beb964772d30045cbe949", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyYmJkZDNmNTJhNzFiZWFiYzFiZWI5NjQ3NzJkMzAwNDVjYmU5NDk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-26T00:22:14Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-31T04:23:34Z"}, "message": "rt: Remove upcall_shared_malloc/free/realloc", "tree": {"sha": "ca1f96956b6e304ba31456b9c5ac085dafe3b06b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca1f96956b6e304ba31456b9c5ac085dafe3b06b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2bbdd3f52a71beabc1beb964772d30045cbe949", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2bbdd3f52a71beabc1beb964772d30045cbe949", "html_url": "https://github.com/rust-lang/rust/commit/a2bbdd3f52a71beabc1beb964772d30045cbe949", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2bbdd3f52a71beabc1beb964772d30045cbe949/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80dc2e11a12c0a77447b74ef3fea3eb3ba44faaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/80dc2e11a12c0a77447b74ef3fea3eb3ba44faaa", "html_url": "https://github.com/rust-lang/rust/commit/80dc2e11a12c0a77447b74ef3fea3eb3ba44faaa"}], "stats": {"total": 121, "additions": 6, "deletions": 115}, "files": [{"sha": "5299de0ed34df405db122a6baeea788bed7903b8", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a2bbdd3f52a71beabc1beb964772d30045cbe949/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a2bbdd3f52a71beabc1beb964772d30045cbe949/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=a2bbdd3f52a71beabc1beb964772d30045cbe949", "patch": "@@ -7,7 +7,6 @@\n \n #include \"rust_task.h\"\n #include \"rust_cc.h\"\n-#include \"rust_upcall.h\"\n #include \"rust_env.h\"\n #include \"rust_port.h\"\n \n@@ -130,6 +129,8 @@ cleanup_task(cleanup_args *args) {\n     }\n }\n \n+extern \"C\" CDECL void upcall_exchange_free(void *ptr);\n+\n // This runs on the Rust stack\n void task_start_wrapper(spawn_args *a)\n {\n@@ -161,7 +162,7 @@ void task_start_wrapper(spawn_args *a)\n         // free the environment (which should be a unique closure).\n         const type_desc *td = env->td;\n         td->drop_glue(NULL, NULL, td->first_param, box_body(env));\n-        upcall_shared_free(env);\n+        upcall_exchange_free(env);\n     }\n \n     // The cleanup work needs lots of stack"}, {"sha": "01606b37903f338372ab3e21287f4f8973fc4729", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/a2bbdd3f52a71beabc1beb964772d30045cbe949/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a2bbdd3f52a71beabc1beb964772d30045cbe949/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=a2bbdd3f52a71beabc1beb964772d30045cbe949", "patch": "@@ -318,81 +318,6 @@ upcall_validate_box(rust_opaque_box* ptr) {\n     }\n }\n \n-/**********************************************************************\n- * Allocate an object in the exchange heap.\n- */\n-\n-struct s_shared_malloc_args {\n-    uintptr_t retval;\n-    size_t nbytes;\n-};\n-\n-extern \"C\" CDECL void\n-upcall_s_shared_malloc(s_shared_malloc_args *args) {\n-    rust_task *task = rust_get_current_task();\n-    LOG_UPCALL_ENTRY(task);\n-\n-    LOG(task, mem, \"upcall shared_malloc(%\" PRIdPTR \")\", args->nbytes);\n-    void *p = task->kernel->malloc(args->nbytes, \"shared malloc\");\n-    memset(p, '\\0', args->nbytes);\n-    LOG(task, mem, \"upcall shared_malloc(%\" PRIdPTR \") = 0x%\" PRIxPTR,\n-        args->nbytes, (uintptr_t)p);\n-    args->retval = (uintptr_t) p;\n-}\n-\n-extern \"C\" CDECL uintptr_t\n-upcall_shared_malloc(size_t nbytes) {\n-    s_shared_malloc_args args = {0, nbytes};\n-    UPCALL_SWITCH_STACK(&args, upcall_s_shared_malloc);\n-    return args.retval;\n-}\n-\n-/**********************************************************************\n- * Called whenever an object in the exchange heap is freed.\n- */\n-\n-struct s_shared_free_args {\n-    void *ptr;\n-};\n-\n-extern \"C\" CDECL void\n-upcall_s_shared_free(s_shared_free_args *args) {\n-    rust_task *task = rust_get_current_task();\n-    LOG_UPCALL_ENTRY(task);\n-\n-    rust_sched_loop *sched_loop = task->sched_loop;\n-    DLOG(sched_loop, mem,\n-             \"upcall shared_free(0x%\" PRIxPTR\")\",\n-             (uintptr_t)args->ptr);\n-    task->kernel->free(args->ptr);\n-}\n-\n-extern \"C\" CDECL void\n-upcall_shared_free(void* ptr) {\n-    s_shared_free_args args = {ptr};\n-    UPCALL_SWITCH_STACK(&args, upcall_s_shared_free);\n-}\n-\n-struct s_shared_realloc_args {\n-    void *retval;\n-    void *ptr;\n-    size_t size;\n-};\n-\n-extern \"C\" CDECL void\n-upcall_s_shared_realloc(s_shared_realloc_args *args) {\n-    rust_task *task = rust_get_current_task();\n-    LOG_UPCALL_ENTRY(task);\n-    args->retval = task->kernel->realloc(args->ptr, args->size);\n-}\n-\n-extern \"C\" CDECL void *\n-upcall_shared_realloc(void *ptr, size_t size) {\n-    s_shared_realloc_args args = {NULL, ptr, size};\n-    UPCALL_SWITCH_STACK(&args, upcall_s_shared_realloc);\n-    return args.retval;\n-}\n-\n /**********************************************************************/\n \n struct s_str_new_uniq_args {"}, {"sha": "b2b2db20674c362a2d1d612862dd5daa1d995bcb", "filename": "src/rt/rust_upcall.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a2bbdd3f52a71beabc1beb964772d30045cbe949/src%2Frt%2Frust_upcall.h", "raw_url": "https://github.com/rust-lang/rust/raw/a2bbdd3f52a71beabc1beb964772d30045cbe949/src%2Frt%2Frust_upcall.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.h?ref=a2bbdd3f52a71beabc1beb964772d30045cbe949", "patch": "@@ -1,9 +1,4 @@\n-\n #ifndef RUST_UPCALL_H\n #define RUST_UPCALL_H\n \n-// Upcalls used from C code on occasion:\n-\n-extern \"C\" CDECL void upcall_shared_free(void* ptr);\n-\n #endif"}, {"sha": "8a627795850f2ef60a9b1944ec26c23a4227c199", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2bbdd3f52a71beabc1beb964772d30045cbe949/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/a2bbdd3f52a71beabc1beb964772d30045cbe949/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=a2bbdd3f52a71beabc1beb964772d30045cbe949", "patch": "@@ -74,10 +74,6 @@ upcall_validate_box\n upcall_log_type\n upcall_malloc\n upcall_rust_personality\n-upcall_s_shared_malloc\n-upcall_shared_malloc\n-upcall_shared_free\n-upcall_shared_realloc\n upcall_vec_grow\n upcall_str_new\n upcall_str_new_uniq"}, {"sha": "33fec5fab03edd20fb678d613f86f77776b4c347", "filename": "src/rustc/back/upcall.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a2bbdd3f52a71beabc1beb964772d30045cbe949/src%2Frustc%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2bbdd3f52a71beabc1beb964772d30045cbe949/src%2Frustc%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Fupcall.rs?ref=a2bbdd3f52a71beabc1beb964772d30045cbe949", "patch": "@@ -16,9 +16,6 @@ type upcalls =\n      exchange_malloc_dyn: ValueRef,\n      exchange_free: ValueRef,\n      validate_box: ValueRef,\n-     shared_malloc: ValueRef,\n-     shared_free: ValueRef,\n-     shared_realloc: ValueRef,\n      mark: ValueRef,\n      vec_grow: ValueRef,\n      str_new_uniq: ValueRef,\n@@ -75,13 +72,6 @@ fn declare_upcalls(targ_cfg: @session::config,\n               nothrow(dv(\"exchange_free\", [T_ptr(T_i8())])),\n           validate_box:\n               nothrow(dv(\"validate_box\", [T_ptr(T_i8())])),\n-          shared_malloc:\n-              nothrow(d(\"shared_malloc\", [size_t], T_ptr(T_i8()))),\n-          shared_free:\n-              nothrow(dv(\"shared_free\", [T_ptr(T_i8())])),\n-          shared_realloc:\n-              nothrow(d(\"shared_realloc\", [T_ptr(T_i8()), size_t],\n-                        T_ptr(T_i8()))),\n           mark:\n               d(\"mark\", [T_ptr(T_i8())], int_t),\n           vec_grow:"}, {"sha": "23884dd0375455dcec19fd70a9de47fff3161b9f", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a2bbdd3f52a71beabc1beb964772d30045cbe949/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2bbdd3f52a71beabc1beb964772d30045cbe949/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=a2bbdd3f52a71beabc1beb964772d30045cbe949", "patch": "@@ -236,13 +236,6 @@ fn trans_free(cx: block, v: ValueRef) -> block {\n     cx\n }\n \n-fn trans_shared_free(cx: block, v: ValueRef) -> block {\n-    let _icx = cx.insn_ctxt(\"trans_shared_free\");\n-    Call(cx, cx.ccx().upcalls.shared_free,\n-         [PointerCast(cx, v, T_ptr(T_i8()))]);\n-    ret cx;\n-}\n-\n fn trans_unique_free(cx: block, v: ValueRef) -> block {\n     let _icx = cx.insn_ctxt(\"trans_shared_free\");\n     Call(cx, cx.ccx().upcalls.exchange_free,\n@@ -333,15 +326,6 @@ fn GEP_enum(bcx: block, llblobptr: ValueRef, enum_id: ast::def_id,\n     GEPi(bcx, typed_blobptr, [0u, ix])\n }\n \n-// trans_shared_malloc: expects a type indicating which pointer type we want\n-// and a size indicating how much space we want malloc'd.\n-fn shared_malloc(cx: block, llptr_ty: TypeRef, llsize: ValueRef)\n-   -> ValueRef {\n-    let _icx = cx.insn_ctxt(\"opaque_shared_malloc\");\n-    let rval = Call(cx, cx.ccx().upcalls.shared_malloc, [llsize]);\n-    PointerCast(cx, rval, llptr_ty)\n-}\n-\n // Returns a pointer to the body for the box. The box may be an opaque\n // box. The result will be casted to the type of body_t, if it is statically\n // known."}, {"sha": "194a1993ce354c449bd21e51aabe13cf52369d6e", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2bbdd3f52a71beabc1beb964772d30045cbe949/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2bbdd3f52a71beabc1beb964772d30045cbe949/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=a2bbdd3f52a71beabc1beb964772d30045cbe949", "patch": "@@ -271,7 +271,7 @@ fn add_clean_temp_mem(cx: block, val: ValueRef, ty: ty::t) {\n     }\n }\n fn add_clean_free(cx: block, ptr: ValueRef, shared: bool) {\n-    let free_fn = if shared { bind base::trans_shared_free(_, ptr) }\n+    let free_fn = if shared { bind base::trans_unique_free(_, ptr) }\n                   else { bind base::trans_free(_, ptr) };\n     in_scope_cx(cx) {|info|\n         info.cleanups += [clean_temp(ptr, free_fn,"}, {"sha": "e37806dccf8f1aca71d4b9bef77c5d162b21b605", "filename": "src/rustc/middle/trans/tvec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2bbdd3f52a71beabc1beb964772d30045cbe949/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2bbdd3f52a71beabc1beb964772d30045cbe949/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=a2bbdd3f52a71beabc1beb964772d30045cbe949", "patch": "@@ -2,7 +2,7 @@ import syntax::ast;\n import driver::session::session;\n import lib::llvm::{ValueRef, TypeRef};\n import back::abi;\n-import base::{call_memmove, shared_malloc,\n+import base::{call_memmove,\n                INIT, copy_val, load_if_immediate, get_tydesc,\n                sub_block, do_spill_noroot,\n                dest, bcx_icx};\n@@ -115,7 +115,7 @@ fn make_free_glue(bcx: block, vptr: ValueRef, vec_ty: ty::t) ->\n         let bcx = if ty::type_needs_drop(tcx, unit_ty) {\n             iter_vec(bcx, vptr, vec_ty, base::drop_ty)\n         } else { bcx };\n-        base::trans_shared_free(bcx, vptr)\n+        base::trans_unique_free(bcx, vptr)\n     }\n }\n "}]}