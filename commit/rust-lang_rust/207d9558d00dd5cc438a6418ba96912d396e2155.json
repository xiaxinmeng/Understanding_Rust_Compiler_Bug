{"sha": "207d9558d00dd5cc438a6418ba96912d396e2155", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwN2Q5NTU4ZDAwZGQ1Y2M0MzhhNjQxOGJhOTY5MTJkMzk2ZTIxNTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-17T15:49:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-17T15:49:22Z"}, "message": "Auto merge of #89047 - GuillaumeGomez:rollup-29gmr02, r=GuillaumeGomez\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #86422 (Emit clearer diagnostics for parens around `for` loop heads)\n - #87460 (Point to closure when emitting 'cannot move out' for captured variable)\n - #87566 (Recover invalid assoc type bounds using `==`)\n - #88666 (Improve build command for compiler docs)\n - #88899 (Do not issue E0071 if a type error has already been reported)\n - #88949 (Fix handling of `hir::GenericArg::Infer` in `wrong_number_of_generic_args.rs`)\n - #88953 (Add chown functions to std::os::unix::fs to change the owner and group of files)\n - #88954 (Allow `panic!(\"{}\", computed_str)` in const fn.)\n - #88964 (Add rustdoc version into the help popup)\n - #89012 (Suggest removing `#![feature]` for library features that have been stabilized)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a1c61724745327620f23e9ce2b4ad491525e7d8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1c61724745327620f23e9ce2b4ad491525e7d8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/207d9558d00dd5cc438a6418ba96912d396e2155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/207d9558d00dd5cc438a6418ba96912d396e2155", "html_url": "https://github.com/rust-lang/rust/commit/207d9558d00dd5cc438a6418ba96912d396e2155", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/207d9558d00dd5cc438a6418ba96912d396e2155/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0c38af27cb5f6f961809601b717d6afc3b190ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0c38af27cb5f6f961809601b717d6afc3b190ee", "html_url": "https://github.com/rust-lang/rust/commit/e0c38af27cb5f6f961809601b717d6afc3b190ee"}, {"sha": "101a88f95064b21a3de26f2d3e932408fa9e1c97", "url": "https://api.github.com/repos/rust-lang/rust/commits/101a88f95064b21a3de26f2d3e932408fa9e1c97", "html_url": "https://github.com/rust-lang/rust/commit/101a88f95064b21a3de26f2d3e932408fa9e1c97"}], "stats": {"total": 1293, "additions": 963, "deletions": 330}, "files": [{"sha": "06e9d9ed329331e3d18e72d77ba7c45f2baea978", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -702,10 +702,16 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n }\n \n fn maybe_stage_features(sess: &Session, krate: &ast::Crate) {\n+    // checks if `#![feature]` has been used to enable any lang feature\n+    // does not check the same for lib features unless there's at least one\n+    // declared lang feature\n     use rustc_errors::Applicability;\n \n     if !sess.opts.unstable_features.is_nightly_build() {\n         let lang_features = &sess.features_untracked().declared_lang_features;\n+        if lang_features.len() == 0 {\n+            return;\n+        }\n         for attr in krate.attrs.iter().filter(|attr| attr.has_name(sym::feature)) {\n             let mut err = struct_span_err!(\n                 sess.parse_sess.span_diagnostic,"}, {"sha": "b23ce281bef24de4ed1b6ef045744f2ff25bcb95", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -336,15 +336,15 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 if def_id.as_local() == Some(self.mir_def_id()) && upvar_field.is_some() =>\n             {\n                 let closure_kind_ty = closure_substs.as_closure().kind_ty();\n-                let closure_kind = closure_kind_ty.to_opt_closure_kind();\n-                let capture_description = match closure_kind {\n-                    Some(ty::ClosureKind::Fn) => \"captured variable in an `Fn` closure\",\n-                    Some(ty::ClosureKind::FnMut) => \"captured variable in an `FnMut` closure\",\n+                let closure_kind = match closure_kind_ty.to_opt_closure_kind() {\n+                    Some(kind @ (ty::ClosureKind::Fn | ty::ClosureKind::FnMut)) => kind,\n                     Some(ty::ClosureKind::FnOnce) => {\n                         bug!(\"closure kind does not match first argument type\")\n                     }\n                     None => bug!(\"closure kind not inferred by borrowck\"),\n                 };\n+                let capture_description =\n+                    format!(\"captured variable in an `{}` closure\", closure_kind);\n \n                 let upvar = &self.upvars[upvar_field.unwrap().index()];\n                 let upvar_hir_id = upvar.place.get_root_variable();\n@@ -368,6 +368,10 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 let mut diag = self.cannot_move_out_of(span, &place_description);\n \n                 diag.span_label(upvar_span, \"captured outer variable\");\n+                diag.span_label(\n+                    self.body.span,\n+                    format!(\"captured by this `{}` closure\", closure_kind),\n+                );\n \n                 diag\n             }"}, {"sha": "ae20f6f97b2124ad6099d4c5a1b2a114ab3e26fc", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -36,12 +36,17 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n         let def_id = instance.def_id();\n         if Some(def_id) == self.tcx.lang_items().panic_fn()\n             || Some(def_id) == self.tcx.lang_items().panic_str()\n+            || Some(def_id) == self.tcx.lang_items().panic_display()\n             || Some(def_id) == self.tcx.lang_items().begin_panic_fn()\n         {\n-            // &str\n+            // &str or &&str\n             assert!(args.len() == 1);\n \n-            let msg_place = self.deref_operand(&args[0])?;\n+            let mut msg_place = self.deref_operand(&args[0])?;\n+            while msg_place.layout.ty.is_ref() {\n+                msg_place = self.deref_operand(&msg_place.into())?;\n+            }\n+\n             let msg = Symbol::intern(self.read_str(&msg_place)?);\n             let span = self.find_closest_untracked_caller_location();\n             let (file, line, col) = self.location_triple_for_span(span);"}, {"sha": "0e5a896a8f18ba332cdc4490e8a380c7ed65a5c2", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -888,6 +888,10 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                 if is_lang_panic_fn(tcx, callee) {\n                     self.check_op(ops::Panic);\n \n+                    // `begin_panic` and `panic_display` are generic functions that accept\n+                    // types other than str. Check to enforce that only str can be used in\n+                    // const-eval.\n+\n                     // const-eval of the `begin_panic` fn assumes the argument is `&str`\n                     if Some(callee) == tcx.lang_items().begin_panic_fn() {\n                         match args[0].ty(&self.ccx.body.local_decls, tcx).kind() {\n@@ -896,6 +900,15 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                         }\n                     }\n \n+                    // const-eval of the `panic_display` fn assumes the argument is `&&str`\n+                    if Some(callee) == tcx.lang_items().panic_display() {\n+                        match args[0].ty(&self.ccx.body.local_decls, tcx).kind() {\n+                            ty::Ref(_, ty, _) if matches!(ty.kind(), ty::Ref(_, ty, _) if ty.is_str()) =>\n+                                {}\n+                            _ => self.check_op(ops::PanicNonStr),\n+                        }\n+                    }\n+\n                     return;\n                 }\n "}, {"sha": "d1fd3ceaa589a4e112d672cfbe3dea0ec4042ceb", "filename": "compiler/rustc_const_eval/src/transform/check_consts/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -79,6 +79,7 @@ pub fn is_lang_panic_fn(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n     // Keep in sync with what that function handles!\n     Some(def_id) == tcx.lang_items().panic_fn()\n         || Some(def_id) == tcx.lang_items().panic_str()\n+        || Some(def_id) == tcx.lang_items().panic_display()\n         || Some(def_id) == tcx.lang_items().begin_panic_fn()\n         || Some(def_id) == tcx.lang_items().panic_fmt()\n         || Some(def_id) == tcx.lang_items().begin_panic_fmt()"}, {"sha": "a6d6d19762b58dde38260fbbfd5842a6a95d012c", "filename": "compiler/rustc_error_codes/src/error_codes/E0071.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0071.md", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0071.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0071.md?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -15,13 +15,13 @@ form of initializer was used.\n For example, the code above can be fixed to:\n \n ```\n-enum Foo {\n-    FirstValue(i32)\n-}\n+type U32 = u32;\n+let t: U32 = 4;\n+```\n \n-fn main() {\n-    let u = Foo::FirstValue(0i32);\n+or:\n \n-    let t = 4;\n-}\n+```\n+struct U32 { value: u32 }\n+let t = U32 { value: 4 };\n ```"}, {"sha": "d69a247054026f9a403ecbd9851d8f0416e15fff", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -283,6 +283,7 @@ language_item_table! {\n     // a weak lang item, but do not have it defined.\n     Panic,                   sym::panic,               panic_fn,                   Target::Fn,             GenericRequirement::None;\n     PanicFmt,                sym::panic_fmt,           panic_fmt,                  Target::Fn,             GenericRequirement::None;\n+    PanicDisplay,            sym::panic_display,       panic_display,              Target::Fn,             GenericRequirement::None;\n     PanicStr,                sym::panic_str,           panic_str,                  Target::Fn,             GenericRequirement::None;\n     ConstPanicFmt,           sym::const_panic_fmt,     const_panic_fmt,            Target::Fn,             GenericRequirement::None;\n     PanicBoundsCheck,        sym::panic_bounds_check,  panic_bounds_check_fn,      Target::Fn,             GenericRequirement::None;"}, {"sha": "708df5e46d4e22ef94dca8c3bdd49f61a8f53800", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -1334,30 +1334,25 @@ impl<'a> Parser<'a> {\n     pub(super) fn recover_parens_around_for_head(\n         &mut self,\n         pat: P<Pat>,\n-        expr: &Expr,\n         begin_paren: Option<Span>,\n     ) -> P<Pat> {\n         match (&self.token.kind, begin_paren) {\n             (token::CloseDelim(token::Paren), Some(begin_par_sp)) => {\n                 self.bump();\n \n-                let pat_str = self\n-                    // Remove the `(` from the span of the pattern:\n-                    .span_to_snippet(pat.span.trim_start(begin_par_sp).unwrap())\n-                    .unwrap_or_else(|_| pprust::pat_to_string(&pat));\n-\n-                self.struct_span_err(self.prev_token.span, \"unexpected closing `)`\")\n-                    .span_label(begin_par_sp, \"opening `(`\")\n-                    .span_suggestion(\n-                        begin_par_sp.to(self.prev_token.span),\n-                        \"remove parenthesis in `for` loop\",\n-                        format!(\"{} in {}\", pat_str, pprust::expr_to_string(&expr)),\n-                        // With e.g. `for (x) in y)` this would replace `(x) in y)`\n-                        // with `x) in y)` which is syntactically invalid.\n-                        // However, this is prevented before we get here.\n-                        Applicability::MachineApplicable,\n-                    )\n-                    .emit();\n+                self.struct_span_err(\n+                    MultiSpan::from_spans(vec![begin_par_sp, self.prev_token.span]),\n+                    \"unexpected parenthesis surrounding `for` loop head\",\n+                )\n+                .multipart_suggestion(\n+                    \"remove parenthesis in `for` loop\",\n+                    vec![(begin_par_sp, String::new()), (self.prev_token.span, String::new())],\n+                    // With e.g. `for (x) in y)` this would replace `(x) in y)`\n+                    // with `x) in y)` which is syntactically invalid.\n+                    // However, this is prevented before we get here.\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n \n                 // Unwrap `(pat)` into `pat` to avoid the `unused_parens` lint.\n                 pat.and_then(|pat| match pat.kind {\n@@ -1955,7 +1950,19 @@ impl<'a> Parser<'a> {\n         }\n         match self.parse_expr_res(Restrictions::CONST_EXPR, None) {\n             Ok(expr) => {\n-                if token::Comma == self.token.kind || self.token.kind.should_end_const_arg() {\n+                // Find a mistake like `MyTrait<Assoc == S::Assoc>`.\n+                if token::EqEq == snapshot.token.kind {\n+                    err.span_suggestion(\n+                        snapshot.token.span,\n+                        \"if you meant to use an associated type binding, replace `==` with `=`\",\n+                        \"=\".to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                    let value = self.mk_expr_err(start.to(expr.span));\n+                    err.emit();\n+                    return Ok(GenericArg::Const(AnonConst { id: ast::DUMMY_NODE_ID, value }));\n+                } else if token::Comma == self.token.kind || self.token.kind.should_end_const_arg()\n+                {\n                     // Avoid the following output by checking that we consumed a full const arg:\n                     // help: expressions must be enclosed in braces to be used as const generic\n                     //       arguments"}, {"sha": "d8f9fc9179e890e9a6a012e7a81f16577184882c", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -2042,7 +2042,7 @@ impl<'a> Parser<'a> {\n         self.check_for_for_in_in_typo(self.prev_token.span);\n         let expr = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n \n-        let pat = self.recover_parens_around_for_head(pat, &expr, begin_paren);\n+        let pat = self.recover_parens_around_for_head(pat, begin_paren);\n \n         let (iattrs, loop_block) = self.parse_inner_attrs_and_block()?;\n         attrs.extend(iattrs);"}, {"sha": "d7c354aeb490f6accc78a15593b84410dc3655f5", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -929,6 +929,16 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n     let declared_lib_features = &tcx.features().declared_lib_features;\n     let mut remaining_lib_features = FxHashMap::default();\n     for (feature, span) in declared_lib_features {\n+        if !tcx.sess.opts.unstable_features.is_nightly_build() {\n+            struct_span_err!(\n+                tcx.sess,\n+                *span,\n+                E0554,\n+                \"`#![feature]` may not be used on the {} release channel\",\n+                env!(\"CFG_RELEASE_CHANNEL\")\n+            )\n+            .emit();\n+        }\n         if remaining_lib_features.contains_key(&feature) {\n             // Warn if the user enables a lib feature multiple times.\n             duplicate_feature_err(tcx.sess, *span, *feature);"}, {"sha": "2dff03a9c5566bcb66fd921d22caa54de66d4027", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -923,6 +923,7 @@ symbols! {\n         panic_2021,\n         panic_abort,\n         panic_bounds_check,\n+        panic_display,\n         panic_fmt,\n         panic_handler,\n         panic_impl,"}, {"sha": "551522334aa00a7d9d328bdeb7a361c0f0e36854", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -532,15 +532,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             Some((variant, ty))\n         } else {\n-            struct_span_err!(\n-                self.tcx.sess,\n-                path_span,\n-                E0071,\n-                \"expected struct, variant or union type, found {}\",\n-                ty.sort_string(self.tcx)\n-            )\n-            .span_label(path_span, \"not a struct\")\n-            .emit();\n+            match ty.kind() {\n+                ty::Error(_) => {\n+                    // E0071 might be caused by a spelling error, which will have\n+                    // already caused an error message and probably a suggestion\n+                    // elsewhere. Refrain from emitting more unhelpful errors here\n+                    // (issue #88844).\n+                }\n+                _ => {\n+                    struct_span_err!(\n+                        self.tcx.sess,\n+                        path_span,\n+                        E0071,\n+                        \"expected struct, variant or union type, found {}\",\n+                        ty.sort_string(self.tcx)\n+                    )\n+                    .span_label(path_span, \"not a struct\")\n+                    .emit();\n+                }\n+            }\n             None\n         }\n     }"}, {"sha": "7e69ad21d034326a9c1fac72b80946e96a0c6fe8", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -136,10 +136,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n             AngleBrackets::Missing => 0,\n             // Only lifetime arguments can be implied\n             AngleBrackets::Implied => self.gen_args.args.len(),\n-            AngleBrackets::Available => self.gen_args.args.iter().fold(0, |acc, arg| match arg {\n-                hir::GenericArg::Lifetime(_) => acc + 1,\n-                _ => acc,\n-            }),\n+            AngleBrackets::Available => self.gen_args.num_lifetime_params(),\n         }\n     }\n \n@@ -148,10 +145,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n             AngleBrackets::Missing => 0,\n             // Only lifetime arguments can be implied\n             AngleBrackets::Implied => 0,\n-            AngleBrackets::Available => self.gen_args.args.iter().fold(0, |acc, arg| match arg {\n-                hir::GenericArg::Type(_) | hir::GenericArg::Const(_) => acc + 1,\n-                _ => acc,\n-            }),\n+            AngleBrackets::Available => self.gen_args.num_generic_params(),\n         }\n     }\n \n@@ -651,7 +645,9 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n             let mut found_redundant = false;\n             for arg in self.gen_args.args {\n                 match arg {\n-                    hir::GenericArg::Type(_) | hir::GenericArg::Const(_) => {\n+                    hir::GenericArg::Type(_)\n+                    | hir::GenericArg::Const(_)\n+                    | hir::GenericArg::Infer(_) => {\n                         gen_arg_spans.push(arg.span());\n                         if gen_arg_spans.len() > self.num_expected_type_or_const_args() {\n                             found_redundant = true;"}, {"sha": "7a8b04d6f3c13c4599201e5c1b6064d854604041", "filename": "library/core/src/panic.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/library%2Fcore%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/library%2Fcore%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -27,9 +27,14 @@ pub macro panic_2015 {\n     ($msg:literal $(,)?) => (\n         $crate::panicking::panic($msg)\n     ),\n+    // Use `panic_str` instead of `panic_display::<&str>` for non_fmt_panic lint.\n     ($msg:expr $(,)?) => (\n         $crate::panicking::panic_str($msg)\n     ),\n+    // Special-case the single-argument case for const_panic.\n+    (\"{}\", $arg:expr $(,)?) => (\n+        $crate::panicking::panic_display(&$arg)\n+    ),\n     ($fmt:expr, $($arg:tt)+) => (\n         $crate::panicking::panic_fmt($crate::const_format_args!($fmt, $($arg)+))\n     ),\n@@ -44,6 +49,10 @@ pub macro panic_2021 {\n     () => (\n         $crate::panicking::panic(\"explicit panic\")\n     ),\n+    // Special-case the single-argument case for const_panic.\n+    (\"{}\", $arg:expr $(,)?) => (\n+        $crate::panicking::panic_display(&$arg)\n+    ),\n     ($($t:tt)+) => (\n         $crate::panicking::panic_fmt($crate::const_format_args!($($t)+))\n     ),"}, {"sha": "a6aa4bf43c865292e1764a6a6fa3a02826db2ae3", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -60,6 +60,13 @@ pub fn panic_str(expr: &str) -> ! {\n     panic_fmt(format_args!(\"{}\", expr));\n }\n \n+#[inline]\n+#[track_caller]\n+#[cfg_attr(not(bootstrap), lang = \"panic_display\")] // needed for const-evaluated panics\n+pub fn panic_display<T: fmt::Display>(x: &T) -> ! {\n+    panic_fmt(format_args!(\"{}\", *x));\n+}\n+\n #[cold]\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[track_caller]"}, {"sha": "559d2672a0da38ce72fb2fa658df4c69fdd1910d", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -258,6 +258,7 @@\n #![feature(const_trait_impl)]\n #![feature(container_error_extra)]\n #![feature(core_intrinsics)]\n+#![feature(core_panic)]\n #![feature(custom_test_frameworks)]\n #![feature(decl_macro)]\n #![feature(doc_cfg)]"}, {"sha": "30eead9b05901db9db936a01dacb370080669b55", "filename": "library/std/src/os/unix/fs.rs", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -5,6 +5,7 @@\n use super::platform::fs::MetadataExt as _;\n use crate::fs::{self, OpenOptions, Permissions};\n use crate::io;\n+use crate::os::unix::io::{AsFd, AsRawFd};\n use crate::path::Path;\n use crate::sys;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner};\n@@ -924,6 +925,75 @@ impl DirBuilderExt for fs::DirBuilder {\n     }\n }\n \n+/// Change the owner and group of the specified path.\n+///\n+/// Specifying either the uid or gid as `None` will leave it unchanged.\n+///\n+/// Changing the owner typically requires privileges, such as root or a specific capability.\n+/// Changing the group typically requires either being the owner and a member of the group, or\n+/// having privileges.\n+///\n+/// If called on a symbolic link, this will change the owner and group of the link target. To\n+/// change the owner and group of the link itself, see [`lchown`].\n+///\n+/// # Examples\n+///\n+/// ```no_run\n+/// #![feature(unix_chown)]\n+/// use std::os::unix::fs;\n+///\n+/// fn main() -> std::io::Result<()> {\n+///     fs::chown(\"/sandbox\", Some(0), Some(0))?;\n+///     Ok(())\n+/// }\n+/// ```\n+#[unstable(feature = \"unix_chown\", issue = \"88989\")]\n+pub fn chown<P: AsRef<Path>>(dir: P, uid: Option<u32>, gid: Option<u32>) -> io::Result<()> {\n+    sys::fs::chown(dir.as_ref(), uid.unwrap_or(u32::MAX), gid.unwrap_or(u32::MAX))\n+}\n+\n+/// Change the owner and group of the file referenced by the specified open file descriptor.\n+///\n+/// For semantics and required privileges, see [`chown`].\n+///\n+/// # Examples\n+///\n+/// ```no_run\n+/// #![feature(unix_chown)]\n+/// use std::os::unix::fs;\n+///\n+/// fn main() -> std::io::Result<()> {\n+///     let f = std::fs::File::open(\"/file\")?;\n+///     fs::fchown(f, Some(0), Some(0))?;\n+///     Ok(())\n+/// }\n+/// ```\n+#[unstable(feature = \"unix_chown\", issue = \"88989\")]\n+pub fn fchown<F: AsFd>(fd: F, uid: Option<u32>, gid: Option<u32>) -> io::Result<()> {\n+    sys::fs::fchown(fd.as_fd().as_raw_fd(), uid.unwrap_or(u32::MAX), gid.unwrap_or(u32::MAX))\n+}\n+\n+/// Change the owner and group of the specified path, without dereferencing symbolic links.\n+///\n+/// Identical to [`chown`], except that if called on a symbolic link, this will change the owner\n+/// and group of the link itself rather than the owner and group of the link target.\n+///\n+/// # Examples\n+///\n+/// ```no_run\n+/// #![feature(unix_chown)]\n+/// use std::os::unix::fs;\n+///\n+/// fn main() -> std::io::Result<()> {\n+///     fs::lchown(\"/symlink\", Some(0), Some(0))?;\n+///     Ok(())\n+/// }\n+/// ```\n+#[unstable(feature = \"unix_chown\", issue = \"88989\")]\n+pub fn lchown<P: AsRef<Path>>(dir: P, uid: Option<u32>, gid: Option<u32>) -> io::Result<()> {\n+    sys::fs::lchown(dir.as_ref(), uid.unwrap_or(u32::MAX), gid.unwrap_or(u32::MAX))\n+}\n+\n /// Change the root directory of the current process to the specified path.\n ///\n /// This typically requires privileges, such as root or a specific capability."}, {"sha": "21e9669c11079718073c402f8d4135859e7ec7f2", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -10,7 +10,7 @@ use crate::thread::Result;\n \n #[doc(hidden)]\n #[unstable(feature = \"edition_panic\", issue = \"none\", reason = \"use panic!() instead\")]\n-#[allow_internal_unstable(libstd_sys_internals, const_format_args)]\n+#[allow_internal_unstable(libstd_sys_internals, const_format_args, core_panic)]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"std_panic_2015_macro\")]\n #[rustc_macro_transparency = \"semitransparent\"]\n pub macro panic_2015 {\n@@ -20,6 +20,10 @@ pub macro panic_2015 {\n     ($msg:expr $(,)?) => ({\n         $crate::rt::begin_panic($msg)\n     }),\n+    // Special-case the single-argument case for const_panic.\n+    (\"{}\", $arg:expr $(,)?) => ({\n+        $crate::rt::panic_display(&$arg)\n+    }),\n     ($fmt:expr, $($arg:tt)+) => ({\n         $crate::rt::begin_panic_fmt(&$crate::const_format_args!($fmt, $($arg)+))\n     }),"}, {"sha": "b4f2adf938b5630a03de4e841c3451b62ca9ad6f", "filename": "library/std/src/rt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/library%2Fstd%2Fsrc%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/library%2Fstd%2Fsrc%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Frt.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -16,6 +16,7 @@\n \n // Re-export some of our utilities which are expected by other crates.\n pub use crate::panicking::{begin_panic, begin_panic_fmt, panic_count};\n+pub use core::panicking::panic_display;\n \n // To reduce the generated code of the new `lang_start`, this function is doing\n // the real work."}, {"sha": "a4fff9b2e64731c7f775fcff82075bbf3b2c3784", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -1416,6 +1416,23 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n     Ok(bytes_copied as u64)\n }\n \n+pub fn chown(path: &Path, uid: u32, gid: u32) -> io::Result<()> {\n+    let path = cstr(path)?;\n+    cvt(unsafe { libc::chown(path.as_ptr(), uid as libc::uid_t, gid as libc::gid_t) })?;\n+    Ok(())\n+}\n+\n+pub fn fchown(fd: c_int, uid: u32, gid: u32) -> io::Result<()> {\n+    cvt(unsafe { libc::fchown(fd, uid as libc::uid_t, gid as libc::gid_t) })?;\n+    Ok(())\n+}\n+\n+pub fn lchown(path: &Path, uid: u32, gid: u32) -> io::Result<()> {\n+    let path = cstr(path)?;\n+    cvt(unsafe { libc::lchown(path.as_ptr(), uid as libc::uid_t, gid as libc::gid_t) })?;\n+    Ok(())\n+}\n+\n #[cfg(not(any(target_os = \"fuchsia\", target_os = \"vxworks\")))]\n pub fn chroot(dir: &Path) -> io::Result<()> {\n     let dir = cstr(dir)?;"}, {"sha": "af3774b7c7586ef3f33d38747405153b0eb4dff0", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 53, "deletions": 10, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -537,7 +537,7 @@ impl Step for Rustc {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let builder = run.builder;\n-        run.krate(\"rustc-main\").default_condition(builder.config.docs)\n+        run.krate(\"rustc-main\").path(\"compiler\").default_condition(builder.config.docs)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -553,9 +553,24 @@ impl Step for Rustc {\n     fn run(self, builder: &Builder<'_>) {\n         let stage = self.stage;\n         let target = self.target;\n+        let mut is_explicit_request = false;\n         builder.info(&format!(\"Documenting stage{} compiler ({})\", stage, target));\n \n-        if !builder.config.compiler_docs {\n+        let paths = builder\n+            .paths\n+            .iter()\n+            .map(components_simplified)\n+            .filter_map(|path| {\n+                if path.get(0) == Some(&\"compiler\") {\n+                    is_explicit_request = true;\n+                    path.get(1).map(|p| p.to_owned())\n+                } else {\n+                    None\n+                }\n+            })\n+            .collect::<Vec<_>>();\n+\n+        if !builder.config.compiler_docs && !is_explicit_request {\n             builder.info(\"\\tskipping - compiler/librustdoc docs disabled\");\n             return;\n         }\n@@ -604,26 +619,54 @@ impl Step for Rustc {\n         cargo.rustdocflag(\"--extern-html-root-url\");\n         cargo.rustdocflag(\"ena=https://docs.rs/ena/latest/\");\n \n-        // Find dependencies for top level crates.\n         let mut compiler_crates = HashSet::new();\n-        for root_crate in &[\"rustc_driver\", \"rustc_codegen_llvm\", \"rustc_codegen_ssa\"] {\n-            compiler_crates.extend(\n-                builder\n-                    .in_tree_crates(root_crate, Some(target))\n-                    .into_iter()\n-                    .map(|krate| krate.name),\n-            );\n+\n+        if paths.is_empty() {\n+            // Find dependencies for top level crates.\n+            for root_crate in &[\"rustc_driver\", \"rustc_codegen_llvm\", \"rustc_codegen_ssa\"] {\n+                compiler_crates.extend(\n+                    builder\n+                        .in_tree_crates(root_crate, Some(target))\n+                        .into_iter()\n+                        .map(|krate| krate.name),\n+                );\n+            }\n+        } else {\n+            for root_crate in paths {\n+                if !builder.src.join(\"compiler\").join(&root_crate).exists() {\n+                    builder.info(&format!(\n+                        \"\\tskipping - compiler/{} (unknown compiler crate)\",\n+                        root_crate\n+                    ));\n+                } else {\n+                    compiler_crates.extend(\n+                        builder\n+                            .in_tree_crates(root_crate, Some(target))\n+                            .into_iter()\n+                            .map(|krate| krate.name),\n+                    );\n+                }\n+            }\n         }\n \n+        let mut to_open = None;\n         for krate in &compiler_crates {\n             // Create all crate output directories first to make sure rustdoc uses\n             // relative links.\n             // FIXME: Cargo should probably do this itself.\n             t!(fs::create_dir_all(out_dir.join(krate)));\n             cargo.arg(\"-p\").arg(krate);\n+            if to_open.is_none() {\n+                to_open = Some(krate);\n+            }\n         }\n \n         builder.run(&mut cargo.into());\n+        // Let's open the first crate documentation page:\n+        if let Some(krate) = to_open {\n+            let index = out.join(krate).join(\"index.html\");\n+            open(builder, &index);\n+        }\n     }\n }\n "}, {"sha": "c1a83ad5820cb9067b329fc6590f783755198349", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -268,10 +268,18 @@ pub(super) fn write_shared(\n     // Maybe we can change the representation to move this out of main.js?\n     write_minify(\n         \"main.js\",\n-        static_files::MAIN_JS.replace(\n-            \"/* INSERT THEMES HERE */\",\n-            &format!(\" = {}\", serde_json::to_string(&themes).unwrap()),\n-        ),\n+        static_files::MAIN_JS\n+            .replace(\n+                \"/* INSERT THEMES HERE */\",\n+                &format!(\" = {}\", serde_json::to_string(&themes).unwrap()),\n+            )\n+            .replace(\n+                \"/* INSERT RUSTDOC_VERSION HERE */\",\n+                &format!(\n+                    \"rustdoc {}\",\n+                    rustc_interface::util::version_str().unwrap_or(\"unknown version\")\n+                ),\n+            ),\n         cx,\n         options,\n     )?;"}, {"sha": "eb7cc9309f41641c6212ca6e244e8ad6fd5b43ef", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -928,15 +928,24 @@ body.blur > :not(#help) {\n \tdisplay: block;\n \tmargin-right: 0.5rem;\n }\n-#help > div > span {\n+#help span.top, #help span.bottom {\n \ttext-align: center;\n \tdisplay: block;\n-\tmargin: 10px 0;\n \tfont-size: 18px;\n-\tborder-bottom: 1px solid #ccc;\n+\n+}\n+#help span.top {\n+\ttext-align: center;\n+\tdisplay: block;\n+\tmargin: 10px 0;\n+\tborder-bottom: 1px solid;\n \tpadding-bottom: 4px;\n \tmargin-bottom: 6px;\n }\n+#help span.bottom {\n+\tclear: both;\n+\tborder-top: 1px solid;\n+}\n #help dd { margin: 5px 35px; }\n #help .infos { padding-left: 0; }\n #help h1, #help h2 { margin-top: 0; }"}, {"sha": "c79801e830876f77c0720756da2c3fa398052e13", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -286,8 +286,8 @@ details.undocumented > summary::before {\n \tborder-radius: 4px;\n }\n \n-#help > div > span {\n-\tborder-bottom-color: #5c6773;\n+#help span.bottom, #help span.top {\n+\tborder-color: #5c6773;\n }\n \n .since {"}, {"sha": "d2e54070acd68621efadf5e506c9ffb9806aed1c", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -242,8 +242,8 @@ details.undocumented > summary::before {\n \tborder-color: #bfbfbf;\n }\n \n-#help > div > span {\n-\tborder-bottom-color: #bfbfbf;\n+#help span.bottom, #help span.top {\n+\tborder-color: #bfbfbf;\n }\n \n #help dt {"}, {"sha": "25d810560c1469b98397fd2975ad686c82c1165a", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -232,8 +232,8 @@ details.undocumented > summary::before {\n \tborder-color: #bfbfbf;\n }\n \n-#help > div > span {\n-\tborder-bottom-color: #bfbfbf;\n+#help span.bottom, #help span.top {\n+\tborder-color: #bfbfbf;\n }\n \n .since {"}, {"sha": "e396fd9d288db1cc34da37279113f4a65683b0c7", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -911,6 +911,7 @@ function hideThemeButtonState() {\n         });\n \n         var book_info = document.createElement(\"span\");\n+        book_info.className = \"top\";\n         book_info.innerHTML = \"You can find more information in \\\n             <a href=\\\"https://doc.rust-lang.org/rustdoc/\\\">the rustdoc book</a>.\";\n \n@@ -961,6 +962,14 @@ function hideThemeButtonState() {\n         container.appendChild(div_shortcuts);\n         container.appendChild(div_infos);\n \n+        var rustdoc_version = document.createElement(\"span\");\n+        rustdoc_version.className = \"bottom\";\n+        var rustdoc_version_code = document.createElement(\"code\");\n+        rustdoc_version_code.innerText = \"/* INSERT RUSTDOC_VERSION HERE */\";\n+        rustdoc_version.appendChild(rustdoc_version_code);\n+\n+        container.appendChild(rustdoc_version);\n+\n         popup.appendChild(container);\n         insertAfter(popup, searchState.outputElement());\n         // So that it's only built once and then it'll do nothing when called!"}, {"sha": "30e74c5ec950c6044205afe52d09947b2f0ca66e", "filename": "src/test/ui/borrowck/borrowck-in-static.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -4,7 +4,10 @@ error[E0507]: cannot move out of `x`, a captured variable in an `Fn` closure\n LL |     let x = Box::new(0);\n    |         - captured outer variable\n LL |     Box::new(|| x)\n-   |                 ^ move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |              ---^\n+   |              |  |\n+   |              |  move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |              captured by this `Fn` closure\n \n error: aborting due to previous error\n "}, {"sha": "05489cf18e7fc9a5b2ebc352536a4b1d7a46f8ea", "filename": "src/test/ui/borrowck/borrowck-move-by-capture.stderr", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -1,15 +1,18 @@\n error[E0507]: cannot move out of `bar`, a captured variable in an `FnMut` closure\n   --> $DIR/borrowck-move-by-capture.rs:9:29\n    |\n-LL |     let bar: Box<_> = box 3;\n-   |         --- captured outer variable\n-LL |     let _g = to_fn_mut(|| {\n-LL |         let _h = to_fn_once(move || -> isize { *bar });\n-   |                             ^^^^^^^^^^^^^^^^   ----\n-   |                             |                  |\n-   |                             |                  move occurs because `bar` has type `Box<isize>`, which does not implement the `Copy` trait\n-   |                             |                  move occurs due to use in closure\n-   |                             move out of `bar` occurs here\n+LL |       let bar: Box<_> = box 3;\n+   |           --- captured outer variable\n+LL |       let _g = to_fn_mut(|| {\n+   |  ________________________-\n+LL | |         let _h = to_fn_once(move || -> isize { *bar });\n+   | |                             ^^^^^^^^^^^^^^^^   ----\n+   | |                             |                  |\n+   | |                             |                  move occurs because `bar` has type `Box<isize>`, which does not implement the `Copy` trait\n+   | |                             |                  move occurs due to use in closure\n+   | |                             move out of `bar` occurs here\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error: aborting due to previous error\n "}, {"sha": "9fc12ba74904267249bd12963ec30949ec60b077", "filename": "src/test/ui/borrowck/issue-87456-point-to-closure.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fborrowck%2Fissue-87456-point-to-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fborrowck%2Fissue-87456-point-to-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-87456-point-to-closure.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for #87456.\n+\n+fn take_mut(_val: impl FnMut()) {}\n+\n+fn main() {\n+    let val = String::new();\n+    //~^ NOTE: captured outer variable\n+    take_mut(|| {\n+    //~^ NOTE: captured by this `FnMut` closure\n+        let _foo: String = val;\n+        //~^ ERROR: cannot move out of `val`, a captured variable in an `FnMut` closure [E0507]\n+        //~| NOTE: move occurs because\n+    })\n+}"}, {"sha": "fd38ad7bb0a7f16d7be0ebd385026b3a64fa62b5", "filename": "src/test/ui/borrowck/issue-87456-point-to-closure.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fborrowck%2Fissue-87456-point-to-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fborrowck%2Fissue-87456-point-to-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-87456-point-to-closure.stderr?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -0,0 +1,22 @@\n+error[E0507]: cannot move out of `val`, a captured variable in an `FnMut` closure\n+  --> $DIR/issue-87456-point-to-closure.rs:10:28\n+   |\n+LL |       let val = String::new();\n+   |           --- captured outer variable\n+LL |\n+LL |       take_mut(|| {\n+   |  ______________-\n+LL | |\n+LL | |         let _foo: String = val;\n+   | |                            ^^^\n+   | |                            |\n+   | |                            move occurs because `val` has type `String`, which does not implement the `Copy` trait\n+   | |                            help: consider borrowing here: `&val`\n+LL | |\n+LL | |\n+LL | |     })\n+   | |_____- captured by this `FnMut` closure\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "1663ce81d6cf446b5819502eb7b14b8f8c108884", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -1,11 +1,15 @@\n error[E0507]: cannot move out of `y`, a captured variable in an `Fn` closure\n   --> $DIR/unboxed-closures-move-upvar-from-non-once-ref-closure.rs:11:9\n    |\n-LL |     let y = vec![format!(\"World\")];\n-   |         - captured outer variable\n-LL |     call(|| {\n-LL |         y.into_iter();\n-   |         ^ move occurs because `y` has type `Vec<String>`, which does not implement the `Copy` trait\n+LL |       let y = vec![format!(\"World\")];\n+   |           - captured outer variable\n+LL |       call(|| {\n+   |  __________-\n+LL | |         y.into_iter();\n+   | |         ^ move occurs because `y` has type `Vec<String>`, which does not implement the `Copy` trait\n+LL | |\n+LL | |     });\n+   | |_____- captured by this `Fn` closure\n \n error: aborting due to previous error\n "}, {"sha": "d8599ab22a32b8de907eef76b216ff2dd43e0c74", "filename": "src/test/ui/const-generics/issues/issue-87493.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87493.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87493.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87493.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -0,0 +1,14 @@\n+pub trait MyTrait {\n+    type Assoc;\n+}\n+\n+pub fn foo<S, T>(_s: S, _t: T)\n+where\n+    S: MyTrait,\n+    T: MyTrait<Assoc == S::Assoc>,\n+    //~^ ERROR: expected one of `,` or `>`, found `==`\n+    //~| ERROR: this trait takes 0 generic arguments but 1 generic argument was supplied\n+{\n+}\n+\n+fn main() {}"}, {"sha": "8f92eeaffd19db4cf60f2a0e6a4a97e75c7025bb", "filename": "src/test/ui/const-generics/issues/issue-87493.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87493.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87493.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87493.stderr?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -0,0 +1,28 @@\n+error: expected one of `,` or `>`, found `==`\n+  --> $DIR/issue-87493.rs:8:22\n+   |\n+LL |     T: MyTrait<Assoc == S::Assoc>,\n+   |                      ^^ expected one of `,` or `>`\n+   |\n+help: if you meant to use an associated type binding, replace `==` with `=`\n+   |\n+LL |     T: MyTrait<Assoc = S::Assoc>,\n+   |                      ~\n+\n+error[E0107]: this trait takes 0 generic arguments but 1 generic argument was supplied\n+  --> $DIR/issue-87493.rs:8:8\n+   |\n+LL |     T: MyTrait<Assoc == S::Assoc>,\n+   |        ^^^^^^^------------------- help: remove these generics\n+   |        |\n+   |        expected 0 generic arguments\n+   |\n+note: trait defined here, with 0 generic parameters\n+  --> $DIR/issue-87493.rs:1:11\n+   |\n+LL | pub trait MyTrait {\n+   |           ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "100faded079d52ce37753bcc108dabb59231e91e", "filename": "src/test/ui/consts/const-eval/const_panic.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -15,10 +15,13 @@ const Y: () = std::unreachable!();\n \n const X: () = std::unimplemented!();\n //~^ ERROR evaluation of constant value failed\n-//\n+\n const W: () = std::panic!(MSG);\n //~^ ERROR evaluation of constant value failed\n \n+const W2: () = std::panic!(\"{}\", MSG);\n+//~^ ERROR evaluation of constant value failed\n+\n const Z_CORE: () = core::panic!(\"cheese\");\n //~^ ERROR evaluation of constant value failed\n \n@@ -33,3 +36,6 @@ const X_CORE: () = core::unimplemented!();\n \n const W_CORE: () = core::panic!(MSG);\n //~^ ERROR evaluation of constant value failed\n+\n+const W2_CORE: () = core::panic!(\"{}\", MSG);\n+//~^ ERROR evaluation of constant value failed"}, {"sha": "e98e4a506c0d69cc7c42b39c90167a505c47c60c", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -39,45 +39,61 @@ LL | const W: () = std::panic!(MSG);\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:22:20\n+  --> $DIR/const_panic.rs:22:16\n+   |\n+LL | const W2: () = std::panic!(\"{}\", MSG);\n+   |                ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:22:16\n+   |\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_panic.rs:25:20\n    |\n LL | const Z_CORE: () = core::panic!(\"cheese\");\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic.rs:22:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic.rs:25:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:25:21\n+  --> $DIR/const_panic.rs:28:21\n    |\n LL | const Z2_CORE: () = core::panic!();\n-   |                     ^^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:25:21\n+   |                     ^^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:28:21\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:28:20\n+  --> $DIR/const_panic.rs:31:20\n    |\n LL | const Y_CORE: () = core::unreachable!();\n-   |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:28:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:31:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:31:20\n+  --> $DIR/const_panic.rs:34:20\n    |\n LL | const X_CORE: () = core::unimplemented!();\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:31:20\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:34:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic.rs:34:20\n+  --> $DIR/const_panic.rs:37:20\n    |\n LL | const W_CORE: () = core::panic!(MSG);\n-   |                    ^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:34:20\n+   |                    ^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:37:20\n+   |\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_panic.rs:40:21\n+   |\n+LL | const W2_CORE: () = core::panic!(\"{}\", MSG);\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:40:21\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 12 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "9b8652a776e61ca31f41a6cbab4843036de8f1d7", "filename": "src/test/ui/consts/const-eval/const_panic_2021.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -2,6 +2,8 @@\n #![feature(const_panic)]\n #![crate_type = \"lib\"]\n \n+const MSG: &str = \"hello\";\n+\n const A: () = std::panic!(\"bl\u00e5haj\");\n //~^ ERROR evaluation of constant value failed\n \n@@ -14,14 +16,20 @@ const C: () = std::unreachable!();\n const D: () = std::unimplemented!();\n //~^ ERROR evaluation of constant value failed\n \n-const E: () = core::panic!(\"shark\");\n+const E: () = std::panic!(\"{}\", MSG);\n+//~^ ERROR evaluation of constant value failed\n+\n+const A_CORE: () = core::panic!(\"shark\");\n+//~^ ERROR evaluation of constant value failed\n+\n+const B_CORE: () = core::panic!();\n //~^ ERROR evaluation of constant value failed\n \n-const F: () = core::panic!();\n+const C_CORE: () = core::unreachable!();\n //~^ ERROR evaluation of constant value failed\n \n-const G: () = core::unreachable!();\n+const D_CORE: () = core::unimplemented!();\n //~^ ERROR evaluation of constant value failed\n \n-const H: () = core::unimplemented!();\n+const E_CORE: () = core::panic!(\"{}\", MSG);\n //~^ ERROR evaluation of constant value failed"}, {"sha": "9eb241ae8e59db6a620d785e56ffa01395bdb6f4", "filename": "src/test/ui/consts/const-eval/const_panic_2021.stderr", "status": "modified", "additions": 37, "deletions": 21, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -1,67 +1,83 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:5:15\n+  --> $DIR/const_panic_2021.rs:7:15\n    |\n LL | const A: () = std::panic!(\"bl\u00e5haj\");\n-   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'bl\u00e5haj', $DIR/const_panic_2021.rs:5:15\n+   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'bl\u00e5haj', $DIR/const_panic_2021.rs:7:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:8:15\n+  --> $DIR/const_panic_2021.rs:10:15\n    |\n LL | const B: () = std::panic!();\n-   |               ^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic_2021.rs:8:15\n+   |               ^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic_2021.rs:10:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:11:15\n+  --> $DIR/const_panic_2021.rs:13:15\n    |\n LL | const C: () = std::unreachable!();\n-   |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:11:15\n+   |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:13:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:14:15\n+  --> $DIR/const_panic_2021.rs:16:15\n    |\n LL | const D: () = std::unimplemented!();\n-   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_2021.rs:14:15\n+   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_2021.rs:16:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:17:15\n+  --> $DIR/const_panic_2021.rs:19:15\n    |\n-LL | const E: () = core::panic!(\"shark\");\n-   |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'shark', $DIR/const_panic_2021.rs:17:15\n+LL | const E: () = std::panic!(\"{}\", MSG);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic_2021.rs:19:15\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:20:15\n+  --> $DIR/const_panic_2021.rs:22:20\n    |\n-LL | const F: () = core::panic!();\n-   |               ^^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic_2021.rs:20:15\n+LL | const A_CORE: () = core::panic!(\"shark\");\n+   |                    ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'shark', $DIR/const_panic_2021.rs:22:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:23:15\n+  --> $DIR/const_panic_2021.rs:25:20\n    |\n-LL | const G: () = core::unreachable!();\n-   |               ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:23:15\n+LL | const B_CORE: () = core::panic!();\n+   |                    ^^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic_2021.rs:25:20\n+   |\n+   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_panic_2021.rs:28:20\n+   |\n+LL | const C_CORE: () = core::unreachable!();\n+   |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:28:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_panic_2021.rs:26:15\n+  --> $DIR/const_panic_2021.rs:31:20\n    |\n-LL | const H: () = core::unimplemented!();\n-   |               ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_2021.rs:26:15\n+LL | const D_CORE: () = core::unimplemented!();\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'not implemented', $DIR/const_panic_2021.rs:31:20\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 8 previous errors\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const_panic_2021.rs:34:20\n+   |\n+LL | const E_CORE: () = core::panic!(\"{}\", MSG);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic_2021.rs:34:20\n+   |\n+   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 10 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "fa3b58e1279378353ddd0c6033eb9edee9518b0f", "filename": "src/test/ui/issues/issue-4335.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fissues%2Fissue-4335.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fissues%2Fissue-4335.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4335.stderr?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -4,7 +4,10 @@ error[E0507]: cannot move out of `*v`, as `v` is a captured variable in an `FnMu\n LL | fn f<'r, T>(v: &'r T) -> Box<dyn FnMut() -> T + 'r> {\n    |             - captured outer variable\n LL |     id(Box::new(|| *v))\n-   |                    ^^ move occurs because `*v` has type `T`, which does not implement the `Copy` trait\n+   |                 ---^^\n+   |                 |  |\n+   |                 |  move occurs because `*v` has type `T`, which does not implement the `Copy` trait\n+   |                 captured by this `FnMut` closure\n \n error: aborting due to previous error\n "}, {"sha": "e12af2d45274315fcdef2ad9bfed6f3d1e4f2784", "filename": "src/test/ui/moves/moves-based-on-type-move-out-of-closure-env-issue-1965.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.stderr?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -4,7 +4,10 @@ error[E0507]: cannot move out of `i`, a captured variable in an `Fn` closure\n LL |     let i = box 3;\n    |         - captured outer variable\n LL |     let _f = to_fn(|| test(i));\n-   |                            ^ move occurs because `i` has type `Box<usize>`, which does not implement the `Copy` trait\n+   |                    --------^-\n+   |                    |       |\n+   |                    |       move occurs because `i` has type `Box<usize>`, which does not implement the `Copy` trait\n+   |                    captured by this `Fn` closure\n \n error: aborting due to previous error\n "}, {"sha": "c9324f0422cdc4444d88921cff84884071898e92", "filename": "src/test/ui/nll/issue-52663-span-decl-captured-variable.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.stderr?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -4,7 +4,10 @@ error[E0507]: cannot move out of `x.0`, as `x` is a captured variable in an `Fn`\n LL |        let x = (vec![22], vec![44]);\n    |            - captured outer variable\n LL |        expect_fn(|| drop(x.0));\n-   |                          ^^^ move occurs because `x.0` has type `Vec<i32>`, which does not implement the `Copy` trait\n+   |                  --------^^^-\n+   |                  |       |\n+   |                  |       move occurs because `x.0` has type `Vec<i32>`, which does not implement the `Copy` trait\n+   |                  captured by this `Fn` closure\n \n error: aborting due to previous error\n "}, {"sha": "8080dbc332ae7146d13648157bc3e64fde3f2f77", "filename": "src/test/ui/parser/recover-for-loop-parens-around-head.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -9,7 +9,7 @@ fn main() {\n \n     for ( elem in vec ) {\n         //~^ ERROR expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n-        //~| ERROR unexpected closing `)`\n+        //~| ERROR unexpected parenthesis surrounding `for` loop head\n         const RECOVERY_WITNESS: () = 0; //~ ERROR mismatched types\n     }\n }"}, {"sha": "21991348327b36e99d5f4c67b9aa5e2057b91a91", "filename": "src/test/ui/parser/recover-for-loop-parens-around-head.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -4,14 +4,17 @@ error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n LL |     for ( elem in vec ) {\n    |                ^^ expected one of `)`, `,`, `@`, or `|`\n \n-error: unexpected closing `)`\n-  --> $DIR/recover-for-loop-parens-around-head.rs:10:23\n+error: unexpected parenthesis surrounding `for` loop head\n+  --> $DIR/recover-for-loop-parens-around-head.rs:10:9\n    |\n LL |     for ( elem in vec ) {\n-   |         --------------^\n-   |         |\n-   |         opening `(`\n-   |         help: remove parenthesis in `for` loop: `elem in vec`\n+   |         ^             ^\n+   |\n+help: remove parenthesis in `for` loop\n+   |\n+LL -     for ( elem in vec ) {\n+LL +     for  elem in vec  {\n+   | \n \n error[E0308]: mismatched types\n   --> $DIR/recover-for-loop-parens-around-head.rs:13:38"}, {"sha": "0f630abd14876a5b21a0e00e40e1654270209403", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -29,11 +29,17 @@ LL |     f.f.call_mut(())\n error[E0507]: cannot move out of `f`, a captured variable in an `FnMut` closure\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:57:13\n    |\n-LL |     let mut f = move |g: Box<dyn FnMut(isize)>, b: isize| {\n-   |         ----- captured outer variable\n+LL |       let mut f = move |g: Box<dyn FnMut(isize)>, b: isize| {\n+   |           ----- captured outer variable\n ...\n-LL |         foo(f);\n-   |             ^ move occurs because `f` has type `[closure@$DIR/borrowck-call-is-borrow-issue-12224.rs:52:17: 54:6]`, which does not implement the `Copy` trait\n+LL |       f(Box::new(|a| {\n+   |  ________________-\n+LL | |\n+LL | |         foo(f);\n+   | |             ^ move occurs because `f` has type `[closure@$DIR/borrowck-call-is-borrow-issue-12224.rs:52:17: 54:6]`, which does not implement the `Copy` trait\n+LL | |\n+LL | |     }), 3);\n+   | |_____- captured by this `FnMut` closure\n \n error[E0505]: cannot move out of `f` because it is borrowed\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:55:16"}, {"sha": "fb1055c9c30931f9d307d13fb77aec747ceb2ece", "filename": "src/test/ui/suggestions/dont-suggest-ref/move-into-closure.stderr", "status": "modified", "additions": 380, "deletions": 174, "changes": 554, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.stderr?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -1,281 +1,487 @@\n error[E0507]: cannot move out of `x.0`, as `x` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:28:21\n    |\n-LL |     let x = X(Y);\n-   |         - captured outer variable\n+LL |       let x = X(Y);\n+   |           - captured outer variable\n ...\n-LL |         let X(_t) = x;\n-   |               --    ^ help: consider borrowing here: `&x`\n-   |               |\n-   |               data moved here\n-   |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+LL |       consume_fn(|| {\n+   |  ________________-\n+LL | |         let X(_t) = x;\n+   | |               --    ^ help: consider borrowing here: `&x`\n+   | |               |\n+   | |               data moved here\n+   | |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+LL | |\n+LL | |\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `Fn` closure\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:32:34\n    |\n-LL |     let e = Either::One(X(Y));\n-   |         - captured outer variable\n+LL |       let e = Either::One(X(Y));\n+   |           - captured outer variable\n ...\n-LL |         if let Either::One(_t) = e { }\n-   |                            --    ^ help: consider borrowing here: `&e`\n-   |                            |\n-   |                            data moved here\n-   |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fn(|| {\n+   |  ________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+LL | |\n+LL | |         if let Either::One(_t) = e { }\n+   | |                            --    ^ help: consider borrowing here: `&e`\n+   | |                            |\n+   | |                            data moved here\n+   | |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `Fn` closure\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:36:37\n    |\n-LL |     let e = Either::One(X(Y));\n-   |         - captured outer variable\n+LL |       let e = Either::One(X(Y));\n+   |           - captured outer variable\n ...\n-LL |         while let Either::One(_t) = e { }\n-   |                               --    ^ help: consider borrowing here: `&e`\n-   |                               |\n-   |                               data moved here\n-   |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fn(|| {\n+   |  ________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         while let Either::One(_t) = e { }\n+   | |                               --    ^ help: consider borrowing here: `&e`\n+   | |                               |\n+   | |                               data moved here\n+   | |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `Fn` closure\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:40:15\n    |\n-LL |     let e = Either::One(X(Y));\n-   |         - captured outer variable\n+LL |       let e = Either::One(X(Y));\n+   |           - captured outer variable\n ...\n-LL |         match e {\n-   |               ^ help: consider borrowing here: `&e`\n-...\n-LL |             Either::One(_t)\n-   |                         --\n-   |                         |\n-   |                         data moved here\n-   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fn(|| {\n+   |  ________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         match e {\n+   | |               ^ help: consider borrowing here: `&e`\n+...  |\n+LL | |             Either::One(_t)\n+   | |                         --\n+   | |                         |\n+   | |                         data moved here\n+   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `Fn` closure\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:47:15\n    |\n-LL |     let e = Either::One(X(Y));\n-   |         - captured outer variable\n-...\n-LL |         match e {\n-   |               ^ help: consider borrowing here: `&e`\n+LL |       let e = Either::One(X(Y));\n+   |           - captured outer variable\n ...\n-LL |             Either::One(_t) => (),\n-   |                         --\n-   |                         |\n-   |                         data moved here\n-   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fn(|| {\n+   |  ________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         match e {\n+   | |               ^ help: consider borrowing here: `&e`\n+...  |\n+LL | |             Either::One(_t) => (),\n+   | |                         --\n+   | |                         |\n+   | |                         data moved here\n+   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `Fn` closure\n \n error[E0507]: cannot move out of `x.0`, as `x` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:56:25\n    |\n-LL |     let x = X(Y);\n-   |         - captured outer variable\n+LL |       let x = X(Y);\n+   |           - captured outer variable\n ...\n-LL |         let X(mut _t) = x;\n-   |               ------    ^ help: consider borrowing here: `&x`\n-   |               |\n-   |               data moved here\n-   |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+LL |       consume_fn(|| {\n+   |  ________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         let X(mut _t) = x;\n+   | |               ------    ^ help: consider borrowing here: `&x`\n+   | |               |\n+   | |               data moved here\n+   | |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `Fn` closure\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:60:38\n    |\n-LL |     let mut em = Either::One(X(Y));\n-   |         ------ captured outer variable\n+LL |       let mut em = Either::One(X(Y));\n+   |           ------ captured outer variable\n ...\n-LL |         if let Either::One(mut _t) = em { }\n-   |                            ------    ^^ help: consider borrowing here: `&em`\n-   |                            |\n-   |                            data moved here\n-   |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fn(|| {\n+   |  ________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         if let Either::One(mut _t) = em { }\n+   | |                            ------    ^^ help: consider borrowing here: `&em`\n+   | |                            |\n+   | |                            data moved here\n+   | |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `Fn` closure\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:64:41\n    |\n-LL |     let mut em = Either::One(X(Y));\n-   |         ------ captured outer variable\n+LL |       let mut em = Either::One(X(Y));\n+   |           ------ captured outer variable\n ...\n-LL |         while let Either::One(mut _t) = em { }\n-   |                               ------    ^^ help: consider borrowing here: `&em`\n-   |                               |\n-   |                               data moved here\n-   |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fn(|| {\n+   |  ________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         while let Either::One(mut _t) = em { }\n+   | |                               ------    ^^ help: consider borrowing here: `&em`\n+   | |                               |\n+   | |                               data moved here\n+   | |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `Fn` closure\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:68:15\n    |\n-LL |     let mut em = Either::One(X(Y));\n-   |         ------ captured outer variable\n-...\n-LL |         match em {\n-   |               ^^ help: consider borrowing here: `&em`\n+LL |       let mut em = Either::One(X(Y));\n+   |           ------ captured outer variable\n ...\n-LL |             Either::One(mut _t)\n-   |                         ------\n-   |                         |\n-   |                         data moved here\n-   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fn(|| {\n+   |  ________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         match em {\n+   | |               ^^ help: consider borrowing here: `&em`\n+...  |\n+LL | |             Either::One(mut _t)\n+   | |                         ------\n+   | |                         |\n+   | |                         data moved here\n+   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `Fn` closure\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `Fn` closure\n   --> $DIR/move-into-closure.rs:75:15\n    |\n-LL |     let mut em = Either::One(X(Y));\n-   |         ------ captured outer variable\n+LL |       let mut em = Either::One(X(Y));\n+   |           ------ captured outer variable\n ...\n-LL |         match em {\n-   |               ^^ help: consider borrowing here: `&em`\n-...\n-LL |             Either::One(mut _t) => (),\n-   |                         ------\n-   |                         |\n-   |                         data moved here\n-   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fn(|| {\n+   |  ________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         match em {\n+   | |               ^^ help: consider borrowing here: `&em`\n+...  |\n+LL | |             Either::One(mut _t) => (),\n+   | |                         ------\n+   | |                         |\n+   | |                         data moved here\n+   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `Fn` closure\n \n error[E0507]: cannot move out of `x.0`, as `x` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:95:21\n    |\n-LL |     let x = X(Y);\n-   |         - captured outer variable\n+LL |       let x = X(Y);\n+   |           - captured outer variable\n ...\n-LL |         let X(_t) = x;\n-   |               --    ^ help: consider borrowing here: `&x`\n-   |               |\n-   |               data moved here\n-   |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+LL |       consume_fnmut(|| {\n+   |  ___________________-\n+LL | |         let X(_t) = x;\n+   | |               --    ^ help: consider borrowing here: `&x`\n+   | |               |\n+   | |               data moved here\n+   | |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+LL | |\n+LL | |\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:99:34\n    |\n-LL |     let e = Either::One(X(Y));\n-   |         - captured outer variable\n+LL |       let e = Either::One(X(Y));\n+   |           - captured outer variable\n ...\n-LL |         if let Either::One(_t) = e { }\n-   |                            --    ^ help: consider borrowing here: `&e`\n-   |                            |\n-   |                            data moved here\n-   |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fnmut(|| {\n+   |  ___________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+LL | |\n+LL | |         if let Either::One(_t) = e { }\n+   | |                            --    ^ help: consider borrowing here: `&e`\n+   | |                            |\n+   | |                            data moved here\n+   | |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:103:37\n    |\n-LL |     let e = Either::One(X(Y));\n-   |         - captured outer variable\n+LL |       let e = Either::One(X(Y));\n+   |           - captured outer variable\n ...\n-LL |         while let Either::One(_t) = e { }\n-   |                               --    ^ help: consider borrowing here: `&e`\n-   |                               |\n-   |                               data moved here\n-   |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fnmut(|| {\n+   |  ___________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         while let Either::One(_t) = e { }\n+   | |                               --    ^ help: consider borrowing here: `&e`\n+   | |                               |\n+   | |                               data moved here\n+   | |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:107:15\n    |\n-LL |     let e = Either::One(X(Y));\n-   |         - captured outer variable\n-...\n-LL |         match e {\n-   |               ^ help: consider borrowing here: `&e`\n+LL |       let e = Either::One(X(Y));\n+   |           - captured outer variable\n ...\n-LL |             Either::One(_t)\n-   |                         --\n-   |                         |\n-   |                         data moved here\n-   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fnmut(|| {\n+   |  ___________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         match e {\n+   | |               ^ help: consider borrowing here: `&e`\n+...  |\n+LL | |             Either::One(_t)\n+   | |                         --\n+   | |                         |\n+   | |                         data moved here\n+   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error[E0507]: cannot move out of `e.0`, as `e` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:114:15\n    |\n-LL |     let e = Either::One(X(Y));\n-   |         - captured outer variable\n+LL |       let e = Either::One(X(Y));\n+   |           - captured outer variable\n ...\n-LL |         match e {\n-   |               ^ help: consider borrowing here: `&e`\n-...\n-LL |             Either::One(_t) => (),\n-   |                         --\n-   |                         |\n-   |                         data moved here\n-   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fnmut(|| {\n+   |  ___________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         match e {\n+   | |               ^ help: consider borrowing here: `&e`\n+...  |\n+LL | |             Either::One(_t) => (),\n+   | |                         --\n+   | |                         |\n+   | |                         data moved here\n+   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error[E0507]: cannot move out of `x.0`, as `x` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:123:25\n    |\n-LL |     let x = X(Y);\n-   |         - captured outer variable\n+LL |       let x = X(Y);\n+   |           - captured outer variable\n ...\n-LL |         let X(mut _t) = x;\n-   |               ------    ^ help: consider borrowing here: `&x`\n-   |               |\n-   |               data moved here\n-   |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+LL |       consume_fnmut(|| {\n+   |  ___________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         let X(mut _t) = x;\n+   | |               ------    ^ help: consider borrowing here: `&x`\n+   | |               |\n+   | |               data moved here\n+   | |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:127:38\n    |\n-LL |     let mut em = Either::One(X(Y));\n-   |         ------ captured outer variable\n+LL |       let mut em = Either::One(X(Y));\n+   |           ------ captured outer variable\n ...\n-LL |         if let Either::One(mut _t) = em { }\n-   |                            ------    ^^ help: consider borrowing here: `&em`\n-   |                            |\n-   |                            data moved here\n-   |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fnmut(|| {\n+   |  ___________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         if let Either::One(mut _t) = em { }\n+   | |                            ------    ^^ help: consider borrowing here: `&em`\n+   | |                            |\n+   | |                            data moved here\n+   | |                            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:131:41\n    |\n-LL |     let mut em = Either::One(X(Y));\n-   |         ------ captured outer variable\n+LL |       let mut em = Either::One(X(Y));\n+   |           ------ captured outer variable\n ...\n-LL |         while let Either::One(mut _t) = em { }\n-   |                               ------    ^^ help: consider borrowing here: `&em`\n-   |                               |\n-   |                               data moved here\n-   |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fnmut(|| {\n+   |  ___________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         while let Either::One(mut _t) = em { }\n+   | |                               ------    ^^ help: consider borrowing here: `&em`\n+   | |                               |\n+   | |                               data moved here\n+   | |                               move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:135:15\n    |\n-LL |     let mut em = Either::One(X(Y));\n-   |         ------ captured outer variable\n-...\n-LL |         match em {\n-   |               ^^ help: consider borrowing here: `&em`\n+LL |       let mut em = Either::One(X(Y));\n+   |           ------ captured outer variable\n ...\n-LL |             Either::One(mut _t)\n-   |                         ------\n-   |                         |\n-   |                         data moved here\n-   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fnmut(|| {\n+   |  ___________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         match em {\n+   | |               ^^ help: consider borrowing here: `&em`\n+...  |\n+LL | |             Either::One(mut _t)\n+   | |                         ------\n+   | |                         |\n+   | |                         data moved here\n+   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:142:15\n    |\n-LL |     let mut em = Either::One(X(Y));\n-   |         ------ captured outer variable\n+LL |       let mut em = Either::One(X(Y));\n+   |           ------ captured outer variable\n ...\n-LL |         match em {\n-   |               ^^ help: consider borrowing here: `&em`\n-...\n-LL |             Either::One(mut _t) => (),\n-   |                         ------\n-   |                         |\n-   |                         data moved here\n-   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fnmut(|| {\n+   |  ___________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         match em {\n+   | |               ^^ help: consider borrowing here: `&em`\n+...  |\n+LL | |             Either::One(mut _t) => (),\n+   | |                         ------\n+   | |                         |\n+   | |                         data moved here\n+   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error[E0507]: cannot move out of `em.0`, as `em` is a captured variable in an `FnMut` closure\n   --> $DIR/move-into-closure.rs:150:15\n    |\n-LL |     let mut em = Either::One(X(Y));\n-   |         ------ captured outer variable\n-...\n-LL |         match em {\n-   |               ^^ help: consider borrowing here: `&em`\n+LL |       let mut em = Either::One(X(Y));\n+   |           ------ captured outer variable\n ...\n-LL |             Either::One(mut _t) => (),\n-   |                         ------\n-   |                         |\n-   |                         data moved here\n-   |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+LL |       consume_fnmut(|| {\n+   |  ___________________-\n+LL | |         let X(_t) = x;\n+LL | |\n+LL | |\n+...  |\n+LL | |         match em {\n+   | |               ^^ help: consider borrowing here: `&em`\n+...  |\n+LL | |             Either::One(mut _t) => (),\n+   | |                         ------\n+   | |                         |\n+   | |                         data moved here\n+   | |                         move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+...  |\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error: aborting due to 21 previous errors\n "}, {"sha": "a0ce7d05b4d48efecc2aa29787f701d344254ba9", "filename": "src/test/ui/suggestions/option-content-move2.stderr", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move2.stderr?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -1,17 +1,22 @@\n error[E0507]: cannot move out of `var`, a captured variable in an `FnMut` closure\n   --> $DIR/option-content-move2.rs:9:9\n    |\n-LL |     let mut var = None;\n-   |         ------- captured outer variable\n-...\n-LL |         move || {\n-   |         ^^^^^^^ move out of `var` occurs here\n-LL |\n-LL |             var = Some(NotCopyable);\n-   |             ---\n-   |             |\n-   |             move occurs because `var` has type `Option<NotCopyable>`, which does not implement the `Copy` trait\n-   |             move occurs due to use in closure\n+LL |       let mut var = None;\n+   |           ------- captured outer variable\n+LL |       func(|| {\n+   |  __________-\n+LL | |         // Shouldn't suggest `move ||.as_ref()` here\n+LL | |         move || {\n+   | |         ^^^^^^^ move out of `var` occurs here\n+LL | |\n+LL | |             var = Some(NotCopyable);\n+   | |             ---\n+   | |             |\n+   | |             move occurs because `var` has type `Option<NotCopyable>`, which does not implement the `Copy` trait\n+   | |             move occurs due to use in closure\n+LL | |         }\n+LL | |     });\n+   | |_____- captured by this `FnMut` closure\n \n error: aborting due to previous error\n "}, {"sha": "116c75aabdbdf4ed02f7322f7e8302c21480852f", "filename": "src/test/ui/typeck/issue-88844.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Ftypeck%2Fissue-88844.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Ftypeck%2Fissue-88844.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-88844.rs?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for #88844.\n+\n+struct Struct { value: i32 }\n+//~^ NOTE: similarly named struct `Struct` defined here\n+\n+impl Stuct {\n+//~^ ERROR: cannot find type `Stuct` in this scope [E0412]\n+//~| HELP: a struct with a similar name exists\n+    fn new() -> Self {\n+        Self { value: 42 }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "90bba90be346c3ecfadeb8f7cf4802bd4eafccca", "filename": "src/test/ui/typeck/issue-88844.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Ftypeck%2Fissue-88844.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Ftypeck%2Fissue-88844.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-88844.stderr?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -0,0 +1,12 @@\n+error[E0412]: cannot find type `Stuct` in this scope\n+  --> $DIR/issue-88844.rs:6:6\n+   |\n+LL | struct Struct { value: i32 }\n+   | ------------- similarly named struct `Struct` defined here\n+...\n+LL | impl Stuct {\n+   |      ^^^^^ help: a struct with a similar name exists: `Struct`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "482d3e44fe4ea7f0656ff49342c76ddb0e1c8905", "filename": "src/test/ui/unboxed-closures/unboxed-closure-illegal-move.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/207d9558d00dd5cc438a6418ba96912d396e2155/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.stderr?ref=207d9558d00dd5cc438a6418ba96912d396e2155", "patch": "@@ -4,31 +4,43 @@ error[E0507]: cannot move out of `x`, a captured variable in an `Fn` closure\n LL |         let x = Box::new(0);\n    |             - captured outer variable\n LL |         let f = to_fn(|| drop(x));\n-   |                               ^ move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |                       --------^-\n+   |                       |       |\n+   |                       |       move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |                       captured by this `Fn` closure\n \n error[E0507]: cannot move out of `x`, a captured variable in an `FnMut` closure\n   --> $DIR/unboxed-closure-illegal-move.rs:19:35\n    |\n LL |         let x = Box::new(0);\n    |             - captured outer variable\n LL |         let f = to_fn_mut(|| drop(x));\n-   |                                   ^ move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |                           --------^-\n+   |                           |       |\n+   |                           |       move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |                           captured by this `FnMut` closure\n \n error[E0507]: cannot move out of `x`, a captured variable in an `Fn` closure\n   --> $DIR/unboxed-closure-illegal-move.rs:28:36\n    |\n LL |         let x = Box::new(0);\n    |             - captured outer variable\n LL |         let f = to_fn(move || drop(x));\n-   |                                    ^ move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |                       -------------^-\n+   |                       |            |\n+   |                       |            move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |                       captured by this `Fn` closure\n \n error[E0507]: cannot move out of `x`, a captured variable in an `FnMut` closure\n   --> $DIR/unboxed-closure-illegal-move.rs:32:40\n    |\n LL |         let x = Box::new(0);\n    |             - captured outer variable\n LL |         let f = to_fn_mut(move || drop(x));\n-   |                                        ^ move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |                           -------------^-\n+   |                           |            |\n+   |                           |            move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |                           captured by this `FnMut` closure\n \n error: aborting due to 4 previous errors\n "}]}