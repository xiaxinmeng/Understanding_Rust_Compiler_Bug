{"sha": "665cf9622107144ad2b6415d1ff5d81999d42ae3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NWNmOTYyMjEwNzE0NGFkMmI2NDE1ZDFmZjVkODE5OTlkNDJhZTM=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-05-11T06:37:48Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-05-11T07:53:21Z"}, "message": "Rustup to 2018-05-11", "tree": {"sha": "dbe90ac74d3fa414f29d652b6b1c29aeb06bc198", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbe90ac74d3fa414f29d652b6b1c29aeb06bc198"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/665cf9622107144ad2b6415d1ff5d81999d42ae3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCgBKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlr1S/IsHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MAQo\nZA/6Al/Ylb7/AX8ZZtVbTxHdhhuQy0JR6zW1PvoJLE95UhMvidTypvCeSCMLNPZ5\nKjePRoIK8sUpkpSHC+fYOFGyA2QZ5LxfIhhqToFCo8ng1nlb0MDSVnoy+C/thd9L\n+Ko81+4htihcQzAgRJ6D5uav+2rC9crZHJVtM1mLcmQ75/0V/L50Y1E3Ll/hg+rB\nH6DcAxPILxg5WFIBBNk4BhHZudqHyYvWGVs5jddcmWNHAUEbKqyQvMyEuj6PBb+2\nZ8G0GZfGFkDg9WtvF8e5wKd6zkNdaFYTFZHylir+cx14h+9zXDCl50CecyjuSZ3L\nYihS1vq3LK2/jrvxBz809W7CxiNG5cPf7kEwdcsvWrDwDofd+pxi+u1JJGmed51B\nC03riG8gYXz4NNyvjPLZJloElEPFfqUEIwhw5Wn3F8rEplmsiyDNDyy0ELj/K5vD\noWbqDOLwJD7UluinezlvBDss5Allt1mIhWvsSrrPLJgYidIgwjHXYoVHgugC4NPI\nrHJwmn6+cLZJ1Lv5fCIfl0e4CRaHsqp/9YvhCfi8KTFnA97Z9Yf9FoW79J50tFDD\n8zz5QIyKSitgUTW3zRyGf3mfEXJ2RteTSKQhJw3jPpqWMu0jb8YPS5elpd6ctl3D\nsWpWPmfl8ekG86LfoaD6V4nYs/8FA9/ClJ29CZOwBwzEIvc=\n=orlt\n-----END PGP SIGNATURE-----", "payload": "tree dbe90ac74d3fa414f29d652b6b1c29aeb06bc198\nparent be3cba88524a51fe239ffc8a818e15f96c7bfc6b\nauthor Philipp Hansch <dev@phansch.net> 1526020668 +0200\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1526025201 +0200\n\nRustup to 2018-05-11\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/665cf9622107144ad2b6415d1ff5d81999d42ae3", "html_url": "https://github.com/rust-lang/rust/commit/665cf9622107144ad2b6415d1ff5d81999d42ae3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/665cf9622107144ad2b6415d1ff5d81999d42ae3/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be3cba88524a51fe239ffc8a818e15f96c7bfc6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/be3cba88524a51fe239ffc8a818e15f96c7bfc6b", "html_url": "https://github.com/rust-lang/rust/commit/be3cba88524a51fe239ffc8a818e15f96c7bfc6b"}], "stats": {"total": 98, "additions": 48, "deletions": 50}, "files": [{"sha": "3668f5232930024d96ceb66255ea9f5fc6ffe646", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/665cf9622107144ad2b6415d1ff5d81999d42ae3/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665cf9622107144ad2b6415d1ff5d81999d42ae3/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=665cf9622107144ad2b6415d1ff5d81999d42ae3", "patch": "@@ -426,7 +426,7 @@ pub fn miri_to_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, result: &ty::Const<'\n             _ => None,\n         },\n         ConstVal::Value(Value::ByValPair(PrimVal::Ptr(ptr), PrimVal::Bytes(n))) => match result.ty.sty {\n-            ty::TyRef(_, tam) => match tam.ty.sty {\n+            ty::TyRef(_, tam, _) => match tam.sty {\n                 ty::TyStr => {\n                     let alloc = tcx\n                         .interpret_interner"}, {"sha": "50e6e4c3b3f7f00a7890f1bc6b891c33d97ef2e6", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/665cf9622107144ad2b6415d1ff5d81999d42ae3/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665cf9622107144ad2b6415d1ff5d81999d42ae3/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=665cf9622107144ad2b6415d1ff5d81999d42ae3", "patch": "@@ -743,7 +743,7 @@ struct FixedOffsetVar {\n \n fn is_slice_like<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty) -> bool {\n     let is_slice = match ty.sty {\n-        ty::TyRef(_, ref subty) => is_slice_like(cx, subty.ty),\n+        ty::TyRef(_, subty, _) => is_slice_like(cx, subty),\n         ty::TySlice(..) | ty::TyArray(..) => true,\n         _ => false,\n     };\n@@ -1365,9 +1365,9 @@ fn check_for_loop_over_map_kv<'a, 'tcx>(\n         if pat.len() == 2 {\n             let arg_span = arg.span;\n             let (new_pat_span, kind, ty, mutbl) = match cx.tables.expr_ty(arg).sty {\n-                ty::TyRef(_, ref tam) => match (&pat[0].node, &pat[1].node) {\n-                    (key, _) if pat_is_wild(key, body) => (pat[1].span, \"value\", tam.ty, tam.mutbl),\n-                    (_, value) if pat_is_wild(value, body) => (pat[0].span, \"key\", tam.ty, MutImmutable),\n+                ty::TyRef(_, ty, mutbl) => match (&pat[0].node, &pat[1].node) {\n+                    (key, _) if pat_is_wild(key, body) => (pat[1].span, \"value\", ty, mutbl),\n+                    (_, value) if pat_is_wild(value, body) => (pat[0].span, \"key\", ty, MutImmutable),\n                     _ => return,\n                 },\n                 _ => return,\n@@ -1705,8 +1705,8 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                 for expr in args {\n                     let ty = self.cx.tables.expr_ty_adjusted(expr);\n                     self.prefer_mutable = false;\n-                    if let ty::TyRef(_, mutbl) = ty.sty {\n-                        if mutbl.mutbl == MutMutable {\n+                    if let ty::TyRef(_, _, mutbl) = ty.sty {\n+                        if mutbl == MutMutable {\n                             self.prefer_mutable = true;\n                         }\n                     }\n@@ -1717,8 +1717,8 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                 let def_id = self.cx.tables.type_dependent_defs()[expr.hir_id].def_id();\n                 for (ty, expr) in self.cx.tcx.fn_sig(def_id).inputs().skip_binder().iter().zip(args) {\n                     self.prefer_mutable = false;\n-                    if let ty::TyRef(_, mutbl) = ty.sty {\n-                        if mutbl.mutbl == MutMutable {\n+                    if let ty::TyRef(_, _, mutbl) = ty.sty {\n+                        if mutbl == MutMutable {\n                             self.prefer_mutable = true;\n                         }\n                     }"}, {"sha": "3a473ba47753a49670a73ed5ba9574732fe5095e", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/665cf9622107144ad2b6415d1ff5d81999d42ae3/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665cf9622107144ad2b6415d1ff5d81999d42ae3/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=665cf9622107144ad2b6415d1ff5d81999d42ae3", "patch": "@@ -51,8 +51,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                                     walk_ptrs_ty_depth(cx.tables.pat_ty(&first_arg.pat)).1 == 1\n                                 {\n                                     // the argument is not an &mut T\n-                                    if let ty::TyRef(_, tam) = ty.sty {\n-                                        if tam.mutbl == MutImmutable {\n+                                    if let ty::TyRef(_, _, mutbl) = ty.sty {\n+                                        if mutbl == MutImmutable {\n                                             span_help_and_lint(cx, MAP_CLONE, expr.span, &format!(\n                                                 \"you seem to be using .map() to clone the contents of an {}, consider \\\n                                                 using `.cloned()`\", type_name),"}, {"sha": "212310a0f2a52a8e19056dcdb6ee5ab3a3468d56", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/665cf9622107144ad2b6415d1ff5d81999d42ae3/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665cf9622107144ad2b6415d1ff5d81999d42ae3/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=665cf9622107144ad2b6415d1ff5d81999d42ae3", "patch": "@@ -749,7 +749,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 }\n \n                 match self_ty.sty {\n-                    ty::TyRef(_, ty) if ty.ty.sty == ty::TyStr => for &(method, pos) in &PATTERN_METHODS {\n+                    ty::TyRef(_, ty, _) if ty.sty == ty::TyStr => for &(method, pos) in &PATTERN_METHODS {\n                         if method_call.name == method && args.len() > pos {\n                             lint_single_char_pattern(cx, expr, &args[pos]);\n                         }\n@@ -967,8 +967,8 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, method_span: Span, name:\n /// Checks for the `CLONE_ON_COPY` lint.\n fn lint_clone_on_copy(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr, arg_ty: Ty) {\n     let ty = cx.tables.expr_ty(expr);\n-    if let ty::TyRef(_, ty::TypeAndMut { ty: inner, .. }) = arg_ty.sty {\n-        if let ty::TyRef(_, ty::TypeAndMut { ty: innermost, .. }) = inner.sty {\n+    if let ty::TyRef(_, inner, _) = arg_ty.sty {\n+        if let ty::TyRef(_, innermost, _) = inner.sty {\n             span_lint_and_then(\n                 cx,\n                 CLONE_DOUBLE_REF,\n@@ -978,7 +978,7 @@ fn lint_clone_on_copy(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr, arg_t\n                 |db| if let Some(snip) = sugg::Sugg::hir_opt(cx, arg) {\n                     let mut ty = innermost;\n                     let mut n = 0;\n-                    while let ty::TyRef(_, ty::TypeAndMut { ty: inner, .. }) = ty.sty {\n+                    while let ty::TyRef(_, inner, _) = ty.sty {\n                         ty = inner;\n                         n += 1;\n                     }\n@@ -1300,7 +1300,7 @@ fn derefs_to_slice(cx: &LateContext, expr: &hir::Expr, ty: Ty) -> Option<sugg::S\n             ty::TyAdt(def, _) if def.is_box() => may_slice(cx, ty.boxed_ty()),\n             ty::TyAdt(..) => match_type(cx, ty, &paths::VEC),\n             ty::TyArray(_, size) => size.val.to_raw_bits().expect(\"array length\") < 32,\n-            ty::TyRef(_, ty::TypeAndMut { ty: inner, .. }) => may_slice(cx, inner),\n+            ty::TyRef(_, inner, _) => may_slice(cx, inner),\n             _ => false,\n         }\n     }\n@@ -1315,7 +1315,7 @@ fn derefs_to_slice(cx: &LateContext, expr: &hir::Expr, ty: Ty) -> Option<sugg::S\n         match ty.sty {\n             ty::TySlice(_) => sugg::Sugg::hir_opt(cx, expr),\n             ty::TyAdt(def, _) if def.is_box() && may_slice(cx, ty.boxed_ty()) => sugg::Sugg::hir_opt(cx, expr),\n-            ty::TyRef(_, ty::TypeAndMut { ty: inner, .. }) => if may_slice(cx, inner) {\n+            ty::TyRef(_, inner, _) => if may_slice(cx, inner) {\n                 sugg::Sugg::hir_opt(cx, expr)\n             } else {\n                 None"}, {"sha": "129f022606ad143820918a3bb58f9e447aca4dac", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/665cf9622107144ad2b6415d1ff5d81999d42ae3/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665cf9622107144ad2b6415d1ff5d81999d42ae3/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=665cf9622107144ad2b6415d1ff5d81999d42ae3", "patch": "@@ -72,10 +72,8 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for MutVisitor<'a, 'tcx> {\n                 );\n             } else if let ty::TyRef(\n                 _,\n-                ty::TypeAndMut {\n-                    mutbl: hir::MutMutable,\n-                    ..\n-                },\n+                _,\n+                _,\n             ) = self.cx.tables.expr_ty(e).sty\n             {\n                 span_lint("}, {"sha": "a59909c48c8955d04fd82ff81ff8ba35929ce4c5", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/665cf9622107144ad2b6415d1ff5d81999d42ae3/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665cf9622107144ad2b6415d1ff5d81999d42ae3/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=665cf9622107144ad2b6415d1ff5d81999d42ae3", "patch": "@@ -63,10 +63,8 @@ fn check_arguments<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arguments: &[Expr], typ\n                 match parameter.sty {\n                     ty::TyRef(\n                         _,\n-                        ty::TypeAndMut {\n-                            mutbl: MutImmutable,\n-                            ..\n-                        },\n+                        _,\n+                        _,\n                     ) |\n                     ty::TyRawPtr(ty::TypeAndMut {\n                         mutbl: MutImmutable,"}, {"sha": "7fdef19f183cf05472c32fedc85166764675ca55", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/665cf9622107144ad2b6415d1ff5d81999d42ae3/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665cf9622107144ad2b6415d1ff5d81999d42ae3/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=665cf9622107144ad2b6415d1ff5d81999d42ae3", "patch": "@@ -77,11 +77,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n         }\n         if_chain! {\n             if let PatKind::Binding(BindingAnnotation::Ref, _, name, _) = pat.node;\n-            if let ty::TyRef(_, ref tam) = cx.tables.pat_ty(pat).sty;\n-            if tam.mutbl == MutImmutable;\n-            if let ty::TyRef(_, ref tam) = tam.ty.sty;\n+            if let ty::TyRef(_, tam, mutbl) = cx.tables.pat_ty(pat).sty;\n+            if mutbl == MutImmutable;\n+            if let ty::TyRef(_, _, mutbl) = tam.sty;\n             // only lint immutable refs, because borrowed `&mut T` cannot be moved out\n-            if tam.mutbl == MutImmutable;\n+            if mutbl == MutImmutable;\n             then {\n                 span_lint_and_then(\n                     cx,"}, {"sha": "fb9369c78a023d9de368e266200ab86ba78c988b", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/665cf9622107144ad2b6415d1ff5d81999d42ae3/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665cf9622107144ad2b6415d1ff5d81999d42ae3/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=665cf9622107144ad2b6415d1ff5d81999d42ae3", "patch": "@@ -152,10 +152,8 @@ fn check_fn(cx: &LateContext, decl: &FnDecl, fn_id: NodeId, opt_body_id: Option<\n     for (idx, (arg, ty)) in decl.inputs.iter().zip(fn_ty.inputs()).enumerate() {\n         if let ty::TyRef(\n             _,\n-            ty::TypeAndMut {\n-                ty,\n-                mutbl: MutImmutable,\n-            },\n+            ty,\n+            _\n         ) = ty.sty\n         {\n             if match_type(cx, ty, &paths::VEC) {"}, {"sha": "4ee0a77f54915db4df01c4cbaef49f2bd5f2c3a2", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/665cf9622107144ad2b6415d1ff5d81999d42ae3/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665cf9622107144ad2b6415d1ff5d81999d42ae3/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=665cf9622107144ad2b6415d1ff5d81999d42ae3", "patch": "@@ -229,16 +229,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                 e.span,\n                                 &format!(\"transmute from a type (`{}`) to itself\", from_ty),\n                             ),\n-                            (&ty::TyRef(_, rty), &ty::TyRawPtr(ptr_ty)) => span_lint_and_then(\n+                            (&ty::TyRef(_, rty, rty_mutbl), &ty::TyRawPtr(ptr_ty)) => span_lint_and_then(\n                                 cx,\n                                 USELESS_TRANSMUTE,\n                                 e.span,\n                                 \"transmute from a reference to a pointer\",\n                                 |db| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n-                                    let sugg = if ptr_ty == rty {\n+                                    let rty_and_mut = ty::TypeAndMut { ty: rty, mutbl: rty_mutbl };\n+\n+                                    let sugg = if ptr_ty == rty_and_mut {\n                                         arg.as_ty(to_ty)\n                                     } else {\n-                                        arg.as_ty(cx.tcx.mk_ptr(rty)).as_ty(to_ty)\n+                                        arg.as_ty(cx.tcx.mk_ptr(rty_and_mut)).as_ty(to_ty)\n                                     };\n \n                                     db.span_suggestion(e.span, \"try\", sugg.to_string());\n@@ -284,7 +286,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                     to_ty\n                                 ),\n                             ),\n-                            (&ty::TyRawPtr(from_pty), &ty::TyRef(_, to_ref_ty)) => span_lint_and_then(\n+                            (&ty::TyRawPtr(from_pty), &ty::TyRef(_, to_ref_ty, mutbl)) => span_lint_and_then(\n                                 cx,\n                                 TRANSMUTE_PTR_TO_REF,\n                                 e.span,\n@@ -296,16 +298,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                 ),\n                                 |db| {\n                                     let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n-                                    let (deref, cast) = if to_ref_ty.mutbl == Mutability::MutMutable {\n+                                    let (deref, cast) = if mutbl == Mutability::MutMutable {\n                                         (\"&mut *\", \"*mut\")\n                                     } else {\n                                         (\"&*\", \"*const\")\n                                     };\n \n-                                    let arg = if from_pty.ty == to_ref_ty.ty {\n+                                    let arg = if from_pty.ty == to_ref_ty {\n                                         arg\n                                     } else {\n-                                        arg.as_ty(&format!(\"{} {}\", cast, get_type_snippet(cx, qpath, to_ref_ty.ty)))\n+                                        arg.as_ty(&format!(\"{} {}\", cast, get_type_snippet(cx, qpath, to_ref_ty)))\n                                     };\n \n                                     db.span_suggestion(e.span, \"try\", sugg::make_unop(deref, arg).to_string());\n@@ -331,13 +333,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                     );\n                                 },\n                             ),\n-                            (&ty::TyRef(_, ref ref_from), &ty::TyRef(_, ref ref_to)) => {\n+                            (&ty::TyRef(_, ty_from, from_mutbl), &ty::TyRef(_, ty_to, to_mutbl)) => {\n                                 if_chain! {\n-                                    if let (&ty::TySlice(slice_ty), &ty::TyStr) = (&ref_from.ty.sty, &ref_to.ty.sty);\n+                                    if let (&ty::TySlice(slice_ty), &ty::TyStr) = (&ty_from.sty, &ty_to.sty);\n                                     if let ty::TyUint(ast::UintTy::U8) = slice_ty.sty;\n-                                    if ref_from.mutbl == ref_to.mutbl;\n+                                    if from_mutbl == to_mutbl;\n                                     then {\n-                                        let postfix = if ref_from.mutbl == Mutability::MutMutable {\n+                                        let postfix = if from_mutbl == Mutability::MutMutable {\n                                             \"_mut\"\n                                         } else {\n                                             \"\"\n@@ -367,8 +369,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                             e.span,\n                                             \"transmute from a reference to a reference\",\n                                             |db| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n-                                                let sugg_paren = arg.as_ty(cx.tcx.mk_ptr(*ref_from)).as_ty(cx.tcx.mk_ptr(*ref_to));\n-                                                let sugg = if ref_to.mutbl == Mutability::MutMutable {\n+                                                let ty_from_and_mut = ty::TypeAndMut { ty: ty_from, mutbl: from_mutbl };\n+                                                let ty_to_and_mut = ty::TypeAndMut { ty: ty_to, mutbl: to_mutbl };\n+                                                let sugg_paren = arg.as_ty(cx.tcx.mk_ptr(ty_from_and_mut)).as_ty(cx.tcx.mk_ptr(ty_to_and_mut));\n+                                                let sugg = if to_mutbl == Mutability::MutMutable {\n                                                     sugg_paren.mut_addr_deref()\n                                                 } else {\n                                                     sugg_paren.addr_deref()"}, {"sha": "bc50eb2ac20290d7fc24f8c8f15424fcb77a91f3", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/665cf9622107144ad2b6415d1ff5d81999d42ae3/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665cf9622107144ad2b6415d1ff5d81999d42ae3/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=665cf9622107144ad2b6415d1ff5d81999d42ae3", "patch": "@@ -674,7 +674,7 @@ pub fn walk_ptrs_hir_ty(ty: &hir::Ty) -> &hir::Ty {\n /// Return the base type for references and raw pointers.\n pub fn walk_ptrs_ty(ty: Ty) -> Ty {\n     match ty.sty {\n-        ty::TyRef(_, ref tm) => walk_ptrs_ty(tm.ty),\n+        ty::TyRef(_, ty, _) => walk_ptrs_ty(ty),\n         _ => ty,\n     }\n }\n@@ -684,7 +684,7 @@ pub fn walk_ptrs_ty(ty: Ty) -> Ty {\n pub fn walk_ptrs_ty_depth(ty: Ty) -> (Ty, usize) {\n     fn inner(ty: Ty, depth: usize) -> (Ty, usize) {\n         match ty.sty {\n-            ty::TyRef(_, ref tm) => inner(tm.ty, depth + 1),\n+            ty::TyRef(_, ty, _) => inner(ty, depth + 1),\n             _ => (ty, depth),\n         }\n     }"}, {"sha": "d5ed4cb712d5af2c3042d9425dfc001eeb10aed0", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/665cf9622107144ad2b6415d1ff5d81999d42ae3/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665cf9622107144ad2b6415d1ff5d81999d42ae3/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=665cf9622107144ad2b6415d1ff5d81999d42ae3", "patch": "@@ -35,8 +35,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         // search for `&vec![_]` expressions where the adjusted type is `&[_]`\n         if_chain! {\n-            if let ty::TyRef(_, ref ty) = cx.tables.expr_ty_adjusted(expr).sty;\n-            if let ty::TySlice(..) = ty.ty.sty;\n+            if let ty::TyRef(_, ty, _) = cx.tables.expr_ty_adjusted(expr).sty;\n+            if let ty::TySlice(..) = ty.sty;\n             if let ExprAddrOf(_, ref addressee) = expr.node;\n             if let Some(vec_args) = higher::vec_macro(cx, addressee);\n             then {"}]}