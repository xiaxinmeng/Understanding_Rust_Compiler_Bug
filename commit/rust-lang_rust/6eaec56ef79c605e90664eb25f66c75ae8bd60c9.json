{"sha": "6eaec56ef79c605e90664eb25f66c75ae8bd60c9", "node_id": "C_kwDOAAsO6NoAKDZlYWVjNTZlZjc5YzYwNWU5MDY2NGViMjVmNjZjNzVhZThiZDYwYzk", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-04-14T11:38:39Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-04-14T18:57:01Z"}, "message": "library: Remove definitions and reexports of `strlen` from libstd", "tree": {"sha": "13138798ddf6f9a2166fad94318786ada2398ada", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13138798ddf6f9a2166fad94318786ada2398ada"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6eaec56ef79c605e90664eb25f66c75ae8bd60c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6eaec56ef79c605e90664eb25f66c75ae8bd60c9", "html_url": "https://github.com/rust-lang/rust/commit/6eaec56ef79c605e90664eb25f66c75ae8bd60c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6eaec56ef79c605e90664eb25f66c75ae8bd60c9/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afa2e6f2ff784af7e89d286acfd6d57d164223e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/afa2e6f2ff784af7e89d286acfd6d57d164223e0", "html_url": "https://github.com/rust-lang/rust/commit/afa2e6f2ff784af7e89d286acfd6d57d164223e0"}], "stats": {"total": 40, "additions": 0, "deletions": 40}, "files": [{"sha": "60b7a973cc2c1d7c94a2c66640b6194e6e5b11dd", "filename": "library/std/src/sys/hermit/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6eaec56ef79c605e90664eb25f66c75ae8bd60c9/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eaec56ef79c605e90664eb25f66c75ae8bd60c9/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs?ref=6eaec56ef79c605e90664eb25f66c75ae8bd60c9", "patch": "@@ -71,16 +71,6 @@ pub fn unsupported_err() -> crate::io::Error {\n     )\n }\n \n-pub unsafe fn strlen(start: *const c_char) -> usize {\n-    let mut str = start;\n-\n-    while *str != 0 {\n-        str = str.offset(1);\n-    }\n-\n-    (str as usize) - (start as usize)\n-}\n-\n #[no_mangle]\n pub extern \"C\" fn floor(x: f64) -> f64 {\n     unsafe { intrinsics::floorf64(x) }"}, {"sha": "696400670e04d1f8f543b258602a258191e6158c", "filename": "library/std/src/sys/sgx/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6eaec56ef79c605e90664eb25f66c75ae8bd60c9/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eaec56ef79c605e90664eb25f66c75ae8bd60c9/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs?ref=6eaec56ef79c605e90664eb25f66c75ae8bd60c9", "patch": "@@ -5,7 +5,6 @@\n #![deny(unsafe_op_in_unsafe_fn)]\n \n use crate::io::ErrorKind;\n-use crate::os::raw::c_char;\n use crate::sync::atomic::{AtomicBool, Ordering};\n \n pub mod abi;\n@@ -130,15 +129,6 @@ pub fn decode_error_kind(code: i32) -> ErrorKind {\n     }\n }\n \n-pub unsafe fn strlen(mut s: *const c_char) -> usize {\n-    let mut n = 0;\n-    while unsafe { *s } != 0 {\n-        n += 1;\n-        s = unsafe { s.offset(1) };\n-    }\n-    return n;\n-}\n-\n pub fn abort_internal() -> ! {\n     abi::usercalls::exit(true)\n }"}, {"sha": "5ffa381f2e50f07e1f8580ac0243e5ecd919e4a8", "filename": "library/std/src/sys/solid/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eaec56ef79c605e90664eb25f66c75ae8bd60c9/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eaec56ef79c605e90664eb25f66c75ae8bd60c9/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fmod.rs?ref=6eaec56ef79c605e90664eb25f66c75ae8bd60c9", "patch": "@@ -99,5 +99,3 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n         (x1, x2)\n     }\n }\n-\n-pub use libc::strlen;"}, {"sha": "aedeb02e656d6652d9b77eadd91997865b1520be", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6eaec56ef79c605e90664eb25f66c75ae8bd60c9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eaec56ef79c605e90664eb25f66c75ae8bd60c9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=6eaec56ef79c605e90664eb25f66c75ae8bd60c9", "patch": "@@ -3,7 +3,6 @@\n use crate::io::ErrorKind;\n \n pub use self::rand::hashmap_random_keys;\n-pub use libc::strlen;\n \n #[cfg(not(target_os = \"espidf\"))]\n #[macro_use]"}, {"sha": "4c9ade4a8c7906714b84cd6437243a2501ab2d77", "filename": "library/std/src/sys/unsupported/common.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6eaec56ef79c605e90664eb25f66c75ae8bd60c9/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eaec56ef79c605e90664eb25f66c75ae8bd60c9/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs?ref=6eaec56ef79c605e90664eb25f66c75ae8bd60c9", "patch": "@@ -4,10 +4,6 @@ pub mod memchr {\n     pub use core::slice::memchr::{memchr, memrchr};\n }\n \n-// This is not necessarily correct. May want to consider making it part of the\n-// spec definition?\n-use crate::os::raw::c_char;\n-\n // SAFETY: must be called only once during runtime initialization.\n // NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n pub unsafe fn init(_argc: isize, _argv: *const *const u8) {}\n@@ -38,15 +34,3 @@ pub fn abort_internal() -> ! {\n pub fn hashmap_random_keys() -> (u64, u64) {\n     (1, 2)\n }\n-\n-pub unsafe fn strlen(mut s: *const c_char) -> usize {\n-    // SAFETY: The caller must guarantee `s` points to a valid 0-terminated string.\n-    unsafe {\n-        let mut n = 0;\n-        while *s != 0 {\n-            n += 1;\n-            s = s.offset(1);\n-        }\n-        n\n-    }\n-}"}, {"sha": "31c7208bbf1eef3951d9a87cbd85b387ef036730", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6eaec56ef79c605e90664eb25f66c75ae8bd60c9/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eaec56ef79c605e90664eb25f66c75ae8bd60c9/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=6eaec56ef79c605e90664eb25f66c75ae8bd60c9", "patch": "@@ -7,7 +7,6 @@ use crate::path::PathBuf;\n use crate::time::Duration;\n \n pub use self::rand::hashmap_random_keys;\n-pub use libc::strlen;\n \n #[macro_use]\n pub mod compat;"}]}