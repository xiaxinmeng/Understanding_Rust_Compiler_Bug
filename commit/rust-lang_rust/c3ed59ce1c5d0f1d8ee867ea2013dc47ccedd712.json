{"sha": "c3ed59ce1c5d0f1d8ee867ea2013dc47ccedd712", "node_id": "C_kwDOAAsO6NoAKGMzZWQ1OWNlMWM1ZDBmMWQ4ZWU4NjdlYTIwMTNkYzQ3Y2NlZGQ3MTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-05T12:25:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-05T12:25:27Z"}, "message": "Auto merge of #14493 - lowr:fix/ws-between-text-and-pound, r=Veykril\n\nfix: insert whitespace between text and pound\n\nBecause `text#`, `text\"...\"`, and `text'...'` are [reserved syntax since Rust 2021][guide]. Note that the latter two are already handled correctly.\n\nFixes #14487\n\n[guide]: https://doc.rust-lang.org/edition-guide/rust-2021/reserving-syntax.html", "tree": {"sha": "e3a637b96fe5d2fc8c6433ad94d920f027e53e3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3a637b96fe5d2fc8c6433ad94d920f027e53e3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3ed59ce1c5d0f1d8ee867ea2013dc47ccedd712", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ed59ce1c5d0f1d8ee867ea2013dc47ccedd712", "html_url": "https://github.com/rust-lang/rust/commit/c3ed59ce1c5d0f1d8ee867ea2013dc47ccedd712", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3ed59ce1c5d0f1d8ee867ea2013dc47ccedd712/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af306567858b9456870d33963673d4711dff9ec2", "url": "https://api.github.com/repos/rust-lang/rust/commits/af306567858b9456870d33963673d4711dff9ec2", "html_url": "https://github.com/rust-lang/rust/commit/af306567858b9456870d33963673d4711dff9ec2"}, {"sha": "0df9fb22d8f6dacc01eabb6ff0bd3babcb03e6eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0df9fb22d8f6dacc01eabb6ff0bd3babcb03e6eb", "html_url": "https://github.com/rust-lang/rust/commit/0df9fb22d8f6dacc01eabb6ff0bd3babcb03e6eb"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "626f2060b2331dd3a0aaeb26cc40f12558b593b8", "filename": "crates/ide-assists/src/handlers/inline_macro.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c3ed59ce1c5d0f1d8ee867ea2013dc47ccedd712/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ed59ce1c5d0f1d8ee867ea2013dc47ccedd712/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_macro.rs?ref=c3ed59ce1c5d0f1d8ee867ea2013dc47ccedd712", "patch": "@@ -254,4 +254,49 @@ fn f() { if true{}; }\n \"#,\n         )\n     }\n+\n+    #[test]\n+    fn whitespace_between_text_and_pound() {\n+        check_assist(\n+            inline_macro,\n+            r#\"\n+macro_rules! foo {\n+    () => {\n+        cfg_if! {\n+            if #[cfg(test)] {\n+                1;\n+            } else {\n+                1;\n+            }\n+        }\n+    }\n+}\n+fn main() {\n+    $0foo!();\n+}\n+\"#,\n+            r#\"\n+macro_rules! foo {\n+    () => {\n+        cfg_if! {\n+            if #[cfg(test)] {\n+                1;\n+            } else {\n+                1;\n+            }\n+        }\n+    }\n+}\n+fn main() {\n+    cfg_if!{\n+  if #[cfg(test)]{\n+    1;\n+  }else {\n+    1;\n+  }\n+};\n+}\n+\"#,\n+        );\n+    }\n }"}, {"sha": "0b0fc6693526f32ec1b739a24a24becf91bcd6fb", "filename": "crates/ide-db/src/syntax_helpers/insert_whitespace_into_node.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ed59ce1c5d0f1d8ee867ea2013dc47ccedd712/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Finsert_whitespace_into_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ed59ce1c5d0f1d8ee867ea2013dc47ccedd712/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Finsert_whitespace_into_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Finsert_whitespace_into_node.rs?ref=c3ed59ce1c5d0f1d8ee867ea2013dc47ccedd712", "patch": "@@ -60,7 +60,9 @@ pub fn insert_ws_into(syn: SyntaxNode) -> SyntaxNode {\n             |f: fn(SyntaxKind) -> bool, default| -> bool { last.map(f).unwrap_or(default) };\n \n         match tok.kind() {\n-            k if is_text(k) && is_next(|it| !it.is_punct() || it == UNDERSCORE, false) => {\n+            k if is_text(k)\n+                && is_next(|it| !it.is_punct() || matches!(it, T![_] | T![#]), false) =>\n+            {\n                 mods.push(do_ws(after, tok));\n             }\n             L_CURLY if is_next(|it| it != R_CURLY, true) => {"}]}