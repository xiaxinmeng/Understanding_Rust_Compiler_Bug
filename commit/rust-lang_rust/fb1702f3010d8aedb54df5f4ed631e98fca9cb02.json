{"sha": "fb1702f3010d8aedb54df5f4ed631e98fca9cb02", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMTcwMmYzMDEwZDhhZWRiNTRkZjVmNGVkNjMxZTk4ZmNhOWNiMDI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-07T14:00:04Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-07T18:52:59Z"}, "message": "compute liveness later", "tree": {"sha": "9a5f75d01aa14462165f61458007214baff94480", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a5f75d01aa14462165f61458007214baff94480"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb1702f3010d8aedb54df5f4ed631e98fca9cb02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb1702f3010d8aedb54df5f4ed631e98fca9cb02", "html_url": "https://github.com/rust-lang/rust/commit/fb1702f3010d8aedb54df5f4ed631e98fca9cb02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb1702f3010d8aedb54df5f4ed631e98fca9cb02/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccb550fb455eac46098b352875ba387eb982919d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccb550fb455eac46098b352875ba387eb982919d", "html_url": "https://github.com/rust-lang/rust/commit/ccb550fb455eac46098b352875ba387eb982919d"}], "stats": {"total": 95, "additions": 55, "deletions": 40}, "files": [{"sha": "262d4a5cd3dabc09d91113af81d143d0d969afd5", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fb1702f3010d8aedb54df5f4ed631e98fca9cb02/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb1702f3010d8aedb54df5f4ed631e98fca9cb02/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=fb1702f3010d8aedb54df5f4ed631e98fca9cb02", "patch": "@@ -11,7 +11,7 @@\n use borrow_check::borrow_set::BorrowSet;\n use borrow_check::location::{LocationIndex, LocationTable};\n use borrow_check::nll::facts::AllFactsExt;\n-use borrow_check::nll::type_check::MirTypeckRegionConstraints;\n+use borrow_check::nll::type_check::{MirTypeckResults, MirTypeckRegionConstraints};\n use borrow_check::nll::region_infer::values::RegionValueElements;\n use borrow_check::nll::liveness_map::{NllLivenessMap, LocalWithRegion};\n use dataflow::indexes::BorrowIndex;\n@@ -109,17 +109,19 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     let elements = &Rc::new(RegionValueElements::new(mir));\n \n     // Run the MIR type-checker.\n-    let liveness_map = NllLivenessMap::compute(&mir);\n-    let liveness = LivenessResults::compute(mir, &liveness_map);\n-    let (constraint_sets, universal_region_relations) = type_check::type_check(\n+    let MirTypeckResults {\n+        constraints,\n+        universal_region_relations,\n+        liveness,\n+        liveness_map,\n+    } = type_check::type_check(\n         infcx,\n         param_env,\n         mir,\n         def_id,\n         &universal_regions,\n         location_table,\n         borrow_set,\n-        &liveness,\n         &mut all_facts,\n         flow_inits,\n         move_data,\n@@ -141,7 +143,7 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n         mut liveness_constraints,\n         outlives_constraints,\n         type_tests,\n-    } = constraint_sets;\n+    } = constraints;\n \n     constraint_generation::generate_constraints(\n         infcx,\n@@ -205,6 +207,7 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     dump_mir_results(\n         infcx,\n         &liveness,\n+        &liveness_map,\n         MirSource::item(def_id),\n         &mir,\n         &regioncx,\n@@ -221,6 +224,7 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n fn dump_mir_results<'a, 'gcx, 'tcx>(\n     infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n     liveness: &LivenessResults<LocalWithRegion>,\n+    liveness_map: &NllLivenessMap,\n     source: MirSource,\n     mir: &Mir<'tcx>,\n     regioncx: &RegionInferenceContext,\n@@ -230,16 +234,14 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n         return;\n     }\n \n-    let map = &NllLivenessMap::compute(mir);\n-\n     let regular_liveness_per_location: FxHashMap<_, _> = mir\n         .basic_blocks()\n         .indices()\n         .flat_map(|bb| {\n             let mut results = vec![];\n             liveness\n                 .regular\n-                .simulate_block(&mir, bb, map, |location, local_set| {\n+                .simulate_block(&mir, bb, liveness_map, |location, local_set| {\n                     results.push((location, local_set.clone()));\n                 });\n             results\n@@ -253,7 +255,7 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n             let mut results = vec![];\n             liveness\n                 .drop\n-                .simulate_block(&mir, bb, map, |location, local_set| {\n+                .simulate_block(&mir, bb, liveness_map, |location, local_set| {\n                     results.push((location, local_set.clone()));\n                 });\n             results"}, {"sha": "f15881ee3c89f668b3d3b492e2a0e6a0b837aa6e", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fb1702f3010d8aedb54df5f4ed631e98fca9cb02/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb1702f3010d8aedb54df5f4ed631e98fca9cb02/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs?ref=fb1702f3010d8aedb54df5f4ed631e98fca9cb02", "patch": "@@ -36,23 +36,29 @@ use super::TypeChecker;\n pub(super) fn generate<'gcx, 'tcx>(\n     cx: &mut TypeChecker<'_, 'gcx, 'tcx>,\n     mir: &Mir<'tcx>,\n-    liveness: &LivenessResults<LocalWithRegion>,\n     flow_inits: &mut FlowAtLocation<MaybeInitializedPlaces<'_, 'gcx, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n-) {\n-    let mut generator = TypeLivenessGenerator {\n-        cx,\n-        mir,\n-        liveness,\n-        flow_inits,\n-        move_data,\n-        drop_data: FxHashMap(),\n-        map: &NllLivenessMap::compute(mir),\n-    };\n-\n-    for bb in mir.basic_blocks().indices() {\n-        generator.add_liveness_constraints(bb);\n+) -> (LivenessResults<LocalWithRegion>, NllLivenessMap) {\n+    let liveness_map = NllLivenessMap::compute(&mir);\n+    let liveness = LivenessResults::compute(mir, &liveness_map);\n+\n+    {\n+        let mut generator = TypeLivenessGenerator {\n+            cx,\n+            mir,\n+            liveness: &liveness,\n+            flow_inits,\n+            move_data,\n+            drop_data: FxHashMap(),\n+            map: &liveness_map,\n+        };\n+\n+        for bb in mir.basic_blocks().indices() {\n+            generator.add_liveness_constraints(bb);\n+        }\n     }\n+\n+    (liveness, liveness_map)\n }\n \n struct TypeLivenessGenerator<'gen, 'typeck, 'flow, 'gcx, 'tcx>"}, {"sha": "4ca84df445e79dd47aab9f4de3e7234d1176c5c3", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fb1702f3010d8aedb54df5f4ed631e98fca9cb02/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb1702f3010d8aedb54df5f4ed631e98fca9cb02/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=fb1702f3010d8aedb54df5f4ed631e98fca9cb02", "patch": "@@ -15,6 +15,7 @@ use borrow_check::borrow_set::BorrowSet;\n use borrow_check::location::LocationTable;\n use borrow_check::nll::constraints::{ConstraintSet, OutlivesConstraint};\n use borrow_check::nll::facts::AllFacts;\n+use borrow_check::nll::liveness_map::NllLivenessMap;\n use borrow_check::nll::region_infer::values::{RegionValueElements, LivenessValues};\n use borrow_check::nll::region_infer::{ClosureRegionRequirementsExt, TypeTest};\n use borrow_check::nll::type_check::free_region_relations::{CreateResult, UniversalRegionRelations};\n@@ -115,16 +116,12 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n     universal_regions: &Rc<UniversalRegions<'tcx>>,\n     location_table: &LocationTable,\n     borrow_set: &BorrowSet<'tcx>,\n-    liveness: &LivenessResults<LocalWithRegion>,\n     all_facts: &mut Option<AllFacts>,\n     flow_inits: &mut FlowAtLocation<MaybeInitializedPlaces<'_, 'gcx, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n     elements: &Rc<RegionValueElements>,\n     errors_buffer: &mut Vec<Diagnostic>,\n-) -> (\n-    MirTypeckRegionConstraints<'tcx>,\n-    Rc<UniversalRegionRelations<'tcx>>,\n-) {\n+) -> MirTypeckResults<'tcx> {\n     let implicit_region_bound = infcx.tcx.mk_region(ty::ReVar(universal_regions.fr_fn_body));\n     let mut constraints = MirTypeckRegionConstraints {\n         liveness_constraints: LivenessValues::new(elements),\n@@ -147,7 +144,7 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n         all_facts,\n     );\n \n-    {\n+    let (liveness, liveness_map) = {\n         let mut borrowck_context = BorrowCheckContext {\n             universal_regions,\n             location_table,\n@@ -166,22 +163,27 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n             Some(&mut borrowck_context),\n             Some(errors_buffer),\n             |cx| {\n-                liveness::generate(cx, mir, liveness, flow_inits, move_data);\n                 cx.equate_inputs_and_outputs(\n                     mir,\n                     mir_def_id,\n                     universal_regions,\n                     &universal_region_relations,\n                     &normalized_inputs_and_output,\n                 );\n+                liveness::generate(cx, mir, flow_inits, move_data)\n             },\n-        );\n-    }\n+        )\n+    };\n \n-    (constraints, universal_region_relations)\n+    MirTypeckResults {\n+        constraints,\n+        universal_region_relations,\n+        liveness,\n+        liveness_map,\n+    }\n }\n \n-fn type_check_internal<'a, 'gcx, 'tcx, F>(\n+fn type_check_internal<'a, 'gcx, 'tcx, R>(\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n     mir_def_id: DefId,\n     param_env: ty::ParamEnv<'gcx>,\n@@ -190,10 +192,8 @@ fn type_check_internal<'a, 'gcx, 'tcx, F>(\n     implicit_region_bound: Option<ty::Region<'tcx>>,\n     borrowck_context: Option<&'a mut BorrowCheckContext<'a, 'tcx>>,\n     errors_buffer: Option<&mut Vec<Diagnostic>>,\n-    mut extra: F,\n-) where\n-    F: FnMut(&mut TypeChecker<'a, 'gcx, 'tcx>),\n-{\n+    mut extra: impl FnMut(&mut TypeChecker<'a, 'gcx, 'tcx>) -> R,\n+) -> R where {\n     let mut checker = TypeChecker::new(\n         infcx,\n         mir,\n@@ -214,7 +214,7 @@ fn type_check_internal<'a, 'gcx, 'tcx, F>(\n         checker.typeck_mir(mir, errors_buffer);\n     }\n \n-    extra(&mut checker);\n+    extra(&mut checker)\n }\n \n fn mirbug(tcx: TyCtxt, span: Span, msg: &str) {\n@@ -655,6 +655,13 @@ struct BorrowCheckContext<'a, 'tcx: 'a> {\n     constraints: &'a mut MirTypeckRegionConstraints<'tcx>,\n }\n \n+crate struct MirTypeckResults<'tcx> {\n+    crate constraints: MirTypeckRegionConstraints<'tcx>,\n+    crate universal_region_relations: Rc<UniversalRegionRelations<'tcx>>,\n+    crate liveness: LivenessResults<LocalWithRegion>,\n+    crate liveness_map: NllLivenessMap,\n+}\n+\n /// A collection of region constraints that must be satisfied for the\n /// program to be considered well-typed.\n crate struct MirTypeckRegionConstraints<'tcx> {"}]}