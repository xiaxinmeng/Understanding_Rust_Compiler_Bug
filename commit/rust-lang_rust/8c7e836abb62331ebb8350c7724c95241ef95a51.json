{"sha": "8c7e836abb62331ebb8350c7724c95241ef95a51", "node_id": "C_kwDOAAsO6NoAKDhjN2U4MzZhYmI2MjMzMWViYjgzNTBjNzcyNGM5NTI0MWVmOTVhNTE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-14T04:55:07Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-14T05:47:09Z"}, "message": "Address nits, add test for implicit dyn-star coercion without feature gate", "tree": {"sha": "b5ffb3822dc316424fc0e918e223434dfd510218", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5ffb3822dc316424fc0e918e223434dfd510218"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c7e836abb62331ebb8350c7724c95241ef95a51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c7e836abb62331ebb8350c7724c95241ef95a51", "html_url": "https://github.com/rust-lang/rust/commit/8c7e836abb62331ebb8350c7724c95241ef95a51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c7e836abb62331ebb8350c7724c95241ef95a51/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cb217d29b6cd9a67fc493a12a5754ed9d21671a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cb217d29b6cd9a67fc493a12a5754ed9d21671a", "html_url": "https://github.com/rust-lang/rust/commit/0cb217d29b6cd9a67fc493a12a5754ed9d21671a"}], "stats": {"total": 53, "additions": 50, "deletions": 3}, "files": [{"sha": "0ca6408aab910b96eec1e3df867597d88813c785", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8c7e836abb62331ebb8350c7724c95241ef95a51/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7e836abb62331ebb8350c7724c95241ef95a51/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=8c7e836abb62331ebb8350c7724c95241ef95a51", "patch": "@@ -270,8 +270,11 @@ pub fn cast_to_dyn_star<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     dst_ty: Ty<'tcx>,\n     old_info: Option<Bx::Value>,\n ) -> (Bx::Value, Bx::Value) {\n-    debug!(\"unsize_ptr: {:?} => {:?}\", src_ty_and_layout.ty, dst_ty);\n-    assert!(matches!(dst_ty.kind(), ty::Dynamic(_, _, ty::DynStar)));\n+    debug!(\"cast_to_dyn_star: {:?} => {:?}\", src_ty_and_layout.ty, dst_ty);\n+    assert!(\n+        matches!(dst_ty.kind(), ty::Dynamic(_, _, ty::DynStar)),\n+        \"destination type must be a dyn*\"\n+    );\n     // FIXME(dyn-star): this is probably not the best way to check if this is\n     // a pointer, and really we should ensure that the value is a suitable\n     // pointer earlier in the compilation process."}, {"sha": "faa6c6d9356f44e5b6cee08b428a1e953ce3cd91", "filename": "compiler/rustc_hir_analysis/src/check/coercion.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c7e836abb62331ebb8350c7724c95241ef95a51/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7e836abb62331ebb8350c7724c95241ef95a51/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcoercion.rs?ref=8c7e836abb62331ebb8350c7724c95241ef95a51", "patch": "@@ -777,6 +777,8 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             }\n         }\n \n+        // Check the obligations of the cast -- for example, when casting\n+        // `usize` to `dyn* Clone + 'static`:\n         let obligations = predicates\n             .iter()\n             .map(|predicate| {\n@@ -787,7 +789,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 let predicate = predicate.with_self_ty(self.tcx, a);\n                 Obligation::new(self.cause.clone(), self.param_env, predicate)\n             })\n-            // Enforce the region bound `'static` (e.g., `usize: 'static`, in our example).\n+            // Enforce the region bound (e.g., `usize: 'static`, in our example).\n             .chain([Obligation::new(\n                 self.cause.clone(),\n                 self.param_env,"}, {"sha": "7673c793678336a730bb97f0f87002010e1cd433", "filename": "src/test/ui/dyn-star/auxiliary/dyn-star-foreign.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8c7e836abb62331ebb8350c7724c95241ef95a51/src%2Ftest%2Fui%2Fdyn-star%2Fauxiliary%2Fdyn-star-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7e836abb62331ebb8350c7724c95241ef95a51/src%2Ftest%2Fui%2Fdyn-star%2Fauxiliary%2Fdyn-star-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fauxiliary%2Fdyn-star-foreign.rs?ref=8c7e836abb62331ebb8350c7724c95241ef95a51", "patch": "@@ -0,0 +1,10 @@\n+#![feature(dyn_star)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Display;\n+\n+pub fn require_dyn_star_display(_: dyn* Display) {}\n+\n+fn works_locally() {\n+    require_dyn_star_display(1usize);\n+}"}, {"sha": "e5255a64ba119992b5956705ede4b698d7f5ea7e", "filename": "src/test/ui/dyn-star/make-dyn-star.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c7e836abb62331ebb8350c7724c95241ef95a51/src%2Ftest%2Fui%2Fdyn-star%2Fmake-dyn-star.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7e836abb62331ebb8350c7724c95241ef95a51/src%2Ftest%2Fui%2Fdyn-star%2Fmake-dyn-star.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fmake-dyn-star.rs?ref=8c7e836abb62331ebb8350c7724c95241ef95a51", "patch": "@@ -8,6 +8,11 @@ fn make_dyn_star(i: usize) {\n     let _dyn_i: dyn* Debug = i;\n }\n \n+fn make_dyn_star_explicit(i: usize) {\n+    let _dyn_i: dyn* Debug = i as dyn* Debug;\n+}\n+\n fn main() {\n     make_dyn_star(42);\n+    make_dyn_star_explicit(42);\n }"}, {"sha": "d9470e2841770d2828a39cc5346e0e638d3835e1", "filename": "src/test/ui/dyn-star/no-implicit-dyn-star.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8c7e836abb62331ebb8350c7724c95241ef95a51/src%2Ftest%2Fui%2Fdyn-star%2Fno-implicit-dyn-star.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7e836abb62331ebb8350c7724c95241ef95a51/src%2Ftest%2Fui%2Fdyn-star%2Fno-implicit-dyn-star.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fno-implicit-dyn-star.rs?ref=8c7e836abb62331ebb8350c7724c95241ef95a51", "patch": "@@ -0,0 +1,8 @@\n+// aux-build:dyn-star-foreign.rs\n+\n+extern crate dyn_star_foreign;\n+\n+fn main() {\n+    dyn_star_foreign::require_dyn_star_display(1usize);\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "e7c5918629bdc35f71dca040e4138e2af5270043", "filename": "src/test/ui/dyn-star/no-implicit-dyn-star.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8c7e836abb62331ebb8350c7724c95241ef95a51/src%2Ftest%2Fui%2Fdyn-star%2Fno-implicit-dyn-star.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c7e836abb62331ebb8350c7724c95241ef95a51/src%2Ftest%2Fui%2Fdyn-star%2Fno-implicit-dyn-star.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fno-implicit-dyn-star.stderr?ref=8c7e836abb62331ebb8350c7724c95241ef95a51", "patch": "@@ -0,0 +1,19 @@\n+error[E0308]: mismatched types\n+  --> $DIR/no-implicit-dyn-star.rs:6:48\n+   |\n+LL |     dyn_star_foreign::require_dyn_star_display(1usize);\n+   |     ------------------------------------------ ^^^^^^ expected trait object `dyn std::fmt::Display`, found `usize`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected trait object `(dyn* std::fmt::Display + 'static)`\n+                      found type `usize`\n+note: function defined here\n+  --> $DIR/auxiliary/dyn-star-foreign.rs:6:8\n+   |\n+LL | pub fn require_dyn_star_display(_: dyn* Display) {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}