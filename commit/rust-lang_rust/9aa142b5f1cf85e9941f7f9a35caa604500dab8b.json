{"sha": "9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "node_id": "C_kwDOAAsO6NoAKDlhYTE0MmI1ZjFjZjg1ZTk5NDFmN2Y5YTM1Y2FhNjA0NTAwZGFiOGI", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-06-30T10:18:51Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-12T17:00:14Z"}, "message": "Fix clippy build", "tree": {"sha": "3d6617b54ca3197a0c4d1003f66b3a67fc14aa03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d6617b54ca3197a0c4d1003f66b3a67fc14aa03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "html_url": "https://github.com/rust-lang/rust/commit/9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30a3673478e224f74d5520ed24c3a9223fe82fad", "url": "https://api.github.com/repos/rust-lang/rust/commits/30a3673478e224f74d5520ed24c3a9223fe82fad", "html_url": "https://github.com/rust-lang/rust/commit/30a3673478e224f74d5520ed24c3a9223fe82fad"}], "stats": {"total": 133, "additions": 71, "deletions": 62}, "files": [{"sha": "ad206b5fb304f04e3e79a465eff631cadae1da64", "filename": "src/tools/clippy/clippy_lints/src/blocks_in_if_conditions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -6,7 +6,7 @@ use clippy_utils::ty::implements_trait;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n-use rustc_hir::{BlockCheckMode, Expr, ExprKind};\n+use rustc_hir::{BlockCheckMode, Closure, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -51,7 +51,7 @@ struct ExVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n-        if let ExprKind::Closure { body, .. } = expr.kind {\n+        if let ExprKind::Closure(&Closure { body, .. }) = expr.kind {\n             // do not lint if the closure is called using an iterator (see #1141)\n             if_chain! {\n                 if let Some(parent) = get_parent_expr(self.cx, expr);"}, {"sha": "326ce34082af7c233b8f2d1dc44cc185a81fdb08", "filename": "src/tools/clippy/clippy_lints/src/bytecount.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbytecount.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::visitors::is_local_used;\n use clippy_utils::{path_to_local_id, paths, peel_blocks, peel_ref_operators, strip_pat_refs};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{BinOpKind, Expr, ExprKind, PatKind};\n+use rustc_hir::{BinOpKind, Closure, Expr, ExprKind, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, UintTy};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -51,7 +51,7 @@ impl<'tcx> LateLintPass<'tcx> for ByteCount {\n             if count.ident.name == sym::count;\n             if let ExprKind::MethodCall(filter, [filter_recv, filter_arg], _) = count_recv.kind;\n             if filter.ident.name == sym!(filter);\n-            if let ExprKind::Closure { body, .. } = filter_arg.kind;\n+            if let ExprKind::Closure(&Closure { body, .. }) = filter_arg.kind;\n             let body = cx.tcx.hir().body(body);\n             if let [param] = body.params;\n             if let PatKind::Binding(_, arg_id, _, _) = strip_pat_refs(param.pat).kind;"}, {"sha": "80c84014bfdeb7c864c2ceab833c52bd50b27f26", "filename": "src/tools/clippy/clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -7,7 +7,7 @@ use clippy_utils::{higher, is_adjusted, path_to_local, path_to_local_id};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::{Expr, ExprKind, Param, PatKind, Unsafety};\n+use rustc_hir::{Closure, Expr, ExprKind, Param, PatKind, Unsafety};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n use rustc_middle::ty::binding::BindingMode;\n@@ -78,7 +78,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n             return;\n         }\n         let body = match expr.kind {\n-            ExprKind::Closure { body, .. } => cx.tcx.hir().body(body),\n+            ExprKind::Closure(&Closure { body, .. }) => cx.tcx.hir().body(body),\n             _ => return,\n         };\n         if body.value.span.from_expansion() {"}, {"sha": "01c7eef4e04da87e91fbf45433b532b3911b3600", "filename": "src/tools/clippy/clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finfinite_iter.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use clippy_utils::{higher, match_def_path, path_def_id, paths};\n-use rustc_hir::{BorrowKind, Expr, ExprKind};\n+use rustc_hir::{BorrowKind, Closure, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::{sym, Symbol};\n@@ -159,7 +159,7 @@ fn is_infinite(cx: &LateContext<'_>, expr: &Expr<'_>) -> Finiteness {\n                 }\n             }\n             if method.ident.name == sym!(flat_map) && args.len() == 2 {\n-                if let ExprKind::Closure { body, .. } = args[1].kind {\n+                if let ExprKind::Closure(&Closure { body, .. }) = args[1].kind {\n                     let body = cx.tcx.hir().body(body);\n                     return is_infinite(cx, &body.value);\n                 }"}, {"sha": "a7ef562b21fc48880a253b2d8a612920f550832f", "filename": "src/tools/clippy/clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -9,7 +9,7 @@ use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit::{walk_expr, Visitor};\n-use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, HirId, Mutability, Pat, PatKind, QPath};\n+use rustc_hir::{BinOpKind, BorrowKind, Closure, Expr, ExprKind, HirId, Mutability, Pat, PatKind, QPath};\n use rustc_lint::LateContext;\n use rustc_middle::middle::region;\n use rustc_middle::ty::{self, Ty};\n@@ -369,7 +369,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                     self.visit_expr(expr);\n                 }\n             },\n-            ExprKind::Closure { body, .. } => {\n+            ExprKind::Closure(&Closure { body, .. }) => {\n                 let body = self.cx.tcx.hir().body(body);\n                 self.visit_expr(&body.value);\n             },"}, {"sha": "b94bbd2bd417de88fe6293b832cc79183cda7130", "filename": "src/tools/clippy/clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -8,7 +8,7 @@ use clippy_utils::{\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n-use rustc_hir::{def::Res, Expr, ExprKind, HirId, Local, Mutability, PatKind, QPath, UnOp};\n+use rustc_hir::{Closure, def::Res, Expr, ExprKind, HirId, Local, Mutability, PatKind, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_middle::ty::adjustment::Adjust;\n use rustc_span::{symbol::sym, Symbol};\n@@ -220,7 +220,7 @@ fn uses_iter<'tcx>(cx: &LateContext<'tcx>, iter_expr: &IterExpr, container: &'tc\n                 if let Some(e) = e {\n                     self.visit_expr(e);\n                 }\n-            } else if let ExprKind::Closure { body: id, .. } = e.kind {\n+            } else if let ExprKind::Closure(&Closure { body: id, .. }) = e.kind {\n                 if is_res_used(self.cx, self.iter_expr.path, id) {\n                     self.uses_iter = true;\n                 }\n@@ -260,7 +260,7 @@ fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &\n                     if let Some(e) = e {\n                         self.visit_expr(e);\n                     }\n-                } else if let ExprKind::Closure { body: id, .. } = e.kind {\n+                } else if let ExprKind::Closure(&Closure { body: id, .. }) = e.kind {\n                     self.used_iter = is_res_used(self.cx, self.iter_expr.path, id);\n                 } else {\n                     walk_expr(self, e);\n@@ -307,7 +307,7 @@ fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &\n                     if let Some(e) = e {\n                         self.visit_expr(e);\n                     }\n-                } else if let ExprKind::Closure { body: id, .. } = e.kind {\n+                } else if let ExprKind::Closure(&Closure { body: id, .. }) = e.kind {\n                     self.used_after = is_res_used(self.cx, self.iter_expr.path, id);\n                 } else {\n                     walk_expr(self, e);"}, {"sha": "93a34f452f6d67d8ee79c25568ce62484e4f733c", "filename": "src/tools/clippy/clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -6,7 +6,7 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n-    AsyncGeneratorKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, GeneratorKind, GenericArg, GenericBound, HirId,\n+    AsyncGeneratorKind, Block, Body, Closure, Expr, ExprKind, FnDecl, FnRetTy, GeneratorKind, GenericArg, GenericBound, HirId,\n     IsAsync, ItemKind, LifetimeName, Term, TraitRef, Ty, TyKind, TypeBindingKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n@@ -177,7 +177,7 @@ fn desugared_async_block<'tcx>(cx: &LateContext<'tcx>, block: &'tcx Block<'tcx>)\n         if let Some(block_expr) = block.expr;\n         if let Some(args) = match_function_call(cx, block_expr, &FUTURE_FROM_GENERATOR);\n         if args.len() == 1;\n-        if let Expr{kind: ExprKind::Closure { body, .. }, ..} = args[0];\n+        if let Expr{kind: ExprKind::Closure(&Closure { body, .. }), ..} = args[0];\n         let closure_body = cx.tcx.hir().body(body);\n         if closure_body.generator_kind == Some(GeneratorKind::Async(AsyncGeneratorKind::Block));\n         then {"}, {"sha": "9abf2507b921c79f915e779d02e0adfeb774fd73", "filename": "src/tools/clippy/clippy_lints/src/manual_ok_or.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_ok_or.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::{is_lang_ctor, path_to_local_id};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::LangItem::{ResultErr, ResultOk};\n-use rustc_hir::{Expr, ExprKind, PatKind};\n+use rustc_hir::{Closure, Expr, ExprKind, PatKind};\n use rustc_lint::LintContext;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n@@ -88,7 +88,7 @@ fn is_ok_wrapping(cx: &LateContext<'_>, map_expr: &Expr<'_>) -> bool {\n         }\n     }\n     if_chain! {\n-        if let ExprKind::Closure { body, .. } = map_expr.kind;\n+        if let ExprKind::Closure(&Closure { body, .. }) = map_expr.kind;\n         let body = cx.tcx.hir().body(body);\n         if let PatKind::Binding(_, param_id, ..) = body.params[0].pat.kind;\n         if let ExprKind::Call(Expr { kind: ExprKind::Path(ok_path), .. }, &[ref ok_arg]) = body.value.kind;"}, {"sha": "42d2577cc3161f48cb1242d23d88b9633dc64fa4", "filename": "src/tools/clippy/clippy_lints/src/manual_retain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_retain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_retain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_retain.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -148,7 +148,7 @@ fn check_to_owned(\n \n fn suggest(cx: &LateContext<'_>, parent_expr: &hir::Expr<'_>, left_expr: &hir::Expr<'_>, filter_expr: &hir::Expr<'_>) {\n     if let hir::ExprKind::MethodCall(_, [_, closure], _) = filter_expr.kind\n-        && let hir::ExprKind::Closure{ body, ..} = closure.kind\n+        && let hir::ExprKind::Closure(&hir::Closure { body, ..}) = closure.kind\n         && let filter_body = cx.tcx.hir().body(body)\n         && let [filter_params] = filter_body.params\n         && let Some(sugg) = match filter_params.pat.kind {"}, {"sha": "95c312f1fe26b19216c0573697d3ca5cca040920", "filename": "src/tools/clippy/clippy_lints/src/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_clone.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -67,7 +67,7 @@ impl<'tcx> LateLintPass<'tcx> for MapClone {\n             if method.ident.name == sym::map;\n             let ty = cx.typeck_results().expr_ty(&args[0]);\n             if is_type_diagnostic_item(cx, ty, sym::Option) || is_trait_method(cx, e, sym::Iterator);\n-            if let hir::ExprKind::Closure { body, .. } = args[1].kind;\n+            if let hir::ExprKind::Closure(&hir::Closure { body, .. }) = args[1].kind;\n             then {\n                 let closure_body = cx.tcx.hir().body(body);\n                 let closure_expr = peel_blocks(&closure_body.value);"}, {"sha": "21d0e19eb0a489998a98b2ebcee90f9f514b86a1", "filename": "src/tools/clippy/clippy_lints/src/map_err_ignore.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_err_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_err_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_err_ignore.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use rustc_hir::{CaptureBy, Expr, ExprKind, PatKind};\n+use rustc_hir::{CaptureBy, Closure, Expr, ExprKind, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -119,12 +119,12 @@ impl<'tcx> LateLintPass<'tcx> for MapErrIgnore {\n             if method.ident.as_str() == \"map_err\" && args.len() == 2 {\n                 // make sure the first argument is a closure, and grab the CaptureRef, BodyId, and fn_decl_span\n                 // fields\n-                if let ExprKind::Closure {\n+                if let ExprKind::Closure(&Closure {\n                     capture_clause,\n                     body,\n                     fn_decl_span,\n                     ..\n-                } = args[1].kind\n+                }) = args[1].kind\n                 {\n                     // check if this is by Reference (meaning there's no move statement)\n                     if capture_clause == CaptureBy::Ref {"}, {"sha": "af9d948af00e68e7425f3166e5f09f5da7fd01a2", "filename": "src/tools/clippy/clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -169,7 +169,7 @@ fn unit_closure<'tcx>(\n     expr: &hir::Expr<'_>,\n ) -> Option<(&'tcx hir::Param<'tcx>, &'tcx hir::Expr<'tcx>)> {\n     if_chain! {\n-        if let hir::ExprKind::Closure { fn_decl, body, .. } = expr.kind;\n+        if let hir::ExprKind::Closure(&hir::Closure { fn_decl, body, .. }) = expr.kind;\n         let body = cx.tcx.hir().body(body);\n         let body_expr = &body.value;\n         if fn_decl.inputs.len() == 1;"}, {"sha": "2f117e4dcc3746abd71f918d0e3efa88661a9c0f", "filename": "src/tools/clippy/clippy_lints/src/methods/bind_instead_of_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -150,7 +150,7 @@ pub(crate) trait BindInsteadOfMap {\n         }\n \n         match arg.kind {\n-            hir::ExprKind::Closure { body, fn_decl_span, .. } => {\n+            hir::ExprKind::Closure(&hir::Closure { body, fn_decl_span, .. }) => {\n                 let closure_body = cx.tcx.hir().body(body);\n                 let closure_expr = peel_blocks(&closure_body.value);\n "}, {"sha": "7dbfd95c50db40d1e0215690e6eff7d1f7ca942f", "filename": "src/tools/clippy/clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -6,7 +6,7 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n-use rustc_hir::{Expr, ExprKind, PatKind, PathSegment, QPath, UnOp};\n+use rustc_hir::{Closure, Expr, ExprKind, PatKind, PathSegment, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, Symbol};\n@@ -22,8 +22,8 @@ fn is_method<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, method_name: Sy\n         hir::ExprKind::Path(QPath::Resolved(_, segments)) => {\n             segments.segments.last().unwrap().ident.name == method_name\n         },\n-        hir::ExprKind::Closure { body, .. } => {\n-            let body = cx.tcx.hir().body(*body);\n+        hir::ExprKind::Closure(&hir::Closure { body, .. }) => {\n+            let body = cx.tcx.hir().body(body);\n             let closure_expr = peel_blocks(&body.value);\n             let arg_id = body.params[0].pat.hir_id;\n             match closure_expr.kind {\n@@ -106,7 +106,7 @@ pub(super) fn check<'tcx>(\n             if is_trait_method(cx, map_recv, sym::Iterator);\n \n             // filter(|x| ...is_some())...\n-            if let ExprKind::Closure { body: filter_body_id, .. } = filter_arg.kind;\n+            if let ExprKind::Closure(&Closure { body: filter_body_id, .. }) = filter_arg.kind;\n             let filter_body = cx.tcx.hir().body(filter_body_id);\n             if let [filter_param] = filter_body.params;\n             // optional ref pattern: `filter(|&x| ..)`\n@@ -129,7 +129,7 @@ pub(super) fn check<'tcx>(\n             if path.ident.name.as_str() == if is_result { \"is_ok\" } else { \"is_some\" };\n \n             // ...map(|x| ...unwrap())\n-            if let ExprKind::Closure { body: map_body_id, .. } = map_arg.kind;\n+            if let ExprKind::Closure(&Closure { body: map_body_id, .. }) = map_arg.kind;\n             let map_body = cx.tcx.hir().body(map_body_id);\n             if let [map_param] = map_body.params;\n             if let PatKind::Binding(_, map_param_id, map_param_ident, None) = map_param.pat.kind;"}, {"sha": "20cad0f181e951dcb22d5b69cc7a90c717eef42e", "filename": "src/tools/clippy/clippy_lints/src/methods/option_as_ref_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -51,7 +51,7 @@ pub(super) fn check<'tcx>(\n             .map_or(false, |fun_def_id| {\n                 deref_aliases.iter().any(|path| match_def_path(cx, fun_def_id, path))\n             }),\n-        hir::ExprKind::Closure { body, .. } => {\n+        hir::ExprKind::Closure(&hir::Closure { body, .. }) => {\n             let closure_body = cx.tcx.hir().body(body);\n             let closure_expr = peel_blocks(&closure_body.value);\n "}, {"sha": "5a39b82b027d1643536ec0c4f2fd9237fad57ccf", "filename": "src/tools/clippy/clippy_lints/src/methods/option_map_or_none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -71,7 +71,7 @@ pub(super) fn check<'tcx>(\n     if is_option {\n         let self_snippet = snippet(cx, recv.span, \"..\");\n         if_chain! {\n-            if let hir::ExprKind::Closure { body, fn_decl_span, .. } = map_arg.kind;\n+            if let hir::ExprKind::Closure(&hir::Closure { body, fn_decl_span, .. }) = map_arg.kind;\n             let arg_snippet = snippet(cx, fn_decl_span, \"..\");\n             let body = cx.tcx.hir().body(body);\n             if let Some((func, [arg_char])) = reduce_unit_expression(&body.value);"}, {"sha": "7572ba3fe9a943150211b38568167ffa9a1e3f9f", "filename": "src/tools/clippy/clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -41,7 +41,7 @@ pub(super) fn check<'tcx>(\n             let mut applicability = Applicability::MachineApplicable;\n             let any_search_snippet = if_chain! {\n                 if search_method == \"find\";\n-                if let hir::ExprKind::Closure { body, .. } = search_arg.kind;\n+                if let hir::ExprKind::Closure(&hir::Closure { body, .. }) = search_arg.kind;\n                 let closure_body = cx.tcx.hir().body(body);\n                 if let Some(closure_arg) = closure_body.params.get(0);\n                 then {"}, {"sha": "bafa6fc584d48548e595d218fac04d29d129a54b", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -18,7 +18,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::Expr<\n         return;\n     }\n \n-    if let hir::ExprKind::Closure { body, .. } = arg.kind {\n+    if let hir::ExprKind::Closure(&hir::Closure { body, .. }) = arg.kind {\n         let body = cx.tcx.hir().body(body);\n         let arg_id = body.params[0].pat.hir_id;\n         let mutates_arg ="}, {"sha": "c3531d4d0511e9e8f730dbc64e35190fc2228f53", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -29,7 +29,7 @@ pub(super) fn check(\n     ) {\n         if_chain! {\n             // Extract the body of the closure passed to fold\n-            if let hir::ExprKind::Closure { body, .. } = acc.kind;\n+            if let hir::ExprKind::Closure(&hir::Closure { body, .. }) = acc.kind;\n             let closure_body = cx.tcx.hir().body(body);\n             let closure_expr = peel_blocks(&closure_body.value);\n "}, {"sha": "21767d74c87b8cb9ba2781ba6daaae980a4d4933", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_lazy_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -22,7 +22,7 @@ pub(super) fn check<'tcx>(\n     let is_result = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Result);\n \n     if is_option || is_result {\n-        if let hir::ExprKind::Closure { body, .. } = arg.kind {\n+        if let hir::ExprKind::Closure(&hir::Closure { body, .. }) = arg.kind {\n             let body = cx.tcx.hir().body(body);\n             let body_expr = &body.value;\n "}, {"sha": "10e188ecb79a6af8365f832e17926fff68b50d0b", "filename": "src/tools/clippy/clippy_lints/src/needless_for_each.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_for_each.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -1,7 +1,7 @@\n use rustc_errors::Applicability;\n use rustc_hir::{\n     intravisit::{walk_expr, Visitor},\n-    Expr, ExprKind, Stmt, StmtKind,\n+    Closure, Expr, ExprKind, Stmt, StmtKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -72,7 +72,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessForEach {\n             if has_iter_method(cx, cx.typeck_results().expr_ty(iter_recv)).is_some();\n             // Skip the lint if the body is not block because this is simpler than `for` loop.\n             // e.g. `v.iter().for_each(f)` is simpler and clearer than using `for` loop.\n-            if let ExprKind::Closure { body, .. } = for_each_arg.kind;\n+            if let ExprKind::Closure(&Closure { body, .. }) = for_each_arg.kind;\n             let body = cx.tcx.hir().body(body);\n             if let ExprKind::Block(..) = body.value.kind;\n             then {"}, {"sha": "d461668077e0a51f3f2c39b6db51b4bd7913d3d5", "filename": "src/tools/clippy/clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n use rustc_hir::intravisit::{walk_expr, walk_stmt, FnKind, Visitor};\n use rustc_hir::{\n-    Arm, Block, Body, Expr, ExprKind, Guard, HirId, ImplicitSelfKind, Let, Local, Pat, PatKind, Path, PathSegment,\n+    Arm, Closure, Block, Body, Expr, ExprKind, Guard, HirId, ImplicitSelfKind, Let, Local, Pat, PatKind, Path, PathSegment,\n     QPath, Stmt, StmtKind, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass};\n@@ -298,7 +298,7 @@ impl<'tcx> Visitor<'tcx> for SideEffectVisit<'tcx> {\n             },\n             ExprKind::Match(expr, arms, _) => self.visit_match(expr, arms),\n             // since analysing the closure is not easy, just set all variables in it to side-effect\n-            ExprKind::Closure { body, .. } => {\n+            ExprKind::Closure(&Closure { body, .. }) => {\n                 let body = self.tcx.hir().body(body);\n                 self.visit_body(body);\n                 let vars = std::mem::take(&mut self.ret_vars);"}, {"sha": "f5a93cebab8ca65707c1151a85346c34081a071c", "filename": "src/tools/clippy/clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -69,7 +69,7 @@ impl EarlyLintPass for RedundantClosureCall {\n         if_chain! {\n             if let ast::ExprKind::Call(ref paren, _) = expr.kind;\n             if let ast::ExprKind::Paren(ref closure) = paren.kind;\n-            if let ast::ExprKind::Closure(_, _, _, ref decl, ref block, _) = closure.kind;\n+            if let ast::ExprKind::Closure(_, _, _, _, ref decl, ref block, _) = closure.kind;\n             then {\n                 let mut visitor = ReturnVisitor::new();\n                 visitor.visit_expr(block);"}, {"sha": "fe8859905953ff0fb35b870e71e1bfab8eb493be", "filename": "src/tools/clippy/clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -582,7 +582,7 @@ fn ident_difference_expr_with_base_location(\n         | (Await(_), Await(_))\n         | (Async(_, _, _), Async(_, _, _))\n         | (Block(_, _), Block(_, _))\n-        | (Closure(_, _, _, _, _, _), Closure(_, _, _, _, _, _))\n+        | (Closure(_, _, _, _, _, _, _), Closure(_, _, _, _, _, _, _))\n         | (Match(_, _), Match(_, _))\n         | (Loop(_, _), Loop(_, _))\n         | (ForLoop(_, _, _, _), ForLoop(_, _, _, _))"}, {"sha": "b0fce91abeb7d3fd44cd750321140aafa1d97454", "filename": "src/tools/clippy/clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n use clippy_utils::{get_trait_def_id, paths};\n use if_chain::if_chain;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::{Expr, ExprKind, StmtKind};\n+use rustc_hir::{Closure, Expr, ExprKind, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_middle::ty::{GenericPredicates, PredicateKind, ProjectionPredicate, TraitPredicate};\n@@ -116,7 +116,7 @@ fn get_args_to_check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Ve\n \n fn check_arg<'tcx>(cx: &LateContext<'tcx>, arg: &'tcx Expr<'tcx>) -> Option<(Span, Option<Span>)> {\n     if_chain! {\n-        if let ExprKind::Closure { body, fn_decl_span, .. } = arg.kind;\n+        if let ExprKind::Closure(&Closure { body, fn_decl_span, .. }) = arg.kind;\n         if let ty::Closure(_def_id, substs) = &cx.typeck_results().node_type(arg.hir_id).kind();\n         let ret_ty = substs.as_closure().sig().output();\n         let ty = cx.tcx.erase_late_bound_regions(ret_ty);"}, {"sha": "ea5aadbbca1c614e597ed843bedbf3de09267db3", "filename": "src/tools/clippy/clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, Mutability, Param, Pat, PatKind, Path, PathSegment, QPath};\n+use rustc_hir::{Closure, Expr, ExprKind, Mutability, Param, Pat, PatKind, Path, PathSegment, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, subst::GenericArgKind};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -155,7 +155,7 @@ fn detect_lint(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<LintTrigger> {\n         if let ExprKind::MethodCall(name_ident, args, _) = &expr.kind;\n         if let name = name_ident.ident.name.to_ident_string();\n         if name == \"sort_by\" || name == \"sort_unstable_by\";\n-        if let [vec, Expr { kind: ExprKind::Closure{ body: closure_body_id, .. }, .. }] = args;\n+        if let [vec, Expr { kind: ExprKind::Closure(Closure { body: closure_body_id, .. }), .. }] = args;\n         if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(vec), sym::Vec);\n         if let closure_body = cx.tcx.hir().body(*closure_body_id);\n         if let &["}, {"sha": "bbb04c9945a09871bbb8f16acab81419d08c73a6", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -6,7 +6,7 @@ use rustc_ast::ast::{LitFloatType, LitKind};\n use rustc_ast::LitIntType;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n-use rustc_hir::{ArrayLen, ExprKind, FnRetTy, HirId, Lit, PatKind, QPath, StmtKind, TyKind};\n+use rustc_hir::{ArrayLen, Closure, ExprKind, FnRetTy, HirId, Lit, PatKind, QPath, StmtKind, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::{Ident, Symbol};\n@@ -466,13 +466,13 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 self.expr(scrutinee);\n                 self.slice(arms, |arm| self.arm(arm));\n             },\n-            ExprKind::Closure {\n+            ExprKind::Closure(&Closure {\n                 capture_clause,\n                 fn_decl,\n                 body: body_id,\n                 movability,\n                 ..\n-            } => {\n+            }) => {\n                 let movability = OptionPat::new(movability.map(|m| format!(\"Movability::{m:?}\")));\n \n                 let ret_ty = match fn_decl.output {"}, {"sha": "431b09d53c33b25a9542f719aa75deb899771692", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -168,8 +168,8 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n         (AssignOp(lo, lp, lv), AssignOp(ro, rp, rv)) => lo.node == ro.node && eq_expr(lp, rp) && eq_expr(lv, rv),\n         (Field(lp, lf), Field(rp, rf)) => eq_id(*lf, *rf) && eq_expr(lp, rp),\n         (Match(ls, la), Match(rs, ra)) => eq_expr(ls, rs) && over(la, ra, eq_arm),\n-        (Closure(lc, la, lm, lf, lb, _), Closure(rc, ra, rm, rf, rb, _)) => {\n-            lc == rc && la.is_async() == ra.is_async() && lm == rm && eq_fn_decl(lf, rf) && eq_expr(lb, rb)\n+        (Closure(lb, lc, la, lm, lf, le, _), Closure(rb, rc, ra, rm, rf, re, _)) => {\n+            eq_closure_binder(lb, rb) && lc == rc && la.is_async() == ra.is_async() && lm == rm && eq_fn_decl(lf, rf) && eq_expr(le, re)\n         },\n         (Async(lc, _, lb), Async(rc, _, rb)) => lc == rc && eq_block(lb, rb),\n         (Range(lf, lt, ll), Range(rf, rt, rl)) => ll == rl && eq_expr_opt(lf, rf) && eq_expr_opt(lt, rt),\n@@ -561,6 +561,15 @@ pub fn eq_fn_decl(l: &FnDecl, r: &FnDecl) -> bool {\n         })\n }\n \n+pub fn eq_closure_binder(l: &ClosureBinder, r: &ClosureBinder) -> bool {\n+    match (l, r) {\n+        (ClosureBinder::NotPresent, ClosureBinder::NotPresent) => true,\n+        (ClosureBinder::For { generic_params: lp, .. }, ClosureBinder::For { generic_params: rp, .. }) => \n+            lp.len() == rp.len() && std::iter::zip(lp.iter(), rp.iter()).all(|(l, r)| eq_generic_param(l, r)),\n+        _ => false,\n+    }\n+}\n+\n pub fn eq_fn_ret_ty(l: &FnRetTy, r: &FnRetTy) -> bool {\n     match (l, r) {\n         (FnRetTy::Default(_), FnRetTy::Default(_)) => true,"}, {"sha": "4e5c3850f86a76cbd876b8e7f51048d885fb4d7c", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::fx::FxHasher;\n use rustc_hir::def::Res;\n use rustc_hir::HirIdMap;\n use rustc_hir::{\n-    ArrayLen, BinOpKind, Block, BodyId, Expr, ExprField, ExprKind, FnRetTy, GenericArg, GenericArgs, Guard, HirId,\n+    ArrayLen, BinOpKind, Closure, Block, BodyId, Expr, ExprField, ExprKind, FnRetTy, GenericArg, GenericArgs, Guard, HirId,\n     InlineAsmOperand, Let, Lifetime, LifetimeName, ParamName, Pat, PatField, PatKind, Path, PathSegment, QPath, Stmt,\n     StmtKind, Ty, TyKind, TypeBinding,\n };\n@@ -662,9 +662,9 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_expr(e);\n                 self.hash_ty(ty);\n             },\n-            ExprKind::Closure {\n+            ExprKind::Closure(&Closure {\n                 capture_clause, body, ..\n-            } => {\n+            }) => {\n                 std::mem::discriminant(&capture_clause).hash(&mut self.s);\n                 // closures inherit TypeckResults\n                 self.hash_expr(&self.cx.tcx.hir().body(body).value);"}, {"sha": "242d4315378e382169a0474fbd5a271171986ae6", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -79,10 +79,10 @@ use rustc_hir::hir_id::{HirIdMap, HirIdSet};\n use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::LangItem::{OptionNone, ResultErr, ResultOk};\n use rustc_hir::{\n-    def, Arm, ArrayLen, BindingAnnotation, Block, BlockCheckMode, Body, Constness, Destination, Expr, ExprKind, FnDecl,\n-    HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local, MatchSource, Mutability, Node,\n-    Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, TraitItem, TraitItemKind, TraitRef, TyKind,\n-    UnOp,\n+    def, Arm, ArrayLen, BindingAnnotation, Block, BlockCheckMode, Body, Closure, Constness, Destination, Expr,\n+    ExprKind, FnDecl, HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local, MatchSource,\n+    Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, TraitItem, TraitItemKind,\n+    TraitRef, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::place::PlaceBase;\n@@ -1699,7 +1699,7 @@ pub fn get_async_fn_body<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'_>) -> Option<&'t\n         _,\n         &[\n             Expr {\n-                kind: ExprKind::Closure { body, .. },\n+                kind: ExprKind::Closure(&Closure { body, .. }),\n                 ..\n             },\n         ],\n@@ -1786,7 +1786,7 @@ pub fn is_expr_identity_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool\n     }\n \n     match expr.kind {\n-        ExprKind::Closure { body, .. } => is_body_identity_function(cx, cx.tcx.hir().body(body)),\n+        ExprKind::Closure(&Closure { body, .. }) => is_body_identity_function(cx, cx.tcx.hir().body(body)),\n         _ => path_def_id(cx, expr).map_or(false, |id| match_def_path(cx, id, &paths::CONVERT_IDENTITY)),\n     }\n }"}, {"sha": "4326a103d44b70aad43661e1ec6bfa9f69643b96", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa142b5f1cf85e9941f7f9a35caa604500dab8b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "patch": "@@ -8,7 +8,7 @@ use rustc_ast::{ast, token};\n use rustc_ast_pretty::pprust::token_kind_to_string;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::{ExprKind, HirId, MutTy, TyKind};\n+use rustc_hir::{Closure, ExprKind, HirId, MutTy, TyKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{EarlyContext, LateContext, LintContext};\n use rustc_middle::hir::place::ProjectionKind;\n@@ -790,7 +790,7 @@ pub struct DerefClosure {\n ///\n /// note: this only works on single line immutable closures with exactly one input parameter.\n pub fn deref_closure_args<'tcx>(cx: &LateContext<'_>, closure: &'tcx hir::Expr<'_>) -> Option<DerefClosure> {\n-    if let hir::ExprKind::Closure { fn_decl, body, .. } = closure.kind {\n+    if let hir::ExprKind::Closure(&Closure { fn_decl, body, .. }) = closure.kind {\n         let closure_body = cx.tcx.hir().body(body);\n         // is closure arg a type annotated double reference (i.e.: `|x: &&i32| ...`)\n         // a type annotation is present if param `kind` is different from `TyKind::Infer`"}]}