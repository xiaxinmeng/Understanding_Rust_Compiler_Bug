{"sha": "5336f88403aae270e1e8bbf0aee31707311c590f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMzZmODg0MDNhYWUyNzBlMWU4YmJmMGFlZTMxNzA3MzExYzU5MGY=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-06-07T22:14:43Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-06-08T17:56:59Z"}, "message": "Move `map_identity` into the `methods` module", "tree": {"sha": "534d32f4f56a4f9faa72d7cdb873b99e5580cf22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/534d32f4f56a4f9faa72d7cdb873b99e5580cf22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5336f88403aae270e1e8bbf0aee31707311c590f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5336f88403aae270e1e8bbf0aee31707311c590f", "html_url": "https://github.com/rust-lang/rust/commit/5336f88403aae270e1e8bbf0aee31707311c590f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5336f88403aae270e1e8bbf0aee31707311c590f/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e54ce865c67af65370e1ec3822742a22fd20dfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e54ce865c67af65370e1ec3822742a22fd20dfe", "html_url": "https://github.com/rust-lang/rust/commit/9e54ce865c67af65370e1ec3822742a22fd20dfe"}], "stats": {"total": 148, "additions": 67, "deletions": 81}, "files": [{"sha": "c6d9b378603592175b4f0f89c9b3428604116f46", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5336f88403aae270e1e8bbf0aee31707311c590f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5336f88403aae270e1e8bbf0aee31707311c590f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5336f88403aae270e1e8bbf0aee31707311c590f", "patch": "@@ -254,7 +254,6 @@ mod manual_strip;\n mod manual_unwrap_or;\n mod map_clone;\n mod map_err_ignore;\n-mod map_identity;\n mod map_unit_fn;\n mod match_on_vec_items;\n mod matches;\n@@ -705,7 +704,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         manual_unwrap_or::MANUAL_UNWRAP_OR,\n         map_clone::MAP_CLONE,\n         map_err_ignore::MAP_ERR_IGNORE,\n-        map_identity::MAP_IDENTITY,\n         map_unit_fn::OPTION_MAP_UNIT_FN,\n         map_unit_fn::RESULT_MAP_UNIT_FN,\n         match_on_vec_items::MATCH_ON_VEC_ITEMS,\n@@ -765,6 +763,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         methods::MANUAL_STR_REPEAT,\n         methods::MAP_COLLECT_RESULT_UNIT,\n         methods::MAP_FLATTEN,\n+        methods::MAP_IDENTITY,\n         methods::MAP_UNWRAP_OR,\n         methods::NEW_RET_NO_SELF,\n         methods::OK_EXPECT,\n@@ -1260,7 +1259,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(manual_strip::MANUAL_STRIP),\n         LintId::of(manual_unwrap_or::MANUAL_UNWRAP_OR),\n         LintId::of(map_clone::MAP_CLONE),\n-        LintId::of(map_identity::MAP_IDENTITY),\n         LintId::of(map_unit_fn::OPTION_MAP_UNIT_FN),\n         LintId::of(map_unit_fn::RESULT_MAP_UNIT_FN),\n         LintId::of(matches::INFALLIBLE_DESTRUCTURING_MATCH),\n@@ -1301,6 +1299,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(methods::MANUAL_SATURATING_ARITHMETIC),\n         LintId::of(methods::MANUAL_STR_REPEAT),\n         LintId::of(methods::MAP_COLLECT_RESULT_UNIT),\n+        LintId::of(methods::MAP_IDENTITY),\n         LintId::of(methods::NEW_RET_NO_SELF),\n         LintId::of(methods::OK_EXPECT),\n         LintId::of(methods::OPTION_AS_REF_DEREF),\n@@ -1586,7 +1585,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(loops::WHILE_LET_LOOP),\n         LintId::of(manual_strip::MANUAL_STRIP),\n         LintId::of(manual_unwrap_or::MANUAL_UNWRAP_OR),\n-        LintId::of(map_identity::MAP_IDENTITY),\n         LintId::of(map_unit_fn::OPTION_MAP_UNIT_FN),\n         LintId::of(map_unit_fn::RESULT_MAP_UNIT_FN),\n         LintId::of(matches::MATCH_AS_REF),\n@@ -1601,6 +1599,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(methods::ITER_COUNT),\n         LintId::of(methods::MANUAL_FILTER_MAP),\n         LintId::of(methods::MANUAL_FIND_MAP),\n+        LintId::of(methods::MAP_IDENTITY),\n         LintId::of(methods::OPTION_AS_REF_DEREF),\n         LintId::of(methods::OPTION_FILTER_MAP),\n         LintId::of(methods::SEARCH_IS_SOME),\n@@ -2039,7 +2038,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         single_char_binding_names_threshold,\n     });\n     store.register_late_pass(|| box macro_use::MacroUseImports::default());\n-    store.register_late_pass(|| box map_identity::MapIdentity);\n     store.register_late_pass(|| box pattern_type_mismatch::PatternTypeMismatch);\n     store.register_late_pass(|| box stable_sort_primitive::StableSortPrimitive);\n     store.register_late_pass(|| box repeat_once::RepeatOnce);"}, {"sha": "9bcb010ff6dff4c5bb68f31b5b321b8f8778ced7", "filename": "clippy_lints/src/map_identity.rs", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/9e54ce865c67af65370e1ec3822742a22fd20dfe/clippy_lints%2Fsrc%2Fmap_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e54ce865c67af65370e1ec3822742a22fd20dfe/clippy_lints%2Fsrc%2Fmap_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_identity.rs?ref=9e54ce865c67af65370e1ec3822742a22fd20dfe", "patch": "@@ -1,76 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{is_expr_identity_function, is_trait_method};\n-use if_chain::if_chain;\n-use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::sym;\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Checks for instances of `map(f)` where `f` is the identity function.\n-    ///\n-    /// **Why is this bad?** It can be written more concisely without the call to `map`.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n-    /// ```rust\n-    /// let x = [1, 2, 3];\n-    /// let y: Vec<_> = x.iter().map(|x| x).map(|x| 2*x).collect();\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// let x = [1, 2, 3];\n-    /// let y: Vec<_> = x.iter().map(|x| 2*x).collect();\n-    /// ```\n-    pub MAP_IDENTITY,\n-    complexity,\n-    \"using iterator.map(|x| x)\"\n-}\n-\n-declare_lint_pass!(MapIdentity => [MAP_IDENTITY]);\n-\n-impl<'tcx> LateLintPass<'tcx> for MapIdentity {\n-    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n-        if expr.span.from_expansion() {\n-            return;\n-        }\n-\n-        if_chain! {\n-            if let Some([caller, func]) = get_map_argument(cx, expr);\n-            if is_expr_identity_function(cx, func);\n-            then {\n-                span_lint_and_sugg(\n-                    cx,\n-                    MAP_IDENTITY,\n-                    expr.span.trim_start(caller.span).unwrap(),\n-                    \"unnecessary map of the identity function\",\n-                    \"remove the call to `map`\",\n-                    String::new(),\n-                    Applicability::MachineApplicable\n-                )\n-            }\n-        }\n-    }\n-}\n-\n-/// Returns the arguments passed into map() if the expression is a method call to\n-/// map(). Otherwise, returns None.\n-fn get_map_argument<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<&'a [Expr<'a>]> {\n-    if_chain! {\n-        if let ExprKind::MethodCall(method, _, args, _) = expr.kind;\n-        if args.len() == 2 && method.ident.name == sym::map;\n-        let caller_ty = cx.typeck_results().expr_ty(&args[0]);\n-        if is_trait_method(cx, expr, sym::Iterator)\n-            || is_type_diagnostic_item(cx, caller_ty, sym::result_type)\n-            || is_type_diagnostic_item(cx, caller_ty, sym::option_type);\n-        then {\n-            Some(args)\n-        } else {\n-            None\n-        }\n-    }\n-}"}, {"sha": "538a12566e3031880a9400f3a1f294cf491a0556", "filename": "clippy_lints/src/methods/map_identity.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5336f88403aae270e1e8bbf0aee31707311c590f/clippy_lints%2Fsrc%2Fmethods%2Fmap_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5336f88403aae270e1e8bbf0aee31707311c590f/clippy_lints%2Fsrc%2Fmethods%2Fmap_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_identity.rs?ref=5336f88403aae270e1e8bbf0aee31707311c590f", "patch": "@@ -0,0 +1,38 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{is_expr_identity_function, is_trait_method};\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use rustc_span::{source_map::Span, sym};\n+\n+use super::MAP_IDENTITY;\n+\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n+    expr: &hir::Expr<'_>,\n+    caller: &hir::Expr<'_>,\n+    map_arg: &hir::Expr<'_>,\n+    _map_span: Span,\n+) {\n+    let caller_ty = cx.typeck_results().expr_ty(caller);\n+\n+    if_chain! {\n+        if is_trait_method(cx, expr, sym::Iterator)\n+            || is_type_diagnostic_item(cx, caller_ty, sym::result_type)\n+            || is_type_diagnostic_item(cx, caller_ty, sym::option_type);\n+        if is_expr_identity_function(cx, map_arg);\n+        if let Some(sugg_span) = expr.span.trim_start(caller.span);\n+        then {\n+            span_lint_and_sugg(\n+                cx,\n+                MAP_IDENTITY,\n+                sugg_span,\n+                \"unnecessary map of the identity function\",\n+                \"remove the call to `map`\",\n+                String::new(),\n+                Applicability::MachineApplicable,\n+            )\n+        }\n+    }\n+}"}, {"sha": "d4f8cef4f375d6b8f206e70b0767a5c1c3d4111f", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5336f88403aae270e1e8bbf0aee31707311c590f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5336f88403aae270e1e8bbf0aee31707311c590f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=5336f88403aae270e1e8bbf0aee31707311c590f", "patch": "@@ -35,6 +35,7 @@ mod manual_saturating_arithmetic;\n mod manual_str_repeat;\n mod map_collect_result_unit;\n mod map_flatten;\n+mod map_identity;\n mod map_unwrap_or;\n mod ok_expect;\n mod option_as_ref_deref;\n@@ -1561,6 +1562,29 @@ declare_clippy_lint! {\n     \"call to `filter_map` where `flatten` is sufficient\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for instances of `map(f)` where `f` is the identity function.\n+    ///\n+    /// **Why is this bad?** It can be written more concisely without the call to `map`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// let x = [1, 2, 3];\n+    /// let y: Vec<_> = x.iter().map(|x| x).map(|x| 2*x).collect();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let x = [1, 2, 3];\n+    /// let y: Vec<_> = x.iter().map(|x| 2*x).collect();\n+    /// ```\n+    pub MAP_IDENTITY,\n+    complexity,\n+    \"using iterator.map(|x| x)\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for the use of `.bytes().nth()`.\n     ///\n@@ -1728,6 +1752,7 @@ impl_lint_pass!(Methods => [\n     FILTER_NEXT,\n     SKIP_WHILE_NEXT,\n     FILTER_MAP_IDENTITY,\n+    MAP_IDENTITY,\n     MANUAL_FILTER_MAP,\n     MANUAL_FIND_MAP,\n     OPTION_FILTER_MAP,\n@@ -2058,6 +2083,7 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                         _ => {},\n                     }\n                 }\n+                map_identity::check(cx, expr, recv, m_arg, span);\n             },\n             (\"map_or\", [def, map]) => option_map_or_none::check(cx, expr, recv, def, map),\n             (\"next\", []) => {"}]}