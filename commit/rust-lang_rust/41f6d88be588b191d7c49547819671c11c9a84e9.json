{"sha": "41f6d88be588b191d7c49547819671c11c9a84e9", "node_id": "C_kwDOAAsO6NoAKDQxZjZkODhiZTU4OGIxOTFkN2M0OTU0NzgxOTY3MWMxMWM5YTg0ZTk", "commit": {"author": {"name": "Centri3", "email": "114838443+Centri3@users.noreply.github.com", "date": "2023-04-20T02:51:58Z"}, "committer": {"name": "Centri3", "email": "114838443+Centri3@users.noreply.github.com", "date": "2023-04-20T02:51:58Z"}, "message": "make cargo test pass", "tree": {"sha": "ab70c6c248ae8127e698e911ae0cbdeca64e49e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab70c6c248ae8127e698e911ae0cbdeca64e49e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41f6d88be588b191d7c49547819671c11c9a84e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41f6d88be588b191d7c49547819671c11c9a84e9", "html_url": "https://github.com/rust-lang/rust/commit/41f6d88be588b191d7c49547819671c11c9a84e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41f6d88be588b191d7c49547819671c11c9a84e9/comments", "author": {"login": "Centri3", "id": 114838443, "node_id": "U_kgDOBthLqw", "avatar_url": "https://avatars.githubusercontent.com/u/114838443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centri3", "html_url": "https://github.com/Centri3", "followers_url": "https://api.github.com/users/Centri3/followers", "following_url": "https://api.github.com/users/Centri3/following{/other_user}", "gists_url": "https://api.github.com/users/Centri3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centri3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centri3/subscriptions", "organizations_url": "https://api.github.com/users/Centri3/orgs", "repos_url": "https://api.github.com/users/Centri3/repos", "events_url": "https://api.github.com/users/Centri3/events{/privacy}", "received_events_url": "https://api.github.com/users/Centri3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centri3", "id": 114838443, "node_id": "U_kgDOBthLqw", "avatar_url": "https://avatars.githubusercontent.com/u/114838443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centri3", "html_url": "https://github.com/Centri3", "followers_url": "https://api.github.com/users/Centri3/followers", "following_url": "https://api.github.com/users/Centri3/following{/other_user}", "gists_url": "https://api.github.com/users/Centri3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centri3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centri3/subscriptions", "organizations_url": "https://api.github.com/users/Centri3/orgs", "repos_url": "https://api.github.com/users/Centri3/repos", "events_url": "https://api.github.com/users/Centri3/events{/privacy}", "received_events_url": "https://api.github.com/users/Centri3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3aeec4f75dd0049f6632e26df5aa174b55e730f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3aeec4f75dd0049f6632e26df5aa174b55e730f", "html_url": "https://github.com/rust-lang/rust/commit/a3aeec4f75dd0049f6632e26df5aa174b55e730f"}], "stats": {"total": 36, "additions": 19, "deletions": 17}, "files": [{"sha": "c1c0325b786b79dcf62b60e88b55c51429930583", "filename": "clippy_lints/src/semicolon_block.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/41f6d88be588b191d7c49547819671c11c9a84e9/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6d88be588b191d7c49547819671c11c9a84e9/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_block.rs?ref=41f6d88be588b191d7c49547819671c11c9a84e9", "patch": "@@ -121,10 +121,8 @@ fn semicolon_inside_block(\n     let insert_span = tail.span.source_callsite().shrink_to_hi();\n     let remove_span = semi_span.with_lo(block.span.hi());\n \n-    if conf.semicolon_inside_block_if_multiline {\n-        if get_line(cx, remove_span) == get_line(cx, insert_span) {\n-            return;\n-        }\n+    if conf.semicolon_inside_block_if_multiline && get_line(cx, remove_span) == get_line(cx, insert_span) {\n+        return;\n     }\n \n     span_lint_and_then(\n@@ -143,16 +141,20 @@ fn semicolon_inside_block(\n     );\n }\n \n-fn semicolon_outside_block(conf: &mut SemicolonBlock, cx: &LateContext<'_>, block: &Block<'_>, tail_stmt_expr: &Expr<'_>, semi_span: Span) {\n+fn semicolon_outside_block(\n+    conf: &mut SemicolonBlock,\n+    cx: &LateContext<'_>,\n+    block: &Block<'_>,\n+    tail_stmt_expr: &Expr<'_>,\n+    semi_span: Span,\n+) {\n     let insert_span = block.span.with_lo(block.span.hi());\n     // account for macro calls\n     let semi_span = cx.sess().source_map().stmt_span(semi_span, block.span);\n     let remove_span = semi_span.with_lo(tail_stmt_expr.span.source_callsite().hi());\n \n-    if conf.semicolon_outside_block_if_singleline {\n-        if get_line(cx, remove_span) != get_line(cx, insert_span) {\n-            return;\n-        }\n+    if conf.semicolon_outside_block_if_singleline && get_line(cx, remove_span) != get_line(cx, insert_span) {\n+        return;\n     }\n \n     span_lint_and_then("}, {"sha": "939f6cd5f1fcf341dcedaa977a7f88b2a68f496c", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/41f6d88be588b191d7c49547819671c11c9a84e9/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f6d88be588b191d7c49547819671c11c9a84e9/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=41f6d88be588b191d7c49547819671c11c9a84e9", "patch": "@@ -277,6 +277,14 @@ define_Conf! {\n     /// `\"..\"` can be used as part of the list to indicate, that the configured values should be appended to the\n     /// default configuration of Clippy. By default, any configuration will replace the default value.\n     (disallowed_names: Vec<String> = super::DEFAULT_DISALLOWED_NAMES.iter().map(ToString::to_string).collect()),\n+    /// Lint: SEMICOLON_INSIDE_BLOCK.\n+    ///\n+    /// Whether to lint only if it's multiline.\n+    (semicolon_inside_block_if_multiline: bool = false),\n+    /// Lint: SEMICOLON_OUTSIDE_BLOCK.\n+    ///\n+    /// Whether to lint only if it's singleline.\n+    (semicolon_outside_block_if_singleline: bool = false),\n     /// Lint: DOC_MARKDOWN.\n     ///\n     /// The list of words this lint should not consider as identifiers needing ticks. The value\n@@ -463,14 +471,6 @@ define_Conf! {\n     ///\n     /// The maximum byte size a `Future` can have, before it triggers the `clippy::large_futures` lint\n     (future_size_threshold: u64 = 16 * 1024),\n-    /// Lint: SEMICOLON_INSIDE_BLOCK.\n-    /// \n-    /// Whether to lint only if it's multiline.\n-    (semicolon_inside_block_if_multiline: bool = false),\n-    /// Lint: SEMICOLON_OUTSIDE_BLOCK.\n-    /// \n-    /// Whether to lint only if it's singleline.\n-    (semicolon_outside_block_if_singleline: bool = false),\n }\n \n /// Search for the configuration file."}]}