{"sha": "8acec1f9d0b40dde142e6c26d7358b9ab232d2b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhY2VjMWY5ZDBiNDBkZGUxNDJlNmMyNmQ3MzU4YjlhYjIzMmQyYjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-25T13:43:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-25T13:43:22Z"}, "message": "Auto merge of #51750 - zackmdavis:superstructure, r=oli-obk\n\nthree diagnostics upgrades\n\n * reword `...` expression syntax error to not imply that you should use it in patterns either (#51043) and make it a structured suggestion\n * shorten the top-line message for the trivial-casts lint by tucking the advisory sentence into a help note\n * structured suggestion for pattern-named-the-same-as-variant warning\n\nr? @oli-obk", "tree": {"sha": "ee8312ba11e731b1ea6c6e277c8dd9bfb36fc312", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee8312ba11e731b1ea6c6e277c8dd9bfb36fc312"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4", "html_url": "https://github.com/rust-lang/rust/commit/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecfe37056fa2abc79a4b97ff1c651fae47f66845", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecfe37056fa2abc79a4b97ff1c651fae47f66845", "html_url": "https://github.com/rust-lang/rust/commit/ecfe37056fa2abc79a4b97ff1c651fae47f66845"}, {"sha": "0b39a82cf49bc376e568560e4f97360f477255d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b39a82cf49bc376e568560e4f97360f477255d4", "html_url": "https://github.com/rust-lang/rust/commit/0b39a82cf49bc376e568560e4f97360f477255d4"}], "stats": {"total": 274, "additions": 218, "deletions": 56}, "files": [{"sha": "b96cc352bdb60374499a42ef41efe306d7607c6a", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=8acec1f9d0b40dde142e6c26d7358b9ab232d2b4", "patch": "@@ -23,7 +23,7 @@ use rustc::session::Session;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::Substs;\n use rustc::lint;\n-use rustc_errors::DiagnosticBuilder;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc::util::common::ErrorReported;\n \n use rustc::hir::def::*;\n@@ -328,10 +328,12 @@ fn check_for_bindings_named_the_same_as_variants(cx: &MatchVisitor, pat: &Pat) {\n                         \"pattern binding `{}` is named the same as one \\\n                          of the variants of the type `{}`\",\n                         name.node, ty_path);\n-                    help!(err,\n-                        \"if you meant to match on a variant, \\\n-                        consider making the path in the pattern qualified: `{}::{}`\",\n-                        ty_path, name.node);\n+                    err.span_suggestion_with_applicability(\n+                        p.span,\n+                        \"to match on the variant, qualify the path\",\n+                        format!(\"{}::{}\", ty_path, name.node),\n+                        Applicability::MachineApplicable\n+                    );\n                     err.emit();\n                 }\n             }"}, {"sha": "07e19c84a95073dff0b4734812dd885ea28667c8", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=8acec1f9d0b40dde142e6c26d7358b9ab232d2b4", "patch": "@@ -365,28 +365,27 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n     fn trivial_cast_lint(&self, fcx: &FnCtxt<'a, 'gcx, 'tcx>) {\n         let t_cast = self.cast_ty;\n         let t_expr = self.expr_ty;\n-        if t_cast.is_numeric() && t_expr.is_numeric() {\n-            fcx.tcx.lint_node(\n-                lint::builtin::TRIVIAL_NUMERIC_CASTS,\n-                self.expr.id,\n-                self.span,\n-                &format!(\"trivial numeric cast: `{}` as `{}`. Cast can be \\\n-                          replaced by coercion, this might require type \\\n-                          ascription or a temporary variable\",\n-                         fcx.ty_to_string(t_expr),\n-                         fcx.ty_to_string(t_cast)));\n+        let type_asc_or = if fcx.tcx.features().type_ascription {\n+            \"type ascription or \"\n         } else {\n-            fcx.tcx.lint_node(\n-                lint::builtin::TRIVIAL_CASTS,\n-                self.expr.id,\n-                self.span,\n-                &format!(\"trivial cast: `{}` as `{}`. Cast can be \\\n-                          replaced by coercion, this might require type \\\n-                          ascription or a temporary variable\",\n-                         fcx.ty_to_string(t_expr),\n-                         fcx.ty_to_string(t_cast)));\n-        }\n-\n+            \"\"\n+        };\n+        let (adjective, lint) = if t_cast.is_numeric() && t_expr.is_numeric() {\n+            (\"numeric \", lint::builtin::TRIVIAL_NUMERIC_CASTS)\n+        } else {\n+            (\"\", lint::builtin::TRIVIAL_CASTS)\n+        };\n+        let mut err = fcx.tcx.struct_span_lint_node(\n+            lint,\n+            self.expr.id,\n+            self.span,\n+            &format!(\"trivial {}cast: `{}` as `{}`\",\n+                     adjective,\n+                     fcx.ty_to_string(t_expr),\n+                     fcx.ty_to_string(t_cast)));\n+        err.help(&format!(\"cast can be replaced by coercion; this might \\\n+                           require {}a temporary variable\", type_asc_or));\n+        err.emit();\n     }\n \n     pub fn check(mut self, fcx: &FnCtxt<'a, 'gcx, 'tcx>) {"}, {"sha": "955bdbdcf917765d8620b4a730070b1da4812d2e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8acec1f9d0b40dde142e6c26d7358b9ab232d2b4", "patch": "@@ -4800,12 +4800,14 @@ impl<'a> Parser<'a> {\n \n     fn err_dotdotdot_syntax(&self, span: Span) {\n         self.diagnostic().struct_span_err(span, {\n-            \"`...` syntax cannot be used in expressions\"\n-        }).help({\n-            \"Use `..` if you need an exclusive range (a < b)\"\n-        }).help({\n-            \"or `..=` if you need an inclusive range (a <= b)\"\n-        }).emit();\n+            \"unexpected token: `...`\"\n+        }).span_suggestion_with_applicability(\n+            span, \"use `..` for an exclusive range\", \"..\".to_owned(),\n+            Applicability::MaybeIncorrect\n+        ).span_suggestion_with_applicability(\n+            span, \"or `..=` for an inclusive range\", \"..=\".to_owned(),\n+            Applicability::MaybeIncorrect\n+        ).emit();\n     }\n \n     // Parse bounds of a type parameter `BOUND + BOUND + BOUND`, possibly with trailing `+`."}, {"sha": "34b96a59c2dde784b5f7b4bc39beb0cfa63f10e2", "filename": "src/test/parse-fail/range_inclusive_dotdotdot.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Ftest%2Fparse-fail%2Frange_inclusive_dotdotdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Ftest%2Fparse-fail%2Frange_inclusive_dotdotdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Frange_inclusive_dotdotdot.rs?ref=8acec1f9d0b40dde142e6c26d7358b9ab232d2b4", "patch": "@@ -15,22 +15,21 @@\n use std::ops::RangeToInclusive;\n \n fn return_range_to() -> RangeToInclusive<i32> {\n-    return ...1; //~ERROR `...` syntax cannot be used in expressions\n-                 //~^HELP  Use `..` if you need an exclusive range (a < b)\n-                 //~^^HELP or `..=` if you need an inclusive range (a <= b)\n+    return ...1; //~ERROR unexpected token: `...`\n+                 //~^HELP  use `..` for an exclusive range\n+                 //~^^HELP or `..=` for an inclusive range\n }\n \n pub fn main() {\n-    let x = ...0;    //~ERROR `...` syntax cannot be used in expressions\n-                     //~^HELP  Use `..` if you need an exclusive range (a < b)\n-                     //~^^HELP or `..=` if you need an inclusive range (a <= b)\n+    let x = ...0;    //~ERROR unexpected token: `...`\n+                     //~^HELP  use `..` for an exclusive range\n+                     //~^^HELP or `..=` for an inclusive range\n \n-    let x = 5...5;   //~ERROR `...` syntax cannot be used in expressions\n-                     //~^HELP  Use `..` if you need an exclusive range (a < b)\n-                     //~^^HELP or `..=` if you need an inclusive range (a <= b)\n+    let x = 5...5;   //~ERROR unexpected token: `...`\n+                     //~^HELP  use `..` for an exclusive range\n+                     //~^^HELP or `..=` for an inclusive range\n \n-    for _ in 0...1 {} //~ERROR `...` syntax cannot be used in expressions\n-                     //~^HELP  Use `..` if you need an exclusive range (a < b)\n-                     //~^^HELP or `..=` if you need an inclusive range (a <= b)\n+    for _ in 0...1 {} //~ERROR unexpected token: `...`\n+                     //~^HELP  use `..` for an exclusive range\n+                     //~^^HELP or `..=` for an inclusive range\n }\n-"}, {"sha": "3ced913ae11c2c21b082f5ab6c894fdb5c999c3d", "filename": "src/test/ui/issue-19100.fixed", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Ftest%2Fui%2Fissue-19100.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Ftest%2Fui%2Fissue-19100.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-19100.fixed?ref=8acec1f9d0b40dde142e6c26d7358b9ab232d2b4", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+// run-rustfix\n+\n+#![allow(non_snake_case)]\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+#[derive(Copy, Clone)]\n+enum Foo {\n+    Bar,\n+    Baz\n+}\n+\n+impl Foo {\n+    fn foo(&self) {\n+        match self {\n+            &\n+Foo::Bar if true\n+//~^ WARN pattern binding `Bar` is named the same as one of the variants of the type `Foo`\n+=> println!(\"bar\"),\n+            &\n+Foo::Baz if false\n+//~^ WARN pattern binding `Baz` is named the same as one of the variants of the type `Foo`\n+=> println!(\"baz\"),\n+_ => ()\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "e073bf9076160eb23e9d9641c68e93ae9017a4a1", "filename": "src/test/ui/issue-19100.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Ftest%2Fui%2Fissue-19100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Ftest%2Fui%2Fissue-19100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-19100.rs?ref=8acec1f9d0b40dde142e6c26d7358b9ab232d2b4", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+// run-rustfix\n \n #![allow(non_snake_case)]\n #![allow(dead_code)]"}, {"sha": "34dc29c63df72029d7b34183ec9748ee939bbb50", "filename": "src/test/ui/issue-19100.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Ftest%2Fui%2Fissue-19100.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Ftest%2Fui%2Fissue-19100.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-19100.stderr?ref=8acec1f9d0b40dde142e6c26d7358b9ab232d2b4", "patch": "@@ -1,16 +1,12 @@\n warning[E0170]: pattern binding `Bar` is named the same as one of the variants of the type `Foo`\n-  --> $DIR/issue-19100.rs:27:1\n+  --> $DIR/issue-19100.rs:28:1\n    |\n LL | Bar if true\n-   | ^^^\n-   |\n-   = help: if you meant to match on a variant, consider making the path in the pattern qualified: `Foo::Bar`\n+   | ^^^ help: to match on the variant, qualify the path: `Foo::Bar`\n \n warning[E0170]: pattern binding `Baz` is named the same as one of the variants of the type `Foo`\n-  --> $DIR/issue-19100.rs:31:1\n+  --> $DIR/issue-19100.rs:32:1\n    |\n LL | Baz if false\n-   | ^^^\n-   |\n-   = help: if you meant to match on a variant, consider making the path in the pattern qualified: `Foo::Baz`\n+   | ^^^ help: to match on the variant, qualify the path: `Foo::Baz`\n "}, {"sha": "fa3cb92b180e06e2be7903c3864e6c995309b1a5", "filename": "src/test/ui/issue-30302.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Ftest%2Fui%2Fissue-30302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Ftest%2Fui%2Fissue-30302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-30302.stderr?ref=8acec1f9d0b40dde142e6c26d7358b9ab232d2b4", "patch": "@@ -2,9 +2,7 @@ warning[E0170]: pattern binding `Nil` is named the same as one of the variants o\n   --> $DIR/issue-30302.rs:23:9\n    |\n LL |         Nil => true,\n-   |         ^^^\n-   |\n-   = help: if you meant to match on a variant, consider making the path in the pattern qualified: `Stack::Nil`\n+   |         ^^^ help: to match on the variant, qualify the path: `Stack::Nil`\n \n error: unreachable pattern\n   --> $DIR/issue-30302.rs:25:9"}, {"sha": "fba3724ae49076702b2488fb9bf9cf15df59f720", "filename": "src/test/ui/lint/trivial-casts-featuring-type-ascription.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Ftest%2Fui%2Flint%2Ftrivial-casts-featuring-type-ascription.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Ftest%2Fui%2Flint%2Ftrivial-casts-featuring-type-ascription.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftrivial-casts-featuring-type-ascription.rs?ref=8acec1f9d0b40dde142e6c26d7358b9ab232d2b4", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(trivial_casts, trivial_numeric_casts)]\n+#![feature(type_ascription)]\n+\n+fn main() {\n+    let lugubrious = 12i32 as i32;\n+    //~^ ERROR trivial numeric cast\n+    let haunted: &u32 = &99;\n+    let _ = haunted as *const u32;\n+    //~^ ERROR trivial cast\n+}"}, {"sha": "a77135c875d795b27cd79ea78d82a62f58bfb9b5", "filename": "src/test/ui/lint/trivial-casts-featuring-type-ascription.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Ftest%2Fui%2Flint%2Ftrivial-casts-featuring-type-ascription.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Ftest%2Fui%2Flint%2Ftrivial-casts-featuring-type-ascription.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftrivial-casts-featuring-type-ascription.stderr?ref=8acec1f9d0b40dde142e6c26d7358b9ab232d2b4", "patch": "@@ -0,0 +1,28 @@\n+error: trivial numeric cast: `i32` as `i32`\n+  --> $DIR/trivial-casts-featuring-type-ascription.rs:15:22\n+   |\n+LL |     let lugubrious = 12i32 as i32;\n+   |                      ^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/trivial-casts-featuring-type-ascription.rs:11:24\n+   |\n+LL | #![deny(trivial_casts, trivial_numeric_casts)]\n+   |                        ^^^^^^^^^^^^^^^^^^^^^\n+   = help: cast can be replaced by coercion; this might require type ascription or a temporary variable\n+\n+error: trivial cast: `&u32` as `*const u32`\n+  --> $DIR/trivial-casts-featuring-type-ascription.rs:18:13\n+   |\n+LL |     let _ = haunted as *const u32;\n+   |             ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/trivial-casts-featuring-type-ascription.rs:11:9\n+   |\n+LL | #![deny(trivial_casts, trivial_numeric_casts)]\n+   |         ^^^^^^^^^^^^^\n+   = help: cast can be replaced by coercion; this might require type ascription or a temporary variable\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "759b282c0da928dbd4feb247d9f33f8bb48d914d", "filename": "src/test/ui/lint/trivial-casts.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Ftest%2Fui%2Flint%2Ftrivial-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Ftest%2Fui%2Flint%2Ftrivial-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftrivial-casts.rs?ref=8acec1f9d0b40dde142e6c26d7358b9ab232d2b4", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(trivial_casts, trivial_numeric_casts)]\n+\n+fn main() {\n+    let lugubrious = 12i32 as i32;\n+    //~^ ERROR trivial numeric cast\n+    let haunted: &u32 = &99;\n+    let _ = haunted as *const u32;\n+    //~^ ERROR trivial cast\n+}"}, {"sha": "d52869f4bed61372b3806e52b472682cfe90142c", "filename": "src/test/ui/lint/trivial-casts.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Ftest%2Fui%2Flint%2Ftrivial-casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Ftest%2Fui%2Flint%2Ftrivial-casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftrivial-casts.stderr?ref=8acec1f9d0b40dde142e6c26d7358b9ab232d2b4", "patch": "@@ -0,0 +1,28 @@\n+error: trivial numeric cast: `i32` as `i32`\n+  --> $DIR/trivial-casts.rs:14:22\n+   |\n+LL |     let lugubrious = 12i32 as i32;\n+   |                      ^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/trivial-casts.rs:11:24\n+   |\n+LL | #![deny(trivial_casts, trivial_numeric_casts)]\n+   |                        ^^^^^^^^^^^^^^^^^^^^^\n+   = help: cast can be replaced by coercion; this might require a temporary variable\n+\n+error: trivial cast: `&u32` as `*const u32`\n+  --> $DIR/trivial-casts.rs:17:13\n+   |\n+LL |     let _ = haunted as *const u32;\n+   |             ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/trivial-casts.rs:11:9\n+   |\n+LL | #![deny(trivial_casts, trivial_numeric_casts)]\n+   |         ^^^^^^^^^^^^^\n+   = help: cast can be replaced by coercion; this might require a temporary variable\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "afb73a526a8fe638fa8c6b2828ac5d24eedf6fc6", "filename": "src/test/ui/suggestions/dotdotdot-expr.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Ftest%2Fui%2Fsuggestions%2Fdotdotdot-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Ftest%2Fui%2Fsuggestions%2Fdotdotdot-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdotdotdot-expr.rs?ref=8acec1f9d0b40dde142e6c26d7358b9ab232d2b4", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let _redemptive = 1...21;\n+    //~^ ERROR unexpected token\n+}"}, {"sha": "3315538f2f7597859917275a00cfbe3184e222a8", "filename": "src/test/ui/suggestions/dotdotdot-expr.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Ftest%2Fui%2Fsuggestions%2Fdotdotdot-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4/src%2Ftest%2Fui%2Fsuggestions%2Fdotdotdot-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdotdotdot-expr.stderr?ref=8acec1f9d0b40dde142e6c26d7358b9ab232d2b4", "patch": "@@ -0,0 +1,16 @@\n+error: unexpected token: `...`\n+  --> $DIR/dotdotdot-expr.rs:12:24\n+   |\n+LL |     let _redemptive = 1...21;\n+   |                        ^^^\n+help: use `..` for an exclusive range\n+   |\n+LL |     let _redemptive = 1..21;\n+   |                        ^^\n+help: or `..=` for an inclusive range\n+   |\n+LL |     let _redemptive = 1..=21;\n+   |                        ^^^\n+\n+error: aborting due to previous error\n+"}]}