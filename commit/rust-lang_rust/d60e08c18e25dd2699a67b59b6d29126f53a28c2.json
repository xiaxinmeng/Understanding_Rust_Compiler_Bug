{"sha": "d60e08c18e25dd2699a67b59b6d29126f53a28c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MGUwOGMxOGUyNWRkMjY5OWE2N2I1OWI2ZDI5MTI2ZjUzYTI4YzI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-05-19T01:03:48Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-19T18:40:16Z"}, "message": "Eliminate explicit recursion in tstate.states (walk does that now),\nand kill dead code.", "tree": {"sha": "dcebec8411783d22b0cd970eda216efdaf543148", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcebec8411783d22b0cd970eda216efdaf543148"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d60e08c18e25dd2699a67b59b6d29126f53a28c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d60e08c18e25dd2699a67b59b6d29126f53a28c2", "html_url": "https://github.com/rust-lang/rust/commit/d60e08c18e25dd2699a67b59b6d29126f53a28c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d60e08c18e25dd2699a67b59b6d29126f53a28c2/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1844d2719d1a6103f6662ec373f249fbdb953d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1844d2719d1a6103f6662ec373f249fbdb953d3", "html_url": "https://github.com/rust-lang/rust/commit/e1844d2719d1a6103f6662ec373f249fbdb953d3"}], "stats": {"total": 61, "additions": 3, "deletions": 58}, "files": [{"sha": "4af741670b02aa025c4e141a5e22bdf05f33aaa5", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 3, "deletions": 58, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/d60e08c18e25dd2699a67b59b6d29126f53a28c2/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60e08c18e25dd2699a67b59b6d29126f53a28c2/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=d60e08c18e25dd2699a67b59b6d29126f53a28c2", "patch": "@@ -160,16 +160,6 @@ import util::common::has_nonlocal_exits;\n import util::common::log_stmt;\n import util::common::log_expr_err;\n \n-fn find_pre_post_state_mod(&_mod m) -> bool {\n-    log(\"implement find_pre_post_state_mod!\");\n-    fail;\n-}\n-\n-fn find_pre_post_state_native_mod(&native_mod m) -> bool {\n-    log(\"implement find_pre_post_state_native_mod!\");\n-    fail;\n-}\n-\n fn seq_states(&fn_ctxt fcx, prestate pres, vec[@expr] exprs)\n      -> tup(bool, poststate) {\n   auto changed = false;\n@@ -655,8 +645,9 @@ fn find_pre_post_state_stmt(&fn_ctxt fcx, &prestate pres, @stmt s) -> bool {\n                         || changed;\n                     changed = extend_poststate(stmt_ann.states.poststate,\n                                 pres) || changed;\n-                    ret (find_pre_post_state_item(fcx, an_item) || changed);\n-                }\n+                    /* the outer \"walk\" will recurse into the item */\n+                    ret changed;\n+                 }\n             }\n         }\n         case (stmt_expr(?e, _)) {\n@@ -742,57 +733,11 @@ fn find_pre_post_state_block(&fn_ctxt fcx, &prestate pres0, &block b)\n }\n \n fn find_pre_post_state_fn(&fn_ctxt fcx, &_fn f) -> bool {\n-    /* FIXME: where do we set args as being initialized?\n-       What about for methods? */\n     auto num_local_vars = num_locals(fcx.enclosing);\n     ret find_pre_post_state_block(fcx,\n           empty_prestate(num_local_vars), f.body);\n }\n \n-fn find_pre_post_state_obj(crate_ctxt ccx, _obj o) -> bool {\n-    fn do_a_method(crate_ctxt ccx, &@method m) -> bool {\n-        assert (ccx.fm.contains_key(m.node.id));\n-        ret find_pre_post_state_fn(rec(enclosing=ccx.fm.get(m.node.id),\n-                                       id=m.node.id,\n-                                       name=m.node.ident,\n-                                       ccx=ccx),\n-                                   m.node.meth);\n-    }\n-    auto f = bind do_a_method(ccx,_);\n-    auto flags = vec::map[@method, bool](f, o.methods);\n-    auto changed = vec::or(flags);\n-    changed = changed || maybe[@method, bool](false, f, o.dtor);\n-    ret changed;\n-}\n-\n-fn find_pre_post_state_item(&fn_ctxt fcx, @item i) -> bool {\n-    alt (i.node) {\n-        case (item_const(?id, ?t, ?e, ?di, ?a)) {\n-            ret find_pre_post_state_expr(fcx,\n-                  empty_prestate(num_locals(fcx.enclosing)), e);\n-        }\n-        case (item_fn(?id, ?f, ?ps, ?di, ?a)) {\n-            assert (fcx.ccx.fm.contains_key(di));\n-            ret find_pre_post_state_fn(rec(enclosing=fcx.ccx.fm.get(di),\n-                                           id=di, name=id with fcx), f);\n-        }\n-        case (item_mod(?id, ?m, ?di)) {\n-            ret find_pre_post_state_mod(m);\n-        }\n-        case (item_native_mod(?id, ?nm, ?di)) {\n-            ret find_pre_post_state_native_mod(nm);\n-        }\n-        case (item_ty(_,_,_,_,_)) {\n-            ret false;\n-        }\n-        case (item_tag(_,_,_,_,_)) {\n-            ret false;\n-        }\n-        case (item_obj(?id, ?o, ?ps, ?di, ?a)) {\n-            ret find_pre_post_state_obj(fcx.ccx, o);\n-        }\n-    }\n-}\n //\n // Local Variables:\n // mode: rust"}]}