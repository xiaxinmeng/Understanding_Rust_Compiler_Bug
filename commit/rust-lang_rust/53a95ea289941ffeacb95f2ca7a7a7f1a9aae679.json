{"sha": "53a95ea289941ffeacb95f2ca7a7a7f1a9aae679", "node_id": "C_kwDOAAsO6NoAKDUzYTk1ZWEyODk5NDFmZmVhY2I5NWYyY2E3YTdhN2YxYTlhYWU2Nzk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-18T13:49:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-18T13:49:41Z"}, "message": "Rollup merge of #92024 - pcwalton:per-codegen-unit-names, r=davidtwco\n\nrustc_codegen_llvm: Give each codegen unit a unique DWARF name on all platforms, not just Apple ones.\n\nTo avoid breaking split DWARF, we need to ensure that each codegen unit has a\nunique `DW_AT_name`. This is because there's a remote chance that different\ncodegen units for the same module will have entirely identical DWARF entries\nfor the purpose of the DWO ID, which would violate Appendix F (\"Split Dwarf\nObject Files\") of the DWARF 5 specification. LLVM uses the algorithm specified\nin section 7.32 \"Type Signature Computation\" to compute the DWO ID, which does\nnot include any fields that would distinguish compilation units. So we must\nembed the codegen unit name into the `DW_AT_name`.\n\nCloses #88521.", "tree": {"sha": "2c4d1c93454175aed5fce56d8e364752ede6e74f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c4d1c93454175aed5fce56d8e364752ede6e74f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53a95ea289941ffeacb95f2ca7a7a7f1a9aae679", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhveb1CRBK7hj4Ov3rIwAAGsUIAHn5lQk433qiSvy5ienVGHpo\npBz0FxWSfg5Lh9NEnltPdTEtxFxk8PKCd/8IOLeDoCn+xAjxikxzjDq+M9yG1xxR\n0PkZnJPFoGZiJ4V3fnUXvPQcCUcR52yEN/A9fBJv+q98nBR2mWShIRoNyAnX8To0\nQdWIwyhJZYMNBKYatgkkKmJmM8qQCmFPhXb2ZZD1XM/s9mLFrnsi+dpVQX10+NAA\n4Y+fzyAD2o6CWviv62Dgt/QAGO9n7V3QEXG3V4PBm7hVO59To00be4WoTEtuA4OU\nyVwUDy67mpEs/DE0OEybHZXXLUiHBok94AvfzzA5sKoc00kpNiCQlr0awh/q0J4=\n=LuT5\n-----END PGP SIGNATURE-----\n", "payload": "tree 2c4d1c93454175aed5fce56d8e364752ede6e74f\nparent ca3d129ee38fc73085f7ad5b525e5245f7ad59f1\nparent c41fd760dbab005e8f4038ec67eba17ab60e6a98\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639835381 +0100\ncommitter GitHub <noreply@github.com> 1639835381 +0100\n\nRollup merge of #92024 - pcwalton:per-codegen-unit-names, r=davidtwco\n\nrustc_codegen_llvm: Give each codegen unit a unique DWARF name on all platforms, not just Apple ones.\n\nTo avoid breaking split DWARF, we need to ensure that each codegen unit has a\nunique `DW_AT_name`. This is because there's a remote chance that different\ncodegen units for the same module will have entirely identical DWARF entries\nfor the purpose of the DWO ID, which would violate Appendix F (\"Split Dwarf\nObject Files\") of the DWARF 5 specification. LLVM uses the algorithm specified\nin section 7.32 \"Type Signature Computation\" to compute the DWO ID, which does\nnot include any fields that would distinguish compilation units. So we must\nembed the codegen unit name into the `DW_AT_name`.\n\nCloses #88521.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53a95ea289941ffeacb95f2ca7a7a7f1a9aae679", "html_url": "https://github.com/rust-lang/rust/commit/53a95ea289941ffeacb95f2ca7a7a7f1a9aae679", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53a95ea289941ffeacb95f2ca7a7a7f1a9aae679/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca3d129ee38fc73085f7ad5b525e5245f7ad59f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca3d129ee38fc73085f7ad5b525e5245f7ad59f1", "html_url": "https://github.com/rust-lang/rust/commit/ca3d129ee38fc73085f7ad5b525e5245f7ad59f1"}, {"sha": "c41fd760dbab005e8f4038ec67eba17ab60e6a98", "url": "https://api.github.com/repos/rust-lang/rust/commits/c41fd760dbab005e8f4038ec67eba17ab60e6a98", "html_url": "https://github.com/rust-lang/rust/commit/c41fd760dbab005e8f4038ec67eba17ab60e6a98"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "960b02bf910e938fa2c688947e35a752249cf991", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/53a95ea289941ffeacb95f2ca7a7a7f1a9aae679/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53a95ea289941ffeacb95f2ca7a7a7f1a9aae679/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=53a95ea289941ffeacb95f2ca7a7a7f1a9aae679", "patch": "@@ -1040,14 +1040,25 @@ pub fn compile_unit_metadata<'ll, 'tcx>(\n         None => PathBuf::from(&*tcx.crate_name(LOCAL_CRATE).as_str()),\n     };\n \n-    // The OSX linker has an idiosyncrasy where it will ignore some debuginfo\n-    // if multiple object files with the same `DW_AT_name` are linked together.\n-    // As a workaround we generate unique names for each object file. Those do\n-    // not correspond to an actual source file but that is harmless.\n-    if tcx.sess.target.is_like_osx {\n-        name_in_debuginfo.push(\"@\");\n-        name_in_debuginfo.push(codegen_unit_name);\n-    }\n+    // To avoid breaking split DWARF, we need to ensure that each codegen unit\n+    // has a unique `DW_AT_name`. This is because there's a remote chance that\n+    // different codegen units for the same module will have entirely\n+    // identical DWARF entries for the purpose of the DWO ID, which would\n+    // violate Appendix F (\"Split Dwarf Object Files\") of the DWARF 5\n+    // specification. LLVM uses the algorithm specified in section 7.32 \"Type\n+    // Signature Computation\" to compute the DWO ID, which does not include\n+    // any fields that would distinguish compilation units. So we must embed\n+    // the codegen unit name into the `DW_AT_name`. (Issue #88521.)\n+    //\n+    // Additionally, the OSX linker has an idiosyncrasy where it will ignore\n+    // some debuginfo if multiple object files with the same `DW_AT_name` are\n+    // linked together.\n+    //\n+    // As a workaround for these two issues, we generate unique names for each\n+    // object file. Those do not correspond to an actual source file but that\n+    // is harmless.\n+    name_in_debuginfo.push(\"@\");\n+    name_in_debuginfo.push(codegen_unit_name);\n \n     debug!(\"compile_unit_metadata: {:?}\", name_in_debuginfo);\n     let rustc_producer ="}]}