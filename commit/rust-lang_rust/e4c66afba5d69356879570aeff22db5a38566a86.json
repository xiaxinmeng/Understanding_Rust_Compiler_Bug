{"sha": "e4c66afba5d69356879570aeff22db5a38566a86", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0YzY2YWZiYTVkNjkzNTY4Nzk1NzBhZWZmMjJkYjVhMzg1NjZhODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-13T16:42:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-13T16:42:51Z"}, "message": "Auto merge of #59612 - matthewjasper:dataflow-usual-newtype-index, r=estebank\n\nUse normal newtype_index macro for MIR dataflows\n\n* Makes the definition of these structs contain `struct IndexName`\n* Avoids having an offset by removing high values, rather than 0\n* Implements some traits for us.", "tree": {"sha": "29d30540d4103832711c847de9b5d0bc35fbbb9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29d30540d4103832711c847de9b5d0bc35fbbb9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4c66afba5d69356879570aeff22db5a38566a86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4c66afba5d69356879570aeff22db5a38566a86", "html_url": "https://github.com/rust-lang/rust/commit/e4c66afba5d69356879570aeff22db5a38566a86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4c66afba5d69356879570aeff22db5a38566a86/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "896c3a570f4c41662a471914e0c8b4793de4a2a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/896c3a570f4c41662a471914e0c8b4793de4a2a0", "html_url": "https://github.com/rust-lang/rust/commit/896c3a570f4c41662a471914e0c8b4793de4a2a0"}, {"sha": "9eb6f32d452bed518a2c3bd6d0e084fdb10cd26e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eb6f32d452bed518a2c3bd6d0e084fdb10cd26e", "html_url": "https://github.com/rust-lang/rust/commit/9eb6f32d452bed518a2c3bd6d0e084fdb10cd26e"}], "stats": {"total": 106, "additions": 30, "deletions": 76}, "files": [{"sha": "e6d818152f58e87b1fc0833e25174a6077b384e7", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4c66afba5d69356879570aeff22db5a38566a86/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4c66afba5d69356879570aeff22db5a38566a86/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=e4c66afba5d69356879570aeff22db5a38566a86", "patch": "@@ -26,8 +26,7 @@ use super::borrow_set::BorrowData;\n use super::{Context, MirBorrowckCtxt};\n use super::{InitializationRequiringAction, PrefixSet};\n use crate::dataflow::drop_flag_effects;\n-use crate::dataflow::move_paths::indexes::MoveOutIndex;\n-use crate::dataflow::move_paths::MovePathIndex;\n+use crate::dataflow::indexes::{MovePathIndex, MoveOutIndex};\n use crate::util::borrowck_errors::{BorrowckErrors, Origin};\n \n #[derive(Debug)]"}, {"sha": "c0b199f1798d48bd01a4e29e27e929e4f60f89a6", "filename": "src/librustc_mir/borrow_check/flows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4c66afba5d69356879570aeff22db5a38566a86/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4c66afba5d69356879570aeff22db5a38566a86/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs?ref=e4c66afba5d69356879570aeff22db5a38566a86", "patch": "@@ -11,7 +11,7 @@ use crate::borrow_check::location::LocationIndex;\n \n use polonius_engine::Output;\n \n-use crate::dataflow::move_paths::indexes::BorrowIndex;\n+use crate::dataflow::indexes::BorrowIndex;\n use crate::dataflow::move_paths::HasMoveData;\n use crate::dataflow::Borrows;\n use crate::dataflow::EverInitializedPlaces;"}, {"sha": "926f52b7cfce8bfdb6866f4b923bac7da13e0717", "filename": "src/librustc_mir/borrow_check/nll/facts.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4c66afba5d69356879570aeff22db5a38566a86/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4c66afba5d69356879570aeff22db5a38566a86/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs?ref=e4c66afba5d69356879570aeff22db5a38566a86", "patch": "@@ -72,18 +72,6 @@ impl Atom for BorrowIndex {\n     }\n }\n \n-impl From<usize> for BorrowIndex {\n-    fn from(i: usize) -> BorrowIndex {\n-        BorrowIndex::new(i)\n-    }\n-}\n-\n-impl From<BorrowIndex> for usize {\n-    fn from(vid: BorrowIndex) -> usize {\n-        Idx::index(vid)\n-    }\n-}\n-\n impl Atom for LocationIndex {\n     fn index(self) -> usize {\n         Idx::index(self)"}, {"sha": "36d3a03cdfd0dc9835e44832513da109279d6f7b", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4c66afba5d69356879570aeff22db5a38566a86/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4c66afba5d69356879570aeff22db5a38566a86/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=e4c66afba5d69356879570aeff22db5a38566a86", "patch": "@@ -9,7 +9,7 @@ use crate::borrow_check::ArtificialField;\n use crate::borrow_check::{ReadKind, WriteKind};\n use crate::borrow_check::nll::facts::AllFacts;\n use crate::borrow_check::path_utils::*;\n-use crate::dataflow::move_paths::indexes::BorrowIndex;\n+use crate::dataflow::indexes::BorrowIndex;\n use rustc::ty::TyCtxt;\n use rustc::mir::visit::Visitor;\n use rustc::mir::{BasicBlock, Location, Mir, Place, PlaceBase, Rvalue};"}, {"sha": "4c4b4c0431927a477ceb1c1f92ef19bff6e3798c", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4c66afba5d69356879570aeff22db5a38566a86/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4c66afba5d69356879570aeff22db5a38566a86/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=e4c66afba5d69356879570aeff22db5a38566a86", "patch": "@@ -3,7 +3,7 @@ use crate::borrow_check::nll::region_infer::values::{self, PointIndex, RegionVal\n use crate::borrow_check::nll::type_check::liveness::local_use_map::LocalUseMap;\n use crate::borrow_check::nll::type_check::NormalizeLocation;\n use crate::borrow_check::nll::type_check::TypeChecker;\n-use crate::dataflow::move_paths::indexes::MovePathIndex;\n+use crate::dataflow::indexes::MovePathIndex;\n use crate::dataflow::move_paths::MoveData;\n use crate::dataflow::{FlowAtLocation, FlowsAtLocation, MaybeInitializedPlaces};\n use rustc::infer::canonical::QueryRegionConstraint;"}, {"sha": "43cb0ed4565fe6f38b100c9b79c0168358b49941", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e4c66afba5d69356879570aeff22db5a38566a86/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4c66afba5d69356879570aeff22db5a38566a86/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=e4c66afba5d69356879570aeff22db5a38566a86", "patch": "@@ -10,13 +10,18 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n \n use crate::dataflow::{BitDenotation, BlockSets, InitialFlow};\n-pub use crate::dataflow::indexes::BorrowIndex;\n use crate::borrow_check::nll::region_infer::RegionInferenceContext;\n use crate::borrow_check::nll::ToRegionVid;\n use crate::borrow_check::places_conflict;\n \n use std::rc::Rc;\n \n+newtype_index! {\n+    pub struct BorrowIndex {\n+        DEBUG_FORMAT = \"bw{}\"\n+    }\n+}\n+\n /// `Borrows` stores the data used in the analyses that track the flow\n /// of borrows.\n ///"}, {"sha": "83221aca6c5b389d1be75b8d04974be5ad941ad6", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e4c66afba5d69356879570aeff22db5a38566a86/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4c66afba5d69356879570aeff22db5a38566a86/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=e4c66afba5d69356879570aeff22db5a38566a86", "patch": "@@ -33,7 +33,12 @@ mod graphviz;\n mod impls;\n pub mod move_paths;\n \n-pub(crate) use self::move_paths::indexes;\n+pub(crate) mod indexes {\n+    pub(crate) use super::{\n+        move_paths::{MovePathIndex, MoveOutIndex, InitIndex},\n+        impls::borrows::BorrowIndex,\n+    };\n+}\n \n pub(crate) struct DataflowBuilder<'a, 'tcx: 'a, BD>\n where"}, {"sha": "8810be9326bf5f2dfda105efa618b82e37821906", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 14, "deletions": 57, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/e4c66afba5d69356879570aeff22db5a38566a86/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4c66afba5d69356879570aeff22db5a38566a86/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=e4c66afba5d69356879570aeff22db5a38566a86", "patch": "@@ -1,7 +1,7 @@\n use rustc::ty::{self, TyCtxt};\n use rustc::mir::*;\n use rustc::util::nodemap::FxHashMap;\n-use rustc_data_structures::indexed_vec::{IndexVec};\n+use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use smallvec::SmallVec;\n use syntax_pos::{Span};\n \n@@ -12,66 +12,23 @@ use self::abs_domain::{AbstractElem, Lift};\n \n mod abs_domain;\n \n-// This submodule holds some newtype'd Index wrappers that are using\n-// NonZero to ensure that Option<Index> occupies only a single word.\n-// They are in a submodule to impose privacy restrictions; namely, to\n-// ensure that other code does not accidentally access `index.0`\n-// (which is likely to yield a subtle off-by-one error).\n-pub(crate) mod indexes {\n-    use std::fmt;\n-    use std::num::NonZeroUsize;\n-    use rustc_data_structures::indexed_vec::Idx;\n-\n-    macro_rules! new_index {\n-        ($(#[$attrs:meta])* $Index:ident, $debug_name:expr) => {\n-            #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]\n-            pub struct $Index(NonZeroUsize);\n-\n-            impl Idx for $Index {\n-                fn new(idx: usize) -> Self {\n-                    $Index(NonZeroUsize::new(idx + 1).unwrap())\n-                }\n-                fn index(self) -> usize {\n-                    self.0.get() - 1\n-                }\n-            }\n-\n-            impl fmt::Debug for $Index {\n-                fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-                    write!(fmt, \"{}{}\", $debug_name, self.index())\n-                }\n-            }\n-        }\n+newtype_index! {\n+    pub struct MovePathIndex {\n+        DEBUG_FORMAT = \"mp{}\"\n     }\n+}\n \n-    new_index!(\n-        /// Index into MovePathData.move_paths\n-        MovePathIndex,\n-        \"mp\"\n-    );\n-\n-    new_index!(\n-        /// Index into MoveData.moves.\n-        MoveOutIndex,\n-        \"mo\"\n-    );\n-\n-    new_index!(\n-        /// Index into MoveData.inits.\n-        InitIndex,\n-        \"in\"\n-    );\n-\n-    new_index!(\n-        /// Index into Borrows.locations\n-        BorrowIndex,\n-        \"bw\"\n-    );\n+newtype_index! {\n+    pub struct MoveOutIndex {\n+        DEBUG_FORMAT = \"mo{}\"\n+    }\n }\n \n-pub use self::indexes::MovePathIndex;\n-pub use self::indexes::MoveOutIndex;\n-pub use self::indexes::InitIndex;\n+newtype_index! {\n+    pub struct InitIndex {\n+        DEBUG_FORMAT = \"in{}\"\n+    }\n+}\n \n impl MoveOutIndex {\n     pub fn move_path_index(&self, move_data: &MoveData<'_>) -> MovePathIndex {"}]}