{"sha": "da50db0ca27036d0c5e7c5f99a37ef3d932268f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNTBkYjBjYTI3MDM2ZDBjNWU3YzVmOTlhMzdlZjNkOTMyMjY4ZjE=", "commit": {"author": {"name": "Chase Southwood", "email": "chase.southwood@gmail.com", "date": "2014-12-05T07:14:43Z"}, "committer": {"name": "Chase Southwood", "email": "chase.southwood@gmail.com", "date": "2014-12-06T00:03:45Z"}, "message": "Implement BitOps for TreeSet", "tree": {"sha": "d39f712ad66f76563e37b9ea083a0910bfd59a66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d39f712ad66f76563e37b9ea083a0910bfd59a66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da50db0ca27036d0c5e7c5f99a37ef3d932268f1", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da50db0ca27036d0c5e7c5f99a37ef3d932268f1", "html_url": "https://github.com/rust-lang/rust/commit/da50db0ca27036d0c5e7c5f99a37ef3d932268f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da50db0ca27036d0c5e7c5f99a37ef3d932268f1/comments", "author": {"login": "csouth3", "id": 6758080, "node_id": "MDQ6VXNlcjY3NTgwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6758080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csouth3", "html_url": "https://github.com/csouth3", "followers_url": "https://api.github.com/users/csouth3/followers", "following_url": "https://api.github.com/users/csouth3/following{/other_user}", "gists_url": "https://api.github.com/users/csouth3/gists{/gist_id}", "starred_url": "https://api.github.com/users/csouth3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csouth3/subscriptions", "organizations_url": "https://api.github.com/users/csouth3/orgs", "repos_url": "https://api.github.com/users/csouth3/repos", "events_url": "https://api.github.com/users/csouth3/events{/privacy}", "received_events_url": "https://api.github.com/users/csouth3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csouth3", "id": 6758080, "node_id": "MDQ6VXNlcjY3NTgwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6758080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csouth3", "html_url": "https://github.com/csouth3", "followers_url": "https://api.github.com/users/csouth3/followers", "following_url": "https://api.github.com/users/csouth3/following{/other_user}", "gists_url": "https://api.github.com/users/csouth3/gists{/gist_id}", "starred_url": "https://api.github.com/users/csouth3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csouth3/subscriptions", "organizations_url": "https://api.github.com/users/csouth3/orgs", "repos_url": "https://api.github.com/users/csouth3/repos", "events_url": "https://api.github.com/users/csouth3/events{/privacy}", "received_events_url": "https://api.github.com/users/csouth3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "361baabb07b2fb921d0f556d0787b3ea7ef86746", "url": "https://api.github.com/repos/rust-lang/rust/commits/361baabb07b2fb921d0f556d0787b3ea7ef86746", "html_url": "https://github.com/rust-lang/rust/commit/361baabb07b2fb921d0f556d0787b3ea7ef86746"}], "stats": {"total": 126, "additions": 125, "deletions": 1}, "files": [{"sha": "cf6a534cf19f36b9ec8c49ef8bf05e60e86eaa93", "filename": "src/libcollections/tree/set.rs", "status": "modified", "additions": 125, "deletions": 1, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/da50db0ca27036d0c5e7c5f99a37ef3d932268f1/src%2Flibcollections%2Ftree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da50db0ca27036d0c5e7c5f99a37ef3d932268f1/src%2Flibcollections%2Ftree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftree%2Fset.rs?ref=da50db0ca27036d0c5e7c5f99a37ef3d932268f1", "patch": "@@ -21,7 +21,6 @@ use std::hash::{Writer, Hash};\n use tree_map::{TreeMap, Entries, RevEntries, MoveEntries};\n \n // FIXME(conventions): implement bounded iterators\n-// FIXME(conventions): implement BitOr, BitAnd, BitXor, and Sub\n // FIXME(conventions): replace rev_iter(_mut) by making iter(_mut) DoubleEnded\n \n /// An implementation of the `Set` trait on top of the `TreeMap` container. The\n@@ -666,6 +665,90 @@ impl<'a, T: Ord> Iterator<&'a T> for UnionItems<'a, T> {\n     }\n }\n \n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+impl<T: Ord + Clone> BitOr<TreeSet<T>, TreeSet<T>> for TreeSet<T> {\n+    /// Returns the union of `self` and `rhs` as a new `TreeSet<T>`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::TreeSet;\n+    ///\n+    /// let a: TreeSet<int> = vec![1, 2, 3].into_iter().collect();\n+    /// let b: TreeSet<int> = vec![3, 4, 5].into_iter().collect();\n+    ///\n+    /// let set: TreeSet<int> = a | b;\n+    /// let v: Vec<int> = set.into_iter().collect();\n+    /// assert_eq!(v, vec![1, 2, 3, 4, 5]);\n+    /// ```\n+    fn bitor(&self, rhs: &TreeSet<T>) -> TreeSet<T> {\n+        self.union(rhs).cloned().collect()\n+    }\n+}\n+\n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+impl<T: Ord + Clone> BitAnd<TreeSet<T>, TreeSet<T>> for TreeSet<T> {\n+    /// Returns the intersection of `self` and `rhs` as a new `TreeSet<T>`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::TreeSet;\n+    ///\n+    /// let a: TreeSet<int> = vec![1, 2, 3].into_iter().collect();\n+    /// let b: TreeSet<int> = vec![2, 3, 4].into_iter().collect();\n+    ///\n+    /// let set: TreeSet<int> = a & b;\n+    /// let v: Vec<int> = set.into_iter().collect();\n+    /// assert_eq!(v, vec![2, 3]);\n+    /// ```\n+    fn bitand(&self, rhs: &TreeSet<T>) -> TreeSet<T> {\n+        self.intersection(rhs).cloned().collect()\n+    }\n+}\n+\n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+impl<T: Ord + Clone> BitXor<TreeSet<T>, TreeSet<T>> for TreeSet<T> {\n+    /// Returns the symmetric difference of `self` and `rhs` as a new `TreeSet<T>`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::TreeSet;\n+    ///\n+    /// let a: TreeSet<int> = vec![1, 2, 3].into_iter().collect();\n+    /// let b: TreeSet<int> = vec![3, 4, 5].into_iter().collect();\n+    ///\n+    /// let set: TreeSet<int> = a ^ b;\n+    /// let v: Vec<int> = set.into_iter().collect();\n+    /// assert_eq!(v, vec![1, 2, 4, 5]);\n+    /// ```\n+    fn bitxor(&self, rhs: &TreeSet<T>) -> TreeSet<T> {\n+        self.symmetric_difference(rhs).cloned().collect()\n+    }\n+}\n+\n+#[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+impl<T: Ord + Clone> Sub<TreeSet<T>, TreeSet<T>> for TreeSet<T> {\n+    /// Returns the difference of `self` and `rhs` as a new `TreeSet<T>`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::TreeSet;\n+    ///\n+    /// let a: TreeSet<int> = vec![1, 2, 3].into_iter().collect();\n+    /// let b: TreeSet<int> = vec![3, 4, 5].into_iter().collect();\n+    ///\n+    /// let set: TreeSet<int> = a - b;\n+    /// let v: Vec<int> = set.into_iter().collect();\n+    /// assert_eq!(v, vec![1, 2]);\n+    /// ```\n+    fn sub(&self, rhs: &TreeSet<T>) -> TreeSet<T> {\n+        self.difference(rhs).cloned().collect()\n+    }\n+}\n+\n impl<T: Ord> FromIterator<T> for TreeSet<T> {\n     fn from_iter<Iter: Iterator<T>>(iter: Iter) -> TreeSet<T> {\n         let mut set = TreeSet::new();\n@@ -695,6 +778,7 @@ impl<S: Writer, T: Ord + Hash<S>> Hash<S> for TreeSet<T> {\n mod test {\n     use std::prelude::*;\n     use std::hash;\n+    use vec::Vec;\n \n     use super::TreeSet;\n \n@@ -932,6 +1016,46 @@ mod test {\n                     &[-2, 1, 3, 5, 9, 11, 13, 16, 19, 24]);\n     }\n \n+    #[test]\n+    fn test_bit_or() {\n+        let a: TreeSet<int> = vec![1, 3, 5, 9, 11, 16, 19, 24].into_iter().collect();\n+        let b: TreeSet<int> = vec![-2, 1, 5, 9, 13, 19].into_iter().collect();\n+\n+        let set: TreeSet<int> = a | b;\n+        let v: Vec<int> = set.into_iter().collect();\n+        assert_eq!(v, vec![-2, 1, 3, 5, 9, 11, 13, 16, 19, 24]);\n+    }\n+\n+    #[test]\n+    fn test_bit_and() {\n+        let a: TreeSet<int> = vec![11, 1, 3, 77, 103, 5, -5].into_iter().collect();\n+        let b: TreeSet<int> = vec![2, 11, 77, -9, -42, 5, 3].into_iter().collect();\n+\n+        let set: TreeSet<int> = a & b;\n+        let v: Vec<int> = set.into_iter().collect();\n+        assert_eq!(v, vec![3, 5, 11, 77]);\n+    }\n+\n+    #[test]\n+    fn test_bit_xor() {\n+        let a: TreeSet<int> = vec![1, 3, 5, 9, 11].into_iter().collect();\n+        let b: TreeSet<int> = vec![-2, 3, 9, 14, 22].into_iter().collect();\n+\n+        let set: TreeSet<int> = a ^ b;\n+        let v: Vec<int> = set.into_iter().collect();\n+        assert_eq!(v, vec![-2, 1, 5, 11, 14, 22]);\n+    }\n+\n+    #[test]\n+    fn test_sub() {\n+        let a: TreeSet<int> = vec![-5, 11, 22, 33, 40, 42].into_iter().collect();\n+        let b: TreeSet<int> = vec![-12, -5, 14, 23, 34, 38, 39, 50].into_iter().collect();\n+\n+        let set: TreeSet<int> = a - b;\n+        let v: Vec<int> = set.into_iter().collect();\n+        assert_eq!(v, vec![11, 22, 33, 40, 42]);\n+    }\n+\n     #[test]\n     fn test_zip() {\n         let mut x = TreeSet::new();"}]}