{"sha": "f71826e8f26fd4fa331574caa462960db8ed961a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MTgyNmU4ZjI2ZmQ0ZmEzMzE1NzRjYWE0NjI5NjBkYjhlZDk2MWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-12T04:15:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-12T04:15:27Z"}, "message": "Auto merge of #64303 - nnethercote:avoid-more-Symbol-to-string-operations, r=petrochenkov\n\nAvoid more `Symbol`-to-string operations\n\nThese commits avoid various `Symbol`-to-string conversions, by doing more operations directly on `Symbol`s. This requires adding a few more static `Symbol`s to the binary.\n\nr? @petrochenkov", "tree": {"sha": "bc904e5bb22ec6992a5990d95e6e5f00b59102ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc904e5bb22ec6992a5990d95e6e5f00b59102ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f71826e8f26fd4fa331574caa462960db8ed961a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f71826e8f26fd4fa331574caa462960db8ed961a", "html_url": "https://github.com/rust-lang/rust/commit/f71826e8f26fd4fa331574caa462960db8ed961a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f71826e8f26fd4fa331574caa462960db8ed961a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9edc02e8320a9e5799d185910ece7d491f524e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9edc02e8320a9e5799d185910ece7d491f524e6", "html_url": "https://github.com/rust-lang/rust/commit/c9edc02e8320a9e5799d185910ece7d491f524e6"}, {"sha": "8138efae16aea425e9306a41519d97ddb58b6794", "url": "https://api.github.com/repos/rust-lang/rust/commits/8138efae16aea425e9306a41519d97ddb58b6794", "html_url": "https://github.com/rust-lang/rust/commit/8138efae16aea425e9306a41519d97ddb58b6794"}], "stats": {"total": 174, "additions": 93, "deletions": 81}, "files": [{"sha": "fa5fa2257dbc8ce9940f1ec6181b86e8afba253b", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=f71826e8f26fd4fa331574caa462960db8ed961a", "patch": "@@ -116,8 +116,8 @@ fn verify<'tcx>(tcx: TyCtxt<'tcx>,\n }\n \n impl<'a, 'tcx> Context<'a, 'tcx> {\n-    fn register(&mut self, name: &str, span: Span) {\n-        $(if name == stringify!($name) {\n+    fn register(&mut self, name: Symbol, span: Span) {\n+        $(if name == sym::$name {\n             if self.items.$name().is_none() {\n                 self.items.missing.push(lang_items::$item);\n             }\n@@ -136,7 +136,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n \n     fn visit_foreign_item(&mut self, i: &hir::ForeignItem) {\n         if let Some((lang_item, _)) = lang_items::extract(&i.attrs) {\n-            self.register(&lang_item.as_str(), i.span);\n+            self.register(lang_item, i.span);\n         }\n         intravisit::walk_foreign_item(self, i)\n     }"}, {"sha": "68d3f90cd3991160e18b6c656d1588a3dc771547", "filename": "src/librustc_codegen_llvm/back/archive.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs?ref=f71826e8f26fd4fa331574caa462960db8ed961a", "patch": "@@ -12,6 +12,7 @@ use crate::llvm::{self, ArchiveKind};\n use rustc_codegen_ssa::{METADATA_FILENAME, RLIB_BYTECODE_EXTENSION};\n use rustc_codegen_ssa::back::archive::{ArchiveBuilder, find_library};\n use rustc::session::Session;\n+use syntax::symbol::Symbol;\n \n struct ArchiveConfig<'a> {\n     pub sess: &'a Session,\n@@ -109,7 +110,7 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n \n     /// Adds all of the contents of a native library to this archive. This will\n     /// search in the relevant locations for a library named `name`.\n-    fn add_native_library(&mut self, name: &str) {\n+    fn add_native_library(&mut self, name: Symbol) {\n         let location = find_library(name, &self.config.lib_search_paths,\n                                     self.config.sess);\n         self.add_archive(&location, |_| false).unwrap_or_else(|e| {"}, {"sha": "8d2120a345a8d61ea8015b51408bf41c582022b9", "filename": "src/librustc_codegen_ssa/back/archive.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustc_codegen_ssa%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustc_codegen_ssa%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Farchive.rs?ref=f71826e8f26fd4fa331574caa462960db8ed961a", "patch": "@@ -1,9 +1,10 @@\n use rustc::session::Session;\n+use syntax::symbol::Symbol;\n \n use std::io;\n use std::path::{Path, PathBuf};\n \n-pub fn find_library(name: &str, search_paths: &[PathBuf], sess: &Session)\n+pub fn find_library(name: Symbol, search_paths: &[PathBuf], sess: &Session)\n                     -> PathBuf {\n     // On Windows, static libraries sometimes show up as libfoo.a and other\n     // times show up as foo.lib\n@@ -40,7 +41,7 @@ pub trait ArchiveBuilder<'a> {\n         lto: bool,\n         skip_objects: bool,\n     ) -> io::Result<()>;\n-    fn add_native_library(&mut self, name: &str);\n+    fn add_native_library(&mut self, name: Symbol);\n     fn update_symbols(&mut self);\n \n     fn build(self);"}, {"sha": "2c2ede5e189be80712d861d636776b2f280f6aa3", "filename": "src/librustc_codegen_ssa/back/command.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs?ref=f71826e8f26fd4fa331574caa462960db8ed961a", "patch": "@@ -8,6 +8,7 @@ use std::mem;\n use std::process::{self, Output};\n \n use rustc_target::spec::LldFlavor;\n+use syntax::symbol::Symbol;\n \n #[derive(Clone)]\n pub struct Command {\n@@ -49,6 +50,11 @@ impl Command {\n         self\n     }\n \n+    pub fn sym_arg(&mut self, arg: Symbol) -> &mut Command {\n+        self.arg(&arg.as_str());\n+        self\n+    }\n+\n     pub fn args<I>(&mut self, args: I) -> &mut Command\n     where\n         I: IntoIterator<Item: AsRef<OsStr>>,"}, {"sha": "c6e0e6a1e80e5c0e1c6b1f71f9a2b84d9388239d", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=f71826e8f26fd4fa331574caa462960db8ed961a", "patch": "@@ -13,6 +13,7 @@ use rustc::hir::def_id::CrateNum;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc_target::spec::{PanicStrategy, RelroLevel, LinkerFlavor};\n+use syntax::symbol::Symbol;\n \n use crate::{METADATA_FILENAME, RLIB_BYTECODE_EXTENSION, CrateInfo, CodegenResults};\n use super::archive::ArchiveBuilder;\n@@ -316,7 +317,7 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(sess: &'a Session,\n             NativeLibraryKind::NativeUnknown => continue,\n         }\n         if let Some(name) = lib.name {\n-            ab.add_native_library(&name.as_str());\n+            ab.add_native_library(name);\n         }\n     }\n \n@@ -1273,15 +1274,14 @@ pub fn add_local_native_libraries(cmd: &mut dyn Linker,\n     let search_path = archive_search_paths(sess);\n     for lib in relevant_libs {\n         let name = match lib.name {\n-            Some(ref l) => l,\n+            Some(l) => l,\n             None => continue,\n         };\n         match lib.kind {\n-            NativeLibraryKind::NativeUnknown => cmd.link_dylib(&name.as_str()),\n-            NativeLibraryKind::NativeFramework => cmd.link_framework(&name.as_str()),\n-            NativeLibraryKind::NativeStaticNobundle => cmd.link_staticlib(&name.as_str()),\n-            NativeLibraryKind::NativeStatic => cmd.link_whole_staticlib(&name.as_str(),\n-                                                                        &search_path)\n+            NativeLibraryKind::NativeUnknown => cmd.link_dylib(name),\n+            NativeLibraryKind::NativeFramework => cmd.link_framework(name),\n+            NativeLibraryKind::NativeStaticNobundle => cmd.link_staticlib(name),\n+            NativeLibraryKind::NativeStatic => cmd.link_whole_staticlib(name, &search_path)\n         }\n     }\n }\n@@ -1594,7 +1594,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(cmd: &mut dyn Linker,\n             cmd.include_path(&fix_windows_verbatim_for_gcc(dir));\n         }\n         let filestem = cratepath.file_stem().unwrap().to_str().unwrap();\n-        cmd.link_rust_dylib(&unlib(&sess.target, filestem),\n+        cmd.link_rust_dylib(Symbol::intern(&unlib(&sess.target, filestem)),\n                             parent.unwrap_or(Path::new(\"\")));\n     }\n }\n@@ -1637,22 +1637,22 @@ pub fn add_upstream_native_libraries(cmd: &mut dyn Linker,\n     for &(cnum, _) in crates {\n         for lib in codegen_results.crate_info.native_libraries[&cnum].iter() {\n             let name = match lib.name {\n-                Some(ref l) => l,\n+                Some(l) => l,\n                 None => continue,\n             };\n             if !relevant_lib(sess, &lib) {\n                 continue\n             }\n             match lib.kind {\n-                NativeLibraryKind::NativeUnknown => cmd.link_dylib(&name.as_str()),\n-                NativeLibraryKind::NativeFramework => cmd.link_framework(&name.as_str()),\n+                NativeLibraryKind::NativeUnknown => cmd.link_dylib(name),\n+                NativeLibraryKind::NativeFramework => cmd.link_framework(name),\n                 NativeLibraryKind::NativeStaticNobundle => {\n                     // Link \"static-nobundle\" native libs only if the crate they originate from\n                     // is being linked statically to the current crate.  If it's linked dynamically\n                     // or is an rlib already included via some other dylib crate, the symbols from\n                     // native libs will have already been included in that dylib.\n                     if data[cnum.as_usize() - 1] == Linkage::Static {\n-                        cmd.link_staticlib(&name.as_str())\n+                        cmd.link_staticlib(name)\n                     }\n                 },\n                 // ignore statically included native libraries here as we've"}, {"sha": "c42cd024926dc71f21444c13fab5e12865d9cb58", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 42, "deletions": 37, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=f71826e8f26fd4fa331574caa462960db8ed961a", "patch": "@@ -17,6 +17,7 @@ use rustc::session::config::{self, CrateType, OptLevel, DebugInfo,\n use rustc::ty::TyCtxt;\n use rustc_target::spec::{LinkerFlavor, LldFlavor};\n use rustc_serialize::{json, Encoder};\n+use syntax::symbol::Symbol;\n \n /// For all the linkers we support, and information they might\n /// need out of the shared crate context before we get rid of it.\n@@ -99,13 +100,13 @@ impl LinkerInfo {\n /// used to dispatch on whether a GNU-like linker (generally `ld.exe`) or an\n /// MSVC linker (e.g., `link.exe`) is being used.\n pub trait Linker {\n-    fn link_dylib(&mut self, lib: &str);\n-    fn link_rust_dylib(&mut self, lib: &str, path: &Path);\n-    fn link_framework(&mut self, framework: &str);\n-    fn link_staticlib(&mut self, lib: &str);\n+    fn link_dylib(&mut self, lib: Symbol);\n+    fn link_rust_dylib(&mut self, lib: Symbol, path: &Path);\n+    fn link_framework(&mut self, framework: Symbol);\n+    fn link_staticlib(&mut self, lib: Symbol);\n     fn link_rlib(&mut self, lib: &Path);\n     fn link_whole_rlib(&mut self, lib: &Path);\n-    fn link_whole_staticlib(&mut self, lib: &str, search_path: &[PathBuf]);\n+    fn link_whole_staticlib(&mut self, lib: Symbol, search_path: &[PathBuf]);\n     fn include_path(&mut self, path: &Path);\n     fn framework_path(&mut self, path: &Path);\n     fn output_filename(&mut self, path: &Path);\n@@ -215,9 +216,13 @@ impl<'a> GccLinker<'a> {\n }\n \n impl<'a> Linker for GccLinker<'a> {\n-    fn link_dylib(&mut self, lib: &str) { self.hint_dynamic(); self.cmd.arg(format!(\"-l{}\", lib)); }\n-    fn link_staticlib(&mut self, lib: &str) {\n-        self.hint_static(); self.cmd.arg(format!(\"-l{}\", lib));\n+    fn link_dylib(&mut self, lib: Symbol) {\n+        self.hint_dynamic();\n+        self.cmd.arg(format!(\"-l{}\", lib));\n+    }\n+    fn link_staticlib(&mut self, lib: Symbol) {\n+        self.hint_static();\n+        self.cmd.arg(format!(\"-l{}\", lib));\n     }\n     fn link_rlib(&mut self, lib: &Path) { self.hint_static(); self.cmd.arg(lib); }\n     fn include_path(&mut self, path: &Path) { self.cmd.arg(\"-L\").arg(path); }\n@@ -232,14 +237,14 @@ impl<'a> Linker for GccLinker<'a> {\n     fn build_static_executable(&mut self) { self.cmd.arg(\"-static\"); }\n     fn args(&mut self, args: &[String]) { self.cmd.args(args); }\n \n-    fn link_rust_dylib(&mut self, lib: &str, _path: &Path) {\n+    fn link_rust_dylib(&mut self, lib: Symbol, _path: &Path) {\n         self.hint_dynamic();\n         self.cmd.arg(format!(\"-l{}\", lib));\n     }\n \n-    fn link_framework(&mut self, framework: &str) {\n+    fn link_framework(&mut self, framework: Symbol) {\n         self.hint_dynamic();\n-        self.cmd.arg(\"-framework\").arg(framework);\n+        self.cmd.arg(\"-framework\").sym_arg(framework);\n     }\n \n     // Here we explicitly ask that the entire archive is included into the\n@@ -248,7 +253,7 @@ impl<'a> Linker for GccLinker<'a> {\n     // don't otherwise explicitly reference them. This can occur for\n     // libraries which are just providing bindings, libraries with generic\n     // functions, etc.\n-    fn link_whole_staticlib(&mut self, lib: &str, search_path: &[PathBuf]) {\n+    fn link_whole_staticlib(&mut self, lib: Symbol, search_path: &[PathBuf]) {\n         self.hint_static();\n         let target = &self.sess.target.target;\n         if !target.options.is_like_osx {\n@@ -539,11 +544,11 @@ impl<'a> Linker for MsvcLinker<'a> {\n         }\n     }\n \n-    fn link_dylib(&mut self, lib: &str) {\n+    fn link_dylib(&mut self, lib: Symbol) {\n         self.cmd.arg(&format!(\"{}.lib\", lib));\n     }\n \n-    fn link_rust_dylib(&mut self, lib: &str, path: &Path) {\n+    fn link_rust_dylib(&mut self, lib: Symbol, path: &Path) {\n         // When producing a dll, the MSVC linker may not actually emit a\n         // `foo.lib` file if the dll doesn't actually export any symbols, so we\n         // check to see if the file is there and just omit linking to it if it's\n@@ -554,7 +559,7 @@ impl<'a> Linker for MsvcLinker<'a> {\n         }\n     }\n \n-    fn link_staticlib(&mut self, lib: &str) {\n+    fn link_staticlib(&mut self, lib: Symbol) {\n         self.cmd.arg(&format!(\"{}.lib\", lib));\n     }\n \n@@ -605,11 +610,11 @@ impl<'a> Linker for MsvcLinker<'a> {\n     fn framework_path(&mut self, _path: &Path) {\n         bug!(\"frameworks are not supported on windows\")\n     }\n-    fn link_framework(&mut self, _framework: &str) {\n+    fn link_framework(&mut self, _framework: Symbol) {\n         bug!(\"frameworks are not supported on windows\")\n     }\n \n-    fn link_whole_staticlib(&mut self, lib: &str, _search_path: &[PathBuf]) {\n+    fn link_whole_staticlib(&mut self, lib: Symbol, _search_path: &[PathBuf]) {\n         // not supported?\n         self.link_staticlib(lib);\n     }\n@@ -740,8 +745,8 @@ impl<'a> Linker for EmLinker<'a> {\n         self.cmd.arg(\"-L\").arg(path);\n     }\n \n-    fn link_staticlib(&mut self, lib: &str) {\n-        self.cmd.arg(\"-l\").arg(lib);\n+    fn link_staticlib(&mut self, lib: Symbol) {\n+        self.cmd.arg(\"-l\").sym_arg(lib);\n     }\n \n     fn output_filename(&mut self, path: &Path) {\n@@ -752,12 +757,12 @@ impl<'a> Linker for EmLinker<'a> {\n         self.cmd.arg(path);\n     }\n \n-    fn link_dylib(&mut self, lib: &str) {\n+    fn link_dylib(&mut self, lib: Symbol) {\n         // Emscripten always links statically\n         self.link_staticlib(lib);\n     }\n \n-    fn link_whole_staticlib(&mut self, lib: &str, _search_path: &[PathBuf]) {\n+    fn link_whole_staticlib(&mut self, lib: Symbol, _search_path: &[PathBuf]) {\n         // not supported?\n         self.link_staticlib(lib);\n     }\n@@ -767,7 +772,7 @@ impl<'a> Linker for EmLinker<'a> {\n         self.link_rlib(lib);\n     }\n \n-    fn link_rust_dylib(&mut self, lib: &str, _path: &Path) {\n+    fn link_rust_dylib(&mut self, lib: Symbol, _path: &Path) {\n         self.link_dylib(lib);\n     }\n \n@@ -803,7 +808,7 @@ impl<'a> Linker for EmLinker<'a> {\n         bug!(\"frameworks are not supported on Emscripten\")\n     }\n \n-    fn link_framework(&mut self, _framework: &str) {\n+    fn link_framework(&mut self, _framework: Symbol) {\n         bug!(\"frameworks are not supported on Emscripten\")\n     }\n \n@@ -948,12 +953,12 @@ impl<'a> WasmLd<'a> {\n }\n \n impl<'a> Linker for WasmLd<'a> {\n-    fn link_dylib(&mut self, lib: &str) {\n-        self.cmd.arg(\"-l\").arg(lib);\n+    fn link_dylib(&mut self, lib: Symbol) {\n+        self.cmd.arg(\"-l\").sym_arg(lib);\n     }\n \n-    fn link_staticlib(&mut self, lib: &str) {\n-        self.cmd.arg(\"-l\").arg(lib);\n+    fn link_staticlib(&mut self, lib: Symbol) {\n+        self.cmd.arg(\"-l\").sym_arg(lib);\n     }\n \n     fn link_rlib(&mut self, lib: &Path) {\n@@ -995,16 +1000,16 @@ impl<'a> Linker for WasmLd<'a> {\n         self.cmd.args(args);\n     }\n \n-    fn link_rust_dylib(&mut self, lib: &str, _path: &Path) {\n-        self.cmd.arg(\"-l\").arg(lib);\n+    fn link_rust_dylib(&mut self, lib: Symbol, _path: &Path) {\n+        self.cmd.arg(\"-l\").sym_arg(lib);\n     }\n \n-    fn link_framework(&mut self, _framework: &str) {\n+    fn link_framework(&mut self, _framework: Symbol) {\n         panic!(\"frameworks not supported\")\n     }\n \n-    fn link_whole_staticlib(&mut self, lib: &str, _search_path: &[PathBuf]) {\n-        self.cmd.arg(\"-l\").arg(lib);\n+    fn link_whole_staticlib(&mut self, lib: Symbol, _search_path: &[PathBuf]) {\n+        self.cmd.arg(\"-l\").sym_arg(lib);\n     }\n \n     fn link_whole_rlib(&mut self, lib: &Path) {\n@@ -1162,27 +1167,27 @@ impl<'a> Linker for PtxLinker<'a> {\n         ::std::mem::replace(&mut self.cmd, Command::new(\"\"))\n     }\n \n-    fn link_dylib(&mut self, _lib: &str) {\n+    fn link_dylib(&mut self, _lib: Symbol) {\n         panic!(\"external dylibs not supported\")\n     }\n \n-    fn link_rust_dylib(&mut self, _lib: &str, _path: &Path) {\n+    fn link_rust_dylib(&mut self, _lib: Symbol, _path: &Path) {\n         panic!(\"external dylibs not supported\")\n     }\n \n-    fn link_staticlib(&mut self, _lib: &str) {\n+    fn link_staticlib(&mut self, _lib: Symbol) {\n         panic!(\"staticlibs not supported\")\n     }\n \n-    fn link_whole_staticlib(&mut self, _lib: &str, _search_path: &[PathBuf]) {\n+    fn link_whole_staticlib(&mut self, _lib: Symbol, _search_path: &[PathBuf]) {\n         panic!(\"staticlibs not supported\")\n     }\n \n     fn framework_path(&mut self, _path: &Path) {\n         panic!(\"frameworks not supported\")\n     }\n \n-    fn link_framework(&mut self, _framework: &str) {\n+    fn link_framework(&mut self, _framework: Symbol) {\n         panic!(\"frameworks not supported\")\n     }\n "}, {"sha": "e08eeaf85758eefdc619566da445814892f73977", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=f71826e8f26fd4fa331574caa462960db8ed961a", "patch": "@@ -27,7 +27,7 @@ use rustc::mir::mono::CodegenUnitNameBuilder;\n use rustc::ty::TyCtxt;\n use std::collections::BTreeSet;\n use syntax::ast;\n-use syntax::symbol::{Symbol, sym};\n+use syntax::symbol::{InternedString, Symbol, sym};\n use rustc::ich::{ATTR_PARTITION_REUSED, ATTR_PARTITION_CODEGENED,\n                  ATTR_EXPECTED_CGU_REUSE};\n \n@@ -45,8 +45,8 @@ pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n             .collect_and_partition_mono_items(LOCAL_CRATE)\n             .1\n             .iter()\n-            .map(|cgu| format!(\"{}\", cgu.name()))\n-            .collect::<BTreeSet<String>>();\n+            .map(|cgu| *cgu.name())\n+            .collect::<BTreeSet<InternedString>>();\n \n         let ams = AssertModuleSource {\n             tcx,\n@@ -61,7 +61,7 @@ pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n \n struct AssertModuleSource<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    available_cgus: BTreeSet<String>,\n+    available_cgus: BTreeSet<InternedString>,\n }\n \n impl AssertModuleSource<'tcx> {\n@@ -127,15 +127,15 @@ impl AssertModuleSource<'tcx> {\n \n         debug!(\"mapping '{}' to cgu name '{}'\", self.field(attr, MODULE), cgu_name);\n \n-        if !self.available_cgus.contains(&cgu_name.as_str()[..]) {\n+        if !self.available_cgus.contains(&cgu_name) {\n             self.tcx.sess.span_err(attr.span,\n                 &format!(\"no module named `{}` (mangled: {}). \\\n                           Available modules: {}\",\n                     user_path,\n                     cgu_name,\n                     self.available_cgus\n                         .iter()\n-                        .cloned()\n+                        .map(|cgu| cgu.as_str().to_string())\n                         .collect::<Vec<_>>()\n                         .join(\", \")));\n         }"}, {"sha": "ada1a8c615d44743ac3d9ce3f5171c7322f8ae22", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=f71826e8f26fd4fa331574caa462960db8ed961a", "patch": "@@ -8,7 +8,7 @@ use rustc_target::spec::abi::Abi;\n use syntax::attr;\n use syntax::source_map::Span;\n use syntax::feature_gate::{self, GateIssue};\n-use syntax::symbol::{Symbol, sym};\n+use syntax::symbol::{kw, sym, Symbol};\n use syntax::{span_err, struct_span_err};\n \n pub fn collect(tcx: TyCtxt<'_>) -> Vec<NativeLibrary> {\n@@ -132,7 +132,7 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n \n impl Collector<'tcx> {\n     fn register_native_lib(&mut self, span: Option<Span>, lib: NativeLibrary) {\n-        if lib.name.as_ref().map(|s| s.as_str().is_empty()).unwrap_or(false) {\n+        if lib.name.as_ref().map(|&s| s == kw::Invalid).unwrap_or(false) {\n             match span {\n                 Some(span) => {\n                     struct_span_err!(self.tcx.sess, span, E0454,"}, {"sha": "3e02497947aa8d7d3ff265ba35299e3246981938", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=f71826e8f26fd4fa331574caa462960db8ed961a", "patch": "@@ -383,7 +383,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n             return Ok(());\n         }\n         // An intrinsic that we do not support\n-        let intrinsic_name = &ecx.tcx.item_name(instance.def_id()).as_str()[..];\n+        let intrinsic_name = ecx.tcx.item_name(instance.def_id());\n         Err(\n             ConstEvalError::NeedsRfc(format!(\"calling intrinsic `{}`\", intrinsic_name)).into()\n         )"}, {"sha": "09e6b76900396de821f7010af30c52db6186a7dc", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=f71826e8f26fd4fa331574caa462960db8ed961a", "patch": "@@ -1462,7 +1462,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         span: Span,\n         type_str: &str,\n         trait_str: &str,\n-        name: &str,\n+        name: ast::Name,\n     ) {\n         let mut err = struct_span_err!(self.tcx().sess, span, E0223, \"ambiguous associated type\");\n         if let (Some(_), Ok(snippet)) = (\n@@ -1689,7 +1689,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         span,\n                         &qself_ty.to_string(),\n                         \"Trait\",\n-                        &assoc_ident.as_str(),\n+                        assoc_ident.name,\n                     );\n                 }\n                 return Err(ErrorReported);\n@@ -1762,7 +1762,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 span,\n                 \"Type\",\n                 &path_str,\n-                &item_segment.ident.as_str(),\n+                item_segment.ident.name,\n             );\n             return tcx.types.err;\n         };"}, {"sha": "c3092cea9833ca333e89f65bda834eeebb5aeb8a", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=f71826e8f26fd4fa331574caa462960db8ed961a", "patch": "@@ -81,10 +81,10 @@ impl Cfg {\n             },\n             MetaItemKind::List(ref items) => {\n                 let mut sub_cfgs = items.iter().map(Cfg::parse_nested);\n-                match &*name.as_str() {\n-                    \"all\" => sub_cfgs.fold(Ok(Cfg::True), |x, y| Ok(x? & y?)),\n-                    \"any\" => sub_cfgs.fold(Ok(Cfg::False), |x, y| Ok(x? | y?)),\n-                    \"not\" => if sub_cfgs.len() == 1 {\n+                match name {\n+                    sym::all => sub_cfgs.fold(Ok(Cfg::True), |x, y| Ok(x? & y?)),\n+                    sym::any => sub_cfgs.fold(Ok(Cfg::False), |x, y| Ok(x? | y?)),\n+                    sym::not => if sub_cfgs.len() == 1 {\n                         Ok(!sub_cfgs.next().unwrap()?)\n                     } else {\n                         Err(InvalidCfgError {"}, {"sha": "ae70fdc530be63f79aced4903dec9a8bae01ea73", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f71826e8f26fd4fa331574caa462960db8ed961a", "patch": "@@ -1039,7 +1039,7 @@ impl GenericBound {\n     fn maybe_sized(cx: &DocContext<'_>) -> GenericBound {\n         let did = cx.tcx.require_lang_item(lang_items::SizedTraitLangItem, None);\n         let empty = cx.tcx.intern_substs(&[]);\n-        let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n+        let path = external_path(cx, cx.tcx.item_name(did),\n             Some(did), false, vec![], empty);\n         inline::record_extern_fqn(cx, did, TypeKind::Trait);\n         GenericBound::TraitBound(PolyTrait {\n@@ -1138,13 +1138,13 @@ fn external_generic_args(\n \n // trait_did should be set to a trait's DefId if called on a TraitRef, in order to sugar\n // from Fn<(A, B,), C> to Fn(A, B) -> C\n-fn external_path(cx: &DocContext<'_>, name: &str, trait_did: Option<DefId>, has_self: bool,\n+fn external_path(cx: &DocContext<'_>, name: Symbol, trait_did: Option<DefId>, has_self: bool,\n                  bindings: Vec<TypeBinding>, substs: SubstsRef<'_>) -> Path {\n     Path {\n         global: false,\n         res: Res::Err,\n         segments: vec![PathSegment {\n-            name: name.to_string(),\n+            name: name.as_str().to_string(),\n             args: external_generic_args(cx, trait_did, has_self, bindings, substs)\n         }],\n     }\n@@ -1154,7 +1154,7 @@ impl<'a, 'tcx> Clean<GenericBound> for (&'a ty::TraitRef<'tcx>, Vec<TypeBinding>\n     fn clean(&self, cx: &DocContext<'_>) -> GenericBound {\n         let (trait_ref, ref bounds) = *self;\n         inline::record_extern_fqn(cx, trait_ref.def_id, TypeKind::Trait);\n-        let path = external_path(cx, &cx.tcx.item_name(trait_ref.def_id).as_str(),\n+        let path = external_path(cx, cx.tcx.item_name(trait_ref.def_id),\n                                  Some(trait_ref.def_id), true, bounds.clone(), trait_ref.substs);\n \n         debug!(\"ty::TraitRef\\n  subst: {:?}\\n\", trait_ref.substs);\n@@ -3089,8 +3089,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     AdtKind::Enum => TypeKind::Enum,\n                 };\n                 inline::record_extern_fqn(cx, did, kind);\n-                let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n-                                         None, false, vec![], substs);\n+                let path = external_path(cx, cx.tcx.item_name(did), None, false, vec![], substs);\n                 ResolvedPath {\n                     path,\n                     param_names: None,\n@@ -3100,7 +3099,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             }\n             ty::Foreign(did) => {\n                 inline::record_extern_fqn(cx, did, TypeKind::Foreign);\n-                let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n+                let path = external_path(cx, cx.tcx.item_name(did),\n                                          None, false, vec![], InternalSubsts::empty());\n                 ResolvedPath {\n                     path: path,\n@@ -3129,7 +3128,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 reg.clean(cx).map(|b| param_names.push(GenericBound::Outlives(b)));\n                 for did in dids {\n                     let empty = cx.tcx.intern_substs(&[]);\n-                    let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n+                    let path = external_path(cx, cx.tcx.item_name(did),\n                         Some(did), false, vec![], empty);\n                     inline::record_extern_fqn(cx, did, TypeKind::Trait);\n                     let bound = GenericBound::TraitBound(PolyTrait {\n@@ -3154,7 +3153,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     });\n                 }\n \n-                let path = external_path(cx, &cx.tcx.item_name(did).as_str(), Some(did),\n+                let path = external_path(cx, cx.tcx.item_name(did), Some(did),\n                     false, bindings, substs);\n                 ResolvedPath {\n                     path,"}, {"sha": "acc41b7c13b024de8727e7af33ad0681a58e8c34", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71826e8f26fd4fa331574caa462960db8ed961a/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=f71826e8f26fd4fa331574caa462960db8ed961a", "patch": "@@ -423,7 +423,7 @@ pub fn make_test(s: &str,\n                 Ok(Some(item)) => {\n                     if !found_main {\n                         if let ast::ItemKind::Fn(..) = item.node {\n-                            if item.ident.as_str() == \"main\" {\n+                            if item.ident.name == sym::main {\n                                 found_main = true;\n                             }\n                         }"}]}