{"sha": "dbba594575ce75b1b57ccb1e4223b9909a28b1b8", "node_id": "C_kwDOAAsO6NoAKGRiYmE1OTQ1NzVjZTc1YjFiNTdjY2IxZTQyMjNiOTkwOWEyOGIxYjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-01T17:34:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-01T17:34:24Z"}, "message": "Auto merge of #111067 - albertlarsan68:fix-multiprocessing-x-py, r=jyn514\n\nMake x.py work again in most (all?) cases\n\nFixes #111046.\n\nWrap all of x.py in `if __name__ == '__main__':` to avoid problems with `multiprocessing`\nMake the pool sizing better", "tree": {"sha": "6c9f4502ece7aa85b2b75d7356d2c93af5f3b5bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c9f4502ece7aa85b2b75d7356d2c93af5f3b5bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbba594575ce75b1b57ccb1e4223b9909a28b1b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbba594575ce75b1b57ccb1e4223b9909a28b1b8", "html_url": "https://github.com/rust-lang/rust/commit/dbba594575ce75b1b57ccb1e4223b9909a28b1b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbba594575ce75b1b57ccb1e4223b9909a28b1b8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6db1e5e771cb810b22f4ff26f1346e386ca7643f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6db1e5e771cb810b22f4ff26f1346e386ca7643f", "html_url": "https://github.com/rust-lang/rust/commit/6db1e5e771cb810b22f4ff26f1346e386ca7643f"}, {"sha": "30119498be91c3f8837a797b1ab212f4520fa0ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/30119498be91c3f8837a797b1ab212f4520fa0ce", "html_url": "https://github.com/rust-lang/rust/commit/30119498be91c3f8837a797b1ab212f4520fa0ce"}], "stats": {"total": 59, "additions": 40, "deletions": 19}, "files": [{"sha": "f22cdad7df411adba3e5a5686658334d46513f7b", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dbba594575ce75b1b57ccb1e4223b9909a28b1b8/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/dbba594575ce75b1b57ccb1e4223b9909a28b1b8/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=dbba594575ce75b1b57ccb1e4223b9909a28b1b8", "patch": "@@ -28,6 +28,20 @@ def platform_is_win32():\n else:\n     EXE_SUFFIX = \"\"\n \n+def get_cpus():\n+    if hasattr(os, \"sched_getaffinity\"):\n+        return len(os.sched_getaffinity(0))\n+    if hasattr(os, \"cpu_count\"):\n+        cpus = os.cpu_count()\n+        if cpus is not None:\n+            return cpus\n+    try:\n+        return cpu_count()\n+    except NotImplementedError:\n+        return 1\n+\n+\n+\n def get(base, url, path, checksums, verbose=False):\n     with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n         temp_path = temp_file.name\n@@ -540,11 +554,15 @@ def download_toolchain(self):\n \n             # Unpack the tarballs in parallle.\n             # In Python 2.7, Pool cannot be used as a context manager.\n-            p = Pool(min(len(tarballs_download_info), cpu_count()))\n+            pool_size = min(len(tarballs_download_info), get_cpus())\n+            if self.verbose:\n+                print('Choosing a pool size of', pool_size, 'for the unpacking of the tarballs')\n+            p = Pool(pool_size)\n             try:\n                 p.map(unpack_component, tarballs_download_info)\n             finally:\n                 p.close()\n+            p.join()\n \n             if self.should_fix_bins_and_dylibs():\n                 self.fix_bin_or_dylib(\"{}/bin/cargo\".format(bin_root))"}, {"sha": "b8cdf67712c43e573272028a6a08805020844dac", "filename": "x.py", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/dbba594575ce75b1b57ccb1e4223b9909a28b1b8/x.py", "raw_url": "https://github.com/rust-lang/rust/raw/dbba594575ce75b1b57ccb1e4223b9909a28b1b8/x.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/x.py?ref=dbba594575ce75b1b57ccb1e4223b9909a28b1b8", "patch": "@@ -4,26 +4,29 @@\n \n # This file is only a \"symlink\" to bootstrap.py, all logic should go there.\n \n-import os\n-import sys\n+# Parts of `bootstrap.py` use the `multiprocessing` module, so this entry point\n+# must use the normal `if __name__ == '__main__':` convention to avoid problems.\n+if __name__ == '__main__':\n+    import os\n+    import sys\n \n-# If this is python2, check if python3 is available and re-execute with that\n-# interpreter. Only python3 allows downloading CI LLVM.\n-#\n-# This matters if someone's system `python` is python2.\n-if sys.version_info.major < 3:\n-    try:\n-        os.execvp(\"py\", [\"py\", \"-3\"] + sys.argv)\n-    except OSError:\n+    # If this is python2, check if python3 is available and re-execute with that\n+    # interpreter. Only python3 allows downloading CI LLVM.\n+    #\n+    # This matters if someone's system `python` is python2.\n+    if sys.version_info.major < 3:\n         try:\n-            os.execvp(\"python3\", [\"python3\"] + sys.argv)\n+            os.execvp(\"py\", [\"py\", \"-3\"] + sys.argv)\n         except OSError:\n-            # Python 3 isn't available, fall back to python 2\n-            pass\n+            try:\n+                os.execvp(\"python3\", [\"python3\"] + sys.argv)\n+            except OSError:\n+                # Python 3 isn't available, fall back to python 2\n+                pass\n \n-rust_dir = os.path.dirname(os.path.abspath(__file__))\n-# For the import below, have Python search in src/bootstrap first.\n-sys.path.insert(0, os.path.join(rust_dir, \"src\", \"bootstrap\"))\n+    rust_dir = os.path.dirname(os.path.abspath(__file__))\n+    # For the import below, have Python search in src/bootstrap first.\n+    sys.path.insert(0, os.path.join(rust_dir, \"src\", \"bootstrap\"))\n \n-import bootstrap\n-bootstrap.main()\n+    import bootstrap\n+    bootstrap.main()"}]}