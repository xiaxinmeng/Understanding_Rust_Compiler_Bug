{"sha": "3a025760be8f4c56f0777fa34ba64a4f7bada8e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMDI1NzYwYmU4ZjRjNTZmMDc3N2ZhMzRiYTY0YTRmN2JhZGE4ZTc=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-01-10T00:19:40Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-01-11T10:18:44Z"}, "message": "Abort if C++ tries to swallow a Rust panic", "tree": {"sha": "e9123f65a83caf1dea1e924a64963f99f9d22f84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9123f65a83caf1dea1e924a64963f99f9d22f84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a025760be8f4c56f0777fa34ba64a4f7bada8e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a025760be8f4c56f0777fa34ba64a4f7bada8e7", "html_url": "https://github.com/rust-lang/rust/commit/3a025760be8f4c56f0777fa34ba64a4f7bada8e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a025760be8f4c56f0777fa34ba64a4f7bada8e7/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "757ed07f374edfe93be5c9084ac5c44ba738e1b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/757ed07f374edfe93be5c9084ac5c44ba738e1b2", "html_url": "https://github.com/rust-lang/rust/commit/757ed07f374edfe93be5c9084ac5c44ba738e1b2"}], "stats": {"total": 63, "additions": 17, "deletions": 46}, "files": [{"sha": "268bafd24093043e411b2c67c20a14b92ef97cdc", "filename": "src/libpanic_unwind/emcc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a025760be8f4c56f0777fa34ba64a4f7bada8e7/src%2Flibpanic_unwind%2Femcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a025760be8f4c56f0777fa34ba64a4f7bada8e7/src%2Flibpanic_unwind%2Femcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Femcc.rs?ref=3a025760be8f4c56f0777fa34ba64a4f7bada8e7", "patch": "@@ -80,6 +80,7 @@ pub unsafe fn panic(data: Box<dyn Any + Send>) -> u32 {\n     extern \"C\" fn exception_cleanup(ptr: *mut libc::c_void) {\n         unsafe {\n             ptr::drop_in_place(ptr as *mut Exception);\n+            super::__rust_drop_panic();\n         }\n     }\n }"}, {"sha": "6e04317d491fc4ad13d2977cabcfda13236bd6aa", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a025760be8f4c56f0777fa34ba64a4f7bada8e7/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a025760be8f4c56f0777fa34ba64a4f7bada8e7/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=3a025760be8f4c56f0777fa34ba64a4f7bada8e7", "patch": "@@ -78,6 +78,7 @@ pub unsafe fn panic(data: Box<dyn Any + Send>) -> u32 {\n     ) {\n         unsafe {\n             let _: Box<Exception> = Box::from_raw(exception as *mut Exception);\n+            super::__rust_drop_panic();\n         }\n     }\n }"}, {"sha": "6383ae39fb6dba0c6795de05873964bc528341bb", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a025760be8f4c56f0777fa34ba64a4f7bada8e7/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a025760be8f4c56f0777fa34ba64a4f7bada8e7/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=3a025760be8f4c56f0777fa34ba64a4f7bada8e7", "patch": "@@ -61,6 +61,12 @@ cfg_if::cfg_if! {\n     }\n }\n \n+extern \"C\" {\n+    /// Handler in libstd called when a panic object is dropped outside of\n+    /// `catch_unwind`.\n+    fn __rust_drop_panic() -> !;\n+}\n+\n mod dwarf;\n \n // Entry point for catching an exception, implemented using the `try` intrinsic"}, {"sha": "d9dca2c0f4f479e6319a3fd750b260b2e1666be0", "filename": "src/libpanic_unwind/seh.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a025760be8f4c56f0777fa34ba64a4f7bada8e7/src%2Flibpanic_unwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a025760be8f4c56f0777fa34ba64a4f7bada8e7/src%2Flibpanic_unwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh.rs?ref=3a025760be8f4c56f0777fa34ba64a4f7bada8e7", "patch": "@@ -229,6 +229,7 @@ macro_rules! define_cleanup {\n         unsafe extern $abi fn exception_cleanup(e: *mut [u64; 2]) {\n             if (*e)[0] != 0 {\n                 cleanup(*e);\n+                super::__rust_drop_panic();\n             }\n         }\n         #[unwind(allowed)]"}, {"sha": "43c2965f2315a8e828bd2166838259c760e45d46", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a025760be8f4c56f0777fa34ba64a4f7bada8e7/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a025760be8f4c56f0777fa34ba64a4f7bada8e7/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=3a025760be8f4c56f0777fa34ba64a4f7bada8e7", "patch": "@@ -55,6 +55,14 @@ extern \"C\" {\n     fn __rust_start_panic(payload: usize) -> u32;\n }\n \n+/// This function is called by the panic runtime if FFI code catches a Rust\n+/// panic but doesn't rethrow it. We don't support this case since it messes\n+/// with our panic count.\n+#[rustc_std_internal_symbol]\n+extern \"C\" fn __rust_drop_panic() -> ! {\n+    rtabort!(\"Rust panics must be rethrown\");\n+}\n+\n #[derive(Copy, Clone)]\n enum Hook {\n     Default,"}, {"sha": "b0fd65f88e7de9588ca35a263ecd4d5810fb2b8d", "filename": "src/test/run-make-fulldeps/foreign-exceptions/foo.cpp", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3a025760be8f4c56f0777fa34ba64a4f7bada8e7/src%2Ftest%2Frun-make-fulldeps%2Fforeign-exceptions%2Ffoo.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/3a025760be8f4c56f0777fa34ba64a4f7bada8e7/src%2Ftest%2Frun-make-fulldeps%2Fforeign-exceptions%2Ffoo.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fforeign-exceptions%2Ffoo.cpp?ref=3a025760be8f4c56f0777fa34ba64a4f7bada8e7", "patch": "@@ -57,21 +57,4 @@ extern \"C\" {\n             throw;\n         }\n     }\n-\n-    void swallow_exception(void (*cb)()) {\n-        try {\n-            // Do a rethrow to ensure that the exception is only dropped once.\n-            // This is necessary since we don't support copying exceptions.\n-            try {\n-                cb();\n-            } catch (...) {\n-                println(\"rethrowing Rust panic\");\n-                throw;\n-            };\n-        } catch (rust_panic e) {\n-            assert(false && \"shouldn't be able to catch a rust panic\");\n-        } catch (...) {\n-            println(\"swallowing foreign exception in catch (...)\");\n-        }\n-    }\n }"}, {"sha": "9c2045c8c89f72c24dcfe78d61d095578b5ae5a8", "filename": "src/test/run-make-fulldeps/foreign-exceptions/foo.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3a025760be8f4c56f0777fa34ba64a4f7bada8e7/src%2Ftest%2Frun-make-fulldeps%2Fforeign-exceptions%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a025760be8f4c56f0777fa34ba64a4f7bada8e7/src%2Ftest%2Frun-make-fulldeps%2Fforeign-exceptions%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fforeign-exceptions%2Ffoo.rs?ref=3a025760be8f4c56f0777fa34ba64a4f7bada8e7", "patch": "@@ -19,8 +19,6 @@ impl<'a> Drop for DropCheck<'a> {\n extern \"C\" {\n     fn throw_cxx_exception();\n \n-    fn swallow_exception(cb: extern \"C\" fn());\n-\n     #[unwind(allowed)]\n     fn cxx_catch_callback(cb: extern \"C\" fn(), ok: *mut bool);\n }\n@@ -61,34 +59,7 @@ fn throw_rust_panic() {\n     assert!(cxx_ok);\n }\n \n-fn check_exception_drop() {\n-    static mut DROP_COUNT: usize = 0;\n-\n-    struct CountDrop;\n-    impl Drop for CountDrop {\n-        fn drop(&mut self) {\n-            println!(\"CountDrop::drop\");\n-            unsafe {\n-                DROP_COUNT += 1;\n-            }\n-        }\n-    }\n-\n-\n-    #[unwind(allowed)]\n-    extern \"C\" fn callback() {\n-        println!(\"throwing rust panic #2\");\n-        panic!(CountDrop);\n-    }\n-\n-    unsafe {\n-        swallow_exception(callback);\n-        assert_eq!(DROP_COUNT, 1);\n-    }\n-}\n-\n fn main() {\n     unsafe { throw_cxx_exception() };\n     throw_rust_panic();\n-    check_exception_drop();\n }"}]}