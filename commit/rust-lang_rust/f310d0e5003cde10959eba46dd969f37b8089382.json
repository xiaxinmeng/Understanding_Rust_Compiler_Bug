{"sha": "f310d0e5003cde10959eba46dd969f37b8089382", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMTBkMGU1MDAzY2RlMTA5NTllYmE0NmRkOTY5ZjM3YjgwODkzODI=", "commit": {"author": {"name": "ltdk", "email": "usr@ltdk.xyz", "date": "2021-06-02T02:50:42Z"}, "committer": {"name": "ltdk", "email": "usr@ltdk.xyz", "date": "2021-06-02T03:09:46Z"}, "message": "Add lerp method", "tree": {"sha": "5076b533a17c71771fe407240a05a811ea572416", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5076b533a17c71771fe407240a05a811ea572416"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f310d0e5003cde10959eba46dd969f37b8089382", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f310d0e5003cde10959eba46dd969f37b8089382", "html_url": "https://github.com/rust-lang/rust/commit/f310d0e5003cde10959eba46dd969f37b8089382", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f310d0e5003cde10959eba46dd969f37b8089382/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "625d5a693e4697bcafdd34fd1a38c281acabb8e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/625d5a693e4697bcafdd34fd1a38c281acabb8e9", "html_url": "https://github.com/rust-lang/rust/commit/625d5a693e4697bcafdd34fd1a38c281acabb8e9"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "32a4d415362a66cfa89e54435b071a0f66e647fd", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f310d0e5003cde10959eba46dd969f37b8089382/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f310d0e5003cde10959eba46dd969f37b8089382/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=f310d0e5003cde10959eba46dd969f37b8089382", "patch": "@@ -876,4 +876,32 @@ impl f32 {\n     pub fn atanh(self) -> f32 {\n         0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n     }\n+\n+    /// Linear interpolation between `start` and `end`.\n+    ///\n+    /// This enables the calculation of a \"smooth\" transition between `start` and `end`,\n+    /// where start is represented by `self == 0.0` and `end` is represented by `self == 1.0`.\n+    ///\n+    /// Values below 0.0 or above 1.0 are allowed, and in general this function closely\n+    /// resembles the value of `start + self * (end - start)`, plus additional guarantees.\n+    ///\n+    /// Those guarantees are, assuming that all values are [`finite`]:\n+    ///\n+    /// * The value at 0.0 is always `start` and the value at 1.0 is always `end` (exactness)\n+    /// * If `start == end`, the value at any point will always be `start == end` (consistency)\n+    /// * The values will always move in the direction from `start` to `end` (monotonicity)\n+    ///\n+    /// [`finite`]: #method.is_finite\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n+    #[unstable(feature = \"float_interpolation\", issue = \"71015\")]\n+    pub fn lerp(self, start: f32, end: f32) -> f32 {\n+        // consistent\n+        if start == end {\n+            start\n+\n+        // exact/monotonic\n+        } else {\n+            self.mul_add(end, (-self).mul_add(start, start))\n+        }\n+    }\n }"}, {"sha": "39c3e587e1f6f22899f69fe03e755696b1bfe746", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f310d0e5003cde10959eba46dd969f37b8089382/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f310d0e5003cde10959eba46dd969f37b8089382/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=f310d0e5003cde10959eba46dd969f37b8089382", "patch": "@@ -879,6 +879,34 @@ impl f64 {\n         0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n     }\n \n+    /// Linear interpolation between `start` and `end`.\n+    ///\n+    /// This enables the calculation of a \"smooth\" transition between `start` and `end`,\n+    /// where start is represented by `self == 0.0` and `end` is represented by `self == 1.0`.\n+    ///\n+    /// Values below 0.0 or above 1.0 are allowed, and in general this function closely\n+    /// resembles the value of `start + self * (end - start)`, plus additional guarantees.\n+    ///\n+    /// Those guarantees are, assuming that all values are [`finite`]:\n+    ///\n+    /// * The value at 0.0 is always `start` and the value at 1.0 is always `end` (exactness)\n+    /// * If `start == end`, the value at any point will always be `start == end` (consistency)\n+    /// * The values will always move in the direction from `start` to `end` (monotonicity)\n+    ///\n+    /// [`finite`]: #method.is_finite\n+    #[must_use = \"method returns a new number and does not mutate the original value\"]\n+    #[unstable(feature = \"float_interpolation\", issue = \"71015\")]\n+    pub fn lerp(self, start: f64, end: f64) -> f64 {\n+        // consistent\n+        if start == end {\n+            start\n+\n+        // exact/monotonic\n+        } else {\n+            self.mul_add(end, (-self).mul_add(start, start))\n+        }\n+    }\n+\n     // Solaris/Illumos requires a wrapper around log, log2, and log10 functions\n     // because of their non-standard behavior (e.g., log(-n) returns -Inf instead\n     // of expected NaN)."}]}