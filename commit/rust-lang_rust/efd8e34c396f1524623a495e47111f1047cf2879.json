{"sha": "efd8e34c396f1524623a495e47111f1047cf2879", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZDhlMzRjMzk2ZjE1MjQ2MjNhNDk1ZTQ3MTExZjEwNDdjZjI4Nzk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-06T13:49:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-06T13:49:34Z"}, "message": "Merge #4344\n\n4344: Use SourceChange for assists r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "44ebb47b92d71a5e30cb469988ff1b490ca856d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44ebb47b92d71a5e30cb469988ff1b490ca856d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efd8e34c396f1524623a495e47111f1047cf2879", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJessBuCRBK7hj4Ov3rIwAAdHIIAFx328IaYxFb+abAbfjApYoJ\nL08daQwgdSYQUKAEv2cShOXCM/ipjUseTnd//tzP0yzCKprj/pmI4I6/fisNeJWo\ncy4eKg8G6OcOPHJO8ptcugFJ9ZtyYE/TKcb/MsxYQ5A0xPVOa156iNqxLKrgsCpM\nOulO29sSl4s983OPAWkKqi8z+633Sg0B1syC8gGu1lgF/vNfxzDQgKXleGhTGfzc\nq4G20g1CCz6muB1b9QuVdE44Tz/JlmOyOu5JH2PAlYcrgDUtJRpdKGF4YeS2JWtd\nQ24W4gBv+T3L+MCJxXOuMzRC+9B8mawgEP1st15IrkCYUpcsVR/VP3gdDa4gOJQ=\n=GC11\n-----END PGP SIGNATURE-----\n", "payload": "tree 44ebb47b92d71a5e30cb469988ff1b490ca856d8\nparent 1116c9a0e9992d0dea8dac87de95c8a74c093cff\nparent fdd4df97ba5ce1f59abf9e945052fc6f3e077c3a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588772974 +0000\ncommitter GitHub <noreply@github.com> 1588772974 +0000\n\nMerge #4344\n\n4344: Use SourceChange for assists r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efd8e34c396f1524623a495e47111f1047cf2879", "html_url": "https://github.com/rust-lang/rust/commit/efd8e34c396f1524623a495e47111f1047cf2879", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efd8e34c396f1524623a495e47111f1047cf2879/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1116c9a0e9992d0dea8dac87de95c8a74c093cff", "url": "https://api.github.com/repos/rust-lang/rust/commits/1116c9a0e9992d0dea8dac87de95c8a74c093cff", "html_url": "https://github.com/rust-lang/rust/commit/1116c9a0e9992d0dea8dac87de95c8a74c093cff"}, {"sha": "fdd4df97ba5ce1f59abf9e945052fc6f3e077c3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd4df97ba5ce1f59abf9e945052fc6f3e077c3a", "html_url": "https://github.com/rust-lang/rust/commit/fdd4df97ba5ce1f59abf9e945052fc6f3e077c3a"}], "stats": {"total": 147, "additions": 60, "deletions": 87}, "files": [{"sha": "77275156c80a83fe76cc9650a3d14af672b7c333", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/efd8e34c396f1524623a495e47111f1047cf2879/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd8e34c396f1524623a495e47111f1047cf2879/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=efd8e34c396f1524623a495e47111f1047cf2879", "patch": "@@ -1,16 +1,19 @@\n //! This module defines `AssistCtx` -- the API surface that is exposed to assists.\n use hir::Semantics;\n-use ra_db::FileRange;\n+use ra_db::{FileId, FileRange};\n use ra_fmt::{leading_indent, reindent};\n-use ra_ide_db::RootDatabase;\n+use ra_ide_db::{\n+    source_change::{SingleFileChange, SourceChange},\n+    RootDatabase,\n+};\n use ra_syntax::{\n     algo::{self, find_covering_element, find_node_at_offset, SyntaxRewriter},\n     AstNode, SourceFile, SyntaxElement, SyntaxKind, SyntaxNode, SyntaxToken, TextRange, TextSize,\n     TokenAtOffset,\n };\n use ra_text_edit::TextEditBuilder;\n \n-use crate::{AssistAction, AssistFile, AssistId, AssistLabel, GroupLabel, ResolvedAssist};\n+use crate::{AssistFile, AssistId, AssistLabel, GroupLabel, ResolvedAssist};\n \n #[derive(Clone, Debug)]\n pub(crate) struct Assist(pub(crate) Vec<AssistInfo>);\n@@ -19,15 +22,15 @@ pub(crate) struct Assist(pub(crate) Vec<AssistInfo>);\n pub(crate) struct AssistInfo {\n     pub(crate) label: AssistLabel,\n     pub(crate) group_label: Option<GroupLabel>,\n-    pub(crate) action: Option<AssistAction>,\n+    pub(crate) action: Option<SourceChange>,\n }\n \n impl AssistInfo {\n     fn new(label: AssistLabel) -> AssistInfo {\n         AssistInfo { label, group_label: None, action: None }\n     }\n \n-    fn resolved(self, action: AssistAction) -> AssistInfo {\n+    fn resolved(self, action: SourceChange) -> AssistInfo {\n         AssistInfo { action: Some(action), ..self }\n     }\n \n@@ -98,13 +101,13 @@ impl<'a> AssistCtx<'a> {\n         f: impl FnOnce(&mut ActionBuilder),\n     ) -> Option<Assist> {\n         let label = AssistLabel::new(id, label.into(), None, target);\n-\n+        let change_label = label.label.clone();\n         let mut info = AssistInfo::new(label);\n         if self.should_compute_edit {\n             let action = {\n                 let mut edit = ActionBuilder::new(&self);\n                 f(&mut edit);\n-                edit.build()\n+                edit.build(change_label, self.frange.file_id)\n             };\n             info = info.resolved(action)\n         };\n@@ -157,13 +160,13 @@ impl<'a> AssistGroup<'a> {\n         f: impl FnOnce(&mut ActionBuilder),\n     ) {\n         let label = AssistLabel::new(id, label.into(), Some(self.group.clone()), target);\n-\n+        let change_label = label.label.clone();\n         let mut info = AssistInfo::new(label).with_group(self.group.clone());\n         if self.ctx.should_compute_edit {\n             let action = {\n                 let mut edit = ActionBuilder::new(&self.ctx);\n                 f(&mut edit);\n-                edit.build()\n+                edit.build(change_label, self.ctx.frange.file_id)\n             };\n             info = info.resolved(action)\n         };\n@@ -255,11 +258,16 @@ impl<'a, 'b> ActionBuilder<'a, 'b> {\n         self.file = assist_file\n     }\n \n-    fn build(self) -> AssistAction {\n+    fn build(self, change_label: String, current_file: FileId) -> SourceChange {\n         let edit = self.edit.finish();\n         if edit.is_empty() && self.cursor_position.is_none() {\n             panic!(\"Only call `add_assist` if the assist can be applied\")\n         }\n-        AssistAction { edit, cursor_position: self.cursor_position, file: self.file }\n+        let file = match self.file {\n+            AssistFile::CurrentFile => current_file,\n+            AssistFile::TargetFile(it) => it,\n+        };\n+        SingleFileChange { label: change_label, edit, cursor_position: self.cursor_position }\n+            .into_source_change(file)\n     }\n }"}, {"sha": "8cd8f89c42b59c876ad0c0f0c652414474cb778a", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/efd8e34c396f1524623a495e47111f1047cf2879/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd8e34c396f1524623a495e47111f1047cf2879/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=efd8e34c396f1524623a495e47111f1047cf2879", "patch": "@@ -19,9 +19,8 @@ pub mod ast_transform;\n \n use hir::Semantics;\n use ra_db::{FileId, FileRange};\n-use ra_ide_db::RootDatabase;\n-use ra_syntax::{TextRange, TextSize};\n-use ra_text_edit::TextEdit;\n+use ra_ide_db::{source_change::SourceChange, RootDatabase};\n+use ra_syntax::TextRange;\n \n pub(crate) use crate::assist_ctx::{Assist, AssistCtx};\n \n@@ -57,21 +56,14 @@ impl AssistLabel {\n     }\n }\n \n-#[derive(Debug, Clone)]\n-pub struct AssistAction {\n-    pub edit: TextEdit,\n-    pub cursor_position: Option<TextSize>,\n-    pub file: AssistFile,\n-}\n-\n #[derive(Debug, Clone)]\n pub struct ResolvedAssist {\n     pub label: AssistLabel,\n-    pub action: AssistAction,\n+    pub action: SourceChange,\n }\n \n #[derive(Debug, Clone, Copy)]\n-pub enum AssistFile {\n+enum AssistFile {\n     CurrentFile,\n     TargetFile(FileId),\n }"}, {"sha": "572462bfc470078280c1a78e5463ab0a8770c681", "filename": "crates/ra_assists/src/tests.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/efd8e34c396f1524623a495e47111f1047cf2879/crates%2Fra_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd8e34c396f1524623a495e47111f1047cf2879/crates%2Fra_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests.rs?ref=efd8e34c396f1524623a495e47111f1047cf2879", "patch": "@@ -11,7 +11,7 @@ use test_utils::{\n     RangeOrOffset,\n };\n \n-use crate::{handlers::Handler, resolved_assists, AssistCtx, AssistFile};\n+use crate::{handlers::Handler, resolved_assists, AssistCtx};\n \n pub(crate) fn with_single_file(text: &str) -> (RootDatabase, FileId) {\n     let (mut db, file_id) = RootDatabase::with_single_file(text);\n@@ -41,7 +41,7 @@ fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n     let (db, file_id) = crate::tests::with_single_file(&before);\n     let frange = FileRange { file_id, range: selection.into() };\n \n-    let assist = resolved_assists(&db, frange)\n+    let mut assist = resolved_assists(&db, frange)\n         .into_iter()\n         .find(|assist| assist.label.id.0 == assist_id)\n         .unwrap_or_else(|| {\n@@ -57,8 +57,9 @@ fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n         });\n \n     let actual = {\n+        let change = assist.action.source_file_edits.pop().unwrap();\n         let mut actual = before.clone();\n-        assist.action.edit.apply(&mut actual);\n+        change.edit.apply(&mut actual);\n         actual\n     };\n     assert_eq_text!(after, &actual);\n@@ -93,26 +94,23 @@ fn check(assist: Handler, before: &str, expected: ExpectedResult) {\n \n     match (assist(assist_ctx), expected) {\n         (Some(assist), ExpectedResult::After(after)) => {\n-            let action = assist.0[0].action.clone().unwrap();\n+            let mut action = assist.0[0].action.clone().unwrap();\n+            let change = action.source_file_edits.pop().unwrap();\n \n-            let mut actual = if let AssistFile::TargetFile(file_id) = action.file {\n-                db.file_text(file_id).as_ref().to_owned()\n-            } else {\n-                text_without_caret\n-            };\n-            action.edit.apply(&mut actual);\n+            let mut actual = db.file_text(change.file_id).as_ref().to_owned();\n+            change.edit.apply(&mut actual);\n \n             match action.cursor_position {\n                 None => {\n                     if let RangeOrOffset::Offset(before_cursor_pos) = range_or_offset {\n-                        let off = action\n+                        let off = change\n                             .edit\n                             .apply_to_offset(before_cursor_pos)\n                             .expect(\"cursor position is affected by the edit\");\n                         actual = add_cursor(&actual, off)\n                     }\n                 }\n-                Some(off) => actual = add_cursor(&actual, off),\n+                Some(off) => actual = add_cursor(&actual, off.offset),\n             };\n \n             assert_eq_text!(after, &actual);"}, {"sha": "389339a03446d0da16a4bb940373c6f186e22673", "filename": "crates/ra_ide/src/assists.rs", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1116c9a0e9992d0dea8dac87de95c8a74c093cff/crates%2Fra_ide%2Fsrc%2Fassists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1116c9a0e9992d0dea8dac87de95c8a74c093cff/crates%2Fra_ide%2Fsrc%2Fassists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fassists.rs?ref=1116c9a0e9992d0dea8dac87de95c8a74c093cff", "patch": "@@ -1,42 +0,0 @@\n-//! FIXME: write short doc here\n-\n-use ra_assists::{resolved_assists, AssistAction};\n-use ra_db::{FilePosition, FileRange};\n-use ra_ide_db::RootDatabase;\n-\n-use crate::{FileId, SourceChange, SourceFileEdit};\n-\n-pub use ra_assists::AssistId;\n-\n-#[derive(Debug)]\n-pub struct Assist {\n-    pub id: AssistId,\n-    pub label: String,\n-    pub group_label: Option<String>,\n-    pub source_change: SourceChange,\n-}\n-\n-pub(crate) fn assists(db: &RootDatabase, frange: FileRange) -> Vec<Assist> {\n-    resolved_assists(db, frange)\n-        .into_iter()\n-        .map(|assist| {\n-            let file_id = frange.file_id;\n-            Assist {\n-                id: assist.label.id,\n-                label: assist.label.label.clone(),\n-                group_label: assist.label.group.map(|it| it.0),\n-                source_change: action_to_edit(assist.action, file_id, assist.label.label.clone()),\n-            }\n-        })\n-        .collect()\n-}\n-\n-fn action_to_edit(action: AssistAction, file_id: FileId, label: String) -> SourceChange {\n-    let file_id = match action.file {\n-        ra_assists::AssistFile::TargetFile(it) => it,\n-        _ => file_id,\n-    };\n-    let file_edit = SourceFileEdit { file_id, edit: action.edit };\n-    SourceChange::source_file_edit(label, file_edit)\n-        .with_cursor_opt(action.cursor_position.map(|offset| FilePosition { offset, file_id }))\n-}"}, {"sha": "614029de46a131802766786b4c6d16881753d50c", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/efd8e34c396f1524623a495e47111f1047cf2879/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd8e34c396f1524623a495e47111f1047cf2879/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=efd8e34c396f1524623a495e47111f1047cf2879", "patch": "@@ -31,7 +31,6 @@ mod syntax_highlighting;\n mod parent_module;\n mod references;\n mod impls;\n-mod assists;\n mod diagnostics;\n mod syntax_tree;\n mod folding_ranges;\n@@ -64,7 +63,6 @@ use ra_syntax::{SourceFile, TextRange, TextSize};\n use crate::display::ToNav;\n \n pub use crate::{\n-    assists::{Assist, AssistId},\n     call_hierarchy::CallItem,\n     completion::{\n         CompletionConfig, CompletionItem, CompletionItemKind, CompletionScore, InsertTextFormat,\n@@ -84,6 +82,7 @@ pub use crate::{\n };\n \n pub use hir::Documentation;\n+pub use ra_assists::AssistId;\n pub use ra_db::{\n     Canceled, CrateGraph, CrateId, Edition, FileId, FilePosition, FileRange, SourceRootId,\n };\n@@ -134,10 +133,12 @@ pub struct AnalysisHost {\n     db: RootDatabase,\n }\n \n-impl Default for AnalysisHost {\n-    fn default() -> AnalysisHost {\n-        AnalysisHost::new(None)\n-    }\n+#[derive(Debug)]\n+pub struct Assist {\n+    pub id: AssistId,\n+    pub label: String,\n+    pub group_label: Option<String>,\n+    pub source_change: SourceChange,\n }\n \n impl AnalysisHost {\n@@ -187,6 +188,12 @@ impl AnalysisHost {\n     }\n }\n \n+impl Default for AnalysisHost {\n+    fn default() -> AnalysisHost {\n+        AnalysisHost::new(None)\n+    }\n+}\n+\n /// Analysis is a snapshot of a world state at a moment in time. It is the main\n /// entry point for asking semantic information about the world. When the world\n /// state is advanced using `AnalysisHost::apply_change` method, all existing\n@@ -464,7 +471,17 @@ impl Analysis {\n     /// Computes assists (aka code actions aka intentions) for the given\n     /// position.\n     pub fn assists(&self, frange: FileRange) -> Cancelable<Vec<Assist>> {\n-        self.with_db(|db| assists::assists(db, frange))\n+        self.with_db(|db| {\n+            ra_assists::resolved_assists(db, frange)\n+                .into_iter()\n+                .map(|assist| Assist {\n+                    id: assist.label.id,\n+                    label: assist.label.label,\n+                    group_label: assist.label.group.map(|it| it.0),\n+                    source_change: assist.action,\n+                })\n+                .collect()\n+        })\n     }\n \n     /// Computes the set of diagnostics for the given file."}, {"sha": "af81a91a4a5bfdf52a1c81656c9e1d34ec0e4563", "filename": "crates/ra_ide_db/src/source_change.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/efd8e34c396f1524623a495e47111f1047cf2879/crates%2Fra_ide_db%2Fsrc%2Fsource_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd8e34c396f1524623a495e47111f1047cf2879/crates%2Fra_ide_db%2Fsrc%2Fsource_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsource_change.rs?ref=efd8e34c396f1524623a495e47111f1047cf2879", "patch": "@@ -6,7 +6,7 @@\n use ra_db::{FileId, FilePosition, RelativePathBuf, SourceRootId};\n use ra_text_edit::{TextEdit, TextSize};\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n pub struct SourceChange {\n     /// For display in the undo log in the editor\n     pub label: String,\n@@ -90,13 +90,13 @@ impl SourceChange {\n     }\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n pub struct SourceFileEdit {\n     pub file_id: FileId,\n     pub edit: TextEdit,\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n pub enum FileSystemEdit {\n     CreateFile { source_root: SourceRootId, path: RelativePathBuf },\n     MoveFile { src: FileId, dst_source_root: SourceRootId, dst_path: RelativePathBuf },"}]}