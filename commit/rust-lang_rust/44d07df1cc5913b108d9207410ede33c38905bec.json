{"sha": "44d07df1cc5913b108d9207410ede33c38905bec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZDA3ZGYxY2M1OTEzYjEwOGQ5MjA3NDEwZWRlMzNjMzg5MDViZWM=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2018-02-20T01:27:28Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2018-02-20T01:27:28Z"}, "message": "Sort synthetic impls bounds before rendering\n\nThis removes the implicit dependency on the iteration\norder of FxHashMap", "tree": {"sha": "c3753f0ea1ca3dfc1f16ab52dfab1e122fac19d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3753f0ea1ca3dfc1f16ab52dfab1e122fac19d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44d07df1cc5913b108d9207410ede33c38905bec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlqLeaAACgkQtAh+UQ6Y\nsWQmow//YHOnqSJ4GnnupVmS53zjCxCXYclkNWJB1o0i7IBgChGZUJvJqGWG5vMt\nsmG1r9FkM1tu+Zh1qXl5eY7mgKf3ZDDYRZd7tQkEG2Q3UWAGxDVV7ZelF5Vyxt1o\nbrd/pVGQW13ZOaZUnmwLMH4V0Bk43MlceKTX9wzLWKohYHNa9f1hAfdKYs6vAnG+\nYpJYsVy0c5nU+ODbjZ1TiryYAoE8JCFK3gCNZJTK6YvJDr38C7TVQmcfyP92kdPt\nJ75Mrijs3KdOJPZWLSoVzDNMHSPnA9D2/4LzJk7qB5xbXK6rxADTB/+OAOGPtw4f\nBeK1D6K9LWpE22PQiLg3zu/xR9ijzl2n40oSgVw5LhQDO5KYXL94+TB8X8bnl+Y+\noYqt3CHvfBW7FFyhk/0NgFbeEML/VQAQrg2FenmitM3er2CkaCvvkwSn2hgc/yYL\nYGKqOLMlcpA7fZnLB3mi5UO2Wo00xgfgZQLJ9oYcxqbtnLkfVoQ5LDy9WBOPy2j0\nxJMPSIJd1VYA+epDN+DpmRvTcJEWg+7yuSws1QLOS5xh7ZfcqqOgw9eQ/qbEaO1y\nfXDiUxLo3mRpZZzlIqL3mZq0qW6aXarlVK68Qm8ghWhiB8n5xMb670OgoLkW1LqB\n2LqY61cglK/8KjwuxZAxU3p3UDd8thIKNGgyDX1bmXT+OTO90pw=\n=OoDp\n-----END PGP SIGNATURE-----", "payload": "tree c3753f0ea1ca3dfc1f16ab52dfab1e122fac19d2\nparent 87881799a20e66b8dcef027e26021cefefeb14fd\nauthor Aaron Hill <aa1ronham@gmail.com> 1519090048 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1519090048 -0500\n\nSort synthetic impls bounds before rendering\n\nThis removes the implicit dependency on the iteration\norder of FxHashMap\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44d07df1cc5913b108d9207410ede33c38905bec", "html_url": "https://github.com/rust-lang/rust/commit/44d07df1cc5913b108d9207410ede33c38905bec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44d07df1cc5913b108d9207410ede33c38905bec/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87881799a20e66b8dcef027e26021cefefeb14fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/87881799a20e66b8dcef027e26021cefefeb14fd", "html_url": "https://github.com/rust-lang/rust/commit/87881799a20e66b8dcef027e26021cefefeb14fd"}], "stats": {"total": 55, "additions": 50, "deletions": 5}, "files": [{"sha": "f1bba0e836189ff4383b2f20223c69e619705f6e", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/44d07df1cc5913b108d9207410ede33c38905bec/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d07df1cc5913b108d9207410ede33c38905bec/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=44d07df1cc5913b108d9207410ede33c38905bec", "patch": "@@ -1354,12 +1354,57 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n             }\n         }\n \n+        self.sort_where_predicates(&mut existing_predicates);\n+\n         Generics {\n             params: generic_params,\n             where_predicates: existing_predicates,\n         }\n     }\n \n+    // Ensure that the predicates are in a consistent order. The precise\n+    // ordering doesn't actually matter, but it's important that\n+    // a given set of predicates always appears in the same order -\n+    // both for visual consistency between 'rustdoc' runs, and to\n+    // make writing tests much easier\n+    fn sort_where_predicates(&self, predicates: &mut Vec<WherePredicate>) {\n+        // We should never have identical bounds - and if we do,\n+        // they're visually identical as well. Therefore, using\n+        // an unstable sort is fine.\n+        predicates.sort_unstable_by(|first, second| {\n+            // This might look horrendously hacky, but it's actually not that bad.\n+            //\n+            // For performance reasons, we use several different FxHashMaps\n+            // in the process of computing the final set of where predicates.\n+            // However, the iteration order of a HashMap is completely unspecified.\n+            // In fact, the iteration of an FxHashMap can even vary between platforms,\n+            // since FxHasher has different behavior for 32-bit and 64-bit platforms.\n+            //\n+            // Obviously, it's extremely undesireable for documentation rendering\n+            // to be depndent on the platform it's run on. Apart from being confusing\n+            // to end users, it makes writing tests much more difficult, as predicates\n+            // can appear in any order in the final result.\n+            //\n+            // To solve this problem, we sort WherePredicates by their Debug\n+            // string. The thing to keep in mind is that we don't really\n+            // care what the final order is - we're synthesizing an impl\n+            // ourselves, so any order can be considered equally valid.\n+            // By sorting the predicates, however, we ensure that for\n+            // a given codebase, all auto-trait impls always render\n+            // in exactly the same way.\n+            //\n+            // Using the Debug impementation for sorting prevents\n+            // us from needing to write quite a bit of almost\n+            // entirely useless code (e.g. how should two\n+            // Types be sorted relative to each other).\n+            // This approach is probably somewhat slower, but\n+            // the small number of items involved (impls\n+            // rarely have more than a few bounds) means\n+            // that it shouldn't matter in practice.\n+            format!(\"{:?}\", first).cmp(&format!(\"{:?}\", second))\n+        });\n+    }\n+\n     fn is_fn_ty(&self, tcx: &TyCtxt, ty: &Type) -> bool {\n         match &ty {\n             &&Type::ResolvedPath { ref did, .. } => {"}, {"sha": "531798c30c656852ec5f8397c32210dcf6b103c0", "filename": "src/test/rustdoc/synthetic_auto/complex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44d07df1cc5913b108d9207410ede33c38905bec/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d07df1cc5913b108d9207410ede33c38905bec/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs?ref=44d07df1cc5913b108d9207410ede33c38905bec", "patch": "@@ -31,8 +31,8 @@ mod foo {\n \n // @has complex/struct.NotOuter.html\n // @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' \"impl<'a, T, K: \\\n-// ?Sized> Send for NotOuter<'a, T, K> where 'a: 'static, K: for<'b> Fn((&'b bool, &'a u8)) \\\n-// -> &'b i8, <T as MyTrait<'a>>::MyItem: Copy, T: MyTrait<'a>\"\n+// ?Sized> Send for NotOuter<'a, T, K> where K: for<'b> Fn((&'b bool, &'a u8)) \\\n+// -> &'b i8, T: MyTrait<'a>, <T as MyTrait<'a>>::MyItem: Copy, 'a: 'static\"\n \n pub use foo::{Foo, Inner as NotInner, MyTrait as NotMyTrait, Outer as NotOuter};\n "}, {"sha": "272925e5db5424d7a414a2d0a1e94bbea67b888f", "filename": "src/test/rustdoc/synthetic_auto/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44d07df1cc5913b108d9207410ede33c38905bec/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d07df1cc5913b108d9207410ede33c38905bec/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs?ref=44d07df1cc5913b108d9207410ede33c38905bec", "patch": "@@ -19,7 +19,7 @@ where\n \n // @has lifetimes/struct.Foo.html\n // @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' \"impl<'c, K> Send \\\n-// for Foo<'c, K> where 'c: 'static, K: for<'b> Fn(&'b bool) -> &'c u8\"\n+// for Foo<'c, K> where K: for<'b> Fn(&'b bool) -> &'c u8, 'c: 'static\"\n //\n // @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' \"impl<'c, K> Sync \\\n // for Foo<'c, K> where K: Sync\""}, {"sha": "977607fb148264652908b8f4b26a981d1c60b1db", "filename": "src/test/rustdoc/synthetic_auto/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44d07df1cc5913b108d9207410ede33c38905bec/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d07df1cc5913b108d9207410ede33c38905bec/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs?ref=44d07df1cc5913b108d9207410ede33c38905bec", "patch": "@@ -34,10 +34,10 @@ where\n \n // @has project/struct.Foo.html\n // @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' \"impl<'c, K> Send \\\n-// for Foo<'c, K> where 'c: 'static, K: MyTrait<MyItem = bool>\"\n+// for Foo<'c, K> where K: MyTrait<MyItem = bool>, 'c: 'static\"\n //\n // @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' \"impl<'c, K> Sync \\\n-// for Foo<'c, K> where 'c: 'static, K: MyTrait, <K as MyTrait>::MyItem: OtherTrait\"\n+// for Foo<'c, K> where K: MyTrait, <K as MyTrait>::MyItem: OtherTrait, 'c: 'static,\"\n pub struct Foo<'c, K: 'c> {\n     inner_field: Inner<'c, K>,\n }"}]}