{"sha": "dbd396db9179d99a219726e4dcfb7875c6749390", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZDM5NmRiOTE3OWQ5OWEyMTk3MjZlNGRjZmI3ODc1YzY3NDkzOTA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-12T21:26:46Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-12T21:26:46Z"}, "message": "Merge pull request #146 from birkenfeld/unicode\n\nunicode: add lint against non-ascii chars in literals (Allow by default)", "tree": {"sha": "cd3e65f524222201bd20fda48dbb8fd68ba52fc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd3e65f524222201bd20fda48dbb8fd68ba52fc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbd396db9179d99a219726e4dcfb7875c6749390", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbd396db9179d99a219726e4dcfb7875c6749390", "html_url": "https://github.com/rust-lang/rust/commit/dbd396db9179d99a219726e4dcfb7875c6749390", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbd396db9179d99a219726e4dcfb7875c6749390/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79bf774e9b552862041b8dc2a49ac5ddcc91bffa", "url": "https://api.github.com/repos/rust-lang/rust/commits/79bf774e9b552862041b8dc2a49ac5ddcc91bffa", "html_url": "https://github.com/rust-lang/rust/commit/79bf774e9b552862041b8dc2a49ac5ddcc91bffa"}, {"sha": "3044d3d6333f92a9958b64420d9893403d4aea97", "url": "https://api.github.com/repos/rust-lang/rust/commits/3044d3d6333f92a9958b64420d9893403d4aea97", "html_url": "https://github.com/rust-lang/rust/commit/3044d3d6333f92a9958b64420d9893403d4aea97"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "7d7eff35545c594bf41347d3d8d723cf8e0add5c", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbd396db9179d99a219726e4dcfb7875c6749390/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd396db9179d99a219726e4dcfb7875c6749390/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=dbd396db9179d99a219726e4dcfb7875c6749390", "patch": "@@ -78,6 +78,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n                                            attrs::INLINE_ALWAYS,\n                                            collapsible_if::COLLAPSIBLE_IF,\n                                            unicode::ZERO_WIDTH_SPACE,\n+                                           unicode::NON_ASCII_LITERAL,\n                                            strings::STRING_ADD_ASSIGN,\n                                            returns::NEEDLESS_RETURN,\n                                            misc::MODULO_ONE,"}, {"sha": "ca6abaf01b4ba1c27d2cafe0db2db9b22095a53a", "filename": "src/unicode.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dbd396db9179d99a219726e4dcfb7875c6749390/src%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd396db9179d99a219726e4dcfb7875c6749390/src%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funicode.rs?ref=dbd396db9179d99a219726e4dcfb7875c6749390", "patch": "@@ -4,13 +4,14 @@ use syntax::codemap::{BytePos, Span};\n use utils::span_lint;\n \n declare_lint!{ pub ZERO_WIDTH_SPACE, Deny, \"Zero-width space is confusing\" }\n+declare_lint!{ pub NON_ASCII_LITERAL, Allow, \"Lint literal non-ASCII chars in literals\" }\n \n #[derive(Copy, Clone)]\n pub struct Unicode;\n \n impl LintPass for Unicode {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(ZERO_WIDTH_SPACE)\n+        lint_array!(ZERO_WIDTH_SPACE, NON_ASCII_LITERAL)\n     }\n \n     fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n@@ -23,24 +24,21 @@ impl LintPass for Unicode {\n }\n \n fn check_str(cx: &Context, string: &str, span: Span) {\n-    let mut start: Option<usize> = None;\n     for (i, c) in string.char_indices() {\n         if c == '\\u{200B}' {\n-            if start.is_none() { start = Some(i); }\n-        } else {\n-            lint_zero_width(cx, span, start);\n-            start = None;\n+            str_pos_lint(cx, ZERO_WIDTH_SPACE, span, i,\n+                         \"zero-width space detected. Consider using `\\\\u{200B}`.\");\n+        }\n+        if c as u32 > 0x7F {\n+            str_pos_lint(cx, NON_ASCII_LITERAL, span, i, &format!(\n+                \"literal non-ASCII character detected. Consider using `\\\\u{{{:X}}}`.\", c as u32));\n         }\n     }\n-    lint_zero_width(cx, span, start);\n }\n \n-fn lint_zero_width(cx: &Context, span: Span, start: Option<usize>) {\n-    start.map(|index| {\n-        span_lint(cx, ZERO_WIDTH_SPACE, Span {\n-            lo: span.lo + BytePos(index as u32),\n-            hi: span.lo + BytePos(index as u32),\n-            expn_id: span.expn_id,\n-        }, \"zero-width space detected. Consider using `\\\\u{200B}`.\")\n-    });\n+fn str_pos_lint(cx: &Context, lint: &'static Lint, span: Span, index: usize, msg: &str) {\n+    span_lint(cx, lint, Span { lo: span.lo + BytePos((1 + index) as u32),\n+                               hi: span.lo + BytePos((1 + index) as u32),\n+                               expn_id: span.expn_id }, msg);\n+\n }"}, {"sha": "e4730f60de85c85835ce609a764d3a28af110f60", "filename": "tests/compile-fail/unicode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbd396db9179d99a219726e4dcfb7875c6749390/tests%2Fcompile-fail%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd396db9179d99a219726e4dcfb7875c6749390/tests%2Fcompile-fail%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funicode.rs?ref=dbd396db9179d99a219726e4dcfb7875c6749390", "patch": "@@ -4,18 +4,18 @@\n #[deny(zero_width_space)]\n fn zero() {\n     print!(\"Here >\u200b< is a ZWS, and \u200banother\");\n-                            //~^ ERROR zero-width space detected. Consider using `\\u{200B}`\n-                              //~^^ ERROR zero-width space detected. Consider using `\\u{200B}`\n+               //~^ ERROR zero-width space detected. Consider using `\\u{200B}`\n+                            //~^^ ERROR zero-width space detected. Consider using `\\u{200B}`\n }\n \n //#[deny(unicode_canon)]\n fn canon() {\n     print!(\"\u0300ah?\"); //not yet ~ERROR non-canonical unicode sequence detected. Consider using \u00e0\n }\n \n-//#[deny(ascii_only)]\n+#[deny(non_ascii_literal)]\n fn uni() {\n-    println!(\"\u00dcben!\"); //not yet ~ERROR Unicode literal detected. Consider using \\u{FC}\n+    print!(\"\u00dcben!\"); //~ERROR literal non-ASCII character detected. Consider using `\\u{DC}`\n }\n \n fn main() {"}]}