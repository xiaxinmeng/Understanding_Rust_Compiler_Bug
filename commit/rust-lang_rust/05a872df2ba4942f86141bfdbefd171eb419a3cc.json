{"sha": "05a872df2ba4942f86141bfdbefd171eb419a3cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YTg3MmRmMmJhNDk0MmY4NjE0MWJmZGJlZmQxNzFlYjQxOWEzY2M=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-02T22:01:30Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-30T20:01:26Z"}, "message": "wf: {Int,Float}Var can only infer to always-WF ints/floats.", "tree": {"sha": "47dc9a1bd97ac1d6b0848608f70c47a7b511af4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47dc9a1bd97ac1d6b0848608f70c47a7b511af4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05a872df2ba4942f86141bfdbefd171eb419a3cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05a872df2ba4942f86141bfdbefd171eb419a3cc", "html_url": "https://github.com/rust-lang/rust/commit/05a872df2ba4942f86141bfdbefd171eb419a3cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05a872df2ba4942f86141bfdbefd171eb419a3cc/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1dc2afd05a0f501512d9ed24f2d1785f7228eba", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1dc2afd05a0f501512d9ed24f2d1785f7228eba", "html_url": "https://github.com/rust-lang/rust/commit/d1dc2afd05a0f501512d9ed24f2d1785f7228eba"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "1d4afeaae42c46c5629b07ebdfc75e76315cd473", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05a872df2ba4942f86141bfdbefd171eb419a3cc/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a872df2ba4942f86141bfdbefd171eb419a3cc/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=05a872df2ba4942f86141bfdbefd171eb419a3cc", "patch": "@@ -24,7 +24,7 @@ pub fn obligations<'a, 'tcx>(\n ) -> Option<Vec<traits::PredicateObligation<'tcx>>> {\n     // Handle the \"livelock\" case (see comment above) by bailing out if necessary.\n     let ty = match ty.kind {\n-        ty::Infer(_) => {\n+        ty::Infer(ty::TyVar(_)) => {\n             let resolved_ty = infcx.shallow_resolve(ty);\n             if resolved_ty == ty {\n                 // No progress, bail out to prevent \"livelock\".\n@@ -356,6 +356,12 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     // WfScalar, WfParameter, etc\n                 }\n \n+                // Can only infer to `ty::Int(_) | ty::Uint(_)`.\n+                ty::Infer(ty::IntVar(_)) => {}\n+\n+                // Can only infer to `ty::Float(_)`.\n+                ty::Infer(ty::FloatVar(_)) => {}\n+\n                 ty::Slice(subty) => {\n                     self.require_sized(subty, traits::SliceOrArrayElem);\n                 }\n@@ -514,7 +520,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                 // prevention, which happens before this can be reached.\n                 ty::Infer(_) => {\n                     let ty = self.infcx.shallow_resolve(ty);\n-                    if let ty::Infer(_) = ty.kind {\n+                    if let ty::Infer(ty::TyVar(_)) = ty.kind {\n                         // Not yet resolved, but we've made progress.\n                         let cause = self.cause(traits::MiscObligation);\n                         self.out.push(traits::Obligation::new("}]}