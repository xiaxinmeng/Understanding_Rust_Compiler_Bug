{"sha": "5fb15d02379b2d18176bd5a920a94157a3344e51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYjE1ZDAyMzc5YjJkMTgxNzZiZDVhOTIwYTk0MTU3YTMzNDRlNTE=", "commit": {"author": {"name": "Matt Kraai", "email": "kraai@ftbfs.org", "date": "2016-01-12T04:44:24Z"}, "committer": {"name": "Matt Kraai", "email": "kraai@ftbfs.org", "date": "2016-01-12T04:44:24Z"}, "message": "Replace --show-span with -Z show-span", "tree": {"sha": "0f7e35fa5168737d5721b784bed1f191a6a7626b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f7e35fa5168737d5721b784bed1f191a6a7626b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fb15d02379b2d18176bd5a920a94157a3344e51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fb15d02379b2d18176bd5a920a94157a3344e51", "html_url": "https://github.com/rust-lang/rust/commit/5fb15d02379b2d18176bd5a920a94157a3344e51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fb15d02379b2d18176bd5a920a94157a3344e51/comments", "author": {"login": "kraai", "id": 552646, "node_id": "MDQ6VXNlcjU1MjY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/552646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraai", "html_url": "https://github.com/kraai", "followers_url": "https://api.github.com/users/kraai/followers", "following_url": "https://api.github.com/users/kraai/following{/other_user}", "gists_url": "https://api.github.com/users/kraai/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraai/subscriptions", "organizations_url": "https://api.github.com/users/kraai/orgs", "repos_url": "https://api.github.com/users/kraai/repos", "events_url": "https://api.github.com/users/kraai/events{/privacy}", "received_events_url": "https://api.github.com/users/kraai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kraai", "id": 552646, "node_id": "MDQ6VXNlcjU1MjY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/552646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraai", "html_url": "https://github.com/kraai", "followers_url": "https://api.github.com/users/kraai/followers", "following_url": "https://api.github.com/users/kraai/following{/other_user}", "gists_url": "https://api.github.com/users/kraai/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraai/subscriptions", "organizations_url": "https://api.github.com/users/kraai/orgs", "repos_url": "https://api.github.com/users/kraai/repos", "events_url": "https://api.github.com/users/kraai/events{/privacy}", "received_events_url": "https://api.github.com/users/kraai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d70ab2bdf16c22b9f3ff0230089b44855e3f1593", "url": "https://api.github.com/repos/rust-lang/rust/commits/d70ab2bdf16c22b9f3ff0230089b44855e3f1593", "html_url": "https://github.com/rust-lang/rust/commit/d70ab2bdf16c22b9f3ff0230089b44855e3f1593"}], "stats": {"total": 15, "additions": 5, "deletions": 10}, "files": [{"sha": "80bfbe4edda8810dedb47db0085254a450497c89", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fb15d02379b2d18176bd5a920a94157a3344e51/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb15d02379b2d18176bd5a920a94157a3344e51/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=5fb15d02379b2d18176bd5a920a94157a3344e51", "patch": "@@ -132,7 +132,6 @@ pub struct Options {\n     pub prints: Vec<PrintRequest>,\n     pub cg: CodegenOptions,\n     pub color: ColorConfig,\n-    pub show_span: Option<String>,\n     pub externs: HashMap<String, Vec<String>>,\n     pub crate_name: Option<String>,\n     /// An optional name to use as the crate for std during std injection,\n@@ -243,7 +242,6 @@ pub fn basic_options() -> Options {\n         prints: Vec::new(),\n         cg: basic_codegen_options(),\n         color: ColorConfig::Auto,\n-        show_span: None,\n         externs: HashMap::new(),\n         crate_name: None,\n         alt_std_name: None,\n@@ -634,6 +632,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"don't clear the resolution tables after analysis\"),\n     keep_ast: bool = (false, parse_bool,\n           \"keep the AST after lowering it to HIR\"),\n+    show_span: Option<String> = (None, parse_opt_string,\n+          \"show spans for compiler debugging (expr|pat|ty)\"),\n }\n \n pub fn default_lib_output() -> CrateType {\n@@ -882,7 +882,6 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n                       `hir` (the HIR), `hir,identified`, or\n                       `hir,typed` (HIR with types for each node).\",\n                      \"TYPE\"),\n-        opt::opt_u(\"\", \"show-span\", \"Show spans for compiler debugging\", \"expr|pat|ty\"),\n     ]);\n     opts\n }\n@@ -1123,7 +1122,6 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         prints: prints,\n         cg: cg,\n         color: color,\n-        show_span: None,\n         externs: externs,\n         crate_name: crate_name,\n         alt_std_name: None,"}, {"sha": "840260da33086956d30499da09b76782da9453b2", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fb15d02379b2d18176bd5a920a94157a3344e51/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb15d02379b2d18176bd5a920a94157a3344e51/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=5fb15d02379b2d18176bd5a920a94157a3344e51", "patch": "@@ -428,7 +428,7 @@ pub fn phase_1_parse_input(sess: &Session, cfg: ast::CrateConfig, input: &Input)\n         println!(\"Pre-expansion node count:  {}\", count_nodes(&krate));\n     }\n \n-    if let Some(ref s) = sess.opts.show_span {\n+    if let Some(ref s) = sess.opts.debugging_opts.show_span {\n         syntax::show_span::run(sess.diagnostic(), s, &krate);\n     }\n "}, {"sha": "cdac3de3682e57911c104f5df1c15dc5ab813da7", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5fb15d02379b2d18176bd5a920a94157a3344e51/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb15d02379b2d18176bd5a920a94157a3344e51/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=5fb15d02379b2d18176bd5a920a94157a3344e51", "patch": "@@ -138,12 +138,9 @@ pub fn run_compiler<'a>(args: &[String], callbacks: &mut CompilerCalls<'a>) {\n     };\n \n     let cstore = Rc::new(CStore::new(token::get_ident_interner()));\n-    let mut sess = build_session(sopts, input_file_path, descriptions,\n+    let sess = build_session(sopts, input_file_path, descriptions,\n                                  cstore.clone());\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n-    if sess.unstable_options() {\n-        sess.opts.show_span = matches.opt_str(\"show-span\");\n-    }\n     let mut cfg = config::build_configuration(&sess);\n     target_features::add_configuration(&mut cfg, &sess);\n \n@@ -387,7 +384,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n     fn build_controller(&mut self, sess: &Session) -> CompileController<'a> {\n         let mut control = CompileController::basic();\n \n-        if sess.opts.parse_only || sess.opts.show_span.is_some() ||\n+        if sess.opts.parse_only || sess.opts.debugging_opts.show_span.is_some() ||\n            sess.opts.debugging_opts.ast_json_noexpand {\n             control.after_parse.stop = Compilation::Stop;\n         }"}]}