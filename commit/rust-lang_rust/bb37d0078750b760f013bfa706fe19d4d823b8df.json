{"sha": "bb37d0078750b760f013bfa706fe19d4d823b8df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMzdkMDA3ODc1MGI3NjBmMDEzYmZhNzA2ZmUxOWQ0ZDgyM2I4ZGY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-04T09:11:58Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-04T09:11:58Z"}, "message": "more robust method checking through DefId and diagnostic_item", "tree": {"sha": "3aac3e1e45518edeb7e628425b13a372928d4a92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aac3e1e45518edeb7e628425b13a372928d4a92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb37d0078750b760f013bfa706fe19d4d823b8df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb37d0078750b760f013bfa706fe19d4d823b8df", "html_url": "https://github.com/rust-lang/rust/commit/bb37d0078750b760f013bfa706fe19d4d823b8df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb37d0078750b760f013bfa706fe19d4d823b8df/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ff57edb93625857b1ac289160550859e78ef6fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ff57edb93625857b1ac289160550859e78ef6fb", "html_url": "https://github.com/rust-lang/rust/commit/7ff57edb93625857b1ac289160550859e78ef6fb"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "339a94c218005290f8f85cbc8ddcff4ef19ded65", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb37d0078750b760f013bfa706fe19d4d823b8df/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb37d0078750b760f013bfa706fe19d4d823b8df/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=bb37d0078750b760f013bfa706fe19d4d823b8df", "patch": "@@ -440,6 +440,7 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n     #[inline(always)]\n+    #[cfg_attr(all(not(bootstrap)), rustc_diagnostic_item = \"assume_init\")]\n     pub unsafe fn assume_init(self) -> T {\n         intrinsics::panic_if_uninhabited::<T>();\n         ManuallyDrop::into_inner(self.value)"}, {"sha": "e38ecd882830d1d0a428342a8fdaf15dc73da5ab", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb37d0078750b760f013bfa706fe19d4d823b8df/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb37d0078750b760f013bfa706fe19d4d823b8df/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=bb37d0078750b760f013bfa706fe19d4d823b8df", "patch": "@@ -1933,9 +1933,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n                         }\n                     }\n                 }\n-            } else if let hir::ExprKind::MethodCall(ref path, _, ref args) = expr.kind {\n+            } else if let hir::ExprKind::MethodCall(_, _, ref args) = expr.kind {\n                 // Find problematic calls to `MaybeUninit::assume_init`.\n-                if path.ident.name == sym::assume_init {\n+                let def_id = cx.tables.type_dependent_def_id(expr.hir_id)?;\n+                if cx.tcx.is_diagnostic_item(sym::assume_init, def_id) {\n                     // This is a call to *some* method named `assume_init`.\n                     // See if the `self` parameter is one of the dangerous constructors.\n                     if let hir::ExprKind::Call(ref path_expr, _) = args[0].kind {"}]}