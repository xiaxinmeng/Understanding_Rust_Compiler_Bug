{"sha": "40b6e34240c6669fdf7fb1b83c3925b0becafd0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwYjZlMzQyNDBjNjY2OWZkZjdmYjFiODNjMzkyNWIwYmVjYWZkMGU=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2015-01-20T20:35:24Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-02-03T12:36:36Z"}, "message": "Rc: Add assumptions that the pointer is non-null\n\nSince the snapshot compiler is still using an older LLVM version, omit\nthe call in stage0, because compile times explode otherwise.", "tree": {"sha": "6921f5b3802cc2764be4437015e22bca059bfbc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6921f5b3802cc2764be4437015e22bca059bfbc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40b6e34240c6669fdf7fb1b83c3925b0becafd0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40b6e34240c6669fdf7fb1b83c3925b0becafd0e", "html_url": "https://github.com/rust-lang/rust/commit/40b6e34240c6669fdf7fb1b83c3925b0becafd0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40b6e34240c6669fdf7fb1b83c3925b0becafd0e/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7858cb432d3f2efc0374424cb2b51518f697c172", "url": "https://api.github.com/repos/rust-lang/rust/commits/7858cb432d3f2efc0374424cb2b51518f697c172", "html_url": "https://github.com/rust-lang/rust/commit/7858cb432d3f2efc0374424cb2b51518f697c172"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "80ffa4a0a191013c4024afedc04056318da64de0", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/40b6e34240c6669fdf7fb1b83c3925b0becafd0e/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40b6e34240c6669fdf7fb1b83c3925b0becafd0e/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=40b6e34240c6669fdf7fb1b83c3925b0becafd0e", "patch": "@@ -160,6 +160,7 @@ use core::option::Option::{Some, None};\n use core::ptr::{self, PtrExt};\n use core::result::Result;\n use core::result::Result::{Ok, Err};\n+use core::intrinsics::assume;\n \n use heap::deallocate;\n \n@@ -769,12 +770,34 @@ trait RcBoxPtr<T> {\n \n impl<T> RcBoxPtr<T> for Rc<T> {\n     #[inline(always)]\n-    fn inner(&self) -> &RcBox<T> { unsafe { &(**self._ptr) } }\n+    fn inner(&self) -> &RcBox<T> {\n+        unsafe {\n+            // Safe to assume this here, as if it weren't true, we'd be breaking\n+            // the contract anyway.\n+            // This allows the null check to be elided in the destructor if we\n+            // manipulated the reference count in the same function.\n+            if cfg!(not(stage0)) { // NOTE remove cfg after next snapshot\n+                assume(!self._ptr.is_null());\n+            }\n+            &(**self._ptr)\n+        }\n+    }\n }\n \n impl<T> RcBoxPtr<T> for Weak<T> {\n     #[inline(always)]\n-    fn inner(&self) -> &RcBox<T> { unsafe { &(**self._ptr) } }\n+    fn inner(&self) -> &RcBox<T> {\n+        unsafe {\n+            // Safe to assume this here, as if it weren't true, we'd be breaking\n+            // the contract anyway.\n+            // This allows the null check to be elided in the destructor if we\n+            // manipulated the reference count in the same function.\n+            if cfg!(not(stage0)) { // NOTE remove cfg after next snapshot\n+                assume(!self._ptr.is_null());\n+            }\n+            &(**self._ptr)\n+        }\n+    }\n }\n \n #[cfg(test)]"}]}