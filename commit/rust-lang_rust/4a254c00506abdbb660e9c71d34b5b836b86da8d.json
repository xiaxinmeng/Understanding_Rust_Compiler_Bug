{"sha": "4a254c00506abdbb660e9c71d34b5b836b86da8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMjU0YzAwNTA2YWJkYmI2NjBlOWM3MWQzNGI1YjgzNmI4NmRhOGQ=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-03-14T09:11:42Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-03-14T09:11:42Z"}, "message": "Escape stringified expression\n\nPayload of `Literal` token must be escaped.\nAlso print printable non-ASCII characters.", "tree": {"sha": "0582adbb4e9c3573a66578c4c3b37439a0493cb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0582adbb4e9c3573a66578c4c3b37439a0493cb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a254c00506abdbb660e9c71d34b5b836b86da8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a254c00506abdbb660e9c71d34b5b836b86da8d", "html_url": "https://github.com/rust-lang/rust/commit/4a254c00506abdbb660e9c71d34b5b836b86da8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a254c00506abdbb660e9c71d34b5b836b86da8d/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb5be1bb4ce8bdf3cfac5910f11966c7d3b4fcd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb5be1bb4ce8bdf3cfac5910f11966c7d3b4fcd4", "html_url": "https://github.com/rust-lang/rust/commit/cb5be1bb4ce8bdf3cfac5910f11966c7d3b4fcd4"}], "stats": {"total": 82, "additions": 77, "deletions": 5}, "files": [{"sha": "8b29e6adeb9eb9ba2231e7175e2dc56a042d9df0", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 63, "deletions": 5, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/4a254c00506abdbb660e9c71d34b5b836b86da8d/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a254c00506abdbb660e9c71d34b5b836b86da8d/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=4a254c00506abdbb660e9c71d34b5b836b86da8d", "patch": "@@ -15,7 +15,7 @@ use syntax::ext::build::AstBuilder;\n use syntax::parse::token;\n use syntax::print::pprust;\n use syntax::tokenstream::{TokenStream, TokenTree};\n-use syntax_pos::Span;\n+use syntax_pos::{Span, DUMMY_SP};\n \n pub fn expand_assert<'cx>(\n     cx: &'cx mut ExtCtxt,\n@@ -41,10 +41,18 @@ pub fn expand_assert<'cx>(\n         tts: if let Some(ts) = custom_msg_args {\n             ts.into()\n         } else {\n-            let panic_str = format!(\"assertion failed: {}\", pprust::expr_to_string(&cond_expr));\n-            TokenStream::from(token::Literal(\n-                token::Lit::Str_(Name::intern(&panic_str)),\n-                None,\n+            // `expr_to_string` escapes the string literals with `.escape_default()`\n+            // which escapes all non-ASCII characters with `\\u`.\n+            let escaped_expr = escape_format_string(&unescape_printable_unicode(\n+                &pprust::expr_to_string(&cond_expr),\n+            ));\n+\n+            TokenStream::from(TokenTree::Token(\n+                DUMMY_SP,\n+                token::Literal(\n+                    token::Lit::Str_(Name::intern(&format!(\"assertion failed: {}\", escaped_expr))),\n+                    None,\n+                ),\n             )).into()\n         },\n     };\n@@ -62,3 +70,53 @@ pub fn expand_assert<'cx>(\n     );\n     MacEager::expr(if_expr)\n }\n+\n+/// Escapes a string for use as a formatting string.\n+fn escape_format_string(s: &str) -> String {\n+    let mut res = String::with_capacity(s.len());\n+    for c in s.chars() {\n+        res.extend(c.escape_debug());\n+        match c {\n+            '{' | '}' => res.push(c),\n+            _ => {}\n+        }\n+    }\n+    res\n+}\n+\n+#[test]\n+fn test_escape_format_string() {\n+    assert!(escape_format_string(r\"foo{}\\\") == r\"foo{{}}\\\\\");\n+}\n+\n+/// Unescapes the escaped unicodes (`\\u{...}`) that are printable.\n+fn unescape_printable_unicode(mut s: &str) -> String {\n+    use std::{char, u32};\n+\n+    let mut res = String::with_capacity(s.len());\n+\n+    loop {\n+        if let Some(start) = s.find(r\"\\u{\") {\n+            res.push_str(&s[0..start]);\n+            s = &s[start..];\n+            s.find('}')\n+                .and_then(|end| {\n+                    let v = u32::from_str_radix(&s[3..end], 16).ok()?;\n+                    let c = char::from_u32(v)?;\n+                    // Escape unprintable characters.\n+                    res.extend(c.escape_debug());\n+                    s = &s[end + 1..];\n+                    Some(())\n+                })\n+                .expect(\"lexer should have rejected invalid escape sequences\");\n+        } else {\n+            res.push_str(s);\n+            return res;\n+        }\n+    }\n+}\n+\n+#[test]\n+fn test_unescape_printable_unicode() {\n+    assert!(unescape_printable_unicode(r\"\\u{2603}\\n\\u{0}\") == r\"\u2603\\n\\u{0}\");\n+}"}, {"sha": "1a0d22a82c4c7be1ac5215b2503740ebf41f362d", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a254c00506abdbb660e9c71d34b5b836b86da8d/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a254c00506abdbb660e9c71d34b5b836b86da8d/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=4a254c00506abdbb660e9c71d34b5b836b86da8d", "patch": "@@ -17,6 +17,7 @@\n \n #![feature(proc_macro_internals)]\n #![feature(decl_macro)]\n+#![feature(str_escape)]\n \n extern crate fmt_macros;\n #[macro_use]"}, {"sha": "d340806c3577dc0d0d26f8b654efeb4b8844807f", "filename": "src/test/run-pass/assert-escape.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4a254c00506abdbb660e9c71d34b5b836b86da8d/src%2Ftest%2Frun-pass%2Fassert-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a254c00506abdbb660e9c71d34b5b836b86da8d/src%2Ftest%2Frun-pass%2Fassert-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassert-escape.rs?ref=4a254c00506abdbb660e9c71d34b5b836b86da8d", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    assert!(r#\"\u2603\\backslash\"#.contains(\"\\\\\"));\n+}"}]}