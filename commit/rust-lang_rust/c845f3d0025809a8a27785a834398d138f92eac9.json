{"sha": "c845f3d0025809a8a27785a834398d138f92eac9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NDVmM2QwMDI1ODA5YThhMjc3ODVhODM0Mzk4ZDEzOGY5MmVhYzk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-09-25T14:26:54Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-10-02T14:03:27Z"}, "message": "track the kind of async generator we are creating", "tree": {"sha": "175afa7271fcf5150cce40428e7315c08508a17d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/175afa7271fcf5150cce40428e7315c08508a17d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c845f3d0025809a8a27785a834398d138f92eac9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c845f3d0025809a8a27785a834398d138f92eac9", "html_url": "https://github.com/rust-lang/rust/commit/c845f3d0025809a8a27785a834398d138f92eac9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c845f3d0025809a8a27785a834398d138f92eac9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2023ac599c38a59f86552089e6791c5a73412d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2023ac599c38a59f86552089e6791c5a73412d3", "html_url": "https://github.com/rust-lang/rust/commit/f2023ac599c38a59f86552089e6791c5a73412d3"}], "stats": {"total": 67, "additions": 52, "deletions": 15}, "files": [{"sha": "7630ec8c24f45c06098fdbeb9f3086c8ebd5a9e7", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c845f3d0025809a8a27785a834398d138f92eac9/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c845f3d0025809a8a27785a834398d138f92eac9/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=c845f3d0025809a8a27785a834398d138f92eac9", "patch": "@@ -89,9 +89,14 @@ impl LoweringContext<'_> {\n                 hir::MatchSource::Normal,\n             ),\n             ExprKind::Async(capture_clause, closure_node_id, ref block) => {\n-                self.make_async_expr(capture_clause, closure_node_id, None, block.span, |this| {\n-                    this.with_new_scopes(|this| this.lower_block_expr(block))\n-                })\n+                self.make_async_expr(\n+                    capture_clause,\n+                    closure_node_id,\n+                    None,\n+                    block.span,\n+                    hir::AsyncGeneratorKind::Block,\n+                    |this| this.with_new_scopes(|this| this.lower_block_expr(block)),\n+                )\n             }\n             ExprKind::Await(ref expr) => self.lower_expr_await(e.span, expr),\n             ExprKind::Closure(\n@@ -440,6 +445,7 @@ impl LoweringContext<'_> {\n         closure_node_id: NodeId,\n         ret_ty: Option<AstP<Ty>>,\n         span: Span,\n+        async_gen_kind: hir::AsyncGeneratorKind,\n         body: impl FnOnce(&mut LoweringContext<'_>) -> hir::Expr,\n     ) -> hir::ExprKind {\n         let capture_clause = self.lower_capture_clause(capture_clause);\n@@ -453,7 +459,7 @@ impl LoweringContext<'_> {\n         };\n         let decl = self.lower_fn_decl(&ast_decl, None, /* impl trait allowed */ false, None);\n         let body_id = self.lower_fn_body(&ast_decl, |this| {\n-            this.generator_kind = Some(hir::GeneratorKind::Async);\n+            this.generator_kind = Some(hir::GeneratorKind::Async(async_gen_kind));\n             body(this)\n         });\n \n@@ -505,7 +511,7 @@ impl LoweringContext<'_> {\n     /// ```\n     fn lower_expr_await(&mut self, await_span: Span, expr: &Expr) -> hir::ExprKind {\n         match self.generator_kind {\n-            Some(hir::GeneratorKind::Async) => {},\n+            Some(hir::GeneratorKind::Async(_)) => {},\n             Some(hir::GeneratorKind::Gen) |\n             None => {\n                 let mut err = struct_span_err!(\n@@ -710,7 +716,7 @@ impl LoweringContext<'_> {\n                     Movability::Static => hir::GeneratorMovability::Static,\n                 })\n             },\n-            Some(hir::GeneratorKind::Async) => {\n+            Some(hir::GeneratorKind::Async(_)) => {\n                 bug!(\"non-`async` closure body turned `async` during lowering\");\n             },\n             None => {\n@@ -769,7 +775,7 @@ impl LoweringContext<'_> {\n                     None\n                 };\n                 let async_body = this.make_async_expr(\n-                    capture_clause, closure_id, async_ret_ty, body.span,\n+                    capture_clause, closure_id, async_ret_ty, body.span, hir::AsyncGeneratorKind::Closure,\n                     |this| {\n                         this.with_new_scopes(|this| this.lower_expr(body))\n                     }\n@@ -988,7 +994,7 @@ impl LoweringContext<'_> {\n     fn lower_expr_yield(&mut self, span: Span, opt_expr: Option<&Expr>) -> hir::ExprKind {\n         match self.generator_kind {\n             Some(hir::GeneratorKind::Gen) => {},\n-            Some(hir::GeneratorKind::Async) => {\n+            Some(hir::GeneratorKind::Async(_)) => {\n                 span_err!(\n                     self.sess,\n                     span,"}, {"sha": "548a2fedfff6dfc0da7e344d8520e56067afa39b", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c845f3d0025809a8a27785a834398d138f92eac9/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c845f3d0025809a8a27785a834398d138f92eac9/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=c845f3d0025809a8a27785a834398d138f92eac9", "patch": "@@ -1222,7 +1222,11 @@ impl LoweringContext<'_> {\n             }\n \n             let async_expr = this.make_async_expr(\n-                CaptureBy::Value, closure_id, None, body.span,\n+                CaptureBy::Value,\n+                closure_id,\n+                None,\n+                body.span,\n+                hir::AsyncGeneratorKind::Fn,\n                 |this| {\n                     // Create a block from the user's function body:\n                     let user_body = this.lower_block_expr(body);"}, {"sha": "c390e4ce2a4ec4f1453ed3d80433c4be788031d3", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c845f3d0025809a8a27785a834398d138f92eac9/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c845f3d0025809a8a27785a834398d138f92eac9/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=c845f3d0025809a8a27785a834398d138f92eac9", "patch": "@@ -1366,17 +1366,43 @@ impl Body {\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, HashStable,\n          RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum GeneratorKind {\n-    /// An `async` block or function.\n-    Async,\n+    /// An explicit `async` block or the body of an async function.\n+    Async(AsyncGeneratorKind),\n+\n     /// A generator literal created via a `yield` inside a closure.\n     Gen,\n }\n \n impl fmt::Display for GeneratorKind {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            GeneratorKind::Async(k) => fmt::Display::fmt(k, f),\n+            GeneratorKind::Gen => f.write_str(\"generator\"),\n+        }\n+    }\n+}\n+\n+/// The type of source expression that caused this generator to be created.\n+// Not `IsAsync` because we want to eventually add support for `AsyncGen`\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, HashStable,\n+         RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+pub enum AsyncGeneratorKind {\n+    /// An explicit `async` block written by the user.\n+    Block,\n+\n+    /// An explicit `async` block written by the user.\n+    Closure,\n+\n+    /// The `async` block generated as the body of an async function.\n+    Fn,\n+}\n+\n+impl fmt::Display for AsyncGeneratorKind {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(match self {\n-            GeneratorKind::Async => \"`async` object\",\n-            GeneratorKind::Gen => \"generator\",\n+            AsyncGeneratorKind::Block => \"`async` block\",\n+            AsyncGeneratorKind::Closure => \"`async` closure body\",\n+            AsyncGeneratorKind::Fn => \"`async` fn body\",\n         })\n     }\n }\n@@ -1758,6 +1784,7 @@ pub struct Destination {\n pub enum GeneratorMovability {\n     /// May contain self-references, `!Unpin`.\n     Static,\n+\n     /// Must not contain self-references, `Unpin`.\n     Movable,\n }"}, {"sha": "c40d11503a302030b23cf12e3041fdfa49e51571", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c845f3d0025809a8a27785a834398d138f92eac9/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c845f3d0025809a8a27785a834398d138f92eac9/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=c845f3d0025809a8a27785a834398d138f92eac9", "patch": "@@ -55,7 +55,7 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n             expr_and_pat_count: 0,\n             source: match self.kind { // Guess based on the kind of the current generator.\n                 hir::GeneratorKind::Gen => hir::YieldSource::Yield,\n-                hir::GeneratorKind::Async => hir::YieldSource::Await,\n+                hir::GeneratorKind::Async(_) => hir::YieldSource::Await,\n             },\n         }));\n "}, {"sha": "3ccb5f2ee5b76cec4cb21acec68ead9f65d73539", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c845f3d0025809a8a27785a834398d138f92eac9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c845f3d0025809a8a27785a834398d138f92eac9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c845f3d0025809a8a27785a834398d138f92eac9", "patch": "@@ -4534,7 +4534,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let item_id = self.tcx().hir().get_parent_node(self.body_id);\n         if let Some(body_id) = self.tcx().hir().maybe_body_owned_by(item_id) {\n             let body = self.tcx().hir().body(body_id);\n-            if let Some(hir::GeneratorKind::Async) = body.generator_kind {\n+            if let Some(hir::GeneratorKind::Async(_)) = body.generator_kind {\n                 let sp = expr.span;\n                 // Check for `Future` implementations by constructing a predicate to\n                 // prove: `<T as Future>::Output == U`"}]}