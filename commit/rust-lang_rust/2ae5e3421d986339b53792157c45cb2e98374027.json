{"sha": "2ae5e3421d986339b53792157c45cb2e98374027", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhZTVlMzQyMWQ5ODYzMzliNTM3OTIxNTdjNDVjYjJlOTgzNzQwMjc=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-10-10T23:58:35Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-10-11T07:08:53Z"}, "message": "Print lifetimes with backticks", "tree": {"sha": "070cb52f4d36e718e318c87c95b29cf4beba3eb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/070cb52f4d36e718e318c87c95b29cf4beba3eb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ae5e3421d986339b53792157c45cb2e98374027", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ae5e3421d986339b53792157c45cb2e98374027", "html_url": "https://github.com/rust-lang/rust/commit/2ae5e3421d986339b53792157c45cb2e98374027", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ae5e3421d986339b53792157c45cb2e98374027/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "321ccbe1dbc655faeb20bf78c5463ebb12640d78", "url": "https://api.github.com/repos/rust-lang/rust/commits/321ccbe1dbc655faeb20bf78c5463ebb12640d78", "html_url": "https://github.com/rust-lang/rust/commit/321ccbe1dbc655faeb20bf78c5463ebb12640d78"}], "stats": {"total": 520, "additions": 260, "deletions": 260}, "files": [{"sha": "f6068855e630cc3d514c59d13d41cc553e0a6ca0", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -200,7 +200,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 {\n                     sp = param.span;\n                 }\n-                (format!(\"the lifetime {} as defined on\", br.name), sp)\n+                (format!(\"the lifetime `{}` as defined on\", br.name), sp)\n             }\n             ty::ReFree(ty::FreeRegion {\n                 bound_region: ty::BoundRegion::BrNamed(_, name),\n@@ -213,15 +213,15 @@ impl<'tcx> TyCtxt<'tcx> {\n                 {\n                     sp = param.span;\n                 }\n-                (format!(\"the lifetime {} as defined on\", name), sp)\n+                (format!(\"the lifetime `{}` as defined on\", name), sp)\n             }\n             ty::ReFree(ref fr) => match fr.bound_region {\n                 ty::BrAnon(idx) => (\n                     format!(\"the anonymous lifetime #{} defined on\", idx + 1),\n                     self.hir().span(node),\n                 ),\n                 _ => (\n-                    format!(\"the lifetime {} as defined on\", region),\n+                    format!(\"the lifetime `{}` as defined on\", region),\n                     cm.def_span(self.hir().span(node)),\n                 ),\n             },"}, {"sha": "2ceab394e9558c3e42a54711f4f42e72cc6f2fd3", "filename": "src/test/ui/associated-const/associated-const-impl-wrong-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-lifetime.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,7 +6,7 @@ LL |     const NAME: &'a str = \"unit\";\n    |\n    = note: expected type `&'static str`\n               found type `&'a str`\n-note: the lifetime 'a as defined on the impl at 6:6...\n+note: the lifetime `'a` as defined on the impl at 6:6...\n   --> $DIR/associated-const-impl-wrong-lifetime.rs:6:6\n    |\n LL | impl<'a> Foo for &'a () {"}, {"sha": "5ea98dcd4a972a194e603ec6067d98dfb659b873", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.transmute.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |    bar(foo, x)\n    |        ^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 37:8...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 37:8...\n   --> $DIR/project-fn-ret-contravariant.rs:37:8\n    |\n LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {"}, {"sha": "627609c4a9c004320be4cfc131fef7e65e2475c1", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |    bar(foo, x)\n    |        ^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 44:8...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 44:8...\n   --> $DIR/project-fn-ret-invariant.rs:44:8\n    |\n LL | fn baz<'a,'b>(x: Type<'a>) -> Type<'static> {"}, {"sha": "efec160588fc411ec4e649a95160b8529049e9be", "filename": "src/test/ui/async-await/issues/issue-63388-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -15,12 +15,12 @@ LL |         foo: &dyn Foo, bar: &'a dyn Foo\n LL |         foo\n    |         --- this return type evaluates to the `'static` lifetime...\n    |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 11:14\n+note: ...can't outlive the lifetime `'_` as defined on the method body at 11:14\n   --> $DIR/issue-63388-2.rs:11:14\n    |\n LL |         foo: &dyn Foo, bar: &'a dyn Foo\n    |              ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 11:14\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime `'_` as defined on the method body at 11:14\n    |\n LL |         foo + '_\n    |"}, {"sha": "52d43eae658aeb08e06b7ac2ab0983a043a68f94", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -24,12 +24,12 @@ LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d\n    |\n    = note: expected type `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'d>)`\n               found type `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'d>)`\n-note: the lifetime 'c as defined on the method body at 27:24...\n+note: the lifetime `'c` as defined on the method body at 27:24...\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:27:24\n    |\n LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n    |                        ^^\n-note: ...does not necessarily outlive the lifetime 'c as defined on the method body at 27:24\n+note: ...does not necessarily outlive the lifetime `'c` as defined on the method body at 27:24\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:27:24\n    |\n LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {"}, {"sha": "05535659161b82e7a960dbc740a55a877590b37c", "filename": "src/test/ui/c-variadic/variadic-ffi-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -14,7 +14,7 @@ LL |   pub unsafe extern \"C\" fn no_escape0<'f>(_: usize, ap: ...) -> VaListImpl<\n LL | |     ap\n LL | | }\n    | |_^\n-note: ...does not necessarily outlive the lifetime 'f as defined on the function body at 7:37\n+note: ...does not necessarily outlive the lifetime `'f` as defined on the function body at 7:37\n   --> $DIR/variadic-ffi-4.rs:7:37\n    |\n LL | pub unsafe extern \"C\" fn no_escape0<'f>(_: usize, ap: ...) -> VaListImpl<'f> {"}, {"sha": "8af7f882cc29925c7b434c3abba32ce731fe27d4", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -11,7 +11,7 @@ note: the anonymous lifetime #2 defined on the body at 14:48...\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^\n-note: ...does not necessarily outlive the lifetime 'x as defined on the function body at 11:36\n+note: ...does not necessarily outlive the lifetime `'x` as defined on the function body at 11:36\n   --> $DIR/expect-fn-supply-fn.rs:11:36\n    |\n LL | fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {\n@@ -25,7 +25,7 @@ LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |\n    = note: expected type `fn(&u32)`\n               found type `fn(&'x u32)`\n-note: the lifetime 'x as defined on the function body at 11:36...\n+note: the lifetime `'x` as defined on the function body at 11:36...\n   --> $DIR/expect-fn-supply-fn.rs:11:36\n    |\n LL | fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {"}, {"sha": "9f74738315a0adbec20c0da3718730b27d04771f", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -38,7 +38,7 @@ LL | |\n LL | |\n LL | |     });\n    | |_____^\n-note: ...does not necessarily outlive the lifetime 'x as defined on the function body at 32:30\n+note: ...does not necessarily outlive the lifetime `'x` as defined on the function body at 32:30\n   --> $DIR/expect-region-supply-region.rs:32:30\n    |\n LL | fn expect_bound_supply_named<'x>() {\n@@ -52,7 +52,7 @@ LL |     closure_expecting_bound(|x: &'x u32| {\n    |\n    = note: expected type `&u32`\n               found type `&'x u32`\n-note: the lifetime 'x as defined on the function body at 32:30...\n+note: the lifetime `'x` as defined on the function body at 32:30...\n   --> $DIR/expect-region-supply-region.rs:32:30\n    |\n LL | fn expect_bound_supply_named<'x>() {"}, {"sha": "1380840e0db2d7da12c2d32565823c10118acd79", "filename": "src/test/ui/error-codes/E0478.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Ferror-codes%2FE0478.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Ferror-codes%2FE0478.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0478.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,12 +4,12 @@ error[E0478]: lifetime bound not satisfied\n LL |     child: Box<dyn Wedding<'kiss> + 'SnowWhite>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime 'SnowWhite as defined on the struct at 3:22\n+note: lifetime parameter instantiated with the lifetime `'SnowWhite` as defined on the struct at 3:22\n   --> $DIR/E0478.rs:3:22\n    |\n LL | struct Prince<'kiss, 'SnowWhite> {\n    |                      ^^^^^^^^^^\n-note: but lifetime parameter must outlive the lifetime 'kiss as defined on the struct at 3:15\n+note: but lifetime parameter must outlive the lifetime `'kiss` as defined on the struct at 3:15\n   --> $DIR/E0478.rs:3:15\n    |\n LL | struct Prince<'kiss, 'SnowWhite> {"}, {"sha": "cbd6422e5df7653801413bd5708f9538c122468e", "filename": "src/test/ui/explicit/explicit-self-lifetime-mismatch.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,12 +6,12 @@ LL |            Foo<'b,'a>\n    |\n    = note: expected type `Foo<'a, 'b>`\n               found type `Foo<'b, 'a>`\n-note: the lifetime 'b as defined on the impl at 6:9...\n+note: the lifetime `'b` as defined on the impl at 6:9...\n   --> $DIR/explicit-self-lifetime-mismatch.rs:6:9\n    |\n LL | impl<'a,'b> Foo<'a,'b> {\n    |         ^^\n-note: ...does not necessarily outlive the lifetime 'a as defined on the impl at 6:6\n+note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 6:6\n   --> $DIR/explicit-self-lifetime-mismatch.rs:6:6\n    |\n LL | impl<'a,'b> Foo<'a,'b> {\n@@ -25,12 +25,12 @@ LL |            Foo<'b,'a>\n    |\n    = note: expected type `Foo<'a, 'b>`\n               found type `Foo<'b, 'a>`\n-note: the lifetime 'a as defined on the impl at 6:6...\n+note: the lifetime `'a` as defined on the impl at 6:6...\n   --> $DIR/explicit-self-lifetime-mismatch.rs:6:6\n    |\n LL | impl<'a,'b> Foo<'a,'b> {\n    |      ^^\n-note: ...does not necessarily outlive the lifetime 'b as defined on the impl at 6:9\n+note: ...does not necessarily outlive the lifetime `'b` as defined on the impl at 6:9\n   --> $DIR/explicit-self-lifetime-mismatch.rs:6:9\n    |\n LL | impl<'a,'b> Foo<'a,'b> {"}, {"sha": "76d97dd2f585d0367e8e40f6a7007614c3fbe7d9", "filename": "src/test/ui/hr-subtype/hr-subtype.free_inv_x_vs_free_inv_y.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -10,7 +10,7 @@ LL | |                                     fn(Inv<'y>)) }\n    |\n    = note: expected type `std::option::Option<fn(Inv<'y>)>`\n               found type `std::option::Option<fn(Inv<'x>)>`\n-note: the lifetime 'x as defined on the function body at 32:20...\n+note: the lifetime `'x` as defined on the function body at 32:20...\n   --> $DIR/hr-subtype.rs:32:20\n    |\n LL |           fn subtype<'x,'y:'x,'z:'y>() {\n@@ -19,7 +19,7 @@ LL |           fn subtype<'x,'y:'x,'z:'y>() {\n LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n LL | |                                     fn(Inv<'y>)) }\n    | |__________________________________________________- in this macro invocation\n-note: ...does not necessarily outlive the lifetime 'y as defined on the function body at 32:23\n+note: ...does not necessarily outlive the lifetime `'y` as defined on the function body at 32:23\n   --> $DIR/hr-subtype.rs:32:23\n    |\n LL |           fn subtype<'x,'y:'x,'z:'y>() {\n@@ -41,7 +41,7 @@ LL | |                                     fn(Inv<'y>)) }\n    |\n    = note: expected type `std::option::Option<fn(Inv<'x>)>`\n               found type `std::option::Option<fn(Inv<'y>)>`\n-note: the lifetime 'x as defined on the function body at 38:22...\n+note: the lifetime `'x` as defined on the function body at 38:22...\n   --> $DIR/hr-subtype.rs:38:22\n    |\n LL |           fn supertype<'x,'y:'x,'z:'y>() {\n@@ -50,7 +50,7 @@ LL |           fn supertype<'x,'y:'x,'z:'y>() {\n LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n LL | |                                     fn(Inv<'y>)) }\n    | |__________________________________________________- in this macro invocation\n-note: ...does not necessarily outlive the lifetime 'y as defined on the function body at 38:25\n+note: ...does not necessarily outlive the lifetime `'y` as defined on the function body at 38:25\n   --> $DIR/hr-subtype.rs:38:25\n    |\n LL |           fn supertype<'x,'y:'x,'z:'y>() {"}, {"sha": "74f4212b2468b410d9b0a7c51cbc428eb8e217a4", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_y.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -10,7 +10,7 @@ LL | |                             fn(&'y u32)) }\n    |\n    = note: expected type `std::option::Option<fn(&'x u32)>`\n               found type `std::option::Option<fn(&'y u32)>`\n-note: the lifetime 'x as defined on the function body at 38:22...\n+note: the lifetime `'x` as defined on the function body at 38:22...\n   --> $DIR/hr-subtype.rs:38:22\n    |\n LL |           fn supertype<'x,'y:'x,'z:'y>() {\n@@ -19,7 +19,7 @@ LL |           fn supertype<'x,'y:'x,'z:'y>() {\n LL | / check! { free_x_vs_free_y: (fn(&'x u32),\n LL | |                             fn(&'y u32)) }\n    | |__________________________________________- in this macro invocation\n-note: ...does not necessarily outlive the lifetime 'y as defined on the function body at 38:25\n+note: ...does not necessarily outlive the lifetime `'y` as defined on the function body at 38:25\n   --> $DIR/hr-subtype.rs:38:25\n    |\n LL |           fn supertype<'x,'y:'x,'z:'y>() {"}, {"sha": "5e80c673258b8484432a74442ec7a58020d05ac9", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |     static_val(x);\n    |                ^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 19:26...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 19:26...\n   --> $DIR/dyn-trait.rs:19:26\n    |\n LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {"}, {"sha": "956ac1f1a11672789e026218f07513b4d6f6fd1f", "filename": "src/test/ui/impl-trait/hidden-lifetimes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL | fn hide_ref<'a, 'b, T: 'static>(x: &'a mut &'b T) -> impl Swap + 'a {\n    |                                                      ^^^^^^^^^^^^^^\n    |\n-note: hidden type `&'a mut &'b T` captures the lifetime 'b as defined on the function body at 28:17\n+note: hidden type `&'a mut &'b T` captures the lifetime `'b` as defined on the function body at 28:17\n   --> $DIR/hidden-lifetimes.rs:28:17\n    |\n LL | fn hide_ref<'a, 'b, T: 'static>(x: &'a mut &'b T) -> impl Swap + 'a {\n@@ -16,7 +16,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL | fn hide_rc_refcell<'a, 'b: 'a, T: 'static>(x: Rc<RefCell<&'b T>>) -> impl Swap + 'a {\n    |                                                                      ^^^^^^^^^^^^^^\n    |\n-note: hidden type `std::rc::Rc<std::cell::RefCell<&'b T>>` captures the lifetime 'b as defined on the function body at 45:24\n+note: hidden type `std::rc::Rc<std::cell::RefCell<&'b T>>` captures the lifetime `'b` as defined on the function body at 45:24\n   --> $DIR/hidden-lifetimes.rs:45:24\n    |\n LL | fn hide_rc_refcell<'a, 'b: 'a, T: 'static>(x: Rc<RefCell<&'b T>>) -> impl Swap + 'a {"}, {"sha": "2ffb94348616bca0f1bddc12af34b0e3fd8eb8f5", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -24,12 +24,12 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |                                |\n    |                                this return type evaluates to the `'static` lifetime...\n    |\n-note: ...can't outlive the lifetime 'a as defined on the function body at 6:13\n+note: ...can't outlive the lifetime `'a` as defined on the function body at 6:13\n   --> $DIR/must_outlive_least_region_or_bound.rs:6:13\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             ^^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime 'a as defined on the function body at 6:13\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the function body at 6:13\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                ^^^^^^^^^^^^^^\n@@ -42,12 +42,12 @@ LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |                                  |\n    |                                  this return type evaluates to the `'static` lifetime...\n    |\n-note: ...can't outlive the lifetime 'a as defined on the function body at 12:15\n+note: ...can't outlive the lifetime `'a` as defined on the function body at 12:15\n   --> $DIR/must_outlive_least_region_or_bound.rs:12:15\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |               ^^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime 'a as defined on the function body at 12:15\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the function body at 12:15\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static + 'a { x }\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "894a65ff389953460abc66b10c58962ea5330b35", "filename": "src/test/ui/impl-trait/region-escape-via-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL | fn foo(x: Cell<&'x u32>) -> impl Trait<'y>\n    |                             ^^^^^^^^^^^^^^\n    |\n-note: hidden type `std::cell::Cell<&'x u32>` captures the lifetime 'x as defined on the function body at 17:7\n+note: hidden type `std::cell::Cell<&'x u32>` captures the lifetime `'x` as defined on the function body at 17:7\n   --> $DIR/region-escape-via-bound.rs:17:7\n    |\n LL | where 'x: 'y"}, {"sha": "1d6b5f56aa0cfae2d671e0f45b1fce008af40225", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -30,12 +30,12 @@ LL |         self.x.iter().map(|a| a.0)\n    |         |\n    |         ...but this borrow...\n    |\n-note: ...can't outlive the lifetime 'a as defined on the method body at 10:20\n+note: ...can't outlive the lifetime `'a` as defined on the method body at 10:20\n   --> $DIR/static-return-lifetime-infered.rs:10:20\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                    ^^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime 'a as defined on the method body at 10:20\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the method body at 10:20\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "b5287f32a50451b57473e6823c2252c3f68e1e1f", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -11,7 +11,7 @@ LL | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n LL | |         x\n LL | |     }\n    | |_____^\n-note: ...but the lifetime must also be valid for the lifetime 'a as defined on the method body at 9:32...\n+note: ...but the lifetime must also be valid for the lifetime `'a` as defined on the method body at 9:32...\n   --> $DIR/mismatched_trait_impl.rs:9:32\n    |\n LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {"}, {"sha": "734ca0819e4166251a23eb6db5abcfff8bde2afd", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -11,7 +11,7 @@ LL | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n LL | |         x\n LL | |     }\n    | |_____^\n-note: ...but the lifetime must also be valid for the lifetime 'a as defined on the method body at 9:32...\n+note: ...but the lifetime must also be valid for the lifetime `'a` as defined on the method body at 9:32...\n   --> $DIR/mismatched_trait_impl.rs:9:32\n    |\n LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {"}, {"sha": "4fff4ee866c395898e460447eb4bdd833207f738", "filename": "src/test/ui/issues/issue-10291.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fissues%2Fissue-10291.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fissues%2Fissue-10291.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10291.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -12,7 +12,7 @@ LL |       drop::<Box<dyn for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n LL | |         x\n LL | |     }));\n    | |_____^\n-note: ...but the borrowed content is only valid for the lifetime 'x as defined on the function body at 1:9\n+note: ...but the borrowed content is only valid for the lifetime `'x` as defined on the function body at 1:9\n   --> $DIR/issue-10291.rs:1:9\n    |\n LL | fn test<'x>(x: &'x isize) {"}, {"sha": "b663e213ed05e357f8d8d48749573938828dd128", "filename": "src/test/ui/issues/issue-16683.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -16,7 +16,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n LL |         self.a();\n    |         ^^^^\n-note: but, the lifetime must be valid for the lifetime 'a as defined on the trait at 1:9...\n+note: but, the lifetime must be valid for the lifetime `'a` as defined on the trait at 1:9...\n   --> $DIR/issue-16683.rs:1:9\n    |\n LL | trait T<'a> {"}, {"sha": "d392ea3c1b8617bae73b0833c85822c532db0e4e", "filename": "src/test/ui/issues/issue-17740.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -17,7 +17,7 @@ LL | |\n LL | |\n LL | |     }\n    | |_____^\n-note: ...does not necessarily outlive the lifetime 'a as defined on the impl at 5:7\n+note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 5:7\n   --> $DIR/issue-17740.rs:5:7\n    |\n LL | impl <'a> Foo<'a>{\n@@ -31,7 +31,7 @@ LL |     fn bar(self: &mut Foo) {\n    |\n    = note: expected type `Foo<'a>`\n               found type `Foo<'_>`\n-note: the lifetime 'a as defined on the impl at 5:7...\n+note: the lifetime `'a` as defined on the impl at 5:7...\n   --> $DIR/issue-17740.rs:5:7\n    |\n LL | impl <'a> Foo<'a>{"}, {"sha": "adcbb62e3d5bda4ee80c04f2e5e0fbb9494c1511", "filename": "src/test/ui/issues/issue-17758.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -17,7 +17,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n LL |         self.foo();\n    |         ^^^^\n-note: but, the lifetime must be valid for the lifetime 'a as defined on the trait at 4:11...\n+note: but, the lifetime must be valid for the lifetime `'a` as defined on the trait at 4:11...\n   --> $DIR/issue-17758.rs:4:11\n    |\n LL | trait Foo<'a> {"}, {"sha": "04be62dc661bfe3c18c02462846d2927a33e3c8c", "filename": "src/test/ui/issues/issue-17905-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -15,7 +15,7 @@ LL | |\n LL | |         println!(\"{:?}\", self);\n LL | |     }\n    | |_____^\n-note: ...does not necessarily outlive the lifetime '_ as defined on the impl at 5:5\n+note: ...does not necessarily outlive the lifetime `'_` as defined on the impl at 5:5\n   --> $DIR/issue-17905-2.rs:5:5\n    |\n LL |     &str,\n@@ -29,7 +29,7 @@ LL |     fn say(self: &Pair<&str, isize>) {\n    |\n    = note: expected type `Pair<&str, _>`\n               found type `Pair<&str, _>`\n-note: the lifetime '_ as defined on the impl at 5:5...\n+note: the lifetime `'_` as defined on the impl at 5:5...\n   --> $DIR/issue-17905-2.rs:5:5\n    |\n LL |     &str,"}, {"sha": "13c9c09461eae290e88fa5f3d56138e92346560b", "filename": "src/test/ui/issues/issue-20831-debruijn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -23,7 +23,7 @@ LL | |\n LL | |         self.sub = t;\n LL | |     }\n    | |_____^\n-note: ...does not necessarily outlive the lifetime 'a as defined on the impl at 26:6\n+note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 26:6\n   --> $DIR/issue-20831-debruijn.rs:26:6\n    |\n LL | impl<'a> Publisher<'a> for MyStruct<'a> {\n@@ -43,7 +43,7 @@ LL | |     }\n    |\n    = note: expected type `'a`\n               found type `'_`\n-note: the lifetime 'a as defined on the impl at 26:6...\n+note: the lifetime `'a` as defined on the impl at 26:6...\n   --> $DIR/issue-20831-debruijn.rs:26:6\n    |\n LL | impl<'a> Publisher<'a> for MyStruct<'a> {\n@@ -83,7 +83,7 @@ LL | |\n LL | |         self.sub = t;\n LL | |     }\n    | |_____^\n-note: ...but the lifetime must also be valid for the lifetime 'a as defined on the impl at 26:6...\n+note: ...but the lifetime must also be valid for the lifetime `'a` as defined on the impl at 26:6...\n   --> $DIR/issue-20831-debruijn.rs:26:6\n    |\n LL | impl<'a> Publisher<'a> for MyStruct<'a> {"}, {"sha": "d290b176161be5637aa813c8bdf6205c84042256", "filename": "src/test/ui/issues/issue-27942.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fissues%2Fissue-27942.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fissues%2Fissue-27942.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27942.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -11,7 +11,7 @@ note: the anonymous lifetime #1 defined on the method body at 5:5...\n    |\n LL |     fn select(&self) -> BufferViewHandle<R>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...does not necessarily outlive the lifetime 'a as defined on the trait at 3:18\n+note: ...does not necessarily outlive the lifetime `'a` as defined on the trait at 3:18\n   --> $DIR/issue-27942.rs:3:18\n    |\n LL | pub trait Buffer<'a, R: Resources<'a>> {\n@@ -25,7 +25,7 @@ LL |     fn select(&self) -> BufferViewHandle<R>;\n    |\n    = note: expected type `Resources<'_>`\n               found type `Resources<'a>`\n-note: the lifetime 'a as defined on the trait at 3:18...\n+note: the lifetime `'a` as defined on the trait at 3:18...\n   --> $DIR/issue-27942.rs:3:18\n    |\n LL | pub trait Buffer<'a, R: Resources<'a>> {"}, {"sha": "726844a31841f7089c36faa311042420d046f62f", "filename": "src/test/ui/issues/issue-28848.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fissues%2Fissue-28848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fissues%2Fissue-28848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28848.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,12 +4,12 @@ error[E0478]: lifetime bound not satisfied\n LL |     Foo::<'a, 'b>::xmute(u)\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime 'b as defined on the function body at 9:16\n+note: lifetime parameter instantiated with the lifetime `'b` as defined on the function body at 9:16\n   --> $DIR/issue-28848.rs:9:16\n    |\n LL | pub fn foo<'a, 'b>(u: &'b ()) -> &'a () {\n    |                ^^\n-note: but lifetime parameter must outlive the lifetime 'a as defined on the function body at 9:12\n+note: but lifetime parameter must outlive the lifetime `'a` as defined on the function body at 9:12\n   --> $DIR/issue-28848.rs:9:12\n    |\n LL | pub fn foo<'a, 'b>(u: &'b ()) -> &'a () {"}, {"sha": "8e75d7be066a3f2c2ccac3c2194a4d823f9e8549", "filename": "src/test/ui/issues/issue-37884.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -21,7 +21,7 @@ LL | |     {\n LL | |         Some(&mut self.0)\n LL | |     }\n    | |_____^\n-note: ...does not necessarily outlive the lifetime 'a as defined on the impl at 3:6\n+note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 3:6\n   --> $DIR/issue-37884.rs:3:6\n    |\n LL | impl<'a, T: 'a> Iterator for RepeatMut<'a, T> {"}, {"sha": "b79a5ddf3e1bf601ea4c96976270225b56aa8e78", "filename": "src/test/ui/issues/issue-52213.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fissues%2Fissue-52213.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fissues%2Fissue-52213.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52213.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,15 +4,15 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |     match (&t,) {\n    |           ^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 1:23...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 1:23...\n   --> $DIR/issue-52213.rs:1:23\n    |\n LL | fn transmute_lifetime<'a, 'b, T>(t: &'a (T,)) -> &'b T {\n    |                       ^^\n    = note: ...so that the types are compatible:\n            expected (&&(T,),)\n               found (&&'a (T,),)\n-note: but, the lifetime must be valid for the lifetime 'b as defined on the function body at 1:27...\n+note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 1:27...\n   --> $DIR/issue-52213.rs:1:27\n    |\n LL | fn transmute_lifetime<'a, 'b, T>(t: &'a (T,)) -> &'b T {"}, {"sha": "7b910f5e3e5a654cc88ea4fa129185cfaa66cf4e", "filename": "src/test/ui/issues/issue-55796.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the trait at 5:17...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the trait at 5:17...\n   --> $DIR/issue-55796.rs:5:17\n    |\n LL | pub trait Graph<'a> {\n@@ -25,7 +25,7 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the trait at 5:17...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the trait at 5:17...\n   --> $DIR/issue-55796.rs:5:17\n    |\n LL | pub trait Graph<'a> {"}, {"sha": "b4011990b68e6343661906ba011b390e4dd30036", "filename": "src/test/ui/lifetimes/lifetime-bound-will-change-warning.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,7 +6,7 @@ LL |     ref_obj(x)\n    |\n    = note: expected type `&std::boxed::Box<(dyn std::ops::Fn() + 'static)>`\n               found type `&std::boxed::Box<(dyn std::ops::Fn() + 'a)>`\n-note: the lifetime 'a as defined on the function body at 32:10...\n+note: the lifetime `'a` as defined on the function body at 32:10...\n   --> $DIR/lifetime-bound-will-change-warning.rs:32:10\n    |\n LL | fn test2<'a>(x: &'a Box<dyn Fn() + 'a>) {\n@@ -21,7 +21,7 @@ LL |     lib::ref_obj(x)\n    |\n    = note: expected type `&std::boxed::Box<(dyn std::ops::Fn() + 'static)>`\n               found type `&std::boxed::Box<(dyn std::ops::Fn() + 'a)>`\n-note: the lifetime 'a as defined on the function body at 37:12...\n+note: the lifetime `'a` as defined on the function body at 37:12...\n   --> $DIR/lifetime-bound-will-change-warning.rs:37:12\n    |\n LL | fn test2cc<'a>(x: &'a Box<dyn Fn() + 'a>) {"}, {"sha": "0a4744013a62ca9c0876e98638726369c90927a5", "filename": "src/test/ui/lub-if.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Flub-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Flub-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-if.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -5,7 +5,7 @@ LL |         s\n    |         ^\n    |\n    = note: ...the reference is valid for the static lifetime...\n-note: ...but the borrowed content is only valid for the lifetime 'a as defined on the function body at 23:17\n+note: ...but the borrowed content is only valid for the lifetime `'a` as defined on the function body at 23:17\n   --> $DIR/lub-if.rs:23:17\n    |\n LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n@@ -18,7 +18,7 @@ LL |         s\n    |         ^\n    |\n    = note: ...the reference is valid for the static lifetime...\n-note: ...but the borrowed content is only valid for the lifetime 'a as defined on the function body at 32:17\n+note: ...but the borrowed content is only valid for the lifetime `'a` as defined on the function body at 32:17\n   --> $DIR/lub-if.rs:32:17\n    |\n LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {"}, {"sha": "168a389446921dc1bd9b09b9f141fea2cc2aed0f", "filename": "src/test/ui/lub-match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Flub-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Flub-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-match.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -5,7 +5,7 @@ LL |             s\n    |             ^\n    |\n    = note: ...the reference is valid for the static lifetime...\n-note: ...but the borrowed content is only valid for the lifetime 'a as defined on the function body at 25:17\n+note: ...but the borrowed content is only valid for the lifetime `'a` as defined on the function body at 25:17\n   --> $DIR/lub-match.rs:25:17\n    |\n LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n@@ -18,7 +18,7 @@ LL |             s\n    |             ^\n    |\n    = note: ...the reference is valid for the static lifetime...\n-note: ...but the borrowed content is only valid for the lifetime 'a as defined on the function body at 35:17\n+note: ...but the borrowed content is only valid for the lifetime `'a` as defined on the function body at 35:17\n   --> $DIR/lub-match.rs:35:17\n    |\n LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {"}, {"sha": "0a020989d6f35d7821607e207fcb87e6aa8e0930", "filename": "src/test/ui/match/match-ref-mut-invariance.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,12 +6,12 @@ LL |         match self.0 { ref mut x => x }\n    |\n    = note: expected type `&'a mut &'a i32`\n               found type `&'a mut &'b i32`\n-note: the lifetime 'a as defined on the method body at 9:12...\n+note: the lifetime `'a` as defined on the method body at 9:12...\n   --> $DIR/match-ref-mut-invariance.rs:9:12\n    |\n LL |     fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n    |            ^^\n-note: ...does not necessarily outlive the lifetime 'b as defined on the impl at 8:6\n+note: ...does not necessarily outlive the lifetime `'b` as defined on the impl at 8:6\n   --> $DIR/match-ref-mut-invariance.rs:8:6\n    |\n LL | impl<'b> S<'b> {"}, {"sha": "1bea9bce11e47df90641ca478bfd6bd21c9603a7", "filename": "src/test/ui/match/match-ref-mut-let-invariance.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,12 +6,12 @@ LL |         x\n    |\n    = note: expected type `&'a mut &'a i32`\n               found type `&'a mut &'b i32`\n-note: the lifetime 'a as defined on the method body at 9:12...\n+note: the lifetime `'a` as defined on the method body at 9:12...\n   --> $DIR/match-ref-mut-let-invariance.rs:9:12\n    |\n LL |     fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n    |            ^^\n-note: ...does not necessarily outlive the lifetime 'b as defined on the impl at 8:6\n+note: ...does not necessarily outlive the lifetime `'b` as defined on the impl at 8:6\n   --> $DIR/match-ref-mut-let-invariance.rs:8:6\n    |\n LL | impl<'b> S<'b> {"}, {"sha": "74c33df37a09edcdba9311ed0eab9814fca04300", "filename": "src/test/ui/nll/issue-50716.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,7 +6,7 @@ LL |     let _x = *s;\n    |\n    = note: expected type `std::marker::Sized`\n               found type `std::marker::Sized`\n-note: the lifetime 'a as defined on the function body at 9:8...\n+note: the lifetime `'a` as defined on the function body at 9:8...\n   --> $DIR/issue-50716.rs:9:8\n    |\n LL | fn foo<'a, T: 'static>(s: Box<<&'a T as A>::X>)"}, {"sha": "0cdc2d9443926f55b0011a9e2d3e93280bac7368", "filename": "src/test/ui/nll/issue-52742.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,7 +4,7 @@ error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n LL |         self.y = b.z\n    |                  ^^^\n    |\n-note: ...the reference is valid for the lifetime '_ as defined on the impl at 12:10...\n+note: ...the reference is valid for the lifetime `'_` as defined on the impl at 12:10...\n   --> $DIR/issue-52742.rs:12:10\n    |\n LL | impl Foo<'_, '_> {"}, {"sha": "714a63b670c66a96688a0cbeb14c71d670aa181d", "filename": "src/test/ui/nll/issue-55394.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -16,7 +16,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n LL |         Foo { bar }\n    |               ^^^\n-note: but, the lifetime must be valid for the lifetime '_ as defined on the impl at 7:10...\n+note: but, the lifetime must be valid for the lifetime `'_` as defined on the impl at 7:10...\n   --> $DIR/issue-55394.rs:7:10\n    |\n LL | impl Foo<'_> {"}, {"sha": "2dc7236cbc2749201a9f8d291d391ef80ae5b928", "filename": "src/test/ui/nll/issue-55401.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fnll%2Fissue-55401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fnll%2Fissue-55401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55401.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -5,7 +5,7 @@ LL |     *y\n    |     ^^\n    |\n    = note: ...the reference is valid for the static lifetime...\n-note: ...but the borrowed content is only valid for the lifetime 'a as defined on the function body at 1:47\n+note: ...but the borrowed content is only valid for the lifetime `'a` as defined on the function body at 1:47\n   --> $DIR/issue-55401.rs:1:47\n    |\n LL | fn static_to_a_to_static_through_ref_in_tuple<'a>(x: &'a u32) -> &'static u32 {"}, {"sha": "3a152fbc6fce8e5898ac1261ca1080b80497e3cd", "filename": "src/test/ui/nll/normalization-bounds-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,12 +4,12 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'d` d\n LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'd as defined on the function body at 12:14...\n+note: first, the lifetime cannot outlive the lifetime `'d` as defined on the function body at 12:14...\n   --> $DIR/normalization-bounds-error.rs:12:14\n    |\n LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n    |              ^^\n-note: ...but the lifetime must also be valid for the lifetime 'a as defined on the function body at 12:18...\n+note: ...but the lifetime must also be valid for the lifetime `'a` as defined on the function body at 12:18...\n   --> $DIR/normalization-bounds-error.rs:12:18\n    |\n LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}"}, {"sha": "ecf9748af9ea30f7a707915f00e64e976d36315d", "filename": "src/test/ui/nll/trait-associated-constant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftrait-associated-constant.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,12 +6,12 @@ LL |     const AC: Option<&'c str> = None;\n    |\n    = note: expected type `std::option::Option<&'b str>`\n               found type `std::option::Option<&'c str>`\n-note: the lifetime 'c as defined on the impl at 20:18...\n+note: the lifetime `'c` as defined on the impl at 20:18...\n   --> $DIR/trait-associated-constant.rs:20:18\n    |\n LL | impl<'a: 'b, 'b, 'c> Anything<'a, 'b> for FailStruct {\n    |                  ^^\n-note: ...does not necessarily outlive the lifetime 'b as defined on the impl at 20:14\n+note: ...does not necessarily outlive the lifetime `'b` as defined on the impl at 20:14\n   --> $DIR/trait-associated-constant.rs:20:14\n    |\n LL | impl<'a: 'b, 'b, 'c> Anything<'a, 'b> for FailStruct {"}, {"sha": "6986389af88149ee503d183507fb1ee1fa807319", "filename": "src/test/ui/nll/type-alias-free-regions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -14,7 +14,7 @@ LL | |     }\n    = note: ...so that the expression is assignable:\n            expected std::boxed::Box<std::boxed::Box<&isize>>\n               found std::boxed::Box<std::boxed::Box<&isize>>\n-note: but, the lifetime must be valid for the lifetime 'a as defined on the impl at 15:6...\n+note: but, the lifetime must be valid for the lifetime `'a` as defined on the impl at 15:6...\n   --> $DIR/type-alias-free-regions.rs:15:6\n    |\n LL | impl<'a> FromBox<'a> for C<'a> {\n@@ -39,7 +39,7 @@ LL | |     }\n    = note: ...so that the expression is assignable:\n            expected std::boxed::Box<&isize>\n               found std::boxed::Box<&isize>\n-note: but, the lifetime must be valid for the lifetime 'a as defined on the impl at 25:6...\n+note: but, the lifetime must be valid for the lifetime `'a` as defined on the impl at 25:6...\n   --> $DIR/type-alias-free-regions.rs:25:6\n    |\n LL | impl<'a> FromTuple<'a> for C<'a> {"}, {"sha": "4ebd991078864f6cb986739c477de2d5dc6744e5", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` d\n LL |     <Foo<'a>>::C\n    |     ^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 7:8...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 7:8...\n   --> $DIR/constant-in-expr-inherent-1.rs:7:8\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {"}, {"sha": "4c7adf75d2fd7a8a55687fa7046f9915df6bf217", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-normalize.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -5,7 +5,7 @@ LL |     <() as Foo<'a>>::C\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = note: ...the reference is valid for the static lifetime...\n-note: ...but the borrowed content is only valid for the lifetime 'a as defined on the function body at 17:8\n+note: ...but the borrowed content is only valid for the lifetime `'a` as defined on the function body at 17:8\n   --> $DIR/constant-in-expr-normalize.rs:17:8\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {"}, {"sha": "d01d022cba7967945fd5f226398fec1d0fbf85d1", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -5,7 +5,7 @@ LL |     <() as Foo<'a>>::C\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = note: ...the reference is valid for the static lifetime...\n-note: ...but the borrowed content is only valid for the lifetime 'a as defined on the function body at 9:8\n+note: ...but the borrowed content is only valid for the lifetime `'a` as defined on the function body at 9:8\n   --> $DIR/constant-in-expr-trait-item-1.rs:9:8\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {"}, {"sha": "dd294280b903aee8a75c7cea25fe0ba011a777b5", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -5,7 +5,7 @@ LL |     <T as Foo<'a>>::C\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: ...the reference is valid for the static lifetime...\n-note: ...but the borrowed content is only valid for the lifetime 'a as defined on the function body at 9:8\n+note: ...but the borrowed content is only valid for the lifetime `'a` as defined on the function body at 9:8\n   --> $DIR/constant-in-expr-trait-item-2.rs:9:8\n    |\n LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {"}, {"sha": "d61659e7e9afcd3c046fb42cad71504156ef8d2e", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` d\n LL |     T::C\n    |     ^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 9:8...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 9:8...\n   --> $DIR/constant-in-expr-trait-item-3.rs:9:8\n    |\n LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {"}, {"sha": "d66322c48ec98c3f304e7a31574df4e90c858589", "filename": "src/test/ui/object-lifetime/object-lifetime-default-elision.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for automatic coercion due to\n LL |     ss\n    |     ^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 54:10...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 54:10...\n   --> $DIR/object-lifetime-default-elision.rs:54:10\n    |\n LL | fn load3<'a,'b>(ss: &'a dyn SomeTrait) -> &'b dyn SomeTrait {\n@@ -14,7 +14,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n LL |     ss\n    |     ^^\n-note: but, the lifetime must be valid for the lifetime 'b as defined on the function body at 54:13...\n+note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 54:13...\n   --> $DIR/object-lifetime-default-elision.rs:54:13\n    |\n LL | fn load3<'a,'b>(ss: &'a dyn SomeTrait) -> &'b dyn SomeTrait {\n@@ -29,7 +29,7 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |     ss\n    |     ^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 54:10...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 54:10...\n   --> $DIR/object-lifetime-default-elision.rs:54:10\n    |\n LL | fn load3<'a,'b>(ss: &'a dyn SomeTrait) -> &'b dyn SomeTrait {\n@@ -39,7 +39,7 @@ note: ...so that the declared lifetime parameter bounds are satisfied\n    |\n LL |     ss\n    |     ^^\n-note: but, the lifetime must be valid for the lifetime 'b as defined on the function body at 54:13...\n+note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 54:13...\n   --> $DIR/object-lifetime-default-elision.rs:54:13\n    |\n LL | fn load3<'a,'b>(ss: &'a dyn SomeTrait) -> &'b dyn SomeTrait {"}, {"sha": "99f0ce0602b11c9725017d30565e5f2b006108c0", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-rptr-box-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-box-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-box-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-box-error.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,7 +6,7 @@ LL |     ss.t = t;\n    |\n    = note: expected type `&'a std::boxed::Box<(dyn Test + 'static)>`\n               found type `&'a std::boxed::Box<(dyn Test + 'a)>`\n-note: the lifetime 'a as defined on the function body at 14:6...\n+note: the lifetime `'a` as defined on the function body at 14:6...\n   --> $DIR/object-lifetime-default-from-rptr-box-error.rs:14:6\n    |\n LL | fn c<'a>(t: &'a Box<dyn Test+'a>, mut ss: SomeStruct<'a>) {"}, {"sha": "07d4d8c8ed40b0a94caaab4f4972c5879b965697", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-rptr-struct-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,7 +6,7 @@ LL |     ss.t = t;\n    |\n    = note: expected type `&'a MyBox<(dyn Test + 'static)>`\n               found type `&'a MyBox<(dyn Test + 'a)>`\n-note: the lifetime 'a as defined on the function body at 20:6...\n+note: the lifetime `'a` as defined on the function body at 20:6...\n   --> $DIR/object-lifetime-default-from-rptr-struct-error.rs:20:6\n    |\n LL | fn c<'a>(t: &'a MyBox<dyn Test+'a>, mut ss: SomeStruct<'a>) {"}, {"sha": "f825475b96b03b336b7fa4e46a0fb70b0fc57bcd", "filename": "src/test/ui/object-lifetime/object-lifetime-default-mybox.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -18,7 +18,7 @@ LL |     load0(ss)\n    |\n    = note: expected type `&MyBox<(dyn SomeTrait + 'static)>`\n               found type `&MyBox<(dyn SomeTrait + 'a)>`\n-note: the lifetime 'a as defined on the function body at 30:10...\n+note: the lifetime `'a` as defined on the function body at 30:10...\n   --> $DIR/object-lifetime-default-mybox.rs:30:10\n    |\n LL | fn load2<'a>(ss: &MyBox<dyn SomeTrait + 'a>) -> MyBox<dyn SomeTrait + 'a> {"}, {"sha": "184cead21231f114d0da42fadaa113cf8ad1d333", "filename": "src/test/ui/regions/region-bounds-on-objects-and-type-parameters.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregion-bounds-on-objects-and-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregion-bounds-on-objects-and-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-bounds-on-objects-and-type-parameters.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -10,12 +10,12 @@ error[E0478]: lifetime bound not satisfied\n LL |     z: Box<dyn Is<'a>+'b+'c>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime 'b as defined on the struct at 11:15\n+note: lifetime parameter instantiated with the lifetime `'b` as defined on the struct at 11:15\n   --> $DIR/region-bounds-on-objects-and-type-parameters.rs:11:15\n    |\n LL | struct Foo<'a,'b,'c> {\n    |               ^^\n-note: but lifetime parameter must outlive the lifetime 'a as defined on the struct at 11:12\n+note: but lifetime parameter must outlive the lifetime `'a` as defined on the struct at 11:12\n   --> $DIR/region-bounds-on-objects-and-type-parameters.rs:11:12\n    |\n LL | struct Foo<'a,'b,'c> {"}, {"sha": "911904813d0eba241b597141531fcf035a6168c4", "filename": "src/test/ui/regions/region-invariant-static-error-reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.rs?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -3,7 +3,7 @@\n // over time, but this test used to exhibit some pretty bogus messages\n // that were not remotely helpful.\n \n-// error-pattern:the lifetime 'a\n+// error-pattern:the lifetime `'a`\n // error-pattern:the static lifetime\n \n struct Invariant<'a>(Option<&'a mut &'a mut ()>);"}, {"sha": "8358a7988c8088866efece25a6fd969973a7a126", "filename": "src/test/ui/regions/region-invariant-static-error-reporting.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -13,7 +13,7 @@ LL | |     };\n    |\n    = note: expected type `Invariant<'a>`\n               found type `Invariant<'static>`\n-note: the lifetime 'a as defined on the function body at 13:10...\n+note: the lifetime `'a` as defined on the function body at 13:10...\n   --> $DIR/region-invariant-static-error-reporting.rs:13:10\n    |\n LL | fn unify<'a>(x: Option<Invariant<'a>>, f: fn(Invariant<'a>)) {"}, {"sha": "74ea1b731e9ac59c6bcb91ddb283a12306e79ee6", "filename": "src/test/ui/regions/region-object-lifetime-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for autoref due to conflictin\n LL |     x.borrowed()\n    |       ^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 9:42...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 9:42...\n   --> $DIR/region-object-lifetime-2.rs:9:42\n    |\n LL | fn borrowed_receiver_different_lifetimes<'a,'b>(x: &'a dyn Foo) -> &'b () {\n@@ -14,7 +14,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n LL |     x.borrowed()\n    |     ^\n-note: but, the lifetime must be valid for the lifetime 'b as defined on the function body at 9:45...\n+note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 9:45...\n   --> $DIR/region-object-lifetime-2.rs:9:45\n    |\n LL | fn borrowed_receiver_different_lifetimes<'a,'b>(x: &'a dyn Foo) -> &'b () {"}, {"sha": "105321829058838ed399cf939033a0bc3092da2a", "filename": "src/test/ui/regions/region-object-lifetime-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for autoref due to conflictin\n LL |     x.borrowed()\n    |       ^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 11:41...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 11:41...\n   --> $DIR/region-object-lifetime-4.rs:11:41\n    |\n LL | fn borrowed_receiver_related_lifetimes2<'a,'b>(x: &'a (dyn Foo + 'b)) -> &'b () {\n@@ -14,7 +14,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n LL |     x.borrowed()\n    |     ^\n-note: but, the lifetime must be valid for the lifetime 'b as defined on the function body at 11:44...\n+note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 11:44...\n   --> $DIR/region-object-lifetime-4.rs:11:44\n    |\n LL | fn borrowed_receiver_related_lifetimes2<'a,'b>(x: &'a (dyn Foo + 'b)) -> &'b () {"}, {"sha": "14934d6fa4899c9490be3bc91282204fe33222d2", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -29,15 +29,15 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |     Box::new(v)\n    |              ^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 25:6...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 25:6...\n   --> $DIR/region-object-lifetime-in-coercion.rs:25:6\n    |\n LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {\n    |      ^^\n    = note: ...so that the expression is assignable:\n            expected &[u8]\n               found &'a [u8]\n-note: but, the lifetime must be valid for the lifetime 'b as defined on the function body at 25:9...\n+note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 25:9...\n   --> $DIR/region-object-lifetime-in-coercion.rs:25:9\n    |\n LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {"}, {"sha": "7a051b8ac835d0a2d3f0b8ca8c53e4d4a5a75e8e", "filename": "src/test/ui/regions/regions-addr-of-upvar-self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for borrow expression due to\n LL |             let p: &'static mut usize = &mut self.food;\n    |                                         ^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime '_ as defined on the body at 9:18...\n+note: first, the lifetime cannot outlive the lifetime `'_` as defined on the body at 9:18...\n   --> $DIR/regions-addr-of-upvar-self.rs:9:18\n    |\n LL |         let _f = || {"}, {"sha": "c0401780b8f5b2794bd65266755485c7b450c2d2", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.migrate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,12 +4,12 @@ error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifet\n LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 33:15\n+note: the pointer is valid for the lifetime `'a` as defined on the function body at 33:15\n   --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:33:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 33:18\n+note: but the referenced data is only valid for the lifetime `'b` as defined on the function body at 33:18\n   --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:33:18\n    |\n LL | fn with_assoc<'a,'b>() {"}, {"sha": "a636c9ef22c83ead07a67223d423f9f6e9347ddb", "filename": "src/test/ui/regions/regions-assoc-type-region-bound-in-trait-not-met.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` d\n LL | impl<'a> Foo<'static> for &'a i32 {\n    |          ^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the impl at 14:6...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the impl at 14:6...\n   --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:14:6\n    |\n LL | impl<'a> Foo<'static> for &'a i32 {\n@@ -25,15 +25,15 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` d\n LL | impl<'a,'b> Foo<'b> for &'a i64 {\n    |             ^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the impl at 19:6...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the impl at 19:6...\n   --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:19:6\n    |\n LL | impl<'a,'b> Foo<'b> for &'a i64 {\n    |      ^^\n    = note: ...so that the types are compatible:\n            expected Foo<'b>\n               found Foo<'_>\n-note: but, the lifetime must be valid for the lifetime 'b as defined on the impl at 19:9...\n+note: but, the lifetime must be valid for the lifetime `'b` as defined on the impl at 19:9...\n   --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:19:9\n    |\n LL | impl<'a,'b> Foo<'b> for &'a i64 {"}, {"sha": "81256e3b46cbb94a399d27175f88cd9614994b28", "filename": "src/test/ui/regions/regions-assoc-type-static-bound-in-trait-not-met.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` d\n LL | impl<'a> Foo for &'a i32 {\n    |          ^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the impl at 9:6...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the impl at 9:6...\n   --> $DIR/regions-assoc-type-static-bound-in-trait-not-met.rs:9:6\n    |\n LL | impl<'a> Foo for &'a i32 {"}, {"sha": "a15710b86c06e8360e0d03b899f21a3f25342d5b", "filename": "src/test/ui/regions/regions-bounds.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,12 +6,12 @@ LL |     return e;\n    |\n    = note: expected type `TupleStruct<'b>`\n               found type `TupleStruct<'a>`\n-note: the lifetime 'a as defined on the function body at 8:10...\n+note: the lifetime `'a` as defined on the function body at 8:10...\n   --> $DIR/regions-bounds.rs:8:10\n    |\n LL | fn a_fn1<'a,'b>(e: TupleStruct<'a>) -> TupleStruct<'b> {\n    |          ^^\n-note: ...does not necessarily outlive the lifetime 'b as defined on the function body at 8:13\n+note: ...does not necessarily outlive the lifetime `'b` as defined on the function body at 8:13\n   --> $DIR/regions-bounds.rs:8:13\n    |\n LL | fn a_fn1<'a,'b>(e: TupleStruct<'a>) -> TupleStruct<'b> {\n@@ -25,12 +25,12 @@ LL |     return e;\n    |\n    = note: expected type `Struct<'b>`\n               found type `Struct<'a>`\n-note: the lifetime 'a as defined on the function body at 12:10...\n+note: the lifetime `'a` as defined on the function body at 12:10...\n   --> $DIR/regions-bounds.rs:12:10\n    |\n LL | fn a_fn3<'a,'b>(e: Struct<'a>) -> Struct<'b> {\n    |          ^^\n-note: ...does not necessarily outlive the lifetime 'b as defined on the function body at 12:13\n+note: ...does not necessarily outlive the lifetime `'b` as defined on the function body at 12:13\n   --> $DIR/regions-bounds.rs:12:13\n    |\n LL | fn a_fn3<'a,'b>(e: Struct<'a>) -> Struct<'b> {"}, {"sha": "8e473dad69341e3375c6018311982e5f700032f6", "filename": "src/test/ui/regions/regions-close-object-into-object-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for borrow expression due to\n LL |     box B(&*v) as Box<dyn X>\n    |           ^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 9:6...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 9:6...\n   --> $DIR/regions-close-object-into-object-2.rs:9:6\n    |\n LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {"}, {"sha": "c80d13e15b14726c16bc6e38b120e550220aea4b", "filename": "src/test/ui/regions/regions-close-object-into-object-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for borrow expression due to\n LL |     box B(&*v) as Box<dyn X>\n    |           ^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 9:6...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 9:6...\n   --> $DIR/regions-close-object-into-object-4.rs:9:6\n    |\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {"}, {"sha": "ef21316ea83aea639866521ca102079714d32282", "filename": "src/test/ui/regions/regions-close-over-type-parameter-multiple.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |     box v as Box<dyn SomeTrait + 'a>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 18:20...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 18:20...\n   --> $DIR/regions-close-over-type-parameter-multiple.rs:18:20\n    |\n LL | fn make_object_bad<'a,'b,'c,A:SomeTrait+'a+'b>(v: A) -> Box<dyn SomeTrait + 'c> {\n@@ -14,7 +14,7 @@ note: ...so that the declared lifetime parameter bounds are satisfied\n    |\n LL |     box v as Box<dyn SomeTrait + 'a>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: but, the lifetime must be valid for the lifetime 'c as defined on the function body at 18:26...\n+note: but, the lifetime must be valid for the lifetime `'c` as defined on the function body at 18:26...\n   --> $DIR/regions-close-over-type-parameter-multiple.rs:18:26\n    |\n LL | fn make_object_bad<'a,'b,'c,A:SomeTrait+'a+'b>(v: A) -> Box<dyn SomeTrait + 'c> {"}, {"sha": "12b89787d5f18ff5cfbf5aa83c3c4d2a8004ec9b", "filename": "src/test/ui/regions/regions-creating-enums4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,15 +4,15 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` d\n LL |     Ast::Add(x, y)\n    |     ^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 6:16...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 6:16...\n   --> $DIR/regions-creating-enums4.rs:6:16\n    |\n LL | fn mk_add_bad2<'a,'b>(x: &'a Ast<'a>, y: &'a Ast<'a>, z: &Ast) -> Ast<'b> {\n    |                ^^\n    = note: ...so that the expression is assignable:\n            expected &Ast<'_>\n               found &Ast<'a>\n-note: but, the lifetime must be valid for the lifetime 'b as defined on the function body at 6:19...\n+note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 6:19...\n   --> $DIR/regions-creating-enums4.rs:6:19\n    |\n LL | fn mk_add_bad2<'a,'b>(x: &'a Ast<'a>, y: &'a Ast<'a>, z: &Ast) -> Ast<'b> {"}, {"sha": "9095451da0522bfae8e078ac54311fb44d0aef95", "filename": "src/test/ui/regions/regions-early-bound-error-method.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,12 +4,12 @@ error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n LL |         g2.get()\n    |         ^^^^^^^^\n    |\n-note: ...the reference is valid for the lifetime 'a as defined on the impl at 18:6...\n+note: ...the reference is valid for the lifetime `'a` as defined on the impl at 18:6...\n   --> $DIR/regions-early-bound-error-method.rs:18:6\n    |\n LL | impl<'a> Box<'a> {\n    |      ^^\n-note: ...but the borrowed content is only valid for the lifetime 'b as defined on the method body at 19:11\n+note: ...but the borrowed content is only valid for the lifetime `'b` as defined on the method body at 19:11\n   --> $DIR/regions-early-bound-error-method.rs:19:11\n    |\n LL |     fn or<'b,G:GetRef<'b>>(&self, g2: G) -> &'a isize {"}, {"sha": "162d573362d45d1f3617a7b4464deb12ee71fc70", "filename": "src/test/ui/regions/regions-early-bound-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,12 +4,12 @@ error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n LL |     g1.get()\n    |     ^^^^^^^^\n    |\n-note: ...the reference is valid for the lifetime 'b as defined on the function body at 18:11...\n+note: ...the reference is valid for the lifetime `'b` as defined on the function body at 18:11...\n   --> $DIR/regions-early-bound-error.rs:18:11\n    |\n LL | fn get<'a,'b,G:GetRef<'a, isize>>(g1: G, b: &'b isize) -> &'b isize {\n    |           ^^\n-note: ...but the borrowed content is only valid for the lifetime 'a as defined on the function body at 18:8\n+note: ...but the borrowed content is only valid for the lifetime `'a` as defined on the function body at 18:8\n   --> $DIR/regions-early-bound-error.rs:18:8\n    |\n LL | fn get<'a,'b,G:GetRef<'a, isize>>(g1: G, b: &'b isize) -> &'b isize {"}, {"sha": "ad555efadf7ec98d24cd342c3948d254661eb85d", "filename": "src/test/ui/regions/regions-free-region-ordering-callee-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee-4.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -8,12 +8,12 @@ LL | |     let z: Option<&'a &'b usize> = None;\n LL | | }\n    | |_^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 5:14\n+note: the pointer is valid for the lifetime `'a` as defined on the function body at 5:14\n   --> $DIR/regions-free-region-ordering-callee-4.rs:5:14\n    |\n LL | fn ordering4<'a, 'b, F>(a: &'a usize, b: &'b usize, x: F) where F: FnOnce(&'a &'b usize) {\n    |              ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 5:18\n+note: but the referenced data is only valid for the lifetime `'b` as defined on the function body at 5:18\n   --> $DIR/regions-free-region-ordering-callee-4.rs:5:18\n    |\n LL | fn ordering4<'a, 'b, F>(a: &'a usize, b: &'b usize, x: F) where F: FnOnce(&'a &'b usize) {"}, {"sha": "10644174b9bc43bc7c28d3dbadb666bc6ae17914", "filename": "src/test/ui/regions/regions-free-region-ordering-incorrect.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for borrow expression due to\n LL |             None => &self.val\n    |                     ^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the method body at 14:12...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the method body at 14:12...\n   --> $DIR/regions-free-region-ordering-incorrect.rs:14:12\n    |\n LL |     fn get<'a>(&'a self) -> &'b T {\n@@ -14,7 +14,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n LL |             None => &self.val\n    |                     ^^^^^^^^^\n-note: but, the lifetime must be valid for the lifetime 'b as defined on the impl at 13:6...\n+note: but, the lifetime must be valid for the lifetime `'b` as defined on the impl at 13:6...\n   --> $DIR/regions-free-region-ordering-incorrect.rs:13:6\n    |\n LL | impl<'b, T> Node<'b, T> {"}, {"sha": "c4ca7e970749c4fb30a1919e137afb3f23c48c36", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-hr-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -7,12 +7,12 @@ LL | | {\n LL | | }\n    | |_^\n    |\n-note: the pointer is valid for the lifetime 'x as defined on the function body at 21:11\n+note: the pointer is valid for the lifetime `'x` as defined on the function body at 21:11\n   --> $DIR/regions-implied-bounds-projection-gap-hr-1.rs:21:11\n    |\n LL | fn callee<'x, 'y, T>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n    |           ^^\n-note: but the referenced data is only valid for the lifetime 'y as defined on the function body at 21:15\n+note: but the referenced data is only valid for the lifetime `'y` as defined on the function body at 21:15\n   --> $DIR/regions-implied-bounds-projection-gap-hr-1.rs:21:15\n    |\n LL | fn callee<'x, 'y, T>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)"}, {"sha": "f4e223bbf6f9bd5c93c3aab2cbb68784ce943fe9", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-decl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,7 +6,7 @@ LL |     b_isize\n    |\n    = note: expected type `Invariant<'static>`\n               found type `Invariant<'r>`\n-note: the lifetime 'r as defined on the function body at 11:23...\n+note: the lifetime `'r` as defined on the function body at 11:23...\n   --> $DIR/regions-infer-invariance-due-to-decl.rs:11:23\n    |\n LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {"}, {"sha": "6322244fcf937e8019faed300d5fc008bd19d6cf", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,7 +6,7 @@ LL |     b_isize\n    |\n    = note: expected type `Invariant<'static>`\n               found type `Invariant<'r>`\n-note: the lifetime 'r as defined on the function body at 9:23...\n+note: the lifetime `'r` as defined on the function body at 9:23...\n   --> $DIR/regions-infer-invariance-due-to-mutability-3.rs:9:23\n    |\n LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {"}, {"sha": "7baae69945f9cda1a16a7a8bfcbc29b9ad31d95b", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,7 +6,7 @@ LL |     b_isize\n    |\n    = note: expected type `Invariant<'static>`\n               found type `Invariant<'r>`\n-note: the lifetime 'r as defined on the function body at 9:23...\n+note: the lifetime `'r` as defined on the function body at 9:23...\n   --> $DIR/regions-infer-invariance-due-to-mutability-4.rs:9:23\n    |\n LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {"}, {"sha": "6365769430f362656755958be01fdd5116a6f51b", "filename": "src/test/ui/regions/regions-infer-not-param.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,12 +6,12 @@ LL | fn take_direct<'a,'b>(p: Direct<'a>) -> Direct<'b> { p }\n    |\n    = note: expected type `Direct<'b>`\n               found type `Direct<'a>`\n-note: the lifetime 'a as defined on the function body at 15:16...\n+note: the lifetime `'a` as defined on the function body at 15:16...\n   --> $DIR/regions-infer-not-param.rs:15:16\n    |\n LL | fn take_direct<'a,'b>(p: Direct<'a>) -> Direct<'b> { p }\n    |                ^^\n-note: ...does not necessarily outlive the lifetime 'b as defined on the function body at 15:19\n+note: ...does not necessarily outlive the lifetime `'b` as defined on the function body at 15:19\n   --> $DIR/regions-infer-not-param.rs:15:19\n    |\n LL | fn take_direct<'a,'b>(p: Direct<'a>) -> Direct<'b> { p }\n@@ -25,12 +25,12 @@ LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n    |\n    = note: expected type `Indirect2<'b>`\n               found type `Indirect2<'a>`\n-note: the lifetime 'a as defined on the function body at 19:19...\n+note: the lifetime `'a` as defined on the function body at 19:19...\n   --> $DIR/regions-infer-not-param.rs:19:19\n    |\n LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n    |                   ^^\n-note: ...does not necessarily outlive the lifetime 'b as defined on the function body at 19:22\n+note: ...does not necessarily outlive the lifetime `'b` as defined on the function body at 19:22\n   --> $DIR/regions-infer-not-param.rs:19:22\n    |\n LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n@@ -44,12 +44,12 @@ LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n    |\n    = note: expected type `Indirect2<'b>`\n               found type `Indirect2<'a>`\n-note: the lifetime 'b as defined on the function body at 19:22...\n+note: the lifetime `'b` as defined on the function body at 19:22...\n   --> $DIR/regions-infer-not-param.rs:19:22\n    |\n LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n    |                      ^^\n-note: ...does not necessarily outlive the lifetime 'a as defined on the function body at 19:19\n+note: ...does not necessarily outlive the lifetime `'a` as defined on the function body at 19:19\n   --> $DIR/regions-infer-not-param.rs:19:19\n    |\n LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }"}, {"sha": "b1fd337b8d04b4d262640978b68dc72666d72687", "filename": "src/test/ui/regions/regions-infer-paramd-indirect.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -17,7 +17,7 @@ LL | |\n LL | |\n LL | |     }\n    | |_____^\n-note: ...does not necessarily outlive the lifetime 'a as defined on the impl at 16:6\n+note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 16:6\n   --> $DIR/regions-infer-paramd-indirect.rs:16:6\n    |\n LL | impl<'a> SetF<'a> for C<'a> {"}, {"sha": "f4eb5c8644f034872c80dba20474d346bbfbc90e", "filename": "src/test/ui/regions/regions-nested-fns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -49,7 +49,7 @@ LL | |         if false { return ay; }\n LL | |         return z;\n LL | |     }));\n    | |_____^\n-note: ...but the borrowed content is only valid for the lifetime 'x as defined on the function body at 3:11\n+note: ...but the borrowed content is only valid for the lifetime `'x` as defined on the function body at 3:11\n   --> $DIR/regions-nested-fns.rs:3:11\n    |\n LL | fn nested<'x>(x: &'x isize) {"}, {"sha": "d29fd80943f73a2030b1695284f100a793568f36", "filename": "src/test/ui/regions/regions-normalize-in-where-clause-list.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -7,12 +7,12 @@ LL | | {\n LL | | }\n    | |_^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 22:8...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 22:8...\n   --> $DIR/regions-normalize-in-where-clause-list.rs:22:8\n    |\n LL | fn bar<'a, 'b>()\n    |        ^^\n-note: ...but the lifetime must also be valid for the lifetime 'b as defined on the function body at 22:12...\n+note: ...but the lifetime must also be valid for the lifetime `'b` as defined on the function body at 22:12...\n   --> $DIR/regions-normalize-in-where-clause-list.rs:22:12\n    |\n LL | fn bar<'a, 'b>()"}, {"sha": "0992d9bf295c1c5408d5ccd91bac913a14a68e77", "filename": "src/test/ui/regions/regions-outlives-projection-container-hrtb.migrate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,12 +4,12 @@ error[E0491]: in type `&'a WithHrAssoc<TheType<'b>>`, reference has a longer lif\n LL |     let _: &'a WithHrAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 27:15\n+note: the pointer is valid for the lifetime `'a` as defined on the function body at 27:15\n   --> $DIR/regions-outlives-projection-container-hrtb.rs:27:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 27:18\n+note: but the referenced data is only valid for the lifetime `'b` as defined on the function body at 27:18\n   --> $DIR/regions-outlives-projection-container-hrtb.rs:27:18\n    |\n LL | fn with_assoc<'a,'b>() {\n@@ -21,12 +21,12 @@ error[E0491]: in type `&'a WithHrAssocSub<TheType<'b>>`, reference has a longer\n LL |     let _: &'a WithHrAssocSub<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 46:19\n+note: the pointer is valid for the lifetime `'a` as defined on the function body at 46:19\n   --> $DIR/regions-outlives-projection-container-hrtb.rs:46:19\n    |\n LL | fn with_assoc_sub<'a,'b>() {\n    |                   ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 46:22\n+note: but the referenced data is only valid for the lifetime `'b` as defined on the function body at 46:22\n   --> $DIR/regions-outlives-projection-container-hrtb.rs:46:22\n    |\n LL | fn with_assoc_sub<'a,'b>() {"}, {"sha": "49e28a14d8a4ec219d21b9bdbcef7c6feb5fce29", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.migrate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,12 +4,12 @@ error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifet\n LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 27:15\n+note: the pointer is valid for the lifetime `'a` as defined on the function body at 27:15\n   --> $DIR/regions-outlives-projection-container-wc.rs:27:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 27:18\n+note: but the referenced data is only valid for the lifetime `'b` as defined on the function body at 27:18\n   --> $DIR/regions-outlives-projection-container-wc.rs:27:18\n    |\n LL | fn with_assoc<'a,'b>() {"}, {"sha": "dba15fb0576eea6bcb10ff50e2a6d9e8cda3f87b", "filename": "src/test/ui/regions/regions-outlives-projection-container.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,12 +4,12 @@ error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifet\n LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 28:15\n+note: the pointer is valid for the lifetime `'a` as defined on the function body at 28:15\n   --> $DIR/regions-outlives-projection-container.rs:28:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 28:18\n+note: but the referenced data is only valid for the lifetime `'b` as defined on the function body at 28:18\n   --> $DIR/regions-outlives-projection-container.rs:28:18\n    |\n LL | fn with_assoc<'a,'b>() {\n@@ -21,12 +21,12 @@ error[E0491]: in type `&'a WithoutAssoc<TheType<'b>>`, reference has a longer li\n LL |     let _x: &'a WithoutAssoc<TheType<'b>> = loop { };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 50:18\n+note: the pointer is valid for the lifetime `'a` as defined on the function body at 50:18\n   --> $DIR/regions-outlives-projection-container.rs:50:18\n    |\n LL | fn without_assoc<'a,'b>() {\n    |                  ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 50:21\n+note: but the referenced data is only valid for the lifetime `'b` as defined on the function body at 50:21\n   --> $DIR/regions-outlives-projection-container.rs:50:21\n    |\n LL | fn without_assoc<'a,'b>() {\n@@ -38,12 +38,12 @@ error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifet\n LL |     call::<&'a WithAssoc<TheType<'b>>>();\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 58:20\n+note: the pointer is valid for the lifetime `'a` as defined on the function body at 58:20\n   --> $DIR/regions-outlives-projection-container.rs:58:20\n    |\n LL | fn call_with_assoc<'a,'b>() {\n    |                    ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 58:23\n+note: but the referenced data is only valid for the lifetime `'b` as defined on the function body at 58:23\n   --> $DIR/regions-outlives-projection-container.rs:58:23\n    |\n LL | fn call_with_assoc<'a,'b>() {\n@@ -55,12 +55,12 @@ error[E0491]: in type `&'a WithoutAssoc<TheType<'b>>`, reference has a longer li\n LL |     call::<&'a WithoutAssoc<TheType<'b>>>();\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 67:23\n+note: the pointer is valid for the lifetime `'a` as defined on the function body at 67:23\n   --> $DIR/regions-outlives-projection-container.rs:67:23\n    |\n LL | fn call_without_assoc<'a,'b>() {\n    |                       ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 67:26\n+note: but the referenced data is only valid for the lifetime `'b` as defined on the function body at 67:26\n   --> $DIR/regions-outlives-projection-container.rs:67:26\n    |\n LL | fn call_without_assoc<'a,'b>() {"}, {"sha": "49076673ad3989dd1f58ccbe183dcdf592d1c20a", "filename": "src/test/ui/regions/regions-ret-borrowed-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -12,7 +12,7 @@ LL |     with(|o| o)\n    = note: ...so that the expression is assignable:\n            expected &isize\n               found &isize\n-note: but, the lifetime must be valid for the lifetime 'a as defined on the function body at 9:14...\n+note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 9:14...\n   --> $DIR/regions-ret-borrowed-1.rs:9:14\n    |\n LL | fn return_it<'a>() -> &'a isize {"}, {"sha": "eb1ade27acea7a3f8c51e31959a43ceca7da3fce", "filename": "src/test/ui/regions/regions-ret-borrowed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -12,7 +12,7 @@ LL |     with(|o| o)\n    = note: ...so that the expression is assignable:\n            expected &isize\n               found &isize\n-note: but, the lifetime must be valid for the lifetime 'a as defined on the function body at 12:14...\n+note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 12:14...\n   --> $DIR/regions-ret-borrowed.rs:12:14\n    |\n LL | fn return_it<'a>() -> &'a isize {"}, {"sha": "946465bcb5f261a4437b307d33c4e954907d5187", "filename": "src/test/ui/regions/regions-return-ref-to-upvar-issue-17403.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,7 +4,7 @@ error[E0495]: cannot infer an appropriate lifetime for borrow expression due to\n LL |         let mut f = || &mut x;\n    |                        ^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime '_ as defined on the body at 7:21...\n+note: first, the lifetime cannot outlive the lifetime `'_` as defined on the body at 7:21...\n   --> $DIR/regions-return-ref-to-upvar-issue-17403.rs:7:21\n    |\n LL |         let mut f = || &mut x;"}, {"sha": "6e631d40d45008119732c8a0fd60be27ce050666", "filename": "src/test/ui/regions/regions-static-bound.migrate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -5,7 +5,7 @@ LL |     t\n    |     ^\n    |\n    = note: ...the reference is valid for the static lifetime...\n-note: ...but the borrowed content is only valid for the lifetime 'a as defined on the function body at 8:24\n+note: ...but the borrowed content is only valid for the lifetime `'a` as defined on the function body at 8:24\n   --> $DIR/regions-static-bound.rs:8:24\n    |\n LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {"}, {"sha": "f835c005ff969f3df94adbba84d84e028fd91236", "filename": "src/test/ui/regions/regions-trait-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-trait-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-trait-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-1.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,7 +6,7 @@ LL |     fn get_ctxt(&self) -> &'a Ctxt {\n    |\n    = note: expected type `fn(&HasCtxt<'a>) -> &Ctxt`\n               found type `fn(&HasCtxt<'a>) -> &'a Ctxt`\n-note: the lifetime 'a as defined on the impl at 12:6...\n+note: the lifetime `'a` as defined on the impl at 12:6...\n   --> $DIR/regions-trait-1.rs:12:6\n    |\n LL | impl<'a> GetCtxt for HasCtxt<'a> {"}, {"sha": "b7c7f93149dcf031cc44e7f12769657193958804", "filename": "src/test/ui/regions/regions-trait-object-subtyping.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,12 +4,12 @@ error[E0478]: lifetime bound not satisfied\n LL |     x\n    |     ^\n    |\n-note: lifetime parameter instantiated with the lifetime 'a as defined on the function body at 13:9\n+note: lifetime parameter instantiated with the lifetime `'a` as defined on the function body at 13:9\n   --> $DIR/regions-trait-object-subtyping.rs:13:9\n    |\n LL | fn foo3<'a,'b>(x: &'a mut dyn Dummy) -> &'b mut dyn Dummy {\n    |         ^^\n-note: but lifetime parameter must outlive the lifetime 'b as defined on the function body at 13:12\n+note: but lifetime parameter must outlive the lifetime `'b` as defined on the function body at 13:12\n   --> $DIR/regions-trait-object-subtyping.rs:13:12\n    |\n LL | fn foo3<'a,'b>(x: &'a mut dyn Dummy) -> &'b mut dyn Dummy {\n@@ -21,7 +21,7 @@ error[E0495]: cannot infer an appropriate lifetime for automatic coercion due to\n LL |     x\n    |     ^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 13:9...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 13:9...\n   --> $DIR/regions-trait-object-subtyping.rs:13:9\n    |\n LL | fn foo3<'a,'b>(x: &'a mut dyn Dummy) -> &'b mut dyn Dummy {\n@@ -31,7 +31,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n LL |     x\n    |     ^\n-note: but, the lifetime must be valid for the lifetime 'b as defined on the function body at 13:12...\n+note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 13:12...\n   --> $DIR/regions-trait-object-subtyping.rs:13:12\n    |\n LL | fn foo3<'a,'b>(x: &'a mut dyn Dummy) -> &'b mut dyn Dummy {\n@@ -48,12 +48,12 @@ LL |     x\n    |\n    = note: expected type `Wrapper<&'b mut (dyn Dummy + 'b)>`\n               found type `Wrapper<&'a mut (dyn Dummy + 'a)>`\n-note: the lifetime 'b as defined on the function body at 20:15...\n+note: the lifetime `'b` as defined on the function body at 20:15...\n   --> $DIR/regions-trait-object-subtyping.rs:20:15\n    |\n LL | fn foo4<'a:'b,'b>(x: Wrapper<&'a mut dyn Dummy>) -> Wrapper<&'b mut dyn Dummy> {\n    |               ^^\n-note: ...does not necessarily outlive the lifetime 'a as defined on the function body at 20:9\n+note: ...does not necessarily outlive the lifetime `'a` as defined on the function body at 20:9\n   --> $DIR/regions-trait-object-subtyping.rs:20:9\n    |\n LL | fn foo4<'a:'b,'b>(x: Wrapper<&'a mut dyn Dummy>) -> Wrapper<&'b mut dyn Dummy> {"}, {"sha": "aae519c5df2e9901057e23d14e4168399d24d591", "filename": "src/test/ui/regions/regions-variance-invariant-use-covariant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,7 +6,7 @@ LL |     let _: Invariant<'static> = c;\n    |\n    = note: expected type `Invariant<'static>`\n               found type `Invariant<'b>`\n-note: the lifetime 'b as defined on the function body at 11:9...\n+note: the lifetime `'b` as defined on the function body at 11:9...\n   --> $DIR/regions-variance-invariant-use-covariant.rs:11:9\n    |\n LL | fn use_<'b>(c: Invariant<'b>) {"}, {"sha": "9f39508604110df3c48abb2becb2a3a1208a8828", "filename": "src/test/ui/regions/regions-wf-trait-object.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-wf-trait-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fregions%2Fregions-wf-trait-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-wf-trait-object.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,12 +4,12 @@ error[E0478]: lifetime bound not satisfied\n LL |     x: Box<dyn TheTrait<'a>+'b>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime 'b as defined on the struct at 6:15\n+note: lifetime parameter instantiated with the lifetime `'b` as defined on the struct at 6:15\n   --> $DIR/regions-wf-trait-object.rs:6:15\n    |\n LL | struct Foo<'a,'b> {\n    |               ^^\n-note: but lifetime parameter must outlive the lifetime 'a as defined on the struct at 6:12\n+note: but lifetime parameter must outlive the lifetime `'a` as defined on the struct at 6:12\n   --> $DIR/regions-wf-trait-object.rs:6:12\n    |\n LL | struct Foo<'a,'b> {"}, {"sha": "609a40163a30c38fcb3e8ccc7efabe9ab064f115", "filename": "src/test/ui/reject-specialized-drops-8142.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -34,7 +34,7 @@ LL | impl                    Drop for N<'static>     { fn drop(&mut self) { } }\n    |\n    = note: expected type `N<'n>`\n               found type `N<'static>`\n-note: the lifetime 'n as defined on the struct at 8:10...\n+note: the lifetime `'n` as defined on the struct at 8:10...\n   --> $DIR/reject-specialized-drops-8142.rs:8:10\n    |\n LL | struct N<'n> { x: &'n i8 }\n@@ -95,12 +95,12 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'lw`\n LL | impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'l1 as defined on the struct at 17:10...\n+note: first, the lifetime cannot outlive the lifetime `'l1` as defined on the struct at 17:10...\n   --> $DIR/reject-specialized-drops-8142.rs:17:10\n    |\n LL | struct W<'l1, 'l2> { x: &'l1 i8, y: &'l2 u8 }\n    |          ^^^\n-note: ...but the lifetime must also be valid for the lifetime 'l2 as defined on the struct at 17:15...\n+note: ...but the lifetime must also be valid for the lifetime `'l2` as defined on the struct at 17:15...\n   --> $DIR/reject-specialized-drops-8142.rs:17:15\n    |\n LL | struct W<'l1, 'l2> { x: &'l1 i8, y: &'l2 u8 }"}, {"sha": "6efc1176d05b84e9497c2dded93319511bd727b9", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-region-rev.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region-rev.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region-rev.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region-rev.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,12 +4,12 @@ error[E0491]: in type `&'a rev_variant_struct_region::Foo<'b>`, reference has a\n LL |         type Out = &'a Foo<'b>;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the impl at 16:10\n+note: the pointer is valid for the lifetime `'a` as defined on the impl at 16:10\n   --> $DIR/regions-outlives-nominal-type-region-rev.rs:16:10\n    |\n LL |     impl<'a, 'b> Trait<'a, 'b> for usize {\n    |          ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the impl at 16:14\n+note: but the referenced data is only valid for the lifetime `'b` as defined on the impl at 16:14\n   --> $DIR/regions-outlives-nominal-type-region-rev.rs:16:14\n    |\n LL |     impl<'a, 'b> Trait<'a, 'b> for usize {"}, {"sha": "06e5f24dec97014cfa2f50ca81d481a3f3058cc7", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,12 +4,12 @@ error[E0491]: in type `&'a variant_struct_region::Foo<'b>`, reference has a long\n LL |         type Out = &'a Foo<'b>;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the impl at 16:10\n+note: the pointer is valid for the lifetime `'a` as defined on the impl at 16:10\n   --> $DIR/regions-outlives-nominal-type-region.rs:16:10\n    |\n LL |     impl<'a, 'b> Trait<'a, 'b> for usize {\n    |          ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the impl at 16:14\n+note: but the referenced data is only valid for the lifetime `'b` as defined on the impl at 16:14\n   --> $DIR/regions-outlives-nominal-type-region.rs:16:14\n    |\n LL |     impl<'a, 'b> Trait<'a, 'b> for usize {"}, {"sha": "d02f7b796218499bb1b208c133096fbe3e365a80", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-type-rev.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type-rev.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type-rev.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type-rev.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,12 +4,12 @@ error[E0491]: in type `&'a variant_struct_type::Foo<&'b i32>`, reference has a l\n LL |         type Out = &'a Foo<&'b i32>;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the impl at 16:10\n+note: the pointer is valid for the lifetime `'a` as defined on the impl at 16:10\n   --> $DIR/regions-outlives-nominal-type-type-rev.rs:16:10\n    |\n LL |     impl<'a, 'b> Trait<'a, 'b> for usize {\n    |          ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the impl at 16:14\n+note: but the referenced data is only valid for the lifetime `'b` as defined on the impl at 16:14\n   --> $DIR/regions-outlives-nominal-type-type-rev.rs:16:14\n    |\n LL |     impl<'a, 'b> Trait<'a, 'b> for usize {"}, {"sha": "40c70f53245cfeeeeb0d45bd6402ae40c37dbf9c", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,12 +4,12 @@ error[E0491]: in type `&'a variant_struct_type::Foo<&'b i32>`, reference has a l\n LL |         type Out = &'a Foo<&'b i32>;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the impl at 16:10\n+note: the pointer is valid for the lifetime `'a` as defined on the impl at 16:10\n   --> $DIR/regions-outlives-nominal-type-type.rs:16:10\n    |\n LL |     impl<'a, 'b> Trait<'a, 'b> for usize {\n    |          ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the impl at 16:14\n+note: but the referenced data is only valid for the lifetime `'b` as defined on the impl at 16:14\n   --> $DIR/regions-outlives-nominal-type-type.rs:16:14\n    |\n LL |     impl<'a, 'b> Trait<'a, 'b> for usize {"}, {"sha": "825c1015c51d7e37c5543e797d8ae51b7c059f66", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-struct-not-wf.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -32,12 +32,12 @@ error[E0491]: in type `&'a &'b T`, reference has a longer lifetime than the data\n LL |     type Out = &'a &'b T;\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the impl at 24:6\n+note: the pointer is valid for the lifetime `'a` as defined on the impl at 24:6\n   --> $DIR/regions-struct-not-wf.rs:24:6\n    |\n LL | impl<'a, 'b, T> Trait1<'a, 'b, T> for u32 {\n    |      ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the impl at 24:10\n+note: but the referenced data is only valid for the lifetime `'b` as defined on the impl at 24:10\n   --> $DIR/regions-struct-not-wf.rs:24:10\n    |\n LL | impl<'a, 'b, T> Trait1<'a, 'b, T> for u32 {"}, {"sha": "bce1900ca602c41e14ea4195e6cbc345531320e3", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,12 +6,12 @@ LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                |\n    |                ...but this borrow...\n    |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 8:26\n+note: ...can't outlive the lifetime `'_` as defined on the method body at 8:26\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:26\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                          ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 8:26\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime `'_` as defined on the method body at 8:26\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                                     ^^^^^^^^^^^^^^^"}, {"sha": "bda325dc0116045470e27a96e45ab553eff50bac", "filename": "src/test/ui/static/static-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fstatic%2Fstatic-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fstatic%2Fstatic-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-lifetime.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,7 +4,7 @@ error[E0478]: lifetime bound not satisfied\n LL | impl<'a, A: Clone> Arbitrary for ::std::borrow::Cow<'a, A> {}\n    |                    ^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime 'a as defined on the impl at 3:6\n+note: lifetime parameter instantiated with the lifetime `'a` as defined on the impl at 3:6\n   --> $DIR/static-lifetime.rs:3:6\n    |\n LL | impl<'a, A: Clone> Arbitrary for ::std::borrow::Cow<'a, A> {}"}, {"sha": "88c9c473eb0c7c0c53b32a5d83e7917ab0a54935", "filename": "src/test/ui/traits/trait-impl-of-supertrait-has-wrong-lifetime-parameters.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-of-supertrait-has-wrong-lifetime-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-of-supertrait-has-wrong-lifetime-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-of-supertrait-has-wrong-lifetime-parameters.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,12 +4,12 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` d\n LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {\n    |             ^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the impl at 24:6...\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined on the impl at 24:6...\n   --> $DIR/trait-impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:6\n    |\n LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {\n    |      ^^\n-note: ...but the lifetime must also be valid for the lifetime 'b as defined on the impl at 24:9...\n+note: ...but the lifetime must also be valid for the lifetime `'b` as defined on the impl at 24:9...\n   --> $DIR/trait-impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:9\n    |\n LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {"}, {"sha": "e1ccde3c9d14a80752124822237784789a5705a0", "filename": "src/test/ui/traits/trait-matching-lifetimes.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Ftraits%2Ftrait-matching-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Ftraits%2Ftrait-matching-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-matching-lifetimes.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,12 +6,12 @@ LL |     fn foo(x: Foo<'b,'a>) {\n    |\n    = note: expected type `fn(Foo<'a, 'b>)`\n               found type `fn(Foo<'b, 'a>)`\n-note: the lifetime 'b as defined on the impl at 13:9...\n+note: the lifetime `'b` as defined on the impl at 13:9...\n   --> $DIR/trait-matching-lifetimes.rs:13:9\n    |\n LL | impl<'a,'b> Tr for Foo<'a,'b> {\n    |         ^^\n-note: ...does not necessarily outlive the lifetime 'a as defined on the impl at 13:6\n+note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 13:6\n   --> $DIR/trait-matching-lifetimes.rs:13:6\n    |\n LL | impl<'a,'b> Tr for Foo<'a,'b> {\n@@ -25,12 +25,12 @@ LL |     fn foo(x: Foo<'b,'a>) {\n    |\n    = note: expected type `fn(Foo<'a, 'b>)`\n               found type `fn(Foo<'b, 'a>)`\n-note: the lifetime 'a as defined on the impl at 13:6...\n+note: the lifetime `'a` as defined on the impl at 13:6...\n   --> $DIR/trait-matching-lifetimes.rs:13:6\n    |\n LL | impl<'a,'b> Tr for Foo<'a,'b> {\n    |      ^^\n-note: ...does not necessarily outlive the lifetime 'b as defined on the impl at 13:9\n+note: ...does not necessarily outlive the lifetime `'b` as defined on the impl at 13:9\n   --> $DIR/trait-matching-lifetimes.rs:13:9\n    |\n LL | impl<'a,'b> Tr for Foo<'a,'b> {"}, {"sha": "de3a997a19ed8d65bfd70d86a534f3ba92a4021c", "filename": "src/test/ui/ufcs/ufcs-explicit-self-bad.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -38,7 +38,7 @@ note: the anonymous lifetime #1 defined on the method body at 37:5...\n    |\n LL |     fn dummy2(self: &Bar<T>) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...does not necessarily outlive the lifetime 'a as defined on the impl at 35:6\n+note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 35:6\n   --> $DIR/ufcs-explicit-self-bad.rs:35:6\n    |\n LL | impl<'a, T> SomeTrait for &'a Bar<T> {\n@@ -52,7 +52,7 @@ LL |     fn dummy2(self: &Bar<T>) {}\n    |\n    = note: expected type `&'a Bar<T>`\n               found type `&Bar<T>`\n-note: the lifetime 'a as defined on the impl at 35:6...\n+note: the lifetime `'a` as defined on the impl at 35:6...\n   --> $DIR/ufcs-explicit-self-bad.rs:35:6\n    |\n LL | impl<'a, T> SomeTrait for &'a Bar<T> {\n@@ -76,7 +76,7 @@ note: the anonymous lifetime #2 defined on the method body at 39:5...\n    |\n LL |     fn dummy3(self: &&Bar<T>) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...does not necessarily outlive the lifetime 'a as defined on the impl at 35:6\n+note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 35:6\n   --> $DIR/ufcs-explicit-self-bad.rs:35:6\n    |\n LL | impl<'a, T> SomeTrait for &'a Bar<T> {\n@@ -90,7 +90,7 @@ LL |     fn dummy3(self: &&Bar<T>) {}\n    |\n    = note: expected type `&'a Bar<T>`\n               found type `&Bar<T>`\n-note: the lifetime 'a as defined on the impl at 35:6...\n+note: the lifetime `'a` as defined on the impl at 35:6...\n   --> $DIR/ufcs-explicit-self-bad.rs:35:6\n    |\n LL | impl<'a, T> SomeTrait for &'a Bar<T> {"}, {"sha": "0f93927683ea677024ffe744918934e984b2289b", "filename": "src/test/ui/variance/variance-btree-invariant-types.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,7 +6,7 @@ LL |     v\n    |\n    = note: expected type `std::collections::btree_map::IterMut<'_, &'new (), _>`\n               found type `std::collections::btree_map::IterMut<'_, &'static (), _>`\n-note: the lifetime 'new as defined on the function body at 3:21...\n+note: the lifetime `'new` as defined on the function body at 3:21...\n   --> $DIR/variance-btree-invariant-types.rs:3:21\n    |\n LL | fn iter_cov_key<'a, 'new>(v: IterMut<'a, &'static (), ()>) -> IterMut<'a, &'new (), ()> {\n@@ -21,7 +21,7 @@ LL |     v\n    |\n    = note: expected type `std::collections::btree_map::IterMut<'_, _, &'new ()>`\n               found type `std::collections::btree_map::IterMut<'_, _, &'static ()>`\n-note: the lifetime 'new as defined on the function body at 6:21...\n+note: the lifetime `'new` as defined on the function body at 6:21...\n   --> $DIR/variance-btree-invariant-types.rs:6:21\n    |\n LL | fn iter_cov_val<'a, 'new>(v: IterMut<'a, (), &'static ()>) -> IterMut<'a, (), &'new ()> {\n@@ -36,7 +36,7 @@ LL |     v\n    |\n    = note: expected type `std::collections::btree_map::IterMut<'_, &'static (), _>`\n               found type `std::collections::btree_map::IterMut<'_, &'new (), _>`\n-note: the lifetime 'new as defined on the function body at 9:24...\n+note: the lifetime `'new` as defined on the function body at 9:24...\n   --> $DIR/variance-btree-invariant-types.rs:9:24\n    |\n LL | fn iter_contra_key<'a, 'new>(v: IterMut<'a, &'new (), ()>) -> IterMut<'a, &'static (), ()> {\n@@ -51,7 +51,7 @@ LL |     v\n    |\n    = note: expected type `std::collections::btree_map::IterMut<'_, _, &'static ()>`\n               found type `std::collections::btree_map::IterMut<'_, _, &'new ()>`\n-note: the lifetime 'new as defined on the function body at 12:24...\n+note: the lifetime `'new` as defined on the function body at 12:24...\n   --> $DIR/variance-btree-invariant-types.rs:12:24\n    |\n LL | fn iter_contra_val<'a, 'new>(v: IterMut<'a, (), &'new ()>) -> IterMut<'a, (), &'static ()> {\n@@ -66,7 +66,7 @@ LL |     v\n    |\n    = note: expected type `std::collections::btree_map::OccupiedEntry<'_, &'new (), _>`\n               found type `std::collections::btree_map::OccupiedEntry<'_, &'static (), _>`\n-note: the lifetime 'new as defined on the function body at 16:20...\n+note: the lifetime `'new` as defined on the function body at 16:20...\n   --> $DIR/variance-btree-invariant-types.rs:16:20\n    |\n LL | fn occ_cov_key<'a, 'new>(v: OccupiedEntry<'a, &'static (), ()>)\n@@ -81,7 +81,7 @@ LL |     v\n    |\n    = note: expected type `std::collections::btree_map::OccupiedEntry<'_, _, &'new ()>`\n               found type `std::collections::btree_map::OccupiedEntry<'_, _, &'static ()>`\n-note: the lifetime 'new as defined on the function body at 20:20...\n+note: the lifetime `'new` as defined on the function body at 20:20...\n   --> $DIR/variance-btree-invariant-types.rs:20:20\n    |\n LL | fn occ_cov_val<'a, 'new>(v: OccupiedEntry<'a, (), &'static ()>)\n@@ -96,7 +96,7 @@ LL |     v\n    |\n    = note: expected type `std::collections::btree_map::OccupiedEntry<'_, &'static (), _>`\n               found type `std::collections::btree_map::OccupiedEntry<'_, &'new (), _>`\n-note: the lifetime 'new as defined on the function body at 24:23...\n+note: the lifetime `'new` as defined on the function body at 24:23...\n   --> $DIR/variance-btree-invariant-types.rs:24:23\n    |\n LL | fn occ_contra_key<'a, 'new>(v: OccupiedEntry<'a, &'new (), ()>)\n@@ -111,7 +111,7 @@ LL |     v\n    |\n    = note: expected type `std::collections::btree_map::OccupiedEntry<'_, _, &'static ()>`\n               found type `std::collections::btree_map::OccupiedEntry<'_, _, &'new ()>`\n-note: the lifetime 'new as defined on the function body at 28:23...\n+note: the lifetime `'new` as defined on the function body at 28:23...\n   --> $DIR/variance-btree-invariant-types.rs:28:23\n    |\n LL | fn occ_contra_val<'a, 'new>(v: OccupiedEntry<'a, (), &'new ()>)\n@@ -126,7 +126,7 @@ LL |     v\n    |\n    = note: expected type `std::collections::btree_map::VacantEntry<'_, &'new (), _>`\n               found type `std::collections::btree_map::VacantEntry<'_, &'static (), _>`\n-note: the lifetime 'new as defined on the function body at 33:20...\n+note: the lifetime `'new` as defined on the function body at 33:20...\n   --> $DIR/variance-btree-invariant-types.rs:33:20\n    |\n LL | fn vac_cov_key<'a, 'new>(v: VacantEntry<'a, &'static (), ()>)\n@@ -141,7 +141,7 @@ LL |     v\n    |\n    = note: expected type `std::collections::btree_map::VacantEntry<'_, _, &'new ()>`\n               found type `std::collections::btree_map::VacantEntry<'_, _, &'static ()>`\n-note: the lifetime 'new as defined on the function body at 37:20...\n+note: the lifetime `'new` as defined on the function body at 37:20...\n   --> $DIR/variance-btree-invariant-types.rs:37:20\n    |\n LL | fn vac_cov_val<'a, 'new>(v: VacantEntry<'a, (), &'static ()>)\n@@ -156,7 +156,7 @@ LL |     v\n    |\n    = note: expected type `std::collections::btree_map::VacantEntry<'_, &'static (), _>`\n               found type `std::collections::btree_map::VacantEntry<'_, &'new (), _>`\n-note: the lifetime 'new as defined on the function body at 41:23...\n+note: the lifetime `'new` as defined on the function body at 41:23...\n   --> $DIR/variance-btree-invariant-types.rs:41:23\n    |\n LL | fn vac_contra_key<'a, 'new>(v: VacantEntry<'a, &'new (), ()>)\n@@ -171,7 +171,7 @@ LL |     v\n    |\n    = note: expected type `std::collections::btree_map::VacantEntry<'_, _, &'static ()>`\n               found type `std::collections::btree_map::VacantEntry<'_, _, &'new ()>`\n-note: the lifetime 'new as defined on the function body at 45:23...\n+note: the lifetime `'new` as defined on the function body at 45:23...\n   --> $DIR/variance-btree-invariant-types.rs:45:23\n    |\n LL | fn vac_contra_val<'a, 'new>(v: VacantEntry<'a, (), &'new ()>)"}, {"sha": "27017e5dc47d6120feae44151450a9b150dfa851", "filename": "src/test/ui/variance/variance-contravariant-arg-object.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,12 +6,12 @@ LL |     v\n    |\n    = note: expected type `dyn Get<&'min i32>`\n               found type `dyn Get<&'max i32>`\n-note: the lifetime 'min as defined on the function body at 10:21...\n+note: the lifetime `'min` as defined on the function body at 10:21...\n   --> $DIR/variance-contravariant-arg-object.rs:10:21\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 10:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 10:27\n   --> $DIR/variance-contravariant-arg-object.rs:10:27\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n@@ -25,12 +25,12 @@ LL |     v\n    |\n    = note: expected type `dyn Get<&'max i32>`\n               found type `dyn Get<&'min i32>`\n-note: the lifetime 'min as defined on the function body at 17:21...\n+note: the lifetime `'min` as defined on the function body at 17:21...\n   --> $DIR/variance-contravariant-arg-object.rs:17:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 17:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 17:27\n   --> $DIR/variance-contravariant-arg-object.rs:17:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)"}, {"sha": "1752b3b36a484ab5918c2a02bb9b5351a861f7ef", "filename": "src/test/ui/variance/variance-contravariant-arg-trait-match.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,12 +6,12 @@ LL |     impls_get::<G,&'min i32>()\n    |\n    = note: expected type `Get<&'min i32>`\n               found type `Get<&'max i32>`\n-note: the lifetime 'min as defined on the function body at 10:21...\n+note: the lifetime `'min` as defined on the function body at 10:21...\n   --> $DIR/variance-contravariant-arg-trait-match.rs:10:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 10:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 10:27\n   --> $DIR/variance-contravariant-arg-trait-match.rs:10:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n@@ -25,12 +25,12 @@ LL |     impls_get::<G,&'max i32>()\n    |\n    = note: expected type `Get<&'max i32>`\n               found type `Get<&'min i32>`\n-note: the lifetime 'min as defined on the function body at 16:21...\n+note: the lifetime `'min` as defined on the function body at 16:21...\n   --> $DIR/variance-contravariant-arg-trait-match.rs:16:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 16:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 16:27\n   --> $DIR/variance-contravariant-arg-trait-match.rs:16:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()"}, {"sha": "e35aec4c0ce27a9b10ae2f0a93d72e89ea8ae287", "filename": "src/test/ui/variance/variance-contravariant-self-trait-match.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,12 +6,12 @@ LL |     impls_get::<&'min G>();\n    |\n    = note: expected type `Get`\n               found type `Get`\n-note: the lifetime 'min as defined on the function body at 10:21...\n+note: the lifetime `'min` as defined on the function body at 10:21...\n   --> $DIR/variance-contravariant-self-trait-match.rs:10:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 10:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 10:27\n   --> $DIR/variance-contravariant-self-trait-match.rs:10:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n@@ -25,12 +25,12 @@ LL |     impls_get::<&'max G>();\n    |\n    = note: expected type `Get`\n               found type `Get`\n-note: the lifetime 'min as defined on the function body at 16:21...\n+note: the lifetime `'min` as defined on the function body at 16:21...\n   --> $DIR/variance-contravariant-self-trait-match.rs:16:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 16:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 16:27\n   --> $DIR/variance-contravariant-self-trait-match.rs:16:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()"}, {"sha": "b986edb809f6c05effdab7a6df6d8b6f6c5e739b", "filename": "src/test/ui/variance/variance-covariant-arg-object.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,12 +6,12 @@ LL |     v\n    |\n    = note: expected type `dyn Get<&'min i32>`\n               found type `dyn Get<&'max i32>`\n-note: the lifetime 'min as defined on the function body at 10:21...\n+note: the lifetime `'min` as defined on the function body at 10:21...\n   --> $DIR/variance-covariant-arg-object.rs:10:21\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 10:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 10:27\n   --> $DIR/variance-covariant-arg-object.rs:10:27\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n@@ -25,12 +25,12 @@ LL |     v\n    |\n    = note: expected type `dyn Get<&'max i32>`\n               found type `dyn Get<&'min i32>`\n-note: the lifetime 'min as defined on the function body at 18:21...\n+note: the lifetime `'min` as defined on the function body at 18:21...\n   --> $DIR/variance-covariant-arg-object.rs:18:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 18:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 18:27\n   --> $DIR/variance-covariant-arg-object.rs:18:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)"}, {"sha": "aa383fcc26280f99610de6819ce904d54be9129b", "filename": "src/test/ui/variance/variance-covariant-arg-trait-match.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,12 +6,12 @@ LL |     impls_get::<G,&'min i32>()\n    |\n    = note: expected type `Get<&'min i32>`\n               found type `Get<&'max i32>`\n-note: the lifetime 'min as defined on the function body at 10:21...\n+note: the lifetime `'min` as defined on the function body at 10:21...\n   --> $DIR/variance-covariant-arg-trait-match.rs:10:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 10:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 10:27\n   --> $DIR/variance-covariant-arg-trait-match.rs:10:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n@@ -25,12 +25,12 @@ LL |     impls_get::<G,&'max i32>()\n    |\n    = note: expected type `Get<&'max i32>`\n               found type `Get<&'min i32>`\n-note: the lifetime 'min as defined on the function body at 17:21...\n+note: the lifetime `'min` as defined on the function body at 17:21...\n   --> $DIR/variance-covariant-arg-trait-match.rs:17:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 17:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 17:27\n   --> $DIR/variance-covariant-arg-trait-match.rs:17:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()"}, {"sha": "a25d1044d42565b80019b18b9b1908cee387e13b", "filename": "src/test/ui/variance/variance-covariant-self-trait-match.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,12 +6,12 @@ LL |     impls_get::<&'min G>();\n    |\n    = note: expected type `Get`\n               found type `Get`\n-note: the lifetime 'min as defined on the function body at 10:21...\n+note: the lifetime `'min` as defined on the function body at 10:21...\n   --> $DIR/variance-covariant-self-trait-match.rs:10:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 10:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 10:27\n   --> $DIR/variance-covariant-self-trait-match.rs:10:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n@@ -25,12 +25,12 @@ LL |     impls_get::<&'max G>();\n    |\n    = note: expected type `Get`\n               found type `Get`\n-note: the lifetime 'min as defined on the function body at 17:21...\n+note: the lifetime `'min` as defined on the function body at 17:21...\n   --> $DIR/variance-covariant-self-trait-match.rs:17:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 17:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 17:27\n   --> $DIR/variance-covariant-self-trait-match.rs:17:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()"}, {"sha": "8ff1e23e8add826c9d80e291e937f8b34a2bdf6e", "filename": "src/test/ui/variance/variance-invariant-arg-object.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,12 +6,12 @@ LL |     v\n    |\n    = note: expected type `dyn Get<&'min i32>`\n               found type `dyn Get<&'max i32>`\n-note: the lifetime 'min as defined on the function body at 7:21...\n+note: the lifetime `'min` as defined on the function body at 7:21...\n   --> $DIR/variance-invariant-arg-object.rs:7:21\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 7:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 7:27\n   --> $DIR/variance-invariant-arg-object.rs:7:27\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n@@ -25,12 +25,12 @@ LL |     v\n    |\n    = note: expected type `dyn Get<&'max i32>`\n               found type `dyn Get<&'min i32>`\n-note: the lifetime 'min as defined on the function body at 14:21...\n+note: the lifetime `'min` as defined on the function body at 14:21...\n   --> $DIR/variance-invariant-arg-object.rs:14:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 14:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 14:27\n   --> $DIR/variance-invariant-arg-object.rs:14:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)"}, {"sha": "b58993737c783be9db2ace5dbf732ba0e71f0d16", "filename": "src/test/ui/variance/variance-invariant-arg-trait-match.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,12 +6,12 @@ LL |     impls_get::<G,&'min i32>()\n    |\n    = note: expected type `Get<&'min i32>`\n               found type `Get<&'max i32>`\n-note: the lifetime 'min as defined on the function body at 7:21...\n+note: the lifetime `'min` as defined on the function body at 7:21...\n   --> $DIR/variance-invariant-arg-trait-match.rs:7:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 7:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 7:27\n   --> $DIR/variance-invariant-arg-trait-match.rs:7:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n@@ -25,12 +25,12 @@ LL |     impls_get::<G,&'max i32>()\n    |\n    = note: expected type `Get<&'max i32>`\n               found type `Get<&'min i32>`\n-note: the lifetime 'min as defined on the function body at 13:21...\n+note: the lifetime `'min` as defined on the function body at 13:21...\n   --> $DIR/variance-invariant-arg-trait-match.rs:13:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 13:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 13:27\n   --> $DIR/variance-invariant-arg-trait-match.rs:13:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()"}, {"sha": "4a1d4d28b4805ae356b48264edc9d028f51b6212", "filename": "src/test/ui/variance/variance-invariant-self-trait-match.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,12 +6,12 @@ LL |     impls_get::<&'min G>();\n    |\n    = note: expected type `Get`\n               found type `Get`\n-note: the lifetime 'min as defined on the function body at 7:21...\n+note: the lifetime `'min` as defined on the function body at 7:21...\n   --> $DIR/variance-invariant-self-trait-match.rs:7:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 7:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 7:27\n   --> $DIR/variance-invariant-self-trait-match.rs:7:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n@@ -25,12 +25,12 @@ LL |     impls_get::<&'max G>();\n    |\n    = note: expected type `Get`\n               found type `Get`\n-note: the lifetime 'min as defined on the function body at 13:21...\n+note: the lifetime `'min` as defined on the function body at 13:21...\n   --> $DIR/variance-invariant-self-trait-match.rs:13:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 13:27\n+note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 13:27\n   --> $DIR/variance-invariant-self-trait-match.rs:13:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()"}, {"sha": "618f56da512d6aa6a71765fed3bc5a408f3192f7", "filename": "src/test/ui/variance/variance-use-contravariant-struct-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,12 +6,12 @@ LL |     v\n    |\n    = note: expected type `SomeStruct<&'min ()>`\n               found type `SomeStruct<&'max ()>`\n-note: the lifetime 'min as defined on the function body at 8:8...\n+note: the lifetime `'min` as defined on the function body at 8:8...\n   --> $DIR/variance-use-contravariant-struct-1.rs:8:8\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 8:13\n+note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 8:13\n   --> $DIR/variance-use-contravariant-struct-1.rs:8:13\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)"}, {"sha": "0b3a8dcfc86f4ab731b0ce613a33dce286e223eb", "filename": "src/test/ui/variance/variance-use-covariant-struct-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,12 +6,12 @@ LL |     v\n    |\n    = note: expected type `SomeStruct<&'max ()>`\n               found type `SomeStruct<&'min ()>`\n-note: the lifetime 'min as defined on the function body at 6:8...\n+note: the lifetime `'min` as defined on the function body at 6:8...\n   --> $DIR/variance-use-covariant-struct-1.rs:6:8\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'min ()>)\n    |        ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 6:13\n+note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 6:13\n   --> $DIR/variance-use-covariant-struct-1.rs:6:13\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'min ()>)"}, {"sha": "31deefb535e94cafa528747f3d5e4a7bc3ae0934", "filename": "src/test/ui/variance/variance-use-invariant-struct-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -6,12 +6,12 @@ LL |     v\n    |\n    = note: expected type `SomeStruct<&'min ()>`\n               found type `SomeStruct<&'max ()>`\n-note: the lifetime 'min as defined on the function body at 8:8...\n+note: the lifetime `'min` as defined on the function body at 8:8...\n   --> $DIR/variance-use-invariant-struct-1.rs:8:8\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 8:13\n+note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 8:13\n   --> $DIR/variance-use-invariant-struct-1.rs:8:13\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n@@ -25,12 +25,12 @@ LL |     v\n    |\n    = note: expected type `SomeStruct<&'max ()>`\n               found type `SomeStruct<&'min ()>`\n-note: the lifetime 'min as defined on the function body at 15:8...\n+note: the lifetime `'min` as defined on the function body at 15:8...\n   --> $DIR/variance-use-invariant-struct-1.rs:15:8\n    |\n LL | fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n    |        ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 15:13\n+note: ...does not necessarily outlive the lifetime `'max` as defined on the function body at 15:13\n   --> $DIR/variance-use-invariant-struct-1.rs:15:13\n    |\n LL | fn bar<'min,'max>(v: SomeStruct<&'min ()>)"}, {"sha": "93d16514a50783240f65339e48ecb3275f74b805", "filename": "src/test/ui/wf/wf-static-method.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ae5e3421d986339b53792157c45cb2e98374027/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.stderr?ref=2ae5e3421d986339b53792157c45cb2e98374027", "patch": "@@ -4,12 +4,12 @@ error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n LL |         u\n    |         ^\n    |\n-note: ...the reference is valid for the lifetime 'a as defined on the impl at 14:6...\n+note: ...the reference is valid for the lifetime `'a` as defined on the impl at 14:6...\n   --> $DIR/wf-static-method.rs:14:6\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n    |      ^^\n-note: ...but the borrowed content is only valid for the lifetime 'b as defined on the impl at 14:10\n+note: ...but the borrowed content is only valid for the lifetime `'b` as defined on the impl at 14:10\n   --> $DIR/wf-static-method.rs:14:10\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n@@ -21,12 +21,12 @@ error[E0478]: lifetime bound not satisfied\n LL |         let me = Self::make_me();\n    |                  ^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime 'b as defined on the impl at 23:10\n+note: lifetime parameter instantiated with the lifetime `'b` as defined on the impl at 23:10\n   --> $DIR/wf-static-method.rs:23:10\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n    |          ^^\n-note: but lifetime parameter must outlive the lifetime 'a as defined on the impl at 23:6\n+note: but lifetime parameter must outlive the lifetime `'a` as defined on the impl at 23:6\n   --> $DIR/wf-static-method.rs:23:6\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n@@ -38,12 +38,12 @@ error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n LL |         u\n    |         ^\n    |\n-note: ...the reference is valid for the lifetime 'a as defined on the impl at 31:6...\n+note: ...the reference is valid for the lifetime `'a` as defined on the impl at 31:6...\n   --> $DIR/wf-static-method.rs:31:6\n    |\n LL | impl<'a, 'b> Evil<'a, 'b> {\n    |      ^^\n-note: ...but the borrowed content is only valid for the lifetime 'b as defined on the impl at 31:10\n+note: ...but the borrowed content is only valid for the lifetime `'b` as defined on the impl at 31:10\n   --> $DIR/wf-static-method.rs:31:10\n    |\n LL | impl<'a, 'b> Evil<'a, 'b> {\n@@ -55,7 +55,7 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` d\n LL |     <()>::static_evil(b)\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'b as defined on the function body at 40:13...\n+note: first, the lifetime cannot outlive the lifetime `'b` as defined on the function body at 40:13...\n   --> $DIR/wf-static-method.rs:40:13\n    |\n LL | fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n@@ -65,7 +65,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n LL |     <()>::static_evil(b)\n    |                       ^\n-note: but, the lifetime must be valid for the lifetime 'a as defined on the function body at 40:9...\n+note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 40:9...\n   --> $DIR/wf-static-method.rs:40:9\n    |\n LL | fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n@@ -82,7 +82,7 @@ error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` d\n LL |     <IndirectEvil>::static_evil(b)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'b as defined on the function body at 44:22...\n+note: first, the lifetime cannot outlive the lifetime `'b` as defined on the function body at 44:22...\n   --> $DIR/wf-static-method.rs:44:22\n    |\n LL | fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n@@ -92,7 +92,7 @@ note: ...so that reference does not outlive borrowed content\n    |\n LL |     <IndirectEvil>::static_evil(b)\n    |                                 ^\n-note: but, the lifetime must be valid for the lifetime 'a as defined on the function body at 44:18...\n+note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 44:18...\n   --> $DIR/wf-static-method.rs:44:18\n    |\n LL | fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {"}]}