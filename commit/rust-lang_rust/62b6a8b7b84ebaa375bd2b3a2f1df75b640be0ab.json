{"sha": "62b6a8b7b84ebaa375bd2b3a2f1df75b640be0ab", "node_id": "C_kwDOAAsO6NoAKDYyYjZhOGI3Yjg0ZWJhYTM3NWJkMmIzYTJmMWRmNzViNjQwYmUwYWI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-02T01:40:29Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-26T17:20:57Z"}, "message": "remove now-unused ScalarMaybeUninit", "tree": {"sha": "3dde491846a54d8c45d2e9b8c9a9cce2121f57a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dde491846a54d8c45d2e9b8c9a9cce2121f57a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62b6a8b7b84ebaa375bd2b3a2f1df75b640be0ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62b6a8b7b84ebaa375bd2b3a2f1df75b640be0ab", "html_url": "https://github.com/rust-lang/rust/commit/62b6a8b7b84ebaa375bd2b3a2f1df75b640be0ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62b6a8b7b84ebaa375bd2b3a2f1df75b640be0ab/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30fa931f9297407a3d9bbeede1164bed5548f1f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/30fa931f9297407a3d9bbeede1164bed5548f1f8", "html_url": "https://github.com/rust-lang/rust/commit/30fa931f9297407a3d9bbeede1164bed5548f1f8"}], "stats": {"total": 135, "additions": 1, "deletions": 134}, "files": [{"sha": "93fe7e63710b15061f85791bf3071f6692a4bcb6", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62b6a8b7b84ebaa375bd2b3a2f1df75b640be0ab/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b6a8b7b84ebaa375bd2b3a2f1df75b640be0ab/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=62b6a8b7b84ebaa375bd2b3a2f1df75b640be0ab", "patch": "@@ -124,7 +124,7 @@ pub use self::error::{\n     UninitBytesAccess, UnsupportedOpInfo,\n };\n \n-pub use self::value::{get_slice_bytes, ConstAlloc, ConstValue, Scalar, ScalarMaybeUninit};\n+pub use self::value::{get_slice_bytes, ConstAlloc, ConstValue, Scalar};\n \n pub use self::allocation::{\n     alloc_range, AllocRange, Allocation, ConstAllocation, InitChunk, InitChunkIter, InitMask,"}, {"sha": "ba56c5267df0b1af2519dd3b4eef6918f8244238", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 0, "deletions": 133, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/62b6a8b7b84ebaa375bd2b3a2f1df75b640be0ab/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b6a8b7b84ebaa375bd2b3a2f1df75b640be0ab/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=62b6a8b7b84ebaa375bd2b3a2f1df75b640be0ab", "patch": "@@ -504,139 +504,6 @@ impl<'tcx, Prov: Provenance> Scalar<Prov> {\n     }\n }\n \n-#[derive(Clone, Copy, Eq, PartialEq, TyEncodable, TyDecodable, HashStable, Hash)]\n-pub enum ScalarMaybeUninit<Prov = AllocId> {\n-    Scalar(Scalar<Prov>),\n-    Uninit,\n-}\n-\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(ScalarMaybeUninit, 24);\n-\n-impl<Prov> From<Scalar<Prov>> for ScalarMaybeUninit<Prov> {\n-    #[inline(always)]\n-    fn from(s: Scalar<Prov>) -> Self {\n-        ScalarMaybeUninit::Scalar(s)\n-    }\n-}\n-\n-// We want the `Debug` output to be readable as it is used by `derive(Debug)` for\n-// all the Miri types.\n-impl<Prov: Provenance> fmt::Debug for ScalarMaybeUninit<Prov> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self {\n-            ScalarMaybeUninit::Uninit => write!(f, \"<uninitialized>\"),\n-            ScalarMaybeUninit::Scalar(s) => write!(f, \"{:?}\", s),\n-        }\n-    }\n-}\n-\n-impl<Prov: Provenance> fmt::LowerHex for ScalarMaybeUninit<Prov> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self {\n-            ScalarMaybeUninit::Uninit => write!(f, \"uninitialized bytes\"),\n-            ScalarMaybeUninit::Scalar(s) => write!(f, \"{:x}\", s),\n-        }\n-    }\n-}\n-\n-impl<Prov> ScalarMaybeUninit<Prov> {\n-    #[inline]\n-    pub fn from_pointer(ptr: Pointer<Prov>, cx: &impl HasDataLayout) -> Self {\n-        ScalarMaybeUninit::Scalar(Scalar::from_pointer(ptr, cx))\n-    }\n-\n-    #[inline]\n-    pub fn from_maybe_pointer(ptr: Pointer<Option<Prov>>, cx: &impl HasDataLayout) -> Self {\n-        ScalarMaybeUninit::Scalar(Scalar::from_maybe_pointer(ptr, cx))\n-    }\n-\n-    #[inline]\n-    pub fn check_init<'tcx>(self) -> InterpResult<'tcx, Scalar<Prov>> {\n-        match self {\n-            ScalarMaybeUninit::Scalar(scalar) => Ok(scalar),\n-            ScalarMaybeUninit::Uninit => throw_ub!(InvalidUninitBytes(None)),\n-        }\n-    }\n-}\n-\n-impl<'tcx, Prov: Provenance> ScalarMaybeUninit<Prov> {\n-    #[inline(always)]\n-    pub fn to_pointer(self, cx: &impl HasDataLayout) -> InterpResult<'tcx, Pointer<Option<Prov>>> {\n-        self.check_init()?.to_pointer(cx)\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_bool(self) -> InterpResult<'tcx, bool> {\n-        self.check_init()?.to_bool()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_char(self) -> InterpResult<'tcx, char> {\n-        self.check_init()?.to_char()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_f32(self) -> InterpResult<'tcx, Single> {\n-        self.check_init()?.to_f32()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_f64(self) -> InterpResult<'tcx, Double> {\n-        self.check_init()?.to_f64()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_u8(self) -> InterpResult<'tcx, u8> {\n-        self.check_init()?.to_u8()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_u16(self) -> InterpResult<'tcx, u16> {\n-        self.check_init()?.to_u16()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_u32(self) -> InterpResult<'tcx, u32> {\n-        self.check_init()?.to_u32()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_u64(self) -> InterpResult<'tcx, u64> {\n-        self.check_init()?.to_u64()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_machine_usize(self, cx: &impl HasDataLayout) -> InterpResult<'tcx, u64> {\n-        self.check_init()?.to_machine_usize(cx)\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_i8(self) -> InterpResult<'tcx, i8> {\n-        self.check_init()?.to_i8()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_i16(self) -> InterpResult<'tcx, i16> {\n-        self.check_init()?.to_i16()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_i32(self) -> InterpResult<'tcx, i32> {\n-        self.check_init()?.to_i32()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_i64(self) -> InterpResult<'tcx, i64> {\n-        self.check_init()?.to_i64()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_machine_isize(self, cx: &impl HasDataLayout) -> InterpResult<'tcx, i64> {\n-        self.check_init()?.to_machine_isize(cx)\n-    }\n-}\n-\n /// Gets the bytes of a constant slice value.\n pub fn get_slice_bytes<'tcx>(cx: &impl HasDataLayout, val: ConstValue<'tcx>) -> &'tcx [u8] {\n     if let ConstValue::Slice { data, start, end } = val {"}]}