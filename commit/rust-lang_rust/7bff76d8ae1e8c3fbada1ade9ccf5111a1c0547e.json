{"sha": "7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZmY3NmQ4YWUxZThjM2ZiYWRhMWFkZTljY2Y1MTExYTFjMDU0N2U=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-13T15:46:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-13T15:46:09Z"}, "message": "Merge #9249\n\n9249: internal: remove def-level diagnostics tests r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "1e85ed9c3fdf144469d9766c43c5362f5a31530b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e85ed9c3fdf144469d9766c43c5362f5a31530b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgxihBCRBK7hj4Ov3rIwAAijcIABBiF2FsZblLMmMfKcCawh3r\nwkL6S9q42ieDlJnWOsuscMPuXMcIQ1ZXaEhhFIsevw8VpC/CfGSml76gaLOK7rYr\nOdnDm6PRcgAECHM8h0t5fjhyJsRZ4ADpk7+SukCMWtoJFf4V9Dq2QumvcxsKXSaI\nJcD85y2O+v30EbIv036o6gWuxYBPr0yXRggWNpKCI87Hj/4qsnzZWfHc6Z57/5TI\n99sN4ia+d+tBGAnFafLPGtazlnvMsj94t9kVrRvg/POUpG8YqohgYohhebtC1sfb\nLOWmSKCd6gsRZEAzkp+2eajy0hZy7g5N57Bw+ndCPB2HkQs+HK1zV/C9xeG6Ebs=\n=EuPH\n-----END PGP SIGNATURE-----\n", "payload": "tree 1e85ed9c3fdf144469d9766c43c5362f5a31530b\nparent 3d8df2aef87bca7ec3f0994d799462f08d1ad449\nparent 4af7a35197a1cb159458694e69e17bd83dc9edff\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623599169 +0000\ncommitter GitHub <noreply@github.com> 1623599169 +0000\n\nMerge #9249\n\n9249: internal: remove def-level diagnostics tests r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e", "html_url": "https://github.com/rust-lang/rust/commit/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d8df2aef87bca7ec3f0994d799462f08d1ad449", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d8df2aef87bca7ec3f0994d799462f08d1ad449", "html_url": "https://github.com/rust-lang/rust/commit/3d8df2aef87bca7ec3f0994d799462f08d1ad449"}, {"sha": "4af7a35197a1cb159458694e69e17bd83dc9edff", "url": "https://api.github.com/repos/rust-lang/rust/commits/4af7a35197a1cb159458694e69e17bd83dc9edff", "html_url": "https://github.com/rust-lang/rust/commit/4af7a35197a1cb159458694e69e17bd83dc9edff"}], "stats": {"total": 960, "additions": 398, "deletions": 562}, "files": [{"sha": "28580eeb453eb80d5c1f91b8ac6f2c18c93442f4", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 85, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e", "patch": "@@ -5,11 +5,10 @@\n //! be expressed in terms of hir types themselves.\n use std::any::Any;\n \n-use cfg::{CfgExpr, CfgOptions, DnfExpr};\n+use cfg::{CfgExpr, CfgOptions};\n use either::Either;\n use hir_def::path::ModPath;\n use hir_expand::{name::Name, HirFileId, InFile};\n-use stdx::format_to;\n use syntax::{ast, AstPtr, SyntaxNodePtr, TextRange};\n \n pub use crate::diagnostics_sink::{\n@@ -37,7 +36,10 @@ diagnostics![\n     UnresolvedExternCrate,\n     UnresolvedImport,\n     UnresolvedMacroCall,\n+    UnresolvedProcMacro,\n+    MacroError,\n     MissingFields,\n+    InactiveCode,\n ];\n \n #[derive(Debug)]\n@@ -62,108 +64,28 @@ pub struct UnresolvedMacroCall {\n     pub path: ModPath,\n }\n \n-// Diagnostic: inactive-code\n-//\n-// This diagnostic is shown for code with inactive `#[cfg]` attributes.\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct InactiveCode {\n-    pub file: HirFileId,\n-    pub node: SyntaxNodePtr,\n+    pub node: InFile<SyntaxNodePtr>,\n     pub cfg: CfgExpr,\n     pub opts: CfgOptions,\n }\n \n-impl Diagnostic for InactiveCode {\n-    fn code(&self) -> DiagnosticCode {\n-        DiagnosticCode(\"inactive-code\")\n-    }\n-    fn message(&self) -> String {\n-        let inactive = DnfExpr::new(self.cfg.clone()).why_inactive(&self.opts);\n-        let mut buf = \"code is inactive due to #[cfg] directives\".to_string();\n-\n-        if let Some(inactive) = inactive {\n-            format_to!(buf, \": {}\", inactive);\n-        }\n-\n-        buf\n-    }\n-    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile::new(self.file, self.node.clone())\n-    }\n-    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n-        self\n-    }\n-}\n-\n-// Diagnostic: unresolved-proc-macro\n-//\n-// This diagnostic is shown when a procedural macro can not be found. This usually means that\n-// procedural macro support is simply disabled (and hence is only a weak hint instead of an error),\n-// but can also indicate project setup problems.\n-//\n-// If you are seeing a lot of \"proc macro not expanded\" warnings, you can add this option to the\n-// `rust-analyzer.diagnostics.disabled` list to prevent them from showing. Alternatively you can\n-// enable support for procedural macros (see `rust-analyzer.procMacro.enable`).\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct UnresolvedProcMacro {\n-    pub file: HirFileId,\n-    pub node: SyntaxNodePtr,\n+    pub node: InFile<SyntaxNodePtr>,\n     /// If the diagnostic can be pinpointed more accurately than via `node`, this is the `TextRange`\n     /// to use instead.\n     pub precise_location: Option<TextRange>,\n     pub macro_name: Option<String>,\n }\n \n-impl Diagnostic for UnresolvedProcMacro {\n-    fn code(&self) -> DiagnosticCode {\n-        DiagnosticCode(\"unresolved-proc-macro\")\n-    }\n-\n-    fn message(&self) -> String {\n-        match &self.macro_name {\n-            Some(name) => format!(\"proc macro `{}` not expanded\", name),\n-            None => \"proc macro not expanded\".to_string(),\n-        }\n-    }\n-\n-    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile::new(self.file, self.node.clone())\n-    }\n-\n-    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n-        self\n-    }\n-}\n-\n-// Diagnostic: macro-error\n-//\n-// This diagnostic is shown for macro expansion errors.\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct MacroError {\n-    pub file: HirFileId,\n-    pub node: SyntaxNodePtr,\n+    pub node: InFile<SyntaxNodePtr>,\n     pub message: String,\n }\n \n-impl Diagnostic for MacroError {\n-    fn code(&self) -> DiagnosticCode {\n-        DiagnosticCode(\"macro-error\")\n-    }\n-    fn message(&self) -> String {\n-        self.message.clone()\n-    }\n-    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile::new(self.file, self.node.clone())\n-    }\n-    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n-        self\n-    }\n-    fn is_experimental(&self) -> bool {\n-        // Newly added and not very well-tested, might contain false positives.\n-        true\n-    }\n-}\n-\n #[derive(Debug)]\n pub struct UnimplementedBuiltinMacro {\n     pub file: HirFileId,"}, {"sha": "d891d0ec1cc850296ec81e450ac28e9640804e9b", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 38, "deletions": 39, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e", "patch": "@@ -506,20 +506,22 @@ impl Module {\n \n                 DefDiagnosticKind::UnconfiguredCode { ast, cfg, opts } => {\n                     let item = ast.to_node(db.upcast());\n-                    sink.push(InactiveCode {\n-                        file: ast.file_id,\n-                        node: AstPtr::new(&item).into(),\n-                        cfg: cfg.clone(),\n-                        opts: opts.clone(),\n-                    });\n+                    acc.push(\n+                        InactiveCode {\n+                            node: ast.with_value(AstPtr::new(&item).into()),\n+                            cfg: cfg.clone(),\n+                            opts: opts.clone(),\n+                        }\n+                        .into(),\n+                    );\n                 }\n \n                 DefDiagnosticKind::UnresolvedProcMacro { ast } => {\n                     let mut precise_location = None;\n-                    let (file, ast, name) = match ast {\n+                    let (node, name) = match ast {\n                         MacroCallKind::FnLike { ast_id, .. } => {\n                             let node = ast_id.to_node(db.upcast());\n-                            (ast_id.file_id, SyntaxNodePtr::from(AstPtr::new(&node)), None)\n+                            (ast_id.with_value(SyntaxNodePtr::from(AstPtr::new(&node))), None)\n                         }\n                         MacroCallKind::Derive { ast_id, derive_name, .. } => {\n                             let node = ast_id.to_node(db.upcast());\n@@ -552,8 +554,7 @@ impl Module {\n                             }\n \n                             (\n-                                ast_id.file_id,\n-                                SyntaxNodePtr::from(AstPtr::new(&node)),\n+                                ast_id.with_value(SyntaxNodePtr::from(AstPtr::new(&node))),\n                                 Some(derive_name.clone()),\n                             )\n                         }\n@@ -564,18 +565,14 @@ impl Module {\n                                     || panic!(\"cannot find attribute #{}\", invoc_attr_index),\n                                 );\n                             (\n-                                ast_id.file_id,\n-                                SyntaxNodePtr::from(AstPtr::new(&attr)),\n+                                ast_id.with_value(SyntaxNodePtr::from(AstPtr::new(&attr))),\n                                 Some(attr_name.clone()),\n                             )\n                         }\n                     };\n-                    sink.push(UnresolvedProcMacro {\n-                        file,\n-                        node: ast,\n-                        precise_location,\n-                        macro_name: name,\n-                    });\n+                    acc.push(\n+                        UnresolvedProcMacro { node, precise_location, macro_name: name }.into(),\n+                    );\n                 }\n \n                 DefDiagnosticKind::UnresolvedMacroCall { ast, path } => {\n@@ -590,19 +587,19 @@ impl Module {\n                 }\n \n                 DefDiagnosticKind::MacroError { ast, message } => {\n-                    let (file, ast) = match ast {\n+                    let node = match ast {\n                         MacroCallKind::FnLike { ast_id, .. } => {\n                             let node = ast_id.to_node(db.upcast());\n-                            (ast_id.file_id, SyntaxNodePtr::from(AstPtr::new(&node)))\n+                            ast_id.with_value(SyntaxNodePtr::from(AstPtr::new(&node)))\n                         }\n                         MacroCallKind::Derive { ast_id, .. }\n                         | MacroCallKind::Attr { ast_id, .. } => {\n                             // FIXME: point to the attribute instead, this creates very large diagnostics\n                             let node = ast_id.to_node(db.upcast());\n-                            (ast_id.file_id, SyntaxNodePtr::from(AstPtr::new(&node)))\n+                            ast_id.with_value(SyntaxNodePtr::from(AstPtr::new(&node)))\n                         }\n                     };\n-                    sink.push(MacroError { file, node: ast, message: message.clone() });\n+                    acc.push(MacroError { node, message: message.clone() }.into());\n                 }\n \n                 DefDiagnosticKind::UnimplementedBuiltinMacro { ast } => {\n@@ -1045,23 +1042,25 @@ impl Function {\n         let source_map = db.body_with_source_map(self.id.into()).1;\n         for diag in source_map.diagnostics() {\n             match diag {\n-                BodyDiagnostic::InactiveCode { node, cfg, opts } => sink.push(InactiveCode {\n-                    file: node.file_id,\n-                    node: node.value.clone(),\n-                    cfg: cfg.clone(),\n-                    opts: opts.clone(),\n-                }),\n-                BodyDiagnostic::MacroError { node, message } => sink.push(MacroError {\n-                    file: node.file_id,\n-                    node: node.value.clone().into(),\n-                    message: message.to_string(),\n-                }),\n-                BodyDiagnostic::UnresolvedProcMacro { node } => sink.push(UnresolvedProcMacro {\n-                    file: node.file_id,\n-                    node: node.value.clone().into(),\n-                    precise_location: None,\n-                    macro_name: None,\n-                }),\n+                BodyDiagnostic::InactiveCode { node, cfg, opts } => acc.push(\n+                    InactiveCode { node: node.clone(), cfg: cfg.clone(), opts: opts.clone() }\n+                        .into(),\n+                ),\n+                BodyDiagnostic::MacroError { node, message } => acc.push(\n+                    MacroError {\n+                        node: node.clone().map(|it| it.into()),\n+                        message: message.to_string(),\n+                    }\n+                    .into(),\n+                ),\n+                BodyDiagnostic::UnresolvedProcMacro { node } => acc.push(\n+                    UnresolvedProcMacro {\n+                        node: node.clone().map(|it| it.into()),\n+                        precise_location: None,\n+                        macro_name: None,\n+                    }\n+                    .into(),\n+                ),\n                 BodyDiagnostic::UnresolvedMacroCall { node, path } => acc.push(\n                     UnresolvedMacroCall { macro_call: node.clone(), path: path.clone() }.into(),\n                 ),"}, {"sha": "27d837d47f4741e060078318eb885335d15a3a78", "filename": "crates/hir_def/src/body/tests.rs", "status": "modified", "additions": 5, "deletions": 144, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs?ref=7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e", "patch": "@@ -3,7 +3,7 @@ mod block;\n use base_db::{fixture::WithFixture, SourceDatabase};\n use expect_test::Expect;\n \n-use crate::{test_db::TestDB, ModuleDefId};\n+use crate::ModuleDefId;\n \n use super::*;\n \n@@ -28,11 +28,6 @@ fn lower(ra_fixture: &str) -> Arc<Body> {\n     db.body(fn_def.unwrap().into())\n }\n \n-fn check_diagnostics(ra_fixture: &str) {\n-    let db: TestDB = TestDB::with_files(ra_fixture);\n-    db.check_diagnostics();\n-}\n-\n fn block_def_map_at(ra_fixture: &str) -> String {\n     let (db, position) = crate::test_db::TestDB::with_position(ra_fixture);\n \n@@ -57,23 +52,23 @@ fn check_at(ra_fixture: &str, expect: Expect) {\n fn your_stack_belongs_to_me() {\n     cov_mark::check!(your_stack_belongs_to_me);\n     lower(\n-        \"\n+        r#\"\n macro_rules! n_nuple {\n     ($e:tt) => ();\n     ($($rest:tt)*) => {{\n         (n_nuple!($($rest)*)None,)\n     }};\n }\n fn main() { n_nuple!(1,2,3); }\n-\",\n+\"#,\n     );\n }\n \n #[test]\n fn macro_resolve() {\n     // Regression test for a path resolution bug introduced with inner item handling.\n     lower(\n-        r\"\n+        r#\"\n macro_rules! vec {\n     () => { () };\n     ($elem:expr; $n:expr) => { () };\n@@ -84,140 +79,6 @@ mod m {\n         let _ = vec![FileSet::default(); self.len()];\n     }\n }\n-      \",\n-    );\n-}\n-\n-#[test]\n-fn cfg_diagnostics() {\n-    check_diagnostics(\n-        r\"\n-fn f() {\n-    // The three g\u0336e\u0336n\u0336d\u0336e\u0336r\u0336s\u0336 statements:\n-\n-    #[cfg(a)] fn f() {}  // Item statement\n-  //^^^^^^^^^^^^^^^^^^^ InactiveCode\n-    #[cfg(a)] {}         // Expression statement\n-  //^^^^^^^^^^^^ InactiveCode\n-    #[cfg(a)] let x = 0; // let statement\n-  //^^^^^^^^^^^^^^^^^^^^ InactiveCode\n-\n-    abc(#[cfg(a)] 0);\n-      //^^^^^^^^^^^ InactiveCode\n-    let x = Struct {\n-        #[cfg(a)] f: 0,\n-      //^^^^^^^^^^^^^^ InactiveCode\n-    };\n-    match () {\n-        () => (),\n-        #[cfg(a)] () => (),\n-      //^^^^^^^^^^^^^^^^^^ InactiveCode\n-    }\n-\n-    #[cfg(a)] 0          // Trailing expression of block\n-  //^^^^^^^^^^^ InactiveCode\n-}\n-    \",\n-    );\n-}\n-\n-#[test]\n-fn macro_diag_builtin() {\n-    check_diagnostics(\n-        r#\"\n-#[rustc_builtin_macro]\n-macro_rules! env {}\n-\n-#[rustc_builtin_macro]\n-macro_rules! include {}\n-\n-#[rustc_builtin_macro]\n-macro_rules! compile_error {}\n-\n-#[rustc_builtin_macro]\n-macro_rules! format_args {\n-    () => {}\n-}\n-\n-fn f() {\n-    // Test a handful of built-in (eager) macros:\n-\n-    include!(invalid);\n-  //^^^^^^^^^^^^^^^^^ could not convert tokens\n-    include!(\"does not exist\");\n-  //^^^^^^^^^^^^^^^^^^^^^^^^^^ failed to load file `does not exist`\n-\n-    env!(invalid);\n-  //^^^^^^^^^^^^^ could not convert tokens\n-\n-    env!(\"OUT_DIR\");\n-  //^^^^^^^^^^^^^^^ `OUT_DIR` not set, enable \"run build scripts\" to fix\n-\n-    compile_error!(\"compile_error works\");\n-  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ compile_error works\n-\n-    // Lazy:\n-\n-    format_args!();\n-  //^^^^^^^^^^^^^^ no rule matches input tokens\n-}\n-        \"#,\n-    );\n-}\n-\n-#[test]\n-fn macro_rules_diag() {\n-    check_diagnostics(\n-        r#\"\n-macro_rules! m {\n-    () => {};\n-}\n-fn f() {\n-    m!();\n-\n-    m!(hi);\n-  //^^^^^^ leftover tokens\n-}\n-      \"#,\n+\"#,\n     );\n }\n-\n-#[test]\n-fn unresolved_macro_diag() {\n-    check_diagnostics(\n-        r#\"\n-fn f() {\n-    m!();\n-  //^^^^ UnresolvedMacroCall\n-}\n-      \"#,\n-    );\n-}\n-\n-#[test]\n-fn dollar_crate_in_builtin_macro() {\n-    check_diagnostics(\n-        r#\"\n-#[macro_export]\n-#[rustc_builtin_macro]\n-macro_rules! format_args {}\n-\n-#[macro_export]\n-macro_rules! arg {\n-    () => {}\n-}\n-\n-#[macro_export]\n-macro_rules! outer {\n-    () => {\n-        $crate::format_args!( \"\", $crate::arg!(1) )\n-    };\n-}\n-\n-fn f() {\n-    outer!();\n-  //^^^^^^^^ leftover tokens\n-}\n-        \"#,\n-    )\n-}"}, {"sha": "cf43f2a9652a56dd52b2cb1ce1adfc592cc8df3e", "filename": "crates/hir_def/src/nameres/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e", "patch": "@@ -2,7 +2,6 @@ mod globs;\n mod incremental;\n mod macros;\n mod mod_resolution;\n-mod diagnostics;\n mod primitives;\n \n use std::sync::Arc;"}, {"sha": "5a088b6e582008a38ee9e07401b0942bb9ab0fd9", "filename": "crates/hir_def/src/nameres/tests/diagnostics.rs", "status": "removed", "additions": 0, "deletions": 118, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/3d8df2aef87bca7ec3f0994d799462f08d1ad449/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d8df2aef87bca7ec3f0994d799462f08d1ad449/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs?ref=3d8df2aef87bca7ec3f0994d799462f08d1ad449", "patch": "@@ -1,118 +0,0 @@\n-use base_db::fixture::WithFixture;\n-\n-use crate::test_db::TestDB;\n-\n-fn check_diagnostics(ra_fixture: &str) {\n-    let db: TestDB = TestDB::with_files(ra_fixture);\n-    db.check_diagnostics();\n-}\n-\n-fn check_no_diagnostics(ra_fixture: &str) {\n-    let db: TestDB = TestDB::with_files(ra_fixture);\n-    db.check_no_diagnostics();\n-}\n-\n-#[test]\n-fn inactive_item() {\n-    // Additional tests in `cfg` crate. This only tests disabled cfgs.\n-\n-    check_diagnostics(\n-        r#\"\n-        //- /lib.rs\n-          #[cfg(no)] pub fn f() {}\n-        //^^^^^^^^^^^^^^^^^^^^^^^^ UnconfiguredCode\n-\n-          #[cfg(no)] #[cfg(no2)] mod m;\n-        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UnconfiguredCode\n-\n-          #[cfg(all(not(a), b))] enum E {}\n-        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UnconfiguredCode\n-\n-          #[cfg(feature = \"std\")] use std;\n-        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UnconfiguredCode\n-        \"#,\n-    );\n-}\n-\n-/// Tests that `cfg` attributes behind `cfg_attr` is handled properly.\n-#[test]\n-fn inactive_via_cfg_attr() {\n-    cov_mark::check!(cfg_attr_active);\n-    check_diagnostics(\n-        r#\"\n-        //- /lib.rs\n-          #[cfg_attr(not(never), cfg(no))] fn f() {}\n-        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UnconfiguredCode\n-\n-          #[cfg_attr(not(never), cfg(not(no)))] fn f() {}\n-\n-          #[cfg_attr(never, cfg(no))] fn g() {}\n-\n-          #[cfg_attr(not(never), inline, cfg(no))] fn h() {}\n-        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UnconfiguredCode\n-        \"#,\n-    );\n-}\n-\n-#[test]\n-fn builtin_macro_fails_expansion() {\n-    check_diagnostics(\n-        r#\"\n-        //- /lib.rs\n-          #[rustc_builtin_macro]\n-          macro_rules! include { () => {} }\n-\n-          include!(\"doesntexist\");\n-        //^^^^^^^^^^^^^^^^^^^^^^^^ failed to load file `doesntexist`\n-        \"#,\n-    );\n-}\n-\n-#[test]\n-fn include_macro_should_allow_empty_content() {\n-    check_no_diagnostics(\n-        r#\"\n-        //- /lib.rs\n-          #[rustc_builtin_macro]\n-          macro_rules! include { () => {} }\n-\n-          include!(\"bar.rs\");\n-        //- /bar.rs\n-          // empty\n-        \"#,\n-    );\n-}\n-\n-#[test]\n-fn good_out_dir_diagnostic() {\n-    check_diagnostics(\n-        r#\"\n-        #[rustc_builtin_macro]\n-        macro_rules! include { () => {} }\n-        #[rustc_builtin_macro]\n-        macro_rules! env { () => {} }\n-        #[rustc_builtin_macro]\n-        macro_rules! concat { () => {} }\n-\n-        include!(concat!(env!(\"OUT_DIR\"), \"/out.rs\"));\n-      //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `OUT_DIR` not set, enable \"run build scripts\" to fix\n-        \"#,\n-    );\n-}\n-\n-#[test]\n-fn register_attr_and_tool() {\n-    cov_mark::check!(register_attr);\n-    cov_mark::check!(register_tool);\n-    check_no_diagnostics(\n-        r#\"\n-#![register_tool(tool)]\n-#![register_attr(attr)]\n-\n-#[tool::path]\n-#[attr]\n-struct S;\n-        \"#,\n-    );\n-    // NB: we don't currently emit diagnostics here\n-}"}, {"sha": "2635b556e652a0cf5db12ecb835acc3abfb40b78", "filename": "crates/hir_def/src/test_db.rs", "status": "modified", "additions": 4, "deletions": 148, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e/crates%2Fhir_def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e/crates%2Fhir_def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftest_db.rs?ref=7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e", "patch": "@@ -6,19 +6,16 @@ use std::{\n };\n \n use base_db::{\n-    salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, FilePosition, FileRange, Upcast,\n+    salsa, AnchoredPath, CrateId, FileId, FileLoader, FileLoaderDelegate, FilePosition,\n+    SourceDatabase, Upcast,\n };\n-use base_db::{AnchoredPath, SourceDatabase};\n use hir_expand::{db::AstDatabase, InFile};\n-use rustc_hash::FxHashMap;\n use rustc_hash::FxHashSet;\n-use syntax::{algo, ast, AstNode, SyntaxNode, SyntaxNodePtr, TextRange, TextSize};\n-use test_utils::extract_annotations;\n+use syntax::{algo, ast, AstNode};\n \n use crate::{\n-    body::BodyDiagnostic,\n     db::DefDatabase,\n-    nameres::{diagnostics::DefDiagnosticKind, DefMap, ModuleSource},\n+    nameres::{DefMap, ModuleSource},\n     src::HasSource,\n     LocalModuleId, Lookup, ModuleDefId, ModuleId,\n };\n@@ -245,145 +242,4 @@ impl TestDB {\n             })\n             .collect()\n     }\n-\n-    pub(crate) fn extract_annotations(&self) -> FxHashMap<FileId, Vec<(TextRange, String)>> {\n-        let mut files = Vec::new();\n-        let crate_graph = self.crate_graph();\n-        for krate in crate_graph.iter() {\n-            let crate_def_map = self.crate_def_map(krate);\n-            for (module_id, _) in crate_def_map.modules() {\n-                let file_id = crate_def_map[module_id].origin.file_id();\n-                files.extend(file_id)\n-            }\n-        }\n-        assert!(!files.is_empty());\n-        files\n-            .into_iter()\n-            .filter_map(|file_id| {\n-                let text = self.file_text(file_id);\n-                let annotations = extract_annotations(&text);\n-                if annotations.is_empty() {\n-                    return None;\n-                }\n-                Some((file_id, annotations))\n-            })\n-            .collect()\n-    }\n-\n-    pub(crate) fn diagnostics(&self, cb: &mut dyn FnMut(FileRange, String)) {\n-        let crate_graph = self.crate_graph();\n-        for krate in crate_graph.iter() {\n-            let crate_def_map = self.crate_def_map(krate);\n-\n-            for diag in crate_def_map.diagnostics() {\n-                let (node, message): (InFile<SyntaxNode>, &str) = match &diag.kind {\n-                    DefDiagnosticKind::UnresolvedModule { ast, .. } => {\n-                        let node = ast.to_node(self.upcast());\n-                        (InFile::new(ast.file_id, node.syntax().clone()), \"UnresolvedModule\")\n-                    }\n-                    DefDiagnosticKind::UnresolvedExternCrate { ast, .. } => {\n-                        let node = ast.to_node(self.upcast());\n-                        (InFile::new(ast.file_id, node.syntax().clone()), \"UnresolvedExternCrate\")\n-                    }\n-                    DefDiagnosticKind::UnresolvedImport { id, .. } => {\n-                        let item_tree = id.item_tree(self.upcast());\n-                        let import = &item_tree[id.value];\n-                        let node = InFile::new(id.file_id(), import.ast_id).to_node(self.upcast());\n-                        (InFile::new(id.file_id(), node.syntax().clone()), \"UnresolvedImport\")\n-                    }\n-                    DefDiagnosticKind::UnconfiguredCode { ast, .. } => {\n-                        let node = ast.to_node(self.upcast());\n-                        (InFile::new(ast.file_id, node.syntax().clone()), \"UnconfiguredCode\")\n-                    }\n-                    DefDiagnosticKind::UnresolvedProcMacro { ast, .. } => {\n-                        (ast.to_node(self.upcast()), \"UnresolvedProcMacro\")\n-                    }\n-                    DefDiagnosticKind::UnresolvedMacroCall { ast, .. } => {\n-                        let node = ast.to_node(self.upcast());\n-                        (InFile::new(ast.file_id, node.syntax().clone()), \"UnresolvedMacroCall\")\n-                    }\n-                    DefDiagnosticKind::MacroError { ast, message } => {\n-                        (ast.to_node(self.upcast()), message.as_str())\n-                    }\n-                    DefDiagnosticKind::UnimplementedBuiltinMacro { ast } => {\n-                        let node = ast.to_node(self.upcast());\n-                        (\n-                            InFile::new(ast.file_id, node.syntax().clone()),\n-                            \"UnimplementedBuiltinMacro\",\n-                        )\n-                    }\n-                };\n-\n-                let frange = node.as_ref().original_file_range(self);\n-                cb(frange, message.to_string())\n-            }\n-\n-            for (_module_id, module) in crate_def_map.modules() {\n-                for decl in module.scope.declarations() {\n-                    if let ModuleDefId::FunctionId(it) = decl {\n-                        let source_map = self.body_with_source_map(it.into()).1;\n-                        for diag in source_map.diagnostics() {\n-                            let (ptr, message): (InFile<SyntaxNodePtr>, &str) = match diag {\n-                                BodyDiagnostic::InactiveCode { node, .. } => {\n-                                    (node.clone().map(|it| it), \"InactiveCode\")\n-                                }\n-                                BodyDiagnostic::MacroError { node, message } => {\n-                                    (node.clone().map(|it| it.into()), message.as_str())\n-                                }\n-                                BodyDiagnostic::UnresolvedProcMacro { node } => {\n-                                    (node.clone().map(|it| it.into()), \"UnresolvedProcMacro\")\n-                                }\n-                                BodyDiagnostic::UnresolvedMacroCall { node, .. } => {\n-                                    (node.clone().map(|it| it.into()), \"UnresolvedMacroCall\")\n-                                }\n-                            };\n-\n-                            let root = self.parse_or_expand(ptr.file_id).unwrap();\n-                            let node = ptr.map(|ptr| ptr.to_node(&root));\n-                            let frange = node.as_ref().original_file_range(self);\n-                            cb(frange, message.to_string())\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    pub(crate) fn check_diagnostics(&self) {\n-        let db: &TestDB = self;\n-        let annotations = db.extract_annotations();\n-        assert!(!annotations.is_empty());\n-\n-        let mut actual: FxHashMap<FileId, Vec<(TextRange, String)>> = FxHashMap::default();\n-        db.diagnostics(&mut |frange, message| {\n-            actual.entry(frange.file_id).or_default().push((frange.range, message));\n-        });\n-\n-        for (file_id, diags) in actual.iter_mut() {\n-            diags.sort_by_key(|it| it.0.start());\n-            let text = db.file_text(*file_id);\n-            // For multiline spans, place them on line start\n-            for (range, content) in diags {\n-                if text[*range].contains('\\n') {\n-                    *range = TextRange::new(range.start(), range.start() + TextSize::from(1));\n-                    *content = format!(\"... {}\", content);\n-                }\n-            }\n-        }\n-\n-        assert_eq!(annotations, actual);\n-    }\n-\n-    pub(crate) fn check_no_diagnostics(&self) {\n-        let db: &TestDB = self;\n-        let annotations = db.extract_annotations();\n-        assert!(annotations.is_empty());\n-\n-        let mut has_diagnostics = false;\n-        db.diagnostics(&mut |_, _| {\n-            has_diagnostics = true;\n-        });\n-\n-        assert!(!has_diagnostics);\n-    }\n }"}, {"sha": "c257ea8e717a393508b1f9d9d5233beda334bb0c", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 27, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e", "patch": "@@ -8,6 +8,9 @@ mod unresolved_module;\n mod unresolved_extern_crate;\n mod unresolved_import;\n mod unresolved_macro_call;\n+mod unresolved_proc_macro;\n+mod macro_error;\n+mod inactive_code;\n mod missing_fields;\n \n mod fixes;\n@@ -67,6 +70,11 @@ impl Diagnostic {\n         self\n     }\n \n+    fn severity(mut self, severity: Severity) -> Diagnostic {\n+        self.severity = severity;\n+        self\n+    }\n+\n     fn error(range: TextRange, message: String) -> Self {\n         Self {\n             message,\n@@ -164,22 +172,6 @@ pub(crate) fn diagnostics(\n         .on::<hir::diagnostics::ReplaceFilterMapNextWithFindMap, _>(|d| {\n             res.borrow_mut().push(warning_with_fix(d, &sema, resolve));\n         })\n-        .on::<hir::diagnostics::InactiveCode, _>(|d| {\n-            // If there's inactive code somewhere in a macro, don't propagate to the call-site.\n-            if d.display_source().file_id.expansion_info(db).is_some() {\n-                return;\n-            }\n-\n-            // Override severity and mark as unused.\n-            res.borrow_mut().push(\n-                Diagnostic::hint(\n-                    sema.diagnostics_display_range(d.display_source()).range,\n-                    d.message(),\n-                )\n-                .with_unused(true)\n-                .with_code(Some(d.code())),\n-            );\n-        })\n         .on::<UnlinkedFile, _>(|d| {\n             // Limit diagnostic to the first few characters in the file. This matches how VS Code\n             // renders it with the full span, but on other editors, and is less invasive.\n@@ -193,16 +185,6 @@ pub(crate) fn diagnostics(\n                     .with_code(Some(d.code())),\n             );\n         })\n-        .on::<hir::diagnostics::UnresolvedProcMacro, _>(|d| {\n-            // Use more accurate position if available.\n-            let display_range = d\n-                .precise_location\n-                .unwrap_or_else(|| sema.diagnostics_display_range(d.display_source()).range);\n-\n-            // FIXME: it would be nice to tell the user whether proc macros are currently disabled\n-            res.borrow_mut()\n-                .push(Diagnostic::hint(display_range, d.message()).with_code(Some(d.code())));\n-        })\n         .on::<hir::diagnostics::UnimplementedBuiltinMacro, _>(|d| {\n             let display_range = sema.diagnostics_display_range(d.display_source()).range;\n             res.borrow_mut()\n@@ -246,7 +228,14 @@ pub(crate) fn diagnostics(\n             AnyDiagnostic::UnresolvedExternCrate(d) => unresolved_extern_crate::unresolved_extern_crate(&ctx, &d),\n             AnyDiagnostic::UnresolvedImport(d) => unresolved_import::unresolved_import(&ctx, &d),\n             AnyDiagnostic::UnresolvedMacroCall(d) => unresolved_macro_call::unresolved_macro_call(&ctx, &d),\n+            AnyDiagnostic::UnresolvedProcMacro(d) => unresolved_proc_macro::unresolved_proc_macro(&ctx, &d),\n             AnyDiagnostic::MissingFields(d) => missing_fields::missing_fields(&ctx, &d),\n+            AnyDiagnostic::MacroError(d) => macro_error::macro_error(&ctx, &d),\n+\n+            AnyDiagnostic::InactiveCode(d) => match inactive_code::inactive_code(&ctx, &d) {\n+                Some(it) => it,\n+                None => continue,\n+            }\n         };\n         if let Some(code) = d.code {\n             if ctx.config.disabled.contains(code.as_str()) {\n@@ -451,7 +440,13 @@ mod tests {\n         expect.assert_debug_eq(&diagnostics)\n     }\n \n+    #[track_caller]\n     pub(crate) fn check_diagnostics(ra_fixture: &str) {\n+        check_diagnostics_with_inactive_code(ra_fixture, false)\n+    }\n+\n+    #[track_caller]\n+    pub(crate) fn check_diagnostics_with_inactive_code(ra_fixture: &str, with_inactive_code: bool) {\n         let (analysis, file_id) = fixture::file(ra_fixture);\n         let diagnostics = analysis\n             .diagnostics(&DiagnosticsConfig::default(), AssistResolveStrategy::All, file_id)\n@@ -460,7 +455,7 @@ mod tests {\n         let expected = extract_annotations(&*analysis.file_text(file_id).unwrap());\n         let mut actual = diagnostics\n             .into_iter()\n-            .filter(|d| d.code != Some(DiagnosticCode(\"inactive-code\")))\n+            .filter(|d| d.code != Some(DiagnosticCode(\"inactive-code\")) || with_inactive_code)\n             .map(|d| (d.range, d.message))\n             .collect::<Vec<_>>();\n         actual.sort_by_key(|(range, _)| range.start());"}, {"sha": "afe333204f0b3ef7675b62c15c34e4932cc3facf", "filename": "crates/ide/src/diagnostics/inactive_code.rs", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e/crates%2Fide%2Fsrc%2Fdiagnostics%2Finactive_code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e/crates%2Fide%2Fsrc%2Fdiagnostics%2Finactive_code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Finactive_code.rs?ref=7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e", "patch": "@@ -0,0 +1,117 @@\n+use cfg::DnfExpr;\n+use stdx::format_to;\n+\n+use crate::{\n+    diagnostics::{Diagnostic, DiagnosticsContext},\n+    Severity,\n+};\n+\n+// Diagnostic: inactive-code\n+//\n+// This diagnostic is shown for code with inactive `#[cfg]` attributes.\n+pub(super) fn inactive_code(\n+    ctx: &DiagnosticsContext<'_>,\n+    d: &hir::InactiveCode,\n+) -> Option<Diagnostic> {\n+    // If there's inactive code somewhere in a macro, don't propagate to the call-site.\n+    if d.node.file_id.expansion_info(ctx.sema.db).is_some() {\n+        return None;\n+    }\n+\n+    let inactive = DnfExpr::new(d.cfg.clone()).why_inactive(&d.opts);\n+    let mut message = \"code is inactive due to #[cfg] directives\".to_string();\n+\n+    if let Some(inactive) = inactive {\n+        format_to!(message, \": {}\", inactive);\n+    }\n+\n+    let res = Diagnostic::new(\n+        \"inactive-code\",\n+        message,\n+        ctx.sema.diagnostics_display_range(d.node.clone()).range,\n+    )\n+    .severity(Severity::WeakWarning)\n+    .with_unused(true);\n+    Some(res)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::diagnostics::tests::check_diagnostics_with_inactive_code;\n+\n+    #[test]\n+    fn cfg_diagnostics() {\n+        check_diagnostics_with_inactive_code(\n+            r#\"\n+fn f() {\n+    // The three g\u0336e\u0336n\u0336d\u0336e\u0336r\u0336s\u0336 statements:\n+\n+    #[cfg(a)] fn f() {}  // Item statement\n+  //^^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: a is disabled\n+    #[cfg(a)] {}         // Expression statement\n+  //^^^^^^^^^^^^ code is inactive due to #[cfg] directives: a is disabled\n+    #[cfg(a)] let x = 0; // let statement\n+  //^^^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: a is disabled\n+\n+    abc(#[cfg(a)] 0);\n+      //^^^^^^^^^^^ code is inactive due to #[cfg] directives: a is disabled\n+    let x = Struct {\n+        #[cfg(a)] f: 0,\n+      //^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: a is disabled\n+    };\n+    match () {\n+        () => (),\n+        #[cfg(a)] () => (),\n+      //^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: a is disabled\n+    }\n+\n+    #[cfg(a)] 0          // Trailing expression of block\n+  //^^^^^^^^^^^ code is inactive due to #[cfg] directives: a is disabled\n+}\n+        \"#,\n+            true,\n+        );\n+    }\n+\n+    #[test]\n+    fn inactive_item() {\n+        // Additional tests in `cfg` crate. This only tests disabled cfgs.\n+\n+        check_diagnostics_with_inactive_code(\n+            r#\"\n+    #[cfg(no)] pub fn f() {}\n+  //^^^^^^^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: no is disabled\n+\n+    #[cfg(no)] #[cfg(no2)] mod m;\n+  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: no and no2 are disabled\n+\n+    #[cfg(all(not(a), b))] enum E {}\n+  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: b is disabled\n+\n+    #[cfg(feature = \"std\")] use std;\n+  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: feature = \"std\" is disabled\n+\"#,\n+            true,\n+        );\n+    }\n+\n+    /// Tests that `cfg` attributes behind `cfg_attr` is handled properly.\n+    #[test]\n+    fn inactive_via_cfg_attr() {\n+        cov_mark::check!(cfg_attr_active);\n+        check_diagnostics_with_inactive_code(\n+            r#\"\n+    #[cfg_attr(not(never), cfg(no))] fn f() {}\n+  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: no is disabled\n+\n+    #[cfg_attr(not(never), cfg(not(no)))] fn f() {}\n+\n+    #[cfg_attr(never, cfg(no))] fn g() {}\n+\n+    #[cfg_attr(not(never), inline, cfg(no))] fn h() {}\n+  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ code is inactive due to #[cfg] directives: no is disabled\n+\"#,\n+            true,\n+        );\n+    }\n+}"}, {"sha": "8cc8cfb48e9139862e4aca112c0abfbcd1415ba8", "filename": "crates/ide/src/diagnostics/macro_error.rs", "status": "added", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmacro_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmacro_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmacro_error.rs?ref=7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e", "patch": "@@ -0,0 +1,163 @@\n+use crate::diagnostics::{Diagnostic, DiagnosticsContext};\n+\n+// Diagnostic: macro-error\n+//\n+// This diagnostic is shown for macro expansion errors.\n+pub(super) fn macro_error(ctx: &DiagnosticsContext<'_>, d: &hir::MacroError) -> Diagnostic {\n+    Diagnostic::new(\n+        \"macro-error\",\n+        d.message.clone(),\n+        ctx.sema.diagnostics_display_range(d.node.clone()).range,\n+    )\n+    .experimental()\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::diagnostics::tests::{check_diagnostics, check_no_diagnostics};\n+\n+    #[test]\n+    fn builtin_macro_fails_expansion() {\n+        check_diagnostics(\n+            r#\"\n+#[rustc_builtin_macro]\n+macro_rules! include { () => {} }\n+\n+  include!(\"doesntexist\");\n+//^^^^^^^^^^^^^^^^^^^^^^^^ failed to load file `doesntexist`\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn include_macro_should_allow_empty_content() {\n+        check_diagnostics(\n+            r#\"\n+//- /lib.rs\n+#[rustc_builtin_macro]\n+macro_rules! include { () => {} }\n+\n+include!(\"foo/bar.rs\");\n+//- /foo/bar.rs\n+// empty\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn good_out_dir_diagnostic() {\n+        check_diagnostics(\n+            r#\"\n+#[rustc_builtin_macro]\n+macro_rules! include { () => {} }\n+#[rustc_builtin_macro]\n+macro_rules! env { () => {} }\n+#[rustc_builtin_macro]\n+macro_rules! concat { () => {} }\n+\n+  include!(concat!(env!(\"OUT_DIR\"), \"/out.rs\"));\n+//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `OUT_DIR` not set, enable \"run build scripts\" to fix\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn register_attr_and_tool() {\n+        cov_mark::check!(register_attr);\n+        cov_mark::check!(register_tool);\n+        check_no_diagnostics(\n+            r#\"\n+#![register_tool(tool)]\n+#![register_attr(attr)]\n+\n+#[tool::path]\n+#[attr]\n+struct S;\n+\"#,\n+        );\n+        // NB: we don't currently emit diagnostics here\n+    }\n+\n+    #[test]\n+    fn macro_diag_builtin() {\n+        check_diagnostics(\n+            r#\"\n+#[rustc_builtin_macro]\n+macro_rules! env {}\n+\n+#[rustc_builtin_macro]\n+macro_rules! include {}\n+\n+#[rustc_builtin_macro]\n+macro_rules! compile_error {}\n+\n+#[rustc_builtin_macro]\n+macro_rules! format_args { () => {} }\n+\n+fn main() {\n+    // Test a handful of built-in (eager) macros:\n+\n+    include!(invalid);\n+  //^^^^^^^^^^^^^^^^^ could not convert tokens\n+    include!(\"does not exist\");\n+  //^^^^^^^^^^^^^^^^^^^^^^^^^^ failed to load file `does not exist`\n+\n+    env!(invalid);\n+  //^^^^^^^^^^^^^ could not convert tokens\n+\n+    env!(\"OUT_DIR\");\n+  //^^^^^^^^^^^^^^^ `OUT_DIR` not set, enable \"run build scripts\" to fix\n+\n+    compile_error!(\"compile_error works\");\n+  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ compile_error works\n+\n+    // Lazy:\n+\n+    format_args!();\n+  //^^^^^^^^^^^^^^ no rule matches input tokens\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn macro_rules_diag() {\n+        check_diagnostics(\n+            r#\"\n+macro_rules! m {\n+    () => {};\n+}\n+fn f() {\n+    m!();\n+\n+    m!(hi);\n+  //^^^^^^ leftover tokens\n+}\n+      \"#,\n+        );\n+    }\n+    #[test]\n+    fn dollar_crate_in_builtin_macro() {\n+        check_diagnostics(\n+            r#\"\n+#[macro_export]\n+#[rustc_builtin_macro]\n+macro_rules! format_args {}\n+\n+#[macro_export]\n+macro_rules! arg { () => {} }\n+\n+#[macro_export]\n+macro_rules! outer {\n+    () => {\n+        $crate::format_args!( \"\", $crate::arg!(1) )\n+    };\n+}\n+\n+fn f() {\n+    outer!();\n+} //^^^^^^^^ leftover tokens\n+\"#,\n+        )\n+    }\n+}"}, {"sha": "15b6a27308d871a2aa2c35826a3f6269d828d0f9", "filename": "crates/ide/src/diagnostics/unresolved_macro_call.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_macro_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_macro_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_macro_call.rs?ref=7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e", "patch": "@@ -34,6 +34,18 @@ pub(super) fn unresolved_macro_call(\n mod tests {\n     use crate::diagnostics::tests::check_diagnostics;\n \n+    #[test]\n+    fn unresolved_macro_diag() {\n+        check_diagnostics(\n+            r#\"\n+fn f() {\n+    m!();\n+} //^ unresolved macro `m!`\n+\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_unresolved_macro_range() {\n         check_diagnostics("}, {"sha": "3dc6ab451e0ecc25f66f82d28464da4f917f758b", "filename": "crates/ide/src/diagnostics/unresolved_proc_macro.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Funresolved_proc_macro.rs?ref=7bff76d8ae1e8c3fbada1ade9ccf5111a1c0547e", "patch": "@@ -0,0 +1,30 @@\n+use crate::{\n+    diagnostics::{Diagnostic, DiagnosticsContext},\n+    Severity,\n+};\n+\n+// Diagnostic: unresolved-proc-macro\n+//\n+// This diagnostic is shown when a procedural macro can not be found. This usually means that\n+// procedural macro support is simply disabled (and hence is only a weak hint instead of an error),\n+// but can also indicate project setup problems.\n+//\n+// If you are seeing a lot of \"proc macro not expanded\" warnings, you can add this option to the\n+// `rust-analyzer.diagnostics.disabled` list to prevent them from showing. Alternatively you can\n+// enable support for procedural macros (see `rust-analyzer.procMacro.enable`).\n+pub(super) fn unresolved_proc_macro(\n+    ctx: &DiagnosticsContext<'_>,\n+    d: &hir::UnresolvedProcMacro,\n+) -> Diagnostic {\n+    // Use more accurate position if available.\n+    let display_range = d\n+        .precise_location\n+        .unwrap_or_else(|| ctx.sema.diagnostics_display_range(d.node.clone()).range);\n+    // FIXME: it would be nice to tell the user whether proc macros are currently disabled\n+    let message = match &d.macro_name {\n+        Some(name) => format!(\"proc macro `{}` not expanded\", name),\n+        None => \"proc macro not expanded\".to_string(),\n+    };\n+\n+    Diagnostic::new(\"unresolved-proc-macro\", message, display_range).severity(Severity::WeakWarning)\n+}"}]}