{"sha": "e240dab0c86f023e06e1fc2249eff10054298b09", "node_id": "C_kwDOAAsO6NoAKGUyNDBkYWIwYzg2ZjAyM2UwNmUxZmMyMjQ5ZWZmMTAwNTQyOThiMDk", "commit": {"author": {"name": "Nicky Lim", "email": "nickylim.p@gmail.com", "date": "2023-06-02T08:59:10Z"}, "committer": {"name": "Nicky Lim", "email": "nickylim.p@gmail.com", "date": "2023-06-11T10:06:34Z"}, "message": "Add `item_template` macro", "tree": {"sha": "d6025732501817eb9555d7cc7d1c9187032f02a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6025732501817eb9555d7cc7d1c9187032f02a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e240dab0c86f023e06e1fc2249eff10054298b09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e240dab0c86f023e06e1fc2249eff10054298b09", "html_url": "https://github.com/rust-lang/rust/commit/e240dab0c86f023e06e1fc2249eff10054298b09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e240dab0c86f023e06e1fc2249eff10054298b09/comments", "author": {"login": "nicklimmm", "id": 65026286, "node_id": "MDQ6VXNlcjY1MDI2Mjg2", "avatar_url": "https://avatars.githubusercontent.com/u/65026286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicklimmm", "html_url": "https://github.com/nicklimmm", "followers_url": "https://api.github.com/users/nicklimmm/followers", "following_url": "https://api.github.com/users/nicklimmm/following{/other_user}", "gists_url": "https://api.github.com/users/nicklimmm/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicklimmm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicklimmm/subscriptions", "organizations_url": "https://api.github.com/users/nicklimmm/orgs", "repos_url": "https://api.github.com/users/nicklimmm/repos", "events_url": "https://api.github.com/users/nicklimmm/events{/privacy}", "received_events_url": "https://api.github.com/users/nicklimmm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nicklimmm", "id": 65026286, "node_id": "MDQ6VXNlcjY1MDI2Mjg2", "avatar_url": "https://avatars.githubusercontent.com/u/65026286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicklimmm", "html_url": "https://github.com/nicklimmm", "followers_url": "https://api.github.com/users/nicklimmm/followers", "following_url": "https://api.github.com/users/nicklimmm/following{/other_user}", "gists_url": "https://api.github.com/users/nicklimmm/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicklimmm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicklimmm/subscriptions", "organizations_url": "https://api.github.com/users/nicklimmm/orgs", "repos_url": "https://api.github.com/users/nicklimmm/repos", "events_url": "https://api.github.com/users/nicklimmm/events{/privacy}", "received_events_url": "https://api.github.com/users/nicklimmm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b71d79c972a605959b0a7c82b323fbd8562f070", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b71d79c972a605959b0a7c82b323fbd8562f070", "html_url": "https://github.com/rust-lang/rust/commit/4b71d79c972a605959b0a7c82b323fbd8562f070"}], "stats": {"total": 181, "additions": 120, "deletions": 61}, "files": [{"sha": "02cfad6b3467961cf5af72c8f1eb0573b03547b9", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 116, "deletions": 57, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/e240dab0c86f023e06e1fc2249eff10054298b09/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e240dab0c86f023e06e1fc2249eff10054298b09/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=e240dab0c86f023e06e1fc2249eff10054298b09", "patch": "@@ -9,7 +9,6 @@ use rustc_middle::middle::stability;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n-use std::borrow::Borrow;\n use std::cell::{RefCell, RefMut};\n use std::cmp::Ordering;\n use std::fmt;\n@@ -40,6 +39,110 @@ use crate::html::{highlight, static_files};\n use askama::Template;\n use itertools::Itertools;\n \n+/// Generates an Askama template struct for rendering items with common methods.\n+///\n+/// Usage:\n+/// ```ignore (illustrative)\n+/// item_template!(\n+///     #[template(path = \"<template.html>\", /* additional values */)]\n+///     /* additional meta items */\n+///     struct MyItem<'a, 'cx> {\n+///         cx: RefCell<&'a mut Context<'cx>>,\n+///         it: &'a clean::Item,\n+///         /* additional fields */\n+///     },\n+///     methods = [ /* method names (comma separated; refer to macro definition of `item_template_methods!()`) */ ]\n+/// )\n+/// ```\n+///\n+/// NOTE: ensure that the generic lifetimes (`'a`, `'cx`) and\n+/// required fields (`cx`, `it`) are identical (in terms of order and definition).\n+macro_rules! item_template {\n+    (\n+        $(#[$meta:meta])*\n+        struct $name:ident<'a, 'cx> {\n+            cx: RefCell<&'a mut Context<'cx>>,\n+            it: &'a clean::Item,\n+            $($field_name:ident: $field_ty:ty),*,\n+        },\n+        methods = [$($methods:tt),* $(,)?]\n+    ) => {\n+        #[derive(Template)]\n+        $(#[$meta])*\n+        struct $name<'a, 'cx> {\n+            cx: RefCell<&'a mut Context<'cx>>,\n+            it: &'a clean::Item,\n+            $($field_name: $field_ty),*\n+        }\n+\n+        impl<'a, 'cx: 'a> ItemTemplate<'a, 'cx> for $name<'a, 'cx> {\n+            fn item_and_mut_cx(&self) -> (&'a clean::Item, RefMut<'_, &'a mut Context<'cx>>) {\n+                (&self.it, self.cx.borrow_mut())\n+            }\n+        }\n+\n+        impl<'a, 'cx: 'a> $name<'a, 'cx> {\n+            item_template_methods!($($methods)*);\n+        }\n+    };\n+}\n+\n+/// Implement common methods for item template structs generated by `item_template!()`.\n+///\n+/// NOTE: this macro is intended to be used only by `item_template!()`.\n+macro_rules! item_template_methods {\n+    () => {};\n+    (document $($rest:tt)*) => {\n+        fn document<'b>(&'b self) -> impl fmt::Display + Captures<'a> + 'b + Captures<'cx> {\n+            display_fn(move |f| {\n+                let (item, mut cx) = self.item_and_mut_cx();\n+                let v = document(*cx, item, None, HeadingOffset::H2);\n+                write!(f, \"{v}\")\n+            })\n+        }\n+        item_template_methods!($($rest)*);\n+    };\n+    (document_type_layout $($rest:tt)*) => {\n+        fn document_type_layout<'b>(&'b self) -> impl fmt::Display + Captures<'a> + 'b + Captures<'cx> {\n+            display_fn(move |f| {\n+                let (item, cx) = self.item_and_mut_cx();\n+                let def_id = item.item_id.expect_def_id();\n+                let v = document_type_layout(*cx, def_id);\n+                write!(f, \"{v}\")\n+            })\n+        }\n+        item_template_methods!($($rest)*);\n+    };\n+    (render_attributes_in_pre $($rest:tt)*) => {\n+        fn render_attributes_in_pre<'b>(&'b self) -> impl fmt::Display + Captures<'a> + 'b + Captures<'cx> {\n+            display_fn(move |f| {\n+                let (item, cx) = self.item_and_mut_cx();\n+                let tcx = cx.tcx();\n+                let v = render_attributes_in_pre(item, \"\", tcx);\n+                write!(f, \"{v}\")\n+            })\n+        }\n+        item_template_methods!($($rest)*);\n+    };\n+    (render_assoc_items $($rest:tt)*) => {\n+        fn render_assoc_items<'b>(&'b self) -> impl fmt::Display + Captures<'a> + 'b + Captures<'cx> {\n+            display_fn(move |f| {\n+                let (item, mut cx) = self.item_and_mut_cx();\n+                let def_id = item.item_id.expect_def_id();\n+                let v = render_assoc_items(*cx, item, def_id, AssocItemRender::All, None);\n+                write!(f, \"{v}\")\n+            })\n+        }\n+        item_template_methods!($($rest)*);\n+    };\n+    ($method:ident $($rest:tt)*) => {\n+        compile_error!(concat!(\"unknown method: \", stringify!($method)));\n+    };\n+    ($token:tt $($rest:tt)*) => {\n+        compile_error!(concat!(\"unexpected token: \", stringify!($token)));\n+    };\n+}\n+\n const ITEM_TABLE_OPEN: &str = \"<ul class=\\\"item-table\\\">\";\n const ITEM_TABLE_CLOSE: &str = \"</ul>\";\n const ITEM_TABLE_ROW_OPEN: &str = \"<li>\";\n@@ -222,49 +325,6 @@ trait ItemTemplate<'a, 'cx: 'a>: askama::Template + fmt::Display {\n     fn item_and_mut_cx(&self) -> (&'a clean::Item, RefMut<'_, &'a mut Context<'cx>>);\n }\n \n-fn item_template_document<'a: 'b, 'b, 'cx: 'a>(\n-    templ: &'b impl ItemTemplate<'a, 'cx>,\n-) -> impl fmt::Display + Captures<'a> + 'b + Captures<'cx> {\n-    display_fn(move |f| {\n-        let (item, mut cx) = templ.item_and_mut_cx();\n-        let v = document(*cx, item, None, HeadingOffset::H2);\n-        write!(f, \"{v}\")\n-    })\n-}\n-\n-fn item_template_document_type_layout<'a: 'b, 'b, 'cx: 'a>(\n-    templ: &'b impl ItemTemplate<'a, 'cx>,\n-) -> impl fmt::Display + Captures<'a> + 'b + Captures<'cx> {\n-    display_fn(move |f| {\n-        let (item, cx) = templ.item_and_mut_cx();\n-        let def_id = item.item_id.expect_def_id();\n-        let v = document_type_layout(*cx, def_id);\n-        write!(f, \"{v}\")\n-    })\n-}\n-\n-fn item_template_render_attributes_in_pre<'a: 'b, 'b, 'cx: 'a>(\n-    templ: &'b impl ItemTemplate<'a, 'cx>,\n-) -> impl fmt::Display + Captures<'a> + 'b + Captures<'cx> {\n-    display_fn(move |f| {\n-        let (item, cx) = templ.item_and_mut_cx();\n-        let tcx = cx.tcx();\n-        let v = render_attributes_in_pre(item, \"\", tcx);\n-        write!(f, \"{v}\")\n-    })\n-}\n-\n-fn item_template_render_assoc_items<'a: 'b, 'b, 'cx: 'a>(\n-    templ: &'b impl ItemTemplate<'a, 'cx>,\n-) -> impl fmt::Display + Captures<'a> + 'b + Captures<'cx> {\n-    display_fn(move |f| {\n-        let (item, mut cx) = templ.item_and_mut_cx();\n-        let def_id = item.item_id.expect_def_id();\n-        let v = render_assoc_items(*cx, item, def_id, AssocItemRender::All, None);\n-        write!(f, \"{v}\")\n-    })\n-}\n-\n fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items: &[clean::Item]) {\n     write!(w, \"{}\", document(cx, item, None, HeadingOffset::H2));\n \n@@ -1200,19 +1260,15 @@ fn item_typedef(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clea\n }\n \n fn item_union(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean::Union) {\n-    #[derive(Template)]\n-    #[template(path = \"item_union.html\")]\n-    struct ItemUnion<'a, 'cx> {\n-        cx: RefCell<&'a mut Context<'cx>>,\n-        it: &'a clean::Item,\n-        s: &'a clean::Union,\n-    }\n-\n-    impl<'a, 'cx: 'a> ItemTemplate<'a, 'cx> for ItemUnion<'a, 'cx> {\n-        fn item_and_mut_cx(&self) -> (&'a clean::Item, RefMut<'_, &'a mut Context<'cx>>) {\n-            (self.it, self.cx.borrow_mut())\n-        }\n-    }\n+    item_template!(\n+        #[template(path = \"item_union.html\")]\n+        struct ItemUnion<'a, 'cx> {\n+            cx: RefCell<&'a mut Context<'cx>>,\n+            it: &'a clean::Item,\n+            s: &'a clean::Union,\n+        },\n+        methods = [document, document_type_layout, render_attributes_in_pre, render_assoc_items]\n+    );\n \n     impl<'a, 'cx: 'a> ItemUnion<'a, 'cx> {\n         fn render_union<'b>(&'b self) -> impl fmt::Display + Captures<'a> + 'b + Captures<'cx> {\n@@ -1222,6 +1278,7 @@ fn item_union(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean:\n                 write!(f, \"{v}\")\n             })\n         }\n+\n         fn document_field<'b>(\n             &'b self,\n             field: &'a clean::Item,\n@@ -1232,10 +1289,12 @@ fn item_union(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean:\n                 write!(f, \"{v}\")\n             })\n         }\n+\n         fn stability_field(&self, field: &clean::Item) -> Option<String> {\n             let cx = self.cx.borrow();\n             field.stability_class(cx.tcx())\n         }\n+\n         fn print_ty<'b>(\n             &'b self,\n             ty: &'a clean::Type,"}, {"sha": "a01457971c178e8c16a86effce9eeab8938e5b96", "filename": "src/librustdoc/html/templates/item_union.html", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e240dab0c86f023e06e1fc2249eff10054298b09/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fitem_union.html", "raw_url": "https://github.com/rust-lang/rust/raw/e240dab0c86f023e06e1fc2249eff10054298b09/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fitem_union.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fitem_union.html?ref=e240dab0c86f023e06e1fc2249eff10054298b09", "patch": "@@ -1,8 +1,8 @@\n <pre class=\"rust item-decl\"><code>\n-    {{ self::item_template_render_attributes_in_pre(self.borrow()) | safe }}\n+    {{ self.render_attributes_in_pre() | safe }}\n     {{ self.render_union() | safe }}\n </code></pre>\n-{{ self::item_template_document(self.borrow()) | safe }}\n+{{ self.document() | safe }}\n {% if self.fields_iter().peek().is_some() %}\n     <h2 id=\"fields\" class=\"fields small-section-header\">\n         Fields<a href=\"#fields\" class=\"anchor\">\u00a7</a>\n@@ -19,5 +19,5 @@ <h2 id=\"fields\" class=\"fields small-section-header\">\n         {{ self.document_field(field) | safe }}\n     {% endfor %}\n {% endif %}\n-{{ self::item_template_render_assoc_items(self.borrow()) | safe }}\n-{{ self::item_template_document_type_layout(self.borrow()) | safe }}\n+{{ self.render_assoc_items() | safe }}\n+{{ self.document_type_layout() | safe }}"}]}