{"sha": "f8827f527560a5ddea50a213440a89d3bff2bfea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ODI3ZjUyNzU2MGE1ZGRlYTUwYTIxMzQ0MGE4OWQzYmZmMmJmZWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-20T09:48:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-20T09:48:11Z"}, "message": "Auto merge of #29534 - oli-obk:fix/const_fn_eval, r=dotdash", "tree": {"sha": "f703c0ecc1caaa71c19eee6ee94cdd84ea1d99e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f703c0ecc1caaa71c19eee6ee94cdd84ea1d99e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8827f527560a5ddea50a213440a89d3bff2bfea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8827f527560a5ddea50a213440a89d3bff2bfea", "html_url": "https://github.com/rust-lang/rust/commit/f8827f527560a5ddea50a213440a89d3bff2bfea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8827f527560a5ddea50a213440a89d3bff2bfea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2228bacd62ca8970a7a59401e78d0c5a34fc0f87", "url": "https://api.github.com/repos/rust-lang/rust/commits/2228bacd62ca8970a7a59401e78d0c5a34fc0f87", "html_url": "https://github.com/rust-lang/rust/commit/2228bacd62ca8970a7a59401e78d0c5a34fc0f87"}, {"sha": "b9eaceebb2821e1a5abfba1e9b7a85911879f717", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9eaceebb2821e1a5abfba1e9b7a85911879f717", "html_url": "https://github.com/rust-lang/rust/commit/b9eaceebb2821e1a5abfba1e9b7a85911879f717"}], "stats": {"total": 53, "additions": 38, "deletions": 15}, "files": [{"sha": "e43d162874363d69d538e1302ae170633e31c3bd", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f8827f527560a5ddea50a213440a89d3bff2bfea/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8827f527560a5ddea50a213440a89d3bff2bfea/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=f8827f527560a5ddea50a213440a89d3bff2bfea", "patch": "@@ -1055,8 +1055,6 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n           };\n           let (\n               decl,\n-              unsafety,\n-              abi,\n               block,\n               constness,\n           ) = match try!(eval_const_expr_partial(tcx, callee, sub_ty_hint, fn_args)) {\n@@ -1065,12 +1063,12 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n                       Some(ast_map::NodeItem(it)) => match it.node {\n                           hir::ItemFn(\n                               ref decl,\n-                              unsafety,\n+                              hir::Unsafety::Normal,\n                               constness,\n-                              abi,\n+                              abi::Abi::Rust,\n                               _, // ducktype generics? types are funky in const_eval\n                               ref block,\n-                          ) => (decl, unsafety, abi, block, constness),\n+                          ) => (decl, block, constness),\n                           _ => signal!(e, NonConstPath),\n                       },\n                       _ => signal!(e, NonConstPath),\n@@ -1080,18 +1078,19 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n               },\n               _ => signal!(e, NonConstPath),\n           };\n-          if let ExprTypeChecked = ty_hint {\n-              // no need to check for constness... either check_const\n-              // already forbids this or we const eval over whatever\n-              // we want\n-          } else {\n-              // we don't know much about the function, so we force it to be a const fn\n-              // so compilation will fail later in case the const fn's body is not const\n-              assert_eq!(constness, hir::Constness::Const)\n+          match (ty_hint, constness) {\n+              (ExprTypeChecked, _) => {\n+                  // no need to check for constness... either check_const\n+                  // already forbids this or we const eval over whatever\n+                  // we want\n+              },\n+              (_, hir::Constness::Const) => {\n+                  // we don't know much about the function, so we force it to be a const fn\n+                  // so compilation will fail later in case the const fn's body is not const\n+              },\n+              _ => signal!(e, NonConstPath),\n           }\n           assert_eq!(decl.inputs.len(), args.len());\n-          assert_eq!(unsafety, hir::Unsafety::Normal);\n-          assert_eq!(abi, abi::Abi::Rust);\n \n           let mut call_args = NodeMap();\n           for (arg, arg_expr) in decl.inputs.iter().zip(args.iter()) {"}, {"sha": "d49da47a87c83ad9e7716a0488b5a3d6cc8839b9", "filename": "src/test/compile-fail/const-call.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f8827f527560a5ddea50a213440a89d3bff2bfea/src%2Ftest%2Fcompile-fail%2Fconst-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8827f527560a5ddea50a213440a89d3bff2bfea/src%2Ftest%2Fcompile-fail%2Fconst-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-call.rs?ref=f8827f527560a5ddea50a213440a89d3bff2bfea", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_fn)]\n+\n+const unsafe fn g(x: usize) -> usize {\n+    x\n+}\n+\n+fn f(x: usize) -> usize {\n+    x\n+}\n+\n+fn main() {\n+    let _ = [0; f(2)]; //~ ERROR: non-constant path in constant expression [E0307]\n+    let _ = [0; g(2)]; //~ ERROR: non-constant path in constant expression [E0307]\n+}"}]}