{"sha": "584d1c9e5bc39402e2855d0ffa9394ae5a066060", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NGQxYzllNWJjMzk0MDJlMjg1NWQwZmZhOTM5NGFlNWEwNjYwNjA=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-04T10:48:10Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-04T11:16:39Z"}, "message": "Replace last uses of SubstsBuilder by TyBuilder", "tree": {"sha": "e225359ace25491de64b57e094689257db74c5a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e225359ace25491de64b57e094689257db74c5a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/584d1c9e5bc39402e2855d0ffa9394ae5a066060", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/584d1c9e5bc39402e2855d0ffa9394ae5a066060", "html_url": "https://github.com/rust-lang/rust/commit/584d1c9e5bc39402e2855d0ffa9394ae5a066060", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/584d1c9e5bc39402e2855d0ffa9394ae5a066060/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "505ca65216e7d1ea87a235170106338272b36a10", "url": "https://api.github.com/repos/rust-lang/rust/commits/505ca65216e7d1ea87a235170106338272b36a10", "html_url": "https://github.com/rust-lang/rust/commit/505ca65216e7d1ea87a235170106338272b36a10"}], "stats": {"total": 87, "additions": 23, "deletions": 64}, "files": [{"sha": "c584a2c0850064bd6059644bc2d6fcdd3fd8db30", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/584d1c9e5bc39402e2855d0ffa9394ae5a066060/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584d1c9e5bc39402e2855d0ffa9394ae5a066060/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=584d1c9e5bc39402e2855d0ffa9394ae5a066060", "patch": "@@ -75,14 +75,13 @@ impl<'a> InferenceContext<'a> {\n             self.db.trait_data(fn_once_trait).associated_type_by_name(&name![Output])?;\n \n         let mut arg_tys = vec![];\n-        let parameters = Substitution::builder(num_args)\n+        let arg_ty = TyBuilder::tuple(num_args)\n             .fill(repeat_with(|| {\n                 let arg = self.table.new_type_var();\n                 arg_tys.push(arg.clone());\n                 arg\n             }))\n             .build();\n-        let arg_ty = TyKind::Tuple(num_args, parameters).intern(&Interner);\n \n         let projection = {\n             let b = TyBuilder::assoc_type_projection(self.db, output_assoc_type);"}, {"sha": "d55ae49005ad50a38a320ad3a423a42bf9e17894", "filename": "crates/hir_ty/src/infer/path.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/584d1c9e5bc39402e2855d0ffa9394ae5a066060/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584d1c9e5bc39402e2855d0ffa9394ae5a066060/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=584d1c9e5bc39402e2855d0ffa9394ae5a066060", "patch": "@@ -93,16 +93,13 @@ impl<'a> InferenceContext<'a> {\n             ValueNs::GenericParam(it) => return Some(self.db.const_param_ty(it)),\n         };\n \n-        let ty = self.db.value_ty(typable);\n-        // self_subst is just for the parent\n         let parent_substs = self_subst.unwrap_or_else(|| Substitution::empty(&Interner));\n         let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver);\n         let substs = ctx.substs_from_path(path, typable, true);\n-        let full_substs = Substitution::builder(substs.len(&Interner))\n+        let ty = TyBuilder::value_ty(self.db, typable)\n             .use_parent_substs(&parent_substs)\n             .fill(substs.interned(&Interner)[parent_substs.len(&Interner)..].iter().cloned())\n             .build();\n-        let ty = ty.subst(&full_substs);\n         Some(ty)\n     }\n "}, {"sha": "a04b935ef9f1e5cb43eb3baaa7f7b1833581988a", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/584d1c9e5bc39402e2855d0ffa9394ae5a066060/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584d1c9e5bc39402e2855d0ffa9394ae5a066060/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=584d1c9e5bc39402e2855d0ffa9394ae5a066060", "patch": "@@ -186,14 +186,11 @@ pub(crate) fn unify(tys: &Canonical<(Ty, Ty)>) -> Option<Substitution> {\n             );\n         }\n     }\n-    Some(\n-        Substitution::builder(tys.binders.len(&Interner))\n-            .fill(\n-                vars.iter(&Interner)\n-                    .map(|v| table.resolve_ty_completely(v.assert_ty_ref(&Interner).clone())),\n-            )\n-            .build(),\n-    )\n+    Some(Substitution::from_iter(\n+        &Interner,\n+        vars.iter(&Interner)\n+            .map(|v| table.resolve_ty_completely(v.assert_ty_ref(&Interner).clone())),\n+    ))\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "f99b70f2b947e2f93959664cd70a50c8bed0d167", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 16, "deletions": 50, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/584d1c9e5bc39402e2855d0ffa9394ae5a066060/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584d1c9e5bc39402e2855d0ffa9394ae5a066060/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=584d1c9e5bc39402e2855d0ffa9394ae5a066060", "patch": "@@ -492,63 +492,13 @@ impl Substitution {\n                 .map(|(idx, _)| TyKind::BoundVar(BoundVar::new(debruijn, idx)).intern(&Interner)),\n         )\n     }\n-\n-    fn builder(param_count: usize) -> SubstsBuilder {\n-        SubstsBuilder { vec: Vec::with_capacity(param_count), param_count }\n-    }\n }\n \n /// Return an index of a parameter in the generic type parameter list by it's id.\n pub fn param_idx(db: &dyn HirDatabase, id: TypeParamId) -> Option<usize> {\n     generics(db.upcast(), id.parent).param_idx(id)\n }\n \n-#[derive(Debug, Clone)]\n-pub struct SubstsBuilder {\n-    vec: Vec<GenericArg>,\n-    param_count: usize,\n-}\n-\n-impl SubstsBuilder {\n-    pub fn build(self) -> Substitution {\n-        assert_eq!(self.vec.len(), self.param_count);\n-        Substitution::from_iter(&Interner, self.vec)\n-    }\n-\n-    pub fn push(mut self, ty: impl CastTo<GenericArg>) -> Self {\n-        self.vec.push(ty.cast(&Interner));\n-        self\n-    }\n-\n-    fn remaining(&self) -> usize {\n-        self.param_count - self.vec.len()\n-    }\n-\n-    pub fn fill_with_bound_vars(self, debruijn: DebruijnIndex, starting_from: usize) -> Self {\n-        self.fill(\n-            (starting_from..)\n-                .map(|idx| TyKind::BoundVar(BoundVar::new(debruijn, idx)).intern(&Interner)),\n-        )\n-    }\n-\n-    pub fn fill_with_unknown(self) -> Self {\n-        self.fill(iter::repeat(TyKind::Unknown.intern(&Interner)))\n-    }\n-\n-    pub fn fill(mut self, filler: impl Iterator<Item = impl CastTo<GenericArg>>) -> Self {\n-        self.vec.extend(filler.take(self.remaining()).casted(&Interner));\n-        assert_eq!(self.remaining(), 0);\n-        self\n-    }\n-\n-    pub fn use_parent_substs(mut self, parent_substs: &Substitution) -> Self {\n-        assert!(self.vec.is_empty());\n-        assert!(parent_substs.len(&Interner) <= self.param_count);\n-        self.vec.extend(parent_substs.iter(&Interner).cloned());\n-        self\n-    }\n-}\n-\n #[derive(Copy, Clone, PartialEq, Eq, Debug, Hash)]\n pub struct Binders<T> {\n     pub num_binders: usize,\n@@ -921,6 +871,18 @@ impl TyBuilder<hir_def::AdtId> {\n     }\n }\n \n+struct Tuple(usize);\n+impl TyBuilder<Tuple> {\n+    pub fn tuple(size: usize) -> TyBuilder<Tuple> {\n+        TyBuilder::new(Tuple(size), size)\n+    }\n+\n+    pub fn build(self) -> Ty {\n+        let (Tuple(size), subst) = self.build_internal();\n+        TyKind::Tuple(size, subst).intern(&Interner)\n+    }\n+}\n+\n impl TyBuilder<TraitId> {\n     pub fn trait_ref(db: &dyn HirDatabase, trait_id: TraitId) -> TyBuilder<TraitId> {\n         let generics = generics(db.upcast(), trait_id.into());\n@@ -970,6 +932,10 @@ impl TyBuilder<Binders<Ty>> {\n     pub fn impl_self_ty(db: &dyn HirDatabase, def: hir_def::ImplId) -> TyBuilder<Binders<Ty>> {\n         TyBuilder::subst_binders(db.impl_self_ty(def))\n     }\n+\n+    pub fn value_ty(db: &dyn HirDatabase, def: ValueTyDefId) -> TyBuilder<Binders<Ty>> {\n+        TyBuilder::subst_binders(db.value_ty(def))\n+    }\n }\n \n impl Ty {"}]}