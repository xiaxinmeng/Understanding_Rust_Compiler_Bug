{"sha": "57c77426ae6b4f9380a85a2aed80dc0900e7b93c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3Yzc3NDI2YWU2YjRmOTM4MGE4NWEyYWVkODBkYzA5MDBlN2I5M2M=", "commit": {"author": {"name": "flip1995", "email": "9744647+flip1995@users.noreply.github.com", "date": "2018-07-30T09:29:23Z"}, "committer": {"name": "flip1995", "email": "9744647+flip1995@users.noreply.github.com", "date": "2018-07-30T14:10:41Z"}, "message": "Check if the lint_name is from a tool and if the tool_lint exists", "tree": {"sha": "53c45b4b88720b12078c6d5f237b8bcbaa714000", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53c45b4b88720b12078c6d5f237b8bcbaa714000"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57c77426ae6b4f9380a85a2aed80dc0900e7b93c", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE8rLaPclMjvVJWRZHnxhOEWSDEYEFAltfHG8ACgkQnxhOEWSD\nEYFB4hAAlIG9Qt7zGXxthVz5uPpWX/8zQkIgZSp+n5TZRIid1JYgD545dtG30qXi\nTi/HoZZyf/M+DZOh4rq8Qz3/Z+u2pkWolpj3G5knS7gI0IluohDBuugxrrLYTC0w\n5OoRDetFdkHQlO8litPFkJvFSLGsZqXThrRVxYuzz9HuGCWIIdzfmqn7/4au9KHM\nwcu0rnAEJBpamvtX+3OsI4TkVYpSD+/6QYwF3qbfaHyWfmeiuxhphiAXft+pMFlK\nR2MXVzsTDbRkDVv3hbY5yRbYzjrO9QxBs5SQ1OCvHRHadr93ZKsKqtERvvbO5Alb\nItg+3A0Xh+1ANJnJUWPBzEKotPkpKZYLh1/JHQB962KBphI/IJt+gYWV28G2gfYz\nh8+0aXwprOuOqmi4qaq7knBDJ3dioks+07S2zbE7ax8zP5yMLr8D4JDldjTYXjHt\nxYnhYkD4ku6T6pZMoWGODMHMIJAMg38Qj5O+PITRP7ARkc1kVYRbvqZN+SNIVa7F\nL6TBS//4zqrl3HzCJ47phAXAVDCezW6/dPEv/sPMV440wTWJrsg35yWy28jd+SgA\n4FdZ0NNGbaYABatXMslwmuJuyD+Gm040xYCjJsPKpIPTq/kR4j5tXIeGYhe/b1u3\nMZveIsdHpXlmHNEAnA38KO6XlaZhdl2nizFhMjg2agUgGUZfJXI=\n=yd7Q\n-----END PGP SIGNATURE-----", "payload": "tree 53c45b4b88720b12078c6d5f237b8bcbaa714000\nparent 4b466ee4f94d7c17b0634495dc959e6f5dd4cc5a\nauthor flip1995 <9744647+flip1995@users.noreply.github.com> 1532942963 +0200\ncommitter flip1995 <9744647+flip1995@users.noreply.github.com> 1532959841 +0200\n\nCheck if the lint_name is from a tool and if the tool_lint exists\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57c77426ae6b4f9380a85a2aed80dc0900e7b93c", "html_url": "https://github.com/rust-lang/rust/commit/57c77426ae6b4f9380a85a2aed80dc0900e7b93c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57c77426ae6b4f9380a85a2aed80dc0900e7b93c/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b466ee4f94d7c17b0634495dc959e6f5dd4cc5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b466ee4f94d7c17b0634495dc959e6f5dd4cc5a", "html_url": "https://github.com/rust-lang/rust/commit/4b466ee4f94d7c17b0634495dc959e6f5dd4cc5a"}], "stats": {"total": 100, "additions": 71, "deletions": 29}, "files": [{"sha": "15630157722fa502ea3c715648c4ad01f7508914", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 43, "deletions": 21, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/57c77426ae6b4f9380a85a2aed80dc0900e7b93c/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c77426ae6b4f9380a85a2aed80dc0900e7b93c/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=57c77426ae6b4f9380a85a2aed80dc0900e7b93c", "patch": "@@ -42,7 +42,7 @@ use util::nodemap::FxHashMap;\n use std::default::Default as StdDefault;\n use syntax::ast;\n use syntax::edition;\n-use syntax_pos::{MultiSpan, Span};\n+use syntax_pos::{MultiSpan, Span, symbol::LocalInternedString};\n use errors::DiagnosticBuilder;\n use hir;\n use hir::def_id::LOCAL_CRATE;\n@@ -133,6 +133,12 @@ pub enum CheckLintNameResult<'a> {\n     /// The lint is either renamed or removed. This is the warning\n     /// message, and an optional new name (`None` if removed).\n     Warning(String, Option<String>),\n+    /// The lint is from a tool. If the Option is None, then either\n+    /// the lint does not exist in the tool or the code was not\n+    /// compiled with the tool and therefore the lint was never\n+    /// added to the `LintStore`. Otherwise the `LintId` will be\n+    /// returned as if it where a rustc lint.\n+    Tool(Option<&'a [LintId]>),\n }\n \n impl LintStore {\n@@ -288,14 +294,15 @@ impl LintStore {\n                                    sess: &Session,\n                                    lint_name: &str,\n                                    level: Level) {\n-        let db = match self.check_lint_name(lint_name) {\n+        let db = match self.check_lint_name(lint_name, None) {\n             CheckLintNameResult::Ok(_) => None,\n             CheckLintNameResult::Warning(ref msg, _) => {\n                 Some(sess.struct_warn(msg))\n             },\n             CheckLintNameResult::NoLint => {\n                 Some(struct_err!(sess, E0602, \"unknown lint: `{}`\", lint_name))\n             }\n+            CheckLintNameResult::Tool(_) => unreachable!(),\n         };\n \n         if let Some(mut db) = db {\n@@ -319,26 +326,41 @@ impl LintStore {\n     /// it emits non-fatal warnings and there are *two* lint passes that\n     /// inspect attributes, this is only run from the late pass to avoid\n     /// printing duplicate warnings.\n-    pub fn check_lint_name(&self, lint_name: &str) -> CheckLintNameResult {\n-        match self.by_name.get(lint_name) {\n-            Some(&Renamed(ref new_name, _)) => {\n-                CheckLintNameResult::Warning(\n-                    format!(\"lint `{}` has been renamed to `{}`\", lint_name, new_name),\n-                    Some(new_name.to_owned())\n-                )\n-            },\n-            Some(&Removed(ref reason)) => {\n-                CheckLintNameResult::Warning(\n-                    format!(\"lint `{}` has been removed: `{}`\", lint_name, reason),\n-                    None\n-                )\n-            },\n-            None => {\n-                match self.lint_groups.get(lint_name) {\n-                    None => CheckLintNameResult::NoLint,\n-                    Some(ids) => CheckLintNameResult::Ok(&ids.0),\n-                }\n+    pub fn check_lint_name(\n+        &self,\n+        lint_name: &str,\n+        tool_name: Option<LocalInternedString>,\n+    ) -> CheckLintNameResult {\n+        let complete_name = if let Some(tool_name) = tool_name {\n+            format!(\"{}::{}\", tool_name, lint_name)\n+        } else {\n+            lint_name.to_string()\n+        };\n+        if let Some(_) = tool_name {\n+            match self.by_name.get(&complete_name) {\n+                None => match self.lint_groups.get(&*complete_name) {\n+                    None => return CheckLintNameResult::Tool(None),\n+                    Some(ids) => return CheckLintNameResult::Tool(Some(&ids.0)),\n+                },\n+                Some(&Id(ref id)) => return CheckLintNameResult::Tool(Some(slice::from_ref(id))),\n+                // If the lint was registered as removed or renamed by the lint tool, we don't need\n+                // to treat tool_lints and rustc lints different and can use the code below.\n+                _ => {}\n             }\n+        }\n+        match self.by_name.get(&complete_name) {\n+            Some(&Renamed(ref new_name, _)) => CheckLintNameResult::Warning(\n+                format!(\"lint `{}` has been renamed to `{}`\", lint_name, new_name),\n+                Some(new_name.to_owned()),\n+            ),\n+            Some(&Removed(ref reason)) => CheckLintNameResult::Warning(\n+                format!(\"lint `{}` has been removed: `{}`\", lint_name, reason),\n+                None,\n+            ),\n+            None => match self.lint_groups.get(&*complete_name) {\n+                None => CheckLintNameResult::NoLint,\n+                Some(ids) => CheckLintNameResult::Ok(&ids.0),\n+            },\n             Some(&Id(ref id)) => CheckLintNameResult::Ok(slice::from_ref(id)),\n         }\n     }"}, {"sha": "6a29b8c3e3e6c11d7ce520b21d1b3a3c4a85d821", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/57c77426ae6b4f9380a85a2aed80dc0900e7b93c/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c77426ae6b4f9380a85a2aed80dc0900e7b93c/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=57c77426ae6b4f9380a85a2aed80dc0900e7b93c", "patch": "@@ -227,17 +227,18 @@ impl<'a> LintLevelsBuilder<'a> {\n                         continue\n                     }\n                 };\n-                if let Some(lint_tool) = word.is_scoped() {\n-                    if !self.sess.features_untracked().tool_lints {\n+                let tool_name = if let Some(lint_tool) = word.is_scoped() {\n+                    let gate_feature = !self.sess.features_untracked().tool_lints;\n+                    let known_tool = attr::is_known_lint_tool(lint_tool);\n+                    if gate_feature {\n                         feature_gate::emit_feature_err(&sess.parse_sess,\n                                                        \"tool_lints\",\n                                                        word.span,\n                                                        feature_gate::GateIssue::Language,\n                                                        &format!(\"scoped lint `{}` is experimental\",\n                                                                 word.ident));\n                     }\n-\n-                    if !attr::is_known_lint_tool(lint_tool) {\n+                    if !known_tool {\n                         span_err!(\n                             sess,\n                             lint_tool.span,\n@@ -247,17 +248,36 @@ impl<'a> LintLevelsBuilder<'a> {\n                         );\n                     }\n \n-                    continue\n-                }\n+                    if gate_feature || !known_tool {\n+                        continue\n+                    }\n+\n+                    Some(lint_tool.as_str())\n+                } else {\n+                    None\n+                };\n                 let name = word.name();\n-                match store.check_lint_name(&name.as_str()) {\n+                match store.check_lint_name(&name.as_str(), tool_name) {\n                     CheckLintNameResult::Ok(ids) => {\n                         let src = LintSource::Node(name, li.span);\n                         for id in ids {\n                             specs.insert(*id, (level, src));\n                         }\n                     }\n \n+                    CheckLintNameResult::Tool(result) => {\n+                        if let Some(ids) = result {\n+                            let complete_name = &format!(\"{}::{}\", tool_name.unwrap(), name);\n+                            let src = LintSource::Node(Symbol::intern(complete_name), li.span);\n+                            for id in ids {\n+                                specs.insert(*id, (level, src));\n+                            }\n+                        }\n+                        //FIXME: if Tool(None) is returned than the lint either does not exist in\n+                        //the lint tool or the code doesn't get compiled with the lint tool and\n+                        //therefore the lint cannot exist.\n+                    }\n+\n                     _ if !self.warn_about_weird_lints => {}\n \n                     CheckLintNameResult::Warning(msg, renamed) => {\n@@ -298,7 +318,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                         if name.as_str().chars().any(|c| c.is_uppercase()) {\n                             let name_lower = name.as_str().to_lowercase().to_string();\n                             if let CheckLintNameResult::NoLint =\n-                                    store.check_lint_name(&name_lower) {\n+                                    store.check_lint_name(&name_lower, tool_name) {\n                                 db.emit();\n                             } else {\n                                 db.span_suggestion_with_applicability("}]}