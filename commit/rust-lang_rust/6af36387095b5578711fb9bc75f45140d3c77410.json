{"sha": "6af36387095b5578711fb9bc75f45140d3c77410", "node_id": "C_kwDOAAsO6NoAKDZhZjM2Mzg3MDk1YjU1Nzg3MTFmYjliYzc1ZjQ1MTQwZDNjNzc0MTA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-13T11:18:58Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-14T15:36:39Z"}, "message": "Prevent the creation of `TraitRef` without dedicated methods", "tree": {"sha": "daa3220f28c54d55f7fa3ce65e1a32acb9b22879", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/daa3220f28c54d55f7fa3ce65e1a32acb9b22879"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6af36387095b5578711fb9bc75f45140d3c77410", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6af36387095b5578711fb9bc75f45140d3c77410", "html_url": "https://github.com/rust-lang/rust/commit/6af36387095b5578711fb9bc75f45140d3c77410", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6af36387095b5578711fb9bc75f45140d3c77410/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa", "html_url": "https://github.com/rust-lang/rust/commit/a5cd3bde95da07589b7a3a0cee35ec9b390c72aa"}], "stats": {"total": 91, "additions": 44, "deletions": 47}, "files": [{"sha": "aa01feb3a1ea4d686e5b84401d4100913088ae76", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af36387095b5578711fb9bc75f45140d3c77410/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af36387095b5578711fb9bc75f45140d3c77410/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=6af36387095b5578711fb9bc75f45140d3c77410", "patch": "@@ -570,7 +570,7 @@ fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n                             assoc_item,\n                             assoc_item,\n                             default.span,\n-                            ty::TraitRef { def_id: it.owner_id.to_def_id(), substs: trait_substs },\n+                            tcx.mk_trait_ref(it.owner_id.to_def_id(), trait_substs),\n                         );\n                     }\n                     _ => {}"}, {"sha": "24008f88814339d1f343fe38c0cf368165afe994", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af36387095b5578711fb9bc75f45140d3c77410/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af36387095b5578711fb9bc75f45140d3c77410/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=6af36387095b5578711fb9bc75f45140d3c77410", "patch": "@@ -160,7 +160,7 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n         // instead of requiring an additional `+ 'a`.\n         match pred.kind().skip_binder() {\n             ty::PredicateKind::Clause(ty::Clause::Trait(ty::TraitPredicate {\n-                trait_ref: ty::TraitRef { def_id: _, substs },\n+                trait_ref: ty::TraitRef { def_id: _, substs, .. },\n                 constness: _,\n                 polarity: _,\n             })) => {"}, {"sha": "719f44f9f665ab063aec4f2d5f066acf30ecd2d6", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6af36387095b5578711fb9bc75f45140d3c77410/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af36387095b5578711fb9bc75f45140d3c77410/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=6af36387095b5578711fb9bc75f45140d3c77410", "patch": "@@ -13,7 +13,7 @@ use rustc_hir_analysis::astconv::AstConv;\n use rustc_infer::infer;\n use rustc_infer::traits::{self, StatementAsExpression};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, Binder, DefIdTree, IsSuggestable, ToPredicate, Ty};\n+use rustc_middle::ty::{self, Binder, DefIdTree, IsSuggestable, Ty};\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -1277,17 +1277,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // Check that we're in fact trying to clone into the expected type\n             && self.can_coerce(*pointee_ty, expected_ty)\n             // And the expected type doesn't implement `Clone`\n-            && !self.predicate_must_hold_considering_regions(&traits::Obligation {\n-                cause: traits::ObligationCause::dummy(),\n-                param_env: self.param_env,\n-                recursion_depth: 0,\n-                predicate: ty::Binder::dummy(ty::TraitRef {\n-                    def_id: clone_trait_did,\n-                    substs: self.tcx.mk_substs([expected_ty.into()].iter()),\n-                })\n-                .without_const()\n-                .to_predicate(self.tcx),\n-            })\n+            && !self.predicate_must_hold_considering_regions(&traits::Obligation::new(\n+                self.tcx,\n+                traits::ObligationCause::dummy(),\n+                self.param_env,\n+                ty::Binder::dummy(self.tcx.mk_trait_ref(\n+                    clone_trait_did,\n+                    [expected_ty],\n+                )),\n+            ))\n         {\n             diag.span_note(\n                 callee_expr.span,"}, {"sha": "fed9fda74bfb33ec462dfadf8200f54432691762", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6af36387095b5578711fb9bc75f45140d3c77410/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af36387095b5578711fb9bc75f45140d3c77410/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=6af36387095b5578711fb9bc75f45140d3c77410", "patch": "@@ -226,13 +226,11 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n             false\n         };\n \n-        let expected_trait_ref = self.cx.resolve_vars_if_possible(ty::TraitRef {\n-            def_id: trait_def_id,\n-            substs: expected_substs,\n-        });\n-        let actual_trait_ref = self\n+        let expected_trait_ref = self\n             .cx\n-            .resolve_vars_if_possible(ty::TraitRef { def_id: trait_def_id, substs: actual_substs });\n+            .resolve_vars_if_possible(self.cx.tcx.mk_trait_ref(trait_def_id, expected_substs));\n+        let actual_trait_ref =\n+            self.cx.resolve_vars_if_possible(self.cx.tcx.mk_trait_ref(trait_def_id, actual_substs));\n \n         // Search the expected and actual trait references to see (a)\n         // whether the sub/sup placeholders appear in them (sometimes"}, {"sha": "c4116558bd27b262b6aebdc3ccdb0ee587213d0c", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6af36387095b5578711fb9bc75f45140d3c77410/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af36387095b5578711fb9bc75f45140d3c77410/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=6af36387095b5578711fb9bc75f45140d3c77410", "patch": "@@ -322,7 +322,7 @@ impl<'tcx> Relate<'tcx> for ty::TraitRef<'tcx> {\n             Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))\n         } else {\n             let substs = relate_substs(relation, a.substs, b.substs)?;\n-            Ok(ty::TraitRef { def_id: a.def_id, substs })\n+            Ok(relation.tcx().mk_trait_ref(a.def_id, substs))\n         }\n     }\n }"}, {"sha": "28f04c83a9b5edbf715a5b03744938f44d295460", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6af36387095b5578711fb9bc75f45140d3c77410/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af36387095b5578711fb9bc75f45140d3c77410/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=6af36387095b5578711fb9bc75f45140d3c77410", "patch": "@@ -816,11 +816,14 @@ impl<'tcx> List<ty::PolyExistentialPredicate<'tcx>> {\n pub struct TraitRef<'tcx> {\n     pub def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n+    /// This field exists to prevent the creation of `TraitRef` without\n+    /// calling [TyCtxt::mk_trait_ref].\n+    _use_mk_trait_ref_instead: (),\n }\n \n impl<'tcx> TraitRef<'tcx> {\n     pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {\n-        TraitRef { def_id, substs }\n+        TraitRef { def_id, substs, _use_mk_trait_ref_instead: () }\n     }\n \n     pub fn with_self_ty(self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> Self {\n@@ -836,6 +839,7 @@ impl<'tcx> TraitRef<'tcx> {\n         ty::Binder::dummy(TraitRef {\n             def_id,\n             substs: InternalSubsts::identity_for_item(tcx, def_id),\n+            _use_mk_trait_ref_instead: (),\n         })\n     }\n \n@@ -850,7 +854,11 @@ impl<'tcx> TraitRef<'tcx> {\n         substs: SubstsRef<'tcx>,\n     ) -> ty::TraitRef<'tcx> {\n         let defs = tcx.generics_of(trait_id);\n-        ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }\n+        ty::TraitRef {\n+            def_id: trait_id,\n+            substs: tcx.intern_substs(&substs[..defs.params.len()]),\n+            _use_mk_trait_ref_instead: (),\n+        }\n     }\n }\n \n@@ -1194,10 +1202,7 @@ impl<'tcx> AliasTy<'tcx> {\n         let trait_def_id = self.trait_def_id(tcx);\n         let trait_generics = tcx.generics_of(trait_def_id);\n         (\n-            ty::TraitRef {\n-                def_id: trait_def_id,\n-                substs: self.substs.truncate_to(tcx, trait_generics),\n-            },\n+            tcx.mk_trait_ref(trait_def_id, self.substs.truncate_to(tcx, trait_generics)),\n             &self.substs[trait_generics.count()..],\n         )\n     }\n@@ -1211,7 +1216,7 @@ impl<'tcx> AliasTy<'tcx> {\n     /// as well.\n     pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {\n         let def_id = self.trait_def_id(tcx);\n-        ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }\n+        tcx.mk_trait_ref(def_id, self.substs.truncate_to(tcx, tcx.generics_of(def_id)))\n     }\n \n     pub fn self_ty(&self) -> Ty<'tcx> {"}, {"sha": "72d38aeac7a0c0647f176fe451143d3cc1611354", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6af36387095b5578711fb9bc75f45140d3c77410/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af36387095b5578711fb9bc75f45140d3c77410/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=6af36387095b5578711fb9bc75f45140d3c77410", "patch": "@@ -110,26 +110,25 @@ where\n     V: DefIdVisitor<'tcx> + ?Sized,\n {\n     fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<V::BreakTy> {\n-        let TraitRef { def_id, substs } = trait_ref;\n+        let TraitRef { def_id, substs, .. } = trait_ref;\n         self.def_id_visitor.visit_def_id(def_id, \"trait\", &trait_ref.print_only_trait_path())?;\n         if self.def_id_visitor.shallow() { ControlFlow::CONTINUE } else { substs.visit_with(self) }\n     }\n \n     fn visit_projection_ty(&mut self, projection: ty::AliasTy<'tcx>) -> ControlFlow<V::BreakTy> {\n         let tcx = self.def_id_visitor.tcx();\n-        let (trait_ref, assoc_substs) = if tcx.def_kind(projection.def_id)\n-            != DefKind::ImplTraitPlaceholder\n-        {\n-            projection.trait_ref_and_own_substs(tcx)\n-        } else {\n-            // HACK(RPITIT): Remove this when RPITITs are lowered to regular assoc tys\n-            let def_id = tcx.impl_trait_in_trait_parent(projection.def_id);\n-            let trait_generics = tcx.generics_of(def_id);\n-            (\n-                ty::TraitRef { def_id, substs: projection.substs.truncate_to(tcx, trait_generics) },\n-                &projection.substs[trait_generics.count()..],\n-            )\n-        };\n+        let (trait_ref, assoc_substs) =\n+            if tcx.def_kind(projection.def_id) != DefKind::ImplTraitPlaceholder {\n+                projection.trait_ref_and_own_substs(tcx)\n+            } else {\n+                // HACK(RPITIT): Remove this when RPITITs are lowered to regular assoc tys\n+                let def_id = tcx.impl_trait_in_trait_parent(projection.def_id);\n+                let trait_generics = tcx.generics_of(def_id);\n+                (\n+                    tcx.mk_trait_ref(def_id, projection.substs.truncate_to(tcx, trait_generics)),\n+                    &projection.substs[trait_generics.count()..],\n+                )\n+            };\n         self.visit_trait(trait_ref)?;\n         if self.def_id_visitor.shallow() {\n             ControlFlow::CONTINUE"}, {"sha": "71919b2078ef678fd043c161bd3c85e4bcf86507", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6af36387095b5578711fb9bc75f45140d3c77410/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af36387095b5578711fb9bc75f45140d3c77410/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=6af36387095b5578711fb9bc75f45140d3c77410", "patch": "@@ -703,9 +703,7 @@ fn receiver_is_dispatchable<'tcx>(\n                     }\n                 });\n \n-            ty::Binder::dummy(ty::TraitRef { def_id: unsize_did, substs })\n-                .without_const()\n-                .to_predicate(tcx)\n+            ty::Binder::dummy(tcx.mk_trait_ref(unsize_did, substs)).to_predicate(tcx)\n         };\n \n         let caller_bounds: Vec<Predicate<'tcx>> ="}, {"sha": "84d7244c1db786a6144c32e6fdf6be92e2e1c3c2", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6af36387095b5578711fb9bc75f45140d3c77410/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af36387095b5578711fb9bc75f45140d3c77410/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=6af36387095b5578711fb9bc75f45140d3c77410", "patch": "@@ -1309,8 +1309,7 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n         let trait_substs =\n             obligation.predicate.substs.truncate_to(tcx, tcx.generics_of(trait_def_id));\n         // FIXME(named-returns): Binders\n-        let trait_predicate =\n-            ty::Binder::dummy(ty::TraitRef { def_id: trait_def_id, substs: trait_substs });\n+        let trait_predicate = ty::Binder::dummy(tcx.mk_trait_ref(trait_def_id, trait_substs));\n \n         let _ = selcx.infcx.commit_if_ok(|_| {\n             match selcx.select(&obligation.with(tcx, trait_predicate)) {"}]}