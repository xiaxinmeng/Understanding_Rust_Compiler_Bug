{"sha": "3d707a008e0822471de4adad047b5cefd281f3ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNzA3YTAwOGUwODIyNDcxZGU0YWRhZDA0N2I1Y2VmZDI4MWYzYWM=", "commit": {"author": {"name": "Joseph Ryan", "email": "josephryan3.14@gmail.com", "date": "2020-06-29T23:22:58Z"}, "committer": {"name": "Joseph Ryan", "email": "josephryan3.14@gmail.com", "date": "2020-07-27T21:00:39Z"}, "message": "Make requested changes", "tree": {"sha": "076dc60b3e27e8ec6f9106a62cd7257fa24468dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/076dc60b3e27e8ec6f9106a62cd7257fa24468dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d707a008e0822471de4adad047b5cefd281f3ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEtei29J14PIgXYsIlGom1QEO7zL0FAl8fQHcACgkQGom1QEO7\nzL2xVwf+PUPqYzwF6AHKboKcWMZBxNltj57+fkFvJqpG6uIT7aMMzCp54tg4WHeB\nYT6ce2xdtKJAbG9IVI52G4LEn88dnyZcLWIOV1SufwnQlnOyqyHeJ2OvgC3EIW6G\nv1E7yCJviZdNdNs5JVULh/wh/Irdtn/hQqPWRjCnD9MG7DwR0Qaxv3CZ5l6SU9pk\nsRFaoOOjijMDbHf3FXKbreqm1VzrM0bri3eF1YILo7vl23i1HqmO6GeTBRUobA+E\nZnb9zINO3RrDtzqIDDUnyNg4u8fHUiY++/winTY9L2xB6y6yPJGf5TkcqoEi7oPg\n3aL4IpD9b5vYNjM4vsN2d6moSnrP2Q==\n=+ov2\n-----END PGP SIGNATURE-----", "payload": "tree 076dc60b3e27e8ec6f9106a62cd7257fa24468dd\nparent 65bf5d5248635152262344770591c367ba6a9890\nauthor Joseph Ryan <josephryan3.14@gmail.com> 1593472978 -0500\ncommitter Joseph Ryan <josephryan3.14@gmail.com> 1595883639 -0500\n\nMake requested changes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d707a008e0822471de4adad047b5cefd281f3ac", "html_url": "https://github.com/rust-lang/rust/commit/3d707a008e0822471de4adad047b5cefd281f3ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d707a008e0822471de4adad047b5cefd281f3ac/comments", "author": {"login": "P1n3appl3", "id": 9326885, "node_id": "MDQ6VXNlcjkzMjY4ODU=", "avatar_url": "https://avatars.githubusercontent.com/u/9326885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P1n3appl3", "html_url": "https://github.com/P1n3appl3", "followers_url": "https://api.github.com/users/P1n3appl3/followers", "following_url": "https://api.github.com/users/P1n3appl3/following{/other_user}", "gists_url": "https://api.github.com/users/P1n3appl3/gists{/gist_id}", "starred_url": "https://api.github.com/users/P1n3appl3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P1n3appl3/subscriptions", "organizations_url": "https://api.github.com/users/P1n3appl3/orgs", "repos_url": "https://api.github.com/users/P1n3appl3/repos", "events_url": "https://api.github.com/users/P1n3appl3/events{/privacy}", "received_events_url": "https://api.github.com/users/P1n3appl3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "P1n3appl3", "id": 9326885, "node_id": "MDQ6VXNlcjkzMjY4ODU=", "avatar_url": "https://avatars.githubusercontent.com/u/9326885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P1n3appl3", "html_url": "https://github.com/P1n3appl3", "followers_url": "https://api.github.com/users/P1n3appl3/followers", "following_url": "https://api.github.com/users/P1n3appl3/following{/other_user}", "gists_url": "https://api.github.com/users/P1n3appl3/gists{/gist_id}", "starred_url": "https://api.github.com/users/P1n3appl3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P1n3appl3/subscriptions", "organizations_url": "https://api.github.com/users/P1n3appl3/orgs", "repos_url": "https://api.github.com/users/P1n3appl3/repos", "events_url": "https://api.github.com/users/P1n3appl3/events{/privacy}", "received_events_url": "https://api.github.com/users/P1n3appl3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65bf5d5248635152262344770591c367ba6a9890", "url": "https://api.github.com/repos/rust-lang/rust/commits/65bf5d5248635152262344770591c367ba6a9890", "html_url": "https://github.com/rust-lang/rust/commit/65bf5d5248635152262344770591c367ba6a9890"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "72881eccf3edb28c0ac8df3229357adcdd35455c", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d707a008e0822471de4adad047b5cefd281f3ac/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d707a008e0822471de4adad047b5cefd281f3ac/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=3d707a008e0822471de4adad047b5cefd281f3ac", "patch": "@@ -126,7 +126,7 @@ pub struct Cache {\n \n impl Cache {\n     pub fn from_krate(\n-        renderinfo: RenderInfo,\n+        render_info: RenderInfo,\n         document_private: bool,\n         extern_html_root_urls: &BTreeMap<String, String>,\n         dst: &Path,\n@@ -142,7 +142,7 @@ impl Cache {\n             deref_mut_trait_did,\n             owned_box_did,\n             ..\n-        } = renderinfo;\n+        } = render_info;\n \n         let external_paths =\n             external_paths.into_iter().map(|(k, (v, t))| (k, (v, ItemType::from(t)))).collect();"}, {"sha": "7757ee7e515e14eb9253ffddc551fc3a12f27141", "filename": "src/librustdoc/formats/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d707a008e0822471de4adad047b5cefd281f3ac/src%2Flibrustdoc%2Fformats%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d707a008e0822471de4adad047b5cefd281f3ac/src%2Flibrustdoc%2Fformats%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fmod.rs?ref=3d707a008e0822471de4adad047b5cefd281f3ac", "patch": "@@ -9,11 +9,15 @@ use rustc_span::def_id::DefId;\n use crate::clean;\n use crate::clean::types::GetDefId;\n \n+/// Specifies whether rendering directly implemented trait items or ones from a certain Deref\n+/// impl.\n pub enum AssocItemRender<'a> {\n     All,\n     DerefFor { trait_: &'a clean::Type, type_: &'a clean::Type, deref_mut_: bool },\n }\n \n+/// For different handling of associated items from the Deref target of a type rather than the type\n+/// itself.\n #[derive(Copy, Clone, PartialEq)]\n pub enum RenderMode {\n     Normal,"}, {"sha": "7d23c7b8aff7cfb1bdf4b179c66d8d1642d83e81", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3d707a008e0822471de4adad047b5cefd281f3ac/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d707a008e0822471de4adad047b5cefd281f3ac/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=3d707a008e0822471de4adad047b5cefd281f3ac", "patch": "@@ -7,23 +7,24 @@ use crate::config::{RenderInfo, RenderOptions};\n use crate::error::Error;\n use crate::formats::cache::{Cache, CACHE_KEY};\n \n+/// Allows for different backends to rustdoc to be used with the `Renderer::run()` function. Each\n+/// backend renderer has hooks for initialization, documenting an item, entering and exiting a\n+/// module, and cleanup/finalizing output.\n pub trait FormatRenderer: Clone {\n-    type Output: FormatRenderer;\n-\n-    /// Sets up any state required for the emulator. When this is called the cache has already been\n+    /// Sets up any state required for the renderer. When this is called the cache has already been\n     /// populated.\n     fn init(\n         krate: clean::Crate,\n         options: RenderOptions,\n-        renderinfo: RenderInfo,\n+        render_info: RenderInfo,\n         edition: Edition,\n         cache: &mut Cache,\n-    ) -> Result<(Self::Output, clean::Crate), Error>;\n+    ) -> Result<(Self, clean::Crate), Error>;\n \n     /// Renders a single non-module item. This means no recursive sub-item rendering is required.\n     fn item(&mut self, item: clean::Item, cache: &Cache) -> Result<(), Error>;\n \n-    /// Renders a module (doesn't need to handle recursing into children).\n+    /// Renders a module (should not handle recursing into children).\n     fn mod_item_in(\n         &mut self,\n         item: &clean::Item,\n@@ -54,19 +55,20 @@ impl Renderer {\n         self,\n         krate: clean::Crate,\n         options: RenderOptions,\n-        renderinfo: RenderInfo,\n+        render_info: RenderInfo,\n         diag: &rustc_errors::Handler,\n         edition: Edition,\n     ) -> Result<(), Error> {\n         let (krate, mut cache) = Cache::from_krate(\n-            renderinfo.clone(),\n+            render_info.clone(),\n             options.document_private,\n             &options.extern_html_root_urls,\n             &options.output,\n             krate,\n         );\n \n-        let (mut renderer, mut krate) = T::init(krate, options, renderinfo, edition, &mut cache)?;\n+        let (mut format_renderer, mut krate) =\n+            T::init(krate, options, render_info, edition, &mut cache)?;\n \n         let cache = Arc::new(cache);\n         // Freeze the cache now that the index has been built. Put an Arc into TLS for future\n@@ -81,7 +83,7 @@ impl Renderer {\n         item.name = Some(krate.name.clone());\n \n         // Render the crate documentation\n-        let mut work = vec![(renderer.clone(), item)];\n+        let mut work = vec![(format_renderer.clone(), item)];\n \n         while let Some((mut cx, item)) = work.pop() {\n             if item.is_mod() {\n@@ -98,7 +100,7 @@ impl Renderer {\n                     _ => unreachable!(),\n                 };\n                 for it in module.items {\n-                    info!(\"Adding {:?} to worklist\", it.name);\n+                    debug!(\"Adding {:?} to worklist\", it.name);\n                     work.push((cx.clone(), it));\n                 }\n \n@@ -108,7 +110,7 @@ impl Renderer {\n             }\n         }\n \n-        renderer.after_krate(&krate, &cache)?;\n-        renderer.after_run(diag)\n+        format_renderer.after_krate(&krate, &cache)?;\n+        format_renderer.after_run(diag)\n     }\n }"}, {"sha": "46c1b27986de4a00ec928dd4adb749a1b880c72e", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d707a008e0822471de4adad047b5cefd281f3ac/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d707a008e0822471de4adad047b5cefd281f3ac/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=3d707a008e0822471de4adad047b5cefd281f3ac", "patch": "@@ -371,14 +371,12 @@ pub fn initial_ids() -> Vec<String> {\n     .collect()\n }\n \n+/// Generates the documentation for `crate` into the directory `dst`\n impl FormatRenderer for Context {\n-    type Output = Self;\n-\n-    /// Generates the documentation for `crate` into the directory `dst`\n     fn init(\n         mut krate: clean::Crate,\n         options: RenderOptions,\n-        _renderinfo: RenderInfo,\n+        _render_info: RenderInfo,\n         edition: Edition,\n         cache: &mut Cache,\n     ) -> Result<(Context, clean::Crate), Error> {"}, {"sha": "04651da4d095d50e63bd7e226e75b8c17c2da3e8", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d707a008e0822471de4adad047b5cefd281f3ac/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d707a008e0822471de4adad047b5cefd281f3ac/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=3d707a008e0822471de4adad047b5cefd281f3ac", "patch": "@@ -67,7 +67,7 @@ mod doctree;\n mod error;\n mod fold;\n crate mod formats;\n-crate mod html;\n+pub mod html;\n mod markdown;\n mod passes;\n mod test;"}]}