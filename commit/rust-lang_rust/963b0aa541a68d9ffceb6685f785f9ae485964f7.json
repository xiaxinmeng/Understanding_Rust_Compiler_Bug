{"sha": "963b0aa541a68d9ffceb6685f785f9ae485964f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2M2IwYWE1NDFhNjhkOWZmY2ViNjY4NWY3ODVmOWFlNDg1OTY0Zjc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-07T16:27:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-07T16:27:35Z"}, "message": "Rollup merge of #69794 - TimDiekmann:dangling, r=Amanieu\n\nAdd `Layout::dangling()` to return a well-aligned `NonNull<u8>`\n\nAdds a convenient function to `Layout` to create a `NonNull<u8>` out of a layout to be returned on ZST allocations.\n\nThis is the first item on the roadmap to support ZSTs in `AllocRef`: https://github.com/rust-lang/wg-allocators/issues/38#issuecomment-595861542\n\nr? @Amanieu", "tree": {"sha": "24774445fb5edb19f438d78aef8f60f5814aae11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24774445fb5edb19f438d78aef8f60f5814aae11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/963b0aa541a68d9ffceb6685f785f9ae485964f7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeY8t3CRBK7hj4Ov3rIwAAdHIIAIcOTR8cClvhQgFYS+mpUjBp\nsa0nXJWn/T133dzdt6/CfvFdP0sZXX7q4wQBCL5KnD1f24AVIUXgBt57QwE6nR6k\nUz7sFsE14xlNgwlKEJNRrOhJtrz+N386PmEYQDLajVcoq0Kp+JkZz+UTzeubh2rn\nN8+dLmbaGU/naxP4oe242CObFj8BOfesuXDgV9gRcKSYsbGWv4wrPmFkTNaDoBqY\nXDtWmbgF0K3qJc3vfzwGKTvUjPpWaJIESb/Ba4zxVNsuYhqlZn7QvpB22ti4ApbB\n9Y9NwphtbQtRq1rzCyu5Ti8wk+TiTlWOakHhIbySRZNPCsmSJzyrpuF8yXcIgcE=\n=5ceh\n-----END PGP SIGNATURE-----\n", "payload": "tree 24774445fb5edb19f438d78aef8f60f5814aae11\nparent f1f4864de3ecfa106d03f2172f2c80edf8eeb02c\nparent 09d3ba13afb8fdf449928b160431787e2d259db1\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1583598455 +0100\ncommitter GitHub <noreply@github.com> 1583598455 +0100\n\nRollup merge of #69794 - TimDiekmann:dangling, r=Amanieu\n\nAdd `Layout::dangling()` to return a well-aligned `NonNull<u8>`\n\nAdds a convenient function to `Layout` to create a `NonNull<u8>` out of a layout to be returned on ZST allocations.\n\nThis is the first item on the roadmap to support ZSTs in `AllocRef`: https://github.com/rust-lang/wg-allocators/issues/38#issuecomment-595861542\n\nr? @Amanieu\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/963b0aa541a68d9ffceb6685f785f9ae485964f7", "html_url": "https://github.com/rust-lang/rust/commit/963b0aa541a68d9ffceb6685f785f9ae485964f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/963b0aa541a68d9ffceb6685f785f9ae485964f7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1f4864de3ecfa106d03f2172f2c80edf8eeb02c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1f4864de3ecfa106d03f2172f2c80edf8eeb02c", "html_url": "https://github.com/rust-lang/rust/commit/f1f4864de3ecfa106d03f2172f2c80edf8eeb02c"}, {"sha": "09d3ba13afb8fdf449928b160431787e2d259db1", "url": "https://api.github.com/repos/rust-lang/rust/commits/09d3ba13afb8fdf449928b160431787e2d259db1", "html_url": "https://github.com/rust-lang/rust/commit/09d3ba13afb8fdf449928b160431787e2d259db1"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "0a7a8ab266aee9986f59cfafa65e91259d2ef6eb", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/963b0aa541a68d9ffceb6685f785f9ae485964f7/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/963b0aa541a68d9ffceb6685f785f9ae485964f7/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=963b0aa541a68d9ffceb6685f785f9ae485964f7", "patch": "@@ -140,6 +140,18 @@ impl Layout {\n         unsafe { Layout::from_size_align_unchecked(size, align) }\n     }\n \n+    /// Creates a `NonNull` that is dangling, but well-aligned for this Layout.\n+    ///\n+    /// Note that the pointer value may potentially represent a valid pointer,\n+    /// which means this must not be used as a \"not yet initialized\"\n+    /// sentinel value. Types that lazily allocate must track initialization by\n+    /// some other means.\n+    #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n+    pub const fn dangling(&self) -> NonNull<u8> {\n+        // align is non-zero and a power of two\n+        unsafe { NonNull::new_unchecked(self.align() as *mut u8) }\n+    }\n+\n     /// Creates a layout describing the record that can hold a value\n     /// of the same layout as `self`, but that also is aligned to\n     /// alignment `align` (measured in bytes)."}, {"sha": "c8592e40a69a0168016db92542748a8efded529b", "filename": "src/libcore/tests/alloc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/963b0aa541a68d9ffceb6685f785f9ae485964f7/src%2Flibcore%2Ftests%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/963b0aa541a68d9ffceb6685f785f9ae485964f7/src%2Flibcore%2Ftests%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Falloc.rs?ref=963b0aa541a68d9ffceb6685f785f9ae485964f7", "patch": "@@ -1,10 +1,13 @@\n use core::alloc::Layout;\n+use core::ptr::NonNull;\n \n #[test]\n fn const_unchecked_layout() {\n     const SIZE: usize = 0x2000;\n     const ALIGN: usize = 0x1000;\n     const LAYOUT: Layout = unsafe { Layout::from_size_align_unchecked(SIZE, ALIGN) };\n+    const DANGLING: NonNull<u8> = LAYOUT.dangling();\n     assert_eq!(LAYOUT.size(), SIZE);\n     assert_eq!(LAYOUT.align(), ALIGN);\n+    assert_eq!(Some(DANGLING), NonNull::new(ALIGN as *mut u8));\n }"}, {"sha": "71a061af28920f3de14793e55921cd9b84d3ab30", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/963b0aa541a68d9ffceb6685f785f9ae485964f7/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/963b0aa541a68d9ffceb6685f785f9ae485964f7/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=963b0aa541a68d9ffceb6685f785f9ae485964f7", "patch": "@@ -1,3 +1,4 @@\n+#![feature(alloc_layout_extra)]\n #![feature(bool_to_option)]\n #![feature(bound_cloned)]\n #![feature(box_syntax)]"}]}