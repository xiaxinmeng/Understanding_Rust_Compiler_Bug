{"sha": "fd3f4c50dac870f11c11364c71f0a40497808d72", "node_id": "C_kwDOAAsO6NoAKGZkM2Y0YzUwZGFjODcwZjExYzExMzY0YzcxZjBhNDA0OTc4MDhkNzI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-06T21:47:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-06T21:47:22Z"}, "message": "Merge #10467\n\n10467: Optimize CodeLens for references/impls r=Veykril a=ericsampson\n\nDon't do unnecessary work.\r\nFollowup to #10447 . cc `@Veykril` \n\nCo-authored-by: Eric Sampson <esampson@eaze.com>", "tree": {"sha": "b19e16abe333159609f0b1ad9bca75d7c9d4464b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b19e16abe333159609f0b1ad9bca75d7c9d4464b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd3f4c50dac870f11c11364c71f0a40497808d72", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXhlqCRBK7hj4Ov3rIwAAZm0IAJmEgIlRLTZXhBvhyAVVtkpF\np+l34JFzYuBhgrufx+2u//YuHY2jZSNDiUQhuLy/R4yfVYsUDFWSPlI4flu/u+Be\nwPKJPprRMj4ZSuijM1hMzpnyvA/Ftbolb3ceeNd53xL+GHB9xLagEcsFJH9DJ2qL\nCvUg65axRL3KZ5qLZ3WnGJWYwj6PG6LeN4WEOX9VATjECNcM6bOtEhUQFlJlV+E5\nlEfQQ18EPlgl9gSSqf2Aa7H7G0VHQhfyuQtQV6SWfqcRo16xHRFQS7twF2oNlnhi\nQaaeGe73g4wQf0TxVUF9MLtPXLNpHmIu6ciN0imWzuiIig1w48tkD6NfBvD53SQ=\n=ePrK\n-----END PGP SIGNATURE-----\n", "payload": "tree b19e16abe333159609f0b1ad9bca75d7c9d4464b\nparent f30b62b7513f6d75d56b8c0c8ef9230fe11f11e2\nparent efca421c4365c1ab65927e388e18b8d91234d2ab\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633556842 +0000\ncommitter GitHub <noreply@github.com> 1633556842 +0000\n\nMerge #10467\n\n10467: Optimize CodeLens for references/impls r=Veykril a=ericsampson\n\nDon't do unnecessary work.\r\nFollowup to #10447 . cc `@Veykril` \n\nCo-authored-by: Eric Sampson <esampson@eaze.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd3f4c50dac870f11c11364c71f0a40497808d72", "html_url": "https://github.com/rust-lang/rust/commit/fd3f4c50dac870f11c11364c71f0a40497808d72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd3f4c50dac870f11c11364c71f0a40497808d72/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f30b62b7513f6d75d56b8c0c8ef9230fe11f11e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f30b62b7513f6d75d56b8c0c8ef9230fe11f11e2", "html_url": "https://github.com/rust-lang/rust/commit/f30b62b7513f6d75d56b8c0c8ef9230fe11f11e2"}, {"sha": "efca421c4365c1ab65927e388e18b8d91234d2ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/efca421c4365c1ab65927e388e18b8d91234d2ab", "html_url": "https://github.com/rust-lang/rust/commit/efca421c4365c1ab65927e388e18b8d91234d2ab"}], "stats": {"total": 62, "additions": 35, "deletions": 27}, "files": [{"sha": "47db002ef9024287406f247217f6cd30fe0a3c96", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/fd3f4c50dac870f11c11364c71f0a40497808d72/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3f4c50dac870f11c11364c71f0a40497808d72/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=fd3f4c50dac870f11c11364c71f0a40497808d72", "patch": "@@ -64,31 +64,53 @@ pub(crate) fn annotations(\n \n     visit_file_defs(&Semantics::new(db), file_id, &mut |def| match def {\n         Either::Left(def) => {\n-            let (range, ranges_enum_variants) = match def {\n-                hir::ModuleDef::Const(konst) => {\n-                    (konst.source(db).and_then(|node| name_range(&node, file_id)), vec![])\n+            let range = match def {\n+                hir::ModuleDef::Const(konst) if config.annotate_references => {\n+                    konst.source(db).and_then(|node| name_range(&node, file_id))\n                 }\n-                hir::ModuleDef::Trait(trait_) => {\n-                    (trait_.source(db).and_then(|node| name_range(&node, file_id)), vec![])\n+                hir::ModuleDef::Trait(trait_)\n+                    if config.annotate_references || config.annotate_impls =>\n+                {\n+                    trait_.source(db).and_then(|node| name_range(&node, file_id))\n                 }\n                 hir::ModuleDef::Adt(adt) => match adt {\n-                    hir::Adt::Enum(enum_) => (\n-                        enum_.source(db).and_then(|node| name_range(&node, file_id)),\n+                    hir::Adt::Enum(enum_) => {\n                         if config.annotate_enum_variant_references {\n                             enum_\n                                 .variants(db)\n                                 .into_iter()\n                                 .map(|variant| {\n                                     variant.source(db).and_then(|node| name_range(&node, file_id))\n                                 })\n-                                .collect()\n+                                .filter_map(std::convert::identity)\n+                                .for_each(|range| {\n+                                    annotations.push(Annotation {\n+                                        range,\n+                                        kind: AnnotationKind::HasReferences {\n+                                            position: FilePosition {\n+                                                file_id,\n+                                                offset: range.start(),\n+                                            },\n+                                            data: None,\n+                                        },\n+                                    })\n+                                })\n+                        }\n+                        if config.annotate_references || config.annotate_impls {\n+                            enum_.source(db).and_then(|node| name_range(&node, file_id))\n                         } else {\n-                            vec![]\n-                        },\n-                    ),\n-                    _ => (adt.source(db).and_then(|node| name_range(&node, file_id)), vec![]),\n+                            None\n+                        }\n+                    }\n+                    _ => {\n+                        if config.annotate_references || config.annotate_impls {\n+                            adt.source(db).and_then(|node| name_range(&node, file_id))\n+                        } else {\n+                            None\n+                        }\n+                    }\n                 },\n-                _ => (None, vec![]),\n+                _ => None,\n             };\n \n             let (range, offset) = match range {\n@@ -115,20 +137,6 @@ pub(crate) fn annotations(\n                 });\n             }\n \n-            if config.annotate_enum_variant_references {\n-                for range_enum_variant in\n-                    ranges_enum_variants.into_iter().filter_map(std::convert::identity)\n-                {\n-                    annotations.push(Annotation {\n-                        range: range_enum_variant,\n-                        kind: AnnotationKind::HasReferences {\n-                            position: FilePosition { file_id, offset: range_enum_variant.start() },\n-                            data: None,\n-                        },\n-                    });\n-                }\n-            }\n-\n             fn name_range<T: HasName>(node: &InFile<T>, file_id: FileId) -> Option<TextRange> {\n                 if node.file_id == file_id.into() {\n                     node.value.name().map(|it| it.syntax().text_range())"}]}