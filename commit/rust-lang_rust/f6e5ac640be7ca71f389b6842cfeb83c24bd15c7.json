{"sha": "f6e5ac640be7ca71f389b6842cfeb83c24bd15c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZTVhYzY0MGJlN2NhNzFmMzg5YjY4NDJjZmViODNjMjRiZDE1Yzc=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-07-01T17:06:30Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-07-02T06:33:55Z"}, "message": "rustc_mir: treat DropAndReplace as Drop + Assign in qualify_consts.", "tree": {"sha": "9ca7522c7452c81c10526142db85383b706f28d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ca7522c7452c81c10526142db85383b706f28d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6e5ac640be7ca71f389b6842cfeb83c24bd15c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6e5ac640be7ca71f389b6842cfeb83c24bd15c7", "html_url": "https://github.com/rust-lang/rust/commit/f6e5ac640be7ca71f389b6842cfeb83c24bd15c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6e5ac640be7ca71f389b6842cfeb83c24bd15c7/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "765eebf064ae17347f3532791760fc5c2150b5ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/765eebf064ae17347f3532791760fc5c2150b5ea", "html_url": "https://github.com/rust-lang/rust/commit/765eebf064ae17347f3532791760fc5c2150b5ea"}], "stats": {"total": 65, "additions": 52, "deletions": 13}, "files": [{"sha": "72180d60bd6d0b2f14e44d8a27fe48b5a881550a", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f6e5ac640be7ca71f389b6842cfeb83c24bd15c7/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e5ac640be7ca71f389b6842cfeb83c24bd15c7/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=f6e5ac640be7ca71f389b6842cfeb83c24bd15c7", "patch": "@@ -142,6 +142,7 @@ impl<'a, 'tcx> ConstCx<'a, 'tcx> {\n #[derive(Copy, Clone, Debug)]\n enum ValueSource<'a, 'tcx> {\n     Rvalue(&'a Rvalue<'tcx>),\n+    DropAndReplace(&'a Operand<'tcx>),\n     Call {\n         callee: &'a Operand<'tcx>,\n         args: &'a [Operand<'tcx>],\n@@ -298,6 +299,7 @@ trait Qualif {\n     fn in_value(cx: &ConstCx<'_, 'tcx>, source: ValueSource<'_, 'tcx>) -> bool {\n         match source {\n             ValueSource::Rvalue(rvalue) => Self::in_rvalue(cx, rvalue),\n+            ValueSource::DropAndReplace(source) => Self::in_operand(cx, source),\n             ValueSource::Call { callee, args, return_ty } => {\n                 Self::in_call(cx, callee, args, return_ty)\n             }\n@@ -889,6 +891,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n             let target = match body[bb].terminator().kind {\n                 TerminatorKind::Goto { target } |\n                 TerminatorKind::Drop { target, .. } |\n+                TerminatorKind::DropAndReplace { target, .. } |\n                 TerminatorKind::Assert { target, .. } |\n                 TerminatorKind::Call { destination: Some((_, target)), .. } => {\n                     Some(target)\n@@ -900,7 +903,6 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n                 }\n \n                 TerminatorKind::SwitchInt {..} |\n-                TerminatorKind::DropAndReplace { .. } |\n                 TerminatorKind::Resume |\n                 TerminatorKind::Abort |\n                 TerminatorKind::GeneratorDrop |\n@@ -1393,8 +1395,15 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n             for arg in args {\n                 self.visit_operand(arg, location);\n             }\n-        } else if let TerminatorKind::Drop { location: ref place, .. } = *kind {\n-            self.super_terminator_kind(kind, location);\n+        } else if let TerminatorKind::Drop {\n+            location: ref place, ..\n+        } | TerminatorKind::DropAndReplace {\n+            location: ref place, ..\n+        } = *kind {\n+            match *kind {\n+                TerminatorKind::DropAndReplace { .. } => {}\n+                _ => self.super_terminator_kind(kind, location),\n+            }\n \n             // Deny *any* live drops anywhere other than functions.\n             if self.mode.requires_const_checking() {\n@@ -1423,6 +1432,14 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                     }\n                 }\n             }\n+\n+            match *kind {\n+                TerminatorKind::DropAndReplace { ref value, .. } => {\n+                    self.assign(place, ValueSource::DropAndReplace(value), location);\n+                    self.visit_operand(value, location);\n+                }\n+                _ => {}\n+            }\n         } else {\n             // Qualify any operands inside other terminators.\n             self.super_terminator_kind(kind, location);"}, {"sha": "18692dbced679d4dfeb3c1d9102614715f830eb2", "filename": "src/test/ui/consts/const-eval/const_let.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f6e5ac640be7ca71f389b6842cfeb83c24bd15c7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e5ac640be7ca71f389b6842cfeb83c24bd15c7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.rs?ref=f6e5ac640be7ca71f389b6842cfeb83c24bd15c7", "patch": "@@ -9,10 +9,21 @@ impl Drop for FakeNeedsDrop {\n // ok\n const X: FakeNeedsDrop = { let x = FakeNeedsDrop; x };\n \n+// ok (used to incorrectly error, see #62273)\n+const X2: FakeNeedsDrop = { let x; x = FakeNeedsDrop; x };\n+\n // error\n const Y: FakeNeedsDrop = { let mut x = FakeNeedsDrop; x = FakeNeedsDrop; x };\n-//~^ ERROR constant contains unimplemented expression type\n+//~^ ERROR destructors cannot be evaluated at compile-time\n+\n+// error\n+const Y2: FakeNeedsDrop = { let mut x; x = FakeNeedsDrop; x = FakeNeedsDrop; x };\n+//~^ ERROR destructors cannot be evaluated at compile-time\n \n // error\n const Z: () = { let mut x = None; x = Some(FakeNeedsDrop); };\n-//~^ ERROR constant contains unimplemented expression type\n+//~^ ERROR destructors cannot be evaluated at compile-time\n+\n+// error\n+const Z2: () = { let mut x; x = None; x = Some(FakeNeedsDrop); };\n+//~^ ERROR destructors cannot be evaluated at compile-time"}, {"sha": "0a6a222ae2963a30ea5cb396edebb294dbe53d71", "filename": "src/test/ui/consts/const-eval/const_let.stderr", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f6e5ac640be7ca71f389b6842cfeb83c24bd15c7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6e5ac640be7ca71f389b6842cfeb83c24bd15c7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.stderr?ref=f6e5ac640be7ca71f389b6842cfeb83c24bd15c7", "patch": "@@ -1,15 +1,26 @@\n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const_let.rs:13:55\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/const_let.rs:16:32\n    |\n LL | const Y: FakeNeedsDrop = { let mut x = FakeNeedsDrop; x = FakeNeedsDrop; x };\n-   |                                                       ^\n+   |                                ^^^^^ constants cannot evaluate destructors\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const_let.rs:17:35\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/const_let.rs:20:33\n+   |\n+LL | const Y2: FakeNeedsDrop = { let mut x; x = FakeNeedsDrop; x = FakeNeedsDrop; x };\n+   |                                 ^^^^^ constants cannot evaluate destructors\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/const_let.rs:24:21\n    |\n LL | const Z: () = { let mut x = None; x = Some(FakeNeedsDrop); };\n-   |                                   ^\n+   |                     ^^^^^ constants cannot evaluate destructors\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/const_let.rs:28:22\n+   |\n+LL | const Z2: () = { let mut x; x = None; x = Some(FakeNeedsDrop); };\n+   |                      ^^^^^ constants cannot evaluate destructors\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0019`."}]}