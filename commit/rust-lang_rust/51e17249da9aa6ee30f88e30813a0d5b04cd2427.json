{"sha": "51e17249da9aa6ee30f88e30813a0d5b04cd2427", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZTE3MjQ5ZGE5YWE2ZWUzMGY4OGUzMDgxM2EwZDViMDRjZDI0Mjc=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-06-06T13:21:19Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-06-08T23:20:23Z"}, "message": "save_analysis: better handle functions signature", "tree": {"sha": "36e510df5d2358c3a6542e0d7e7102e9fb2fbc63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36e510df5d2358c3a6542e0d7e7102e9fb2fbc63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51e17249da9aa6ee30f88e30813a0d5b04cd2427", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51e17249da9aa6ee30f88e30813a0d5b04cd2427", "html_url": "https://github.com/rust-lang/rust/commit/51e17249da9aa6ee30f88e30813a0d5b04cd2427", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51e17249da9aa6ee30f88e30813a0d5b04cd2427/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b94fdb95cc3dd2bfb2cd6f58fe6f8943cd971e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b94fdb95cc3dd2bfb2cd6f58fe6f8943cd971e6", "html_url": "https://github.com/rust-lang/rust/commit/7b94fdb95cc3dd2bfb2cd6f58fe6f8943cd971e6"}], "stats": {"total": 83, "additions": 48, "deletions": 35}, "files": [{"sha": "4d04159022a1382d9c4fff531d57ce9e88c85454", "filename": "src/librustc_hir_pretty/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/51e17249da9aa6ee30f88e30813a0d5b04cd2427/src%2Flibrustc_hir_pretty%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e17249da9aa6ee30f88e30813a0d5b04cd2427/src%2Flibrustc_hir_pretty%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir_pretty%2Flib.rs?ref=51e17249da9aa6ee30f88e30813a0d5b04cd2427", "patch": "@@ -227,6 +227,18 @@ pub fn path_to_string(segment: &hir::Path<'_>) -> String {\n     to_string(NO_ANN, |s| s.print_path(segment, false))\n }\n \n+pub fn fn_to_string(\n+    decl: &hir::FnDecl<'_>,\n+    header: hir::FnHeader,\n+    name: Option<Symbol>,\n+    generics: &hir::Generics<'_>,\n+    vis: &hir::Visibility<'_>,\n+    arg_names: &[Ident],\n+    body_id: Option<hir::BodyId>,\n+) -> String {\n+    to_string(NO_ANN, |s| s.print_fn(decl, header, name, generics, vis, arg_names, body_id))\n+}\n+\n impl<'a> State<'a> {\n     pub fn cbox(&mut self, u: usize) {\n         self.s.cbox(u);"}, {"sha": "fbde6bfd9aae61f7df61ef26c268ec76e7fd56c4", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/51e17249da9aa6ee30f88e30813a0d5b04cd2427/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e17249da9aa6ee30f88e30813a0d5b04cd2427/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=51e17249da9aa6ee30f88e30813a0d5b04cd2427", "patch": "@@ -20,7 +20,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind as HirDefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, Visitor};\n-use rustc_hir_pretty::{bounds_to_string, generic_params_to_string, ty_to_string};\n+use rustc_hir_pretty::{bounds_to_string, fn_to_string, generic_params_to_string, ty_to_string};\n use rustc_middle::hir::map::Map;\n use rustc_middle::span_bug;\n use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n@@ -276,7 +276,8 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                 }\n                 v.process_generic_params(&generics, &method_data.qualname, hir_id);\n \n-                method_data.value = crate::make_signature(&sig.decl, &generics);\n+                method_data.value =\n+                    fn_to_string(sig.decl, sig.header, Some(ident.name), generics, vis, &[], None);\n                 method_data.sig = sig::method_signature(hir_id, ident, generics, sig, &v.save_ctxt);\n \n                 v.dumper.dump_def(&access_from_vis!(v.save_ctxt, vis, hir_id), method_data);"}, {"sha": "cc0f9b1c06e2be227fa36116a082445407dfd7d8", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/51e17249da9aa6ee30f88e30813a0d5b04cd2427/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e17249da9aa6ee30f88e30813a0d5b04cd2427/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=51e17249da9aa6ee30f88e30813a0d5b04cd2427", "patch": "@@ -17,7 +17,7 @@ use rustc_hir::def::{CtorOf, DefKind as HirDefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::Node;\n-use rustc_hir_pretty::ty_to_string;\n+use rustc_hir_pretty::{fn_to_string, ty_to_string};\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::cstore::ExternCrate;\n use rustc_middle::middle::privacy::AccessLevels;\n@@ -135,7 +135,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n         let def_id = self.tcx.hir().local_def_id(item.hir_id).to_def_id();\n         let qualname = format!(\"::{}\", self.tcx.def_path_str(def_id));\n         match item.kind {\n-            hir::ForeignItemKind::Fn(ref decl, _, ref generics) => {\n+            hir::ForeignItemKind::Fn(ref decl, arg_names, ref generics) => {\n                 filter!(self.span_utils, item.ident.span);\n \n                 Some(Data::DefData(Def {\n@@ -144,7 +144,23 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     span: self.span_from_span(item.ident.span),\n                     name: item.ident.to_string(),\n                     qualname,\n-                    value: make_signature(decl, generics),\n+                    value: fn_to_string(\n+                        decl,\n+                        hir::FnHeader {\n+                            // functions in extern block are implicitly unsafe\n+                            unsafety: hir::Unsafety::Unsafe,\n+                            // functions in extern block cannot be const\n+                            constness: hir::Constness::NotConst,\n+                            abi: self.tcx.hir().get_foreign_abi(item.hir_id),\n+                            // functions in extern block cannot be async\n+                            asyncness: hir::IsAsync::NotAsync,\n+                        },\n+                        Some(item.ident.name),\n+                        generics,\n+                        &item.vis,\n+                        arg_names,\n+                        None,\n+                    ),\n                     parent: None,\n                     children: vec![],\n                     decl_id: None,\n@@ -191,7 +207,15 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     span: self.span_from_span(item.ident.span),\n                     name: item.ident.to_string(),\n                     qualname,\n-                    value: make_signature(&sig.decl, generics),\n+                    value: fn_to_string(\n+                        sig.decl,\n+                        sig.header,\n+                        Some(item.ident.name),\n+                        generics,\n+                        &item.vis,\n+                        &[],\n+                        None,\n+                    ),\n                     parent: None,\n                     children: vec![],\n                     decl_id: None,\n@@ -848,31 +872,6 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n     }\n }\n \n-fn make_signature(decl: &hir::FnDecl<'_>, generics: &hir::Generics<'_>) -> String {\n-    let mut sig = \"fn \".to_owned();\n-    if !generics.params.is_empty() {\n-        sig.push('<');\n-        sig.push_str(\n-            &generics\n-                .params\n-                .iter()\n-                .map(|param| param.name.ident().to_string())\n-                .collect::<Vec<_>>()\n-                .join(\", \"),\n-        );\n-        sig.push_str(\"> \");\n-    }\n-    sig.push('(');\n-    sig.push_str(&decl.inputs.iter().map(ty_to_string).collect::<Vec<_>>().join(\", \"));\n-    sig.push(')');\n-    match decl.output {\n-        hir::FnRetTy::DefaultReturn(_) => sig.push_str(\" -> ()\"),\n-        hir::FnRetTy::Return(ref t) => sig.push_str(&format!(\" -> {}\", ty_to_string(t))),\n-    }\n-\n-    sig\n-}\n-\n // An AST visitor for collecting paths (e.g., the names of structs) and formal\n // variables (idents) from patterns.\n struct PathCollector<'l> {"}, {"sha": "5f337f5f77033ab064d9919dfc4ef16126f41f6b", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/51e17249da9aa6ee30f88e30813a0d5b04cd2427/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e17249da9aa6ee30f88e30813a0d5b04cd2427/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=51e17249da9aa6ee30f88e30813a0d5b04cd2427", "patch": "@@ -324,10 +324,11 @@ impl<'hir> Sig for hir::Ty<'hir> {\n                 let text = format!(\"[{}; {}]\", nested_ty.text, expr);\n                 Ok(replace_text(nested_ty, text))\n             }\n-            hir::TyKind::Typeof(_)\n-            | hir::TyKind::Infer\n-            | hir::TyKind::Def(..)\n-            | hir::TyKind::Err => Err(\"Ty\"),\n+            hir::TyKind::Def(item_id, _) => {\n+                let item = scx.tcx.hir().item(item_id.id);\n+                item.make(offset, Some(item_id.id), scx)\n+            }\n+            hir::TyKind::Typeof(_) | hir::TyKind::Infer | hir::TyKind::Err => Err(\"Ty\"),\n         }\n     }\n }"}]}