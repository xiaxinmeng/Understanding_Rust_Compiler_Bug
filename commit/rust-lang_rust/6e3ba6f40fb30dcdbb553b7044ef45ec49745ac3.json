{"sha": "6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlM2JhNmY0MGZiMzBkY2RiYjU1M2I3MDQ0ZWY0NWVjNDk3NDVhYzM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-22T18:58:21Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-26T18:43:43Z"}, "message": "Tweak some suggestions in `rustc_resolve`", "tree": {"sha": "a22b95e28a1a525d2c78b35ce2324380453c5cba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a22b95e28a1a525d2c78b35ce2324380453c5cba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3", "html_url": "https://github.com/rust-lang/rust/commit/6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82e90d64266b8a4b53935d629786e69610b33f25", "url": "https://api.github.com/repos/rust-lang/rust/commits/82e90d64266b8a4b53935d629786e69610b33f25", "html_url": "https://github.com/rust-lang/rust/commit/82e90d64266b8a4b53935d629786e69610b33f25"}], "stats": {"total": 81, "additions": 56, "deletions": 25}, "files": [{"sha": "8727e280bcb9da5c6b70ed478338d9b844a3376f", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3", "patch": "@@ -383,7 +383,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n         has_self_arg\n     }\n \n-    fn followed_by_brace(&self, span: Span) -> (bool, Option<(Span, String)>) {\n+    fn followed_by_brace(&self, span: Span) -> (bool, Option<Span>) {\n         // HACK(estebank): find a better way to figure out that this was a\n         // parser issue where a struct literal is being used on an expression\n         // where a brace being opened means a block is being started. Look\n@@ -406,18 +406,15 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n             _ => false,\n         };\n         // In case this could be a struct literal that needs to be surrounded\n-        // by parenthesis, find the appropriate span.\n+        // by parentheses, find the appropriate span.\n         let mut i = 0;\n         let mut closing_brace = None;\n         loop {\n             sp = sm.next_point(sp);\n             match sm.span_to_snippet(sp) {\n                 Ok(ref snippet) => {\n                     if snippet == \"}\" {\n-                        let sp = span.to(sp);\n-                        if let Ok(snippet) = sm.span_to_snippet(sp) {\n-                            closing_brace = Some((sp, snippet));\n-                        }\n+                        closing_brace = Some(span.to(sp));\n                         break;\n                     }\n                 }\n@@ -479,17 +476,23 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                     suggested = path_sep(err, &parent);\n                 }\n                 PathSource::Expr(None) if followed_by_brace => {\n-                    if let Some((sp, snippet)) = closing_brace {\n-                        err.span_suggestion(\n-                            sp,\n-                            \"surround the struct literal with parenthesis\",\n-                            format!(\"({})\", snippet),\n+                    if let Some(sp) = closing_brace {\n+                        err.multipart_suggestion(\n+                            \"surround the struct literal with parentheses\",\n+                            vec![\n+                                (sp.shrink_to_lo(), \"(\".to_string()),\n+                                (sp.shrink_to_hi(), \")\".to_string()),\n+                            ],\n                             Applicability::MaybeIncorrect,\n                         );\n                     } else {\n                         err.span_label(\n-                            span, // Note the parenthesis surrounding the suggestion below\n-                            format!(\"did you mean `({} {{ /* fields */ }})`?\", path_str),\n+                            span, // Note the parentheses surrounding the suggestion below\n+                            format!(\n+                                \"you might want to surround a struct literal with parentheses: \\\n+                                 `({} {{ /* fields */ }})`?\",\n+                                path_str\n+                            ),\n                         );\n                     }\n                     suggested = true;\n@@ -516,10 +519,16 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                     err.note(\"if you want the `try` keyword, you need to be in the 2018 edition\");\n                 }\n             }\n-            (Res::Def(DefKind::TyAlias, _), PathSource::Trait(_)) => {\n+            (Res::Def(DefKind::TyAlias, def_id), PathSource::Trait(_)) => {\n                 err.span_label(span, \"type aliases cannot be used as traits\");\n                 if nightly_options::is_nightly_build() {\n-                    err.note(\"did you mean to use a trait alias?\");\n+                    let msg = \"you might have meant to use `#![feature(trait_alias)]` instead of a \\\n+                               `type` alias\";\n+                    if let Some(span) = self.r.definitions.opt_span(def_id) {\n+                        err.span_help(span, msg);\n+                    } else {\n+                        err.help(msg);\n+                    }\n                 }\n             }\n             (Res::Def(DefKind::Mod, _), PathSource::Expr(Some(parent))) => {"}, {"sha": "de2ffc2e5dc1d0e1e704c139262e638096c120d3", "filename": "src/test/ui/codemap_tests/two_files.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.stderr?ref=6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3", "patch": "@@ -4,7 +4,11 @@ error[E0404]: expected trait, found type alias `Bar`\n LL | impl Bar for Baz { }\n    |      ^^^ type aliases cannot be used as traits\n    |\n-   = note: did you mean to use a trait alias?\n+help: you might have meant to use `#![feature(trait_alias)]` instead of a `type` alias\n+  --> $DIR/two_files_data.rs:5:1\n+   |\n+LL | type Bar = dyn Foo;\n+   | ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d4860394259b7e1aeac169d0d628c8926c42cac2", "filename": "src/test/ui/error-codes/E0423.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr?ref=6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3", "patch": "@@ -45,9 +45,12 @@ error[E0423]: expected value, found struct `T`\n   --> $DIR/E0423.rs:14:8\n    |\n LL |     if T {} == T {} { println!(\"Ok\"); }\n-   |        ^---\n-   |        |\n-   |        help: surround the struct literal with parenthesis: `(T {})`\n+   |        ^\n+   |\n+help: surround the struct literal with parentheses\n+   |\n+LL |     if (T {}) == T {} { println!(\"Ok\"); }\n+   |        ^    ^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "16436a9accc8574951e3477f18b7d2274c12c071", "filename": "src/test/ui/resolve/issue-3907.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3/src%2Ftest%2Fui%2Fresolve%2Fissue-3907.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3/src%2Ftest%2Fui%2Fresolve%2Fissue-3907.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-3907.stderr?ref=6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3", "patch": "@@ -4,7 +4,11 @@ error[E0404]: expected trait, found type alias `Foo`\n LL | impl Foo for S {\n    |      ^^^ type aliases cannot be used as traits\n    |\n-   = note: did you mean to use a trait alias?\n+help: you might have meant to use `#![feature(trait_alias)]` instead of a `type` alias\n+  --> $DIR/issue-3907.rs:5:1\n+   |\n+LL | type Foo = dyn issue_3907::Foo;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: possible better candidate is found in another module, you can import it into scope\n    |\n LL | use issue_3907::Foo;"}, {"sha": "41dff2fe542053054c3052affd941957cb735c47", "filename": "src/test/ui/resolve/issue-5035.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3/src%2Ftest%2Fui%2Fresolve%2Fissue-5035.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3/src%2Ftest%2Fui%2Fresolve%2Fissue-5035.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035.stderr?ref=6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3", "patch": "@@ -16,7 +16,11 @@ LL | impl K for isize {}\n    |      type aliases cannot be used as traits\n    |      help: a trait with a similar name exists: `I`\n    |\n-   = note: did you mean to use a trait alias?\n+help: you might have meant to use `#![feature(trait_alias)]` instead of a `type` alias\n+  --> $DIR/issue-5035.rs:2:1\n+   |\n+LL | type K = dyn I;\n+   | ^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2974d08eb23b1976545bc2c6abfa2bfe86195c5d", "filename": "src/test/ui/resolve/unboxed-closure-sugar-nonexistent-trait.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3/src%2Ftest%2Fui%2Fresolve%2Funboxed-closure-sugar-nonexistent-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3/src%2Ftest%2Fui%2Fresolve%2Funboxed-closure-sugar-nonexistent-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Funboxed-closure-sugar-nonexistent-trait.stderr?ref=6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3", "patch": "@@ -10,7 +10,11 @@ error[E0404]: expected trait, found type alias `Typedef`\n LL | fn g<F:Typedef(isize) -> isize>(x: F) {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^ type aliases cannot be used as traits\n    |\n-   = note: did you mean to use a trait alias?\n+help: you might have meant to use `#![feature(trait_alias)]` instead of a `type` alias\n+  --> $DIR/unboxed-closure-sugar-nonexistent-trait.rs:4:1\n+   |\n+LL | type Typedef = isize;\n+   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4cd1169cc1bb81b261620a2fc56aa17c4910b0ce", "filename": "src/test/ui/struct-literal-variant-in-if.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr?ref=6e3ba6f40fb30dcdbb553b7044ef45ec49745ac3", "patch": "@@ -46,9 +46,12 @@ error[E0423]: expected value, found struct variant `E::V`\n   --> $DIR/struct-literal-variant-in-if.rs:10:13\n    |\n LL |     if x == E::V { field } {}\n-   |             ^^^^----------\n-   |             |\n-   |             help: surround the struct literal with parenthesis: `(E::V { field })`\n+   |             ^^^^\n+   |\n+help: surround the struct literal with parentheses\n+   |\n+LL |     if x == (E::V { field }) {}\n+   |             ^              ^\n \n error[E0308]: mismatched types\n   --> $DIR/struct-literal-variant-in-if.rs:10:20"}]}