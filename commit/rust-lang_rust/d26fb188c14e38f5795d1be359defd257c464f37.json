{"sha": "d26fb188c14e38f5795d1be359defd257c464f37", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNmZiMTg4YzE0ZTM4ZjU3OTVkMWJlMzU5ZGVmZDI1N2M0NjRmMzc=", "commit": {"author": {"name": "Lukas Tobias Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-04T20:35:37Z"}, "committer": {"name": "Lukas Tobias Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-04T20:35:37Z"}, "message": "Add some cov marks for qualified_path completion", "tree": {"sha": "7f73a189da87d7321cadf1ff677c845f5dd81d85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f73a189da87d7321cadf1ff677c845f5dd81d85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d26fb188c14e38f5795d1be359defd257c464f37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d26fb188c14e38f5795d1be359defd257c464f37", "html_url": "https://github.com/rust-lang/rust/commit/d26fb188c14e38f5795d1be359defd257c464f37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d26fb188c14e38f5795d1be359defd257c464f37/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b663f1b07233442a3b0b58db453504dcc51ddc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b663f1b07233442a3b0b58db453504dcc51ddc9", "html_url": "https://github.com/rust-lang/rust/commit/5b663f1b07233442a3b0b58db453504dcc51ddc9"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "eedb44873f6e4494356b077cecd2b58ba3e97c98", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d26fb188c14e38f5795d1be359defd257c464f37/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26fb188c14e38f5795d1be359defd257c464f37/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=d26fb188c14e38f5795d1be359defd257c464f37", "patch": "@@ -59,6 +59,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                 hir::ModuleDef::TypeAlias(a) => {\n                     let ty = a.ty(ctx.db);\n                     if let Some(Adt::Enum(e)) = ty.as_adt() {\n+                        cov_mark::hit!(completes_variant_through_alias);\n                         add_enum_variants(ctx, acc, e);\n                     }\n                     ty\n@@ -68,6 +69,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                         Some(it) => it,\n                         None => return,\n                     };\n+                    cov_mark::hit!(completes_primitive_assoc_const);\n                     builtin.ty(ctx.db, module)\n                 }\n                 _ => unreachable!(),\n@@ -96,9 +98,8 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                     if context_module.map_or(false, |m| !item.is_visible_from(ctx.db, m)) {\n                         return None;\n                     }\n-                    match item {\n-                        hir::AssocItem::Function(_) | hir::AssocItem::Const(_) => {}\n-                        hir::AssocItem::TypeAlias(ty) => acc.add_type_alias(ctx, ty),\n+                    if let hir::AssocItem::TypeAlias(ty) = item {\n+                        acc.add_type_alias(ctx, ty)\n                     }\n                     None::<()>\n                 });\n@@ -745,7 +746,7 @@ fn f() {}\n     }\n \n     #[test]\n-    fn completes_self_enum() {\n+    fn completes_variant_through_self() {\n         check(\n             r#\"\n enum Foo {\n@@ -769,6 +770,7 @@ impl Foo {\n \n     #[test]\n     fn completes_primitive_assoc_const() {\n+        cov_mark::check!(completes_primitive_assoc_const);\n         check(\n             r#\"\n //- /lib.rs crate:lib deps:core\n@@ -792,7 +794,8 @@ impl u8 {\n     }\n \n     #[test]\n-    fn completes_through_alias() {\n+    fn completes_variant_through_alias() {\n+        cov_mark::check!(completes_variant_through_alias);\n         check(\n             r#\"\n enum Foo {"}]}