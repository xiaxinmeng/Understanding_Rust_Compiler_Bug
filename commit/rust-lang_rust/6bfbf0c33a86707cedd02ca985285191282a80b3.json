{"sha": "6bfbf0c33a86707cedd02ca985285191282a80b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZmJmMGMzM2E4NjcwN2NlZGQwMmNhOTg1Mjg1MTkxMjgyYTgwYjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-19T23:53:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-19T23:53:02Z"}, "message": "Auto merge of #83308 - Dylan-DPC:rollup-p2j6sy8, r=Dylan-DPC\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #79986 (Only build help popup when it's really needed)\n - #82570 (Add `as_str` method for split whitespace str iterators)\n - #83244 (Fix overflowing length in Vec<ZST> to VecDeque)\n - #83254 (Include output stream in `panic!()` documentation)\n - #83269 (Revert the second deprecation of collections::Bound)\n - #83277 (Mark early otherwise optimization unsound)\n - #83285 (Update LLVM to bring in SIMD updates for WebAssembly)\n - #83297 (Do not ICE on ty::Error as an error must already have been reported)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "3379b7c53a90fdbb23ef8c041ae4a8eb0b1955fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3379b7c53a90fdbb23ef8c041ae4a8eb0b1955fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bfbf0c33a86707cedd02ca985285191282a80b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bfbf0c33a86707cedd02ca985285191282a80b3", "html_url": "https://github.com/rust-lang/rust/commit/6bfbf0c33a86707cedd02ca985285191282a80b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bfbf0c33a86707cedd02ca985285191282a80b3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5f33ec0e0455eefa72fc5567eb1280a4d5ee206", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5f33ec0e0455eefa72fc5567eb1280a4d5ee206", "html_url": "https://github.com/rust-lang/rust/commit/f5f33ec0e0455eefa72fc5567eb1280a4d5ee206"}, {"sha": "51a29cbb23d2146322350fbfde53fe9523e554fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/51a29cbb23d2146322350fbfde53fe9523e554fb", "html_url": "https://github.com/rust-lang/rust/commit/51a29cbb23d2146322350fbfde53fe9523e554fb"}], "stats": {"total": 261, "additions": 211, "deletions": 50}, "files": [{"sha": "b41bf70e88eec973cc32c59958ae1f5a6d107e57", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6bfbf0c33a86707cedd02ca985285191282a80b3/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfbf0c33a86707cedd02ca985285191282a80b3/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=6bfbf0c33a86707cedd02ca985285191282a80b3", "patch": "@@ -10,6 +10,7 @@ use crate::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_hir as ast;\n use rustc_hir::def_id::DefId;\n+use rustc_span::DUMMY_SP;\n use rustc_target::spec::abi;\n use std::iter;\n \n@@ -499,11 +500,14 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n \n     // FIXME(oli-obk): once const generics can have generic types, this assertion\n     // will likely get triggered. Move to `normalize_erasing_regions` at that point.\n-    assert_eq!(\n-        tcx.erase_regions(a.ty),\n-        tcx.erase_regions(b.ty),\n-        \"cannot relate constants of different types\"\n-    );\n+    let a_ty = tcx.erase_regions(a.ty);\n+    let b_ty = tcx.erase_regions(b.ty);\n+    if a_ty != b_ty {\n+        relation.tcx().sess.delay_span_bug(\n+            DUMMY_SP,\n+            &format!(\"cannot relate constants of different types: {} != {}\", a_ty, b_ty),\n+        );\n+    }\n \n     let eagerly_eval = |x: &'tcx ty::Const<'tcx>| x.eval(tcx, relation.param_env());\n     let a = eagerly_eval(a);"}, {"sha": "f7ea9faec47283cf2903062fedd031d0f9c4a440", "filename": "compiler/rustc_mir/src/transform/early_otherwise_branch.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6bfbf0c33a86707cedd02ca985285191282a80b3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfbf0c33a86707cedd02ca985285191282a80b3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs?ref=6bfbf0c33a86707cedd02ca985285191282a80b3", "patch": "@@ -26,6 +26,11 @@ pub struct EarlyOtherwiseBranch;\n \n impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        //  FIXME(#78496)\n+        if !tcx.sess.opts.debugging_opts.unsound_mir_opts {\n+            return;\n+        }\n+\n         if tcx.sess.mir_opt_level() < 3 {\n             return;\n         }"}, {"sha": "7a0de74eb239d8b4261a9bca23647a208da507f7", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6bfbf0c33a86707cedd02ca985285191282a80b3/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfbf0c33a86707cedd02ca985285191282a80b3/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=6bfbf0c33a86707cedd02ca985285191282a80b3", "patch": "@@ -2783,27 +2783,26 @@ impl<T> From<Vec<T>> for VecDeque<T> {\n     /// This avoids reallocating where possible, but the conditions for that are\n     /// strict, and subject to change, and so shouldn't be relied upon unless the\n     /// `Vec<T>` came from `From<VecDeque<T>>` and hasn't been reallocated.\n-    fn from(other: Vec<T>) -> Self {\n-        unsafe {\n-            let mut other = ManuallyDrop::new(other);\n-            let other_buf = other.as_mut_ptr();\n-            let mut buf = RawVec::from_raw_parts(other_buf, other.capacity());\n-            let len = other.len();\n-\n-            // We need to extend the buf if it's not a power of two, too small\n-            // or doesn't have at least one free space.\n-            // We check if `T` is a ZST in the first condition,\n-            // because `usize::MAX` (the capacity returned by `capacity()` for ZST)\n-            // is not a power of two and thus it'll always try\n-            // to reserve more memory which will panic for ZST (rust-lang/rust#78532)\n-            if (!buf.capacity().is_power_of_two() && mem::size_of::<T>() != 0)\n-                || (buf.capacity() < (MINIMUM_CAPACITY + 1))\n-                || (buf.capacity() == len)\n-            {\n-                let cap = cmp::max(buf.capacity() + 1, MINIMUM_CAPACITY + 1).next_power_of_two();\n-                buf.reserve_exact(len, cap - len);\n+    fn from(mut other: Vec<T>) -> Self {\n+        let len = other.len();\n+        if mem::size_of::<T>() == 0 {\n+            // There's no actual allocation for ZSTs to worry about capacity,\n+            // but `VecDeque` can't handle as much length as `Vec`.\n+            assert!(len < MAXIMUM_ZST_CAPACITY, \"capacity overflow\");\n+        } else {\n+            // We need to resize if the capacity is not a power of two, too small or\n+            // doesn't have at least one free space. We do this while it's still in\n+            // the `Vec` so the items will drop on panic.\n+            let min_cap = cmp::max(MINIMUM_CAPACITY, len) + 1;\n+            let cap = cmp::max(min_cap, other.capacity()).next_power_of_two();\n+            if other.capacity() != cap {\n+                other.reserve_exact(cap - len);\n             }\n+        }\n \n+        unsafe {\n+            let (other_buf, len, capacity) = other.into_raw_parts();\n+            let buf = RawVec::from_raw_parts(other_buf, capacity);\n             VecDeque { tail: 0, head: len, buf }\n         }\n     }"}, {"sha": "6116cfe1d0110bdd33e0087e712a100ce5a066e7", "filename": "library/alloc/src/collections/vec_deque/tests.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6bfbf0c33a86707cedd02ca985285191282a80b3/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfbf0c33a86707cedd02ca985285191282a80b3/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs?ref=6bfbf0c33a86707cedd02ca985285191282a80b3", "patch": "@@ -457,6 +457,21 @@ fn test_from_vec() {\n             assert!(vd.into_iter().eq(vec));\n         }\n     }\n+\n+    let vec = Vec::from([(); MAXIMUM_ZST_CAPACITY - 1]);\n+    let vd = VecDeque::from(vec.clone());\n+    assert!(vd.cap().is_power_of_two());\n+    assert_eq!(vd.len(), vec.len());\n+}\n+\n+#[test]\n+#[should_panic = \"capacity overflow\"]\n+fn test_from_vec_zst_overflow() {\n+    use crate::vec::Vec;\n+    let vec = Vec::from([(); MAXIMUM_ZST_CAPACITY]);\n+    let vd = VecDeque::from(vec.clone()); // no room for +1\n+    assert!(vd.cap().is_power_of_two());\n+    assert_eq!(vd.len(), vec.len());\n }\n \n #[test]"}, {"sha": "0337892b9e8e18f9abd465682673e8189827b3a3", "filename": "library/core/src/iter/adapters/filter.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6bfbf0c33a86707cedd02ca985285191282a80b3/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfbf0c33a86707cedd02ca985285191282a80b3/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter.rs?ref=6bfbf0c33a86707cedd02ca985285191282a80b3", "patch": "@@ -13,7 +13,8 @@ use crate::ops::Try;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Filter<I, P> {\n-    iter: I,\n+    // Used for `SplitWhitespace` and `SplitAsciiWhitespace` `as_str` methods\n+    pub(crate) iter: I,\n     predicate: P,\n }\n impl<I, P> Filter<I, P> {"}, {"sha": "2a4b7efd5e665e4ad8504d26d012478ec749e0d6", "filename": "library/core/src/iter/adapters/map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6bfbf0c33a86707cedd02ca985285191282a80b3/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfbf0c33a86707cedd02ca985285191282a80b3/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs?ref=6bfbf0c33a86707cedd02ca985285191282a80b3", "patch": "@@ -57,7 +57,8 @@ use crate::ops::Try;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Map<I, F> {\n-    iter: I,\n+    // Used for `SplitWhitespace` and `SplitAsciiWhitespace` `as_str` methods\n+    pub(crate) iter: I,\n     f: F,\n }\n "}, {"sha": "5127a16bbfd86ed0f8dc164e1b5ef36e94e05490", "filename": "library/core/src/macros/panic.md", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6bfbf0c33a86707cedd02ca985285191282a80b3/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md", "raw_url": "https://github.com/rust-lang/rust/raw/6bfbf0c33a86707cedd02ca985285191282a80b3/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md?ref=6bfbf0c33a86707cedd02ca985285191282a80b3", "patch": "@@ -9,11 +9,15 @@ tests. `panic!` is closely tied with the `unwrap` method of both\n [`Option`][ounwrap] and [`Result`][runwrap] enums. Both implementations call\n `panic!` when they are set to [`None`] or [`Err`] variants.\n \n-This macro is used to inject panic into a Rust thread, causing the thread to\n-panic entirely. This macro panics with a string and uses the [`format!`] syntax\n-for building the message.\n-\n-Each thread's panic can be reaped as the [`Box`]`<`[`Any`]`>` type,\n+When using `panic!()` you can specify a string payload, that is built using\n+the [`format!`] syntax. That payload is used when injecting the panic into\n+the calling Rust thread, causing the thread to panic entirely.\n+\n+The behavior of the default `std` hook, i.e. the code that runs directly\n+after the panic is invoked, is to print the message payload to\n+`stderr` along with the file/line/column information of the `panic!()`\n+call. You can override the panic hook using [`std::panic::set_hook()`].\n+Inside the hook a panic can be accessed as a `&dyn Any + Send`,\n which contains either a `&str` or `String` for regular `panic!()` invocations.\n To panic with a value of another other type, [`panic_any`] can be used.\n \n@@ -26,6 +30,7 @@ See also the macro [`compile_error!`], for raising errors during compilation.\n \n [ounwrap]: Option::unwrap\n [runwrap]: Result::unwrap\n+[`std::panic::set_hook()`]: ../std/panic/fn.set_hook.html\n [`panic_any`]: ../std/panic/fn.panic_any.html\n [`Box`]: ../std/boxed/struct.Box.html\n [`Any`]: crate::any::Any"}, {"sha": "c82b76df6ff10299c4bcd675ae868393aa50f892", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6bfbf0c33a86707cedd02ca985285191282a80b3/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfbf0c33a86707cedd02ca985285191282a80b3/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=6bfbf0c33a86707cedd02ca985285191282a80b3", "patch": "@@ -335,9 +335,11 @@ pub struct Split<'a, T: 'a, P>\n where\n     P: FnMut(&T) -> bool,\n {\n-    v: &'a [T],\n+    // Used for `SplitWhitespace` and `SplitAsciiWhitespace` `as_str` methods\n+    pub(crate) v: &'a [T],\n     pred: P,\n-    finished: bool,\n+    // Used for `SplitAsciiWhitespace` `as_str` method\n+    pub(crate) finished: bool,\n }\n \n impl<'a, T: 'a, P: FnMut(&T) -> bool> Split<'a, T, P> {"}, {"sha": "4eac017f9153c74e1c9713910fe53b0e9f3b550b", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/6bfbf0c33a86707cedd02ca985285191282a80b3/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfbf0c33a86707cedd02ca985285191282a80b3/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=6bfbf0c33a86707cedd02ca985285191282a80b3", "patch": "@@ -1200,6 +1200,30 @@ impl<'a> DoubleEndedIterator for SplitWhitespace<'a> {\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl FusedIterator for SplitWhitespace<'_> {}\n \n+impl<'a> SplitWhitespace<'a> {\n+    /// Returns remainder of the splitted string\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_whitespace_as_str)]\n+    ///\n+    /// let mut split = \"Mary had a little lamb\".split_whitespace();\n+    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    ///\n+    /// split.next();\n+    /// assert_eq!(split.as_str(), \"had a little lamb\");\n+    ///\n+    /// split.by_ref().for_each(drop);\n+    /// assert_eq!(split.as_str(), \"\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"str_split_whitespace_as_str\", issue = \"77998\")]\n+    pub fn as_str(&self) -> &'a str {\n+        self.inner.iter.as_str()\n+    }\n+}\n+\n #[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]\n impl<'a> Iterator for SplitAsciiWhitespace<'a> {\n     type Item = &'a str;\n@@ -1231,6 +1255,35 @@ impl<'a> DoubleEndedIterator for SplitAsciiWhitespace<'a> {\n #[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]\n impl FusedIterator for SplitAsciiWhitespace<'_> {}\n \n+impl<'a> SplitAsciiWhitespace<'a> {\n+    /// Returns remainder of the splitted string\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_whitespace_as_str)]\n+    ///\n+    /// let mut split = \"Mary had a little lamb\".split_ascii_whitespace();\n+    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    ///\n+    /// split.next();\n+    /// assert_eq!(split.as_str(), \"had a little lamb\");\n+    ///\n+    /// split.by_ref().for_each(drop);\n+    /// assert_eq!(split.as_str(), \"\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"str_split_whitespace_as_str\", issue = \"77998\")]\n+    pub fn as_str(&self) -> &'a str {\n+        if self.inner.iter.iter.finished {\n+            return \"\";\n+        }\n+\n+        // SAFETY: Slice is created from str.\n+        unsafe { crate::str::from_utf8_unchecked(&self.inner.iter.iter.v) }\n+    }\n+}\n+\n #[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n impl<'a, P: Pattern<'a>> Iterator for SplitInclusive<'a, P> {\n     type Item = &'a str;"}, {"sha": "8cda601edd14112a778f3262cb363b55dfc0577e", "filename": "library/std/src/collections/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6bfbf0c33a86707cedd02ca985285191282a80b3/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfbf0c33a86707cedd02ca985285191282a80b3/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs?ref=6bfbf0c33a86707cedd02ca985285191282a80b3", "patch": "@@ -401,9 +401,10 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(reason = \"moved to `std::ops::Bound`\", since = \"1.52.0\")]\n+// FIXME(#82080) The deprecation here is only theoretical, and does not actually produce a warning.\n+#[rustc_deprecated(reason = \"moved to `std::ops::Bound`\", since = \"1.26.0\")]\n #[doc(hidden)]\n-pub type Bound<T> = crate::ops::Bound<T>;\n+pub use crate::ops::Bound;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use alloc_crate::collections::{binary_heap, btree_map, btree_set};"}, {"sha": "f1ecaaa619c65d54afdf8d13b9939269eb5fe6e0", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6bfbf0c33a86707cedd02ca985285191282a80b3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/6bfbf0c33a86707cedd02ca985285191282a80b3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=6bfbf0c33a86707cedd02ca985285191282a80b3", "patch": "@@ -1,3 +1,4 @@\n+// ignore-tidy-filelength\n // Local js definitions:\n /* global addClass, getSettingValue, hasClass */\n /* global onEach, onEachLazy, hasOwnProperty, removeClass, updateLocalStorage */\n@@ -374,28 +375,35 @@ function defocusSearchBar() {\n         }\n     }\n \n-    function getHelpElement() {\n-        buildHelperPopup();\n+    function getHelpElement(build) {\n+        if (build !== false) {\n+            buildHelperPopup();\n+        }\n         return document.getElementById(\"help\");\n     }\n \n     function displayHelp(display, ev, help) {\n-        help = help ? help : getHelpElement();\n         if (display === true) {\n+            help = help ? help : getHelpElement(true);\n             if (hasClass(help, \"hidden\")) {\n                 ev.preventDefault();\n                 removeClass(help, \"hidden\");\n                 addClass(document.body, \"blur\");\n             }\n-        } else if (hasClass(help, \"hidden\") === false) {\n-            ev.preventDefault();\n-            addClass(help, \"hidden\");\n-            removeClass(document.body, \"blur\");\n+        } else {\n+            // No need to build the help popup if we want to hide it in case it hasn't been\n+            // built yet...\n+            help = help ? help : getHelpElement(false);\n+            if (help && hasClass(help, \"hidden\") === false) {\n+                ev.preventDefault();\n+                addClass(help, \"hidden\");\n+                removeClass(document.body, \"blur\");\n+            }\n         }\n     }\n \n     function handleEscape(ev) {\n-        var help = getHelpElement();\n+        var help = getHelpElement(false);\n         var search = getSearchElement();\n         if (hasClass(help, \"hidden\") === false) {\n             displayHelp(false, ev, help);\n@@ -558,6 +566,7 @@ function defocusSearchBar() {\n     }());\n \n     document.addEventListener(\"click\", function(ev) {\n+        var helpElem = getHelpElement(false);\n         if (hasClass(ev.target, \"help-button\")) {\n             displayHelp(true, ev);\n         } else if (hasClass(ev.target, \"collapse-toggle\")) {\n@@ -566,11 +575,10 @@ function defocusSearchBar() {\n             collapseDocs(ev.target.parentNode, \"toggle\");\n         } else if (ev.target.tagName === \"SPAN\" && hasClass(ev.target.parentNode, \"line-numbers\")) {\n             handleSourceHighlight(ev);\n-        } else if (hasClass(getHelpElement(), \"hidden\") === false) {\n-            var help = getHelpElement();\n-            var is_inside_help_popup = ev.target !== help && help.contains(ev.target);\n+        } else if (helpElem && hasClass(helpElem, \"hidden\") === false) {\n+            var is_inside_help_popup = ev.target !== helpElem && helpElem.contains(ev.target);\n             if (is_inside_help_popup === false) {\n-                addClass(help, \"hidden\");\n+                addClass(helpElem, \"hidden\");\n                 removeClass(document.body, \"blur\");\n             }\n         } else {"}, {"sha": "c3a26cbf6e73f2c5f8d03cee1f151d90a266ef3c", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=6bfbf0c33a86707cedd02ca985285191282a80b3", "patch": "@@ -1 +1 @@\n-Subproject commit 62a1ddde22c267249eda72184520a21ad2052f0b\n+Subproject commit c3a26cbf6e73f2c5f8d03cee1f151d90a266ef3c"}, {"sha": "b2caf7d7b8fde4353c63dd1829f6ecc08cbb2ba6", "filename": "src/test/mir-opt/early_otherwise_branch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfbf0c33a86707cedd02ca985285191282a80b3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfbf0c33a86707cedd02ca985285191282a80b3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.rs?ref=6bfbf0c33a86707cedd02ca985285191282a80b3", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z mir-opt-level=4\n+// compile-flags: -Z mir-opt-level=4 -Z unsound-mir-opts\n // EMIT_MIR early_otherwise_branch.opt1.EarlyOtherwiseBranch.diff\n fn opt1(x: Option<u32>, y: Option<u32>) -> u32 {\n     match (x, y) {"}, {"sha": "8527c01d756589ec0446deaee306eee29886eb3c", "filename": "src/test/mir-opt/early_otherwise_branch_3_element_tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bfbf0c33a86707cedd02ca985285191282a80b3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfbf0c33a86707cedd02ca985285191282a80b3/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.rs?ref=6bfbf0c33a86707cedd02ca985285191282a80b3", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z mir-opt-level=4\n+// compile-flags: -Z mir-opt-level=4 -Z unsound-mir-opts\n \n // EMIT_MIR early_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff\n fn opt1(x: Option<u32>, y: Option<u32>, z: Option<u32>) -> u32 {"}, {"sha": "4a7534e3713818de3996da38970f8908ab6c2763", "filename": "src/test/ui/const-generics/type_mismatch.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6bfbf0c33a86707cedd02ca985285191282a80b3/src%2Ftest%2Fui%2Fconst-generics%2Ftype_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfbf0c33a86707cedd02ca985285191282a80b3/src%2Ftest%2Fui%2Fconst-generics%2Ftype_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype_mismatch.rs?ref=6bfbf0c33a86707cedd02ca985285191282a80b3", "patch": "@@ -0,0 +1,9 @@\n+fn foo<const N: usize>() -> [u8; N] {\n+    bar::<N>() //~ ERROR mismatched types\n+}\n+\n+fn bar<const N: u8>() -> [u8; N] {}\n+//~^ ERROR mismatched types\n+//~| ERROR mismatched types\n+\n+fn main() {}"}, {"sha": "f5053e4c8c8d3f348d55d25bca1812f8ac6b759e", "filename": "src/test/ui/const-generics/type_mismatch.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6bfbf0c33a86707cedd02ca985285191282a80b3/src%2Ftest%2Fui%2Fconst-generics%2Ftype_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bfbf0c33a86707cedd02ca985285191282a80b3/src%2Ftest%2Fui%2Fconst-generics%2Ftype_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype_mismatch.stderr?ref=6bfbf0c33a86707cedd02ca985285191282a80b3", "patch": "@@ -0,0 +1,23 @@\n+error[E0308]: mismatched types\n+  --> $DIR/type_mismatch.rs:2:11\n+   |\n+LL |     bar::<N>()\n+   |           ^ expected `u8`, found `usize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type_mismatch.rs:5:31\n+   |\n+LL | fn bar<const N: u8>() -> [u8; N] {}\n+   |                               ^ expected `usize`, found `u8`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type_mismatch.rs:5:26\n+   |\n+LL | fn bar<const N: u8>() -> [u8; N] {}\n+   |    ---                   ^^^^^^^ expected array `[u8; N]`, found `()`\n+   |    |\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "5933701808b3ef1418f54d413eff491e3203c9a1", "filename": "src/test/ui/const-generics/type_not_in_scope.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6bfbf0c33a86707cedd02ca985285191282a80b3/src%2Ftest%2Fui%2Fconst-generics%2Ftype_not_in_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bfbf0c33a86707cedd02ca985285191282a80b3/src%2Ftest%2Fui%2Fconst-generics%2Ftype_not_in_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype_not_in_scope.rs?ref=6bfbf0c33a86707cedd02ca985285191282a80b3", "patch": "@@ -0,0 +1,11 @@\n+impl X {\n+    //~^ ERROR cannot find type\n+    fn getn<const N: usize>() -> [u8; N] {\n+        getn::<N>()\n+    }\n+}\n+fn getn<const N: cfg_attr>() -> [u8; N] {}\n+//~^ ERROR expected type, found built-in attribute `cfg_attr`\n+//~| ERROR mismatched types\n+\n+fn main() {}"}, {"sha": "16796acb3d2855a7d62ec7e3ed3d74ed6b5b3582", "filename": "src/test/ui/const-generics/type_not_in_scope.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6bfbf0c33a86707cedd02ca985285191282a80b3/src%2Ftest%2Fui%2Fconst-generics%2Ftype_not_in_scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bfbf0c33a86707cedd02ca985285191282a80b3/src%2Ftest%2Fui%2Fconst-generics%2Ftype_not_in_scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype_not_in_scope.stderr?ref=6bfbf0c33a86707cedd02ca985285191282a80b3", "patch": "@@ -0,0 +1,24 @@\n+error[E0412]: cannot find type `X` in this scope\n+  --> $DIR/type_not_in_scope.rs:1:6\n+   |\n+LL | impl X {\n+   |      ^ not found in this scope\n+\n+error[E0573]: expected type, found built-in attribute `cfg_attr`\n+  --> $DIR/type_not_in_scope.rs:7:18\n+   |\n+LL | fn getn<const N: cfg_attr>() -> [u8; N] {}\n+   |                  ^^^^^^^^ not a type\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type_not_in_scope.rs:7:33\n+   |\n+LL | fn getn<const N: cfg_attr>() -> [u8; N] {}\n+   |    ----                         ^^^^^^^ expected array `[u8; N]`, found `()`\n+   |    |\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0308, E0412, E0573.\n+For more information about an error, try `rustc --explain E0308`."}]}