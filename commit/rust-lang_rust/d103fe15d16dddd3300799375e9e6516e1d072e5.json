{"sha": "d103fe15d16dddd3300799375e9e6516e1d072e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMDNmZTE1ZDE2ZGRkZDMzMDA3OTkzNzVlOWU2NTE2ZTFkMDcyZTU=", "commit": {"author": {"name": "Jake Vossen", "email": "jake@vossen.dev", "date": "2020-09-30T16:12:48Z"}, "committer": {"name": "Jake Vossen", "email": "jake@vossen.dev", "date": "2020-09-30T16:12:48Z"}, "message": "Fixed more write literals after master merge", "tree": {"sha": "6043e7f8ef8f64bc0009643796e767a8457ffd4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6043e7f8ef8f64bc0009643796e767a8457ffd4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d103fe15d16dddd3300799375e9e6516e1d072e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d103fe15d16dddd3300799375e9e6516e1d072e5", "html_url": "https://github.com/rust-lang/rust/commit/d103fe15d16dddd3300799375e9e6516e1d072e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d103fe15d16dddd3300799375e9e6516e1d072e5/comments", "author": {"login": "jakevossen5", "id": 16298666, "node_id": "MDQ6VXNlcjE2Mjk4NjY2", "avatar_url": "https://avatars.githubusercontent.com/u/16298666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakevossen5", "html_url": "https://github.com/jakevossen5", "followers_url": "https://api.github.com/users/jakevossen5/followers", "following_url": "https://api.github.com/users/jakevossen5/following{/other_user}", "gists_url": "https://api.github.com/users/jakevossen5/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakevossen5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakevossen5/subscriptions", "organizations_url": "https://api.github.com/users/jakevossen5/orgs", "repos_url": "https://api.github.com/users/jakevossen5/repos", "events_url": "https://api.github.com/users/jakevossen5/events{/privacy}", "received_events_url": "https://api.github.com/users/jakevossen5/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakevossen5", "id": 16298666, "node_id": "MDQ6VXNlcjE2Mjk4NjY2", "avatar_url": "https://avatars.githubusercontent.com/u/16298666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakevossen5", "html_url": "https://github.com/jakevossen5", "followers_url": "https://api.github.com/users/jakevossen5/followers", "following_url": "https://api.github.com/users/jakevossen5/following{/other_user}", "gists_url": "https://api.github.com/users/jakevossen5/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakevossen5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakevossen5/subscriptions", "organizations_url": "https://api.github.com/users/jakevossen5/orgs", "repos_url": "https://api.github.com/users/jakevossen5/repos", "events_url": "https://api.github.com/users/jakevossen5/events{/privacy}", "received_events_url": "https://api.github.com/users/jakevossen5/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "916d23614b462dbaa60cdb5540a139f5db1fe950", "url": "https://api.github.com/repos/rust-lang/rust/commits/916d23614b462dbaa60cdb5540a139f5db1fe950", "html_url": "https://github.com/rust-lang/rust/commit/916d23614b462dbaa60cdb5540a139f5db1fe950"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "c4246fa1d958168275f2358d4e1c810f065c7604", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d103fe15d16dddd3300799375e9e6516e1d072e5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d103fe15d16dddd3300799375e9e6516e1d072e5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=d103fe15d16dddd3300799375e9e6516e1d072e5", "patch": "@@ -647,11 +647,11 @@ pub trait PrettyPrinter<'tcx>:\n                 p!(write(\"[\"));\n                 match movability {\n                     hir::Movability::Movable => {}\n-                    hir::Movability::Static => p!(write(\"static \")),\n+                    hir::Movability::Static => p!(\"static \"),\n                 }\n \n                 if !self.tcx().sess.verbose() {\n-                    p!(write(\"generator\"));\n+                    p!(\"generator\");\n                     // FIXME(eddyb) should use `def_span`.\n                     if let Some(did) = did.as_local() {\n                         let hir_id = self.tcx().hir().local_def_id_to_hir_id(did);\n@@ -664,15 +664,15 @@ pub trait PrettyPrinter<'tcx>:\n                     p!(print_def_path(did, substs));\n                     if substs.as_generator().is_valid() {\n                         // Search for the first inference variable\n-                        p!(write(\" upvar_tys=(\"));\n+                        p!(\" upvar_tys=(\");\n                         let mut uninferred_ty =\n                             substs.as_generator().upvar_tys().filter(|ty| ty.is_ty_infer());\n                         if uninferred_ty.next().is_some() {\n                             p!(write(\"unavailable\"));\n                         } else {\n                             self = self.comma_sep(substs.as_generator().upvar_tys())?;\n                         }\n-                        p!(write(\")\"));\n+                        p!(\")\");\n                     }\n                 }\n \n@@ -693,7 +693,7 @@ pub trait PrettyPrinter<'tcx>:\n                     if let Some(did) = did.as_local() {\n                         let hir_id = self.tcx().hir().local_def_id_to_hir_id(did);\n                         if self.tcx().sess.opts.debugging_opts.span_free_formats {\n-                            p!(write(\"@\"), print_def_path(did.to_def_id(), substs));\n+                            p!(\"@\", print_def_path(did.to_def_id(), substs));\n                         } else {\n                             let span = self.tcx().hir().span(hir_id);\n                             p!(write(\"@{}\", self.tcx().sess.source_map().span_to_string(span)));\n@@ -710,20 +710,20 @@ pub trait PrettyPrinter<'tcx>:\n                         if uninferred_ty.next().is_some() {\n                             // If the upvar substs contain an inference variable we haven't\n                             // finished capture analysis.\n-                            p!(write(\" closure_substs=(unavailable)\"));\n+                            p!(\" closure_substs=(unavailable)\");\n                         } else {\n-                            p!(write(\" closure_kind_ty=\"), print(substs.as_closure().kind_ty()));\n+                            p!(\" closure_kind_ty=\", print(substs.as_closure().kind_ty()));\n                             p!(\n-                                write(\" closure_sig_as_fn_ptr_ty=\"),\n+                                \" closure_sig_as_fn_ptr_ty=\",\n                                 print(substs.as_closure().sig_as_fn_ptr_ty())\n                             );\n-                            p!(write(\" upvar_tys=(\"));\n+                            p!(\" upvar_tys=(\");\n                             self = self.comma_sep(substs.as_closure().upvar_tys())?;\n-                            p!(write(\")\"));\n+                            p!(\")\");\n                         }\n                     }\n                 }\n-                p!(write(\"]\"));\n+                p!(\"]\");\n             }\n             ty::Array(ty, sz) => {\n                 p!(\"[\", print(ty), \"; \");"}]}