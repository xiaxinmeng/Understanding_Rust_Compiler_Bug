{"sha": "6cade3f6d8ad7bb5a11b1910689b25f709c12502", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjYWRlM2Y2ZDhhZDdiYjVhMTFiMTkxMDY4OWIyNWY3MDljMTI1MDI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-24T10:41:25Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-24T10:41:25Z"}, "message": "Runnig tests somehow", "tree": {"sha": "96aea3209cc310462c37708d5623fe1f1d667634", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96aea3209cc310462c37708d5623fe1f1d667634"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cade3f6d8ad7bb5a11b1910689b25f709c12502", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cade3f6d8ad7bb5a11b1910689b25f709c12502", "html_url": "https://github.com/rust-lang/rust/commit/6cade3f6d8ad7bb5a11b1910689b25f709c12502", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cade3f6d8ad7bb5a11b1910689b25f709c12502/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89e56c364f3d0a9d5a12ae488185abc1ea69df4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/89e56c364f3d0a9d5a12ae488185abc1ea69df4a", "html_url": "https://github.com/rust-lang/rust/commit/89e56c364f3d0a9d5a12ae488185abc1ea69df4a"}], "stats": {"total": 181, "additions": 149, "deletions": 32}, "files": [{"sha": "a5dd523df5259474a2c24cbb9a1fd04960fd24c6", "filename": "code/.vscode/launch.json", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6cade3f6d8ad7bb5a11b1910689b25f709c12502/code%2F.vscode%2Flaunch.json", "raw_url": "https://github.com/rust-lang/rust/raw/6cade3f6d8ad7bb5a11b1910689b25f709c12502/code%2F.vscode%2Flaunch.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2F.vscode%2Flaunch.json?ref=6cade3f6d8ad7bb5a11b1910689b25f709c12502", "patch": "@@ -10,6 +10,9 @@\n             \"request\": \"launch\",\n             \"runtimeExecutable\": \"${execPath}\",\n             \"args\": [\"--extensionDevelopmentPath='./'\"],\n+            \"env\": {\n+                \"RUST_LOG\": \"m=trace\"\n+            },\n             \"stopOnEntry\": false,\n             \"sourceMaps\": true,\n             \"outFiles\": [ \"./out/src/**/*.js\" ],"}, {"sha": "e1cfa4deb6a9efa4f697efa04708288770ce30dd", "filename": "code/.vscode/tasks.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cade3f6d8ad7bb5a11b1910689b25f709c12502/code%2F.vscode%2Ftasks.json", "raw_url": "https://github.com/rust-lang/rust/raw/6cade3f6d8ad7bb5a11b1910689b25f709c12502/code%2F.vscode%2Ftasks.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2F.vscode%2Ftasks.json?ref=6cade3f6d8ad7bb5a11b1910689b25f709c12502", "patch": "@@ -21,7 +21,7 @@\n     \"showOutput\": \"silent\",\n \n     // we run the custom script \"compile\" as defined in package.json\n-    \"args\": [\"run\", \"compile\", \"--loglevel\", \"silent\"],\n+    \"args\": [\"run\", \"compile\",],\n \n     // The tsc compiler is started in watching mode\n     \"isBackground\": true,"}, {"sha": "1ed9dfabe230f8ab75d3d2df4d566a5bd357b0b5", "filename": "code/package.json", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6cade3f6d8ad7bb5a11b1910689b25f709c12502/code%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/6cade3f6d8ad7bb5a11b1910689b25f709c12502/code%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Fpackage.json?ref=6cade3f6d8ad7bb5a11b1910689b25f709c12502", "patch": "@@ -28,6 +28,28 @@\n     \"onLanguage:rust\"\n   ],\n   \"contributes\": {\n+    \"taskDefinitions\": [\n+      {\n+        \"type\": \"cargo\",\n+        \"required\": [\n+          \"command\"\n+        ],\n+        \"properties\": {\n+          \"label\": {\n+            \"type\": \"string\"\n+          },\n+          \"command\": {\n+            \"type\": \"string\"\n+          },\n+          \"args\": {\n+            \"type\": \"array\"\n+          },\n+          \"env\": {\n+            \"type\": \"object\"\n+          }\n+        }\n+      }\n+    ],\n     \"commands\": [\n       {\n         \"command\": \"libsyntax-rust.syntaxTree\",\n@@ -48,6 +70,10 @@\n       {\n         \"command\": \"libsyntax-rust.joinLines\",\n         \"title\": \"Rust Join Lines\"\n+      },\n+      {\n+        \"command\": \"libsyntax-rust.run\",\n+        \"title\": \"Rust Run\"\n       }\n     ],\n     \"keybindings\": ["}, {"sha": "c25e8cb611bab538063c861320734087931be1e7", "filename": "code/src/extension.ts", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6cade3f6d8ad7bb5a11b1910689b25f709c12502/code%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6cade3f6d8ad7bb5a11b1910689b25f709c12502/code%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Fsrc%2Fextension.ts?ref=6cade3f6d8ad7bb5a11b1910689b25f709c12502", "patch": "@@ -81,6 +81,11 @@ export function activate(context: vscode.ExtensionContext) {\n         let e = await vscode.window.showTextDocument(doc)\n         e.revealRange(range, vscode.TextEditorRevealType.InCenter)\n     })\n+    console.log(\"ping\")\n+    registerCommand('libsyntax-rust.run', async (cmd: ProcessSpec) => {\n+        let task = createTask(cmd)\n+        await vscode.tasks.executeTask(task)\n+    })\n \n     dispose(vscode.workspace.registerTextDocumentContentProvider(\n         'libsyntax-rust',\n@@ -265,3 +270,40 @@ interface Decoration {\n     range: lc.Range,\n     tag: string,\n }\n+\n+interface ProcessSpec {\n+    bin: string;\n+    args: string[];\n+    env: { [key: string]: string };\n+}\n+\n+interface CargoTaskDefinition extends vscode.TaskDefinition {\n+    type: 'cargo';\n+    label: string;\n+    command: string;\n+    args: Array<string>;\n+    env?: { [key: string]: string };\n+}\n+\n+\n+function createTask(spec: ProcessSpec): vscode.Task {\n+    const TASK_SOURCE = 'Rust';\n+    let definition: CargoTaskDefinition = {\n+        type: 'cargo',\n+        label: 'cargo',\n+        command: spec.bin,\n+        args: spec.args,\n+        env: spec.env\n+    }\n+\n+    let execCmd = `${definition.command} ${definition.args.join(' ')}`;\n+    let execOption: vscode.ShellExecutionOptions = {\n+        cwd: '.',\n+        env: definition.env,\n+    };\n+    let exec = new vscode.ShellExecution(execCmd, execOption);\n+\n+    let f = vscode.workspace.workspaceFolders[0]\n+    let t = new vscode.Task(definition, f, definition.label, TASK_SOURCE, exec, ['$rustc']);\n+    return t;\n+}"}, {"sha": "32a166d0f7f73176ba15ae703f059cb0e72ed0a5", "filename": "code/tsconfig.json", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6cade3f6d8ad7bb5a11b1910689b25f709c12502/code%2Ftsconfig.json", "raw_url": "https://github.com/rust-lang/rust/raw/6cade3f6d8ad7bb5a11b1910689b25f709c12502/code%2Ftsconfig.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Ftsconfig.json?ref=6cade3f6d8ad7bb5a11b1910689b25f709c12502", "patch": "@@ -7,6 +7,5 @@\n         \"sourceMap\": true,\n         \"rootDir\": \".\"\n     },\n-    \"include\": [ \"src\" ],\n-    \"exclude\": [ \"node_modules\" ]\n+    \"include\": [ \"src/*.ts\" ],\n }"}, {"sha": "cc0d3d272ac6341150c59ab71326d438f6cbe76f", "filename": "crates/libeditor/src/typing.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6cade3f6d8ad7bb5a11b1910689b25f709c12502/crates%2Flibeditor%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cade3f6d8ad7bb5a11b1910689b25f709c12502/crates%2Flibeditor%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Ftyping.rs?ref=6cade3f6d8ad7bb5a11b1910689b25f709c12502", "patch": "@@ -5,6 +5,7 @@ use libsyntax2::{\n         walk::preorder,\n         find_covering_node,\n     },\n+    text_utils::intersect,\n     SyntaxKind::*,\n };\n \n@@ -53,16 +54,6 @@ pub fn join_lines(file: &ast::ParsedFile, range: TextRange) -> ActionResult {\n     }\n }\n \n-fn intersect(r1: TextRange, r2: TextRange) -> Option<TextRange> {\n-    let start = r1.start().max(r2.start());\n-    let end = r1.end().min(r2.end());\n-    if start <= end {\n-        Some(TextRange::from_to(start, end))\n-    } else {\n-        None\n-    }\n-}\n-\n fn remove_newline(\n     edit: &mut EditBuilder,\n     node: SyntaxNodeRef,"}, {"sha": "2640d60ea0e489b0341b0b573d2c24ba62e55241", "filename": "crates/libsyntax2/src/algo/mod.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6cade3f6d8ad7bb5a11b1910689b25f709c12502/crates%2Flibsyntax2%2Fsrc%2Falgo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cade3f6d8ad7bb5a11b1910689b25f709c12502/crates%2Flibsyntax2%2Fsrc%2Falgo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Falgo%2Fmod.rs?ref=6cade3f6d8ad7bb5a11b1910689b25f709c12502", "patch": "@@ -1,7 +1,10 @@\n pub mod walk;\n pub mod visit;\n \n-use {SyntaxNodeRef, TextUnit, TextRange};\n+use {\n+    SyntaxNodeRef, TextUnit, TextRange,\n+    text_utils::{contains_offset_nonstrict, is_subrange},\n+};\n \n pub fn find_leaf_at_offset(node: SyntaxNodeRef, offset: TextUnit) -> LeafAtOffset {\n     let range = node.range();\n@@ -116,14 +119,6 @@ fn common_ancestor<'a>(n1: SyntaxNodeRef<'a>, n2: SyntaxNodeRef<'a>) -> SyntaxNo\n     panic!(\"Can't find common ancestor of {:?} and {:?}\", n1, n2)\n }\n \n-fn contains_offset_nonstrict(range: TextRange, offset: TextUnit) -> bool {\n-    range.start() <= offset && offset <= range.end()\n-}\n-\n-fn is_subrange(range: TextRange, subrange: TextRange) -> bool {\n-    range.start() <= subrange.start() && subrange.end() <= range.end()\n-}\n-\n fn generate<T>(seed: Option<T>, step: impl Fn(&T) -> Option<T>) -> impl Iterator<Item=T> {\n     ::itertools::unfold(seed, move |slot| {\n         slot.take().map(|curr| {"}, {"sha": "53ae1898898d9cf827cb3d8cb3c92677c8e688c6", "filename": "crates/libsyntax2/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6cade3f6d8ad7bb5a11b1910689b25f709c12502/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cade3f6d8ad7bb5a11b1910689b25f709c12502/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Flib.rs?ref=6cade3f6d8ad7bb5a11b1910689b25f709c12502", "patch": "@@ -39,6 +39,7 @@ mod syntax_kinds;\n mod yellow;\n /// Utilities for simple uses of the parser.\n pub mod utils;\n+pub mod text_utils;\n \n pub use {\n     text_unit::{TextRange, TextUnit},"}, {"sha": "e3d73888f4a1ee91d33d600f4ae593984793e1d5", "filename": "crates/libsyntax2/src/text_utils.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6cade3f6d8ad7bb5a11b1910689b25f709c12502/crates%2Flibsyntax2%2Fsrc%2Ftext_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cade3f6d8ad7bb5a11b1910689b25f709c12502/crates%2Flibsyntax2%2Fsrc%2Ftext_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Ftext_utils.rs?ref=6cade3f6d8ad7bb5a11b1910689b25f709c12502", "patch": "@@ -0,0 +1,19 @@\n+use {TextRange, TextUnit};\n+\n+pub fn contains_offset_nonstrict(range: TextRange, offset: TextUnit) -> bool {\n+    range.start() <= offset && offset <= range.end()\n+}\n+\n+pub fn is_subrange(range: TextRange, subrange: TextRange) -> bool {\n+    range.start() <= subrange.start() && subrange.end() <= range.end()\n+}\n+\n+pub fn intersect(r1: TextRange, r2: TextRange) -> Option<TextRange> {\n+    let start = r1.start().max(r2.start());\n+    let end = r1.end().min(r2.end());\n+    if start <= end {\n+        Some(TextRange::from_to(start, end))\n+    } else {\n+        None\n+    }\n+}"}, {"sha": "b68e93e46b4fec87e7f0f881bd92d880337ee69d", "filename": "crates/server/src/main_loop/handlers.rs", "status": "modified", "additions": 51, "deletions": 10, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6cade3f6d8ad7bb5a11b1910689b25f709c12502/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cade3f6d8ad7bb5a11b1910689b25f709c12502/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=6cade3f6d8ad7bb5a11b1910689b25f709c12502", "patch": "@@ -5,10 +5,13 @@ use languageserver_types::{\n     Command, TextDocumentIdentifier, WorkspaceEdit,\n     SymbolInformation, Position, Location, TextEdit,\n };\n+use serde_json::{to_value, from_value};\n use libanalysis::{Query};\n use libeditor;\n-use libsyntax2::TextUnit;\n-use serde_json::{to_value, from_value};\n+use libsyntax2::{\n+    TextUnit,\n+    text_utils::contains_offset_nonstrict,\n+};\n \n use ::{\n     req::{self, Decoration}, Result,\n@@ -117,7 +120,7 @@ pub fn handle_code_action(\n     let file = world.analysis().file_syntax(file_id)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n     let offset = params.range.conv_with(&line_index).start();\n-    let mut ret = Vec::new();\n+    let mut res = Vec::new();\n \n     let actions = &[\n         (ActionId::FlipComma, libeditor::flip_comma(&file, offset).is_some()),\n@@ -128,10 +131,52 @@ pub fn handle_code_action(\n     for (id, edit) in actions {\n         if *edit {\n             let cmd = apply_code_action_cmd(*id, params.text_document.clone(), offset);\n-            ret.push(cmd);\n+            res.push(cmd);\n+        }\n+    }\n+    for runnable in libeditor::runnables(&file) {\n+        if !contains_offset_nonstrict(runnable.range, offset) {\n+            continue;\n+        }\n+\n+        #[derive(Serialize)]\n+        struct ProcessSpec {\n+            bin: String,\n+            args: Vec<String>,\n+            env: HashMap<String, String>,\n         }\n+\n+        let spec = ProcessSpec {\n+            bin: \"cargo\".to_string(),\n+            args: match runnable.kind {\n+                libeditor::RunnableKind::Test { name } => {\n+                    vec![\n+                        \"test\".to_string(),\n+                        \"--\".to_string(),\n+                        name,\n+                        \"--nocapture\".to_string(),\n+                    ]\n+                }\n+                libeditor::RunnableKind::Bin => vec![\"run\".to_string()]\n+            },\n+            env: {\n+                let mut m = HashMap::new();\n+                m.insert(\n+                    \"RUST_BACKTRACE\".to_string(),\n+                    \"short\".to_string(),\n+                );\n+                m\n+            }\n+        };\n+\n+        let cmd = Command {\n+            title: \"Run ...\".to_string(),\n+            command: \"libsyntax-rust.run\".to_string(),\n+            arguments: Some(vec![to_value(spec).unwrap()]),\n+        };\n+        res.push(cmd);\n     }\n-    return Ok(Some(ret));\n+    return Ok(Some(res));\n }\n \n pub fn handle_workspace_symbol(\n@@ -257,11 +302,7 @@ struct ActionRequest {\n }\n \n fn apply_code_action_cmd(id: ActionId, doc: TextDocumentIdentifier, offset: TextUnit) -> Command {\n-    let action_request = ActionRequest {\n-        id,\n-        text_document: doc,\n-        offset,\n-    };\n+    let action_request = ActionRequest { id, text_document: doc, offset };\n     Command {\n         title: id.title().to_string(),\n         command: \"apply_code_action\".to_string(),"}]}