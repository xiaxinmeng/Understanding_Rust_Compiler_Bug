{"sha": "461e8078010433ff7de2db2aaae8a3cfb0847215", "node_id": "C_kwDOAAsO6NoAKDQ2MWU4MDc4MDEwNDMzZmY3ZGUyZGIyYWFhZThhM2NmYjA4NDcyMTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-16T10:16:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-16T10:16:33Z"}, "message": "Auto merge of #94995 - luojia65:riscv-more-features, r=Amanieu\n\nSupport more RISC-V backend features on rustc compiler\n\nThis pull request adds the following RISC-V compiler features:\n\n- V for vector extension\n- Zfinx, Zdinx, Zhinx and Zhinxmin float in integer register extensions\n- Zfh, Zfhmin 16-bit float pointer extensions\n- Zbkb, Zkbc, Zbkc, Zk* cryptography extensions\n\nIt matches name in LLVM feature and is_riscv_feature_detected!. In this case we can use `#[target_feature]` on new RISC-V features. Ref: https://github.com/rust-lang/stdarch/pull/1263#pullrequestreview-825891905\n\nUse `rustc --print target-features` under any RISC-V target (or with `--target`) to check the features the rustc compiler support.\n\n<details>\n\n```\nluojia@luojia-virtual-machine:~/IntrinRiscv/stdarch-riscv-crypto$ cargo rustc -- --print target-features\n   Compiling stdarch-riscv-crypto v0.1.0 (/home/luojia/IntrinRiscv/stdarch-riscv-crypto)\nFeatures supported by rustc for this target:\n    m                - 'M' (Integer Multiplication and Division).\n    a                - 'A' (Atomic Instructions).\n    c                - 'C' (Compressed Instructions).\n    f                - 'F' (Single-Precision Floating-Point).\n    d                - 'D' (Double-Precision Floating-Point).\n    e                - Implements RV32E (provides 16 rather than 32 GPRs).\n    v                - 'V' (Vector Extension for Application Processors).\n    zfinx            - 'Zfinx' (Float in Integer).\n    zdinx            - 'Zdinx' (Double in Integer).\n    zhinx            - 'Zhinx' (Half Float in Integer).\n    zhinxmin         - 'Zhinxmin' (Half Float in Integer Minimal).\n    zfh              - 'Zfh' (Half-Precision Floating-Point).\n    zfhmin           - 'Zfhmin' (Half-Precision Floating-Point Minimal).\n    zbkb             - 'Zbkb' (Bitmanip instructions for Cryptography).\n    zbkc             - 'Zbkc' (Carry-less multiply instructions for Cryptography).\n    zbkx             - 'Zbkx' (Crossbar permutation instructions).\n    zknd             - 'Zknd' (NIST Suite: AES Decryption).\n    zkne             - 'Zkne' (NIST Suite: AES Encryption).\n    zknh             - 'Zknh' (NIST Suite: Hash Function Instructions).\n    zksed            - 'Zksed' (ShangMi Suite: SM4 Block Cipher Instructions).\n    zksh             - 'Zksh' (ShangMi Suite: SM3 Hash Function Instructions).\n    zkr              - 'Zkr' (Entropy Source Extension).\n    zkn              - 'Zkn' (NIST Algorithm Suite).\n    zks              - 'Zks' (ShangMi Algorithm Suite).\n    zk               - 'Zk' (Standard scalar cryptography extension).\n    zkt              - 'Zkt' (Data Independent Execution Latency).\n    crt-static       - Enables C Run-time Libraries to be statically linked.\n\nCode-generation features supported by LLVM for this target:\n    64bit            - Implements RV64.\n    experimental-zbe - 'Zbe' (Extract-Deposit 'Zb' Instructions).\n    experimental-zbf - 'Zbf' (Bit-Field 'Zb' Instructions).\n    experimental-zbm - 'Zbm' (Matrix 'Zb' Instructions).\n    experimental-zbp - 'Zbp' (Permutation 'Zb' Instructions).\n    experimental-zbr - 'Zbr' (Polynomial Reduction 'Zb' Instructions).\n    experimental-zbt - 'Zbt' (Ternary 'Zb' Instructions).\n    no-rvc-hints     - Disable RVC Hint Instructions..\n    relax            - Enable Linker relaxation..\n    reserve-x1       - Reserve X1.\n    reserve-x10      - Reserve X10.\n    reserve-x11      - Reserve X11.\n    reserve-x12      - Reserve X12.\n    reserve-x13      - Reserve X13.\n    reserve-x14      - Reserve X14.\n    reserve-x15      - Reserve X15.\n    reserve-x16      - Reserve X16.\n    reserve-x17      - Reserve X17.\n    reserve-x18      - Reserve X18.\n    reserve-x19      - Reserve X19.\n    reserve-x2       - Reserve X2.\n    reserve-x20      - Reserve X20.\n    reserve-x21      - Reserve X21.\n    reserve-x22      - Reserve X22.\n    reserve-x23      - Reserve X23.\n    reserve-x24      - Reserve X24.\n    reserve-x25      - Reserve X25.\n    reserve-x26      - Reserve X26.\n    reserve-x27      - Reserve X27.\n    reserve-x28      - Reserve X28.\n    reserve-x29      - Reserve X29.\n    reserve-x3       - Reserve X3.\n    reserve-x30      - Reserve X30.\n    reserve-x31      - Reserve X31.\n    reserve-x4       - Reserve X4.\n    reserve-x5       - Reserve X5.\n    reserve-x6       - Reserve X6.\n    reserve-x7       - Reserve X7.\n    reserve-x8       - Reserve X8.\n    reserve-x9       - Reserve X9.\n    save-restore     - Enable save/restore..\n    sifive7          - SiFive 7-Series processors.\n    zba              - 'Zba' (Address Generation Instructions).\n    zbb              - 'Zbb' (Basic Bit-Manipulation).\n    zbc              - 'Zbc' (Carry-Less Multiplication).\n    zbs              - 'Zbs' (Single-Bit Instructions).\n    zve32f           - 'Zve32f' (Vector Extensions for Embedded Processors with maximal 32 EEW and F extension).\n    zve32x           - 'Zve32x' (Vector Extensions for Embedded Processors with maximal 32 EEW).\n    zve64d           - 'Zve64d' (Vector Extensions for Embedded Processors with maximal 64 EEW, F and D extension).\n    zve64f           - 'Zve64f' (Vector Extensions for Embedded Processors with maximal 64 EEW and F extension).\n    zve64x           - 'Zve64x' (Vector Extensions for Embedded Processors with maximal 64 EEW).\n    zvl1024b         - 'Zvl' (Minimum Vector Length) 1024.\n    zvl128b          - 'Zvl' (Minimum Vector Length) 128.\n    zvl16384b        - 'Zvl' (Minimum Vector Length) 16384.\n    zvl2048b         - 'Zvl' (Minimum Vector Length) 2048.\n    zvl256b          - 'Zvl' (Minimum Vector Length) 256.\n    zvl32768b        - 'Zvl' (Minimum Vector Length) 32768.\n    zvl32b           - 'Zvl' (Minimum Vector Length) 32.\n    zvl4096b         - 'Zvl' (Minimum Vector Length) 4096.\n    zvl512b          - 'Zvl' (Minimum Vector Length) 512.\n    zvl64b           - 'Zvl' (Minimum Vector Length) 64.\n    zvl8192b         - 'Zvl' (Minimum Vector Length) 8192.\n\nUse +feature to enable a feature, or -feature to disable it.\nFor example, rustc -C target-cpu=mycpu -C target-feature=+feature1,-feature2\n\nCode-generation features cannot be used in cfg or #[target_feature],\nand may be renamed or removed in a future version of LLVM or rustc.\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.03s\n```\n</details>\n\nProof of concept:\n\n<details>\n\n```rust\n#![feature(link_llvm_intrinsics)]\n#![feature(target_feature_11)]\n#![feature(riscv_target_feature)]\n\nextern \"C\" {\n    #[link_name = \"llvm.riscv.sm3p0\"]\n    fn llvm_sm3p0(x: u32) -> u32;\n    #[link_name = \"llvm.riscv.sm3p1\"]\n    fn llvm_sm3p1(x: u32) -> u32;\n}\n\n#[target_feature(enable = \"zksh\")]\npub unsafe fn sm3p0(x: u32) -> u32 {\n    unsafe { llvm_sm3p0(x) }\n}\n\nextern \"C\" {\n    #[link_name = \"llvm.riscv.vsetvli\"]\n    fn llvm_vsetvli(avl: usize, sew: usize, lmul: usize) -> usize;\n    #[link_name = \"llvm.riscv.vsetvlimax\"]\n    fn llvm_vsetvlimax(sew: usize, lmul: usize) -> usize;\n}\n\n#[target_feature(enable = \"v\")]\npub unsafe fn vsetvli<const SEW: usize, const LMUL: usize>(avl: usize) -> usize {\n    unsafe { llvm_vsetvli(avl, SEW, LMUL) }\n}\n```\n</details>\n\nr? `@Amanieu`", "tree": {"sha": "bf19e868f993fb8058b2b782b08ce80ae80f3c09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf19e868f993fb8058b2b782b08ce80ae80f3c09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/461e8078010433ff7de2db2aaae8a3cfb0847215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/461e8078010433ff7de2db2aaae8a3cfb0847215", "html_url": "https://github.com/rust-lang/rust/commit/461e8078010433ff7de2db2aaae8a3cfb0847215", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/461e8078010433ff7de2db2aaae8a3cfb0847215/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8e564715e0eb17130e99e8fcc92a36fce7feaf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8e564715e0eb17130e99e8fcc92a36fce7feaf5", "html_url": "https://github.com/rust-lang/rust/commit/d8e564715e0eb17130e99e8fcc92a36fce7feaf5"}, {"sha": "f119a7b6ab464d89488767fd7235e85a52efeed2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f119a7b6ab464d89488767fd7235e85a52efeed2", "html_url": "https://github.com/rust-lang/rust/commit/f119a7b6ab464d89488767fd7235e85a52efeed2"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "ff7415af373394ffa54fc4956af61a5f5706a422", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/461e8078010433ff7de2db2aaae8a3cfb0847215/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/461e8078010433ff7de2db2aaae8a3cfb0847215/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=461e8078010433ff7de2db2aaae8a3cfb0847215", "patch": "@@ -223,6 +223,26 @@ const RISCV_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"f\", Some(sym::riscv_target_feature)),\n     (\"d\", Some(sym::riscv_target_feature)),\n     (\"e\", Some(sym::riscv_target_feature)),\n+    (\"v\", Some(sym::riscv_target_feature)),\n+    (\"zfinx\", Some(sym::riscv_target_feature)),\n+    (\"zdinx\", Some(sym::riscv_target_feature)),\n+    (\"zhinx\", Some(sym::riscv_target_feature)),\n+    (\"zhinxmin\", Some(sym::riscv_target_feature)),\n+    (\"zfh\", Some(sym::riscv_target_feature)),\n+    (\"zfhmin\", Some(sym::riscv_target_feature)),\n+    (\"zbkb\", Some(sym::riscv_target_feature)),\n+    (\"zbkc\", Some(sym::riscv_target_feature)),\n+    (\"zbkx\", Some(sym::riscv_target_feature)),\n+    (\"zknd\", Some(sym::riscv_target_feature)),\n+    (\"zkne\", Some(sym::riscv_target_feature)),\n+    (\"zknh\", Some(sym::riscv_target_feature)),\n+    (\"zksed\", Some(sym::riscv_target_feature)),\n+    (\"zksh\", Some(sym::riscv_target_feature)),\n+    (\"zkr\", Some(sym::riscv_target_feature)),\n+    (\"zkn\", Some(sym::riscv_target_feature)),\n+    (\"zks\", Some(sym::riscv_target_feature)),\n+    (\"zk\", Some(sym::riscv_target_feature)),\n+    (\"zkt\", Some(sym::riscv_target_feature)),\n ];\n \n const WASM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &["}]}