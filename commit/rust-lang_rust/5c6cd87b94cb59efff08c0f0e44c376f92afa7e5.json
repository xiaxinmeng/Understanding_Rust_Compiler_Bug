{"sha": "5c6cd87b94cb59efff08c0f0e44c376f92afa7e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNmNkODdiOTRjYjU5ZWZmZjA4YzBmMGU0NGMzNzZmOTJhZmE3ZTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-25T15:05:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-25T15:05:06Z"}, "message": "Auto merge of #6790 - mgacek8:issue_6748, r=Manishearth\n\nor_fun_call: fix suggestion for `or_insert(vec![])`\n\nfixes #6748\nchangelog: or_fun_call: fix suggestion for `or_insert(vec![])` on `std::collections::hash_map::Entry` or `std::collections::btree_map::Entry`", "tree": {"sha": "4f8715185945f1af6d07d02e21860b28619dba61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f8715185945f1af6d07d02e21860b28619dba61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c6cd87b94cb59efff08c0f0e44c376f92afa7e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c6cd87b94cb59efff08c0f0e44c376f92afa7e5", "html_url": "https://github.com/rust-lang/rust/commit/5c6cd87b94cb59efff08c0f0e44c376f92afa7e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c6cd87b94cb59efff08c0f0e44c376f92afa7e5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "928e72dd10749875cbd412f74bfbfd7765dbcd8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/928e72dd10749875cbd412f74bfbfd7765dbcd8a", "html_url": "https://github.com/rust-lang/rust/commit/928e72dd10749875cbd412f74bfbfd7765dbcd8a"}, {"sha": "2f0e9f7d3afb3cb169e58d65261f04215b017561", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f0e9f7d3afb3cb169e58d65261f04215b017561", "html_url": "https://github.com/rust-lang/rust/commit/2f0e9f7d3afb3cb169e58d65261f04215b017561"}], "stats": {"total": 54, "additions": 46, "deletions": 8}, "files": [{"sha": "5fb3ae1890df15530ebf1c536b4da06ad257db78", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5c6cd87b94cb59efff08c0f0e44c376f92afa7e5/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6cd87b94cb59efff08c0f0e44c376f92afa7e5/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=5c6cd87b94cb59efff08c0f0e44c376f92afa7e5", "patch": "@@ -2003,12 +2003,26 @@ fn lint_or_fun_call<'tcx>(\n             if poss.contains(&name);\n \n             then {\n+                let macro_expanded_snipped;\n                 let sugg: Cow<'_, str> = {\n                     let (snippet_span, use_lambda) = match (fn_has_arguments, fun_span) {\n                         (false, Some(fun_span)) => (fun_span, false),\n                         _ => (arg.span, true),\n                     };\n-                    let snippet = snippet_with_macro_callsite(cx, snippet_span, \"..\");\n+                    let snippet = {\n+                        let not_macro_argument_snippet = snippet_with_macro_callsite(cx, snippet_span, \"..\");\n+                        if not_macro_argument_snippet == \"vec![]\" {\n+                            macro_expanded_snipped = snippet(cx, snippet_span, \"..\");\n+                            match macro_expanded_snipped.strip_prefix(\"$crate::vec::\") {\n+                                Some(stripped) => Cow::from(stripped),\n+                                None => macro_expanded_snipped\n+                            }\n+                        }\n+                        else {\n+                            not_macro_argument_snippet\n+                        }\n+                    };\n+\n                     if use_lambda {\n                         let l_arg = if fn_has_arguments { \"_\" } else { \"\" };\n                         format!(\"|{}| {}\", l_arg, snippet).into()"}, {"sha": "64347cae5da385f2888cb9287f36b95f8746bd98", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c6cd87b94cb59efff08c0f0e44c376f92afa7e5/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5c6cd87b94cb59efff08c0f0e44c376f92afa7e5/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=5c6cd87b94cb59efff08c0f0e44c376f92afa7e5", "patch": "@@ -62,9 +62,15 @@ fn or_fun_call() {\n     let mut map = HashMap::<u64, String>::new();\n     map.entry(42).or_insert_with(String::new);\n \n+    let mut map_vec = HashMap::<u64, Vec<i32>>::new();\n+    map_vec.entry(42).or_insert_with(Vec::new);\n+\n     let mut btree = BTreeMap::<u64, String>::new();\n     btree.entry(42).or_insert_with(String::new);\n \n+    let mut btree_vec = BTreeMap::<u64, Vec<i32>>::new();\n+    btree_vec.entry(42).or_insert_with(Vec::new);\n+\n     let stringy = Some(String::from(\"\"));\n     let _ = stringy.unwrap_or_else(|| \"\".to_owned());\n "}, {"sha": "7faab0017b2e8f7485c8f07d2a82575c9453ca2d", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c6cd87b94cb59efff08c0f0e44c376f92afa7e5/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c6cd87b94cb59efff08c0f0e44c376f92afa7e5/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=5c6cd87b94cb59efff08c0f0e44c376f92afa7e5", "patch": "@@ -62,9 +62,15 @@ fn or_fun_call() {\n     let mut map = HashMap::<u64, String>::new();\n     map.entry(42).or_insert(String::new());\n \n+    let mut map_vec = HashMap::<u64, Vec<i32>>::new();\n+    map_vec.entry(42).or_insert(vec![]);\n+\n     let mut btree = BTreeMap::<u64, String>::new();\n     btree.entry(42).or_insert(String::new());\n \n+    let mut btree_vec = BTreeMap::<u64, Vec<i32>>::new();\n+    btree_vec.entry(42).or_insert(vec![]);\n+\n     let stringy = Some(String::from(\"\"));\n     let _ = stringy.unwrap_or(\"\".to_owned());\n "}, {"sha": "1e2bfd490e099b942a2a0687ccf08f5eb6d8aeef", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5c6cd87b94cb59efff08c0f0e44c376f92afa7e5/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c6cd87b94cb59efff08c0f0e44c376f92afa7e5/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=5c6cd87b94cb59efff08c0f0e44c376f92afa7e5", "patch": "@@ -67,40 +67,52 @@ LL |     map.entry(42).or_insert(String::new());\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/or_fun_call.rs:66:21\n+  --> $DIR/or_fun_call.rs:66:23\n+   |\n+LL |     map_vec.entry(42).or_insert(vec![]);\n+   |                       ^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(Vec::new)`\n+\n+error: use of `or_insert` followed by a function call\n+  --> $DIR/or_fun_call.rs:69:21\n    |\n LL |     btree.entry(42).or_insert(String::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n+error: use of `or_insert` followed by a function call\n+  --> $DIR/or_fun_call.rs:72:25\n+   |\n+LL |     btree_vec.entry(42).or_insert(vec![]);\n+   |                         ^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(Vec::new)`\n+\n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:69:21\n+  --> $DIR/or_fun_call.rs:75:21\n    |\n LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:77:21\n+  --> $DIR/or_fun_call.rs:83:21\n    |\n LL |     let _ = Some(1).unwrap_or(map[&1]);\n    |                     ^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| map[&1])`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:79:21\n+  --> $DIR/or_fun_call.rs:85:21\n    |\n LL |     let _ = Some(1).unwrap_or(map[&1]);\n    |                     ^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| map[&1])`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:103:35\n+  --> $DIR/or_fun_call.rs:109:35\n    |\n LL |     let _ = Some(\"a\".to_string()).or(Some(\"b\".to_string()));\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(\"b\".to_string()))`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:107:10\n+  --> $DIR/or_fun_call.rs:113:10\n    |\n LL |         .or(Some(Bar(b, Duration::from_secs(2))));\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(Bar(b, Duration::from_secs(2))))`\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 19 previous errors\n "}]}