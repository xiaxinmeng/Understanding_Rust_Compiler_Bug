{"sha": "22dd07d5556eec3e3f98d490827720e45fa27c64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZGQwN2Q1NTU2ZWVjM2UzZjk4ZDQ5MDgyNzcyMGU0NWZhMjdjNjQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-16T06:24:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-16T06:24:50Z"}, "message": "Rollup merge of #76335 - CDirkx:const-duration, r=ecstatic-morse\n\nMake all methods of `Duration` unstably const\n\nMake the following methods of `Duration` unstable const under `duration_const_2`:\n - `from_secs_f64`\n - `from_secs_f32`\n - `mul_f64`\n - `mul_f32`\n - `div_f64`\n - `div_f32`\n\nThis results in all methods of `Duration` being (unstable) const.\n\nMoved the tests to `library` as part of #76268.\n\nPossible because of #72449, which made the relevant `f32` and `f64` methods const.\n\nTracking issue: #72440\n\nr? @ecstatic-morse", "tree": {"sha": "0f962fce4a6ba0599dde4e295b06b75a86f1c345", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f962fce4a6ba0599dde4e295b06b75a86f1c345"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22dd07d5556eec3e3f98d490827720e45fa27c64", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfYa+zCRBK7hj4Ov3rIwAAdHIIAAbnRujFUpNiND9A0r+D/7zw\nFStrS+xey+JlOkEi30Grxrf+Ugx0kuz/HxK0EP8KKbJilHN3qqWmnItLNwqCkmyz\n1Cbm1xyyhfizeqIGMTLLuHDvUC9RQ9vgSL6jddRQDuRzu+WeKoAakEn4Znh2PdLA\nuacAoMuGU0648pPbG/xpn0pnPihYZQ7c57c5TxMYMfFZB1pUAWK7XqUWMCba1Gx7\nwlVek8yvLUziyQ11K1m/wfMJZ3aycp9gVHu8Ep4prSCizbePx215isOtjBhP+TfS\noOwVnTieewkiJuItMv3tLhbiRbEGZCfnDjfJWgqez1BDvsPhW4INDFyTcXo2eV0=\n=rZsw\n-----END PGP SIGNATURE-----\n", "payload": "tree 0f962fce4a6ba0599dde4e295b06b75a86f1c345\nparent 19a62db49217fb4d7e5df70866d61aaa85882069\nparent 73e0a56dde24693768d56960023f00ef61f28684\nauthor Ralf Jung <post@ralfj.de> 1600237490 +0200\ncommitter GitHub <noreply@github.com> 1600237490 +0200\n\nRollup merge of #76335 - CDirkx:const-duration, r=ecstatic-morse\n\nMake all methods of `Duration` unstably const\n\nMake the following methods of `Duration` unstable const under `duration_const_2`:\n - `from_secs_f64`\n - `from_secs_f32`\n - `mul_f64`\n - `mul_f32`\n - `div_f64`\n - `div_f32`\n\nThis results in all methods of `Duration` being (unstable) const.\n\nMoved the tests to `library` as part of #76268.\n\nPossible because of #72449, which made the relevant `f32` and `f64` methods const.\n\nTracking issue: #72440\n\nr? @ecstatic-morse\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22dd07d5556eec3e3f98d490827720e45fa27c64", "html_url": "https://github.com/rust-lang/rust/commit/22dd07d5556eec3e3f98d490827720e45fa27c64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22dd07d5556eec3e3f98d490827720e45fa27c64/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19a62db49217fb4d7e5df70866d61aaa85882069", "url": "https://api.github.com/repos/rust-lang/rust/commits/19a62db49217fb4d7e5df70866d61aaa85882069", "html_url": "https://github.com/rust-lang/rust/commit/19a62db49217fb4d7e5df70866d61aaa85882069"}, {"sha": "73e0a56dde24693768d56960023f00ef61f28684", "url": "https://api.github.com/repos/rust-lang/rust/commits/73e0a56dde24693768d56960023f00ef61f28684", "html_url": "https://github.com/rust-lang/rust/commit/73e0a56dde24693768d56960023f00ef61f28684"}], "stats": {"total": 189, "additions": 116, "deletions": 73}, "files": [{"sha": "6dc542dee58e65ff280a4c0b343aaea322457413", "filename": "library/core/src/time.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/22dd07d5556eec3e3f98d490827720e45fa27c64/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22dd07d5556eec3e3f98d490827720e45fa27c64/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=22dd07d5556eec3e3f98d490827720e45fa27c64", "patch": "@@ -693,7 +693,8 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n-    pub fn from_secs_f64(secs: f64) -> Duration {\n+    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    pub const fn from_secs_f64(secs: f64) -> Duration {\n         const MAX_NANOS_F64: f64 = ((u64::MAX as u128 + 1) * (NANOS_PER_SEC as u128)) as f64;\n         let nanos = secs * (NANOS_PER_SEC as f64);\n         if !nanos.is_finite() {\n@@ -727,7 +728,8 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n-    pub fn from_secs_f32(secs: f32) -> Duration {\n+    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    pub const fn from_secs_f32(secs: f32) -> Duration {\n         const MAX_NANOS_F32: f32 = ((u64::MAX as u128 + 1) * (NANOS_PER_SEC as u128)) as f32;\n         let nanos = secs * (NANOS_PER_SEC as f32);\n         if !nanos.is_finite() {\n@@ -761,7 +763,8 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n-    pub fn mul_f64(self, rhs: f64) -> Duration {\n+    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    pub const fn mul_f64(self, rhs: f64) -> Duration {\n         Duration::from_secs_f64(rhs * self.as_secs_f64())\n     }\n \n@@ -782,7 +785,8 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n-    pub fn mul_f32(self, rhs: f32) -> Duration {\n+    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    pub const fn mul_f32(self, rhs: f32) -> Duration {\n         Duration::from_secs_f32(rhs * self.as_secs_f32())\n     }\n \n@@ -802,7 +806,8 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n-    pub fn div_f64(self, rhs: f64) -> Duration {\n+    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    pub const fn div_f64(self, rhs: f64) -> Duration {\n         Duration::from_secs_f64(self.as_secs_f64() / rhs)\n     }\n \n@@ -824,7 +829,8 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n-    pub fn div_f32(self, rhs: f32) -> Duration {\n+    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    pub const fn div_f32(self, rhs: f32) -> Duration {\n         Duration::from_secs_f32(self.as_secs_f32() / rhs)\n     }\n "}, {"sha": "04402117f7da6279c6a7ccf40423494bb52e0543", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22dd07d5556eec3e3f98d490827720e45fa27c64/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22dd07d5556eec3e3f98d490827720e45fa27c64/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=22dd07d5556eec3e3f98d490827720e45fa27c64", "patch": "@@ -10,8 +10,11 @@\n #![feature(core_private_diy_float)]\n #![feature(debug_non_exhaustive)]\n #![feature(dec2flt)]\n+#![feature(div_duration)]\n+#![feature(duration_consts_2)]\n #![feature(duration_constants)]\n #![feature(duration_saturating_ops)]\n+#![feature(duration_zero)]\n #![feature(exact_size_is_empty)]\n #![feature(fixed_size_array)]\n #![feature(flt2dec)]"}, {"sha": "7c43885040b3e3fde6fdad5eca2dca12eb6d2189", "filename": "library/core/tests/time.rs", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/22dd07d5556eec3e3f98d490827720e45fa27c64/library%2Fcore%2Ftests%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22dd07d5556eec3e3f98d490827720e45fa27c64/library%2Fcore%2Ftests%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ftime.rs?ref=22dd07d5556eec3e3f98d490827720e45fa27c64", "patch": "@@ -321,3 +321,104 @@ fn debug_formatting_precision_high() {\n     assert_eq!(format!(\"{:.10?}\", Duration::new(4, 001_000_000)), \"4.0010000000s\");\n     assert_eq!(format!(\"{:.20?}\", Duration::new(4, 001_000_000)), \"4.00100000000000000000s\");\n }\n+\n+#[test]\n+fn duration_const() {\n+    // test that the methods of `Duration` are usable in a const context\n+\n+    const DURATION: Duration = Duration::new(0, 123_456_789);\n+\n+    const SUB_SEC_MILLIS: u32 = DURATION.subsec_millis();\n+    assert_eq!(SUB_SEC_MILLIS, 123);\n+\n+    const SUB_SEC_MICROS: u32 = DURATION.subsec_micros();\n+    assert_eq!(SUB_SEC_MICROS, 123_456);\n+\n+    const SUB_SEC_NANOS: u32 = DURATION.subsec_nanos();\n+    assert_eq!(SUB_SEC_NANOS, 123_456_789);\n+\n+    const ZERO: Duration = Duration::zero();\n+    assert_eq!(ZERO, Duration::new(0, 0));\n+\n+    const IS_ZERO: bool = ZERO.is_zero();\n+    assert!(IS_ZERO);\n+\n+    const ONE: Duration = Duration::new(1, 0);\n+\n+    const SECONDS: u64 = ONE.as_secs();\n+    assert_eq!(SECONDS, 1);\n+\n+    const FROM_SECONDS: Duration = Duration::from_secs(1);\n+    assert_eq!(FROM_SECONDS, ONE);\n+\n+    const SECONDS_F32: f32 = ONE.as_secs_f32();\n+    assert_eq!(SECONDS_F32, 1.0);\n+\n+    const FROM_SECONDS_F32: Duration = Duration::from_secs_f32(1.0);\n+    assert_eq!(FROM_SECONDS_F32, ONE);\n+\n+    const SECONDS_F64: f64 = ONE.as_secs_f64();\n+    assert_eq!(SECONDS_F64, 1.0);\n+\n+    const FROM_SECONDS_F64: Duration = Duration::from_secs_f64(1.0);\n+    assert_eq!(FROM_SECONDS_F64, ONE);\n+\n+    const MILLIS: u128 = ONE.as_millis();\n+    assert_eq!(MILLIS, 1_000);\n+\n+    const FROM_MILLIS: Duration = Duration::from_millis(1_000);\n+    assert_eq!(FROM_MILLIS, ONE);\n+\n+    const MICROS: u128 = ONE.as_micros();\n+    assert_eq!(MICROS, 1_000_000);\n+\n+    const FROM_MICROS: Duration = Duration::from_micros(1_000_000);\n+    assert_eq!(FROM_MICROS, ONE);\n+\n+    const NANOS: u128 = ONE.as_nanos();\n+    assert_eq!(NANOS, 1_000_000_000);\n+\n+    const FROM_NANOS: Duration = Duration::from_nanos(1_000_000_000);\n+    assert_eq!(FROM_NANOS, ONE);\n+\n+    const MAX: Duration = Duration::new(u64::MAX, 999_999_999);\n+\n+    const CHECKED_ADD: Option<Duration> = MAX.checked_add(ONE);\n+    assert_eq!(CHECKED_ADD, None);\n+\n+    const CHECKED_SUB: Option<Duration> = ZERO.checked_sub(ONE);\n+    assert_eq!(CHECKED_SUB, None);\n+\n+    const CHECKED_MUL: Option<Duration> = ONE.checked_mul(1);\n+    assert_eq!(CHECKED_MUL, Some(ONE));\n+\n+    const MUL_F32: Duration = ONE.mul_f32(1.0);\n+    assert_eq!(MUL_F32, ONE);\n+\n+    const MUL_F64: Duration = ONE.mul_f64(1.0);\n+    assert_eq!(MUL_F64, ONE);\n+\n+    const CHECKED_DIV: Option<Duration> = ONE.checked_div(1);\n+    assert_eq!(CHECKED_DIV, Some(ONE));\n+\n+    const DIV_F32: Duration = ONE.div_f32(1.0);\n+    assert_eq!(DIV_F32, ONE);\n+\n+    const DIV_F64: Duration = ONE.div_f64(1.0);\n+    assert_eq!(DIV_F64, ONE);\n+\n+    const DIV_DURATION_F32: f32 = ONE.div_duration_f32(ONE);\n+    assert_eq!(DIV_DURATION_F32, 1.0);\n+\n+    const DIV_DURATION_F64: f64 = ONE.div_duration_f64(ONE);\n+    assert_eq!(DIV_DURATION_F64, 1.0);\n+\n+    const SATURATING_ADD: Duration = MAX.saturating_add(ONE);\n+    assert_eq!(SATURATING_ADD, MAX);\n+\n+    const SATURATING_SUB: Duration = ZERO.saturating_sub(ONE);\n+    assert_eq!(SATURATING_SUB, ZERO);\n+\n+    const SATURATING_MUL: Duration = MAX.saturating_mul(2);\n+    assert_eq!(SATURATING_MUL, MAX);\n+}"}, {"sha": "bc0969e4f1fbadfb9454ab2b0c6855be6b94b5f9", "filename": "src/test/ui/consts/duration-consts-2.rs", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/19a62db49217fb4d7e5df70866d61aaa85882069/src%2Ftest%2Fui%2Fconsts%2Fduration-consts-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a62db49217fb4d7e5df70866d61aaa85882069/src%2Ftest%2Fui%2Fconsts%2Fduration-consts-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fduration-consts-2.rs?ref=19a62db49217fb4d7e5df70866d61aaa85882069", "patch": "@@ -1,67 +0,0 @@\n-// run-pass\n-\n-#![feature(const_panic)]\n-#![feature(duration_consts_2)]\n-#![feature(div_duration)]\n-#![feature(duration_saturating_ops)]\n-\n-use std::time::Duration;\n-\n-fn duration() {\n-    const ZERO : Duration = Duration::new(0, 0);\n-    assert_eq!(ZERO, Duration::from_secs(0));\n-\n-    const ONE : Duration = Duration::new(0, 1);\n-    assert_eq!(ONE, Duration::from_nanos(1));\n-\n-    const MAX : Duration = Duration::new(u64::MAX, 1_000_000_000 - 1);\n-\n-    const MAX_CHECKED_ADD_ZERO : Option<Duration> = MAX.checked_add(ZERO);\n-    assert_eq!(MAX_CHECKED_ADD_ZERO, Some(MAX));\n-\n-    const MAX_CHECKED_ADD_ONE : Option<Duration> = MAX.checked_add(ONE);\n-    assert_eq!(MAX_CHECKED_ADD_ONE, None);\n-\n-    const ONE_CHECKED_SUB_ONE : Option<Duration> = ONE.checked_sub(ONE);\n-    assert_eq!(ONE_CHECKED_SUB_ONE, Some(ZERO));\n-\n-    const ZERO_CHECKED_SUB_ONE : Option<Duration> = ZERO.checked_sub(ONE);\n-    assert_eq!(ZERO_CHECKED_SUB_ONE, None);\n-\n-    const ONE_CHECKED_MUL_ONE : Option<Duration> = ONE.checked_mul(1);\n-    assert_eq!(ONE_CHECKED_MUL_ONE, Some(ONE));\n-\n-    const MAX_CHECKED_MUL_TWO : Option<Duration> = MAX.checked_mul(2);\n-    assert_eq!(MAX_CHECKED_MUL_TWO, None);\n-\n-    const ONE_CHECKED_DIV_ONE : Option<Duration> = ONE.checked_div(1);\n-    assert_eq!(ONE_CHECKED_DIV_ONE, Some(ONE));\n-\n-    const ONE_CHECKED_DIV_ZERO : Option<Duration> = ONE.checked_div(0);\n-    assert_eq!(ONE_CHECKED_DIV_ZERO, None);\n-\n-    const MAX_AS_F32 : f32 = MAX.as_secs_f32();\n-    assert_eq!(MAX_AS_F32, 18446744000000000000.0_f32);\n-\n-    const MAX_AS_F64 : f64 = MAX.as_secs_f64();\n-    assert_eq!(MAX_AS_F64, 18446744073709552000.0_f64);\n-\n-    const ONE_AS_F32 : f32 = ONE.div_duration_f32(ONE);\n-    assert_eq!(ONE_AS_F32, 1.0_f32);\n-\n-    const ONE_AS_F64 : f64 = ONE.div_duration_f64(ONE);\n-    assert_eq!(ONE_AS_F64, 1.0_f64);\n-\n-    const MAX_SATURATING_ADD_ONE : Duration = MAX.saturating_add(ONE);\n-    assert_eq!(MAX_SATURATING_ADD_ONE, MAX);\n-\n-    const ZERO_SATURATING_SUB_ONE : Duration = ZERO.saturating_sub(ONE);\n-    assert_eq!(ZERO_SATURATING_SUB_ONE, ZERO);\n-\n-    const MAX_SATURATING_MUL_TWO : Duration = MAX.saturating_mul(2);\n-    assert_eq!(MAX_SATURATING_MUL_TWO, MAX);\n-}\n-\n-fn main() {\n-    duration();\n-}"}]}