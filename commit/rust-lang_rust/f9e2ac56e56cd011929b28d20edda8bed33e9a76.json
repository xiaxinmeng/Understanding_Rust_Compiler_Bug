{"sha": "f9e2ac56e56cd011929b28d20edda8bed33e9a76", "node_id": "C_kwDOAAsO6NoAKGY5ZTJhYzU2ZTU2Y2QwMTE5MjliMjhkMjBlZGRhOGJlZDMzZTlhNzY", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-08-30T11:10:59Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-08-30T11:44:31Z"}, "message": "fix: handle trait methods as inherent methods for trait object types", "tree": {"sha": "8cc5787a9f3554b9417ff05887a96674631cdc1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cc5787a9f3554b9417ff05887a96674631cdc1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9e2ac56e56cd011929b28d20edda8bed33e9a76", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmMN+B8ACgkQ4laYqTBY\nYXFuWBAAqNmsOcM1qbQr3y0ahDZnL0+pZSMBxvXu0w9UHhDXWyaGRPNqJtdpqcyc\ny4c6Bw8MK5Ns03PcD68hgeAiDmEuF5CyVfpzdI9mCjBIcQ2kkUTFPYFHu+GCO2hQ\neHlouUmVRpmFVQ/lKCSFyyAF/YQX7Whqmxj57urHPUZrzr6Lk8LePQWVg7fwEfnL\nVa7P/zikR33zn3vSH5UjahP5dAv5ylJImS4v7dxS2OiocufxJoP5ZRWu13k+U4Y4\n5W+GIuxOLtcDB+DOH5u8+UHRdMAr/yDjd7C3avkvGfrW7rX96Khqq8PuWF6AB9ap\nGB/MiWtJDuAPsqGd4dRxGzCaJWINpkkZSYpGuShMz++d04rfLfpfc90XeK1FEaN6\nc+JLxkxPRekzo6AQuzkX95Nx5W8hQcxaNkNhk8pJIjmQ3EVe7rW+pnOIdRvFf/x4\ng+pP/RiRuOCBoWxIORA1I0kaB13FZPkQyv+I9IStTruhyYpjwC/ZOs3/tZsKPtPV\nlf0CGuB8Me95GTKqlEGiWY5BFDDvnbUcbeL40ICwyPqdPnqCyIVOc+Vf9pb6J1iR\nXL7cnN+/SoyhtNHOp2s9rD1+paWSHcR0fEjP8uQZ4TFNkNJhYj2eJ4miWD6v/cUM\nM1dz2/pj500VWmIMyvYI15SWx1aMP9AmmavaYKzWw81T0nbvAeg=\n=dS7K\n-----END PGP SIGNATURE-----", "payload": "tree 8cc5787a9f3554b9417ff05887a96674631cdc1b\nparent f02cd0a41d7381b1ef454b0141adacc188d3eee8\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1661857859 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1661859871 +0900\n\nfix: handle trait methods as inherent methods for trait object types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9e2ac56e56cd011929b28d20edda8bed33e9a76", "html_url": "https://github.com/rust-lang/rust/commit/f9e2ac56e56cd011929b28d20edda8bed33e9a76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9e2ac56e56cd011929b28d20edda8bed33e9a76/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f02cd0a41d7381b1ef454b0141adacc188d3eee8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f02cd0a41d7381b1ef454b0141adacc188d3eee8", "html_url": "https://github.com/rust-lang/rust/commit/f02cd0a41d7381b1ef454b0141adacc188d3eee8"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "c0ef4b2a9dc86d1a851568553ddffb626038298f", "filename": "crates/hir-ty/src/method_resolution.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f9e2ac56e56cd011929b28d20edda8bed33e9a76/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9e2ac56e56cd011929b28d20edda8bed33e9a76/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs?ref=f9e2ac56e56cd011929b28d20edda8bed33e9a76", "patch": "@@ -914,9 +914,6 @@ fn iterate_trait_method_candidates(\n     let db = table.db;\n     let env = table.trait_env.clone();\n     let self_is_array = matches!(self_ty.kind(Interner), chalk_ir::TyKind::Array(..));\n-    // if ty is `dyn Trait`, the trait doesn't need to be in scope\n-    let inherent_trait =\n-        self_ty.dyn_trait().into_iter().flat_map(|t| all_super_traits(db.upcast(), t));\n     let env_traits = matches!(self_ty.kind(Interner), TyKind::Placeholder(_))\n         // if we have `T: Trait` in the param env, the trait doesn't need to be in scope\n         .then(|| {\n@@ -925,7 +922,7 @@ fn iterate_trait_method_candidates(\n         })\n         .into_iter()\n         .flatten();\n-    let traits = inherent_trait.chain(env_traits).chain(traits_in_scope.iter().copied());\n+    let traits = env_traits.chain(traits_in_scope.iter().copied());\n \n     let canonical_self_ty = table.canonicalize(self_ty.clone()).value;\n \n@@ -990,6 +987,23 @@ fn iterate_inherent_methods(\n         VisibleFromModule::None => (None, None),\n     };\n \n+    // For trait object types, methods of the trait and its super traits are considered inherent\n+    // methods. This matters because these trait methods have higher priority than the other\n+    // traits' methods, which would be considered in `iterate_trait_method_candidates()` after this\n+    // function.\n+    let inherent_traits =\n+        self_ty.dyn_trait().into_iter().flat_map(|t| all_super_traits(db.upcast(), t));\n+    for t in inherent_traits {\n+        let data = db.trait_data(t);\n+        for &(_, item) in data.items.iter() {\n+            // We don't pass `visible_from_module` as all trait items should be visible from the\n+            // trait object.\n+            if is_valid_candidate(table, name, receiver_ty, item, self_ty, None) {\n+                callback(receiver_adjustments.clone().unwrap_or_default(), item)?;\n+            }\n+        }\n+    }\n+\n     if let Some(block_id) = block {\n         if let Some(impls) = db.inherent_impls_in_block(block_id) {\n             impls_for_self_ty("}, {"sha": "fb2fc9369a796dac074a89f4bce857c4678d516b", "filename": "crates/hir-ty/src/tests/method_resolution.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f9e2ac56e56cd011929b28d20edda8bed33e9a76/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9e2ac56e56cd011929b28d20edda8bed33e9a76/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=f9e2ac56e56cd011929b28d20edda8bed33e9a76", "patch": "@@ -1218,6 +1218,23 @@ fn main() {\n     );\n }\n \n+#[test]\n+fn dyn_trait_method_priority() {\n+    check_types(\n+        r#\"\n+//- minicore: from\n+trait Trait {\n+    fn into(&self) -> usize { 0 }\n+}\n+\n+fn foo(a: &dyn Trait) {\n+    let _ = a.into();\n+      //^usize\n+}\n+        \"#,\n+    );\n+}\n+\n #[test]\n fn autoderef_visibility_field() {\n     check("}]}