{"sha": "6f8fc4d656b7ab5bc680128074817771628e9985", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmOGZjNGQ2NTZiN2FiNWJjNjgwMTI4MDc0ODE3NzcxNjI4ZTk5ODU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-08T21:33:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-08T21:33:45Z"}, "message": "Rollup merge of #70906 - gizmondo:66107, r=estebank\n\nSuggest move for closures and async blocks in more cases.\n\nFixes #66107, also improves #67577\nRelated PR https://github.com/rust-lang/rust/pull/65166", "tree": {"sha": "6ea12dd65b96164fdbb0d6a55dafb6bc321586da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ea12dd65b96164fdbb0d6a55dafb6bc321586da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f8fc4d656b7ab5bc680128074817771628e9985", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJejkM5CRBK7hj4Ov3rIwAAdHIIAKVtedA8tcM2qgt9N6Wjn4p2\nLedsOdsImgGoJaeQOz/PiWf+f34HMmnWLUVy310vI0tk9m5wTCRErXl49vYzQton\nz+qIUvqrKolmaGoT5UdhjTZICANnAV5nrjZUcckzBVOKKuJjku169VOSra6Q8qJL\nhMrGuUbZHYykzoJbbFnO23HgYZUITSto0KH1g8Aj/YjesHoVfCqjEugJTMhlAOSk\nWoRxndUa2kNQ86kdsJNXe8cJD1VX+VY2/REehilzsE0gs2whp6ri7Xw4y8F/99sy\nBdvx12QFuFqwvNixluyFrd7wSomnuHFa1YBkSBMOFOi0Q/AtfBO2OsYOuag1atA=\n=WLLH\n-----END PGP SIGNATURE-----\n", "payload": "tree 6ea12dd65b96164fdbb0d6a55dafb6bc321586da\nparent d0c88396e785e76edb10953657307fd052db5df1\nparent aaebbe196b16aa3006377ad4dbbb8755fa62ece8\nauthor Dylan DPC <dylan.dpc@gmail.com> 1586381625 +0200\ncommitter GitHub <noreply@github.com> 1586381625 +0200\n\nRollup merge of #70906 - gizmondo:66107, r=estebank\n\nSuggest move for closures and async blocks in more cases.\n\nFixes #66107, also improves #67577\nRelated PR https://github.com/rust-lang/rust/pull/65166\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f8fc4d656b7ab5bc680128074817771628e9985", "html_url": "https://github.com/rust-lang/rust/commit/6f8fc4d656b7ab5bc680128074817771628e9985", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f8fc4d656b7ab5bc680128074817771628e9985/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0c88396e785e76edb10953657307fd052db5df1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0c88396e785e76edb10953657307fd052db5df1", "html_url": "https://github.com/rust-lang/rust/commit/d0c88396e785e76edb10953657307fd052db5df1"}, {"sha": "aaebbe196b16aa3006377ad4dbbb8755fa62ece8", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaebbe196b16aa3006377ad4dbbb8755fa62ece8", "html_url": "https://github.com/rust-lang/rust/commit/aaebbe196b16aa3006377ad4dbbb8755fa62ece8"}], "stats": {"total": 144, "additions": 80, "deletions": 64}, "files": [{"sha": "65561e224dbfdead3f285f67ff1e21e05e7cbb92", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 20, "deletions": 38, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6f8fc4d656b7ab5bc680128074817771628e9985/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8fc4d656b7ab5bc680128074817771628e9985/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=6f8fc4d656b7ab5bc680128074817771628e9985", "patch": "@@ -760,47 +760,26 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             (\n                 Some(ref name),\n                 BorrowExplanation::MustBeValidFor {\n-                    category: category @ ConstraintCategory::Return,\n+                    category:\n+                        category\n+                        @\n+                        (ConstraintCategory::Return\n+                        | ConstraintCategory::CallArgument\n+                        | ConstraintCategory::OpaqueType),\n                     from_closure: false,\n                     ref region_name,\n                     span,\n                     ..\n                 },\n-            )\n-            | (\n-                Some(ref name),\n-                BorrowExplanation::MustBeValidFor {\n-                    category: category @ ConstraintCategory::CallArgument,\n-                    from_closure: false,\n-                    ref region_name,\n-                    span,\n-                    ..\n-                },\n-            ) if borrow_spans.for_closure() => self.report_escaping_closure_capture(\n-                borrow_spans,\n-                borrow_span,\n-                region_name,\n-                category,\n-                span,\n-                &format!(\"`{}`\", name),\n-            ),\n-            (\n-                Some(ref name),\n-                BorrowExplanation::MustBeValidFor {\n-                    category: category @ ConstraintCategory::OpaqueType,\n-                    from_closure: false,\n-                    ref region_name,\n+            ) if borrow_spans.for_generator() | borrow_spans.for_closure() => self\n+                .report_escaping_closure_capture(\n+                    borrow_spans,\n+                    borrow_span,\n+                    region_name,\n+                    category,\n                     span,\n-                    ..\n-                },\n-            ) if borrow_spans.for_generator() => self.report_escaping_closure_capture(\n-                borrow_spans,\n-                borrow_span,\n-                region_name,\n-                category,\n-                span,\n-                &format!(\"`{}`\", name),\n-            ),\n+                    &format!(\"`{}`\", name),\n+                ),\n             (\n                 ref name,\n                 BorrowExplanation::MustBeValidFor {\n@@ -1187,7 +1166,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     ) -> DiagnosticBuilder<'cx> {\n         let tcx = self.infcx.tcx;\n         let args_span = use_span.args_or_use();\n-        let mut err = self.cannot_capture_in_long_lived_closure(args_span, captured_var, var_span);\n \n         let suggestion = match tcx.sess.source_map().span_to_snippet(args_span) {\n             Ok(mut string) => {\n@@ -1213,6 +1191,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             },\n             None => \"closure\",\n         };\n+\n+        let mut err =\n+            self.cannot_capture_in_long_lived_closure(args_span, kind, captured_var, var_span);\n         err.span_suggestion(\n             args_span,\n             &format!(\n@@ -1225,8 +1206,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         );\n \n         let msg = match category {\n-            ConstraintCategory::Return => \"closure is returned here\".to_string(),\n-            ConstraintCategory::OpaqueType => \"generator is returned here\".to_string(),\n+            ConstraintCategory::Return | ConstraintCategory::OpaqueType => {\n+                format!(\"{} is returned here\", kind)\n+            }\n             ConstraintCategory::CallArgument => {\n                 fr_name.highlight_region_name(&mut err);\n                 format!(\"function requires argument type to outlive `{}`\", fr_name)"}, {"sha": "07822f865d2bd545370d245ec2dc7e41366571e0", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f8fc4d656b7ab5bc680128074817771628e9985/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8fc4d656b7ab5bc680128074817771628e9985/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=6f8fc4d656b7ab5bc680128074817771628e9985", "patch": "@@ -25,6 +25,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(stmt_expr_attributes)]\n #![feature(trait_alias)]\n #![feature(option_expect_none)]\n+#![feature(or_patterns)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "f8bb7e7a85d1117356715ccd170ea256609c6cc0", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8fc4d656b7ab5bc680128074817771628e9985/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8fc4d656b7ab5bc680128074817771628e9985/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=6f8fc4d656b7ab5bc680128074817771628e9985", "patch": "@@ -431,16 +431,18 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n     crate fn cannot_capture_in_long_lived_closure(\n         &self,\n         closure_span: Span,\n+        closure_kind: &str,\n         borrowed_path: &str,\n         capture_span: Span,\n     ) -> DiagnosticBuilder<'cx> {\n         let mut err = struct_span_err!(\n             self,\n             closure_span,\n             E0373,\n-            \"closure may outlive the current function, \\\n+            \"{} may outlive the current function, \\\n              but it borrows {}, \\\n              which is owned by the current function\",\n+            closure_kind,\n             borrowed_path,\n         );\n         err.span_label(capture_span, format!(\"{} is borrowed here\", borrowed_path))"}, {"sha": "605cfdfe747a34412e3635975268d1c66a5b9b43", "filename": "src/test/ui/async-await/async-borrowck-escaping-block-error.fixed", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f8fc4d656b7ab5bc680128074817771628e9985/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6f8fc4d656b7ab5bc680128074817771628e9985/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.fixed?ref=6f8fc4d656b7ab5bc680128074817771628e9985", "patch": "@@ -1,12 +1,18 @@\n // edition:2018\n // run-rustfix\n \n-fn foo() -> Box<impl std::future::Future<Output = u32>> {\n+fn test_boxed() -> Box<impl std::future::Future<Output = u32>> {\n     let x = 0u32;\n     Box::new(async move { x } )\n     //~^ ERROR E0373\n }\n \n+fn test_ref(x: &u32) -> impl std::future::Future<Output = u32> + '_ {\n+    async move { *x }\n+    //~^ ERROR E0373\n+}\n+\n fn main() {\n-    let _foo = foo();\n+    let _ = test_boxed();\n+    let _ = test_ref(&0u32);\n }"}, {"sha": "ec752c15fa28456aac4bace049dcf18bcee9d1f5", "filename": "src/test/ui/async-await/async-borrowck-escaping-block-error.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f8fc4d656b7ab5bc680128074817771628e9985/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8fc4d656b7ab5bc680128074817771628e9985/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.rs?ref=6f8fc4d656b7ab5bc680128074817771628e9985", "patch": "@@ -1,12 +1,18 @@\n // edition:2018\n // run-rustfix\n \n-fn foo() -> Box<impl std::future::Future<Output = u32>> {\n+fn test_boxed() -> Box<impl std::future::Future<Output = u32>> {\n     let x = 0u32;\n     Box::new(async { x } )\n     //~^ ERROR E0373\n }\n \n+fn test_ref(x: &u32) -> impl std::future::Future<Output = u32> + '_ {\n+    async { *x }\n+    //~^ ERROR E0373\n+}\n+\n fn main() {\n-    let _foo = foo();\n+    let _ = test_boxed();\n+    let _ = test_ref(&0u32);\n }"}, {"sha": "193026541d073433629c5f00547375cff6cc1110", "filename": "src/test/ui/async-await/async-borrowck-escaping-block-error.stderr", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6f8fc4d656b7ab5bc680128074817771628e9985/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8fc4d656b7ab5bc680128074817771628e9985/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-block-error.stderr?ref=6f8fc4d656b7ab5bc680128074817771628e9985", "patch": "@@ -1,4 +1,4 @@\n-error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n+error[E0373]: async block may outlive the current function, but it borrows `x`, which is owned by the current function\n   --> $DIR/async-borrowck-escaping-block-error.rs:6:20\n    |\n LL |     Box::new(async { x } )\n@@ -7,16 +7,35 @@ LL |     Box::new(async { x } )\n    |                    | `x` is borrowed here\n    |                    may outlive borrowed value `x`\n    |\n-note: generator is returned here\n-  --> $DIR/async-borrowck-escaping-block-error.rs:4:13\n+note: async block is returned here\n+  --> $DIR/async-borrowck-escaping-block-error.rs:4:20\n    |\n-LL | fn foo() -> Box<impl std::future::Future<Output = u32>> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn test_boxed() -> Box<impl std::future::Future<Output = u32>> {\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: to force the async block to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n LL |     Box::new(async move { x } )\n    |                    ^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0373]: async block may outlive the current function, but it borrows `x`, which is owned by the current function\n+  --> $DIR/async-borrowck-escaping-block-error.rs:11:11\n+   |\n+LL |     async { *x }\n+   |           ^^^-^^\n+   |           |  |\n+   |           |  `x` is borrowed here\n+   |           may outlive borrowed value `x`\n+   |\n+note: async block is returned here\n+  --> $DIR/async-borrowck-escaping-block-error.rs:11:5\n+   |\n+LL |     async { *x }\n+   |     ^^^^^^^^^^^^\n+help: to force the async block to take ownership of `x` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |     async move { *x }\n+   |           ^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0373`."}, {"sha": "e667b72aee530616b705ed4354b14c1cacba0a93", "filename": "src/test/ui/async-await/async-borrowck-escaping-closure-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8fc4d656b7ab5bc680128074817771628e9985/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-closure-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8fc4d656b7ab5bc680128074817771628e9985/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-closure-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-closure-error.rs?ref=6f8fc4d656b7ab5bc680128074817771628e9985", "patch": "@@ -1,5 +1,5 @@\n // edition:2018\n-#![feature(async_closure,async_await)]\n+#![feature(async_closure)]\n fn foo() -> Box<dyn std::future::Future<Output = u32>> {\n     let x = 0u32;\n     Box::new((async || x)())"}, {"sha": "d2a345231eb438687fe02d40b38bc2c9edfca400", "filename": "src/test/ui/impl-trait/does-not-live-long-enough.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8fc4d656b7ab5bc680128074817771628e9985/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8fc4d656b7ab5bc680128074817771628e9985/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.rs?ref=6f8fc4d656b7ab5bc680128074817771628e9985", "patch": "@@ -4,7 +4,7 @@ struct List {\n impl List {\n     fn started_with<'a>(&'a self, prefix: &'a str) -> impl Iterator<Item=&'a str> {\n         self.data.iter().filter(|s| s.starts_with(prefix)).map(|s| s.as_ref())\n-        //~^ ERROR does not live long enough\n+        //~^ ERROR E0373\n     }\n }\n "}, {"sha": "468c2f366299c854df01813094270feba4fa7f1a", "filename": "src/test/ui/impl-trait/does-not-live-long-enough.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6f8fc4d656b7ab5bc680128074817771628e9985/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8fc4d656b7ab5bc680128074817771628e9985/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr?ref=6f8fc4d656b7ab5bc680128074817771628e9985", "patch": "@@ -1,21 +1,21 @@\n-error[E0597]: `prefix` does not live long enough\n-  --> $DIR/does-not-live-long-enough.rs:6:51\n+error[E0373]: closure may outlive the current function, but it borrows `prefix`, which is owned by the current function\n+  --> $DIR/does-not-live-long-enough.rs:6:33\n    |\n-LL |     fn started_with<'a>(&'a self, prefix: &'a str) -> impl Iterator<Item=&'a str> {\n-   |                     -- lifetime `'a` defined here     --------------------------- opaque type requires that `prefix` is borrowed for `'a`\n LL |         self.data.iter().filter(|s| s.starts_with(prefix)).map(|s| s.as_ref())\n-   |                                 ---               ^^^^^^ borrowed value does not live long enough\n+   |                                 ^^^               ------ `prefix` is borrowed here\n    |                                 |\n-   |                                 value captured here\n-LL |\n-LL |     }\n-   |     - `prefix` dropped here while still borrowed\n+   |                                 may outlive borrowed value `prefix`\n+   |\n+note: closure is returned here\n+  --> $DIR/does-not-live-long-enough.rs:5:55\n    |\n-help: you can add a bound to the opaque type to make it last less than `'static` and match `'a`\n+LL |     fn started_with<'a>(&'a self, prefix: &'a str) -> impl Iterator<Item=&'a str> {\n+   |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: to force the closure to take ownership of `prefix` (and any other referenced variables), use the `move` keyword\n    |\n-LL |     fn started_with<'a>(&'a self, prefix: &'a str) -> impl Iterator<Item=&'a str> + 'a {\n-   |                                                                                   ^^^^\n+LL |         self.data.iter().filter(move |s| s.starts_with(prefix)).map(|s| s.as_ref())\n+   |                                 ^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0373`."}]}