{"sha": "504612622f2801b43dbe3e6788d2404d394376df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNDYxMjYyMmYyODAxYjQzZGJlM2U2Nzg4ZDI0MDRkMzk0Mzc2ZGY=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-08-27T16:24:59Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-08-27T16:31:31Z"}, "message": "Merge logic of looking for `Self` type", "tree": {"sha": "e6f5b034c036b5c76b6f9159b0a829675bc27346", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6f5b034c036b5c76b6f9159b0a829675bc27346"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/504612622f2801b43dbe3e6788d2404d394376df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/504612622f2801b43dbe3e6788d2404d394376df", "html_url": "https://github.com/rust-lang/rust/commit/504612622f2801b43dbe3e6788d2404d394376df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/504612622f2801b43dbe3e6788d2404d394376df/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cb75c2e5cdd4f450f2974c5e052d569674d95fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cb75c2e5cdd4f450f2974c5e052d569674d95fd", "html_url": "https://github.com/rust-lang/rust/commit/3cb75c2e5cdd4f450f2974c5e052d569674d95fd"}], "stats": {"total": 73, "additions": 26, "deletions": 47}, "files": [{"sha": "63e0c183113ea50161f1fd77cdb512442c05e08d", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 16, "deletions": 46, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/504612622f2801b43dbe3e6788d2404d394376df/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/504612622f2801b43dbe3e6788d2404d394376df/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=504612622f2801b43dbe3e6788d2404d394376df", "patch": "@@ -15,21 +15,20 @@ use rustc_ast::ast;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, Visitor};\n-use rustc_hir::{FnRetTy, FnSig, TraitItem, TraitItemKind};\n+use rustc_hir::{TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass, Lint, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::subst::GenericArgKind;\n-use rustc_middle::ty::{self, Ty, TyS};\n+use rustc_middle::ty::{self, TraitRef, Ty, TyS};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, SymbolStr};\n \n use crate::consts::{constant, Constant};\n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n-    get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait, in_macro, is_copy,\n-    is_ctor_or_promotable_const_function, is_expn_of, is_self_ty, is_type_diagnostic_item, iter_input_pats,\n+    contains_ty, get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait, in_macro,\n+    is_copy, is_ctor_or_promotable_const_function, is_expn_of, is_type_diagnostic_item, iter_input_pats,\n     last_path_segment, match_def_path, match_qpath, match_trait_method, match_type, match_var, method_calls,\n     method_chain_args, paths, remove_blocks, return_ty, single_segment_path, snippet, snippet_with_applicability,\n     snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_note, span_lint_and_sugg,\n@@ -1656,16 +1655,8 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         if let hir::ImplItemKind::Fn(_, _) = impl_item.kind {\n             let ret_ty = return_ty(cx, impl_item.hir_id);\n \n-            let contains_self_ty = |ty: Ty<'tcx>| {\n-                ty.walk().any(|inner| match inner.unpack() {\n-                    GenericArgKind::Type(inner_ty) => TyS::same_type(self_ty, inner_ty),\n-\n-                    GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n-                })\n-            };\n-\n             // walk the return type and check for Self (this does not check associated types)\n-            if contains_self_ty(ret_ty) {\n+            if contains_ty(ret_ty, self_ty) {\n                 return;\n             }\n \n@@ -1675,7 +1666,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 for &(predicate, _span) in cx.tcx.predicates_of(def_id).predicates {\n                     if let ty::PredicateAtom::Projection(projection_predicate) = predicate.skip_binders() {\n                         // walk the associated type and check for Self\n-                        if contains_self_ty(projection_predicate.ty) {\n+                        if contains_ty(projection_predicate.ty, self_ty) {\n                             return;\n                         }\n                     }\n@@ -1696,44 +1687,23 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'_>) {\n         if_chain! {\n             if item.ident.name == sym!(new);\n-            if let TraitItemKind::Fn(FnSig { decl, .. }, _) = &item.kind;\n-            if let FnRetTy::Return(ret_ty) = &decl.output;\n+            if let TraitItemKind::Fn(_, _) = item.kind;\n+            let ret_ty = return_ty(cx, item.hir_id);\n+            let self_ty = TraitRef::identity(cx.tcx, item.hir_id.owner.to_def_id()).self_ty();\n+            if !contains_ty(ret_ty, self_ty);\n \n             then {\n-                let mut visitor = HasSelfVisitor { has_self_ty: false };\n-                visitor.visit_ty(ret_ty);\n-                if !visitor.has_self_ty {\n-                    span_lint(\n-                        cx,\n-                        NEW_RET_NO_SELF,\n-                        item.span,\n-                        \"methods called `new` usually return `Self`\",\n-                    );\n-                }\n+                span_lint(\n+                    cx,\n+                    NEW_RET_NO_SELF,\n+                    item.span,\n+                    \"methods called `new` usually return `Self`\",\n+                );\n             }\n         }\n     }\n }\n \n-struct HasSelfVisitor {\n-    pub has_self_ty: bool,\n-}\n-\n-impl<'tcx> intravisit::Visitor<'tcx> for HasSelfVisitor {\n-    type Map = Map<'tcx>;\n-\n-    fn visit_ty(&mut self, ty: &'tcx hir::Ty<'_>) {\n-        if is_self_ty(ty) {\n-            self.has_self_ty = true;\n-        } else {\n-            intravisit::walk_ty(self, ty);\n-        }\n-    }\n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::None\n-    }\n-}\n-\n /// Checks for the `OR_FUN_CALL` lint.\n #[allow(clippy::too_many_lines)]\n fn lint_or_fun_call<'tcx>("}, {"sha": "07ec59f452a71bb732340cd21dfb1514b5397f7b", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/504612622f2801b43dbe3e6788d2404d394376df/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/504612622f2801b43dbe3e6788d2404d394376df/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=504612622f2801b43dbe3e6788d2404d394376df", "patch": "@@ -42,7 +42,8 @@ use rustc_hir::{\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::map::Map;\n-use rustc_middle::ty::{self, layout::IntegerExt, subst::GenericArg, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n+use rustc_middle::ty::{self, layout::IntegerExt, Ty, TyCtxt, TypeFoldable};\n use rustc_mir::const_eval;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::original_sp;\n@@ -866,6 +867,14 @@ pub fn return_ty<'tcx>(cx: &LateContext<'tcx>, fn_item: hir::HirId) -> Ty<'tcx>\n     cx.tcx.erase_late_bound_regions(&ret_ty)\n }\n \n+/// Walk into `ty` and returns `true` if any inner type is the same as `other_ty`\n+pub fn contains_ty<'tcx>(ty: Ty<'tcx>, other_ty: Ty<'tcx>) -> bool {\n+    ty.walk().any(|inner| match inner.unpack() {\n+        GenericArgKind::Type(inner_ty) => ty::TyS::same_type(other_ty, inner_ty),\n+        GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n+    })\n+}\n+\n /// Returns `true` if the given type is an `unsafe` function.\n pub fn type_is_unsafe_function<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n     match ty.kind {"}]}