{"sha": "acc5c971babe3c59a32834ecac3ec7e064bf1dfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYzVjOTcxYmFiZTNjNTlhMzI4MzRlY2FjM2VjN2UwNjRiZjFkZmE=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-10T13:26:26Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-22T14:18:21Z"}, "message": "rustc: de-@ ty::AutoAdjustment.", "tree": {"sha": "4b8de43ee71b97fca79e73efa91ca46b2ab2902c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b8de43ee71b97fca79e73efa91ca46b2ab2902c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acc5c971babe3c59a32834ecac3ec7e064bf1dfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acc5c971babe3c59a32834ecac3ec7e064bf1dfa", "html_url": "https://github.com/rust-lang/rust/commit/acc5c971babe3c59a32834ecac3ec7e064bf1dfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9bf84333d4f76417f935e24b7a70340b8f1b1be", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9bf84333d4f76417f935e24b7a70340b8f1b1be", "html_url": "https://github.com/rust-lang/rust/commit/c9bf84333d4f76417f935e24b7a70340b8f1b1be"}], "stats": {"total": 111, "additions": 58, "deletions": 53}, "files": [{"sha": "44469dacee8fdd2371dfb7b13b16934a50779950", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=acc5c971babe3c59a32834ecac3ec7e064bf1dfa", "patch": "@@ -1062,8 +1062,8 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n         })\n     }\n \n-    for adj in tcx.adjustments.borrow().find(&id).iter() {\n-        match ***adj {\n+    for &adj in tcx.adjustments.borrow().find(&id).iter() {\n+        match *adj {\n             ty::AutoDerefRef(adj) => {\n                 for autoderef in range(0, adj.autoderefs) {\n                     let method_call = MethodCall::autoderef(id, autoderef as u32);\n@@ -1093,7 +1093,7 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n         ebml_w.tag(c::tag_table_adjustments, |ebml_w| {\n             ebml_w.id(id);\n             ebml_w.tag(c::tag_table_val, |ebml_w| {\n-                ebml_w.emit_auto_adjustment(ecx, **adj);\n+                ebml_w.emit_auto_adjustment(ecx, adj);\n             })\n         })\n     }\n@@ -1403,7 +1403,7 @@ fn decode_side_tables(xcx: &ExtendedDecodeContext,\n                         dcx.tcx.vtable_map.borrow_mut().insert(vtable_key, vtable_res);\n                     }\n                     c::tag_table_adjustments => {\n-                        let adj: @ty::AutoAdjustment = @val_dsr.read_auto_adjustment(xcx);\n+                        let adj: ty::AutoAdjustment = val_dsr.read_auto_adjustment(xcx);\n                         dcx.tcx.adjustments.borrow_mut().insert(id, adj);\n                     }\n                     c::tag_table_capture_map => {"}, {"sha": "15fbaf44d89ab472d981fa7e759f797b699e8e6c", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=acc5c971babe3c59a32834ecac3ec7e064bf1dfa", "patch": "@@ -378,7 +378,7 @@ impl<'a> CheckLoanCtxt<'a> {\n     pub fn check_assignment(&self, expr: &ast::Expr) {\n         // We don't use cat_expr() here because we don't want to treat\n         // auto-ref'd parameters in overloaded operators as rvalues.\n-        let cmt = match self.bccx.tcx.adjustments.borrow().find_copy(&expr.id) {\n+        let cmt = match self.bccx.tcx.adjustments.borrow().find(&expr.id) {\n             None => self.bccx.cat_expr_unadjusted(expr),\n             Some(adj) => self.bccx.cat_expr_autoderefd(expr, adj)\n         };"}, {"sha": "b496ea1f15b602e4f35ac52f9c84295574cb4e8d", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=acc5c971babe3c59a32834ecac3ec7e064bf1dfa", "patch": "@@ -177,7 +177,7 @@ fn gather_loans_in_expr(this: &mut GatherLoanCtxt,\n \n     // If this expression is borrowed, have to ensure it remains valid:\n     for &adjustments in tcx.adjustments.borrow().find(&ex.id).iter() {\n-        this.guarantee_adjustments(ex, *adjustments);\n+        this.guarantee_adjustments(ex, adjustments);\n     }\n \n     // If this expression is a move, gather it:"}, {"sha": "a2de2e67fc8af2dcfc8ec5e1a905f6e46f342c96", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=acc5c971babe3c59a32834ecac3ec7e064bf1dfa", "patch": "@@ -18,7 +18,7 @@ use middle::typeck;\n use middle::moves;\n use middle::dataflow::DataFlowContext;\n use middle::dataflow::DataFlowOperator;\n-use util::nodemap::NodeSet;\n+use util::nodemap::{NodeMap, NodeSet};\n use util::ppaux::{note_and_explain_region, Repr, UserString};\n \n use std::cell::{Cell, RefCell};\n@@ -918,8 +918,8 @@ impl<'a> mc::Typer for &'a ty::ctxt {\n         self.method_map.borrow().find(&method_call).map(|method| method.ty)\n     }\n \n-    fn adjustment(&mut self, id: ast::NodeId) -> Option<@ty::AutoAdjustment> {\n-        self.adjustments.borrow().find_copy(&id)\n+    fn adjustments<'a>(&'a self) -> &'a RefCell<NodeMap<ty::AutoAdjustment>> {\n+        &self.adjustments\n     }\n \n     fn is_method_call(&mut self, id: ast::NodeId) -> bool {"}, {"sha": "1b000fe5d907f9b46201538fa01103769cadeb83", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=acc5c971babe3c59a32834ecac3ec7e064bf1dfa", "patch": "@@ -306,7 +306,7 @@ pub fn check_expr(cx: &mut Context, e: &Expr) {\n     // Search for auto-adjustments to find trait coercions.\n     match cx.tcx.adjustments.borrow().find(&e.id) {\n         Some(adjustment) => {\n-            match **adjustment {\n+            match *adjustment {\n                 ty::AutoObject(..) => {\n                     let source_ty = ty::expr_ty(cx.tcx, e);\n                     let target_ty = ty::expr_ty_adjusted(cx.tcx, e);"}, {"sha": "d7f879bc40de0ce9aff73dc571a77f90a91f42e4", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=acc5c971babe3c59a32834ecac3ec7e064bf1dfa", "patch": "@@ -1387,7 +1387,7 @@ fn check_unnecessary_allocation(cx: &Context, e: &ast::Expr) {\n         cx.span_lint(UnnecessaryAllocation, e.span, msg);\n     };\n \n-    match cx.tcx.adjustments.borrow().find_copy(&e.id) {\n+    match cx.tcx.adjustments.borrow().find(&e.id) {\n         Some(adjustment) => {\n             match *adjustment {\n                 ty::AutoDerefRef(ty::AutoDerefRef { autoref, .. }) => {"}, {"sha": "e74b9373c1eb62556b16290d454a59740c78f9ca", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=acc5c971babe3c59a32834ecac3ec7e064bf1dfa", "patch": "@@ -64,6 +64,7 @@\n \n use middle::ty;\n use middle::typeck;\n+use util::nodemap::NodeMap;\n use util::ppaux::{ty_to_str, Repr};\n \n use syntax::ast::{MutImmutable, MutMutable};\n@@ -72,6 +73,8 @@ use syntax::codemap::Span;\n use syntax::print::pprust;\n use syntax::parse::token;\n \n+use std::cell::RefCell;\n+\n #[deriving(Eq)]\n pub enum categorization {\n     cat_rvalue(ty::Region),            // temporary val, argument is its scope\n@@ -265,10 +268,10 @@ pub trait Typer {\n     fn tcx<'a>(&'a self) -> &'a ty::ctxt;\n     fn node_ty(&mut self, id: ast::NodeId) -> McResult<ty::t>;\n     fn node_method_ty(&self, method_call: typeck::MethodCall) -> Option<ty::t>;\n-    fn adjustment(&mut self, node_id: ast::NodeId) -> Option<@ty::AutoAdjustment>;\n     fn is_method_call(&mut self, id: ast::NodeId) -> bool;\n     fn temporary_scope(&mut self, rvalue_id: ast::NodeId) -> Option<ast::NodeId>;\n     fn upvar_borrow(&mut self, upvar_id: ty::UpvarId) -> ty::UpvarBorrow;\n+    fn adjustments<'a>(&'a self) -> &'a RefCell<NodeMap<ty::AutoAdjustment>>;\n }\n \n impl MutabilityCategory {\n@@ -360,8 +363,8 @@ impl<TYPER:Typer> MemCategorizationContext<TYPER> {\n \n     fn expr_ty_adjusted(&mut self, expr: &ast::Expr) -> McResult<ty::t> {\n         let unadjusted_ty = if_ok!(self.expr_ty(expr));\n-        let adjustment = self.adjustment(expr.id);\n-        Ok(ty::adjust_ty(self.tcx(), expr.span, expr.id, unadjusted_ty, adjustment,\n+        Ok(ty::adjust_ty(self.tcx(), expr.span, expr.id, unadjusted_ty,\n+                         self.typer.adjustments().borrow().find(&expr.id),\n                          |method_call| self.typer.node_method_ty(method_call)))\n     }\n \n@@ -374,7 +377,7 @@ impl<TYPER:Typer> MemCategorizationContext<TYPER> {\n     }\n \n     pub fn cat_expr(&mut self, expr: &ast::Expr) -> McResult<cmt> {\n-        match self.adjustment(expr.id) {\n+        match self.typer.adjustments().borrow().find(&expr.id) {\n             None => {\n                 // No adjustments.\n                 self.cat_expr_unadjusted(expr)"}, {"sha": "fc9e3d02ae76b50d83b18f69aff41c414a657a9e", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=acc5c971babe3c59a32834ecac3ec7e064bf1dfa", "patch": "@@ -312,7 +312,7 @@ impl<'a> VisitContext<'a> {\n         // reading the underlying expression, not moving it.\n         let comp_mode = match self.tcx.adjustments.borrow().find(&expr.id) {\n             Some(adjustment) => {\n-                match **adjustment {\n+                match *adjustment {\n                     ty::AutoDerefRef(ty::AutoDerefRef {\n                         autoref: Some(_),\n                         .."}, {"sha": "5a01cd5c8325aa2b394e86aa7f9a24316e24c602", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=acc5c971babe3c59a32834ecac3ec7e064bf1dfa", "patch": "@@ -192,7 +192,7 @@ pub fn const_expr(cx: &CrateContext, e: &ast::Expr, is_local: bool) -> (ValueRef\n     match opt_adj {\n         None => { }\n         Some(adj) => {\n-            match *adj {\n+            match adj {\n                 ty::AutoAddEnv(ty::RegionTraitStore(ty::ReStatic, _)) => {\n                     let def = ty::resolve_expr(cx.tcx(), e);\n                     let wrapper = closure::get_wrapper_for_bare_fn(cx,"}, {"sha": "ae0e25319c439fb8103593d36d4f866d36fa6b2d", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=acc5c971babe3c59a32834ecac3ec7e064bf1dfa", "patch": "@@ -175,7 +175,7 @@ fn apply_adjustments<'a>(bcx: &'a Block<'a>,\n     };\n     debug!(\"unadjusted datum for expr {}: {}\",\n            expr.id, datum.to_str(bcx.ccx()));\n-    match *adjustment {\n+    match adjustment {\n         AutoAddEnv(..) => {\n             datum = unpack_datum!(bcx, add_env(bcx, expr, datum));\n         }"}, {"sha": "ae48993dcd09505bc356b9d2fa8d97af88578dc4", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=acc5c971babe3c59a32834ecac3ec7e064bf1dfa", "patch": "@@ -212,6 +212,7 @@ pub enum Variance {\n     Bivariant,      // T<A> <: T<B>            -- e.g., unused type parameter\n }\n \n+#[deriving(Clone)]\n pub enum AutoAdjustment {\n     AutoAddEnv(ty::TraitStore),\n     AutoDerefRef(AutoDerefRef),\n@@ -221,13 +222,13 @@ pub enum AutoAdjustment {\n                ty::substs /* Trait substitutions */)\n }\n \n-#[deriving(Decodable, Encodable)]\n+#[deriving(Clone, Decodable, Encodable)]\n pub struct AutoDerefRef {\n     pub autoderefs: uint,\n     pub autoref: Option<AutoRef>\n }\n \n-#[deriving(Decodable, Encodable, Eq, Show)]\n+#[deriving(Clone, Decodable, Encodable, Eq, Show)]\n pub enum AutoRef {\n     /// Convert from T to &T\n     AutoPtr(Region, ast::Mutability),\n@@ -296,7 +297,7 @@ pub struct ctxt {\n     pub ast_ty_to_ty_cache: RefCell<NodeMap<ast_ty_to_ty_cache_entry>>,\n     pub enum_var_cache: RefCell<DefIdMap<@Vec<@VariantInfo> >>,\n     pub ty_param_defs: RefCell<NodeMap<TypeParameterDef>>,\n-    pub adjustments: RefCell<NodeMap<@AutoAdjustment>>,\n+    pub adjustments: RefCell<NodeMap<AutoAdjustment>>,\n     pub normalized_cache: RefCell<HashMap<t, t>>,\n     pub lang_items: @middle::lang_items::LanguageItems,\n     // A mapping of fake provided method def_ids to the default implementation\n@@ -2808,11 +2809,9 @@ pub fn expr_ty_adjusted(cx: &ctxt, expr: &ast::Expr) -> t {\n      * task at hand! -nmatsakis\n      */\n \n-    let unadjusted_ty = expr_ty(cx, expr);\n-    let adjustment = cx.adjustments.borrow().find_copy(&expr.id);\n-    adjust_ty(cx, expr.span, expr.id, unadjusted_ty, adjustment, |method_call| {\n-        cx.method_map.borrow().find(&method_call).map(|method| method.ty)\n-    })\n+    adjust_ty(cx, expr.span, expr.id, expr_ty(cx, expr),\n+              cx.adjustments.borrow().find(&expr.id),\n+              |method_call| cx.method_map.borrow().find(&method_call).map(|method| method.ty))\n }\n \n pub fn expr_span(cx: &ctxt, id: NodeId) -> Span {\n@@ -2857,7 +2856,7 @@ pub fn adjust_ty(cx: &ctxt,\n                  span: Span,\n                  expr_id: ast::NodeId,\n                  unadjusted_ty: ty::t,\n-                 adjustment: Option<@AutoAdjustment>,\n+                 adjustment: Option<&AutoAdjustment>,\n                  method_type: |typeck::MethodCall| -> Option<ty::t>)\n                  -> ty::t {\n     /*! See `expr_ty_adjusted` */"}, {"sha": "793f9e44c4213ded6548b8583072ff77af1682b3", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=acc5c971babe3c59a32834ecac3ec7e064bf1dfa", "patch": "@@ -715,7 +715,7 @@ impl<'a> LookupContext<'a> {\n         // an explicit adjustment, but rather we hardwire the single deref\n         // that occurs in trans and mem_categorization.\n         let adjustment = match self.self_expr {\n-            Some(expr) => Some((expr.id, @ty::AutoDerefRef(auto_deref_ref))),\n+            Some(expr) => Some((expr.id, ty::AutoDerefRef(auto_deref_ref))),\n             None => return None\n         };\n \n@@ -962,7 +962,7 @@ impl<'a> LookupContext<'a> {\n                         Some(self_expr_id) => {\n                             self.fcx.write_adjustment(\n                                 self_expr_id,\n-                                @ty::AutoDerefRef(ty::AutoDerefRef {\n+                                ty::AutoDerefRef(ty::AutoDerefRef {\n                                     autoderefs: autoderefs,\n                                     autoref: Some(kind(region, *mutbl))\n                                 }));"}, {"sha": "c7ff8b90ad6975a9a6226f67ff7f272aa99bfae3", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=acc5c971babe3c59a32834ecac3ec7e064bf1dfa", "patch": "@@ -161,7 +161,7 @@ pub struct Inherited<'a> {\n     // Temporary tables:\n     node_types: RefCell<NodeMap<ty::t>>,\n     node_type_substs: RefCell<NodeMap<ty::substs>>,\n-    adjustments: RefCell<NodeMap<@ty::AutoAdjustment>>,\n+    adjustments: RefCell<NodeMap<ty::AutoAdjustment>>,\n     method_map: MethodMap,\n     vtable_map: vtable_map,\n     upvar_borrow_map: RefCell<ty::UpvarBorrowMap>,\n@@ -1076,15 +1076,15 @@ impl<'a> FnCtxt<'a> {\n         if derefs == 0 { return; }\n         self.write_adjustment(\n             node_id,\n-            @ty::AutoDerefRef(ty::AutoDerefRef {\n+            ty::AutoDerefRef(ty::AutoDerefRef {\n                 autoderefs: derefs,\n                 autoref: None })\n         );\n     }\n \n     pub fn write_adjustment(&self,\n                             node_id: ast::NodeId,\n-                            adj: @ty::AutoAdjustment) {\n+                            adj: ty::AutoAdjustment) {\n         debug!(\"write_adjustment(node_id={:?}, adj={:?})\", node_id, adj);\n         self.inh.adjustments.borrow_mut().insert(node_id, adj);\n     }"}, {"sha": "95584fa17a80ae6a088f5c66b08281b121c82c60", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=acc5c971babe3c59a32834ecac3ec7e064bf1dfa", "patch": "@@ -131,6 +131,7 @@ use middle::typeck::infer::resolve_type;\n use middle::typeck::infer;\n use middle::typeck::MethodCall;\n use middle::pat_util;\n+use util::nodemap::NodeMap;\n use util::ppaux::{ty_to_str, region_to_str, Repr};\n \n use syntax::ast::{DefArg, DefBinding, DefLocal, DefUpvar};\n@@ -140,6 +141,8 @@ use syntax::codemap::Span;\n use syntax::visit;\n use syntax::visit::Visitor;\n \n+use std::cell::RefCell;\n+\n // If mem categorization results in an error, it's because the type\n // check failed (or will fail, when the error is uncovered and\n // reported during writeback). In this case, we just ignore this part\n@@ -252,8 +255,8 @@ impl<'a> Rcx<'a> {\n             ty_unadjusted\n         } else {\n             let tcx = self.fcx.tcx();\n-            let adjustment = self.fcx.inh.adjustments.borrow().find_copy(&expr.id);\n-            ty::adjust_ty(tcx, expr.span, expr.id, ty_unadjusted, adjustment,\n+            ty::adjust_ty(tcx, expr.span, expr.id, ty_unadjusted,\n+                          self.fcx.inh.adjustments.borrow().find(&expr.id),\n                           |method_call| self.resolve_method_type(method_call))\n         }\n     }\n@@ -273,8 +276,8 @@ impl<'a, 'b> mc::Typer for &'a mut Rcx<'b> {\n         self.resolve_method_type(method_call)\n     }\n \n-    fn adjustment(&mut self, id: ast::NodeId) -> Option<@ty::AutoAdjustment> {\n-        self.fcx.inh.adjustments.borrow().find_copy(&id)\n+    fn adjustments<'a>(&'a self) -> &'a RefCell<NodeMap<ty::AutoAdjustment>> {\n+        &self.fcx.inh.adjustments\n     }\n \n     fn is_method_call(&mut self, id: ast::NodeId) -> bool {\n@@ -402,7 +405,7 @@ fn visit_expr(rcx: &mut Rcx, expr: &ast::Expr) {\n     // Check any autoderefs or autorefs that appear.\n     for &adjustment in rcx.fcx.inh.adjustments.borrow().find(&expr.id).iter() {\n         debug!(\"adjustment={:?}\", adjustment);\n-        match **adjustment {\n+        match *adjustment {\n             ty::AutoDerefRef(ty::AutoDerefRef {autoderefs, autoref: opt_autoref}) => {\n                 let expr_ty = rcx.resolve_node_type(expr.id);\n                 constrain_autoderefs(rcx, expr, autoderefs, expr_ty);\n@@ -960,13 +963,13 @@ fn constrain_regions_in_type_of_node(\n     // is going to fail anyway, so just stop here and let typeck\n     // report errors later on in the writeback phase.\n     let ty0 = rcx.resolve_node_type(id);\n-    let adjustment = rcx.fcx.inh.adjustments.borrow().find_copy(&id);\n-    let ty = ty::adjust_ty(tcx, origin.span(), id, ty0, adjustment,\n+    let ty = ty::adjust_ty(tcx, origin.span(), id, ty0,\n+                           rcx.fcx.inh.adjustments.borrow().find(&id),\n                            |method_call| rcx.resolve_method_type(method_call));\n     debug!(\"constrain_regions_in_type_of_node(\\\n-            ty={}, ty0={}, id={}, minimum_lifetime={:?}, adjustment={:?})\",\n+            ty={}, ty0={}, id={}, minimum_lifetime={:?})\",\n            ty_to_str(tcx, ty), ty_to_str(tcx, ty0),\n-           id, minimum_lifetime, adjustment);\n+           id, minimum_lifetime);\n     constrain_regions_in_type(rcx, minimum_lifetime, origin, ty)\n }\n "}, {"sha": "cdee230e52d8c0c1cf4c28f7f9d05c904b35b250", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=acc5c971babe3c59a32834ecac3ec7e064bf1dfa", "patch": "@@ -682,7 +682,7 @@ pub fn early_resolve_expr(ex: &ast::Expr, fcx: &FnCtxt, is_early: bool) {\n     // Search for auto-adjustments to find trait coercions\n     match fcx.inh.adjustments.borrow().find(&ex.id) {\n         Some(adjustment) => {\n-            match **adjustment {\n+            match *adjustment {\n                 AutoDerefRef(adj) => {\n                     for autoderef in range(0, adj.autoderefs) {\n                         let method_call = MethodCall::autoderef(ex.id, autoderef as u32);"}, {"sha": "dedab59cce77a1c3f15b65c2bab3253fbe6aa93d", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=acc5c971babe3c59a32834ecac3ec7e064bf1dfa", "patch": "@@ -127,7 +127,7 @@ fn resolve_type_vars_for_node(wbcx: &mut WbCtxt, sp: Span, id: ast::NodeId) {\n         None => None,\n \n         Some(adjustment) => {\n-            Some(match *adjustment {\n+            Some(match adjustment {\n                 ty::AutoAddEnv(store) => {\n                     let r = match store {\n                         ty::RegionTraitStore(r, _) => r,\n@@ -205,7 +205,7 @@ fn resolve_type_vars_for_node(wbcx: &mut WbCtxt, sp: Span, id: ast::NodeId) {\n            id, resolved_adj);\n     match resolved_adj {\n         Some(adj) => {\n-            tcx.adjustments.borrow_mut().insert(id, @adj);\n+            tcx.adjustments.borrow_mut().insert(id, adj);\n         }\n         None => {}\n     }"}, {"sha": "4081d68954fea72c6e7be8a237821ae55f017d1c", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=acc5c971babe3c59a32834ecac3ec7e064bf1dfa", "patch": "@@ -247,7 +247,7 @@ impl<'f> Coerce<'f> {\n                                      r_borrow,\n                                      mt {ty: inner_ty, mutbl: mt_b.mutbl});\n         if_ok!(sub.tys(a_borrowed, b));\n-        Ok(Some(@AutoDerefRef(AutoDerefRef {\n+        Ok(Some(AutoDerefRef(AutoDerefRef {\n             autoderefs: 1,\n             autoref: Some(AutoPtr(r_borrow, mt_b.mutbl))\n         })))\n@@ -272,7 +272,7 @@ impl<'f> Coerce<'f> {\n         let r_a = self.get_ref().infcx.next_region_var(Coercion(self.get_ref().trace));\n         let a_borrowed = ty::mk_str(self.get_ref().infcx.tcx, VstoreSlice(r_a));\n         if_ok!(self.subtype(a_borrowed, b));\n-        Ok(Some(@AutoDerefRef(AutoDerefRef {\n+        Ok(Some(AutoDerefRef(AutoDerefRef {\n             autoderefs: 0,\n             autoref: Some(AutoBorrowVec(r_a, MutImmutable))\n         })))\n@@ -307,7 +307,7 @@ impl<'f> Coerce<'f> {\n         let a_borrowed = ty::mk_slice(self.get_ref().infcx.tcx, r_borrow,\n                                       mt {ty: ty_inner, mutbl: mutbl_b});\n         if_ok!(sub.tys(a_borrowed, b));\n-        Ok(Some(@AutoDerefRef(AutoDerefRef {\n+        Ok(Some(AutoDerefRef(AutoDerefRef {\n             autoderefs: 0,\n             autoref: Some(AutoBorrowVec(r_borrow, mutbl_b))\n         })))\n@@ -337,7 +337,7 @@ impl<'f> Coerce<'f> {\n         };\n \n         if_ok!(self.subtype(a_borrowed, b));\n-        Ok(Some(@AutoDerefRef(AutoDerefRef {\n+        Ok(Some(AutoDerefRef(AutoDerefRef {\n             autoderefs: 0,\n             autoref: Some(AutoBorrowObj(r_a, b_mutbl))\n         })))\n@@ -384,7 +384,7 @@ impl<'f> Coerce<'f> {\n                 _ => return self.subtype(a, b)\n             };\n \n-            let adj = @ty::AutoAddEnv(fn_ty_b.store);\n+            let adj = ty::AutoAddEnv(fn_ty_b.store);\n             let a_closure = ty::mk_closure(self.get_ref().infcx.tcx,\n                                            ty::ClosureTy {\n                                                 sig: fn_ty_a.sig.clone(),\n@@ -419,7 +419,7 @@ impl<'f> Coerce<'f> {\n         // although references and unsafe ptrs have the same\n         // representation, we still register an AutoDerefRef so that\n         // regionck knows that the region for `a` must be valid here\n-        Ok(Some(@AutoDerefRef(AutoDerefRef {\n+        Ok(Some(AutoDerefRef(AutoDerefRef {\n             autoderefs: 1,\n             autoref: Some(ty::AutoUnsafe(mt_b.mutbl))\n         })))\n@@ -438,7 +438,7 @@ impl<'f> Coerce<'f> {\n                a.inf_str(self.get_ref().infcx), sty_a,\n                b.inf_str(self.get_ref().infcx));\n \n-        Ok(Some(@ty::AutoObject(trait_store, bounds,\n-                                trait_def_id, trait_substs.clone())))\n+        Ok(Some(ty::AutoObject(trait_store, bounds,\n+                               trait_def_id, trait_substs.clone())))\n     }\n }"}, {"sha": "449fc5d9b9f185522f01e4a2759e3b014f96ce5b", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc5c971babe3c59a32834ecac3ec7e064bf1dfa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=acc5c971babe3c59a32834ecac3ec7e064bf1dfa", "patch": "@@ -72,7 +72,7 @@ pub struct Bounds<T> {\n pub type cres<T> = Result<T,ty::type_err>; // \"combine result\"\n pub type ures = cres<()>; // \"unify result\"\n pub type fres<T> = Result<T, fixup_err>; // \"fixup result\"\n-pub type CoerceResult = cres<Option<@ty::AutoAdjustment>>;\n+pub type CoerceResult = cres<Option<ty::AutoAdjustment>>;\n \n pub struct InferCtxt<'a> {\n     pub tcx: &'a ty::ctxt,"}]}