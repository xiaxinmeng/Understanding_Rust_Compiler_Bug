{"sha": "9e82329c8f621e59833f4e2d747acdd83b188054", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllODIzMjljOGY2MjFlNTk4MzNmNGUyZDc0N2FjZGQ4M2IxODgwNTQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-01-22T02:13:05Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-01-22T05:43:29Z"}, "message": "Do not suggest using a break label when one is already present", "tree": {"sha": "049d4c96179a887e3120369eb5d67ba357a31200", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/049d4c96179a887e3120369eb5d67ba357a31200"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e82329c8f621e59833f4e2d747acdd83b188054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e82329c8f621e59833f4e2d747acdd83b188054", "html_url": "https://github.com/rust-lang/rust/commit/9e82329c8f621e59833f4e2d747acdd83b188054", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e82329c8f621e59833f4e2d747acdd83b188054/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76988077700f222791c480e811a709766b099875", "url": "https://api.github.com/repos/rust-lang/rust/commits/76988077700f222791c480e811a709766b099875", "html_url": "https://github.com/rust-lang/rust/commit/76988077700f222791c480e811a709766b099875"}], "stats": {"total": 41, "additions": 17, "deletions": 24}, "files": [{"sha": "4bfac1b72983eba1db0c674e346a9fa9ec7a49ea", "filename": "compiler/rustc_passes/src/loops.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9e82329c8f621e59833f4e2d747acdd83b188054/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e82329c8f621e59833f4e2d747acdd83b188054/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Floops.rs?ref=9e82329c8f621e59833f4e2d747acdd83b188054", "patch": "@@ -68,18 +68,18 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n             hir::ExprKind::Block(ref b, Some(_label)) => {\n                 self.with_context(LabeledBlock, |v| v.visit_block(&b));\n             }\n-            hir::ExprKind::Break(label, ref opt_expr) => {\n+            hir::ExprKind::Break(break_label, ref opt_expr) => {\n                 if let Some(e) = opt_expr {\n                     self.visit_expr(e);\n                 }\n \n-                if self.require_label_in_labeled_block(e.span, &label, \"break\") {\n+                if self.require_label_in_labeled_block(e.span, &break_label, \"break\") {\n                     // If we emitted an error about an unlabeled break in a labeled\n                     // block, we don't need any further checking for this break any more\n                     return;\n                 }\n \n-                let loop_id = match label.target_id {\n+                let loop_id = match break_label.target_id {\n                     Ok(loop_id) => Some(loop_id),\n                     Err(hir::LoopIdError::OutsideLoopScope) => None,\n                     Err(hir::LoopIdError::UnlabeledCfInWhileCondition) => {\n@@ -94,7 +94,7 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                 }\n \n                 if let Some(break_expr) = opt_expr {\n-                    let (head, label, loop_kind) = if let Some(loop_id) = loop_id {\n+                    let (head, loop_label, loop_kind) = if let Some(loop_id) = loop_id {\n                         match self.hir_map.expect_expr(loop_id).kind {\n                             hir::ExprKind::Loop(_, label, source, sp) => {\n                                 (Some(sp), label, Some(source))\n@@ -135,10 +135,15 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                                     \"use `break` on its own without a value inside this `{}` loop\",\n                                     kind.name(),\n                                 ),\n-                                \"break\".to_string(),\n+                                format!(\n+                                    \"break{}\",\n+                                    break_label\n+                                        .label\n+                                        .map_or_else(String::new, |l| format!(\" {}\", l.ident))\n+                                ),\n                                 Applicability::MaybeIncorrect,\n                             );\n-                            if let Some(label) = label {\n+                            if let (Some(label), None) = (loop_label, break_label.label) {\n                                 match break_expr.kind {\n                                     hir::ExprKind::Path(hir::QPath::Resolved(\n                                         None,"}, {"sha": "adb099f9b1769ed0f26048775866844c4604c4fe", "filename": "src/test/ui/loops/loop-break-value.stderr", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9e82329c8f621e59833f4e2d747acdd83b188054/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e82329c8f621e59833f4e2d747acdd83b188054/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr?ref=9e82329c8f621e59833f4e2d747acdd83b188054", "patch": "@@ -46,12 +46,8 @@ LL |             break 'while_loop 123;\n    |\n help: use `break` on its own without a value inside this `while` loop\n    |\n-LL |             break;\n-   |             ^^^^^\n-help: alternatively, you might have meant to use the available loop label\n-   |\n-LL |             break 'while_loop 'while_loop;\n-   |                               ^^^^^^^^^^^\n+LL |             break 'while_loop;\n+   |             ^^^^^^^^^^^^^^^^^\n \n error[E0571]: `break` with value from a `while` loop\n   --> $DIR/loop-break-value.rs:38:12\n@@ -90,12 +86,8 @@ LL |             break 'while_let_loop \"nope\";\n    |\n help: use `break` on its own without a value inside this `while` loop\n    |\n-LL |             break;\n-   |             ^^^^^\n-help: alternatively, you might have meant to use the available loop label\n-   |\n-LL |             break 'while_let_loop 'while_let_loop;\n-   |                                   ^^^^^^^^^^^^^^^\n+LL |             break 'while_let_loop;\n+   |             ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0571]: `break` with value from a `for` loop\n   --> $DIR/loop-break-value.rs:56:9\n@@ -135,12 +127,8 @@ LL |             break 'for_loop Some(17);\n    |\n help: use `break` on its own without a value inside this `for` loop\n    |\n-LL |             break;\n-   |             ^^^^^\n-help: alternatively, you might have meant to use the available loop label\n-   |\n-LL |             break 'for_loop 'for_loop;\n-   |                             ^^^^^^^^^\n+LL |             break 'for_loop;\n+   |             ^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:4:31"}]}