{"sha": "9773a22119bf416a1c53d0ee30f6a127c7e274e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NzNhMjIxMTliZjQxNmExYzUzZDBlZTMwZjZhMTI3YzdlMjc0ZTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-23T18:55:32Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-23T19:01:27Z"}, "message": "shuffle error messages in borrowck, and prevent it from spewing too many\n\nalso, fix a few minor issues it complains about", "tree": {"sha": "2b06ac34fa37183b3e27dad396bdfb9ba123cb9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b06ac34fa37183b3e27dad396bdfb9ba123cb9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9773a22119bf416a1c53d0ee30f6a127c7e274e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9773a22119bf416a1c53d0ee30f6a127c7e274e1", "html_url": "https://github.com/rust-lang/rust/commit/9773a22119bf416a1c53d0ee30f6a127c7e274e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9773a22119bf416a1c53d0ee30f6a127c7e274e1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "248f8826a9287a1c98144053289aca4355785391", "url": "https://api.github.com/repos/rust-lang/rust/commits/248f8826a9287a1c98144053289aca4355785391", "html_url": "https://github.com/rust-lang/rust/commit/248f8826a9287a1c98144053289aca4355785391"}], "stats": {"total": 142, "additions": 74, "deletions": 68}, "files": [{"sha": "ee01a0e89e2317a93d81b05ad73e3e51e4ad2953", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9773a22119bf416a1c53d0ee30f6a127c7e274e1/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9773a22119bf416a1c53d0ee30f6a127c7e274e1/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=9773a22119bf416a1c53d0ee30f6a127c7e274e1", "patch": "@@ -498,6 +498,8 @@ enum check_loan_ctxt = @{\n     bccx: borrowck_ctxt,\n     req_maps: req_maps,\n \n+    reported: hashmap<ast::node_id, ()>,\n+\n     // Keep track of whether we're inside a ctor, so as to\n     // allow mutating immutable fields in the same class if\n     // we are in a ctor, we track the self id\n@@ -525,6 +527,7 @@ fn check_loans(bccx: borrowck_ctxt,\n                crate: @ast::crate) {\n     let clcx = check_loan_ctxt(@{bccx: bccx,\n                                  req_maps: req_maps,\n+                                 reported: int_hash(),\n                                  mut in_ctor: false,\n                                  mut is_pure: pc_impure});\n     let vt = visit::mk_vt(@{visit_expr: check_loans_in_expr,\n@@ -641,11 +644,9 @@ impl methods for check_loan_ctxt {\n                 /*ok*/\n               }\n               ast::impure_fn | ast::unsafe_fn {\n-                self.bccx.span_err(\n+                self.report_purity_error(\n                     expr.span,\n-                    \"access to non-pure functions \\\n-                     prohibited in a pure context\");\n-                self.report_why_pure();\n+                    \"access to non-pure functions\");\n               }\n             }\n           }\n@@ -739,11 +740,9 @@ impl methods for check_loan_ctxt {\n         // assigned, because it is uniquely tied to this function and\n         // is not visible from the outside\n         if self.is_pure != pc_impure && cmt.lp.is_none() {\n-            self.bccx.span_err(\n+            self.report_purity_error(\n                 ex.span,\n-                #fmt[\"%s prohibited in a pure context\",\n-                     at.ing_form(self.bccx.cmt_to_str(cmt))]);\n-            self.report_why_pure();\n+                at.ing_form(self.bccx.cmt_to_str(cmt)));\n         }\n \n         // check for a conflicting loan as well, except in the case of\n@@ -776,19 +775,26 @@ impl methods for check_loan_ctxt {\n         self.bccx.add_to_mutbl_map(cmt);\n     }\n \n-    fn report_why_pure() {\n-        alt self.is_pure {\n+    fn report_purity_error(sp: span, msg: str) {\n+        alt copy self.is_pure {\n           pc_impure {\n-            self.tcx().sess.bug(\"report_why_pure() called when impure\");\n+            self.tcx().sess.bug(\"report_purity_error() called when impure\");\n           }\n           pc_declaration {\n-            // fn was declared pure; no need to report this, I think\n+            self.tcx().sess.span_err(\n+                sp,\n+                #fmt[\"%s prohibited in pure context\", msg]);\n           }\n           pc_cmt(e) {\n-            self.tcx().sess.span_note(\n-                e.cmt.span,\n-                #fmt[\"pure context is required due to an illegal borrow: %s\",\n-                     self.bccx.bckerr_code_to_str(e.code)]);\n+            if self.reported.insert(e.cmt.id, ()) {\n+                self.tcx().sess.span_err(\n+                    e.cmt.span,\n+                    #fmt[\"illegal borrow unless pure: %s\",\n+                         self.bccx.bckerr_code_to_str(e.code)]);\n+                self.tcx().sess.span_note(\n+                    sp,\n+                    #fmt[\"impure due to %s\", msg]);\n+            }\n           }\n         }\n     }"}, {"sha": "abce3067fdc9bc628c5ff688478f0d4d6c2d52dc", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9773a22119bf416a1c53d0ee30f6a127c7e274e1/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9773a22119bf416a1c53d0ee30f6a127c7e274e1/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=9773a22119bf416a1c53d0ee30f6a127c7e274e1", "patch": "@@ -717,15 +717,15 @@ fn follow_import(e: env, &&sc: scopes, path: [ident], sp: span) ->\n     let mut dcur = lookup_in_scope_strict(e, sc, sp, path[0], ns_module);\n     let mut i = 1u;\n     loop {\n-       alt dcur {\n+       alt copy dcur {\n           some(dcur_def) {\n             if i == path_len { break; }\n             dcur =\n                 lookup_in_mod_strict(e, dcur_def, sp, path[i],\n                                  ns_module, outside);\n             i += 1u;\n           }\n-          _ { break; }\n+          none { break; }\n        }\n     }\n     if i == path_len {"}, {"sha": "f9cc22a595ed44738fca3600a7652728fa8c4119", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9773a22119bf416a1c53d0ee30f6a127c7e274e1/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9773a22119bf416a1c53d0ee30f6a127c7e274e1/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=9773a22119bf416a1c53d0ee30f6a127c7e274e1", "patch": "@@ -235,7 +235,7 @@ fn check_main_fn_ty(ccx: @crate_ctxt,\n fn check_for_main_fn(ccx: @crate_ctxt, crate: @ast::crate) {\n     let tcx = ccx.tcx;\n     if !tcx.sess.building_library {\n-        alt tcx.sess.main_fn {\n+        alt copy tcx.sess.main_fn {\n           some((id, sp)) { check_main_fn_ty(ccx, id, sp); }\n           none { tcx.sess.span_err(crate.span, \"main function not found\"); }\n         }"}, {"sha": "b9036efa870c242ce7d72a476d7bed5a0e751382", "filename": "src/test/compile-fail/borrowck-lend-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9773a22119bf416a1c53d0ee30f6a127c7e274e1/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9773a22119bf416a1c53d0ee30f6a127c7e274e1/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-args.rs?ref=9773a22119bf416a1c53d0ee30f6a127c7e274e1", "patch": "@@ -8,8 +8,8 @@ fn borrow_from_arg_imm_ref(&&v: ~int) {\n }\n \n fn borrow_from_arg_mut_ref(&v: ~int) {\n-    borrow(v); //! ERROR access to non-pure functions prohibited in a pure context\n-    //!^ NOTE pure context is required due to an illegal borrow: unique value in aliasable, mutable location\n+    borrow(v); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //!^ NOTE impure due to access to non-pure functions\n }\n \n fn borrow_from_arg_move(-v: ~int) {"}, {"sha": "deeb2a574156815d3f9d5603f4b607c9ad0b1f01", "filename": "src/test/compile-fail/borrowck-pat-enum-in-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9773a22119bf416a1c53d0ee30f6a127c7e274e1/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-enum-in-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9773a22119bf416a1c53d0ee30f6a127c7e274e1/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-enum-in-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-enum-in-box.rs?ref=9773a22119bf416a1c53d0ee30f6a127c7e274e1", "patch": "@@ -30,8 +30,8 @@ fn process(_i: int) {}\n \n fn match_const_box_and_do_bad_things(v: &const @const option<int>) {\n     alt *v {\n-      @some(i) { //! NOTE pure context is required due to an illegal borrow: enum variant in aliasable, mutable location\n-        process(i) //! ERROR access to non-pure functions prohibited in a pure context\n+      @some(i) { //! ERROR illegal borrow unless pure: enum variant in aliasable, mutable location\n+        process(i) //! NOTE impure due to access to non-pure functions\n       }\n       @none {}\n     }"}, {"sha": "30e9db65f0e731353da6ae44ddb15c1a1aa72965", "filename": "src/test/compile-fail/borrowck-pat-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9773a22119bf416a1c53d0ee30f6a127c7e274e1/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9773a22119bf416a1c53d0ee30f6a127c7e274e1/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-enum.rs?ref=9773a22119bf416a1c53d0ee30f6a127c7e274e1", "patch": "@@ -36,8 +36,8 @@ fn match_const_reg_unused(v: &const option<int>) {\n \n fn match_const_reg_impure(v: &const option<int>) {\n     alt *v {\n-      some(i) {impure(i)} //! ERROR access to non-pure functions prohibited in a pure context\n-      //!^ NOTE pure context is required due to an illegal borrow: enum variant in aliasable, mutable location\n+      some(i) {impure(i)} //! ERROR illegal borrow unless pure: enum variant in aliasable, mutable location\n+      //!^ NOTE impure due to access to non-pure functions\n       none {}\n     }\n }"}, {"sha": "d16c4a16acc0a06b26d2d31cbdcee96910c3a212", "filename": "src/test/compile-fail/borrowck-unchecked-with-borrow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9773a22119bf416a1c53d0ee30f6a127c7e274e1/src%2Ftest%2Fcompile-fail%2Fborrowck-unchecked-with-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9773a22119bf416a1c53d0ee30f6a127c7e274e1/src%2Ftest%2Fcompile-fail%2Fborrowck-unchecked-with-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-unchecked-with-borrow.rs?ref=9773a22119bf416a1c53d0ee30f6a127c7e274e1", "patch": "@@ -3,13 +3,13 @@\n \n fn impure(_i: int) {}\n \n+// check that unchecked alone does not override borrowck:\n fn foo(v: &const option<int>) {\n     alt *v {\n       some(i) {\n-        //!^ NOTE pure context is required due to an illegal borrow: enum variant in aliasable, mutable location\n-        // check that unchecked alone does not override borrowck:\n+        //!^ ERROR illegal borrow unless pure: enum variant in aliasable, mutable location\n         unchecked {\n-            impure(i); //! ERROR access to non-pure functions prohibited in a pure context\n+            impure(i); //! NOTE impure due to access to non-pure functions\n         }\n       }\n       none {"}, {"sha": "a6a94663b8f67d1c9020d9fc0bcf4740a6d1ab99", "filename": "src/test/compile-fail/borrowck-uniq-via-box.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9773a22119bf416a1c53d0ee30f6a127c7e274e1/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9773a22119bf416a1c53d0ee30f6a127c7e274e1/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-box.rs?ref=9773a22119bf416a1c53d0ee30f6a127c7e274e1", "patch": "@@ -4,23 +4,23 @@\n fn borrow(_v: &int) {}\n \n fn box_mut(v: @mut ~int) {\n-    borrow(*v); //! ERROR access to non-pure functions prohibited in a pure context\n-    //!^ NOTE pure context is required due to an illegal borrow: unique value in aliasable, mutable location\n+    borrow(*v); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //!^ NOTE impure due to access to non-pure functions\n }\n \n fn box_rec_mut(v: @{mut f: ~int}) {\n-    borrow(v.f); //! ERROR access to non-pure functions prohibited in a pure context\n-    //!^ NOTE pure context is required due to an illegal borrow: unique value in aliasable, mutable location\n+    borrow(v.f); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //!^ NOTE impure due to access to non-pure functions\n }\n \n fn box_mut_rec(v: @mut {f: ~int}) {\n-    borrow(v.f); //! ERROR access to non-pure functions prohibited in a pure context\n-    //!^ NOTE pure context is required due to an illegal borrow: unique value in aliasable, mutable location\n+    borrow(v.f); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //!^ NOTE impure due to access to non-pure functions\n }\n \n fn box_mut_recs(v: @mut {f: {g: {h: ~int}}}) {\n-    borrow(v.f.g.h); //! ERROR access to non-pure functions prohibited in a pure context\n-    //!^ NOTE pure context is required due to an illegal borrow: unique value in aliasable, mutable location\n+    borrow(v.f.g.h); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //!^ NOTE impure due to access to non-pure functions\n }\n \n fn box_imm(v: @~int) {\n@@ -36,28 +36,28 @@ fn box_imm_recs(v: @{f: {g: {h: ~int}}}) {\n }\n \n fn box_const(v: @const ~int) {\n-    borrow(*v); //! ERROR access to non-pure functions prohibited in a pure context\n-    //!^ NOTE pure context is required due to an illegal borrow: unique value in aliasable, mutable location\n+    borrow(*v); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //!^ NOTE impure due to access to non-pure functions\n }\n \n fn box_rec_const(v: @{const f: ~int}) {\n-    borrow(v.f); //! ERROR access to non-pure functions prohibited in a pure context\n-    //!^ NOTE pure context is required due to an illegal borrow: unique value in aliasable, mutable location\n+    borrow(v.f); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //!^ NOTE impure due to access to non-pure functions\n }\n \n fn box_recs_const(v: @{f: {g: {const h: ~int}}}) {\n-    borrow(v.f.g.h); //! ERROR access to non-pure functions prohibited in a pure context\n-    //!^ NOTE pure context is required due to an illegal borrow: unique value in aliasable, mutable location\n+    borrow(v.f.g.h); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //!^ NOTE impure due to access to non-pure functions\n }\n \n fn box_const_rec(v: @const {f: ~int}) {\n-    borrow(v.f); //! ERROR access to non-pure functions prohibited in a pure context\n-    //!^ NOTE pure context is required due to an illegal borrow: unique value in aliasable, mutable location\n+    borrow(v.f); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //!^ NOTE impure due to access to non-pure functions\n }\n \n fn box_const_recs(v: @const {f: {g: {h: ~int}}}) {\n-    borrow(v.f.g.h); //! ERROR access to non-pure functions prohibited in a pure context\n-    //!^ NOTE pure context is required due to an illegal borrow: unique value in aliasable, mutable location\n+    borrow(v.f.g.h); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //!^ NOTE impure due to access to non-pure functions\n }\n \n fn main() {"}, {"sha": "166b3284c9bcdf24b6191d7b1c0b28245b02a12a", "filename": "src/test/compile-fail/borrowck-uniq-via-ref.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9773a22119bf416a1c53d0ee30f6a127c7e274e1/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9773a22119bf416a1c53d0ee30f6a127c7e274e1/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-ref.rs?ref=9773a22119bf416a1c53d0ee30f6a127c7e274e1", "patch": "@@ -3,23 +3,23 @@\n fn borrow(_v: &int) {}\n \n fn box_mut(v: &mut ~int) {\n-    borrow(*v); //! ERROR access to non-pure functions prohibited in a pure context\n-    //!^ NOTE pure context is required due to an illegal borrow: unique value in aliasable, mutable location\n+    borrow(*v); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //!^ NOTE impure due to access to non-pure functions\n }\n \n fn box_rec_mut(v: &{mut f: ~int}) {\n-    borrow(v.f); //! ERROR access to non-pure functions prohibited in a pure context\n-    //!^ NOTE pure context is required due to an illegal borrow: unique value in aliasable, mutable location\n+    borrow(v.f); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //!^ NOTE impure due to access to non-pure functions\n }\n \n fn box_mut_rec(v: &mut {f: ~int}) {\n-    borrow(v.f); //! ERROR access to non-pure functions prohibited in a pure context\n-    //!^ NOTE pure context is required due to an illegal borrow: unique value in aliasable, mutable location\n+    borrow(v.f); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //!^ NOTE impure due to access to non-pure functions\n }\n \n fn box_mut_recs(v: &mut {f: {g: {h: ~int}}}) {\n-    borrow(v.f.g.h); //! ERROR access to non-pure functions prohibited in a pure context\n-    //!^ NOTE pure context is required due to an illegal borrow: unique value in aliasable, mutable location\n+    borrow(v.f.g.h); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //!^ NOTE impure due to access to non-pure functions\n }\n \n fn box_imm(v: &~int) {\n@@ -35,28 +35,28 @@ fn box_imm_recs(v: &{f: {g: {h: ~int}}}) {\n }\n \n fn box_const(v: &const ~int) {\n-    borrow(*v); //! ERROR access to non-pure functions prohibited in a pure context\n-    //!^ NOTE pure context is required due to an illegal borrow: unique value in aliasable, mutable location\n+    borrow(*v); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //!^ NOTE impure due to access to non-pure functions\n }\n \n fn box_rec_const(v: &{const f: ~int}) {\n-    borrow(v.f); //! ERROR access to non-pure functions prohibited in a pure context\n-    //!^ NOTE pure context is required due to an illegal borrow: unique value in aliasable, mutable location\n+    borrow(v.f); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //!^ NOTE impure due to access to non-pure functions\n }\n \n fn box_recs_const(v: &{f: {g: {const h: ~int}}}) {\n-    borrow(v.f.g.h); //! ERROR access to non-pure functions prohibited in a pure context\n-    //!^ NOTE pure context is required due to an illegal borrow: unique value in aliasable, mutable location\n+    borrow(v.f.g.h); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //!^ NOTE impure due to access to non-pure functions\n }\n \n fn box_const_rec(v: &const {f: ~int}) {\n-    borrow(v.f); //! ERROR access to non-pure functions prohibited in a pure context\n-    //!^ NOTE pure context is required due to an illegal borrow: unique value in aliasable, mutable location\n+    borrow(v.f); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //!^ NOTE impure due to access to non-pure functions\n }\n \n fn box_const_recs(v: &const {f: {g: {h: ~int}}}) {\n-    borrow(v.f.g.h); //! ERROR access to non-pure functions prohibited in a pure context\n-    //!^ NOTE pure context is required due to an illegal borrow: unique value in aliasable, mutable location\n+    borrow(v.f.g.h); //! ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+    //!^ NOTE impure due to access to non-pure functions\n }\n \n fn main() {"}, {"sha": "9c6d0431e18e19cd000f56293a87d831adb2b9d3", "filename": "src/test/compile-fail/impure-pred.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9773a22119bf416a1c53d0ee30f6a127c7e274e1/src%2Ftest%2Fcompile-fail%2Fimpure-pred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9773a22119bf416a1c53d0ee30f6a127c7e274e1/src%2Ftest%2Fcompile-fail%2Fimpure-pred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpure-pred.rs?ref=9773a22119bf416a1c53d0ee30f6a127c7e274e1", "patch": "@@ -3,7 +3,7 @@\n fn g() { }\n \n pure fn f(_q: int) -> bool {\n-    g(); //! ERROR access to non-pure functions prohibited in a pure context\n+    g(); //! ERROR access to non-pure functions prohibited in pure context\n     ret true;\n }\n "}, {"sha": "e8f469a8c8c8d92a3c9002f6132cc6a3282a731e", "filename": "src/test/compile-fail/pure-modifies-aliased.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9773a22119bf416a1c53d0ee30f6a127c7e274e1/src%2Ftest%2Fcompile-fail%2Fpure-modifies-aliased.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9773a22119bf416a1c53d0ee30f6a127c7e274e1/src%2Ftest%2Fcompile-fail%2Fpure-modifies-aliased.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpure-modifies-aliased.rs?ref=9773a22119bf416a1c53d0ee30f6a127c7e274e1", "patch": "@@ -1,16 +1,16 @@\n // Check that pure functions cannot modify aliased state.\n \n pure fn modify_in_ref(&&sum: {mut f: int}) {\n-    sum.f = 3; //! ERROR assigning to mutable field prohibited in a pure context\n+    sum.f = 3; //! ERROR assigning to mutable field prohibited in pure context\n }\n \n pure fn modify_in_box(sum: @mut {f: int}) {\n-    sum.f = 3; //! ERROR assigning to mutable field prohibited in a pure context\n+    sum.f = 3; //! ERROR assigning to mutable field prohibited in pure context\n }\n \n impl foo for int {\n     pure fn modify_in_box_rec(sum: @{mut f: int}) {\n-        sum.f = self; //! ERROR assigning to mutable field prohibited in a pure context\n+        sum.f = self; //! ERROR assigning to mutable field prohibited in pure context\n     }\n }\n "}]}