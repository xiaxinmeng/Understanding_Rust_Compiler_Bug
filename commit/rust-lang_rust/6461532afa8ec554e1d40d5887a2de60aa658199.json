{"sha": "6461532afa8ec554e1d40d5887a2de60aa658199", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NjE1MzJhZmE4ZWM1NTRlMWQ0MGQ1ODg3YTJkZTYwYWE2NTgxOTk=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-01-25T18:03:48Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-01-25T18:03:48Z"}, "message": "Fix never-type rvalue ICE", "tree": {"sha": "7210e05b144d50e345720a9d722c2d04f6000555", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7210e05b144d50e345720a9d722c2d04f6000555"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6461532afa8ec554e1d40d5887a2de60aa658199", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6461532afa8ec554e1d40d5887a2de60aa658199", "html_url": "https://github.com/rust-lang/rust/commit/6461532afa8ec554e1d40d5887a2de60aa658199", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6461532afa8ec554e1d40d5887a2de60aa658199/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da569fa9ddf8369a9809184d43c600dc06bd4b4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/da569fa9ddf8369a9809184d43c600dc06bd4b4d", "html_url": "https://github.com/rust-lang/rust/commit/da569fa9ddf8369a9809184d43c600dc06bd4b4d"}], "stats": {"total": 56, "additions": 54, "deletions": 2}, "files": [{"sha": "f8718c36ede9899c2093320a8437442323f2f2d5", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6461532afa8ec554e1d40d5887a2de60aa658199/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6461532afa8ec554e1d40d5887a2de60aa658199/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=6461532afa8ec554e1d40d5887a2de60aa658199", "patch": "@@ -143,7 +143,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         if let Some(expr) = expr {\n             unpack!(block = this.into(destination, block, expr));\n         } else {\n-            this.cfg.push_assign_unit(block, source_info, destination);\n+            let tcx = this.hir.tcx();\n+            let ty = destination.ty(&this.local_decls, tcx).to_ty(tcx);\n+            if ty.is_nil() {\n+                // We only want to assign an implicit `()` as the return value of the block if the\n+                // block does not diverge. (Otherwise, we may try to assign a unit to a `!`-type.)\n+                this.cfg.push_assign_unit(block, source_info, destination);\n+            }\n         }\n         // Finally, we pop all the let scopes before exiting out from the scope of block\n         // itself."}, {"sha": "68b23d1ae17e85c57f2eb192237c5946c31c7327", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6461532afa8ec554e1d40d5887a2de60aa658199/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6461532afa8ec554e1d40d5887a2de60aa658199/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=6461532afa8ec554e1d40d5887a2de60aa658199", "patch": "@@ -272,7 +272,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ExprKind::Continue { .. } |\n             ExprKind::Break { .. } |\n             ExprKind::InlineAsm { .. } |\n-            ExprKind::Return {.. } => {\n+            ExprKind::Return { .. } => {\n                 unpack!(block = this.stmt_expr(block, expr));\n                 this.cfg.push_assign_unit(block, source_info, destination);\n                 block.unit()"}, {"sha": "9bf003ee1dd3bdea137f5749a84a433dab788598", "filename": "src/test/run-pass/never-type-rvalues.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6461532afa8ec554e1d40d5887a2de60aa658199/src%2Ftest%2Frun-pass%2Fnever-type-rvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6461532afa8ec554e1d40d5887a2de60aa658199/src%2Ftest%2Frun-pass%2Fnever-type-rvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnever-type-rvalues.rs?ref=6461532afa8ec554e1d40d5887a2de60aa658199", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(never_type)]\n+#![allow(dead_code)]\n+#![allow(path_statements)]\n+#![allow(unreachable_patterns)]\n+\n+fn never_direct(x: !) {\n+    x;\n+}\n+\n+fn never_ref_pat(ref x: !) {\n+    *x;\n+}\n+\n+fn never_ref(x: &!) {\n+    let &y = x;\n+    y;\n+}\n+\n+fn never_pointer(x: *const !) {\n+    unsafe {\n+        *x;\n+    }\n+}\n+\n+fn never_slice(x: &[!]) {\n+    x[0];\n+}\n+\n+fn never_match(x: Result<(), !>) {\n+    match x {\n+        Ok(_) => {},\n+        Err(_) => {},\n+    }\n+}\n+\n+pub fn main() { }"}]}