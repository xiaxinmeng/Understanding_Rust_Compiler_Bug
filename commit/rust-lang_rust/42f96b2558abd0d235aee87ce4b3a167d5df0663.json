{"sha": "42f96b2558abd0d235aee87ce4b3a167d5df0663", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZjk2YjI1NThhYmQwZDIzNWFlZTg3Y2U0YjNhMTY3ZDVkZjA2NjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-04T06:28:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-04T06:28:23Z"}, "message": "Auto merge of #4164 - mikerite:fix-4144, r=mikerite\n\nFix .map(..).unwrap_or_else(..) bad suggestion\n\nCloses #4144", "tree": {"sha": "14744b4606512c86dc8bb2d2e176ba2991358dae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14744b4606512c86dc8bb2d2e176ba2991358dae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42f96b2558abd0d235aee87ce4b3a167d5df0663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42f96b2558abd0d235aee87ce4b3a167d5df0663", "html_url": "https://github.com/rust-lang/rust/commit/42f96b2558abd0d235aee87ce4b3a167d5df0663", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42f96b2558abd0d235aee87ce4b3a167d5df0663/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20da8f45c601d0eec8af8c0897abd536ad57951f", "url": "https://api.github.com/repos/rust-lang/rust/commits/20da8f45c601d0eec8af8c0897abd536ad57951f", "html_url": "https://github.com/rust-lang/rust/commit/20da8f45c601d0eec8af8c0897abd536ad57951f"}, {"sha": "3b7d6eeb4fc4112504fc77dee6fc35a16c80f05c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b7d6eeb4fc4112504fc77dee6fc35a16c80f05c", "html_url": "https://github.com/rust-lang/rust/commit/3b7d6eeb4fc4112504fc77dee6fc35a16c80f05c"}], "stats": {"total": 47, "additions": 38, "deletions": 9}, "files": [{"sha": "1e7ff4907ae68c44f94e4d3db4ab0da8ee59848d", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/42f96b2558abd0d235aee87ce4b3a167d5df0663/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f96b2558abd0d235aee87ce4b3a167d5df0663/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=42f96b2558abd0d235aee87ce4b3a167d5df0663", "patch": "@@ -20,6 +20,7 @@ use syntax::symbol::LocalInternedString;\n \n use crate::utils::paths;\n use crate::utils::sugg;\n+use crate::utils::usage::mutated_variables;\n use crate::utils::{\n     get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, implements_trait, in_macro, is_copy,\n     is_ctor_function, is_expn_of, is_self, is_self_ty, iter_input_pats, last_path_segment, match_def_path, match_path,\n@@ -1880,7 +1881,20 @@ fn lint_map_unwrap_or_else<'a, 'tcx>(\n     // lint if the caller of `map()` is an `Option`\n     let is_option = match_type(cx, cx.tables.expr_ty(&map_args[0]), &paths::OPTION);\n     let is_result = match_type(cx, cx.tables.expr_ty(&map_args[0]), &paths::RESULT);\n+\n     if is_option || is_result {\n+        // Don't make a suggestion that may fail to compile due to mutably borrowing\n+        // the same variable twice.\n+        let map_mutated_vars = mutated_variables(&map_args[0], cx);\n+        let unwrap_mutated_vars = mutated_variables(&unwrap_args[1], cx);\n+        if let (Some(map_mutated_vars), Some(unwrap_mutated_vars)) = (map_mutated_vars, unwrap_mutated_vars) {\n+            if map_mutated_vars.intersection(&unwrap_mutated_vars).next().is_some() {\n+                return;\n+            }\n+        } else {\n+            return;\n+        }\n+\n         // lint message\n         let msg = if is_option {\n             \"called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling \\"}, {"sha": "1b50c94ac03ae9ac1b92047f9fbc65c1176b7b3d", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/42f96b2558abd0d235aee87ce4b3a167d5df0663/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f96b2558abd0d235aee87ce4b3a167d5df0663/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=42f96b2558abd0d235aee87ce4b3a167d5df0663", "patch": "@@ -203,6 +203,21 @@ fn option_methods() {\n     // Macro case.\n     // Should not lint.\n     let _ = opt_map!(opt, |x| x + 1).unwrap_or_else(|| 0);\n+\n+    // Issue #4144\n+    {\n+        let mut frequencies = HashMap::new();\n+        let word = \"foo\";\n+\n+        frequencies\n+            .get_mut(word)\n+            .map(|count| {\n+                *count += 1;\n+            })\n+            .unwrap_or_else(|| {\n+                frequencies.insert(word.to_owned(), 1);\n+            });\n+    }\n }\n \n /// Checks implementation of `FILTER_NEXT` lint."}, {"sha": "8d28c3282ae76aa4938b44cad67a7173d07d1fb3", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/42f96b2558abd0d235aee87ce4b3a167d5df0663/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42f96b2558abd0d235aee87ce4b3a167d5df0663/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=42f96b2558abd0d235aee87ce4b3a167d5df0663", "patch": "@@ -130,7 +130,7 @@ LL | |                 );\n    | |_________________^\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:214:13\n+  --> $DIR/methods.rs:229:13\n    |\n LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -139,7 +139,7 @@ LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:217:13\n+  --> $DIR/methods.rs:232:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^\n@@ -149,7 +149,7 @@ LL | |                    ).next();\n    | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:233:13\n+  --> $DIR/methods.rs:248:13\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -158,7 +158,7 @@ LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    = note: replace `find(|&x| *x < 0).is_some()` with `any(|x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:236:13\n+  --> $DIR/methods.rs:251:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n    |  _____________^\n@@ -168,15 +168,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:242:13\n+  --> $DIR/methods.rs:257:13\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:245:13\n+  --> $DIR/methods.rs:260:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n    |  _____________^\n@@ -186,15 +186,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:251:13\n+  --> $DIR/methods.rs:266:13\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:254:13\n+  --> $DIR/methods.rs:269:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n    |  _____________^\n@@ -204,7 +204,7 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-  --> $DIR/methods.rs:269:13\n+  --> $DIR/methods.rs:284:13\n    |\n LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^"}]}