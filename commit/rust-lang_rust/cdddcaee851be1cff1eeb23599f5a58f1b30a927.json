{"sha": "cdddcaee851be1cff1eeb23599f5a58f1b30a927", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkZGRjYWVlODUxYmUxY2ZmMWVlYjIzNTk5ZjVhNThmMWIzMGE5Mjc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-06T21:32:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-06T21:32:27Z"}, "message": "Merge #6477\n\n6477: Add infer_function_return_type assist r=matklad a=Veykril\n\nThis adds an assist to insert a functions return type if it hasn't been specified yet by inferring it from the functions tail expression. This assist only becomes active if the cursor is on the tail expression. See https://github.com/rust-analyzer/rust-analyzer/issues/6303#issuecomment-714657326\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "96067539ff813396bb2a320a2fa7efb7b51bc4a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96067539ff813396bb2a320a2fa7efb7b51bc4a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdddcaee851be1cff1eeb23599f5a58f1b30a927", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfpcDrCRBK7hj4Ov3rIwAAdHIIAEPwAWN7lnu8WWT4sx6g33as\njbCZCg1Q9Tozq28I/daSq4Simb/HPYUseiQR2UQv53VB3XqGIdqOyhbOX5DHK/Fz\neDr0UsorXsBlOAmyaEDUut1tpAWWmcz9CTTdla+1IeZzELTAwk7q/bJ2+D8KKj7X\nrIYsJNrILFJ5N2x57r7ZCjRv46u8B1riYFqy3VqMKGlQvO/ZbBPL2Sbnkn0z3/Ks\nP+07Pj3JcS6/ZnAOXMavwkZ0h/2AdCGAjDaA2aF0BsnID1cHey0sH4ZJpQ0u6udk\nducrDF9e26A24iYAYYc4nYbmCoN1MlGfecK6/yPaD/n6te2VuY7BSdVcVFfCIbQ=\n=XtjT\n-----END PGP SIGNATURE-----\n", "payload": "tree 96067539ff813396bb2a320a2fa7efb7b51bc4a2\nparent fe13a4aeb1fd33aeda2d884b2691b23b0ca5daee\nparent 186431e178c04fed8744d81b834547700af46430\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1604698347 +0000\ncommitter GitHub <noreply@github.com> 1604698347 +0000\n\nMerge #6477\n\n6477: Add infer_function_return_type assist r=matklad a=Veykril\n\nThis adds an assist to insert a functions return type if it hasn't been specified yet by inferring it from the functions tail expression. This assist only becomes active if the cursor is on the tail expression. See https://github.com/rust-analyzer/rust-analyzer/issues/6303#issuecomment-714657326\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdddcaee851be1cff1eeb23599f5a58f1b30a927", "html_url": "https://github.com/rust-lang/rust/commit/cdddcaee851be1cff1eeb23599f5a58f1b30a927", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdddcaee851be1cff1eeb23599f5a58f1b30a927/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe13a4aeb1fd33aeda2d884b2691b23b0ca5daee", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe13a4aeb1fd33aeda2d884b2691b23b0ca5daee", "html_url": "https://github.com/rust-lang/rust/commit/fe13a4aeb1fd33aeda2d884b2691b23b0ca5daee"}, {"sha": "186431e178c04fed8744d81b834547700af46430", "url": "https://api.github.com/repos/rust-lang/rust/commits/186431e178c04fed8744d81b834547700af46430", "html_url": "https://github.com/rust-lang/rust/commit/186431e178c04fed8744d81b834547700af46430"}], "stats": {"total": 352, "additions": 352, "deletions": 0}, "files": [{"sha": "520d07ae067c93c6db7c1d77519d447c3605a797", "filename": "crates/assists/src/handlers/infer_function_return_type.rs", "status": "added", "additions": 337, "deletions": 0, "changes": 337, "blob_url": "https://github.com/rust-lang/rust/blob/cdddcaee851be1cff1eeb23599f5a58f1b30a927/crates%2Fassists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdddcaee851be1cff1eeb23599f5a58f1b30a927/crates%2Fassists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs?ref=cdddcaee851be1cff1eeb23599f5a58f1b30a927", "patch": "@@ -0,0 +1,337 @@\n+use hir::HirDisplay;\n+use syntax::{ast, AstNode, TextRange, TextSize};\n+use test_utils::mark;\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: infer_function_return_type\n+//\n+// Adds the return type to a function or closure inferred from its tail expression if it doesn't have a return\n+// type specified. This assists is useable in a functions or closures tail expression or return type position.\n+//\n+// ```\n+// fn foo() { 4<|>2i32 }\n+// ```\n+// ->\n+// ```\n+// fn foo() -> i32 { 42i32 }\n+// ```\n+pub(crate) fn infer_function_return_type(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let (tail_expr, builder_edit_pos, wrap_expr) = extract_tail(ctx)?;\n+    let module = ctx.sema.scope(tail_expr.syntax()).module()?;\n+    let ty = ctx.sema.type_of_expr(&tail_expr)?;\n+    if ty.is_unit() {\n+        return None;\n+    }\n+    let ty = ty.display_source_code(ctx.db(), module.into()).ok()?;\n+\n+    acc.add(\n+        AssistId(\"infer_function_return_type\", AssistKind::RefactorRewrite),\n+        \"Add this function's return type\",\n+        tail_expr.syntax().text_range(),\n+        |builder| {\n+            match builder_edit_pos {\n+                InsertOrReplace::Insert(insert_pos) => {\n+                    builder.insert(insert_pos, &format!(\"-> {} \", ty))\n+                }\n+                InsertOrReplace::Replace(text_range) => {\n+                    builder.replace(text_range, &format!(\"-> {}\", ty))\n+                }\n+            }\n+            if wrap_expr {\n+                mark::hit!(wrap_closure_non_block_expr);\n+                // `|x| x` becomes `|x| -> T x` which is invalid, so wrap it in a block\n+                builder.replace(tail_expr.syntax().text_range(), &format!(\"{{{}}}\", tail_expr));\n+            }\n+        },\n+    )\n+}\n+\n+enum InsertOrReplace {\n+    Insert(TextSize),\n+    Replace(TextRange),\n+}\n+\n+/// Check the potentially already specified return type and reject it or turn it into a builder command\n+/// if allowed.\n+fn ret_ty_to_action(ret_ty: Option<ast::RetType>, insert_pos: TextSize) -> Option<InsertOrReplace> {\n+    match ret_ty {\n+        Some(ret_ty) => match ret_ty.ty() {\n+            Some(ast::Type::InferType(_)) | None => {\n+                mark::hit!(existing_infer_ret_type);\n+                mark::hit!(existing_infer_ret_type_closure);\n+                Some(InsertOrReplace::Replace(ret_ty.syntax().text_range()))\n+            }\n+            _ => {\n+                mark::hit!(existing_ret_type);\n+                mark::hit!(existing_ret_type_closure);\n+                None\n+            }\n+        },\n+        None => Some(InsertOrReplace::Insert(insert_pos + TextSize::from(1))),\n+    }\n+}\n+\n+fn extract_tail(ctx: &AssistContext) -> Option<(ast::Expr, InsertOrReplace, bool)> {\n+    let (tail_expr, return_type_range, action, wrap_expr) =\n+        if let Some(closure) = ctx.find_node_at_offset::<ast::ClosureExpr>() {\n+            let rpipe_pos = closure.param_list()?.syntax().last_token()?.text_range().end();\n+            let action = ret_ty_to_action(closure.ret_type(), rpipe_pos)?;\n+\n+            let body = closure.body()?;\n+            let body_start = body.syntax().first_token()?.text_range().start();\n+            let (tail_expr, wrap_expr) = match body {\n+                ast::Expr::BlockExpr(block) => (block.expr()?, false),\n+                body => (body, true),\n+            };\n+\n+            let ret_range = TextRange::new(rpipe_pos, body_start);\n+            (tail_expr, ret_range, action, wrap_expr)\n+        } else {\n+            let func = ctx.find_node_at_offset::<ast::Fn>()?;\n+            let rparen_pos = func.param_list()?.r_paren_token()?.text_range().end();\n+            let action = ret_ty_to_action(func.ret_type(), rparen_pos)?;\n+\n+            let body = func.body()?;\n+            let tail_expr = body.expr()?;\n+\n+            let ret_range_end = body.l_curly_token()?.text_range().start();\n+            let ret_range = TextRange::new(rparen_pos, ret_range_end);\n+            (tail_expr, ret_range, action, false)\n+        };\n+    let frange = ctx.frange.range;\n+    if return_type_range.contains_range(frange) {\n+        mark::hit!(cursor_in_ret_position);\n+        mark::hit!(cursor_in_ret_position_closure);\n+    } else if tail_expr.syntax().text_range().contains_range(frange) {\n+        mark::hit!(cursor_on_tail);\n+        mark::hit!(cursor_on_tail_closure);\n+    } else {\n+        return None;\n+    }\n+    Some((tail_expr, action, wrap_expr))\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn infer_return_type_specified_inferred() {\n+        mark::check!(existing_infer_ret_type);\n+        check_assist(\n+            infer_function_return_type,\n+            r#\"fn foo() -> <|>_ {\n+    45\n+}\"#,\n+            r#\"fn foo() -> i32 {\n+    45\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn infer_return_type_specified_inferred_closure() {\n+        mark::check!(existing_infer_ret_type_closure);\n+        check_assist(\n+            infer_function_return_type,\n+            r#\"fn foo() {\n+    || -> _ {<|>45};\n+}\"#,\n+            r#\"fn foo() {\n+    || -> i32 {45};\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn infer_return_type_cursor_at_return_type_pos() {\n+        mark::check!(cursor_in_ret_position);\n+        check_assist(\n+            infer_function_return_type,\n+            r#\"fn foo() <|>{\n+    45\n+}\"#,\n+            r#\"fn foo() -> i32 {\n+    45\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn infer_return_type_cursor_at_return_type_pos_closure() {\n+        mark::check!(cursor_in_ret_position_closure);\n+        check_assist(\n+            infer_function_return_type,\n+            r#\"fn foo() {\n+    || <|>45\n+}\"#,\n+            r#\"fn foo() {\n+    || -> i32 {45}\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn infer_return_type() {\n+        mark::check!(cursor_on_tail);\n+        check_assist(\n+            infer_function_return_type,\n+            r#\"fn foo() {\n+    45<|>\n+}\"#,\n+            r#\"fn foo() -> i32 {\n+    45\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn infer_return_type_nested() {\n+        check_assist(\n+            infer_function_return_type,\n+            r#\"fn foo() {\n+    if true {\n+        3<|>\n+    } else {\n+        5\n+    }\n+}\"#,\n+            r#\"fn foo() -> i32 {\n+    if true {\n+        3\n+    } else {\n+        5\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_ret_type_specified() {\n+        mark::check!(existing_ret_type);\n+        check_assist_not_applicable(\n+            infer_function_return_type,\n+            r#\"fn foo() -> i32 {\n+    ( 45<|> + 32 ) * 123\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_non_tail_expr() {\n+        check_assist_not_applicable(\n+            infer_function_return_type,\n+            r#\"fn foo() {\n+    let x = <|>3;\n+    ( 45 + 32 ) * 123\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_unit_return_type() {\n+        check_assist_not_applicable(\n+            infer_function_return_type,\n+            r#\"fn foo() {\n+    (<|>)\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn infer_return_type_closure_block() {\n+        mark::check!(cursor_on_tail_closure);\n+        check_assist(\n+            infer_function_return_type,\n+            r#\"fn foo() {\n+    |x: i32| {\n+        x<|>\n+    };\n+}\"#,\n+            r#\"fn foo() {\n+    |x: i32| -> i32 {\n+        x\n+    };\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn infer_return_type_closure() {\n+        check_assist(\n+            infer_function_return_type,\n+            r#\"fn foo() {\n+    |x: i32| { x<|> };\n+}\"#,\n+            r#\"fn foo() {\n+    |x: i32| -> i32 { x };\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn infer_return_type_closure_wrap() {\n+        mark::check!(wrap_closure_non_block_expr);\n+        check_assist(\n+            infer_function_return_type,\n+            r#\"fn foo() {\n+    |x: i32| x<|>;\n+}\"#,\n+            r#\"fn foo() {\n+    |x: i32| -> i32 {x};\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn infer_return_type_nested_closure() {\n+        check_assist(\n+            infer_function_return_type,\n+            r#\"fn foo() {\n+    || {\n+        if true {\n+            3<|>\n+        } else {\n+            5\n+        }\n+    }\n+}\"#,\n+            r#\"fn foo() {\n+    || -> i32 {\n+        if true {\n+            3\n+        } else {\n+            5\n+        }\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_ret_type_specified_closure() {\n+        mark::check!(existing_ret_type_closure);\n+        check_assist_not_applicable(\n+            infer_function_return_type,\n+            r#\"fn foo() {\n+    || -> i32 { 3<|> }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_non_tail_expr_closure() {\n+        check_assist_not_applicable(\n+            infer_function_return_type,\n+            r#\"fn foo() {\n+    || -> i32 {\n+        let x = 3<|>;\n+        6\n+    }\n+}\"#,\n+        );\n+    }\n+}"}, {"sha": "af88b34374791af06aad26b8e5d81bf2f69e1adf", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdddcaee851be1cff1eeb23599f5a58f1b30a927/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdddcaee851be1cff1eeb23599f5a58f1b30a927/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=cdddcaee851be1cff1eeb23599f5a58f1b30a927", "patch": "@@ -143,6 +143,7 @@ mod handlers {\n     mod generate_function;\n     mod generate_impl;\n     mod generate_new;\n+    mod infer_function_return_type;\n     mod inline_local_variable;\n     mod introduce_named_lifetime;\n     mod invert_if;\n@@ -190,6 +191,7 @@ mod handlers {\n             generate_function::generate_function,\n             generate_impl::generate_impl,\n             generate_new::generate_new,\n+            infer_function_return_type::infer_function_return_type,\n             inline_local_variable::inline_local_variable,\n             introduce_named_lifetime::introduce_named_lifetime,\n             invert_if::invert_if,"}, {"sha": "168e1626abfa7fb1639466ba4835db6ae134298a", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cdddcaee851be1cff1eeb23599f5a58f1b30a927/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdddcaee851be1cff1eeb23599f5a58f1b30a927/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=cdddcaee851be1cff1eeb23599f5a58f1b30a927", "patch": "@@ -505,6 +505,19 @@ impl<T: Clone> Ctx<T> {\n     )\n }\n \n+#[test]\n+fn doctest_infer_function_return_type() {\n+    check_doc_test(\n+        \"infer_function_return_type\",\n+        r#####\"\n+fn foo() { 4<|>2i32 }\n+\"#####,\n+        r#####\"\n+fn foo() -> i32 { 42i32 }\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_inline_local_variable() {\n     check_doc_test("}]}