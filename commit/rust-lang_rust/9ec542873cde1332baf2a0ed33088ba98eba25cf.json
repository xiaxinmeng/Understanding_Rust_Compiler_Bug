{"sha": "9ec542873cde1332baf2a0ed33088ba98eba25cf", "node_id": "C_kwDOAAsO6NoAKDllYzU0Mjg3M2NkZTEzMzJiYWYyYTBlZDMzMDg4YmE5OGViYTI1Y2Y", "commit": {"author": {"name": "bluthej", "email": "joffrey.bluthe@e.email", "date": "2023-04-06T05:49:59Z"}, "committer": {"name": "bluthej", "email": "joffrey.bluthe@e.email", "date": "2023-04-07T14:07:43Z"}, "message": "Add 5 other container types and start testing", "tree": {"sha": "d455cf845f7534169fd248335ae2319e8d093611", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d455cf845f7534169fd248335ae2319e8d093611"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ec542873cde1332baf2a0ed33088ba98eba25cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ec542873cde1332baf2a0ed33088ba98eba25cf", "html_url": "https://github.com/rust-lang/rust/commit/9ec542873cde1332baf2a0ed33088ba98eba25cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ec542873cde1332baf2a0ed33088ba98eba25cf/comments", "author": {"login": "bluthej", "id": 29771403, "node_id": "MDQ6VXNlcjI5NzcxNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/29771403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluthej", "html_url": "https://github.com/bluthej", "followers_url": "https://api.github.com/users/bluthej/followers", "following_url": "https://api.github.com/users/bluthej/following{/other_user}", "gists_url": "https://api.github.com/users/bluthej/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluthej/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluthej/subscriptions", "organizations_url": "https://api.github.com/users/bluthej/orgs", "repos_url": "https://api.github.com/users/bluthej/repos", "events_url": "https://api.github.com/users/bluthej/events{/privacy}", "received_events_url": "https://api.github.com/users/bluthej/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluthej", "id": 29771403, "node_id": "MDQ6VXNlcjI5NzcxNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/29771403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluthej", "html_url": "https://github.com/bluthej", "followers_url": "https://api.github.com/users/bluthej/followers", "following_url": "https://api.github.com/users/bluthej/following{/other_user}", "gists_url": "https://api.github.com/users/bluthej/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluthej/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluthej/subscriptions", "organizations_url": "https://api.github.com/users/bluthej/orgs", "repos_url": "https://api.github.com/users/bluthej/repos", "events_url": "https://api.github.com/users/bluthej/events{/privacy}", "received_events_url": "https://api.github.com/users/bluthej/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df65d21f4c98a19573f1cd89d9ff01ee8812cf43", "url": "https://api.github.com/repos/rust-lang/rust/commits/df65d21f4c98a19573f1cd89d9ff01ee8812cf43", "html_url": "https://github.com/rust-lang/rust/commit/df65d21f4c98a19573f1cd89d9ff01ee8812cf43"}], "stats": {"total": 132, "additions": 112, "deletions": 20}, "files": [{"sha": "4f5b7762e3c7c9f09d2f42bc672fe76b26e7df97", "filename": "clippy_lints/src/methods/clear_with_drain.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9ec542873cde1332baf2a0ed33088ba98eba25cf/clippy_lints%2Fsrc%2Fmethods%2Fclear_with_drain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec542873cde1332baf2a0ed33088ba98eba25cf/clippy_lints%2Fsrc%2Fmethods%2Fclear_with_drain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fclear_with_drain.rs?ref=9ec542873cde1332baf2a0ed33088ba98eba25cf", "patch": "@@ -2,24 +2,45 @@ use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::is_range_full;\n use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n+use rustc_hir as hir;\n use rustc_hir::{Expr, ExprKind, QPath};\n use rustc_lint::LateContext;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n use super::CLEAR_WITH_DRAIN;\n \n-pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span: Span, arg: &Expr<'_>) {\n-    let ty = cx.typeck_results().expr_ty(recv);\n-    if is_type_diagnostic_item(cx, ty, sym::Vec)\n-        && let ExprKind::Path(QPath::Resolved(None, container_path)) = recv.kind\n-        && is_range_full(cx, arg, Some(container_path))\n+const ACCEPTABLE_TYPES_WITH_ARG: [rustc_span::Symbol; 3] = [sym::String, sym::Vec, sym::VecDeque];\n+\n+const ACCEPTABLE_TYPES_WITHOUT_ARG: [rustc_span::Symbol; 3] = [sym::BinaryHeap, sym::HashMap, sym::HashSet];\n+\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span: Span, arg: Option<&Expr<'_>>) {\n+    if let Some(arg) = arg {\n+        if match_acceptable_type(cx, recv, &ACCEPTABLE_TYPES_WITH_ARG)\n+            && let ExprKind::Path(QPath::Resolved(None, container_path)) = recv.kind\n+            && is_range_full(cx, arg, Some(container_path))\n+        {\n+            suggest(cx, expr, recv, span);\n+        }\n+    } else if match_acceptable_type(cx, recv, &ACCEPTABLE_TYPES_WITHOUT_ARG) {\n+        suggest(cx, expr, recv, span);\n+    }\n+}\n+\n+fn match_acceptable_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>, types: &[rustc_span::Symbol]) -> bool {\n+    let expr_ty = cx.typeck_results().expr_ty(expr).peel_refs();\n+    types.iter().any(|&ty| is_type_diagnostic_item(cx, expr_ty, ty))\n+}\n+\n+fn suggest(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span: Span) {\n+    if let Some(adt) = cx.typeck_results().expr_ty(recv).ty_adt_def()\n+        && let Some(ty_name) = cx.tcx.get_diagnostic_name(adt.did())\n     {\n         span_lint_and_sugg(\n             cx,\n             CLEAR_WITH_DRAIN,\n             span.with_hi(expr.span.hi()),\n-            \"`drain` used to clear a `Vec`\",\n+            &format!(\"`drain` used to clear a `{}`\", ty_name),\n             \"try\",\n             \"clear()\".to_string(),\n             Applicability::MachineApplicable,"}, {"sha": "c25f1b60aa5f666d2be649ab02f25ce742489616", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9ec542873cde1332baf2a0ed33088ba98eba25cf/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec542873cde1332baf2a0ed33088ba98eba25cf/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=9ec542873cde1332baf2a0ed33088ba98eba25cf", "patch": "@@ -3589,12 +3589,13 @@ impl Methods {\n                     Some((\"bytes\", recv2, [], _, _)) => bytes_count_to_len::check(cx, expr, recv, recv2),\n                     _ => {},\n                 },\n-                (\"drain\", [arg]) => {\n-                if let Node::Stmt(Stmt { hir_id: _, kind, .. }) = cx.tcx.hir().get_parent(expr.hir_id)\n-                    && matches!(kind, StmtKind::Semi(_))\n+                (\"drain\", ..) => {\n+                    if let Node::Stmt(Stmt { hir_id: _, kind, .. }) = cx.tcx.hir().get_parent(expr.hir_id)\n+                        && matches!(kind, StmtKind::Semi(_))\n+                        && args.len() <= 1\n                     {\n-                        clear_with_drain::check(cx, expr, recv, span, arg);\n-                    } else {\n+                        clear_with_drain::check(cx, expr, recv, span, args.first());\n+                    } else if let [arg] = args {\n                         iter_with_drain::check(cx, expr, recv, span, arg);\n                     }\n                 },"}, {"sha": "dd02cc9148f764a3c5a380b3754b08fd4e36fc69", "filename": "tests/ui/clear_with_drain.fixed", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9ec542873cde1332baf2a0ed33088ba98eba25cf/tests%2Fui%2Fclear_with_drain.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9ec542873cde1332baf2a0ed33088ba98eba25cf/tests%2Fui%2Fclear_with_drain.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclear_with_drain.fixed?ref=9ec542873cde1332baf2a0ed33088ba98eba25cf", "patch": "@@ -2,6 +2,11 @@\n #![allow(unused)]\n #![warn(clippy::clear_with_drain)]\n \n+use std::collections::BinaryHeap;\n+use std::collections::HashMap;\n+use std::collections::HashSet;\n+use std::collections::VecDeque;\n+\n fn range() {\n     let mut v = vec![1, 2, 3];\n     let iter = v.drain(0..v.len()); // Yay\n@@ -83,4 +88,22 @@ fn partial_drains() {\n     let w: Vec<i8> = v.drain(1..v.len() - 1).collect(); // Yay\n }\n \n-fn main() {}\n+fn main() {\n+    let mut deque: VecDeque<_> = [1, 2, 3].into();\n+    deque.clear();\n+\n+    let mut set = HashSet::from([1, 2, 3]);\n+    set.clear();\n+\n+    let mut a = HashMap::new();\n+    a.insert(1, \"a\");\n+    a.insert(2, \"b\");\n+    a.clear();\n+\n+    let mut heap = BinaryHeap::from([1, 3]);\n+    heap.clear();\n+\n+    // Not firing for now because `String` is not reckognized by `is_type_diagnostic_item`\n+    let mut s = String::from(\"\u03b1 is alpha, \u03b2 is beta\");\n+    s.drain(..);\n+}"}, {"sha": "af2fe503d9a6011d144551d7984a0e3195ee785b", "filename": "tests/ui/clear_with_drain.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9ec542873cde1332baf2a0ed33088ba98eba25cf/tests%2Fui%2Fclear_with_drain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec542873cde1332baf2a0ed33088ba98eba25cf/tests%2Fui%2Fclear_with_drain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclear_with_drain.rs?ref=9ec542873cde1332baf2a0ed33088ba98eba25cf", "patch": "@@ -2,6 +2,11 @@\n #![allow(unused)]\n #![warn(clippy::clear_with_drain)]\n \n+use std::collections::BinaryHeap;\n+use std::collections::HashMap;\n+use std::collections::HashSet;\n+use std::collections::VecDeque;\n+\n fn range() {\n     let mut v = vec![1, 2, 3];\n     let iter = v.drain(0..v.len()); // Yay\n@@ -83,4 +88,22 @@ fn partial_drains() {\n     let w: Vec<i8> = v.drain(1..v.len() - 1).collect(); // Yay\n }\n \n-fn main() {}\n+fn main() {\n+    let mut deque: VecDeque<_> = [1, 2, 3].into();\n+    deque.drain(..);\n+\n+    let mut set = HashSet::from([1, 2, 3]);\n+    set.drain();\n+\n+    let mut a = HashMap::new();\n+    a.insert(1, \"a\");\n+    a.insert(2, \"b\");\n+    a.drain();\n+\n+    let mut heap = BinaryHeap::from([1, 3]);\n+    heap.drain();\n+\n+    // Not firing for now because `String` is not reckognized by `is_type_diagnostic_item`\n+    let mut s = String::from(\"\u03b1 is alpha, \u03b2 is beta\");\n+    s.drain(..);\n+}"}, {"sha": "2c0cc846de2d19827f348c167d9039cd03620661", "filename": "tests/ui/clear_with_drain.stderr", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9ec542873cde1332baf2a0ed33088ba98eba25cf/tests%2Fui%2Fclear_with_drain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ec542873cde1332baf2a0ed33088ba98eba25cf/tests%2Fui%2Fclear_with_drain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclear_with_drain.stderr?ref=9ec542873cde1332baf2a0ed33088ba98eba25cf", "patch": "@@ -1,40 +1,64 @@\n error: `drain` used to clear a `Vec`\n-  --> $DIR/clear_with_drain.rs:17:7\n+  --> $DIR/clear_with_drain.rs:22:7\n    |\n LL |     v.drain(0..v.len()); // Nay\n    |       ^^^^^^^^^^^^^^^^^ help: try: `clear()`\n    |\n    = note: `-D clippy::clear-with-drain` implied by `-D warnings`\n \n error: `drain` used to clear a `Vec`\n-  --> $DIR/clear_with_drain.rs:20:7\n+  --> $DIR/clear_with_drain.rs:25:7\n    |\n LL |     v.drain(usize::MIN..v.len()); // Nay\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `clear()`\n \n error: `drain` used to clear a `Vec`\n-  --> $DIR/clear_with_drain.rs:35:7\n+  --> $DIR/clear_with_drain.rs:40:7\n    |\n LL |     v.drain(0..); // Nay\n    |       ^^^^^^^^^^ help: try: `clear()`\n \n error: `drain` used to clear a `Vec`\n-  --> $DIR/clear_with_drain.rs:38:7\n+  --> $DIR/clear_with_drain.rs:43:7\n    |\n LL |     v.drain(usize::MIN..); // Nay\n    |       ^^^^^^^^^^^^^^^^^^^ help: try: `clear()`\n \n error: `drain` used to clear a `Vec`\n-  --> $DIR/clear_with_drain.rs:52:7\n+  --> $DIR/clear_with_drain.rs:57:7\n    |\n LL |     v.drain(..); // Nay\n    |       ^^^^^^^^^ help: try: `clear()`\n \n error: `drain` used to clear a `Vec`\n-  --> $DIR/clear_with_drain.rs:66:7\n+  --> $DIR/clear_with_drain.rs:71:7\n    |\n LL |     v.drain(..v.len()); // Nay\n    |       ^^^^^^^^^^^^^^^^ help: try: `clear()`\n \n-error: aborting due to 6 previous errors\n+error: `drain` used to clear a `VecDeque`\n+  --> $DIR/clear_with_drain.rs:93:11\n+   |\n+LL |     deque.drain(..);\n+   |           ^^^^^^^^^ help: try: `clear()`\n+\n+error: `drain` used to clear a `HashSet`\n+  --> $DIR/clear_with_drain.rs:96:9\n+   |\n+LL |     set.drain();\n+   |         ^^^^^^^ help: try: `clear()`\n+\n+error: `drain` used to clear a `HashMap`\n+  --> $DIR/clear_with_drain.rs:101:7\n+   |\n+LL |     a.drain();\n+   |       ^^^^^^^ help: try: `clear()`\n+\n+error: `drain` used to clear a `BinaryHeap`\n+  --> $DIR/clear_with_drain.rs:104:10\n+   |\n+LL |     heap.drain();\n+   |          ^^^^^^^ help: try: `clear()`\n+\n+error: aborting due to 10 previous errors\n "}]}