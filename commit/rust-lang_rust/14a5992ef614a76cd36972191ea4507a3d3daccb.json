{"sha": "14a5992ef614a76cd36972191ea4507a3d3daccb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0YTU5OTJlZjYxNGE3NmNkMzY5NzIxOTFlYTQ1MDdhM2QzZGFjY2I=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-12-19T02:31:29Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-12-19T09:12:57Z"}, "message": "Allow marker types to have unsized parameters\n\nTweak CovariantType, ContravariantType, and InvariantType to allow their\ntype parameter to be unsized.", "tree": {"sha": "0b961b6d9cb6e648c525349191a8402a85bc4e5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b961b6d9cb6e648c525349191a8402a85bc4e5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14a5992ef614a76cd36972191ea4507a3d3daccb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14a5992ef614a76cd36972191ea4507a3d3daccb", "html_url": "https://github.com/rust-lang/rust/commit/14a5992ef614a76cd36972191ea4507a3d3daccb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14a5992ef614a76cd36972191ea4507a3d3daccb/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bdce25e155d846bb9252fa4a18baef7e74cf8bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bdce25e155d846bb9252fa4a18baef7e74cf8bf", "html_url": "https://github.com/rust-lang/rust/commit/6bdce25e155d846bb9252fa4a18baef7e74cf8bf"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "bf1a7ec299901030d4af1a2230b0e58c5438f751", "filename": "src/libcore/kinds.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/14a5992ef614a76cd36972191ea4507a3d3daccb/src%2Flibcore%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a5992ef614a76cd36972191ea4507a3d3daccb/src%2Flibcore%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fkinds.rs?ref=14a5992ef614a76cd36972191ea4507a3d3daccb", "patch": "@@ -91,7 +91,8 @@ pub trait Sync for Sized? {\n /// implemented using unsafe code. In that case, you may want to embed\n /// some of the marker types below into your type.\n pub mod marker {\n-    use super::Copy;\n+    use super::{Copy,Sized};\n+    use clone::Clone;\n \n     /// A marker type whose type parameter `T` is considered to be\n     /// covariant with respect to the type itself. This is (typically)\n@@ -131,10 +132,13 @@ pub mod marker {\n     /// (for example, `S<&'static int>` is a subtype of `S<&'a int>`\n     /// for some lifetime `'a`, but not the other way around).\n     #[lang=\"covariant_type\"]\n-    #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n-    pub struct CovariantType<T>;\n+    #[deriving(PartialEq, Eq, PartialOrd, Ord)]\n+    pub struct CovariantType<Sized? T>;\n \n-    impl<T> Copy for CovariantType<T> {}\n+    impl<Sized? T> Copy for CovariantType<T> {}\n+    impl<Sized? T> Clone for CovariantType<T> {\n+        fn clone(&self) -> CovariantType<T> { *self }\n+    }\n \n     /// A marker type whose type parameter `T` is considered to be\n     /// contravariant with respect to the type itself. This is (typically)\n@@ -176,10 +180,13 @@ pub mod marker {\n     /// function requires arguments of type `T`, it must also accept\n     /// arguments of type `U`, hence such a conversion is safe.\n     #[lang=\"contravariant_type\"]\n-    #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n-    pub struct ContravariantType<T>;\n+    #[deriving(PartialEq, Eq, PartialOrd, Ord)]\n+    pub struct ContravariantType<Sized? T>;\n \n-    impl<T> Copy for ContravariantType<T> {}\n+    impl<Sized? T> Copy for ContravariantType<T> {}\n+    impl<Sized? T> Clone for ContravariantType<T> {\n+        fn clone(&self) -> ContravariantType<T> { *self }\n+    }\n \n     /// A marker type whose type parameter `T` is considered to be\n     /// invariant with respect to the type itself. This is (typically)\n@@ -203,10 +210,13 @@ pub mod marker {\n     /// never written, but in fact `Cell` uses unsafe code to achieve\n     /// interior mutability.\n     #[lang=\"invariant_type\"]\n-    #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n-    pub struct InvariantType<T>;\n+    #[deriving(PartialEq, Eq, PartialOrd, Ord)]\n+    pub struct InvariantType<Sized? T>;\n \n-    impl<T> Copy for InvariantType<T> {}\n+    impl<Sized? T> Copy for InvariantType<T> {}\n+    impl<Sized? T> Clone for InvariantType<T> {\n+        fn clone(&self) -> InvariantType<T> { *self }\n+    }\n \n     /// As `CovariantType`, but for lifetime parameters. Using\n     /// `CovariantLifetime<'a>` indicates that it is ok to substitute"}]}