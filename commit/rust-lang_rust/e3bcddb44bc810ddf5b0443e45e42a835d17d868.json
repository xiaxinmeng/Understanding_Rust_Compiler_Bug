{"sha": "e3bcddb44bc810ddf5b0443e45e42a835d17d868", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYmNkZGI0NGJjODEwZGRmNWIwNDQzZTQ1ZTQyYTgzNWQxN2Q4Njg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-03T22:40:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-03T22:40:32Z"}, "message": "Auto merge of #31078 - nbaksalyar:illumos, r=alexcrichton\n\nThis pull request adds support for [Illumos](http://illumos.org/)-based operating systems: SmartOS, OpenIndiana, and others. For now it's x86-64 only, as I'm not sure if 32-bit installations are widespread. This PR is based on #28589 by @potatosalad, and also closes #21000, #25845, and #25846.\n\nRequired changes in libc are already merged: https://github.com/rust-lang-nursery/libc/pull/138\n\nHere's a snapshot required to build a stage0 compiler:\nhttps://s3-eu-west-1.amazonaws.com/nbaksalyar/rustc-sunos-snapshot.tar.gz\nIt passes all checks from `make check`.\n\nThere are some changes I'm not quite sure about, e.g. macro usage in `src/libstd/num/f64.rs` and `DirEntry` structure in `src/libstd/sys/unix/fs.rs`, so any comments on how to rewrite it better would be greatly appreciated.\n\nAlso, LLVM configure script might need to be patched to build it successfully, or a pre-built libLLVM should be used. Some details can be found here: https://llvm.org/bugs/show_bug.cgi?id=25409\n\nThanks!\n\nr? @brson", "tree": {"sha": "d1b24022bb34fe5a3d8851dee5b8a8291c47bb12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1b24022bb34fe5a3d8851dee5b8a8291c47bb12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3bcddb44bc810ddf5b0443e45e42a835d17d868", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3bcddb44bc810ddf5b0443e45e42a835d17d868", "html_url": "https://github.com/rust-lang/rust/commit/e3bcddb44bc810ddf5b0443e45e42a835d17d868", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3bcddb44bc810ddf5b0443e45e42a835d17d868/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18c1781a4c8aaaeb11285e0099edfff2043b62a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/18c1781a4c8aaaeb11285e0099edfff2043b62a5", "html_url": "https://github.com/rust-lang/rust/commit/18c1781a4c8aaaeb11285e0099edfff2043b62a5"}, {"sha": "fae883c113031805cedb853c4176ecfef0b62bbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fae883c113031805cedb853c4176ecfef0b62bbc", "html_url": "https://github.com/rust-lang/rust/commit/fae883c113031805cedb853c4176ecfef0b62bbc"}], "stats": {"total": 450, "additions": 412, "deletions": 38}, "files": [{"sha": "27e0234a7dee326c6f307051436e40dd3950cbb6", "filename": "configure", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/configure", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -1,5 +1,13 @@\n #!/bin/sh\n \n+# /bin/sh on Solaris is not a POSIX compatible shell, but /usr/bin/bash is.\n+if [ `uname -s` = 'SunOS' -a \"${POSIX_SHELL}\" != \"true\" ]; then\n+    POSIX_SHELL=\"true\"\n+    export POSIX_SHELL\n+    exec /usr/bin/env bash $0 \"$@\"\n+fi\n+unset POSIX_SHELL # clear it so if we invoke other scripts, they run as bash as well\n+\n msg() {\n     echo \"configure: $*\"\n }\n@@ -416,6 +424,11 @@ case $CFG_OSTYPE in\n         CFG_OSTYPE=apple-darwin\n         ;;\n \n+    SunOS)\n+        CFG_OSTYPE=sun-solaris\n+        CFG_CPUTYPE=$(isainfo -n)\n+        ;;\n+\n     MINGW*)\n         # msys' `uname` does not print gcc configuration, but prints msys\n         # configuration. so we cannot believe `uname -m`:"}, {"sha": "0a09a5cf72d9f94ecfbe8199b9dd9e1b837ede99", "filename": "mk/cfg/x86_64-sun-solaris.mk", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/mk%2Fcfg%2Fx86_64-sun-solaris.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/mk%2Fcfg%2Fx86_64-sun-solaris.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-sun-solaris.mk?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -0,0 +1,23 @@\n+# x86_64-sun-solaris configuration\n+CROSS_PREFIX_x86_64-sun-solaris=x86_64-sun-solaris2.11-\n+CC_x86_64-sun-solaris=$(CC)\n+CXX_x86_64-sun-solaris=$(CXX)\n+CPP_x86_64-sun-solaris=$(CPP)\n+AR_x86_64-sun-solaris=$(AR)\n+CFG_LIB_NAME_x86_64-sun-solaris=lib$(1).so\n+CFG_STATIC_LIB_NAME_x86_64-sun-solaris=lib$(1).a\n+CFG_LIB_GLOB_x86_64-sun-solaris=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_x86_64-sun-solaris=$(1)-*.dylib.dSYM\n+CFG_JEMALLOC_CFLAGS_x86_64-sun-solaris := -I/usr/local/include $(CFLAGS)\n+CFG_GCCISH_CFLAGS_x86_64-sun-solaris := -Wall -Werror -g -D_POSIX_PTHREAD_SEMANTICS -fPIC -I/usr/local/include $(CFLAGS)\n+CFG_GCCISH_LINK_FLAGS_x86_64-sun-solaris := -shared -fPIC -g -pthread  -lrt\n+CFG_GCCISH_DEF_FLAG_x86_64-sun-solaris := -Wl,--export-dynamic,--dynamic-list=\n+CFG_LLC_FLAGS_x86_64-sun-solaris :=\n+CFG_INSTALL_NAME_x86_64-sun-solaris =\n+CFG_EXE_SUFFIX_x86_64-sun-solaris :=\n+CFG_WINDOWSY_x86_64-sun-solaris :=\n+CFG_UNIXY_x86_64-sun-solaris := 1\n+CFG_LDPATH_x86_64-sun-solaris :=\n+CFG_RUN_x86_64-sun-solaris=$(2)\n+CFG_RUN_TARG_x86_64-sun-solaris=$(call CFG_RUN_x86_64-sun-solaris,,$(2))\n+CFG_GNU_TRIPLE_x86_64-sun-solaris := x86_64-sun-solaris"}, {"sha": "027d56103802f1e6c73722fdb3c2ebed68bc4f2b", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -25,6 +25,7 @@ const OS_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"openbsd\", \"openbsd\"),\n     (\"win32\", \"windows\"),\n     (\"windows\", \"windows\"),\n+    (\"solaris\", \"solaris\"),\n ];\n \n const ARCH_TABLE: &'static [(&'static str, &'static str)] = &["}, {"sha": "aee69a5c8bc58f64fca8bf4b27f4fb7b3862435a", "filename": "src/etc/local_stage0.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Fetc%2Flocal_stage0.sh", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Fetc%2Flocal_stage0.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flocal_stage0.sh?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -18,7 +18,7 @@ LIB_PREFIX=lib\n \n OS=`uname -s`\n case $OS in\n-    (\"Linux\"|\"FreeBSD\"|\"DragonFly\"|\"Bitrig\"|\"OpenBSD\")\n+    (\"Linux\"|\"FreeBSD\"|\"DragonFly\"|\"Bitrig\"|\"OpenBSD\"|\"SunOS\")\n     BIN_SUF=\n     LIB_SUF=.so\n     ;;"}, {"sha": "81babf924c9f9392a5635f9b715a613b292aedc8", "filename": "src/etc/snapshot.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Fetc%2Fsnapshot.py", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Fetc%2Fsnapshot.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fsnapshot.py?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -48,6 +48,7 @@ def scrub(b):\n         \"macos\": [\"bin/rustc\"],\n         \"netbsd\": [\"bin/rustc\"],\n         \"openbsd\": [\"bin/rustc\"],\n+        \"solaris\": [\"bin/rustc\"],\n         \"winnt\": [\"bin/rustc.exe\"],\n         }\n "}, {"sha": "4c08ec4f5449d4cb91517eb72ae3b6f3bcd17beb", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -59,6 +59,7 @@ mod freebsd_base;\n mod linux_base;\n mod openbsd_base;\n mod netbsd_base;\n+mod solaris_base;\n mod windows_base;\n mod windows_msvc_base;\n \n@@ -155,6 +156,10 @@ pub struct TargetOptions {\n     /// Whether the target toolchain is like OSX's. Only useful for compiling against iOS/OS X, in\n     /// particular running dsymutil and some other stuff like `-dead_strip`. Defaults to false.\n     pub is_like_osx: bool,\n+    /// Whether the target toolchain is like Solaris's.\n+    /// Only useful for compiling against Illumos/Solaris,\n+    /// as they have a different set of linker flags. Defaults to false.\n+    pub is_like_solaris: bool,\n     /// Whether the target toolchain is like Windows'. Only useful for compiling against Windows,\n     /// only really used for figuring out how to find libraries, since Windows uses its own\n     /// library naming convention. Defaults to false.\n@@ -227,6 +232,7 @@ impl Default for TargetOptions {\n             staticlib_suffix: \".a\".to_string(),\n             target_family: None,\n             is_like_osx: false,\n+            is_like_solaris: false,\n             is_like_windows: false,\n             is_like_android: false,\n             is_like_msvc: false,\n@@ -447,6 +453,8 @@ impl Target {\n             armv7_apple_ios,\n             armv7s_apple_ios,\n \n+            x86_64_sun_solaris,\n+\n             x86_64_pc_windows_gnu,\n             i686_pc_windows_gnu,\n "}, {"sha": "bf99a141c106dcf9240d7d743d3b73e45c853e20", "filename": "src/librustc_back/target/solaris_base.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibrustc_back%2Ftarget%2Fsolaris_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibrustc_back%2Ftarget%2Fsolaris_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fsolaris_base.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::TargetOptions;\n+use std::default::Default;\n+\n+pub fn opts() -> TargetOptions {\n+    TargetOptions {\n+        linker: \"cc\".to_string(),\n+        dynamic_linking: true,\n+        executables: true,\n+        has_rpath: true,\n+        is_like_solaris: true,\n+        archive_format: \"gnu\".to_string(),\n+        exe_allocation_crate: super::maybe_jemalloc(),\n+\n+        .. Default::default()\n+    }\n+}"}, {"sha": "fbe3f5abc908fee96a4a733d1b64bc2463291d45", "filename": "src/librustc_back/target/x86_64_sun_solaris.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibrustc_back%2Ftarget%2Fx86_64_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibrustc_back%2Ftarget%2Fx86_64_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_sun_solaris.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::solaris_base::opts();\n+    base.pre_link_args.push(\"-m64\".to_string());\n+\n+    Target {\n+        llvm_target: \"x86_64-pc-solaris\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        arch: \"x86_64\".to_string(),\n+        target_os: \"solaris\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"sun\".to_string(),\n+        options: base,\n+    }\n+}"}, {"sha": "55192bdf74484f547223e5f0eea7e000c0838458", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -131,6 +131,9 @@ impl<'a> Linker for GnuLinker<'a> {\n         // insert it here.\n         if self.sess.target.target.options.is_like_osx {\n             self.cmd.arg(\"-Wl,-dead_strip\");\n+        } else if self.sess.target.target.options.is_like_solaris {\n+            self.cmd.arg(\"-Wl,-z\");\n+            self.cmd.arg(\"-Wl,ignore\");\n \n         // If we're building a dylib, we don't use --gc-sections because LLVM\n         // has already done the best it can do, and we also don't want to"}, {"sha": "41bcfdb7cb0f03b86fe21efdc0c85a8fc3fa0639", "filename": "src/librustdoc/flock.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibrustdoc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibrustdoc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fflock.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -111,6 +111,25 @@ mod imp {\n         pub const F_SETLKW: libc::c_int = 9;\n     }\n \n+    #[cfg(target_os = \"solaris\")]\n+    mod os {\n+        use libc;\n+\n+        pub struct flock {\n+            pub l_type: libc::c_short,\n+            pub l_whence: libc::c_short,\n+            pub l_start: libc::off_t,\n+            pub l_len: libc::off_t,\n+            pub l_sysid: libc::c_int,\n+            pub l_pid: libc::pid_t,\n+        }\n+\n+        pub const F_WRLCK: libc::c_short = 2;\n+        pub const F_UNLCK: libc::c_short = 3;\n+        pub const F_SETLK: libc::c_int = 6;\n+        pub const F_SETLKW: libc::c_int = 7;\n+    }\n+\n     pub struct Lock {\n         fd: libc::c_int,\n     }"}, {"sha": "12edc9ffc64c89251673957ae79a8514cf7dd82b", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -172,7 +172,8 @@ mod tests {\n               target_os = \"dragonfly\",\n               target_os = \"bitrig\",\n               target_os = \"netbsd\",\n-              target_os = \"openbsd\"))]\n+              target_os = \"openbsd\",\n+              target_os = \"solaris\"))]\n     #[allow(deprecated)]\n     fn test_errors_do_not_crash() {\n         use path::Path;\n@@ -195,7 +196,8 @@ mod tests {\n           target_os = \"dragonfly\",\n           target_os = \"bitrig\",\n           target_os = \"netbsd\",\n-          target_os = \"openbsd\"))]\n+          target_os = \"openbsd\",\n+          target_os = \"solaris\"))]\n mod dl {\n     use prelude::v1::*;\n "}, {"sha": "d21e37a012aa42f9f21802f1bfccb62c9174b563", "filename": "src/libstd/env.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -640,6 +640,7 @@ pub mod consts {\n     /// - bitrig\n     /// - netbsd\n     /// - openbsd\n+    /// - solaris\n     /// - android\n     /// - windows\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n@@ -800,6 +801,17 @@ mod os {\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n+#[cfg(target_os = \"solaris\")]\n+mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"solaris\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+    pub const EXE_SUFFIX: &'static str = \"\";\n+    pub const EXE_EXTENSION: &'static str = \"\";\n+}\n+\n #[cfg(target_os = \"windows\")]\n mod os {\n     pub const FAMILY: &'static str = \"windows\";"}, {"sha": "a39311f7d108d578a44273a968fb5f475930f6b9", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -511,7 +511,7 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn ln(self) -> f64 {\n-        unsafe { intrinsics::logf64(self) }\n+        self.log_wrapper(|n| { unsafe { intrinsics::logf64(n) } })\n     }\n \n     /// Returns the logarithm of the number with respect to an arbitrary base.\n@@ -546,7 +546,7 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn log2(self) -> f64 {\n-        unsafe { intrinsics::log2f64(self) }\n+        self.log_wrapper(|n| { unsafe { intrinsics::log2f64(n) } })\n     }\n \n     /// Returns the base 10 logarithm of the number.\n@@ -562,7 +562,7 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn log10(self) -> f64 {\n-        unsafe { intrinsics::log10f64(self) }\n+        self.log_wrapper(|n| { unsafe { intrinsics::log10f64(n) } })\n     }\n \n     /// Converts radians to degrees.\n@@ -1065,6 +1065,31 @@ impl f64 {\n     pub fn atanh(self) -> f64 {\n         0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n     }\n+\n+    // Solaris/Illumos requires a wrapper around log, log2, and log10 functions\n+    // because of their non-standard behavior (e.g. log(-n) returns -Inf instead\n+    // of expected NaN).\n+    fn log_wrapper<F: Fn(f64) -> f64>(self, log_fn: F) -> f64 {\n+        if !cfg!(target_os = \"solaris\") {\n+            log_fn(self)\n+        } else {\n+            if self.is_finite() {\n+                if self > 0.0 {\n+                    log_fn(self)\n+                } else if self == 0.0 {\n+                    NEG_INFINITY // log(0) = -Inf\n+                } else {\n+                    NAN // log(-n) = NaN\n+                }\n+            } else if self.is_nan() {\n+                self // log(NaN) = NaN\n+            } else if self > 0.0 {\n+                self // log(Inf) = Inf\n+            } else {\n+                NAN // log(-Inf) = NaN\n+            }\n+        }\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "5606c127dcb0a49f07395bbf3391988092e44334", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -30,5 +30,6 @@ pub use sys::ext as windows;\n #[cfg(target_os = \"nacl\")]      pub mod nacl;\n #[cfg(target_os = \"netbsd\")]   pub mod netbsd;\n #[cfg(target_os = \"openbsd\")]   pub mod openbsd;\n+#[cfg(target_os = \"solaris\")]   pub mod solaris;\n \n pub mod raw;"}, {"sha": "f265233bd54a550eaefefb3a6de494a262279b2c", "filename": "src/libstd/os/solaris/mod.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fos%2Fsolaris%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fos%2Fsolaris%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fsolaris%2Fmod.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Solaris-specific definitions\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n+pub mod raw;\n+\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub mod fs {\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub use sys::fs::MetadataExt;\n+}"}, {"sha": "cf46ae4a3600d9b1a5e78cbcd92e8a9cb748faf5", "filename": "src/libstd/os/solaris/raw.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fos%2Fsolaris%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fos%2Fsolaris%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fsolaris%2Fraw.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -0,0 +1,68 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Solaris-specific raw type definitions\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n+use os::raw::c_long;\n+use os::unix::raw::{uid_t, gid_t};\n+\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type fflags_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i64;\n+\n+#[unstable(feature = \"pthread_t\", issue = \"29791\")] pub type pthread_t = usize;\n+\n+#[repr(C)]\n+#[derive(Clone)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub struct stat {\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_dev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ino: ino_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mode: mode_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_nlink: nlink_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_uid: uid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_gid: gid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_rdev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_size: off_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_atime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_atime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mtime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mtime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ctime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ctime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_blksize: blksize_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_blocks: blkcnt_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub __unused: [u8; 16]\n+}"}, {"sha": "b1b9ffc4dc63d696d96e726a7a4f8a7392ab4f70", "filename": "src/libstd/rtdeps.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Frtdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Frtdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frtdeps.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -39,6 +39,12 @@ extern {}\n #[link(name = \"pthread\")]\n extern {}\n \n+#[cfg(target_os = \"solaris\")]\n+#[link(name = \"socket\")]\n+#[link(name = \"posix4\")]\n+#[link(name = \"pthread\")]\n+extern {}\n+\n // For PNaCl targets, nacl_io is a Pepper wrapper for some IO functions\n // missing (ie always error) in Newlib.\n #[cfg(all(target_os = \"nacl\", not(test)))]"}, {"sha": "4600983eb3b8019b666bab703d323f3e34cceae0", "filename": "src/libstd/sys/common/args.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fsys%2Fcommon%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fsys%2Fcommon%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fargs.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -38,7 +38,8 @@ pub fn clone() -> Option<Vec<Vec<u8>>> { imp::clone() }\n           target_os = \"dragonfly\",\n           target_os = \"bitrig\",\n           target_os = \"netbsd\",\n-          target_os = \"openbsd\"))]\n+          target_os = \"openbsd\",\n+          target_os = \"solaris\"))]\n mod imp {\n     use prelude::v1::*;\n "}, {"sha": "956f6005f1cacb2e57505cafdb7a92fde6f350e8", "filename": "src/libstd/sys/common/libunwind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -101,6 +101,7 @@ pub type _Unwind_Exception_Cleanup_Fn =\n \n #[cfg_attr(any(all(target_os = \"linux\", not(target_env = \"musl\")),\n                target_os = \"freebsd\",\n+               target_os = \"solaris\",\n                all(target_os = \"linux\", target_env = \"musl\", not(target_arch = \"x86_64\"))),\n            link(name = \"gcc_s\"))]\n #[cfg_attr(all(target_os = \"linux\", target_env = \"musl\", target_arch = \"x86_64\", not(test)),"}, {"sha": "94775341c389871b36096ba49117dc57e8a20f4b", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -50,14 +50,14 @@ impl FileDesc {\n         Ok(ret as usize)\n     }\n \n-    #[cfg(not(target_env = \"newlib\"))]\n+    #[cfg(not(any(target_env = \"newlib\", target_os = \"solaris\")))]\n     pub fn set_cloexec(&self) {\n         unsafe {\n             let ret = libc::ioctl(self.fd, libc::FIOCLEX);\n             debug_assert_eq!(ret, 0);\n         }\n     }\n-    #[cfg(target_env = \"newlib\")]\n+    #[cfg(any(target_env = \"newlib\", target_os = \"solaris\"))]\n     pub fn set_cloexec(&self) {\n         unsafe {\n             let previous = libc::fcntl(self.fd, libc::F_GETFD);"}, {"sha": "f5d03cad6571905470731745f3c74bebe421df94", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 51, "deletions": 5, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use prelude::v1::*;\n use io::prelude::*;\n use os::unix::prelude::*;\n \n use ffi::{CString, CStr, OsString, OsStr};\n use fmt;\n use io::{self, Error, ErrorKind, SeekFrom};\n-use libc::{dirent, readdir_r};\n-use libc::{self, c_int, off_t, mode_t};\n+use libc::{self, dirent, c_int, off_t, mode_t};\n use mem;\n use path::{Path, PathBuf};\n use ptr;\n@@ -24,7 +24,6 @@ use sys::fd::FileDesc;\n use sys::platform::raw;\n use sys::{cvt, cvt_r};\n use sys_common::{AsInner, FromInner};\n-use vec::Vec;\n \n pub struct File(FileDesc);\n \n@@ -46,6 +45,12 @@ unsafe impl Sync for Dir {}\n pub struct DirEntry {\n     entry: dirent,\n     root: Arc<PathBuf>,\n+    // We need to store an owned copy of the directory name\n+    // on Solaris because a) it uses a zero-length array to\n+    // store the name, b) its lifetime between readdir calls\n+    // is not guaranteed.\n+    #[cfg(target_os = \"solaris\")]\n+    name: Box<[u8]>\n }\n \n #[derive(Clone)]\n@@ -132,6 +137,36 @@ impl FromInner<raw::mode_t> for FilePermissions {\n impl Iterator for ReadDir {\n     type Item = io::Result<DirEntry>;\n \n+    #[cfg(target_os = \"solaris\")]\n+    fn next(&mut self) -> Option<io::Result<DirEntry>> {\n+        unsafe {\n+            loop {\n+                // Although readdir_r(3) would be a correct function to use here because\n+                // of the thread safety, on Illumos the readdir(3C) function is safe to use\n+                // in threaded applications and it is generally preferred over the\n+                // readdir_r(3C) function.\n+                let entry_ptr = libc::readdir(self.dirp.0);\n+                if entry_ptr.is_null() {\n+                    return None\n+                }\n+\n+                let name = (*entry_ptr).d_name.as_ptr();\n+                let namelen = libc::strlen(name) as usize;\n+\n+                let ret = DirEntry {\n+                    entry: *entry_ptr,\n+                    name: ::slice::from_raw_parts(name as *const u8,\n+                                                  namelen as usize).to_owned().into_boxed_slice(),\n+                    root: self.root.clone()\n+                };\n+                if ret.name_bytes() != b\".\" && ret.name_bytes() != b\"..\" {\n+                    return Some(Ok(ret))\n+                }\n+            }\n+        }\n+    }\n+\n+    #[cfg(not(target_os = \"solaris\"))]\n     fn next(&mut self) -> Option<io::Result<DirEntry>> {\n         unsafe {\n             let mut ret = DirEntry {\n@@ -140,7 +175,7 @@ impl Iterator for ReadDir {\n             };\n             let mut entry_ptr = ptr::null_mut();\n             loop {\n-                if readdir_r(self.dirp.0, &mut ret.entry, &mut entry_ptr) != 0 {\n+                if libc::readdir_r(self.dirp.0, &mut ret.entry, &mut entry_ptr) != 0 {\n                     return Some(Err(Error::last_os_error()))\n                 }\n                 if entry_ptr.is_null() {\n@@ -174,6 +209,12 @@ impl DirEntry {\n         lstat(&self.path())\n     }\n \n+    #[cfg(target_os = \"solaris\")]\n+    pub fn file_type(&self) -> io::Result<FileType> {\n+        stat(&self.path()).map(|m| m.file_type())\n+    }\n+\n+    #[cfg(not(target_os = \"solaris\"))]\n     pub fn file_type(&self) -> io::Result<FileType> {\n         match self.entry.d_type {\n             libc::DT_CHR => Ok(FileType { mode: libc::S_IFCHR }),\n@@ -189,7 +230,8 @@ impl DirEntry {\n \n     #[cfg(any(target_os = \"macos\",\n               target_os = \"ios\",\n-              target_os = \"linux\"))]\n+              target_os = \"linux\",\n+              target_os = \"solaris\"))]\n     pub fn ino(&self) -> raw::ino_t {\n         self.entry.d_ino\n     }\n@@ -228,6 +270,10 @@ impl DirEntry {\n             CStr::from_ptr(self.entry.d_name.as_ptr()).to_bytes()\n         }\n     }\n+    #[cfg(target_os = \"solaris\")]\n+    fn name_bytes(&self) -> &[u8] {\n+        &*self.name\n+    }\n }\n \n impl OpenOptions {"}, {"sha": "f8a4bcdecd73e4516cf1129e71ea521d7eba3e44", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -25,6 +25,7 @@ use ops::Neg;\n #[cfg(target_os = \"nacl\")]      pub use os::nacl as platform;\n #[cfg(target_os = \"netbsd\")]    pub use os::netbsd as platform;\n #[cfg(target_os = \"openbsd\")]   pub use os::openbsd as platform;\n+#[cfg(target_os = \"solaris\")]   pub use os::solaris as platform;\n \n pub mod backtrace;\n pub mod condvar;"}, {"sha": "da77051459302cba0f77394d3f4b257d262af31a", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 55, "deletions": 9, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -45,6 +45,7 @@ pub fn errno() -> i32 {\n                        target_os = \"android\",\n                        target_env = \"newlib\"),\n                    link_name = \"__errno\")]\n+        #[cfg_attr(target_os = \"solaris\", link_name = \"___errno\")]\n         #[cfg_attr(target_os = \"dragonfly\", link_name = \"__dfly_error\")]\n         #[cfg_attr(any(target_os = \"macos\",\n                        target_os = \"ios\",\n@@ -257,6 +258,30 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     }\n }\n \n+#[cfg(any(target_os = \"solaris\"))]\n+pub fn current_exe() -> io::Result<PathBuf> {\n+    extern {\n+        fn getexecname() -> *const c_char;\n+    }\n+    unsafe {\n+        let path = getexecname();\n+        if path.is_null() {\n+            Err(io::Error::last_os_error())\n+        } else {\n+            let filename = CStr::from_ptr(path).to_bytes();\n+            let path = PathBuf::from(<OsStr as OsStrExt>::from_bytes(filename));\n+\n+            // Prepend a current working directory to the path if\n+            // it doesn't contain an absolute pathname.\n+            if filename[0] == b'/' {\n+                Ok(path)\n+            } else {\n+                getcwd().map(|cwd| cwd.join(path))\n+            }\n+        }\n+    }\n+}\n+\n pub struct Args {\n     iter: vec::IntoIter<OsString>,\n     _dont_send_or_sync_me: *mut (),\n@@ -359,6 +384,7 @@ pub fn args() -> Args {\n           target_os = \"bitrig\",\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n+          target_os = \"solaris\",\n           target_os = \"nacl\"))]\n pub fn args() -> Args {\n     use sys_common;\n@@ -489,6 +515,28 @@ pub fn home_dir() -> Option<PathBuf> {\n                   target_os = \"ios\",\n                   target_os = \"nacl\")))]\n     unsafe fn fallback() -> Option<OsString> {\n+        #[cfg(not(target_os = \"solaris\"))]\n+        unsafe fn getpwduid_r(me: libc::uid_t, passwd: &mut libc::passwd,\n+                              buf: &mut Vec<c_char>) -> Option<()> {\n+            let mut result = ptr::null_mut();\n+            match libc::getpwuid_r(me, passwd, buf.as_mut_ptr(),\n+                                   buf.capacity() as libc::size_t,\n+                                   &mut result) {\n+                0 if !result.is_null() => Some(()),\n+                _ => None\n+            }\n+        }\n+\n+        #[cfg(target_os = \"solaris\")]\n+        unsafe fn getpwduid_r(me: libc::uid_t, passwd: &mut libc::passwd,\n+                              buf: &mut Vec<c_char>) -> Option<()> {\n+            // getpwuid_r semantics is different on Illumos/Solaris:\n+            // http://illumos.org/man/3c/getpwuid_r\n+            let result = libc::getpwuid_r(me, passwd, buf.as_mut_ptr(),\n+                                          buf.capacity() as libc::size_t);\n+            if result.is_null() { None } else { Some(()) }\n+        }\n+\n         let amt = match libc::sysconf(libc::_SC_GETPW_R_SIZE_MAX) {\n             n if n < 0 => 512 as usize,\n             n => n as usize,\n@@ -497,16 +545,14 @@ pub fn home_dir() -> Option<PathBuf> {\n         loop {\n             let mut buf = Vec::with_capacity(amt);\n             let mut passwd: libc::passwd = mem::zeroed();\n-            let mut result = ptr::null_mut();\n-            match libc::getpwuid_r(me, &mut passwd, buf.as_mut_ptr(),\n-                                   buf.capacity() as libc::size_t,\n-                                   &mut result) {\n-                0 if !result.is_null() => {}\n-                _ => return None\n+\n+            if getpwduid_r(me, &mut passwd, &mut buf).is_some() {\n+                let ptr = passwd.pw_dir as *const _;\n+                let bytes = CStr::from_ptr(ptr).to_bytes().to_vec();\n+                return Some(OsStringExt::from_vec(bytes))\n+            } else {\n+                return None;\n             }\n-            let ptr = passwd.pw_dir as *const _;\n-            let bytes = CStr::from_ptr(ptr).to_bytes().to_vec();\n-            return Some(OsStringExt::from_vec(bytes))\n         }\n     }\n }"}, {"sha": "3ce2c684f070aec7b85b8164c5b6d20a33de045a", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -131,7 +131,7 @@ impl fmt::Debug for Command {\n pub struct ExitStatus(c_int);\n \n #[cfg(any(target_os = \"linux\", target_os = \"android\",\n-          target_os = \"nacl\"))]\n+          target_os = \"nacl\", target_os = \"solaris\"))]\n mod status_imp {\n     pub fn WIFEXITED(status: i32) -> bool { (status & 0xff) == 0 }\n     pub fn WEXITSTATUS(status: i32) -> i32 { (status >> 8) & 0xff }"}, {"sha": "84407b3bee80e33a24b73aa0761b803c5bee0d9a", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -39,6 +39,7 @@ impl Drop for Handler {\n           target_os = \"bitrig\",\n           target_os = \"dragonfly\",\n           target_os = \"freebsd\",\n+          target_os = \"solaris\",\n           all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n           target_os = \"openbsd\"))]\n mod imp {\n@@ -179,6 +180,7 @@ mod imp {\n               target_os = \"bitrig\",\n               target_os = \"dragonfly\",\n               target_os = \"freebsd\",\n+              target_os = \"solaris\",\n               all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n               target_os = \"openbsd\")))]\n mod imp {"}, {"sha": "277aa5f19f0aaa817e2893ded831e4a1f6fdbb58", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -12,7 +12,7 @@ use prelude::v1::*;\n \n use alloc::boxed::FnBox;\n use cmp;\n-#[cfg(not(target_env = \"newlib\"))]\n+#[cfg(not(any(target_env = \"newlib\", target_os = \"solaris\")))]\n use ffi::CString;\n use io;\n use libc;\n@@ -122,9 +122,9 @@ impl Thread {\n                                      carg.as_ptr() as *mut libc::c_void);\n         }\n     }\n-    #[cfg(target_env = \"newlib\")]\n-    pub unsafe fn set_name(_name: &str) {\n-        // Newlib has no way to set a thread name.\n+    #[cfg(any(target_env = \"newlib\", target_os = \"solaris\"))]\n+    pub fn set_name(_name: &str) {\n+        // Newlib and Illumos has no way to set a thread name.\n     }\n \n     pub fn sleep(dur: Duration) {\n@@ -170,7 +170,8 @@ impl Drop for Thread {\n           not(target_os = \"macos\"),\n           not(target_os = \"bitrig\"),\n           not(all(target_os = \"netbsd\", not(target_vendor = \"rumprun\"))),\n-          not(target_os = \"openbsd\")))]\n+          not(target_os = \"openbsd\"),\n+          not(target_os = \"solaris\")))]\n #[cfg_attr(test, allow(dead_code))]\n pub mod guard {\n     pub unsafe fn current() -> Option<usize> { None }\n@@ -182,7 +183,8 @@ pub mod guard {\n           target_os = \"macos\",\n           target_os = \"bitrig\",\n           all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n-          target_os = \"openbsd\"))]\n+          target_os = \"openbsd\",\n+          target_os = \"solaris\"))]\n #[cfg_attr(test, allow(dead_code))]\n pub mod guard {\n     use prelude::v1::*;\n@@ -194,7 +196,8 @@ pub mod guard {\n \n     #[cfg(any(target_os = \"macos\",\n               target_os = \"bitrig\",\n-              target_os = \"openbsd\"))]\n+              target_os = \"openbsd\",\n+              target_os = \"solaris\"))]\n     unsafe fn get_stack_start() -> Option<*mut libc::c_void> {\n         current().map(|s| s as *mut libc::c_void)\n     }\n@@ -253,6 +256,13 @@ pub mod guard {\n         Some(stackaddr as usize + offset * psize)\n     }\n \n+    #[cfg(target_os = \"solaris\")]\n+    pub unsafe fn current() -> Option<usize> {\n+        let mut current_stack: libc::stack_t = ::mem::zeroed();\n+        assert_eq!(libc::stack_getbounds(&mut current_stack), 0);\n+        Some(current_stack.ss_sp as usize)\n+    }\n+\n     #[cfg(target_os = \"macos\")]\n     pub unsafe fn current() -> Option<usize> {\n         Some((libc::pthread_get_stackaddr_np(libc::pthread_self()) as libc::size_t -"}, {"sha": "0df143c45ae7d8b55015f104741b10f05724722d", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -28,6 +28,7 @@ pub enum Os {\n     OsNetbsd,\n     OsOpenbsd,\n     OsNaCl,\n+    OsSolaris,\n }\n \n #[derive(PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Clone, Copy, Debug)]\n@@ -147,6 +148,7 @@ impl fmt::Display for Os {\n             OsNetbsd => \"netbsd\".fmt(f),\n             OsOpenbsd => \"openbsd\".fmt(f),\n             OsNaCl => \"nacl\".fmt(f),\n+            OsSolaris => \"solaris\".fmt(f),\n         }\n     }\n }"}, {"sha": "446e9798334485405c76a68e2d6eb62a586e73aa", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -927,7 +927,8 @@ fn get_concurrency() -> usize {\n     #[cfg(any(target_os = \"linux\",\n               target_os = \"macos\",\n               target_os = \"ios\",\n-              target_os = \"android\"))]\n+              target_os = \"android\",\n+              target_os = \"solaris\"))]\n     fn num_cpus() -> usize {\n         unsafe { libc::sysconf(libc::_SC_NPROCESSORS_ONLN) as usize }\n     }"}, {"sha": "81743a367e40f735e267f22a8d078adfb6e7eecc", "filename": "src/test/debuginfo/gdb-pretty-struct-and-enums-pre-gdb-7-7.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums-pre-gdb-7-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums-pre-gdb-7-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums-pre-gdb-7-7.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // ignore-bitrig\n+// ignore-solaris\n // ignore-windows failing on win32 bot\n // ignore-freebsd: gdb package too new\n // ignore-tidy-linelength"}, {"sha": "ec1e282666a3e792ab0f3c811690c8515f0abdfc", "filename": "src/test/run-make/issue-22131/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Ftest%2Frun-make%2Fissue-22131%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Ftest%2Frun-make%2Fissue-22131%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-22131%2FMakefile?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -4,4 +4,4 @@ all: foo.rs\n \t$(RUSTC) --cfg 'feature=\"bar\"' --crate-type lib foo.rs\n \t$(HOST_RPATH_ENV) $(RUSTDOC) --test --cfg 'feature=\"bar\"' \\\n \t\t-L $(TMPDIR) foo.rs |\\\n-\t\tgrep --quiet 'test foo_0 ... ok'\n+\t\tgrep -q 'test foo_0 ... ok'"}, {"sha": "0c9a0169c1abbfd6467d87e387252686f2523abb", "filename": "src/test/run-make/target-specs/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Ftest%2Frun-make%2Ftarget-specs%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Ftest%2Frun-make%2Ftarget-specs%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftarget-specs%2FMakefile?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -2,7 +2,7 @@\n all:\n \t$(RUSTC) foo.rs --target=my-awesome-platform.json --crate-type=lib --emit=asm\n \tgrep -q -v morestack < $(TMPDIR)/foo.s\n-\t$(RUSTC) foo.rs --target=my-invalid-platform.json 2>&1 | grep --quiet \"Error loading target specification\"\n+\t$(RUSTC) foo.rs --target=my-invalid-platform.json 2>&1 | grep -q \"Error loading target specification\"\n \t$(RUSTC) foo.rs --target=my-incomplete-platform.json 2>&1 | grep 'Field llvm-target'\n \tRUST_TARGET_PATH=. $(RUSTC) foo.rs --target=my-awesome-platform --crate-type=lib --emit=asm\n \tRUST_TARGET_PATH=. $(RUSTC) foo.rs --target=x86_64-unknown-linux-gnu --crate-type=lib --emit=asm"}, {"sha": "dab6511eb9d7075e6509dd2b897ec902715a2610", "filename": "src/test/run-make/tools.mk", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Ftest%2Frun-make%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Ftest%2Frun-make%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftools.mk?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -83,6 +83,9 @@ ifeq ($(UNAME),Bitrig)\n \tEXTRACFLAGS := -lm -lpthread\n \tEXTRACXXFLAGS := -lc++ -lc++abi\n else\n+ifeq ($(UNAME),SunOS)\n+\tEXTRACFLAGS := -lm -lpthread -lposix4 -lsocket\n+else\n ifeq ($(UNAME),OpenBSD)\n \tEXTRACFLAGS := -lm -lpthread\n \tRUSTC := $(RUSTC) -C linker=\"$(word 1,$(CC:ccache=))\"\n@@ -94,6 +97,7 @@ endif\n endif\n endif\n endif\n+endif\n \n REMOVE_DYLIBS     = rm $(TMPDIR)/$(call DYLIB_GLOB,$(1))\n REMOVE_RLIBS      = rm $(TMPDIR)/$(call RLIB_GLOB,$(1))"}, {"sha": "cc7bc176f49f59b58e562a07fa11af6e09672fac", "filename": "src/test/run-make/use-extern-for-plugins/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Ftest%2Frun-make%2Fuse-extern-for-plugins%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Ftest%2Frun-make%2Fuse-extern-for-plugins%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fuse-extern-for-plugins%2FMakefile?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -1,6 +1,6 @@\n -include ../tools.mk\n \n-SKIP_OS := 'FreeBSD OpenBSD Bitrig'\n+SKIP_OS := 'FreeBSD OpenBSD Bitrig SunOS'\n \n ifneq ($(UNAME),$(findstring $(UNAME),$(SKIP_OS)))\n "}, {"sha": "f1e4f8dfa8c83e60201e52ed07247c19d6afe195", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -23,7 +23,8 @@ mod rusti {\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\",\n           target_os = \"netbsd\",\n-          target_os = \"openbsd\"))]\n+          target_os = \"openbsd\",\n+          target_os = \"solaris\"))]\n mod m {\n     #[main]\n     #[cfg(target_arch = \"x86\")]"}, {"sha": "2161864f0b69654fc1de16eb4f694763f45ab239", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -41,7 +41,8 @@ struct Outer {\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\",\n           target_os = \"netbsd\",\n-          target_os = \"openbsd\"))]\n+          target_os = \"openbsd\",\n+          target_os = \"solaris\"))]\n mod m {\n     #[cfg(target_arch = \"x86\")]\n     pub mod m {"}, {"sha": "c8c96b299fac09935b8553eaa1fa7face4cc671e", "filename": "src/test/run-pass/x86stdcall.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3bcddb44bc810ddf5b0443e45e42a835d17d868/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fx86stdcall.rs?ref=e3bcddb44bc810ddf5b0443e45e42a835d17d868", "patch": "@@ -37,5 +37,6 @@ pub fn main() {\n           target_os = \"bitrig\",\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n-          target_os = \"android\"))]\n+          target_os = \"android\",\n+          target_os = \"solaris\"))]\n pub fn main() { }"}]}