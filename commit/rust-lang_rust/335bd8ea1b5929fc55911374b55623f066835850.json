{"sha": "335bd8ea1b5929fc55911374b55623f066835850", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNWJkOGVhMWI1OTI5ZmM1NTkxMTM3NGI1NTYyM2YwNjY4MzU4NTA=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-09-16T07:44:27Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-19T00:14:30Z"}, "message": "rustc: do not track `non_zero` in Layout.", "tree": {"sha": "1a3dba61e6183e3a61e3f4f394b2a1f45c2344db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a3dba61e6183e3a61e3f4f394b2a1f45c2344db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/335bd8ea1b5929fc55911374b55623f066835850", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/335bd8ea1b5929fc55911374b55623f066835850", "html_url": "https://github.com/rust-lang/rust/commit/335bd8ea1b5929fc55911374b55623f066835850", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/335bd8ea1b5929fc55911374b55623f066835850/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02276e9f49761b12c3f4a71f8d51777114d37a3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/02276e9f49761b12c3f4a71f8d51777114d37a3f", "html_url": "https://github.com/rust-lang/rust/commit/02276e9f49761b12c3f4a71f8d51777114d37a3f"}], "stats": {"total": 132, "additions": 51, "deletions": 81}, "files": [{"sha": "d798982f3c86eea4bed7133b90661b37c1f81bb5", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 37, "deletions": 58, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/335bd8ea1b5929fc55911374b55623f066835850/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/335bd8ea1b5929fc55911374b55623f066835850/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=335bd8ea1b5929fc55911374b55623f066835850", "patch": "@@ -838,27 +838,29 @@ impl<'a, 'tcx> Struct {\n                               -> Result<Option<(Size, Primitive)>, LayoutError<'tcx>> {\n         let cx = (tcx, param_env);\n         match (layout.layout, &layout.ty.sty) {\n-            (&Scalar { non_zero: true, value, .. }, _) => {\n-                Ok(Some((Size::from_bytes(0), value)))\n+            (&Scalar(Pointer), _) if !layout.ty.is_unsafe_ptr() => {\n+                Ok(Some((Size::from_bytes(0), Pointer)))\n             }\n-            (&CEnum { non_zero: true, discr, .. }, _) => {\n-                Ok(Some((Size::from_bytes(0), Int(discr))))\n+            (&CEnum { discr, .. }, &ty::TyAdt(def, _)) => {\n+                if def.discriminants(tcx).all(|d| d.to_u128_unchecked() != 0) {\n+                    Ok(Some((Size::from_bytes(0), Int(discr))))\n+                } else {\n+                    Ok(None)\n+                }\n             }\n \n-            (&FatPointer { non_zero: true, .. }, _) => {\n+            (&FatPointer(_), _) if !layout.ty.is_unsafe_ptr() => {\n                 Ok(Some((layout.fields.offset(FAT_PTR_ADDR), Pointer)))\n             }\n \n             // Is this the NonZero lang item wrapping a pointer or integer type?\n             (_, &ty::TyAdt(def, _)) if Some(def.did) == tcx.lang_items().non_zero() => {\n                 let field = layout.field(cx, 0)?;\n                 match *field {\n-                    // FIXME(eddyb) also allow floating-point types here.\n-                    Scalar { value: value @ Int(_), non_zero: false } |\n-                    Scalar { value: value @ Pointer, non_zero: false } => {\n+                    Scalar(value) => {\n                         Ok(Some((layout.fields.offset(0), value)))\n                     }\n-                    FatPointer { non_zero: false, .. } => {\n+                    FatPointer(_) => {\n                         Ok(Some((layout.fields.offset(0) +\n                                  field.fields.offset(FAT_PTR_ADDR),\n                                  Pointer)))\n@@ -1070,11 +1072,7 @@ pub enum Abi {\n #[derive(Debug, PartialEq, Eq, Hash)]\n pub enum Layout {\n     /// TyBool, TyChar, TyInt, TyUint, TyFloat, TyRawPtr, TyRef or TyFnPtr.\n-    Scalar {\n-        value: Primitive,\n-        // If true, the value cannot represent a bit pattern of all zeroes.\n-        non_zero: bool\n-    },\n+    Scalar(Primitive),\n \n     /// SIMD vectors, from structs marked with #[repr(simd)].\n     Vector {\n@@ -1092,20 +1090,15 @@ pub enum Layout {\n         count: u64\n     },\n \n-    /// TyRawPtr or TyRef with a !Sized pointee.\n-    FatPointer {\n-        metadata: Primitive,\n-        /// If true, the pointer cannot be null.\n-        non_zero: bool\n-    },\n+    /// TyRawPtr or TyRef with a !Sized pointee. The primitive is the metadata.\n+    FatPointer(Primitive),\n \n     // Remaining variants are all ADTs such as structs, enums or tuples.\n \n     /// C-like enums; basically an integer.\n     CEnum {\n         discr: Integer,\n         signed: bool,\n-        non_zero: bool,\n         /// Inclusive discriminant range.\n         /// If min > max, it represents min...u64::MAX followed by 0...max.\n         // FIXME(eddyb) always use the shortest range, e.g. by finding\n@@ -1211,7 +1204,7 @@ impl<'a, 'tcx> Layout {\n         let success = |layout| {\n             let layout = tcx.intern_layout(layout);\n             let fields = match *layout {\n-                Scalar { .. } |\n+                Scalar(_) |\n                 CEnum { .. } => {\n                     FieldPlacement::union(0)\n                 }\n@@ -1258,7 +1251,7 @@ impl<'a, 'tcx> Layout {\n                 }\n             };\n             let abi = match *layout {\n-                Scalar { value, .. } => Abi::Scalar(value),\n+                Scalar(value) => Abi::Scalar(value),\n                 CEnum { discr, .. } => Abi::Scalar(Int(discr)),\n \n                 Vector { .. } => Abi::Vector,\n@@ -1286,43 +1279,36 @@ impl<'a, 'tcx> Layout {\n         assert!(!ty.has_infer_types());\n \n         let ptr_layout = |pointee: Ty<'tcx>| {\n-            let non_zero = !ty.is_unsafe_ptr();\n             let pointee = tcx.normalize_associated_type_in_env(&pointee, param_env);\n             if pointee.is_sized(tcx, param_env, DUMMY_SP) {\n-                Ok(Scalar { value: Pointer, non_zero })\n+                Ok(Scalar(Pointer))\n             } else {\n                 let unsized_part = tcx.struct_tail(pointee);\n                 let metadata = match unsized_part.sty {\n-                    ty::TyForeign(..) => return Ok(Scalar { value: Pointer, non_zero }),\n+                    ty::TyForeign(..) => return Ok(Scalar(Pointer)),\n                     ty::TySlice(_) | ty::TyStr => {\n                         Int(dl.ptr_sized_integer())\n                     }\n                     ty::TyDynamic(..) => Pointer,\n                     _ => return Err(LayoutError::Unknown(unsized_part))\n                 };\n-                Ok(FatPointer { metadata, non_zero })\n+                Ok(FatPointer(metadata))\n             }\n         };\n \n         let layout = match ty.sty {\n             // Basic scalars.\n-            ty::TyBool => Scalar { value: Int(I1), non_zero: false },\n-            ty::TyChar => Scalar { value: Int(I32), non_zero: false },\n+            ty::TyBool => Scalar(Int(I1)),\n+            ty::TyChar => Scalar(Int(I32)),\n             ty::TyInt(ity) => {\n-                Scalar {\n-                    value: Int(Integer::from_attr(dl, attr::SignedInt(ity))),\n-                    non_zero: false\n-                }\n+                Scalar(Int(Integer::from_attr(dl, attr::SignedInt(ity))))\n             }\n             ty::TyUint(ity) => {\n-                Scalar {\n-                    value: Int(Integer::from_attr(dl, attr::UnsignedInt(ity))),\n-                    non_zero: false\n-                }\n+                Scalar(Int(Integer::from_attr(dl, attr::UnsignedInt(ity))))\n             }\n-            ty::TyFloat(FloatTy::F32) => Scalar { value: F32, non_zero: false },\n-            ty::TyFloat(FloatTy::F64) => Scalar { value: F64, non_zero: false },\n-            ty::TyFnPtr(_) => Scalar { value: Pointer, non_zero: true },\n+            ty::TyFloat(FloatTy::F32) => Scalar(F32),\n+            ty::TyFloat(FloatTy::F64) => Scalar(F64),\n+            ty::TyFnPtr(_) => Scalar(Pointer),\n \n             // The never type.\n             ty::TyNever => {\n@@ -1430,7 +1416,7 @@ impl<'a, 'tcx> Layout {\n             ty::TyAdt(def, ..) if def.repr.simd() => {\n                 let element = ty.simd_type(tcx);\n                 match *cx.layout_of(element)? {\n-                    Scalar { value, .. } => {\n+                    Scalar(value) => {\n                         return success(Vector {\n                             element: value,\n                             count: ty.simd_size(tcx) as u64\n@@ -1456,12 +1442,9 @@ impl<'a, 'tcx> Layout {\n \n                 if def.is_enum() && def.variants.iter().all(|v| v.fields.is_empty()) {\n                     // All bodies empty -> intlike\n-                    let (mut min, mut max, mut non_zero) = (i64::max_value(),\n-                                                            i64::min_value(),\n-                                                            true);\n+                    let (mut min, mut max) = (i64::max_value(), i64::min_value());\n                     for discr in def.discriminants(tcx) {\n                         let x = discr.to_u128_unchecked() as i64;\n-                        if x == 0 { non_zero = false; }\n                         if x < min { min = x; }\n                         if x > max { max = x; }\n                     }\n@@ -1472,7 +1455,6 @@ impl<'a, 'tcx> Layout {\n                     return success(CEnum {\n                         discr,\n                         signed,\n-                        non_zero,\n                         // FIXME: should be u128?\n                         min: min as u64,\n                         max: max as u64\n@@ -1699,7 +1681,7 @@ impl<'a, 'tcx> Layout {\n     /// Returns true if the layout corresponds to an unsized type.\n     pub fn is_unsized(&self) -> bool {\n         match *self {\n-            Scalar {..} | Vector {..} | FatPointer {..} |\n+            Scalar(_) | Vector {..} | FatPointer {..} |\n             CEnum {..} | UntaggedUnion {..} | General {..} |\n             NullablePointer {..} => false,\n \n@@ -1712,7 +1694,7 @@ impl<'a, 'tcx> Layout {\n         let dl = cx.data_layout();\n \n         match *self {\n-            Scalar { value, .. } => {\n+            Scalar(value) => {\n                 value.size(dl)\n             }\n \n@@ -1734,7 +1716,7 @@ impl<'a, 'tcx> Layout {\n                 }\n             }\n \n-            FatPointer { metadata, .. } => {\n+            FatPointer(metadata) => {\n                 // Effectively a (ptr, meta) tuple.\n                 (Pointer.size(dl).abi_align(metadata.align(dl)) +\n                  metadata.size(dl)).abi_align(self.align(dl))\n@@ -1755,7 +1737,7 @@ impl<'a, 'tcx> Layout {\n         let dl = cx.data_layout();\n \n         match *self {\n-            Scalar { value, .. } => {\n+            Scalar(value) => {\n                 value.align(dl)\n             }\n \n@@ -1769,7 +1751,7 @@ impl<'a, 'tcx> Layout {\n                 dl.vector_align(vec_size)\n             }\n \n-            FatPointer { metadata, .. } => {\n+            FatPointer(metadata) => {\n                 // Effectively a (ptr, meta) tuple.\n                 Pointer.align(dl).max(metadata.align(dl))\n             }\n@@ -1993,7 +1975,7 @@ impl<'a, 'tcx> Layout {\n \n             // other cases provide little interesting (i.e. adjustable\n             // via representation tweaks) size info beyond total size.\n-            Layout::Scalar { .. } |\n+            Layout::Scalar(_) |\n             Layout::Vector { .. } |\n             Layout::Array { .. } |\n             Layout::FatPointer { .. } => {\n@@ -2421,9 +2403,8 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for Layout\n         mem::discriminant(self).hash_stable(hcx, hasher);\n \n         match *self {\n-            Scalar { value, non_zero } => {\n+            Scalar(ref value) => {\n                 value.hash_stable(hcx, hasher);\n-                non_zero.hash_stable(hcx, hasher);\n             }\n             Vector { element, count } => {\n                 element.hash_stable(hcx, hasher);\n@@ -2436,14 +2417,12 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for Layout\n                 element_size.hash_stable(hcx, hasher);\n                 count.hash_stable(hcx, hasher);\n             }\n-            FatPointer { ref metadata, non_zero } => {\n+            FatPointer(ref metadata) => {\n                 metadata.hash_stable(hcx, hasher);\n-                non_zero.hash_stable(hcx, hasher);\n             }\n-            CEnum { discr, signed, non_zero, min, max } => {\n+            CEnum { discr, signed, min, max } => {\n                 discr.hash_stable(hcx, hasher);\n                 signed.hash_stable(hcx, hasher);\n-                non_zero.hash_stable(hcx, hasher);\n                 min.hash_stable(hcx, hasher);\n                 max.hash_stable(hcx, hasher);\n             }"}, {"sha": "c3b6c1cce67fb24a50afa65f0dde66a94aebfce9", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/335bd8ea1b5929fc55911374b55623f066835850/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/335bd8ea1b5929fc55911374b55623f066835850/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=335bd8ea1b5929fc55911374b55623f066835850", "patch": "@@ -468,17 +468,8 @@ impl<'a, 'tcx> ArgType<'tcx> {\n     pub fn extend_integer_width_to(&mut self, bits: u64) {\n         // Only integers have signedness\n         let (i, signed) = match *self.layout {\n-            Layout::Scalar { value, .. } => {\n-                match value {\n-                    layout::Int(i) => {\n-                        if self.layout.ty.is_integral() {\n-                            (i, self.layout.ty.is_signed())\n-                        } else {\n-                            return;\n-                        }\n-                    }\n-                    _ => return\n-                }\n+            Layout::Scalar(layout::Int(i)) if self.layout.ty.is_integral() => {\n+                (i, self.layout.ty.is_signed())\n             }\n \n             // Rust enum types that map onto C enums also need to follow"}, {"sha": "a45fe662bd65d85c6a6234bd5e9f3ae9113ff463", "filename": "src/librustc_trans/cabi_s390x.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/335bd8ea1b5929fc55911374b55623f066835850/src%2Flibrustc_trans%2Fcabi_s390x.rs", "raw_url": "https://github.com/rust-lang/rust/raw/335bd8ea1b5929fc55911374b55623f066835850/src%2Flibrustc_trans%2Fcabi_s390x.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_s390x.rs?ref=335bd8ea1b5929fc55911374b55623f066835850", "patch": "@@ -14,7 +14,7 @@\n use abi::{FnType, ArgType, LayoutExt, Reg};\n use context::CrateContext;\n \n-use rustc::ty::layout::{self, Layout, FullLayout};\n+use rustc::ty::layout::{self, FullLayout};\n \n fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tcx>) {\n     if !ret.layout.is_aggregate() && ret.layout.size(ccx).bits() <= 64 {\n@@ -26,11 +26,11 @@ fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tc\n \n fn is_single_fp_element<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                   layout: FullLayout<'tcx>) -> bool {\n-    match *layout {\n-        Layout::Scalar { value: layout::F32, .. } |\n-        Layout::Scalar { value: layout::F64, .. } => true,\n-        Layout::Univariant { .. } => {\n-            if layout.fields.count() == 1 {\n+    match layout.abi {\n+        layout::Abi::Scalar(layout::F32) |\n+        layout::Abi::Scalar(layout::F64) => true,\n+        layout::Abi::Aggregate => {\n+            if layout.fields.count() == 1 && layout.fields.offset(0).bytes() == 0 {\n                 is_single_fp_element(ccx, layout.field(ccx, 0))\n             } else {\n                 false"}, {"sha": "bc7c9a3ed05654593856d84c31e5355793659992", "filename": "src/librustc_trans/cabi_x86.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/335bd8ea1b5929fc55911374b55623f066835850/src%2Flibrustc_trans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/335bd8ea1b5929fc55911374b55623f066835850/src%2Flibrustc_trans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_x86.rs?ref=335bd8ea1b5929fc55911374b55623f066835850", "patch": "@@ -11,7 +11,7 @@\n use abi::{ArgAttribute, FnType, LayoutExt, Reg, RegKind};\n use common::CrateContext;\n \n-use rustc::ty::layout::{self, Layout, FullLayout};\n+use rustc::ty::layout::{self, FullLayout};\n \n #[derive(PartialEq)]\n pub enum Flavor {\n@@ -21,11 +21,11 @@ pub enum Flavor {\n \n fn is_single_fp_element<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                   layout: FullLayout<'tcx>) -> bool {\n-    match *layout {\n-        Layout::Scalar { value: layout::F32, .. } |\n-        Layout::Scalar { value: layout::F64, .. } => true,\n-        Layout::Univariant { .. } => {\n-            if layout.fields.count() == 1 {\n+    match layout.abi {\n+        layout::Abi::Scalar(layout::F32) |\n+        layout::Abi::Scalar(layout::F64) => true,\n+        layout::Abi::Aggregate => {\n+            if layout.fields.count() == 1 && layout.fields.offset(0).bytes() == 0 {\n                 is_single_fp_element(ccx, layout.field(ccx, 0))\n             } else {\n                 false"}]}