{"sha": "25e9b79060d67f1ac0dc2315ff627b6359192bfc", "node_id": "C_kwDOAAsO6NoAKDI1ZTliNzkwNjBkNjdmMWFjMGRjMjMxNWZmNjI3YjYzNTkxOTJiZmM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-04-27T10:22:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-04-28T12:42:03Z"}, "message": "interpret: fail more gracefully on uninit unsized locals", "tree": {"sha": "1c3d8482d9bb812b36263c7ee79771f694f164d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c3d8482d9bb812b36263c7ee79771f694f164d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25e9b79060d67f1ac0dc2315ff627b6359192bfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25e9b79060d67f1ac0dc2315ff627b6359192bfc", "html_url": "https://github.com/rust-lang/rust/commit/25e9b79060d67f1ac0dc2315ff627b6359192bfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25e9b79060d67f1ac0dc2315ff627b6359192bfc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b8110e1469d459a196f6feb60d82dec48c3cfc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b8110e1469d459a196f6feb60d82dec48c3cfc2", "html_url": "https://github.com/rust-lang/rust/commit/8b8110e1469d459a196f6feb60d82dec48c3cfc2"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "b10f2e9f862dbc513714a580c0e08b157d1c3c91", "filename": "compiler/rustc_const_eval/src/const_eval/valtrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25e9b79060d67f1ac0dc2315ff627b6359192bfc/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e9b79060d67f1ac0dc2315ff627b6359192bfc/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs?ref=25e9b79060d67f1ac0dc2315ff627b6359192bfc", "patch": "@@ -337,7 +337,7 @@ fn valtree_into_mplace<'tcx>(\n \n     match ty.kind() {\n         ty::FnDef(_, _) => {\n-            ecx.write_immediate(Immediate::Uninit, &place.into()).unwrap();\n+            // Zero-sized type, nothing to do.\n         }\n         ty::Bool | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Char => {\n             let scalar_int = valtree.unwrap_leaf();"}, {"sha": "a7f66071fe2bbd07a06e9144f21a8196a9d6d1c3", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25e9b79060d67f1ac0dc2315ff627b6359192bfc/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e9b79060d67f1ac0dc2315ff627b6359192bfc/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=25e9b79060d67f1ac0dc2315ff627b6359192bfc", "patch": "@@ -245,6 +245,12 @@ impl<'tcx, Prov: Provenance> ImmTy<'tcx, Prov> {\n impl<'tcx, Prov: Provenance> OpTy<'tcx, Prov> {\n     pub fn len(&self, cx: &impl HasDataLayout) -> InterpResult<'tcx, u64> {\n         if self.layout.is_unsized() {\n+            if matches!(self.op, Operand::Immediate(Immediate::Uninit)) {\n+                // Uninit unsized places shouldn't occur. In the interpreter we have them\n+                // temporarily for unsized arguments before their value is put in; in ConstProp they\n+                // remain uninit and this code can actually be reached.\n+                throw_inval!(UninitUnsizedLocal);\n+            }\n             // There are no unsized immediates.\n             self.assert_mem_place().len(cx)\n         } else {"}, {"sha": "e45284ca506554ce1b282595cc7f90b6a1729968", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25e9b79060d67f1ac0dc2315ff627b6359192bfc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e9b79060d67f1ac0dc2315ff627b6359192bfc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=25e9b79060d67f1ac0dc2315ff627b6359192bfc", "patch": "@@ -134,6 +134,9 @@ pub enum InvalidProgramInfo<'tcx> {\n     FnAbiAdjustForForeignAbi(call::AdjustForForeignAbiError),\n     /// SizeOf of unsized type was requested.\n     SizeOfUnsizedType(Ty<'tcx>),\n+    /// An unsized local was accessed without having been initialized.\n+    /// This is not meaningful as we can't even have backing memory for such locals.\n+    UninitUnsizedLocal,\n }\n \n impl fmt::Display for InvalidProgramInfo<'_> {\n@@ -150,6 +153,7 @@ impl fmt::Display for InvalidProgramInfo<'_> {\n             Layout(ref err) => write!(f, \"{err}\"),\n             FnAbiAdjustForForeignAbi(ref err) => write!(f, \"{err}\"),\n             SizeOfUnsizedType(ty) => write!(f, \"size_of called on unsized type `{ty}`\"),\n+            UninitUnsizedLocal => write!(f, \"unsized local is used while uninitialized\"),\n         }\n     }\n }"}, {"sha": "c725b3238ea64bad3f7c774b5f12f8aedb47c59c", "filename": "tests/ui/const_prop/unsized-local-ice.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/25e9b79060d67f1ac0dc2315ff627b6359192bfc/tests%2Fui%2Fconst_prop%2Funsized-local-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e9b79060d67f1ac0dc2315ff627b6359192bfc/tests%2Fui%2Fconst_prop%2Funsized-local-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst_prop%2Funsized-local-ice.rs?ref=25e9b79060d67f1ac0dc2315ff627b6359192bfc", "patch": "@@ -0,0 +1,9 @@\n+// build-pass\n+//! Regression test for <https://github.com/rust-lang/rust/issues/68538>.\n+#![feature(unsized_fn_params)]\n+\n+pub fn take_unsized_slice(s: [u8]) {\n+    s[0];\n+}\n+\n+fn main() {}"}]}