{"sha": "6272b60dcaae2e69c991fc64cfb2e403c8a616a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNzJiNjBkY2FhZTJlNjljOTkxZmM2NGNmYjJlNDAzYzhhNjE2YTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-27T08:04:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-27T08:04:12Z"}, "message": "Auto merge of #47690 - estebank:for-block-277, r=nikomatsakis\n\nFor E0277 on `for` loops, point at the \"head\" expression\n\nWhen E0277's span points at a `for` loop, the actual issue is in the\nelement being iterated. Instead of pointing at the entire loop, point\nonly at the first line (when possible) so that the span ends in the\nelement for which E0277 was triggered.", "tree": {"sha": "c07e40f847e804b187a35aa2b36ca94faffd92da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c07e40f847e804b187a35aa2b36ca94faffd92da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6272b60dcaae2e69c991fc64cfb2e403c8a616a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6272b60dcaae2e69c991fc64cfb2e403c8a616a3", "html_url": "https://github.com/rust-lang/rust/commit/6272b60dcaae2e69c991fc64cfb2e403c8a616a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6272b60dcaae2e69c991fc64cfb2e403c8a616a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c41fcec4cd6e76180edb088a48914aa71612e5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c41fcec4cd6e76180edb088a48914aa71612e5d", "html_url": "https://github.com/rust-lang/rust/commit/5c41fcec4cd6e76180edb088a48914aa71612e5d"}, {"sha": "106e5c554d6b6b97aecac254a2694247e84e718e", "url": "https://api.github.com/repos/rust-lang/rust/commits/106e5c554d6b6b97aecac254a2694247e84e718e", "html_url": "https://github.com/rust-lang/rust/commit/106e5c554d6b6b97aecac254a2694247e84e718e"}], "stats": {"total": 123, "additions": 69, "deletions": 54}, "files": [{"sha": "55dcb16c3c95fdbdb939dd62b601f9e6727cab23", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6272b60dcaae2e69c991fc64cfb2e403c8a616a3/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6272b60dcaae2e69c991fc64cfb2e403c8a616a3/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=6272b60dcaae2e69c991fc64cfb2e403c8a616a3", "patch": "@@ -3033,7 +3033,7 @@ impl<'a> LoweringContext<'a> {\n \n                 // `match <sub_expr> { ... }`\n                 let arms = hir_vec![pat_arm, break_arm];\n-                let match_expr = self.expr(e.span,\n+                let match_expr = self.expr(sub_expr.span,\n                                            hir::ExprMatch(sub_expr,\n                                                           arms,\n                                                           hir::MatchSource::WhileLetDesugar),\n@@ -3071,24 +3071,25 @@ impl<'a> LoweringContext<'a> {\n \n                 // expand <head>\n                 let head = self.lower_expr(head);\n+                let head_sp = head.span;\n \n                 let iter = self.str_to_ident(\"iter\");\n \n                 let next_ident = self.str_to_ident(\"__next\");\n-                let next_pat = self.pat_ident_binding_mode(e.span,\n+                let next_pat = self.pat_ident_binding_mode(pat.span,\n                                                            next_ident,\n                                                            hir::BindingAnnotation::Mutable);\n \n                 // `::std::option::Option::Some(val) => next = val`\n                 let pat_arm = {\n                     let val_ident = self.str_to_ident(\"val\");\n-                    let val_pat = self.pat_ident(e.span, val_ident);\n-                    let val_expr = P(self.expr_ident(e.span, val_ident, val_pat.id));\n-                    let next_expr = P(self.expr_ident(e.span, next_ident, next_pat.id));\n-                    let assign = P(self.expr(e.span,\n+                    let val_pat = self.pat_ident(pat.span, val_ident);\n+                    let val_expr = P(self.expr_ident(pat.span, val_ident, val_pat.id));\n+                    let next_expr = P(self.expr_ident(pat.span, next_ident, next_pat.id));\n+                    let assign = P(self.expr(pat.span,\n                                              hir::ExprAssign(next_expr, val_expr),\n                                              ThinVec::new()));\n-                    let some_pat = self.pat_some(e.span, val_pat);\n+                    let some_pat = self.pat_some(pat.span, val_pat);\n                     self.arm(hir_vec![some_pat], assign)\n                 };\n \n@@ -3101,46 +3102,45 @@ impl<'a> LoweringContext<'a> {\n                 };\n \n                 // `mut iter`\n-                let iter_pat = self.pat_ident_binding_mode(e.span,\n+                let iter_pat = self.pat_ident_binding_mode(head_sp,\n                                                            iter,\n                                                            hir::BindingAnnotation::Mutable);\n \n                 // `match ::std::iter::Iterator::next(&mut iter) { ... }`\n                 let match_expr = {\n-                    let iter = P(self.expr_ident(e.span, iter, iter_pat.id));\n-                    let ref_mut_iter = self.expr_mut_addr_of(e.span, iter);\n+                    let iter = P(self.expr_ident(head_sp, iter, iter_pat.id));\n+                    let ref_mut_iter = self.expr_mut_addr_of(head_sp, iter);\n                     let next_path = &[\"iter\", \"Iterator\", \"next\"];\n-                    let next_path = P(self.expr_std_path(e.span, next_path, ThinVec::new()));\n-                    let next_expr = P(self.expr_call(e.span, next_path,\n+                    let next_path = P(self.expr_std_path(head_sp, next_path, ThinVec::new()));\n+                    let next_expr = P(self.expr_call(head_sp, next_path,\n                                       hir_vec![ref_mut_iter]));\n                     let arms = hir_vec![pat_arm, break_arm];\n \n-                    P(self.expr(e.span,\n+                    P(self.expr(head_sp,\n                                 hir::ExprMatch(next_expr, arms,\n                                                hir::MatchSource::ForLoopDesugar),\n                                 ThinVec::new()))\n                 };\n-                let match_stmt = respan(e.span, hir::StmtExpr(match_expr, self.next_id().node_id));\n+                let match_stmt = respan(head_sp, hir::StmtExpr(match_expr, self.next_id().node_id));\n \n-                let next_expr = P(self.expr_ident(e.span, next_ident, next_pat.id));\n+                let next_expr = P(self.expr_ident(head_sp, next_ident, next_pat.id));\n \n                 // `let mut __next`\n-                let next_let = self.stmt_let_pat(e.span,\n+                let next_let = self.stmt_let_pat(head_sp,\n                     None,\n                     next_pat,\n                     hir::LocalSource::ForLoopDesugar);\n \n                 // `let <pat> = __next`\n                 let pat = self.lower_pat(pat);\n-                let pat_let = self.stmt_let_pat(e.span,\n+                let pat_let = self.stmt_let_pat(head_sp,\n                     Some(next_expr),\n                     pat,\n                     hir::LocalSource::ForLoopDesugar);\n \n-                let body_block = self.with_loop_scope(e.id,\n-                                                        |this| this.lower_block(body, false));\n+                let body_block = self.with_loop_scope(e.id, |this| this.lower_block(body, false));\n                 let body_expr = P(self.expr_block(body_block, ThinVec::new()));\n-                let body_stmt = respan(e.span, hir::StmtExpr(body_expr, self.next_id().node_id));\n+                let body_stmt = respan(body.span, hir::StmtExpr(body_expr, self.next_id().node_id));\n \n                 let loop_block = P(self.block_all(e.span,\n                                                   hir_vec![next_let,\n@@ -3167,12 +3167,12 @@ impl<'a> LoweringContext<'a> {\n                 // `match ::std::iter::IntoIterator::into_iter(<head>) { ... }`\n                 let into_iter_expr = {\n                     let into_iter_path = &[\"iter\", \"IntoIterator\", \"into_iter\"];\n-                    let into_iter = P(self.expr_std_path(e.span, into_iter_path,\n+                    let into_iter = P(self.expr_std_path(head_sp, into_iter_path,\n                                                          ThinVec::new()));\n-                    P(self.expr_call(e.span, into_iter, hir_vec![head]))\n+                    P(self.expr_call(head_sp, into_iter, hir_vec![head]))\n                 };\n \n-                let match_expr = P(self.expr_match(e.span,\n+                let match_expr = P(self.expr_match(head_sp,\n                                                    into_iter_expr,\n                                                    hir_vec![iter_arm],\n                                                    hir::MatchSource::ForLoopDesugar));"}, {"sha": "8a4fd24a29b89ca525af34f3478e9ad35b980f25", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6272b60dcaae2e69c991fc64cfb2e403c8a616a3/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6272b60dcaae2e69c991fc64cfb2e403c8a616a3/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=6272b60dcaae2e69c991fc64cfb2e403c8a616a3", "patch": "@@ -767,6 +767,7 @@ impl EmitterWriter {\n                         }\n                         // Check to make sure we're not in any <*macros>\n                         if !cm.span_to_filename(def_site).is_macros() &&\n+                           !trace.macro_decl_name.starts_with(\"desugaring of \") &&\n                            !trace.macro_decl_name.starts_with(\"#[\") ||\n                            always_backtrace {\n                             new_labels.push((trace.call_site,"}, {"sha": "5eb0e4360fc93beeb208a294674ca837dded48d3", "filename": "src/test/compile-fail/issue-20605.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6272b60dcaae2e69c991fc64cfb2e403c8a616a3/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6272b60dcaae2e69c991fc64cfb2e403c8a616a3/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs?ref=6272b60dcaae2e69c991fc64cfb2e403c8a616a3", "patch": "@@ -10,7 +10,7 @@\n \n fn changer<'a>(mut things: Box<Iterator<Item=&'a mut u8>>) {\n     for item in *things { *item = 0 }\n-//~^ ERROR `std::iter::Iterator<Item=&mut u8>: std::marker::Sized` is not satisfied\n+//~^ ERROR the trait bound `std::iter::Iterator<Item=&mut u8>: std::marker::Sized` is not satisfied\n }\n \n fn main() {}"}, {"sha": "4f4f8b5ad00930d0e229d4f0af61b3cf68f46ba6", "filename": "src/test/ui/const-fn-error.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6272b60dcaae2e69c991fc64cfb2e403c8a616a3/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6272b60dcaae2e69c991fc64cfb2e403c8a616a3/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-error.stderr?ref=6272b60dcaae2e69c991fc64cfb2e403c8a616a3", "patch": "@@ -13,22 +13,16 @@ error[E0016]: blocks in constant functions are limited to items and tail express\n    |                   ^\n \n error[E0015]: calls in constant functions are limited to constant functions, struct and enum constructors\n-  --> $DIR/const-fn-error.rs:17:5\n+  --> $DIR/const-fn-error.rs:17:14\n    |\n-17 | /     for i in 0..x { //~ ERROR calls in constant functions\n-18 | |     //~| ERROR constant function contains unimplemented\n-19 | |         sum += i;\n-20 | |     }\n-   | |_____^\n+17 |     for i in 0..x { //~ ERROR calls in constant functions\n+   |              ^^^^\n \n error[E0019]: constant function contains unimplemented expression type\n-  --> $DIR/const-fn-error.rs:17:5\n+  --> $DIR/const-fn-error.rs:17:14\n    |\n-17 | /     for i in 0..x { //~ ERROR calls in constant functions\n-18 | |     //~| ERROR constant function contains unimplemented\n-19 | |         sum += i;\n-20 | |     }\n-   | |_____^\n+17 |     for i in 0..x { //~ ERROR calls in constant functions\n+   |              ^^^^\n \n error[E0080]: constant evaluation error\n   --> $DIR/const-fn-error.rs:21:5"}, {"sha": "78c9ce9a1b12a0967a288c49adedf814eaa50687", "filename": "src/test/ui/issue-33941.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6272b60dcaae2e69c991fc64cfb2e403c8a616a3/src%2Ftest%2Fui%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6272b60dcaae2e69c991fc64cfb2e403c8a616a3/src%2Ftest%2Fui%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-33941.stderr?ref=6272b60dcaae2e69c991fc64cfb2e403c8a616a3", "patch": "@@ -8,10 +8,10 @@ error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _,\n               found type `&_`\n \n error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _, _> as std::iter::Iterator>::Item == &_`\n-  --> $DIR/issue-33941.rs:14:5\n+  --> $DIR/issue-33941.rs:14:14\n    |\n 14 |     for _ in HashMap::new().iter().cloned() {} //~ ERROR type mismatch\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected tuple, found reference\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected tuple, found reference\n    |\n    = note: expected type `(&_, &_)`\n               found type `&_`"}, {"sha": "011886e8073467e67126ede597a0006dcf6dbfee", "filename": "src/test/ui/suggestions/for-c-in-str.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6272b60dcaae2e69c991fc64cfb2e403c8a616a3/src%2Ftest%2Fui%2Fsuggestions%2Ffor-c-in-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6272b60dcaae2e69c991fc64cfb2e403c8a616a3/src%2Ftest%2Fui%2Fsuggestions%2Ffor-c-in-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffor-c-in-str.rs?ref=6272b60dcaae2e69c991fc64cfb2e403c8a616a3", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// E0277 should point exclusively at line 14, not the entire for loop span\n+\n+fn main() {\n+    for c in \"asdf\" {\n+    //~^ ERROR the trait bound `&str: std::iter::Iterator` is not satisfied\n+    //~| NOTE `&str` is not an iterator\n+    //~| HELP the trait `std::iter::Iterator` is not implemented for `&str`\n+    //~| NOTE required by `std::iter::IntoIterator::into_iter`\n+        println!(\"\");\n+    }\n+}"}, {"sha": "7a6dc9a504029fb44b5c7d23d74b92bf31dd0a29", "filename": "src/test/ui/suggestions/for-c-in-str.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6272b60dcaae2e69c991fc64cfb2e403c8a616a3/src%2Ftest%2Fui%2Fsuggestions%2Ffor-c-in-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6272b60dcaae2e69c991fc64cfb2e403c8a616a3/src%2Ftest%2Fui%2Fsuggestions%2Ffor-c-in-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffor-c-in-str.stderr?ref=6272b60dcaae2e69c991fc64cfb2e403c8a616a3", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: the trait bound `&str: std::iter::Iterator` is not satisfied\n+  --> $DIR/for-c-in-str.rs:14:14\n+   |\n+14 |     for c in \"asdf\" {\n+   |              ^^^^^^ `&str` is not an iterator; maybe try calling `.iter()` or a similar method\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `&str`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error: aborting due to previous error\n+"}, {"sha": "dfe950818e7e6ec181d0f6ed17d15dff843fe069", "filename": "src/test/ui/suggestions/try-on-option.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6272b60dcaae2e69c991fc64cfb2e403c8a616a3/src%2Ftest%2Fui%2Fsuggestions%2Ftry-on-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6272b60dcaae2e69c991fc64cfb2e403c8a616a3/src%2Ftest%2Fui%2Fsuggestions%2Ftry-on-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftry-on-option.stderr?ref=6272b60dcaae2e69c991fc64cfb2e403c8a616a3", "patch": "@@ -10,10 +10,7 @@ error[E0277]: the `?` operator can only be used in a function that returns `Resu\n   --> $DIR/try-on-option.rs:23:5\n    |\n 23 |     x?; //~ the `?` operator\n-   |     --\n-   |     |\n-   |     cannot use the `?` operator in a function that returns `u32`\n-   |     in this macro invocation\n+   |     ^^ cannot use the `?` operator in a function that returns `u32`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `u32`\n    = note: required by `std::ops::Try::from_error`"}, {"sha": "e97823a3d5d5b96496e5acd2e0695da4c56e7555", "filename": "src/test/ui/suggestions/try-operator-on-main.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6272b60dcaae2e69c991fc64cfb2e403c8a616a3/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6272b60dcaae2e69c991fc64cfb2e403c8a616a3/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr?ref=6272b60dcaae2e69c991fc64cfb2e403c8a616a3", "patch": "@@ -2,10 +2,7 @@ error[E0277]: the `?` operator can only be used in a function that returns `Resu\n   --> $DIR/try-operator-on-main.rs:19:5\n    |\n 19 |     std::fs::File::open(\"foo\")?; //~ ERROR the `?` operator can only\n-   |     ---------------------------\n-   |     |\n-   |     cannot use the `?` operator in a function that returns `()`\n-   |     in this macro invocation\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `()`\n    = note: required by `std::ops::Try::from_error`\n@@ -14,10 +11,7 @@ error[E0277]: the `?` operator can only be applied to values that implement `std\n   --> $DIR/try-operator-on-main.rs:22:5\n    |\n 22 |     ()?; //~ ERROR the `?` operator can only\n-   |     ---\n-   |     |\n-   |     the `?` operator cannot be applied to type `()`\n-   |     in this macro invocation\n+   |     ^^^ the `?` operator cannot be applied to type `()`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `()`\n    = note: required by `std::ops::Try::into_result`\n@@ -38,10 +32,7 @@ error[E0277]: the `?` operator can only be applied to values that implement `std\n   --> $DIR/try-operator-on-main.rs:32:5\n    |\n 32 |     ()?; //~ ERROR the `?` operator can only\n-   |     ---\n-   |     |\n-   |     the `?` operator cannot be applied to type `()`\n-   |     in this macro invocation\n+   |     ^^^ the `?` operator cannot be applied to type `()`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `()`\n    = note: required by `std::ops::Try::into_result`"}]}