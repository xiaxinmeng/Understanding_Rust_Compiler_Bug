{"sha": "729ee203387cc3a3f7387cffd018aba93b0110e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyOWVlMjAzMzg3Y2MzYTNmNzM4N2NmZmQwMThhYmE5M2IwMTEwZTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-29T19:11:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-29T19:11:40Z"}, "message": "auto merge of #14483 : ahmedcharles/rust/patbox, r=alexcrichton", "tree": {"sha": "758f048b13674ba9fa0caf2eb4ca4dba7442436e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/758f048b13674ba9fa0caf2eb4ca4dba7442436e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/729ee203387cc3a3f7387cffd018aba93b0110e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/729ee203387cc3a3f7387cffd018aba93b0110e6", "html_url": "https://github.com/rust-lang/rust/commit/729ee203387cc3a3f7387cffd018aba93b0110e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/729ee203387cc3a3f7387cffd018aba93b0110e6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50b8528970734adcc654740c51c50094f73dcbee", "url": "https://api.github.com/repos/rust-lang/rust/commits/50b8528970734adcc654740c51c50094f73dcbee", "html_url": "https://github.com/rust-lang/rust/commit/50b8528970734adcc654740c51c50094f73dcbee"}, {"sha": "4e3db5e0f48f5dcebd34a5a5be1a10c6d9a8f706", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e3db5e0f48f5dcebd34a5a5be1a10c6d9a8f706", "html_url": "https://github.com/rust-lang/rust/commit/4e3db5e0f48f5dcebd34a5a5be1a10c6d9a8f706"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "e2b4dde577a060486eede62ed5302964382deb0f", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=729ee203387cc3a3f7387cffd018aba93b0110e6", "patch": "@@ -113,7 +113,7 @@ impl<'a> CFGBuilder<'a> {\n                 self.add_node(pat.id, [pred])\n             }\n \n-            ast::PatUniq(subpat) |\n+            ast::PatBox(subpat) |\n             ast::PatRegion(subpat) |\n             ast::PatIdent(_, _, Some(subpat)) => {\n                 let subpat_exit = self.pat(subpat, pred);"}, {"sha": "e21c8348a8b82cd5c4079b54da55166ca1ab9f17", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=729ee203387cc3a3f7387cffd018aba93b0110e6", "patch": "@@ -383,7 +383,7 @@ fn pat_ctor_id(cx: &MatchCheckCtxt, p: @Pat) -> Option<ctor> {\n           _ => Some(single)\n         }\n       }\n-      PatUniq(_) | PatTup(_) | PatRegion(..) => {\n+      PatBox(_) | PatTup(_) | PatRegion(..) => {\n         Some(single)\n       }\n       PatVec(ref before, slice, ref after) => {\n@@ -764,7 +764,7 @@ fn specialize(cx: &MatchCheckCtxt,\n             PatTup(args) => {\n                 Some(args.iter().map(|x| *x).collect::<Vec<_>>().append(r.tail()))\n             }\n-            PatUniq(a) | PatRegion(a) => {\n+            PatBox(a) | PatRegion(a) => {\n                 Some((vec!(a)).append(r.tail()))\n             }\n             PatLit(expr) => {\n@@ -924,7 +924,7 @@ fn find_refutable(cx: &MatchCheckCtxt, pat: &Pat, spans: &mut Vec<Span>) {\n     }\n \n     match pat.node {\n-      PatUniq(sub) | PatRegion(sub) | PatIdent(_, _, Some(sub)) => {\n+      PatBox(sub) | PatRegion(sub) | PatIdent(_, _, Some(sub)) => {\n         find_refutable(cx, sub, spans)\n       }\n       PatWild | PatWildMulti | PatIdent(_, _, None) => {}"}, {"sha": "1fad7b1e60c967c133849e938dea897665876632", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=729ee203387cc3a3f7387cffd018aba93b0110e6", "patch": "@@ -1064,7 +1064,7 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n             }\n           }\n \n-          ast::PatUniq(subpat) | ast::PatRegion(subpat) => {\n+          ast::PatBox(subpat) | ast::PatRegion(subpat) => {\n             // @p1, ~p1\n             let subcmt = self.cat_deref(pat, cmt, 0);\n             if_ok!(self.cat_pattern(subcmt, subpat, op));"}, {"sha": "802f2d5ccab76ccc91f568db97dd51c9acea5ef6", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=729ee203387cc3a3f7387cffd018aba93b0110e6", "patch": "@@ -671,7 +671,7 @@ fn resolve_local(visitor: &mut RegionResolutionVisitor,\n                 subpats.iter().any(|&p| is_binding_pat(p))\n             }\n \n-            ast::PatUniq(subpat) => {\n+            ast::PatBox(subpat) => {\n                 is_binding_pat(subpat)\n             }\n "}, {"sha": "494f6591d39713dcf99efc9ad363391469d5a7b0", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=729ee203387cc3a3f7387cffd018aba93b0110e6", "patch": "@@ -838,7 +838,7 @@ fn enter_uniq<'a, 'b>(\n     let dummy = @ast::Pat {id: 0, node: ast::PatWild, span: DUMMY_SP};\n     enter_match(bcx, dm, m, col, val, |p| {\n         match p.node {\n-            ast::PatUniq(sub) => {\n+            ast::PatBox(sub) => {\n                 Some(vec!(sub))\n             }\n             _ => {\n@@ -1105,7 +1105,7 @@ macro_rules! any_pat (\n )\n \n fn any_uniq_pat(m: &[Match], col: uint) -> bool {\n-    any_pat!(m, ast::PatUniq(_))\n+    any_pat!(m, ast::PatBox(_))\n }\n \n fn any_region_pat(m: &[Match], col: uint) -> bool {\n@@ -2270,7 +2270,7 @@ fn bind_irrefutable_pat<'a>(\n                                            binding_mode, cleanup_scope);\n             }\n         }\n-        ast::PatUniq(inner) => {\n+        ast::PatBox(inner) => {\n             let llbox = Load(bcx, val);\n             bcx = bind_irrefutable_pat(bcx, inner, llbox, binding_mode, cleanup_scope);\n         }"}, {"sha": "25f780a0eabf989f16b391673efd408208b364f1", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=729ee203387cc3a3f7387cffd018aba93b0110e6", "patch": "@@ -2632,7 +2632,7 @@ fn populate_scope_map(cx: &CrateContext,\n                 }\n             }\n \n-            ast::PatUniq(sub_pat) | ast::PatRegion(sub_pat) => {\n+            ast::PatBox(sub_pat) | ast::PatRegion(sub_pat) => {\n                 scope_map.insert(pat.id, scope_stack.last().unwrap().scope_metadata);\n                 walk_pattern(cx, sub_pat, scope_stack, scope_map);\n             }"}, {"sha": "565b951df25023a556f40a163b76e8f5941bf30f", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=729ee203387cc3a3f7387cffd018aba93b0110e6", "patch": "@@ -626,7 +626,7 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n             }\n         }\n       }\n-      ast::PatUniq(inner) => {\n+      ast::PatBox(inner) => {\n           check_pointer_pat(pcx, Send, inner, pat.id, pat.span, expected);\n       }\n       ast::PatRegion(inner) => {"}, {"sha": "610cc992eed6e389fa4705a584baaa67c4947c61", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=729ee203387cc3a3f7387cffd018aba93b0110e6", "patch": "@@ -1721,7 +1721,7 @@ fn name_from_pat(p: &ast::Pat) -> String {\n         PatStruct(..) => fail!(\"tried to get argument name from pat_struct, \\\n                                 which is not allowed in function arguments\"),\n         PatTup(..) => \"(tuple arg NYI)\".to_string(),\n-        PatUniq(p) => name_from_pat(p),\n+        PatBox(p) => name_from_pat(p),\n         PatRegion(p) => name_from_pat(p),\n         PatLit(..) => {\n             warn!(\"tried to get argument name from PatLit, \\"}, {"sha": "d6af10ddc1855cd7b4f0bb33ce290f27a9016c4c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=729ee203387cc3a3f7387cffd018aba93b0110e6", "patch": "@@ -347,7 +347,7 @@ pub enum Pat_ {\n                                      * we don't bind the fields to names */\n     PatStruct(Path, Vec<FieldPat> , bool),\n     PatTup(Vec<@Pat> ),\n-    PatUniq(@Pat),\n+    PatBox(@Pat),\n     PatRegion(@Pat), // reference pattern\n     PatLit(@Expr),\n     PatRange(@Expr, @Expr),"}, {"sha": "e4f2f7f26cf0da1c328147bb919527a24ef56af4", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=729ee203387cc3a3f7387cffd018aba93b0110e6", "patch": "@@ -657,7 +657,7 @@ pub fn walk_pat(pat: &Pat, it: |&Pat| -> bool) -> bool {\n         PatEnum(_, Some(ref s)) | PatTup(ref s) => {\n             s.iter().advance(|&p| walk_pat(p, |p| it(p)))\n         }\n-        PatUniq(s) | PatRegion(s) => {\n+        PatBox(s) | PatRegion(s) => {\n             walk_pat(s, it)\n         }\n         PatVec(ref before, ref slice, ref after) => {"}, {"sha": "8903eb80829b4d7efd61bf0b48401d8a797470bb", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=729ee203387cc3a3f7387cffd018aba93b0110e6", "patch": "@@ -760,7 +760,7 @@ pub fn noop_fold_pat<T: Folder>(p: @Pat, folder: &mut T) -> @Pat {\n             PatStruct(pth_, fs, etc)\n         }\n         PatTup(ref elts) => PatTup(elts.iter().map(|x| folder.fold_pat(*x)).collect()),\n-        PatUniq(inner) => PatUniq(folder.fold_pat(inner)),\n+        PatBox(inner) => PatBox(folder.fold_pat(inner)),\n         PatRegion(inner) => PatRegion(folder.fold_pat(inner)),\n         PatRange(e1, e2) => {\n             PatRange(folder.fold_expr(e1), folder.fold_expr(e2))"}, {"sha": "1902df30b99667f0208e744a8830074d0f0cc708", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=729ee203387cc3a3f7387cffd018aba93b0110e6", "patch": "@@ -39,7 +39,7 @@ use ast::{MutImmutable, MutMutable, Mac_, MacInvocTT, Matcher, MatchNonterminal}\n use ast::{MatchSeq, MatchTok, Method, MutTy, BiMul, Mutability};\n use ast::{NamedField, UnNeg, NoReturn, UnNot, P, Pat, PatEnum};\n use ast::{PatIdent, PatLit, PatRange, PatRegion, PatStruct};\n-use ast::{PatTup, PatUniq, PatWild, PatWildMulti};\n+use ast::{PatTup, PatBox, PatWild, PatWildMulti};\n use ast::{BiRem, Required};\n use ast::{RetStyle, Return, BiShl, BiShr, Stmt, StmtDecl};\n use ast::{Sized, DynSize, StaticSize};\n@@ -2784,7 +2784,7 @@ impl<'a> Parser<'a> {\n             // parse ~pat\n             self.bump();\n             let sub = self.parse_pat();\n-            pat = PatUniq(sub);\n+            pat = PatBox(sub);\n             hi = self.last_span.hi;\n             self.obsolete(self.last_span, ObsoleteOwnedPattern);\n             return @ast::Pat {\n@@ -2888,7 +2888,7 @@ impl<'a> Parser<'a> {\n             // FIXME(#13910): Rename to `PatBox` and extend to full DST\n             // support.\n             let sub = self.parse_pat();\n-            pat = PatUniq(sub);\n+            pat = PatBox(sub);\n             hi = self.last_span.hi;\n             return @ast::Pat {\n                 id: ast::DUMMY_NODE_ID,"}, {"sha": "90436faca23c19405b2a5e5492a4dee186690cb1", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=729ee203387cc3a3f7387cffd018aba93b0110e6", "patch": "@@ -1721,7 +1721,7 @@ impl<'a> State<'a> {\n                 }\n                 try!(self.pclose());\n             }\n-            ast::PatUniq(inner) => {\n+            ast::PatBox(inner) => {\n                 try!(word(&mut self.s, \"box \"));\n                 try!(self.print_pat(inner));\n             }"}, {"sha": "efa8c8e66640fe92d377c431d3dd459b24cbdafd", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729ee203387cc3a3f7387cffd018aba93b0110e6/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=729ee203387cc3a3f7387cffd018aba93b0110e6", "patch": "@@ -429,7 +429,7 @@ pub fn walk_pat<E: Clone, V: Visitor<E>>(visitor: &mut V, pattern: &Pat, env: E)\n                 visitor.visit_pat(*tuple_element, env.clone())\n             }\n         }\n-        PatUniq(subpattern) |\n+        PatBox(subpattern) |\n         PatRegion(subpattern) => {\n             visitor.visit_pat(subpattern, env)\n         }"}]}