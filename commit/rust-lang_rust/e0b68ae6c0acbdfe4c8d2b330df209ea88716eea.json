{"sha": "e0b68ae6c0acbdfe4c8d2b330df209ea88716eea", "node_id": "C_kwDOAAsO6NoAKGUwYjY4YWU2YzBhY2JkZmU0YzhkMmIzMzBkZjIwOWVhODg3MTZlZWE", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-09-24T18:40:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-24T18:40:11Z"}, "message": "Rollup merge of #89001 - jackh726:binder-cleanup, r=nikomatsakis\n\nBe explicit about using Binder::dummy\n\nThis is somewhat of a late followup to the binder refactor PR. It removes `ToPredicate` and `ToPolyTraitImpls` that hide the use of `Binder::dummy`. While this does make code a bit more verbose, it allows us be more careful about where we create binders.\n\nAnother alternative here might be to add a new trait `ToBinder` or something with a `dummy()` fn. Which could still allow grepping but allows doing something like `trait_ref.dummy()` (but I also wonder if longer-term, it would be better to be even more explicit with a `bind_with_vars(ty::List::empty())` *but* that's not clear yet.\n\nr? ``@nikomatsakis``", "tree": {"sha": "d984b1fd593bd386f5d0c57ec1e95ceadd2a5069", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d984b1fd593bd386f5d0c57ec1e95ceadd2a5069"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0b68ae6c0acbdfe4c8d2b330df209ea88716eea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0b68ae6c0acbdfe4c8d2b330df209ea88716eea", "html_url": "https://github.com/rust-lang/rust/commit/e0b68ae6c0acbdfe4c8d2b330df209ea88716eea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0b68ae6c0acbdfe4c8d2b330df209ea88716eea/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edaeacfbbbdf39735ee2d14a6f3ebe5fc5137124", "url": "https://api.github.com/repos/rust-lang/rust/commits/edaeacfbbbdf39735ee2d14a6f3ebe5fc5137124", "html_url": "https://github.com/rust-lang/rust/commit/edaeacfbbbdf39735ee2d14a6f3ebe5fc5137124"}, {"sha": "2a9a9ca829d87e90a980bc6238c14efd2c4b22af", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a9a9ca829d87e90a980bc6238c14efd2c4b22af", "html_url": "https://github.com/rust-lang/rust/commit/2a9a9ca829d87e90a980bc6238c14efd2c4b22af"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "6bbac6d9a24688598775794ba0f94a991eb1c27c", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0b68ae6c0acbdfe4c8d2b330df209ea88716eea/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b68ae6c0acbdfe4c8d2b330df209ea88716eea/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=e0b68ae6c0acbdfe4c8d2b330df209ea88716eea", "patch": "@@ -92,7 +92,7 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n                         // be sure we have `self` parameter in this function\n                         if let AssocItemKind::Fn { has_self: true } = trait_item.kind {\n                             trait_self_ty =\n-                                Some(TraitRef::identity(cx.tcx, trait_item.id.def_id.to_def_id()).self_ty());\n+                                Some(TraitRef::identity(cx.tcx, trait_item.id.def_id.to_def_id()).self_ty().skip_binder());\n                         }\n                     }\n                 }"}, {"sha": "a04b325b56e3a42ffe4c461a21aa26dd22a5c210", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0b68ae6c0acbdfe4c8d2b330df209ea88716eea/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b68ae6c0acbdfe4c8d2b330df209ea88716eea/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=e0b68ae6c0acbdfe4c8d2b330df209ea88716eea", "patch": "@@ -2061,7 +2061,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             then {\n                 let first_arg_span = first_arg_ty.span;\n                 let first_arg_ty = hir_ty_to_ty(cx.tcx, first_arg_ty);\n-                let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty();\n+                let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty().skip_binder();\n                 wrong_self_convention::check(\n                     cx,\n                     &item.ident.name.as_str(),\n@@ -2078,7 +2078,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if item.ident.name == sym::new;\n             if let TraitItemKind::Fn(_, _) = item.kind;\n             let ret_ty = return_ty(cx, item.hir_id());\n-            let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty();\n+            let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty().skip_binder();\n             if !contains_ty(cx.tcx, ret_ty, self_ty);\n \n             then {"}]}