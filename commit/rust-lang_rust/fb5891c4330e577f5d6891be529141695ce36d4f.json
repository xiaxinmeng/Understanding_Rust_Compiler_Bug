{"sha": "fb5891c4330e577f5d6891be529141695ce36d4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNTg5MWM0MzMwZTU3N2Y1ZDY4OTFiZTUyOTE0MTY5NWNlMzZkNGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-06T13:44:44Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-06T13:44:44Z"}, "message": "Source map returns a result\n\ncc #2236", "tree": {"sha": "6c7f1384e77c29b9bdc3080acfbaadb1bcb01f0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c7f1384e77c29b9bdc3080acfbaadb1bcb01f0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb5891c4330e577f5d6891be529141695ce36d4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb5891c4330e577f5d6891be529141695ce36d4f", "html_url": "https://github.com/rust-lang/rust/commit/fb5891c4330e577f5d6891be529141695ce36d4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb5891c4330e577f5d6891be529141695ce36d4f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea0c124219da33462b9d0be93f7abe0478cc7af2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea0c124219da33462b9d0be93f7abe0478cc7af2", "html_url": "https://github.com/rust-lang/rust/commit/ea0c124219da33462b9d0be93f7abe0478cc7af2"}], "stats": {"total": 44, "additions": 26, "deletions": 18}, "files": [{"sha": "da7af110c946aedf9030f20f67c98e6694a33d8c", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb5891c4330e577f5d6891be529141695ce36d4f/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb5891c4330e577f5d6891be529141695ce36d4f/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=fb5891c4330e577f5d6891be529141695ce36d4f", "patch": "@@ -21,9 +21,9 @@ pub trait WithFixture: Default + SourceDatabaseExt + 'static {\n         (db, file_id)\n     }\n \n-    fn with_files(fixture: &str) -> Self {\n+    fn with_files(ra_fixture: &str) -> Self {\n         let mut db = Self::default();\n-        let pos = with_files(&mut db, fixture);\n+        let pos = with_files(&mut db, ra_fixture);\n         assert!(pos.is_none());\n         db\n     }"}, {"sha": "331ecdd9cc3bc4348bd06b434fee4da41378d7a1", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb5891c4330e577f5d6891be529141695ce36d4f/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb5891c4330e577f5d6891be529141695ce36d4f/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=fb5891c4330e577f5d6891be529141695ce36d4f", "patch": "@@ -261,7 +261,7 @@ fn scope_for_offset(\n         .scope_by_expr()\n         .iter()\n         .filter_map(|(id, scope)| {\n-            let source = source_map.expr_syntax(*id)?;\n+            let source = source_map.expr_syntax(*id).ok()?;\n             // FIXME: correctly handle macro expansion\n             if source.file_id != offset.file_id {\n                 return None;\n@@ -337,7 +337,7 @@ fn adjust(\n         .scope_by_expr()\n         .iter()\n         .filter_map(|(id, scope)| {\n-            let source = source_map.expr_syntax(*id)?;\n+            let source = source_map.expr_syntax(*id).ok()?;\n             // FIXME: correctly handle macro expansion\n             if source.file_id != file_id {\n                 return None;"}, {"sha": "cd9e22c42171b08f7c8653678df3050129cb7cca", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fb5891c4330e577f5d6891be529141695ce36d4f/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb5891c4330e577f5d6891be529141695ce36d4f/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=fb5891c4330e577f5d6891be529141695ce36d4f", "patch": "@@ -156,6 +156,9 @@ pub struct BodySourceMap {\n     expansions: FxHashMap<InFile<AstPtr<ast::MacroCall>>, HirFileId>,\n }\n \n+#[derive(Debug)]\n+pub struct SyntheticSyntax;\n+\n impl Body {\n     pub(crate) fn body_with_source_map_query(\n         db: &impl DefDatabase,\n@@ -219,8 +222,8 @@ impl Index<PatId> for Body {\n }\n \n impl BodySourceMap {\n-    pub fn expr_syntax(&self, expr: ExprId) -> Option<ExprSource> {\n-        self.expr_map_back.get(expr).copied()\n+    pub fn expr_syntax(&self, expr: ExprId) -> Result<ExprSource, SyntheticSyntax> {\n+        self.expr_map_back.get(expr).copied().ok_or(SyntheticSyntax)\n     }\n \n     pub fn node_expr(&self, node: InFile<&ast::Expr>) -> Option<ExprId> {\n@@ -238,8 +241,8 @@ impl BodySourceMap {\n         self.expr_map.get(&src).cloned()\n     }\n \n-    pub fn pat_syntax(&self, pat: PatId) -> Option<PatSource> {\n-        self.pat_map_back.get(pat).copied()\n+    pub fn pat_syntax(&self, pat: PatId) -> Result<PatSource, SyntheticSyntax> {\n+        self.pat_map_back.get(pat).copied().ok_or(SyntheticSyntax)\n     }\n \n     pub fn node_pat(&self, node: InFile<&ast::Pat>) -> Option<PatId> {"}, {"sha": "d8cdf5266e1a385c4d79e25975d7538bcbdb8187", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb5891c4330e577f5d6891be529141695ce36d4f/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb5891c4330e577f5d6891be529141695ce36d4f/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=fb5891c4330e577f5d6891be529141695ce36d4f", "patch": "@@ -100,7 +100,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         }\n         let (_, source_map) = db.body_with_source_map(self.func.into());\n \n-        if let Some(source_ptr) = source_map.expr_syntax(id) {\n+        if let Ok(source_ptr) = source_map.expr_syntax(id) {\n             if let Some(expr) = source_ptr.value.left() {\n                 let root = source_ptr.file_syntax(db);\n                 if let ast::Expr::RecordLit(record_lit) = expr.to_node(&root) {\n@@ -145,7 +145,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         if params.len() == 2 && params[0] == mismatch.actual {\n             let (_, source_map) = db.body_with_source_map(self.func.into());\n \n-            if let Some(source_ptr) = source_map.expr_syntax(id) {\n+            if let Ok(source_ptr) = source_map.expr_syntax(id) {\n                 if let Some(expr) = source_ptr.value.left() {\n                     self.sink.push(MissingOkInTailExpr { file: source_ptr.file_id, expr });\n                 }"}, {"sha": "7e95473408af4cb40077c94ee19a7e2bf720e79e", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fb5891c4330e577f5d6891be529141695ce36d4f/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb5891c4330e577f5d6891be529141695ce36d4f/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=fb5891c4330e577f5d6891be529141695ce36d4f", "patch": "@@ -11,8 +11,13 @@ use std::fmt::Write;\n use std::sync::Arc;\n \n use hir_def::{\n-    body::BodySourceMap, child_by_source::ChildBySource, db::DefDatabase, item_scope::ItemScope,\n-    keys, nameres::CrateDefMap, AssocItemId, DefWithBodyId, LocalModuleId, Lookup, ModuleDefId,\n+    body::{BodySourceMap, SyntheticSyntax},\n+    child_by_source::ChildBySource,\n+    db::DefDatabase,\n+    item_scope::ItemScope,\n+    keys,\n+    nameres::CrateDefMap,\n+    AssocItemId, DefWithBodyId, LocalModuleId, Lookup, ModuleDefId,\n };\n use hir_expand::InFile;\n use insta::assert_snapshot;\n@@ -67,20 +72,20 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n \n         for (pat, ty) in inference_result.type_of_pat.iter() {\n             let syntax_ptr = match body_source_map.pat_syntax(pat) {\n-                Some(sp) => {\n+                Ok(sp) => {\n                     sp.map(|ast| ast.either(|it| it.syntax_node_ptr(), |it| it.syntax_node_ptr()))\n                 }\n-                None => continue,\n+                Err(SyntheticSyntax) => continue,\n             };\n             types.push((syntax_ptr, ty));\n         }\n \n         for (expr, ty) in inference_result.type_of_expr.iter() {\n             let syntax_ptr = match body_source_map.expr_syntax(expr) {\n-                Some(sp) => {\n+                Ok(sp) => {\n                     sp.map(|ast| ast.either(|it| it.syntax_node_ptr(), |it| it.syntax_node_ptr()))\n                 }\n-                None => continue,\n+                Err(SyntheticSyntax) => continue,\n             };\n             types.push((syntax_ptr, ty));\n             if let Some(mismatch) = inference_result.type_mismatch_for_expr(expr) {"}, {"sha": "643c54a9df09d33149d0562387d9aa7a9e6409d6", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb5891c4330e577f5d6891be529141695ce36d4f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb5891c4330e577f5d6891be529141695ce36d4f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=fb5891c4330e577f5d6891be529141695ce36d4f", "patch": "@@ -158,7 +158,7 @@ pub fn analysis_stats(\n                 // in super-verbose mode for just one function, we print every single expression\n                 let (_, sm) = db.body_with_source_map(f_id.into());\n                 let src = sm.expr_syntax(expr_id);\n-                if let Some(src) = src {\n+                if let Ok(src) = src {\n                     let original_file = src.file_id.original_file(db);\n                     let line_index = host.analysis().file_line_index(original_file).unwrap();\n                     let text_range = src.value.either(\n@@ -186,7 +186,7 @@ pub fn analysis_stats(\n                 if verbosity.is_verbose() {\n                     let (_, sm) = db.body_with_source_map(f_id.into());\n                     let src = sm.expr_syntax(expr_id);\n-                    if let Some(src) = src {\n+                    if let Ok(src) = src {\n                         // FIXME: it might be nice to have a function (on Analysis?) that goes from Source<T> -> (LineCol, LineCol) directly\n                         // But also, we should just turn the type mismatches into diagnostics and provide these\n                         let root = db.parse_or_expand(src.file_id).unwrap();"}]}