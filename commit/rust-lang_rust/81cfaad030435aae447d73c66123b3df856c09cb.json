{"sha": "81cfaad030435aae447d73c66123b3df856c09cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxY2ZhYWQwMzA0MzVhYWU0NDdkNzNjNjYxMjNiM2RmODU2YzA5Y2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-15T06:54:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-15T06:54:18Z"}, "message": "Auto merge of #53212 - sunjay:nll-raw-cast, r=nikomatsakis\n\nNLL - Prevent where clauses from extending the lifetime of bindings\n\nFixes https://github.com/rust-lang/rust/issues/53123\n\nr? @nikomatsakis", "tree": {"sha": "a1808fdca400c8292d201cc8c05c13d1149ced7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1808fdca400c8292d201cc8c05c13d1149ced7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81cfaad030435aae447d73c66123b3df856c09cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81cfaad030435aae447d73c66123b3df856c09cb", "html_url": "https://github.com/rust-lang/rust/commit/81cfaad030435aae447d73c66123b3df856c09cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81cfaad030435aae447d73c66123b3df856c09cb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afd0a2f2499ff66e74236c5b06d3ab9ab87dd3d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/afd0a2f2499ff66e74236c5b06d3ab9ab87dd3d3", "html_url": "https://github.com/rust-lang/rust/commit/afd0a2f2499ff66e74236c5b06d3ab9ab87dd3d3"}, {"sha": "644765197abd9a219d88b98323084b2ac29388b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/644765197abd9a219d88b98323084b2ac29388b7", "html_url": "https://github.com/rust-lang/rust/commit/644765197abd9a219d88b98323084b2ac29388b7"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "ea96c30502680362db489f3af847504fd2a8cede", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/81cfaad030435aae447d73c66123b3df856c09cb/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81cfaad030435aae447d73c66123b3df856c09cb/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=81cfaad030435aae447d73c66123b3df856c09cb", "patch": "@@ -226,6 +226,7 @@ pub struct SelectionCache<'tcx> {\n /// parameter environment.\n #[derive(PartialEq,Eq,Debug,Clone)]\n enum SelectionCandidate<'tcx> {\n+    /// If has_nested is false, there are no *further* obligations\n     BuiltinCandidate { has_nested: bool },\n     ParamCandidate(ty::PolyTraitRef<'tcx>),\n     ImplCandidate(DefId),\n@@ -2039,12 +2040,20 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         }\n \n         match other.candidate {\n+            // Prefer BuiltinCandidate { has_nested: false } to anything else.\n+            // This is a fix for #53123 and prevents winnowing from accidentally extending the\n+            // lifetime of a variable.\n+            BuiltinCandidate { has_nested: false } => true,\n             ParamCandidate(ref cand) => match victim.candidate {\n                 AutoImplCandidate(..) => {\n                     bug!(\n                         \"default implementations shouldn't be recorded \\\n                          when there are other valid candidates\");\n                 }\n+                // Prefer BuiltinCandidate { has_nested: false } to anything else.\n+                // This is a fix for #53123 and prevents winnowing from accidentally extending the\n+                // lifetime of a variable.\n+                BuiltinCandidate { has_nested: false } => false,\n                 ImplCandidate(..) |\n                 ClosureCandidate |\n                 GeneratorCandidate |\n@@ -2072,6 +2081,10 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                         \"default implementations shouldn't be recorded \\\n                          when there are other valid candidates\");\n                 }\n+                // Prefer BuiltinCandidate { has_nested: false } to anything else.\n+                // This is a fix for #53123 and prevents winnowing from accidentally extending the\n+                // lifetime of a variable.\n+                BuiltinCandidate { has_nested: false } => false,\n                 ImplCandidate(..) |\n                 ClosureCandidate |\n                 GeneratorCandidate |\n@@ -2115,7 +2128,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             FnPointerCandidate |\n             BuiltinObjectCandidate |\n             BuiltinUnsizeCandidate |\n-            BuiltinCandidate { .. } => {\n+            BuiltinCandidate { has_nested: true } => {\n                 match victim.candidate {\n                     ParamCandidate(ref cand) => {\n                         // Prefer these to a global where-clause bound"}, {"sha": "7959f1737b9f43a2a3e7048e4a47886466ace13c", "filename": "src/test/run-pass/nll/issue-53123-raw-pointer-cast.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/81cfaad030435aae447d73c66123b3df856c09cb/src%2Ftest%2Frun-pass%2Fnll%2Fissue-53123-raw-pointer-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81cfaad030435aae447d73c66123b3df856c09cb/src%2Ftest%2Frun-pass%2Fnll%2Fissue-53123-raw-pointer-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnll%2Fissue-53123-raw-pointer-cast.rs?ref=81cfaad030435aae447d73c66123b3df856c09cb", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+#![allow(unused_variables)]\n+\n+pub trait TryTransform {\n+    fn try_transform<F>(self, f: F)\n+    where\n+        Self: Sized,\n+        F: FnOnce(Self);\n+}\n+\n+impl<'a, T> TryTransform for &'a mut T {\n+    fn try_transform<F>(self, f: F)\n+    where\n+        // The bug was that `Self: Sized` caused the lifetime of `this` to \"extend\" for all\n+        // of 'a instead of only lasting as long as the binding is used (for just that line).\n+        Self: Sized,\n+        F: FnOnce(Self),\n+    {\n+        let this: *mut T = self as *mut T;\n+        f(self);\n+    }\n+}\n+\n+fn main() {\n+}"}]}