{"sha": "fc6fbc1ed0c27121464bfbdbff48e5db46d452ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNmZiYzFlZDBjMjcxMjE0NjRiZmJkYmZmNDhlNWRiNDZkNDUyZWU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-04-20T10:35:07Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-04-20T10:35:07Z"}, "message": "Integrate walk.rs", "tree": {"sha": "1eff7bc983c05bf60309b0dc67ba0078ea20e260", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eff7bc983c05bf60309b0dc67ba0078ea20e260"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc6fbc1ed0c27121464bfbdbff48e5db46d452ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc6fbc1ed0c27121464bfbdbff48e5db46d452ee", "html_url": "https://github.com/rust-lang/rust/commit/fc6fbc1ed0c27121464bfbdbff48e5db46d452ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc6fbc1ed0c27121464bfbdbff48e5db46d452ee/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9034a8fbd6d44761c182e760a4aedd3a16cea912", "url": "https://api.github.com/repos/rust-lang/rust/commits/9034a8fbd6d44761c182e760a4aedd3a16cea912", "html_url": "https://github.com/rust-lang/rust/commit/9034a8fbd6d44761c182e760a4aedd3a16cea912"}], "stats": {"total": 52, "additions": 29, "deletions": 23}, "files": [{"sha": "b6b605559d2af70707867e08f352c4362c92c3c3", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/fc6fbc1ed0c27121464bfbdbff48e5db46d452ee/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6fbc1ed0c27121464bfbdbff48e5db46d452ee/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=fc6fbc1ed0c27121464bfbdbff48e5db46d452ee", "patch": "@@ -3368,38 +3368,44 @@ fn collect_upvars(@block_ctxt cx, &ast.block bloc, &ast.def_id initial_decl)\n         hashmap[ast.def_id,()] decls\n     );\n \n-    fn fold_expr_path(&env e, &common.span sp, &ast.path p,\n-                      &option.t[ast.def] d, ast.ann a) -> @ast.expr {\n-        alt (option.get[ast.def](d)) {\n-            case (ast.def_arg(?did))    { e.refs += vec(did);   }\n-            case (ast.def_local(?did))  { e.refs += vec(did);   }\n-            case (ast.def_upvar(?did))  { e.refs += vec(did);   }\n-            case (_)                    { /* ignore */          }\n+    fn walk_expr(env e, @ast.expr expr) {\n+        alt (expr.node) {\n+            case (ast.expr_path(?path, ?d, _)) {\n+                alt (option.get[ast.def](d)) {\n+                    case (ast.def_arg(?did)) {\n+                        _vec.push[ast.def_id](e.refs, did);\n+                    }\n+                    case (ast.def_local(?did)) {\n+                        _vec.push[ast.def_id](e.refs, did);\n+                    }\n+                    case (ast.def_upvar(?did)) {\n+                        _vec.push[ast.def_id](e.refs, did);\n+                    }\n+                    case (_) {}\n+                }\n+            }\n+            case (_) {}\n         }\n-\n-        ret @fold.respan[ast.expr_](sp, ast.expr_path(p, d, a));\n     }\n \n-    fn fold_decl_local(&env e, &common.span sp, @ast.local local)\n-            -> @ast.decl {\n-        e.decls.insert(local.id, ());\n-        ret @fold.respan[ast.decl_](sp, ast.decl_local(local));\n+    fn walk_decl(env e, @ast.decl decl) {\n+        alt (decl.node) {\n+            case (ast.decl_local(?local)) {\n+                e.decls.insert(local.id, ());\n+            }\n+            case (_) {}\n+        }\n     }\n \n-    auto fep = fold_expr_path;\n-    auto fdl = fold_decl_local;\n-    auto fld = @rec(\n-        fold_expr_path=fep,\n-        fold_decl_local=fdl\n-        with *fold.new_identity_fold[env]()\n-    );\n-\n     let vec[ast.def_id] refs = vec();\n     let hashmap[ast.def_id,()] decls = new_def_hash[()]();\n     decls.insert(initial_decl, ());\n     let env e = @rec(mutable refs=refs, decls=decls);\n \n-    fold.fold_block[env](e, fld, bloc);\n+    auto visitor = @rec(visit_decl_pre = bind walk_decl(e, _),\n+                        visit_expr_pre = bind walk_expr(e, _)\n+                        with walk.default_visitor());\n+    walk.walk_block(*visitor, bloc);\n \n     // Calculate (refs - decls). This is the set of captured upvars.\n     let vec[ast.def_id] result = vec();"}, {"sha": "d9454b45e31febea2e9d700d4ca5508fac2a1b8d", "filename": "src/comp/middle/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc6fbc1ed0c27121464bfbdbff48e5db46d452ee/src%2Fcomp%2Fmiddle%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6fbc1ed0c27121464bfbdbff48e5db46d452ee/src%2Fcomp%2Fmiddle%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fwalk.rs?ref=fc6fbc1ed0c27121464bfbdbff48e5db46d452ee", "patch": "@@ -150,7 +150,7 @@ fn walk_ty(&ast_visitor v, @ast.ty t) {\n                 walk_ty(v, f.mt.ty);\n             }\n         }\n-        case (ast.ty_fn(_, _, ?args, ?out)) {\n+        case (ast.ty_fn(_, ?args, ?out)) {\n             for (ast.ty_arg a in args) {\n                 walk_ty(v, a.ty);\n             }"}]}