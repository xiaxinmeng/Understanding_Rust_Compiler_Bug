{"sha": "6670868d0976e1bf9dc320d4ab31b0d8297e505d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NzA4NjhkMDk3NmUxYmY5ZGMzMjBkNGFiMzFiMGQ4Mjk3ZTUwNWQ=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-22T22:09:48Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-22T22:44:15Z"}, "message": "Show more parameter name hints", "tree": {"sha": "8f7841abd11ebbe94ef4782c6ebe9d0a130e0b13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f7841abd11ebbe94ef4782c6ebe9d0a130e0b13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6670868d0976e1bf9dc320d4ab31b0d8297e505d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6670868d0976e1bf9dc320d4ab31b0d8297e505d", "html_url": "https://github.com/rust-lang/rust/commit/6670868d0976e1bf9dc320d4ab31b0d8297e505d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6670868d0976e1bf9dc320d4ab31b0d8297e505d/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ca22f3a88d9097e78d297eeabab1ee2a0505b83", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ca22f3a88d9097e78d297eeabab1ee2a0505b83", "html_url": "https://github.com/rust-lang/rust/commit/4ca22f3a88d9097e78d297eeabab1ee2a0505b83"}], "stats": {"total": 61, "additions": 34, "deletions": 27}, "files": [{"sha": "09a463a4b669c0575935d4fab66a00b57a0a44f3", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 34, "deletions": 27, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6670868d0976e1bf9dc320d4ab31b0d8297e505d/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6670868d0976e1bf9dc320d4ab31b0d8297e505d/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=6670868d0976e1bf9dc320d4ab31b0d8297e505d", "patch": "@@ -1,12 +1,12 @@\n //! FIXME: write short doc here\n \n-use hir::{HirDisplay, SourceAnalyzer, SourceBinder};\n+use hir::{Function, HirDisplay, SourceAnalyzer, SourceBinder};\n use once_cell::unsync::Lazy;\n use ra_ide_db::RootDatabase;\n use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, ArgListOwner, AstNode, TypeAscriptionOwner},\n-    match_ast, SmolStr, SourceFile, SyntaxKind, SyntaxNode, TextRange,\n+    match_ast, SmolStr, SourceFile, SyntaxNode, TextRange,\n };\n \n use crate::{FileId, FunctionSignature};\n@@ -107,28 +107,33 @@ fn get_param_name_hints(\n         ast::Expr::CallExpr(expr) => expr.arg_list()?.args(),\n         ast::Expr::MethodCallExpr(expr) => expr.arg_list()?.args(),\n         _ => return None,\n+    }\n+    .into_iter()\n+    // we need args len to determine whether to skip or not the &self parameter\n+    .collect::<Vec<_>>();\n+\n+    let (has_self_param, fn_signature) = get_fn_signature(db, analyzer, &expr)?;\n+    let parameters = if has_self_param && fn_signature.parameter_names.len() > args.len() {\n+        fn_signature.parameter_names.into_iter().skip(1)\n+    } else {\n+        fn_signature.parameter_names.into_iter().skip(0)\n     };\n \n-    let mut parameters = get_fn_signature(db, analyzer, &expr)?.parameter_names.into_iter();\n-\n-    if let ast::Expr::MethodCallExpr(_) = &expr {\n-        parameters.next();\n-    };\n-\n-    let hints = parameters\n-        .zip(args)\n-        .filter_map(|(param, arg)| {\n-            if arg.syntax().kind() == SyntaxKind::LITERAL && !param.is_empty() {\n-                Some((arg.syntax().text_range(), param))\n-            } else {\n-                None\n-            }\n-        })\n-        .map(|(range, param_name)| InlayHint {\n-            range,\n-            kind: InlayKind::ParameterHint,\n-            label: param_name.into(),\n-        });\n+    let hints =\n+        parameters\n+            .zip(args)\n+            .filter_map(|(param, arg)| {\n+                if !param.is_empty() {\n+                    Some((arg.syntax().text_range(), param))\n+                } else {\n+                    None\n+                }\n+            })\n+            .map(|(range, param_name)| InlayHint {\n+                range,\n+                kind: InlayKind::ParameterHint,\n+                label: param_name.into(),\n+            });\n \n     acc.extend(hints);\n     Some(())\n@@ -138,25 +143,27 @@ fn get_fn_signature(\n     db: &RootDatabase,\n     analyzer: &SourceAnalyzer,\n     expr: &ast::Expr,\n-) -> Option<FunctionSignature> {\n+) -> Option<(bool, FunctionSignature)> {\n     match expr {\n         ast::Expr::CallExpr(expr) => {\n             // FIXME: Type::as_callable is broken for closures\n             let callable_def = analyzer.type_of(db, &expr.expr()?)?.as_callable()?;\n             match callable_def {\n                 hir::CallableDef::FunctionId(it) => {\n-                    let fn_def = it.into();\n-                    Some(FunctionSignature::from_hir(db, fn_def))\n+                    let fn_def: Function = it.into();\n+                    Some((fn_def.has_self_param(db), FunctionSignature::from_hir(db, fn_def)))\n                 }\n-                hir::CallableDef::StructId(it) => FunctionSignature::from_struct(db, it.into()),\n+                hir::CallableDef::StructId(it) => FunctionSignature::from_struct(db, it.into())\n+                    .map(|signature| (false, signature)),\n                 hir::CallableDef::EnumVariantId(it) => {\n                     FunctionSignature::from_enum_variant(db, it.into())\n+                        .map(|signature| (false, signature))\n                 }\n             }\n         }\n         ast::Expr::MethodCallExpr(expr) => {\n             let fn_def = analyzer.resolve_method_call(&expr)?;\n-            Some(FunctionSignature::from_hir(db, fn_def))\n+            Some((fn_def.has_self_param(db), FunctionSignature::from_hir(db, fn_def)))\n         }\n         _ => None,\n     }"}]}