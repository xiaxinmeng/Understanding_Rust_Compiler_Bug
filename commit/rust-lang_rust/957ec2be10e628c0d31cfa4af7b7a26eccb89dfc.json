{"sha": "957ec2be10e628c0d31cfa4af7b7a26eccb89dfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1N2VjMmJlMTBlNjI4YzBkMzFjZmE0YWY3YjdhMjZlY2NiODlkZmM=", "commit": {"author": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-04-02T00:35:56Z"}, "committer": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-04-02T00:35:56Z"}, "message": "Add support for 'std::time::Instant' in Windows", "tree": {"sha": "d17b231fb3d4a3d29a55d341101436b2961ed834", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d17b231fb3d4a3d29a55d341101436b2961ed834"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/957ec2be10e628c0d31cfa4af7b7a26eccb89dfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/957ec2be10e628c0d31cfa4af7b7a26eccb89dfc", "html_url": "https://github.com/rust-lang/rust/commit/957ec2be10e628c0d31cfa4af7b7a26eccb89dfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/957ec2be10e628c0d31cfa4af7b7a26eccb89dfc/comments", "author": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77a307fe7dddb81f8857144a7dd7362751508090", "url": "https://api.github.com/repos/rust-lang/rust/commits/77a307fe7dddb81f8857144a7dd7362751508090", "html_url": "https://github.com/rust-lang/rust/commit/77a307fe7dddb81f8857144a7dd7362751508090"}], "stats": {"total": 74, "additions": 53, "deletions": 21}, "files": [{"sha": "5e1bffef8a4b9a7b6c0d5d545476e383268c1575", "filename": "src/shims/foreign_items/windows.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/957ec2be10e628c0d31cfa4af7b7a26eccb89dfc/src%2Fshims%2Fforeign_items%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957ec2be10e628c0d31cfa4af7b7a26eccb89dfc/src%2Fshims%2Fforeign_items%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fwindows.rs?ref=957ec2be10e628c0d31cfa4af7b7a26eccb89dfc", "patch": "@@ -24,27 +24,22 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let result = this.GetEnvironmentVariableW(args[0], args[1], args[2])?;\n                 this.write_scalar(Scalar::from_u32(result), dest)?;\n             }\n-\n             \"SetEnvironmentVariableW\" => {\n                 let result = this.SetEnvironmentVariableW(args[0], args[1])?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n-\n             \"GetEnvironmentStringsW\" => {\n                 let result = this.GetEnvironmentStringsW()?;\n                 this.write_scalar(result, dest)?;\n             }\n-\n             \"FreeEnvironmentStringsW\" => {\n                 let result = this.FreeEnvironmentStringsW(args[0])?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n-\n             \"GetCurrentDirectoryW\" => {\n                 let result = this.GetCurrentDirectoryW(args[0], args[1])?;\n                 this.write_scalar(Scalar::from_u32(result), dest)?;\n             }\n-\n             \"SetCurrentDirectoryW\" => {\n                 let result = this.SetCurrentDirectoryW(args[0])?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n@@ -171,6 +166,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"GetSystemTimeAsFileTime\" => {\n                 this.GetSystemTimeAsFileTime(args[0])?;\n             }\n+            \"QueryPerformanceCounter\" => {\n+                let result = this.QueryPerformanceCounter(args[0])?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n+            }\n+            \"QueryPerformanceFrequency\" => {\n+                let result = this.QueryPerformanceFrequency(args[0])?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n+            }\n \n             // Miscellaneous\n             \"SystemFunction036\" => {"}, {"sha": "65e83ab0af7885784677d0b71cbd2e384a2995ad", "filename": "src/shims/time.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/957ec2be10e628c0d31cfa4af7b7a26eccb89dfc/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957ec2be10e628c0d31cfa4af7b7a26eccb89dfc/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=957ec2be10e628c0d31cfa4af7b7a26eccb89dfc", "patch": "@@ -117,6 +117,38 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(())\n     }\n \n+    #[allow(non_snake_case)]\n+    fn QueryPerformanceCounter(&mut self, lpPerformanceCount_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        this.assert_target_os(\"windows\", \"QueryPerformanceCounter\");\n+        this.check_no_isolation(\"QueryPerformanceCounter\")?;\n+\n+        // QPC uses a hardware counter as its basis.\n+        // Miri will assume that the machine's hardware counter has a resolution of 1 nanosecond.\n+        let duration = Instant::now().duration_since(this.machine.time_anchor);\n+        let qpc = i64::try_from(duration.as_nanos())\n+            .map_err(|_| err_unsup_format!(\"programs running longer than 2^64 nanoseconds are not supported\"))?;\n+        this.write_scalar(Scalar::from_i64(qpc), this.deref_operand(lpPerformanceCount_op)?.into())?;\n+        Ok(-1) // return non-zero on success\n+    }\n+\n+    #[allow(non_snake_case)]\n+    fn QueryPerformanceFrequency(&mut self, lpFrequency_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        this.assert_target_os(\"windows\", \"QueryPerformanceFrequency\");\n+        this.check_no_isolation(\"QueryPerformanceFrequency\")?;\n+\n+        // Retrieves the frequency of the hardware performance counter.\n+        // The frequency of the performance counter is fixed at system boot and\n+        // is consistent across all processors.\n+        // Miri will assume that the frequency of\n+        // the machine's hardware performance counter is 1 GHz ( = 1 x 10^9 Hz).\n+        this.write_scalar(Scalar::from_i64(1_000_000_000), this.deref_operand(lpFrequency_op)?.into())?;\n+        Ok(-1) // Return non-zero on success\n+    }\n+\n     fn mach_absolute_time(&self) -> InterpResult<'tcx, u64> {\n         let this = self.eval_context_ref();\n "}, {"sha": "264fa9de0352d7ed05c9fa47d0a770930ec46e5a", "filename": "tests/run-pass/time.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/957ec2be10e628c0d31cfa4af7b7a26eccb89dfc/tests%2Frun-pass%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957ec2be10e628c0d31cfa4af7b7a26eccb89dfc/tests%2Frun-pass%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftime.rs?ref=957ec2be10e628c0d31cfa4af7b7a26eccb89dfc", "patch": "@@ -19,22 +19,19 @@ fn main() {\n     assert!(2020 <= year && year < 2100);\n \n     // Check `Instant`.\n-    #[cfg(not(windows))] // `Instant` shims not yet implemented on Windows\n-    {\n-        let now1 = Instant::now();\n-        // Do some work to make time pass.\n-        for _ in 0..10 { drop(vec![42]); }\n-        let now2 = Instant::now();\n-        assert!(now2 > now1);\n+    let now1 = Instant::now();\n+    // Do some work to make time pass.\n+    for _ in 0..10 { drop(vec![42]); }\n+    let now2 = Instant::now();\n+    assert!(now2 > now1);\n \n-        #[cfg(target_os = \"linux\")] // TODO: macOS does not support Instant subtraction\n-        {\n-            let diff = now2.duration_since(now1);\n-            assert_eq!(now1 + diff, now2);\n-            assert_eq!(now2 - diff, now1);\n-            // Sanity-check the difference we got.\n-            assert!(diff.as_micros() > 1);\n-            assert!(diff.as_micros() < 1_000_000);\n-        }\n+    #[cfg(target_os = \"linux\")] // TODO: macOS does not support Instant subtraction\n+    {\n+        let diff = now2.duration_since(now1);\n+        assert_eq!(now1 + diff, now2);\n+        assert_eq!(now2 - diff, now1);\n+        // Sanity-check the difference we got.\n+        assert!(diff.as_micros() > 1);\n+        assert!(diff.as_micros() < 1_000_000);\n     }\n }"}]}