{"sha": "f4083a22451692b9ae360f3d12bfb8cb52b096e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MDgzYTIyNDUxNjkyYjlhZTM2MGYzZDEyYmZiOGNiNTJiMDk2ZTQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-22T05:15:42Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-23T17:03:43Z"}, "message": "std: Change RandomAccessIterator to use `&mut self`\n\nMany iterators go through a closure when dealing with the `idx` method, which\nare invalid after the previous change (closures cannot be invoked through a `&`\npointer). This commit alters the `fn idx` method on the RandomAccessIterator\nto take `&mut self` rather than `&self`.\n\n[breaking-change]", "tree": {"sha": "5def1ac72e0ed4208f3995fdf609e8ac8539c65f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5def1ac72e0ed4208f3995fdf609e8ac8539c65f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4083a22451692b9ae360f3d12bfb8cb52b096e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4083a22451692b9ae360f3d12bfb8cb52b096e4", "html_url": "https://github.com/rust-lang/rust/commit/f4083a22451692b9ae360f3d12bfb8cb52b096e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4083a22451692b9ae360f3d12bfb8cb52b096e4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "159a10da4c15e5d34e00d4018b352573cec7918f", "url": "https://api.github.com/repos/rust-lang/rust/commits/159a10da4c15e5d34e00d4018b352573cec7918f", "html_url": "https://github.com/rust-lang/rust/commit/159a10da4c15e5d34e00d4018b352573cec7918f"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "13180cdfa5b6c839e6cfdcd9ba8e5d98e5a0160d", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4083a22451692b9ae360f3d12bfb8cb52b096e4/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4083a22451692b9ae360f3d12bfb8cb52b096e4/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=f4083a22451692b9ae360f3d12bfb8cb52b096e4", "patch": "@@ -632,7 +632,7 @@ impl<'a> RandomAccessIterator<bool> for Bits<'a> {\n     }\n \n     #[inline]\n-    fn idx(&self, index: uint) -> Option<bool> {\n+    fn idx(&mut self, index: uint) -> Option<bool> {\n         if index >= self.indexable() {\n             None\n         } else {"}, {"sha": "9204a9ca4003dc461e0964b01e3cdff306d4f067", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4083a22451692b9ae360f3d12bfb8cb52b096e4/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4083a22451692b9ae360f3d12bfb8cb52b096e4/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=f4083a22451692b9ae360f3d12bfb8cb52b096e4", "patch": "@@ -272,7 +272,7 @@ impl<'a, T> RandomAccessIterator<&'a T> for Items<'a, T> {\n     fn indexable(&self) -> uint { self.rindex - self.index }\n \n     #[inline]\n-    fn idx(&self, j: uint) -> Option<&'a T> {\n+    fn idx(&mut self, j: uint) -> Option<&'a T> {\n         if j >= self.indexable() {\n             None\n         } else {"}, {"sha": "ec5d73901642c23bd03064dcf7906e95453faf17", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f4083a22451692b9ae360f3d12bfb8cb52b096e4/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4083a22451692b9ae360f3d12bfb8cb52b096e4/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=f4083a22451692b9ae360f3d12bfb8cb52b096e4", "patch": "@@ -703,7 +703,7 @@ pub trait RandomAccessIterator<A>: Iterator<A> {\n     fn indexable(&self) -> uint;\n \n     /// Return an element at an index\n-    fn idx(&self, index: uint) -> Option<A>;\n+    fn idx(&mut self, index: uint) -> Option<A>;\n }\n \n /// An iterator that knows its exact length\n@@ -771,8 +771,9 @@ impl<A, T: DoubleEndedIterator<A> + RandomAccessIterator<A>> RandomAccessIterato\n     #[inline]\n     fn indexable(&self) -> uint { self.iter.indexable() }\n     #[inline]\n-    fn idx(&self, index: uint) -> Option<A> {\n-        self.iter.idx(self.indexable() - index - 1)\n+    fn idx(&mut self, index: uint) -> Option<A> {\n+        let amt = self.indexable();\n+        self.iter.idx(amt - index - 1)\n     }\n }\n \n@@ -1071,7 +1072,7 @@ impl<A, T: Clone + RandomAccessIterator<A>> RandomAccessIterator<A> for Cycle<T>\n     }\n \n     #[inline]\n-    fn idx(&self, index: uint) -> Option<A> {\n+    fn idx(&mut self, index: uint) -> Option<A> {\n         let liter = self.iter.indexable();\n         let lorig = self.orig.indexable();\n         if lorig == 0 {\n@@ -1143,7 +1144,7 @@ for Chain<T, U> {\n     }\n \n     #[inline]\n-    fn idx(&self, index: uint) -> Option<A> {\n+    fn idx(&mut self, index: uint) -> Option<A> {\n         let len = self.a.indexable();\n         if index < len {\n             self.a.idx(index)\n@@ -1221,7 +1222,7 @@ RandomAccessIterator<(A, B)> for Zip<T, U> {\n     }\n \n     #[inline]\n-    fn idx(&self, index: uint) -> Option<(A, B)> {\n+    fn idx(&mut self, index: uint) -> Option<(A, B)> {\n         match self.a.idx(index) {\n             None => None,\n             Some(x) => match self.b.idx(index) {\n@@ -1276,8 +1277,9 @@ impl<'a, A, B, T: RandomAccessIterator<A>> RandomAccessIterator<B> for Map<'a, A\n     }\n \n     #[inline]\n-    fn idx(&self, index: uint) -> Option<B> {\n-        self.do_map(self.iter.idx(index))\n+    fn idx(&mut self, index: uint) -> Option<B> {\n+        let elt = self.iter.idx(index);\n+        self.do_map(elt)\n     }\n }\n \n@@ -1415,7 +1417,7 @@ impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<(uint, A)> for Enumerat\n     }\n \n     #[inline]\n-    fn idx(&self, index: uint) -> Option<(uint, A)> {\n+    fn idx(&mut self, index: uint) -> Option<(uint, A)> {\n         match self.iter.idx(index) {\n             Some(a) => Some((self.count + index, a)),\n             _ => None,\n@@ -1600,7 +1602,7 @@ impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<A> for Skip<T> {\n     }\n \n     #[inline]\n-    fn idx(&self, index: uint) -> Option<A> {\n+    fn idx(&mut self, index: uint) -> Option<A> {\n         if index >= self.indexable() {\n             None\n         } else {\n@@ -1649,7 +1651,7 @@ impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<A> for Take<T> {\n     }\n \n     #[inline]\n-    fn idx(&self, index: uint) -> Option<A> {\n+    fn idx(&mut self, index: uint) -> Option<A> {\n         if index >= self.n {\n             None\n         } else {\n@@ -1799,7 +1801,7 @@ impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<A> for Fuse<T> {\n     }\n \n     #[inline]\n-    fn idx(&self, index: uint) -> Option<A> {\n+    fn idx(&mut self, index: uint) -> Option<A> {\n         self.iter.idx(index)\n     }\n }\n@@ -1862,8 +1864,9 @@ for Inspect<'a, A, T> {\n     }\n \n     #[inline]\n-    fn idx(&self, index: uint) -> Option<A> {\n-        self.do_inspect(self.iter.idx(index))\n+    fn idx(&mut self, index: uint) -> Option<A> {\n+        let element = self.iter.idx(index);\n+        self.do_inspect(element)\n     }\n }\n \n@@ -2164,7 +2167,7 @@ impl<A: Clone> RandomAccessIterator<A> for Repeat<A> {\n     #[inline]\n     fn indexable(&self) -> uint { uint::MAX }\n     #[inline]\n-    fn idx(&self, _: uint) -> Option<A> { Some(self.element.clone()) }\n+    fn idx(&mut self, _: uint) -> Option<A> { Some(self.element.clone()) }\n }\n \n /// Functions for lexicographical ordering of sequences."}, {"sha": "309ea8623e5e736a032242a27b9a1f70f917d486", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4083a22451692b9ae360f3d12bfb8cb52b096e4/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4083a22451692b9ae360f3d12bfb8cb52b096e4/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=f4083a22451692b9ae360f3d12bfb8cb52b096e4", "patch": "@@ -489,7 +489,7 @@ impl<'a, T> RandomAccessIterator<&'a [T]> for Chunks<'a, T> {\n     }\n \n     #[inline]\n-    fn idx(&self, index: uint) -> Option<&'a [T]> {\n+    fn idx(&mut self, index: uint) -> Option<&'a [T]> {\n         if index < self.indexable() {\n             let lo = index * self.size;\n             let mut hi = lo + self.size;\n@@ -2095,7 +2095,7 @@ impl<'a, T> RandomAccessIterator<&'a T> for Items<'a, T> {\n     }\n \n     #[inline]\n-    fn idx(&self, index: uint) -> Option<&'a T> {\n+    fn idx(&mut self, index: uint) -> Option<&'a T> {\n         unsafe {\n             if index < self.indexable() {\n                 transmute(self.ptr.offset(index as int))"}]}