{"sha": "dd0ad7375e5c3eaa14c594af38e7e7821c8038cc", "node_id": "C_kwDOAAsO6NoAKGRkMGFkNzM3NWU1YzNlYWExNGM1OTRhZjM4ZTdlNzgyMWM4MDM4Y2M", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-09-05T20:07:57Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-04-15T00:18:46Z"}, "message": "Don't build the library and standard library before documenting them\n\nRustdoc doesn't require the build artifacts to generate the docs, and\nespecially in the case of rustc, it greatly increases the time needed to\nrun the build.\n\n- Statically ensure that only the top_stage of a tool is documented\n\nIf another part of rustbuild tried to document a different stage, it\nwould run into errors because `check::Rustc` unconditionally uses the\ntop stage.\n\n- Try building rustc instead of checking to avoid duplicate artifacts\n\nTries to workaround the following error:\n```\nerror[E0464]: multiple matching crates for `rustc_ast`\n  --> src/librustdoc/lib.rs:40:1\n   |\n40 | extern crate rustc_ast;\n   | ^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: candidates:\n           crate `rustc_ast`: /checkout/obj/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/lib/librustc_ast-6d7c193782263d89.rlib\n           crate `rustc_ast`: /checkout/obj/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/lib/librustc_ast-e5d09eda5beb759c.rmeta\n```", "tree": {"sha": "795ca78c55fc13ddd91ac80ca64b41860ef04c44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/795ca78c55fc13ddd91ac80ca64b41860ef04c44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd0ad7375e5c3eaa14c594af38e7e7821c8038cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd0ad7375e5c3eaa14c594af38e7e7821c8038cc", "html_url": "https://github.com/rust-lang/rust/commit/dd0ad7375e5c3eaa14c594af38e7e7821c8038cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd0ad7375e5c3eaa14c594af38e7e7821c8038cc/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "027a232755fa9728e9699337267f6675dfd0a8ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/027a232755fa9728e9699337267f6675dfd0a8ba", "html_url": "https://github.com/rust-lang/rust/commit/027a232755fa9728e9699337267f6675dfd0a8ba"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "a2802f76008a37f994d9a169e5fd6883864899b6", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/dd0ad7375e5c3eaa14c594af38e7e7821c8038cc/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd0ad7375e5c3eaa14c594af38e7e7821c8038cc/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=dd0ad7375e5c3eaa14c594af38e7e7821c8038cc", "patch": "@@ -441,7 +441,6 @@ impl Step for Std {\n         t!(fs::create_dir_all(&out));\n         let compiler = builder.compiler(stage, builder.config.build);\n \n-        builder.ensure(compile::Std { compiler, target });\n         let out_dir = builder.stage_out(compiler, Mode::Std).join(target.triple).join(\"doc\");\n \n         t!(fs::copy(builder.src.join(\"src/doc/rust.css\"), out.join(\"rust.css\")));\n@@ -548,7 +547,6 @@ impl Step for Rustc {\n     fn run(self, builder: &Builder<'_>) {\n         let stage = self.stage;\n         let target = self.target;\n-        builder.info(&format!(\"Documenting stage{} compiler ({})\", stage, target));\n \n         let paths = builder\n             .paths\n@@ -563,9 +561,12 @@ impl Step for Rustc {\n         let out = builder.compiler_doc_out(target);\n         t!(fs::create_dir_all(&out));\n \n-        // Build rustc.\n+        // Build the standard library, so that proc-macros can use it.\n+        // (Normally, only the metadata would be necessary, but proc-macros are special since they run at compile-time.)\n         let compiler = builder.compiler(stage, builder.config.build);\n-        builder.ensure(compile::Rustc { compiler, target });\n+        builder.ensure(compile::Std { compiler, target: builder.config.build });\n+\n+        builder.info(&format!(\"Documenting stage{} compiler ({})\", stage, target));\n \n         // This uses a shared directory so that librustdoc documentation gets\n         // correctly built and merged with the rustc documentation. This is\n@@ -642,7 +643,6 @@ macro_rules! tool_doc {\n     ($tool: ident, $should_run: literal, $path: literal, [$($krate: literal),+ $(,)?] $(,)?) => {\n         #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n         pub struct $tool {\n-            stage: u32,\n             target: TargetSelection,\n         }\n \n@@ -657,7 +657,7 @@ macro_rules! tool_doc {\n             }\n \n             fn make_run(run: RunConfig<'_>) {\n-                run.builder.ensure($tool { stage: run.builder.top_stage, target: run.target });\n+                run.builder.ensure($tool { target: run.target });\n             }\n \n             /// Generates compiler documentation.\n@@ -667,8 +667,21 @@ macro_rules! tool_doc {\n             /// we do not merge it with the other documentation from std, test and\n             /// proc_macros. This is largely just a wrapper around `cargo doc`.\n             fn run(self, builder: &Builder<'_>) {\n-                let stage = self.stage;\n+                let stage = builder.top_stage;\n                 let target = self.target;\n+\n+                // This is the intended out directory for compiler documentation.\n+                let out = builder.compiler_doc_out(target);\n+                t!(fs::create_dir_all(&out));\n+\n+                // Build rustc docs so that we generate relative links.\n+                builder.ensure(Rustc { stage, target });\n+                // Rustdoc needs the rustc sysroot available to build.\n+                // FIXME: is there a way to only ensure `check::Rustc` here? Last time I tried it failed\n+                // with strange errors, but only on a full bors test ...\n+                let compiler = builder.compiler(stage, builder.config.build);\n+                builder.ensure(compile::Rustc { compiler, target });\n+\n                 builder.info(\n                     &format!(\n                         \"Documenting stage{} {} ({})\",\n@@ -678,15 +691,6 @@ macro_rules! tool_doc {\n                     ),\n                 );\n \n-                // This is the intended out directory for compiler documentation.\n-                let out = builder.compiler_doc_out(target);\n-                t!(fs::create_dir_all(&out));\n-\n-                let compiler = builder.compiler(stage, builder.config.build);\n-\n-                // Build rustc docs so that we generate relative links.\n-                builder.ensure(Rustc { stage, target });\n-\n                 // Symlink compiler docs to the output directory of rustdoc documentation.\n                 let out_dir = builder.stage_out(compiler, Mode::ToolRustc).join(target.triple).join(\"doc\");\n                 t!(fs::create_dir_all(&out_dir));"}]}