{"sha": "43a6deb95f06709a1a1b333ff040373037f6c7e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYTZkZWI5NWYwNjcwOWExYTFiMzMzZmYwNDAzNzMwMzdmNmM3ZTU=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-11-26T17:19:54Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-11-26T17:19:54Z"}, "message": "fix rustc-test", "tree": {"sha": "3c25c1d24a0b0637f24b5ca8391c196821aa5c78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c25c1d24a0b0637f24b5ca8391c196821aa5c78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43a6deb95f06709a1a1b333ff040373037f6c7e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43a6deb95f06709a1a1b333ff040373037f6c7e5", "html_url": "https://github.com/rust-lang/rust/commit/43a6deb95f06709a1a1b333ff040373037f6c7e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43a6deb95f06709a1a1b333ff040373037f6c7e5/comments", "author": null, "committer": null, "parents": [{"sha": "4190dce3a76f299791c1c6c97e096b381719b2a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4190dce3a76f299791c1c6c97e096b381719b2a7", "html_url": "https://github.com/rust-lang/rust/commit/4190dce3a76f299791c1c6c97e096b381719b2a7"}], "stats": {"total": 157, "additions": 147, "deletions": 10}, "files": [{"sha": "f04830ee969bd9115e688c84ee5197dd26b43958", "filename": "src/grammar/verify.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/43a6deb95f06709a1a1b333ff040373037f6c7e5/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a6deb95f06709a1a1b333ff040373037f6c7e5/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=43a6deb95f06709a1a1b333ff040373037f6c7e5", "patch": "@@ -25,7 +25,9 @@ use std::path::Path;\n use syntax::parse;\n use syntax::parse::lexer;\n use rustc::session::{self, config};\n+use rustc::middle::cstore::DummyCrateStore;\n \n+use std::rc::Rc;\n use syntax::ast;\n use syntax::ast::Name;\n use syntax::codemap;\n@@ -286,7 +288,8 @@ fn main() {\n \n     let options = config::basic_options();\n     let session = session::build_session(options, None,\n-                                         syntax::diagnostics::registry::Registry::new(&[]));\n+                                         syntax::diagnostics::registry::Registry::new(&[]),\n+                                         Rc::new(DummyCrateStore));\n     let filemap = session.parse_sess.codemap().new_filemap(String::from(\"<n/a>\"), code);\n     let mut lexer = lexer::StringReader::new(session.diagnostic(), filemap);\n     let cm = session.codemap();"}, {"sha": "81375bd3a5a14bfed03c2bfccccc460224f1c966", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/43a6deb95f06709a1a1b333ff040373037f6c7e5/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a6deb95f06709a1a1b333ff040373037f6c7e5/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=43a6deb95f06709a1a1b333ff040373037f6c7e5", "patch": "@@ -278,3 +278,130 @@ pub fn validate_crate_name(sess: Option<&Session>, s: &str, sp: Option<Span>) {\n         None => {}\n     }\n }\n+\n+/// A dummy crate store that does not support any non-local crates,\n+/// for test purposes.\n+pub struct DummyCrateStore;\n+#[allow(unused_variables)]\n+impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n+    // item info\n+    fn stability(&self, def: DefId) -> Option<attr::Stability> { unimplemented!() }\n+    fn closure_kind(&self, tcx: &ty::ctxt<'tcx>, def_id: DefId)\n+                    -> ty::ClosureKind  { unimplemented!() }\n+    fn closure_ty(&self, tcx: &ty::ctxt<'tcx>, def_id: DefId)\n+                  -> ty::ClosureTy<'tcx>  { unimplemented!() }\n+    fn item_variances(&self, def: DefId) -> ty::ItemVariances { unimplemented!() }\n+    fn repr_attrs(&self, def: DefId) -> Vec<attr::ReprAttr> { unimplemented!() }\n+    fn item_type(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+                 -> ty::TypeScheme<'tcx> { unimplemented!() }\n+    fn item_path(&self, def: DefId) -> Vec<hir_map::PathElem> { unimplemented!() }\n+    fn item_name(&self, def: DefId) -> ast::Name { unimplemented!() }\n+    fn item_predicates(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+                       -> ty::GenericPredicates<'tcx> { unimplemented!() }\n+    fn item_super_predicates(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+                             -> ty::GenericPredicates<'tcx> { unimplemented!() }\n+    fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute> { unimplemented!() }\n+    fn item_symbol(&self, def: DefId) -> String { unimplemented!() }\n+    fn trait_def(&self, tcx: &ty::ctxt<'tcx>, def: DefId)-> ty::TraitDef<'tcx>\n+        { unimplemented!() }\n+    fn adt_def(&self, tcx: &ty::ctxt<'tcx>, def: DefId) -> ty::AdtDefMaster<'tcx>\n+        { unimplemented!() }\n+    fn method_arg_names(&self, did: DefId) -> Vec<String> { unimplemented!() }\n+    fn inherent_implementations_for_type(&self, def_id: DefId) -> Vec<DefId> { vec![] }\n+\n+    // trait info\n+    fn implementations_of_trait(&self, def_id: DefId) -> Vec<DefId> { vec![] }\n+    fn provided_trait_methods(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+                              -> Vec<Rc<ty::Method<'tcx>>> { unimplemented!() }\n+    fn trait_item_def_ids(&self, def: DefId)\n+                          -> Vec<ty::ImplOrTraitItemId> { unimplemented!() }\n+\n+    // impl info\n+    fn impl_items(&self, impl_def_id: DefId) -> Vec<ty::ImplOrTraitItemId>\n+        { unimplemented!() }\n+    fn impl_trait_ref(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+                      -> Option<ty::TraitRef<'tcx>> { unimplemented!() }\n+    fn impl_polarity(&self, def: DefId) -> Option<hir::ImplPolarity> { unimplemented!() }\n+    fn custom_coerce_unsized_kind(&self, def: DefId)\n+                                  -> Option<ty::adjustment::CustomCoerceUnsized>\n+        { unimplemented!() }\n+    fn associated_consts(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+                         -> Vec<Rc<ty::AssociatedConst<'tcx>>> { unimplemented!() }\n+\n+    // trait/impl-item info\n+    fn trait_of_item(&self, tcx: &ty::ctxt<'tcx>, def_id: DefId)\n+                     -> Option<DefId> { unimplemented!() }\n+    fn impl_or_trait_item(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+                          -> ty::ImplOrTraitItem<'tcx> { unimplemented!() }\n+\n+    // flags\n+    fn is_const_fn(&self, did: DefId) -> bool { unimplemented!() }\n+    fn is_defaulted_trait(&self, did: DefId) -> bool { unimplemented!() }\n+    fn is_impl(&self, did: DefId) -> bool { unimplemented!() }\n+    fn is_default_impl(&self, impl_did: DefId) -> bool { unimplemented!() }\n+    fn is_extern_fn(&self, tcx: &ty::ctxt<'tcx>, did: DefId) -> bool { unimplemented!() }\n+    fn is_static(&self, did: DefId) -> bool { unimplemented!() }\n+    fn is_static_method(&self, did: DefId) -> bool { unimplemented!() }\n+    fn is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool { false }\n+    fn is_typedef(&self, did: DefId) -> bool { unimplemented!() }\n+\n+    // crate metadata\n+    fn dylib_dependency_formats(&self, cnum: ast::CrateNum)\n+                                    -> Vec<(ast::CrateNum, LinkagePreference)>\n+        { unimplemented!() }\n+    fn lang_items(&self, cnum: ast::CrateNum) -> Vec<(DefIndex, usize)>\n+        { unimplemented!() }\n+    fn missing_lang_items(&self, cnum: ast::CrateNum) -> Vec<lang_items::LangItem>\n+        { unimplemented!() }\n+    fn is_staged_api(&self, cnum: ast::CrateNum) -> bool { unimplemented!() }\n+    fn is_explicitly_linked(&self, cnum: ast::CrateNum) -> bool { unimplemented!() }\n+    fn is_allocator(&self, cnum: ast::CrateNum) -> bool { unimplemented!() }\n+    fn crate_attrs(&self, cnum: ast::CrateNum) -> Vec<ast::Attribute>\n+        { unimplemented!() }\n+    fn crate_name(&self, cnum: ast::CrateNum) -> String { unimplemented!() }\n+    fn crate_hash(&self, cnum: ast::CrateNum) -> Svh { unimplemented!() }\n+    fn crate_struct_field_attrs(&self, cnum: ast::CrateNum)\n+                                -> FnvHashMap<DefId, Vec<ast::Attribute>>\n+        { unimplemented!() }\n+    fn plugin_registrar_fn(&self, cnum: ast::CrateNum) -> Option<DefId>\n+        { unimplemented!() }\n+    fn native_libraries(&self, cnum: ast::CrateNum) -> Vec<(NativeLibraryKind, String)>\n+        { unimplemented!() }\n+    fn reachable_ids(&self, cnum: ast::CrateNum) -> Vec<DefId> { unimplemented!() }\n+\n+    // resolve\n+    fn def_path(&self, def: DefId) -> hir_map::DefPath { unimplemented!() }\n+    fn tuple_struct_definition_if_ctor(&self, did: DefId) -> Option<DefId>\n+        { unimplemented!() }\n+    fn struct_field_names(&self, def: DefId) -> Vec<ast::Name> { unimplemented!() }\n+    fn item_children(&self, did: DefId) -> Vec<ChildItem> { unimplemented!() }\n+    fn crate_top_level_items(&self, cnum: ast::CrateNum) -> Vec<ChildItem>\n+        { unimplemented!() }\n+\n+    // misc. metadata\n+    fn maybe_get_item_ast(&'tcx self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+                          -> FoundAst<'tcx> { unimplemented!() }\n+    // This is basically a 1-based range of ints, which is a little\n+    // silly - I may fix that.\n+    fn crates(&self) -> Vec<ast::CrateNum> { vec![] }\n+    fn used_libraries(&self) -> Vec<(String, NativeLibraryKind)> { vec![] }\n+    fn used_link_args(&self) -> Vec<String> { vec![] }\n+\n+    // utility functions\n+    fn metadata_filename(&self) -> &str { unimplemented!() }\n+    fn metadata_section_name(&self, target: &Target) -> &str { unimplemented!() }\n+    fn encode_type(&self, tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> Vec<u8>\n+        { unimplemented!() }\n+    fn used_crates(&self, prefer: LinkagePreference) -> Vec<(ast::CrateNum, Option<PathBuf>)>\n+        { vec![] }\n+    fn used_crate_source(&self, cnum: ast::CrateNum) -> CrateSource { unimplemented!() }\n+    fn extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<ast::CrateNum> { None }\n+    fn encode_metadata(&self,\n+                       tcx: &ty::ctxt<'tcx>,\n+                       reexports: &def::ExportMap,\n+                       item_symbols: &RefCell<NodeMap<String>>,\n+                       link_meta: &LinkMeta,\n+                       reachable: &NodeSet,\n+                       krate: &hir::Crate) -> Vec<u8> { vec![] }\n+    fn metadata_encoding_version(&self) -> &[u8] { unimplemented!() }\n+}"}, {"sha": "dbeb4c3ed734cee8d28b408c3198992b2a7b0211", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/43a6deb95f06709a1a1b333ff040373037f6c7e5/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a6deb95f06709a1a1b333ff040373037f6c7e5/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=43a6deb95f06709a1a1b333ff040373037f6c7e5", "patch": "@@ -1122,10 +1122,11 @@ impl fmt::Display for CrateType {\n \n #[cfg(test)]\n mod tests {\n-\n+    use middle::cstore::DummyCrateStore;\n     use session::config::{build_configuration, optgroups, build_session_options};\n     use session::build_session;\n \n+    use std::rc::Rc;\n     use getopts::getopts;\n     use syntax::attr;\n     use syntax::attr::AttrMetaMethods;\n@@ -1141,7 +1142,7 @@ mod tests {\n             };\n         let registry = diagnostics::registry::Registry::new(&[]);\n         let sessopts = build_session_options(matches);\n-        let sess = build_session(sessopts, None, registry);\n+        let sess = build_session(sessopts, None, registry, Rc::new(DummyCrateStore));\n         let cfg = build_configuration(&sess);\n         assert!((attr::contains_name(&cfg[..], \"test\")));\n     }\n@@ -1160,7 +1161,8 @@ mod tests {\n             };\n         let registry = diagnostics::registry::Registry::new(&[]);\n         let sessopts = build_session_options(matches);\n-        let sess = build_session(sessopts, None, registry);\n+        let sess = build_session(sessopts, None, registry,\n+                                 Rc::new(DummyCrateStore));\n         let cfg = build_configuration(&sess);\n         let mut test_items = cfg.iter().filter(|m| m.name() == \"test\");\n         assert!(test_items.next().is_some());\n@@ -1175,7 +1177,8 @@ mod tests {\n             ], &optgroups()).unwrap();\n             let registry = diagnostics::registry::Registry::new(&[]);\n             let sessopts = build_session_options(&matches);\n-            let sess = build_session(sessopts, None, registry);\n+            let sess = build_session(sessopts, None, registry,\n+                                     Rc::new(DummyCrateStore));\n             assert!(!sess.can_print_warnings);\n         }\n \n@@ -1186,7 +1189,8 @@ mod tests {\n             ], &optgroups()).unwrap();\n             let registry = diagnostics::registry::Registry::new(&[]);\n             let sessopts = build_session_options(&matches);\n-            let sess = build_session(sessopts, None, registry);\n+            let sess = build_session(sessopts, None, registry,\n+                                     Rc::new(DummyCrateStore));\n             assert!(sess.can_print_warnings);\n         }\n \n@@ -1196,7 +1200,8 @@ mod tests {\n             ], &optgroups()).unwrap();\n             let registry = diagnostics::registry::Registry::new(&[]);\n             let sessopts = build_session_options(&matches);\n-            let sess = build_session(sessopts, None, registry);\n+            let sess = build_session(sessopts, None, registry,\n+                                     Rc::new(DummyCrateStore));\n             assert!(sess.can_print_warnings);\n         }\n     }"}, {"sha": "2fb23c943c76a3fe327376b2369d50efa3974424", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43a6deb95f06709a1a1b333ff040373037f6c7e5/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a6deb95f06709a1a1b333ff040373037f6c7e5/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=43a6deb95f06709a1a1b333ff040373037f6c7e5", "patch": "@@ -29,8 +29,10 @@ use rustc_typeck::middle::infer::{self, TypeOrigin};\n use rustc_typeck::middle::infer::lub::Lub;\n use rustc_typeck::middle::infer::glb::Glb;\n use rustc_typeck::middle::infer::sub::Sub;\n+use rustc_metadata::cstore::CStore;\n use rustc::front::map as hir_map;\n use rustc::session::{self, config};\n+use std::rc::Rc;\n use syntax::{abi, ast};\n use syntax::codemap;\n use syntax::codemap::{Span, CodeMap, DUMMY_SP};\n@@ -107,14 +109,14 @@ fn test_env<F>(source_string: &str,\n     let diagnostic_handler = diagnostic::Handler::with_emitter(true, emitter);\n     let span_diagnostic_handler = diagnostic::SpanHandler::new(diagnostic_handler, codemap);\n \n-    let cstore = ::rustc_metadata::cstore::CStore::new(token::get_ident_interner());\n+    let cstore = Rc::new(CStore::new(token::get_ident_interner()));\n     let sess = session::build_session_(options, None, span_diagnostic_handler,\n-                                       Box::new(cstore));\n+                                       cstore.clone());\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n     let krate_config = Vec::new();\n     let input = config::Input::Str(source_string.to_string());\n     let krate = driver::phase_1_parse_input(&sess, krate_config, &input);\n-    let krate = driver::phase_2_configure_and_expand(&sess, krate, \"test\", None)\n+    let krate = driver::phase_2_configure_and_expand(&sess, &cstore, krate, \"test\", None)\n                     .expect(\"phase 2 aborted\");\n \n     let krate = driver::assign_node_ids(&sess, krate);"}]}