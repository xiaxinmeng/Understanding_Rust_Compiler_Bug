{"sha": "c1ed7cc95f0aaa75e916fc044cce293f56ad04d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZWQ3Y2M5NWYwYWFhNzVlOTE2ZmMwNDRjY2UyOTNmNTZhZDA0ZDM=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-04-22T14:16:06Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-04-23T21:07:36Z"}, "message": "Rename uneval_consts to required_consts", "tree": {"sha": "b715c57c88eba23a509513e914736d49ea24d54b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b715c57c88eba23a509513e914736d49ea24d54b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1ed7cc95f0aaa75e916fc044cce293f56ad04d3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl6iA5gACgkQgTGiTgx5\n768oMRAAqK8VK99zkr4NBh6rHCis7EB3IZnuc7w3ljiNxN1nk5xj+JNIE11MwGmT\nqLzeNLiT1DH0aZpYP740zFnEP/LCxZO01sJZu8aKgiVXvTNv798puPhxN6GU9ook\nKrL99lw65qO4ApgEoafEx73hwCtp/NRx+JdxC9906/zzJqh/gH4X6WSmeHYwbn30\n6nsaDbf7UTAZPwD83pUP+TEQMrceXW3ONsbmcz9ARbMNNi6Cc0V3J++geluNoJHJ\nZertiFCrz0bguCG6t2V0t4Hnbm2aade8Mm75Qu57W7Hm3JTZ0SbEUUj8nfNhe1oF\nH5lG5oSsFYd1AMi3xfSdRzyKgoWu1mdIQynQK1OHdcQLVSAQ8qPxl6yN4R9Lx7E/\nAyH7DFpqlhtEFS4LfKx3eGSWvB47b1vmf9ThFcbsBsZqKdJ1JMiQ5PU1wJ2C3lao\n98dALQ5/zuG6WCu1TVvPB65U0+S2/syUJunao4Ng8LudtF5JInbTEJOoCoBSyQXX\nRLT2/Gg/rIrKzkrqncu9pOb+cZLreLo9YVBdRj9QNDTgEYD1t+rSgnrc48kMYT6I\nrDQkx29ePWtSCTfEde2ke1+W1N5reKmPYC2njbsIK6qRlivT/jrnCPUbZR7NKVoZ\nHMZ/BFqcvzRbQdAS72yR/ncUV4GJpqNWEjJHihe3xMu77fn6dGk=\n=H8aT\n-----END PGP SIGNATURE-----", "payload": "tree b715c57c88eba23a509513e914736d49ea24d54b\nparent da9aa2dd55b69a4c902af9b953904911e9cffb77\nauthor Santiago Pastorino <spastorino@gmail.com> 1587564966 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1587676056 -0300\n\nRename uneval_consts to required_consts\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1ed7cc95f0aaa75e916fc044cce293f56ad04d3", "html_url": "https://github.com/rust-lang/rust/commit/c1ed7cc95f0aaa75e916fc044cce293f56ad04d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1ed7cc95f0aaa75e916fc044cce293f56ad04d3/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da9aa2dd55b69a4c902af9b953904911e9cffb77", "url": "https://api.github.com/repos/rust-lang/rust/commits/da9aa2dd55b69a4c902af9b953904911e9cffb77", "html_url": "https://github.com/rust-lang/rust/commit/da9aa2dd55b69a4c902af9b953904911e9cffb77"}], "stats": {"total": 85, "additions": 44, "deletions": 41}, "files": [{"sha": "1cd01c8c5bcb0757ef9440a134fbdc78317d1ea9", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1ed7cc95f0aaa75e916fc044cce293f56ad04d3/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ed7cc95f0aaa75e916fc044cce293f56ad04d3/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=c1ed7cc95f0aaa75e916fc044cce293f56ad04d3", "patch": "@@ -191,7 +191,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n \n     fx.per_local_var_debug_info = fx.compute_per_local_var_debug_info();\n \n-    for const_ in &mir.uneval_consts {\n+    for const_ in &mir.required_consts {\n         if let Err(err) = fx.eval_mir_constant(const_) {\n             match err {\n                 // errored or at least linted"}, {"sha": "6d5daf940e1c19f1cd212856caf5775d47bacc8b", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c1ed7cc95f0aaa75e916fc044cce293f56ad04d3/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ed7cc95f0aaa75e916fc044cce293f56ad04d3/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=c1ed7cc95f0aaa75e916fc044cce293f56ad04d3", "patch": "@@ -156,8 +156,9 @@ pub struct Body<'tcx> {\n     /// A span representing this MIR, for error reporting.\n     pub span: Span,\n \n-    /// Unevaluated consts to evaluate them regardless of being optimized out\n-    pub uneval_consts: Vec<Constant<'tcx>>,\n+    /// Constants that are required to evaluate successfully for this MIR to be well-formed.\n+    /// We hold in this field all the constants we are not able to evaluate yet.\n+    pub required_consts: Vec<Constant<'tcx>>,\n \n     /// The user may be writing e.g. &[(SOME_CELL, 42)][i].1 and this would get promoted, because\n     /// we'd statically know that no thing with interior mutability will ever be available to the\n@@ -206,7 +207,7 @@ impl<'tcx> Body<'tcx> {\n             spread_arg: None,\n             var_debug_info,\n             span,\n-            uneval_consts: Vec::new(),\n+            required_consts: Vec::new(),\n             ignore_interior_mut_in_const_validation: false,\n             control_flow_destroyed,\n             predecessor_cache: PredecessorCache::new(),\n@@ -231,7 +232,7 @@ impl<'tcx> Body<'tcx> {\n             arg_count: 0,\n             spread_arg: None,\n             span: DUMMY_SP,\n-            uneval_consts: Vec::new(),\n+            required_consts: Vec::new(),\n             control_flow_destroyed: Vec::new(),\n             generator_kind: None,\n             var_debug_info: Vec::new(),"}, {"sha": "d32a8d4344573edc9913e056f21cac54f1ff82be", "filename": "src/librustc_middle/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1ed7cc95f0aaa75e916fc044cce293f56ad04d3/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ed7cc95f0aaa75e916fc044cce293f56ad04d3/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fvisit.rs?ref=c1ed7cc95f0aaa75e916fc044cce293f56ad04d3", "patch": "@@ -289,7 +289,7 @@ macro_rules! make_mir_visitor {\n \n                 self.visit_span(&$($mutability)? body.span);\n \n-                for const_ in &$($mutability)? body.uneval_consts {\n+                for const_ in &$($mutability)? body.required_consts {\n                     let location = START_BLOCK.start_location();\n                     self.visit_constant(const_, location);\n                 }"}, {"sha": "6c9eddc303f51a904d8b41901a022ec44831df5c", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c1ed7cc95f0aaa75e916fc044cce293f56ad04d3/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ed7cc95f0aaa75e916fc044cce293f56ad04d3/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=c1ed7cc95f0aaa75e916fc044cce293f56ad04d3", "patch": "@@ -124,12 +124,14 @@ impl Inliner<'tcx> {\n                 };\n \n                 // Copy only unevaluated constants from the callee_body into the caller_body.\n-                // Although we are only pushing `ConstKind::Unevaluated` consts to uneval_consts,\n-                // here we may not only have `ConstKind::Unevaluated` because we are calling\n-                // `subst_and_normalize_erasing_regions`.\n-                caller_body.uneval_consts.extend(callee_body.uneval_consts.iter().copied().filter(\n-                    |&constant| matches!(constant.literal.val, ConstKind::Unevaluated(_, _, _)),\n-                ));\n+                // Although we are only pushing `ConstKind::Unevaluated` consts to\n+                // `required_consts`, here we may not only have `ConstKind::Unevaluated`\n+                // because we are calling `subst_and_normalize_erasing_regions`.\n+                caller_body.required_consts.extend(\n+                    callee_body.required_consts.iter().copied().filter(|&constant| {\n+                        matches!(constant.literal.val, ConstKind::Unevaluated(_, _, _))\n+                    }),\n+                );\n \n                 let start = caller_body.basic_blocks().len();\n                 debug!(\"attempting to inline callsite {:?} - body={:?}\", callsite, callee_body);"}, {"sha": "e3fe0e376f3a10d05ea8dc2abb3927de97cead80", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1ed7cc95f0aaa75e916fc044cce293f56ad04d3/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ed7cc95f0aaa75e916fc044cce293f56ad04d3/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=c1ed7cc95f0aaa75e916fc044cce293f56ad04d3", "patch": "@@ -30,11 +30,11 @@ pub mod no_landing_pads;\n pub mod promote_consts;\n pub mod qualify_min_const_fn;\n pub mod remove_noop_landing_pads;\n+pub mod required_consts;\n pub mod rustc_peek;\n pub mod simplify;\n pub mod simplify_branches;\n pub mod simplify_try;\n-pub mod uneval_const_set;\n pub mod uninhabited_enum_branching;\n pub mod unreachable_prop;\n \n@@ -240,13 +240,13 @@ fn mir_validated(\n \n     let mut body = tcx.mir_const(def_id).steal();\n \n-    let mut uneval_consts = Vec::new();\n-    let mut uneval_const_visitor =\n-        self::uneval_const_set::UnevalConstSetVisitor::new(&mut uneval_consts);\n+    let mut required_consts = Vec::new();\n+    let mut required_consts_visitor =\n+        self::required_consts::RequiredConstsVisitor::new(&mut required_consts);\n     for (bb, bb_data) in traversal::reverse_postorder(&body) {\n-        uneval_const_visitor.visit_basic_block_data(bb, bb_data);\n+        required_consts_visitor.visit_basic_block_data(bb, bb_data);\n     }\n-    body.uneval_consts = uneval_consts;\n+    body.required_consts = required_consts;\n \n     let promote_pass = promote_consts::PromoteTemps::default();\n     run_passes("}, {"sha": "a63ab30a68fa2fbdcb698f937c0cae9eebb7ee01", "filename": "src/librustc_mir/transform/required_consts.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c1ed7cc95f0aaa75e916fc044cce293f56ad04d3/src%2Flibrustc_mir%2Ftransform%2Frequired_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ed7cc95f0aaa75e916fc044cce293f56ad04d3/src%2Flibrustc_mir%2Ftransform%2Frequired_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frequired_consts.rs?ref=c1ed7cc95f0aaa75e916fc044cce293f56ad04d3", "patch": "@@ -0,0 +1,23 @@\n+use rustc_middle::mir::visit::Visitor;\n+use rustc_middle::mir::{Constant, Location};\n+use rustc_middle::ty::ConstKind;\n+\n+pub struct RequiredConstsVisitor<'a, 'tcx> {\n+    required_consts: &'a mut Vec<Constant<'tcx>>,\n+}\n+\n+impl<'a, 'tcx> RequiredConstsVisitor<'a, 'tcx> {\n+    pub fn new(required_consts: &'a mut Vec<Constant<'tcx>>) -> Self {\n+        RequiredConstsVisitor { required_consts }\n+    }\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for RequiredConstsVisitor<'a, 'tcx> {\n+    fn visit_constant(&mut self, constant: &Constant<'tcx>, _: Location) {\n+        let const_kind = constant.literal.val;\n+\n+        if let ConstKind::Unevaluated(_, _, _) = const_kind {\n+            self.required_consts.push(*constant);\n+        }\n+    }\n+}"}, {"sha": "98190f0f13f427c26c5ac6e5c5836bdc120f3f09", "filename": "src/librustc_mir/transform/uneval_const_set.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/da9aa2dd55b69a4c902af9b953904911e9cffb77/src%2Flibrustc_mir%2Ftransform%2Funeval_const_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9aa2dd55b69a4c902af9b953904911e9cffb77/src%2Flibrustc_mir%2Ftransform%2Funeval_const_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funeval_const_set.rs?ref=da9aa2dd55b69a4c902af9b953904911e9cffb77", "patch": "@@ -1,23 +0,0 @@\n-use rustc_middle::mir::visit::Visitor;\n-use rustc_middle::mir::{Constant, Location};\n-use rustc_middle::ty::ConstKind;\n-\n-pub struct UnevalConstSetVisitor<'a, 'tcx> {\n-    uneval_consts: &'a mut Vec<Constant<'tcx>>,\n-}\n-\n-impl<'a, 'tcx> UnevalConstSetVisitor<'a, 'tcx> {\n-    pub fn new(uneval_consts: &'a mut Vec<Constant<'tcx>>) -> Self {\n-        UnevalConstSetVisitor { uneval_consts }\n-    }\n-}\n-\n-impl<'a, 'tcx> Visitor<'tcx> for UnevalConstSetVisitor<'a, 'tcx> {\n-    fn visit_constant(&mut self, constant: &Constant<'tcx>, _: Location) {\n-        let const_kind = constant.literal.val;\n-\n-        if let ConstKind::Unevaluated(_, _, _) = const_kind {\n-            self.uneval_consts.push(*constant);\n-        }\n-    }\n-}"}]}