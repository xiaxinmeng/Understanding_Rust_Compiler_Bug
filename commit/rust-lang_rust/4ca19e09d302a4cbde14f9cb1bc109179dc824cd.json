{"sha": "4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "node_id": "C_kwDOAAsO6NoAKDRjYTE5ZTA5ZDMwMmE0Y2JkZTE0ZjljYjFiYzEwOTE3OWRjODI0Y2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-19T13:10:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-19T13:10:12Z"}, "message": "Auto merge of #96214 - Dylan-DPC:rollup-a5b4fow, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #94493 (Improved diagnostic on failure to meet send bound on future in a foreign crate)\n - #95809 (Fix typo in bootstrap.py)\n - #96086 (Remove `--extern-location` and all associated code)\n - #96089 (`alloc`: make `vec!` unavailable under `no_global_oom_handling`)\n - #96122 (Fix an invalid error for a suggestion to add a slice in pattern-matching)\n - #96142 (Stop using CRATE_DEF_INDEX outside of metadata encoding.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b779b25871b429dfaafe1c4de5cc5051333c3689", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b779b25871b429dfaafe1c4de5cc5051333c3689"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "html_url": "https://github.com/rust-lang/rust/commit/4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c102c5cfc60203c82460bdde2eecd19ccd8c125b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c102c5cfc60203c82460bdde2eecd19ccd8c125b", "html_url": "https://github.com/rust-lang/rust/commit/c102c5cfc60203c82460bdde2eecd19ccd8c125b"}, {"sha": "9fad214593e87f151b8f09ff0cda9cd52372d037", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fad214593e87f151b8f09ff0cda9cd52372d037", "html_url": "https://github.com/rust-lang/rust/commit/9fad214593e87f151b8f09ff0cda9cd52372d037"}], "stats": {"total": 1230, "additions": 461, "deletions": 769}, "files": [{"sha": "e3a9eb349368a27230e873bd737a02cf9674654d", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -3934,7 +3934,6 @@ dependencies = [\n  \"rustc_infer\",\n  \"rustc_middle\",\n  \"rustc_parse_format\",\n- \"rustc_serialize\",\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\","}, {"sha": "7b7c676c26cd12b7f487a99982c8154930b4589b", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -1,12 +1,10 @@\n use std::collections::hash_map::Entry::*;\n \n use rustc_ast::expand::allocator::ALLOCATOR_METHODS;\n-use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n use rustc_hir::Node;\n-use rustc_index::vec::IndexVec;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::middle::exported_symbols::{\n     metadata_symbol_name, ExportedSymbol, SymbolExportLevel,\n@@ -277,17 +275,6 @@ fn upstream_monomorphizations_provider(\n \n     let mut instances: DefIdMap<FxHashMap<_, _>> = Default::default();\n \n-    let cnum_stable_ids: IndexVec<CrateNum, Fingerprint> = {\n-        let mut cnum_stable_ids = IndexVec::from_elem_n(Fingerprint::ZERO, cnums.len() + 1);\n-\n-        for &cnum in cnums.iter() {\n-            cnum_stable_ids[cnum] =\n-                tcx.def_path_hash(DefId { krate: cnum, index: CRATE_DEF_INDEX }).0;\n-        }\n-\n-        cnum_stable_ids\n-    };\n-\n     let drop_in_place_fn_def_id = tcx.lang_items().drop_in_place_fn();\n \n     for &cnum in cnums.iter() {\n@@ -316,7 +303,7 @@ fn upstream_monomorphizations_provider(\n                     // If there are multiple monomorphizations available,\n                     // we select one deterministically.\n                     let other_cnum = *e.get();\n-                    if cnum_stable_ids[other_cnum] > cnum_stable_ids[cnum] {\n+                    if tcx.stable_crate_id(other_cnum) > tcx.stable_crate_id(cnum) {\n                         e.insert(cnum);\n                     }\n                 }"}, {"sha": "cd17726c78588dae3ac87503de5ba14dd192a8c1", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -1,12 +1,11 @@\n use crate::snippet::Style;\n use crate::{\n     CodeSuggestion, DiagnosticMessage, Level, MultiSpan, Substitution, SubstitutionPart,\n-    SuggestionStyle, ToolMetadata,\n+    SuggestionStyle,\n };\n use rustc_data_structures::stable_map::FxHashMap;\n use rustc_error_messages::FluentValue;\n use rustc_lint_defs::{Applicability, LintExpectationId};\n-use rustc_serialize::json::Json;\n use rustc_span::edition::LATEST_STABLE_EDITION;\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n@@ -554,7 +553,6 @@ impl Diagnostic {\n             msg: msg.into(),\n             style,\n             applicability,\n-            tool_metadata: Default::default(),\n         });\n         self\n     }\n@@ -582,7 +580,6 @@ impl Diagnostic {\n             msg: msg.into(),\n             style: SuggestionStyle::CompletelyHidden,\n             applicability,\n-            tool_metadata: Default::default(),\n         });\n         self\n     }\n@@ -637,7 +634,6 @@ impl Diagnostic {\n             msg: msg.into(),\n             style,\n             applicability,\n-            tool_metadata: Default::default(),\n         });\n         self\n     }\n@@ -680,7 +676,6 @@ impl Diagnostic {\n             msg: msg.into(),\n             style: SuggestionStyle::ShowCode,\n             applicability,\n-            tool_metadata: Default::default(),\n         });\n         self\n     }\n@@ -705,7 +700,6 @@ impl Diagnostic {\n             msg: msg.into(),\n             style: SuggestionStyle::ShowCode,\n             applicability,\n-            tool_metadata: Default::default(),\n         });\n         self\n     }\n@@ -774,23 +768,6 @@ impl Diagnostic {\n         self\n     }\n \n-    /// Adds a suggestion intended only for a tool. The intent is that the metadata encodes\n-    /// the suggestion in a tool-specific way, as it may not even directly involve Rust code.\n-    pub fn tool_only_suggestion_with_metadata(\n-        &mut self,\n-        msg: impl Into<DiagnosticMessage>,\n-        applicability: Applicability,\n-        tool_metadata: Json,\n-    ) {\n-        self.push_suggestion(CodeSuggestion {\n-            substitutions: vec![],\n-            msg: msg.into(),\n-            style: SuggestionStyle::CompletelyHidden,\n-            applicability,\n-            tool_metadata: ToolMetadata::new(tool_metadata),\n-        })\n-    }\n-\n     pub fn set_span<S: Into<MultiSpan>>(&mut self, sp: S) -> &mut Self {\n         self.span = sp.into();\n         if let Some(span) = self.span.primary_span() {"}, {"sha": "d680e7fab704763917a2361f2c67b2100b33e915", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 1, "deletions": 66, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -14,7 +14,6 @@ use rustc_span::source_map::{FilePathMapping, SourceMap};\n use crate::emitter::{Emitter, HumanReadableErrorType};\n use crate::registry::Registry;\n use crate::DiagnosticId;\n-use crate::ToolMetadata;\n use crate::{\n     CodeSuggestion, FluentBundle, LazyFallbackBundle, MultiSpan, SpanLabel, SubDiagnostic,\n };\n@@ -30,7 +29,6 @@ use std::sync::{Arc, Mutex};\n use std::vec;\n \n use rustc_serialize::json::{as_json, as_pretty_json};\n-use rustc_serialize::{Encodable, Encoder};\n \n #[cfg(test)]\n mod tests;\n@@ -205,8 +203,7 @@ impl Emitter for JsonEmitter {\n \n // The following data types are provided just for serialisation.\n \n-// NOTE: this has a manual implementation of Encodable which needs to be updated in\n-// parallel.\n+#[derive(Encodable)]\n struct Diagnostic {\n     /// The primary error message.\n     message: String,\n@@ -218,65 +215,6 @@ struct Diagnostic {\n     children: Vec<Diagnostic>,\n     /// The message as rustc would render it.\n     rendered: Option<String>,\n-    /// Extra tool metadata\n-    tool_metadata: ToolMetadata,\n-}\n-\n-macro_rules! encode_fields {\n-    (\n-        $enc:expr,                  // encoder\n-        $idx:expr,                  // starting field index\n-        $struct:expr,               // struct we're serializing\n-        $struct_name:ident,         // struct name\n-        [ $($name:ident),+$(,)? ],  // fields to encode\n-        [ $($ignore:ident),+$(,)? ] // fields we're skipping\n-    ) => {\n-        {\n-            // Pattern match to make sure all fields are accounted for\n-            let $struct_name { $($name,)+ $($ignore: _,)+ } = $struct;\n-            let mut idx = $idx;\n-            $(\n-                $enc.emit_struct_field(\n-                    stringify!($name),\n-                    idx == 0,\n-                    |enc| $name.encode(enc),\n-                )?;\n-                idx += 1;\n-            )+\n-            idx\n-        }\n-    };\n-}\n-\n-// Special-case encoder to skip tool_metadata if not set\n-impl<E: Encoder> Encodable<E> for Diagnostic {\n-    fn encode(&self, s: &mut E) -> Result<(), E::Error> {\n-        s.emit_struct(false, |s| {\n-            let mut idx = 0;\n-\n-            idx = encode_fields!(\n-                s,\n-                idx,\n-                self,\n-                Self,\n-                [message, code, level, spans, children, rendered],\n-                [tool_metadata]\n-            );\n-            if self.tool_metadata.is_set() {\n-                idx = encode_fields!(\n-                    s,\n-                    idx,\n-                    self,\n-                    Self,\n-                    [tool_metadata],\n-                    [message, code, level, spans, children, rendered]\n-                );\n-            }\n-\n-            let _ = idx;\n-            Ok(())\n-        })\n-    }\n }\n \n #[derive(Encodable)]\n@@ -380,7 +318,6 @@ impl Diagnostic {\n                 spans: DiagnosticSpan::from_suggestion(sugg, &args, je),\n                 children: vec![],\n                 rendered: None,\n-                tool_metadata: sugg.tool_metadata.clone(),\n             }\n         });\n \n@@ -428,7 +365,6 @@ impl Diagnostic {\n                 .chain(sugg)\n                 .collect(),\n             rendered: Some(output),\n-            tool_metadata: ToolMetadata::default(),\n         }\n     }\n \n@@ -449,7 +385,6 @@ impl Diagnostic {\n                 .unwrap_or_else(|| DiagnosticSpan::from_multispan(&diag.span, args, je)),\n             children: vec![],\n             rendered: None,\n-            tool_metadata: ToolMetadata::default(),\n         }\n     }\n }"}, {"sha": "339bcc24751d0cf11de2f1c14619486df39e4984", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -36,13 +36,11 @@ pub use rustc_error_messages::{\n     LazyFallbackBundle, MultiSpan, SpanLabel, DEFAULT_LOCALE_RESOURCES,\n };\n pub use rustc_lint_defs::{pluralize, Applicability};\n-use rustc_serialize::json::Json;\n-use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_span::source_map::SourceMap;\n use rustc_span::{Loc, Span};\n \n use std::borrow::Cow;\n-use std::hash::{Hash, Hasher};\n+use std::hash::Hash;\n use std::num::NonZeroUsize;\n use std::panic;\n use std::path::Path;\n@@ -93,39 +91,6 @@ impl SuggestionStyle {\n     }\n }\n \n-#[derive(Clone, Debug, PartialEq, Default)]\n-pub struct ToolMetadata(pub Option<Json>);\n-\n-impl ToolMetadata {\n-    fn new(json: Json) -> Self {\n-        ToolMetadata(Some(json))\n-    }\n-\n-    fn is_set(&self) -> bool {\n-        self.0.is_some()\n-    }\n-}\n-\n-impl Hash for ToolMetadata {\n-    fn hash<H: Hasher>(&self, _state: &mut H) {}\n-}\n-\n-// Doesn't really need to round-trip\n-impl<D: Decoder> Decodable<D> for ToolMetadata {\n-    fn decode(_d: &mut D) -> Self {\n-        ToolMetadata(None)\n-    }\n-}\n-\n-impl<S: Encoder> Encodable<S> for ToolMetadata {\n-    fn encode(&self, e: &mut S) -> Result<(), S::Error> {\n-        match &self.0 {\n-            None => e.emit_unit(),\n-            Some(json) => json.encode(e),\n-        }\n-    }\n-}\n-\n #[derive(Clone, Debug, PartialEq, Hash, Encodable, Decodable)]\n pub struct CodeSuggestion {\n     /// Each substitute can have multiple variants due to multiple\n@@ -159,8 +124,6 @@ pub struct CodeSuggestion {\n     /// which are useful for users but not useful for\n     /// tools like rustfix\n     pub applicability: Applicability,\n-    /// Tool-specific metadata\n-    pub tool_metadata: ToolMetadata,\n }\n \n #[derive(Clone, Debug, PartialEq, Hash, Encodable, Decodable)]"}, {"sha": "324e110005717ac6517f4f357e4b4dc7c08cc1a2", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -1,4 +1,4 @@\n-use crate::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use crate::def_id::DefId;\n use crate::hir;\n \n use rustc_ast as ast;\n@@ -124,9 +124,7 @@ impl DefKind {\n     pub fn descr(self, def_id: DefId) -> &'static str {\n         match self {\n             DefKind::Fn => \"function\",\n-            DefKind::Mod if def_id.index == CRATE_DEF_INDEX && def_id.krate != LOCAL_CRATE => {\n-                \"crate\"\n-            }\n+            DefKind::Mod if def_id.is_crate_root() && !def_id.is_local() => \"crate\",\n             DefKind::Mod => \"module\",\n             DefKind::Static(..) => \"static\",\n             DefKind::Enum => \"enum\","}, {"sha": "bce9ba12ac0c424045e391a05f420f714307d4f7", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -353,11 +353,6 @@ impl Definitions {\n         }\n     }\n \n-    /// Retrieves the root definition.\n-    pub fn get_root_def(&self) -> LocalDefId {\n-        LocalDefId { local_def_index: CRATE_DEF_INDEX }\n-    }\n-\n     /// Adds a definition with a parent definition.\n     pub fn create_def(\n         &mut self,"}, {"sha": "e0ff28dff15cd3224ce74ee42f110a1ffc65d6e1", "filename": "compiler/rustc_hir/src/hir_id.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -1,4 +1,4 @@\n-use crate::def_id::{LocalDefId, CRATE_DEF_INDEX};\n+use crate::def_id::{LocalDefId, CRATE_DEF_ID};\n use std::fmt;\n \n /// Uniquely identifies a node in the HIR of the current crate. It is\n@@ -84,8 +84,5 @@ impl ItemLocalId {\n     pub const INVALID: ItemLocalId = ItemLocalId::MAX;\n }\n \n-/// The `HirId` corresponding to `CRATE_NODE_ID` and `CRATE_DEF_INDEX`.\n-pub const CRATE_HIR_ID: HirId = HirId {\n-    owner: LocalDefId { local_def_index: CRATE_DEF_INDEX },\n-    local_id: ItemLocalId::from_u32(0),\n-};\n+/// The `HirId` corresponding to `CRATE_NODE_ID` and `CRATE_DEF_ID`.\n+pub const CRATE_HIR_ID: HirId = HirId { owner: CRATE_DEF_ID, local_id: ItemLocalId::from_u32(0) };"}, {"sha": "02f747eeccc3e1eb21f72d4f6395c4f0112bb58b", "filename": "compiler/rustc_lint/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2FCargo.toml?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -18,7 +18,6 @@ rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_feature = { path = \"../rustc_feature\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_session = { path = \"../rustc_session\" }\n-rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n rustc_parse_format = { path = \"../rustc_parse_format\" }\n rustc_infer = { path = \"../rustc_infer\" }"}, {"sha": "0ffa65b79b584a5070e06bc93b2bcd717a6f91cb", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -33,8 +33,7 @@ use rustc_middle::middle::stability;\n use rustc_middle::ty::layout::{LayoutError, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, print::Printer, subst::GenericArg, RegisteredTools, Ty, TyCtxt};\n-use rustc_serialize::json::Json;\n-use rustc_session::lint::{BuiltinLintDiagnostics, ExternDepSpec};\n+use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintBuffer, LintId};\n use rustc_session::Session;\n use rustc_span::lev_distance::find_best_match_for_name;\n@@ -728,30 +727,6 @@ pub trait LintContext: Sized {\n                 BuiltinLintDiagnostics::LegacyDeriveHelpers(span) => {\n                     db.span_label(span, \"the attribute is introduced here\");\n                 }\n-                BuiltinLintDiagnostics::ExternDepSpec(krate, loc) => {\n-                    let json = match loc {\n-                        ExternDepSpec::Json(json) => {\n-                            db.help(&format!(\"remove unnecessary dependency `{}`\", krate));\n-                            json\n-                        }\n-                        ExternDepSpec::Raw(raw) => {\n-                            db.help(&format!(\"remove unnecessary dependency `{}` at `{}`\", krate, raw));\n-                            db.span_suggestion_with_style(\n-                                DUMMY_SP,\n-                                \"raw extern location\",\n-                                raw.clone(),\n-                                Applicability::Unspecified,\n-                                SuggestionStyle::CompletelyHidden,\n-                            );\n-                            Json::String(raw)\n-                        }\n-                    };\n-                    db.tool_only_suggestion_with_metadata(\n-                        \"json extern location\",\n-                        Applicability::Unspecified,\n-                        json\n-                    );\n-                }\n                 BuiltinLintDiagnostics::ProcMacroBackCompat(note) => {\n                     db.note(&note);\n                 }"}, {"sha": "bde773a32db68c796aea2d5f27a182f101df2ff7", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -9,7 +9,6 @@ use rustc_ast::{AttrId, Attribute};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_error_messages::MultiSpan;\n use rustc_hir::HirId;\n-use rustc_serialize::json::Json;\n use rustc_span::edition::Edition;\n use rustc_span::{sym, symbol::Ident, Span, Symbol};\n use rustc_target::spec::abi::Abi;\n@@ -403,13 +402,6 @@ impl<HCX> ToStableHashKey<HCX> for LintId {\n     }\n }\n \n-// Duplicated from rustc_session::config::ExternDepSpec to avoid cyclic dependency\n-#[derive(PartialEq, Debug)]\n-pub enum ExternDepSpec {\n-    Json(Json),\n-    Raw(String),\n-}\n-\n // This could be a closure, but then implementing derive trait\n // becomes hacky (and it gets allocated).\n #[derive(Debug)]\n@@ -428,7 +420,6 @@ pub enum BuiltinLintDiagnostics {\n     UnusedBuiltinAttribute { attr_name: Symbol, macro_name: String, invoc_span: Span },\n     PatternsInFnsWithoutBody(Span, Ident),\n     LegacyDeriveHelpers(Span),\n-    ExternDepSpec(String, ExternDepSpec),\n     ProcMacroBackCompat(String),\n     OrPatternsBackCompat(Span, String),\n     ReservedPrefix(Span),"}, {"sha": "e5d0cd289255206ebc6d72dd7530a090f6058786", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -13,11 +13,10 @@ use rustc_hir::def_id::{CrateNum, LocalDefId, StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n use rustc_index::vec::IndexVec;\n use rustc_middle::ty::TyCtxt;\n-use rustc_serialize::json::ToJson;\n use rustc_session::config::{self, CrateType, ExternLocation};\n use rustc_session::cstore::{CrateDepKind, CrateSource, ExternCrate};\n use rustc_session::cstore::{ExternCrateSource, MetadataLoaderDyn};\n-use rustc_session::lint::{self, BuiltinLintDiagnostics, ExternDepSpec};\n+use rustc_session::lint;\n use rustc_session::output::validate_crate_name;\n use rustc_session::search_paths::PathKind;\n use rustc_session::Session;\n@@ -27,7 +26,6 @@ use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n \n use proc_macro::bridge::client::ProcMacro;\n-use std::collections::BTreeMap;\n use std::ops::Fn;\n use std::path::Path;\n use std::{cmp, env};\n@@ -920,20 +918,7 @@ impl<'a> CrateLoader<'a> {\n                 continue;\n             }\n \n-            let diag = match self.sess.opts.extern_dep_specs.get(name) {\n-                Some(loc) => BuiltinLintDiagnostics::ExternDepSpec(name.clone(), loc.into()),\n-                None => {\n-                    // If we don't have a specific location, provide a json encoding of the `--extern`\n-                    // option.\n-                    let meta: BTreeMap<String, String> =\n-                        std::iter::once((\"name\".to_string(), name.to_string())).collect();\n-                    BuiltinLintDiagnostics::ExternDepSpec(\n-                        name.clone(),\n-                        ExternDepSpec::Json(meta.to_json()),\n-                    )\n-                }\n-            };\n-            self.sess.parse_sess.buffer_lint_with_diagnostic(\n+            self.sess.parse_sess.buffer_lint(\n                     lint::builtin::UNUSED_CRATE_DEPENDENCIES,\n                     span,\n                     ast::CRATE_NODE_ID,\n@@ -942,7 +927,6 @@ impl<'a> CrateLoader<'a> {\n                         name,\n                         self.local_crate_name,\n                         name),\n-                    diag,\n                 );\n         }\n     }"}, {"sha": "c0f2319f003a035706343401b9315d91156bb7b4", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -28,6 +28,7 @@ use rustc_middle::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc_middle::thir;\n use rustc_middle::ty::codec::TyDecoder;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n+use rustc_middle::ty::GeneratorDiagnosticData;\n use rustc_middle::ty::{self, Ty, TyCtxt, Visibility};\n use rustc_serialize::{opaque, Decodable, Decoder};\n use rustc_session::cstore::{\n@@ -1725,6 +1726,24 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 .collect()\n         })\n     }\n+\n+    fn get_generator_diagnostic_data(\n+        self,\n+        tcx: TyCtxt<'tcx>,\n+        id: DefIndex,\n+    ) -> Option<GeneratorDiagnosticData<'tcx>> {\n+        self.root\n+            .tables\n+            .generator_diagnostic_data\n+            .get(self, id)\n+            .map(|param| param.decode((self, tcx)))\n+            .map(|generator_data| GeneratorDiagnosticData {\n+                generator_interior_types: generator_data.generator_interior_types,\n+                hir_owner: generator_data.hir_owner,\n+                nodes_types: generator_data.nodes_types,\n+                adjustments: generator_data.adjustments,\n+            })\n+    }\n }\n \n impl CrateMetadata {"}, {"sha": "6a8f1dec0c5d574b1796172b2cb84684d455ecd4", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -5,7 +5,7 @@ use crate::native_libs;\n \n use rustc_ast as ast;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::exported_symbols::ExportedSymbol;\n@@ -246,6 +246,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n \n     crate_extern_paths => { cdata.source().paths().cloned().collect() }\n     expn_that_defined => { cdata.get_expn_that_defined(def_id.index, tcx.sess) }\n+    generator_diagnostic_data => { cdata.get_generator_diagnostic_data(tcx, def_id.index) }\n }\n \n pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n@@ -324,7 +325,7 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n                     continue;\n                 }\n \n-                bfs_queue.push_back(DefId { krate: cnum, index: CRATE_DEF_INDEX });\n+                bfs_queue.push_back(cnum.as_def_id());\n             }\n \n             let mut add_child = |bfs_queue: &mut VecDeque<_>, child: &ModChild, parent: DefId| {"}, {"sha": "066bcb428f6ac16f992a2f4caa64539b7b336549", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -1556,16 +1556,17 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     fn encode_info_for_closure(&mut self, hir_id: hir::HirId) {\n         let def_id = self.tcx.hir().local_def_id(hir_id);\n         debug!(\"EncodeContext::encode_info_for_closure({:?})\", def_id);\n-\n         // NOTE(eddyb) `tcx.type_of(def_id)` isn't used because it's fully generic,\n         // including on the signature, which is inferred in `typeck.\n-        let ty = self.tcx.typeck(def_id).node_type(hir_id);\n-\n+        let typeck_result: &'tcx ty::TypeckResults<'tcx> = self.tcx.typeck(def_id);\n+        let ty = typeck_result.node_type(hir_id);\n         match ty.kind() {\n             ty::Generator(..) => {\n                 let data = self.tcx.generator_kind(def_id).unwrap();\n+                let generator_diagnostic_data = typeck_result.get_generator_diagnostic_data();\n                 record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::Generator);\n                 record!(self.tables.generator_kind[def_id.to_def_id()] <- data);\n+                record!(self.tables.generator_diagnostic_data[def_id.to_def_id()]  <- generator_diagnostic_data);\n             }\n \n             ty::Closure(..) => {\n@@ -1639,7 +1640,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             let hir = tcx.hir();\n \n             let proc_macro_decls_static = tcx.proc_macro_decls_static(()).unwrap().local_def_index;\n-            let stability = tcx.lookup_stability(DefId::local(CRATE_DEF_INDEX));\n+            let stability = tcx.lookup_stability(CRATE_DEF_ID);\n             let macros =\n                 self.lazy(tcx.resolutions(()).proc_macros.iter().map(|p| p.local_def_index));\n             let spans = self.tcx.sess.parse_sess.proc_macro_quoted_spans();"}, {"sha": "e1a1589adb322f4c09da35f4752af35f62ca28a9", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -19,6 +19,7 @@ use rustc_middle::mir;\n use rustc_middle::thir;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::query::Providers;\n+use rustc_middle::ty::GeneratorDiagnosticData;\n use rustc_middle::ty::{self, ReprOptions, Ty};\n use rustc_serialize::opaque::Encoder;\n use rustc_session::config::SymbolManglingVersion;\n@@ -358,6 +359,7 @@ define_tables! {\n     def_keys: Table<DefIndex, Lazy<DefKey>>,\n     def_path_hashes: Table<DefIndex, DefPathHash>,\n     proc_macro_quoted_spans: Table<usize, Lazy<Span>>,\n+    generator_diagnostic_data: Table<DefIndex, Lazy<GeneratorDiagnosticData<'tcx>>>,\n }\n \n #[derive(Copy, Clone, MetadataEncodable, MetadataDecodable)]"}, {"sha": "8402ca3028cce500665ac2091c230f8cdf91183d", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -60,7 +60,7 @@ use crate::mir::mono::MonoItem;\n use crate::ty::TyCtxt;\n \n use rustc_data_structures::fingerprint::Fingerprint;\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId};\n use rustc_hir::definitions::DefPathHash;\n use rustc_hir::HirId;\n use rustc_query_system::dep_graph::FingerprintStyle;\n@@ -366,7 +366,7 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for CrateNum {\n \n     #[inline(always)]\n     fn to_fingerprint(&self, tcx: TyCtxt<'tcx>) -> Fingerprint {\n-        let def_id = DefId { krate: *self, index: CRATE_DEF_INDEX };\n+        let def_id = self.as_def_id();\n         def_id.to_fingerprint(tcx)\n     }\n "}, {"sha": "758658c3d8c941c8f07081001c9493590f28b955", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -11,7 +11,7 @@ use rustc_errors::{Applicability, Diagnostic};\n use rustc_feature::GateIssue;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n-use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::{self, HirId};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_session::lint::builtin::{DEPRECATED, DEPRECATED_IN_FUTURE, SOFT_UNSTABLE};\n@@ -370,8 +370,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             };\n         }\n \n-        let is_staged_api =\n-            self.lookup_stability(DefId { index: CRATE_DEF_INDEX, ..def_id }).is_some();\n+        let is_staged_api = self.lookup_stability(def_id.krate.as_def_id()).is_some();\n         if !is_staged_api {\n             return EvalResult::Allow;\n         }"}, {"sha": "4f4b6cf704fa9d75e147c0a5462ef21dcfcab541", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -15,7 +15,7 @@ use crate::ty::{AdtDef, InstanceDef, Region, ScalarInt, UserTypeAnnotationIndex}\n \n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::{CtorKind, Namespace};\n-use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID};\n use rustc_hir::{self, GeneratorKind};\n use rustc_hir::{self as hir, HirId};\n use rustc_session::Session;\n@@ -385,7 +385,7 @@ impl<'tcx> Body<'tcx> {\n     pub fn new_cfg_only(basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>) -> Self {\n         let mut body = Body {\n             phase: MirPhase::Built,\n-            source: MirSource::item(DefId::local(CRATE_DEF_INDEX)),\n+            source: MirSource::item(CRATE_DEF_ID.to_def_id()),\n             basic_blocks,\n             source_scopes: IndexVec::new(),\n             generator: None,"}, {"sha": "78a3383243306b42187e2cf48fab7dea0867e254", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -1969,4 +1969,10 @@ rustc_queries! {\n         eval_always\n         desc { \"computing the backend features for CLI flags\" }\n     }\n+\n+    query generator_diagnostic_data(key: DefId) -> Option<GeneratorDiagnosticData<'tcx>> {\n+        storage(ArenaCacheSelector<'tcx>)\n+        desc { |tcx| \"looking up generator diagnostic data of `{}`\", tcx.def_path_str(key) }\n+        separate_provide_extern\n+    }\n }"}, {"sha": "30fe3ffa7e3c46c0b438269ebf430942b85397c8", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -367,6 +367,16 @@ pub struct GeneratorInteriorTypeCause<'tcx> {\n     pub expr: Option<hir::HirId>,\n }\n \n+// This type holds diagnostic information on generators and async functions across crate boundaries\n+// and is used to provide better error messages\n+#[derive(TyEncodable, TyDecodable, Clone, Debug, HashStable)]\n+pub struct GeneratorDiagnosticData<'tcx> {\n+    pub generator_interior_types: ty::Binder<'tcx, Vec<GeneratorInteriorTypeCause<'tcx>>>,\n+    pub hir_owner: DefId,\n+    pub nodes_types: ItemLocalMap<Ty<'tcx>>,\n+    pub adjustments: ItemLocalMap<Vec<ty::adjustment::Adjustment<'tcx>>>,\n+}\n+\n #[derive(TyEncodable, TyDecodable, Debug, HashStable)]\n pub struct TypeckResults<'tcx> {\n     /// The `HirId::owner` all `ItemLocalId`s in this table are relative to.\n@@ -623,6 +633,28 @@ impl<'tcx> TypeckResults<'tcx> {\n         LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }\n     }\n \n+    pub fn get_generator_diagnostic_data(&self) -> GeneratorDiagnosticData<'tcx> {\n+        let generator_interior_type = self.generator_interior_types.map_bound_ref(|vec| {\n+            vec.iter()\n+                .map(|item| {\n+                    GeneratorInteriorTypeCause {\n+                        ty: item.ty,\n+                        span: item.span,\n+                        scope_span: item.scope_span,\n+                        yield_span: item.yield_span,\n+                        expr: None, //FIXME: Passing expression over crate boundaries is impossible at the moment\n+                    }\n+                })\n+                .collect::<Vec<_>>()\n+        });\n+        GeneratorDiagnosticData {\n+            generator_interior_types: generator_interior_type,\n+            hir_owner: self.hir_owner.to_def_id(),\n+            nodes_types: self.node_types.clone(),\n+            adjustments: self.adjustments.clone(),\n+        }\n+    }\n+\n     pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {\n         self.node_type_opt(id).unwrap_or_else(|| {\n             bug!(\"node_type: no type for node `{}`\", tls::with(|tcx| tcx.hir().node_to_string(id)))"}, {"sha": "d59fdf47904f7939109376f398623796c0b66516", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -36,7 +36,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::tagged_ptr::CopyTaggedPtr;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LocalDefIdMap, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LocalDefIdMap, CRATE_DEF_ID};\n use rustc_hir::Node;\n use rustc_macros::HashStable;\n use rustc_query_system::ich::StableHashingContext;\n@@ -67,8 +67,9 @@ pub use self::consts::{\n };\n pub use self::context::{\n     tls, CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n-    CtxtInterners, DelaySpanBugEmitted, FreeRegionInfo, GeneratorInteriorTypeCause, GlobalCtxt,\n-    Lift, OnDiskCache, TyCtxt, TypeckResults, UserType, UserTypeAnnotationIndex,\n+    CtxtInterners, DelaySpanBugEmitted, FreeRegionInfo, GeneratorDiagnosticData,\n+    GeneratorInteriorTypeCause, GlobalCtxt, Lift, OnDiskCache, TyCtxt, TypeckResults, UserType,\n+    UserTypeAnnotationIndex,\n };\n pub use self::instance::{Instance, InstanceDef};\n pub use self::list::List;\n@@ -319,7 +320,7 @@ impl Visibility {\n     pub fn from_hir(visibility: &hir::Visibility<'_>, id: hir::HirId, tcx: TyCtxt<'_>) -> Self {\n         match visibility.node {\n             hir::VisibilityKind::Public => Visibility::Public,\n-            hir::VisibilityKind::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),\n+            hir::VisibilityKind::Crate(_) => Visibility::Restricted(CRATE_DEF_ID.to_def_id()),\n             hir::VisibilityKind::Restricted { ref path, .. } => match path.res {\n                 // If there is no resolution, `resolve` will have already reported an error, so\n                 // assume that the visibility is public to avoid reporting more privacy errors.\n@@ -1992,8 +1993,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     fn opt_item_name(self, def_id: DefId) -> Option<Symbol> {\n-        if def_id.index == CRATE_DEF_INDEX {\n-            Some(self.crate_name(def_id.krate))\n+        if let Some(cnum) = def_id.as_crate_root() {\n+            Some(self.crate_name(cnum))\n         } else {\n             let def_key = self.def_key(def_id);\n             match def_key.disambiguated_data.data {"}, {"sha": "38362a4cbb92529a8a164ba137096bd1cda4e70a", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sso::SsoHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{self, CtorKind, DefKind, Namespace};\n-use rustc_hir::def_id::{DefId, DefIdSet, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, DefIdSet, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::definitions::{DefPathData, DefPathDataName, DisambiguatedDefPathData};\n use rustc_session::config::TrimmedDefPaths;\n use rustc_session::cstore::{ExternCrate, ExternCrateSource};\n@@ -335,9 +335,7 @@ pub trait PrettyPrinter<'tcx>:\n \n         // If `def_id` is a direct or injected extern crate, return the\n         // path to the crate followed by the path to the item within the crate.\n-        if def_id.index == CRATE_DEF_INDEX {\n-            let cnum = def_id.krate;\n-\n+        if let Some(cnum) = def_id.as_crate_root() {\n             if cnum == LOCAL_CRATE {\n                 return Ok((self.path_crate(cnum)?, true));\n             }\n@@ -2227,11 +2225,11 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n                     ty::BrNamed(_, _) => br.kind,\n                     ty::BrAnon(i) => {\n                         let name = region_map[&(i + 1)];\n-                        ty::BrNamed(DefId::local(CRATE_DEF_INDEX), name)\n+                        ty::BrNamed(CRATE_DEF_ID.to_def_id(), name)\n                     }\n                     ty::BrEnv => {\n                         let name = region_map[&0];\n-                        ty::BrNamed(DefId::local(CRATE_DEF_INDEX), name)\n+                        ty::BrNamed(CRATE_DEF_ID.to_def_id(), name)\n                     }\n                 };\n                 self.tcx.mk_region(ty::ReLateBound(\n@@ -2257,7 +2255,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n                             }\n                         };\n                         do_continue(&mut self, name);\n-                        ty::BrNamed(DefId::local(CRATE_DEF_INDEX), name)\n+                        ty::BrNamed(CRATE_DEF_ID.to_def_id(), name)\n                     }\n                 };\n                 tcx.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BoundRegion { var: br.var, kind }))\n@@ -2697,7 +2695,7 @@ fn for_each_def(tcx: TyCtxt<'_>, mut collect_fn: impl for<'b> FnMut(&'b Ident, N\n     let mut seen_defs: DefIdSet = Default::default();\n \n     for &cnum in tcx.crates(()).iter() {\n-        let def_id = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n+        let def_id = cnum.as_def_id();\n \n         // Ignore crates that are not direct dependencies.\n         match tcx.extern_crate(def_id) {"}, {"sha": "7629d7a8259b8b841598e95c2c70519f186a04cc", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -31,8 +31,11 @@ use crate::traits::{self, ImplSource};\n use crate::ty::fast_reject::SimplifiedType;\n use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::util::AlwaysRequiresDrop;\n+use crate::ty::GeneratorDiagnosticData;\n use crate::ty::{self, AdtSizedConstraint, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n+use rustc_ast as ast;\n use rustc_ast::expand::allocator::AllocatorKind;\n+use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::svh::Svh;\n@@ -49,13 +52,10 @@ use rustc_session::cstore::{CrateDepKind, CrateSource};\n use rustc_session::cstore::{ExternCrate, ForeignModule, LinkagePreference, NativeLib};\n use rustc_session::utils::NativeLibKind;\n use rustc_session::Limits;\n-use rustc_target::abi;\n-use rustc_target::spec::PanicStrategy;\n-\n-use rustc_ast as ast;\n-use rustc_attr as attr;\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n+use rustc_target::abi;\n+use rustc_target::spec::PanicStrategy;\n use std::ops::Deref;\n use std::path::PathBuf;\n use std::sync::Arc;"}, {"sha": "4ef6ff1835ffd022ccddc0a098c3c2496aec2640", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -10,7 +10,6 @@ use crate::ty::{self, InferConst, Lift, Term, Ty, TyCtxt};\n use rustc_data_structures::functor::IdFunctor;\n use rustc_hir as hir;\n use rustc_hir::def::Namespace;\n-use rustc_hir::def_id::CRATE_DEF_INDEX;\n use rustc_index::vec::{Idx, IndexVec};\n \n use std::fmt;\n@@ -71,7 +70,7 @@ impl fmt::Debug for ty::BoundRegionKind {\n         match *self {\n             ty::BrAnon(n) => write!(f, \"BrAnon({:?})\", n),\n             ty::BrNamed(did, name) => {\n-                if did.index == CRATE_DEF_INDEX {\n+                if did.is_crate_root() {\n                     write!(f, \"BrNamed({})\", name)\n                 } else {\n                     write!(f, \"BrNamed({:?}, {})\", did, name)"}, {"sha": "167741988798862b79e05f008190fa65b38f46ae", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -2,7 +2,7 @@ use std::collections::hash_map::Entry;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def::DefKind;\n-use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathDataName;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::middle::exported_symbols::SymbolExportLevel;\n@@ -335,10 +335,10 @@ fn compute_codegen_unit_name(\n     let mut cgu_def_id = None;\n     // Walk backwards from the item we want to find the module for.\n     loop {\n-        if current_def_id.index == CRATE_DEF_INDEX {\n+        if current_def_id.is_crate_root() {\n             if cgu_def_id.is_none() {\n                 // If we have not found a module yet, take the crate root.\n-                cgu_def_id = Some(DefId { krate: def_id.krate, index: CRATE_DEF_INDEX });\n+                cgu_def_id = Some(def_id.krate.as_def_id());\n             }\n             break;\n         } else if tcx.def_kind(current_def_id) == DefKind::Mod {"}, {"sha": "db083d0453bc05d7cc9a6924a3a3e3ca845eca8c", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 22, "deletions": 31, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -1,21 +1,18 @@\n use rustc_ast::entry::EntryPointType;\n use rustc_errors::struct_span_err;\n-use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{ForeignItem, ImplItem, Item, ItemKind, Node, TraitItem, CRATE_HIR_ID};\n-use rustc_middle::hir::map::Map;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::{DefIdTree, TyCtxt};\n use rustc_session::config::{CrateType, EntryFnType};\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, DUMMY_SP};\n \n-struct EntryContext<'a, 'tcx> {\n-    session: &'a Session,\n-\n-    map: Map<'tcx>,\n+struct EntryContext<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n \n     /// The function that has attribute named `main`.\n     attr_main_fn: Option<(LocalDefId, Span)>,\n@@ -28,10 +25,9 @@ struct EntryContext<'a, 'tcx> {\n     non_main_fns: Vec<Span>,\n }\n \n-impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> {\n+impl<'tcx> ItemLikeVisitor<'tcx> for EntryContext<'tcx> {\n     fn visit_item(&mut self, item: &'tcx Item<'tcx>) {\n-        let def_key = self.map.def_key(item.def_id);\n-        let at_root = def_key.parent == Some(CRATE_DEF_INDEX);\n+        let at_root = self.tcx.local_parent(item.def_id) == Some(CRATE_DEF_ID);\n         find_item(item, self, at_root);\n     }\n \n@@ -60,13 +56,8 @@ fn entry_fn(tcx: TyCtxt<'_>, (): ()) -> Option<(DefId, EntryFnType)> {\n         return None;\n     }\n \n-    let mut ctxt = EntryContext {\n-        session: tcx.sess,\n-        map: tcx.hir(),\n-        attr_main_fn: None,\n-        start_fn: None,\n-        non_main_fns: Vec::new(),\n-    };\n+    let mut ctxt =\n+        EntryContext { tcx, attr_main_fn: None, start_fn: None, non_main_fns: Vec::new() };\n \n     tcx.hir().visit_all_item_likes(&mut ctxt);\n \n@@ -75,11 +66,11 @@ fn entry_fn(tcx: TyCtxt<'_>, (): ()) -> Option<(DefId, EntryFnType)> {\n \n // Beware, this is duplicated in `librustc_builtin_macros/test_harness.rs`\n // (with `ast::Item`), so make sure to keep them in sync.\n-fn entry_point_type(ctxt: &EntryContext<'_, '_>, item: &Item<'_>, at_root: bool) -> EntryPointType {\n-    let attrs = ctxt.map.attrs(item.hir_id());\n-    if ctxt.session.contains_name(attrs, sym::start) {\n+fn entry_point_type(ctxt: &EntryContext<'_>, item: &Item<'_>, at_root: bool) -> EntryPointType {\n+    let attrs = ctxt.tcx.hir().attrs(item.hir_id());\n+    if ctxt.tcx.sess.contains_name(attrs, sym::start) {\n         EntryPointType::Start\n-    } else if ctxt.session.contains_name(attrs, sym::rustc_main) {\n+    } else if ctxt.tcx.sess.contains_name(attrs, sym::rustc_main) {\n         EntryPointType::MainAttr\n     } else if item.ident.name == sym::main {\n         if at_root {\n@@ -98,16 +89,16 @@ fn throw_attr_err(sess: &Session, span: Span, attr: &str) {\n         .emit();\n }\n \n-fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n+fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_>, at_root: bool) {\n     match entry_point_type(ctxt, item, at_root) {\n         EntryPointType::None => (),\n         _ if !matches!(item.kind, ItemKind::Fn(..)) => {\n-            let attrs = ctxt.map.attrs(item.hir_id());\n-            if let Some(attr) = ctxt.session.find_by_name(attrs, sym::start) {\n-                throw_attr_err(&ctxt.session, attr.span, \"start\");\n+            let attrs = ctxt.tcx.hir().attrs(item.hir_id());\n+            if let Some(attr) = ctxt.tcx.sess.find_by_name(attrs, sym::start) {\n+                throw_attr_err(&ctxt.tcx.sess, attr.span, \"start\");\n             }\n-            if let Some(attr) = ctxt.session.find_by_name(attrs, sym::rustc_main) {\n-                throw_attr_err(&ctxt.session, attr.span, \"rustc_main\");\n+            if let Some(attr) = ctxt.tcx.sess.find_by_name(attrs, sym::rustc_main) {\n+                throw_attr_err(&ctxt.tcx.sess, attr.span, \"rustc_main\");\n             }\n         }\n         EntryPointType::MainNamed => (),\n@@ -119,7 +110,7 @@ fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n                 ctxt.attr_main_fn = Some((item.def_id, item.span));\n             } else {\n                 struct_span_err!(\n-                    ctxt.session,\n+                    ctxt.tcx.sess,\n                     item.span,\n                     E0137,\n                     \"multiple functions with a `#[main]` attribute\"\n@@ -133,7 +124,7 @@ fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n             if ctxt.start_fn.is_none() {\n                 ctxt.start_fn = Some((item.def_id, item.span));\n             } else {\n-                struct_span_err!(ctxt.session, item.span, E0138, \"multiple `start` functions\")\n+                struct_span_err!(ctxt.tcx.sess, item.span, E0138, \"multiple `start` functions\")\n                     .span_label(ctxt.start_fn.unwrap().1, \"previous `#[start]` function here\")\n                     .span_label(item.span, \"multiple `start` functions\")\n                     .emit();\n@@ -142,7 +133,7 @@ fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n     }\n }\n \n-fn configure_main(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) -> Option<(DefId, EntryFnType)> {\n+fn configure_main(tcx: TyCtxt<'_>, visitor: &EntryContext<'_>) -> Option<(DefId, EntryFnType)> {\n     if let Some((def_id, _)) = visitor.start_fn {\n         Some((def_id.to_def_id(), EntryFnType::Start))\n     } else if let Some((def_id, _)) = visitor.attr_main_fn {\n@@ -177,7 +168,7 @@ fn configure_main(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) -> Option<(De\n     }\n }\n \n-fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) {\n+fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_>) {\n     let sp = tcx.def_span(CRATE_DEF_ID);\n     if *tcx.sess.parse_sess.reached_eof.borrow() {\n         // There's an unclosed brace that made the parser reach `Eof`, we shouldn't complain about"}, {"sha": "379a6827c8aac5d3d41075a5aa1998ee7d4cec24", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -1,7 +1,7 @@\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lock;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::intravisit;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirId, ItemLocalId};\n@@ -89,7 +89,7 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n         self.owner = Some(owner);\n         walk(self);\n \n-        if owner.local_def_index == CRATE_DEF_INDEX {\n+        if owner == CRATE_DEF_ID {\n             return;\n         }\n "}, {"sha": "35a858cb86c3f1851f40e4b266c2571bf0fc5342", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::hir_id::CRATE_HIR_ID;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{FieldDef, Generics, HirId, Item, TraitRef, Ty, TyKind, Variant};\n@@ -703,7 +703,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n                 let Some(cnum) = self.tcx.extern_mod_stmt_cnum(item.def_id) else {\n                     return;\n                 };\n-                let def_id = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n+                let def_id = cnum.as_def_id();\n                 self.tcx.check_stability(def_id, Some(item.hir_id()), item.span, None);\n             }\n "}, {"sha": "b20aa7b53468aa0f329071cde63314849288ccc1", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -1,7 +1,7 @@\n use measureme::{StringComponent, StringId};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::SelfProfiler;\n-use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathData;\n use rustc_middle::ty::{TyCtxt, WithOptConstParam};\n use rustc_query_system::query::QueryCache;\n@@ -143,7 +143,7 @@ impl SpecIntoSelfProfilingString for CrateNum {\n         &self,\n         builder: &mut QueryKeyStringBuilder<'_, '_, '_>,\n     ) -> StringId {\n-        builder.def_id_to_string_id(DefId { krate: *self, index: CRATE_DEF_INDEX })\n+        builder.def_id_to_string_id(self.as_def_id())\n     }\n }\n "}, {"sha": "d97d9199b77eed1f4c7b6bd3d8bf700697095973", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -23,7 +23,7 @@ use rustc_errors::{struct_span_err, Applicability};\n use rustc_expand::base::SyntaxExtension;\n use rustc_expand::expand::AstFragment;\n use rustc_hir::def::{self, *};\n-use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID};\n use rustc_metadata::creader::LoadedMacro;\n use rustc_middle::bug;\n use rustc_middle::metadata::ModChild;\n@@ -140,8 +140,8 @@ impl<'a> Resolver<'a> {\n                     let parent = def_key.parent.map(|index| {\n                         self.get_nearest_non_block_module(DefId { index, krate: def_id.krate })\n                     });\n-                    let name = if def_id.index == CRATE_DEF_INDEX {\n-                        self.cstore().crate_name(def_id.krate)\n+                    let name = if let Some(cnum) = def_id.as_crate_root() {\n+                        self.cstore().crate_name(cnum)\n                     } else {\n                         def_key.disambiguated_data.data.get_opt_name().expect(\"module without name\")\n                     };\n@@ -250,7 +250,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         match vis.kind {\n             ast::VisibilityKind::Public => Ok(ty::Visibility::Public),\n             ast::VisibilityKind::Crate(..) => {\n-                Ok(ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)))\n+                Ok(ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id()))\n             }\n             ast::VisibilityKind::Inherited => {\n                 Ok(match self.parent_scope.module.kind {\n@@ -758,7 +758,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                     let mut ctor_vis = if vis == ty::Visibility::Public\n                         && self.r.session.contains_name(&item.attrs, sym::non_exhaustive)\n                     {\n-                        ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX))\n+                        ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id())\n                     } else {\n                         vis\n                     };\n@@ -1107,7 +1107,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 root_span: span,\n                 span,\n                 module_path: Vec::new(),\n-                vis: Cell::new(ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX))),\n+                vis: Cell::new(ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id())),\n                 used: Cell::new(false),\n             })\n         };\n@@ -1243,7 +1243,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             let vis = if is_macro_export {\n                 ty::Visibility::Public\n             } else {\n-                ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX))\n+                ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id())\n             };\n             let binding = (res, vis, span, expansion).to_name_binding(self.r.arenas);\n             self.r.set_binding_parent_module(binding, parent_scope.module);\n@@ -1489,7 +1489,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         let ctor_vis = if vis == ty::Visibility::Public\n             && self.r.session.contains_name(&variant.attrs, sym::non_exhaustive)\n         {\n-            ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX))\n+            ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id())\n         } else {\n             vis\n         };"}, {"sha": "899980a4c08872a103877052297b4c8fbb79537a", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -10,7 +10,7 @@ use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed\n use rustc_feature::BUILTIN_ATTRIBUTES;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind, PerNS};\n-use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::PrimTy;\n use rustc_middle::bug;\n use rustc_middle::ty::DefIdTree;\n@@ -1167,7 +1167,7 @@ impl<'a> Resolver<'a> {\n                 }\n                 Scope::ExternPrelude => {\n                     suggestions.extend(this.extern_prelude.iter().filter_map(|(ident, _)| {\n-                        let res = Res::Def(DefKind::Mod, DefId::local(CRATE_DEF_INDEX));\n+                        let res = Res::Def(DefKind::Mod, CRATE_DEF_ID.to_def_id());\n                         filter_fn(res).then_some(TypoSuggestion::typo_from_res(ident.name, res))\n                     }));\n                 }"}, {"sha": "591bad70840a4ec7009eb274f7c3a5b17fda1c8b", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -19,7 +19,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::DiagnosticId;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, DefKind, PartialRes, PerNS};\n-use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_ID};\n use rustc_hir::{PrimTy, TraitCandidate};\n use rustc_middle::ty::DefIdTree;\n use rustc_middle::{bug, span_bug};\n@@ -2751,7 +2751,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 // trait to resolve.  In that case, we leave the `B`\n                 // segment to be resolved by type-check.\n                 return Ok(Some(PartialRes::with_unresolved_segments(\n-                    Res::Def(DefKind::Mod, DefId::local(CRATE_DEF_INDEX)),\n+                    Res::Def(DefKind::Mod, CRATE_DEF_ID.to_def_id()),\n                     path.len(),\n                 )));\n             }"}, {"sha": "d77cc917e2f9a2035c05fd4d3b7b303c4c19db7c", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -20,7 +20,7 @@ use rustc_errors::{\n use rustc_hir as hir;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind};\n-use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::PrimTy;\n use rustc_session::parse::feature_err;\n use rustc_span::edition::Edition;\n@@ -352,7 +352,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 }\n             })\n             .collect::<Vec<_>>();\n-        let crate_def_id = DefId::local(CRATE_DEF_INDEX);\n+        let crate_def_id = CRATE_DEF_ID.to_def_id();\n         if candidates.is_empty() && is_expected(Res::Def(DefKind::Enum, crate_def_id)) {\n             let mut enum_candidates: Vec<_> = self\n                 .r\n@@ -1332,10 +1332,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                             names.extend(extern_prelude.iter().flat_map(|(ident, _)| {\n                                 self.r.crate_loader.maybe_process_path_extern(ident.name).and_then(\n                                     |crate_id| {\n-                                        let crate_mod = Res::Def(\n-                                            DefKind::Mod,\n-                                            DefId { krate: crate_id, index: CRATE_DEF_INDEX },\n-                                        );\n+                                        let crate_mod =\n+                                            Res::Def(DefKind::Mod, crate_id.as_def_id());\n \n                                         if filter_fn(crate_mod) {\n                                             Some(TypoSuggestion::typo_from_res("}, {"sha": "4dfb7aef86f5a7f01c63e52e7b751777edd3df71", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -38,7 +38,7 @@ use rustc_expand::base::{DeriveResolutions, SyntaxExtension, SyntaxExtensionKind\n use rustc_hir::def::Namespace::*;\n use rustc_hir::def::{self, CtorOf, DefKind, PartialRes};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefPathHash, LocalDefId};\n-use rustc_hir::def_id::{CRATE_DEF_ID, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPathData, Definitions};\n use rustc_hir::TraitCandidate;\n use rustc_index::vec::IndexVec;\n@@ -796,7 +796,7 @@ impl<'a> NameBinding<'a> {\n             NameBindingKind::Module(&ModuleData {\n                 kind: ModuleKind::Def(DefKind::Mod, def_id, _),\n                 ..\n-            }) => def_id.index == CRATE_DEF_INDEX,\n+            }) => def_id.is_crate_root(),\n             _ => false,\n         }\n     }\n@@ -1248,18 +1248,17 @@ impl<'a> Resolver<'a> {\n         );\n \n         let definitions = Definitions::new(session.local_stable_crate_id(), krate.spans.inner_span);\n-        let root = definitions.get_root_def();\n \n         let mut visibilities = FxHashMap::default();\n         visibilities.insert(CRATE_DEF_ID, ty::Visibility::Public);\n \n         let mut def_id_to_node_id = IndexVec::default();\n-        assert_eq!(def_id_to_node_id.push(CRATE_NODE_ID), root);\n+        assert_eq!(def_id_to_node_id.push(CRATE_NODE_ID), CRATE_DEF_ID);\n         let mut node_id_to_def_id = FxHashMap::default();\n-        node_id_to_def_id.insert(CRATE_NODE_ID, root);\n+        node_id_to_def_id.insert(CRATE_NODE_ID, CRATE_DEF_ID);\n \n         let mut invocation_parents = FxHashMap::default();\n-        invocation_parents.insert(LocalExpnId::ROOT, (root, ImplTraitContext::Existential));\n+        invocation_parents.insert(LocalExpnId::ROOT, (CRATE_DEF_ID, ImplTraitContext::Existential));\n \n         let mut extern_prelude: FxHashMap<Ident, ExternPreludeEntry<'_>> = session\n             .opts"}, {"sha": "86a078f4a38583b3a47f7a6fffe73c21bf0fe7bf", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 0, "deletions": 116, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -15,8 +15,6 @@ use rustc_target::abi::{Align, TargetDataLayout};\n use rustc_target::spec::{LinkerFlavor, SplitDebuginfo, Target, TargetTriple, TargetWarnings};\n use rustc_target::spec::{PanicStrategy, SanitizerSet, TARGETS};\n \n-use rustc_serialize::json;\n-\n use crate::parse::{CrateCheckConfig, CrateConfig};\n use rustc_feature::UnstableFeatures;\n use rustc_span::edition::{Edition, DEFAULT_EDITION, EDITION_NAME_LIST, LATEST_STABLE_EDITION};\n@@ -460,9 +458,6 @@ impl OutputTypes {\n #[derive(Clone)]\n pub struct Externs(BTreeMap<String, ExternEntry>);\n \n-#[derive(Clone)]\n-pub struct ExternDepSpecs(BTreeMap<String, ExternDepSpec>);\n-\n #[derive(Clone, Debug)]\n pub struct ExternEntry {\n     pub location: ExternLocation,\n@@ -494,27 +489,6 @@ pub enum ExternLocation {\n     ExactPaths(BTreeSet<CanonicalizedPath>),\n }\n \n-/// Supplied source location of a dependency - for example in a build specification\n-/// file like Cargo.toml. We support several syntaxes: if it makes sense to reference\n-/// a file and line, then the build system can specify that. On the other hand, it may\n-/// make more sense to have an arbitrary raw string.\n-#[derive(Clone, PartialEq)]\n-pub enum ExternDepSpec {\n-    /// Raw string\n-    Raw(String),\n-    /// Raw data in json format\n-    Json(json::Json),\n-}\n-\n-impl<'a> From<&'a ExternDepSpec> for rustc_lint_defs::ExternDepSpec {\n-    fn from(from: &'a ExternDepSpec) -> Self {\n-        match from {\n-            ExternDepSpec::Raw(s) => rustc_lint_defs::ExternDepSpec::Raw(s.clone()),\n-            ExternDepSpec::Json(json) => rustc_lint_defs::ExternDepSpec::Json(json.clone()),\n-        }\n-    }\n-}\n-\n impl Externs {\n     /// Used for testing.\n     pub fn new(data: BTreeMap<String, ExternEntry>) -> Externs {\n@@ -547,25 +521,6 @@ impl ExternEntry {\n     }\n }\n \n-impl ExternDepSpecs {\n-    pub fn new(data: BTreeMap<String, ExternDepSpec>) -> ExternDepSpecs {\n-        ExternDepSpecs(data)\n-    }\n-\n-    pub fn get(&self, key: &str) -> Option<&ExternDepSpec> {\n-        self.0.get(key)\n-    }\n-}\n-\n-impl fmt::Display for ExternDepSpec {\n-    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self {\n-            ExternDepSpec::Raw(raw) => fmt.write_str(raw),\n-            ExternDepSpec::Json(json) => json::as_json(json).fmt(fmt),\n-        }\n-    }\n-}\n-\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum PrintRequest {\n     FileNames,\n@@ -785,7 +740,6 @@ impl Default for Options {\n             cg: Default::default(),\n             error_format: ErrorOutputType::default(),\n             externs: Externs(BTreeMap::new()),\n-            extern_dep_specs: ExternDepSpecs(BTreeMap::new()),\n             crate_name: None,\n             libs: Vec::new(),\n             unstable_features: UnstableFeatures::Disallow,\n@@ -1454,12 +1408,6 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n             \"Specify where an external rust library is located\",\n             \"NAME[=PATH]\",\n         ),\n-        opt::multi_s(\n-            \"\",\n-            \"extern-location\",\n-            \"Location where an external crate dependency is specified\",\n-            \"NAME=LOCATION\",\n-        ),\n         opt::opt_s(\"\", \"sysroot\", \"Override the system root\", \"PATH\"),\n         opt::multi(\"Z\", \"\", \"Set internal debugging options\", \"FLAG\"),\n         opt::opt_s(\n@@ -2221,68 +2169,6 @@ pub fn parse_externs(\n     Externs(externs)\n }\n \n-fn parse_extern_dep_specs(\n-    matches: &getopts::Matches,\n-    debugging_opts: &DebuggingOptions,\n-    error_format: ErrorOutputType,\n-) -> ExternDepSpecs {\n-    let is_unstable_enabled = debugging_opts.unstable_options;\n-    let mut map = BTreeMap::new();\n-\n-    for arg in matches.opt_strs(\"extern-location\") {\n-        if !is_unstable_enabled {\n-            early_error(\n-                error_format,\n-                \"`--extern-location` option is unstable: set `-Z unstable-options`\",\n-            );\n-        }\n-\n-        let mut parts = arg.splitn(2, '=');\n-        let name = parts.next().unwrap_or_else(|| {\n-            early_error(error_format, \"`--extern-location` value must not be empty\")\n-        });\n-        let loc = parts.next().unwrap_or_else(|| {\n-            early_error(\n-                error_format,\n-                &format!(\"`--extern-location`: specify location for extern crate `{name}`\"),\n-            )\n-        });\n-\n-        let locparts: Vec<_> = loc.split(':').collect();\n-        let spec = match &locparts[..] {\n-            [\"raw\", ..] => {\n-                // Don't want `:` split string\n-                let raw = loc.splitn(2, ':').nth(1).unwrap_or_else(|| {\n-                    early_error(error_format, \"`--extern-location`: missing `raw` location\")\n-                });\n-                ExternDepSpec::Raw(raw.to_string())\n-            }\n-            [\"json\", ..] => {\n-                // Don't want `:` split string\n-                let raw = loc.splitn(2, ':').nth(1).unwrap_or_else(|| {\n-                    early_error(error_format, \"`--extern-location`: missing `json` location\")\n-                });\n-                let json = json::from_str(raw).unwrap_or_else(|_| {\n-                    early_error(\n-                        error_format,\n-                        &format!(\"`--extern-location`: malformed json location `{raw}`\"),\n-                    )\n-                });\n-                ExternDepSpec::Json(json)\n-            }\n-            [bad, ..] => early_error(\n-                error_format,\n-                &format!(\"unknown location type `{bad}`: use `raw` or `json`\"),\n-            ),\n-            [] => early_error(error_format, \"missing location specification\"),\n-        };\n-\n-        map.insert(name.to_string(), spec);\n-    }\n-\n-    ExternDepSpecs::new(map)\n-}\n-\n fn parse_remap_path_prefix(\n     matches: &getopts::Matches,\n     debugging_opts: &DebuggingOptions,\n@@ -2525,7 +2411,6 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     }\n \n     let externs = parse_externs(matches, &debugging_opts, error_format);\n-    let extern_dep_specs = parse_extern_dep_specs(matches, &debugging_opts, error_format);\n \n     let crate_name = matches.opt_str(\"crate-name\");\n \n@@ -2601,7 +2486,6 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         error_format,\n         externs,\n         unstable_features: UnstableFeatures::from_environment(crate_name.as_deref()),\n-        extern_dep_specs,\n         crate_name,\n         libs,\n         debug_assertions,"}, {"sha": "df65409a8a063b1c7e87994b5d2a0ed31f93f939", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -183,7 +183,6 @@ top_level_options!(\n         borrowck_mode: BorrowckMode [UNTRACKED],\n         cg: CodegenOptions [SUBSTRUCT],\n         externs: Externs [UNTRACKED],\n-        extern_dep_specs: ExternDepSpecs [UNTRACKED],\n         crate_name: Option<String> [TRACKED],\n         /// Indicates how the compiler should treat unstable features.\n         unstable_features: UnstableFeatures [TRACKED],"}, {"sha": "d5f806308cf41bbca3b16ea67cd7f1fe77278fd5", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -283,8 +283,19 @@ impl DefId {\n         self.as_local().unwrap_or_else(|| panic!(\"DefId::expect_local: `{:?}` isn't local\", self))\n     }\n \n+    #[inline]\n+    pub fn is_crate_root(self) -> bool {\n+        self.index == CRATE_DEF_INDEX\n+    }\n+\n+    #[inline]\n+    pub fn as_crate_root(self) -> Option<CrateNum> {\n+        if self.is_crate_root() { Some(self.krate) } else { None }\n+    }\n+\n+    #[inline]\n     pub fn is_top_level_module(self) -> bool {\n-        self.is_local() && self.index == CRATE_DEF_INDEX\n+        self.is_local() && self.is_crate_root()\n     }\n }\n \n@@ -357,7 +368,7 @@ impl LocalDefId {\n \n     #[inline]\n     pub fn is_top_level_module(self) -> bool {\n-        self.local_def_index == CRATE_DEF_INDEX\n+        self == CRATE_DEF_ID\n     }\n }\n "}, {"sha": "0c1ca65c48f6adb9230785eb5e494973c04cc70c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 160, "deletions": 40, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -19,9 +19,11 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind, Node};\n+use rustc_middle::hir::map;\n use rustc_middle::ty::{\n     self, suggest_arbitrary_trait_bound, suggest_constraining_type_param, AdtKind, DefIdTree,\n-    Infer, InferTy, ToPredicate, Ty, TyCtxt, TypeFoldable,\n+    GeneratorDiagnosticData, GeneratorInteriorTypeCause, Infer, InferTy, ToPredicate, Ty, TyCtxt,\n+    TypeFoldable,\n };\n use rustc_middle::ty::{TypeAndMut, TypeckResults};\n use rustc_session::Limit;\n@@ -44,6 +46,123 @@ pub enum GeneratorInteriorOrUpvar {\n     Upvar(Span),\n }\n \n+// This type provides a uniform interface to retrieve data on generators, whether it originated from\n+// the local crate being compiled or from a foreign crate.\n+#[derive(Debug)]\n+pub enum GeneratorData<'tcx, 'a> {\n+    Local(&'a TypeckResults<'tcx>),\n+    Foreign(&'tcx GeneratorDiagnosticData<'tcx>),\n+}\n+\n+impl<'tcx, 'a> GeneratorData<'tcx, 'a> {\n+    // Try to get information about variables captured by the generator that matches a type we are\n+    // looking for with `ty_matches` function. We uses it to find upvar which causes a failure to\n+    // meet an obligation\n+    fn try_get_upvar_span<F>(\n+        &self,\n+        infer_context: &InferCtxt<'a, 'tcx>,\n+        generator_did: DefId,\n+        ty_matches: F,\n+    ) -> Option<GeneratorInteriorOrUpvar>\n+    where\n+        F: Fn(ty::Binder<'tcx, Ty<'tcx>>) -> bool,\n+    {\n+        match self {\n+            GeneratorData::Local(typeck_results) => {\n+                infer_context.tcx.upvars_mentioned(generator_did).and_then(|upvars| {\n+                    upvars.iter().find_map(|(upvar_id, upvar)| {\n+                        let upvar_ty = typeck_results.node_type(*upvar_id);\n+                        let upvar_ty = infer_context.resolve_vars_if_possible(upvar_ty);\n+                        if ty_matches(ty::Binder::dummy(upvar_ty)) {\n+                            Some(GeneratorInteriorOrUpvar::Upvar(upvar.span))\n+                        } else {\n+                            None\n+                        }\n+                    })\n+                })\n+            }\n+            GeneratorData::Foreign(_) => None,\n+        }\n+    }\n+\n+    // Try to get the span of a type being awaited on that matches the type we are looking with the\n+    // `ty_matches` function. We uses it to find awaited type which causes a failure to meet an\n+    // obligation\n+    fn get_from_await_ty<F>(\n+        &self,\n+        visitor: AwaitsVisitor,\n+        hir: map::Map<'tcx>,\n+        ty_matches: F,\n+    ) -> Option<Span>\n+    where\n+        F: Fn(ty::Binder<'tcx, Ty<'tcx>>) -> bool,\n+    {\n+        match self {\n+            GeneratorData::Local(typeck_results) => visitor\n+                .awaits\n+                .into_iter()\n+                .map(|id| hir.expect_expr(id))\n+                .find(|await_expr| {\n+                    ty_matches(ty::Binder::dummy(typeck_results.expr_ty_adjusted(&await_expr)))\n+                })\n+                .map(|expr| expr.span),\n+            GeneratorData::Foreign(generator_diagnostic_data) => visitor\n+                .awaits\n+                .into_iter()\n+                .map(|id| hir.expect_expr(id))\n+                .find(|await_expr| {\n+                    ty_matches(ty::Binder::dummy(\n+                        generator_diagnostic_data\n+                            .adjustments\n+                            .get(&await_expr.hir_id.local_id)\n+                            .map_or::<&[ty::adjustment::Adjustment<'tcx>], _>(&[], |a| &a[..])\n+                            .last()\n+                            .map_or_else::<Ty<'tcx>, _, _>(\n+                                || {\n+                                    generator_diagnostic_data\n+                                        .nodes_types\n+                                        .get(&await_expr.hir_id.local_id)\n+                                        .cloned()\n+                                        .unwrap_or_else(|| {\n+                                            bug!(\n+                                                \"node_type: no type for node `{}`\",\n+                                                ty::tls::with(|tcx| tcx\n+                                                    .hir()\n+                                                    .node_to_string(await_expr.hir_id))\n+                                            )\n+                                        })\n+                                },\n+                                |adj| adj.target,\n+                            ),\n+                    ))\n+                })\n+                .map(|expr| expr.span),\n+        }\n+    }\n+\n+    /// Get the type, expression, span and optional scope span of all types\n+    /// that are live across the yield of this generator\n+    fn get_generator_interior_types(\n+        &self,\n+    ) -> ty::Binder<'tcx, &Vec<GeneratorInteriorTypeCause<'tcx>>> {\n+        match self {\n+            GeneratorData::Local(typeck_result) => typeck_result.generator_interior_types.as_ref(),\n+            GeneratorData::Foreign(generator_diagnostic_data) => {\n+                generator_diagnostic_data.generator_interior_types.as_ref()\n+            }\n+        }\n+    }\n+\n+    // Used to get the source of the data, note we don't have as much information for generators\n+    // originated from foreign crates\n+    fn is_foreign(&self) -> bool {\n+        match self {\n+            GeneratorData::Local(_) => false,\n+            GeneratorData::Foreign(_) => true,\n+        }\n+    }\n+}\n+\n // This trait is public to expose the diagnostics methods to clippy.\n pub trait InferCtxtExt<'tcx> {\n     fn suggest_restricting_param_bound(\n@@ -152,7 +271,7 @@ pub trait InferCtxtExt<'tcx> {\n         err: &mut Diagnostic,\n         interior_or_upvar_span: GeneratorInteriorOrUpvar,\n         interior_extra_info: Option<(Option<Span>, Span, Option<hir::HirId>, Option<Span>)>,\n-        inner_generator_body: Option<&hir::Body<'tcx>>,\n+        is_async: bool,\n         outer_generator: Option<DefId>,\n         trait_pred: ty::TraitPredicate<'tcx>,\n         target_ty: Ty<'tcx>,\n@@ -1642,6 +1761,17 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             .map(|def_id| hir.local_def_id_to_hir_id(def_id))\n             .and_then(|hir_id| hir.maybe_body_owned_by(hir_id))\n             .map(|body_id| hir.body(body_id));\n+        let is_async = match generator_did.as_local() {\n+            Some(_) => generator_body\n+                .and_then(|body| body.generator_kind())\n+                .map(|generator_kind| matches!(generator_kind, hir::GeneratorKind::Async(..)))\n+                .unwrap_or(false),\n+            None => self\n+                .tcx\n+                .generator_kind(generator_did)\n+                .map(|generator_kind| matches!(generator_kind, hir::GeneratorKind::Async(..)))\n+                .unwrap_or(false),\n+        };\n         let mut visitor = AwaitsVisitor::default();\n         if let Some(body) = generator_body {\n             visitor.visit_body(body);\n@@ -1682,61 +1812,55 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         // type-checking; otherwise, get them by performing a query.  This is needed to avoid\n         // cycles. If we can't use resolved types because the generator comes from another crate,\n         // we still provide a targeted error but without all the relevant spans.\n-        let query_typeck_results;\n-        let typeck_results: Option<&TypeckResults<'tcx>> = match &in_progress_typeck_results {\n-            Some(t) if t.hir_owner.to_def_id() == generator_did_root => Some(&t),\n+        let generator_data: Option<GeneratorData<'tcx, '_>> = match &in_progress_typeck_results {\n+            Some(t) if t.hir_owner.to_def_id() == generator_did_root => {\n+                Some(GeneratorData::Local(&t))\n+            }\n             _ if generator_did.is_local() => {\n-                query_typeck_results = self.tcx.typeck(generator_did.expect_local());\n-                Some(&query_typeck_results)\n+                Some(GeneratorData::Local(self.tcx.typeck(generator_did.expect_local())))\n             }\n-            _ => None, // Do not ICE on closure typeck (#66868).\n+            _ => self\n+                .tcx\n+                .generator_diagnostic_data(generator_did)\n+                .as_ref()\n+                .map(|generator_diag_data| GeneratorData::Foreign(generator_diag_data)),\n         };\n-        if let Some(typeck_results) = typeck_results {\n-            if let Some(upvars) = self.tcx.upvars_mentioned(generator_did) {\n-                interior_or_upvar_span = upvars.iter().find_map(|(upvar_id, upvar)| {\n-                    let upvar_ty = typeck_results.node_type(*upvar_id);\n-                    let upvar_ty = self.resolve_vars_if_possible(upvar_ty);\n-                    if ty_matches(ty::Binder::dummy(upvar_ty)) {\n-                        Some(GeneratorInteriorOrUpvar::Upvar(upvar.span))\n-                    } else {\n-                        None\n-                    }\n-                });\n-            };\n+\n+        if let Some(generator_data) = generator_data.as_ref() {\n+            interior_or_upvar_span =\n+                generator_data.try_get_upvar_span(&self, generator_did, ty_matches);\n \n             // The generator interior types share the same binders\n             if let Some(cause) =\n-                typeck_results.generator_interior_types.as_ref().skip_binder().iter().find(\n+                generator_data.get_generator_interior_types().skip_binder().iter().find(\n                     |ty::GeneratorInteriorTypeCause { ty, .. }| {\n-                        ty_matches(typeck_results.generator_interior_types.rebind(*ty))\n+                        ty_matches(generator_data.get_generator_interior_types().rebind(*ty))\n                     },\n                 )\n             {\n-                // Check to see if any awaited expressions have the target type.\n-                let from_awaited_ty = visitor\n-                    .awaits\n-                    .into_iter()\n-                    .map(|id| hir.expect_expr(id))\n-                    .find(|await_expr| {\n-                        ty_matches(ty::Binder::dummy(typeck_results.expr_ty_adjusted(&await_expr)))\n-                    })\n-                    .map(|expr| expr.span);\n+                let from_awaited_ty = generator_data.get_from_await_ty(visitor, hir, ty_matches);\n                 let ty::GeneratorInteriorTypeCause { span, scope_span, yield_span, expr, .. } =\n                     cause;\n \n                 interior_or_upvar_span = Some(GeneratorInteriorOrUpvar::Interior(*span));\n                 interior_extra_info = Some((*scope_span, *yield_span, *expr, from_awaited_ty));\n-            };\n-        } else {\n-            interior_or_upvar_span = Some(GeneratorInteriorOrUpvar::Interior(span));\n+            }\n+\n+            if interior_or_upvar_span.is_none() && generator_data.is_foreign() {\n+                interior_or_upvar_span = Some(GeneratorInteriorOrUpvar::Interior(span));\n+            }\n         }\n \n         if let Some(interior_or_upvar_span) = interior_or_upvar_span {\n+            let typeck_results = generator_data.and_then(|generator_data| match generator_data {\n+                GeneratorData::Local(typeck_results) => Some(typeck_results),\n+                GeneratorData::Foreign(_) => None,\n+            });\n             self.note_obligation_cause_for_async_await(\n                 err,\n                 interior_or_upvar_span,\n                 interior_extra_info,\n-                generator_body,\n+                is_async,\n                 outer_generator,\n                 trait_ref,\n                 target_ty,\n@@ -1757,7 +1881,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         err: &mut Diagnostic,\n         interior_or_upvar_span: GeneratorInteriorOrUpvar,\n         interior_extra_info: Option<(Option<Span>, Span, Option<hir::HirId>, Option<Span>)>,\n-        inner_generator_body: Option<&hir::Body<'tcx>>,\n+        is_async: bool,\n         outer_generator: Option<DefId>,\n         trait_pred: ty::TraitPredicate<'tcx>,\n         target_ty: Ty<'tcx>,\n@@ -1767,10 +1891,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     ) {\n         let source_map = self.tcx.sess.source_map();\n \n-        let is_async = inner_generator_body\n-            .and_then(|body| body.generator_kind())\n-            .map(|generator_kind| matches!(generator_kind, hir::GeneratorKind::Async(..)))\n-            .unwrap_or(false);\n         let (await_or_yield, an_await_or_yield) =\n             if is_async { (\"await\", \"an await\") } else { (\"yield\", \"a yield\") };\n         let future_or_generator = if is_async { \"future\" } else { \"generator\" };"}, {"sha": "cf0c5703cd0ee7c724ff760b13ef9987ac79bab1", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 46, "deletions": 49, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -2042,63 +2042,60 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.tcx.sess,\n             span,\n             E0529,\n-            \"expected an array or slice, found `{}`\",\n-            expected_ty\n+            \"expected an array or slice, found `{expected_ty}`\"\n         );\n-        if let ty::Ref(_, ty, _) = expected_ty.kind() {\n-            if let ty::Array(..) | ty::Slice(..) = ty.kind() {\n-                err.help(\"the semantics of slice patterns changed recently; see issue #62254\");\n-            }\n+        if let ty::Ref(_, ty, _) = expected_ty.kind()\n+            && let ty::Array(..) | ty::Slice(..) = ty.kind()\n+        {\n+            err.help(\"the semantics of slice patterns changed recently; see issue #62254\");\n         } else if Autoderef::new(&self.infcx, self.param_env, self.body_id, span, expected_ty, span)\n             .any(|(ty, _)| matches!(ty.kind(), ty::Slice(..) | ty::Array(..)))\n+            && let (Some(span), true) = (ti.span, ti.origin_expr)\n+            && let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span)\n         {\n-            if let (Some(span), true) = (ti.span, ti.origin_expr) {\n-                if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n-                    let applicability = Autoderef::new(\n-                        &self.infcx,\n-                        self.param_env,\n-                        self.body_id,\n-                        span,\n-                        self.resolve_vars_if_possible(ti.expected),\n+            let ty = self.resolve_vars_if_possible(ti.expected);\n+            let is_slice_or_array_or_vector = self.is_slice_or_array_or_vector(&mut err, snippet.clone(), ty);\n+            match is_slice_or_array_or_vector.1.kind() {\n+                ty::Adt(adt_def, _)\n+                    if self.tcx.is_diagnostic_item(sym::Option, adt_def.did())\n+                        || self.tcx.is_diagnostic_item(sym::Result, adt_def.did()) =>\n+                {\n+                    // Slicing won't work here, but `.as_deref()` might (issue #91328).\n+                    err.span_suggestion(\n                         span,\n-                    )\n-                    .find_map(|(ty, _)| {\n-                        match ty.kind() {\n-                            ty::Adt(adt_def, _)\n-                                if self.tcx.is_diagnostic_item(sym::Option, adt_def.did())\n-                                    || self.tcx.is_diagnostic_item(sym::Result, adt_def.did()) =>\n-                            {\n-                                // Slicing won't work here, but `.as_deref()` might (issue #91328).\n-                                err.span_suggestion(\n-                                    span,\n-                                    \"consider using `as_deref` here\",\n-                                    format!(\"{}.as_deref()\", snippet),\n-                                    Applicability::MaybeIncorrect,\n-                                );\n-                                Some(None)\n-                            }\n-\n-                            ty::Slice(..) | ty::Array(..) => {\n-                                Some(Some(Applicability::MachineApplicable))\n-                            }\n-\n-                            _ => None,\n-                        }\n-                    })\n-                    .unwrap_or(Some(Applicability::MaybeIncorrect));\n-\n-                    if let Some(applicability) = applicability {\n-                        err.span_suggestion(\n-                            span,\n-                            \"consider slicing here\",\n-                            format!(\"{}[..]\", snippet),\n-                            applicability,\n-                        );\n-                    }\n+                        \"consider using `as_deref` here\",\n+                        format!(\"{snippet}.as_deref()\"),\n+                        Applicability::MaybeIncorrect,\n+                    );\n                 }\n+                _ => ()\n+            }\n+            if is_slice_or_array_or_vector.0 {\n+                err.span_suggestion(\n+                    span,\n+                    \"consider slicing here\",\n+                    format!(\"{snippet}[..]\"),\n+                    Applicability::MachineApplicable,\n+                );\n             }\n         }\n-        err.span_label(span, format!(\"pattern cannot match with input type `{}`\", expected_ty));\n+        err.span_label(span, format!(\"pattern cannot match with input type `{expected_ty}`\"));\n         err.emit();\n     }\n+\n+    fn is_slice_or_array_or_vector(\n+        &self,\n+        err: &mut Diagnostic,\n+        snippet: String,\n+        ty: Ty<'tcx>,\n+    ) -> (bool, Ty<'tcx>) {\n+        match ty.kind() {\n+            ty::Adt(adt_def, _) if self.tcx.is_diagnostic_item(sym::Vec, adt_def.did()) => {\n+                (true, ty)\n+            }\n+            ty::Ref(_, ty, _) => self.is_slice_or_array_or_vector(err, snippet, *ty),\n+            ty::Slice(..) | ty::Array(..) => (true, ty),\n+            _ => (false, ty),\n+        }\n+    }\n }"}, {"sha": "22c19243e7f53fca729e9e75503e51b59802355f", "filename": "library/alloc/src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/library%2Falloc%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/library%2Falloc%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fmacros.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -34,7 +34,7 @@\n /// be mindful of side effects.\n ///\n /// [`Vec`]: crate::vec::Vec\n-#[cfg(not(test))]\n+#[cfg(all(not(no_global_oom_handling), not(test)))]\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_diagnostic_item = \"vec_macro\"]\n@@ -55,7 +55,7 @@ macro_rules! vec {\n // required for this macro definition, is not available. Instead use the\n // `slice::into_vec`  function which is only available with cfg(test)\n // NB see the slice::hack module in slice.rs for more information\n-#[cfg(test)]\n+#[cfg(all(not(no_global_oom_handling), test))]\n macro_rules! vec {\n     () => (\n         $crate::vec::Vec::new()"}, {"sha": "ac1c47524fd0e2f65c295411645e47dfafcfe69a", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -817,7 +817,7 @@ def rustfmt_stamp(self):\n         return os.path.join(self.bin_root(True), '.rustfmt-stamp')\n \n     def llvm_stamp(self):\n-        \"\"\"Return the path for .rustfmt-stamp\n+        \"\"\"Return the path for .llvm-stamp\n \n         >>> rb = RustBuild()\n         >>> rb.build_dir = \"build\""}, {"sha": "1c80d5426bf75e6512aa5ccbc371a86395fa741d", "filename": "src/doc/unstable-book/src/compiler-flags/extern-location.md", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fextern-location.md", "raw_url": "https://github.com/rust-lang/rust/raw/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fextern-location.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fextern-location.md?ref=c102c5cfc60203c82460bdde2eecd19ccd8c125b", "patch": "@@ -1,31 +0,0 @@\n-# `extern-location`\n-\n-MCP for this feature: [#303]\n-\n-[#303]: https://github.com/rust-lang/compiler-team/issues/303\n-\n-------------------------\n-\n-The `unused-extern-crates` lint reports when a crate was specified on the rustc\n-command-line with `--extern name=path` but no symbols were referenced in it.\n-This is useful to know, but it's hard to map that back to a specific place a user\n-or tool could fix (ie, to remove the unused dependency).\n-\n-The `--extern-location` flag allows the build system to associate a location with\n-the `--extern` option, which is then emitted as part of the diagnostics. This location\n-is abstract and just round-tripped through rustc; the compiler never attempts to\n-interpret it in any way.\n-\n-There are two supported forms of location: a bare string, or a blob of json:\n-- `--extern-location foo=raw:Makefile:123` would associate the raw string `Makefile:123`\n-- `--extern-location 'bar=json:{\"target\":\"//my_project:library\",\"dep\":\"//common:serde\"}` would\n-  associate the json structure with `--extern bar=<path>`, indicating which dependency of\n-  which rule introduced the unused extern crate.\n-\n-This primarily intended to be used with tooling - for example a linter which can automatically\n-remove unused dependencies - rather than being directly presented to users.\n-\n-`raw` locations are presented as part of the normal rendered diagnostics and included in\n-the json form. `json` locations are only included in the json form of diagnostics,\n-as a `tool_metadata` field. For `raw` locations `tool_metadata` is simply a json string,\n-whereas `json` allows the rustc invoker to fully control its form and content."}, {"sha": "a070cef227252b5b3bf25001bba3fc2ebd82f249", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -15,7 +15,7 @@ use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n-use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_infer::infer::region_constraints::{Constraint, RegionConstraintData};\n use rustc_middle::middle::resolve_lifetime as rl;\n use rustc_middle::ty::fold::TypeFolder;\n@@ -1975,7 +1975,7 @@ fn clean_extern_crate(\n     // this is the ID of the `extern crate` statement\n     let cnum = cx.tcx.extern_mod_stmt_cnum(krate.def_id).unwrap_or(LOCAL_CRATE);\n     // this is the ID of the crate itself\n-    let crate_def_id = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n+    let crate_def_id = cnum.as_def_id();\n     let attrs = cx.tcx.hir().attrs(krate.hir_id());\n     let ty_vis = cx.tcx.visibility(krate.def_id);\n     let please_inline = ty_vis.is_public()\n@@ -2094,7 +2094,7 @@ fn clean_use_statement(\n     } else {\n         if inline_attr.is_none() {\n             if let Res::Def(DefKind::Mod, did) = path.res {\n-                if !did.is_local() && did.index == CRATE_DEF_INDEX {\n+                if !did.is_local() && did.is_crate_root() {\n                     // if we're `pub use`ing an extern crate root, don't inline it unless we\n                     // were specifically asked for it\n                     denied = true;"}, {"sha": "e30bc6e0a97eec369263796d729ce7daf2e5b565", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -20,7 +20,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{BodyId, Mutability};\n use rustc_index::vec::IndexVec;\n@@ -104,14 +104,6 @@ impl ItemId {\n             ItemId::Primitive(_, krate) => krate,\n         }\n     }\n-\n-    #[inline]\n-    crate fn index(self) -> Option<DefIndex> {\n-        match self {\n-            ItemId::DefId(id) => Some(id.index),\n-            _ => None,\n-        }\n-    }\n }\n \n impl From<DefId> for ItemId {\n@@ -160,7 +152,7 @@ impl ExternalCrate {\n \n     #[inline]\n     crate fn def_id(&self) -> DefId {\n-        DefId { krate: self.crate_num, index: CRATE_DEF_INDEX }\n+        self.crate_num.as_def_id()\n     }\n \n     crate fn src(&self, tcx: TyCtxt<'_>) -> FileName {\n@@ -217,7 +209,7 @@ impl ExternalCrate {\n \n         // Failing that, see if there's an attribute specifying where to find this\n         // external crate\n-        let did = DefId { krate: self.crate_num, index: CRATE_DEF_INDEX };\n+        let did = self.crate_num.as_def_id();\n         tcx.get_attrs(did)\n             .lists(sym::doc)\n             .filter(|a| a.has_name(sym::html_root_url))\n@@ -559,7 +551,7 @@ impl Item {\n     }\n \n     crate fn is_crate(&self) -> bool {\n-        self.is_mod() && self.item_id.as_def_id().map_or(false, |did| did.index == CRATE_DEF_INDEX)\n+        self.is_mod() && self.item_id.as_def_id().map_or(false, |did| did.is_crate_root())\n     }\n     crate fn is_mod(&self) -> bool {\n         self.type_() == ItemType::Module"}, {"sha": "b4d2772b31da2d2ea0c860d398157fa3b777f47a", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -1,7 +1,7 @@\n use std::mem;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::{sym, Symbol};\n@@ -302,7 +302,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                     // A crate has a module at its root, containing all items,\n                     // which should not be indexed. The crate-item itself is\n                     // inserted later on when serializing the search-index.\n-                    if item.item_id.index().map_or(false, |idx| idx != CRATE_DEF_INDEX) {\n+                    if item.item_id.as_def_id().map_or(false, |idx| !idx.is_crate_root()) {\n                         let desc = item.doc_value().map_or_else(String::new, |x| {\n                             short_markdown_summary(x.as_str(), &item.link_names(self.cache))\n                         });"}, {"sha": "6954e2363f5f04c495b9a4849b48ff0628688345", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -18,7 +18,6 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::ty;\n use rustc_middle::ty::DefIdTree;\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::def_id::CRATE_DEF_INDEX;\n use rustc_span::{sym, Symbol};\n use rustc_target::spec::abi::Abi;\n \n@@ -1312,7 +1311,7 @@ impl clean::Visibility {\n                 //                 visibility, so it shouldn't matter.\n                 let parent_module = find_nearest_parent_module(cx.tcx(), item_did.expect_def_id());\n \n-                if vis_did.index == CRATE_DEF_INDEX {\n+                if vis_did.is_crate_root() {\n                     \"pub(crate) \".to_owned()\n                 } else if parent_module == Some(vis_did) {\n                     // `pub(in foo)` where `foo` is the parent module\n@@ -1360,7 +1359,7 @@ impl clean::Visibility {\n                 //                 visibility, so it shouldn't matter.\n                 let parent_module = find_nearest_parent_module(tcx, item_did);\n \n-                if vis_did.index == CRATE_DEF_INDEX {\n+                if vis_did.is_crate_root() {\n                     \"pub(crate) \".to_owned()\n                 } else if parent_module == Some(vis_did) {\n                     // `pub(in foo)` where `foo` is the parent module"}, {"sha": "56b02cd848041236e30fab13cfc70fa0de4f62ff", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -10,7 +10,6 @@ use std::fmt;\n use rustc_ast::ast;\n use rustc_hir::{def::CtorKind, def_id::DefId};\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_span::def_id::CRATE_DEF_INDEX;\n use rustc_span::Pos;\n use rustc_target::spec::abi::Abi as RustcAbi;\n \n@@ -83,7 +82,7 @@ impl JsonRenderer<'_> {\n         match v {\n             Public => Visibility::Public,\n             Inherited => Visibility::Default,\n-            Restricted(did) if did.index == CRATE_DEF_INDEX => Visibility::Crate,\n+            Restricted(did) if did.is_crate_root() => Visibility::Crate,\n             Restricted(did) => Visibility::Restricted {\n                 parent: from_item_id(did.into()),\n                 path: self.tcx.def_path(did).to_string_no_crate_verbose(),"}, {"sha": "9723cdbe3345f3e1fc572f4c0cea5919de4b9457", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -1,6 +1,6 @@\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_middle::middle::privacy::{AccessLevel, AccessLevels};\n use rustc_middle::ty::TyCtxt;\n \n@@ -29,7 +29,7 @@ impl<'a, 'tcx> LibEmbargoVisitor<'a, 'tcx> {\n     }\n \n     crate fn visit_lib(&mut self, cnum: CrateNum) {\n-        let did = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n+        let did = cnum.as_def_id();\n         self.update(did, Some(AccessLevel::Public));\n         self.visit_mod(did);\n     }"}, {"sha": "d73772e5fa0d9b3616287e11efad261464f9dfbf", "filename": "src/test/ui/async-await/issues/issue-67893.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -7,5 +7,5 @@ fn g(_: impl Send) {}\n \n fn main() {\n     g(issue_67893::run())\n-    //~^ ERROR generator cannot be sent between threads safely\n+    //~^ ERROR future cannot be sent between threads safely\n }"}, {"sha": "316b6d06f932ac1189cbbe6370beb920c259a178", "filename": "src/test/ui/async-await/issues/issue-67893.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -1,10 +1,22 @@\n-error: generator cannot be sent between threads safely\n+error: future cannot be sent between threads safely\n   --> $DIR/issue-67893.rs:9:7\n    |\n LL |     g(issue_67893::run())\n-   |       ^^^^^^^^^^^^^^^^^^ generator is not `Send`\n+   |       ^^^^^^^^^^^^^^^^^^ future is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `MutexGuard<'_, ()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/auxiliary/issue_67893.rs:9:26\n+   |\n+LL |     f(*x.lock().unwrap()).await;\n+   |        ----------------- ^^^^^^ await occurs here, with `x.lock().unwrap()` maybe used later\n+   |        |\n+   |        has type `MutexGuard<'_, ()>` which is not `Send`\n+note: `x.lock().unwrap()` is later dropped here\n+  --> $DIR/auxiliary/issue_67893.rs:9:32\n+   |\n+LL |     f(*x.lock().unwrap()).await;\n+   |                                ^\n note: required by a bound in `g`\n   --> $DIR/issue-67893.rs:6:14\n    |"}, {"sha": "5b223a91f508f1c714bb34afe55bee50ad384797", "filename": "src/test/ui/suggestions/pattern-struct-with-slice-vec-field.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-struct-with-slice-vec-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-struct-with-slice-vec-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-struct-with-slice-vec-field.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -0,0 +1,35 @@\n+use std::ops::Deref;\n+\n+struct Foo {\n+    v: Vec<u32>,\n+}\n+\n+struct Bar {\n+    v: Vec<u32>,\n+}\n+\n+impl Deref for Bar {\n+    type Target = Vec<u32>;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.v\n+    }\n+}\n+\n+fn f(foo: &Foo) {\n+    match foo {\n+        Foo { v: [1, 2] } => {}\n+        //~^ ERROR expected an array or slice, found `Vec<u32>\n+        _ => {}\n+    }\n+}\n+\n+fn bar(bar: &Bar) {\n+    match bar {\n+        Bar { v: [1, 2] } => {}\n+        //~^ ERROR expected an array or slice, found `Vec<u32>\n+        _ => {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "5b48a8b18a5147cdd371b77e6dfa2060fd63d600", "filename": "src/test/ui/suggestions/pattern-struct-with-slice-vec-field.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-struct-with-slice-vec-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-struct-with-slice-vec-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-struct-with-slice-vec-field.stderr?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -0,0 +1,15 @@\n+error[E0529]: expected an array or slice, found `Vec<u32>`\n+  --> $DIR/pattern-struct-with-slice-vec-field.rs:21:18\n+   |\n+LL |         Foo { v: [1, 2] } => {}\n+   |                  ^^^^^^ pattern cannot match with input type `Vec<u32>`\n+\n+error[E0529]: expected an array or slice, found `Vec<u32>`\n+  --> $DIR/pattern-struct-with-slice-vec-field.rs:29:18\n+   |\n+LL |         Bar { v: [1, 2] } => {}\n+   |                  ^^^^^^ pattern cannot match with input type `Vec<u32>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0529`."}, {"sha": "e69df0359fd914203bf9dd4978fd2fef3b8a5aec", "filename": "src/test/ui/unused-crate-deps/extern-loc-bad-loctype.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-bad-loctype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-bad-loctype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-bad-loctype.rs?ref=c102c5cfc60203c82460bdde2eecd19ccd8c125b", "patch": "@@ -1,8 +0,0 @@\n-// --extern-location with bad location type\n-\n-// aux-crate:bar=bar.rs\n-// compile-flags:--extern-location bar=badloc:in-the-test-file -Z unstable-options\n-\n-#![warn(unused_crate_dependencies)]\n-\n-fn main() {}"}, {"sha": "12378f12557b7063e1da78e0d127ef02661cca6c", "filename": "src/test/ui/unused-crate-deps/extern-loc-bad-loctype.stderr", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-bad-loctype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-bad-loctype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-bad-loctype.stderr?ref=c102c5cfc60203c82460bdde2eecd19ccd8c125b", "patch": "@@ -1,2 +0,0 @@\n-error: unknown location type `badloc`: use `raw` or `json`\n-"}, {"sha": "a023f535b8198b6a20beefb91b2423a853e305dc", "filename": "src/test/ui/unused-crate-deps/extern-loc-defl-json.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-defl-json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-defl-json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-defl-json.rs?ref=c102c5cfc60203c82460bdde2eecd19ccd8c125b", "patch": "@@ -1,10 +0,0 @@\n-// Default extern location from name and path if one isn't specified\n-\n-// check-pass\n-// aux-crate:bar=bar.rs\n-// compile-flags:--error-format json\n-\n-#![warn(unused_crate_dependencies)]\n-//~^ WARNING external crate `bar` unused in\n-\n-fn main() {}"}, {"sha": "cee3f6c1495c772e34ce55ea027faaec71dacafa", "filename": "src/test/ui/unused-crate-deps/extern-loc-defl-json.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-defl-json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-defl-json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-defl-json.stderr?ref=c102c5cfc60203c82460bdde2eecd19ccd8c125b", "patch": "@@ -1,17 +0,0 @@\n-{\"message\":\"external crate `bar` unused in `extern_loc_defl_json`: remove the dependency or add `use bar as _;`\",\"code\":{\"code\":\"unused_crate_dependencies\",\"explanation\":null},\"level\":\"warning\",\"spans\":[{\"file_name\":\"$DIR/extern-loc-defl-json.rs\",\"byte_start\":146,\"byte_end\":146,\"line_start\":7,\"line_end\":7,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"#![warn(unused_crate_dependencies)]\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"the lint level is defined here\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"$DIR/extern-loc-defl-json.rs\",\"byte_start\":154,\"byte_end\":179,\"line_start\":7,\"line_end\":7,\"column_start\":9,\"column_end\":34,\"is_primary\":true,\"text\":[{\"text\":\"#![warn(unused_crate_dependencies)]\",\"highlight_start\":9,\"highlight_end\":34}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"remove unnecessary dependency `bar`\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"json extern location\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null,\"tool_metadata\":{\"name\":\"bar\"}}],\"rendered\":\"warning: external crate `bar` unused in `extern_loc_defl_json`: remove the dependency or add `use bar as _;`\n-  --> $DIR/extern-loc-defl-json.rs:7:1\n-   |\n-LL | #![warn(unused_crate_dependencies)]\n-   | ^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/extern-loc-defl-json.rs:7:9\n-   |\n-LL | #![warn(unused_crate_dependencies)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: remove unnecessary dependency `bar`\n-\n-\"}\n-{\"message\":\"1 warning emitted\",\"code\":null,\"level\":\"warning\",\"spans\":[],\"children\":[],\"rendered\":\"warning: 1 warning emitted\n-\n-\"}"}, {"sha": "aee6233e4283d40a68e3c22379111d6014d7834d", "filename": "src/test/ui/unused-crate-deps/extern-loc-json-bad-json.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-bad-json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-bad-json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-bad-json.rs?ref=c102c5cfc60203c82460bdde2eecd19ccd8c125b", "patch": "@@ -1,8 +0,0 @@\n-// --extern-location with a raw reference\n-\n-// aux-crate:bar=bar.rs\n-// compile-flags:--extern-location bar=json:[{\"malformed -Z unstable-options\n-\n-#![warn(unused_crate_dependencies)]\n-\n-fn main() {}"}, {"sha": "20d606372e0274bc57b6956f71f7a910c420b675", "filename": "src/test/ui/unused-crate-deps/extern-loc-json-bad-json.stderr", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-bad-json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-bad-json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-bad-json.stderr?ref=c102c5cfc60203c82460bdde2eecd19ccd8c125b", "patch": "@@ -1,2 +0,0 @@\n-error: `--extern-location`: malformed json location `[{\"malformed`\n-"}, {"sha": "c7988cd469e2d06a71e53af011d8b84cc6752195", "filename": "src/test/ui/unused-crate-deps/extern-loc-json-json.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-json.rs?ref=c102c5cfc60203c82460bdde2eecd19ccd8c125b", "patch": "@@ -1,10 +0,0 @@\n-// --extern-location with a raw reference\n-\n-// check-pass\n-// aux-crate:bar=bar.rs\n-// compile-flags:--extern-location bar=json:{\"key\":123,\"value\":{}} --error-format json -Z unstable-options\n-\n-#![warn(unused_crate_dependencies)]\n-//~^ WARNING external crate `bar` unused in\n-\n-fn main() {}"}, {"sha": "001ec6a25549a10d7c12626a9133230440761910", "filename": "src/test/ui/unused-crate-deps/extern-loc-json-json.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-json.stderr?ref=c102c5cfc60203c82460bdde2eecd19ccd8c125b", "patch": "@@ -1,17 +0,0 @@\n-{\"message\":\"external crate `bar` unused in `extern_loc_json_json`: remove the dependency or add `use bar as _;`\",\"code\":{\"code\":\"unused_crate_dependencies\",\"explanation\":null},\"level\":\"warning\",\"spans\":[{\"file_name\":\"$DIR/extern-loc-json-json.rs\",\"byte_start\":189,\"byte_end\":189,\"line_start\":7,\"line_end\":7,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"#![warn(unused_crate_dependencies)]\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"the lint level is defined here\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"$DIR/extern-loc-json-json.rs\",\"byte_start\":197,\"byte_end\":222,\"line_start\":7,\"line_end\":7,\"column_start\":9,\"column_end\":34,\"is_primary\":true,\"text\":[{\"text\":\"#![warn(unused_crate_dependencies)]\",\"highlight_start\":9,\"highlight_end\":34}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"remove unnecessary dependency `bar`\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"json extern location\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null,\"tool_metadata\":{\"key\":123,\"value\":{}}}],\"rendered\":\"warning: external crate `bar` unused in `extern_loc_json_json`: remove the dependency or add `use bar as _;`\n-  --> $DIR/extern-loc-json-json.rs:7:1\n-   |\n-LL | #![warn(unused_crate_dependencies)]\n-   | ^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/extern-loc-json-json.rs:7:9\n-   |\n-LL | #![warn(unused_crate_dependencies)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: remove unnecessary dependency `bar`\n-\n-\"}\n-{\"message\":\"1 warning emitted\",\"code\":null,\"level\":\"warning\",\"spans\":[],\"children\":[],\"rendered\":\"warning: 1 warning emitted\n-\n-\"}"}, {"sha": "c0d76c86b895c190566738a905579fdd1bbc9ca4", "filename": "src/test/ui/unused-crate-deps/extern-loc-json.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json.rs?ref=c102c5cfc60203c82460bdde2eecd19ccd8c125b", "patch": "@@ -1,10 +0,0 @@\n-// --extern-location with a raw reference\n-\n-// check-pass\n-// aux-crate:bar=bar.rs\n-// compile-flags:--extern-location bar=json:{\"key\":123,\"value\":{}} -Z unstable-options\n-\n-#![warn(unused_crate_dependencies)]\n-//~^ WARNING external crate `bar` unused in\n-\n-fn main() {}"}, {"sha": "a6bbc0da1c6b48e0568a08d5b151d083f1043149", "filename": "src/test/ui/unused-crate-deps/extern-loc-json.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json.stderr?ref=c102c5cfc60203c82460bdde2eecd19ccd8c125b", "patch": "@@ -1,15 +0,0 @@\n-warning: external crate `bar` unused in `extern_loc_json`: remove the dependency or add `use bar as _;`\n-  --> $DIR/extern-loc-json.rs:7:1\n-   |\n-LL | #![warn(unused_crate_dependencies)]\n-   | ^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/extern-loc-json.rs:7:9\n-   |\n-LL | #![warn(unused_crate_dependencies)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: remove unnecessary dependency `bar`\n-\n-warning: 1 warning emitted\n-"}, {"sha": "6ac558974d0c5476e6a606ffe3006a0b050607ac", "filename": "src/test/ui/unused-crate-deps/extern-loc-missing-loc.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loc.rs?ref=c102c5cfc60203c82460bdde2eecd19ccd8c125b", "patch": "@@ -1,8 +0,0 @@\n-// --extern-location with a raw reference\n-\n-// aux-crate:bar=bar.rs\n-// compile-flags:--extern-location bar -Zunstable-options\n-\n-#![warn(unused_crate_dependencies)]\n-\n-fn main() {}"}, {"sha": "4584fbfb67ff7839bc25ef3d068df95ee2a2c263", "filename": "src/test/ui/unused-crate-deps/extern-loc-missing-loc.stderr", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loc.stderr?ref=c102c5cfc60203c82460bdde2eecd19ccd8c125b", "patch": "@@ -1,2 +0,0 @@\n-error: `--extern-location`: specify location for extern crate `bar`\n-"}, {"sha": "3590b9c2812c772c60b0f4188700c9ab53b1130d", "filename": "src/test/ui/unused-crate-deps/extern-loc-missing-loctype.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loctype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loctype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loctype.rs?ref=c102c5cfc60203c82460bdde2eecd19ccd8c125b", "patch": "@@ -1,8 +0,0 @@\n-// --extern-location with no type\n-\n-// aux-crate:bar=bar.rs\n-// compile-flags:--extern-location bar=missing-loc-type -Z unstable-options\n-\n-#![warn(unused_crate_dependencies)]\n-\n-fn main() {}"}, {"sha": "d0c36ebeb142ef4eb6cec059e143b61947be9e4f", "filename": "src/test/ui/unused-crate-deps/extern-loc-missing-loctype.stderr", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loctype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loctype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loctype.stderr?ref=c102c5cfc60203c82460bdde2eecd19ccd8c125b", "patch": "@@ -1,2 +0,0 @@\n-error: unknown location type `missing-loc-type`: use `raw` or `json`\n-"}, {"sha": "64c3d77ce0826e0228ecb732e511e9f2923bc9d1", "filename": "src/test/ui/unused-crate-deps/extern-loc-raw-json.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-json.rs?ref=c102c5cfc60203c82460bdde2eecd19ccd8c125b", "patch": "@@ -1,10 +0,0 @@\n-// --extern-location with a raw reference\n-\n-// check-pass\n-// aux-crate:bar=bar.rs\n-// compile-flags:--extern-location bar=raw:in-the-test-file --error-format json -Z unstable-options\n-\n-#![warn(unused_crate_dependencies)]\n-//~^ WARNING external crate `bar` unused in\n-\n-fn main() {}"}, {"sha": "4083bd51835b03afa45ee530e3777a9cecb3455d", "filename": "src/test/ui/unused-crate-deps/extern-loc-raw-json.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-json.stderr?ref=c102c5cfc60203c82460bdde2eecd19ccd8c125b", "patch": "@@ -1,17 +0,0 @@\n-{\"message\":\"external crate `bar` unused in `extern_loc_raw_json`: remove the dependency or add `use bar as _;`\",\"code\":{\"code\":\"unused_crate_dependencies\",\"explanation\":null},\"level\":\"warning\",\"spans\":[{\"file_name\":\"$DIR/extern-loc-raw-json.rs\",\"byte_start\":182,\"byte_end\":182,\"line_start\":7,\"line_end\":7,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"#![warn(unused_crate_dependencies)]\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"the lint level is defined here\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"$DIR/extern-loc-raw-json.rs\",\"byte_start\":190,\"byte_end\":215,\"line_start\":7,\"line_end\":7,\"column_start\":9,\"column_end\":34,\"is_primary\":true,\"text\":[{\"text\":\"#![warn(unused_crate_dependencies)]\",\"highlight_start\":9,\"highlight_end\":34}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"remove unnecessary dependency `bar` at `in-the-test-file`\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"raw extern location\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/extern-loc-raw-json.rs\",\"byte_start\":0,\"byte_end\":0,\"line_start\":1,\"line_end\":1,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[],\"label\":null,\"suggested_replacement\":\"in-the-test-file\",\"suggestion_applicability\":\"Unspecified\",\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"json extern location\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null,\"tool_metadata\":\"in-the-test-file\"}],\"rendered\":\"warning: external crate `bar` unused in `extern_loc_raw_json`: remove the dependency or add `use bar as _;`\n-  --> $DIR/extern-loc-raw-json.rs:7:1\n-   |\n-LL | #![warn(unused_crate_dependencies)]\n-   | ^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/extern-loc-raw-json.rs:7:9\n-   |\n-LL | #![warn(unused_crate_dependencies)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: remove unnecessary dependency `bar` at `in-the-test-file`\n-\n-\"}\n-{\"message\":\"1 warning emitted\",\"code\":null,\"level\":\"warning\",\"spans\":[],\"children\":[],\"rendered\":\"warning: 1 warning emitted\n-\n-\"}"}, {"sha": "a9e7afbda31e75005f07fe0abfd2320721d54715", "filename": "src/test/ui/unused-crate-deps/extern-loc-raw-missing-loc.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-missing-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-missing-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-missing-loc.rs?ref=c102c5cfc60203c82460bdde2eecd19ccd8c125b", "patch": "@@ -1,8 +0,0 @@\n-// --extern-location with a raw reference\n-\n-// aux-crate:bar=bar.rs\n-// compile-flags:--extern-location bar=raw -Z unstable-options\n-\n-#![warn(unused_crate_dependencies)]\n-\n-fn main() {}"}, {"sha": "4b51266e4f6fad6cbde30e126439b729ae60b94d", "filename": "src/test/ui/unused-crate-deps/extern-loc-raw-missing-loc.stderr", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-missing-loc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-missing-loc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-missing-loc.stderr?ref=c102c5cfc60203c82460bdde2eecd19ccd8c125b", "patch": "@@ -1,2 +0,0 @@\n-error: `--extern-location`: missing `raw` location\n-"}, {"sha": "27d0975d01ada9b5c763ed047a31832cd427d5a5", "filename": "src/test/ui/unused-crate-deps/extern-loc-raw.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw.rs?ref=c102c5cfc60203c82460bdde2eecd19ccd8c125b", "patch": "@@ -1,10 +0,0 @@\n-// --extern-location with a raw reference\n-\n-// check-pass\n-// aux-crate:bar=bar.rs\n-// compile-flags:--extern-location bar=raw:in-the-test-file -Z unstable-options\n-\n-#![warn(unused_crate_dependencies)]\n-//~^ WARNING external crate `bar` unused in\n-\n-fn main() {}"}, {"sha": "2cdd00558667352aac003952997405b5f7252167", "filename": "src/test/ui/unused-crate-deps/extern-loc-raw.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c102c5cfc60203c82460bdde2eecd19ccd8c125b/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw.stderr?ref=c102c5cfc60203c82460bdde2eecd19ccd8c125b", "patch": "@@ -1,15 +0,0 @@\n-warning: external crate `bar` unused in `extern_loc_raw`: remove the dependency or add `use bar as _;`\n-  --> $DIR/extern-loc-raw.rs:7:1\n-   |\n-LL | #![warn(unused_crate_dependencies)]\n-   | ^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/extern-loc-raw.rs:7:9\n-   |\n-LL | #![warn(unused_crate_dependencies)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: remove unnecessary dependency `bar` at `in-the-test-file`\n-\n-warning: 1 warning emitted\n-"}, {"sha": "15833126bd6201ddda75e3b529eb26f8dc08473c", "filename": "src/test/ui/unused-crate-deps/libfib.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Ftest%2Fui%2Funused-crate-deps%2Flibfib.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Ftest%2Fui%2Funused-crate-deps%2Flibfib.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Flibfib.stderr?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -5,7 +5,6 @@ LL | pub fn fib(n: u32) -> Vec<u32> {\n    | ^\n    |\n    = note: requested on the command line with `-W unused-crate-dependencies`\n-   = help: remove unnecessary dependency `bar`\n \n warning: 1 warning emitted\n "}, {"sha": "c8c6c4507b0c51427136d656ba9de8cdbdcd3a43", "filename": "src/test/ui/unused-crate-deps/unused-aliases.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Ftest%2Fui%2Funused-crate-deps%2Funused-aliases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Ftest%2Fui%2Funused-crate-deps%2Funused-aliases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Funused-aliases.stderr?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -9,7 +9,6 @@ note: the lint level is defined here\n    |\n LL | #![warn(unused_crate_dependencies)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: remove unnecessary dependency `barbar`\n \n warning: 1 warning emitted\n "}, {"sha": "0d38315704b11fb25e6bc7be22774c0714d4f4d4", "filename": "src/test/ui/unused-crate-deps/warn-attr.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-attr.stderr?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -9,7 +9,6 @@ note: the lint level is defined here\n    |\n LL | #![warn(unused_crate_dependencies)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: remove unnecessary dependency `bar`\n \n warning: 1 warning emitted\n "}, {"sha": "65956461d643928fa5a319c7ae533f3dc7e15ded", "filename": "src/test/ui/unused-crate-deps/warn-cmdline-static.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline-static.stderr?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -5,7 +5,6 @@ LL | fn main() {}\n    | ^\n    |\n    = note: requested on the command line with `-W unused-crate-dependencies`\n-   = help: remove unnecessary dependency `bar`\n \n warning: 1 warning emitted\n "}, {"sha": "ea675ba9a1eb184560f8379ea4571e2d2b1e9ec4", "filename": "src/test/ui/unused-crate-deps/warn-cmdline.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline.stderr?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -5,7 +5,6 @@ LL | fn main() {}\n    | ^\n    |\n    = note: requested on the command line with `-W unused-crate-dependencies`\n-   = help: remove unnecessary dependency `bar`\n \n warning: 1 warning emitted\n "}, {"sha": "5816a95dcebffe63aa2a9410940e4c372a83260d", "filename": "src/tools/clippy/clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca19e09d302a4cbde14f9cb1bc109179dc824cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs?ref=4ca19e09d302a4cbde14f9cb1bc109179dc824cd", "patch": "@@ -10,7 +10,7 @@ use clippy_utils::diagnostics::span_lint;\n use rustc_ast::ast;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::ty;\n+use rustc_middle::ty::{self, DefIdTree};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::source_map::Span;\n@@ -114,8 +114,8 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n             hir::ItemKind::Fn(..) => {\n                 // ignore main()\n                 if it.ident.name == sym::main {\n-                    let def_key = cx.tcx.hir().def_key(it.def_id);\n-                    if def_key.parent == Some(hir::def_id::CRATE_DEF_INDEX) {\n+                    let at_root = cx.tcx.local_parent(it.def_id) == Some(CRATE_DEF_ID);\n+                    if at_root {\n                         return;\n                     }\n                 }"}]}