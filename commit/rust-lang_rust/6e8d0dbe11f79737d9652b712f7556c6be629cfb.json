{"sha": "6e8d0dbe11f79737d9652b712f7556c6be629cfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlOGQwZGJlMTFmNzk3MzdkOTY1MmI3MTJmNzU1NmM2YmU2MjljZmI=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-05-10T16:38:09Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-05-10T16:38:09Z"}, "message": "Add documentation", "tree": {"sha": "5b60a7272fe42d08fade3d617350c2ee1180e114", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b60a7272fe42d08fade3d617350c2ee1180e114"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e8d0dbe11f79737d9652b712f7556c6be629cfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e8d0dbe11f79737d9652b712f7556c6be629cfb", "html_url": "https://github.com/rust-lang/rust/commit/6e8d0dbe11f79737d9652b712f7556c6be629cfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e8d0dbe11f79737d9652b712f7556c6be629cfb/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2077c728c8c0a3d79fdede72e506fe9c77f72bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2077c728c8c0a3d79fdede72e506fe9c77f72bc", "html_url": "https://github.com/rust-lang/rust/commit/f2077c728c8c0a3d79fdede72e506fe9c77f72bc"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "cb06cbfcc7be02c517cbd9285e7bf12517b02c60", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6e8d0dbe11f79737d9652b712f7556c6be629cfb/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8d0dbe11f79737d9652b712f7556c6be629cfb/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=6e8d0dbe11f79737d9652b712f7556c6be629cfb", "patch": "@@ -565,6 +565,15 @@ impl CheckAttrVisitor<'tcx> {\n         true\n     }\n \n+    /// Checks `#[doc(inline)]`/`#[doc(no_inline)]` attributes. Returns `true` if valid.\n+    ///\n+    /// A doc inlining attribute is invalid if it is applied to a non-`use` item, or\n+    /// if there are conflicting attributes for one item.\n+    ///\n+    /// `specified_inline` is used to keep track of whether we have\n+    /// already seen an inlining attribute for this item.\n+    /// If so, `specified_inline` holds the value and the span of\n+    /// the first `inline`/`no_inline` attribute.\n     fn check_doc_inline(\n         &self,\n         attr: &Attribute,\n@@ -619,6 +628,7 @@ impl CheckAttrVisitor<'tcx> {\n         }\n     }\n \n+    /// Checks that an attribute is *not* used at the crate level. Returns `true` if valid.\n     fn check_attr_not_crate_level(\n         &self,\n         meta: &NestedMetaItem,\n@@ -641,6 +651,7 @@ impl CheckAttrVisitor<'tcx> {\n         true\n     }\n \n+    /// Checks that an attribute is used at the crate level. Returns `true` if valid.\n     fn check_attr_crate_level(\n         &self,\n         attr: &Attribute,\n@@ -683,6 +694,12 @@ impl CheckAttrVisitor<'tcx> {\n         true\n     }\n \n+    /// Runs various checks on `#[doc]` attributes. Returns `true` if valid.\n+    ///\n+    /// `specified_inline` should be initialized to `None` and kept for the scope\n+    /// of one item. Read the documentation of [`check_doc_inline`] for more information.\n+    ///\n+    /// [`check_doc_inline`]: Self::check_doc_inline\n     fn check_doc_attrs(\n         &self,\n         attr: &Attribute,"}]}