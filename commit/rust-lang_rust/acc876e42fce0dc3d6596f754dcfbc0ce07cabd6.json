{"sha": "acc876e42fce0dc3d6596f754dcfbc0ce07cabd6", "node_id": "C_kwDOAAsO6NoAKGFjYzg3NmU0MmZjZTBkYzNkNjU5NmY3NTRkY2ZiYzBjZTA3Y2FiZDY", "commit": {"author": {"name": "Markus Everling", "email": "markuseverling@gmail.com", "date": "2023-02-20T22:25:26Z"}, "committer": {"name": "Markus Everling", "email": "markuseverling@gmail.com", "date": "2023-02-20T22:25:26Z"}, "message": "Changes according to review", "tree": {"sha": "3614012db83ebf4333be412aa95af93feb1a0c24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3614012db83ebf4333be412aa95af93feb1a0c24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acc876e42fce0dc3d6596f754dcfbc0ce07cabd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acc876e42fce0dc3d6596f754dcfbc0ce07cabd6", "html_url": "https://github.com/rust-lang/rust/commit/acc876e42fce0dc3d6596f754dcfbc0ce07cabd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acc876e42fce0dc3d6596f754dcfbc0ce07cabd6/comments", "author": {"login": "Sp00ph", "id": 61327188, "node_id": "MDQ6VXNlcjYxMzI3MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/61327188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sp00ph", "html_url": "https://github.com/Sp00ph", "followers_url": "https://api.github.com/users/Sp00ph/followers", "following_url": "https://api.github.com/users/Sp00ph/following{/other_user}", "gists_url": "https://api.github.com/users/Sp00ph/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sp00ph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sp00ph/subscriptions", "organizations_url": "https://api.github.com/users/Sp00ph/orgs", "repos_url": "https://api.github.com/users/Sp00ph/repos", "events_url": "https://api.github.com/users/Sp00ph/events{/privacy}", "received_events_url": "https://api.github.com/users/Sp00ph/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Sp00ph", "id": 61327188, "node_id": "MDQ6VXNlcjYxMzI3MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/61327188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sp00ph", "html_url": "https://github.com/Sp00ph", "followers_url": "https://api.github.com/users/Sp00ph/followers", "following_url": "https://api.github.com/users/Sp00ph/following{/other_user}", "gists_url": "https://api.github.com/users/Sp00ph/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sp00ph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sp00ph/subscriptions", "organizations_url": "https://api.github.com/users/Sp00ph/orgs", "repos_url": "https://api.github.com/users/Sp00ph/repos", "events_url": "https://api.github.com/users/Sp00ph/events{/privacy}", "received_events_url": "https://api.github.com/users/Sp00ph/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e114a88bde098d1c057161aa252fa75d5739592", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e114a88bde098d1c057161aa252fa75d5739592", "html_url": "https://github.com/rust-lang/rust/commit/1e114a88bde098d1c057161aa252fa75d5739592"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "0be274a3822d3ac58608f3badfe556f7ee54d0a1", "filename": "library/alloc/src/collections/vec_deque/drain.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/acc876e42fce0dc3d6596f754dcfbc0ce07cabd6/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fdrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc876e42fce0dc3d6596f754dcfbc0ce07cabd6/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fdrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fdrain.rs?ref=acc876e42fce0dc3d6596f754dcfbc0ce07cabd6", "patch": "@@ -52,21 +52,22 @@ impl<'a, T, A: Allocator> Drain<'a, T, A> {\n         }\n     }\n \n-    // Only returns pointers to the slices, as that's\n-    // all we need to drop them. May only be called if `self.remaining != 0`.\n+    // Only returns pointers to the slices, as that's all we need\n+    // to drop them. May only be called if `self.remaining != 0`.\n     unsafe fn as_slices(&self) -> (*mut [T], *mut [T]) {\n         unsafe {\n             let deque = self.deque.as_ref();\n \n-            let start = self.idx;\n             // We know that `self.idx + self.remaining <= deque.len <= usize::MAX`, so this won't overflow.\n-            let end = start + self.remaining;\n+            let logical_remaining_range = self.idx..self.idx + self.remaining;\n \n-            // SAFETY: `start..end` represents the range of elements that\n+            // SAFETY: `logical_remaining_range` represents the\n+            // range into the logical buffer of elements that\n             // haven't been drained yet, so they're all initialized,\n             // and `slice::range(start..end, end) == start..end`,\n             // so the preconditions for `slice_ranges` are met.\n-            let (a_range, b_range) = deque.slice_ranges(start..end, end);\n+            let (a_range, b_range) =\n+                deque.slice_ranges(logical_remaining_range.clone(), logical_remaining_range.end);\n             (deque.buffer_range(a_range), deque.buffer_range(b_range))\n         }\n     }"}, {"sha": "40f31f1a194da4b5a6e16ed8d5501170ad6e728f", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/acc876e42fce0dc3d6596f754dcfbc0ce07cabd6/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc876e42fce0dc3d6596f754dcfbc0ce07cabd6/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=acc876e42fce0dc3d6596f754dcfbc0ce07cabd6", "patch": "@@ -1230,10 +1230,9 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// # Safety\n     ///\n     /// This function is always safe to call. For the resulting ranges to be valid\n-    /// ranges into the physical buffer, the caller must ensure that for all possible\n-    /// values of `range` and `len`, the result of calling `slice::range(range, ..len)`\n-    /// represents a valid range into the logical buffer, and that all elements\n-    /// in that range are initialized.\n+    /// ranges into the physical buffer, the caller must ensure that the result of\n+    /// calling `slice::range(range, ..len)` represents a valid range into the\n+    /// logical buffer, and that all elements in that range are initialized.\n     fn slice_ranges<R>(&self, range: R, len: usize) -> (Range<usize>, Range<usize>)\n     where\n         R: RangeBounds<usize>,\n@@ -1244,7 +1243,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         if len == 0 {\n             (0..0, 0..0)\n         } else {\n-            // `slice::range` guarantees that `start <= end <= self.len`.\n+            // `slice::range` guarantees that `start <= end <= len`.\n             // because `len != 0`, we know that `start < end`, so `start < len`\n             // and the indexing is valid.\n             let wrapped_start = self.to_physical_idx(start);"}]}