{"sha": "bee27eb4716ad9dfa0f873c46952f8a04b0ff85f", "node_id": "C_kwDOAAsO6NoAKGJlZTI3ZWI0NzE2YWQ5ZGZhMGY4NzNjNDY5NTJmOGEwNGIwZmY4NWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-18T10:31:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-18T10:31:41Z"}, "message": "Auto merge of #13632 - Veykril:scip, r=Veykril\n\nMake it more obvious which SCIP features we do not yet emit in code", "tree": {"sha": "e0dbc15525a2910484cbc64152fc10035c27c34f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0dbc15525a2910484cbc64152fc10035c27c34f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bee27eb4716ad9dfa0f873c46952f8a04b0ff85f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bee27eb4716ad9dfa0f873c46952f8a04b0ff85f", "html_url": "https://github.com/rust-lang/rust/commit/bee27eb4716ad9dfa0f873c46952f8a04b0ff85f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bee27eb4716ad9dfa0f873c46952f8a04b0ff85f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e162d5800a54320b3cdf88b15ec2eb6a89291585", "url": "https://api.github.com/repos/rust-lang/rust/commits/e162d5800a54320b3cdf88b15ec2eb6a89291585", "html_url": "https://github.com/rust-lang/rust/commit/e162d5800a54320b3cdf88b15ec2eb6a89291585"}, {"sha": "656d886ca8a37ac4b0df60f48d699584d3abca46", "url": "https://api.github.com/repos/rust-lang/rust/commits/656d886ca8a37ac4b0df60f48d699584d3abca46", "html_url": "https://github.com/rust-lang/rust/commit/656d886ca8a37ac4b0df60f48d699584d3abca46"}], "stats": {"total": 115, "additions": 68, "deletions": 47}, "files": [{"sha": "9edd045ab0716510309e3248ea8c15ce40d55f7f", "filename": "crates/rust-analyzer/src/cli/scip.rs", "status": "modified", "additions": 68, "deletions": 47, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/bee27eb4716ad9dfa0f873c46952f8a04b0ff85f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee27eb4716ad9dfa0f873c46952f8a04b0ff85f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs?ref=bee27eb4716ad9dfa0f873c46952f8a04b0ff85f", "patch": "@@ -47,30 +47,27 @@ impl flags::Scip {\n \n         let si = StaticIndex::compute(&analysis);\n \n-        let mut index = scip_types::Index {\n-            metadata: Some(scip_types::Metadata {\n-                version: scip_types::ProtocolVersion::UnspecifiedProtocolVersion.into(),\n-                tool_info: Some(scip_types::ToolInfo {\n-                    name: \"rust-analyzer\".to_owned(),\n-                    version: \"0.1\".to_owned(),\n-                    arguments: vec![],\n-                    ..Default::default()\n-                })\n-                .into(),\n-                project_root: format!(\n-                    \"file://{}\",\n-                    path.normalize()\n-                        .as_os_str()\n-                        .to_str()\n-                        .ok_or(anyhow::anyhow!(\"Unable to normalize project_root path\"))?\n-                        .to_string()\n-                ),\n-                text_document_encoding: scip_types::TextEncoding::UTF8.into(),\n-                ..Default::default()\n+        let metadata = scip_types::Metadata {\n+            version: scip_types::ProtocolVersion::UnspecifiedProtocolVersion.into(),\n+            tool_info: Some(scip_types::ToolInfo {\n+                name: \"rust-analyzer\".to_owned(),\n+                version: \"0.1\".to_owned(),\n+                arguments: vec![],\n+                special_fields: Default::default(),\n             })\n             .into(),\n-            ..Default::default()\n+            project_root: format!(\n+                \"file://{}\",\n+                path.normalize()\n+                    .as_os_str()\n+                    .to_str()\n+                    .ok_or(anyhow::anyhow!(\"Unable to normalize project_root path\"))?\n+                    .to_string()\n+            ),\n+            text_document_encoding: scip_types::TextEncoding::UTF8.into(),\n+            special_fields: Default::default(),\n         };\n+        let mut documents = Vec::new();\n \n         let mut symbols_emitted: HashSet<TokenId> = HashSet::default();\n         let mut tokens_to_symbol: HashMap<TokenId, String> = HashMap::new();\n@@ -95,53 +92,77 @@ impl flags::Scip {\n                 endings: LineEndings::Unix,\n             };\n \n-            let mut doc = scip_types::Document {\n-                relative_path,\n-                language: \"rust\".to_string(),\n-                ..Default::default()\n-            };\n+            let mut occurrences = Vec::new();\n+            let mut symbols = Vec::new();\n \n-            tokens.into_iter().for_each(|(range, id)| {\n+            tokens.into_iter().for_each(|(text_range, id)| {\n                 let token = si.tokens.get(id).unwrap();\n \n-                let mut occurrence = scip_types::Occurrence::default();\n-                occurrence.range = text_range_to_scip_range(&line_index, range);\n-                occurrence.symbol = tokens_to_symbol\n+                let range = text_range_to_scip_range(&line_index, text_range);\n+                let symbol = tokens_to_symbol\n                     .entry(id)\n                     .or_insert_with(|| {\n                         let symbol = token_to_symbol(&token).unwrap_or_else(&mut new_local_symbol);\n                         scip::symbol::format_symbol(symbol)\n                     })\n                     .clone();\n \n+                let mut symbol_roles = Default::default();\n+\n                 if let Some(def) = token.definition {\n-                    if def.range == range {\n-                        occurrence.symbol_roles |= scip_types::SymbolRole::Definition as i32;\n+                    if def.range == text_range {\n+                        symbol_roles |= scip_types::SymbolRole::Definition as i32;\n                     }\n \n                     if symbols_emitted.insert(id) {\n-                        let mut symbol_info = scip_types::SymbolInformation::default();\n-                        symbol_info.symbol = occurrence.symbol.clone();\n-                        if let Some(hover) = &token.hover {\n-                            if !hover.markup.as_str().is_empty() {\n-                                symbol_info.documentation = vec![hover.markup.as_str().to_string()];\n-                            }\n-                        }\n-\n-                        doc.symbols.push(symbol_info)\n+                        let documentation = token\n+                            .hover\n+                            .as_ref()\n+                            .map(|hover| hover.markup.as_str())\n+                            .filter(|it| !it.is_empty())\n+                            .map(|it| vec![it.to_owned()]);\n+                        let symbol_info = scip_types::SymbolInformation {\n+                            symbol: symbol.clone(),\n+                            documentation: documentation.unwrap_or_default(),\n+                            relationships: Vec::new(),\n+                            special_fields: Default::default(),\n+                        };\n+\n+                        symbols.push(symbol_info)\n                     }\n                 }\n \n-                doc.occurrences.push(occurrence);\n+                occurrences.push(scip_types::Occurrence {\n+                    range,\n+                    symbol,\n+                    symbol_roles,\n+                    override_documentation: Vec::new(),\n+                    syntax_kind: Default::default(),\n+                    diagnostics: Vec::new(),\n+                    special_fields: Default::default(),\n+                });\n             });\n \n-            if doc.occurrences.is_empty() {\n+            if occurrences.is_empty() {\n                 continue;\n             }\n \n-            index.documents.push(doc);\n+            documents.push(scip_types::Document {\n+                relative_path,\n+                language: \"rust\".to_string(),\n+                occurrences,\n+                symbols,\n+                special_fields: Default::default(),\n+            });\n         }\n \n+        let index = scip_types::Index {\n+            metadata: Some(metadata).into(),\n+            documents,\n+            external_symbols: Vec::new(),\n+            special_fields: Default::default(),\n+        };\n+\n         scip::write_message_to_file(\"index.scip\", index)\n             .map_err(|err| anyhow::anyhow!(\"Failed to write scip to file: {}\", err))?;\n \n@@ -181,7 +202,7 @@ fn new_descriptor_str(\n         name: name.to_string(),\n         disambiguator: \"\".to_string(),\n         suffix: suffix.into(),\n-        ..Default::default()\n+        special_fields: Default::default(),\n     }\n }\n \n@@ -232,11 +253,11 @@ fn token_to_symbol(token: &TokenStaticData) -> Option<scip_types::Symbol> {\n             manager: \"cargo\".to_string(),\n             name: package_name,\n             version: version.unwrap_or_else(|| \".\".to_string()),\n-            ..Default::default()\n+            special_fields: Default::default(),\n         })\n         .into(),\n         descriptors,\n-        ..Default::default()\n+        special_fields: Default::default(),\n     })\n }\n "}]}