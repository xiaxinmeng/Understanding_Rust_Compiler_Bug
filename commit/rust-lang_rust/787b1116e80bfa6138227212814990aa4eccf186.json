{"sha": "787b1116e80bfa6138227212814990aa4eccf186", "node_id": "C_kwDOAAsO6NoAKDc4N2IxMTE2ZTgwYmZhNjEzODIyNzIxMjgxNDk5MGFhNGVjY2YxODY", "commit": {"author": {"name": "Trevor Gross", "email": "tmgross@umich.edu", "date": "2023-02-06T20:01:40Z"}, "committer": {"name": "Trevor Gross", "email": "tmgross@umich.edu", "date": "2023-02-11T01:46:14Z"}, "message": "Rename atomic 'as_mut_ptr' to 'as_ptr' to match Cell (ref #66893)", "tree": {"sha": "f1320ee316737ef65b538b452a5af9aa2ec2a3a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1320ee316737ef65b538b452a5af9aa2ec2a3a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/787b1116e80bfa6138227212814990aa4eccf186", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/787b1116e80bfa6138227212814990aa4eccf186", "html_url": "https://github.com/rust-lang/rust/commit/787b1116e80bfa6138227212814990aa4eccf186", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/787b1116e80bfa6138227212814990aa4eccf186/comments", "author": {"login": "tgross35", "id": 13724985, "node_id": "MDQ6VXNlcjEzNzI0OTg1", "avatar_url": "https://avatars.githubusercontent.com/u/13724985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgross35", "html_url": "https://github.com/tgross35", "followers_url": "https://api.github.com/users/tgross35/followers", "following_url": "https://api.github.com/users/tgross35/following{/other_user}", "gists_url": "https://api.github.com/users/tgross35/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgross35/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgross35/subscriptions", "organizations_url": "https://api.github.com/users/tgross35/orgs", "repos_url": "https://api.github.com/users/tgross35/repos", "events_url": "https://api.github.com/users/tgross35/events{/privacy}", "received_events_url": "https://api.github.com/users/tgross35/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tgross35", "id": 13724985, "node_id": "MDQ6VXNlcjEzNzI0OTg1", "avatar_url": "https://avatars.githubusercontent.com/u/13724985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgross35", "html_url": "https://github.com/tgross35", "followers_url": "https://api.github.com/users/tgross35/followers", "following_url": "https://api.github.com/users/tgross35/following{/other_user}", "gists_url": "https://api.github.com/users/tgross35/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgross35/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgross35/subscriptions", "organizations_url": "https://api.github.com/users/tgross35/orgs", "repos_url": "https://api.github.com/users/tgross35/repos", "events_url": "https://api.github.com/users/tgross35/events{/privacy}", "received_events_url": "https://api.github.com/users/tgross35/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a8dfd933a70cc47e44502a20fd67dfaec6555d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a8dfd933a70cc47e44502a20fd67dfaec6555d5", "html_url": "https://github.com/rust-lang/rust/commit/5a8dfd933a70cc47e44502a20fd67dfaec6555d5"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "00bcaf3e18c3d8fe8eeb47c7ca731b0ad77264a9", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/787b1116e80bfa6138227212814990aa4eccf186/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/787b1116e80bfa6138227212814990aa4eccf186/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=787b1116e80bfa6138227212814990aa4eccf186", "patch": "@@ -922,13 +922,13 @@ impl AtomicBool {\n     ///\n     /// let mut atomic = AtomicBool::new(true);\n     /// unsafe {\n-    ///     my_atomic_op(atomic.as_mut_ptr());\n+    ///     my_atomic_op(atomic.as_ptr());\n     /// }\n     /// # }\n     /// ```\n     #[inline]\n     #[unstable(feature = \"atomic_mut_ptr\", reason = \"recently added\", issue = \"66893\")]\n-    pub const fn as_mut_ptr(&self) -> *mut bool {\n+    pub const fn as_ptr(&self) -> *mut bool {\n         self.v.get().cast()\n     }\n \n@@ -1814,12 +1814,12 @@ impl<T> AtomicPtr<T> {\n     ///\n     /// // SAFETY: Safe as long as `my_atomic_op` is atomic.\n     /// unsafe {\n-    ///     my_atomic_op(atomic.as_mut_ptr());\n+    ///     my_atomic_op(atomic.as_ptr());\n     /// }\n     /// ```\n     #[inline]\n     #[unstable(feature = \"atomic_mut_ptr\", reason = \"recently added\", issue = \"66893\")]\n-    pub const fn as_mut_ptr(&self) -> *mut *mut T {\n+    pub const fn as_ptr(&self) -> *mut *mut T {\n         self.p.get()\n     }\n }\n@@ -2719,15 +2719,15 @@ macro_rules! atomic_int {\n             ///\n             /// // SAFETY: Safe as long as `my_atomic_op` is atomic.\n             /// unsafe {\n-            ///     my_atomic_op(atomic.as_mut_ptr());\n+            ///     my_atomic_op(atomic.as_ptr());\n             /// }\n             /// # }\n             /// ```\n             #[inline]\n             #[unstable(feature = \"atomic_mut_ptr\",\n                    reason = \"recently added\",\n                    issue = \"66893\")]\n-            pub const fn as_mut_ptr(&self) -> *mut $int_type {\n+            pub const fn as_ptr(&self) -> *mut $int_type {\n                 self.v.get()\n             }\n         }"}, {"sha": "575988ec760c7a84cd5109b3e7754d51b756816a", "filename": "library/std/src/sys_common/thread_parking/id.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/787b1116e80bfa6138227212814990aa4eccf186/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/787b1116e80bfa6138227212814990aa4eccf186/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fid.rs?ref=787b1116e80bfa6138227212814990aa4eccf186", "patch": "@@ -60,7 +60,7 @@ impl Parker {\n         if state == PARKED {\n             // Loop to guard against spurious wakeups.\n             while state == PARKED {\n-                park(self.state.as_mut_ptr().addr());\n+                park(self.state.as_ptr().addr());\n                 state = self.state.load(Acquire);\n             }\n \n@@ -76,7 +76,7 @@ impl Parker {\n \n         let state = self.state.fetch_sub(1, Acquire).wrapping_sub(1);\n         if state == PARKED {\n-            park_timeout(dur, self.state.as_mut_ptr().addr());\n+            park_timeout(dur, self.state.as_ptr().addr());\n             // Swap to ensure that we observe all state changes with acquire\n             // ordering, even if the state has been changed after the timeout\n             // occured.\n@@ -99,7 +99,7 @@ impl Parker {\n             // and terminated before this call is made. This call then returns an\n             // error or wakes up an unrelated thread. The platform API and\n             // environment does allow this, however.\n-            unpark(tid, self.state.as_mut_ptr().addr());\n+            unpark(tid, self.state.as_ptr().addr());\n         }\n     }\n }"}]}