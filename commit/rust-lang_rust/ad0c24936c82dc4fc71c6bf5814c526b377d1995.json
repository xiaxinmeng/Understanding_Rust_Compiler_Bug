{"sha": "ad0c24936c82dc4fc71c6bf5814c526b377d1995", "node_id": "C_kwDOAAsO6NoAKGFkMGMyNDkzNmM4MmRjNGZjNzFjNmJmNTgxNGM1MjZiMzc3ZDE5OTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-03T22:25:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-03T22:25:44Z"}, "message": "Auto merge of #1954 - RalfJung:rustup, r=RalfJung\n\nrustup\n\nCc https://github.com/rust-lang/rust/issues/92527", "tree": {"sha": "1e426ae4a0ba6302647df50fcaa16fb53cfc8323", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e426ae4a0ba6302647df50fcaa16fb53cfc8323"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad0c24936c82dc4fc71c6bf5814c526b377d1995", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad0c24936c82dc4fc71c6bf5814c526b377d1995", "html_url": "https://github.com/rust-lang/rust/commit/ad0c24936c82dc4fc71c6bf5814c526b377d1995", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad0c24936c82dc4fc71c6bf5814c526b377d1995/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9343150de5f832192f6364e08284ac53d30dc48", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9343150de5f832192f6364e08284ac53d30dc48", "html_url": "https://github.com/rust-lang/rust/commit/e9343150de5f832192f6364e08284ac53d30dc48"}, {"sha": "808f7941151c7cbb5dc8c84479d3e0fa7fbbba74", "url": "https://api.github.com/repos/rust-lang/rust/commits/808f7941151c7cbb5dc8c84479d3e0fa7fbbba74", "html_url": "https://github.com/rust-lang/rust/commit/808f7941151c7cbb5dc8c84479d3e0fa7fbbba74"}], "stats": {"total": 32, "additions": 1, "deletions": 31}, "files": [{"sha": "cb81868b2aec0d301eddb8ecf3022f307ffb453e", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad0c24936c82dc4fc71c6bf5814c526b377d1995/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/ad0c24936c82dc4fc71c6bf5814c526b377d1995/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=ad0c24936c82dc4fc71c6bf5814c526b377d1995", "patch": "@@ -1 +1 @@\n-4f49627c6fe2a32d1fed6310466bb0e1c535c0c0\n+ddabe0775c5f5b551d5eb54e3c4366fb8bec0c92"}, {"sha": "3ca07db921a9e081d7d39ca8d02c01087eaffe89", "filename": "src/machine.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ad0c24936c82dc4fc71c6bf5814c526b377d1995/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad0c24936c82dc4fc71c6bf5814c526b377d1995/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=ad0c24936c82dc4fc71c6bf5814c526b377d1995", "patch": "@@ -7,7 +7,6 @@ use std::fmt;\n use std::num::NonZeroU64;\n use std::time::Instant;\n \n-use log::trace;\n use rand::rngs::StdRng;\n use rand::SeedableRng;\n \n@@ -503,35 +502,6 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         ecx.binary_ptr_op(bin_op, left, right)\n     }\n \n-    fn box_alloc(\n-        ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        dest: &PlaceTy<'tcx, Tag>,\n-    ) -> InterpResult<'tcx> {\n-        trace!(\"box_alloc for {:?}\", dest.layout.ty);\n-        let layout = ecx.layout_of(dest.layout.ty.builtin_deref(false).unwrap().ty)?;\n-        // First argument: `size`.\n-        // (`0` is allowed here -- this is expected to be handled by the lang item).\n-        let size = Scalar::from_machine_usize(layout.size.bytes(), ecx);\n-\n-        // Second argument: `align`.\n-        let align = Scalar::from_machine_usize(layout.align.abi.bytes(), ecx);\n-\n-        // Call the `exchange_malloc` lang item.\n-        let malloc = ecx.tcx.lang_items().exchange_malloc_fn().unwrap();\n-        let malloc = ty::Instance::mono(ecx.tcx.tcx, malloc);\n-        ecx.call_function(\n-            malloc,\n-            Abi::Rust,\n-            &[size.into(), align.into()],\n-            Some(dest),\n-            // Don't do anything when we are done. The `statement()` function will increment\n-            // the old stack frame's stmt counter to the next statement, which means that when\n-            // `exchange_malloc` returns, we go on evaluating exactly where we want to be.\n-            StackPopCleanup::None { cleanup: true },\n-        )?;\n-        Ok(())\n-    }\n-\n     fn thread_local_static_base_pointer(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         def_id: DefId,"}]}