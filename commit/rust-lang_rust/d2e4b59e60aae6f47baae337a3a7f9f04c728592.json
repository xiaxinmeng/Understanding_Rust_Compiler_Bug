{"sha": "d2e4b59e60aae6f47baae337a3a7f9f04c728592", "node_id": "C_kwDOAAsO6NoAKGQyZTRiNTllNjBhYWU2ZjQ3YmFhZTMzN2EzYTdmOWYwNGM3Mjg1OTI", "commit": {"author": {"name": "Peter Jaszkowiak", "email": "p.jaszkow@gmail.com", "date": "2023-02-03T07:08:57Z"}, "committer": {"name": "Peter Jaszkowiak", "email": "p.jaszkow@gmail.com", "date": "2023-03-10T19:20:38Z"}, "message": "rustdoc: sort deprecated items lower in search\n\nserialize `q` (`itemPaths`) sparsely\noverall 4% reduction in search index size", "tree": {"sha": "559ae76ecb07296d697e15500bc981476c38a700", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/559ae76ecb07296d697e15500bc981476c38a700"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2e4b59e60aae6f47baae337a3a7f9f04c728592", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2e4b59e60aae6f47baae337a3a7f9f04c728592", "html_url": "https://github.com/rust-lang/rust/commit/d2e4b59e60aae6f47baae337a3a7f9f04c728592", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2e4b59e60aae6f47baae337a3a7f9f04c728592/comments", "author": {"login": "pitaj", "id": 803701, "node_id": "MDQ6VXNlcjgwMzcwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/803701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitaj", "html_url": "https://github.com/pitaj", "followers_url": "https://api.github.com/users/pitaj/followers", "following_url": "https://api.github.com/users/pitaj/following{/other_user}", "gists_url": "https://api.github.com/users/pitaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitaj/subscriptions", "organizations_url": "https://api.github.com/users/pitaj/orgs", "repos_url": "https://api.github.com/users/pitaj/repos", "events_url": "https://api.github.com/users/pitaj/events{/privacy}", "received_events_url": "https://api.github.com/users/pitaj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pitaj", "id": 803701, "node_id": "MDQ6VXNlcjgwMzcwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/803701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitaj", "html_url": "https://github.com/pitaj", "followers_url": "https://api.github.com/users/pitaj/followers", "following_url": "https://api.github.com/users/pitaj/following{/other_user}", "gists_url": "https://api.github.com/users/pitaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitaj/subscriptions", "organizations_url": "https://api.github.com/users/pitaj/orgs", "repos_url": "https://api.github.com/users/pitaj/repos", "events_url": "https://api.github.com/users/pitaj/events{/privacy}", "received_events_url": "https://api.github.com/users/pitaj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c991b07403a3234dd1ec0ac973b8ef97055e605", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c991b07403a3234dd1ec0ac973b8ef97055e605", "html_url": "https://github.com/rust-lang/rust/commit/6c991b07403a3234dd1ec0ac973b8ef97055e605"}], "stats": {"total": 59, "additions": 50, "deletions": 9}, "files": [{"sha": "e7480978c25911d3c7c412b49d4104407faef0ca", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2e4b59e60aae6f47baae337a3a7f9f04c728592/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e4b59e60aae6f47baae337a3a7f9f04c728592/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=d2e4b59e60aae6f47baae337a3a7f9f04c728592", "patch": "@@ -337,6 +337,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                                     self.cache,\n                                 ),\n                                 aliases: item.attrs.get_doc_aliases(),\n+                                deprecation: item.deprecation(self.tcx),\n                             });\n                         }\n                     }"}, {"sha": "dc96c452cd2c23b7a1188589fa4b2886386bea03", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2e4b59e60aae6f47baae337a3a7f9f04c728592/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e4b59e60aae6f47baae337a3a7f9f04c728592/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=d2e4b59e60aae6f47baae337a3a7f9f04c728592", "patch": "@@ -107,6 +107,7 @@ pub(crate) struct IndexItem {\n     pub(crate) parent_idx: Option<usize>,\n     pub(crate) search_type: Option<IndexItemFunctionType>,\n     pub(crate) aliases: Box<[Symbol]>,\n+    pub(crate) deprecation: Option<Deprecation>,\n }\n \n /// A type used for the search index."}, {"sha": "4c76ee156c98e9ac8d2f71f5409badd1877ccf27", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d2e4b59e60aae6f47baae337a3a7f9f04c728592/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e4b59e60aae6f47baae337a3a7f9f04c728592/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=d2e4b59e60aae6f47baae337a3a7f9f04c728592", "patch": "@@ -470,10 +470,11 @@ fn extra_info_tags(item: &clean::Item, parent: &clean::Item, tcx: TyCtxt<'_>) ->\n \n     // The trailing space after each tag is to space it properly against the rest of the docs.\n     if let Some(depr) = &item.deprecation(tcx) {\n-        let mut message = \"Deprecated\";\n-        if !stability::deprecation_in_effect(depr) {\n-            message = \"Deprecation planned\";\n-        }\n+        let message = if stability::deprecation_in_effect(depr) {\n+            \"Deprecated\"\n+        } else {\n+            \"Deprecation planned\"\n+        };\n         tags += &tag_html(\"deprecated\", \"\", message);\n     }\n "}, {"sha": "4ff39d6b14366798fe42d4ee45c274e00feea8ed", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d2e4b59e60aae6f47baae337a3a7f9f04c728592/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e4b59e60aae6f47baae337a3a7f9f04c728592/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=d2e4b59e60aae6f47baae337a3a7f9f04c728592", "patch": "@@ -42,6 +42,7 @@ pub(crate) fn build_index<'tcx>(\n                 parent_idx: None,\n                 search_type: get_function_type_for_search(item, tcx, impl_generics.as_ref(), cache),\n                 aliases: item.attrs.get_doc_aliases(),\n+                deprecation: item.deprecation(tcx),\n             });\n         }\n     }\n@@ -244,7 +245,17 @@ pub(crate) fn build_index<'tcx>(\n             )?;\n             crate_data.serialize_field(\n                 \"q\",\n-                &self.items.iter().map(|item| &item.path).collect::<Vec<_>>(),\n+                &self\n+                    .items\n+                    .iter()\n+                    .enumerate()\n+                    // Serialize as an array of item indices and full paths\n+                    .filter_map(\n+                        |(index, item)| {\n+                            if item.path.is_empty() { None } else { Some((index, &item.path)) }\n+                        },\n+                    )\n+                    .collect::<Vec<_>>(),\n             )?;\n             crate_data.serialize_field(\n                 \"d\",\n@@ -297,6 +308,16 @@ pub(crate) fn build_index<'tcx>(\n                     })\n                     .collect::<Vec<_>>(),\n             )?;\n+            crate_data.serialize_field(\n+                \"c\",\n+                &self\n+                    .items\n+                    .iter()\n+                    .enumerate()\n+                    // Serialize as an array of deprecated item indices\n+                    .filter_map(|(index, item)| item.deprecation.map(|_| index))\n+                    .collect::<Vec<_>>(),\n+            )?;\n             crate_data.serialize_field(\n                 \"p\",\n                 &self.paths.iter().map(|(it, s)| (it, s.as_str())).collect::<Vec<_>>(),"}, {"sha": "5697d005b33eaca9b50909799f9a004c02fc759c", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d2e4b59e60aae6f47baae337a3a7f9f04c728592/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/d2e4b59e60aae6f47baae337a3a7f9f04c728592/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=d2e4b59e60aae6f47baae337a3a7f9f04c728592", "patch": "@@ -811,6 +811,13 @@ function initSearch(rawSearchIndex) {\n                     return a - b;\n                 }\n \n+                // sort deprecated items later\n+                a = aaa.item.deprecated;\n+                b = bbb.item.deprecated;\n+                if (a !== b) {\n+                    return a - b;\n+                }\n+\n                 // sort by crate (current crate comes first)\n                 a = (aaa.item.crate !== preferredCrate);\n                 b = (bbb.item.crate !== preferredCrate);\n@@ -1170,6 +1177,7 @@ function initSearch(rawSearchIndex) {\n                 parent: item.parent,\n                 type: item.type,\n                 is_alias: true,\n+                deprecated: item.deprecated,\n             };\n         }\n \n@@ -1965,10 +1973,11 @@ function initSearch(rawSearchIndex) {\n              *   n: Array<string>,\n              *   t: Array<Number>,\n              *   d: Array<string>,\n-             *   q: Array<string>,\n+             *   q: Array<[Number, string]>,\n              *   i: Array<Number>,\n              *   f: Array<RawFunctionSearchType>,\n              *   p: Array<Object>,\n+             *   c: Array<Number>\n              * }}\n              */\n             const crateCorpus = rawSearchIndex[crate];\n@@ -1987,6 +1996,7 @@ function initSearch(rawSearchIndex) {\n                 type: null,\n                 id: id,\n                 normalizedName: crate.indexOf(\"_\") === -1 ? crate : crate.replace(/_/g, \"\"),\n+                deprecated: null,\n             };\n             id += 1;\n             searchIndex.push(crateRow);\n@@ -1996,14 +2006,20 @@ function initSearch(rawSearchIndex) {\n             const itemTypes = crateCorpus.t;\n             // an array of (String) item names\n             const itemNames = crateCorpus.n;\n-            // an array of (String) full paths (or empty string for previous path)\n-            const itemPaths = crateCorpus.q;\n+            // an array of [(Number) item index,\n+            //              (String) full path]\n+            // an item whose index is not present will fall back to the previous present path\n+            // i.e. if indices 4 and 11 are present, but 5-10 and 12-13 are not present,\n+            // 5-10 will fall back to the path for 4 and 12-13 will fall back to the path for 11\n+            const itemPaths = new Map(crateCorpus.q);\n             // an array of (String) descriptions\n             const itemDescs = crateCorpus.d;\n             // an array of (Number) the parent path index + 1 to `paths`, or 0 if none\n             const itemParentIdxs = crateCorpus.i;\n             // an array of (Object | null) the type of the function, if any\n             const itemFunctionSearchTypes = crateCorpus.f;\n+            // an array of (Number) indices for the deprecated items\n+            const deprecatedItems = new Set(crateCorpus.c);\n             // an array of [(Number) item type,\n             //              (String) name]\n             const paths = crateCorpus.p;\n@@ -2045,12 +2061,13 @@ function initSearch(rawSearchIndex) {\n                     crate: crate,\n                     ty: itemTypes[i],\n                     name: itemNames[i],\n-                    path: itemPaths[i] ? itemPaths[i] : lastPath,\n+                    path: itemPaths.has(i) ? itemPaths.get(i) : lastPath,\n                     desc: itemDescs[i],\n                     parent: itemParentIdxs[i] > 0 ? paths[itemParentIdxs[i] - 1] : undefined,\n                     type: buildFunctionSearchType(itemFunctionSearchTypes[i], lowercasePaths),\n                     id: id,\n                     normalizedName: word.indexOf(\"_\") === -1 ? word : word.replace(/_/g, \"\"),\n+                    deprecated: deprecatedItems.has(i),\n                 };\n                 id += 1;\n                 searchIndex.push(row);"}]}