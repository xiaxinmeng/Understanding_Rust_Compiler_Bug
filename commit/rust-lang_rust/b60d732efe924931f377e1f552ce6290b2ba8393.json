{"sha": "b60d732efe924931f377e1f552ce6290b2ba8393", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MGQ3MzJlZmU5MjQ5MzFmMzc3ZTFmNTUyY2U2MjkwYjJiYTgzOTM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-23T19:27:59Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-24T05:22:27Z"}, "message": "rustc_hir: nix rustc_errors dep", "tree": {"sha": "4a807c56cf3aef86bc1f7965ee70689a943b6b8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a807c56cf3aef86bc1f7965ee70689a943b6b8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b60d732efe924931f377e1f552ce6290b2ba8393", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b60d732efe924931f377e1f552ce6290b2ba8393", "html_url": "https://github.com/rust-lang/rust/commit/b60d732efe924931f377e1f552ce6290b2ba8393", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b60d732efe924931f377e1f552ce6290b2ba8393/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f07802c0de9091a1f4c728c6b4ee1eca5a49b275", "url": "https://api.github.com/repos/rust-lang/rust/commits/f07802c0de9091a1f4c728c6b4ee1eca5a49b275", "html_url": "https://github.com/rust-lang/rust/commit/f07802c0de9091a1f4c728c6b4ee1eca5a49b275"}], "stats": {"total": 82, "additions": 40, "deletions": 42}, "files": [{"sha": "94305401ee9f82c05e69306974811b08b5a90fae", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b60d732efe924931f377e1f552ce6290b2ba8393/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b60d732efe924931f377e1f552ce6290b2ba8393/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b60d732efe924931f377e1f552ce6290b2ba8393", "patch": "@@ -3730,7 +3730,6 @@ dependencies = [\n  \"rustc_ast\",\n  \"rustc_ast_pretty\",\n  \"rustc_data_structures\",\n- \"rustc_errors\",\n  \"rustc_index\",\n  \"rustc_macros\",\n  \"rustc_span\","}, {"sha": "98598c4bcb5afa0b1696cc5c36ed5cae047e724e", "filename": "src/librustc_hir/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b60d732efe924931f377e1f552ce6290b2ba8393/src%2Flibrustc_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b60d732efe924931f377e1f552ce6290b2ba8393/src%2Flibrustc_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2FCargo.toml?ref=b60d732efe924931f377e1f552ce6290b2ba8393", "patch": "@@ -16,7 +16,6 @@ rustc_macros = { path = \"../librustc_macros\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_span = { path = \"../librustc_span\" }\n-rustc_errors = { path = \"../librustc_errors\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc_ast = { path = \"../librustc_ast\" }\n lazy_static = \"1\""}, {"sha": "2054759933f3ce6044fed0b3c1282974d8ee2a28", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b60d732efe924931f377e1f552ce6290b2ba8393/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60d732efe924931f377e1f552ce6290b2ba8393/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=b60d732efe924931f377e1f552ce6290b2ba8393", "patch": "@@ -11,7 +11,6 @@ use rustc_ast::node_id::NodeMap;\n use rustc_ast::util::parser::ExprPrecedence;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n-use rustc_errors::FatalError;\n use rustc_macros::HashStable_Generic;\n use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -366,9 +365,9 @@ pub enum GenericBound<'hir> {\n }\n \n impl GenericBound<'_> {\n-    pub fn trait_def_id(&self) -> Option<DefId> {\n+    pub fn trait_ref(&self) -> Option<&TraitRef<'_>> {\n         match self {\n-            GenericBound::Trait(data, _) => Some(data.trait_ref.trait_def_id()),\n+            GenericBound::Trait(data, _) => Some(&data.trait_ref),\n             _ => None,\n         }\n     }\n@@ -2204,13 +2203,10 @@ pub struct TraitRef<'hir> {\n \n impl TraitRef<'_> {\n     /// Gets the `DefId` of the referenced trait. It _must_ actually be a trait or trait alias.\n-    pub fn trait_def_id(&self) -> DefId {\n+    pub fn trait_def_id(&self) -> Option<DefId> {\n         match self.path.res {\n-            Res::Def(DefKind::Trait, did) => did,\n-            Res::Def(DefKind::TraitAlias, did) => did,\n-            Res::Err => {\n-                FatalError.raise();\n-            }\n+            Res::Def(DefKind::Trait | DefKind::TraitAlias, did) => Some(did),\n+            Res::Err => None,\n             _ => unreachable!(),\n         }\n     }"}, {"sha": "5888bde919d4c49c2141bbf7ebf8bb1dcbd1ffa5", "filename": "src/librustc_hir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b60d732efe924931f377e1f552ce6290b2ba8393/src%2Flibrustc_hir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60d732efe924931f377e1f552ce6290b2ba8393/src%2Flibrustc_hir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flib.rs?ref=b60d732efe924931f377e1f552ce6290b2ba8393", "patch": "@@ -7,6 +7,7 @@\n #![feature(const_fn)] // For the unsizing cast on `&[]`\n #![feature(const_panic)]\n #![feature(in_band_lifetimes)]\n+#![feature(or_patterns)]\n #![feature(specialization)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "52df6d7271b9600215defeab0ec46576115814c1", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b60d732efe924931f377e1f552ce6290b2ba8393/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60d732efe924931f377e1f552ce6290b2ba8393/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=b60d732efe924931f377e1f552ce6290b2ba8393", "patch": "@@ -1582,7 +1582,8 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 for param in generics.params {\n                     if param.span == *span\n                         && !param.bounds.iter().any(|bound| {\n-                            bound.trait_def_id() == self.tcx.lang_items().sized_trait()\n+                            bound.trait_ref().and_then(|trait_ref| trait_ref.trait_def_id())\n+                                == self.tcx.lang_items().sized_trait()\n                         })\n                     {\n                         let (span, separator) = match param.bounds {"}, {"sha": "ebeb0e968b0a15a0e91fc935ed8b8764134cd364", "filename": "src/librustc_trait_selection/traits/object_safety.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b60d732efe924931f377e1f552ce6290b2ba8393/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60d732efe924931f377e1f552ce6290b2ba8393/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs?ref=b60d732efe924931f377e1f552ce6290b2ba8393", "patch": "@@ -15,7 +15,7 @@ use crate::traits::query::evaluate_obligation::InferCtxtExt;\n use crate::traits::{self, Obligation, ObligationCause};\n use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::{self, Predicate, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n-use rustc_errors::Applicability;\n+use rustc_errors::{Applicability, FatalError};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_session::lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY;\n@@ -170,6 +170,24 @@ fn object_safety_violations_for_trait(\n     violations\n }\n \n+fn trait_bound_spans<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    bounds: hir::GenericBounds<'tcx>,\n+) -> impl 'tcx + Iterator<Item = Span> {\n+    bounds.iter().filter_map(move |b| match b {\n+        hir::GenericBound::Trait(trait_ref, hir::TraitBoundModifier::None)\n+            if trait_has_sized_self(\n+                tcx,\n+                trait_ref.trait_ref.trait_def_id().unwrap_or_else(|| FatalError.raise()),\n+            ) =>\n+        {\n+            // Fetch spans for supertraits that are `Sized`: `trait T: Super`\n+            Some(trait_ref.span)\n+        }\n+        _ => None,\n+    })\n+}\n+\n fn get_sized_bounds(tcx: TyCtxt<'_>, trait_def_id: DefId) -> SmallVec<[Span; 1]> {\n     tcx.hir()\n         .get_if_local(trait_def_id)\n@@ -189,33 +207,14 @@ fn get_sized_bounds(tcx: TyCtxt<'_>, trait_def_id: DefId) -> SmallVec<[Span; 1]>\n                             {\n                                 // Fetch spans for trait bounds that are Sized:\n                                 // `trait T where Self: Pred`\n-                                Some(pred.bounds.iter().filter_map(|b| match b {\n-                                    hir::GenericBound::Trait(\n-                                        trait_ref,\n-                                        hir::TraitBoundModifier::None,\n-                                    ) if trait_has_sized_self(\n-                                        tcx,\n-                                        trait_ref.trait_ref.trait_def_id(),\n-                                    ) =>\n-                                    {\n-                                        Some(trait_ref.span)\n-                                    }\n-                                    _ => None,\n-                                }))\n+                                Some(trait_bound_spans(tcx, pred.bounds))\n                             }\n                             _ => None,\n                         }\n                     })\n                     .flatten()\n-                    .chain(bounds.iter().filter_map(|b| match b {\n-                        hir::GenericBound::Trait(trait_ref, hir::TraitBoundModifier::None)\n-                            if trait_has_sized_self(tcx, trait_ref.trait_ref.trait_def_id()) =>\n-                        {\n-                            // Fetch spans for supertraits that are `Sized`: `trait T: Super`\n-                            Some(trait_ref.span)\n-                        }\n-                        _ => None,\n-                    }))\n+                    // Fetch spans for supertraits that are `Sized`: `trait T: Super`.\n+                    .chain(trait_bound_spans(tcx, bounds))\n                     .collect::<SmallVec<[Span; 1]>>(),\n             ),\n             _ => None,"}, {"sha": "86737a819a7aff56c8ef2b66c160e8348acf5177", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b60d732efe924931f377e1f552ce6290b2ba8393/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60d732efe924931f377e1f552ce6290b2ba8393/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=b60d732efe924931f377e1f552ce6290b2ba8393", "patch": "@@ -16,7 +16,7 @@ use rustc::ty::{GenericParamDef, GenericParamDefKind};\n use rustc_ast::ast;\n use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId, FatalError};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::DefId;\n@@ -991,7 +991,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         self.ast_path_to_mono_trait_ref(\n             trait_ref.path.span,\n-            trait_ref.trait_def_id(),\n+            trait_ref.trait_def_id().unwrap_or_else(|| FatalError.raise()),\n             self_ty,\n             trait_ref.path.segments.last().unwrap(),\n         )\n@@ -1007,7 +1007,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         bounds: &mut Bounds<'tcx>,\n         speculative: bool,\n     ) -> Result<(), GenericArgCountMismatch> {\n-        let trait_def_id = trait_ref.trait_def_id();\n+        let trait_def_id = trait_ref.trait_def_id().unwrap_or_else(|| FatalError.raise());\n \n         debug!(\"instantiate_poly_trait_ref({:?}, def_id={:?})\", trait_ref, trait_def_id);\n "}, {"sha": "2dc2a48ecbce82f2fdfae9d657ad761d5fe2503b", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b60d732efe924931f377e1f552ce6290b2ba8393/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60d732efe924931f377e1f552ce6290b2ba8393/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=b60d732efe924931f377e1f552ce6290b2ba8393", "patch": "@@ -1402,9 +1402,12 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     {\n                         // Are of this `impl Trait`'s traits object safe?\n                         is_object_safe = bounds.iter().all(|bound| {\n-                            bound.trait_def_id().map_or(false, |def_id| {\n-                                fcx.tcx.object_safety_violations(def_id).is_empty()\n-                            })\n+                            bound\n+                                .trait_ref()\n+                                .and_then(|t| t.trait_def_id())\n+                                .map_or(false, |def_id| {\n+                                    fcx.tcx.object_safety_violations(def_id).is_empty()\n+                                })\n                         })\n                     }\n                 }"}, {"sha": "8a3dc9e8f0279346e5c75a55c537a8276c3d106b", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b60d732efe924931f377e1f552ce6290b2ba8393/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60d732efe924931f377e1f552ce6290b2ba8393/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=b60d732efe924931f377e1f552ce6290b2ba8393", "patch": "@@ -1057,7 +1057,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 let trait_def_ids: FxHashSet<DefId> = param\n                                     .bounds\n                                     .iter()\n-                                    .filter_map(|bound| bound.trait_def_id())\n+                                    .filter_map(|bound| Some(bound.trait_ref()?.trait_def_id()?))\n                                     .collect();\n                                 if !candidates.iter().any(|t| trait_def_ids.contains(&t.def_id)) {\n                                     err.span_suggestions("}]}