{"sha": "2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMGQxY2JkNDY3NGE2YjJhNTg4MzI1MTNlY2IyZTk3NTM4ZjJjNGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-16T01:46:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-16T01:46:05Z"}, "message": "Auto merge of #68814 - Aaron1011:fix/proc-macro-order-two, r=petrochenkov\n\nRecord proc macro harness order for use during metadata deserialization\n\nFixes #68690\n\nWhen we generate the proc macro harness, we now explicitly recorder the\norder in which we generate entries. We then use this ordering data to\ndeserialize the correct proc-macro-data from the crate metadata.", "tree": {"sha": "ecd466a7b83d89a9973d9147f43f554494f86a93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecd466a7b83d89a9973d9147f43f554494f86a93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a", "html_url": "https://github.com/rust-lang/rust/commit/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ba3ca0e6bef416ecba3c8ded1f67a953d28600f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ba3ca0e6bef416ecba3c8ded1f67a953d28600f", "html_url": "https://github.com/rust-lang/rust/commit/8ba3ca0e6bef416ecba3c8ded1f67a953d28600f"}, {"sha": "516459870cf0fe13979aaa568bfc413e2e5bba18", "url": "https://api.github.com/repos/rust-lang/rust/commits/516459870cf0fe13979aaa568bfc413e2e5bba18", "html_url": "https://github.com/rust-lang/rust/commit/516459870cf0fe13979aaa568bfc413e2e5bba18"}], "stats": {"total": 118, "additions": 84, "deletions": 34}, "files": [{"sha": "bf1fc09649a58e5041ec7e9f9d9729044f8fa21c", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a", "patch": "@@ -140,6 +140,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                 trait_impls: _,\n                 body_ids: _,\n                 modules: _,\n+                proc_macros: _,\n             } = *krate;\n \n             alloc_hir_dep_nodes("}, {"sha": "30fe7de5df4fa423533f257112803ddf9300d0b4", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a", "patch": "@@ -530,6 +530,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let module = self.lower_mod(&c.module);\n         let attrs = self.lower_attrs(&c.attrs);\n         let body_ids = body_ids(&self.bodies);\n+        let proc_macros = c.proc_macros.iter().map(|id| self.node_id_to_hir_id[*id]).collect();\n \n         self.resolver.definitions().init_node_id_to_hir_id_mapping(self.node_id_to_hir_id);\n \n@@ -546,6 +547,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             body_ids,\n             trait_impls: self.trait_impls,\n             modules: self.modules,\n+            proc_macros,\n         }\n     }\n "}, {"sha": "b925cad9fdcdc361132e6ce658a15a18da578a32", "filename": "src/librustc_builtin_macros/proc_macro_harness.rs", "status": "modified", "additions": 43, "deletions": 18, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs?ref=2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a", "patch": "@@ -8,13 +8,15 @@ use rustc_span::hygiene::AstPass;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{Span, DUMMY_SP};\n use smallvec::smallvec;\n-use syntax::ast::{self, Ident};\n+use std::cell::RefCell;\n+use syntax::ast::{self, Ident, NodeId};\n use syntax::attr;\n use syntax::expand::is_proc_macro_attr;\n use syntax::ptr::P;\n use syntax::visit::{self, Visitor};\n \n struct ProcMacroDerive {\n+    id: NodeId,\n     trait_name: ast::Name,\n     function_name: Ident,\n     span: Span,\n@@ -27,6 +29,7 @@ enum ProcMacroDefType {\n }\n \n struct ProcMacroDef {\n+    id: NodeId,\n     function_name: Ident,\n     span: Span,\n     def_type: ProcMacroDefType,\n@@ -69,9 +72,6 @@ pub fn inject(\n     if has_proc_macro_decls || is_proc_macro_crate {\n         visit::walk_crate(&mut collect, &krate);\n     }\n-    // NOTE: If you change the order of macros in this vec\n-    // for any reason, you must also update 'raw_proc_macro'\n-    // in src/librustc_metadata/decoder.rs\n     let macros = collect.macros;\n \n     if !is_proc_macro_crate {\n@@ -86,7 +86,8 @@ pub fn inject(\n         return krate;\n     }\n \n-    krate.module.items.push(mk_decls(&mut cx, &macros));\n+    let decls = mk_decls(&mut krate, &mut cx, &macros);\n+    krate.module.items.push(decls);\n \n     krate\n }\n@@ -181,6 +182,7 @@ impl<'a> CollectProcMacros<'a> {\n \n         if self.in_root && item.vis.node.is_pub() {\n             self.macros.push(ProcMacro::Derive(ProcMacroDerive {\n+                id: item.id,\n                 span: item.span,\n                 trait_name: trait_ident.name,\n                 function_name: item.ident,\n@@ -200,6 +202,7 @@ impl<'a> CollectProcMacros<'a> {\n     fn collect_attr_proc_macro(&mut self, item: &'a ast::Item) {\n         if self.in_root && item.vis.node.is_pub() {\n             self.macros.push(ProcMacro::Def(ProcMacroDef {\n+                id: item.id,\n                 span: item.span,\n                 function_name: item.ident,\n                 def_type: ProcMacroDefType::Attr,\n@@ -218,6 +221,7 @@ impl<'a> CollectProcMacros<'a> {\n     fn collect_bang_proc_macro(&mut self, item: &'a ast::Item) {\n         if self.in_root && item.vis.node.is_pub() {\n             self.macros.push(ProcMacro::Def(ProcMacroDef {\n+                id: item.id,\n                 span: item.span,\n                 function_name: item.ident,\n                 def_type: ProcMacroDefType::Bang,\n@@ -357,7 +361,15 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n //              // ...\n //          ];\n //      }\n-fn mk_decls(cx: &mut ExtCtxt<'_>, macros: &[ProcMacro]) -> P<ast::Item> {\n+fn mk_decls(\n+    ast_krate: &mut ast::Crate,\n+    cx: &mut ExtCtxt<'_>,\n+    macros: &[ProcMacro],\n+) -> P<ast::Item> {\n+    // We're the ones filling in this Vec,\n+    // so it should be empty to start with\n+    assert!(ast_krate.proc_macros.is_empty());\n+\n     let expn_id = cx.resolver.expansion_for_ast_pass(\n         DUMMY_SP,\n         AstPass::ProcMacroHarness,\n@@ -376,6 +388,12 @@ fn mk_decls(cx: &mut ExtCtxt<'_>, macros: &[ProcMacro]) -> P<ast::Item> {\n     let attr = cx.ident_of(\"attr\", span);\n     let bang = cx.ident_of(\"bang\", span);\n \n+    let krate_ref = RefCell::new(ast_krate);\n+\n+    // We add NodeIds to 'krate.proc_macros' in the order\n+    // that we generate expressions. The position of each NodeId\n+    // in the 'proc_macros' Vec corresponds to its position\n+    // in the static array that will be generated\n     let decls = {\n         let local_path =\n             |sp: Span, name| cx.expr_path(cx.path(sp.with_ctxt(span.ctxt()), vec![name]));\n@@ -385,19 +403,26 @@ fn mk_decls(cx: &mut ExtCtxt<'_>, macros: &[ProcMacro]) -> P<ast::Item> {\n         macros\n             .iter()\n             .map(|m| match m {\n-                ProcMacro::Derive(cd) => cx.expr_call(\n-                    span,\n-                    proc_macro_ty_method_path(custom_derive),\n-                    vec![\n-                        cx.expr_str(cd.span, cd.trait_name),\n-                        cx.expr_vec_slice(\n-                            span,\n-                            cd.attrs.iter().map(|&s| cx.expr_str(cd.span, s)).collect::<Vec<_>>(),\n-                        ),\n-                        local_path(cd.span, cd.function_name),\n-                    ],\n-                ),\n+                ProcMacro::Derive(cd) => {\n+                    krate_ref.borrow_mut().proc_macros.push(cd.id);\n+                    cx.expr_call(\n+                        span,\n+                        proc_macro_ty_method_path(custom_derive),\n+                        vec![\n+                            cx.expr_str(cd.span, cd.trait_name),\n+                            cx.expr_vec_slice(\n+                                span,\n+                                cd.attrs\n+                                    .iter()\n+                                    .map(|&s| cx.expr_str(cd.span, s))\n+                                    .collect::<Vec<_>>(),\n+                            ),\n+                            local_path(cd.span, cd.function_name),\n+                        ],\n+                    )\n+                }\n                 ProcMacro::Def(ca) => {\n+                    krate_ref.borrow_mut().proc_macros.push(ca.id);\n                     let ident = match ca.def_type {\n                         ProcMacroDefType::Attr => attr,\n                         ProcMacroDefType::Bang => bang,"}, {"sha": "f13e2f186043af7a46e75aeb971d7878e8939204", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a", "patch": "@@ -635,6 +635,9 @@ pub struct Crate<'hir> {\n     /// A list of modules written out in the order in which they\n     /// appear in the crate. This includes the main crate module.\n     pub modules: BTreeMap<HirId, ModuleItems>,\n+    /// A list of proc macro HirIds, written out in the order in which\n+    /// they are declared in the static array generated by proc_macro_harness.\n+    pub proc_macros: Vec<HirId>,\n }\n \n impl Crate<'hir> {"}, {"sha": "01fd637b20e6673d2df163298b020de081fb5378", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a", "patch": "@@ -637,10 +637,6 @@ impl<'a, 'tcx> CrateMetadata {\n     fn raw_proc_macro(&self, id: DefIndex) -> &ProcMacro {\n         // DefIndex's in root.proc_macro_data have a one-to-one correspondence\n         // with items in 'raw_proc_macros'.\n-        // NOTE: If you update the order of macros in 'proc_macro_data' for any reason,\n-        // you must also update src/librustc_builtin_macros/proc_macro_harness.rs\n-        // Failing to do so will result in incorrect data being associated\n-        // with proc macros when deserialized.\n         let pos = self.root.proc_macro_data.unwrap().decode(self).position(|i| i == id).unwrap();\n         &self.raw_proc_macros.unwrap()[pos]\n     }"}, {"sha": "41fc5ed843fd3252878fb2a8a66d796dc75eaa43", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a", "patch": "@@ -34,7 +34,6 @@ use std::path::Path;\n use std::u32;\n use syntax::ast;\n use syntax::attr;\n-use syntax::expand::is_proc_macro_attr;\n \n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n@@ -1328,13 +1327,7 @@ impl EncodeContext<'tcx> {\n         let is_proc_macro = self.tcx.sess.crate_types.borrow().contains(&CrateType::ProcMacro);\n         if is_proc_macro {\n             let tcx = self.tcx;\n-            Some(self.lazy(tcx.hir().krate().items.values().filter_map(|item| {\n-                if item.attrs.iter().any(|attr| is_proc_macro_attr(attr)) {\n-                    Some(item.hir_id.owner)\n-                } else {\n-                    None\n-                }\n-            })))\n+            Some(self.lazy(tcx.hir().krate().proc_macros.iter().map(|p| p.owner)))\n         } else {\n             None\n         }"}, {"sha": "9dba813c9a721cbdba3213e7e32c8b2a83b2a681", "filename": "src/librustc_parse/parser/module.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmodule.rs?ref=2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a", "patch": "@@ -35,6 +35,8 @@ impl<'a> Parser<'a> {\n             attrs: self.parse_inner_attributes()?,\n             module: self.parse_mod_items(&token::Eof, lo)?,\n             span: lo.to(self.token.span),\n+            // Filled in by proc_macro_harness::inject()\n+            proc_macros: Vec::new(),\n         });\n         krate\n     }"}, {"sha": "d101473d76ba64dddf46d8f50f452450c45a2e35", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a", "patch": "@@ -429,6 +429,13 @@ pub struct Crate {\n     pub module: Mod,\n     pub attrs: Vec<Attribute>,\n     pub span: Span,\n+    /// The order of items in the HIR is unrelated to the order of\n+    /// items in the AST. However, we generate proc macro harnesses\n+    /// based on the AST order, and later refer to these harnesses\n+    /// from the HIR. This field keeps track of the order in which\n+    /// we generated proc macros harnesses, so that we can map\n+    /// HIR proc macros items back to their harness items.\n+    pub proc_macros: Vec<NodeId>,\n }\n \n /// Possible values inside of compile-time attribute lists."}, {"sha": "f130b0a2ee494fd1e4e65b84a868a461be473ec0", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a", "patch": "@@ -989,7 +989,7 @@ pub fn noop_visit_mod<T: MutVisitor>(Mod { inner, items, inline: _ }: &mut Mod,\n }\n \n pub fn noop_visit_crate<T: MutVisitor>(krate: &mut Crate, vis: &mut T) {\n-    visit_clobber(krate, |Crate { module, attrs, span }| {\n+    visit_clobber(krate, |Crate { module, attrs, span, proc_macros }| {\n         let item = P(Item {\n             ident: Ident::invalid(),\n             attrs,\n@@ -1004,11 +1004,11 @@ pub fn noop_visit_crate<T: MutVisitor>(krate: &mut Crate, vis: &mut T) {\n         let len = items.len();\n         if len == 0 {\n             let module = Mod { inner: span, items: vec![], inline: true };\n-            Crate { module, attrs: vec![], span }\n+            Crate { module, attrs: vec![], span, proc_macros }\n         } else if len == 1 {\n             let Item { attrs, span, kind, .. } = items.into_iter().next().unwrap().into_inner();\n             match kind {\n-                ItemKind::Mod(module) => Crate { module, attrs, span },\n+                ItemKind::Mod(module) => Crate { module, attrs, span, proc_macros },\n                 _ => panic!(\"visitor converted a module to not a module\"),\n             }\n         } else {"}, {"sha": "d8e5746f3f6f58c963302bd53e55e4bf9bc502eb", "filename": "src/test/rustdoc/inline_cross/auxiliary/proc_macro.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fproc_macro.rs?ref=2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a", "patch": "@@ -9,6 +9,19 @@ extern crate proc_macro;\n \n use proc_macro::TokenStream;\n \n+macro_rules! make_attr_macro {\n+    ($name:ident) => {\n+        /// Generated doc comment\n+        #[proc_macro_attribute]\n+        pub fn $name(args: TokenStream, input: TokenStream) -> TokenStream {\n+            panic!()\n+        }\n+    }\n+}\n+\n+make_attr_macro!(first_attr);\n+make_attr_macro!(second_attr);\n+\n /// a proc-macro that swallows its input and does nothing.\n #[proc_macro]\n pub fn some_proc_macro(_input: TokenStream) -> TokenStream {"}, {"sha": "532a295c0f3f79dc4dfd42cfb216c8f436d993fd", "filename": "src/test/rustdoc/inline_cross/proc_macro.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a/src%2Ftest%2Frustdoc%2Finline_cross%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a/src%2Ftest%2Frustdoc%2Finline_cross%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fproc_macro.rs?ref=2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a", "patch": "@@ -26,3 +26,11 @@ pub use some_macros::some_proc_attr;\n // @has proc_macro/derive.SomeDerive.html\n // @has - 'a derive attribute that adds nothing to its input.'\n pub use some_macros::SomeDerive;\n+\n+// @has proc_macro/attr.first_attr.html\n+// @has - 'Generated doc comment'\n+pub use some_macros::first_attr;\n+\n+// @has proc_macro/attr.second_attr.html\n+// @has - 'Generated doc comment'\n+pub use some_macros::second_attr;"}, {"sha": "35e418696f17cfed03df4de8e75985b062533c5e", "filename": "src/test/ui/ast-json/ast-json-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout?ref=2a0d1cbd4674a6b2a58832513ecb2e97538f2c4a", "patch": "@@ -1 +1 @@\n-{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":{\"_field0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"extern\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"core\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Semi\",\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"]]}}],\"inline\":true},\"attrs\":[],\"span\":{\"lo\":0,\"hi\":0}}\n+{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":{\"_field0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"extern\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"core\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Semi\",\"span\":{\"lo\":0,\"hi\":0}}]},\"NonJoint\"]]}}],\"inline\":true},\"attrs\":[],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}"}]}