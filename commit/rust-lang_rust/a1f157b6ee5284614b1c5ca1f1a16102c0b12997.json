{"sha": "a1f157b6ee5284614b1c5ca1f1a16102c0b12997", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZjE1N2I2ZWU1Mjg0NjE0YjFjNWNhMWYxYTE2MTAyYzBiMTI5OTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-01T02:21:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-01T02:21:41Z"}, "message": "auto merge of #11885 : bnoordhuis/rust/issue11694, r=alexcrichton\n\nEINVAL means that the requested stack size is either not a multiple\r\nof the system page size or that it's smaller than PTHREAD_STACK_MIN.\r\nFigure out what the case is, fix it up and retry.  If it still fails,\r\ngive up, like before.\r\n\r\nSuggestions for future improvements:\r\n\r\n  * don't fail!() but instead signal a condition, or\r\n  * silently ignore the error and use a default sized stack.\r\n\r\nFixes #11694.\r\n\r\nThe first two commits put the framework in place, the third one contains the meat.", "tree": {"sha": "69be4b38c6f26f79c6f68e63282ea39b7cf7e24f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69be4b38c6f26f79c6f68e63282ea39b7cf7e24f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1f157b6ee5284614b1c5ca1f1a16102c0b12997", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1f157b6ee5284614b1c5ca1f1a16102c0b12997", "html_url": "https://github.com/rust-lang/rust/commit/a1f157b6ee5284614b1c5ca1f1a16102c0b12997", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1f157b6ee5284614b1c5ca1f1a16102c0b12997/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83f0f6ef6cb44d9fbba24372f223561a75a50c18", "url": "https://api.github.com/repos/rust-lang/rust/commits/83f0f6ef6cb44d9fbba24372f223561a75a50c18", "html_url": "https://github.com/rust-lang/rust/commit/83f0f6ef6cb44d9fbba24372f223561a75a50c18"}, {"sha": "431edacbef23e691d1b192da78b4112c35addfbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/431edacbef23e691d1b192da78b4112c35addfbf", "html_url": "https://github.com/rust-lang/rust/commit/431edacbef23e691d1b192da78b4112c35addfbf"}], "stats": {"total": 122, "additions": 113, "deletions": 9}, "files": [{"sha": "11a7b5dd19171bcdf1c733c0c265a8ea7a512bf1", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a1f157b6ee5284614b1c5ca1f1a16102c0b12997/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f157b6ee5284614b1c5ca1f1a16102c0b12997/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=a1f157b6ee5284614b1c5ca1f1a16102c0b12997", "patch": "@@ -2174,7 +2174,7 @@ pub mod consts {\n             pub static EDQUOT: c_int = 1133;\n         }\n         pub mod posix01 {\n-            use libc::types::os::arch::c95::c_int;\n+            use libc::types::os::arch::c95::{c_int, size_t};\n \n             pub static SIGTRAP : c_int = 5;\n \n@@ -2228,6 +2228,17 @@ pub mod consts {\n             pub static PTHREAD_CREATE_JOINABLE: c_int = 0;\n             pub static PTHREAD_CREATE_DETACHED: c_int = 1;\n \n+            #[cfg(target_os = \"android\")]\n+            pub static PTHREAD_STACK_MIN: size_t = 8192;\n+\n+            #[cfg(target_arch = \"arm\", target_os = \"linux\")]\n+            #[cfg(target_arch = \"x86\", target_os = \"linux\")]\n+            #[cfg(target_arch = \"x86_64\", target_os = \"linux\")]\n+            pub static PTHREAD_STACK_MIN: size_t = 16384;\n+\n+            #[cfg(target_arch = \"mips\", target_os = \"linux\")]\n+            pub static PTHREAD_STACK_MIN: size_t = 131072;\n+\n             pub static CLOCK_REALTIME: c_int = 0;\n             pub static CLOCK_MONOTONIC: c_int = 1;\n         }\n@@ -2608,7 +2619,7 @@ pub mod consts {\n             pub static ELAST : c_int = 99;\n         }\n         pub mod posix01 {\n-            use libc::types::os::arch::c95::c_int;\n+            use libc::types::os::arch::c95::{c_int, size_t};\n \n             pub static SIGTRAP : c_int = 5;\n \n@@ -2662,6 +2673,14 @@ pub mod consts {\n             pub static PTHREAD_CREATE_JOINABLE: c_int = 0;\n             pub static PTHREAD_CREATE_DETACHED: c_int = 1;\n \n+            #[cfg(target_arch = \"arm\")]\n+            pub static PTHREAD_STACK_MIN: size_t = 4096;\n+\n+            #[cfg(target_arch = \"mips\")]\n+            #[cfg(target_arch = \"x86\")]\n+            #[cfg(target_arch = \"x86_64\")]\n+            pub static PTHREAD_STACK_MIN: size_t = 2048;\n+\n             pub static CLOCK_REALTIME: c_int = 0;\n             pub static CLOCK_MONOTONIC: c_int = 4;\n         }\n@@ -2990,7 +3009,7 @@ pub mod consts {\n             pub static ELAST : c_int = 106;\n         }\n         pub mod posix01 {\n-            use libc::types::os::arch::c95::c_int;\n+            use libc::types::os::arch::c95::{c_int, size_t};\n \n             pub static SIGTRAP : c_int = 5;\n \n@@ -3043,6 +3062,7 @@ pub mod consts {\n \n             pub static PTHREAD_CREATE_JOINABLE: c_int = 1;\n             pub static PTHREAD_CREATE_DETACHED: c_int = 2;\n+            pub static PTHREAD_STACK_MIN: size_t = 8192;\n         }\n         pub mod posix08 {\n         }"}, {"sha": "b762c1173f56b32d4bfe034097a2b768e6bfc7d6", "filename": "src/libstd/rt/thread.rs", "status": "modified", "additions": 89, "deletions": 5, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/a1f157b6ee5284614b1c5ca1f1a16102c0b12997/src%2Flibstd%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f157b6ee5284614b1c5ca1f1a16102c0b12997/src%2Flibstd%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread.rs?ref=a1f157b6ee5284614b1c5ca1f1a16102c0b12997", "patch": "@@ -145,18 +145,30 @@ impl<T: Send> Drop for Thread<T> {\n #[cfg(windows)]\n mod imp {\n     use cast;\n+    use cmp;\n     use libc;\n     use libc::types::os::arch::extra::{LPSECURITY_ATTRIBUTES, SIZE_T, BOOL,\n                                        LPVOID, DWORD, LPDWORD, HANDLE};\n     use ptr;\n+    use unstable::stack::RED_ZONE;\n \n     pub type rust_thread = HANDLE;\n     pub type rust_thread_return = DWORD;\n \n     pub unsafe fn create(stack: uint, p: ~proc()) -> rust_thread {\n         let arg: *mut libc::c_void = cast::transmute(p);\n-        CreateThread(ptr::mut_null(), stack as libc::size_t, super::thread_start,\n-                     arg, 0, ptr::mut_null())\n+        // FIXME On UNIX, we guard against stack sizes that are too small but\n+        // that's because pthreads enforces that stacks are at least\n+        // PTHREAD_STACK_MIN bytes big.  Windows has no such lower limit, it's\n+        // just that below a certain threshold you can't do anything useful.\n+        // That threshold is application and architecture-specific, however.\n+        // For now, the only requirement is that it's big enough to hold the\n+        // red zone.  Round up to the next 64 kB because that's what the NT\n+        // kernel does, might as well make it explicit.  With the current\n+        // 20 kB red zone, that makes for a 64 kB minimum stack.\n+        let stack_size = (cmp::max(stack, RED_ZONE) + 0xfffe) & (-0xfffe - 1);\n+        CreateThread(ptr::mut_null(), stack_size as libc::size_t,\n+                     super::thread_start, arg, 0, ptr::mut_null())\n     }\n \n     pub unsafe fn join(native: rust_thread) {\n@@ -190,10 +202,13 @@ mod imp {\n #[cfg(unix)]\n mod imp {\n     use cast;\n-    use libc::consts::os::posix01::PTHREAD_CREATE_JOINABLE;\n+    use cmp;\n+    use libc::consts::os::posix01::{PTHREAD_CREATE_JOINABLE, PTHREAD_STACK_MIN};\n     use libc;\n+    use os;\n     use ptr;\n     use unstable::intrinsics;\n+    use unstable::stack::RED_ZONE;\n \n     pub type rust_thread = libc::pthread_t;\n     pub type rust_thread_return = *u8;\n@@ -202,11 +217,29 @@ mod imp {\n         let mut native: libc::pthread_t = intrinsics::uninit();\n         let mut attr: libc::pthread_attr_t = intrinsics::uninit();\n         assert_eq!(pthread_attr_init(&mut attr), 0);\n-        assert_eq!(pthread_attr_setstacksize(&mut attr,\n-                                             stack as libc::size_t), 0);\n         assert_eq!(pthread_attr_setdetachstate(&mut attr,\n                                                PTHREAD_CREATE_JOINABLE), 0);\n \n+        // Reserve room for the red zone, the runtime's stack of last resort.\n+        let stack_size = cmp::max(stack, RED_ZONE + __pthread_get_minstack(&attr) as uint);\n+        match pthread_attr_setstacksize(&mut attr, stack_size as libc::size_t) {\n+            0 => {\n+            },\n+            libc::EINVAL => {\n+                // EINVAL means |stack_size| is either too small or not a\n+                // multiple of the system page size.  Because it's definitely\n+                // >= PTHREAD_STACK_MIN, it must be an alignment issue.\n+                // Round up to the neareast page and try again.\n+                let page_size = os::page_size();\n+                let stack_size = (stack_size + page_size - 1) & (-(page_size - 1) - 1);\n+                assert_eq!(pthread_attr_setstacksize(&mut attr, stack_size as libc::size_t), 0);\n+            },\n+            errno => {\n+                // This cannot really happen.\n+                fail!(\"pthread_attr_setstacksize() error: {} ({})\", os::last_os_error(), errno);\n+            },\n+        };\n+\n         let arg: *libc::c_void = cast::transmute(p);\n         assert_eq!(pthread_create(&mut native, &attr,\n                                   super::thread_start, arg), 0);\n@@ -228,6 +261,51 @@ mod imp {\n     #[cfg(not(target_os = \"macos\"), not(target_os = \"android\"))]\n     pub unsafe fn yield_now() { assert_eq!(pthread_yield(), 0); }\n \n+    #[cfg(not(target_os = \"linux\"))]\n+    unsafe fn __pthread_get_minstack(_: *libc::pthread_attr_t) -> libc::size_t {\n+        libc::PTHREAD_STACK_MIN\n+    }\n+\n+    // glibc >= 2.15 has a __pthread_get_minstack() function that returns\n+    // PTHREAD_STACK_MIN plus however many bytes are needed for thread-local\n+    // storage.  We need that information to avoid blowing up when a small stack\n+    // is created in an application with big thread-local storage requirements.\n+    // See #6233 for rationale and details.\n+    //\n+    // Dynamically resolve the symbol for compatibility with older versions\n+    // of glibc.  Assumes that we've been dynamically linked to libpthread\n+    // but that is currently always the case.  Note that this means we take\n+    // a dlopen/dlsym/dlclose hit for every new thread.  Mitigating that by\n+    // caching the symbol or the function's return value has its drawbacks:\n+    //\n+    //  * Caching the symbol breaks when libpthread.so is reloaded because\n+    //    its address changes.\n+    //\n+    //  * Caching the return value assumes that it's a fixed quantity.\n+    //    Not very future-proof and untrue in the presence of guard pages\n+    //    The reason __pthread_get_minstack() takes a *libc::pthread_attr_t\n+    //    as its argument is because it takes pthread_attr_setguardsize() into\n+    //    account.\n+    //\n+    // A better solution is to define __pthread_get_minstack() as a weak symbol\n+    // but there is currently no way to express that in Rust code.\n+    #[cfg(target_os = \"linux\")]\n+    unsafe fn __pthread_get_minstack(attr: *libc::pthread_attr_t) -> libc::size_t {\n+        use option::None;\n+        use result::{Err, Ok};\n+        use unstable::dynamic_lib;\n+        match dynamic_lib::DynamicLibrary::open(None) {\n+            Err(err) => fail!(\"DynamicLibrary::open(): {}\", err),\n+            Ok(handle) => {\n+                match handle.symbol::<extern \"C\" fn(*libc::pthread_attr_t) ->\n+                                     libc::size_t>(\"__pthread_get_minstack\") {\n+                    Err(_) => libc::PTHREAD_STACK_MIN,\n+                    Ok(__pthread_get_minstack) => __pthread_get_minstack(attr),\n+                }\n+            }\n+        }\n+    }\n+\n     extern {\n         fn pthread_create(native: *mut libc::pthread_t,\n                           attr: *libc::pthread_attr_t,\n@@ -262,4 +340,10 @@ mod tests {\n \n     #[test]\n     fn detached() { Thread::spawn(proc () {}) }\n+\n+    #[test]\n+    fn small_stacks() {\n+        assert_eq!(42, Thread::start_stack(0, proc () 42).join());\n+        assert_eq!(42, Thread::start_stack(1, proc () 42).join());\n+    }\n }"}, {"sha": "90c7888973afdab8a29779e9921799f1603ee554", "filename": "src/libstd/unstable/stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1f157b6ee5284614b1c5ca1f1a16102c0b12997/src%2Flibstd%2Funstable%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f157b6ee5284614b1c5ca1f1a16102c0b12997/src%2Flibstd%2Funstable%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fstack.rs?ref=a1f157b6ee5284614b1c5ca1f1a16102c0b12997", "patch": "@@ -24,7 +24,7 @@\n //! detection is not guaranteed to continue in the future. Usage of this module\n //! is discouraged unless absolutely necessary.\n \n-static RED_ZONE: uint = 20 * 1024;\n+pub static RED_ZONE: uint = 20 * 1024;\n \n /// This function is invoked from rust's current __morestack function. Segmented\n /// stacks are currently not enabled as segmented stacks, but rather one giant"}]}