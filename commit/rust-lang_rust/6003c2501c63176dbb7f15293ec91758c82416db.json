{"sha": "6003c2501c63176dbb7f15293ec91758c82416db", "node_id": "C_kwDOAAsO6NoAKDYwMDNjMjUwMWM2MzE3NmRiYjdmMTUyOTNlYzkxNzU4YzgyNDE2ZGI", "commit": {"author": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2022-05-20T01:28:11Z"}, "committer": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2022-06-16T01:39:23Z"}, "message": "condense duplicate code into seperate functions", "tree": {"sha": "8f8bb9bf913fd2033ef54ced9a44b53b4aac7046", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f8bb9bf913fd2033ef54ced9a44b53b4aac7046"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6003c2501c63176dbb7f15293ec91758c82416db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6003c2501c63176dbb7f15293ec91758c82416db", "html_url": "https://github.com/rust-lang/rust/commit/6003c2501c63176dbb7f15293ec91758c82416db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6003c2501c63176dbb7f15293ec91758c82416db/comments", "author": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dff1f9f6bbb4a6a9c86da8d81695fec37054b0fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/dff1f9f6bbb4a6a9c86da8d81695fec37054b0fb", "html_url": "https://github.com/rust-lang/rust/commit/dff1f9f6bbb4a6a9c86da8d81695fec37054b0fb"}], "stats": {"total": 67, "additions": 45, "deletions": 22}, "files": [{"sha": "cc91aaa374c3e033370196ac6471627fcae2903e", "filename": "compiler/rustc_mir_transform/src/elaborate_box_derefs.rs", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6003c2501c63176dbb7f15293ec91758c82416db/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6003c2501c63176dbb7f15293ec91758c82416db/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs?ref=6003c2501c63176dbb7f15293ec91758c82416db", "patch": "@@ -9,7 +9,35 @@ use rustc_middle::mir::patch::MirPatch;\n use rustc_middle::mir::visit::MutVisitor;\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::{Ty, TyCtxt};\n+\n+/// Constructs the types used when accessing a Box's pointer\n+pub fn build_ptr_tys<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    pointee: Ty<'tcx>,\n+    unique_did: DefId,\n+    nonnull_did: DefId,\n+) -> (Ty<'tcx>, Ty<'tcx>, Ty<'tcx>) {\n+    let substs = tcx.intern_substs(&[pointee.into()]);\n+    let unique_ty = tcx.bound_type_of(unique_did).subst(tcx, substs);\n+    let nonnull_ty = tcx.bound_type_of(nonnull_did).subst(tcx, substs);\n+    let ptr_ty = tcx.mk_imm_ptr(pointee);\n+\n+    (unique_ty, nonnull_ty, ptr_ty)\n+}\n+\n+// Constructs the projection needed to access a Box's pointer\n+pub fn build_projection<'tcx>(\n+    unique_ty: Ty<'tcx>,\n+    nonnull_ty: Ty<'tcx>,\n+    ptr_ty: Ty<'tcx>,\n+) -> [PlaceElem<'tcx>; 3] {\n+    [\n+        PlaceElem::Field(Field::new(0), unique_ty),\n+        PlaceElem::Field(Field::new(0), nonnull_ty),\n+        PlaceElem::Field(Field::new(0), ptr_ty),\n+    ]\n+}\n \n struct ElaborateBoxDerefVisitor<'tcx, 'a> {\n     tcx: TyCtxt<'tcx>,\n@@ -38,10 +66,8 @@ impl<'tcx, 'a> MutVisitor<'tcx> for ElaborateBoxDerefVisitor<'tcx, 'a> {\n         if place.projection.first() == Some(&PlaceElem::Deref) && base_ty.is_box() {\n             let source_info = self.local_decls[place.local].source_info;\n \n-            let substs = tcx.intern_substs(&[base_ty.boxed_ty().into()]);\n-            let unique_ty = tcx.bound_type_of(self.unique_did).subst(tcx, substs);\n-            let nonnull_ty = tcx.bound_type_of(self.nonnull_did).subst(tcx, substs);\n-            let ptr_ty = tcx.mk_imm_ptr(base_ty.boxed_ty());\n+            let (unique_ty, nonnull_ty, ptr_ty) =\n+                build_ptr_tys(tcx, base_ty.boxed_ty(), self.unique_did, self.nonnull_did);\n \n             let ptr_local = self.patch.new_temp(ptr_ty, source_info.span);\n             self.local_decls.push(LocalDecl::new(ptr_ty, source_info.span));\n@@ -51,14 +77,10 @@ impl<'tcx, 'a> MutVisitor<'tcx> for ElaborateBoxDerefVisitor<'tcx, 'a> {\n             self.patch.add_assign(\n                 location,\n                 Place::from(ptr_local),\n-                Rvalue::Use(Operand::Copy(Place::from(place.local).project_deeper(\n-                    &[\n-                        PlaceElem::Field(Field::new(0), unique_ty),\n-                        PlaceElem::Field(Field::new(0), nonnull_ty),\n-                        PlaceElem::Field(Field::new(0), ptr_ty),\n-                    ],\n-                    tcx,\n-                ))),\n+                Rvalue::Use(Operand::Copy(\n+                    Place::from(place.local)\n+                        .project_deeper(&build_projection(unique_ty, nonnull_ty, ptr_ty), tcx),\n+                )),\n             );\n \n             place.local = ptr_local;"}, {"sha": "62c3a845ee26721d12863563951dab26eb657464", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6003c2501c63176dbb7f15293ec91758c82416db/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6003c2501c63176dbb7f15293ec91758c82416db/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=6003c2501c63176dbb7f15293ec91758c82416db", "patch": "@@ -1240,10 +1240,13 @@ fn create_cases<'tcx>(\n \n                         let nonnull_did = nonnull_def.non_enum_variant().fields[0].did;\n \n-                        let substs = tcx.intern_substs(&[box_ty.boxed_ty().into()]);\n-                        let unique_ty = tcx.bound_type_of(unique_did).subst(tcx, substs);\n-                        let nonnull_ty = tcx.bound_type_of(nonnull_did).subst(tcx, substs);\n-                        let ptr_ty = tcx.mk_imm_ptr(box_ty.boxed_ty());\n+                        let (unique_ty, nonnull_ty, ptr_ty) =\n+                            crate::elaborate_box_derefs::build_ptr_tys(\n+                                tcx,\n+                                box_ty.boxed_ty(),\n+                                unique_did,\n+                                nonnull_did,\n+                            );\n \n                         let ptr_local = body.local_decls.push(LocalDecl::new(ptr_ty, body.span));\n \n@@ -1257,11 +1260,9 @@ fn create_cases<'tcx>(\n                             kind: StatementKind::Assign(Box::new((\n                                 Place::from(ptr_local),\n                                 Rvalue::Use(Operand::Copy(box_place.project_deeper(\n-                                    &[\n-                                        PlaceElem::Field(Field::new(0), unique_ty),\n-                                        PlaceElem::Field(Field::new(0), nonnull_ty),\n-                                        PlaceElem::Field(Field::new(0), ptr_ty),\n-                                    ],\n+                                    &crate::elaborate_box_derefs::build_projection(\n+                                        unique_ty, nonnull_ty, ptr_ty,\n+                                    ),\n                                     tcx,\n                                 ))),\n                             ))),"}]}