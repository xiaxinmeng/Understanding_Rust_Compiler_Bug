{"sha": "cbd79836a5b7ef07e33213cb979294ad1b9faccc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZDc5ODM2YTViN2VmMDdlMzMyMTNjYjk3OTI5NGFkMWI5ZmFjY2M=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-09-13T17:39:30Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-09-13T17:39:30Z"}, "message": "Improve error message for type mismatch in generator arguments", "tree": {"sha": "87e7ccd9d6e5b90cc7e06b133ed93f737e028615", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87e7ccd9d6e5b90cc7e06b133ed93f737e028615"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbd79836a5b7ef07e33213cb979294ad1b9faccc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbd79836a5b7ef07e33213cb979294ad1b9faccc", "html_url": "https://github.com/rust-lang/rust/commit/cbd79836a5b7ef07e33213cb979294ad1b9faccc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbd79836a5b7ef07e33213cb979294ad1b9faccc/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7dbe7a830100c70d59994fd940bf75bb6e39b39", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7dbe7a830100c70d59994fd940bf75bb6e39b39", "html_url": "https://github.com/rust-lang/rust/commit/c7dbe7a830100c70d59994fd940bf75bb6e39b39"}], "stats": {"total": 69, "additions": 55, "deletions": 14}, "files": [{"sha": "6eb6164846ccc7cbae3b6c6902e18ebf203c5d5e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cbd79836a5b7ef07e33213cb979294ad1b9faccc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd79836a5b7ef07e33213cb979294ad1b9faccc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=cbd79836a5b7ef07e33213cb979294ad1b9faccc", "patch": "@@ -730,7 +730,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 };\n \n                 let found_did = match *found_trait_ty.kind() {\n-                    ty::Closure(did, _) | ty::Foreign(did) | ty::FnDef(did, _) => Some(did),\n+                    ty::Closure(did, _)\n+                    | ty::Foreign(did)\n+                    | ty::FnDef(did, _)\n+                    | ty::Generator(did, ..) => Some(did),\n                     ty::Adt(def, _) => Some(def.did),\n                     _ => None,\n                 };"}, {"sha": "362a5f47ffe3061726a8d92a2f5fda6514326db2", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cbd79836a5b7ef07e33213cb979294ad1b9faccc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd79836a5b7ef07e33213cb979294ad1b9faccc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=cbd79836a5b7ef07e33213cb979294ad1b9faccc", "patch": "@@ -1250,33 +1250,40 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             trait_ref: ty::PolyTraitRef<'tcx>,\n         ) -> String {\n             let inputs = trait_ref.skip_binder().substs.type_at(1);\n-            let sig = if let ty::Tuple(inputs) = inputs.kind() {\n-                tcx.mk_fn_sig(\n-                    inputs.iter().map(|k| k.expect_ty()),\n-                    tcx.mk_ty_infer(ty::TyVar(ty::TyVid::from_u32(0))),\n-                    false,\n-                    hir::Unsafety::Normal,\n-                    abi::Abi::Rust,\n-                )\n-            } else {\n-                tcx.mk_fn_sig(\n+            let sig = match inputs.kind() {\n+                ty::Tuple(inputs)\n+                    if tcx.fn_trait_kind_from_lang_item(trait_ref.def_id()).is_some() =>\n+                {\n+                    tcx.mk_fn_sig(\n+                        inputs.iter().map(|k| k.expect_ty()),\n+                        tcx.mk_ty_infer(ty::TyVar(ty::TyVid::from_u32(0))),\n+                        false,\n+                        hir::Unsafety::Normal,\n+                        abi::Abi::Rust,\n+                    )\n+                }\n+                _ => tcx.mk_fn_sig(\n                     std::iter::once(inputs),\n                     tcx.mk_ty_infer(ty::TyVar(ty::TyVid::from_u32(0))),\n                     false,\n                     hir::Unsafety::Normal,\n                     abi::Abi::Rust,\n-                )\n+                ),\n             };\n             trait_ref.rebind(sig).to_string()\n         }\n \n-        let argument_is_closure = expected_ref.skip_binder().substs.type_at(0).is_closure();\n+        let argument_kind = match expected_ref.skip_binder().substs.type_at(0) {\n+            t if t.is_closure() => \"closure\",\n+            t if t.is_generator() => \"generator\",\n+            _ => \"function\",\n+        };\n         let mut err = struct_span_err!(\n             self.tcx.sess,\n             span,\n             E0631,\n             \"type mismatch in {} arguments\",\n-            if argument_is_closure { \"closure\" } else { \"function\" }\n+            argument_kind\n         );\n \n         let found_str = format!(\"expected signature of `{}`\", build_fn_sig_string(self.tcx, found));"}, {"sha": "ce9159b53e0f0a5b147e1e5f87df731e217e10ef", "filename": "src/test/ui/generator/issue-88653.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cbd79836a5b7ef07e33213cb979294ad1b9faccc/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd79836a5b7ef07e33213cb979294ad1b9faccc/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.rs?ref=cbd79836a5b7ef07e33213cb979294ad1b9faccc", "patch": "@@ -0,0 +1,19 @@\n+// Regression test for #88653, where a confusing warning about a\n+// type mismatch in generator arguments was issued.\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::Generator;\n+\n+fn foo(bar: bool) -> impl Generator<(bool,)> {\n+//~^ ERROR: type mismatch in generator arguments [E0631]\n+//~| NOTE: expected signature of `fn((bool,)) -> _`\n+    |bar| {\n+    //~^ NOTE: found signature of `fn(bool) -> _`\n+        if bar {\n+            yield bar;\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "5bd8ad129fef908d874662b5f04500e772afe288", "filename": "src/test/ui/generator/issue-88653.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbd79836a5b7ef07e33213cb979294ad1b9faccc/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbd79836a5b7ef07e33213cb979294ad1b9faccc/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-88653.stderr?ref=cbd79836a5b7ef07e33213cb979294ad1b9faccc", "patch": "@@ -0,0 +1,12 @@\n+error[E0631]: type mismatch in generator arguments\n+  --> $DIR/issue-88653.rs:8:22\n+   |\n+LL | fn foo(bar: bool) -> impl Generator<(bool,)> {\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^ expected signature of `fn((bool,)) -> _`\n+...\n+LL |     |bar| {\n+   |     ----- found signature of `fn(bool) -> _`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0631`."}]}