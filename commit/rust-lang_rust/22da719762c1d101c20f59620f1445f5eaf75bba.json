{"sha": "22da719762c1d101c20f59620f1445f5eaf75bba", "node_id": "C_kwDOAAsO6NoAKDIyZGE3MTk3NjJjMWQxMDFjMjBmNTk2MjBmMTQ0NWY1ZWFmNzViYmE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-05-30T22:57:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-30T22:57:27Z"}, "message": "Rollup merge of #97172 - SparrowLii:unsafe_extern, r=compiler-errors\n\nOptimize the diagnostic generation for `extern unsafe`\n\nThis PR does the following about diagnostic generation when parsing foreign mod:\n1. Fixes the FIXME about avoiding depending on the error message text.\n2. Continue parsing when `unsafe` is followed by `{` (just like `unsafe extern {...}`).\n3. Add test case.", "tree": {"sha": "f823806dacf96d81cbb1385152f08feed9c87f3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f823806dacf96d81cbb1385152f08feed9c87f3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22da719762c1d101c20f59620f1445f5eaf75bba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJilUvYCRBK7hj4Ov3rIwAAHqAIAIoZ5yOBFLMNfQ9/tCMOcfej\n5pU7ABgUavjWdcH1X3WmuTZAsmYEm//0DnS5Oqgzu4zATzGsTi0cAyXEZ+0c2GEa\nq5ldJdD6gih41DT5umkgyZs3EyiZCpQmSgO4wrzaJy7QkgIFrqsgmk5Rpv+GgsKH\nzmRrCrmUHCM1/il5xT4PN1ghRHRlmUp2nyxcIWycXMxWQV5ejIaRldkQ8MxenRHT\nK5p5k1t6T2I438J9j+OYOJ4krirHipdaRELpHEUvSzlESZrPdz1QH+GnNntZpAL0\n4Pfu8HsAouKbJNJlhtFBFQ6qN2R9wXs79FYMVnnKqHsWlv+Vj/k9n4ZJzOsdhjg=\n=JfNG\n-----END PGP SIGNATURE-----\n", "payload": "tree f823806dacf96d81cbb1385152f08feed9c87f3d\nparent 3c0b9d50ae43eb4c13390fcc363e7cc4d4d661d3\nparent 0be2ca96fa7d723db870fb2f96df0f07d32c0774\nauthor Michael Goulet <michael@errs.io> 1653951447 -0700\ncommitter GitHub <noreply@github.com> 1653951447 -0700\n\nRollup merge of #97172 - SparrowLii:unsafe_extern, r=compiler-errors\n\nOptimize the diagnostic generation for `extern unsafe`\n\nThis PR does the following about diagnostic generation when parsing foreign mod:\n1. Fixes the FIXME about avoiding depending on the error message text.\n2. Continue parsing when `unsafe` is followed by `{` (just like `unsafe extern {...}`).\n3. Add test case.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22da719762c1d101c20f59620f1445f5eaf75bba", "html_url": "https://github.com/rust-lang/rust/commit/22da719762c1d101c20f59620f1445f5eaf75bba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22da719762c1d101c20f59620f1445f5eaf75bba/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c0b9d50ae43eb4c13390fcc363e7cc4d4d661d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c0b9d50ae43eb4c13390fcc363e7cc4d4d661d3", "html_url": "https://github.com/rust-lang/rust/commit/3c0b9d50ae43eb4c13390fcc363e7cc4d4d661d3"}, {"sha": "0be2ca96fa7d723db870fb2f96df0f07d32c0774", "url": "https://api.github.com/repos/rust-lang/rust/commits/0be2ca96fa7d723db870fb2f96df0f07d32c0774", "html_url": "https://github.com/rust-lang/rust/commit/0be2ca96fa7d723db870fb2f96df0f07d32c0774"}], "stats": {"total": 84, "additions": 52, "deletions": 32}, "files": [{"sha": "6720399aacb0734177e8c695e50e4dac787ca766", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 15, "deletions": 26, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/22da719762c1d101c20f59620f1445f5eaf75bba/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22da719762c1d101c20f59620f1445f5eaf75bba/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=22da719762c1d101c20f59620f1445f5eaf75bba", "patch": "@@ -996,35 +996,24 @@ impl<'a> Parser<'a> {\n     fn parse_item_foreign_mod(\n         &mut self,\n         attrs: &mut Vec<Attribute>,\n-        unsafety: Unsafe,\n+        mut unsafety: Unsafe,\n     ) -> PResult<'a, ItemInfo> {\n-        let sp_start = self.prev_token.span;\n         let abi = self.parse_abi(); // ABI?\n-        match self.parse_item_list(attrs, |p| p.parse_foreign_item(ForceCollect::No)) {\n-            Ok(items) => {\n-                let module = ast::ForeignMod { unsafety, abi, items };\n-                Ok((Ident::empty(), ItemKind::ForeignMod(module)))\n-            }\n-            Err(mut err) => {\n-                let current_qual_sp = self.prev_token.span;\n-                let current_qual_sp = current_qual_sp.to(sp_start);\n-                if let Ok(current_qual) = self.span_to_snippet(current_qual_sp) {\n-                    // FIXME(davidtwco): avoid depending on the error message text\n-                    if err.message[0].0.expect_str() == \"expected `{`, found keyword `unsafe`\" {\n-                        let invalid_qual_sp = self.token.uninterpolated_span();\n-                        let invalid_qual = self.span_to_snippet(invalid_qual_sp).unwrap();\n-\n-                        err.span_suggestion(\n-                                current_qual_sp.to(invalid_qual_sp),\n-                                &format!(\"`{}` must come before `{}`\", invalid_qual, current_qual),\n-                                format!(\"{} {}\", invalid_qual, current_qual),\n-                                Applicability::MachineApplicable,\n-                            ).note(\"keyword order for functions declaration is `pub`, `default`, `const`, `async`, `unsafe`, `extern`\");\n-                    }\n-                }\n-                Err(err)\n-            }\n+        if unsafety == Unsafe::No\n+            && self.token.is_keyword(kw::Unsafe)\n+            && self.look_ahead(1, |t| t.kind == token::OpenDelim(Delimiter::Brace))\n+        {\n+            let mut err = self.expect(&token::OpenDelim(Delimiter::Brace)).unwrap_err();\n+            err.emit();\n+            unsafety = Unsafe::Yes(self.token.span);\n+            self.eat_keyword(kw::Unsafe);\n         }\n+        let module = ast::ForeignMod {\n+            unsafety,\n+            abi,\n+            items: self.parse_item_list(attrs, |p| p.parse_foreign_item(ForceCollect::No))?,\n+        };\n+        Ok((Ident::empty(), ItemKind::ForeignMod(module)))\n     }\n \n     /// Parses a foreign item (one in an `extern { ... }` block)."}, {"sha": "1da00960adfe4cc59c1939e408acf217605d397b", "filename": "src/test/ui/parser/issues/issue-19398.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/22da719762c1d101c20f59620f1445f5eaf75bba/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-19398.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22da719762c1d101c20f59620f1445f5eaf75bba/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-19398.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-19398.stderr?ref=22da719762c1d101c20f59620f1445f5eaf75bba", "patch": "@@ -4,15 +4,10 @@ error: expected `{`, found keyword `unsafe`\n LL | trait T {\n    |         - while parsing this item list starting here\n LL |     extern \"Rust\" unsafe fn foo();\n-   |     --------------^^^^^^\n-   |     |             |\n-   |     |             expected `{`\n-   |     help: `unsafe` must come before `extern \"Rust\"`: `unsafe extern \"Rust\"`\n+   |                   ^^^^^^ expected `{`\n LL |\n LL | }\n    | - the item list ends here\n-   |\n-   = note: keyword order for functions declaration is `pub`, `default`, `const`, `async`, `unsafe`, `extern`\n \n error: aborting due to previous error\n "}, {"sha": "77856fb67340e20de3eb20d765396eec130f591c", "filename": "src/test/ui/parser/unsafe-foreign-mod-2.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/22da719762c1d101c20f59620f1445f5eaf75bba/src%2Ftest%2Fui%2Fparser%2Funsafe-foreign-mod-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22da719762c1d101c20f59620f1445f5eaf75bba/src%2Ftest%2Fui%2Fparser%2Funsafe-foreign-mod-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funsafe-foreign-mod-2.rs?ref=22da719762c1d101c20f59620f1445f5eaf75bba", "patch": "@@ -0,0 +1,8 @@\n+extern \"C\" unsafe {\n+               //~^ ERROR expected `{`, found keyword `unsafe`\n+               //~| ERROR extern block cannot be declared unsafe\n+    unsafe fn foo();\n+        //~^ ERROR functions in `extern` blocks cannot have qualifiers\n+}\n+\n+fn main() {}"}, {"sha": "7cc2de141ae142da6a0297006f9281ddc220497d", "filename": "src/test/ui/parser/unsafe-foreign-mod-2.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/22da719762c1d101c20f59620f1445f5eaf75bba/src%2Ftest%2Fui%2Fparser%2Funsafe-foreign-mod-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22da719762c1d101c20f59620f1445f5eaf75bba/src%2Ftest%2Fui%2Fparser%2Funsafe-foreign-mod-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funsafe-foreign-mod-2.stderr?ref=22da719762c1d101c20f59620f1445f5eaf75bba", "patch": "@@ -0,0 +1,28 @@\n+error: expected `{`, found keyword `unsafe`\n+  --> $DIR/unsafe-foreign-mod-2.rs:1:12\n+   |\n+LL | extern \"C\" unsafe {\n+   |            ^^^^^^ expected `{`\n+\n+error: extern block cannot be declared unsafe\n+  --> $DIR/unsafe-foreign-mod-2.rs:1:12\n+   |\n+LL | extern \"C\" unsafe {\n+   |            ^^^^^^\n+\n+error: functions in `extern` blocks cannot have qualifiers\n+  --> $DIR/unsafe-foreign-mod-2.rs:4:15\n+   |\n+LL | extern \"C\" unsafe {\n+   | ----------------- in this `extern` block\n+...\n+LL |     unsafe fn foo();\n+   |               ^^^\n+   |\n+help: remove the qualifiers\n+   |\n+LL |     fn foo();\n+   |     ~~\n+\n+error: aborting due to 3 previous errors\n+"}]}