{"sha": "8fc624bc08df5cbb2a507231fe2c91cc56647ac0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmYzYyNGJjMDhkZjVjYmIyYTUwNzIzMWZlMmM5MWNjNTY2NDdhYzA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-02-04T01:39:39Z"}, "committer": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-04T03:54:18Z"}, "message": "Fix various drift issues in the qq branch.", "tree": {"sha": "51c0507ffde37aabd18b875e5f781571b9c8b582", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51c0507ffde37aabd18b875e5f781571b9c8b582"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fc624bc08df5cbb2a507231fe2c91cc56647ac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fc624bc08df5cbb2a507231fe2c91cc56647ac0", "html_url": "https://github.com/rust-lang/rust/commit/8fc624bc08df5cbb2a507231fe2c91cc56647ac0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fc624bc08df5cbb2a507231fe2c91cc56647ac0/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbb13883f79cc4a1d232bd3fa97f0da0b58872bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbb13883f79cc4a1d232bd3fa97f0da0b58872bd", "html_url": "https://github.com/rust-lang/rust/commit/dbb13883f79cc4a1d232bd3fa97f0da0b58872bd"}], "stats": {"total": 67, "additions": 34, "deletions": 33}, "files": [{"sha": "74b9bb091b42288e457eb4560f74a19c4c59bd95", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8fc624bc08df5cbb2a507231fe2c91cc56647ac0/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc624bc08df5cbb2a507231fe2c91cc56647ac0/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=8fc624bc08df5cbb2a507231fe2c91cc56647ac0", "patch": "@@ -22,9 +22,7 @@ type codemap = @{mutable files: [filemap]};\n \n type loc = {file: filemap, line: uint, col: uint};\n \n-fn new_codemap() -> codemap {\n-    @{mutable files: [new_filemap(\"-\", @\"\", 0u, 0u)]}\n-}\n+fn new_codemap() -> codemap { @{mutable files: [] } }\n \n fn new_filemap_w_substr(filename: filename, substr: file_substr,\n                         src: @str,\n@@ -50,16 +48,14 @@ fn get_substr_info(cm: codemap, lo: uint, hi: uint)\n     ret (name, {lo: lo, hi: hi, col: pos.col, line: pos.line});\n }\n \n-fn empty_filemap(cm: codemap) -> filemap {cm.files[0]}\n-\n fn next_line(file: filemap, chpos: uint, byte_pos: uint) {\n     file.lines += [{ch: chpos, byte: byte_pos}];\n }\n \n type lookup_fn = fn@(file_pos) -> uint;\n \n fn lookup_line(map: codemap, pos: uint, lookup: lookup_fn)\n-    -> option::t<{fm: filemap, line: uint}>\n+    -> {fm: filemap, line: uint}\n {\n     let len = vec::len(map.files);\n     let a = 0u;\n@@ -69,7 +65,7 @@ fn lookup_line(map: codemap, pos: uint, lookup: lookup_fn)\n         if lookup(map.files[m].start_pos) > pos { b = m; } else { a = m; }\n     }\n     if (a >= len) {\n-        ret none;\n+        fail #fmt(\"position %u does not resolve to a source location\", pos)\n     }\n     let f = map.files[a];\n     a = 0u;\n@@ -78,18 +74,12 @@ fn lookup_line(map: codemap, pos: uint, lookup: lookup_fn)\n         let m = (a + b) / 2u;\n         if lookup(f.lines[m]) > pos { b = m; } else { a = m; }\n     }\n-    ret some({fm: f, line: a});\n+    ret {fm: f, line: a};\n }\n \n fn lookup_pos(map: codemap, pos: uint, lookup: lookup_fn) -> loc {\n-    alt lookup_line(map, pos, lookup) {\n-      some({fm: f, line: a}) {\n-        {file: f, line: a + 1u, col: pos - lookup(f.lines[a])}\n-      }\n-      none {\n-        { file: empty_filemap(map), line: 0u, col: 0u }\n-      }\n-    }\n+    let {fm: f, line: a} = lookup_line(map, pos, lookup);\n+    ret {file: f, line: a + 1u, col: pos - lookup(f.lines[a])};\n }\n \n fn lookup_char_pos(map: codemap, pos: uint) -> loc {\n@@ -168,7 +158,7 @@ fn lookup_byte_offset(cm: codemap::codemap, chpos: uint)\n     -> {fm: filemap, pos: uint}\n {\n     fn lookup(pos: file_pos) -> uint { ret pos.ch; }\n-    let {fm,line} = option::get(lookup_line(cm,chpos,lookup));\n+    let {fm,line} = lookup_line(cm,chpos,lookup);\n     let line_offset = fm.lines[line].byte - fm.start_pos.byte;\n     let col = chpos - fm.lines[line].ch;\n     let col_offset = str::byte_len_range(*fm.src, line_offset, col);"}, {"sha": "a0bba6eee5c4274fc2e48c190b37d439e5fccebe", "filename": "src/comp/syntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8fc624bc08df5cbb2a507231fe2c91cc56647ac0/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc624bc08df5cbb2a507231fe2c91cc56647ac0/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs?ref=8fc624bc08df5cbb2a507231fe2c91cc56647ac0", "patch": "@@ -83,7 +83,8 @@ fn expand_crate(sess: session::session, c: @crate) -> @crate {\n         {fold_expr: bind expand_expr(exts, cx, _, _, _, afp.fold_expr)\n             with *afp};\n     let f = make_fold(f_pre);\n-    let cm = parse_expr_from_source_str(\"<anon>\", @core_macros(),\n+    let cm = parse_expr_from_source_str(\"<core-macros>\",\n+                                        @core_macros(),\n                                         sess.opts.cfg,\n                                         sess.parse_sess);\n "}, {"sha": "f215d3741111abd990258d901574bb1869bfec66", "filename": "src/comp/syntax/ext/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fc624bc08df5cbb2a507231fe2c91cc56647ac0/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc624bc08df5cbb2a507231fe2c91cc56647ac0/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs?ref=8fc624bc08df5cbb2a507231fe2c91cc56647ac0", "patch": "@@ -248,7 +248,7 @@ fn expand_qquote<N: qq_helper>\n         rcall = mk_call(cx,sp,\n                         [\"syntax\", \"ext\", \"qquote\", \"replace\"],\n                         [pcall,\n-                         mk_vec_e(cx,sp, vec::map(qcx.gather) {|g|\n+                         mk_vec_e(cx,sp, vec::map(copy qcx.gather) {|g|\n                              mk_call(cx,sp,\n                                      [\"syntax\", \"ext\", \"qquote\", g.constr],\n                                      [g.e])}),"}, {"sha": "a59338ad75c03d0299c63584fa78f81264b42d23", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fc624bc08df5cbb2a507231fe2c91cc56647ac0/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc624bc08df5cbb2a507231fe2c91cc56647ac0/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=8fc624bc08df5cbb2a507231fe2c91cc56647ac0", "patch": "@@ -432,14 +432,10 @@ fn noop_fold_ty(t: ty_, fld: ast_fold) -> ty_ {\n       ty_uniq(mt) {ty_uniq(fold_mt(mt, fld))}\n       ty_vec(mt) {ty_vec(fold_mt(mt, fld))}\n       ty_ptr(mt) {ty_ptr(fold_mt(mt, fld))}\n-      ty_task {t}\n-      ty_port(ty) {ty_port(fld.fold_ty(ty))}\n-      ty_chan(ty) {ty_chan(fld.fold_ty(ty))}\n       ty_rec(fields) {ty_rec(vec::map(fields) {|f| fold_field(f, fld)})}\n       ty_fn(proto, decl) {ty_fn(proto, fold_fn_decl(decl, fld))}\n       ty_tup(tys) {ty_tup(vec::map(tys) {|ty| fld.fold_ty(ty)})}\n       ty_path(path, id) {ty_path(fld.fold_path(path), fld.new_id(id))}\n-      ty_type {t}\n       // FIXME: constrs likely needs to be folded...\n       ty_constr(ty, constrs) {ty_constr(fld.fold_ty(ty), constrs)}\n       ty_mac(mac) {ty_mac(fold_mac(mac))}"}, {"sha": "00bc73baeba8006893375916bef80059c64ceee3", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8fc624bc08df5cbb2a507231fe2c91cc56647ac0/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc624bc08df5cbb2a507231fe2c91cc56647ac0/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=8fc624bc08df5cbb2a507231fe2c91cc56647ac0", "patch": "@@ -711,9 +711,12 @@ fn gather_comments_and_literals(cm: codemap::codemap,\n         }\n         let tok = next_token(rdr);\n         if is_lit(tok.tok) {\n-            literals += [{lit: rdr.get_str_from(tok.bpos), pos: tok.chpos}];\n+            let s = rdr.get_str_from(tok.bpos);\n+            literals += [{lit: s, pos: tok.chpos}];\n+            log(debug, \"tok lit: \" + s);\n+        } else {\n+            log(debug, \"tok: \" + token::to_str(rdr, tok.tok));\n         }\n-        log(debug, \"tok: \" + token::to_str(rdr, tok.tok));\n         first_read = false;\n     }\n     ret {cmnts: comments, lits: literals};"}, {"sha": "ea96d4766a7d0d4fe3b03f272a11b9f53b1b3b59", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8fc624bc08df5cbb2a507231fe2c91cc56647ac0/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc624bc08df5cbb2a507231fe2c91cc56647ac0/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=8fc624bc08df5cbb2a507231fe2c91cc56647ac0", "patch": "@@ -1010,9 +1010,7 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n       }\n       ast::expr_assert(expr) {\n         word_nbsp(s, \"assert\");\n-        popen(s);\n         print_expr(s, expr);\n-        pclose(s);\n       }\n       ast::expr_mac(m) { print_mac(s, m); }\n     }\n@@ -1494,10 +1492,20 @@ fn print_literal(s: ps, &&lit: @ast::lit) {\n         word(s.s, \"'\" + escape_str(str::from_char(ch as char), '\\'') + \"'\");\n       }\n       ast::lit_int(i, t) {\n-        word(s.s, int::str(i as int) + ast_util::int_ty_to_str(t));\n+        if i < 0_i64 {\n+            word(s.s,\n+                 \"-\" + u64::to_str(-i as u64, 10u)\n+                 + ast_util::int_ty_to_str(t));\n+        } else {\n+            word(s.s,\n+                 u64::to_str(i as u64, 10u)\n+                 + ast_util::int_ty_to_str(t));\n+        }\n       }\n       ast::lit_uint(u, t) {\n-        word(s.s, uint::str(u as uint) + ast_util::uint_ty_to_str(t));\n+        word(s.s,\n+             u64::to_str(u, 10u)\n+             + ast_util::uint_ty_to_str(t));\n       }\n       ast::lit_float(f, t) {\n         word(s.s, f + ast_util::float_ty_to_str(t));"}, {"sha": "d603c1d8e57bd4c3ecd0cb9b261cb34419f53d0c", "filename": "src/test/pretty/record-trailing-comma.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fc624bc08df5cbb2a507231fe2c91cc56647ac0/src%2Ftest%2Fpretty%2Frecord-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc624bc08df5cbb2a507231fe2c91cc56647ac0/src%2Ftest%2Fpretty%2Frecord-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Frecord-trailing-comma.rs?ref=8fc624bc08df5cbb2a507231fe2c91cc56647ac0", "patch": "@@ -4,5 +4,5 @@ type thing = {x: int, y: int,};\n fn main() {\n     let sth = {x: 0, y: 1,};\n     let sth2 = {y: 9 with sth};\n-    assert (sth.x + sth2.y == 9);\n+    assert sth.x + sth2.y == 9;\n }"}, {"sha": "b050b4d2b862befdfc4f61d47a435435b3cb7ff3", "filename": "src/test/run-pass/enum-disr-val-pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fc624bc08df5cbb2a507231fe2c91cc56647ac0/src%2Ftest%2Frun-pass%2Fenum-disr-val-pretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc624bc08df5cbb2a507231fe2c91cc56647ac0/src%2Ftest%2Frun-pass%2Fenum-disr-val-pretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-disr-val-pretty.rs?ref=8fc624bc08df5cbb2a507231fe2c91cc56647ac0", "patch": "@@ -10,7 +10,7 @@ fn main() {\n }\n \n fn test_color(color: color, val: int, name: str) {\n-    assert (color as int == val);\n-    assert (color as float == val as float);\n+    assert color as int == val;\n+    assert color as float == val as float;\n }\n "}, {"sha": "f307d643dde6600987ee67b8a7d9d36c9b7f0c18", "filename": "src/test/run-pass/qquote.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8fc624bc08df5cbb2a507231fe2c91cc56647ac0/src%2Ftest%2Frun-pass%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc624bc08df5cbb2a507231fe2c91cc56647ac0/src%2Ftest%2Frun-pass%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fqquote.rs?ref=8fc624bc08df5cbb2a507231fe2c91cc56647ac0", "patch": "@@ -85,6 +85,9 @@ fn check_pp<T>(expr: T, f: fn(pprust::ps, T), expect: str) {\n     pp::eof(pp.s);\n     let str = mem_buffer_str(buf);\n     stdout().write_line(str);\n-    if expect != \"\" {assert str == expect;}\n+    if expect != \"\" {\n+        #error(\"expect: '%s', got: '%s'\", expect, str);\n+        assert str == expect;\n+    }\n }\n "}]}