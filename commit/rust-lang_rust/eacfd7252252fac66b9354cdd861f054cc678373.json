{"sha": "eacfd7252252fac66b9354cdd861f054cc678373", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhY2ZkNzI1MjI1MmZhYzY2YjkzNTRjZGQ4NjFmMDU0Y2M2NzgzNzM=", "commit": {"author": {"name": "Josef Reinhard Brandl", "email": "mail@josefbrandl.de", "date": "2018-07-22T09:08:31Z"}, "committer": {"name": "Josef Reinhard Brandl", "email": "mail@josefbrandl.de", "date": "2018-07-25T11:39:14Z"}, "message": "Clarify what a task is", "tree": {"sha": "a192e80855e52eb6d8f6e745ca7ae5d65c8d3a26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a192e80855e52eb6d8f6e745ca7ae5d65c8d3a26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eacfd7252252fac66b9354cdd861f054cc678373", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eacfd7252252fac66b9354cdd861f054cc678373", "html_url": "https://github.com/rust-lang/rust/commit/eacfd7252252fac66b9354cdd861f054cc678373", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eacfd7252252fac66b9354cdd861f054cc678373/comments", "author": {"login": "MajorBreakfast", "id": 340142, "node_id": "MDQ6VXNlcjM0MDE0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/340142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MajorBreakfast", "html_url": "https://github.com/MajorBreakfast", "followers_url": "https://api.github.com/users/MajorBreakfast/followers", "following_url": "https://api.github.com/users/MajorBreakfast/following{/other_user}", "gists_url": "https://api.github.com/users/MajorBreakfast/gists{/gist_id}", "starred_url": "https://api.github.com/users/MajorBreakfast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MajorBreakfast/subscriptions", "organizations_url": "https://api.github.com/users/MajorBreakfast/orgs", "repos_url": "https://api.github.com/users/MajorBreakfast/repos", "events_url": "https://api.github.com/users/MajorBreakfast/events{/privacy}", "received_events_url": "https://api.github.com/users/MajorBreakfast/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MajorBreakfast", "id": 340142, "node_id": "MDQ6VXNlcjM0MDE0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/340142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MajorBreakfast", "html_url": "https://github.com/MajorBreakfast", "followers_url": "https://api.github.com/users/MajorBreakfast/followers", "following_url": "https://api.github.com/users/MajorBreakfast/following{/other_user}", "gists_url": "https://api.github.com/users/MajorBreakfast/gists{/gist_id}", "starred_url": "https://api.github.com/users/MajorBreakfast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MajorBreakfast/subscriptions", "organizations_url": "https://api.github.com/users/MajorBreakfast/orgs", "repos_url": "https://api.github.com/users/MajorBreakfast/repos", "events_url": "https://api.github.com/users/MajorBreakfast/events{/privacy}", "received_events_url": "https://api.github.com/users/MajorBreakfast/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a57d5d7b25d471c902608223793d9b3bb8c4643c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a57d5d7b25d471c902608223793d9b3bb8c4643c", "html_url": "https://github.com/rust-lang/rust/commit/a57d5d7b25d471c902608223793d9b3bb8c4643c"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "affcbf464da221214da7c8712e5c7972bde24d23", "filename": "src/libcore/task/executor.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/eacfd7252252fac66b9354cdd861f054cc678373/src%2Flibcore%2Ftask%2Fexecutor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eacfd7252252fac66b9354cdd861f054cc678373/src%2Flibcore%2Ftask%2Fexecutor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fexecutor.rs?ref=eacfd7252252fac66b9354cdd861f054cc678373", "patch": "@@ -17,21 +17,27 @@ use future::{FutureObj, LocalFutureObj};\n \n /// A task executor.\n ///\n-/// A *task* is a `()`-producing async value that runs at the top level, and will\n-/// be `poll`ed until completion. It's also the unit at which wake-up\n-/// notifications occur. Executors, such as thread pools, allow tasks to be\n-/// spawned and are responsible for putting tasks onto ready queues when\n-/// they are woken up, and polling them when they are ready.\n+/// Futures are polled until completion by tasks, a kind of lightweight\n+/// \"thread\". A *task executor* is responsible for the creation of these tasks\n+/// and the coordination of their execution on real operating system threads. In\n+/// particular, whenever a task signals that it can make further progress via a\n+/// wake-up notification, it is the responsibility of the task executor to put\n+/// the task into a queue to continue executing it, i.e. polling the future in\n+/// it, later.\n pub trait Executor {\n-    /// Spawn the given task, polling it until completion.\n+    /// Spawns a new task with the given future. The future will be polled until\n+    /// completion.\n     ///\n     /// # Errors\n     ///\n     /// The executor may be unable to spawn tasks, either because it has\n     /// been shut down or is resource-constrained.\n-    fn spawn_obj(&mut self, task: FutureObj<'static, ()>) -> Result<(), SpawnObjError>;\n+    fn spawn_obj(\n+        &mut self,\n+        future: FutureObj<'static, ()>,\n+    ) -> Result<(), SpawnObjError>;\n \n-    /// Determine whether the executor is able to spawn new tasks.\n+    /// Determines whether the executor is able to spawn new tasks.\n     ///\n     /// # Returns\n     ///\n@@ -75,8 +81,8 @@ pub struct SpawnObjError {\n     /// The kind of error\n     pub kind: SpawnErrorKind,\n \n-    /// The task for which spawning was attempted\n-    pub task: FutureObj<'static, ()>,\n+    /// The future for which spawning inside a task was attempted\n+    pub future: FutureObj<'static, ()>,\n }\n \n /// The result of a failed spawn\n@@ -85,6 +91,6 @@ pub struct SpawnLocalObjError {\n     /// The kind of error\n     pub kind: SpawnErrorKind,\n \n-    /// The task for which spawning was attempted\n-    pub task: LocalFutureObj<'static, ()>,\n+    /// The future for which spawning inside a task was attempted\n+    pub future: LocalFutureObj<'static, ()>,\n }"}]}