{"sha": "1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0", "node_id": "C_kwDOAAsO6NoAKDFlZjY4NWVhMzkyODBjYzRhNGEzMmY3YzNjNTg2ZDJjZTk0NmU4ZjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-29T04:20:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-29T04:20:23Z"}, "message": "Auto merge of #105001 - nicholasbishop:bishop-more-uefi-test, r=jyn514\n\ntest-various: Add tests for {i686,aarch64}-unknown-uefi\n\nThis extends the existing test for x86_64-unknown-uefi to test the other two UEFI targets as well.", "tree": {"sha": "490ccf5afd9b794ac90c5165c7a5073454933519", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/490ccf5afd9b794ac90c5165c7a5073454933519"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0", "html_url": "https://github.com/rust-lang/rust/commit/1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60b8fc4ccec427216f7767555068ed6fa6a659e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/60b8fc4ccec427216f7767555068ed6fa6a659e7", "html_url": "https://github.com/rust-lang/rust/commit/60b8fc4ccec427216f7767555068ed6fa6a659e7"}, {"sha": "c3b280fb67f2efac9124f4cbd8731e9ae5632043", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3b280fb67f2efac9124f4cbd8731e9ae5632043", "html_url": "https://github.com/rust-lang/rust/commit/c3b280fb67f2efac9124f4cbd8731e9ae5632043"}], "stats": {"total": 91, "additions": 74, "deletions": 17}, "files": [{"sha": "7c09e3a582fd6042c3a90f47c959b718772684ba", "filename": "src/ci/docker/host-x86_64/test-various/Dockerfile", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2FDockerfile?ref=1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0", "patch": "@@ -19,11 +19,18 @@ RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-ins\n   wget \\\n   patch \\\n   ovmf \\\n+  qemu-efi-aarch64 \\\n+  qemu-system-arm \\\n   qemu-system-x86\n \n RUN curl -sL https://nodejs.org/dist/v15.14.0/node-v15.14.0-linux-x64.tar.xz | \\\n   tar -xJ\n \n+# Install 32-bit OVMF files for the i686-unknown-uefi test. This package\n+# is not available in ubuntu 20.04, so download a 22.04 package.\n+RUN curl -sL --output ovmf-ia32.deb http://mirrors.kernel.org/ubuntu/pool/universe/e/edk2/ovmf-ia32_2022.02-3_all.deb\n+RUN dpkg -i ovmf-ia32.deb && rm ovmf-ia32.deb\n+\n WORKDIR /build/\n COPY scripts/musl-patch-configure.diff /build/\n COPY scripts/musl-toolchain.sh /build/\n@@ -68,7 +75,11 @@ ENV MUSL_TARGETS=x86_64-unknown-linux-musl \\\n ENV MUSL_SCRIPT python3 /checkout/x.py --stage 2 test --host='' --target $MUSL_TARGETS\n \n COPY host-x86_64/test-various/uefi_qemu_test /uefi_qemu_test\n-ENV UEFI_TARGETS=x86_64-unknown-uefi \\\n+ENV UEFI_TARGETS=aarch64-unknown-uefi,i686-unknown-uefi,x86_64-unknown-uefi \\\n+    CC_aarch64_unknown_uefi=clang-11 \\\n+    CXX_aarch64_unknown_uefi=clang++-11 \\\n+    CC_i686_unknown_uefi=clang-11 \\\n+    CXX_i686_unknown_uefi=clang++-11 \\\n     CC_x86_64_unknown_uefi=clang-11 \\\n     CXX_x86_64_unknown_uefi=clang++-11\n ENV UEFI_SCRIPT python3 /checkout/x.py --stage 2 build --host='' --target $UEFI_TARGETS && \\"}, {"sha": "ffae7b0d4ac271676fba6cf16c993010d56f037b", "filename": "src/ci/docker/host-x86_64/test-various/uefi_qemu_test/run.py", "status": "modified", "additions": 62, "deletions": 16, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2Fuefi_qemu_test%2Frun.py", "raw_url": "https://github.com/rust-lang/rust/raw/1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2Fuefi_qemu_test%2Frun.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2Fuefi_qemu_test%2Frun.py?ref=1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0", "patch": "@@ -8,19 +8,51 @@\n \n from pathlib import Path\n \n+TARGET_AARCH64 = 'aarch64-unknown-uefi'\n+TARGET_I686 = 'i686-unknown-uefi'\n+TARGET_X86_64 = 'x86_64-unknown-uefi'\n \n-def run(*cmd, capture=False, check=True, env=None):\n+def run(*cmd, capture=False, check=True, env=None, timeout=None):\n     \"\"\"Print and run a command, optionally capturing the output.\"\"\"\n     cmd = [str(p) for p in cmd]\n     print(' '.join(cmd))\n     return subprocess.run(cmd,\n                           capture_output=capture,\n                           check=check,\n                           env=env,\n-                          text=True)\n-\n+                          text=True,\n+                          timeout=timeout)\n+\n+def build_and_run(tmp_dir, target):\n+    if target == TARGET_AARCH64:\n+        boot_file_name = 'bootaa64.efi'\n+        ovmf_dir = Path('/usr/share/AAVMF')\n+        ovmf_code = 'AAVMF_CODE.fd'\n+        ovmf_vars = 'AAVMF_VARS.fd'\n+        qemu = 'qemu-system-aarch64'\n+        machine = 'virt'\n+        cpu = 'cortex-a72'\n+    elif target == TARGET_I686:\n+        boot_file_name = 'bootia32.efi'\n+        ovmf_dir = Path('/usr/share/OVMF')\n+        ovmf_code = 'OVMF32_CODE_4M.secboot.fd'\n+        ovmf_vars = 'OVMF32_VARS_4M.fd'\n+        # The i686 target intentionally uses 64-bit qemu; the important\n+        # difference is that the OVMF code provides a 32-bit environment.\n+        qemu = 'qemu-system-x86_64'\n+        machine = 'q35'\n+        cpu = 'qemu64'\n+    elif target == TARGET_X86_64:\n+        boot_file_name = 'bootx64.efi'\n+        ovmf_dir = Path('/usr/share/OVMF')\n+        ovmf_code = 'OVMF_CODE.fd'\n+        ovmf_vars = 'OVMF_VARS.fd'\n+        qemu = 'qemu-system-x86_64'\n+        machine = 'q35'\n+        cpu = 'qemu64'\n+    else:\n+        raise KeyError('invalid target')\n \n-def build_and_run(tmp_dir):\n     host_artifacts = Path('/checkout/obj/build/x86_64-unknown-linux-gnu')\n     stage0 = host_artifacts / 'stage0/bin'\n     stage2 = host_artifacts / 'stage2/bin'\n@@ -33,7 +65,6 @@ def build_and_run(tmp_dir):\n     shutil.copytree('/uefi_qemu_test', test_crate)\n \n     # Build the UEFI executable.\n-    target = 'x86_64-unknown-uefi'\n     run('cargo',\n         'build',\n         '--manifest-path',\n@@ -49,22 +80,32 @@ def build_and_run(tmp_dir):\n \n     # Copy the executable into the ESP.\n     src_exe_path = test_crate / 'target' / target / 'debug/uefi_qemu_test.efi'\n-    shutil.copy(src_exe_path, boot / 'bootx64.efi')\n+    shutil.copy(src_exe_path, boot / boot_file_name)\n+    print(src_exe_path, boot / boot_file_name)\n+\n+    # Select the appropriate EDK2 build.\n+    ovmf_code = ovmf_dir / ovmf_code\n+    ovmf_vars = ovmf_dir / ovmf_vars\n+\n+    # Make a writable copy of the vars file. aarch64 doesn't boot\n+    # correctly with read-only vars.\n+    ovmf_rw_vars = Path(tmp_dir) / 'vars.fd'\n+    shutil.copy(ovmf_vars, ovmf_rw_vars)\n \n     # Run the executable in QEMU and capture the output.\n-    qemu = 'qemu-system-x86_64'\n-    ovmf_dir = Path('/usr/share/OVMF')\n-    ovmf_code = ovmf_dir / 'OVMF_CODE.fd'\n-    ovmf_vars = ovmf_dir / 'OVMF_VARS.fd'\n     output = run(qemu,\n+                 '-machine',\n+                 machine,\n+                 '-cpu',\n+                 cpu,\n                  '-display',\n                  'none',\n                  '-serial',\n                  'stdio',\n                  '-drive',\n                  f'if=pflash,format=raw,readonly=on,file={ovmf_code}',\n                  '-drive',\n-                 f'if=pflash,format=raw,readonly=on,file={ovmf_vars}',\n+                 f'if=pflash,format=raw,readonly=off,file={ovmf_rw_vars}',\n                  '-drive',\n                  f'format=raw,file=fat:rw:{esp}',\n                  capture=True,\n@@ -73,7 +114,9 @@ def build_and_run(tmp_dir):\n                  # shutdown under some circumstances. That has been\n                  # fixed in newer versions of QEMU, but for now just\n                  # don't check the exit status.\n-                 check=False).stdout\n+                 check=False,\n+                 # Set a timeout to kill the VM in case something goes wrong.\n+                 timeout=60).stdout\n \n     if 'Hello World!' in output:\n         print('VM produced expected output')\n@@ -86,10 +129,13 @@ def build_and_run(tmp_dir):\n \n \n def main():\n-    # Create a temporary directory so that we have a writeable\n-    # workspace.\n-    with tempfile.TemporaryDirectory() as tmp_dir:\n-        build_and_run(tmp_dir)\n+    targets = [TARGET_AARCH64, TARGET_I686, TARGET_X86_64]\n+\n+    for target in targets:\n+        # Create a temporary directory so that we have a writeable\n+        # workspace.\n+        with tempfile.TemporaryDirectory() as tmp_dir:\n+            build_and_run(tmp_dir, target)\n \n \n if __name__ == \"__main__\":"}]}