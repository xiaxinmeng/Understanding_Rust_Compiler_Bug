{"sha": "f9e1de979db1e19acad5c2785057e0f2c25ee1f5", "node_id": "C_kwDOAAsO6NoAKGY5ZTFkZTk3OWRiMWUxOWFjYWQ1YzI3ODUwNTdlMGYyYzI1ZWUxZjU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-19T21:16:28Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-09T09:19:44Z"}, "message": "Stop referring to hir::Crate in hir_pretty.", "tree": {"sha": "8b67df552ef987fd7c5d97e96df2890f231e6d0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b67df552ef987fd7c5d97e96df2890f231e6d0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9e1de979db1e19acad5c2785057e0f2c25ee1f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9e1de979db1e19acad5c2785057e0f2c25ee1f5", "html_url": "https://github.com/rust-lang/rust/commit/f9e1de979db1e19acad5c2785057e0f2c25ee1f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9e1de979db1e19acad5c2785057e0f2c25ee1f5/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54c3299b3aed464b5c658c2dbfc1a270fb4c051f", "url": "https://api.github.com/repos/rust-lang/rust/commits/54c3299b3aed464b5c658c2dbfc1a270fb4c051f", "html_url": "https://github.com/rust-lang/rust/commit/54c3299b3aed464b5c658c2dbfc1a270fb4c051f"}], "stats": {"total": 47, "additions": 28, "deletions": 19}, "files": [{"sha": "2e9050dd672e171b17e3dc12acb055dbce881882", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f9e1de979db1e19acad5c2785057e0f2c25ee1f5/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9e1de979db1e19acad5c2785057e0f2c25ee1f5/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=f9e1de979db1e19acad5c2785057e0f2c25ee1f5", "patch": "@@ -59,23 +59,23 @@ where\n }\n fn call_with_pp_support_hir<A, F>(ppmode: &PpHirMode, tcx: TyCtxt<'_>, f: F) -> A\n where\n-    F: FnOnce(&dyn HirPrinterSupport<'_>, &hir::Crate<'_>) -> A,\n+    F: FnOnce(&dyn HirPrinterSupport<'_>, hir_map::Map<'_>) -> A,\n {\n     match *ppmode {\n         PpHirMode::Normal => {\n             let annotation = NoAnn { sess: tcx.sess, tcx: Some(tcx) };\n-            f(&annotation, tcx.hir().krate())\n+            f(&annotation, tcx.hir())\n         }\n \n         PpHirMode::Identified => {\n             let annotation = IdentifiedAnnotation { sess: tcx.sess, tcx: Some(tcx) };\n-            f(&annotation, tcx.hir().krate())\n+            f(&annotation, tcx.hir())\n         }\n         PpHirMode::Typed => {\n             abort_on_err(tcx.analysis(()), tcx.sess);\n \n             let annotation = TypedAnnotation { tcx, maybe_typeck_results: Cell::new(None) };\n-            tcx.dep_graph.with_ignore(|| f(&annotation, tcx.hir().krate()))\n+            tcx.dep_graph.with_ignore(|| f(&annotation, tcx.hir()))\n         }\n     }\n }\n@@ -443,17 +443,27 @@ pub fn print_after_hir_lowering<'tcx>(\n             format!(\"{:#?}\", krate)\n         }\n \n-        Hir(s) => call_with_pp_support_hir(&s, tcx, move |annotation, krate| {\n+        Hir(s) => call_with_pp_support_hir(&s, tcx, move |annotation, hir_map| {\n             debug!(\"pretty printing HIR {:?}\", s);\n             let sess = annotation.sess();\n             let sm = sess.source_map();\n-            pprust_hir::print_crate(sm, krate, src_name, src, annotation.pp_ann())\n+            let attrs = |id| hir_map.attrs(id);\n+            pprust_hir::print_crate(\n+                sm,\n+                hir_map.root_module(),\n+                src_name,\n+                src,\n+                &attrs,\n+                annotation.pp_ann(),\n+            )\n         }),\n \n-        HirTree => call_with_pp_support_hir(&PpHirMode::Normal, tcx, move |_annotation, krate| {\n-            debug!(\"pretty printing HIR tree\");\n-            format!(\"{:#?}\", krate)\n-        }),\n+        HirTree => {\n+            call_with_pp_support_hir(&PpHirMode::Normal, tcx, move |_annotation, hir_map| {\n+                debug!(\"pretty printing HIR tree\");\n+                format!(\"{:#?}\", hir_map.krate())\n+            })\n+        }\n \n         _ => unreachable!(),\n     };"}, {"sha": "c1992b9b91bbffffaef34ce312643699ba56fd83", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f9e1de979db1e19acad5c2785057e0f2c25ee1f5/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9e1de979db1e19acad5c2785057e0f2c25ee1f5/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=f9e1de979db1e19acad5c2785057e0f2c25ee1f5", "patch": "@@ -15,7 +15,6 @@ use rustc_target::spec::abi::Abi;\n \n use std::borrow::Cow;\n use std::cell::Cell;\n-use std::collections::BTreeMap;\n use std::vec;\n \n pub fn id_to_string(map: &dyn rustc_hir::intravisit::Map<'_>, hir_id: hir::HirId) -> String {\n@@ -69,7 +68,7 @@ impl PpAnn for &dyn rustc_hir::intravisit::Map<'_> {\n pub struct State<'a> {\n     pub s: pp::Printer,\n     comments: Option<Comments<'a>>,\n-    attrs: &'a BTreeMap<hir::HirId, &'a [ast::Attribute]>,\n+    attrs: &'a dyn Fn(hir::HirId) -> &'a [ast::Attribute],\n     ann: &'a (dyn PpAnn + 'a),\n }\n \n@@ -146,17 +145,18 @@ pub const INDENT_UNIT: usize = 4;\n /// it can scan the input text for comments to copy forward.\n pub fn print_crate<'a>(\n     sm: &'a SourceMap,\n-    krate: &hir::Crate<'_>,\n+    krate: &hir::Mod<'_>,\n     filename: FileName,\n     input: String,\n+    attrs: &'a dyn Fn(hir::HirId) -> &'a [ast::Attribute],\n     ann: &'a dyn PpAnn,\n ) -> String {\n-    let mut s = State::new_from_input(sm, filename, input, &krate.attrs, ann);\n+    let mut s = State::new_from_input(sm, filename, input, attrs, ann);\n \n     // When printing the AST, we sometimes need to inject `#[no_std]` here.\n     // Since you can't compile the HIR, it's not necessary.\n \n-    s.print_mod(&krate.module(), s.attrs(hir::CRATE_HIR_ID));\n+    s.print_mod(krate, (*attrs)(hir::CRATE_HIR_ID));\n     s.print_remaining_comments();\n     s.s.eof()\n }\n@@ -166,7 +166,7 @@ impl<'a> State<'a> {\n         sm: &'a SourceMap,\n         filename: FileName,\n         input: String,\n-        attrs: &'a BTreeMap<hir::HirId, &[ast::Attribute]>,\n+        attrs: &'a dyn Fn(hir::HirId) -> &'a [ast::Attribute],\n         ann: &'a dyn PpAnn,\n     ) -> State<'a> {\n         State {\n@@ -178,16 +178,15 @@ impl<'a> State<'a> {\n     }\n \n     fn attrs(&self, id: hir::HirId) -> &'a [ast::Attribute] {\n-        self.attrs.get(&id).map_or(&[], |la| *la)\n+        (self.attrs)(id)\n     }\n }\n \n pub fn to_string<F>(ann: &dyn PpAnn, f: F) -> String\n where\n     F: FnOnce(&mut State<'_>),\n {\n-    let mut printer =\n-        State { s: pp::mk_printer(), comments: None, attrs: &BTreeMap::default(), ann };\n+    let mut printer = State { s: pp::mk_printer(), comments: None, attrs: &|_| &[], ann };\n     f(&mut printer);\n     printer.s.eof()\n }"}]}