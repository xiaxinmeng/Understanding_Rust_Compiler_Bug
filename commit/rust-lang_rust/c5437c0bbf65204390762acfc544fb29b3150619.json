{"sha": "c5437c0bbf65204390762acfc544fb29b3150619", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NDM3YzBiYmY2NTIwNDM5MDc2MmFjZmM1NDRmYjI5YjMxNTA2MTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-01T04:13:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-01T04:13:57Z"}, "message": "Fix failing tests", "tree": {"sha": "80334717bc00aea784d6d67f73aae14b7dba4525", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80334717bc00aea784d6d67f73aae14b7dba4525"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5437c0bbf65204390762acfc544fb29b3150619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5437c0bbf65204390762acfc544fb29b3150619", "html_url": "https://github.com/rust-lang/rust/commit/c5437c0bbf65204390762acfc544fb29b3150619", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5437c0bbf65204390762acfc544fb29b3150619/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82198c9925a8f5da2a8218dc875bc802e7db6049", "url": "https://api.github.com/repos/rust-lang/rust/commits/82198c9925a8f5da2a8218dc875bc802e7db6049", "html_url": "https://github.com/rust-lang/rust/commit/82198c9925a8f5da2a8218dc875bc802e7db6049"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "82f4c1bef28c9aaaded627ffaf957f121cab9178", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5437c0bbf65204390762acfc544fb29b3150619/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5437c0bbf65204390762acfc544fb29b3150619/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=c5437c0bbf65204390762acfc544fb29b3150619", "patch": "@@ -17,7 +17,7 @@ import io::writer_util;\n import arc::methods;\n import pipes::{port, chan, shared_chan};\n \n-macro_rules! move {\n+macro_rules! move_out {\n     { $x:expr } => { unsafe { let y <- *ptr::addr_of($x); y } }\n }\n \n@@ -75,7 +75,7 @@ fn run(args: &[~str]) {\n     vec::iter(worker_results, |r| { future::get(r); } );\n     //error!{\"sending stop message\"};\n     to_child.send(stop);\n-    move!{to_child};\n+    move_out!{to_child};\n     let result = from_child.recv();\n     let end = std::time::precise_time_s();\n     let elapsed = end - start;"}, {"sha": "a9b45ef776f5de5424b316d9cf6680ea428ae8dd", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5437c0bbf65204390762acfc544fb29b3150619/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5437c0bbf65204390762acfc544fb29b3150619/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=c5437c0bbf65204390762acfc544fb29b3150619", "patch": "@@ -12,7 +12,7 @@ import io::writer_util;\n \n import pipes::{port, port_set, chan};\n \n-macro_rules! move {\n+macro_rules! move_out {\n     { $x:expr } => { unsafe { let y <- *ptr::addr_of($x); y } }\n }\n \n@@ -71,7 +71,7 @@ fn run(args: &[~str]) {\n     vec::iter(worker_results, |r| { future::get(r); } );\n     //error!{\"sending stop message\"};\n     to_child.send(stop);\n-    move!{to_child};\n+    move_out!{to_child};\n     let result = from_child.recv();\n     let end = std::time::precise_time_s();\n     let elapsed = end - start;"}, {"sha": "493d98c6a5961767a7c420b547f2d4b5d513a15b", "filename": "src/test/bench/msgsend-ring-pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5437c0bbf65204390762acfc544fb29b3150619/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5437c0bbf65204390762acfc544fb29b3150619/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs?ref=c5437c0bbf65204390762acfc544fb29b3150619", "patch": "@@ -23,7 +23,7 @@ proto! ring {\n \n fn macros() {\n     #macro[\n-        [#move[x],\n+        [#move_out[x],\n          unsafe { let y <- *ptr::addr_of(x); y }]\n     ];\n }\n@@ -46,7 +46,7 @@ fn thread_ring(i: uint,\n         alt recv(port) {\n           ring::num(_n, p) {\n             //log(error, _n);\n-            num_port = some(move!{p});\n+            num_port = some(move_out!{p});\n           }\n         }\n     };"}, {"sha": "3e1288b3b0abefe7e9bf2013754fcaf4369940c0", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5437c0bbf65204390762acfc544fb29b3150619/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5437c0bbf65204390762acfc544fb29b3150619/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=c5437c0bbf65204390762acfc544fb29b3150619", "patch": "@@ -66,7 +66,7 @@ mod NBodySystem {\n         }\n \n         i = 0;\n-        while i < 5 { move(bodies[i], dt); i += 1; }\n+        while i < 5 { move_(bodies[i], dt); i += 1; }\n     }\n \n     fn advance_one(bi: Body::props, bj: Body::props, dt: float) unsafe {\n@@ -88,7 +88,7 @@ mod NBodySystem {\n         bj.vz += dz * bi.mass * mag;\n     }\n \n-    fn move(b: Body::props, dt: float) {\n+    fn move_(b: Body::props, dt: float) {\n         b.x += dt * b.vx;\n         b.y += dt * b.vy;\n         b.z += dt * b.vz;"}, {"sha": "59c9be9d58f5b5e70f4c05258a3f4f34ae514022", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5437c0bbf65204390762acfc544fb29b3150619/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5437c0bbf65204390762acfc544fb29b3150619/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=c5437c0bbf65204390762acfc544fb29b3150619", "patch": "@@ -33,7 +33,7 @@ import comm::recv;\n import comm::send;\n import comm::methods;\n \n-macro_rules! move {\n+macro_rules! move_out {\n     { $x:expr } => { unsafe { let y <- *ptr::addr_of($x); y } }\n }\n \n@@ -151,7 +151,7 @@ mod map_reduce {\n         }\n     }\n \n-    enum reduce_proto<V: copy send> { emit_val(V), done, ref, release }\n+    enum reduce_proto<V: copy send> { emit_val(V), done, addref, release }\n \n     fn start_mappers<K1: copy send, K2: const copy send hash_key,\n                      V: copy send>(\n@@ -188,12 +188,12 @@ mod map_reduce {\n                     alt pipes::recv(ctrl) {\n                       ctrl_proto::reducer(c_, ctrl) {\n                         c = some(c_);\n-                        move!{ctrl}\n+                        move_out!{ctrl}\n                       }\n                     }\n                 }\n                 intermediates.insert(key, c.get());\n-                send(c.get(), ref);\n+                send(c.get(), addref);\n               }\n             }\n             send(c.get(), emit_val(val));\n@@ -232,7 +232,7 @@ mod map_reduce {\n                     // error!{\"all done\"};\n                     is_done = true;\n                   }\n-                  ref { ref_count += 1; }\n+                  addref { ref_count += 1; }\n                   release { ref_count -= 1; }\n                 }\n             }\n@@ -286,7 +286,7 @@ mod map_reduce {\n                 }\n                 ctrl = vec::append_one(\n                     ctrls,\n-                    ctrl_proto::server::reducer(move!{cc}, c));\n+                    ctrl_proto::server::reducer(move_out!{cc}, c));\n               }\n             }\n         }"}, {"sha": "d83045ae4178fc820955bbf5c02daeee3600a5ed", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5437c0bbf65204390762acfc544fb29b3150619/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5437c0bbf65204390762acfc544fb29b3150619/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=c5437c0bbf65204390762acfc544fb29b3150619", "patch": "@@ -56,7 +56,7 @@ mod map_reduce {\n         mapper_done,\n     }\n \n-    enum reduce_proto { emit_val(int), done, ref, release, }\n+    enum reduce_proto { emit_val(int), done, addref, release, }\n \n     fn start_mappers(ctrl: chan<ctrl_proto>, -inputs: ~[~str]) ->\n        ~[future::future<task::task_result>] {\n@@ -87,7 +87,7 @@ mod map_reduce {\n                 send(ctrl, find_reducer(key, chan(p)));\n                 c = recv(p);\n                 im.insert(key, c);\n-                send(c, ref);\n+                send(c, addref);\n               }\n             }\n             send(c, emit_val(val));\n@@ -120,7 +120,7 @@ mod map_reduce {\n                     // error!{\"all done\"};\n                     state.is_done = true;\n                   }\n-                  ref { state.ref_count += 1; }\n+                  addref { state.ref_count += 1; }\n                   release { state.ref_count -= 1; }\n                 }\n             }"}]}