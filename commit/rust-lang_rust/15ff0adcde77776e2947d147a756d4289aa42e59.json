{"sha": "15ff0adcde77776e2947d147a756d4289aa42e59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZmYwYWRjZGU3Nzc3NmUyOTQ3ZDE0N2E3NTZkNDI4OWFhNDJlNTk=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-02-19T12:29:22Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-02-19T12:29:22Z"}, "message": "Use DefId instead of NodeId in MonoItem::Static.", "tree": {"sha": "7ee8badaa65d06fcae4b5fce55bfc973a492ee7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ee8badaa65d06fcae4b5fce55bfc973a492ee7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15ff0adcde77776e2947d147a756d4289aa42e59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15ff0adcde77776e2947d147a756d4289aa42e59", "html_url": "https://github.com/rust-lang/rust/commit/15ff0adcde77776e2947d147a756d4289aa42e59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15ff0adcde77776e2947d147a756d4289aa42e59/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5ed655a0824b2d525e6fad4f3b23f77432ebf98", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5ed655a0824b2d525e6fad4f3b23f77432ebf98", "html_url": "https://github.com/rust-lang/rust/commit/d5ed655a0824b2d525e6fad4f3b23f77432ebf98"}], "stats": {"total": 105, "additions": 64, "deletions": 41}, "files": [{"sha": "7f8f2e9b90603f4a339b91cc96bf74a2bedaed89", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15ff0adcde77776e2947d147a756d4289aa42e59/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ff0adcde77776e2947d147a756d4289aa42e59/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=15ff0adcde77776e2947d147a756d4289aa42e59", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use hir::def_id::DefId;\n use syntax::ast::NodeId;\n use syntax::symbol::InternedString;\n use ty::{Instance, TyCtxt};\n@@ -21,7 +22,7 @@ use std::hash::Hash;\n #[derive(PartialEq, Eq, Clone, Copy, Debug, Hash)]\n pub enum MonoItem<'tcx> {\n     Fn(Instance<'tcx>),\n-    Static(NodeId),\n+    Static(DefId),\n     GlobalAsm(NodeId),\n }\n \n@@ -50,7 +51,9 @@ impl<'tcx> HashStable<StableHashingContext<'tcx>> for MonoItem<'tcx> {\n             MonoItem::Fn(ref instance) => {\n                 instance.hash_stable(hcx, hasher);\n             }\n-            MonoItem::Static(node_id)    |\n+            MonoItem::Static(def_id) => {\n+                def_id.hash_stable(hcx, hasher);\n+            }\n             MonoItem::GlobalAsm(node_id) => {\n                 hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n                     node_id.hash_stable(hcx, hasher);"}, {"sha": "eb4ba21489c3dc310d66eeae8b7c00bfbaf0190d", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15ff0adcde77776e2947d147a756d4289aa42e59/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ff0adcde77776e2947d147a756d4289aa42e59/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=15ff0adcde77776e2947d147a756d4289aa42e59", "patch": "@@ -368,8 +368,7 @@ fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let recursion_depth_reset;\n \n     match starting_point {\n-        MonoItem::Static(node_id) => {\n-            let def_id = tcx.hir.local_def_id(node_id);\n+        MonoItem::Static(def_id) => {\n             let instance = Instance::mono(tcx, def_id);\n \n             // Sanity check whether this ended up being collected accidentally\n@@ -652,8 +651,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n         let tcx = self.tcx;\n         let instance = Instance::mono(tcx, static_.def_id);\n         if should_monomorphize_locally(tcx, &instance) {\n-            let node_id = tcx.hir.as_local_node_id(static_.def_id).unwrap();\n-            self.output.push(MonoItem::Static(node_id));\n+            self.output.push(MonoItem::Static(static_.def_id));\n         }\n \n         self.super_static(static_, context, location);\n@@ -946,10 +944,10 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n                 self.output.push(MonoItem::GlobalAsm(item.id));\n             }\n             hir::ItemStatic(..) => {\n+                let def_id = self.tcx.hir.local_def_id(item.id);\n                 debug!(\"RootCollector: ItemStatic({})\",\n-                       def_id_to_string(self.tcx,\n-                                        self.tcx.hir.local_def_id(item.id)));\n-                self.output.push(MonoItem::Static(item.id));\n+                       def_id_to_string(self.tcx, def_id));\n+                self.output.push(MonoItem::Static(def_id));\n             }\n             hir::ItemConst(..) => {\n                 // const items only generate mono items if they are"}, {"sha": "549919a2c891925d620aae621f8a85ae2ed80a56", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/15ff0adcde77776e2947d147a756d4289aa42e59/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ff0adcde77776e2947d147a756d4289aa42e59/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=15ff0adcde77776e2947d147a756d4289aa42e59", "patch": "@@ -97,8 +97,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n     fn symbol_name(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> ty::SymbolName {\n         match *self.as_mono_item() {\n             MonoItem::Fn(instance) => tcx.symbol_name(instance),\n-            MonoItem::Static(node_id) => {\n-                let def_id = tcx.hir.local_def_id(node_id);\n+            MonoItem::Static(def_id) => {\n                 tcx.symbol_name(Instance::mono(tcx, def_id))\n             }\n             MonoItem::GlobalAsm(node_id) => {\n@@ -159,7 +158,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n     fn explicit_linkage(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Option<Linkage> {\n         let def_id = match *self.as_mono_item() {\n             MonoItem::Fn(ref instance) => instance.def_id(),\n-            MonoItem::Static(node_id) => tcx.hir.local_def_id(node_id),\n+            MonoItem::Static(def_id) => def_id,\n             MonoItem::GlobalAsm(..) => return None,\n         };\n \n@@ -209,7 +208,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n         debug!(\"is_instantiable({:?})\", self);\n         let (def_id, substs) = match *self.as_mono_item() {\n             MonoItem::Fn(ref instance) => (instance.def_id(), instance.substs),\n-            MonoItem::Static(node_id) => (tcx.hir.local_def_id(node_id), Substs::empty()),\n+            MonoItem::Static(def_id) => (def_id, Substs::empty()),\n             // global asm never has predicates\n             MonoItem::GlobalAsm(..) => return true\n         };\n@@ -218,14 +217,11 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n     }\n \n     fn to_string(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> String {\n-        let hir_map = &tcx.hir;\n-\n         return match *self.as_mono_item() {\n             MonoItem::Fn(instance) => {\n                 to_string_internal(tcx, \"fn \", instance)\n             },\n-            MonoItem::Static(node_id) => {\n-                let def_id = hir_map.local_def_id(node_id);\n+            MonoItem::Static(def_id) => {\n                 let instance = Instance::new(def_id, tcx.intern_substs(&[]));\n                 to_string_internal(tcx, \"static \", instance)\n             },\n@@ -251,7 +247,9 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n             MonoItem::Fn(Instance { def, .. }) => {\n                 tcx.hir.as_local_node_id(def.def_id())\n             }\n-            MonoItem::Static(node_id) |\n+            MonoItem::Static(def_id) => {\n+                tcx.hir.as_local_node_id(def_id)\n+            }\n             MonoItem::GlobalAsm(node_id) => {\n                 Some(node_id)\n             }"}, {"sha": "2b558e71483c67e893317c7130ab220066ff0f62", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/15ff0adcde77776e2947d147a756d4289aa42e59/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ff0adcde77776e2947d147a756d4289aa42e59/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=15ff0adcde77776e2947d147a756d4289aa42e59", "patch": "@@ -180,7 +180,9 @@ pub trait CodegenUnitExt<'tcx> {\n                         }\n                     }\n                 }\n-                MonoItem::Static(node_id) |\n+                MonoItem::Static(def_id) => {\n+                    tcx.hir.as_local_node_id(def_id)\n+                }\n                 MonoItem::GlobalAsm(node_id) => {\n                     Some(node_id)\n                 }\n@@ -382,7 +384,15 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         };\n                         (Linkage::External, visibility)\n                     }\n-                    MonoItem::Static(node_id) |\n+                    MonoItem::Static(def_id) => {\n+                        let visibility = if tcx.is_exported_symbol(def_id) {\n+                            can_be_internalized = false;\n+                            default_visibility(def_id)\n+                        } else {\n+                            Visibility::Hidden\n+                        };\n+                        (Linkage::External, visibility)\n+                    }\n                     MonoItem::GlobalAsm(node_id) => {\n                         let def_id = tcx.hir.local_def_id(node_id);\n                         let visibility = if tcx.is_exported_symbol(def_id) {\n@@ -643,7 +653,7 @@ fn characteristic_def_id_of_trans_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             Some(def_id)\n         }\n-        MonoItem::Static(node_id) |\n+        MonoItem::Static(def_id) => Some(def_id),\n         MonoItem::GlobalAsm(node_id) => Some(tcx.hir.local_def_id(node_id)),\n     }\n }"}, {"sha": "f9f185dfa516135035de550d711b9cc3685e7324", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/15ff0adcde77776e2947d147a756d4289aa42e59/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ff0adcde77776e2947d147a756d4289aa42e59/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=15ff0adcde77776e2947d147a756d4289aa42e59", "patch": "@@ -16,7 +16,7 @@ use rustc::hir::map as hir_map;\n use rustc::middle::const_val::ConstEvalErr;\n use debuginfo;\n use base;\n-use monomorphize::{MonoItem, MonoItemExt};\n+use monomorphize::MonoItem;\n use common::{CodegenCx, val_ty};\n use declare;\n use monomorphize::Instance;\n@@ -110,21 +110,24 @@ pub fn get_static(cx: &CodegenCx, def_id: DefId) -> ValueRef {\n         return g;\n     }\n \n+    let defined_in_current_codegen_unit = cx.codegen_unit\n+                                            .items()\n+                                            .contains_key(&MonoItem::Static(def_id));\n+    assert!(!defined_in_current_codegen_unit,\n+            \"consts::get_static() should always hit the cache for \\\n+             statics defined in the same CGU, but did not for `{:?}`\",\n+             def_id);\n+\n     let ty = instance.ty(cx.tcx);\n+    let sym = cx.tcx.symbol_name(instance);\n+\n     let g = if let Some(id) = cx.tcx.hir.as_local_node_id(def_id) {\n \n         let llty = cx.layout_of(ty).llvm_type(cx);\n         let (g, attrs) = match cx.tcx.hir.get(id) {\n             hir_map::NodeItem(&hir::Item {\n                 ref attrs, span, node: hir::ItemStatic(..), ..\n             }) => {\n-                let sym = MonoItem::Static(id).symbol_name(cx.tcx);\n-\n-                let defined_in_current_codegen_unit = cx.codegen_unit\n-                                                         .items()\n-                                                         .contains_key(&MonoItem::Static(id));\n-                assert!(!defined_in_current_codegen_unit);\n-\n                 if declare::get_declared_value(cx, &sym[..]).is_some() {\n                     span_bug!(span, \"trans: Conflicting symbol names for static?\");\n                 }\n@@ -143,7 +146,7 @@ pub fn get_static(cx: &CodegenCx, def_id: DefId) -> ValueRef {\n             hir_map::NodeForeignItem(&hir::ForeignItem {\n                 ref attrs, span, node: hir::ForeignItemStatic(..), ..\n             }) => {\n-                let sym = cx.tcx.symbol_name(instance);\n+\n                 let g = if let Some(name) =\n                         attr::first_attr_value_str_by_name(&attrs, \"linkage\") {\n                     // If this is a static with a linkage specified, then we need to handle\n@@ -203,8 +206,6 @@ pub fn get_static(cx: &CodegenCx, def_id: DefId) -> ValueRef {\n \n         g\n     } else {\n-        let sym = cx.tcx.symbol_name(instance);\n-\n         // FIXME(nagisa): perhaps the map of externs could be offloaded to llvm somehow?\n         // FIXME(nagisa): investigate whether it can be changed into define_global\n         let g = declare::declare_global(cx, &sym, cx.layout_of(ty).llvm_type(cx));\n@@ -246,11 +247,10 @@ pub fn get_static(cx: &CodegenCx, def_id: DefId) -> ValueRef {\n \n pub fn trans_static<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                               m: hir::Mutability,\n-                              id: ast::NodeId,\n+                              def_id: DefId,\n                               attrs: &[ast::Attribute])\n                               -> Result<ValueRef, ConstEvalErr<'tcx>> {\n     unsafe {\n-        let def_id = cx.tcx.hir.local_def_id(id);\n         let g = get_static(cx, def_id);\n \n         let v = ::mir::trans_static_initializer(cx, def_id)?;"}, {"sha": "2751e329259318bb3fe74c1c6d5c5b5bdb3d34c3", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/15ff0adcde77776e2947d147a756d4289aa42e59/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ff0adcde77776e2947d147a756d4289aa42e59/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=15ff0adcde77776e2947d147a756d4289aa42e59", "patch": "@@ -24,10 +24,10 @@ use llvm;\n use monomorphize::Instance;\n use type_of::LayoutLlvmExt;\n use rustc::hir;\n+use rustc::hir::def_id::DefId;\n use rustc::mir::mono::{Linkage, Visibility};\n use rustc::ty::TypeFoldable;\n use rustc::ty::layout::LayoutOf;\n-use syntax::ast;\n use syntax::attr;\n use std::fmt;\n \n@@ -44,11 +44,18 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n                cx.codegen_unit.name());\n \n         match *self.as_mono_item() {\n-            MonoItem::Static(node_id) => {\n+            MonoItem::Static(def_id) => {\n                 let tcx = cx.tcx;\n+                let node_id = match tcx.hir.as_local_node_id(def_id) {\n+                    Some(node_id) => node_id,\n+                    None => {\n+                        bug!(\"MonoItemExt::define() called for non-local \\\n+                              static `{:?}`.\", def_id)\n+                    }\n+                };\n                 let item = tcx.hir.expect_item(node_id);\n                 if let hir::ItemStatic(_, m, _) = item.node {\n-                    match consts::trans_static(&cx, m, item.id, &item.attrs) {\n+                    match consts::trans_static(&cx, m, def_id, &item.attrs) {\n                         Ok(_) => { /* Cool, everything's alright. */ },\n                         Err(err) => {\n                             err.report(tcx, item.span, \"static\");\n@@ -91,8 +98,8 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n         debug!(\"symbol {}\", &symbol_name);\n \n         match *self.as_mono_item() {\n-            MonoItem::Static(node_id) => {\n-                predefine_static(cx, node_id, linkage, visibility, &symbol_name);\n+            MonoItem::Static(def_id) => {\n+                predefine_static(cx, def_id, linkage, visibility, &symbol_name);\n             }\n             MonoItem::Fn(instance) => {\n                 predefine_fn(cx, instance, linkage, visibility, &symbol_name);\n@@ -126,11 +133,18 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n impl<'a, 'tcx> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {}\n \n fn predefine_static<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n-                              node_id: ast::NodeId,\n+                              def_id: DefId,\n                               linkage: Linkage,\n                               visibility: Visibility,\n                               symbol_name: &str) {\n-    let def_id = cx.tcx.hir.local_def_id(node_id);\n+    let node_id = match cx.tcx.hir.as_local_node_id(def_id) {\n+        Some(node_id) => node_id,\n+        None => {\n+            bug!(\"MonoItemExt::predefine() called for non-local static `{:?}`.\",\n+                 def_id)\n+        }\n+    };\n+\n     let instance = Instance::mono(cx.tcx, def_id);\n     let ty = instance.ty(cx.tcx);\n     let llty = cx.layout_of(ty).llvm_type(cx);"}]}