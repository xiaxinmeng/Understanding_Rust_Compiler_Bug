{"sha": "49e2570b77558e9215b43926d2633eef4a25f7bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZTI1NzBiNzc1NThlOTIxNWI0MzkyNmQyNjMzZWVmNGEyNWY3YmQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-05-11T14:44:43Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-05-11T14:44:43Z"}, "message": "don't lint at the use-site of bad struct field bindings if they're shorthand\n\nfixes #899", "tree": {"sha": "cff4f6fdde3bf947a2787e9bdae38d15e809a94e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cff4f6fdde3bf947a2787e9bdae38d15e809a94e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49e2570b77558e9215b43926d2633eef4a25f7bd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXM0VbAAoJEFbW7qD8Z6xGpXEP/RhXtEyKeOTNTtHWohc0dBeT\nR1OhYv+Dv9dfvgMXH+IZPIr51ZRaabf4fiCjxElvZcSceR/gwjOmsN8DJZUDtjfP\nlqmjU8lUPrrLwm4HK1IirqLx4ONeHTNd4ZgYStxdvWJaBfMoqjedbhbWnfpT4TEF\nAI+OoQeDrNP2+E1E+bf0KV54pI89SMZDFZCL3GYXZNhHsGIf5IRibp3O+Yd58T1x\nZTQU9d9L9n6FMnQDlopba60qJGiQStox/b6aCtI1bGELI9cNJGaQwS04tC6v0S0Q\nd618MJX/TGOmQ/+CfO/3zJTDOOQwM2lm5/qXd3RRXf28iTigtBlaTBOFZPaJlean\nou7iCBbvQKNV9efwX8r8Y66Dzxh5Uqz7QI89LUcWhYdQLCyczVPCobRaAVAZELaB\nTCyUIhP56AxYRh0dzNDjaavNyt+kXVhkoUKxdA6Jci4h/c0ZS+FpF5BvFTfRJy82\nKAtsprw0s/OPC7GlsZJqAgGQyvKWJ7W/nloctVbVKiEesurfllmNg+3xQ1uhDEzv\nH4j6dQgWf2gjcD7mB1W+OG0ru6WQUy5N8zVuAlUZsX+6LJX0Thv60ZSPQCcNhsDf\nQR42Du1SDQqDpIEiuI/bU2H75fEFyXrgtGpOqPQ5Lw8/Od13+tGsZNgmlytNKW8S\n8mg5EqKAKo4xoAwtIe2a\n=sRjS\n-----END PGP SIGNATURE-----", "payload": "tree cff4f6fdde3bf947a2787e9bdae38d15e809a94e\nparent 855b292cda017fe47674725b2866ba760fed1f67\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1462977883 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1462977883 +0200\n\ndon't lint at the use-site of bad struct field bindings if they're shorthand\n\nfixes #899"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49e2570b77558e9215b43926d2633eef4a25f7bd", "html_url": "https://github.com/rust-lang/rust/commit/49e2570b77558e9215b43926d2633eef4a25f7bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49e2570b77558e9215b43926d2633eef4a25f7bd/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "855b292cda017fe47674725b2866ba760fed1f67", "url": "https://api.github.com/repos/rust-lang/rust/commits/855b292cda017fe47674725b2866ba760fed1f67", "html_url": "https://github.com/rust-lang/rust/commit/855b292cda017fe47674725b2866ba760fed1f67"}], "stats": {"total": 39, "additions": 29, "deletions": 10}, "files": [{"sha": "e8f3858a37bee1d3c90cad21d5a25b09c3e44395", "filename": "src/non_expressive_names.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/49e2570b77558e9215b43926d2633eef4a25f7bd/src%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49e2570b77558e9215b43926d2633eef4a25f7bd/src%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnon_expressive_names.rs?ref=49e2570b77558e9215b43926d2633eef4a25f7bd", "patch": "@@ -3,7 +3,7 @@ use syntax::codemap::Span;\n use syntax::parse::token::InternedString;\n use syntax::ast::*;\n use syntax::attr;\n-use syntax::visit;\n+use syntax::visit::{Visitor, walk_block, walk_pat, walk_expr};\n use utils::{span_lint_and_then, in_macro, span_lint};\n \n /// **What it does:** This lint warns about names that are very similar and thus confusing\n@@ -68,12 +68,17 @@ const WHITELIST: &'static [&'static [&'static str]] = &[\n \n struct SimilarNamesNameVisitor<'a, 'b: 'a, 'c: 'b>(&'a mut SimilarNamesLocalVisitor<'b, 'c>);\n \n-impl<'v, 'a, 'b, 'c> visit::Visitor<'v> for SimilarNamesNameVisitor<'a, 'b, 'c> {\n+impl<'v, 'a, 'b, 'c> Visitor<'v> for SimilarNamesNameVisitor<'a, 'b, 'c> {\n     fn visit_pat(&mut self, pat: &'v Pat) {\n-        if let PatKind::Ident(_, id, _) = pat.node {\n-            self.check_name(id.span, id.node.name);\n+        match pat.node {\n+            PatKind::Ident(_, id, _) => self.check_name(id.span, id.node.name),\n+            PatKind::Struct(_, ref fields, _) => for field in fields {\n+                if !field.node.is_shorthand {\n+                    self.visit_pat(&field.node.pat);\n+                }\n+            },\n+            _ => walk_pat(self, pat),\n         }\n-        visit::walk_pat(self, pat);\n     }\n }\n \n@@ -219,22 +224,22 @@ impl<'a, 'b> SimilarNamesLocalVisitor<'a, 'b> {\n     }\n }\n \n-impl<'v, 'a, 'b> visit::Visitor<'v> for SimilarNamesLocalVisitor<'a, 'b> {\n+impl<'v, 'a, 'b> Visitor<'v> for SimilarNamesLocalVisitor<'a, 'b> {\n     fn visit_local(&mut self, local: &'v Local) {\n         if let Some(ref init) = local.init {\n-            self.apply(|this| visit::walk_expr(this, &**init));\n+            self.apply(|this| walk_expr(this, &**init));\n         }\n         // add the pattern after the expression because the bindings aren't available yet in the init expression\n         SimilarNamesNameVisitor(self).visit_pat(&*local.pat);\n     }\n     fn visit_block(&mut self, blk: &'v Block) {\n-        self.apply(|this| visit::walk_block(this, blk));\n+        self.apply(|this| walk_block(this, blk));\n     }\n     fn visit_arm(&mut self, arm: &'v Arm) {\n         self.apply(|this| {\n             // just go through the first pattern, as either all patterns bind the same bindings or rustc would have errored much earlier\n             SimilarNamesNameVisitor(this).visit_pat(&arm.pats[0]);\n-            this.apply(|this| visit::walk_expr(this, &arm.body));\n+            this.apply(|this| walk_expr(this, &arm.body));\n         });\n     }\n     fn visit_item(&mut self, _: &'v Item) {\n@@ -257,7 +262,7 @@ impl EarlyLintPass for NonExpressiveNames {\n                     visit::walk_pat(&mut SimilarNamesNameVisitor(&mut visitor), &arg.pat);\n                 }\n                 // walk all other bindings\n-                visit::walk_block(&mut visitor, blk);\n+                walk_block(&mut visitor, blk);\n             }\n         }\n     }"}, {"sha": "a0e5885c539c2d637286e208b03a175b60333b98", "filename": "tests/compile-fail/non_expressive_names2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/49e2570b77558e9215b43926d2633eef4a25f7bd/tests%2Fcompile-fail%2Fnon_expressive_names2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49e2570b77558e9215b43926d2633eef4a25f7bd/tests%2Fcompile-fail%2Fnon_expressive_names2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnon_expressive_names2.rs?ref=49e2570b77558e9215b43926d2633eef4a25f7bd", "patch": "@@ -0,0 +1,14 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![deny(clippy,similar_names)]\n+#![allow(unused)]\n+\n+struct Foo {\n+    apple: i32,\n+    bpple: i32,\n+}\n+\n+fn main() {\n+    let Foo { apple, bpple } = unimplemented!();\n+    let Foo { apple: spring, bpple: sprang } = unimplemented!(); //~ ERROR: name is too similar\n+}"}]}