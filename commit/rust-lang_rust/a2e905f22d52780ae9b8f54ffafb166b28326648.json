{"sha": "a2e905f22d52780ae9b8f54ffafb166b28326648", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZTkwNWYyMmQ1Mjc4MGFlOWI4ZjU0ZmZhZmIxNjZiMjgzMjY2NDg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-09-02T17:50:21Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-09-02T18:09:37Z"}, "message": "Correctly align offset for dst field projections\n\nFixes #681", "tree": {"sha": "a09f02346f5b5aa5d11140654cb760f01668789c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a09f02346f5b5aa5d11140654cb760f01668789c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2e905f22d52780ae9b8f54ffafb166b28326648", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2e905f22d52780ae9b8f54ffafb166b28326648", "html_url": "https://github.com/rust-lang/rust/commit/a2e905f22d52780ae9b8f54ffafb166b28326648", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2e905f22d52780ae9b8f54ffafb166b28326648/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd0e8622823573342f9b7eac33e239b328ae5d85", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd0e8622823573342f9b7eac33e239b328ae5d85", "html_url": "https://github.com/rust-lang/rust/commit/cd0e8622823573342f9b7eac33e239b328ae5d85"}], "stats": {"total": 125, "additions": 116, "deletions": 9}, "files": [{"sha": "6c338e99912ec2eec32edaa156f6d9fc7b9d8523", "filename": "example/dst-field-align.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/a2e905f22d52780ae9b8f54ffafb166b28326648/example%2Fdst-field-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e905f22d52780ae9b8f54ffafb166b28326648/example%2Fdst-field-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fdst-field-align.rs?ref=a2e905f22d52780ae9b8f54ffafb166b28326648", "patch": "@@ -0,0 +1,67 @@\n+// run-pass\n+#![allow(dead_code)]\n+struct Foo<T: ?Sized> {\n+    a: u16,\n+    b: T\n+}\n+\n+trait Bar {\n+    fn get(&self) -> usize;\n+}\n+\n+impl Bar for usize {\n+    fn get(&self) -> usize { *self }\n+}\n+\n+struct Baz<T: ?Sized> {\n+    a: T\n+}\n+\n+struct HasDrop<T: ?Sized> {\n+    ptr: Box<usize>,\n+    data: T\n+}\n+\n+fn main() {\n+    // Test that zero-offset works properly\n+    let b : Baz<usize> = Baz { a: 7 };\n+    assert_eq!(b.a.get(), 7);\n+    let b : &Baz<dyn Bar> = &b;\n+    assert_eq!(b.a.get(), 7);\n+\n+    // Test that the field is aligned properly\n+    let f : Foo<usize> = Foo { a: 0, b: 11 };\n+    assert_eq!(f.b.get(), 11);\n+    let ptr1 : *const u8 = &f.b as *const _ as *const u8;\n+\n+    let f : &Foo<dyn Bar> = &f;\n+    let ptr2 : *const u8 = &f.b as *const _ as *const u8;\n+    assert_eq!(f.b.get(), 11);\n+\n+    // The pointers should be the same\n+    assert_eq!(ptr1, ptr2);\n+\n+    // Test that nested DSTs work properly\n+    let f : Foo<Foo<usize>> = Foo { a: 0, b: Foo { a: 1, b: 17 }};\n+    assert_eq!(f.b.b.get(), 17);\n+    let f : &Foo<Foo<dyn Bar>> = &f;\n+    assert_eq!(f.b.b.get(), 17);\n+\n+    // Test that get the pointer via destructuring works\n+\n+    let f : Foo<usize> = Foo { a: 0, b: 11 };\n+    let f : &Foo<dyn Bar> = &f;\n+    let &Foo { a: _, b: ref bar } = f;\n+    assert_eq!(bar.get(), 11);\n+\n+    // Make sure that drop flags don't screw things up\n+\n+    let d : HasDrop<Baz<[i32; 4]>> = HasDrop {\n+        ptr: Box::new(0),\n+        data: Baz { a: [1,2,3,4] }\n+    };\n+    assert_eq!([1,2,3,4], d.data.a);\n+\n+    let d : &HasDrop<Baz<[i32]>> = &d;\n+    assert_eq!(&[1,2,3,4], &d.data.a);\n+}"}, {"sha": "d6ae021a44d543e9f0057178754e0f3d33872b27", "filename": "src/value_and_place.rs", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a2e905f22d52780ae9b8f54ffafb166b28326648/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e905f22d52780ae9b8f54ffafb166b28326648/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=a2e905f22d52780ae9b8f54ffafb166b28326648", "patch": "@@ -3,18 +3,54 @@ use crate::prelude::*;\n fn codegen_field<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     base: Value,\n+    extra: Option<Value>,\n     layout: TyLayout<'tcx>,\n     field: mir::Field,\n ) -> (Value, TyLayout<'tcx>) {\n     let field_offset = layout.fields.offset(field.index());\n-    let field_ty = layout.field(&*fx, field.index());\n-    if field_offset.bytes() > 0 {\n-        (\n-            fx.bcx.ins().iadd_imm(base, field_offset.bytes() as i64),\n-            field_ty,\n-        )\n+    let field_layout = layout.field(&*fx, field.index());\n+\n+    let simple = |fx: &mut FunctionCx<_>| {\n+        if field_offset.bytes() > 0 {\n+            (\n+                fx.bcx.ins().iadd_imm(base, field_offset.bytes() as i64),\n+                field_layout,\n+            )\n+        } else {\n+            (base, field_layout)\n+        }\n+    };\n+\n+    if let Some(extra) = extra {\n+        if !field_layout.is_unsized() {\n+            return simple(fx);\n+        }\n+        match field_layout.ty.sty {\n+            ty::Slice(..) | ty::Str | ty::Foreign(..) => return simple(fx),\n+            ty::Adt(def, _) if def.repr.packed() => {\n+                assert_eq!(layout.align.abi.bytes(), 1);\n+                return simple(fx);\n+            }\n+            _ => {\n+                // We have to align the offset for DST's\n+                let unaligned_offset = field_offset.bytes();\n+                let (_, unsized_align) = crate::unsize::size_and_align_of_dst(fx, field_layout.ty, extra);\n+\n+                let one = fx.bcx.ins().iconst(pointer_ty(fx.tcx), 1);\n+                let align_sub_1 = fx.bcx.ins().isub(unsized_align, one);\n+                let and_lhs = fx.bcx.ins().iadd_imm(align_sub_1, unaligned_offset as i64);\n+                let zero = fx.bcx.ins().iconst(pointer_ty(fx.tcx), 0);\n+                let and_rhs = fx.bcx.ins().isub(zero, unsized_align);\n+                let offset = fx.bcx.ins().band(and_lhs, and_rhs);\n+\n+                (\n+                    fx.bcx.ins().iadd(base, offset),\n+                    field_layout,\n+                )\n+            }\n+        }\n     } else {\n-        (base, field_ty)\n+        simple(fx)\n     }\n }\n \n@@ -125,7 +161,7 @@ impl<'tcx> CValue<'tcx> {\n             _ => bug!(\"place_field for {:?}\", self),\n         };\n \n-        let (field_ptr, field_layout) = codegen_field(fx, base, layout, field);\n+        let (field_ptr, field_layout) = codegen_field(fx, base, None, layout, field);\n         CValue::by_ref(field_ptr, field_layout)\n     }\n \n@@ -431,7 +467,7 @@ impl<'tcx> CPlace<'tcx> {\n         let layout = self.layout();\n         let (base, extra) = self.to_addr_maybe_unsized(fx);\n \n-        let (field_ptr, field_layout) = codegen_field(fx, base, layout, field);\n+        let (field_ptr, field_layout) = codegen_field(fx, base, extra, layout, field);\n         if field_layout.is_unsized() {\n             CPlace::for_addr_with_extra(field_ptr, extra.unwrap(), field_layout)\n         } else {"}, {"sha": "532a96945a62201484a4511759b440718eed2bb9", "filename": "test.sh", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2e905f22d52780ae9b8f54ffafb166b28326648/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a2e905f22d52780ae9b8f54ffafb166b28326648/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=a2e905f22d52780ae9b8f54ffafb166b28326648", "patch": "@@ -50,6 +50,10 @@ $RUSTC example/alloc_example.rs --crate-type bin\n \n jit std_example example/std_example.rs\n \n+echo \"[AOT] dst_field_align\"\n+$RUSTC example/dst-field-align.rs -Zmir-opt-level=2 --crate-name dst_field_align --crate-type bin\n+./target/out/dst_field_align\n+\n echo \"[AOT] std_example\"\n $RUSTC example/std_example.rs --crate-type bin\n ./target/out/std_example"}]}