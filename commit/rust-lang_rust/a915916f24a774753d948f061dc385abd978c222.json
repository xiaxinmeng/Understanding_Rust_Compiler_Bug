{"sha": "a915916f24a774753d948f061dc385abd978c222", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MTU5MTZmMjRhNzc0NzUzZDk0OGYwNjFkYzM4NWFiZDk3OGMyMjI=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-02-17T17:06:29Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-02-17T17:06:29Z"}, "message": "Rename fns", "tree": {"sha": "dbc07aa4f1cbb6bb193818fdb15dbfa371bd0c81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbc07aa4f1cbb6bb193818fdb15dbfa371bd0c81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a915916f24a774753d948f061dc385abd978c222", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a915916f24a774753d948f061dc385abd978c222", "html_url": "https://github.com/rust-lang/rust/commit/a915916f24a774753d948f061dc385abd978c222", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a915916f24a774753d948f061dc385abd978c222/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e992c09e1f4308b65a375c2cabe39d97caf5a69c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e992c09e1f4308b65a375c2cabe39d97caf5a69c", "html_url": "https://github.com/rust-lang/rust/commit/e992c09e1f4308b65a375c2cabe39d97caf5a69c"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "9e7011491c08e481b69fcd3cd2734687bd6c1406", "filename": "rustfmt-core/src/reorder.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a915916f24a774753d948f061dc385abd978c222/rustfmt-core%2Fsrc%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a915916f24a774753d948f061dc385abd978c222/rustfmt-core%2Fsrc%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Freorder.rs?ref=a915916f24a774753d948f061dc385abd978c222", "patch": "@@ -232,17 +232,20 @@ fn is_extern_crate_without_attr(item: &ast::Item) -> bool {\n }\n \n impl<'b, 'a: 'b> FmtVisitor<'a> {\n-    pub fn reorder_items<F>(\n+    /// Format items with the same item kind and reorder them. If `in_group` is\n+    /// `true`, then the items separated by an empty line will not be reordered\n+    /// together.\n+    fn walk_items_with_reordering<F>(\n         &mut self,\n-        items_left: &[&ast::Item],\n+        items: &[&ast::Item],\n         is_item: &F,\n         in_group: bool,\n     ) -> usize\n     where\n         F: Fn(&ast::Item) -> bool,\n     {\n-        let mut last = self.codemap.lookup_line_range(items_left[0].span());\n-        let item_length = items_left\n+        let mut last = self.codemap.lookup_line_range(items[0].span());\n+        let item_length = items\n             .iter()\n             .take_while(|ppi| {\n                 is_item(&***ppi) && (!in_group || {\n@@ -253,7 +256,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 })\n             })\n             .count();\n-        let items = &items_left[..item_length];\n+        let items = &items[..item_length];\n \n         let at_least_one_in_file_lines = items\n             .iter()\n@@ -274,21 +277,23 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         item_length\n     }\n \n-    pub fn walk_items(&mut self, mut items_left: &[&ast::Item]) {\n+    /// Visit and format the given items. Items are reordered If they are\n+    /// consecutive and reorderable.\n+    pub fn visit_items_with_reordering(&mut self, mut items: &[&ast::Item]) {\n         macro try_reorder_items_with($reorder: ident, $in_group: ident, $pred: ident) {\n-            if self.config.$reorder() && $pred(&*items_left[0]) {\n+            if self.config.$reorder() && $pred(&*items[0]) {\n                 let used_items_len =\n-                    self.reorder_items(items_left, &$pred, self.config.$in_group());\n-                let (_, rest) = items_left.split_at(used_items_len);\n-                items_left = rest;\n+                    self.walk_items_with_reordering(items, &$pred, self.config.$in_group());\n+                let (_, rest) = items.split_at(used_items_len);\n+                items = rest;\n                 continue;\n             }\n         }\n \n-        while !items_left.is_empty() {\n+        while !items.is_empty() {\n             // If the next item is a `use`, `extern crate` or `mod`, then extract it and any\n             // subsequent items that have the same item kind to be reordered within\n-            // `reorder_items`. Otherwise, just format the next item for output.\n+            // `walk_items_with_reordering`. Otherwise, just format the next item for output.\n             {\n                 try_reorder_items_with!(\n                     reorder_imports,\n@@ -303,10 +308,10 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 try_reorder_items_with!(reorder_modules, reorder_modules, is_mod_decl_without_attr);\n             }\n             // Reaching here means items were not reordered. There must be at least\n-            // one item left in `items_left`, so calling `unwrap()` here is safe.\n-            let (item, rest) = items_left.split_first().unwrap();\n+            // one item left in `items`, so calling `unwrap()` here is safe.\n+            let (item, rest) = items.split_first().unwrap();\n             self.visit_item(item);\n-            items_left = rest;\n+            items = rest;\n         }\n     }\n }"}, {"sha": "834be09951a04bedd62225bd129f3c293e7d79dd", "filename": "rustfmt-core/src/visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a915916f24a774753d948f061dc385abd978c222/rustfmt-core%2Fsrc%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a915916f24a774753d948f061dc385abd978c222/rustfmt-core%2Fsrc%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fvisitor.rs?ref=a915916f24a774753d948f061dc385abd978c222", "patch": "@@ -623,7 +623,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n     }\n \n     fn walk_mod_items(&mut self, m: &ast::Mod) {\n-        self.walk_items(&ptr_vec_to_ref_vec(&m.items));\n+        self.visit_items_with_reordering(&ptr_vec_to_ref_vec(&m.items));\n     }\n \n     fn walk_stmts(&mut self, stmts: &[ast::Stmt]) {\n@@ -649,7 +649,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             self.visit_stmt(&stmts[0]);\n             self.walk_stmts(&stmts[1..]);\n         } else {\n-            self.walk_items(&items);\n+            self.visit_items_with_reordering(&items);\n             self.walk_stmts(&stmts[items.len()..]);\n         }\n     }"}]}