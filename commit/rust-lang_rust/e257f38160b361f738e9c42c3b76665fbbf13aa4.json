{"sha": "e257f38160b361f738e9c42c3b76665fbbf13aa4", "node_id": "C_kwDOAAsO6NoAKGUyNTdmMzgxNjBiMzYxZjczOGU5YzQyYzNiNzY2NjVmYmJmMTNhYTQ", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-06-04T17:24:41Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-06-04T17:24:41Z"}, "message": "address review comments", "tree": {"sha": "0abf1e4d89cb759d46d4b05e0c7aed2a3203e9a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0abf1e4d89cb759d46d4b05e0c7aed2a3203e9a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e257f38160b361f738e9c42c3b76665fbbf13aa4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmKblV8ACgkQzXazX3c0\ndp7J0w//Zi/Rcv8pBYvfZ/LrRwtv2w506nxnnmGECtgQbwtnWefBebVMx39xJ5va\nLeG8dwiIbzuVXyzRTc3WRo15Y45gtqvOPSMElKzkDsI0PvuugRWxolFQLBIyY+8C\nuh1xXjcnJuVZNEtXRlzaU3ofjanBnz91hA3UmLt/YHaBPZTJ5913IDsZoz09ZCPG\nosLzJelXWKdBAe75JeCyC835OdlatS+JzHQekvhOZa2KktLLQ5Vbrchkb+qcrpft\nyaKubAqxG3ucUk1Ctd9B38CF8RcG2axZjaCJ1FXsVm/SgFoXUIsUuElmwYtJPHT/\n4ISf8GC1iL4Tbm34ZCd125Yeg65ygVfpP064t0a4+Fh/6uhrFiZmPLEcbz4DXvtm\nBg5i+rAbr5Ruwu6qQ3RBuhIXxEiEbISxxI+tFyu0nclEr1JKPYmwkR/239hwc2un\n4nQ8/Z7lsT95tPxwWg+MzJQ9nlU8CIyzSYnURHlwexgVbekpc52oLGY4RsQ/MmU9\nrwEXkP0lqwC2e7B6rm5cNZFu8xDyU5GuRsYLugw8v9d6/10KJv/eZsu+eKTUJ25V\n/I7AsF5dWK3Fiv6HaOMiEI3aYTJtf1uVQFOYH6E8VlUyvQBBb0ItWKX0dYc5Iciq\nLcynVevj7MLmKRBhzJ511+CnQlFw7Gz+A+/aNIYg713FN4Hc80k=\n=Z/p0\n-----END PGP SIGNATURE-----", "payload": "tree 0abf1e4d89cb759d46d4b05e0c7aed2a3203e9a3\nparent 95e1bd0df83e7595dfc0ef9d4415b7e601d8fa4f\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1654363481 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1654363481 +0200\n\naddress review comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e257f38160b361f738e9c42c3b76665fbbf13aa4", "html_url": "https://github.com/rust-lang/rust/commit/e257f38160b361f738e9c42c3b76665fbbf13aa4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e257f38160b361f738e9c42c3b76665fbbf13aa4/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95e1bd0df83e7595dfc0ef9d4415b7e601d8fa4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/95e1bd0df83e7595dfc0ef9d4415b7e601d8fa4f", "html_url": "https://github.com/rust-lang/rust/commit/95e1bd0df83e7595dfc0ef9d4415b7e601d8fa4f"}], "stats": {"total": 59, "additions": 35, "deletions": 24}, "files": [{"sha": "7640e6517442881ca3089c9745b324e9860b1e29", "filename": "src/tools/compiletest/src/read2.rs", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e257f38160b361f738e9c42c3b76665fbbf13aa4/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e257f38160b361f738e9c42c3b76665fbbf13aa4/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs?ref=e257f38160b361f738e9c42c3b76665fbbf13aa4", "patch": "@@ -9,7 +9,7 @@ use std::io::{self, Write};\n use std::mem::replace;\n use std::process::{Child, Output};\n \n-pub fn read2_abbreviated(mut child: Child, exclude_from_len: &[String]) -> io::Result<Output> {\n+pub fn read2_abbreviated(mut child: Child, filter_paths_from_len: &[String]) -> io::Result<Output> {\n     let mut stdout = ProcOutput::new();\n     let mut stderr = ProcOutput::new();\n \n@@ -18,7 +18,7 @@ pub fn read2_abbreviated(mut child: Child, exclude_from_len: &[String]) -> io::R\n         child.stdout.take().unwrap(),\n         child.stderr.take().unwrap(),\n         &mut |is_stdout, data, _| {\n-            if is_stdout { &mut stdout } else { &mut stderr }.extend(data, exclude_from_len);\n+            if is_stdout { &mut stdout } else { &mut stderr }.extend(data, filter_paths_from_len);\n             data.clear();\n         },\n     )?;\n@@ -29,23 +29,30 @@ pub fn read2_abbreviated(mut child: Child, exclude_from_len: &[String]) -> io::R\n \n const HEAD_LEN: usize = 160 * 1024;\n const TAIL_LEN: usize = 256 * 1024;\n-const EXCLUDED_PLACEHOLDER_LEN: isize = 32;\n+\n+// Whenever a path is filtered when counting the length of the output, we need to add some\n+// placeholder length to ensure a compiler emitting only filtered paths doesn't cause a OOM.\n+//\n+// 32 was chosen semi-arbitrarily: it was the highest power of two that still allowed the test\n+// suite to pass at the moment of implementing path filtering.\n+const FILTERED_PATHS_PLACEHOLDER_LEN: usize = 32;\n \n enum ProcOutput {\n-    Full { bytes: Vec<u8>, excluded_len: isize },\n+    Full { bytes: Vec<u8>, filtered_len: usize },\n     Abbreviated { head: Vec<u8>, skipped: usize, tail: Box<[u8]> },\n }\n \n impl ProcOutput {\n     fn new() -> Self {\n-        ProcOutput::Full { bytes: Vec::new(), excluded_len: 0 }\n+        ProcOutput::Full { bytes: Vec::new(), filtered_len: 0 }\n     }\n \n-    fn extend(&mut self, data: &[u8], exclude_from_len: &[String]) {\n+    fn extend(&mut self, data: &[u8], filter_paths_from_len: &[String]) {\n         let new_self = match *self {\n-            ProcOutput::Full { ref mut bytes, ref mut excluded_len } => {\n+            ProcOutput::Full { ref mut bytes, ref mut filtered_len } => {\n                 let old_len = bytes.len();\n                 bytes.extend_from_slice(data);\n+                *filtered_len += data.len();\n \n                 // We had problems in the past with tests failing only in some environments,\n                 // due to the length of the base path pushing the output size over the limit.\n@@ -58,21 +65,25 @@ impl ProcOutput {\n                 // The compiler emitting only excluded strings is addressed by adding a\n                 // placeholder size for each excluded segment, which will eventually reach\n                 // the configured threshold.\n-                for pattern in exclude_from_len {\n-                    let pattern_bytes = pattern.as_bytes();\n-                    // We start matching `pattern_bytes - 1` into the previously loaded data,\n-                    // to account for the fact a pattern might be included across multiple\n-                    // `extend` calls. Starting from `- 1` avoids double-counting patterns.\n-                    let matches = (&bytes[(old_len.saturating_sub(pattern_bytes.len() - 1))..])\n-                        .windows(pattern_bytes.len())\n-                        .filter(|window| window == &pattern_bytes)\n+                for path in filter_paths_from_len {\n+                    let path_bytes = path.as_bytes();\n+                    // We start matching `path_bytes - 1` into the previously loaded data,\n+                    // to account for the fact a path_bytes might be included across multiple\n+                    // `extend` calls. Starting from `- 1` avoids double-counting paths.\n+                    let matches = (&bytes[(old_len.saturating_sub(path_bytes.len() - 1))..])\n+                        .windows(path_bytes.len())\n+                        .filter(|window| window == &path_bytes)\n                         .count();\n-                    *excluded_len += matches as isize\n-                        * (EXCLUDED_PLACEHOLDER_LEN - pattern_bytes.len() as isize);\n+                    *filtered_len -= matches * path_bytes.len();\n+\n+                    // We can't just remove the length of the filtered path from the output lenght,\n+                    // otherwise a compiler emitting only filtered paths would OOM compiletest. Add\n+                    // a fixed placeholder length for each path to prevent that.\n+                    *filtered_len += matches * FILTERED_PATHS_PLACEHOLDER_LEN;\n                 }\n \n                 let new_len = bytes.len();\n-                if (new_len as isize + *excluded_len) as usize <= HEAD_LEN + TAIL_LEN {\n+                if *filtered_len <= HEAD_LEN + TAIL_LEN {\n                     return;\n                 }\n "}, {"sha": "1d39d24524803395b695d1bf532e5c49e86b9a71", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e257f38160b361f738e9c42c3b76665fbbf13aa4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e257f38160b361f738e9c42c3b76665fbbf13aa4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=e257f38160b361f738e9c42c3b76665fbbf13aa4", "patch": "@@ -1736,25 +1736,25 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn read2_abbreviated(&self, child: Child) -> Output {\n-        let mut exclude_from_len = Vec::new();\n+        let mut filter_paths_from_len = Vec::new();\n         let mut add_path = |path: &Path| {\n             let path = path.display().to_string();\n             let windows = path.replace(\"\\\\\", \"\\\\\\\\\");\n             if windows != path {\n-                exclude_from_len.push(windows);\n+                filter_paths_from_len.push(windows);\n             }\n-            exclude_from_len.push(path);\n+            filter_paths_from_len.push(path);\n         };\n \n-        // List of strings that will not be measured when determining whether the output is larger\n+        // List of paths that will not be measured when determining whether the output is larger\n         // than the output truncation threshold.\n         //\n-        // Note: avoid adding a subdirectory of an already excluded directory here, otherwise the\n+        // Note: avoid adding a subdirectory of an already filtered directory here, otherwise the\n         // same slice of text will be double counted and the truncation might not happen.\n         add_path(&self.config.src_base);\n         add_path(&self.config.build_base);\n \n-        read2_abbreviated(child, &exclude_from_len).expect(\"failed to read output\")\n+        read2_abbreviated(child, &filter_paths_from_len).expect(\"failed to read output\")\n     }\n \n     fn compose_and_run("}]}