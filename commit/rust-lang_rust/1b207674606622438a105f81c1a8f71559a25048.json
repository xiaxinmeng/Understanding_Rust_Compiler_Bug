{"sha": "1b207674606622438a105f81c1a8f71559a25048", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMjA3Njc0NjA2NjIyNDM4YTEwNWY4MWMxYThmNzE1NTlhMjUwNDg=", "commit": {"author": {"name": "inrustwetrust", "email": "inrustwetrust@users.noreply.github.com", "date": "2015-02-21T10:50:25Z"}, "committer": {"name": "inrustwetrust", "email": "inrustwetrust@users.noreply.github.com", "date": "2015-02-21T10:50:25Z"}, "message": "Minor grammar/spelling fixes to the \"Static and Dynamic Dispatch\" doc", "tree": {"sha": "fc41db7229e92c419dae641e387b3df59bed4be2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc41db7229e92c419dae641e387b3df59bed4be2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b207674606622438a105f81c1a8f71559a25048", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b207674606622438a105f81c1a8f71559a25048", "html_url": "https://github.com/rust-lang/rust/commit/1b207674606622438a105f81c1a8f71559a25048", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b207674606622438a105f81c1a8f71559a25048/comments", "author": {"login": "inrustwetrust", "id": 8572437, "node_id": "MDQ6VXNlcjg1NzI0Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/8572437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inrustwetrust", "html_url": "https://github.com/inrustwetrust", "followers_url": "https://api.github.com/users/inrustwetrust/followers", "following_url": "https://api.github.com/users/inrustwetrust/following{/other_user}", "gists_url": "https://api.github.com/users/inrustwetrust/gists{/gist_id}", "starred_url": "https://api.github.com/users/inrustwetrust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inrustwetrust/subscriptions", "organizations_url": "https://api.github.com/users/inrustwetrust/orgs", "repos_url": "https://api.github.com/users/inrustwetrust/repos", "events_url": "https://api.github.com/users/inrustwetrust/events{/privacy}", "received_events_url": "https://api.github.com/users/inrustwetrust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "inrustwetrust", "id": 8572437, "node_id": "MDQ6VXNlcjg1NzI0Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/8572437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inrustwetrust", "html_url": "https://github.com/inrustwetrust", "followers_url": "https://api.github.com/users/inrustwetrust/followers", "following_url": "https://api.github.com/users/inrustwetrust/following{/other_user}", "gists_url": "https://api.github.com/users/inrustwetrust/gists{/gist_id}", "starred_url": "https://api.github.com/users/inrustwetrust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inrustwetrust/subscriptions", "organizations_url": "https://api.github.com/users/inrustwetrust/orgs", "repos_url": "https://api.github.com/users/inrustwetrust/repos", "events_url": "https://api.github.com/users/inrustwetrust/events{/privacy}", "received_events_url": "https://api.github.com/users/inrustwetrust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "522d09dfecbeca1595f25ac58c6d0178bbd21d7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/522d09dfecbeca1595f25ac58c6d0178bbd21d7d", "html_url": "https://github.com/rust-lang/rust/commit/522d09dfecbeca1595f25ac58c6d0178bbd21d7d"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "98dac9bf84bb47c519eb8f65cdd780452be8510f", "filename": "src/doc/trpl/static-and-dynamic-dispatch.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b207674606622438a105f81c1a8f71559a25048/src%2Fdoc%2Ftrpl%2Fstatic-and-dynamic-dispatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/1b207674606622438a105f81c1a8f71559a25048/src%2Fdoc%2Ftrpl%2Fstatic-and-dynamic-dispatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fstatic-and-dynamic-dispatch.md?ref=1b207674606622438a105f81c1a8f71559a25048", "patch": "@@ -84,7 +84,7 @@ inlining and hence usually higher performance. It also has some downsides:\n causing code bloat due to many copies of the same function existing in the\n binary, one for each type.\n \n-Furthermore, compilers aren\u2019t perfect and may \u201coptimise\u201d code to become slower.\n+Furthermore, compilers aren\u2019t perfect and may \u201coptimize\u201d code to become slower.\n For example, functions inlined too eagerly will bloat the instruction cache\n (cache rules everything around us). This is part of the reason that `#[inline]`\n and `#[inline(always)]` should be used carefully, and one reason why using a\n@@ -104,15 +104,15 @@ objects, like `&Foo` or `Box<Foo>`, are normal values that store a value of\n known at runtime. The methods of the trait can be called on a trait object via\n a special record of function pointers (created and managed by the compiler).\n \n-A function that takes a trait object is not specialised to each of the types\n+A function that takes a trait object is not specialized to each of the types\n that implements `Foo`: only one copy is generated, often (but not always)\n resulting in less code bloat. However, this comes at the cost of requiring\n slower virtual function calls, and effectively inhibiting any chance of\n inlining and related optimisations from occurring.\n \n Trait objects are both simple and complicated: their core representation and\n layout is quite straight-forward, but there are some curly error messages and\n-surprising behaviours to discover.\n+surprising behaviors to discover.\n \n ### Obtaining a trait object\n \n@@ -140,13 +140,13 @@ and casts are identical.\n \n This operation can be seen as \"erasing\" the compiler's knowledge about the\n specific type of the pointer, and hence trait objects are sometimes referred to\n-\"type erasure\".\n+as \"type erasure\".\n \n ### Representation\n \n Let's start simple, with the runtime representation of a trait object. The\n `std::raw` module contains structs with layouts that are the same as the\n-complicated build-in types, [including trait objects][stdraw]:\n+complicated built-in types, [including trait objects][stdraw]:\n \n ```rust\n # mod foo {\n@@ -223,14 +223,14 @@ static Foo_for_String_vtable: FooVtable = FooVtable {\n The `destructor` field in each vtable points to a function that will clean up\n any resources of the vtable's type, for `u8` it is trivial, but for `String` it\n will free the memory. This is necessary for owning trait objects like\n-`Box<Foo>`, which need to clean-up both the `Box` allocation and as well as the\n+`Box<Foo>`, which need to clean-up both the `Box` allocation as well as the\n internal type when they go out of scope. The `size` and `align` fields store\n the size of the erased type, and its alignment requirements; these are\n essentially unused at the moment since the information is embedded in the\n-destructor, but will be used in future, as trait objects are progressively made\n-more flexible.\n+destructor, but will be used in the future, as trait objects are progressively\n+made more flexible.\n \n-Suppose we've got some values that implement `Foo`, the explicit form of\n+Suppose we've got some values that implement `Foo`, then the explicit form of\n construction and use of `Foo` trait objects might look a bit like (ignoring the\n type mismatches: they're all just pointers anyway):\n "}]}