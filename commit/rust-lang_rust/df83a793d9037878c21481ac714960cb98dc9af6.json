{"sha": "df83a793d9037878c21481ac714960cb98dc9af6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmODNhNzkzZDkwMzc4NzhjMjE0ODFhYzcxNDk2MGNiOThkYzlhZjY=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-05-26T00:59:28Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-05-26T01:32:18Z"}, "message": "In generic word count, use str instead of [u8], and use built in is_alphabetic, etc. functions.", "tree": {"sha": "484f621f38fc8dcce0659948c5838da829957e7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/484f621f38fc8dcce0659948c5838da829957e7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df83a793d9037878c21481ac714960cb98dc9af6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df83a793d9037878c21481ac714960cb98dc9af6", "html_url": "https://github.com/rust-lang/rust/commit/df83a793d9037878c21481ac714960cb98dc9af6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df83a793d9037878c21481ac714960cb98dc9af6/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c3a128419e2b75be1fa6de6ff92d32fba11e005", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c3a128419e2b75be1fa6de6ff92d32fba11e005", "html_url": "https://github.com/rust-lang/rust/commit/0c3a128419e2b75be1fa6de6ff92d32fba11e005"}], "stats": {"total": 103, "additions": 8, "deletions": 95}, "files": [{"sha": "729dec9997e17623406711c5614e6b6f1d61610e", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 8, "deletions": 95, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/df83a793d9037878c21481ac714960cb98dc9af6/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df83a793d9037878c21481ac714960cb98dc9af6/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=df83a793d9037878c21481ac714960cb98dc9af6", "patch": "@@ -46,26 +46,26 @@ fn join(t: joinable_task) {\n     t.recv()\n }\n \n-fn map(&&filename: [u8], emit: map_reduce::putter<[u8], int>) {\n-    let f = alt io::file_reader(str::from_bytes(filename)) {\n+fn map(&&filename: str, emit: map_reduce::putter<str, int>) {\n+    let f = alt io::file_reader(filename) {\n       result::ok(f) { f }\n       result::err(e) { fail #fmt(\"%?\", e) }\n     };\n \n     loop {\n         alt read_word(f) {\n-          some(w) { emit(str::bytes(w), 1); }\n+          some(w) { emit(w, 1); }\n           none { break; }\n         }\n     }\n }\n \n-fn reduce(&&word: [u8], get: map_reduce::getter<int>) {\n+fn reduce(&&word: str, get: map_reduce::getter<int>) {\n     let mut count = 0;\n \n     loop { alt get() { some(_) { count += 1; } none { break; } } }\n     \n-    io::println(#fmt(\"%?\\t%?\", word, count));\n+    io::println(#fmt(\"%s\\t%?\", word, count));\n }\n \n mod map_reduce {\n@@ -243,14 +243,9 @@ fn main(argv: [str]) {\n         ret;\n     }\n \n-    let mut iargs = [];\n-    vec::iter_between(argv, 1u, vec::len(argv)) {|a|\n-        iargs += [str::bytes(a)];\n-    }\n-\n     let start = time::precise_time_ns();\n \n-    map_reduce::map_reduce(map, reduce, iargs);\n+    map_reduce::map_reduce(map, reduce, vec::slice(argv, 1u, argv.len()));\n     let stop = time::precise_time_ns();\n \n     let elapsed = (stop - start) / 1000000u64;\n@@ -271,87 +266,5 @@ fn read_word(r: io::reader) -> option<str> {\n     }\n     ret none;\n }\n-\n-fn is_digit(c: char) -> bool {\n-    alt c {\n-      '0' { true }\n-      '1' { true }\n-      '2' { true }\n-      '3' { true }\n-      '4' { true }\n-      '5' { true }\n-      '6' { true }\n-      '7' { true }\n-      '8' { true }\n-      '9' { true }\n-      _ { false }\n-    }\n-}\n-\n-fn is_alpha_lower(c: char) -> bool {\n-    alt c {\n-      'a' { true }\n-      'b' { true }\n-      'c' { true }\n-      'd' { true }\n-      'e' { true }\n-      'f' { true }\n-      'g' { true }\n-      'h' { true }\n-      'i' { true }\n-      'j' { true }\n-      'k' { true }\n-      'l' { true }\n-      'm' { true }\n-      'n' { true }\n-      'o' { true }\n-      'p' { true }\n-      'q' { true }\n-      'r' { true }\n-      's' { true }\n-      't' { true }\n-      'u' { true }\n-      'v' { true }\n-      'w' { true }\n-      'x' { true }\n-      'y' { true }\n-      'z' { true }\n-      _ { false }\n-    }\n-}\n-\n-fn is_alpha_upper(c: char) -> bool {\n-    alt c {\n-      'A' { true }\n-      'B' { true }\n-      'C' { true }\n-      'D' { true }\n-      'E' { true }\n-      'F' { true }\n-      'G' { true }\n-      'H' { true }\n-      'I' { true }\n-      'J' { true }\n-      'K' { true }\n-      'L' { true }\n-      'M' { true }\n-      'N' { true }\n-      'O' { true }\n-      'P' { true }\n-      'Q' { true }\n-      'R' { true }\n-      'S' { true }\n-      'T' { true }\n-      'U' { true }\n-      'V' { true }\n-      'W' { true }\n-      'X' { true }\n-      'Y' { true }\n-      'Z' { true }\n-      _ { false }\n-    }\n-}\n-\n-fn is_alpha(c: char) -> bool { is_alpha_upper(c) || is_alpha_lower(c) }\n-\n-fn is_word_char(c: char) -> bool { is_alpha(c) || is_digit(c) || c == '_' }\n+fn is_word_char(c: char) -> bool {\n+    char::is_alphabetic(c) || char::is_digit(c) || c == '_' }"}]}