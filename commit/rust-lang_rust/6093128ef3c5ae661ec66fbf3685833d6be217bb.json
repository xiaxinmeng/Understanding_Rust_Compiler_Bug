{"sha": "6093128ef3c5ae661ec66fbf3685833d6be217bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwOTMxMjhlZjNjNWFlNjYxZWM2NmZiZjM2ODU4MzNkNmJlMjE3YmI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-07-13T05:08:28Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-07-13T05:26:07Z"}, "message": "Changed implementation of the third field to make LLVM optimize it better.", "tree": {"sha": "7f03dadcadb78e4d9c7ce00e7bd557761a2a7678", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f03dadcadb78e4d9c7ce00e7bd557761a2a7678"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6093128ef3c5ae661ec66fbf3685833d6be217bb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAltIN+8ACgkQ/vbIBR0O\nATxcNQ//dIjIpBt1Da0AN0M0NmoYB2zobDRj48JzeqtlRxDJvodMwV53voTdbOWH\n/MHxqz/vQIUZTcfmgiVbbqjtWg9xJwhbPOOnoDk4j/pfuFZF4C/Ea2FXMLQlPZXn\nRzC+GM/R46RWXP8WRtVED7/k8PwA/PM8doRp0IUz2Q00D3JwMmpTwKFob3v9Xr3a\nkhQppFVOhqsFBUwiire47doFKoMyi1iuAo5DtHzBvqSYpnp3fmQIRBYe61U/gDqF\n6HwYkZboTSyr6Ugn51NSPVqWEiK4PAHjvjCf4Xr/7MmTCguG01LUV/NiFBRUWFde\nmE8UmljprRvoNeRynzMzGJNOGw5iWWZw1yaDpDsDXfjDhmzVSxYGGPBMtlSZOhBX\n1ewffr2ufmfqegnVxs/hOgvG4ehzJib9/xGNeVrEu4K8oDnMQph0QQoSGLbcWsBm\np1qsOew2tCvVultxqOPHBwgwkLNDXERRUigg3xN4aptARy0TD5yaCTnQkzSWTYHM\nIvle48vJKOSBj3iTMEaZUsVCRmOSrholzop7AoV2iNsBjp+Pnzy02IaUOZgQln5Y\nDLSPwtfO52ffRfvueDHpKd8FMNLW0ebkqhglv3MRKxDwYIc6jzrWTxapSnbOSSG9\nhGdvC3pg8q3hiZYkgsZJHVw87JD9eCuaqiJIkcgR/r/FnAt8Xx4=\n=F6PC\n-----END PGP SIGNATURE-----", "payload": "tree 7f03dadcadb78e4d9c7ce00e7bd557761a2a7678\nparent 6e0dd9ec0362af41996cf2d2a0afd520bf873d3a\nauthor kennytm <kennytm@gmail.com> 1531458508 +0800\ncommitter kennytm <kennytm@gmail.com> 1531459567 +0800\n\nChanged implementation of the third field to make LLVM optimize it better.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6093128ef3c5ae661ec66fbf3685833d6be217bb", "html_url": "https://github.com/rust-lang/rust/commit/6093128ef3c5ae661ec66fbf3685833d6be217bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6093128ef3c5ae661ec66fbf3685833d6be217bb/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e0dd9ec0362af41996cf2d2a0afd520bf873d3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e0dd9ec0362af41996cf2d2a0afd520bf873d3a", "html_url": "https://github.com/rust-lang/rust/commit/6e0dd9ec0362af41996cf2d2a0afd520bf873d3a"}], "stats": {"total": 70, "additions": 39, "deletions": 31}, "files": [{"sha": "35ae77411069cdf5c9a63fda2fedc313dad341b3", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6093128ef3c5ae661ec66fbf3685833d6be217bb/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6093128ef3c5ae661ec66fbf3685833d6be217bb/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=6093128ef3c5ae661ec66fbf3685833d6be217bb", "patch": "@@ -787,19 +787,19 @@ where\n     #[inline]\n     fn spec_next(&mut self) -> Option<Self::Item> {\n         self.first_take = false;\n-        if self.iter.is_empty() {\n-            self.iter.is_iterating = Some(false);\n+        self.iter.compute_is_empty();\n+        if self.iter.is_empty.unwrap_or_default() {\n             return None;\n         }\n         // add 1 to self.step to get original step size back\n         // it was decremented for the general case on construction\n         if let Some(n) = self.iter.start.add_usize(self.step+1) {\n-            self.iter.is_iterating = Some(n <= self.iter.end);\n+            self.iter.is_empty = Some(!(n <= self.iter.end));\n             let next = mem::replace(&mut self.iter.start, n);\n             Some(next)\n         } else {\n             let last = self.iter.start.clone();\n-            self.iter.is_iterating = Some(false);\n+            self.iter.is_empty = Some(true);\n             Some(last)\n         }\n     }"}, {"sha": "651c7a35d413c6478b6e661b23dbd586208be6a6", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6093128ef3c5ae661ec66fbf3685833d6be217bb/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6093128ef3c5ae661ec66fbf3685833d6be217bb/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=6093128ef3c5ae661ec66fbf3685833d6be217bb", "patch": "@@ -330,18 +330,18 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n \n     #[inline]\n     fn next(&mut self) -> Option<A> {\n-        if self.is_empty() {\n-            self.is_iterating = Some(false);\n+        self.compute_is_empty();\n+        if self.is_empty.unwrap_or_default() {\n             return None;\n         }\n-        if self.start < self.end {\n+        let is_iterating = self.start < self.end;\n+        self.is_empty = Some(!is_iterating);\n+        Some(if is_iterating {\n             let n = self.start.add_one();\n-            self.is_iterating = Some(true);\n-            Some(mem::replace(&mut self.start, n))\n+            mem::replace(&mut self.start, n)\n         } else {\n-            self.is_iterating = Some(false);\n-            Some(self.start.clone())\n-        }\n+            self.start.clone()\n+        })\n     }\n \n     #[inline]\n@@ -358,8 +358,8 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n \n     #[inline]\n     fn nth(&mut self, n: usize) -> Option<A> {\n-        if self.is_empty() {\n-            self.is_iterating = Some(false);\n+        self.compute_is_empty();\n+        if self.is_empty.unwrap_or_default() {\n             return None;\n         }\n \n@@ -368,19 +368,19 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n \n             match plus_n.partial_cmp(&self.end) {\n                 Some(Less) => {\n-                    self.is_iterating = Some(true);\n+                    self.is_empty = Some(false);\n                     self.start = plus_n.add_one();\n                     return Some(plus_n)\n                 }\n                 Some(Equal) => {\n-                    self.is_iterating = Some(false);\n+                    self.is_empty = Some(true);\n                     return Some(plus_n)\n                 }\n                 _ => {}\n             }\n         }\n \n-        self.is_iterating = Some(false);\n+        self.is_empty = Some(true);\n         None\n     }\n \n@@ -404,18 +404,18 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n-        if self.is_empty() {\n-            self.is_iterating = Some(false);\n+        self.compute_is_empty();\n+        if self.is_empty.unwrap_or_default() {\n             return None;\n         }\n-        if self.start < self.end {\n+        let is_iterating = self.start < self.end;\n+        self.is_empty = Some(!is_iterating);\n+        Some(if is_iterating {\n             let n = self.end.sub_one();\n-            self.is_iterating = Some(true);\n-            Some(mem::replace(&mut self.end, n))\n+            mem::replace(&mut self.end, n)\n         } else {\n-            self.is_iterating = Some(false);\n-            Some(self.end.clone())\n-        }\n+            self.end.clone()\n+        })\n     }\n }\n "}, {"sha": "9c635678d7aa0b2da528bdaad32761238d60e431", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6093128ef3c5ae661ec66fbf3685833d6be217bb/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6093128ef3c5ae661ec66fbf3685833d6be217bb/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=6093128ef3c5ae661ec66fbf3685833d6be217bb", "patch": "@@ -332,11 +332,11 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n pub struct RangeInclusive<Idx> {\n     pub(crate) start: Idx,\n     pub(crate) end: Idx,\n-    pub(crate) is_iterating: Option<bool>,\n+    pub(crate) is_empty: Option<bool>,\n     // This field is:\n     //  - `None` when next() or next_back() was never called\n-    //  - `Some(true)` when `start <= end` assuming no overflow\n-    //  - `Some(false)` otherwise\n+    //  - `Some(false)` when `start <= end` assuming no overflow\n+    //  - `Some(true)` otherwise\n     // The field cannot be a simple `bool` because the `..=` constructor can\n     // accept non-PartialOrd types, also we want the constructor to be const.\n }\n@@ -347,7 +347,7 @@ trait RangeInclusiveEquality: Sized {\n impl<T> RangeInclusiveEquality for T {\n     #[inline]\n     default fn canonicalized_is_empty(range: &RangeInclusive<Self>) -> bool {\n-        !range.is_iterating.unwrap_or(false)\n+        range.is_empty.unwrap_or_default()\n     }\n }\n impl<T: PartialOrd> RangeInclusiveEquality for T {\n@@ -392,7 +392,7 @@ impl<Idx> RangeInclusive<Idx> {\n     #[stable(feature = \"inclusive_range_methods\", since = \"1.27.0\")]\n     #[inline]\n     pub const fn new(start: Idx, end: Idx) -> Self {\n-        Self { start, end, is_iterating: None }\n+        Self { start, end, is_empty: None }\n     }\n \n     /// Returns the lower bound of the range (inclusive).\n@@ -536,7 +536,15 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     #[unstable(feature = \"range_is_empty\", reason = \"recently added\", issue = \"48111\")]\n     #[inline]\n     pub fn is_empty(&self) -> bool {\n-        !self.is_iterating.unwrap_or_else(|| self.start <= self.end)\n+        self.is_empty.unwrap_or_else(|| !(self.start <= self.end))\n+    }\n+\n+    // If this range's `is_empty` is field is unknown (`None`), update it to be a concrete value.\n+    #[inline]\n+    pub(crate) fn compute_is_empty(&mut self) {\n+        if self.is_empty.is_none() {\n+            self.is_empty = Some(!(self.start <= self.end));\n+        }\n     }\n }\n "}]}