{"sha": "c8d25af6985c2c6be388fc198c2c7d50eb553fc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZDI1YWY2OTg1YzJjNmJlMzg4ZmMxOThjMmM3ZDUwZWI1NTNmYzQ=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-10-05T22:07:27Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-10-05T22:07:27Z"}, "message": "Fixup", "tree": {"sha": "e4523115a09ce0aefd8018fa9e33efebc77c48d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4523115a09ce0aefd8018fa9e33efebc77c48d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8d25af6985c2c6be388fc198c2c7d50eb553fc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8d25af6985c2c6be388fc198c2c7d50eb553fc4", "html_url": "https://github.com/rust-lang/rust/commit/c8d25af6985c2c6be388fc198c2c7d50eb553fc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8d25af6985c2c6be388fc198c2c7d50eb553fc4/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c877ff3664abea60d69b8acf8e7dce85c2ffd859", "url": "https://api.github.com/repos/rust-lang/rust/commits/c877ff3664abea60d69b8acf8e7dce85c2ffd859", "html_url": "https://github.com/rust-lang/rust/commit/c877ff3664abea60d69b8acf8e7dce85c2ffd859"}], "stats": {"total": 7, "additions": 2, "deletions": 5}, "files": [{"sha": "6264f521c62bf95ad291cf3fb34dede88948bae0", "filename": "compiler/rustc_mir/src/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8d25af6985c2c6be388fc198c2c7d50eb553fc4/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8d25af6985c2c6be388fc198c2c7d50eb553fc4/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=c8d25af6985c2c6be388fc198c2c7d50eb553fc4", "patch": "@@ -1225,7 +1225,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// it. However, it works pretty well in practice. In particular,\n     /// this is needed to deal with projection outlives bounds like\n     ///\n-    /// ```ignore (MIR syntax)\n+    /// ```ignore (internal compiler representation so lifetime syntax is invalid)\n     /// <T as Foo<'0>>::Item: '1\n     /// ```\n     ///"}, {"sha": "618f3e045e7125c8f448b54a03540523dbb80601", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c8d25af6985c2c6be388fc198c2c7d50eb553fc4/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8d25af6985c2c6be388fc198c2c7d50eb553fc4/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=c8d25af6985c2c6be388fc198c2c7d50eb553fc4", "patch": "@@ -41,13 +41,10 @@ pub struct OpaqueTypeDecl<'tcx> {\n     /// The span of this particular definition of the opaque type. So\n     /// for example:\n     ///\n-    /// ```\n+    /// ```ignore (incomplete snippet)\n     /// type Foo = impl Baz;\n     /// fn bar() -> Foo {\n     /// //          ^^^ This is the span we are looking for!\n-    /// // ...\n-    /// # unimplemented!()\n-    /// }\n     /// ```\n     ///\n     /// In cases where the fn returns `(impl Trait, impl Trait)` or"}]}