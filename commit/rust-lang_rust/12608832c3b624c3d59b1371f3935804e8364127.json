{"sha": "12608832c3b624c3d59b1371f3935804e8364127", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNjA4ODMyYzNiNjI0YzNkNTliMTM3MWYzOTM1ODA0ZTgzNjQxMjc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-02-21T16:24:19Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-02-21T16:24:19Z"}, "message": "improve UnsafeCell docs", "tree": {"sha": "36a16b684ff0eb2f43669222a561a702a9f475ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36a16b684ff0eb2f43669222a561a702a9f475ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12608832c3b624c3d59b1371f3935804e8364127", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12608832c3b624c3d59b1371f3935804e8364127", "html_url": "https://github.com/rust-lang/rust/commit/12608832c3b624c3d59b1371f3935804e8364127", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12608832c3b624c3d59b1371f3935804e8364127/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e826bb11228508fbe749e594038d6727208aa94", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e826bb11228508fbe749e594038d6727208aa94", "html_url": "https://github.com/rust-lang/rust/commit/3e826bb11228508fbe749e594038d6727208aa94"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "cce1242d84f52ff5496879009ad727ee426337cc", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/12608832c3b624c3d59b1371f3935804e8364127/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12608832c3b624c3d59b1371f3935804e8364127/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=12608832c3b624c3d59b1371f3935804e8364127", "patch": "@@ -1619,17 +1619,18 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n \n /// The core primitive for interior mutability in Rust.\n ///\n-/// `UnsafeCell<T>` is a type that wraps some `T` and indicates unsafe interior operations on the\n-/// wrapped type. Types with an `UnsafeCell<T>` field are considered to have an 'unsafe interior'.\n-/// The `UnsafeCell<T>` type is the only legal way to obtain aliasable data that is considered\n-/// mutable. In general, transmuting a `&T` type into a `&mut T` is considered undefined behavior.\n+/// If you have a reference `&T`, then normally in Rust the compiler performs optimizations based on\n+/// the knowledge that `&T` points to immutable data. Mutating that data, for example through an\n+/// alias or by transmuting an `&T` into an `&mut T`, is considered undefined behavior.\n+/// `UnsafeCell<T>` opts-out of the immutability guarantee for `&T`: a shared reference\n+/// `&UnsafeCell<T>` may point to data that is being mutated. This is called \"interior mutability\".\n ///\n-/// If you have a reference `&SomeStruct`, then normally in Rust all fields of `SomeStruct` are\n-/// immutable. The compiler makes optimizations based on the knowledge that `&T` is not mutably\n-/// aliased or mutated, and that `&mut T` is unique. `UnsafeCell<T>` is the only core language\n-/// feature to work around the restriction that `&T` may not be mutated. All other types that\n-/// allow internal mutability, such as `Cell<T>` and `RefCell<T>`, use `UnsafeCell` to wrap their\n-/// internal data. There is *no* legal way to obtain aliasing `&mut`, not even with `UnsafeCell<T>`.\n+/// All other types that allow internal mutability, such as `Cell<T>` and `RefCell<T>`, internally\n+/// use `UnsafeCell` to wrap their data.\n+///\n+/// Note that only the immutability guarantee for shared references is affected by `UnsafeCell`. The\n+/// uniqueness guarantee for mutable references is unaffected. There is *no* legal way to obtain\n+/// aliasing `&mut`, not even with `UnsafeCell<T>`.\n ///\n /// The `UnsafeCell` API itself is technically very simple: [`.get()`] gives you a raw pointer\n /// `*mut T` to its contents. It is up to _you_ as the abstraction designer to use that raw pointer"}]}