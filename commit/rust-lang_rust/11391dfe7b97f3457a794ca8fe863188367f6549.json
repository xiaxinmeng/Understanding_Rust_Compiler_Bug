{"sha": "11391dfe7b97f3457a794ca8fe863188367f6549", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMzkxZGZlN2I5N2YzNDU3YTc5NGNhOGZlODYzMTg4MzY3ZjY1NDk=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-03-29T07:58:57Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-03-29T07:58:57Z"}, "message": "Merge pull request #891 from kamalmarhubi/update-syntex-syntax\n\ndeps: Update syntex_syntax to 0.30.0", "tree": {"sha": "cb8faf9e2b13740d1b71481ee465e2b7697354f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb8faf9e2b13740d1b71481ee465e2b7697354f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11391dfe7b97f3457a794ca8fe863188367f6549", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11391dfe7b97f3457a794ca8fe863188367f6549", "html_url": "https://github.com/rust-lang/rust/commit/11391dfe7b97f3457a794ca8fe863188367f6549", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11391dfe7b97f3457a794ca8fe863188367f6549/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd96c55801cdc7d5270676e764a640e3ab0aebfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd96c55801cdc7d5270676e764a640e3ab0aebfc", "html_url": "https://github.com/rust-lang/rust/commit/dd96c55801cdc7d5270676e764a640e3ab0aebfc"}, {"sha": "f2b5931c6da8a6e2fa0a5c82f3ece74a1c95e093", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2b5931c6da8a6e2fa0a5c82f3ece74a1c95e093", "html_url": "https://github.com/rust-lang/rust/commit/f2b5931c6da8a6e2fa0a5c82f3ece74a1c95e093"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "853b2f4481b5135c12bb019d6da9a6c117400d92", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11391dfe7b97f3457a794ca8fe863188367f6549/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/11391dfe7b97f3457a794ca8fe863188367f6549/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=11391dfe7b97f3457a794ca8fe863188367f6549", "patch": "@@ -9,7 +9,7 @@ dependencies = [\n  \"regex 0.1.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strings 0.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syntex_syntax 0.29.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_syntax 0.30.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -25,7 +25,7 @@ dependencies = [\n \n [[package]]\n name = \"bitflags\"\n-version = \"0.3.3\"\n+version = \"0.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -108,10 +108,10 @@ dependencies = [\n \n [[package]]\n name = \"syntex_syntax\"\n-version = \"0.29.1\"\n+version = \"0.30.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"bitflags 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.18 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "591e60ef2390503ea55ffc33bfe95e7b2aaf80cd", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11391dfe7b97f3457a794ca8fe863188367f6549/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/11391dfe7b97f3457a794ca8fe863188367f6549/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=11391dfe7b97f3457a794ca8fe863188367f6549", "patch": "@@ -21,7 +21,7 @@ regex = \"0.1.41\"\n term = \"0.2.11\"\n strings = \"0.0.1\"\n diff = \"0.1.8\"\n-syntex_syntax = \"0.29.1\"\n+syntex_syntax = \"0.30\"\n log = \"0.3.2\"\n env_logger = \"0.3.1\"\n getopts = \"0.2\""}, {"sha": "a1e8a17c091b28e6232f8b9239d9acb3c284b630", "filename": "src/expr.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/11391dfe7b97f3457a794ca8fe863188367f6549/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11391dfe7b97f3457a794ca8fe863188367f6549/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=11391dfe7b97f3457a794ca8fe863188367f6549", "patch": "@@ -185,19 +185,21 @@ impl Rewrite for ast::Expr {\n             ast::ExprKind::Repeat(ref expr, ref repeats) => {\n                 rewrite_pair(&**expr, &**repeats, \"[\", \"; \", \"]\", context, width, offset)\n             }\n-            ast::ExprKind::Range(Some(ref lhs), Some(ref rhs)) => {\n+            // TODO(#890): Handle closed ranges; rust tracking issue\n+            //   https://github.com/rust-lang/rust/issues/28237\n+            ast::ExprKind::Range(Some(ref lhs), Some(ref rhs), _range_limits) => {\n                 rewrite_pair(&**lhs, &**rhs, \"\", \"..\", \"\", context, width, offset)\n             }\n-            ast::ExprKind::Range(None, Some(ref rhs)) => {\n+            ast::ExprKind::Range(None, Some(ref rhs), _range_limits) => {\n                 rewrite_unary_prefix(context, \"..\", &**rhs, width, offset)\n             }\n-            ast::ExprKind::Range(Some(ref lhs), None) => {\n+            ast::ExprKind::Range(Some(ref lhs), None, _range_limits) => {\n                 Some(format!(\"{}..\",\n                              try_opt!(lhs.rewrite(context,\n                                                   try_opt!(width.checked_sub(2)),\n                                                   offset))))\n             }\n-            ast::ExprKind::Range(None, None) => {\n+            ast::ExprKind::Range(None, None, _range_limits) => {\n                 if width >= 2 {\n                     Some(\"..\".into())\n                 } else {\n@@ -213,6 +215,9 @@ impl Rewrite for ast::Expr {\n                          width,\n                          offset)\n             }\n+            // TODO(#867): Handle type ascription; rust tracking issue\n+            //   https://github.com/rust-lang/rust/issues/31436\n+            ast::ExprKind::Try(_) => unimplemented!(),\n         };\n         result.and_then(|res| recover_comment_removed(res, self.span, context, width, offset))\n     }"}, {"sha": "3443db338cfd3d5f025865f10adf826a874751a4", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11391dfe7b97f3457a794ca8fe863188367f6549/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11391dfe7b97f3457a794ca8fe863188367f6549/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=11391dfe7b97f3457a794ca8fe863188367f6549", "patch": "@@ -381,7 +381,8 @@ pub fn format_string(input: String, config: &Config) -> FileMap {\n     let krate = parse::parse_crate_from_source_str(path.to_owned(),\n                                                    input,\n                                                    Vec::new(),\n-                                                   &parse_session);\n+                                                   &parse_session)\n+                    .unwrap();\n \n     // Suppress error output after parsing.\n     let silent_emitter = Box::new(EmitterWriter::new(Box::new(Vec::new()), None, codemap.clone()));\n@@ -412,7 +413,7 @@ pub fn format(file: &Path, config: &Config) -> FileMap {\n                                                 codemap.clone());\n     let mut parse_session = ParseSess::with_span_handler(tty_handler, codemap.clone());\n \n-    let krate = parse::parse_crate_from_file(file, Vec::new(), &parse_session);\n+    let krate = parse::parse_crate_from_file(file, Vec::new(), &parse_session).unwrap();\n \n     // Suppress error output after parsing.\n     let silent_emitter = Box::new(EmitterWriter::new(Box::new(Vec::new()), None, codemap.clone()));"}]}