{"sha": "e0c5ed0c182918093002acd10caaa0cb8ec8044a", "node_id": "C_kwDOAAsO6NoAKGUwYzVlZDBjMTgyOTE4MDkzMDAyYWNkMTBjYWFhMGNiOGVjODA0NGE", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-04T17:00:46Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-10-19T12:51:22Z"}, "message": "Sort and categorize #![feature]s in alloc.", "tree": {"sha": "c8f09490bc15abe5f0b631353e610d5129ce3642", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8f09490bc15abe5f0b631353e610d5129ce3642"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0c5ed0c182918093002acd10caaa0cb8ec8044a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0c5ed0c182918093002acd10caaa0cb8ec8044a", "html_url": "https://github.com/rust-lang/rust/commit/e0c5ed0c182918093002acd10caaa0cb8ec8044a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0c5ed0c182918093002acd10caaa0cb8ec8044a/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d45ed7502ad225739270a368528725930f54b7b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d45ed7502ad225739270a368528725930f54b7b6", "html_url": "https://github.com/rust-lang/rust/commit/d45ed7502ad225739270a368528725930f54b7b6"}], "stats": {"total": 94, "additions": 52, "deletions": 42}, "files": [{"sha": "a143c4e8dde4150eeb65be9d76cba7050a54d799", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 52, "deletions": 42, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/e0c5ed0c182918093002acd10caaa0cb8ec8044a/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0c5ed0c182918093002acd10caaa0cb8ec8044a/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=e0c5ed0c182918093002acd10caaa0cb8ec8044a", "patch": "@@ -80,87 +80,97 @@\n )]\n #![no_std]\n #![needs_allocator]\n+//\n+// Lints:\n+#![deny(unsafe_op_in_unsafe_fn)]\n #![warn(deprecated_in_future)]\n-#![warn(missing_docs)]\n #![warn(missing_debug_implementations)]\n+#![warn(missing_docs)]\n #![allow(explicit_outlives_requirements)]\n-#![deny(unsafe_op_in_unsafe_fn)]\n-#![feature(rustc_allow_const_fn_unstable)]\n-#![cfg_attr(not(test), feature(generator_trait))]\n-#![cfg_attr(test, feature(test))]\n-#![cfg_attr(test, feature(new_uninit))]\n+//\n+// Library features:\n+#![feature(alloc_layout_extra)]\n #![feature(allocator_api)]\n #![feature(array_chunks)]\n #![feature(array_methods)]\n #![feature(array_windows)]\n-#![feature(allow_internal_unstable)]\n-#![feature(arbitrary_self_types)]\n #![feature(async_stream)]\n-#![feature(box_patterns)]\n-#![feature(box_syntax)]\n-#![feature(cfg_sanitize)]\n-#![feature(cfg_target_has_atomic)]\n #![feature(coerce_unsized)]\n #![cfg_attr(not(no_global_oom_handling), feature(const_btree_new))]\n-#![feature(const_fn_trait_bound)]\n-#![feature(cow_is_borrowed)]\n #![feature(const_cow_is_borrowed)]\n-#![feature(const_trait_impl)]\n-#![feature(destructuring_assignment)]\n-#![feature(dispatch_from_dyn)]\n #![feature(core_intrinsics)]\n-#![feature(dropck_eyepatch)]\n+#![feature(cow_is_borrowed)]\n+#![feature(dispatch_from_dyn)]\n #![feature(exact_size_is_empty)]\n-#![feature(exclusive_range_pattern)]\n #![feature(extend_one)]\n #![feature(fmt_internals)]\n #![feature(fn_traits)]\n-#![feature(fundamental)]\n #![feature(inplace_iteration)]\n-// Technically, this is a bug in rustdoc: rustdoc sees the documentation on `#[lang = slice_alloc]`\n-// blocks is for `&[T]`, which also has documentation using this feature in `core`, and gets mad\n-// that the feature-gate isn't enabled. Ideally, it wouldn't check for the feature gate for docs\n-// from other crates, but since this can only appear for lang items, it doesn't seem worth fixing.\n-#![feature(intra_doc_pointers)]\n #![feature(iter_advance_by)]\n #![feature(iter_zip)]\n-#![feature(lang_items)]\n #![feature(layout_for_ptr)]\n-#![feature(negative_impls)]\n-#![feature(never_type)]\n-#![feature(nll)]\n+#![feature(maybe_uninit_extra)]\n+#![feature(maybe_uninit_slice)]\n+#![feature(maybe_uninit_uninit_array)]\n+#![cfg_attr(test, feature(new_uninit))]\n #![feature(nonnull_slice_from_raw_parts)]\n-#![feature(auto_traits)]\n #![feature(option_result_unwrap_unchecked)]\n #![feature(pattern)]\n #![feature(ptr_internals)]\n-#![feature(rustc_attrs)]\n #![feature(receiver_trait)]\n-#![feature(min_specialization)]\n #![feature(set_ptr_value)]\n+#![feature(slice_group_by)]\n+#![feature(slice_partition_dedup)]\n #![feature(slice_ptr_get)]\n #![feature(slice_ptr_len)]\n #![feature(slice_range)]\n-#![feature(staged_api)]\n #![feature(str_internals)]\n #![feature(trusted_len)]\n-#![feature(unboxed_closures)]\n+#![feature(trusted_random_access)]\n+#![feature(try_trait_v2)]\n #![feature(unicode_internals)]\n #![feature(unsize)]\n-#![feature(unsized_fn_params)]\n+//\n+// Language features:\n #![feature(allocator_internals)]\n-#![feature(slice_partition_dedup)]\n-#![feature(maybe_uninit_extra, maybe_uninit_slice, maybe_uninit_uninit_array)]\n-#![feature(alloc_layout_extra)]\n-#![feature(trusted_random_access)]\n-#![feature(try_trait_v2)]\n+#![feature(allow_internal_unstable)]\n+#![feature(arbitrary_self_types)]\n #![feature(associated_type_bounds)]\n-#![feature(slice_group_by)]\n+#![feature(auto_traits)]\n+#![feature(box_patterns)]\n+#![feature(box_syntax)]\n+#![feature(cfg_sanitize)]\n+#![feature(cfg_target_has_atomic)]\n+#![feature(const_fn_trait_bound)]\n+#![feature(const_trait_impl)]\n #![feature(decl_macro)]\n+#![feature(destructuring_assignment)]\n+#![feature(dropck_eyepatch)]\n+#![feature(exclusive_range_pattern)]\n+#![feature(fundamental)]\n+#![cfg_attr(not(test), feature(generator_trait))]\n+#![feature(lang_items)]\n+#![feature(min_specialization)]\n+#![feature(negative_impls)]\n+#![feature(never_type)]\n+#![feature(nll)]\n+#![feature(rustc_allow_const_fn_unstable)]\n+#![feature(rustc_attrs)]\n+#![feature(staged_api)]\n+#![cfg_attr(test, feature(test))]\n+#![feature(unboxed_closures)]\n+#![feature(unsized_fn_params)]\n+//\n+// Rustdoc features:\n #![feature(doc_cfg)]\n #![cfg_attr(not(bootstrap), feature(doc_cfg_hide))]\n-// Allow testing this library\n+// Technically, this is a bug in rustdoc: rustdoc sees the documentation on `#[lang = slice_alloc]`\n+// blocks is for `&[T]`, which also has documentation using this feature in `core`, and gets mad\n+// that the feature-gate isn't enabled. Ideally, it wouldn't check for the feature gate for docs\n+// from other crates, but since this can only appear for lang items, it doesn't seem worth fixing.\n+#![feature(intra_doc_pointers)]\n \n+// Allow testing this library\n #[cfg(test)]\n #[macro_use]\n extern crate std;"}]}