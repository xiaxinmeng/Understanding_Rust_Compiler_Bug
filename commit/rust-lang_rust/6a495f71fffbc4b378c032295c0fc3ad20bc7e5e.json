{"sha": "6a495f71fffbc4b378c032295c0fc3ad20bc7e5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNDk1ZjcxZmZmYmM0YjM3OGMwMzIyOTVjMGZjM2FkMjBiYzdlNWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-09T04:02:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-09T04:02:51Z"}, "message": "Auto merge of #37492 - japaric:no-atomics-alloc, r=brson\n\nmake `alloc` and `collections` compilable for thumbv6m-none-eabi\n\nby cfging away `alloc::Arc` and changing OOM to abort for this target\n\nr? @alexcrichton\ncc @thejpster", "tree": {"sha": "a5358a9a205b3eb26453670c001a232b812b595f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5358a9a205b3eb26453670c001a232b812b595f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a495f71fffbc4b378c032295c0fc3ad20bc7e5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a495f71fffbc4b378c032295c0fc3ad20bc7e5e", "html_url": "https://github.com/rust-lang/rust/commit/6a495f71fffbc4b378c032295c0fc3ad20bc7e5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a495f71fffbc4b378c032295c0fc3ad20bc7e5e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97bfeadfd8eb4db591d9fb0fcfef7472d7480415", "url": "https://api.github.com/repos/rust-lang/rust/commits/97bfeadfd8eb4db591d9fb0fcfef7472d7480415", "html_url": "https://github.com/rust-lang/rust/commit/97bfeadfd8eb4db591d9fb0fcfef7472d7480415"}, {"sha": "abe6fc73e0d5d58d12b069a8b27514086ebbefa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/abe6fc73e0d5d58d12b069a8b27514086ebbefa1", "html_url": "https://github.com/rust-lang/rust/commit/abe6fc73e0d5d58d12b069a8b27514086ebbefa1"}], "stats": {"total": 51, "additions": 36, "deletions": 15}, "files": [{"sha": "f9dfdc0e0753632ad0340a0cb07e96fb4dfdb4a5", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a495f71fffbc4b378c032295c0fc3ad20bc7e5e/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a495f71fffbc4b378c032295c0fc3ad20bc7e5e/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=6a495f71fffbc4b378c032295c0fc3ad20bc7e5e", "patch": "@@ -74,6 +74,7 @@\n \n #![feature(allocator)]\n #![feature(box_syntax)]\n+#![feature(cfg_target_has_atomic)]\n #![feature(coerce_unsized)]\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n@@ -122,6 +123,7 @@ mod boxed {\n }\n #[cfg(test)]\n mod boxed_test;\n+#[cfg(target_has_atomic = \"ptr\")]\n pub mod arc;\n pub mod rc;\n pub mod raw_vec;"}, {"sha": "3640156fec2ae2fc3bcc07a5bf0fb17ad13af169", "filename": "src/liballoc/oom.rs", "status": "modified", "additions": 34, "deletions": 15, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6a495f71fffbc4b378c032295c0fc3ad20bc7e5e/src%2Fliballoc%2Foom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a495f71fffbc4b378c032295c0fc3ad20bc7e5e/src%2Fliballoc%2Foom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Foom.rs?ref=6a495f71fffbc4b378c032295c0fc3ad20bc7e5e", "patch": "@@ -8,12 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::sync::atomic::{AtomicPtr, Ordering};\n-use core::mem;\n+#[cfg(target_has_atomic = \"ptr\")]\n+pub use self::imp::set_oom_handler;\n use core::intrinsics;\n \n-static OOM_HANDLER: AtomicPtr<()> = AtomicPtr::new(default_oom_handler as *mut ());\n-\n fn default_oom_handler() -> ! {\n     // The default handler can't do much more since we can't assume the presence\n     // of libc or any way of printing an error message.\n@@ -26,17 +24,38 @@ fn default_oom_handler() -> ! {\n #[unstable(feature = \"oom\", reason = \"not a scrutinized interface\",\n            issue = \"27700\")]\n pub fn oom() -> ! {\n-    let value = OOM_HANDLER.load(Ordering::SeqCst);\n-    let handler: fn() -> ! = unsafe { mem::transmute(value) };\n-    handler();\n+    self::imp::oom()\n }\n \n-/// Set a custom handler for out-of-memory conditions\n-///\n-/// To avoid recursive OOM failures, it is critical that the OOM handler does\n-/// not allocate any memory itself.\n-#[unstable(feature = \"oom\", reason = \"not a scrutinized interface\",\n-           issue = \"27700\")]\n-pub fn set_oom_handler(handler: fn() -> !) {\n-    OOM_HANDLER.store(handler as *mut (), Ordering::SeqCst);\n+#[cfg(target_has_atomic = \"ptr\")]\n+mod imp {\n+    use core::mem;\n+    use core::sync::atomic::{AtomicPtr, Ordering};\n+\n+    static OOM_HANDLER: AtomicPtr<()> = AtomicPtr::new(super::default_oom_handler as *mut ());\n+\n+    #[inline(always)]\n+    pub fn oom() -> ! {\n+        let value = OOM_HANDLER.load(Ordering::SeqCst);\n+        let handler: fn() -> ! = unsafe { mem::transmute(value) };\n+        handler();\n+    }\n+\n+    /// Set a custom handler for out-of-memory conditions\n+    ///\n+    /// To avoid recursive OOM failures, it is critical that the OOM handler does\n+    /// not allocate any memory itself.\n+    #[unstable(feature = \"oom\", reason = \"not a scrutinized interface\",\n+               issue = \"27700\")]\n+    pub fn set_oom_handler(handler: fn() -> !) {\n+        OOM_HANDLER.store(handler as *mut (), Ordering::SeqCst);\n+    }\n+}\n+\n+#[cfg(not(target_has_atomic = \"ptr\"))]\n+mod imp {\n+    #[inline(always)]\n+    pub fn oom() -> ! {\n+        super::default_oom_handler()\n+    }\n }"}]}