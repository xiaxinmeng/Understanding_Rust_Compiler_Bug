{"sha": "3bab45d2acc24bf21c3fc760de0942b437e1ad54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYWI0NWQyYWNjMjRiZjIxYzNmYzc2MGRlMDk0MmI0MzdlMWFkNTQ=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-07-24T11:12:24Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-13T09:28:49Z"}, "message": "Make selection and evaluation caches use constness", "tree": {"sha": "a427fb0379b68acd5d1f67cacc1796618cebecfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a427fb0379b68acd5d1f67cacc1796618cebecfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bab45d2acc24bf21c3fc760de0942b437e1ad54", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmEWO1EACgkQAn35M4hi\nrd3EuRAAh+XfNWxAP3wvnV9j8MwKeqqaU3KUSZe84ubwsMhTKkvF1LQquzbim4r/\n9bIXKDmm7o8Ws9ThtGIrIxUwxKTireTZtig1uPrLgYRwNwK8nRMmagm0Y48v3uFv\npkbob70BvRD1/xMN1xbyFj2OgUYp2iz0y2wXqMGbo56i+UF1ZHXMJVnxrG32iwJw\nTb7mtvXr1S9h9/JlE01ejenScPogtmOkiKeqfdlENLL8Gpqa/teb6/IYeJoXbG9m\nHmDDaSiRwdkFVMdPc4nGUtUwxl7KcLaziLbg9qaH8PbiufDTsCAgN9DtKuKFZvW1\nKVUi5uPVmNIdUa96TG7J/se0V/9ODJ6gec3g8QmysP0P0eOpHwOzqnNTE5yRs7F7\nVGvzeL+bfRXDkIcPGLyGod3ILy7nMdTyKu2iTQSP3hKLp/iopTO1efFQeleFCqeK\nm5kEw4LZHmLYeDOlwnG837vr6bOxyAwEvX+jBZfOQAQ4R6ZDu/fYz7wCXZno6rg1\ny0YLTjVTlayUU4M9l4TcibW7o3Dp2fcU1qKSHZxB2nnqNHVhbGegUxADwAP3SU6x\n4q1Bs783IJqKmfBk1PHn6DWJ/MI/CqLYOasgOdjQYXWvyXwMOoZIOzXGmSyTU2NE\nNxlIbO1SPg5p41TxRONQFGwpPv0jl+4koSfGFUqspTXkkRG6g/4=\n=LwOO\n-----END PGP SIGNATURE-----", "payload": "tree a427fb0379b68acd5d1f67cacc1796618cebecfc\nparent 36ace4c0ada61df5a409a756bb161177876cfde8\nauthor Deadbeef <ent3rm4n@gmail.com> 1627125144 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1628846929 +0000\n\nMake selection and evaluation caches use constness\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bab45d2acc24bf21c3fc760de0942b437e1ad54", "html_url": "https://github.com/rust-lang/rust/commit/3bab45d2acc24bf21c3fc760de0942b437e1ad54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bab45d2acc24bf21c3fc760de0942b437e1ad54/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36ace4c0ada61df5a409a756bb161177876cfde8", "url": "https://api.github.com/repos/rust-lang/rust/commits/36ace4c0ada61df5a409a756bb161177876cfde8", "html_url": "https://github.com/rust-lang/rust/commit/36ace4c0ada61df5a409a756bb161177876cfde8"}], "stats": {"total": 91, "additions": 59, "deletions": 32}, "files": [{"sha": "924568a01a7de8d8dc4521c2dcbe4d3e62f28ca4", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bab45d2acc24bf21c3fc760de0942b437e1ad54/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bab45d2acc24bf21c3fc760de0942b437e1ad54/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=3bab45d2acc24bf21c3fc760de0942b437e1ad54", "patch": "@@ -12,12 +12,12 @@ use rustc_hir::def_id::DefId;\n use rustc_query_system::cache::Cache;\n \n pub type SelectionCache<'tcx> = Cache<\n-    ty::ParamEnvAnd<'tcx, ty::TraitRef<'tcx>>,\n+    ty::ConstnessAnd<ty::ParamEnvAnd<'tcx, ty::TraitRef<'tcx>>>,\n     SelectionResult<'tcx, SelectionCandidate<'tcx>>,\n >;\n \n pub type EvaluationCache<'tcx> =\n-    Cache<ty::ParamEnvAnd<'tcx, ty::PolyTraitRef<'tcx>>, EvaluationResult>;\n+    Cache<ty::ParamEnvAnd<'tcx, ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>>, EvaluationResult>;\n \n /// The selection process begins by considering all impls, where\n /// clauses, and so forth that might resolve an obligation. Sometimes"}, {"sha": "5321993f0ce8ce25a4506c1d9e1f9e6722be8eed", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 57, "deletions": 30, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/3bab45d2acc24bf21c3fc760de0942b437e1ad54/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bab45d2acc24bf21c3fc760de0942b437e1ad54/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=3bab45d2acc24bf21c3fc760de0942b437e1ad54", "patch": "@@ -41,6 +41,7 @@ use rustc_middle::ty::fast_reject;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::subst::{GenericArgKind, Subst, SubstsRef};\n+use rustc_middle::ty::WithConstness;\n use rustc_middle::ty::{self, PolyProjectionPredicate, ToPolyTraitRef, ToPredicate};\n use rustc_middle::ty::{Ty, TyCtxt, TypeFoldable};\n use rustc_span::symbol::sym;\n@@ -141,7 +142,7 @@ struct TraitObligationStack<'prev, 'tcx> {\n \n     /// The trait ref from `obligation` but \"freshened\" with the\n     /// selection-context's freshener. Used to check for recursion.\n-    fresh_trait_ref: ty::PolyTraitRef<'tcx>,\n+    fresh_trait_ref: ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>,\n \n     /// Starts out equal to `depth` -- if, during evaluation, we\n     /// encounter a cycle, then we will set this flag to the minimum\n@@ -804,7 +805,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // terms of `Fn` etc, but we could probably make this more\n         // precise still.\n         let unbound_input_types =\n-            stack.fresh_trait_ref.skip_binder().substs.types().any(|ty| ty.is_fresh());\n+            stack.fresh_trait_ref.value.skip_binder().substs.types().any(|ty| ty.is_fresh());\n         // This check was an imperfect workaround for a bug in the old\n         // intercrate mode; it should be removed when that goes away.\n         if unbound_input_types && self.intercrate {\n@@ -925,7 +926,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn check_evaluation_cache(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n-        trait_ref: ty::PolyTraitRef<'tcx>,\n+        trait_ref: ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>,\n     ) -> Option<EvaluationResult> {\n         let tcx = self.tcx();\n         if self.can_use_global_caches(param_env) {\n@@ -939,7 +940,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn insert_evaluation_cache(\n         &mut self,\n         param_env: ty::ParamEnv<'tcx>,\n-        trait_ref: ty::PolyTraitRef<'tcx>,\n+        trait_ref: ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>,\n         dep_node: DepNodeIndex,\n         result: EvaluationResult,\n     ) {\n@@ -1024,18 +1025,26 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let tcx = self.tcx();\n         // Respect const trait obligations\n         if let hir::Constness::Const = obligation.predicate.skip_binder().constness {\n-            match candidate {\n-                // const impl\n-                ImplCandidate(def_id) if tcx.impl_constness(def_id) == hir::Constness::Const => {}\n-                // const param\n-                ParamCandidate(ty::ConstnessAnd { constness: hir::Constness::Const, .. }) => {}\n-                // auto trait impl\n-                AutoImplCandidate(..) => {}\n-                // FIXME check if this is right, but this would allow Sized impls\n-                // BuiltinCandidate { .. } => {}\n-                _ => {\n-                    // reject all other types of candidates\n-                    return Err(Unimplemented);\n+            if Some(obligation.predicate.skip_binder().trait_ref.def_id)\n+                != tcx.lang_items().sized_trait()\n+            // const Sized bounds are skipped\n+            {\n+                match candidate {\n+                    // const impl\n+                    ImplCandidate(def_id)\n+                        if tcx.impl_constness(def_id) == hir::Constness::Const => {}\n+                    // const param\n+                    ParamCandidate(ty::ConstnessAnd {\n+                        constness: hir::Constness::Const, ..\n+                    }) => {}\n+                    // auto trait impl\n+                    AutoImplCandidate(..) => {}\n+                    // FIXME check if this is right, but this would allow Sized impls\n+                    // BuiltinCandidate { .. } => {}\n+                    _ => {\n+                        // reject all other types of candidates\n+                        return Err(Unimplemented);\n+                    }\n                 }\n             }\n         }\n@@ -1121,13 +1130,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> Option<SelectionResult<'tcx, SelectionCandidate<'tcx>>> {\n         let tcx = self.tcx();\n-        let trait_ref = &cache_fresh_trait_pred.skip_binder().trait_ref;\n+        let pred = &cache_fresh_trait_pred.skip_binder();\n+        let trait_ref = pred.trait_ref;\n         if self.can_use_global_caches(param_env) {\n-            if let Some(res) = tcx.selection_cache.get(&param_env.and(*trait_ref), tcx) {\n+            if let Some(res) = tcx\n+                .selection_cache\n+                .get(&param_env.and(trait_ref).with_constness(pred.constness), tcx)\n+            {\n                 return Some(res);\n             }\n         }\n-        self.infcx.selection_cache.get(&param_env.and(*trait_ref), tcx)\n+        self.infcx\n+            .selection_cache\n+            .get(&param_env.and(trait_ref).with_constness(pred.constness), tcx)\n     }\n \n     /// Determines whether can we safely cache the result\n@@ -1164,7 +1179,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         candidate: SelectionResult<'tcx, SelectionCandidate<'tcx>>,\n     ) {\n         let tcx = self.tcx();\n-        let trait_ref = cache_fresh_trait_pred.skip_binder().trait_ref;\n+        let pred = cache_fresh_trait_pred.skip_binder();\n+        let trait_ref = pred.trait_ref;\n \n         if !self.can_cache_candidate(&candidate) {\n             debug!(?trait_ref, ?candidate, \"insert_candidate_cache - candidate is not cacheable\");\n@@ -1178,14 +1194,22 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 if !candidate.needs_infer() {\n                     debug!(?trait_ref, ?candidate, \"insert_candidate_cache global\");\n                     // This may overwrite the cache with the same value.\n-                    tcx.selection_cache.insert(param_env.and(trait_ref), dep_node, candidate);\n+                    tcx.selection_cache.insert(\n+                        param_env.and(trait_ref).with_constness(pred.constness),\n+                        dep_node,\n+                        candidate,\n+                    );\n                     return;\n                 }\n             }\n         }\n \n         debug!(?trait_ref, ?candidate, \"insert_candidate_cache local\");\n-        self.infcx.selection_cache.insert(param_env.and(trait_ref), dep_node, candidate);\n+        self.infcx.selection_cache.insert(\n+            param_env.and(trait_ref).with_constness(pred.constness),\n+            dep_node,\n+            candidate,\n+        );\n     }\n \n     /// Matches a predicate against the bounds of its self type.\n@@ -2015,8 +2039,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     fn match_fresh_trait_refs(\n         &self,\n-        previous: ty::PolyTraitRef<'tcx>,\n-        current: ty::PolyTraitRef<'tcx>,\n+        previous: ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>,\n+        current: ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> bool {\n         let mut matcher = ty::_match::Match::new(self.tcx(), param_env);\n@@ -2028,8 +2052,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         previous_stack: TraitObligationStackList<'o, 'tcx>,\n         obligation: &'o TraitObligation<'tcx>,\n     ) -> TraitObligationStack<'o, 'tcx> {\n-        let fresh_trait_ref =\n-            obligation.predicate.to_poly_trait_ref().fold_with(&mut self.freshener);\n+        let fresh_trait_ref = obligation\n+            .predicate\n+            .to_poly_trait_ref()\n+            .fold_with(&mut self.freshener)\n+            .with_constness(obligation.predicate.skip_binder().constness);\n \n         let dfn = previous_stack.cache.next_dfn();\n         let depth = previous_stack.depth() + 1;\n@@ -2308,7 +2335,7 @@ struct ProvisionalEvaluationCache<'tcx> {\n     /// - then we determine that `E` is in error -- we will then clear\n     ///   all cache values whose DFN is >= 4 -- in this case, that\n     ///   means the cached value for `F`.\n-    map: RefCell<FxHashMap<ty::PolyTraitRef<'tcx>, ProvisionalEvaluation>>,\n+    map: RefCell<FxHashMap<ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>, ProvisionalEvaluation>>,\n }\n \n /// A cache value for the provisional cache: contains the depth-first\n@@ -2340,7 +2367,7 @@ impl<'tcx> ProvisionalEvaluationCache<'tcx> {\n     /// `reached_depth` (from the returned value).\n     fn get_provisional(\n         &self,\n-        fresh_trait_ref: ty::PolyTraitRef<'tcx>,\n+        fresh_trait_ref: ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>,\n     ) -> Option<ProvisionalEvaluation> {\n         debug!(\n             ?fresh_trait_ref,\n@@ -2358,7 +2385,7 @@ impl<'tcx> ProvisionalEvaluationCache<'tcx> {\n         &self,\n         from_dfn: usize,\n         reached_depth: usize,\n-        fresh_trait_ref: ty::PolyTraitRef<'tcx>,\n+        fresh_trait_ref: ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>,\n         result: EvaluationResult,\n     ) {\n         debug!(?from_dfn, ?fresh_trait_ref, ?result, \"insert_provisional\");\n@@ -2436,7 +2463,7 @@ impl<'tcx> ProvisionalEvaluationCache<'tcx> {\n     fn on_completion(\n         &self,\n         dfn: usize,\n-        mut op: impl FnMut(ty::PolyTraitRef<'tcx>, EvaluationResult),\n+        mut op: impl FnMut(ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>, EvaluationResult),\n     ) {\n         debug!(?dfn, \"on_completion\");\n "}]}