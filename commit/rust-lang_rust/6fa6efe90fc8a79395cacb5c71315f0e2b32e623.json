{"sha": "6fa6efe90fc8a79395cacb5c71315f0e2b32e623", "node_id": "C_kwDOAAsO6NoAKDZmYTZlZmU5MGZjOGE3OTM5NWNhY2I1YzcxMzE1ZjBlMmIzMmU2MjM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-03T16:18:48Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-03T16:18:48Z"}, "message": "fix: Fix parsing of nested tuple field accesses in a cursed way", "tree": {"sha": "eae05eee4e4201e3034869dbcab01f394f07b9b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eae05eee4e4201e3034869dbcab01f394f07b9b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fa6efe90fc8a79395cacb5c71315f0e2b32e623", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fa6efe90fc8a79395cacb5c71315f0e2b32e623", "html_url": "https://github.com/rust-lang/rust/commit/6fa6efe90fc8a79395cacb5c71315f0e2b32e623", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dab685dd87ba99f6c0f005f2ce7b0a3c10dada22", "url": "https://api.github.com/repos/rust-lang/rust/commits/dab685dd87ba99f6c0f005f2ce7b0a3c10dada22", "html_url": "https://github.com/rust-lang/rust/commit/dab685dd87ba99f6c0f005f2ce7b0a3c10dada22"}], "stats": {"total": 329, "additions": 294, "deletions": 35}, "files": [{"sha": "fb2616cf0137529b0cbbb996dc611b80d9ec6549", "filename": "crates/parser/src/event.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Fsrc%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Fsrc%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fevent.rs?ref=6fa6efe90fc8a79395cacb5c71315f0e2b32e623", "patch": "@@ -72,9 +72,12 @@ pub(crate) enum Event {\n     /// `n_raw_tokens = 2` is used to produced a single `>>`.\n     Token {\n         kind: SyntaxKind,\n+        // Consider custom enum here?\n         n_raw_tokens: u8,\n     },\n-\n+    FloatSplitHack {\n+        has_pseudo_dot: bool,\n+    },\n     Error {\n         msg: String,\n     },\n@@ -125,6 +128,11 @@ pub(super) fn process(mut events: Vec<Event>) -> Output {\n             Event::Token { kind, n_raw_tokens } => {\n                 res.token(kind, n_raw_tokens);\n             }\n+            Event::FloatSplitHack { has_pseudo_dot } => {\n+                res.float_split_hack(has_pseudo_dot);\n+                let ev = mem::replace(&mut events[i + 1], Event::tombstone());\n+                assert!(matches!(ev, Event::Finish), \"{ev:?}\");\n+            }\n             Event::Error { msg } => res.error(msg),\n         }\n     }"}, {"sha": "7516ac3c4bd37f3e9b04617159c5163dd3c24b8f", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 66, "deletions": 32, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=6fa6efe90fc8a79395cacb5c71315f0e2b32e623", "patch": "@@ -379,7 +379,7 @@ fn postfix_expr(\n             // }\n             T!['('] if allow_calls => call_expr(p, lhs),\n             T!['['] if allow_calls => index_expr(p, lhs),\n-            T![.] => match postfix_dot_expr(p, lhs) {\n+            T![.] => match postfix_dot_expr::<false>(p, lhs) {\n                 Ok(it) => it,\n                 Err(it) => {\n                     lhs = it;\n@@ -393,35 +393,44 @@ fn postfix_expr(\n         block_like = BlockLike::NotBlock;\n     }\n     return (lhs, block_like);\n+}\n \n-    fn postfix_dot_expr(\n-        p: &mut Parser<'_>,\n-        lhs: CompletedMarker,\n-    ) -> Result<CompletedMarker, CompletedMarker> {\n+fn postfix_dot_expr<const FLOAT_RECOVERY: bool>(\n+    p: &mut Parser<'_>,\n+    lhs: CompletedMarker,\n+) -> Result<CompletedMarker, CompletedMarker> {\n+    if !FLOAT_RECOVERY {\n         assert!(p.at(T![.]));\n-        if p.nth(1) == IDENT && (p.nth(2) == T!['('] || p.nth_at(2, T![::])) {\n-            return Ok(method_call_expr(p, lhs));\n-        }\n+    }\n+    let nth1 = if FLOAT_RECOVERY { 0 } else { 1 };\n+    let nth2 = if FLOAT_RECOVERY { 1 } else { 2 };\n \n-        // test await_expr\n-        // fn foo() {\n-        //     x.await;\n-        //     x.0.await;\n-        //     x.0().await?.hello();\n-        // }\n-        if p.nth(1) == T![await] {\n-            let m = lhs.precede(p);\n-            p.bump(T![.]);\n-            p.bump(T![await]);\n-            return Ok(m.complete(p, AWAIT_EXPR));\n-        }\n+    if p.nth(nth1) == IDENT && (p.nth(nth2) == T!['('] || p.nth_at(nth2, T![::])) {\n+        return Ok(method_call_expr::<FLOAT_RECOVERY>(p, lhs));\n+    }\n \n-        if p.at(T![..=]) || p.at(T![..]) {\n-            return Err(lhs);\n+    // test await_expr\n+    // fn foo() {\n+    //     x.await;\n+    //     x.0.await;\n+    //     x.0().await?.hello();\n+    //     x.0.0.await;\n+    //     x.0. await;\n+    // }\n+    if p.nth(nth1) == T![await] {\n+        let m = lhs.precede(p);\n+        if !FLOAT_RECOVERY {\n+            p.bump(T![.]);\n         }\n+        p.bump(T![await]);\n+        return Ok(m.complete(p, AWAIT_EXPR));\n+    }\n \n-        Ok(field_expr(p, lhs))\n+    if p.at(T![..=]) || p.at(T![..]) {\n+        return Err(lhs);\n     }\n+\n+    field_expr::<FLOAT_RECOVERY>(p, lhs)\n }\n \n // test call_expr\n@@ -455,11 +464,22 @@ fn index_expr(p: &mut Parser<'_>, lhs: CompletedMarker) -> CompletedMarker {\n // fn foo() {\n //     x.foo();\n //     y.bar::<T>(1, 2,);\n+//     x.0.0.call();\n+//     x.0. call();\n // }\n-fn method_call_expr(p: &mut Parser<'_>, lhs: CompletedMarker) -> CompletedMarker {\n-    assert!(p.at(T![.]) && p.nth(1) == IDENT && (p.nth(2) == T!['('] || p.nth_at(2, T![::])));\n+fn method_call_expr<const FLOAT_RECOVERY: bool>(\n+    p: &mut Parser<'_>,\n+    lhs: CompletedMarker,\n+) -> CompletedMarker {\n+    if FLOAT_RECOVERY {\n+        assert!(p.nth(0) == IDENT && (p.nth(1) == T!['('] || p.nth_at(1, T![::])));\n+    } else {\n+        assert!(p.at(T![.]) && p.nth(1) == IDENT && (p.nth(2) == T!['('] || p.nth_at(2, T![::])));\n+    }\n     let m = lhs.precede(p);\n-    p.bump_any();\n+    if !FLOAT_RECOVERY {\n+        p.bump(T![.]);\n+    }\n     name_ref(p);\n     generic_args::opt_generic_arg_list(p, true);\n     if p.at(T!['(']) {\n@@ -472,21 +492,35 @@ fn method_call_expr(p: &mut Parser<'_>, lhs: CompletedMarker) -> CompletedMarker\n // fn foo() {\n //     x.foo;\n //     x.0.bar;\n+//     x.0.1;\n+//     x.0. bar;\n //     x.0();\n // }\n-fn field_expr(p: &mut Parser<'_>, lhs: CompletedMarker) -> CompletedMarker {\n-    assert!(p.at(T![.]));\n+fn field_expr<const FLOAT_RECOVERY: bool>(\n+    p: &mut Parser<'_>,\n+    lhs: CompletedMarker,\n+) -> Result<CompletedMarker, CompletedMarker> {\n+    if !FLOAT_RECOVERY {\n+        assert!(p.at(T![.]));\n+    }\n     let m = lhs.precede(p);\n-    p.bump(T![.]);\n+    if !FLOAT_RECOVERY {\n+        p.bump(T![.]);\n+    }\n     if p.at(IDENT) || p.at(INT_NUMBER) {\n         name_ref_or_index(p);\n     } else if p.at(FLOAT_NUMBER) {\n-        // FIXME: How to recover and instead parse INT + T![.]?\n-        p.bump_any();\n+        return match p.split_float(m) {\n+            (true, m) => {\n+                let lhs = m.complete(p, FIELD_EXPR);\n+                postfix_dot_expr::<true>(p, lhs)\n+            }\n+            (false, m) => Ok(m.complete(p, FIELD_EXPR)),\n+        };\n     } else {\n         p.error(\"expected field name or number\");\n     }\n-    m.complete(p, FIELD_EXPR)\n+    Ok(m.complete(p, FIELD_EXPR))\n }\n \n // test try_expr"}, {"sha": "f20d32d6cf877c2854c76d325a43badea94d26c3", "filename": "crates/parser/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flib.rs?ref=6fa6efe90fc8a79395cacb5c71315f0e2b32e623", "patch": "@@ -102,7 +102,7 @@ impl TopEntryPoint {\n                 match step {\n                     Step::Enter { .. } => depth += 1,\n                     Step::Exit => depth -= 1,\n-                    Step::Token { .. } | Step::Error { .. } => (),\n+                    Step::FloatSplit { .. } | Step::Token { .. } | Step::Error { .. } => (),\n                 }\n             }\n             assert!(!first, \"no tree at all\");"}, {"sha": "9587c8cb1ba6247aa91c443e7f19644667a111e5", "filename": "crates/parser/src/output.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Fsrc%2Foutput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Fsrc%2Foutput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Foutput.rs?ref=6fa6efe90fc8a79395cacb5c71315f0e2b32e623", "patch": "@@ -25,6 +25,7 @@ pub struct Output {\n #[derive(Debug)]\n pub enum Step<'a> {\n     Token { kind: SyntaxKind, n_input_tokens: u8 },\n+    FloatSplit { has_pseudo_dot: bool },\n     Enter { kind: SyntaxKind },\n     Exit,\n     Error { msg: &'a str },\n@@ -44,6 +45,7 @@ impl Output {\n     const TOKEN_EVENT: u8 = 0;\n     const ENTER_EVENT: u8 = 1;\n     const EXIT_EVENT: u8 = 2;\n+    const SPLIT_EVENT: u8 = 3;\n \n     pub fn iter(&self) -> impl Iterator<Item = Step<'_>> {\n         self.event.iter().map(|&event| {\n@@ -67,6 +69,9 @@ impl Output {\n                     Step::Enter { kind }\n                 }\n                 Self::EXIT_EVENT => Step::Exit,\n+                Self::SPLIT_EVENT => {\n+                    Step::FloatSplit { has_pseudo_dot: event & Self::N_INPUT_TOKEN_MASK != 0 }\n+                }\n                 _ => unreachable!(),\n             }\n         })\n@@ -79,6 +84,13 @@ impl Output {\n         self.event.push(e)\n     }\n \n+    pub(crate) fn float_split_hack(&mut self, has_pseudo_dot: bool) {\n+        let e = (Self::SPLIT_EVENT as u32) << Self::TAG_SHIFT\n+            | ((has_pseudo_dot as u32) << Self::N_INPUT_TOKEN_SHIFT)\n+            | Self::EVENT_MASK;\n+        self.event.push(e);\n+    }\n+\n     pub(crate) fn enter_node(&mut self, kind: SyntaxKind) {\n         let e = ((kind as u16 as u32) << Self::KIND_SHIFT)\n             | ((Self::ENTER_EVENT as u32) << Self::TAG_SHIFT)"}, {"sha": "0f4fa6022919c5c3ee08552899f6f70499427650", "filename": "crates/parser/src/parser.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fparser.rs?ref=6fa6efe90fc8a79395cacb5c71315f0e2b32e623", "patch": "@@ -181,6 +181,38 @@ impl<'t> Parser<'t> {\n         self.do_bump(kind, 1);\n     }\n \n+    /// Advances the parser by one token\n+    pub(crate) fn split_float(&mut self, marker: Marker) -> (bool, Marker) {\n+        assert!(self.at(SyntaxKind::FLOAT_NUMBER));\n+        // we have parse `<something>.`\n+        // `<something>`.0.1\n+        // here we need to insert an extra event\n+        //\n+        // `<something>`. 0. 1;\n+        // here we need to change the follow up parse, the return value will cause us to emulate a dot\n+        // the actual splitting happens later\n+        let has_pseudo_dot = !self.inp.is_joint(self.pos);\n+        let marker = if !has_pseudo_dot {\n+            let new_pos = self.start();\n+            let idx = marker.pos as usize;\n+            match &mut self.events[idx] {\n+                Event::Start { forward_parent, kind } => {\n+                    *kind = SyntaxKind::FIELD_EXPR;\n+                    *forward_parent = Some(new_pos.pos - marker.pos);\n+                }\n+                _ => unreachable!(),\n+            }\n+            // NOTE: This brings the start / finish pairs out of balance!\n+            std::mem::forget(marker);\n+            new_pos\n+        } else {\n+            marker\n+        };\n+        self.pos += 1 as usize;\n+        self.push_event(Event::FloatSplitHack { has_pseudo_dot });\n+        (has_pseudo_dot, marker)\n+    }\n+\n     /// Advances the parser by one token, remapping its kind.\n     /// This is useful to create contextual keywords from\n     /// identifiers. For example, the lexer creates a `union`"}, {"sha": "18a6f838face57671a4404c8743f9f39387529ef", "filename": "crates/parser/src/shortcuts.rs", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Fsrc%2Fshortcuts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Fsrc%2Fshortcuts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fshortcuts.rs?ref=6fa6efe90fc8a79395cacb5c71315f0e2b32e623", "patch": "@@ -44,7 +44,17 @@ impl<'a> LexedStr<'a> {\n                     }\n                     res.push(kind);\n                 }\n-                was_joint = true;\n+                if kind == SyntaxKind::FLOAT_NUMBER {\n+                    // we set jointness for floating point numbers as a hack to inform the\n+                    // parser about whether we have a `0.` or `0.1` style float\n+                    if self.text(i).split_once('.').map_or(false, |(_, it)| it.is_empty()) {\n+                        was_joint = false;\n+                    } else {\n+                        was_joint = true;\n+                    }\n+                } else {\n+                    was_joint = true;\n+                }\n             }\n         }\n         res\n@@ -63,6 +73,7 @@ impl<'a> LexedStr<'a> {\n                 Step::Token { kind, n_input_tokens: n_raw_tokens } => {\n                     builder.token(kind, n_raw_tokens)\n                 }\n+                Step::FloatSplit { has_pseudo_dot } => builder.float_split(has_pseudo_dot),\n                 Step::Enter { kind } => builder.enter(kind),\n                 Step::Exit => builder.exit(),\n                 Step::Error { msg } => {\n@@ -109,6 +120,16 @@ impl Builder<'_, '_> {\n         self.do_token(kind, n_tokens as usize);\n     }\n \n+    fn float_split(&mut self, has_pseudo_dot: bool) {\n+        match mem::replace(&mut self.state, State::Normal) {\n+            State::PendingEnter => unreachable!(),\n+            State::PendingExit => (self.sink)(StrStep::Exit),\n+            State::Normal => (),\n+        }\n+        self.eat_trivias();\n+        self.do_float_split(has_pseudo_dot);\n+    }\n+\n     fn enter(&mut self, kind: SyntaxKind) {\n         match mem::replace(&mut self.state, State::Normal) {\n             State::PendingEnter => {\n@@ -164,6 +185,37 @@ impl Builder<'_, '_> {\n         self.pos += n_tokens;\n         (self.sink)(StrStep::Token { kind, text });\n     }\n+\n+    fn do_float_split(&mut self, has_pseudo_dot: bool) {\n+        let text = &self.lexed.range_text(self.pos..self.pos + 1);\n+        self.pos += 1;\n+        match text.split_once('.') {\n+            Some((left, right)) => {\n+                assert!(!left.is_empty());\n+                (self.sink)(StrStep::Enter { kind: SyntaxKind::NAME_REF });\n+                (self.sink)(StrStep::Token { kind: SyntaxKind::INT_NUMBER, text: left });\n+                (self.sink)(StrStep::Exit);\n+\n+                // here we move the exit up, the original exit has been deleted in process\n+                (self.sink)(StrStep::Exit);\n+\n+                (self.sink)(StrStep::Token { kind: SyntaxKind::DOT, text: \".\" });\n+\n+                if has_pseudo_dot {\n+                    assert!(right.is_empty());\n+                    self.state = State::Normal;\n+                } else {\n+                    (self.sink)(StrStep::Enter { kind: SyntaxKind::NAME_REF });\n+                    (self.sink)(StrStep::Token { kind: SyntaxKind::INT_NUMBER, text: right });\n+                    (self.sink)(StrStep::Exit);\n+\n+                    // the parser creates an unbalanced start node, we are required to close it here\n+                    self.state = State::PendingExit;\n+                }\n+            }\n+            None => unreachable!(),\n+        }\n+    }\n }\n \n fn n_attached_trivias<'a>("}, {"sha": "40f92e58804f925018c59518a66f811594794169", "filename": "crates/parser/src/tests/prefix_entries.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Fsrc%2Ftests%2Fprefix_entries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Fsrc%2Ftests%2Fprefix_entries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests%2Fprefix_entries.rs?ref=6fa6efe90fc8a79395cacb5c71315f0e2b32e623", "patch": "@@ -51,6 +51,9 @@ fn expr() {\n     check(PrefixEntryPoint::Expr, \"-1\", \"-1\");\n     check(PrefixEntryPoint::Expr, \"fn foo() {}\", \"fn\");\n     check(PrefixEntryPoint::Expr, \"#[attr] ()\", \"#[attr] ()\");\n+    check(PrefixEntryPoint::Expr, \"foo.0\", \"foo.0\");\n+    check(PrefixEntryPoint::Expr, \"foo.0.1\", \"foo.0.1\");\n+    check(PrefixEntryPoint::Expr, \"foo.0. foo\", \"foo.0. foo\");\n }\n \n #[test]\n@@ -88,6 +91,7 @@ fn check(entry: PrefixEntryPoint, input: &str, prefix: &str) {\n     for step in entry.parse(&input).iter() {\n         match step {\n             Step::Token { n_input_tokens, .. } => n_tokens += n_input_tokens as usize,\n+            Step::FloatSplit { .. } => n_tokens += 1,\n             Step::Enter { .. } | Step::Exit | Step::Error { .. } => (),\n         }\n     }"}, {"sha": "dd27dc48964242015e5420418f085d7037ed0597", "filename": "crates/parser/test_data/parser/inline/ok/0011_field_expr.rast", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rast?ref=6fa6efe90fc8a79395cacb5c71315f0e2b32e623", "patch": "@@ -40,6 +40,39 @@ SOURCE_FILE\n               IDENT \"bar\"\n           SEMICOLON \";\"\n         WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          FIELD_EXPR\n+            FIELD_EXPR\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"x\"\n+              DOT \".\"\n+              NAME_REF\n+                INT_NUMBER \"0\"\n+            DOT \".\"\n+            NAME_REF\n+              INT_NUMBER \"1\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          FIELD_EXPR\n+            FIELD_EXPR\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"x\"\n+              DOT \".\"\n+              NAME_REF\n+                INT_NUMBER \"0\"\n+            DOT \".\"\n+            WHITESPACE \" \"\n+            NAME_REF\n+              IDENT \"bar\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n         EXPR_STMT\n           CALL_EXPR\n             FIELD_EXPR"}, {"sha": "98dbe45a7ec92531842c86179be30b2d38e3d133", "filename": "crates/parser/test_data/parser/inline/ok/0011_field_expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0011_field_expr.rs?ref=6fa6efe90fc8a79395cacb5c71315f0e2b32e623", "patch": "@@ -1,5 +1,7 @@\n fn foo() {\n     x.foo;\n     x.0.bar;\n+    x.0.1;\n+    x.0. bar;\n     x.0();\n }"}, {"sha": "b28b8eb673a7033c5990b54f75e758f8369e0d3e", "filename": "crates/parser/test_data/parser/inline/ok/0107_method_call_expr.rast", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rast?ref=6fa6efe90fc8a79395cacb5c71315f0e2b32e623", "patch": "@@ -58,6 +58,49 @@ SOURCE_FILE\n               COMMA \",\"\n               R_PAREN \")\"\n           SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          METHOD_CALL_EXPR\n+            FIELD_EXPR\n+              FIELD_EXPR\n+                PATH_EXPR\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"x\"\n+                DOT \".\"\n+                NAME_REF\n+                  INT_NUMBER \"0\"\n+              DOT \".\"\n+              NAME_REF\n+                INT_NUMBER \"0\"\n+            DOT \".\"\n+            NAME_REF\n+              IDENT \"call\"\n+            ARG_LIST\n+              L_PAREN \"(\"\n+              R_PAREN \")\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          METHOD_CALL_EXPR\n+            FIELD_EXPR\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"x\"\n+              DOT \".\"\n+              NAME_REF\n+                INT_NUMBER \"0\"\n+            DOT \".\"\n+            WHITESPACE \" \"\n+            NAME_REF\n+              IDENT \"call\"\n+            ARG_LIST\n+              L_PAREN \"(\"\n+              R_PAREN \")\"\n+          SEMICOLON \";\"\n         WHITESPACE \"\\n\"\n         R_CURLY \"}\"\n   WHITESPACE \"\\n\""}, {"sha": "48bb6381e80bf8e84bd173457137457595e3ef45", "filename": "crates/parser/test_data/parser/inline/ok/0107_method_call_expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rs?ref=6fa6efe90fc8a79395cacb5c71315f0e2b32e623", "patch": "@@ -1,4 +1,6 @@\n fn foo() {\n     x.foo();\n     y.bar::<T>(1, 2,);\n+    x.0.0.call();\n+    x.0. call();\n }"}, {"sha": "af713a22072fe5d4e67a81d978742708263651a6", "filename": "crates/parser/test_data/parser/inline/ok/0137_await_expr.rast", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0137_await_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0137_await_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0137_await_expr.rast?ref=6fa6efe90fc8a79395cacb5c71315f0e2b32e623", "patch": "@@ -65,6 +65,41 @@ SOURCE_FILE\n               L_PAREN \"(\"\n               R_PAREN \")\"\n           SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          AWAIT_EXPR\n+            FIELD_EXPR\n+              FIELD_EXPR\n+                PATH_EXPR\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"x\"\n+                DOT \".\"\n+                NAME_REF\n+                  INT_NUMBER \"0\"\n+              DOT \".\"\n+              NAME_REF\n+                INT_NUMBER \"0\"\n+            DOT \".\"\n+            AWAIT_KW \"await\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          AWAIT_EXPR\n+            FIELD_EXPR\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"x\"\n+              DOT \".\"\n+              NAME_REF\n+                INT_NUMBER \"0\"\n+            DOT \".\"\n+            WHITESPACE \" \"\n+            AWAIT_KW \"await\"\n+          SEMICOLON \";\"\n         WHITESPACE \"\\n\"\n         R_CURLY \"}\"\n   WHITESPACE \"\\n\""}, {"sha": "fe9a3211bb18d2061eb86e8702bfe991d747068c", "filename": "crates/parser/test_data/parser/inline/ok/0137_await_expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0137_await_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa6efe90fc8a79395cacb5c71315f0e2b32e623/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0137_await_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0137_await_expr.rs?ref=6fa6efe90fc8a79395cacb5c71315f0e2b32e623", "patch": "@@ -2,4 +2,6 @@ fn foo() {\n     x.await;\n     x.0.await;\n     x.0().await?.hello();\n+    x.0.0.await;\n+    x.0. await;\n }"}]}