{"sha": "0ce05633a170076a3624a79ed96a40c1730a8164", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZTA1NjMzYTE3MDA3NmEzNjI0YTc5ZWQ5NmE0MGMxNzMwYTgxNjQ=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-08-11T22:01:15Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-08-26T19:44:50Z"}, "message": "Fix match type inference for Never match arms", "tree": {"sha": "bd59c4112df517f51356b3914f48a8f9dae642c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd59c4112df517f51356b3914f48a8f9dae642c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ce05633a170076a3624a79ed96a40c1730a8164", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ce05633a170076a3624a79ed96a40c1730a8164", "html_url": "https://github.com/rust-lang/rust/commit/0ce05633a170076a3624a79ed96a40c1730a8164", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ce05633a170076a3624a79ed96a40c1730a8164/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f63cfd5fca6180b51d3b00896b119def32314b71", "url": "https://api.github.com/repos/rust-lang/rust/commits/f63cfd5fca6180b51d3b00896b119def32314b71", "html_url": "https://github.com/rust-lang/rust/commit/f63cfd5fca6180b51d3b00896b119def32314b71"}], "stats": {"total": 38, "additions": 32, "deletions": 6}, "files": [{"sha": "dc7101075910585ea9a232a6e7bad3d702023a0b", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0ce05633a170076a3624a79ed96a40c1730a8164/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ce05633a170076a3624a79ed96a40c1730a8164/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=0ce05633a170076a3624a79ed96a40c1730a8164", "patch": "@@ -280,8 +280,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         let ty1 = self.resolve_ty_shallow(ty1);\n         let ty2 = self.resolve_ty_shallow(ty2);\n         match (&*ty1, &*ty2) {\n-            (Ty::Unknown, ..) => true,\n-            (.., Ty::Unknown) => true,\n+            (Ty::Unknown, _) | (_, Ty::Unknown) => true,\n             (Ty::Apply(a_ty1), Ty::Apply(a_ty2)) if a_ty1.ctor == a_ty2.ctor => {\n                 self.unify_substs(&a_ty1.parameters, &a_ty2.parameters, depth + 1)\n             }\n@@ -297,7 +296,9 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             | (Ty::Infer(InferTy::IntVar(tv)), other)\n             | (other, Ty::Infer(InferTy::IntVar(tv)))\n             | (Ty::Infer(InferTy::FloatVar(tv)), other)\n-            | (other, Ty::Infer(InferTy::FloatVar(tv))) => {\n+            | (other, Ty::Infer(InferTy::FloatVar(tv)))\n+                if !Self::is_never(other) =>\n+            {\n                 // the type var is unknown since we tried to resolve it\n                 self.var_unification_table.union_value(*tv, TypeVarValue::Known(other.clone()));\n                 true\n@@ -1080,6 +1081,9 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 };\n                 let input_ty = self.infer_expr(*expr, &Expectation::none());\n \n+                let mut resulting_match_ty = None;\n+                let mut all_arms_never = !arms.is_empty();\n+\n                 for arm in arms {\n                     for &pat in &arm.pats {\n                         let _pat_ty = self.infer_pat(pat, &input_ty, BindingMode::default());\n@@ -1090,10 +1094,24 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                             &Expectation::has_type(Ty::simple(TypeCtor::Bool)),\n                         );\n                     }\n-                    self.infer_expr(arm.expr, &expected);\n+                    let arm_ty = self.infer_expr(arm.expr, &expected);\n+                    if all_arms_never && Self::is_never(&arm_ty) {\n+                        resulting_match_ty = Some(arm_ty);\n+                    } else {\n+                        all_arms_never = false;\n+                        resulting_match_ty = None;\n+                    }\n                 }\n \n-                expected.ty\n+                if let (Ty::Infer(expected_tv), Some(match_ty)) =\n+                    (&expected.ty, &resulting_match_ty)\n+                {\n+                    self.var_unification_table\n+                        .union_value(expected_tv.to_inner(), TypeVarValue::Known(match_ty.clone()));\n+                    match_ty.clone()\n+                } else {\n+                    expected.ty\n+                }\n             }\n             Expr::Path(p) => {\n                 // FIXME this could be more efficient...\n@@ -1368,6 +1386,14 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         ty\n     }\n \n+    fn is_never(ty: &Ty) -> bool {\n+        if let Ty::Apply(ApplicationTy { ctor: TypeCtor::Never, .. }) = ty {\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+\n     fn infer_block(\n         &mut self,\n         statements: &[Statement],"}, {"sha": "6bf56959d8e4ada273f5a7c59cb4039b2132735b", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ce05633a170076a3624a79ed96a40c1730a8164/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ce05633a170076a3624a79ed96a40c1730a8164/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=0ce05633a170076a3624a79ed96a40c1730a8164", "patch": "@@ -3600,7 +3600,7 @@ mod match_with_never_tests {\n     use super::type_at;\n \n     #[test]\n-    fn match_compex_arm_ty() {\n+    fn match_complex_arm_ty() {\n         let t = type_at(\n             r#\"\n //- /main.rs"}]}