{"sha": "c8986b46765cedc1bb67bed2c8d4f66f8c6bebe9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4OTg2YjQ2NzY1Y2VkYzFiYjY3YmVkMmM4ZDRmNjZmOGM2YmViZTk=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-09-16T13:45:44Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-09-16T13:50:35Z"}, "message": "Fix FP with `WHILE_LET_ON_ITERATOR` and refutable pats", "tree": {"sha": "b437c90dab8e2a6f0a3944fe03d63c9e3213ac28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b437c90dab8e2a6f0a3944fe03d63c9e3213ac28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8986b46765cedc1bb67bed2c8d4f66f8c6bebe9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJX2/isAAoJEF5CfHlMukXonR0P/285xqSKeqzw19gda1hbx8/A\ncx+TGBwUAYyNB0gIDilR3eLqCQWD6GdNbX28pK2kkiwGVEK5Zn0vX2sLVE/d5+Xg\n47NBVdXpdq4zEWaTICwm0qF/Y0GIpl83JvyhDG85DEzxdTM2sdMOdTLPuNAAEmPt\nWW2GMLjvEgJnf3t3a9xhke+31u/2/5IeXDKGG2/Z2g616dmfThWskCvvXJEt7UL/\nsPogv3EEOD3AaOg4KFLxer2PrjHDtuQBTzKN9dpraC3UKSSrQ2m1DojTVpNmQLwF\n5u+Ktz3LJpJdtTWrtV7uCL8inhRnvVR9i0Gg2z6xDNe6UgMRpxBdozSmwt+jmXWS\nQYwHmwpf5Ju2M+mbc/1Pu3HPM7A2h60SdycAXcGPZ+9ESUDmCUq9/YLFHBHCvXqA\nF4NZWZcIN4s7Gnl/ZRSyVcdDQOPqkzM54ha9Jnnt1u7irMsvBHcPmfscyg3usVBp\ngR/YIh+8EQSqqrLDdXUhS91knrOA5yyg3ePDzbf6KEscZ4ccEFUqCxwb07BLETmL\ne2cNUKSxEDbx83tktMxINeceH/yg2OBbqYk/wJmbsbDHJPLdljLtUe9suaJEsKk0\nnBFC+uzXTkWNf4eSklsGTZH4Yr+OfiFNUkGQG7SXGwdbX5kJ9lI0IpA4W6qwNF0T\nsdnvYOGMrFgXXmCDPTFK\n=fHwk\n-----END PGP SIGNATURE-----", "payload": "tree b437c90dab8e2a6f0a3944fe03d63c9e3213ac28\nparent 90c390ec2ab6e5c0df991afa2a7dd452d32f81be\nauthor mcarton <cartonmartin+git@gmail.com> 1474033544 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1474033835 +0200\n\nFix FP with `WHILE_LET_ON_ITERATOR` and refutable pats\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8986b46765cedc1bb67bed2c8d4f66f8c6bebe9", "html_url": "https://github.com/rust-lang/rust/commit/c8986b46765cedc1bb67bed2c8d4f66f8c6bebe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8986b46765cedc1bb67bed2c8d4f66f8c6bebe9/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90c390ec2ab6e5c0df991afa2a7dd452d32f81be", "url": "https://api.github.com/repos/rust-lang/rust/commits/90c390ec2ab6e5c0df991afa2a7dd452d32f81be", "html_url": "https://github.com/rust-lang/rust/commit/90c390ec2ab6e5c0df991afa2a7dd452d32f81be"}], "stats": {"total": 71, "additions": 68, "deletions": 3}, "files": [{"sha": "66ae404221b55788f1ced9298adff58be507f1ea", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c8986b46765cedc1bb67bed2c8d4f66f8c6bebe9/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8986b46765cedc1bb67bed2c8d4f66f8c6bebe9/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=c8986b46765cedc1bb67bed2c8d4f66f8c6bebe9", "patch": "@@ -14,9 +14,9 @@ use std::collections::HashMap;\n use syntax::ast;\n use utils::sugg;\n \n-use utils::{snippet, span_lint, get_parent_expr, match_trait_method, match_type, multispan_sugg, in_external_macro,\n-            span_help_and_lint, is_integer_literal, get_enclosing_block, span_lint_and_then, higher,\n-            walk_ptrs_ty};\n+use utils::{snippet, span_lint, get_parent_expr, match_trait_method, match_type, multispan_sugg,\n+            in_external_macro, is_refutable, span_help_and_lint, is_integer_literal,\n+            get_enclosing_block, span_lint_and_then, higher, walk_ptrs_ty};\n use utils::paths;\n \n /// **What it does:** Checks for looping over the range of `0..len` of some\n@@ -354,6 +354,7 @@ impl LateLintPass for Pass {\n                     if method_name.node.as_str() == \"next\" &&\n                        match_trait_method(cx, match_expr, &paths::ITERATOR) &&\n                        lhs_constructor.name.as_str() == \"Some\" &&\n+                       !is_refutable(cx, &pat_args[0]) &&\n                        !is_iterator_used_after_while_let(cx, iter_expr) {\n                         let iterator = snippet(cx, method_args[0].span, \"_\");\n                         let loop_var = snippet(cx, pat_args[0].span, \"_\");"}, {"sha": "2a86d0af380883f6a60431b1c85a5c4f48fe6828", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c8986b46765cedc1bb67bed2c8d4f66f8c6bebe9/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8986b46765cedc1bb67bed2c8d4f66f8c6bebe9/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=c8986b46765cedc1bb67bed2c8d4f66f8c6bebe9", "patch": "@@ -725,3 +725,39 @@ pub fn is_copy<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: ty::Ty<'tcx>, env: Node\n     let env = ty::ParameterEnvironment::for_item(cx.tcx, env);\n     !ty.subst(cx.tcx, env.free_substs).moves_by_default(cx.tcx.global_tcx(), &env, DUMMY_SP)\n }\n+\n+/// Return whether a pattern is refutable.\n+pub fn is_refutable(cx: &LateContext, pat: &Pat) -> bool {\n+    fn is_enum_variant(cx: &LateContext, did: NodeId) -> bool {\n+        matches!(cx.tcx.def_map.borrow().get(&did).map(|d| d.full_def()), Some(def::Def::Variant(..)))\n+    }\n+\n+    fn are_refutable<'a, I: Iterator<Item=&'a Pat>>(cx: &LateContext, mut i: I) -> bool {\n+        i.any(|pat| is_refutable(cx, pat))\n+    }\n+\n+    match pat.node {\n+        PatKind::Binding(..) | PatKind::Wild => false,\n+        PatKind::Box(ref pat) | PatKind::Ref(ref pat, _) => is_refutable(cx, pat),\n+        PatKind::Lit(..) | PatKind::Range(..) => true,\n+        PatKind::Path(..) => is_enum_variant(cx, pat.id),\n+        PatKind::Tuple(ref pats, _) => are_refutable(cx, pats.iter().map(|pat| &**pat)),\n+        PatKind::Struct(_, ref fields, _) => {\n+            if is_enum_variant(cx, pat.id) {\n+                true\n+            } else {\n+                are_refutable(cx, fields.iter().map(|field| &*field.node.pat))\n+            }\n+        }\n+        PatKind::TupleStruct(_, ref pats, _) => {\n+            if is_enum_variant(cx, pat.id) {\n+                true\n+            } else {\n+                are_refutable(cx, pats.iter().map(|pat| &**pat))\n+            }\n+        }\n+        PatKind::Vec(ref head, ref middle, ref tail) => {\n+            are_refutable(cx, head.iter().chain(middle).chain(tail.iter()).map(|pat| &**pat))\n+        }\n+    }\n+}"}, {"sha": "7b0fb43575eeadd097dbfefe5ae3b8ad6908032c", "filename": "tests/compile-fail/while_loop.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c8986b46765cedc1bb67bed2c8d4f66f8c6bebe9/tests%2Fcompile-fail%2Fwhile_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8986b46765cedc1bb67bed2c8d4f66f8c6bebe9/tests%2Fcompile-fail%2Fwhile_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fwhile_loop.rs?ref=c8986b46765cedc1bb67bed2c8d4f66f8c6bebe9", "patch": "@@ -165,3 +165,31 @@ fn issue1017() {\n         }\n     }\n }\n+\n+// Issue #1188\n+fn refutable() {\n+    let a = [42, 1337];\n+    let mut b = a.iter();\n+\n+    // consume all the 42s\n+    while let Some(&42) = b.next() {\n+    }\n+\n+    let a = [(1, 2, 3)];\n+    let mut b = a.iter();\n+\n+    while let Some(&(1, 2, 3)) = b.next() {\n+    }\n+\n+    let a = [Some(42)];\n+    let mut b = a.iter();\n+\n+    while let Some(&None) = b.next() {\n+    }\n+\n+    /* This gives \u201crefutable pattern in `for` loop binding: `&_` not covered\u201d\n+    for &42 in b {}\n+    for &(1, 2, 3) in b {}\n+    for &Option::None in b.next() {}\n+    // */\n+}"}]}