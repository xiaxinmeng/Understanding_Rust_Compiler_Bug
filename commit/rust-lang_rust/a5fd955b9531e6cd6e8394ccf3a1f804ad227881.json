{"sha": "a5fd955b9531e6cd6e8394ccf3a1f804ad227881", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZmQ5NTViOTUzMWU2Y2Q2ZTgzOTRjY2YzYTFmODA0YWQyMjc4ODE=", "commit": {"author": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2021-09-01T16:33:34Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2021-09-01T16:35:21Z"}, "message": "add regression test for issue 83190", "tree": {"sha": "64fb130ca50a01f8c350e7c3e64393519e088080", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64fb130ca50a01f8c350e7c3e64393519e088080"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5fd955b9531e6cd6e8394ccf3a1f804ad227881", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5fd955b9531e6cd6e8394ccf3a1f804ad227881", "html_url": "https://github.com/rust-lang/rust/commit/a5fd955b9531e6cd6e8394ccf3a1f804ad227881", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5fd955b9531e6cd6e8394ccf3a1f804ad227881/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "608b5e1c209ffb4d6d0cf83817c823b12bbb7659", "url": "https://api.github.com/repos/rust-lang/rust/commits/608b5e1c209ffb4d6d0cf83817c823b12bbb7659", "html_url": "https://github.com/rust-lang/rust/commit/608b5e1c209ffb4d6d0cf83817c823b12bbb7659"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "da931c3edaf6f9de6805e771f2b3b28edd27001f", "filename": "src/test/ui/issues/issue-83190.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a5fd955b9531e6cd6e8394ccf3a1f804ad227881/src%2Ftest%2Fui%2Fissues%2Fissue-83190.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5fd955b9531e6cd6e8394ccf3a1f804ad227881/src%2Ftest%2Fui%2Fissues%2Fissue-83190.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-83190.rs?ref=a5fd955b9531e6cd6e8394ccf3a1f804ad227881", "patch": "@@ -0,0 +1,49 @@\n+// check-pass\n+\n+// Regression test for issue #83190, triggering an ICE in borrowck.\n+\n+pub trait Any {}\n+impl<T> Any for T {}\n+\n+pub trait StreamOnce {\n+    type Range;\n+}\n+\n+pub trait Parser<Input>: Sized {\n+    type Output;\n+    type PartialState;\n+    fn map(self) -> Map<Self> {\n+        todo!()\n+    }\n+}\n+\n+pub struct Map<P>(P);\n+impl<I, P: Parser<I, Output = ()>> Parser<I> for Map<P> {\n+    type Output = ();\n+    type PartialState = P::PartialState;\n+}\n+\n+struct TakeWhile1<Input>(Input);\n+impl<I: StreamOnce> Parser<I> for TakeWhile1<I> {\n+    type Output = I::Range;\n+    type PartialState = ();\n+}\n+impl<I> TakeWhile1<I> {\n+    fn new() -> Self {\n+        todo!()\n+    }\n+}\n+\n+impl<I, A: Parser<I>> Parser<I> for (A,) {\n+    type Output = ();\n+    type PartialState = Map<A::Output>;\n+}\n+\n+pub fn metric_stream_parser<'a, I>() -> impl Parser<I, Output = (), PartialState = impl Any + 'a>\n+where\n+    I: StreamOnce<Range = &'a [()]>,\n+{\n+    (TakeWhile1::new(),).map()\n+}\n+\n+fn main() {}"}]}