{"sha": "eff195852d30b9865310cfedd7e2e8727ccb1a68", "node_id": "C_kwDOAAsO6NoAKGVmZjE5NTg1MmQzMGI5ODY1MzEwY2ZlZGQ3ZTJlODcyN2NjYjFhNjg", "commit": {"author": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-10-03T12:45:08Z"}, "committer": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-10-03T12:53:30Z"}, "message": "Fix miscellaneous Clippy lints", "tree": {"sha": "6d02ef43bc051da33489c6db0ff9991576de1983", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d02ef43bc051da33489c6db0ff9991576de1983"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eff195852d30b9865310cfedd7e2e8727ccb1a68", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqQsXYYwP2wJc1ykb94j36ZATYAMFAmFZp9YACgkQ94j36ZAT\nYANnKA//RUO0nJgNQfdDF7WrqEJ7RQRwxYgz2OBJXJ5du5AjI+C4aS/6sC9wqR/x\nHGy9akGTy0qsGpbuu68TrXE6tiHE2tXTU49FjaPKTNgwpyc8yaAMQHzSrJAI/qFy\nhFMmm4O1P3QnLEuG0Kwqzo2X36ctqch1BMEvHkjN/kKRV91NBxQuRHUfewIfdBzU\n36t2jaXSun5MnHw3V59QVL9tP744ux173pwMXuxfokdutgEG3bXFJG5aasxr6wzl\nqmXGP2lEkyw9jg7ss01xF1+W4yRT+LQCzegsSs4ke3U++JPskHM3zBfFN+pp+gRr\nyee6OslE2Bn7/iTBbhhUG4d8EZuTVB2vlySNb2YObE6ikxbDbH/RaGuCzsXPJmm8\noILQs3HEfRC2RpkkTySQ86KiVZrzEHbm4V7WjCUaBPkiVHobforFefgEaJtazL6h\nhiH4Rxr2lI0ZdOh58JUL3HLw+hMLW7Pm4pE7xITUQKY/M6zxqqGdmikc0Y2j+xuh\nwEWSN53F25Yihr8n//Riown8S0rXL6usntzx2JH7DJMeSygVNGlGMT+oV1NespKX\n7pOGqih8NG6u5G+nmyh75o6pxA/oE2DDg1zeMPn4dALsm1GAM4bmWqS68HtrxBuS\npNP91XHJapBWclqYonL77evQFePpRyo45C++UIvwHpnWC0XW59s=\n=K5qm\n-----END PGP SIGNATURE-----", "payload": "tree 6d02ef43bc051da33489c6db0ff9991576de1983\nparent 55c0b86cdec534aa0397e3d69335265cbfd0f5c3\nauthor Aramis Razzaghipour <aramisnoah@gmail.com> 1633265108 +1100\ncommitter Aramis Razzaghipour <aramisnoah@gmail.com> 1633265610 +1100\n\nFix miscellaneous Clippy lints\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eff195852d30b9865310cfedd7e2e8727ccb1a68", "html_url": "https://github.com/rust-lang/rust/commit/eff195852d30b9865310cfedd7e2e8727ccb1a68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eff195852d30b9865310cfedd7e2e8727ccb1a68/comments", "author": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/55c0b86cdec534aa0397e3d69335265cbfd0f5c3", "html_url": "https://github.com/rust-lang/rust/commit/55c0b86cdec534aa0397e3d69335265cbfd0f5c3"}], "stats": {"total": 91, "additions": 40, "deletions": 51}, "files": [{"sha": "0661d776f1720a91ba420e388369966e8a40c8ff", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=eff195852d30b9865310cfedd7e2e8727ccb1a68", "patch": "@@ -260,7 +260,7 @@ impl FlycheckActor {\n struct CargoHandle {\n     child: JodChild,\n     #[allow(unused)]\n-    thread: jod_thread::JoinHandle<io::Result<bool>>,\n+    thread: jod_thread::JoinHandle<bool>,\n     receiver: Receiver<CargoMessage>,\n }\n \n@@ -279,7 +279,7 @@ impl CargoHandle {\n         // It is okay to ignore the result, as it only errors if the process is already dead\n         let _ = self.child.kill();\n         let exit_status = self.child.wait()?;\n-        let read_at_least_one_message = self.thread.join()?;\n+        let read_at_least_one_message = self.thread.join();\n         if !exit_status.success() && !read_at_least_one_message {\n             // FIXME: Read the stderr to display the reason, see `read2()` reference in PR comment:\n             // https://github.com/rust-analyzer/rust-analyzer/pull/3632#discussion_r395605298\n@@ -304,7 +304,7 @@ impl CargoActor {\n     fn new(child_stdout: process::ChildStdout, sender: Sender<CargoMessage>) -> CargoActor {\n         CargoActor { child_stdout, sender }\n     }\n-    fn run(self) -> io::Result<bool> {\n+    fn run(self) -> bool {\n         // We manually read a line at a time, instead of using serde's\n         // stream deserializers, because the deserializer cannot recover\n         // from an error, resulting in it getting stuck, because we try to\n@@ -347,7 +347,7 @@ impl CargoActor {\n                 }\n             }\n         }\n-        Ok(read_at_least_one_message)\n+        read_at_least_one_message\n     }\n }\n "}, {"sha": "5e57cb76ebc2a8496741875bc0a9db14a288a2af", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=eff195852d30b9865310cfedd7e2e8727ccb1a68", "patch": "@@ -542,11 +542,7 @@ fn fn_arg_type(\n         return None;\n     }\n \n-    if let Ok(rendered) = ty.display_source_code(ctx.db(), target_module.into()) {\n-        Some(rendered)\n-    } else {\n-        None\n-    }\n+    ty.display_source_code(ctx.db(), target_module.into()).ok()\n }\n \n /// Returns the position inside the current mod or file"}, {"sha": "991955fca6d79606d0eda2e88c94c01e48688735", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=eff195852d30b9865310cfedd7e2e8727ccb1a68", "patch": "@@ -128,8 +128,7 @@ pub(crate) fn reparser(\n         EXTERN_ITEM_LIST => items::extern_item_list,\n         TOKEN_TREE if first_child? == T!['{'] => items::token_tree,\n         ASSOC_ITEM_LIST => match parent? {\n-            IMPL => items::assoc_item_list,\n-            TRAIT => items::assoc_item_list,\n+            IMPL | TRAIT => items::assoc_item_list,\n             _ => return None,\n         },\n         ITEM_LIST => items::item_list,"}, {"sha": "aa171674ed9f0d095cfe379f28ebda2bf1f73827", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=eff195852d30b9865310cfedd7e2e8727ccb1a68", "patch": "@@ -311,7 +311,7 @@ fn lhs(p: &mut Parser, r: Restrictions) -> Option<(CompletedMarker, BlockLike)>\n         _ => {\n             // test full_range_expr\n             // fn foo() { xs[..]; }\n-            for &op in [T![..=], T![..]].iter() {\n+            for op in [T![..=], T![..]] {\n                 if p.at(op) {\n                     m = p.start();\n                     p.bump(op);"}, {"sha": "7e96823b1da93e0618ec8e197d709417172dc864", "filename": "crates/parser/src/grammar/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=eff195852d30b9865310cfedd7e2e8727ccb1a68", "patch": "@@ -73,7 +73,7 @@ fn pattern_single_r(p: &mut Parser, recovery_set: TokenSet) {\n \n         // FIXME: support half_open_range_patterns (`..=2`),\n         // exclusive_range_pattern (`..5`) with missing lhs\n-        for &range_op in [T![...], T![..=], T![..]].iter() {\n+        for range_op in [T![...], T![..=], T![..]] {\n             if p.at(range_op) {\n                 let m = lhs.precede(p);\n                 p.bump(range_op);"}, {"sha": "41731c8d27b030612aaaa63b913e2c82acfec8d5", "filename": "crates/paths/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fpaths%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fpaths%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fpaths%2Fsrc%2Flib.rs?ref=eff195852d30b9865310cfedd7e2e8727ccb1a68", "patch": "@@ -271,7 +271,7 @@ impl RelPath {\n /// Taken from <https://github.com/rust-lang/cargo/blob/79c769c3d7b4c2cf6a93781575b7f592ef974255/src/cargo/util/paths.rs#L60-L85>\n fn normalize_path(path: &Path) -> PathBuf {\n     let mut components = path.components().peekable();\n-    let mut ret = if let Some(c @ Component::Prefix(..)) = components.peek().cloned() {\n+    let mut ret = if let Some(c @ Component::Prefix(..)) = components.peek().copied() {\n         components.next();\n         PathBuf::from(c.as_os_str())\n     } else {"}, {"sha": "8437444e183a0ec5c971217a8346476c3d9e5bce", "filename": "crates/proc_macro_api/src/msg/flat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fproc_macro_api%2Fsrc%2Fmsg%2Fflat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fproc_macro_api%2Fsrc%2Fmsg%2Fflat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fmsg%2Fflat.rs?ref=eff195852d30b9865310cfedd7e2e8727ccb1a68", "patch": "@@ -246,7 +246,7 @@ impl<'a> Writer<'a> {\n \n     fn enqueue(&mut self, subtree: &'a tt::Subtree) -> u32 {\n         let idx = self.subtree.len();\n-        let delimiter_id = subtree.delimiter.map(|it| it.id).unwrap_or_else(TokenId::unspecified);\n+        let delimiter_id = subtree.delimiter.map_or(TokenId::unspecified(), |it| it.id);\n         let delimiter_kind = subtree.delimiter.map(|it| it.kind);\n         self.subtree.push(SubtreeRepr { id: delimiter_id, kind: delimiter_kind, tt: [!0, !0] });\n         self.work.push_back((idx, subtree));"}, {"sha": "b562c193e7137b9c420b5377f5a3fe42740479e4", "filename": "crates/profile/src/hprof.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fprofile%2Fsrc%2Fhprof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fprofile%2Fsrc%2Fhprof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fhprof.rs?ref=eff195852d30b9865310cfedd7e2e8727ccb1a68", "patch": "@@ -301,7 +301,7 @@ fn print(\n         }\n     }\n \n-    for (child_msg, (duration, count)) in short_children.iter() {\n+    for (child_msg, (duration, count)) in &short_children {\n         writeln!(out, \"    {}{} - {} ({} calls)\", current_indent, ms(*duration), child_msg, count)\n             .expect(\"printing profiling info\");\n     }"}, {"sha": "bce02971c610ee93cc8e1f44c5c70c541e5896ff", "filename": "crates/syntax/src/algo.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fsyntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fsyntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Falgo.rs?ref=eff195852d30b9865310cfedd7e2e8727ccb1a68", "patch": "@@ -112,14 +112,14 @@ impl TreeDiff {\n     pub fn into_text_edit(&self, builder: &mut TextEditBuilder) {\n         let _p = profile::span(\"into_text_edit\");\n \n-        for (anchor, to) in self.insertions.iter() {\n+        for (anchor, to) in &self.insertions {\n             let offset = match anchor {\n                 TreeDiffInsertPos::After(it) => it.text_range().end(),\n                 TreeDiffInsertPos::AsFirstChild(it) => it.text_range().start(),\n             };\n             to.iter().for_each(|to| builder.insert(offset, to.to_string()));\n         }\n-        for (from, to) in self.replacements.iter() {\n+        for (from, to) in &self.replacements {\n             builder.replace(from.text_range(), to.to_string());\n         }\n         for text_range in self.deletions.iter().map(SyntaxElement::text_range) {\n@@ -217,9 +217,8 @@ pub fn diff(from: &SyntaxNode, to: &SyntaxNode) -> TreeDiff {\n                             cov_mark::hit!(diff_insertions);\n                             insert = true;\n                             break;\n-                        } else {\n-                            look_ahead_scratch.push(rhs_child);\n                         }\n+                        look_ahead_scratch.push(rhs_child);\n                     }\n                     let drain = look_ahead_scratch.drain(..);\n                     if insert {"}, {"sha": "c20b81d7e95ea9013e36eab6277d7df517578b92", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=eff195852d30b9865310cfedd7e2e8727ccb1a68", "patch": "@@ -275,7 +275,7 @@ impl ast::PathSegment {\n \n impl ast::UseTree {\n     pub fn remove(&self) {\n-        for &dir in [Direction::Next, Direction::Prev].iter() {\n+        for dir in [Direction::Next, Direction::Prev] {\n             if let Some(next_use_tree) = neighbor(self, dir) {\n                 let separators = self\n                     .syntax()"}, {"sha": "00babfd394f798e2d3e9b6ce1735cccae6f91567", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=eff195852d30b9865310cfedd7e2e8727ccb1a68", "patch": "@@ -276,9 +276,9 @@ impl ast::Path {\n \n impl ast::Use {\n     pub fn is_simple_glob(&self) -> bool {\n-        self.use_tree()\n-            .map(|use_tree| use_tree.use_tree_list().is_none() && use_tree.star_token().is_some())\n-            .unwrap_or(false)\n+        self.use_tree().map_or(false, |use_tree| {\n+            use_tree.use_tree_list().is_none() && use_tree.star_token().is_some()\n+        })\n     }\n }\n "}, {"sha": "6946f35ea5d81629bfcd63d66243883adb0a8302", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=eff195852d30b9865310cfedd7e2e8727ccb1a68", "patch": "@@ -688,7 +688,7 @@ impl Radix {\n     pub const ALL: &'static [Radix] =\n         &[Radix::Binary, Radix::Octal, Radix::Decimal, Radix::Hexadecimal];\n \n-    const fn prefix_len(&self) -> usize {\n+    const fn prefix_len(self) -> usize {\n         match self {\n             Self::Decimal => 0,\n             _ => 2,"}, {"sha": "11dfc63a65bb16f89e5d5e7d66ac38940dfd60d9", "filename": "crates/syntax/src/parsing/text_token_source.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_token_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_token_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_token_source.rs?ref=eff195852d30b9865310cfedd7e2e8727ccb1a68", "patch": "@@ -44,8 +44,7 @@ impl<'t> TokenSource for TextTokenSource<'t> {\n     fn is_keyword(&self, kw: &str) -> bool {\n         self.token_offset_pairs\n             .get(self.curr.1)\n-            .map(|(token, offset)| &self.text[TextRange::at(*offset, token.len)] == kw)\n-            .unwrap_or(false)\n+            .map_or(false, |(token, offset)| &self.text[TextRange::at(*offset, token.len)] == kw)\n     }\n }\n \n@@ -55,8 +54,7 @@ fn mk_token(pos: usize, token_offset_pairs: &[(Token, TextSize)]) -> parser::Tok\n             token.kind,\n             token_offset_pairs\n                 .get(pos + 1)\n-                .map(|(_, next_offset)| offset + token.len == *next_offset)\n-                .unwrap_or(false),\n+                .map_or(false, |(_, next_offset)| offset + token.len == *next_offset),\n         ),\n         None => (EOF, false),\n     };"}, {"sha": "d2b58774903e6cec347678bce39cf0ba09642366", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=eff195852d30b9865310cfedd7e2e8727ccb1a68", "patch": "@@ -215,7 +215,7 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> String {\n         .flat_map(|node| node.traits.iter().map(move |t| (t, node)))\n         .into_group_map()\n         .into_iter()\n-        .sorted_by_key(|(k, _)| k.clone())\n+        .sorted_by_key(|(k, _)| *k)\n         .map(|(trait_name, nodes)| {\n             let name = format_ident!(\"Any{}\", trait_name);\n             let trait_name = format_ident!(\"{}\", trait_name);\n@@ -558,12 +558,13 @@ impl Field {\n }\n \n fn lower(grammar: &Grammar) -> AstSrc {\n-    let mut res = AstSrc::default();\n-\n-    res.tokens = \"Whitespace Comment String ByteString IntNumber FloatNumber\"\n-        .split_ascii_whitespace()\n-        .map(|it| it.to_string())\n-        .collect::<Vec<_>>();\n+    let mut res = AstSrc {\n+        tokens: \"Whitespace Comment String ByteString IntNumber FloatNumber\"\n+            .split_ascii_whitespace()\n+            .map(|it| it.to_string())\n+            .collect::<Vec<_>>(),\n+        ..Default::default()\n+    };\n \n     let nodes = grammar.iter().collect::<Vec<_>>();\n "}, {"sha": "5ea7a994b4fc76abd5653b8977ee08019d92452e", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=eff195852d30b9865310cfedd7e2e8727ccb1a68", "patch": "@@ -310,7 +310,7 @@ impl MiniCore {\n         // Fixed point loop to compute transitive closure of flags.\n         loop {\n             let mut changed = false;\n-            for &(u, v) in implications.iter() {\n+            for &(u, v) in &implications {\n                 if self.has_flag(u) && !self.has_flag(v) {\n                     self.activated_flags.push(v.to_string());\n                     changed = true;"}, {"sha": "e9700c560ad3b64771d44833b02cdb954bf747df", "filename": "crates/text_edit/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Ftext_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Ftext_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftext_edit%2Fsrc%2Flib.rs?ref=eff195852d30b9865310cfedd7e2e8727ccb1a68", "patch": "@@ -90,13 +90,13 @@ impl TextEdit {\n         }\n \n         let mut total_len = TextSize::of(&*text);\n-        for indel in self.indels.iter() {\n+        for indel in &self.indels {\n             total_len += TextSize::of(&indel.insert);\n             total_len -= indel.delete.end() - indel.delete.start();\n         }\n         let mut buf = String::with_capacity(total_len.into());\n         let mut prev = 0;\n-        for indel in self.indels.iter() {\n+        for indel in &self.indels {\n             let start: usize = indel.delete.start().into();\n             let end: usize = indel.delete.end().into();\n             if start > prev {\n@@ -126,7 +126,7 @@ impl TextEdit {\n \n     pub fn apply_to_offset(&self, offset: TextSize) -> Option<TextSize> {\n         let mut res = offset;\n-        for indel in self.indels.iter() {\n+        for indel in &self.indels {\n             if indel.delete.start() >= offset {\n                 break;\n             }"}, {"sha": "3ce72fea854cee30b7275e7adbca6d744384575f", "filename": "crates/tt/src/buffer.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Ftt%2Fsrc%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Ftt%2Fsrc%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftt%2Fsrc%2Fbuffer.rs?ref=eff195852d30b9865310cfedd7e2e8727ccb1a68", "patch": "@@ -194,8 +194,7 @@ impl<'a> Cursor<'a> {\n                 TokenTree::Subtree(subtree) => Some(TokenTreeRef::Subtree(subtree, Some(tt))),\n             },\n             Some(Entry::Subtree(tt, subtree, _)) => Some(TokenTreeRef::Subtree(subtree, *tt)),\n-            Some(Entry::End(_)) => None,\n-            None => None,\n+            Some(Entry::End(_)) | None => None,\n         }\n     }\n "}, {"sha": "9eca970ee218fa8b40b44660b9dfdeb1f08ad8d9", "filename": "crates/tt/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Ftt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Ftt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftt%2Fsrc%2Flib.rs?ref=eff195852d30b9865310cfedd7e2e8727ccb1a68", "patch": "@@ -161,7 +161,7 @@ impl fmt::Display for Subtree {\n         };\n         f.write_str(l)?;\n         let mut needs_space = false;\n-        for tt in self.token_trees.iter() {\n+        for tt in &self.token_trees {\n             if needs_space {\n                 f.write_str(\" \")?;\n             }\n@@ -215,7 +215,7 @@ impl Subtree {\n             .iter()\n             .map(|c| match c {\n                 TokenTree::Subtree(c) => c.count(),\n-                _ => 0,\n+                TokenTree::Leaf(_) => 0,\n             })\n             .sum::<usize>();\n "}, {"sha": "a2a53cdc9eb0e4f23269c478c7d932dd2e09b4cb", "filename": "crates/vfs-notify/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs-notify%2Fsrc%2Flib.rs?ref=eff195852d30b9865310cfedd7e2e8727ccb1a68", "patch": "@@ -174,7 +174,7 @@ impl NotifyActor {\n             loader::Entry::Directories(dirs) => {\n                 let mut res = Vec::new();\n \n-                for root in dirs.include.iter() {\n+                for root in &dirs.include {\n                     let walkdir =\n                         WalkDir::new(root).follow_links(true).into_iter().filter_entry(|entry| {\n                             if !entry.file_type().is_dir() {"}, {"sha": "39a16664211a98991c23362c51e6ef3e67828550", "filename": "crates/vfs/src/vfs_path.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff195852d30b9865310cfedd7e2e8727ccb1a68/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Fvfs_path.rs?ref=eff195852d30b9865310cfedd7e2e8727ccb1a68", "patch": "@@ -73,9 +73,8 @@ impl VfsPath {\n     pub fn starts_with(&self, other: &VfsPath) -> bool {\n         match (&self.0, &other.0) {\n             (VfsPathRepr::PathBuf(lhs), VfsPathRepr::PathBuf(rhs)) => lhs.starts_with(rhs),\n-            (VfsPathRepr::PathBuf(_), _) => false,\n             (VfsPathRepr::VirtualPath(lhs), VfsPathRepr::VirtualPath(rhs)) => lhs.starts_with(rhs),\n-            (VfsPathRepr::VirtualPath(_), _) => false,\n+            (VfsPathRepr::PathBuf(_) | VfsPathRepr::VirtualPath(_), _) => false,\n         }\n     }\n "}, {"sha": "d0ddf27b4df2316b18d4d7b67d3f863c4e0ef818", "filename": "xtask/src/release.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eff195852d30b9865310cfedd7e2e8727ccb1a68/xtask%2Fsrc%2Frelease.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff195852d30b9865310cfedd7e2e8727ccb1a68/xtask%2Fsrc%2Frelease.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Frelease.rs?ref=eff195852d30b9865310cfedd7e2e8727ccb1a68", "patch": "@@ -33,15 +33,13 @@ impl flags::Release {\n         let commit = cmd!(\"git rev-parse HEAD\").read()?;\n         let changelog_n = read_dir(changelog_dir.as_path())?.len();\n \n-        for &adoc in [\n+        for adoc in [\n             \"manual.adoc\",\n             \"generated_assists.adoc\",\n             \"generated_config.adoc\",\n             \"generated_diagnostic.adoc\",\n             \"generated_features.adoc\",\n-        ]\n-        .iter()\n-        {\n+        ] {\n             let src = project_root().join(\"./docs/user/\").join(adoc);\n             let dst = website_root.join(adoc);\n "}]}