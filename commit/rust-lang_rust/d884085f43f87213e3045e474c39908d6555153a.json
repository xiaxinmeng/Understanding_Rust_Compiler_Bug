{"sha": "d884085f43f87213e3045e474c39908d6555153a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ODQwODVmNDNmODcyMTNlMzA0NWU0NzRjMzk5MDhkNjU1NTE1M2E=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-07-14T19:19:36Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-07-14T19:19:36Z"}, "message": "Tear out ty_str and ty_vec.", "tree": {"sha": "5f8598f8873e024816fcd7fb5621de288d9de95b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f8598f8873e024816fcd7fb5621de288d9de95b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d884085f43f87213e3045e474c39908d6555153a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d884085f43f87213e3045e474c39908d6555153a", "html_url": "https://github.com/rust-lang/rust/commit/d884085f43f87213e3045e474c39908d6555153a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d884085f43f87213e3045e474c39908d6555153a/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0442fd32eec275eb3dfabfb210c80b7911a7dc7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0442fd32eec275eb3dfabfb210c80b7911a7dc7a", "html_url": "https://github.com/rust-lang/rust/commit/0442fd32eec275eb3dfabfb210c80b7911a7dc7a"}], "stats": {"total": 279, "additions": 77, "deletions": 202}, "files": [{"sha": "e9568a13df03e2d47308d70e6c1579f3a5125ee7", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -1242,7 +1242,7 @@ mod tests {\n           node::empty { ret ~\"\" }\n           node::content(x) {\n             let str = @mut ~\"\";\n-            fn aux(str: @mut str, node: @node::node) unsafe {\n+            fn aux(str: @mut ~str, node: @node::node) unsafe {\n                 alt(*node) {\n                   node::leaf(x) {\n                     *str += str::slice("}, {"sha": "be0d66519dc78061a3a1ca41b83a4d89bd7f38d7", "filename": "src/rustc/front/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Ftest.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -272,7 +272,7 @@ fn mk_test_desc_vec_ty(cx: test_ctxt) -> @ast::ty {\n                      node: ast::ty_vec(vec_mt),\n                      span: dummy_sp()};\n     ret @{id: cx.sess.next_node_id(),\n-          node: ast::ty_vstore(inner_ty, ast::vstore_uniq),\n+          node: ast::ty_uniq({ty: inner_ty, mutbl: ast::m_imm}),\n           span: dummy_sp()};\n }\n \n@@ -411,14 +411,14 @@ fn mk_main(cx: test_ctxt) -> @ast::item {\n                          node: ast::ty_path(str_pt, cx.sess.next_node_id()),\n                          span: dummy_sp()};\n     let str_ty = @{id: cx.sess.next_node_id(),\n-                   node: ast::ty_vstore(str_ty_inner, ast::vstore_uniq),\n+                   node: ast::ty_uniq({ty: str_ty_inner, mutbl: ast::m_imm}),\n                    span: dummy_sp()};\n     let args_mt = {ty: str_ty, mutbl: ast::m_imm};\n     let args_ty_inner = @{id: cx.sess.next_node_id(),\n                           node: ast::ty_vec(args_mt),\n                           span: dummy_sp()};\n     let args_ty = {id: cx.sess.next_node_id(),\n-                   node: ast::ty_vstore(args_ty_inner, ast::vstore_uniq),\n+                   node: ast::ty_uniq({ty: args_ty_inner, mutbl: ast::m_imm}),\n                    span: dummy_sp()};\n \n "}, {"sha": "122a29eb34f247a703312c91fad3523c50ed8aa5", "filename": "src/rustc/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftydecode.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -277,7 +277,6 @@ fn parse_ty(st: @pstate, conv: conv_did) -> ty::t {\n         }\n       }\n       'c' { ret ty::mk_char(st.tcx); }\n-      'S' { ret ty::mk_str(st.tcx); }\n       't' {\n         assert (next(st) == '[');\n         let def = parse_def(st, conv);\n@@ -307,7 +306,6 @@ fn parse_ty(st: @pstate, conv: conv_did) -> ty::t {\n         let mt = parse_mt(st, conv);\n         ret ty::mk_rptr(st.tcx, r, mt);\n       }\n-      'I' { ret ty::mk_vec(st.tcx, parse_mt(st, conv)); }\n       'U' { ret ty::mk_unboxed_vec(st.tcx, parse_mt(st, conv)); }\n       'V' {\n         let mt = parse_mt(st, conv);"}, {"sha": "cb8881fdf2af3c8d3d77a2da80dc7f536dcbab4b", "filename": "src/rustc/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftyencode.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -214,7 +214,6 @@ fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {\n           ty_f64 { w.write_str(&\"MF\"); }\n         }\n       }\n-      ty::ty_str { w.write_char('S'); }\n       ty::ty_enum(def, substs) {\n         w.write_str(&\"t[\");\n         w.write_str(cx.ds(def));\n@@ -251,7 +250,6 @@ fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {\n         w.write_char('v');\n         enc_vstore(w, cx, v);\n       }\n-      ty::ty_vec(mt) { w.write_char('I'); enc_mt(w, cx, mt); }\n       ty::ty_unboxed_vec(mt) { w.write_char('U'); enc_mt(w, cx, mt); }\n       ty::ty_rec(fields) {\n         w.write_str(&\"R[\");"}, {"sha": "4d5fb239d9ec0620e6e1dbd8be09c6b19957bead", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -516,11 +516,11 @@ impl to_str_methods for borrowck_ctxt {\n           cat_comp(_, comp_variant(_)) { ~\"enum content\" }\n           cat_comp(_, comp_index(t, _)) {\n             alt ty::get(t).struct {\n-              ty::ty_vec(*) | ty::ty_evec(*) {\n+              ty::ty_evec(*) {\n                 mut_str + ~\" vec content\"\n               }\n \n-              ty::ty_str | ty::ty_estr(*) {\n+              ty::ty_estr(*) {\n                 mut_str + ~\" str content\"\n               }\n "}, {"sha": "e0b6d10ca3692afccd16de05a55e0d894d00a71a", "filename": "src/rustc/middle/borrowck/categorization.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -44,7 +44,7 @@ export opt_deref_kind;\n // pointer adjustment).\n fn opt_deref_kind(t: ty::t) -> option<deref_kind> {\n     alt ty::get(t).struct {\n-      ty::ty_uniq(*) | ty::ty_vec(*) | ty::ty_str |\n+      ty::ty_uniq(*) |\n       ty::ty_evec(_, ty::vstore_uniq) |\n       ty::ty_estr(ty::vstore_uniq) {\n         some(deref_ptr(uniq_ptr))\n@@ -100,8 +100,7 @@ impl public_methods for borrowck_ctxt {\n         // a borrowed expression must be either an @, ~, or a vec/@, vec/~\n         let expr_ty = ty::expr_ty(self.tcx, expr);\n         alt ty::get(expr_ty).struct {\n-          ty::ty_vec(*) | ty::ty_evec(*) |\n-          ty::ty_str | ty::ty_estr(*) {\n+          ty::ty_evec(*) | ty::ty_estr(*) {\n             self.cat_index(expr, expr)\n           }\n "}, {"sha": "4e71231da26c3a6645452c4fde37780ade64f0f0", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -51,7 +51,7 @@ fn trans_opt(bcx: block, o: opt) -> opt_result {\n           ast::expr_vstore(@{node: ast::expr_lit(\n               @{node: ast::lit_str(s), _}), _},\n                            ast::vstore_uniq) {\n-            let strty = ty::mk_str(bcx.tcx());\n+            let strty = ty::mk_estr(bcx.tcx(), ty::vstore_uniq);\n             let cell = empty_dest_cell();\n             bcx = tvec::trans_estr(bcx, s, ast::vstore_uniq, by_val(cell));\n             add_clean_temp(bcx, *cell, strty);"}, {"sha": "e82e20b9b9c9df1b96232ae3117b6914d8fe5b61", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -626,7 +626,6 @@ fn make_take_glue(bcx: block, v: ValueRef, t: ty::t) {\n         Store(bcx, val, v);\n         bcx\n       }\n-      ty::ty_vec(_) | ty::ty_str |\n       ty::ty_evec(_, ty::vstore_uniq) | ty::ty_estr(ty::vstore_uniq) {\n         let {bcx, val} = tvec::duplicate_uniq(bcx, Load(bcx, v), t);\n         Store(bcx, val, v);\n@@ -704,8 +703,7 @@ fn make_free_glue(bcx: block, v: ValueRef, t: ty::t) {\n         uniq::make_free_glue(bcx, v, t)\n       }\n       ty::ty_evec(_, ty::vstore_uniq) | ty::ty_estr(ty::vstore_uniq) |\n-      ty::ty_evec(_, ty::vstore_box) | ty::ty_estr(ty::vstore_box) |\n-      ty::ty_vec(_) | ty::ty_str {\n+      ty::ty_evec(_, ty::vstore_box) | ty::ty_estr(ty::vstore_box) {\n         make_free_glue(bcx, v,\n                        tvec::expand_boxed_vec_ty(bcx.tcx(), t));\n         ret;\n@@ -769,7 +767,7 @@ fn make_drop_glue(bcx: block, v0: ValueRef, t: ty::t) {\n       ty::ty_estr(ty::vstore_box) | ty::ty_evec(_, ty::vstore_box) {\n         decr_refcnt_maybe_free(bcx, Load(bcx, v0), t)\n       }\n-      ty::ty_uniq(_) | ty::ty_vec(_) | ty::ty_str |\n+      ty::ty_uniq(_) |\n       ty::ty_evec(_, ty::vstore_uniq) | ty::ty_estr(ty::vstore_uniq) {\n         free_ty(bcx, Load(bcx, v0), t)\n       }\n@@ -1235,7 +1233,7 @@ fn drop_ty(cx: block, v: ValueRef, t: ty::t) -> block {\n fn drop_ty_immediate(bcx: block, v: ValueRef, t: ty::t) -> block {\n     let _icx = bcx.insn_ctxt(~\"drop_ty_immediate\");\n     alt ty::get(t).struct {\n-      ty::ty_uniq(_) | ty::ty_vec(_) | ty::ty_str |\n+      ty::ty_uniq(_) |\n       ty::ty_evec(_, ty::vstore_uniq) |\n       ty::ty_estr(ty::vstore_uniq) {\n         free_ty(bcx, v, t)\n@@ -1261,7 +1259,6 @@ fn take_ty_immediate(bcx: block, v: ValueRef, t: ty::t) -> result {\n       ty::ty_uniq(_) {\n         uniq::duplicate(bcx, v, t)\n       }\n-      ty::ty_str | ty::ty_vec(_) |\n       ty::ty_evec(_, ty::vstore_uniq) |\n       ty::ty_estr(ty::vstore_uniq) {\n         tvec::duplicate_uniq(bcx, v, t)\n@@ -2972,9 +2969,7 @@ fn adapt_borrowed_value(lv: lval_result,\n         ret {lv: lval_temp(bcx, body_ptr), ty: rptr_ty};\n       }\n \n-      ty::ty_str | ty::ty_vec(_) |\n-      ty::ty_estr(_) |\n-      ty::ty_evec(_, _) {\n+      ty::ty_estr(_) | ty::ty_evec(_, _) {\n         let ccx = bcx.ccx();\n         let val = alt lv.kind {\n           temporary { lv.val }\n@@ -4997,10 +4992,11 @@ fn create_main_wrapper(ccx: @crate_ctxt, sp: span, main_llfn: ValueRef,\n \n     fn create_main(ccx: @crate_ctxt, main_llfn: ValueRef,\n                    takes_argv: bool) -> ValueRef {\n-        let unit_ty = ty::mk_str(ccx.tcx);\n+        let unit_ty = ty::mk_estr(ccx.tcx, ty::vstore_uniq);\n         let vecarg_ty: ty::arg =\n             {mode: ast::expl(ast::by_val),\n-             ty: ty::mk_vec(ccx.tcx, {ty: unit_ty, mutbl: ast::m_imm})};\n+             ty: ty::mk_evec(ccx.tcx, {ty: unit_ty, mutbl: ast::m_imm},\n+                             ty::vstore_uniq)};\n         let nt = ty::mk_nil(ccx.tcx);\n         let llfty = type_of_fn(ccx, ~[vecarg_ty], nt);\n         let llfdecl = decl_fn(ccx.llmod, ~\"_rust_main\","}, {"sha": "d71151316a1a06620425143c782059869127fb46", "filename": "src/rustc/middle/trans/reflect.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -132,9 +132,7 @@ impl methods for reflector {\n           ty::ty_float(ast::ty_f) { self.leaf(~\"float\") }\n           ty::ty_float(ast::ty_f32) { self.leaf(~\"f32\") }\n           ty::ty_float(ast::ty_f64) { self.leaf(~\"f64\") }\n-          ty::ty_str { self.leaf(~\"str\") }\n \n-          ty::ty_vec(mt) { self.visit(~\"vec\", self.c_mt(mt)) }\n           ty::ty_unboxed_vec(mt) { self.visit(~\"vec\", self.c_mt(mt)) }\n           ty::ty_estr(vst) {\n             do self.vstore_name_and_extra(t, vst) |name, extra| {"}, {"sha": "801c642570c0d047639724d8750c9d22e7360d52", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -228,8 +228,7 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t) -> ~[u8] {\n       ty::ty_int(ast::ty_i64) { ~[shape_i64] }\n       ty::ty_float(ast::ty_f32) { ~[shape_f32] }\n       ty::ty_float(ast::ty_f64) { ~[shape_f64] }\n-      ty::ty_estr(ty::vstore_uniq) |\n-      ty::ty_str {\n+      ty::ty_estr(ty::vstore_uniq) {\n         shape_of(ccx, tvec::expand_boxed_vec_ty(ccx.tcx, t))\n       }\n       ty::ty_enum(did, substs) {\n@@ -268,8 +267,7 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t) -> ~[u8] {\n         add_substr(s, shape_of(ccx, mt.ty));\n         s\n       }\n-      ty::ty_evec(mt, ty::vstore_uniq) |\n-      ty::ty_vec(mt) {\n+      ty::ty_evec(mt, ty::vstore_uniq) {\n         shape_of(ccx, tvec::expand_boxed_vec_ty(ccx.tcx, t))\n       }\n \n@@ -716,7 +714,7 @@ fn simplify_type(tcx: ty::ctxt, typ: ty::t) -> ty::t {\n     }\n     fn simplifier(tcx: ty::ctxt, typ: ty::t) -> ty::t {\n         alt ty::get(typ).struct {\n-          ty::ty_box(_) | ty::ty_opaque_box | ty::ty_uniq(_) | ty::ty_vec(_) |\n+          ty::ty_box(_) | ty::ty_opaque_box | ty::ty_uniq(_) |\n           ty::ty_evec(_, ty::vstore_uniq) | ty::ty_evec(_, ty::vstore_box) |\n           ty::ty_estr(ty::vstore_uniq) | ty::ty_estr(ty::vstore_box) |\n           ty::ty_ptr(_) | ty::ty_rptr(_,_) { nilptr(tcx) }"}, {"sha": "0037db16b6fd867bd9af365a5447a0e40210d6f6", "filename": "src/rustc/middle/trans/tvec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -20,7 +20,6 @@ fn expand_boxed_vec_ty(tcx: ty::ctxt, t: ty::t) -> ty::t {\n     let unit_ty = ty::sequence_element_type(tcx, t);\n     let unboxed_vec_ty = ty::mk_mut_unboxed_vec(tcx, unit_ty);\n     alt ty::get(t).struct {\n-      ty::ty_vec(_) | ty::ty_str |\n       ty::ty_estr(ty::vstore_uniq) | ty::ty_evec(_, ty::vstore_uniq) {\n         ty::mk_imm_uniq(tcx, unboxed_vec_ty)\n       }"}, {"sha": "dc1220347091fdc97f8042bde347c2510a2db5e4", "filename": "src/rustc/middle/trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -89,8 +89,7 @@ fn type_of(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n           ty::ty_int(t) { T_int_ty(cx, t) }\n           ty::ty_uint(t) { T_uint_ty(cx, t) }\n           ty::ty_float(t) { T_float_ty(cx, t) }\n-          ty::ty_estr(ty::vstore_uniq) |\n-          ty::ty_str {\n+          ty::ty_estr(ty::vstore_uniq) {\n             T_unique_ptr(T_unique(cx, T_vec(cx, T_i8())))\n           }\n           ty::ty_enum(did, _) { type_of_enum(cx, did, t) }\n@@ -103,8 +102,7 @@ fn type_of(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n           ty::ty_box(mt) { T_box_ptr(T_box(cx, type_of(cx, mt.ty))) }\n           ty::ty_opaque_box { T_box_ptr(T_box(cx, T_i8())) }\n           ty::ty_uniq(mt) { T_unique_ptr(T_unique(cx, type_of(cx, mt.ty))) }\n-          ty::ty_evec(mt, ty::vstore_uniq) |\n-          ty::ty_vec(mt) {\n+          ty::ty_evec(mt, ty::vstore_uniq) {\n             T_unique_ptr(T_unique(cx, T_vec(cx, type_of(cx, mt.ty))))\n           }\n           ty::ty_unboxed_vec(mt) {"}, {"sha": "badfee1fd1c48a141d421a453177ee573e6eda81", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 26, "deletions": 73, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -85,10 +85,8 @@ export ty_fn, fn_ty, mk_fn;\n export ty_fn_proto, ty_fn_ret, ty_fn_ret_style, tys_in_fn_ty;\n export ty_int, mk_int, mk_mach_int, mk_char;\n export mk_i8, mk_u8, mk_i16, mk_u16, mk_i32, mk_u32, mk_i64, mk_u64;\n-export ty_str, mk_str, type_is_str;\n-export ty_vec, mk_vec, type_is_vec;\n-export ty_estr, mk_estr;\n-export ty_evec, mk_evec;\n+export ty_estr, mk_estr, type_is_str;\n+export ty_evec, mk_evec, type_is_vec;\n export ty_unboxed_vec, mk_unboxed_vec, mk_mut_unboxed_vec;\n export vstore, vstore_fixed, vstore_uniq, vstore_box, vstore_slice;\n export ty_nil, mk_nil, type_is_nil;\n@@ -124,7 +122,6 @@ export operators;\n export type_err, terr_vstore_kind;\n export type_err_to_str;\n export type_needs_drop;\n-export type_allows_implicit_copy;\n export type_is_integral;\n export type_is_numeric;\n export type_is_pod;\n@@ -364,12 +361,10 @@ enum sty {\n     ty_int(ast::int_ty),\n     ty_uint(ast::uint_ty),\n     ty_float(ast::float_ty),\n-    ty_str,\n     ty_estr(vstore),\n     ty_enum(def_id, substs),\n     ty_box(mt),\n     ty_uniq(mt),\n-    ty_vec(mt),\n     ty_evec(mt, vstore),\n     ty_ptr(mt),\n     ty_rptr(region, mt),\n@@ -586,15 +581,15 @@ fn mk_t_with_id(cx: ctxt, st: sty, o_def_id: option<ast::def_id>) -> t {\n         flags |= get(mt.ty).flags;\n       }\n       ty_nil | ty_bot | ty_bool | ty_int(_) | ty_float(_) | ty_uint(_) |\n-      ty_str | ty_estr(_) | ty_type | ty_opaque_closure_ptr(_) |\n+      ty_estr(_) | ty_type | ty_opaque_closure_ptr(_) |\n       ty_opaque_box {}\n       ty_param(_, _) { flags |= has_params as uint; }\n       ty_var(_) | ty_var_integral(_) { flags |= needs_infer as uint; }\n       ty_self { flags |= has_self as uint; }\n       ty_enum(_, substs) | ty_class(_, substs) | ty_trait(_, substs) {\n         flags |= sflags(substs);\n       }\n-      ty_box(m) | ty_uniq(m) | ty_vec(m) | ty_evec(m, _) |\n+      ty_box(m) | ty_uniq(m) | ty_evec(m, _) |\n       ty_ptr(m) | ty_unboxed_vec(m) {\n         flags |= get(m.ty).flags;\n       }\n@@ -658,8 +653,6 @@ fn mk_mach_float(cx: ctxt, tm: ast::float_ty) -> t { mk_t(cx, ty_float(tm)) }\n \n fn mk_char(cx: ctxt) -> t { mk_t(cx, ty_int(ast::ty_char)) }\n \n-fn mk_str(cx: ctxt) -> t { mk_estr(cx, vstore_uniq) }\n-\n fn mk_estr(cx: ctxt, t: vstore) -> t {\n     mk_t(cx, ty_estr(t))\n }\n@@ -693,8 +686,6 @@ fn mk_nil_ptr(cx: ctxt) -> t {\n     mk_ptr(cx, {ty: mk_nil(cx), mutbl: ast::m_imm})\n }\n \n-fn mk_vec(cx: ctxt, tm: mt) -> t { mk_evec(cx, tm, vstore_uniq) }\n-\n fn mk_evec(cx: ctxt, tm: mt, t: vstore) -> t {\n     mk_t(cx, ty_evec(tm, t))\n }\n@@ -779,11 +770,11 @@ fn maybe_walk_ty(ty: t, f: fn(t) -> bool) {\n     if !f(ty) { ret; }\n     alt get(ty).struct {\n       ty_nil | ty_bot | ty_bool | ty_int(_) | ty_uint(_) | ty_float(_) |\n-      ty_str | ty_estr(_) | ty_type | ty_opaque_box | ty_self |\n+      ty_estr(_) | ty_type | ty_opaque_box | ty_self |\n       ty_opaque_closure_ptr(_) | ty_var(_) | ty_var_integral(_) |\n       ty_param(_, _) {\n       }\n-      ty_box(tm) | ty_vec(tm) | ty_evec(tm, _) | ty_unboxed_vec(tm) |\n+      ty_box(tm) | ty_evec(tm, _) | ty_unboxed_vec(tm) |\n       ty_ptr(tm) | ty_rptr(_, tm) {\n         maybe_walk_ty(tm.ty, f);\n       }\n@@ -825,9 +816,6 @@ fn fold_sty(sty: sty, fldop: fn(t) -> t) -> sty {\n       ty_ptr(tm) {\n         ty_ptr({ty: fldop(tm.ty), mutbl: tm.mutbl})\n       }\n-      ty_vec(tm) {\n-        ty_vec({ty: fldop(tm.ty), mutbl: tm.mutbl})\n-      }\n       ty_unboxed_vec(tm) {\n         ty_unboxed_vec({ty: fldop(tm.ty), mutbl: tm.mutbl})\n       }\n@@ -870,7 +858,7 @@ fn fold_sty(sty: sty, fldop: fn(t) -> t) -> sty {\n         ty_class(did, fold_substs(substs, fldop))\n       }\n       ty_nil | ty_bot | ty_bool | ty_int(_) | ty_uint(_) | ty_float(_) |\n-      ty_str | ty_estr(_) | ty_type | ty_opaque_closure_ptr(_) |\n+      ty_estr(_) | ty_type | ty_opaque_closure_ptr(_) |\n       ty_opaque_box | ty_var(_) | ty_var_integral(_) | ty_param(*) | ty_self {\n         sty\n       }\n@@ -1101,22 +1089,22 @@ fn type_is_copyable(cx: ctxt, ty: t) -> bool {\n \n fn type_is_sequence(ty: t) -> bool {\n     alt get(ty).struct {\n-      ty_str | ty_estr(_) | ty_vec(_) | ty_evec(_, _) { true }\n+      ty_estr(_) | ty_evec(_, _) { true }\n       _ { false }\n     }\n }\n \n fn type_is_str(ty: t) -> bool {\n     alt get(ty).struct {\n-      ty_str | ty_estr(_) { true }\n+      ty_estr(_) { true }\n       _ { false }\n     }\n }\n \n fn sequence_element_type(cx: ctxt, ty: t) -> t {\n     alt get(ty).struct {\n-      ty_str | ty_estr(_) { ret mk_mach_uint(cx, ast::ty_u8); }\n-      ty_vec(mt) | ty_evec(mt, _) | ty_unboxed_vec(mt) { ret mt.ty; }\n+      ty_estr(_) { ret mk_mach_uint(cx, ast::ty_u8); }\n+      ty_evec(mt, _) | ty_unboxed_vec(mt) { ret mt.ty; }\n       _ { cx.sess.bug(\n           ~\"sequence_element_type called on non-sequence value\");\n         }\n@@ -1176,17 +1164,17 @@ pure fn type_is_unsafe_ptr(ty: t) -> bool {\n \n pure fn type_is_vec(ty: t) -> bool {\n     ret alt get(ty).struct {\n-          ty_vec(_) | ty_evec(_, _) | ty_unboxed_vec(_) { true }\n-          ty_str | ty_estr(_) { true }\n+          ty_evec(_, _) | ty_unboxed_vec(_) { true }\n+          ty_estr(_) { true }\n           _ { false }\n         };\n }\n \n pure fn type_is_unique(ty: t) -> bool {\n     alt get(ty).struct {\n       ty_uniq(_) { ret true; }\n-      ty_vec(_) | ty_evec(_, vstore_uniq) { true }\n-      ty_str | ty_estr(vstore_uniq) { true }\n+      ty_evec(_, vstore_uniq) { true }\n+      ty_estr(vstore_uniq) { true }\n       _ { ret false; }\n     }\n }\n@@ -1315,7 +1303,7 @@ fn type_needs_unwind_cleanup_(cx: ctxt, ty: t,\n             }\n             !needs_unwind_cleanup\n           }\n-          ty_uniq(_) | ty_str | ty_vec(_) |\n+          ty_uniq(_) |\n           ty_estr(vstore_uniq) |\n           ty_estr(vstore_box) |\n           ty_evec(_, vstore_uniq) |\n@@ -1493,7 +1481,7 @@ fn type_kind(cx: ctxt, ty: t) -> kind {\n       ty_nil | ty_bot | ty_bool | ty_int(_) | ty_uint(_) | ty_float(_) |\n       ty_ptr(_) { kind_implicitly_sendable() | kind_const() }\n       // Implicit copyability of strs is configurable\n-      ty_str | ty_estr(vstore_uniq) {\n+      ty_estr(vstore_uniq) {\n         if cx.vecs_implicitly_copyable {\n             kind_implicitly_sendable() | kind_const()\n         } else { kind_sendable() | kind_const() }\n@@ -1523,7 +1511,7 @@ fn type_kind(cx: ctxt, ty: t) -> kind {\n         remove_implicit(mutable_type_kind(cx, tm))\n       }\n       // Implicit copyability of vecs is configurable\n-      ty_vec(tm) | ty_evec(tm, vstore_uniq) {\n+      ty_evec(tm, vstore_uniq) {\n           if cx.vecs_implicitly_copyable {\n               mutable_type_kind(cx, tm)\n           } else { remove_implicit(mutable_type_kind(cx, tm)) }\n@@ -1650,7 +1638,6 @@ fn is_instantiable(cx: ctxt, r_ty: t) -> bool {\n           ty_int(_) |\n           ty_uint(_) |\n           ty_float(_) |\n-          ty_str |\n           ty_estr(_) |\n           ty_fn(_) |\n           ty_var(_) |\n@@ -1661,8 +1648,7 @@ fn is_instantiable(cx: ctxt, r_ty: t) -> bool {\n           ty_opaque_box |\n           ty_opaque_closure_ptr(_) |\n           ty_evec(_, _) |\n-          ty_unboxed_vec(_) |\n-          ty_vec(_) {\n+          ty_unboxed_vec(_) {\n             false\n           }\n \n@@ -1778,36 +1764,11 @@ fn type_structurally_contains(cx: ctxt, ty: t, test: fn(sty) -> bool) ->\n     }\n }\n \n-// Returns true for noncopyable types and types where a copy of a value can be\n-// distinguished from the value itself. I.e. types with mut content that's\n-// not shared through a pointer.\n-fn type_allows_implicit_copy(cx: ctxt, ty: t) -> bool {\n-    ret !type_structurally_contains(cx, ty, |sty| {\n-        alt sty {\n-          ty_param(_, _) { true }\n-\n-          ty_evec(_, _) | ty_estr(_) {\n-            cx.sess.unimpl(~\"estr/evec in type_allows_implicit_copy\");\n-          }\n-\n-          ty_vec(mt) {\n-            mt.mutbl != ast::m_imm\n-          }\n-          ty_rec(fields) {\n-            vec::any(fields, |f| f.mt.mutbl != ast::m_imm)\n-          }\n-          _ { false }\n-        }\n-    }) && type_kind(cx, ty) != kind_noncopyable();\n-}\n-\n fn type_structurally_contains_uniques(cx: ctxt, ty: t) -> bool {\n     ret type_structurally_contains(cx, ty, |sty| {\n         alt sty {\n           ty_uniq(_) |\n-          ty_vec(_) |\n           ty_evec(_, vstore_uniq) |\n-          ty_str |\n           ty_estr(vstore_uniq) { true }\n           _ { false }\n         }\n@@ -1848,7 +1809,7 @@ fn type_is_pod(cx: ctxt, ty: t) -> bool {\n       ty_nil | ty_bot | ty_bool | ty_int(_) | ty_float(_) | ty_uint(_) |\n       ty_type | ty_ptr(_) { result = true; }\n       // Boxed types\n-      ty_str | ty_box(_) | ty_uniq(_) | ty_vec(_) | ty_fn(_) |\n+      ty_box(_) | ty_uniq(_) | ty_fn(_) |\n       ty_estr(vstore_uniq) | ty_estr(vstore_box) |\n       ty_evec(_, vstore_uniq) | ty_evec(_, vstore_box) |\n       ty_trait(_, _) | ty_rptr(_,_) | ty_opaque_box { result = false; }\n@@ -1974,8 +1935,8 @@ fn index(cx: ctxt, t: t) -> option<mt> {\n \n fn index_sty(cx: ctxt, sty: sty) -> option<mt> {\n     alt sty {\n-      ty_vec(mt) | ty_evec(mt, _) { some(mt) }\n-      ty_str | ty_estr(_) { some({ty: mk_u8(cx), mutbl: ast::m_imm}) }\n+      ty_evec(mt, _) { some(mt) }\n+      ty_estr(_) { some({ty: mk_u8(cx), mutbl: ast::m_imm}) }\n       _ { none }\n     }\n }\n@@ -2050,14 +2011,12 @@ fn hash_type_structure(st: sty) -> uint {\n         alt t { ast::ty_f { 13u } ast::ty_f32 { 14u } ast::ty_f64 { 15u } }\n       }\n       ty_estr(_) { 16u }\n-      ty_str { 17u }\n       ty_enum(did, substs) {\n         let mut h = hash_def(18u, did);\n         hash_substs(h, substs)\n       }\n       ty_box(mt) { hash_subty(19u, mt.ty) }\n       ty_evec(mt, _) { hash_subty(20u, mt.ty) }\n-      ty_vec(mt) { hash_subty(21u, mt.ty) }\n       ty_unboxed_vec(mt) { hash_subty(22u, mt.ty) }\n       ty_tup(ts) { hash_subtys(25u, ts) }\n       ty_rec(fields) {\n@@ -2405,15 +2364,15 @@ fn set_default_mode(cx: ctxt, m: ast::mode, m_def: ast::rmode) {\n fn ty_sort_str(cx: ctxt, t: t) -> ~str {\n     alt get(t).struct {\n       ty_nil | ty_bot | ty_bool | ty_int(_) |\n-      ty_uint(_) | ty_float(_) | ty_estr(_) | ty_str |\n+      ty_uint(_) | ty_float(_) | ty_estr(_) |\n       ty_type | ty_opaque_box | ty_opaque_closure_ptr(_) {\n         ty_to_str(cx, t)\n       }\n \n       ty_enum(id, _) { #fmt[\"enum %s\", item_path_str(cx, id)] }\n       ty_box(_) { ~\"@-ptr\" }\n       ty_uniq(_) { ~\"~-ptr\" }\n-      ty_evec(_, _) | ty_vec(_) { ~\"vector\" }\n+      ty_evec(_, _) { ~\"vector\" }\n       ty_unboxed_vec(_) { ~\"unboxed vector\" }\n       ty_ptr(_) { ~\"*-ptr\" }\n       ty_rptr(_, _) { ~\"&-ptr\" }\n@@ -2917,10 +2876,8 @@ fn is_binopable(_cx: ctxt, ty: t, op: ast::binop) -> bool {\n     const tycat_bool: int = 1;\n     const tycat_int: int = 2;\n     const tycat_float: int = 3;\n-    const tycat_str: int = 4;\n-    const tycat_vec: int = 5;\n-    const tycat_struct: int = 6;\n-    const tycat_bot: int = 7;\n+    const tycat_struct: int = 4;\n+    const tycat_bot: int = 5;\n \n     const opcat_add: int = 0;\n     const opcat_sub: int = 1;\n@@ -2959,8 +2916,6 @@ fn is_binopable(_cx: ctxt, ty: t, op: ast::binop) -> bool {\n           ty_bool { tycat_bool }\n           ty_int(_) | ty_uint(_) | ty_var_integral(_) { tycat_int }\n           ty_float(_) { tycat_float }\n-          ty_str { tycat_str }\n-          ty_vec(_) { tycat_vec }\n           ty_rec(_) | ty_tup(_) | ty_enum(_, _) { tycat_struct }\n           ty_bot { tycat_bot }\n           _ { tycat_other }\n@@ -2978,8 +2933,6 @@ fn is_binopable(_cx: ctxt, ty: t, op: ast::binop) -> bool {\n     /*bool*/    ~[f, f, f, f, t, t, t, t],\n     /*int*/     ~[t, t, t, t, t, t, t, f],\n     /*float*/   ~[t, t, t, f, t, t, f, f],\n-    /*str*/     ~[f, f, f, f, t, t, f, f],\n-    /*vec*/     ~[f, f, f, f, t, t, f, f],\n     /*bot*/     ~[f, f, f, f, t, t, f, f],\n     /*struct*/  ~[t, t, t, t, t, t, t, t]];\n "}, {"sha": "df267170c36b9649790afa0b7dbd7816d2d14fa5", "filename": "src/rustc/middle/typeck/astconv.rs", "status": "modified", "additions": 10, "deletions": 54, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -235,7 +235,11 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope copy>(\n                         |tmt| ty::mk_uniq(tcx, tmt))\n       }\n       ast::ty_vec(mt) {\n-        ty::mk_vec(tcx, ast_mt_to_mt(self, rscope, mt))\n+        tcx.sess.span_err(ast_ty.span,\n+                          ~\"bare `[]` is not a type\");\n+        // return /something/ so they can at least get more errors\n+        ty::mk_evec(tcx, ast_mt_to_mt(self, rscope, mt),\n+                    ty::vstore_uniq)\n       }\n       ast::ty_ptr(mt) {\n         ty::mk_ptr(tcx, ast_mt_to_mt(self, rscope, mt))\n@@ -288,19 +292,10 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope copy>(\n                 ty::mk_mach_float(tcx, ft)\n               }\n               ast::ty_str {\n-                check_path_args(tcx, path, NO_TPS);\n-                // This is a bit of a hack, but basically &str needs to be\n-                // converted into a vstore:\n-                alt path.rp {\n-                  none {\n-                    ty::mk_str(tcx)\n-                  }\n-                  some(ast_r) {\n-                    let r = ast_region_to_region(self, rscope,\n-                                                 ast_ty.span, ast_r);\n-                    ty::mk_estr(tcx, ty::vstore_slice(r))\n-                  }\n-                }\n+                tcx.sess.span_err(ast_ty.span,\n+                                  ~\"bare `str` is not a type\");\n+                // return /something/ so they can at least get more errors\n+                ty::mk_estr(tcx, ty::vstore_uniq)\n               }\n             }\n           }\n@@ -321,43 +316,6 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope copy>(\n           }\n         }\n       }\n-      // This is awful and repetitive but will go away\n-      ast::ty_vstore(a_t, ast::vstore_slice(a_r)) {\n-        let r = ast_region_to_region(self, rscope, ast_ty.span, a_r);\n-        mk_maybe_vstore(self, in_anon_rscope(rscope, r),\n-                        {ty: a_t, mutbl: ast::m_imm},\n-                        ty::vstore_slice(r),\n-                        |ty| {\n-                            tcx.sess.span_err(\n-                                a_t.span,\n-                                #fmt[\"bound not allowed on a %s\",\n-                                     ty::ty_sort_str(tcx, ty.ty)]);\n-                            ty.ty\n-                        })\n-\n-      }\n-      ast::ty_vstore(a_t, ast::vstore_uniq) {\n-        mk_maybe_vstore(self, rscope, {ty: a_t, mutbl: ast::m_imm},\n-                        ty::vstore_uniq,\n-                        |ty| {\n-                            tcx.sess.span_err(\n-                                a_t.span,\n-                                #fmt[\"bound not allowed on a %s\",\n-                                     ty::ty_sort_str(tcx, ty.ty)]);\n-                            ty.ty\n-                        })\n-      }\n-      ast::ty_vstore(a_t, ast::vstore_box) {\n-        mk_maybe_vstore(self, rscope, {ty: a_t, mutbl: ast::m_imm},\n-                        ty::vstore_box,\n-                        |ty| {\n-                            tcx.sess.span_err(\n-                                a_t.span,\n-                                #fmt[\"bound not allowed on a %s\",\n-                                     ty::ty_sort_str(tcx, ty.ty)]);\n-                            ty.ty\n-                        })\n-      }\n       ast::ty_vstore(a_t, ast::vstore_fixed(some(u))) {\n         mk_maybe_vstore(self, rscope, {ty: a_t, mutbl: ast::m_imm},\n                         ty::vstore_fixed(u),\n@@ -374,11 +332,9 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope copy>(\n             ast_ty.span,\n             ~\"implied fixed length for bound\");\n       }\n-/*\n       ast::ty_vstore(_, _) {\n-        tcx.sess.span_bug(ast_ty.span, \"some BS\");\n+        tcx.sess.span_bug(ast_ty.span, ~\"vstore in type??\");\n       }\n-*/\n       ast::ty_constr(t, cs) {\n         let mut out_cs = ~[];\n         for cs.each |constr| {"}, {"sha": "4df32eb662d4e7c0324562af6e73086f9a3cf4c1", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -611,7 +611,7 @@ fn check_lit(fcx: @fn_ctxt, lit: @ast::lit) -> ty::t {\n     let tcx = fcx.ccx.tcx;\n \n     alt lit.node {\n-      ast::lit_str(_) { ty::mk_str(tcx) }\n+      ast::lit_str(_) { ty::mk_estr(tcx, ty::vstore_uniq) }\n       ast::lit_int(_, t) { ty::mk_mach_int(tcx, t) }\n       ast::lit_uint(_, t) { ty::mk_mach_uint(tcx, t) }\n       ast::lit_int_unsuffixed(_) {\n@@ -1311,7 +1311,8 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         bot = true;\n         alt expr_opt {\n           none {/* do nothing */ }\n-          some(e) { check_expr_with(fcx, e, ty::mk_str(tcx)); }\n+          some(e) { check_expr_with(fcx, e,\n+                                    ty::mk_estr(tcx, ty::vstore_uniq)); }\n         }\n         fcx.write_bot(id);\n       }\n@@ -1522,7 +1523,8 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n       ast::expr_vec(args, mutbl) {\n         let t: ty::t = fcx.infcx.next_ty_var();\n         for args.each |e| { bot |= check_expr_with(fcx, e, t); }\n-        let typ = ty::mk_vec(tcx, {ty: t, mutbl: mutbl});\n+        let typ = ty::mk_evec(tcx, {ty: t, mutbl: mutbl},\n+                              ty::vstore_uniq);\n         fcx.write_ty(id, typ);\n       }\n       ast::expr_tup(elts) {"}, {"sha": "ecc114cfc8572dbd8a540d1822ff5bfb438840c4", "filename": "src/rustc/middle/typeck/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -6,7 +6,7 @@\n \n import middle::ty::{get, t, ty_box, ty_uniq, ty_ptr, ty_rptr, ty_enum};\n import middle::ty::{ty_class, ty_nil, ty_bot, ty_bool, ty_int, ty_uint};\n-import middle::ty::{ty_float, ty_str, ty_estr, ty_vec, ty_evec, ty_rec};\n+import middle::ty::{ty_float, ty_estr, ty_evec, ty_rec};\n import middle::ty::{ty_fn, ty_trait, ty_tup, ty_var, ty_var_integral};\n import middle::ty::{ty_param, ty_self, ty_constr, ty_type, ty_opaque_box};\n import middle::ty::{ty_opaque_closure_ptr, ty_unboxed_vec, new_ty_hash};\n@@ -171,7 +171,7 @@ class CoherenceChecker {\n             }\n \n             ty_nil | ty_bot | ty_bool | ty_int(*) | ty_uint(*) | ty_float(*) |\n-            ty_str | ty_estr(*) | ty_vec(*) | ty_evec(*) | ty_rec(*) |\n+            ty_estr(*) | ty_evec(*) | ty_rec(*) |\n             ty_fn(*) | ty_tup(*) | ty_var(*) | ty_var_integral(*) |\n             ty_param(*) | ty_self | ty_constr(*) | ty_type | ty_opaque_box |\n             ty_opaque_closure_ptr(*) | ty_unboxed_vec(*) {"}, {"sha": "e88aecb6d5dd9278441f001c27a1046aa2cb2793", "filename": "src/rustc/middle/typeck/infer.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -1417,11 +1417,6 @@ impl assignment for infer_ctxt {\n                 let nr_b = ty::mk_estr(self.tcx, vs_a);\n                 self.crosspollinate(anmnt, a, nr_b, m_imm, r_b)\n               }\n-              (ty::ty_str,\n-               ty::ty_estr(ty::vstore_slice(r_b))) {\n-                let nr_b = ty::mk_str(self.tcx);\n-                self.crosspollinate(anmnt, a, nr_b, m_imm, r_b)\n-              }\n \n               (ty::ty_evec(mt_a, vs_a),\n                ty::ty_evec(mt_b, ty::vstore_slice(r_b)))\n@@ -1430,12 +1425,6 @@ impl assignment for infer_ctxt {\n                                                   mutbl: m_const}, vs_a);\n                 self.crosspollinate(anmnt, a, nr_b, mt_b.mutbl, r_b)\n               }\n-              (ty::ty_vec(mt_a),\n-               ty::ty_evec(mt_b, ty::vstore_slice(r_b))) {\n-                let nr_b = ty::mk_vec(self.tcx, {ty: mt_b.ty,\n-                                                 mutbl: m_const});\n-                self.crosspollinate(anmnt, a, nr_b, mt_b.mutbl, r_b)\n-              }\n               _ {\n                 self.sub_tys(a, b)\n               }\n@@ -1760,8 +1749,7 @@ fn super_tys<C:combine>(\n       }\n \n       (ty::ty_nil, _) |\n-      (ty::ty_bool, _) |\n-      (ty::ty_str, _) {\n+      (ty::ty_bool, _) {\n         let cfg = tcx.sess.targ_cfg;\n         if ty::mach_sty(cfg, a) == ty::mach_sty(cfg, b) {\n             ok(a)\n@@ -1807,12 +1795,6 @@ fn super_tys<C:combine>(\n         }\n       }\n \n-      (ty::ty_vec(a_mt), ty::ty_vec(b_mt)) {\n-        do self.mts(a_mt, b_mt).chain |mt| {\n-            ok(ty::mk_vec(tcx, mt))\n-        }\n-      }\n-\n       (ty::ty_ptr(a_mt), ty::ty_ptr(b_mt)) {\n         do self.mts(a_mt, b_mt).chain |mt| {\n             ok(ty::mk_ptr(tcx, mt))"}, {"sha": "3ed871dc701c85e74f8c3e2fc58e95fc617ff63f", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -6,9 +6,9 @@ import middle::ty::{mt, re_bound, re_free, re_scope, re_var, region, t};\n import middle::ty::{ty_bool, ty_bot, ty_box, ty_class, ty_constr, ty_enum};\n import middle::ty::{ty_estr, ty_evec, ty_float, ty_fn, ty_trait, ty_int};\n import middle::ty::{ty_nil, ty_opaque_box, ty_opaque_closure_ptr, ty_param};\n-import middle::ty::{ty_ptr, ty_rec, ty_rptr, ty_self, ty_str, ty_tup};\n+import middle::ty::{ty_ptr, ty_rec, ty_rptr, ty_self, ty_tup};\n import middle::ty::{ty_type, ty_uniq, ty_uint, ty_var, ty_var_integral};\n-import middle::ty::{ty_vec, ty_unboxed_vec, vid};\n+import middle::ty::{ty_unboxed_vec, vid};\n import metadata::encoder;\n import syntax::codemap;\n import syntax::print::pprust;\n@@ -186,7 +186,6 @@ fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n       ty_uint(t) { ast_util::uint_ty_to_str(t) }\n       ty_float(ast::ty_f) { ~\"float\" }\n       ty_float(t) { ast_util::float_ty_to_str(t) }\n-      ty_str { ~\"str\" }\n       ty_box(tm) { ~\"@\" + mt_to_str(cx, tm) }\n       ty_uniq(tm) { ~\"~\" + mt_to_str(cx, tm) }\n       ty_ptr(tm) { ~\"*\" + mt_to_str(cx, tm) }\n@@ -198,7 +197,6 @@ fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n             rs + ~\"/\" + mt_to_str(cx, tm)\n         }\n       }\n-      ty_vec(tm) { ~\"[\" + mt_to_str(cx, tm) + ~\"]\" }\n       ty_unboxed_vec(tm) { ~\"unboxed_vec<\" + mt_to_str(cx, tm) + ~\">\" }\n       ty_type { ~\"type\" }\n       ty_rec(elems) {"}, {"sha": "1f1b5275ef866101a657907ff07cf2c6d0ce1208", "filename": "src/test/compile-fail/break-outside-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -2,6 +2,6 @@\n fn main() {\n     let pth = break;\n \n-    let rs: {t: str} = {t: pth};\n+    let rs: {t: ~str} = {t: pth};\n \n }"}, {"sha": "1fbc6691c74e9baf38920d801be8d700b20170c7", "filename": "src/test/compile-fail/issue-2063.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -7,7 +7,7 @@ enum t = @t; //~ ERROR this type cannot be instantiated\n // the compiler to attempt autoderef and then\n // try to resolve the method.\n impl methods for t {\n-    fn to_str() -> str { \"t\" }\n+    fn to_str() -> ~str { \"t\" }\n }\n \n fn new_t(x: t) {"}, {"sha": "5aba0e50fd639c3933fc4b58b8894f85713530f1", "filename": "src/test/compile-fail/issue-2590.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -5,7 +5,7 @@ type parser = {\n };\n \n impl parser for parser {\n-    fn parse() -> [mut int] {\n+    fn parse() -> ~[mut int] {\n         dvec::unwrap(self.tokens) //~ ERROR illegal move from self\n     }\n }"}, {"sha": "4b3649e30e81bddf18bd3a32f7c8124232ed541a", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -6,7 +6,7 @@ import std::map::map;\n // Test that iface types printed in error msgs include the type arguments.\n \n fn main() {\n-    let x: map<str,str> = map::str_hash::<str>() as map::<str,str>;\n-    let y: map<uint,str> = x;\n+    let x: map<~str,~str> = map::str_hash::<~str>() as map::<~str,~str>;\n+    let y: map<uint,~str> = x;\n     //~^ ERROR mismatched types: expected `std::map::map<uint,~str>`\n }"}, {"sha": "0fd0586500a8cb09248beb2d983252c7c0e267ed", "filename": "src/test/compile-fail/mutable-huh-variance-vec3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -2,10 +2,10 @@ fn main() {\n     // Note: explicit type annot is required here\n     // because otherwise the inference gets smart\n     // and assigns a type of ~[mut ~[const int]].\n-    let v: [mut[mut[int]]] = [mut [mut [0]]];\n+    let v: ~[mut ~[mut ~[int]]] = ~[mut ~[mut ~[0]]];\n \n     fn f(&&v: ~[mut ~[mut ~[const int]]]) {\n-        v[0][1] = [mut 3]\n+        v[0][1] = ~[mut 3]\n     }\n \n     f(v); //~ ERROR (values differ in mutability)"}, {"sha": "3caee2475a86af9c5f2d60650f066112cd133eee", "filename": "src/test/compile-fail/tstate-unsat-in-called-fn-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Ftest%2Fcompile-fail%2Ftstate-unsat-in-called-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Ftest%2Fcompile-fail%2Ftstate-unsat-in-called-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftstate-unsat-in-called-fn-expr.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -1,4 +1,4 @@\n-fn foo(v: [int]) : vec::is_empty(v) { #debug(\"%d\", v[0]); }\n+fn foo(v: ~[int]) : vec::is_empty(v) { #debug(\"%d\", v[0]); }\n \n fn main() {\n     let f = fn@() {"}, {"sha": "ffc1e87bcc5cc0504aac6bea17447bd47e759cbd", "filename": "src/test/compile-fail/tstate-unsat-in-fn-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Ftest%2Fcompile-fail%2Ftstate-unsat-in-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Ftest%2Fcompile-fail%2Ftstate-unsat-in-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftstate-unsat-in-fn-expr.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -1,4 +1,4 @@\n-fn foo(v: [int]) : vec::is_empty(v) { #debug(\"%d\", v[0]); }\n+fn foo(v: ~[int]) : vec::is_empty(v) { #debug(\"%d\", v[0]); }\n \n fn main() {\n     let f = fn@() {"}, {"sha": "2502664a999cd0738971b516ff60ef1352e80301", "filename": "src/test/compile-fail/writing-to-immutable-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d884085f43f87213e3045e474c39908d6555153a/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d884085f43f87213e3045e474c39908d6555153a/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-vec.rs?ref=d884085f43f87213e3045e474c39908d6555153a", "patch": "@@ -1,2 +1,2 @@\n // error-pattern:assigning to immutable vec content\n-fn main() { let v: [int] = [1, 2, 3]; v[1] = 4; }\n+fn main() { let v: ~[int] = ~[1, 2, 3]; v[1] = 4; }"}]}