{"sha": "21b514ff3040527e290d79a27d591b1b31301f68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYjUxNGZmMzA0MDUyN2UyOTBkNzlhMjdkNTkxYjFiMzEzMDFmNjg=", "commit": {"author": {"name": "Eli Friedman", "email": "eli.friedman@gmail.com", "date": "2015-07-27T00:51:03Z"}, "committer": {"name": "Eli Friedman", "email": "eli.friedman@gmail.com", "date": "2015-07-27T02:21:53Z"}, "message": "In improper-ctypes lint, handle functions which explicitly return `()`.\n\nFixes issue #27302.", "tree": {"sha": "c62153761351b0f36f2d5623d4a0c3eed825a2df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c62153761351b0f36f2d5623d4a0c3eed825a2df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21b514ff3040527e290d79a27d591b1b31301f68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21b514ff3040527e290d79a27d591b1b31301f68", "html_url": "https://github.com/rust-lang/rust/commit/21b514ff3040527e290d79a27d591b1b31301f68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21b514ff3040527e290d79a27d591b1b31301f68/comments", "author": {"login": "eefriedman", "id": 12769964, "node_id": "MDQ6VXNlcjEyNzY5OTY0", "avatar_url": "https://avatars.githubusercontent.com/u/12769964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eefriedman", "html_url": "https://github.com/eefriedman", "followers_url": "https://api.github.com/users/eefriedman/followers", "following_url": "https://api.github.com/users/eefriedman/following{/other_user}", "gists_url": "https://api.github.com/users/eefriedman/gists{/gist_id}", "starred_url": "https://api.github.com/users/eefriedman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eefriedman/subscriptions", "organizations_url": "https://api.github.com/users/eefriedman/orgs", "repos_url": "https://api.github.com/users/eefriedman/repos", "events_url": "https://api.github.com/users/eefriedman/events{/privacy}", "received_events_url": "https://api.github.com/users/eefriedman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eefriedman", "id": 12769964, "node_id": "MDQ6VXNlcjEyNzY5OTY0", "avatar_url": "https://avatars.githubusercontent.com/u/12769964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eefriedman", "html_url": "https://github.com/eefriedman", "followers_url": "https://api.github.com/users/eefriedman/followers", "following_url": "https://api.github.com/users/eefriedman/following{/other_user}", "gists_url": "https://api.github.com/users/eefriedman/gists{/gist_id}", "starred_url": "https://api.github.com/users/eefriedman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eefriedman/subscriptions", "organizations_url": "https://api.github.com/users/eefriedman/orgs", "repos_url": "https://api.github.com/users/eefriedman/repos", "events_url": "https://api.github.com/users/eefriedman/events{/privacy}", "received_events_url": "https://api.github.com/users/eefriedman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82d40cb2ba44a27b7db8ec185b5c532237db4b3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/82d40cb2ba44a27b7db8ec185b5c532237db4b3e", "html_url": "https://github.com/rust-lang/rust/commit/82d40cb2ba44a27b7db8ec185b5c532237db4b3e"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "751224e72864ba9abcc3d15ad1d0e918928f774b", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/21b514ff3040527e290d79a27d591b1b31301f68/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b514ff3040527e290d79a27d591b1b31301f68/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=21b514ff3040527e290d79a27d591b1b31301f68", "patch": "@@ -436,6 +436,16 @@ fn is_repr_nullable_ptr<'tcx>(variants: &Vec<Rc<ty::VariantInfo<'tcx>>>) -> bool\n     false\n }\n \n+fn ast_ty_to_normalized<'tcx>(tcx: &ty::ctxt<'tcx>,\n+                              id: ast::NodeId)\n+                              -> Ty<'tcx> {\n+    let tty = match tcx.ast_ty_to_ty_cache.borrow().get(&id) {\n+        Some(&t) => t,\n+        None => panic!(\"ast_ty_to_ty_cache was incomplete after typeck!\")\n+    };\n+    infer::normalize_associated_type(tcx, &tty)\n+}\n+\n impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     /// Check if the given type is \"ffi-safe\" (has a stable, well-defined\n     /// representation which can be exported to C code).\n@@ -638,11 +648,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     }\n \n     fn check_def(&mut self, sp: Span, id: ast::NodeId) {\n-        let tty = match self.cx.tcx.ast_ty_to_ty_cache.borrow().get(&id) {\n-            Some(&t) => t,\n-            None => panic!(\"ast_ty_to_ty_cache was incomplete after typeck!\")\n-        };\n-        let tty = infer::normalize_associated_type(self.cx.tcx, &tty);\n+        let tty = ast_ty_to_normalized(self.cx.tcx, id);\n \n         match ImproperCTypesVisitor::check_type_for_ffi(self, &mut FnvHashSet(), tty) {\n             FfiResult::FfiSafe => {}\n@@ -707,7 +713,10 @@ impl LintPass for ImproperCTypes {\n                 check_ty(cx, &*input.ty);\n             }\n             if let ast::Return(ref ret_ty) = decl.output {\n-                check_ty(cx, &**ret_ty);\n+                let tty = ast_ty_to_normalized(cx.tcx, ret_ty.id);\n+                if !tty.is_nil() {\n+                    check_ty(cx, &ret_ty);\n+                }\n             }\n         }\n "}, {"sha": "4daba86679d5d13fdfefc745335d181f9b1cffe9", "filename": "src/test/compile-fail/lint-ctypes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/21b514ff3040527e290d79a27d591b1b31301f68/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b514ff3040527e290d79a27d591b1b31301f68/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs?ref=21b514ff3040527e290d79a27d591b1b31301f68", "patch": "@@ -26,6 +26,7 @@ pub type I32Pair = (i32, i32);\n pub struct ZeroSize;\n pub type RustFn = fn();\n pub type RustBadRet = extern fn() -> Box<u32>;\n+pub type CVoidRet = ();\n \n extern {\n     pub fn bare_type1(size: isize); //~ ERROR: found Rust type\n@@ -52,6 +53,8 @@ extern {\n     pub fn good6(s: StructWithProjectionAndLifetime);\n     pub fn good7(fptr: extern fn() -> ());\n     pub fn good8(fptr: extern fn() -> !);\n+    pub fn good9() -> ();\n+    pub fn good10() -> CVoidRet;\n }\n \n fn main() {"}]}