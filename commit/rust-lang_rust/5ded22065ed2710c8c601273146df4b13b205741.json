{"sha": "5ded22065ed2710c8c601273146df4b13b205741", "node_id": "C_kwDOAAsO6NoAKDVkZWQyMjA2NWVkMjcxMGM4YzYwMTI3MzE0NmRmNGIxM2IyMDU3NDE", "commit": {"author": {"name": "AmrDeveloper", "email": "amr96@programmer.net", "date": "2023-04-11T09:22:52Z"}, "committer": {"name": "AmrDeveloper", "email": "amr96@programmer.net", "date": "2023-04-11T09:22:52Z"}, "message": "Make all kind of braces not applicable in function extraction", "tree": {"sha": "bd70fd25d8de45caea60a1e37435ec1a6799a862", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd70fd25d8de45caea60a1e37435ec1a6799a862"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ded22065ed2710c8c601273146df4b13b205741", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ded22065ed2710c8c601273146df4b13b205741", "html_url": "https://github.com/rust-lang/rust/commit/5ded22065ed2710c8c601273146df4b13b205741", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ded22065ed2710c8c601273146df4b13b205741/comments", "author": {"login": "AmrDeveloper", "id": 23631699, "node_id": "MDQ6VXNlcjIzNjMxNjk5", "avatar_url": "https://avatars.githubusercontent.com/u/23631699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AmrDeveloper", "html_url": "https://github.com/AmrDeveloper", "followers_url": "https://api.github.com/users/AmrDeveloper/followers", "following_url": "https://api.github.com/users/AmrDeveloper/following{/other_user}", "gists_url": "https://api.github.com/users/AmrDeveloper/gists{/gist_id}", "starred_url": "https://api.github.com/users/AmrDeveloper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AmrDeveloper/subscriptions", "organizations_url": "https://api.github.com/users/AmrDeveloper/orgs", "repos_url": "https://api.github.com/users/AmrDeveloper/repos", "events_url": "https://api.github.com/users/AmrDeveloper/events{/privacy}", "received_events_url": "https://api.github.com/users/AmrDeveloper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AmrDeveloper", "id": 23631699, "node_id": "MDQ6VXNlcjIzNjMxNjk5", "avatar_url": "https://avatars.githubusercontent.com/u/23631699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AmrDeveloper", "html_url": "https://github.com/AmrDeveloper", "followers_url": "https://api.github.com/users/AmrDeveloper/followers", "following_url": "https://api.github.com/users/AmrDeveloper/following{/other_user}", "gists_url": "https://api.github.com/users/AmrDeveloper/gists{/gist_id}", "starred_url": "https://api.github.com/users/AmrDeveloper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AmrDeveloper/subscriptions", "organizations_url": "https://api.github.com/users/AmrDeveloper/orgs", "repos_url": "https://api.github.com/users/AmrDeveloper/repos", "events_url": "https://api.github.com/users/AmrDeveloper/events{/privacy}", "received_events_url": "https://api.github.com/users/AmrDeveloper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2afc124cb9a06bf404f1f6299d76f5d24f2a16b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2afc124cb9a06bf404f1f6299d76f5d24f2a16b2", "html_url": "https://github.com/rust-lang/rust/commit/2afc124cb9a06bf404f1f6299d76f5d24f2a16b2"}], "stats": {"total": 36, "additions": 30, "deletions": 6}, "files": [{"sha": "bfa2890676beafa0636038c3a2a8be8fa5b2aa6c", "filename": "crates/ide-assists/src/handlers/extract_function.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5ded22065ed2710c8c601273146df4b13b205741/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded22065ed2710c8c601273146df4b13b205741/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=5ded22065ed2710c8c601273146df4b13b205741", "patch": "@@ -70,8 +70,8 @@ pub(crate) fn extract_function(acc: &mut Assists, ctx: &AssistContext<'_>) -> Op\n     }\n \n     let node = ctx.covering_element();\n-    if node.kind() == SyntaxKind::L_CURLY || node.kind() == SyntaxKind::R_CURLY {\n-        cov_mark::hit!(extract_function_in_curly_bracket_is_not_applicable);\n+    if matches!(node.kind(), T!['{'] | T!['}'] | T!['('] | T![')'] | T!['['] | T![']']) {\n+        cov_mark::hit!(extract_function_in_braces_is_not_applicable);\n         return None;\n     }\n \n@@ -5808,13 +5808,37 @@ fn $0fun_name() -> ControlFlow<()> {\n \n     #[test]\n     fn in_left_curly_is_not_applicable() {\n-        cov_mark::check!(extract_function_in_curly_bracket_is_not_applicable);\n-        check_assist_not_applicable(extract_function, r\"fn foo() { $0}$0 \");\n+        cov_mark::check!(extract_function_in_braces_is_not_applicable);\n+        check_assist_not_applicable(extract_function, r\"fn foo() { $0}$0\");\n     }\n \n     #[test]\n     fn in_right_curly_is_not_applicable() {\n-        cov_mark::check!(extract_function_in_curly_bracket_is_not_applicable);\n-        check_assist_not_applicable(extract_function, r\"fn foo() $0{$0 } \");\n+        cov_mark::check!(extract_function_in_braces_is_not_applicable);\n+        check_assist_not_applicable(extract_function, r\"fn foo() $0{$0 }\");\n+    }\n+\n+    #[test]\n+    fn in_left_paren_is_not_applicable() {\n+        cov_mark::check!(extract_function_in_braces_is_not_applicable);\n+        check_assist_not_applicable(extract_function, r\"fn foo( $0)$0 { }\");\n+    }\n+\n+    #[test]\n+    fn in_right_paren_is_not_applicable() {\n+        cov_mark::check!(extract_function_in_braces_is_not_applicable);\n+        check_assist_not_applicable(extract_function, r\"fn foo $0($0 ) { }\");\n+    }\n+\n+    #[test]\n+    fn in_left_brack_is_not_applicable() {\n+        cov_mark::check!(extract_function_in_braces_is_not_applicable);\n+        check_assist_not_applicable(extract_function, r\"fn foo(arr: &mut [i32$0]$0) {}\");\n+    }\n+\n+    #[test]\n+    fn in_right_brack_is_not_applicable() {\n+        cov_mark::check!(extract_function_in_braces_is_not_applicable);\n+        check_assist_not_applicable(extract_function, r\"fn foo(arr: &mut $0[$0i32]) {}\");\n     }\n }"}]}