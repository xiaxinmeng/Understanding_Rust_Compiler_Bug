{"sha": "5d2b9a9ed09ac8a4cb4b7977cdc513fe1cf56408", "node_id": "C_kwDOAAsO6NoAKDVkMmI5YTllZDA5YWM4YTRjYjRiNzk3N2NkYzUxM2ZlMWNmNTY0MDg", "commit": {"author": {"name": "mejrs", "email": "", "date": "2022-12-20T15:43:34Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2023-01-11T22:39:49Z"}, "message": "Migrate deconstruct_pat.rs", "tree": {"sha": "2eb0a093b987f490b3d72a0a4df138fc5119d8c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2eb0a093b987f490b3d72a0a4df138fc5119d8c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d2b9a9ed09ac8a4cb4b7977cdc513fe1cf56408", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmO/OrUACgkQ+boUO5X/\nbYJ1cA//edhk79vjvADPXFwPBQF2KRoSNl0vpu/ayKR+NLo8ryFSk3/ieJ2k3okp\ntJEL/XRapGWkKPISdSQGvMVoP4eo8gNkdFUWlY5Dcs8pDmth/Mm+q7+MYFdwZPKa\n9ieNVFmnjDFb362mzO24t3v54xiQY9+QeNZvRaWgNU+WHnPwHzRB56wDElAg5Jyv\nBxJMjeV2uKB6n+I40q+7zZiXx+tEsZw8KTtJN/TS8l+qNbd/t34kKm56W0WvN53i\nlabzyzY1VIVthkaaQdwGJBDTCMNxaiuoakEMS5f2er28UyYN13+Oe1iF3SIYL5U6\n0LFUkM4u91WmWUcAOICW3lh4CVDMdpAK5Bk2ynB++Y3gbFZ6ABeFEs+QEQMx+g3D\nK/SqGL5yFKCfPs1G0eP0goMBxTwxmMSLFuKJ++NiFmRk5J0NNfVYElYzLvM6Fr2K\nLYz7mGeroExscKJl/jECnuaOJlA75vsxxOnCCB9C7Nt2dp4VLVAsflsyjAdzbDxJ\nD5hpaPBN0ZJTL27a1tIl9QULoWptKGh4LUH84OG+4EcoiOO6Ey2TSyc8JiE4oxKR\nFf5xWv8FB2mtYpLR538MeXtOfk5mscqahZNA8QcsZ/BRw7sfSBeqAuGLABq+TGdB\nUnaytLNfPHoYghbiThvnKNb017H5W+Fv8lL6CZPvFqMCjjZ1nAA=\n=CgxI\n-----END PGP SIGNATURE-----", "payload": "tree 2eb0a093b987f490b3d72a0a4df138fc5119d8c9\nparent 519b1abd198255a6f6c69d80c20b57729622d61a\nauthor mejrs <> 1671551014 +0100\ncommitter David Tolnay <dtolnay@gmail.com> 1673476789 -0800\n\nMigrate deconstruct_pat.rs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d2b9a9ed09ac8a4cb4b7977cdc513fe1cf56408", "html_url": "https://github.com/rust-lang/rust/commit/5d2b9a9ed09ac8a4cb4b7977cdc513fe1cf56408", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d2b9a9ed09ac8a4cb4b7977cdc513fe1cf56408/comments", "author": {}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "519b1abd198255a6f6c69d80c20b57729622d61a", "url": "https://api.github.com/repos/rust-lang/rust/commits/519b1abd198255a6f6c69d80c20b57729622d61a", "html_url": "https://github.com/rust-lang/rust/commit/519b1abd198255a6f6c69d80c20b57729622d61a"}], "stats": {"total": 71, "additions": 48, "deletions": 23}, "files": [{"sha": "162cfce0a2416cd9d737b897e02105cd4e5e0993", "filename": "compiler/rustc_error_messages/locales/en-US/mir_build.ftl", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d2b9a9ed09ac8a4cb4b7977cdc513fe1cf56408/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/5d2b9a9ed09ac8a4cb4b7977cdc513fe1cf56408/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl?ref=5d2b9a9ed09ac8a4cb4b7977cdc513fe1cf56408", "patch": "@@ -317,4 +317,10 @@ mir_build_indirect_structural_match =\n     to use a constant of type `{$non_sm_ty}` in a pattern, `{$non_sm_ty}` must be annotated with `#[derive(PartialEq, Eq)]`\n \n mir_build_nontrivial_structural_match = \n-    to use a constant of type `{$non_sm_ty}` in a pattern, the constant's initializer must be trivial or `{$non_sm_ty}` must be annotated with `#[derive(PartialEq, Eq)]`\n\\ No newline at end of file\n+    to use a constant of type `{$non_sm_ty}` in a pattern, the constant's initializer must be trivial or `{$non_sm_ty}` must be annotated with `#[derive(PartialEq, Eq)]`\n+\n+mir_build_overlapping_range_endpoints = multiple patterns overlap on their endpoints\n+    .range = ... with this range\n+    .note = you likely meant to write mutually exclusive ranges\n+\n+mir_build_overlapping_range = this range overlaps on `{$range}`..."}, {"sha": "5f320708c8416944466a25137159b95386baee11", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5d2b9a9ed09ac8a4cb4b7977cdc513fe1cf56408/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d2b9a9ed09ac8a4cb4b7977cdc513fe1cf56408/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=5d2b9a9ed09ac8a4cb4b7977cdc513fe1cf56408", "patch": "@@ -9,6 +9,7 @@\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/thir.html\n \n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n+use rustc_errors::{DiagnosticArgValue, IntoDiagnosticArg};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::RangeEnd;\n@@ -575,6 +576,12 @@ impl<'tcx> Pat<'tcx> {\n     }\n }\n \n+impl<'tcx> IntoDiagnosticArg for Pat<'tcx> {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        format!(\"{}\", self).into_diagnostic_arg()\n+    }\n+}\n+\n #[derive(Clone, Debug, HashStable)]\n pub struct Ascription<'tcx> {\n     pub annotation: CanonicalUserTypeAnnotation<'tcx>,"}, {"sha": "6bb15730b006914c3a8d430aa7314d941938a39e", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5d2b9a9ed09ac8a4cb4b7977cdc513fe1cf56408/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d2b9a9ed09ac8a4cb4b7977cdc513fe1cf56408/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=5d2b9a9ed09ac8a4cb4b7977cdc513fe1cf56408", "patch": "@@ -4,6 +4,7 @@ use rustc_errors::{\n     error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed, IntoDiagnostic, MultiSpan,\n };\n use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n+use rustc_middle::thir::Pat;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::{symbol::Ident, Span};\n \n@@ -665,3 +666,22 @@ pub struct IndirectStructuralMatch<'tcx> {\n pub struct NontrivialStructuralMatch<'tcx> {\n     pub non_sm_ty: Ty<'tcx>,\n }\n+\n+#[derive(LintDiagnostic)]\n+#[diag(mir_build_overlapping_range_endpoints)]\n+#[note]\n+pub struct OverlappingRangeEndpoints<'tcx> {\n+    #[label(range)]\n+    pub range: Span,\n+    #[subdiagnostic]\n+    pub overlap: Overlap<'tcx>,\n+}\n+\n+#[derive(Debug)]\n+#[derive(Subdiagnostic)]\n+#[label(mir_build_overlapping_range)]\n+pub struct Overlap<'tcx> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub range: Pat<'tcx>,\n+}"}, {"sha": "323df1b8147d849b73d1438712518cd385cd3755", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5d2b9a9ed09ac8a4cb4b7977cdc513fe1cf56408/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d2b9a9ed09ac8a4cb4b7977cdc513fe1cf56408/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=5d2b9a9ed09ac8a4cb4b7977cdc513fe1cf56408", "patch": "@@ -67,6 +67,7 @@ use self::SliceKind::*;\n \n use super::compare_const_vals;\n use super::usefulness::{MatchCheckCtxt, PatCtxt};\n+use crate::errors::{Overlap, OverlappingRangeEndpoints};\n \n /// Recursively expand this pattern into its subpatterns. Only useful for or-patterns.\n fn expand_or_pat<'p, 'tcx>(pat: &'p Pat<'tcx>) -> Vec<&'p Pat<'tcx>> {\n@@ -96,7 +97,7 @@ fn expand_or_pat<'p, 'tcx>(pat: &'p Pat<'tcx>) -> Vec<&'p Pat<'tcx>> {\n /// `IntRange` is never used to encode an empty range or a \"range\" that wraps\n /// around the (offset) space: i.e., `range.lo <= range.hi`.\n #[derive(Clone, PartialEq, Eq)]\n-pub(super) struct IntRange {\n+pub(crate) struct IntRange {\n     range: RangeInclusive<u128>,\n     /// Keeps the bias used for encoding the range. It depends on the type of the range and\n     /// possibly the pointer size of the current architecture. The algorithm ensures we never\n@@ -284,32 +285,24 @@ impl IntRange {\n             return;\n         }\n \n-        let overlaps: Vec<_> = pats\n+        // Get the first overlap. We get only the first rather than all of them\n+        // because displaying multiple overlaps requires a way to eagerly translate\n+        // lintdiagnostics, but that doesn't exist.\n+        let overlap = pats\n             .filter_map(|pat| Some((pat.ctor().as_int_range()?, pat.span())))\n             .filter(|(range, _)| self.suspicious_intersection(range))\n-            .map(|(range, span)| (self.intersection(&range).unwrap(), span))\n-            .collect();\n+            .map(|(range, span)| Overlap {\n+                range: self.intersection(&range).unwrap().to_pat(pcx.cx.tcx, pcx.ty),\n+                span,\n+            })\n+            .next();\n \n-        if !overlaps.is_empty() {\n-            pcx.cx.tcx.struct_span_lint_hir(\n+        if let Some(overlap) = overlap {\n+            pcx.cx.tcx.emit_spanned_lint(\n                 lint::builtin::OVERLAPPING_RANGE_ENDPOINTS,\n                 hir_id,\n                 pcx.span,\n-                \"multiple patterns overlap on their endpoints\",\n-                |lint| {\n-                    for (int_range, span) in overlaps {\n-                        lint.span_label(\n-                            span,\n-                            &format!(\n-                                \"this range overlaps on `{}`...\",\n-                                int_range.to_pat(pcx.cx.tcx, pcx.ty)\n-                            ),\n-                        );\n-                    }\n-                    lint.span_label(pcx.span, \"... with this range\");\n-                    lint.note(\"you likely meant to write mutually exclusive ranges\");\n-                    lint\n-                },\n+                OverlappingRangeEndpoints { overlap, range: pcx.span },\n             );\n         }\n     }"}, {"sha": "a1c802add170cb0cafe89adb811cebcca552f025", "filename": "tests/ui/pattern/usefulness/integer-ranges/overlapping_range_endpoints.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d2b9a9ed09ac8a4cb4b7977cdc513fe1cf56408/tests%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Foverlapping_range_endpoints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d2b9a9ed09ac8a4cb4b7977cdc513fe1cf56408/tests%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Foverlapping_range_endpoints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Foverlapping_range_endpoints.stderr?ref=5d2b9a9ed09ac8a4cb4b7977cdc513fe1cf56408", "patch": "@@ -59,7 +59,6 @@ error: multiple patterns overlap on their endpoints\n LL |         0..=10 => {}\n    |         ------ this range overlaps on `10_u8`...\n LL |         20..=30 => {}\n-   |         ------- this range overlaps on `20_u8`...\n LL |         10..=20 => {}\n    |         ^^^^^^^ ... with this range\n    |"}]}