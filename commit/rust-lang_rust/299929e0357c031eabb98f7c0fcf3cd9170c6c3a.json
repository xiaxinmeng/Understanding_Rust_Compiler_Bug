{"sha": "299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "node_id": "C_kwDOAAsO6NoAKDI5OTkyOWUwMzU3YzAzMWVhYmI5OGY3YzBmY2YzY2Q5MTcwYzZjM2E", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-10T09:20:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-10T09:20:10Z"}, "message": "Rollup merge of #112468 - GuillaumeGomez:change-rustdoc-js-formats, r=notriddle\n\nChange format of rustdoc-js tests by putting query and correction directly alongside the expected values\n\nAs I was working on fixing merge conflicts in #108537, I faced quite a big issue when trying to update the `rustdoc-js*` tests. To make it much simpler, this PR moves the `query` and `correction` directly alongside the expected data so now we know what is the query that is being run without needing to add comments or going back to the top of the file.\n\nr? ```@notriddle```", "tree": {"sha": "52f46aed8610e06ecece268d70a54829949830db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52f46aed8610e06ecece268d70a54829949830db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkhEBKCRBK7hj4Ov3rIwAABDgIAD2zTkDq2uJy91MU16z1PAiB\nG0ua/ay3XNqfpGAk1Na+PDL2E3V+dAAb764hvDNvBBGB2Yq7QgJTxtMtljDMVy1J\nanbGkD1HWlXb7yHGoJyZnvjb/hRjJh88Ib2wnOgrNqDlyieB9nAims5mOohpiOlp\nU3CFK32k7wNsi32zXWufJJuFNzy1BppJQMQYkA2ktBY+AVEFds5QcismaDfbqa1q\nWb1vC9eY+CKWVghgIp/i4HYCQuelo+oIIZUBfXl83b7Ru50Ugb5auxUknD1Q6dPO\n3GiPIFaR00THv6DcIHeN1n2/Azp1Y3L1tHr/O9Ab1+BnspcHSjs8QCPpcDd02Mo=\n=Ui8N\n-----END PGP SIGNATURE-----\n", "payload": "tree 52f46aed8610e06ecece268d70a54829949830db\nparent 4d36c84668f57628c5241e444d5e1449d1ae5eca\nparent 9803651ee84545f8913b6fe9e76c8bd13603bb6e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686388810 +0200\ncommitter GitHub <noreply@github.com> 1686388810 +0200\n\nRollup merge of #112468 - GuillaumeGomez:change-rustdoc-js-formats, r=notriddle\n\nChange format of rustdoc-js tests by putting query and correction directly alongside the expected values\n\nAs I was working on fixing merge conflicts in #108537, I faced quite a big issue when trying to update the `rustdoc-js*` tests. To make it much simpler, this PR moves the `query` and `correction` directly alongside the expected data so now we know what is the query that is being run without needing to add comments or going back to the top of the file.\n\nr? ```@notriddle```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "html_url": "https://github.com/rust-lang/rust/commit/299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d36c84668f57628c5241e444d5e1449d1ae5eca", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d36c84668f57628c5241e444d5e1449d1ae5eca", "html_url": "https://github.com/rust-lang/rust/commit/4d36c84668f57628c5241e444d5e1449d1ae5eca"}, {"sha": "9803651ee84545f8913b6fe9e76c8bd13603bb6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9803651ee84545f8913b6fe9e76c8bd13603bb6e", "html_url": "https://github.com/rust-lang/rust/commit/9803651ee84545f8913b6fe9e76c8bd13603bb6e"}], "stats": {"total": 726, "additions": 285, "deletions": 441}, "files": [{"sha": "416517d15f5db9468b18d7e207910de2f4b085d1", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 49, "deletions": 41, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -22,6 +22,10 @@ function contentToDiffLine(key, value) {\n     return `\"${key}\": \"${value}\",`;\n }\n \n+function shouldIgnoreField(fieldName) {\n+    return fieldName === \"query\" || fieldName === \"correction\";\n+}\n+\n // This function is only called when no matching result was found and therefore will only display\n // the diff between the two items.\n function betterLookingDiff(entry, data) {\n@@ -135,6 +139,9 @@ function valueCheck(fullPath, expected, result, error_text, queryName) {\n     } else if (expected !== null && typeof expected !== \"undefined\" &&\n                expected.constructor == Object) { // eslint-disable-line eqeqeq\n         for (const key in expected) {\n+            if (shouldIgnoreField(key)) {\n+                continue;\n+            }\n             if (!Object.prototype.hasOwnProperty.call(expected, key)) {\n                 continue;\n             }\n@@ -184,6 +191,9 @@ function runSearch(query, expected, doSearch, loadedFile, queryName) {\n     const error_text = [];\n \n     for (const key in expected) {\n+        if (shouldIgnoreField(key)) {\n+            continue;\n+        }\n         if (!Object.prototype.hasOwnProperty.call(expected, key)) {\n             continue;\n         }\n@@ -260,84 +270,83 @@ function checkResult(error_text, loadedFile, displaySuccess) {\n     return 1;\n }\n \n-function runCheck(loadedFile, key, callback) {\n-    const expected = loadedFile[key];\n-    const query = loadedFile.QUERY;\n-\n-    if (Array.isArray(query)) {\n-        if (!Array.isArray(expected)) {\n-            console.log(\"FAILED\");\n-            console.log(`==> If QUERY variable is an array, ${key} should be an array too`);\n-            return 1;\n-        } else if (query.length !== expected.length) {\n-            console.log(\"FAILED\");\n-            console.log(`==> QUERY variable should have the same length as ${key}`);\n-            return 1;\n+function runCheckInner(callback, loadedFile, entry, getCorrections, extra) {\n+    if (typeof entry.query !== \"string\") {\n+        console.log(\"FAILED\");\n+        console.log(\"==> Missing `query` field\");\n+        return false;\n+    }\n+    let error_text = callback(entry.query, entry, extra ? \"[ query `\" + entry.query + \"`]\" : \"\");\n+    if (checkResult(error_text, loadedFile, false) !== 0) {\n+        return false;\n+    }\n+    if (entry.correction !== undefined) {\n+        error_text = runCorrections(entry.query, entry.correction, getCorrections, loadedFile);\n+        if (checkResult(error_text, loadedFile, false) !== 0) {\n+            return false;\n         }\n-        for (let i = 0; i < query.length; ++i) {\n-            const error_text = callback(query[i], expected[i], \"[ query `\" + query[i] + \"`]\");\n-            if (checkResult(error_text, loadedFile, false) !== 0) {\n+    }\n+    return true;\n+}\n+\n+function runCheck(loadedFile, key, getCorrections, callback) {\n+    const expected = loadedFile[key];\n+\n+    if (Array.isArray(expected)) {\n+        for (const entry of expected) {\n+            if (!runCheckInner(callback, loadedFile, entry, getCorrections, true)) {\n                 return 1;\n             }\n         }\n-        console.log(\"OK\");\n-    } else {\n-        const error_text = callback(query, expected, \"\");\n-        if (checkResult(error_text, loadedFile, true) !== 0) {\n-            return 1;\n-        }\n+    } else if (!runCheckInner(callback, loadedFile, expected, getCorrections, false)) {\n+        return 1;\n     }\n+    console.log(\"OK\");\n     return 0;\n }\n \n+function hasCheck(content, checkName) {\n+    return content.startsWith(`const ${checkName}`) || content.includes(`\\nconst ${checkName}`);\n+}\n+\n function runChecks(testFile, doSearch, parseQuery, getCorrections) {\n     let checkExpected = false;\n     let checkParsed = false;\n-    let checkCorrections = false;\n-    let testFileContent = readFile(testFile) + \"exports.QUERY = QUERY;\";\n+    let testFileContent = readFile(testFile);\n \n     if (testFileContent.indexOf(\"FILTER_CRATE\") !== -1) {\n         testFileContent += \"exports.FILTER_CRATE = FILTER_CRATE;\";\n     } else {\n         testFileContent += \"exports.FILTER_CRATE = null;\";\n     }\n \n-    if (testFileContent.indexOf(\"\\nconst EXPECTED\") !== -1) {\n+    if (hasCheck(testFileContent, \"EXPECTED\")) {\n         testFileContent += \"exports.EXPECTED = EXPECTED;\";\n         checkExpected = true;\n     }\n-    if (testFileContent.indexOf(\"\\nconst PARSED\") !== -1) {\n+    if (hasCheck(testFileContent, \"PARSED\")) {\n         testFileContent += \"exports.PARSED = PARSED;\";\n         checkParsed = true;\n     }\n-    if (testFileContent.indexOf(\"\\nconst CORRECTIONS\") !== -1) {\n-        testFileContent += \"exports.CORRECTIONS = CORRECTIONS;\";\n-        checkCorrections = true;\n-    }\n-    if (!checkParsed && !checkExpected && !checkCorrections) {\n+    if (!checkParsed && !checkExpected) {\n         console.log(\"FAILED\");\n-        console.log(\"==> At least `PARSED`, `EXPECTED`, or `CORRECTIONS` is needed!\");\n+        console.log(\"==> At least `PARSED` or `EXPECTED` is needed!\");\n         return 1;\n     }\n \n     const loadedFile = loadContent(testFileContent);\n     let res = 0;\n \n     if (checkExpected) {\n-        res += runCheck(loadedFile, \"EXPECTED\", (query, expected, text) => {\n+        res += runCheck(loadedFile, \"EXPECTED\", getCorrections, (query, expected, text) => {\n             return runSearch(query, expected, doSearch, loadedFile, text);\n         });\n     }\n     if (checkParsed) {\n-        res += runCheck(loadedFile, \"PARSED\", (query, expected, text) => {\n+        res += runCheck(loadedFile, \"PARSED\", getCorrections, (query, expected, text) => {\n             return runParser(query, expected, parseQuery, text);\n         });\n     }\n-    if (checkCorrections) {\n-        res += runCheck(loadedFile, \"CORRECTIONS\", (query, expected) => {\n-            return runCorrections(query, expected, getCorrections, loadedFile);\n-        });\n-    }\n     return res;\n }\n \n@@ -367,8 +376,7 @@ function loadSearchJS(doc_folder, resource_suffix) {\n         },\n         getCorrections: function(queryStr, filterCrate, currentCrate) {\n             const parsedQuery = searchModule.parseQuery(queryStr);\n-            searchModule.execQuery(parsedQuery, searchWords,\n-                filterCrate, currentCrate);\n+            searchModule.execQuery(parsedQuery, searchWords, filterCrate, currentCrate);\n             return parsedQuery.correction;\n         },\n         parseQuery: searchModule.parseQuery,"}, {"sha": "b27b3da21796676abd5b03c587c391626e071b67", "filename": "tests/rustdoc-js-std/alias-1.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Falias-1.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Falias-1.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Falias-1.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,6 +1,5 @@\n-const QUERY = '&';\n-\n const EXPECTED = {\n+    'query': '&',\n     'others': [\n         { 'path': 'std', 'name': 'reference' },\n     ],"}, {"sha": "5735b573bcbda215ee574b5ab31740ffaf61636b", "filename": "tests/rustdoc-js-std/alias-2.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Falias-2.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Falias-2.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Falias-2.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,6 +1,5 @@\n-const QUERY = '+';\n-\n const EXPECTED = {\n+    'query': '+',\n     'others': [\n         { 'path': 'std::ops', 'name': 'AddAssign' },\n         { 'path': 'std::ops', 'name': 'Add' },"}, {"sha": "ed3776b3c2ae0d8f24dee80c657d69c08772cb64", "filename": "tests/rustdoc-js-std/alias-3.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Falias-3.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Falias-3.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Falias-3.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,6 +1,5 @@\n-const QUERY = '!';\n-\n const EXPECTED = {\n+    'query': '!',\n     'others': [\n         { 'path': 'std', 'name': 'never' },\n     ],"}, {"sha": "35840a472c10bf67cf23ad61f30fbfeac3152a98", "filename": "tests/rustdoc-js-std/alias-4.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Falias-4.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Falias-4.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Falias-4.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,6 +1,5 @@\n-const QUERY = '<';\n-\n const EXPECTED = {\n+    'query': '<',\n     'others': [\n         { 'name': 'Ord' },\n     ],"}, {"sha": "bf707fa03dc2ab0437e7a4b6f95a0db376e21b17", "filename": "tests/rustdoc-js-std/alias.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Falias.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Falias.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Falias.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,8 +1,7 @@\n // ignore-order\n \n-const QUERY = '[';\n-\n const EXPECTED = {\n+    'query': '[',\n     'others': [\n         { 'path': 'std', 'name': 'slice' },\n         { 'path': 'std::ops', 'name': 'IndexMut' },"}, {"sha": "5b3cfeabbcdd20dc27c580b4cebfcefd03e0d437", "filename": "tests/rustdoc-js-std/asrawfd.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fasrawfd.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fasrawfd.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fasrawfd.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,8 +1,7 @@\n // ignore-order\n \n-const QUERY = 'RawFd::as_raw_fd';\n-\n const EXPECTED = {\n+    'query': 'RawFd::as_raw_fd',\n     'others': [\n         // Reproduction test for https://github.com/rust-lang/rust/issues/78724\n         // Validate that type alias methods get the correct path."}, {"sha": "baff24b0af699a43663b22ac311357a1a646d6bb", "filename": "tests/rustdoc-js-std/basic.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fbasic.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fbasic.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fbasic.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,6 +1,5 @@\n-const QUERY = 'String';\n-\n const EXPECTED = {\n+    'query': 'String',\n     'others': [\n         { 'path': 'std::string', 'name': 'String' },\n         { 'path': 'std::ffi', 'name': 'CString' },"}, {"sha": "51279dd5ed467b0581ac15f9109d6235b511bdf9", "filename": "tests/rustdoc-js-std/deduplication.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fdeduplication.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fdeduplication.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fdeduplication.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,8 +1,7 @@\n // ignore-order\n \n-const QUERY = 'is_nan';\n-\n const EXPECTED = {\n+    'query': 'is_nan',\n     'others': [\n         { 'path': 'std::f32', 'name': 'is_nan' },\n         { 'path': 'std::f64', 'name': 'is_nan' },"}, {"sha": "216dafe3b129eed96f4b3d591c505a74b5c84608", "filename": "tests/rustdoc-js-std/enum-option.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fenum-option.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fenum-option.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fenum-option.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,6 +1,5 @@\n-const QUERY = 'enum:Option';\n-\n const EXPECTED = {\n+    'query': 'enum:Option',\n     'others': [\n         { 'path': 'std::option', 'name': 'Option' },\n     ],"}, {"sha": "95f2969d29924dbe1cde83977043be45e441d1d8", "filename": "tests/rustdoc-js-std/filter-crate.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Ffilter-crate.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Ffilter-crate.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Ffilter-crate.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,9 +1,9 @@\n // exact-check\n \n-const QUERY = '\"hashmap\"';\n const FILTER_CRATE = 'core';\n \n const EXPECTED = {\n+    'query': 'hashmap',\n     'others': [\n     ],\n };"}, {"sha": "addecf4e44fe4b80bf615d946e1556f890ca1325", "filename": "tests/rustdoc-js-std/fn-forget.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Ffn-forget.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Ffn-forget.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Ffn-forget.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,6 +1,5 @@\n-const QUERY = 'fn:forget';\n-\n const EXPECTED = {\n+    'query': 'fn:forget',\n     'others': [\n         { 'path': 'std::mem', 'name': 'forget' },\n         { 'path': 'std::fmt', 'name': 'format' },"}, {"sha": "7c9375ba529a8d9ac8ee620f6fa71b92c482b7cc", "filename": "tests/rustdoc-js-std/from_u.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Ffrom_u.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Ffrom_u.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Ffrom_u.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,6 +1,5 @@\n-const QUERY = 'from_u';\n-\n const EXPECTED = {\n+    'query': 'from_u',\n     'others': [\n         { 'path': 'std::char', 'name': 'from_u32' },\n         { 'path': 'std::str', 'name': 'from_utf8' },"}, {"sha": "b85ba34138baeb578a204f7ecbef1dd2796f5e52", "filename": "tests/rustdoc-js-std/keyword.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fkeyword.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fkeyword.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fkeyword.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,8 +1,7 @@\n // ignore-order\n \n-const QUERY = 'fn';\n-\n const EXPECTED = {\n+    'query': 'fn',\n     'others': [\n         { 'path': 'std', 'name': 'fn', ty: 15 }, // 15 is for primitive types\n         { 'path': 'std', 'name': 'fn', ty: 21 }, // 21 is for keywords"}, {"sha": "c22b1753fd71b30324e885af90afa76c02f0d345", "filename": "tests/rustdoc-js-std/macro-check.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fmacro-check.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fmacro-check.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fmacro-check.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,8 +1,7 @@\n // ignore-order\n \n-const QUERY = 'panic';\n-\n const EXPECTED = {\n+    'query': 'panic',\n     'others': [\n         { 'path': 'std', 'name': 'panic', ty: 14 }, // 15 is for macros\n         { 'path': 'std', 'name': 'panic', ty: 0 }, // 0 is for modules"}, {"sha": "2ef1c89e49b0f40b7c2656788704126e4e59985b", "filename": "tests/rustdoc-js-std/macro-print.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fmacro-print.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fmacro-print.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fmacro-print.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,6 +1,5 @@\n-const QUERY = 'macro:print';\n-\n const EXPECTED = {\n+    'query': 'macro:print',\n     'others': [\n         { 'path': 'std', 'name': 'print' },\n         { 'path': 'std', 'name': 'println' },"}, {"sha": "ed3776b3c2ae0d8f24dee80c657d69c08772cb64", "filename": "tests/rustdoc-js-std/never.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fnever.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fnever.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fnever.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,6 +1,5 @@\n-const QUERY = '!';\n-\n const EXPECTED = {\n+    'query': '!',\n     'others': [\n         { 'path': 'std', 'name': 'never' },\n     ],"}, {"sha": "8f6b0450dd3197492c0a4125ef3f6574dc93a34e", "filename": "tests/rustdoc-js-std/option-type-signatures.js", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Foption-type-signatures.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Foption-type-signatures.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Foption-type-signatures.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,15 +1,12 @@\n-const QUERY = [\n-    'option, fnonce -> option',\n-    'option -> default',\n-];\n-\n const EXPECTED = [\n     {\n+        'query': 'option, fnonce -> option',\n         'others': [\n             { 'path': 'std::option::Option', 'name': 'map' },\n         ],\n     },\n     {\n+        'query': 'option -> default',\n         'others': [\n             { 'path': 'std::option::Option', 'name': 'unwrap_or_default' },\n             { 'path': 'std::option::Option', 'name': 'get_or_insert_default' },"}, {"sha": "aa8ee86d672476449c15a1648185984ae7f6903a", "filename": "tests/rustdoc-js-std/parser-errors.js", "status": "modified", "additions": 42, "deletions": 45, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fparser-errors.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fparser-errors.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-errors.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,50 +1,6 @@\n-const QUERY = [\n-    '<P>',\n-    '-> <P>',\n-    'a<\"P\">',\n-    '\"P\" \"P\"',\n-    'P \"P\"',\n-    '\"p\" p',\n-    '\"const\": p',\n-    \"a<:a>\",\n-    \"a<::a>\",\n-    \"((a))\",\n-    \"(p -> p\",\n-    \"::a::b\",\n-    \"a::::b\",\n-    \"a::b::\",\n-    \":a\",\n-    \"a b:\",\n-    \"a (b:\",\n-    \"_:\",\n-    \"_:a\",\n-    \"a-bb\",\n-    \"a>bb\",\n-    \"ab'\",\n-    \"a->\",\n-    '\"p\" <a>',\n-    '\"p\" a<a>',\n-    \"a,<\",\n-    \"aaaaa<>b\",\n-    \"fn:aaaaa<>b\",\n-    \"->a<>b\",\n-    \"a<->\",\n-    \"a:: a\",\n-    \"a ::a\",\n-    \"a<a>:\",\n-    \"a<>:\",\n-    \"a,:\",\n-    \"  a<>  :\",\n-    \"mod : :\",\n-    \"a!a\",\n-    \"a!!\",\n-    \"mod:a!\",\n-    \"a!::a\",\n-    \"a<\",\n-];\n-\n const PARSED = [\n     {\n+        query: '<P>',\n         elems: [],\n         foundElems: 0,\n         original: \"<P>\",\n@@ -53,6 +9,7 @@ const PARSED = [\n         error: \"Found generics without a path\",\n     },\n     {\n+        query: '-> <P>',\n         elems: [],\n         foundElems: 0,\n         original: \"-> <P>\",\n@@ -61,6 +18,7 @@ const PARSED = [\n         error: \"Found generics without a path\",\n     },\n     {\n+        query: 'a<\"P\">',\n         elems: [],\n         foundElems: 0,\n         original: \"a<\\\"P\\\">\",\n@@ -69,6 +27,7 @@ const PARSED = [\n         error: \"Unexpected `\\\"` in generics\",\n     },\n     {\n+        query: '\"P\" \"P\"',\n         elems: [],\n         foundElems: 0,\n         original: \"\\\"P\\\" \\\"P\\\"\",\n@@ -77,6 +36,7 @@ const PARSED = [\n         error: \"Cannot have more than one literal search element\",\n     },\n     {\n+        query: 'P \"P\"',\n         elems: [],\n         foundElems: 0,\n         original: \"P \\\"P\\\"\",\n@@ -85,6 +45,7 @@ const PARSED = [\n         error: \"Cannot use literal search when there is more than one element\",\n     },\n     {\n+        query: '\"p\" p',\n         elems: [],\n         foundElems: 0,\n         original: \"\\\"p\\\" p\",\n@@ -93,6 +54,7 @@ const PARSED = [\n         error: \"You cannot have more than one element if you use quotes\",\n     },\n     {\n+        query: '\"const\": p',\n         elems: [],\n         foundElems: 0,\n         original: \"\\\"const\\\": p\",\n@@ -101,6 +63,7 @@ const PARSED = [\n         error: \"You cannot use quotes on type filter\",\n     },\n     {\n+        query: \"a<:a>\",\n         elems: [],\n         foundElems: 0,\n         original: \"a<:a>\",\n@@ -109,6 +72,7 @@ const PARSED = [\n         error: \"Expected type filter before `:`\",\n     },\n     {\n+        query: \"a<::a>\",\n         elems: [],\n         foundElems: 0,\n         original: \"a<::a>\",\n@@ -117,6 +81,7 @@ const PARSED = [\n         error: \"Unexpected `::`: paths cannot start with `::`\",\n     },\n     {\n+        query: \"((a))\",\n         elems: [],\n         foundElems: 0,\n         original: \"((a))\",\n@@ -125,6 +90,7 @@ const PARSED = [\n         error: \"Unexpected `(`\",\n     },\n     {\n+        query: \"(p -> p\",\n         elems: [],\n         foundElems: 0,\n         original: \"(p -> p\",\n@@ -133,6 +99,7 @@ const PARSED = [\n         error: \"Unexpected `(`\",\n     },\n     {\n+        query: \"::a::b\",\n         elems: [],\n         foundElems: 0,\n         original: \"::a::b\",\n@@ -141,6 +108,7 @@ const PARSED = [\n         error: \"Paths cannot start with `::`\",\n     },\n     {\n+        query: \"a::::b\",\n         elems: [],\n         foundElems: 0,\n         original: \"a::::b\",\n@@ -149,6 +117,7 @@ const PARSED = [\n         error: \"Unexpected `::::`\",\n     },\n     {\n+        query: \"a::b::\",\n         elems: [],\n         foundElems: 0,\n         original: \"a::b::\",\n@@ -157,6 +126,7 @@ const PARSED = [\n         error: \"Paths cannot end with `::`\",\n     },\n     {\n+        query: \":a\",\n         elems: [],\n         foundElems: 0,\n         original: \":a\",\n@@ -165,6 +135,7 @@ const PARSED = [\n         error: \"Expected type filter before `:`\",\n     },\n     {\n+        query: \"a b:\",\n         elems: [],\n         foundElems: 0,\n         original: \"a b:\",\n@@ -173,6 +144,7 @@ const PARSED = [\n         error: \"Unexpected `:` (expected path after type filter)\",\n     },\n     {\n+        query: \"a (b:\",\n         elems: [],\n         foundElems: 0,\n         original: \"a (b:\",\n@@ -181,6 +153,7 @@ const PARSED = [\n         error: \"Unexpected `(`\",\n     },\n     {\n+        query: \"_:\",\n         elems: [],\n         foundElems: 0,\n         original: \"_:\",\n@@ -189,6 +162,7 @@ const PARSED = [\n         error: \"Unexpected `:` (expected path after type filter)\",\n     },\n     {\n+        query: \"_:a\",\n         elems: [],\n         foundElems: 0,\n         original: \"_:a\",\n@@ -197,6 +171,7 @@ const PARSED = [\n         error: \"Unknown type filter `_`\",\n     },\n     {\n+        query: \"a-bb\",\n         elems: [],\n         foundElems: 0,\n         original: \"a-bb\",\n@@ -205,6 +180,7 @@ const PARSED = [\n         error: \"Unexpected `-` (did you mean `->`?)\",\n     },\n     {\n+        query: \"a>bb\",\n         elems: [],\n         foundElems: 0,\n         original: \"a>bb\",\n@@ -213,6 +189,7 @@ const PARSED = [\n         error: \"Unexpected `>` (did you mean `->`?)\",\n     },\n     {\n+        query: \"ab'\",\n         elems: [],\n         foundElems: 0,\n         original: \"ab'\",\n@@ -221,6 +198,7 @@ const PARSED = [\n         error: \"Unexpected `'`\",\n     },\n     {\n+        query: \"a->\",\n         elems: [],\n         foundElems: 0,\n         original: \"a->\",\n@@ -229,6 +207,7 @@ const PARSED = [\n         error: \"Expected at least one item after `->`\",\n     },\n     {\n+        query: '\"p\" <a>',\n         elems: [],\n         foundElems: 0,\n         original: '\"p\" <a>',\n@@ -237,6 +216,7 @@ const PARSED = [\n         error: \"Found generics without a path\",\n     },\n     {\n+        query: '\"p\" a<a>',\n         elems: [],\n         foundElems: 0,\n         original: '\"p\" a<a>',\n@@ -245,6 +225,7 @@ const PARSED = [\n         error: \"You cannot have more than one element if you use quotes\",\n     },\n     {\n+        query: \"a,<\",\n         elems: [],\n         foundElems: 0,\n         original: 'a,<',\n@@ -253,6 +234,7 @@ const PARSED = [\n         error: 'Found generics without a path',\n     },\n     {\n+        query: \"aaaaa<>b\",\n         elems: [],\n         foundElems: 0,\n         original: 'aaaaa<>b',\n@@ -261,6 +243,7 @@ const PARSED = [\n         error: 'Expected `,`, ` `, `:` or `->`, found `b`',\n     },\n     {\n+        query: \"fn:aaaaa<>b\",\n         elems: [],\n         foundElems: 0,\n         original: 'fn:aaaaa<>b',\n@@ -269,6 +252,7 @@ const PARSED = [\n         error: 'Expected `,`, ` `, `:` or `->`, found `b`',\n     },\n     {\n+        query: \"->a<>b\",\n         elems: [],\n         foundElems: 0,\n         original: '->a<>b',\n@@ -277,6 +261,7 @@ const PARSED = [\n         error: 'Expected `,` or ` `, found `b`',\n     },\n     {\n+        query: \"a<->\",\n         elems: [],\n         foundElems: 0,\n         original: 'a<->',\n@@ -285,6 +270,7 @@ const PARSED = [\n         error: 'Unexpected `-` after `<`',\n     },\n     {\n+        query: \"a:: a\",\n         elems: [],\n         foundElems: 0,\n         original: 'a:: a',\n@@ -293,6 +279,7 @@ const PARSED = [\n         error: 'Paths cannot end with `::`',\n     },\n     {\n+        query: \"a ::a\",\n         elems: [],\n         foundElems: 0,\n         original: 'a ::a',\n@@ -301,6 +288,7 @@ const PARSED = [\n         error: 'Paths cannot start with `::`',\n     },\n     {\n+        query: \"a<a>:\",\n         elems: [],\n         foundElems: 0,\n         original: \"a<a>:\",\n@@ -309,6 +297,7 @@ const PARSED = [\n         error: 'Unexpected `<` in type filter',\n     },\n     {\n+        query: \"a<>:\",\n         elems: [],\n         foundElems: 0,\n         original: \"a<>:\",\n@@ -317,6 +306,7 @@ const PARSED = [\n         error: 'Unexpected `<` in type filter',\n     },\n     {\n+        query: \"a,:\",\n         elems: [],\n         foundElems: 0,\n         original: \"a,:\",\n@@ -325,6 +315,7 @@ const PARSED = [\n         error: 'Unexpected `,` in type filter',\n     },\n     {\n+        query: \"  a<>  :\",\n         elems: [],\n         foundElems: 0,\n         original: \"a<>  :\",\n@@ -333,6 +324,7 @@ const PARSED = [\n         error: 'Unexpected `<` in type filter',\n     },\n     {\n+        query: \"mod : :\",\n         elems: [],\n         foundElems: 0,\n         original: \"mod : :\",\n@@ -341,6 +333,7 @@ const PARSED = [\n         error: 'Unexpected `:`',\n     },\n     {\n+        query: \"a!a\",\n         elems: [],\n         foundElems: 0,\n         original: \"a!a\",\n@@ -349,6 +342,7 @@ const PARSED = [\n         error: 'Unexpected `!`: it can only be at the end of an ident',\n     },\n     {\n+        query: \"a!!\",\n         elems: [],\n         foundElems: 0,\n         original: \"a!!\",\n@@ -357,6 +351,7 @@ const PARSED = [\n         error: 'Cannot have more than one `!` in an ident',\n     },\n     {\n+        query: \"mod:a!\",\n         elems: [],\n         foundElems: 0,\n         original: \"mod:a!\",\n@@ -365,6 +360,7 @@ const PARSED = [\n         error: 'Invalid search type: macro `!` and `mod` both specified',\n     },\n     {\n+        query: \"a!::a\",\n         elems: [],\n         foundElems: 0,\n         original: \"a!::a\",\n@@ -373,6 +369,7 @@ const PARSED = [\n         error: 'Cannot have associated items in macros',\n     },\n     {\n+        query: \"a<\",\n         elems: [],\n         foundElems: 0,\n         original: \"a<\","}, {"sha": "6f5d66e57ba0cdd7330f422d91e11ea7e4697e03", "filename": "tests/rustdoc-js-std/parser-filter.js", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fparser-filter.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fparser-filter.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-filter.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,17 +1,6 @@\n-const QUERY = [\n-    'fn:foo',\n-    'enum : foo',\n-    'macro<f>:foo',\n-    'macro!',\n-    'macro:mac!',\n-    'a::mac!',\n-    '-> fn:foo',\n-    '-> fn:foo<fn:bar>',\n-    '-> fn:foo<fn:bar, enum : baz::fuzz>',\n-];\n-\n const PARSED = [\n     {\n+        query: 'fn:foo',\n         elems: [{\n             name: \"foo\",\n             fullPath: [\"foo\"],\n@@ -27,6 +16,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: 'enum : foo',\n         elems: [{\n             name: \"foo\",\n             fullPath: [\"foo\"],\n@@ -42,6 +32,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: 'macro<f>:foo',\n         elems: [],\n         foundElems: 0,\n         original: \"macro<f>:foo\",\n@@ -50,6 +41,7 @@ const PARSED = [\n         error: \"Unexpected `<` in type filter\",\n     },\n     {\n+        query: 'macro!',\n         elems: [{\n             name: \"macro\",\n             fullPath: [\"macro\"],\n@@ -65,6 +57,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: 'macro:mac!',\n         elems: [{\n             name: \"mac\",\n             fullPath: [\"mac\"],\n@@ -80,6 +73,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: 'a::mac!',\n         elems: [{\n             name: \"a::mac\",\n             fullPath: [\"a\", \"mac\"],\n@@ -95,6 +89,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: '-> fn:foo',\n         elems: [],\n         foundElems: 1,\n         original: \"-> fn:foo\",\n@@ -110,6 +105,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: '-> fn:foo<fn:bar>',\n         elems: [],\n         foundElems: 1,\n         original: \"-> fn:foo<fn:bar>\",\n@@ -134,6 +130,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: '-> fn:foo<fn:bar, enum : baz::fuzz>',\n         elems: [],\n         foundElems: 1,\n         original: \"-> fn:foo<fn:bar, enum : baz::fuzz>\","}, {"sha": "eb3cf45515576fe0a253bc777acc31586d485bf5", "filename": "tests/rustdoc-js-std/parser-generics.js", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fparser-generics.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fparser-generics.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-generics.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,14 +1,6 @@\n-const QUERY = [\n-    'A<B<C<D>,  E>',\n-    'p<> u8',\n-    '\"p\"<a>',\n-    'p<u<x>>',\n-    'p<u<x>, r>',\n-    'p<u<x, r>>',\n-];\n-\n const PARSED = [\n     {\n+        query: 'A<B<C<D>,  E>',\n         elems: [],\n         foundElems: 0,\n         original: 'A<B<C<D>,  E>',\n@@ -17,6 +9,7 @@ const PARSED = [\n         error: 'Unclosed `<`',\n     },\n     {\n+        query: 'p<> u8',\n         elems: [\n             {\n                 name: \"p\",\n@@ -42,6 +35,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: '\"p\"<a>',\n         elems: [\n             {\n                 name: \"p\",\n@@ -67,6 +61,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: 'p<u<x>>',\n         elems: [\n             {\n                 name: \"p\",\n@@ -100,6 +95,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: 'p<u<x>, r>',\n         elems: [\n             {\n                 name: \"p\",\n@@ -140,6 +136,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: 'p<u<x, r>>',\n         elems: [\n             {\n                 name: \"p\","}, {"sha": "d9ee5fb564b68563b72f2c7d5ee963e3a523b191", "filename": "tests/rustdoc-js-std/parser-ident.js", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fparser-ident.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fparser-ident.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-ident.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,14 +1,6 @@\n-const QUERY = [\n-    \"R<!>\",\n-    \"!\",\n-    \"a!\",\n-    \"a!::b\",\n-    \"!::b\",\n-    \"a!::b!\",\n-];\n-\n const PARSED = [\n     {\n+        query: \"R<!>\",\n         elems: [{\n             name: \"r\",\n             fullPath: [\"r\"],\n@@ -32,6 +24,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: \"!\",\n         elems: [{\n             name: \"!\",\n             fullPath: [\"!\"],\n@@ -47,6 +40,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: \"a!\",\n         elems: [{\n             name: \"a\",\n             fullPath: [\"a\"],\n@@ -62,6 +56,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: \"a!::b\",\n         elems: [],\n         foundElems: 0,\n         original: \"a!::b\",\n@@ -70,6 +65,7 @@ const PARSED = [\n         error: \"Cannot have associated items in macros\",\n     },\n     {\n+        query: \"!::b\",\n         elems: [{\n             name: \"!::b\",\n             fullPath: [\"!\", \"b\"],\n@@ -85,6 +81,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: \"a!::b!\",\n         elems: [],\n         foundElems: 0,\n         original: \"a!::b!\","}, {"sha": "87c06224dbf2d5bf3fc96b965ad93bf7b0f06753", "filename": "tests/rustdoc-js-std/parser-literal.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fparser-literal.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fparser-literal.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-literal.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,7 +1,6 @@\n-const QUERY = ['R<P>'];\n-\n const PARSED = [\n     {\n+        query: 'R<P>',\n         elems: [{\n             name: \"r\",\n             fullPath: [\"r\"],"}, {"sha": "8d4dedf3f46c82dccd6ec2c6fa06d9c5ecceb2cb", "filename": "tests/rustdoc-js-std/parser-paths.js", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fparser-paths.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fparser-paths.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-paths.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,7 +1,6 @@\n-const QUERY = ['A::B', 'A::B,C',  'A::B<f>,C', 'mod::a'];\n-\n const PARSED = [\n     {\n+        query: 'A::B',\n         elems: [{\n             name: \"a::b\",\n             fullPath: [\"a\", \"b\"],\n@@ -17,6 +16,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: 'A::B,C',\n         elems: [\n             {\n                 name: \"a::b\",\n@@ -42,6 +42,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: 'A::B<f>,C',\n         elems: [\n             {\n                 name: \"a::b\",\n@@ -75,6 +76,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: 'mod::a',\n         elems: [{\n             name: \"mod::a\",\n             fullPath: [\"mod\", \"a\"],"}, {"sha": "9d2a3620ed7a349da962fde0063fd4e2964e8f72", "filename": "tests/rustdoc-js-std/parser-quote.js", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fparser-quote.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fparser-quote.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-quote.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,15 +1,6 @@\n-const QUERY = [\n-    '-> \"p\"',\n-    '\"p\",',\n-    '\"p\" -> a',\n-    '\"a\" -> \"p\"',\n-    '->\"-\"',\n-    '\"a',\n-    '\"\"',\n-];\n-\n const PARSED = [\n     {\n+        query: '-> \"p\"',\n         elems: [],\n         foundElems: 1,\n         original: '-> \"p\"',\n@@ -25,6 +16,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: '\"p\",',\n         elems: [{\n             name: \"p\",\n             fullPath: [\"p\"],\n@@ -40,6 +32,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: '\"p\" -> a',\n         elems: [],\n         foundElems: 0,\n         original: '\"p\" -> a',\n@@ -48,6 +41,7 @@ const PARSED = [\n         error: \"You cannot have more than one element if you use quotes\",\n     },\n     {\n+        query: '\"a\" -> \"p\"',\n         elems: [],\n         foundElems: 0,\n         original: '\"a\" -> \"p\"',\n@@ -56,6 +50,7 @@ const PARSED = [\n         error: \"Cannot have more than one literal search element\",\n     },\n     {\n+        query: '->\"-\"',\n         elems: [],\n         foundElems: 0,\n         original: '->\"-\"',\n@@ -64,6 +59,7 @@ const PARSED = [\n         error: 'Unexpected `-` in a string element',\n     },\n     {\n+        query: '\"a',\n         elems: [],\n         foundElems: 0,\n         original: '\"a',\n@@ -72,6 +68,7 @@ const PARSED = [\n         error: 'Unclosed `\"`',\n     },\n     {\n+        query: '\"\"',\n         elems: [],\n         foundElems: 0,\n         original: '\"\"',"}, {"sha": "665e2a9b2e3d7db3384ee5114f3812a5e731b5a3", "filename": "tests/rustdoc-js-std/parser-returned.js", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fparser-returned.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fparser-returned.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-returned.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,13 +1,6 @@\n-const QUERY = [\n-    \"-> F<P>\",\n-    \"-> P\",\n-    \"->,a\",\n-    \"aaaaa->a\",\n-    \"-> !\",\n-];\n-\n const PARSED = [\n     {\n+        query: \"-> F<P>\",\n         elems: [],\n         foundElems: 1,\n         original: \"-> F<P>\",\n@@ -31,6 +24,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: \"-> P\",\n         elems: [],\n         foundElems: 1,\n         original: \"-> P\",\n@@ -46,6 +40,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: \"->,a\",\n         elems: [],\n         foundElems: 1,\n         original: \"->,a\",\n@@ -61,6 +56,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: \"aaaaa->a\",\n         elems: [{\n             name: \"aaaaa\",\n             fullPath: [\"aaaaa\"],\n@@ -83,6 +79,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: \"-> !\",\n         elems: [],\n         foundElems: 1,\n         original: \"-> !\","}, {"sha": "69f9ac29ad3ce0b6c4f497421a1fe5f05c5659df", "filename": "tests/rustdoc-js-std/parser-separators.js", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fparser-separators.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fparser-separators.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-separators.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,17 +1,8 @@\n // ignore-tidy-tab\n \n-const QUERY = [\n-    'aaaaaa\tb',\n-    'a b',\n-    'a,b',\n-    'a\\tb',\n-    'a<b c>',\n-    'a<b,c>',\n-    'a<b\\tc>',\n-];\n-\n const PARSED = [\n     {\n+        query: 'aaaaaa\tb',\n         elems: [\n             {\n                 name: 'aaaaaa',\n@@ -37,6 +28,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: 'a b',\n         elems: [\n             {\n                 name: 'a',\n@@ -62,6 +54,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: 'a,b',\n         elems: [\n             {\n                 name: 'a',\n@@ -87,6 +80,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: 'a\\tb',\n         elems: [\n             {\n                 name: 'a',\n@@ -112,6 +106,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: 'a<b c>',\n         elems: [\n             {\n                 name: 'a',\n@@ -144,6 +139,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: 'a<b,c>',\n         elems: [\n             {\n                 name: 'a',\n@@ -176,6 +172,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: 'a<b\\tc>',\n         elems: [\n             {\n                 name: 'a',"}, {"sha": "0e08eaf73c876387064565c05e4a68e227996fe6", "filename": "tests/rustdoc-js-std/parser-weird-queries.js", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fparser-weird-queries.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fparser-weird-queries.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-weird-queries.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,18 +1,10 @@\n // This test is mostly to check that the parser still kinda outputs something\n // (and doesn't enter an infinite loop!) even though the query is completely\n // invalid.\n-const QUERY = [\n-    'a b',\n-    'a   b',\n-    'a,b(c)',\n-    'aaa,a',\n-    ',,,,',\n-    'mod    :',\n-    'mod\\t:',\n-];\n \n const PARSED = [\n     {\n+        query: 'a b',\n         elems: [\n             {\n                 name: \"a\",\n@@ -38,6 +30,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: 'a   b',\n         elems: [\n             {\n                 name: \"a\",\n@@ -63,6 +56,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: 'a,b(c)',\n         elems: [],\n         foundElems: 0,\n         original: \"a,b(c)\",\n@@ -71,6 +65,7 @@ const PARSED = [\n         error: \"Unexpected `(`\",\n     },\n     {\n+        query: 'aaa,a',\n         elems: [\n             {\n                 name: \"aaa\",\n@@ -96,6 +91,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: ',,,,',\n         elems: [],\n         foundElems: 0,\n         original: \",,,,\",\n@@ -104,6 +100,7 @@ const PARSED = [\n         error: null,\n     },\n     {\n+        query: 'mod    :',\n         elems: [],\n         foundElems: 0,\n         original: 'mod    :',\n@@ -112,6 +109,7 @@ const PARSED = [\n         error: \"Unexpected `:` (expected path after type filter)\",\n     },\n     {\n+        query: 'mod\\t:',\n         elems: [],\n         foundElems: 0,\n         original: 'mod\\t:',"}, {"sha": "c3d61d238cc359edf003835e845c577f07d7f681", "filename": "tests/rustdoc-js-std/path-ordering.js", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fpath-ordering.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fpath-ordering.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fpath-ordering.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,7 +1,6 @@\n-const QUERY = 'hashset::insert';\n-\n const EXPECTED = {\n-    'others': [\n+    query: 'hashset::insert',\n+    others: [\n         // ensure hashset::insert comes first\n         { 'path': 'std::collections::hash_set::HashSet', 'name': 'insert' },\n         { 'path': 'std::collections::hash_set::HashSet', 'name': 'get_or_insert' },"}, {"sha": "737e429bf55147e50ed23a9e8cbfe3f5146275a7", "filename": "tests/rustdoc-js-std/primitive.js", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fprimitive.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fprimitive.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fprimitive.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,15 +1,6 @@\n-const QUERY = [\n-    'i8',\n-    'u32',\n-    'str',\n-    'char',\n-    'unit',\n-    'tuple',\n-    'fn',\n-];\n-\n const EXPECTED = [\n     {\n+        'query': 'i8',\n         'others': [\n             {\n                 'path': 'std',\n@@ -19,6 +10,7 @@ const EXPECTED = [\n         ]\n     },\n     {\n+        'query': 'u32',\n         'others': [\n             {\n                 'path': 'std',\n@@ -28,6 +20,7 @@ const EXPECTED = [\n         ]\n     },\n     {\n+        'query': 'str',\n         'others': [\n             {\n                 'path': 'std',\n@@ -37,6 +30,7 @@ const EXPECTED = [\n         ]\n     },\n     {\n+        'query': 'char',\n         'others': [\n             {\n                 'path': 'std',\n@@ -46,6 +40,7 @@ const EXPECTED = [\n         ]\n     },\n     {\n+        'query': 'unit',\n         'others': [\n             {\n                 'path': 'std',\n@@ -55,6 +50,7 @@ const EXPECTED = [\n         ]\n     },\n     {\n+        'query': 'tuple',\n         'others': [\n             {\n                 'path': 'std',\n@@ -64,6 +60,7 @@ const EXPECTED = [\n         ]\n     },\n     {\n+        'query': 'fn',\n         'others': [\n             {\n                 'path': 'std',"}, {"sha": "a4dd90a44d5ba5e42df04f14d7acd3206ffd89a2", "filename": "tests/rustdoc-js-std/println-typo.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fprintln-typo.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fprintln-typo.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fprintln-typo.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,9 +1,9 @@\n // exact-check\n \n-const QUERY = 'prinltn';\n const FILTER_CRATE = 'std';\n \n const EXPECTED = {\n+    'query': 'prinltn',\n     'others': [\n         { 'path': 'std', 'name': 'println' },\n         { 'path': 'std', 'name': 'print' },"}, {"sha": "8a9275019255cf6c4c795d535cf9484263b81943", "filename": "tests/rustdoc-js-std/quoted.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fquoted.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fquoted.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fquoted.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,9 +1,9 @@\n // ignore-order\n \n-const QUERY = '\"error\"';\n const FILTER_CRATE = 'std';\n \n const EXPECTED = {\n+    'query': '\"error\"',\n     'others': [\n         { 'path': 'std', 'name': 'error' },\n         { 'path': 'std::fmt', 'name': 'Error' },"}, {"sha": "b602bbdca188d8b00abd89d76c2c32676a12c892", "filename": "tests/rustdoc-js-std/reference-shrink.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Freference-shrink.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Freference-shrink.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Freference-shrink.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,8 +1,7 @@\n // exact-check\n \n-const QUERY = 'reference::shrink';\n-\n const EXPECTED = {\n+    'query': 'reference::shrink',\n     // avoid including the method that's not going to be in the HTML\n     'others': [],\n };"}, {"sha": "7dc38939a17d4094ec746065849660e08c51673b", "filename": "tests/rustdoc-js-std/regex.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fregex.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fregex.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fregex.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,9 +1,8 @@\n // exact-check\n \n // https://github.com/rust-lang/rust/issues/103357\n-const QUERY = 'regex';\n-\n const EXPECTED = {\n+    'query': 'regex',\n     'others': [],\n     'in_args': [],\n     'returned': [],"}, {"sha": "86ed3aceb4e845b32d9074c2bffd6fa46864ce69", "filename": "tests/rustdoc-js-std/return-specific-literal.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Freturn-specific-literal.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Freturn-specific-literal.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Freturn-specific-literal.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,6 +1,5 @@\n-const QUERY = 'struct:\"string\"';\n-\n const EXPECTED = {\n+    'query': 'struct:\"string\"',\n     'in_args': [\n         { 'path': 'std::string::String', 'name': 'ne' },\n     ],"}, {"sha": "be54a1c977254d4622d86e5aad7ce2294c522a42", "filename": "tests/rustdoc-js-std/return-specific.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Freturn-specific.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Freturn-specific.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Freturn-specific.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,6 +1,5 @@\n-const QUERY = 'struct:string';\n-\n const EXPECTED = {\n+    'query': 'struct:string',\n     'in_args': [\n         { 'path': 'std::string::String', 'name': 'ne' },\n     ],"}, {"sha": "94f82efd9b4978bf2cd641cc6bec9db18130ebb2", "filename": "tests/rustdoc-js-std/should-fail.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fshould-fail.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fshould-fail.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fshould-fail.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,8 +1,7 @@\n // should-fail\n \n-const QUERY = 'fn';\n-\n const EXPECTED = {\n+    'query': 'fn',\n     'others': [\n         { 'path': 'std', 'name': 'fn', ty: 14 },\n     ],"}, {"sha": "1fff6ee28bb42e21f255b031b0c22f65b67e5bde", "filename": "tests/rustdoc-js-std/string-from_ut.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fstring-from_ut.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fstring-from_ut.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fstring-from_ut.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,6 +1,5 @@\n-const QUERY = 'String::from_ut';\n-\n const EXPECTED = {\n+    'query': 'String::from_ut',\n     'others': [\n         { 'path': 'std::string::String', 'name': 'from_utf8' },\n         { 'path': 'std::string::String', 'name': 'from_utf8' },"}, {"sha": "dd72aaa1ab86c1eeecc5fc4b3d07f3a16a7df4e8", "filename": "tests/rustdoc-js-std/struct-vec.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fstruct-vec.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fstruct-vec.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fstruct-vec.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,6 +1,5 @@\n-const QUERY = 'struct:VecD';\n-\n const EXPECTED = {\n+    'query': 'struct:VecD',\n     'others': [\n         { 'path': 'std::collections', 'name': 'VecDeque' },\n         { 'path': 'std::vec', 'name': 'Vec' },"}, {"sha": "8e84645889adfcfe066b205db5fe444aee4d8cd4", "filename": "tests/rustdoc-js-std/typed-query.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Ftyped-query.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Ftyped-query.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Ftyped-query.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,9 +1,9 @@\n // exact-check\n \n-const QUERY = 'macro:print';\n const FILTER_CRATE = 'std';\n \n const EXPECTED = {\n+    'query': 'macro:print',\n     'others': [\n         { 'path': 'std', 'name': 'print' },\n         { 'path': 'std', 'name': 'println' },"}, {"sha": "309f3543faffec1b2efd161c22e68ff4e4eebef3", "filename": "tests/rustdoc-js-std/vec-new.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fvec-new.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js-std%2Fvec-new.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fvec-new.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,6 +1,5 @@\n-const QUERY = 'Vec::new';\n-\n const EXPECTED = {\n+    'query': 'Vec::new',\n     'others': [\n         { 'path': 'std::vec::Vec', 'name': 'new' },\n         { 'path': 'alloc::vec::Vec', 'name': 'new' },"}, {"sha": "e186d510887cbba66af7d2903e8d4a241d15f8ba", "filename": "tests/rustdoc-js/basic.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fbasic.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fbasic.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fbasic.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,6 +1,5 @@\n-const QUERY = 'Fo';\n-\n const EXPECTED = {\n+    'query': 'Fo',\n     'others': [\n         { 'path': 'basic', 'name': 'Foo' },\n     ],"}, {"sha": "fd25370dff3c1ce06737a291e37289b933b27489", "filename": "tests/rustdoc-js/doc-alias-filter-out.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fdoc-alias-filter-out.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fdoc-alias-filter-out.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fdoc-alias-filter-out.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,9 +1,8 @@\n // exact-check\n \n-const QUERY = 'true';\n-\n const FILTER_CRATE = 'some_other_crate';\n \n const EXPECTED = {\n+    'query': 'true',\n     'others': [],\n };"}, {"sha": "1d2dd8b9a8cde8e5221722b8b14bb6765e9675cf", "filename": "tests/rustdoc-js/doc-alias-filter.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fdoc-alias-filter.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fdoc-alias-filter.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fdoc-alias-filter.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,10 +1,9 @@\n // exact-check\n \n-const QUERY = '\"true\"';\n-\n const FILTER_CRATE = 'doc_alias_filter';\n \n const EXPECTED = {\n+    'query': '\"true\"',\n     'others': [\n         {\n             'path': 'doc_alias_filter',"}, {"sha": "64784b5698be9e3b674ccac73feb8fbceaf4fbb9", "filename": "tests/rustdoc-js/doc-alias-whitespace.js", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fdoc-alias-whitespace.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fdoc-alias-whitespace.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fdoc-alias-whitespace.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,11 +1,8 @@\n // exact-check\n \n-const QUERY = [\n-    'Demon Lord',\n-];\n-\n const EXPECTED = [\n     {\n+        'query': 'Demon Lord',\n         'others': [\n             {\n                 'path': 'doc_alias_whitespace',"}, {"sha": "7e4e8a776d899e446379fce7e9dfba222309b86a", "filename": "tests/rustdoc-js/doc-alias.js", "status": "modified", "additions": 22, "deletions": 47, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fdoc-alias.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fdoc-alias.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fdoc-alias.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,31 +1,6 @@\n-const QUERY = [\n-    'StructItem',\n-    'StructFieldItem',\n-    'StructMethodItem',\n-    'ImplTraitItem',\n-    'StructImplConstItem',\n-    'ImplTraitFunction',\n-    'EnumItem',\n-    'VariantItem',\n-    'EnumMethodItem',\n-    'TypedefItem',\n-    'TraitItem',\n-    'TraitTypeItem',\n-    'AssociatedConstItem',\n-    'TraitFunctionItem',\n-    'FunctionItem',\n-    'ModuleItem',\n-    'ConstItem',\n-    'StaticItem',\n-    'UnionItem',\n-    'UnionFieldItem',\n-    'UnionMethodItem',\n-    'MacroItem',\n-];\n-\n const EXPECTED = [\n     {\n-        // StructItem\n+        'query': 'StructItem',\n         'others': [\n             {\n                 'path': 'doc_alias',\n@@ -37,7 +12,7 @@ const EXPECTED = [\n         ],\n     },\n     {\n-        // StructFieldItem\n+        'query': 'StructFieldItem',\n         'others': [\n             {\n                 'path': 'doc_alias::Struct',\n@@ -49,7 +24,7 @@ const EXPECTED = [\n         ],\n     },\n     {\n-        // StructMethodItem\n+        'query': 'StructMethodItem',\n         'others': [\n             {\n                 'path': 'doc_alias::Struct',\n@@ -61,11 +36,11 @@ const EXPECTED = [\n         ],\n     },\n     {\n-        // ImplTraitItem\n+        'query': 'ImplTraitItem',\n         'others': [],\n     },\n     {\n-        // StructImplConstItem\n+        'query': 'StructImplConstItem',\n         'others': [\n             {\n                 'path': 'doc_alias::Struct',\n@@ -77,7 +52,7 @@ const EXPECTED = [\n         ],\n     },\n     {\n-        // ImplTraitFunction\n+        'query': 'ImplTraitFunction',\n         'others': [\n             {\n                 'path': 'doc_alias::Struct',\n@@ -89,7 +64,7 @@ const EXPECTED = [\n         ],\n     },\n     {\n-        // EnumItem\n+        'query': 'EnumItem',\n         'others': [\n             {\n                 'path': 'doc_alias',\n@@ -101,7 +76,7 @@ const EXPECTED = [\n         ],\n     },\n     {\n-        // VariantItem\n+        'query': 'VariantItem',\n         'others': [\n             {\n                 'path': 'doc_alias::Enum',\n@@ -113,7 +88,7 @@ const EXPECTED = [\n         ],\n     },\n     {\n-        // EnumMethodItem\n+        'query': 'EnumMethodItem',\n         'others': [\n             {\n                 'path': 'doc_alias::Enum',\n@@ -125,7 +100,7 @@ const EXPECTED = [\n         ],\n     },\n     {\n-        // TypedefItem\n+        'query': 'TypedefItem',\n         'others': [\n             {\n                 'path': 'doc_alias',\n@@ -137,7 +112,7 @@ const EXPECTED = [\n         ],\n     },\n     {\n-        // TraitItem\n+        'query': 'TraitItem',\n         'others': [\n             {\n                 'path': 'doc_alias',\n@@ -149,7 +124,7 @@ const EXPECTED = [\n         ],\n     },\n     {\n-        // TraitTypeItem\n+        'query': 'TraitTypeItem',\n         'others': [\n             {\n                 'path': 'doc_alias::Trait',\n@@ -161,7 +136,7 @@ const EXPECTED = [\n         ],\n     },\n     {\n-        // AssociatedConstItem\n+        'query': 'AssociatedConstItem',\n         'others': [\n             {\n                 'path': 'doc_alias::Trait',\n@@ -173,7 +148,7 @@ const EXPECTED = [\n         ],\n     },\n     {\n-        // TraitFunctionItem\n+        'query': 'TraitFunctionItem',\n         'others': [\n             {\n                 'path': 'doc_alias::Trait',\n@@ -185,7 +160,7 @@ const EXPECTED = [\n         ],\n     },\n     {\n-        // FunctionItem\n+        'query': 'FunctionItem',\n         'others': [\n             {\n                 'path': 'doc_alias',\n@@ -197,7 +172,7 @@ const EXPECTED = [\n         ],\n     },\n     {\n-        // ModuleItem\n+        'query': 'ModuleItem',\n         'others': [\n             {\n                 'path': 'doc_alias',\n@@ -209,7 +184,7 @@ const EXPECTED = [\n         ],\n     },\n     {\n-        // ConstItem\n+        'query': 'ConstItem',\n         'others': [\n             {\n                 'path': 'doc_alias',\n@@ -225,7 +200,7 @@ const EXPECTED = [\n         ],\n     },\n     {\n-        // StaticItem\n+        'query': 'StaticItem',\n         'others': [\n             {\n                 'path': 'doc_alias',\n@@ -237,7 +212,7 @@ const EXPECTED = [\n         ],\n     },\n     {\n-        // UnionItem\n+        'query': 'UnionItem',\n         'others': [\n             {\n                 'path': 'doc_alias',\n@@ -255,7 +230,7 @@ const EXPECTED = [\n         ],\n     },\n     {\n-        // UnionFieldItem\n+        'query': 'UnionFieldItem',\n         'others': [\n             {\n                 'path': 'doc_alias::Union',\n@@ -267,7 +242,7 @@ const EXPECTED = [\n         ],\n     },\n     {\n-        // UnionMethodItem\n+        'query': 'UnionMethodItem',\n         'others': [\n             {\n                 'path': 'doc_alias::Union',\n@@ -279,7 +254,7 @@ const EXPECTED = [\n         ],\n     },\n     {\n-        // MacroItem\n+        'query': 'MacroItem',\n         'others': [\n             {\n                 'path': 'doc_alias',"}, {"sha": "ce3a76f9b7dd33539b035700ac586e0b755e94ea", "filename": "tests/rustdoc-js/exact-match.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fexact-match.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fexact-match.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fexact-match.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,6 +1,5 @@\n-const QUERY = 'si::pc';\n-\n const EXPECTED = {\n+    'query': 'si::pc',\n     'others': [\n         { 'path': 'exact_match::Si', 'name': 'pc' },\n         { 'path': 'exact_match::Psi', 'name': 'pc' },"}, {"sha": "b11123d3ed9b15bda26b105b98e4bd6579ca66d3", "filename": "tests/rustdoc-js/foreign-type-path.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fforeign-type-path.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fforeign-type-path.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fforeign-type-path.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,6 +1,5 @@\n-const QUERY = 'MyForeignType::my_method';\n-\n const EXPECTED = {\n+    'query': 'MyForeignType::my_method',\n     'others': [\n         // Test case for https://github.com/rust-lang/rust/pull/96887#pullrequestreview-967154358\n         // Validates that the parent path for a foreign type method is correct."}, {"sha": "5e33e224876fe0ade0ca215c71a08a5f5440b722", "filename": "tests/rustdoc-js/generics-impl.js", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fgenerics-impl.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fgenerics-impl.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fgenerics-impl.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,68 +1,56 @@\n // exact-check\n \n-const QUERY = [\n-    'Aaaaaaa -> u32',\n-    'Aaaaaaa -> bool',\n-    'Aaaaaaa -> usize',\n-    'Read -> u64',\n-    'trait:Read -> u64',\n-    'struct:Read -> u64',\n-    'bool -> u64',\n-    'Ddddddd -> u64',\n-    '-> Ddddddd'\n-];\n-\n const EXPECTED = [\n     {\n-        // Aaaaaaa -> u32\n+        'query': 'Aaaaaaa -> u32',\n         'others': [\n             { 'path': 'generics_impl::Aaaaaaa', 'name': 'bbbbbbb' },\n         ],\n     },\n     {\n-        // Aaaaaaa -> bool\n+        'query': 'Aaaaaaa -> bool',\n         'others': [\n             { 'path': 'generics_impl::Aaaaaaa', 'name': 'ccccccc' },\n         ],\n     },\n     {\n-        // Aaaaaaa -> usize\n+        'query': 'Aaaaaaa -> usize',\n         'others': [\n             { 'path': 'generics_impl::Aaaaaaa', 'name': 'read' },\n         ],\n     },\n     {\n-        // Read -> u64\n+        'query': 'Read -> u64',\n         'others': [\n             { 'path': 'generics_impl::Ddddddd', 'name': 'eeeeeee' },\n             { 'path': 'generics_impl::Ddddddd', 'name': 'ggggggg' },\n         ],\n     },\n     {\n-        // trait:Read -> u64\n+        'query': 'trait:Read -> u64',\n         'others': [\n             { 'path': 'generics_impl::Ddddddd', 'name': 'eeeeeee' },\n             { 'path': 'generics_impl::Ddddddd', 'name': 'ggggggg' },\n         ],\n     },\n     {\n-        // struct:Read -> u64\n+        'query': 'struct:Read -> u64',\n         'others': [],\n     },\n     {\n-        // bool -> u64\n+        'query': 'bool -> u64',\n         'others': [\n             { 'path': 'generics_impl::Ddddddd', 'name': 'fffffff' },\n         ],\n     },\n     {\n-        // Ddddddd -> u64\n+        'query': 'Ddddddd -> u64',\n         'others': [\n             { 'path': 'generics_impl::Ddddddd', 'name': 'ggggggg' },\n         ],\n     },\n     {\n-        // -> Ddddddd\n+        'query': '-> Ddddddd',\n         'others': [\n             { 'path': 'generics_impl::Ddddddd', 'name': 'hhhhhhh' },\n         ],"}, {"sha": "7097cabe7a21f991dc5091294a3dd0f7c1142b44", "filename": "tests/rustdoc-js/generics-multi-trait.js", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fgenerics-multi-trait.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fgenerics-multi-trait.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fgenerics-multi-trait.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,14 +1,9 @@\n // exact-check\n \n-const QUERY = [\n-    'Result<SomeTrait>',\n-    'Zzzzzzzzzzzzzzzzzz',\n-    'Nonononononononono',\n-];\n-\n const EXPECTED = [\n     // check one of the generic items\n     {\n+        'query': 'Result<SomeTrait>',\n         'in_args': [\n             { 'path': 'generics_multi_trait', 'name': 'beta' },\n         ],\n@@ -17,6 +12,7 @@ const EXPECTED = [\n         ],\n     },\n     {\n+        'query': 'Zzzzzzzzzzzzzzzzzz',\n         'in_args': [\n             { 'path': 'generics_multi_trait', 'name': 'beta' },\n         ],\n@@ -26,6 +22,7 @@ const EXPECTED = [\n     },\n     // ignore the name of the generic itself\n     {\n+        'query': 'Nonononononononono',\n         'in_args': [],\n         'returned': [],\n     },"}, {"sha": "294c19490748966c1630f8ea53aabe5098e60ecf", "filename": "tests/rustdoc-js/generics-nested.js", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fgenerics-nested.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fgenerics-nested.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fgenerics-nested.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,31 +1,24 @@\n // exact-check\n \n-const QUERY = [\n-    '-> Out<First<Second>>',\n-    '-> Out<Second<First>>',\n-    '-> Out<First, Second>',\n-    '-> Out<Second, First>',\n-];\n-\n const EXPECTED = [\n     {\n-        // -> Out<First<Second>>\n+        'query': '-> Out<First<Second>>',\n         'others': [\n             { 'path': 'generics_nested', 'name': 'alef' },\n         ],\n     },\n     {\n-        // -> Out<Second<First>>\n+        'query': '-> Out<Second<First>>',\n         'others': [],\n     },\n     {\n-        // -> Out<First, Second>\n+        'query': '-> Out<First, Second>',\n         'others': [\n             { 'path': 'generics_nested', 'name': 'bet' },\n         ],\n     },\n     {\n-        // -> Out<Second, First>\n+        'query': '-> Out<Second, First>',\n         'others': [\n             { 'path': 'generics_nested', 'name': 'bet' },\n         ],"}, {"sha": "4ccfb8f4e4d025fd88aa774c494d137549372c9b", "filename": "tests/rustdoc-js/generics-trait.js", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fgenerics-trait.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fgenerics-trait.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fgenerics-trait.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,45 +1,35 @@\n // exact-check\n \n-const QUERY = [\n-    'Result<SomeTrait>',\n-    'Result<SomeTraiz>',\n-    'OtherThingxxxxxxxx',\n-    'OtherThingxxxxxxxy',\n-];\n-\n-const CORRECTIONS = [\n-    null,\n-    null,\n-    null,\n-    'OtherThingxxxxxxxx',\n-];\n-\n const EXPECTED = [\n-    // Result<SomeTrait>\n     {\n+        'query': 'Result<SomeTrait>',\n+        'correction': null,\n         'in_args': [\n             { 'path': 'generics_trait', 'name': 'beta' },\n         ],\n         'returned': [\n             { 'path': 'generics_trait', 'name': 'bet' },\n         ],\n     },\n-    // Result<SomeTraiz>\n     {\n+        'query': 'Result<SomeTraiz>',\n+        'correction': null,\n         'in_args': [],\n         'returned': [],\n     },\n-    // OtherThingxxxxxxxx\n     {\n+        'query': 'OtherThingxxxxxxxx',\n+        'correction': null,\n         'in_args': [\n             { 'path': 'generics_trait', 'name': 'alpha' },\n         ],\n         'returned': [\n             { 'path': 'generics_trait', 'name': 'alef' },\n         ],\n     },\n-    // OtherThingxxxxxxxy\n     {\n+        'query': 'OtherThingxxxxxxxy',\n+        'correction': 'OtherThingxxxxxxxx',\n         'in_args': [\n             { 'path': 'generics_trait', 'name': 'alpha' },\n         ],"}, {"sha": "ebc92ccfc05759efd70b9a3521535adcbb4643fd", "filename": "tests/rustdoc-js/generics.js", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fgenerics.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fgenerics.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fgenerics.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,20 +1,8 @@\n // exact-check\n \n-const QUERY = [\n-    'R<P>',\n-    'R<struct:P>',\n-    'R<enum:P>',\n-    '\"P\"',\n-    'P',\n-    'ExtraCreditStructMulti<ExtraCreditInnerMulti, ExtraCreditInnerMulti>',\n-    'TraitCat',\n-    'TraitDog',\n-    'Result<String>',\n-];\n-\n const EXPECTED = [\n     {\n-        // R<P>\n+        'query': 'R<P>',\n         'returned': [\n             { 'path': 'generics', 'name': 'alef' },\n         ],\n@@ -23,7 +11,7 @@ const EXPECTED = [\n         ],\n     },\n     {\n-        // R<struct:P>\n+        'query': 'R<struct:P>',\n         'returned': [\n             { 'path': 'generics', 'name': 'alef' },\n         ],\n@@ -32,12 +20,12 @@ const EXPECTED = [\n         ],\n     },\n     {\n-        // R<enum:P>\n+        'query': 'R<enum:P>',\n         'returned': [],\n         'in_args': [],\n     },\n     {\n-        // \"P\"\n+        'query': '\"P\"',\n         'others': [\n             { 'path': 'generics', 'name': 'P' },\n         ],\n@@ -49,7 +37,7 @@ const EXPECTED = [\n         ],\n     },\n     {\n-        // P\n+        'query': 'P',\n         'returned': [\n             { 'path': 'generics', 'name': 'alef' },\n         ],\n@@ -58,26 +46,26 @@ const EXPECTED = [\n         ],\n     },\n     {\n-        // \"ExtraCreditStructMulti\"<ExtraCreditInnerMulti, ExtraCreditInnerMulti>\n+        'query': '\"ExtraCreditStructMulti\"<ExtraCreditInnerMulti, ExtraCreditInnerMulti>',\n         'in_args': [\n             { 'path': 'generics', 'name': 'extracreditlabhomework' },\n         ],\n         'returned': [],\n     },\n     {\n-        // TraitCat\n+        'query': 'TraitCat',\n         'in_args': [\n             { 'path': 'generics', 'name': 'gamma' },\n         ],\n     },\n     {\n-        // TraitDog\n+        'query': 'TraitDog',\n         'in_args': [\n             { 'path': 'generics', 'name': 'gamma' },\n         ],\n     },\n     {\n-        // Result<String>\n+        'query': 'Result<String>',\n         'others': [],\n         'returned': [\n             { 'path': 'generics', 'name': 'super_soup' },"}, {"sha": "710e594b54774b321b225054837a9c080344313d", "filename": "tests/rustdoc-js/impl-trait.js", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fimpl-trait.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fimpl-trait.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fimpl-trait.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,40 +1,32 @@\n // ignore-order\n \n-const QUERY = [\n-    'Aaaaaaa -> i32',\n-    'Aaaaaaa -> Aaaaaaa',\n-    'Aaaaaaa -> usize',\n-    '-> Aaaaaaa',\n-    'Aaaaaaa',\n-];\n-\n const EXPECTED = [\n     {\n-        // Aaaaaaa -> i32\n+        'query': 'Aaaaaaa -> i32',\n         'others': [\n             { 'path': 'impl_trait::Ccccccc', 'name': 'eeeeeee' },\n         ],\n     },\n     {\n-        // Aaaaaaa -> Aaaaaaa\n+        'query': 'Aaaaaaa -> Aaaaaaa',\n         'others': [\n             { 'path': 'impl_trait::Ccccccc', 'name': 'fffffff' },\n         ],\n     },\n     {\n-        // Aaaaaaa -> usize\n+        'query': 'Aaaaaaa -> usize',\n         'others': [],\n     },\n     {\n-        // -> Aaaaaaa\n+        'query': '-> Aaaaaaa',\n         'others': [\n             { 'path': 'impl_trait::Ccccccc', 'name': 'fffffff' },\n             { 'path': 'impl_trait::Ccccccc', 'name': 'ddddddd' },\n             { 'path': 'impl_trait', 'name': 'bbbbbbb' },\n         ],\n     },\n     {\n-        // Aaaaaaa\n+        'query': 'Aaaaaaa',\n         'others': [\n             { 'path': 'impl_trait', 'name': 'Aaaaaaa' },\n         ],"}, {"sha": "241f7f172885962af1a4a717edbdca226e6d6ee1", "filename": "tests/rustdoc-js/macro-search.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fmacro-search.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fmacro-search.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fmacro-search.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,8 +1,7 @@\n // exact-check\n \n-const QUERY = 'abracadabra!';\n-\n const EXPECTED = {\n+    'query': 'abracadabra!',\n     'others': [\n         { 'path': 'macro_search', 'name': 'abracadabra' },\n         { 'path': 'macro_search', 'name': 'abracadabra_b' },"}, {"sha": "7a10397ebc62037ed7eb30aa31482aeeb327cb2d", "filename": "tests/rustdoc-js/module-substring.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fmodule-substring.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fmodule-substring.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fmodule-substring.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,6 +1,5 @@\n-const QUERY = 'ig::pc';\n-\n const EXPECTED = {\n+    'query': 'ig::pc',\n     'others': [\n         { 'path': 'module_substring::Sig', 'name': 'pc' },\n         { 'path': 'module_substring::Si', 'name': 'pc' },"}, {"sha": "f2e6fe2fa61c478d92da658011ab98340f8924ac", "filename": "tests/rustdoc-js/path-ordering.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fpath-ordering.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fpath-ordering.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fpath-ordering.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,8 +1,7 @@\n // exact-check\n \n-const QUERY = 'b::ccccccc';\n-\n const EXPECTED = {\n+    'query': 'b::ccccccc',\n     'others': [\n         // `ccccccc` is an exact match for all three of these.\n         // However `b` is a closer match for `bb` than for any"}, {"sha": "ad8f6663aad12bb76e2a9893c839e323fffdc507", "filename": "tests/rustdoc-js/primitive.js", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fprimitive.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fprimitive.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fprimitive.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,33 +1,30 @@\n // exact-check\n \n-const QUERY = [\n-    \"i32\",\n-    \"str\",\n-    \"primitive:str\",\n-    \"struct:str\",\n-    \"TotoIsSomewhere\",\n-];\n-\n const EXPECTED = [\n     {\n+        'query': 'i32',\n         'in_args': [\n             { 'path': 'primitive', 'name': 'foo' },\n         ],\n     },\n     {\n+        'query': 'str',\n         'returned': [\n             { 'path': 'primitive', 'name': 'foo' },\n         ],\n     },\n     {\n+        'query': 'primitive:str',\n         'returned': [\n             { 'path': 'primitive', 'name': 'foo' },\n         ],\n     },\n     {\n+        'query': 'struct:str',\n         'returned': [],\n     },\n     {\n+        'query': 'TotoIsSomewhere',\n         'others': [],\n         'in_args': [],\n         'returned': [],"}, {"sha": "da72fdce3db93921c58106eff7ddf310b3890247", "filename": "tests/rustdoc-js/prototype.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fprototype.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fprototype.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fprototype.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,14 +1,14 @@\n // exact-check\n \n-const QUERY = ['constructor', '__proto__'];\n-\n const EXPECTED = [\n     {\n+        'query': 'constructor',\n         'others': [],\n         'returned': [],\n         'in_args': [],\n     },\n     {\n+        'query': '__proto__',\n         'others': [],\n         'returned': [],\n         'in_args': [],"}, {"sha": "f2b1294ee3c86da7c383cb3df98ac9276d3b38be", "filename": "tests/rustdoc-js/raw-pointer.js", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fraw-pointer.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fraw-pointer.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fraw-pointer.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,33 +1,25 @@\n // ignore-order\n \n-const QUERY = [\n-    'Aaaaaaa -> i32',\n-    'Aaaaaaa -> Aaaaaaa',\n-    'Aaaaaaa -> usize',\n-    '-> Aaaaaaa',\n-    'Aaaaaaa',\n-];\n-\n const EXPECTED = [\n     {\n-        // Aaaaaaa -> i32\n+        'query': 'Aaaaaaa -> i32',\n         'others': [\n             { 'path': 'raw_pointer::Ccccccc', 'name': 'eeeeeee' },\n         ],\n     },\n     {\n-        // Aaaaaaa -> Aaaaaaa\n+        'query': 'Aaaaaaa -> Aaaaaaa',\n         'others': [\n             { 'path': 'raw_pointer::Ccccccc', 'name': 'fffffff' },\n             { 'path': 'raw_pointer::Ccccccc', 'name': 'ggggggg' },\n         ],\n     },\n     {\n-        // Aaaaaaa -> usize\n+        'query': 'Aaaaaaa -> usize',\n         'others': [],\n     },\n     {\n-        // -> Aaaaaaa\n+        'query': '-> Aaaaaaa',\n         'others': [\n             { 'path': 'raw_pointer::Ccccccc', 'name': 'fffffff' },\n             { 'path': 'raw_pointer::Ccccccc', 'name': 'ggggggg' },\n@@ -36,7 +28,7 @@ const EXPECTED = [\n         ],\n     },\n     {\n-        // Aaaaaaa\n+        'query': 'Aaaaaaa',\n         'others': [\n             { 'path': 'raw_pointer', 'name': 'Aaaaaaa' },\n         ],"}, {"sha": "9021cc2e90fe0187dd5da1399cdddb2500c6b50c", "filename": "tests/rustdoc-js/reexport.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Freexport.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Freexport.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Freexport.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,15 +1,15 @@\n // exact-check\n \n-const QUERY = ['Subscriber', 'AnotherOne'];\n-\n const EXPECTED = [\n     {\n+        'query': 'Subscriber',\n         'others': [\n             { 'path': 'reexport::fmt', 'name': 'Subscriber' },\n             { 'path': 'reexport', 'name': 'FmtSubscriber' },\n         ],\n     },\n     {\n+        'query': 'AnotherOne',\n         'others': [\n             { 'path': 'reexport', 'name': 'AnotherOne' },\n         ],"}, {"sha": "4b598cd80cc07d2d3ba75b21e1aeed662774ad88", "filename": "tests/rustdoc-js/search-bag-semantics.js", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fsearch-bag-semantics.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fsearch-bag-semantics.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fsearch-bag-semantics.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,18 +1,15 @@\n // exact-check\n \n-const QUERY = [\n-    'P',\n-    'P, P',\n-];\n-\n const EXPECTED = [\n     {\n+        'query': 'P',\n         'in_args': [\n             { 'path': 'search_bag_semantics', 'name': 'alacazam' },\n             { 'path': 'search_bag_semantics', 'name': 'abracadabra' },\n         ],\n     },\n     {\n+        'query': 'P, P',\n         'others': [\n             { 'path': 'search_bag_semantics', 'name': 'abracadabra' },\n         ],"}, {"sha": "5048e0443c1c2191b0d551e467c0e7c5b1019e59", "filename": "tests/rustdoc-js/search-short-types.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fsearch-short-types.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fsearch-short-types.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fsearch-short-types.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,6 +1,5 @@\n-const QUERY = 'P';\n-\n const EXPECTED = {\n+    'query': 'P',\n     'others': [\n         { 'path': 'search_short_types', 'name': 'P' },\n         { 'path': 'search_short_types::VeryLongTypeName', 'name': 'p' },"}, {"sha": "1c06566920c2b57fc3f71ee8983a37d9865594d5", "filename": "tests/rustdoc-js/slice-array.js", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fslice-array.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fslice-array.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fslice-array.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,63 +1,52 @@\n // exact-check\n \n-const QUERY = [\n-    'R<primitive:slice<P>>',\n-    'primitive:slice<R<P>>',\n-    'R<primitive:slice<Q>>',\n-    'primitive:slice<R<Q>>',\n-    'R<primitive:array<Q>>',\n-    'primitive:array<R<Q>>',\n-    'primitive:array<TraitCat>',\n-    'primitive:array<TraitDog>',\n-];\n-\n const EXPECTED = [\n     {\n-        // R<primitive:slice<P>>\n+        'query': 'R<primitive:slice<P>>',\n         'returned': [],\n         'in_args': [\n             { 'path': 'slice_array', 'name': 'alpha' },\n         ],\n     },\n     {\n-        // primitive:slice<R<P>>\n+        'query': 'primitive:slice<R<P>>',\n         'returned': [\n             { 'path': 'slice_array', 'name': 'alef' },\n         ],\n         'in_args': [],\n     },\n     {\n-        // R<primitive:slice<Q>>\n+        'query': 'R<primitive:slice<Q>>',\n         'returned': [],\n         'in_args': [],\n     },\n     {\n-        // primitive:slice<R<Q>>\n+        'query': 'primitive:slice<R<Q>>',\n         'returned': [],\n         'in_args': [],\n     },\n     {\n-        // R<primitive:array<Q>>\n+        'query': 'R<primitive:array<Q>>',\n         'returned': [\n             { 'path': 'slice_array', 'name': 'bet' },\n         ],\n         'in_args': [],\n     },\n     {\n-        // primitive:array<R<Q>>\n+        'query': 'primitive:array<R<Q>>',\n         'returned': [],\n         'in_args': [\n             { 'path': 'slice_array', 'name': 'beta' },\n         ],\n     },\n     {\n-        // primitive::array<TraitCat>\n+        'query': 'primitive:array<TraitCat>',\n         'in_args': [\n             { 'path': 'slice_array', 'name': 'gamma' },\n         ],\n     },\n     {\n-        // primitive::array<TraitDog>\n+        'query': 'primitive:array<TraitDog>',\n         'in_args': [\n             { 'path': 'slice_array', 'name': 'gamma' },\n         ],"}, {"sha": "7b9bec7aea832bc7927cab86a3f1511f1c6b9893", "filename": "tests/rustdoc-js/struct-like-variant.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fstruct-like-variant.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fstruct-like-variant.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fstruct-like-variant.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,6 +1,5 @@\n-const QUERY = 'name';\n-\n const EXPECTED = {\n+    'query': 'name',\n     'others': [\n         { 'path': 'struct_like_variant::Enum::Bar', 'name': 'name', 'desc': 'This is a name.' },\n     ],"}, {"sha": "96efa992bb6851cc151e06c880cc6378192a785b", "filename": "tests/rustdoc-js/substring.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fsubstring.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fsubstring.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fsubstring.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,6 +1,5 @@\n-const QUERY = 'waker_from';\n-\n const EXPECTED = {\n+    'query': 'waker_from',\n     'others': [\n         { 'path': 'substring::SuperWaker', 'name': 'local_waker_from_nonlocal' },\n         { 'path': 'substring::SuperWakerTask', 'name': 'local_waker_from_nonlocal' },"}, {"sha": "ae3aefb0c48a042d527835f085db2700b08c899e", "filename": "tests/rustdoc-js/summaries.js", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fsummaries.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fsummaries.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fsummaries.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,19 +1,20 @@\n // ignore-tidy-linelength\n \n-const QUERY = ['summaries', 'summaries::Sidebar', 'summaries::Sidebar2'];\n-\n const EXPECTED = [\n     {\n+        'query': 'summaries',\n         'others': [\n            { 'path': '', 'name': 'summaries', 'desc': 'This <em>summary</em> has a link, [<code>code</code>], and <code>Sidebar2</code> intra-doc.' },\n         ],\n     },\n     {\n+        'query': 'summaries::Sidebar',\n         'others': [\n             { 'path': 'summaries', 'name': 'Sidebar', 'desc': 'This <code>code</code> will be rendered in a code tag.' },\n         ],\n     },\n     {\n+        'query': 'summaries::Sidebar2',\n         'others': [\n             { 'path': 'summaries', 'name': 'Sidebar2', 'desc': '' },\n         ],"}, {"sha": "8dccf197be06017f5ec2df7e4613b79e95ac31e3", "filename": "tests/rustdoc-js/where-clause.js", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fwhere-clause.js", "raw_url": "https://github.com/rust-lang/rust/raw/299929e0357c031eabb98f7c0fcf3cd9170c6c3a/tests%2Frustdoc-js%2Fwhere-clause.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fwhere-clause.js?ref=299929e0357c031eabb98f7c0fcf3cd9170c6c3a", "patch": "@@ -1,28 +1,31 @@\n-const QUERY = ['trait<nested>', '-> trait<nested>', 't1, t2', '-> shazam', 'drizzel -> shazam'];\n-\n const EXPECTED = [\n     {\n+        'query': 'trait<nested>',\n         'in_args': [\n            { 'path': 'where_clause', 'name': 'abracadabra' },\n         ],\n     },\n     {\n+        'query': '-> trait<nested>',\n         'others': [\n             { 'path': 'where_clause', 'name': 'alacazam' },\n         ],\n     },\n     {\n+        'query': 't1, t2',\n         'others': [\n             { 'path': 'where_clause', 'name': 'presto' },\n         ],\n     },\n     {\n+        'query': '-> shazam',\n         'others': [\n             { 'path': 'where_clause', 'name': 'bippety' },\n             { 'path': 'where_clause::Drizzel', 'name': 'boppety' },\n         ],\n     },\n     {\n+        'query': 'drizzel -> shazam',\n         'others': [\n             { 'path': 'where_clause::Drizzel', 'name': 'boppety' },\n         ],"}]}