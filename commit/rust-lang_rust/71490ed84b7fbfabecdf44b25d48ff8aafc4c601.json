{"sha": "71490ed84b7fbfabecdf44b25d48ff8aafc4c601", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxNDkwZWQ4NGI3ZmJmYWJlY2RmNDRiMjVkNDhmZjhhYWZjNGM2MDE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-18T19:47:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-18T19:47:46Z"}, "message": "Merge #9331\n\n9331: internal: add index to minicore r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "2ab97438a45f9dc6cf72d42209923df19aa5d789", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ab97438a45f9dc6cf72d42209923df19aa5d789"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71490ed84b7fbfabecdf44b25d48ff8aafc4c601", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgzPhiCRBK7hj4Ov3rIwAAOKkIAJOIkfZVozF7HzUvlRYLXTZZ\neFlD26KdLGJWFmE2L9wo4xA+Q784O2ON/xGRC5ETSbpU9NK0Poc1ODYN1loJyhyU\ng3Rzycy9tFXOC6bUWK2clP4IGcyuUvA2Gl5XQw3n/Ws53SsuBce92oN3X93QebY6\nwRUfjDjFJi6X0LL7R0edjyhXkPdHiTzV8EoH+NgV/rraHVQwIaED+9YBngHEVTPp\nr4BuO3ss2mWr7Ai71TY0mQ5+NyW+5W6IyHsTwboMSDjqpeYibFvMFNJDHrZtfgEI\nB4BH/7qNHJu6PlJRQQvIWrtekoKrw1KvAemVc6q6OuoS248cpHS4ACAomdCaqJM=\n=+HmQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 2ab97438a45f9dc6cf72d42209923df19aa5d789\nparent 7f8f569c58583915a6e6ccae8292fa078d6bed70\nparent 89a0e58393de0ae39fc1f33a33cec87bc084a9f1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1624045666 +0000\ncommitter GitHub <noreply@github.com> 1624045666 +0000\n\nMerge #9331\n\n9331: internal: add index to minicore r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71490ed84b7fbfabecdf44b25d48ff8aafc4c601", "html_url": "https://github.com/rust-lang/rust/commit/71490ed84b7fbfabecdf44b25d48ff8aafc4c601", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71490ed84b7fbfabecdf44b25d48ff8aafc4c601/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f8f569c58583915a6e6ccae8292fa078d6bed70", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f8f569c58583915a6e6ccae8292fa078d6bed70", "html_url": "https://github.com/rust-lang/rust/commit/7f8f569c58583915a6e6ccae8292fa078d6bed70"}, {"sha": "89a0e58393de0ae39fc1f33a33cec87bc084a9f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/89a0e58393de0ae39fc1f33a33cec87bc084a9f1", "html_url": "https://github.com/rust-lang/rust/commit/89a0e58393de0ae39fc1f33a33cec87bc084a9f1"}], "stats": {"total": 296, "additions": 131, "deletions": 165}, "files": [{"sha": "d0c946d8335b0bf570dc3d902721c5c9b815b8df", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71490ed84b7fbfabecdf44b25d48ff8aafc4c601/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71490ed84b7fbfabecdf44b25d48ff8aafc4c601/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=71490ed84b7fbfabecdf44b25d48ff8aafc4c601", "patch": "@@ -114,6 +114,9 @@ impl ChangeFixture {\n \n             let meta = FileMeta::from(entry);\n             assert!(meta.path.starts_with(&source_root_prefix));\n+            if !meta.deps.is_empty() {\n+                assert!(meta.krate.is_some(), \"can't specify deps without naming the crate\")\n+            }\n \n             if meta.introduce_new_source_root {\n                 roots.push(SourceRoot::new_local(mem::take(&mut file_set)));\n@@ -199,6 +202,7 @@ impl ChangeFixture {\n     }\n }\n \n+#[derive(Debug)]\n struct FileMeta {\n     path: String,\n     krate: Option<String>,"}, {"sha": "0f418ea499812ff4c4547f4cf21b764ae1791d88", "filename": "crates/hir_ty/src/tests/regression.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/71490ed84b7fbfabecdf44b25d48ff8aafc4c601/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71490ed84b7fbfabecdf44b25d48ff8aafc4c601/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=71490ed84b7fbfabecdf44b25d48ff8aafc4c601", "patch": "@@ -792,6 +792,7 @@ fn issue_4800() {\n fn issue_4966() {\n     check_infer(\n         r#\"\n+        //- minicore: deref\n         pub trait IntoIterator {\n             type Item;\n         }\n@@ -802,12 +803,7 @@ fn issue_4966() {\n \n         struct Vec<T> {}\n \n-        #[lang = \"deref\"]\n-        pub trait Deref {\n-            type Target;\n-        }\n-\n-        impl<T> Deref for Vec<T> {\n+        impl<T> core::ops::Deref for Vec<T> {\n             type Target = [T];\n         }\n \n@@ -824,23 +820,23 @@ fn issue_4966() {\n         }\n         \"#,\n         expect![[r#\"\n-            270..274 'iter': T\n-            289..291 '{}': ()\n-            303..447 '{     ...r(); }': ()\n-            313..318 'inner': Map<|&f64| -> f64>\n-            321..345 'Map { ... 0.0 }': Map<|&f64| -> f64>\n-            330..343 '|_: &f64| 0.0': |&f64| -> f64\n-            331..332 '_': &f64\n-            340..343 '0.0': f64\n-            356..362 'repeat': Repeat<Map<|&f64| -> f64>>\n-            365..390 'Repeat...nner }': Repeat<Map<|&f64| -> f64>>\n-            383..388 'inner': Map<|&f64| -> f64>\n-            401..404 'vec': Vec<IntoIterator::Item<Repeat<Map<|&f64| -> f64>>>>\n-            407..416 'from_iter': fn from_iter<IntoIterator::Item<Repeat<Map<|&f64| -> f64>>>, Repeat<Map<|&f64| -> f64>>>(Repeat<Map<|&f64| -> f64>>) -> Vec<IntoIterator::Item<Repeat<Map<|&f64| -> f64>>>>\n-            407..424 'from_i...epeat)': Vec<IntoIterator::Item<Repeat<Map<|&f64| -> f64>>>>\n-            417..423 'repeat': Repeat<Map<|&f64| -> f64>>\n-            431..434 'vec': Vec<IntoIterator::Item<Repeat<Map<|&f64| -> f64>>>>\n-            431..444 'vec.foo_bar()': {unknown}\n+            225..229 'iter': T\n+            244..246 '{}': ()\n+            258..402 '{     ...r(); }': ()\n+            268..273 'inner': Map<|&f64| -> f64>\n+            276..300 'Map { ... 0.0 }': Map<|&f64| -> f64>\n+            285..298 '|_: &f64| 0.0': |&f64| -> f64\n+            286..287 '_': &f64\n+            295..298 '0.0': f64\n+            311..317 'repeat': Repeat<Map<|&f64| -> f64>>\n+            320..345 'Repeat...nner }': Repeat<Map<|&f64| -> f64>>\n+            338..343 'inner': Map<|&f64| -> f64>\n+            356..359 'vec': Vec<IntoIterator::Item<Repeat<Map<|&f64| -> f64>>>>\n+            362..371 'from_iter': fn from_iter<IntoIterator::Item<Repeat<Map<|&f64| -> f64>>>, Repeat<Map<|&f64| -> f64>>>(Repeat<Map<|&f64| -> f64>>) -> Vec<IntoIterator::Item<Repeat<Map<|&f64| -> f64>>>>\n+            362..379 'from_i...epeat)': Vec<IntoIterator::Item<Repeat<Map<|&f64| -> f64>>>>\n+            372..378 'repeat': Repeat<Map<|&f64| -> f64>>\n+            386..389 'vec': Vec<IntoIterator::Item<Repeat<Map<|&f64| -> f64>>>>\n+            386..399 'vec.foo_bar()': {unknown}\n         \"#]],\n     );\n }"}, {"sha": "279a1354a07683aef688b2db94bcf1b4fe52be32", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 55, "deletions": 128, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/71490ed84b7fbfabecdf44b25d48ff8aafc4c601/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71490ed84b7fbfabecdf44b25d48ff8aafc4c601/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=71490ed84b7fbfabecdf44b25d48ff8aafc4c601", "patch": "@@ -567,11 +567,11 @@ fn indexing_arrays() {\n fn infer_ops_index() {\n     check_types(\n         r#\"\n-//- /main.rs crate:main deps:std\n+//- minicore: index\n struct Bar;\n struct Foo;\n \n-impl std::ops::Index<u32> for Bar {\n+impl core::ops::Index<u32> for Bar {\n     type Output = Foo;\n }\n \n@@ -580,15 +580,6 @@ fn test() {\n     let b = a[1u32];\n     b;\n } //^ Foo\n-\n-//- /std.rs crate:std\n-#[prelude_import] use ops::*;\n-mod ops {\n-    #[lang = \"index\"]\n-    pub trait Index<Idx> {\n-        type Output;\n-    }\n-}\n \"#,\n     );\n }\n@@ -597,16 +588,16 @@ mod ops {\n fn infer_ops_index_int() {\n     check_types(\n         r#\"\n-//- /main.rs crate:main deps:std\n+//- minicore: index\n struct Bar;\n struct Foo;\n \n-impl std::ops::Index<u32> for Bar {\n+impl core::ops::Index<u32> for Bar {\n     type Output = Foo;\n }\n \n struct Range;\n-impl std::ops::Index<Range> for Bar {\n+impl core::ops::Index<Range> for Bar {\n     type Output = Bar;\n }\n \n@@ -616,15 +607,6 @@ fn test() {\n     b;\n   //^ Foo\n }\n-\n-//- /std.rs crate:std\n-#[prelude_import] use ops::*;\n-mod ops {\n-    #[lang = \"index\"]\n-    pub trait Index<Idx> {\n-        type Output;\n-    }\n-}\n \"#,\n     );\n }\n@@ -633,25 +615,12 @@ mod ops {\n fn infer_ops_index_autoderef() {\n     check_types(\n         r#\"\n-//- /main.rs crate:main deps:std\n+//- minicore: index, slice\n fn test() {\n     let a = &[1u32, 2, 3];\n-    let b = a[1u32];\n+    let b = a[1];\n     b;\n } //^ u32\n-\n-//- /std.rs crate:std\n-impl<T> ops::Index<u32> for [T] {\n-    type Output = T;\n-}\n-\n-#[prelude_import] use ops::*;\n-mod ops {\n-    #[lang = \"index\"]\n-    pub trait Index<Idx> {\n-        type Output;\n-    }\n-}\n \"#,\n     );\n }\n@@ -884,12 +853,9 @@ fn test<T>(t: T) { t.foo(); }\n fn generic_param_env_deref() {\n     check_types(\n         r#\"\n-#[lang = \"deref\"]\n-trait Deref {\n-    type Target;\n-}\n+//- minicore: deref\n trait Trait {}\n-impl<T> Deref for T where T: Trait {\n+impl<T> core::ops::Deref for T where T: Trait {\n     type Target = i128;\n }\n fn test<T: Trait>(t: T) { (*t); }\n@@ -1758,20 +1724,7 @@ fn test() {\n fn fn_trait_deref_with_ty_default() {\n     check_infer(\n         r#\"\n-#[lang = \"deref\"]\n-trait Deref {\n-    type Target;\n-\n-    fn deref(&self) -> &Self::Target;\n-}\n-\n-#[lang=\"fn_once\"]\n-trait FnOnce<Args> {\n-    type Output;\n-\n-    fn call_once(self, args: Args) -> Self::Output;\n-}\n-\n+//- minicore: deref, fn\n struct Foo;\n \n impl Foo {\n@@ -1784,7 +1737,7 @@ impl<T, F> Lazy<T, F> {\n     pub fn new(f: F) -> Lazy<T, F> {}\n }\n \n-impl<T, F: FnOnce() -> T> Deref for Lazy<T, F> {\n+impl<T, F: FnOnce() -> T> core::ops::Deref for Lazy<T, F> {\n     type Target = T;\n }\n \n@@ -1798,32 +1751,29 @@ fn test() {\n     let r2 = lazy2.foo();\n }\"#,\n         expect![[r#\"\n-            64..68 'self': &Self\n-            165..169 'self': Self\n-            171..175 'args': Args\n-            239..243 'self': &Foo\n-            254..256 '{}': ()\n-            334..335 'f': F\n-            354..356 '{}': ()\n-            443..689 '{     ...o(); }': ()\n-            453..458 'lazy1': Lazy<Foo, || -> Foo>\n-            475..484 'Lazy::new': fn new<Foo, || -> Foo>(|| -> Foo) -> Lazy<Foo, || -> Foo>\n-            475..492 'Lazy::...| Foo)': Lazy<Foo, || -> Foo>\n-            485..491 '|| Foo': || -> Foo\n-            488..491 'Foo': Foo\n-            502..504 'r1': usize\n-            507..512 'lazy1': Lazy<Foo, || -> Foo>\n-            507..518 'lazy1.foo()': usize\n-            560..575 'make_foo_fn_ptr': fn() -> Foo\n-            591..602 'make_foo_fn': fn make_foo_fn() -> Foo\n-            612..617 'lazy2': Lazy<Foo, fn() -> Foo>\n-            634..643 'Lazy::new': fn new<Foo, fn() -> Foo>(fn() -> Foo) -> Lazy<Foo, fn() -> Foo>\n-            634..660 'Lazy::...n_ptr)': Lazy<Foo, fn() -> Foo>\n-            644..659 'make_foo_fn_ptr': fn() -> Foo\n-            670..672 'r2': usize\n-            675..680 'lazy2': Lazy<Foo, fn() -> Foo>\n-            675..686 'lazy2.foo()': usize\n-            549..551 '{}': ()\n+            36..40 'self': &Foo\n+            51..53 '{}': ()\n+            131..132 'f': F\n+            151..153 '{}': ()\n+            251..497 '{     ...o(); }': ()\n+            261..266 'lazy1': Lazy<Foo, || -> Foo>\n+            283..292 'Lazy::new': fn new<Foo, || -> Foo>(|| -> Foo) -> Lazy<Foo, || -> Foo>\n+            283..300 'Lazy::...| Foo)': Lazy<Foo, || -> Foo>\n+            293..299 '|| Foo': || -> Foo\n+            296..299 'Foo': Foo\n+            310..312 'r1': usize\n+            315..320 'lazy1': Lazy<Foo, || -> Foo>\n+            315..326 'lazy1.foo()': usize\n+            368..383 'make_foo_fn_ptr': fn() -> Foo\n+            399..410 'make_foo_fn': fn make_foo_fn() -> Foo\n+            420..425 'lazy2': Lazy<Foo, fn() -> Foo>\n+            442..451 'Lazy::new': fn new<Foo, fn() -> Foo>(fn() -> Foo) -> Lazy<Foo, fn() -> Foo>\n+            442..468 'Lazy::...n_ptr)': Lazy<Foo, fn() -> Foo>\n+            452..467 'make_foo_fn_ptr': fn() -> Foo\n+            478..480 'r2': usize\n+            483..488 'lazy2': Lazy<Foo, fn() -> Foo>\n+            483..494 'lazy2.foo()': usize\n+            357..359 '{}': ()\n         \"#]],\n     );\n }\n@@ -2972,67 +2922,44 @@ fn infer_box_fn_arg() {\n     // The type mismatch is because we don't define Unsize and CoerceUnsized\n     check_infer_with_mismatches(\n         r#\"\n-//- /lib.rs deps:std\n-\n-#[lang = \"fn_once\"]\n-pub trait FnOnce<Args> {\n-    type Output;\n-\n-    extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n-}\n-\n-#[lang = \"deref\"]\n-pub trait Deref {\n-    type Target: ?Sized;\n-\n-    fn deref(&self) -> &Self::Target;\n-}\n-\n+//- minicore: fn, deref, option\n #[lang = \"owned_box\"]\n pub struct Box<T: ?Sized> {\n     inner: *mut T,\n }\n \n-impl<T: ?Sized> Deref for Box<T> {\n+impl<T: ?Sized> core::ops::Deref for Box<T> {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n         &self.inner\n     }\n }\n \n-enum Option<T> {\n-    None,\n-    Some(T)\n-}\n-\n fn foo() {\n-    let s = Option::None;\n+    let s = None;\n     let f: Box<dyn FnOnce(&Option<i32>)> = box (|ps| {});\n     f(&s);\n }\"#,\n         expect![[r#\"\n-            100..104 'self': Self\n-            106..110 'args': Args\n-            214..218 'self': &Self\n-            384..388 'self': &Box<T>\n-            396..423 '{     ...     }': &T\n-            406..417 '&self.inner': &*mut T\n-            407..411 'self': &Box<T>\n-            407..417 'self.inner': *mut T\n-            478..576 '{     ...&s); }': ()\n-            488..489 's': Option<i32>\n-            492..504 'Option::None': Option<i32>\n-            514..515 'f': Box<dyn FnOnce(&Option<i32>)>\n-            549..562 'box (|ps| {})': Box<|{unknown}| -> ()>\n-            554..561 '|ps| {}': |{unknown}| -> ()\n-            555..557 'ps': {unknown}\n-            559..561 '{}': ()\n-            568..569 'f': Box<dyn FnOnce(&Option<i32>)>\n-            568..573 'f(&s)': ()\n-            570..572 '&s': &Option<i32>\n-            571..572 's': Option<i32>\n-            549..562: expected Box<dyn FnOnce(&Option<i32>)>, got Box<|{unknown}| -> ()>\n+            154..158 'self': &Box<T>\n+            166..193 '{     ...     }': &T\n+            176..187 '&self.inner': &*mut T\n+            177..181 'self': &Box<T>\n+            177..187 'self.inner': *mut T\n+            206..296 '{     ...&s); }': ()\n+            216..217 's': Option<i32>\n+            220..224 'None': Option<i32>\n+            234..235 'f': Box<dyn FnOnce(&Option<i32>)>\n+            269..282 'box (|ps| {})': Box<|{unknown}| -> ()>\n+            274..281 '|ps| {}': |{unknown}| -> ()\n+            275..277 'ps': {unknown}\n+            279..281 '{}': ()\n+            288..289 'f': Box<dyn FnOnce(&Option<i32>)>\n+            288..293 'f(&s)': ()\n+            290..292 '&s': &Option<i32>\n+            291..292 's': Option<i32>\n+            269..282: expected Box<dyn FnOnce(&Option<i32>)>, got Box<|{unknown}| -> ()>\n         \"#]],\n     );\n }"}, {"sha": "05a2b1293e4a35360f4de156866180da58c8d202", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71490ed84b7fbfabecdf44b25d48ff8aafc4c601/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71490ed84b7fbfabecdf44b25d48ff8aafc4c601/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=71490ed84b7fbfabecdf44b25d48ff8aafc4c601", "patch": "@@ -3014,8 +3014,8 @@ fn foo() {\n                                     file_id: FileId(\n                                         1,\n                                     ),\n-                                    full_range: 250..432,\n-                                    focus_range: 289..295,\n+                                    full_range: 251..433,\n+                                    focus_range: 290..296,\n                                     name: \"Future\",\n                                     kind: Trait,\n                                     description: \"pub trait Future\","}, {"sha": "9bec03e175c995b3b99f7980e0d876da6bca5764", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/71490ed84b7fbfabecdf44b25d48ff8aafc4c601/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71490ed84b7fbfabecdf44b25d48ff8aafc4c601/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=71490ed84b7fbfabecdf44b25d48ff8aafc4c601", "patch": "@@ -1269,16 +1269,11 @@ fn bar(t: &Foo) {}\n     fn suggest_deref_fn_ret() {\n         check_relevance(\n             r#\"\n-#[lang = \"deref\"]\n-trait Deref {\n-    type Target;\n-    fn deref(&self) -> &Self::Target;\n-}\n-\n+//- minicore: deref\n struct S;\n struct T(S);\n \n-impl Deref for T {\n+impl core::ops::Deref for T {\n     type Target = S;\n \n     fn deref(&self) -> &Self::Target {\n@@ -1292,15 +1287,16 @@ fn bar() -> T {}\n fn main() {\n     foo($0);\n }\n-            \"#,\n+\"#,\n             expect![[r#\"\n-                tt Deref []\n-                fn bar() []\n-                fn &bar() [type]\n-                fn foo(\u2026) []\n                 st T []\n                 st S []\n                 fn main() []\n+                fn bar() []\n+                fn &bar() [type]\n+                fn foo(\u2026) []\n+                md core []\n+                tt Sized []\n             \"#]],\n         )\n     }"}, {"sha": "71f07d38a70d00a4acd6d9a4e6feb8540d689a82", "filename": "crates/test_utils/src/minicore.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/71490ed84b7fbfabecdf44b25d48ff8aafc4c601/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71490ed84b7fbfabecdf44b25d48ff8aafc4c601/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fminicore.rs?ref=71490ed84b7fbfabecdf44b25d48ff8aafc4c601", "patch": "@@ -15,6 +15,7 @@\n //!     range:\n //!     deref: sized\n //!     deref_mut: deref\n+//!     index: sized\n //!     fn:\n //!     pin:\n //!     future: pin\n@@ -167,6 +168,48 @@ pub mod ops {\n     };\n     // endregion:deref\n \n+    // region:index\n+    mod index {\n+        #[lang = \"index\"]\n+        pub trait Index<Idx: ?Sized> {\n+            type Output: ?Sized;\n+            fn index(&self, index: Idx) -> &Self::Output;\n+        }\n+        #[lang = \"index_mut\"]\n+        pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n+            fn index_mut(&mut self, index: Idx) -> &mut Self::Output;\n+        }\n+\n+        // region:slice\n+        impl<T, I> Index<I> for [T]\n+        where\n+            I: SliceIndex<[T]>,\n+        {\n+            type Output = I::Output;\n+            fn index(&self, index: I) -> &I::Output {\n+                loop {}\n+            }\n+        }\n+        impl<T, I> IndexMut<I> for [T]\n+        where\n+            I: SliceIndex<[T]>,\n+        {\n+            fn index_mut(&mut self, index: I) -> &mut I::Output {\n+                loop {}\n+            }\n+        }\n+\n+        pub unsafe trait SliceIndex<T: ?Sized> {\n+            type Output: ?Sized;\n+        }\n+        unsafe impl<T> SliceIndex<[T]> for usize {\n+            type Output = T;\n+        }\n+        // endregion:slice\n+    }\n+    pub use self::index::{Index, IndexMut};\n+    // endregion:index\n+\n     // region:range\n     mod range {\n         #[lang = \"RangeFull\"]"}]}