{"sha": "8bf17584e01d85c631bcb19b7cd0f95e84c9a9b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiZjE3NTg0ZTAxZDg1YzYzMWJjYjE5YjdjZDBmOTVlODRjOWE5YjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-25T04:42:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-25T04:42:56Z"}, "message": "Auto merge of #68269 - csmoe:temp, r=estebank\n\nSuggest to shorten temporary borrow from raw pointer\n\nCloses https://github.com/rust-lang/rust/issues/65436\nr? @estebank\ncc @tmandry", "tree": {"sha": "9c7deec833818c906f8663b4bbb24fdc7ad74254", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c7deec833818c906f8663b4bbb24fdc7ad74254"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bf17584e01d85c631bcb19b7cd0f95e84c9a9b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bf17584e01d85c631bcb19b7cd0f95e84c9a9b1", "html_url": "https://github.com/rust-lang/rust/commit/8bf17584e01d85c631bcb19b7cd0f95e84c9a9b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bf17584e01d85c631bcb19b7cd0f95e84c9a9b1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb", "html_url": "https://github.com/rust-lang/rust/commit/8647aa1a2ce279f8ec7cc5252d10b8cb9ea504eb"}, {"sha": "cd7b5edc2cac3fa0db6b464a6e94edd8f334274d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd7b5edc2cac3fa0db6b464a6e94edd8f334274d", "html_url": "https://github.com/rust-lang/rust/commit/cd7b5edc2cac3fa0db6b464a6e94edd8f334274d"}], "stats": {"total": 81, "additions": 75, "deletions": 6}, "files": [{"sha": "aa5e9f65d2b54191713490f15acb6e2ed1674305", "filename": "src/librustc/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8bf17584e01d85c631bcb19b7cd0f95e84c9a9b1/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf17584e01d85c631bcb19b7cd0f95e84c9a9b1/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=8bf17584e01d85c631bcb19b7cd0f95e84c9a9b1", "patch": "@@ -12,6 +12,7 @@ use rustc_errors::{\n     error_code, pluralize, struct_span_err, Applicability, DiagnosticBuilder, Style,\n };\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::Node;\n@@ -1366,14 +1367,40 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         if let Some(expr_id) = expr {\n             let expr = hir.expect_expr(expr_id);\n-            let is_ref = tables.expr_adjustments(expr).iter().any(|adj| adj.is_region_borrow());\n+            debug!(\"target_ty evaluated from {:?}\", expr);\n+\n             let parent = hir.get_parent_node(expr_id);\n             if let Some(hir::Node::Expr(e)) = hir.find(parent) {\n-                let method_span = hir.span(parent);\n-                if tables.is_method_call(e) && is_ref {\n+                let parent_span = hir.span(parent);\n+                let parent_did = parent.owner_def_id();\n+                // ```rust\n+                // impl T {\n+                //     fn foo(&self) -> i32 {}\n+                // }\n+                // T.foo();\n+                // ^^^^^^^ a temporary `&T` created inside this method call due to `&self`\n+                // ```\n+                //\n+                let is_region_borrow =\n+                    tables.expr_adjustments(expr).iter().any(|adj| adj.is_region_borrow());\n+\n+                // ```rust\n+                // struct Foo(*const u8);\n+                // bar(Foo(std::ptr::null())).await;\n+                //     ^^^^^^^^^^^^^^^^^^^^^ raw-ptr `*T` created inside this struct ctor.\n+                // ```\n+                debug!(\"parent_def_kind: {:?}\", self.tcx.def_kind(parent_did));\n+                let is_raw_borrow_inside_fn_like_call = match self.tcx.def_kind(parent_did) {\n+                    Some(DefKind::Fn) | Some(DefKind::Ctor(..)) => target_ty.is_unsafe_ptr(),\n+                    _ => false,\n+                };\n+\n+                if (tables.is_method_call(e) && is_region_borrow)\n+                    || is_raw_borrow_inside_fn_like_call\n+                {\n                     err.span_help(\n-                        method_span,\n-                        \"consider moving this method call into a `let` \\\n+                        parent_span,\n+                        \"consider moving this into a `let` \\\n                         binding to create a shorter lived borrow\",\n                     );\n                 }"}, {"sha": "1e52d74f1559c7dd3d9b766007fad3aa9b90b069", "filename": "src/test/ui/async-await/issue-64130-4-async-move.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bf17584e01d85c631bcb19b7cd0f95e84c9a9b1/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bf17584e01d85c631bcb19b7cd0f95e84c9a9b1/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr?ref=8bf17584e01d85c631bcb19b7cd0f95e84c9a9b1", "patch": "@@ -25,7 +25,7 @@ LL |                 let _x = get().await;\n ...\n LL |     }\n    |     - `client` is later dropped here\n-help: consider moving this method call into a `let` binding to create a shorter lived borrow\n+help: consider moving this into a `let` binding to create a shorter lived borrow\n   --> $DIR/issue-64130-4-async-move.rs:19:15\n    |\n LL |         match client.status() {"}, {"sha": "3a814b47517ba43885ae8f4b474d50c11d8b427a", "filename": "src/test/ui/async-await/issues/issue-65436-raw-ptr-not-send.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8bf17584e01d85c631bcb19b7cd0f95e84c9a9b1/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf17584e01d85c631bcb19b7cd0f95e84c9a9b1/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.rs?ref=8bf17584e01d85c631bcb19b7cd0f95e84c9a9b1", "patch": "@@ -0,0 +1,16 @@\n+// edition:2018\n+\n+struct Foo(*const u8);\n+\n+unsafe impl Send for Foo {}\n+\n+async fn bar(_: Foo) {}\n+\n+fn assert_send<T: Send>(_: T) {}\n+\n+fn main() {\n+    assert_send(async {\n+    //~^ ERROR future cannot be sent between threads safely\n+        bar(Foo(std::ptr::null())).await;\n+    })\n+}"}, {"sha": "7638ba1fe7de886ae90c89799e0c8bdf404b2e16", "filename": "src/test/ui/async-await/issues/issue-65436-raw-ptr-not-send.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8bf17584e01d85c631bcb19b7cd0f95e84c9a9b1/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bf17584e01d85c631bcb19b7cd0f95e84c9a9b1/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr?ref=8bf17584e01d85c631bcb19b7cd0f95e84c9a9b1", "patch": "@@ -0,0 +1,26 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:12:5\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |    -----------    ---- required by this bound in `assert_send`\n+...\n+LL |     assert_send(async {\n+   |     ^^^^^^^^^^^ future returned by `main` is not `Send`\n+   |\n+   = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `*const u8`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:14:9\n+   |\n+LL |         bar(Foo(std::ptr::null())).await;\n+   |         ^^^^^^^^----------------^^^^^^^^- `std::ptr::null()` is later dropped here\n+   |         |       |\n+   |         |       has type `*const u8`\n+   |         await occurs here, with `std::ptr::null()` maybe used later\n+help: consider moving this into a `let` binding to create a shorter lived borrow\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:14:13\n+   |\n+LL |         bar(Foo(std::ptr::null())).await;\n+   |             ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}