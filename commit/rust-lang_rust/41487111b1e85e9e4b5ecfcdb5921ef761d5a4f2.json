{"sha": "41487111b1e85e9e4b5ecfcdb5921ef761d5a4f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNDg3MTExYjFlODVlOWU0YjVlY2ZjZGI1OTIxZWY3NjFkNWE0ZjI=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-02-13T15:58:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-13T15:58:50Z"}, "message": "Rollup merge of #39758 - shepmaster:e0089-duplicate-text, r=GuillaumeGomez\n\nRemove duplicated \"parameter\" in E0089 text\n\nCloses #39732", "tree": {"sha": "c24c690c021fbd0844e2413337deb8daa4a50d31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c24c690c021fbd0844e2413337deb8daa4a50d31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41487111b1e85e9e4b5ecfcdb5921ef761d5a4f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41487111b1e85e9e4b5ecfcdb5921ef761d5a4f2", "html_url": "https://github.com/rust-lang/rust/commit/41487111b1e85e9e4b5ecfcdb5921ef761d5a4f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41487111b1e85e9e4b5ecfcdb5921ef761d5a4f2/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b79f33c65693f1cd727da68abcc40e77349b073", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b79f33c65693f1cd727da68abcc40e77349b073", "html_url": "https://github.com/rust-lang/rust/commit/5b79f33c65693f1cd727da68abcc40e77349b073"}, {"sha": "1c998416ee1eed8c7377c081668651b364cb738e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c998416ee1eed8c7377c081668651b364cb738e", "html_url": "https://github.com/rust-lang/rust/commit/1c998416ee1eed8c7377c081668651b364cb738e"}], "stats": {"total": 80, "additions": 44, "deletions": 36}, "files": [{"sha": "4b36e682f1e82e446428cde49efcda9a061450ab", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/41487111b1e85e9e4b5ecfcdb5921ef761d5a4f2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41487111b1e85e9e4b5ecfcdb5921ef761d5a4f2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=41487111b1e85e9e4b5ecfcdb5921ef761d5a4f2", "patch": "@@ -4510,28 +4510,32 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n         };\n \n-        let count = |n| {\n-            format!(\"{} parameter{}\", n, if n == 1 { \"\" } else { \"s\" })\n+        let count_lifetime_params = |n| {\n+            format!(\"{} lifetime parameter{}\", n, if n == 1 { \"\" } else { \"s\" })\n+        };\n+        let count_type_params = |n| {\n+            format!(\"{} type parameter{}\", n, if n == 1 { \"\" } else { \"s\" })\n         };\n \n         // Check provided lifetime parameters.\n         let lifetime_defs = segment.map_or(&[][..], |(_, generics)| &generics.regions);\n         if lifetimes.len() > lifetime_defs.len() {\n+            let expected_text = count_lifetime_params(lifetime_defs.len());\n+            let actual_text = count_lifetime_params(lifetimes.len());\n             struct_span_err!(self.tcx.sess, span, E0088,\n                              \"too many lifetime parameters provided: \\\n-                              expected {}, found {}\",\n-                              count(lifetime_defs.len()),\n-                              count(lifetimes.len()))\n-                .span_label(span, &format!(\"unexpected lifetime parameter{}\",\n-                                           match lifetimes.len() { 1 => \"\", _ => \"s\" }))\n+                              expected at most {}, found {}\",\n+                             expected_text, actual_text)\n+                .span_label(span, &format!(\"expected {}\", expected_text))\n                 .emit();\n         } else if lifetimes.len() > 0 && lifetimes.len() < lifetime_defs.len() {\n+            let expected_text = count_lifetime_params(lifetime_defs.len());\n+            let actual_text = count_lifetime_params(lifetimes.len());\n             struct_span_err!(self.tcx.sess, span, E0090,\n                              \"too few lifetime parameters provided: \\\n-                             expected {}, found {}\",\n-                             count(lifetime_defs.len()),\n-                             count(lifetimes.len()))\n-                .span_label(span, &format!(\"too few lifetime parameters\"))\n+                              expected {}, found {}\",\n+                             expected_text, actual_text)\n+                .span_label(span, &format!(\"expected {}\", expected_text))\n                 .emit();\n         }\n \n@@ -4552,29 +4556,27 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                     .count();\n         if types.len() > type_defs.len() {\n             let span = types[type_defs.len()].span;\n+            let expected_text = count_type_params(type_defs.len());\n+            let actual_text = count_type_params(types.len());\n             struct_span_err!(self.tcx.sess, span, E0087,\n                              \"too many type parameters provided: \\\n                               expected at most {}, found {}\",\n-                             count(type_defs.len()),\n-                             count(types.len()))\n-                .span_label(span, &format!(\"too many type parameters\")).emit();\n+                             expected_text, actual_text)\n+                .span_label(span, &format!(\"expected {}\", expected_text))\n+                .emit();\n \n             // To prevent derived errors to accumulate due to extra\n             // type parameters, we force instantiate_value_path to\n             // use inference variables instead of the provided types.\n             *segment = None;\n         } else if !infer_types && types.len() < required_len {\n-            let adjust = |len| if len > 1 { \"parameters\" } else { \"parameter\" };\n-            let required_param_str = adjust(required_len);\n-            let actual_param_str = adjust(types.len());\n+            let expected_text = count_type_params(required_len);\n+            let actual_text = count_type_params(types.len());\n             struct_span_err!(self.tcx.sess, span, E0089,\n                              \"too few type parameters provided: \\\n-                              expected {} {}, found {} {}\",\n-                             count(required_len),\n-                             required_param_str,\n-                             count(types.len()),\n-                             actual_param_str)\n-                .span_label(span, &format!(\"expected {} type {}\", required_len, required_param_str))\n+                              expected {}, found {}\",\n+                             expected_text, actual_text)\n+                .span_label(span, &format!(\"expected {}\", expected_text))\n                 .emit();\n         }\n "}, {"sha": "0b8150affc0c022fc5f27b1c2ac242b29695bc63", "filename": "src/test/compile-fail/E0087.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/41487111b1e85e9e4b5ecfcdb5921ef761d5a4f2/src%2Ftest%2Fcompile-fail%2FE0087.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41487111b1e85e9e4b5ecfcdb5921ef761d5a4f2/src%2Ftest%2Fcompile-fail%2FE0087.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0087.rs?ref=41487111b1e85e9e4b5ecfcdb5921ef761d5a4f2", "patch": "@@ -8,9 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo<T>() {}\n+fn foo() {}\n+fn bar<T>() {}\n \n fn main() {\n-    foo::<f64, bool>(); //~ ERROR E0087\n-    //~^ NOTE too many type parameters\n+    foo::<f64>(); //~ ERROR expected at most 0 type parameters, found 1 type parameter [E0087]\n+                  //~^ NOTE expected 0 type parameters\n+\n+    bar::<f64, u64>(); //~ ERROR expected at most 1 type parameter, found 2 type parameters [E0087]\n+                       //~^ NOTE expected 1 type parameter\n }"}, {"sha": "de188677a1121ba4513916fa06d8313b6dd92902", "filename": "src/test/compile-fail/E0088.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/41487111b1e85e9e4b5ecfcdb5921ef761d5a4f2/src%2Ftest%2Fcompile-fail%2FE0088.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41487111b1e85e9e4b5ecfcdb5921ef761d5a4f2/src%2Ftest%2Fcompile-fail%2FE0088.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0088.rs?ref=41487111b1e85e9e4b5ecfcdb5921ef761d5a4f2", "patch": "@@ -12,9 +12,11 @@ fn f() {}\n fn g<'a>() {}\n \n fn main() {\n-    f::<'static>(); //~ ERROR E0088\n-    //~^ unexpected lifetime parameter\n+    f::<'static>();\n+    //~^ ERROR expected at most 0 lifetime parameters, found 1 lifetime parameter [E0088]\n+    //~| NOTE expected 0 lifetime parameters\n \n-    g::<'static, 'static>(); //~ ERROR E0088\n-    //~^ unexpected lifetime parameters\n+    g::<'static, 'static>();\n+    //~^ ERROR expected at most 0 lifetime parameters, found 2 lifetime parameters [E0088]\n+    //~| NOTE expected 0 lifetime parameters\n }"}, {"sha": "986630d818fff94fe03b30e77ae2600e8e521dea", "filename": "src/test/compile-fail/E0089.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/41487111b1e85e9e4b5ecfcdb5921ef761d5a4f2/src%2Ftest%2Fcompile-fail%2FE0089.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41487111b1e85e9e4b5ecfcdb5921ef761d5a4f2/src%2Ftest%2Fcompile-fail%2FE0089.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0089.rs?ref=41487111b1e85e9e4b5ecfcdb5921ef761d5a4f2", "patch": "@@ -11,7 +11,6 @@\n fn foo<T, U>() {}\n \n fn main() {\n-    foo::<f64>();\n-//~^ ERROR E0089\n-//~| NOTE expected 2 type parameters\n+    foo::<f64>(); //~ ERROR expected 2 type parameters, found 1 type parameter [E0089]\n+                  //~| NOTE expected 2 type parameters\n }"}, {"sha": "c37f37031add6827bbb03ed41a15103ee9de15e8", "filename": "src/test/compile-fail/E0090.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/41487111b1e85e9e4b5ecfcdb5921ef761d5a4f2/src%2Ftest%2Fcompile-fail%2FE0090.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41487111b1e85e9e4b5ecfcdb5921ef761d5a4f2/src%2Ftest%2Fcompile-fail%2FE0090.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0090.rs?ref=41487111b1e85e9e4b5ecfcdb5921ef761d5a4f2", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n fn foo<'a: 'b, 'b: 'a>() {}\n+\n fn main() {\n-    foo::<'static>();//~ ERROR E0090\n-                     //~^ too few lifetime parameters\n+    foo::<'static>(); //~ ERROR expected 2 lifetime parameters, found 1 lifetime parameter [E0090]\n+                      //~^ NOTE expected 2 lifetime parameters\n }"}, {"sha": "5c108e052160cf50f724f4549fbf8e6c885eb0f4", "filename": "src/test/compile-fail/ufcs-qpath-missing-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41487111b1e85e9e4b5ecfcdb5921ef761d5a4f2/src%2Ftest%2Fcompile-fail%2Fufcs-qpath-missing-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41487111b1e85e9e4b5ecfcdb5921ef761d5a4f2/src%2Ftest%2Fcompile-fail%2Fufcs-qpath-missing-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fufcs-qpath-missing-params.rs?ref=41487111b1e85e9e4b5ecfcdb5921ef761d5a4f2", "patch": "@@ -22,5 +22,5 @@ impl<'a> IntoCow<'a, str> for String {\n \n fn main() {\n     <String as IntoCow>::into_cow(\"foo\".to_string());\n-    //~^ ERROR too few type parameters provided: expected 1 parameter\n+    //~^ ERROR too few type parameters provided: expected 1 type parameter\n }"}]}