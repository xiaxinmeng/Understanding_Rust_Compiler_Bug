{"sha": "ed2fd28d385c1cc9b2ab3e91513b4d2ffc612671", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMmZkMjhkMzg1YzFjYzliMmFiM2U5MTUxM2I0ZDJmZmM2MTI2NzE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-02-16T18:36:50Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-02-17T19:12:39Z"}, "message": "parser: Set previous and unnormalized tokens in couple more places", "tree": {"sha": "8e6d69200b1221240312eee982fc4492267decd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e6d69200b1221240312eee982fc4492267decd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed2fd28d385c1cc9b2ab3e91513b4d2ffc612671", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed2fd28d385c1cc9b2ab3e91513b4d2ffc612671", "html_url": "https://github.com/rust-lang/rust/commit/ed2fd28d385c1cc9b2ab3e91513b4d2ffc612671", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed2fd28d385c1cc9b2ab3e91513b4d2ffc612671/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d33b3562e5e888eaffd2f8f1af08ca2afdbe542c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d33b3562e5e888eaffd2f8f1af08ca2afdbe542c", "html_url": "https://github.com/rust-lang/rust/commit/d33b3562e5e888eaffd2f8f1af08ca2afdbe542c"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "40d7a34a8b0d2a085ea226862d8ce79815cc76e2", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed2fd28d385c1cc9b2ab3e91513b4d2ffc612671/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2fd28d385c1cc9b2ab3e91513b4d2ffc612671/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=ed2fd28d385c1cc9b2ab3e91513b4d2ffc612671", "patch": "@@ -172,6 +172,7 @@ fn maybe_source_file_to_parser(\n     parser.unclosed_delims = unclosed_delims;\n     if parser.token == token::Eof && parser.token.span.is_dummy() {\n         parser.token.span = Span::new(end_pos, end_pos, parser.token.span.ctxt());\n+        assert!(parser.unnormalized_token.is_none());\n     }\n \n     Ok(parser)"}, {"sha": "5dc50a0cf2fde85a5aefc65ec6a21150e8d36646", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed2fd28d385c1cc9b2ab3e91513b4d2ffc612671/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2fd28d385c1cc9b2ab3e91513b4d2ffc612671/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=ed2fd28d385c1cc9b2ab3e91513b4d2ffc612671", "patch": "@@ -1400,8 +1400,9 @@ impl<'a> Parser<'a> {\n     }\n \n     fn report_invalid_macro_expansion_item(&self, args: &MacArgs) {\n+        let span = args.span().expect(\"undelimited macro call\");\n         let mut err = self.struct_span_err(\n-            self.prev_span,\n+            span,\n             \"macros that expand to items must be delimited with braces or followed by a semicolon\",\n         );\n         if self.unclosed_delims.is_empty() {\n@@ -1416,14 +1417,14 @@ impl<'a> Parser<'a> {\n             );\n         } else {\n             err.span_suggestion(\n-                self.prev_span,\n+                span,\n                 \"change the delimiters to curly braces\",\n                 \" { /* items */ }\".to_string(),\n                 Applicability::HasPlaceholders,\n             );\n         }\n         err.span_suggestion(\n-            self.prev_span.shrink_to_hi(),\n+            span.shrink_to_hi(),\n             \"add a semicolon\",\n             ';'.to_string(),\n             Applicability::MaybeIncorrect,"}, {"sha": "e04cfa374682bbb16ae56a8706de23ea82ce28a2", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed2fd28d385c1cc9b2ab3e91513b4d2ffc612671/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2fd28d385c1cc9b2ab3e91513b4d2ffc612671/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=ed2fd28d385c1cc9b2ab3e91513b4d2ffc612671", "patch": "@@ -95,7 +95,7 @@ pub struct Parser<'a> {\n     /// The current non-normalized token if it's different from `token`.\n     /// Preferable use is through the `unnormalized_token()` getter.\n     /// Use span from this token if you need to concatenate it with some neighbouring spans.\n-    unnormalized_token: Option<Token>,\n+    pub unnormalized_token: Option<Token>,\n     /// The previous normalized token.\n     /// Use span from this token if you need an isolated span.\n     prev_token: Token,\n@@ -1096,15 +1096,15 @@ impl<'a> Parser<'a> {\n                     &mut self.token_cursor.frame,\n                     self.token_cursor.stack.pop().unwrap(),\n                 );\n-                self.token.span = frame.span.entire();\n+                self.token = Token::new(TokenKind::CloseDelim(frame.delim), frame.span.close);\n+                self.unnormalized_token = None;\n                 self.bump();\n                 TokenTree::Delimited(frame.span, frame.delim, frame.tree_cursor.stream.into())\n             }\n             token::CloseDelim(_) | token::Eof => unreachable!(),\n             _ => {\n-                let token = self.token.clone();\n                 self.bump();\n-                TokenTree::Token(token)\n+                TokenTree::Token(self.prev_token.clone())\n             }\n         }\n     }"}]}