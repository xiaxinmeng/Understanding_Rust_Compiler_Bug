{"sha": "d5e45b50cdfc029a061229d9edf5f5fa58eb0353", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ZTQ1YjUwY2RmYzAyOWEwNjEyMjlkOWVkZjVmNWZhNThlYjAzNTM=", "commit": {"author": {"name": "Julian Frimmel", "email": "julian.frimmel@gmail.com", "date": "2021-03-18T14:15:28Z"}, "committer": {"name": "Julian Frimmel", "email": "julian.frimmel@gmail.com", "date": "2021-03-18T14:15:28Z"}, "message": "Incorporate review feedback #2", "tree": {"sha": "6ef6bf32d6b631281d65119a842d22fc7c27a1c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ef6bf32d6b631281d65119a842d22fc7c27a1c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5e45b50cdfc029a061229d9edf5f5fa58eb0353", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5e45b50cdfc029a061229d9edf5f5fa58eb0353", "html_url": "https://github.com/rust-lang/rust/commit/d5e45b50cdfc029a061229d9edf5f5fa58eb0353", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5e45b50cdfc029a061229d9edf5f5fa58eb0353/comments", "author": {"login": "jfrimmel", "id": 31166235, "node_id": "MDQ6VXNlcjMxMTY2MjM1", "avatar_url": "https://avatars.githubusercontent.com/u/31166235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfrimmel", "html_url": "https://github.com/jfrimmel", "followers_url": "https://api.github.com/users/jfrimmel/followers", "following_url": "https://api.github.com/users/jfrimmel/following{/other_user}", "gists_url": "https://api.github.com/users/jfrimmel/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfrimmel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfrimmel/subscriptions", "organizations_url": "https://api.github.com/users/jfrimmel/orgs", "repos_url": "https://api.github.com/users/jfrimmel/repos", "events_url": "https://api.github.com/users/jfrimmel/events{/privacy}", "received_events_url": "https://api.github.com/users/jfrimmel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jfrimmel", "id": 31166235, "node_id": "MDQ6VXNlcjMxMTY2MjM1", "avatar_url": "https://avatars.githubusercontent.com/u/31166235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfrimmel", "html_url": "https://github.com/jfrimmel", "followers_url": "https://api.github.com/users/jfrimmel/followers", "following_url": "https://api.github.com/users/jfrimmel/following{/other_user}", "gists_url": "https://api.github.com/users/jfrimmel/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfrimmel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfrimmel/subscriptions", "organizations_url": "https://api.github.com/users/jfrimmel/orgs", "repos_url": "https://api.github.com/users/jfrimmel/repos", "events_url": "https://api.github.com/users/jfrimmel/events{/privacy}", "received_events_url": "https://api.github.com/users/jfrimmel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61e5d549b49152b5fdc714fde93ab5c55e301127", "url": "https://api.github.com/repos/rust-lang/rust/commits/61e5d549b49152b5fdc714fde93ab5c55e301127", "html_url": "https://github.com/rust-lang/rust/commit/61e5d549b49152b5fdc714fde93ab5c55e301127"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "e59be12a6898c90f5aafb21654a706bddbf6d87a", "filename": "library/core/src/macros/panic.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5e45b50cdfc029a061229d9edf5f5fa58eb0353/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md", "raw_url": "https://github.com/rust-lang/rust/raw/d5e45b50cdfc029a061229d9edf5f5fa58eb0353/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md?ref=d5e45b50cdfc029a061229d9edf5f5fa58eb0353", "patch": "@@ -13,10 +13,11 @@ When using `panic!()` you can specify a string payload, that is built using\n the [`format!`] syntax. That payload is used when injecting the panic into\n the calling Rust thread, causing the thread to panic entirely.\n \n-The default `std` panic handling strategy is to print the message payload to\n-the `stderr` along with the file/line/column information of the `panic!()`\n+The behavior of the default `std` hook, i.e. the code, that runs directy\n+after the panic is invoked, is to print the message payload to the\n+`stderr` along with the file/line/column information of the `panic!()`\n call. You can override the panic hook using [`std::panic::set_hook()`].\n-Inside the hook a panic can be reaped as the [`Box`]`<`[`Any`]`>` type,\n+Inside the hook a panic can be accessed as a `&dyn Any + Send`, which\n which contains either a `&str` or `String` for regular `panic!()` invocations.\n To panic with a value of another other type, [`panic_any`] can be used.\n "}]}