{"sha": "d882b1d4f94336c5f64fd3891ee74c0b579dd395", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ODJiMWQ0Zjk0MzM2YzVmNjRmZDM4OTFlZTc0YzBiNTc5ZGQzOTU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-22T21:31:37Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-23T17:10:36Z"}, "message": "extra: Fix all code examples", "tree": {"sha": "f3665d84450fe4f861bb8888ac30a91026a85b1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3665d84450fe4f861bb8888ac30a91026a85b1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d882b1d4f94336c5f64fd3891ee74c0b579dd395", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d882b1d4f94336c5f64fd3891ee74c0b579dd395", "html_url": "https://github.com/rust-lang/rust/commit/d882b1d4f94336c5f64fd3891ee74c0b579dd395", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d882b1d4f94336c5f64fd3891ee74c0b579dd395/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f1739a8e1c45b47fc9605209701567d02195311", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f1739a8e1c45b47fc9605209701567d02195311", "html_url": "https://github.com/rust-lang/rust/commit/9f1739a8e1c45b47fc9605209701567d02195311"}], "stats": {"total": 97, "additions": 58, "deletions": 39}, "files": [{"sha": "c1763c37bb5a16e029224cf4f7e839134707c6d4", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d882b1d4f94336c5f64fd3891ee74c0b579dd395/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d882b1d4f94336c5f64fd3891ee74c0b579dd395/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=d882b1d4f94336c5f64fd3891ee74c0b579dd395", "patch": "@@ -18,18 +18,19 @@\n  * With simple pipes, without Arc, a copy would have to be made for each task.\n  *\n  * ```rust\n- * extern mod std;\n- * use extra::arc;\n- * let numbers=vec::from_fn(100, |ind| (ind as float)*rand::random());\n- * let shared_numbers=arc::Arc::new(numbers);\n+ * use extra::arc::Arc;\n+ * use std::{rand, vec};\n  *\n- *   do 10.times {\n- *       let (port, chan)  = stream();\n+ * let numbers = vec::from_fn(100, |i| (i as f32) * rand::random());\n+ * let shared_numbers = Arc::new(numbers);\n+ *\n+ *   for _ in range(0, 10) {\n+ *       let (port, chan) = Chan::new();\n  *       chan.send(shared_numbers.clone());\n  *\n  *       do spawn {\n- *           let shared_numbers=port.recv();\n- *           let local_numbers=shared_numbers.get();\n+ *           let shared_numbers = port.recv();\n+ *           let local_numbers = shared_numbers.get();\n  *\n  *           // Work with the local numbers\n  *       }\n@@ -448,15 +449,18 @@ impl<T:Freeze + Send> RWArc<T> {\n      * # Example\n      *\n      * ```rust\n-     * do arc.write_downgrade |mut write_token| {\n-     *     do write_token.write_cond |state, condvar| {\n-     *         ... exclusive access with mutable state ...\n-     *     }\n+     * use extra::arc::RWArc;\n+     *\n+     * let arc = RWArc::new(1);\n+     * arc.write_downgrade(|mut write_token| {\n+     *     write_token.write_cond(|state, condvar| {\n+     *         // ... exclusive access with mutable state ...\n+     *     });\n      *     let read_token = arc.downgrade(write_token);\n-     *     do read_token.read |state| {\n-     *         ... shared access with immutable state ...\n-     *     }\n-     * }\n+     *     read_token.read(|state| {\n+     *         // ... shared access with immutable state ...\n+     *     });\n+     * })\n      * ```\n      */\n     pub fn write_downgrade<U>(&self, blk: |v: RWWriteMode<T>| -> U) -> U {"}, {"sha": "cb82c1abe1ebc0bb1852aba1770b6e49d54a1090", "filename": "src/libextra/future.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d882b1d4f94336c5f64fd3891ee74c0b579dd395/src%2Flibextra%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d882b1d4f94336c5f64fd3891ee74c0b579dd395/src%2Flibextra%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffuture.rs?ref=d882b1d4f94336c5f64fd3891ee74c0b579dd395", "patch": "@@ -15,9 +15,10 @@\n  * # Example\n  *\n  * ```rust\n+ * use extra::future::Future;\n  * # fn fib(n: uint) -> uint {42};\n  * # fn make_a_sandwich() {};\n- * let mut delayed_fib = extra::future::spawn (|| fib(5000) );\n+ * let mut delayed_fib = do Future::spawn { fib(5000) };\n  * make_a_sandwich();\n  * println!(\"fib(5000) = {}\", delayed_fib.get())\n  * ```"}, {"sha": "bf75fa98b06c9d8b76279131cccecd8b8e6c869f", "filename": "src/libextra/glob.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d882b1d4f94336c5f64fd3891ee74c0b579dd395/src%2Flibextra%2Fglob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d882b1d4f94336c5f64fd3891ee74c0b579dd395/src%2Flibextra%2Fglob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fglob.rs?ref=d882b1d4f94336c5f64fd3891ee74c0b579dd395", "patch": "@@ -53,8 +53,10 @@ pub struct GlobIterator {\n /// `puppies.jpg` and `hamsters.gif`:\n ///\n /// ```rust\n+/// use extra::glob::glob;\n+///\n /// for path in glob(\"/media/pictures/*.jpg\") {\n-///     println(path.to_str());\n+///     println!(\"{}\", path.display());\n /// }\n /// ```\n ///\n@@ -188,21 +190,23 @@ enum MatchResult {\n impl Pattern {\n \n     /**\n-     * This function compiles Unix shell style patterns: `?` matches any single character,\n-     * `*` matches any (possibly empty) sequence of characters and `[...]` matches any character\n-     * inside the brackets, unless the first character is `!` in which case it matches any\n-     * character except those between the `!` and the `]`. Character sequences can also specify\n-     * ranges of characters, as ordered by Unicode, so e.g. `[0-9]` specifies any character\n-     * between 0 and 9 inclusive.\n+     * This function compiles Unix shell style patterns: `?` matches any single\n+     * character, `*` matches any (possibly empty) sequence of characters and\n+     * `[...]` matches any character inside the brackets, unless the first\n+     * character is `!` in which case it matches any character except those\n+     * between the `!` and the `]`. Character sequences can also specify ranges\n+     * of characters, as ordered by Unicode, so e.g. `[0-9]` specifies any\n+     * character between 0 and 9 inclusive.\n      *\n-     * The metacharacters `?`, `*`, `[`, `]` can be matched by using brackets (e.g. `[?]`).\n-     * When a `]` occurs immediately following `[` or `[!` then it is interpreted as\n-     * being part of, rather then ending, the character set, so `]` and NOT `]` can be\n-     * matched by `[]]` and `[!]]` respectively. The `-` character can be specified inside a\n-     * character sequence pattern by placing it at the start or the end, e.g. `[abc-]`.\n+     * The metacharacters `?`, `*`, `[`, `]` can be matched by using brackets\n+     * (e.g. `[?]`).  When a `]` occurs immediately following `[` or `[!` then\n+     * it is interpreted as being part of, rather then ending, the character\n+     * set, so `]` and NOT `]` can be matched by `[]]` and `[!]]` respectively.\n+     * The `-` character can be specified inside a character sequence pattern by\n+     * placing it at the start or the end, e.g. `[abc-]`.\n      *\n-     * When a `[` does not have a closing `]` before the end of the string then the `[` will\n-     * be treated literally.\n+     * When a `[` does not have a closing `]` before the end of the string then\n+     * the `[` will be treated literally.\n      */\n     pub fn new(pattern: &str) -> Pattern {\n \n@@ -229,7 +233,8 @@ impl Pattern {\n                         match chars.slice_from(i + 3).position_elem(&']') {\n                             None => (),\n                             Some(j) => {\n-                                let cs = parse_char_specifiers(chars.slice(i + 2, i + 3 + j));\n+                                let chars = chars.slice(i + 2, i + 3 + j);\n+                                let cs = parse_char_specifiers(chars);\n                                 tokens.push(AnyExcept(cs));\n                                 i += j + 4;\n                                 continue;\n@@ -292,6 +297,8 @@ impl Pattern {\n      * # Example\n      *\n      * ```rust\n+     * use extra::glob::Pattern;\n+     *\n      * assert!(Pattern::new(\"c?t\").matches(\"cat\"));\n      * assert!(Pattern::new(\"k[!e]tteh\").matches(\"kitteh\"));\n      * assert!(Pattern::new(\"d*g\").matches(\"doog\"));\n@@ -509,7 +516,7 @@ impl MatchOptions {\n      *\n      * This function always returns this value:\n      *\n-     * ```rust\n+     * ```rust,notest\n      * MatchOptions {\n      *     case_sensitive: true,\n      *     require_literal_separator: false."}, {"sha": "380476dc4bca07695ee745917cb5cab29cd3eb15", "filename": "src/libextra/hex.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d882b1d4f94336c5f64fd3891ee74c0b579dd395/src%2Flibextra%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d882b1d4f94336c5f64fd3891ee74c0b579dd395/src%2Flibextra%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fhex.rs?ref=d882b1d4f94336c5f64fd3891ee74c0b579dd395", "patch": "@@ -28,7 +28,6 @@ impl<'a> ToHex for &'a [u8] {\n      * # Example\n      *\n      * ```rust\n-     * extern mod extra;\n      * use extra::hex::ToHex;\n      *\n      * fn main () {\n@@ -71,12 +70,11 @@ impl<'a> FromHex for &'a str {\n      * This converts a string literal to hexadecimal and back.\n      *\n      * ```rust\n-     * extern mod extra;\n      * use extra::hex::{FromHex, ToHex};\n      * use std::str;\n      *\n      * fn main () {\n-     *     let hello_str = \"Hello, World\".to_hex();\n+     *     let hello_str = \"Hello, World\".as_bytes().to_hex();\n      *     println!(\"{}\", hello_str);\n      *     let bytes = hello_str.from_hex().unwrap();\n      *     println!(\"{:?}\", bytes);"}, {"sha": "e1cb54ae45296e1524e47855bc8c7c0a5c50feaf", "filename": "src/libextra/lru_cache.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d882b1d4f94336c5f64fd3891ee74c0b579dd395/src%2Flibextra%2Flru_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d882b1d4f94336c5f64fd3891ee74c0b579dd395/src%2Flibextra%2Flru_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flru_cache.rs?ref=d882b1d4f94336c5f64fd3891ee74c0b579dd395", "patch": "@@ -17,6 +17,8 @@\n //! # Example\n //!\n //! ```rust\n+//! use extra::lru_cache::LruCache;\n+//!\n //! let mut cache: LruCache<int, int> = LruCache::new(2);\n //! cache.put(1, 10);\n //! cache.put(2, 20);"}, {"sha": "57a7f38696d6c09dacd98198d86de5e3fd0a55e5", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d882b1d4f94336c5f64fd3891ee74c0b579dd395/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d882b1d4f94336c5f64fd3891ee74c0b579dd395/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=d882b1d4f94336c5f64fd3891ee74c0b579dd395", "patch": "@@ -568,13 +568,16 @@ impl RWLock {\n      * # Example\n      *\n      * ```rust\n+     * use extra::sync::RWLock;\n+     *\n+     * let lock = RWLock::new();\n      * lock.write_downgrade(|mut write_token| {\n      *     write_token.write_cond(|condvar| {\n-     *         ... exclusive access ...\n+     *         // ... exclusive access ...\n      *     });\n      *     let read_token = lock.downgrade(write_token);\n      *     read_token.read(|| {\n-     *         ... shared access ...\n+     *         // ... shared access ...\n      *     })\n      * })\n      * ```"}, {"sha": "79886273a15413a17ab670cacfb113b9218640fb", "filename": "src/libextra/url.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d882b1d4f94336c5f64fd3891ee74c0b579dd395/src%2Flibextra%2Furl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d882b1d4f94336c5f64fd3891ee74c0b579dd395/src%2Flibextra%2Furl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Furl.rs?ref=d882b1d4f94336c5f64fd3891ee74c0b579dd395", "patch": "@@ -26,6 +26,8 @@ use std::uint;\n /// # Example\n ///\n /// ```rust\n+/// use extra::url::{Url, UserInfo};\n+///\n /// let url = Url { scheme: ~\"https\",\n ///                 user: Some(UserInfo { user: ~\"username\", pass: None }),\n ///                 host: ~\"example.com\",\n@@ -388,8 +390,10 @@ fn query_from_str(rawquery: &str) -> Query {\n  * # Example\n  *\n  * ```rust\n+ * use extra::url;\n+ *\n  * let query = ~[(~\"title\", ~\"The Village\"), (~\"north\", ~\"52.91\"), (~\"west\", ~\"4.10\")];\n- * println(query_to_str(&query));  // title=The%20Village&north=52.91&west=4.10\n+ * println(url::query_to_str(&query));  // title=The%20Village&north=52.91&west=4.10\n  * ```\n  */\n pub fn query_to_str(query: &Query) -> ~str {"}]}