{"sha": "2a0ce4a62954ad30f37d67f1c47b1a6978fc6bc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMGNlNGE2Mjk1NGFkMzBmMzdkNjdmMWM0N2IxYTY5NzhmYzZiYzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-24T19:46:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-24T19:46:59Z"}, "message": "Auto merge of #29960 - aturon:dismantle-traitref-subtyping, r=nikomatsakis\n\nTrait references are always invariant, so all uses of subtyping between\nthem are equivalent to using equality.\n\nMoreover, the overlap check was previously performed twice per impl\npair, once in each direction. It is now performed only once, and\ninternally uses the equality check.\n\nOn glium, a crate that spends some time in coherence, this change sped\nup coherence checking by a few percent (not very significant).\n\nr? @nikomatsakis", "tree": {"sha": "3b88fec4c57746bc82b6256580013c986e6df28d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b88fec4c57746bc82b6256580013c986e6df28d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a0ce4a62954ad30f37d67f1c47b1a6978fc6bc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a0ce4a62954ad30f37d67f1c47b1a6978fc6bc4", "html_url": "https://github.com/rust-lang/rust/commit/2a0ce4a62954ad30f37d67f1c47b1a6978fc6bc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a0ce4a62954ad30f37d67f1c47b1a6978fc6bc4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1004860dd42632733d985bbf23bd12d0fd23badb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1004860dd42632733d985bbf23bd12d0fd23badb", "html_url": "https://github.com/rust-lang/rust/commit/1004860dd42632733d985bbf23bd12d0fd23badb"}, {"sha": "612d001d74cf9e70e0dd9e8eaca73f33c7ea8c0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/612d001d74cf9e70e0dd9e8eaca73f33c7ea8c0e", "html_url": "https://github.com/rust-lang/rust/commit/612d001d74cf9e70e0dd9e8eaca73f33c7ea8c0e"}], "stats": {"total": 65, "additions": 38, "deletions": 27}, "files": [{"sha": "d61029a2d2dc3ef9ebcbaf5682d92572729542b4", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2a0ce4a62954ad30f37d67f1c47b1a6978fc6bc4/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0ce4a62954ad30f37d67f1c47b1a6978fc6bc4/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=2a0ce4a62954ad30f37d67f1c47b1a6978fc6bc4", "patch": "@@ -474,14 +474,26 @@ pub fn mk_eqty<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,\n     cx.commit_if_ok(|_| cx.eq_types(a_is_expected, origin, a, b))\n }\n \n-pub fn mk_sub_poly_trait_refs<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,\n+pub fn mk_eq_trait_refs<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,\n                                    a_is_expected: bool,\n                                    origin: TypeOrigin,\n-                                   a: ty::PolyTraitRef<'tcx>,\n-                                   b: ty::PolyTraitRef<'tcx>)\n+                                   a: ty::TraitRef<'tcx>,\n+                                   b: ty::TraitRef<'tcx>)\n                                    -> UnitResult<'tcx>\n {\n-    debug!(\"mk_sub_trait_refs({:?} <: {:?})\",\n+    debug!(\"mk_eq_trait_refs({:?} <: {:?})\",\n+           a, b);\n+    cx.commit_if_ok(|_| cx.eq_trait_refs(a_is_expected, origin, a.clone(), b.clone()))\n+}\n+\n+pub fn mk_sub_poly_trait_refs<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,\n+                                        a_is_expected: bool,\n+                                        origin: TypeOrigin,\n+                                        a: ty::PolyTraitRef<'tcx>,\n+                                        b: ty::PolyTraitRef<'tcx>)\n+                                        -> UnitResult<'tcx>\n+{\n+    debug!(\"mk_sub_poly_trait_refs({:?} <: {:?})\",\n            a, b);\n     cx.commit_if_ok(|_| cx.sub_poly_trait_refs(a_is_expected, origin, a.clone(), b.clone()))\n }\n@@ -857,22 +869,22 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         })\n     }\n \n-    pub fn sub_trait_refs(&self,\n+    pub fn eq_trait_refs(&self,\n                           a_is_expected: bool,\n                           origin: TypeOrigin,\n                           a: ty::TraitRef<'tcx>,\n                           b: ty::TraitRef<'tcx>)\n                           -> UnitResult<'tcx>\n     {\n-        debug!(\"sub_trait_refs({:?} <: {:?})\",\n+        debug!(\"eq_trait_refs({:?} <: {:?})\",\n                a,\n                b);\n         self.commit_if_ok(|_| {\n             let trace = TypeTrace {\n                 origin: origin,\n                 values: TraitRefs(expected_found(a_is_expected, a.clone(), b.clone()))\n             };\n-            self.sub(a_is_expected, trace).relate(&a, &b).map(|_| ())\n+            self.equate(a_is_expected, trace).relate(&a, &b).map(|_| ())\n         })\n     }\n "}, {"sha": "bf950ff6dc90fdcda216141d5b99a6b3fcb363db", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2a0ce4a62954ad30f37d67f1c47b1a6978fc6bc4/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0ce4a62954ad30f37d67f1c47b1a6978fc6bc4/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=2a0ce4a62954ad30f37d67f1c47b1a6978fc6bc4", "patch": "@@ -20,7 +20,7 @@ use super::util;\n use metadata::cstore::LOCAL_CRATE;\n use middle::def_id::DefId;\n use middle::subst::{Subst, Substs, TypeSpace};\n-use middle::ty::{self, ToPolyTraitRef, Ty};\n+use middle::ty::{self, Ty};\n use middle::infer::{self, InferCtxt};\n use syntax::codemap::{DUMMY_SP, Span};\n \n@@ -41,12 +41,11 @@ pub fn overlapping_impls(infcx: &InferCtxt,\n \n     let selcx = &mut SelectionContext::intercrate(infcx);\n     infcx.probe(|_| {\n-        overlap(selcx, impl1_def_id, impl2_def_id) || overlap(selcx, impl2_def_id, impl1_def_id)\n+        overlap(selcx, impl1_def_id, impl2_def_id)\n     })\n }\n \n-/// Can the types from impl `a` be used to satisfy impl `b`?\n-/// (Including all conditions)\n+/// Can both impl `a` and impl `b` be satisfied by a common type (including `where` clauses)?\n fn overlap(selcx: &mut SelectionContext,\n            a_def_id: DefId,\n            b_def_id: DefId)\n@@ -68,16 +67,16 @@ fn overlap(selcx: &mut SelectionContext,\n \n     debug!(\"overlap: b_trait_ref={:?}\", b_trait_ref);\n \n-    // Does `a <: b` hold? If not, no overlap.\n-    if let Err(_) = infer::mk_sub_poly_trait_refs(selcx.infcx(),\n-                                                  true,\n-                                                  infer::Misc(DUMMY_SP),\n-                                                  a_trait_ref.to_poly_trait_ref(),\n-                                                  b_trait_ref.to_poly_trait_ref()) {\n+    // Do `a` and `b` unify? If not, no overlap.\n+    if let Err(_) = infer::mk_eq_trait_refs(selcx.infcx(),\n+                                            true,\n+                                            infer::Misc(DUMMY_SP),\n+                                            a_trait_ref,\n+                                            b_trait_ref) {\n         return false;\n     }\n \n-    debug!(\"overlap: subtraitref check succeeded\");\n+    debug!(\"overlap: unification check succeeded\");\n \n     // Are any of the obligations unsatisfiable? If so, no overlap.\n     let infcx = selcx.infcx();"}, {"sha": "f49202eb6c8b644abfb40921a1624394132803df", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a0ce4a62954ad30f37d67f1c47b1a6978fc6bc4/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0ce4a62954ad30f37d67f1c47b1a6978fc6bc4/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=2a0ce4a62954ad30f37d67f1c47b1a6978fc6bc4", "patch": "@@ -902,10 +902,10 @@ fn confirm_param_env_candidate<'cx,'tcx>(\n                obligation.predicate.item_name);\n \n     let origin = infer::RelateOutputImplTypes(obligation.cause.span);\n-    match infcx.sub_trait_refs(false,\n-                               origin,\n-                               obligation.predicate.trait_ref.clone(),\n-                               projection.projection_ty.trait_ref.clone()) {\n+    match infcx.eq_trait_refs(false,\n+                              origin,\n+                              obligation.predicate.trait_ref.clone(),\n+                              projection.projection_ty.trait_ref.clone()) {\n         Ok(()) => { }\n         Err(e) => {\n             selcx.tcx().sess.span_bug("}, {"sha": "cd08c4feb8d6ff690b4af70c675a4187e0bb7daa", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a0ce4a62954ad30f37d67f1c47b1a6978fc6bc4/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0ce4a62954ad30f37d67f1c47b1a6978fc6bc4/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=2a0ce4a62954ad30f37d67f1c47b1a6978fc6bc4", "patch": "@@ -2695,11 +2695,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                skol_obligation_trait_ref);\n \n         let origin = infer::RelateOutputImplTypes(obligation.cause.span);\n-        if let Err(e) = self.infcx.sub_trait_refs(false,\n-                                                  origin,\n-                                                  impl_trait_ref.value.clone(),\n-                                                  skol_obligation_trait_ref) {\n-            debug!(\"match_impl: failed sub_trait_refs due to `{}`\", e);\n+        if let Err(e) = self.infcx.eq_trait_refs(false,\n+                                                 origin,\n+                                                 impl_trait_ref.value.clone(),\n+                                                 skol_obligation_trait_ref) {\n+            debug!(\"match_impl: failed eq_trait_refs due to `{}`\", e);\n             return Err(());\n         }\n "}]}