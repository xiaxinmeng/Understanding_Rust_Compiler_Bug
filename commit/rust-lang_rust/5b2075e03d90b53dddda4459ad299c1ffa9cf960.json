{"sha": "5b2075e03d90b53dddda4459ad299c1ffa9cf960", "node_id": "C_kwDOAAsO6NoAKDViMjA3NWUwM2Q5MGI1M2RkZGRhNDQ1OWFkMjk5YzFmZmE5Y2Y5NjA", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-21T07:03:09Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-26T03:34:04Z"}, "message": "Remove `TokenTreesReader::bump`.\n\nIt's an unnecessary layer that obfuscates when I am looking for\noptimizations.", "tree": {"sha": "aeff51c3b2df7dea947e9280707d8d619813302a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aeff51c3b2df7dea947e9280707d8d619813302a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b2075e03d90b53dddda4459ad299c1ffa9cf960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b2075e03d90b53dddda4459ad299c1ffa9cf960", "html_url": "https://github.com/rust-lang/rust/commit/5b2075e03d90b53dddda4459ad299c1ffa9cf960", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b2075e03d90b53dddda4459ad299c1ffa9cf960/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7928a92e588e11a6c7145cde9ccfd75c4c7cc01", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7928a92e588e11a6c7145cde9ccfd75c4c7cc01", "html_url": "https://github.com/rust-lang/rust/commit/d7928a92e588e11a6c7145cde9ccfd75c4c7cc01"}], "stats": {"total": 26, "additions": 9, "deletions": 17}, "files": [{"sha": "ae82d09ba4100bd1df0953ce330603abe3d6b36c", "filename": "compiler/rustc_parse/src/lexer/tokentrees.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5b2075e03d90b53dddda4459ad299c1ffa9cf960/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b2075e03d90b53dddda4459ad299c1ffa9cf960/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs?ref=5b2075e03d90b53dddda4459ad299c1ffa9cf960", "patch": "@@ -45,9 +45,8 @@ struct TokenTreesReader<'a> {\n impl<'a> TokenTreesReader<'a> {\n     // Parse a stream of tokens into a list of `TokenTree`s, up to an `Eof`.\n     fn parse_all_token_trees(&mut self) -> PResult<'a, TokenStream> {\n+        self.token = self.string_reader.next_token().0;\n         let mut buf = TokenStreamBuilder::default();\n-\n-        self.bump();\n         loop {\n             match self.token.kind {\n                 token::OpenDelim(delim) => buf.push(self.parse_token_tree_open_delim(delim)),\n@@ -116,7 +115,7 @@ impl<'a> TokenTreesReader<'a> {\n \n         // Parse the open delimiter.\n         self.open_braces.push((delim, self.token.span));\n-        self.bump();\n+        self.token = self.string_reader.next_token().0;\n \n         // Parse the token trees within the delimiters.\n         // We stop at any delimiter so we can try to recover if the user\n@@ -155,7 +154,7 @@ impl<'a> TokenTreesReader<'a> {\n                     self.matching_delim_spans.push((open_brace, open_brace_span, close_brace_span));\n                 }\n                 // Parse the closing delimiter.\n-                self.bump();\n+                self.token = self.string_reader.next_token().0;\n             }\n             // Incorrect delimiter.\n             token::CloseDelim(other) => {\n@@ -202,7 +201,7 @@ impl<'a> TokenTreesReader<'a> {\n                 //     bar(baz(\n                 // }  // Incorrect delimiter but matches the earlier `{`\n                 if !self.open_braces.iter().any(|&(b, _)| b == other) {\n-                    self.bump();\n+                    self.token = self.string_reader.next_token().0;\n                 }\n             }\n             token::Eof => {\n@@ -248,22 +247,15 @@ impl<'a> TokenTreesReader<'a> {\n     fn parse_token_tree_other(&mut self) -> TokenTree {\n         // `spacing` for the returned token is determined by the next token:\n         // its kind and its `preceded_by_whitespace` status.\n-        let tok = self.token.take();\n-        let is_next_tok_preceded_by_whitespace = self.bump();\n-        let spacing = if is_next_tok_preceded_by_whitespace || !self.token.is_op() {\n+        let this_tok = self.token.take();\n+        let (next_tok, is_next_tok_preceded_by_whitespace) = self.string_reader.next_token();\n+        let this_spacing = if is_next_tok_preceded_by_whitespace || !next_tok.is_op() {\n             Spacing::Alone\n         } else {\n             Spacing::Joint\n         };\n-        TokenTree::Token(tok, spacing)\n-    }\n-\n-    // Set `self.token` to the next token. Returns a bool indicating if that\n-    // token was preceded by whitespace.\n-    fn bump(&mut self) -> bool {\n-        let (token, spacing) = self.string_reader.next_token();\n-        self.token = token;\n-        spacing\n+        self.token = next_tok;\n+        TokenTree::Token(this_tok, this_spacing)\n     }\n }\n "}]}