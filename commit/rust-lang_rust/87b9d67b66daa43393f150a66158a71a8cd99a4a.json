{"sha": "87b9d67b66daa43393f150a66158a71a8cd99a4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3YjlkNjdiNjZkYWE0MzM5M2YxNTBhNjYxNThhNzFhOGNkOTlhNGE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-03T00:20:36Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-03T00:20:53Z"}, "message": "rustdoc: Write indexes in output", "tree": {"sha": "0ea890a6234710629236c7656b405df5066a7016", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ea890a6234710629236c7656b405df5066a7016"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87b9d67b66daa43393f150a66158a71a8cd99a4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87b9d67b66daa43393f150a66158a71a8cd99a4a", "html_url": "https://github.com/rust-lang/rust/commit/87b9d67b66daa43393f150a66158a71a8cd99a4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87b9d67b66daa43393f150a66158a71a8cd99a4a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1", "html_url": "https://github.com/rust-lang/rust/commit/3ed6f6520f56204f1c7c799ec8fa231bef0fb4d1"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "fcaaadafd41d010bb992c310756860d09ea91131", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/87b9d67b66daa43393f150a66158a71a8cd99a4a/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b9d67b66daa43393f150a66158a71a8cd99a4a/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=87b9d67b66daa43393f150a66158a71a8cd99a4a", "patch": "@@ -223,6 +223,9 @@ fn write_mod_contents(\n ) {\n     write_brief(ctxt, doc.brief());\n     write_desc(ctxt, doc.desc());\n+    if option::is_some(doc.index) {\n+        write_index(ctxt, option::get(doc.index));\n+    }\n \n     for itemtag in doc.items {\n         alt itemtag {\n@@ -251,6 +254,35 @@ fn should_write_crate_description() {\n     assert str::contains(markdown, \"this is the crate\");\n }\n \n+fn write_index(ctxt: ctxt, index: doc::index) {\n+    if vec::is_empty(index.entries) {\n+        ret;\n+    }\n+    \n+    for entry in index.entries {\n+        let header = header_text_(entry.kind, entry.name);\n+        let id = entry.link;\n+        ctxt.w.write_line(#fmt(\"* [%s](#%s)\", header, id));\n+    }\n+    ctxt.w.write_line(\"\");\n+}\n+\n+#[test]\n+fn should_write_index() {\n+    let markdown = test::render(\"mod a { } mod b { }\");\n+    assert str::contains(\n+        markdown,\n+        \"\\n\\n* [Module `a`](#module-a)\\n\\\n+         * [Module `b`](#module-b)\\n\\n\"\n+    );\n+}\n+\n+#[test]\n+fn should_not_write_index_if_no_entries() {\n+    let markdown = test::render(\"\");\n+    assert !str::contains(markdown, \"\\n\\n\\n\");\n+}\n+\n fn write_nmod(ctxt: ctxt, doc: doc::nmoddoc) {\n     write_header(ctxt, h1, doc::nmodtag(doc));\n \n@@ -905,6 +937,8 @@ mod test {\n             #debug(\"doc (path): %?\", doc);\n             let doc = attr_pass::mk_pass().f(srv, doc);\n             #debug(\"doc (attr): %?\", doc);\n+            let doc = markdown_index_pass::mk_pass().f(srv, doc);\n+            #debug(\"doc (index): %?\", doc);\n             (srv, doc)\n         }\n     }"}]}