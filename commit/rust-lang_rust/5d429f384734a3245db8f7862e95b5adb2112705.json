{"sha": "5d429f384734a3245db8f7862e95b5adb2112705", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNDI5ZjM4NDczNGEzMjQ1ZGI4Zjc4NjJlOTViNWFkYjIxMTI3MDU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-02T03:35:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-02T03:35:50Z"}, "message": "Rollup merge of #73803 - Aaron1011:feature/angle-field-recovery, r=matthewjasper\n\nRecover extra trailing angle brackets in struct definition\n\nThis commit applies the existing 'extra angle bracket recovery' logic\nwhen parsing fields in struct definitions. This allows us to continue\nparsing the struct's fields, avoiding spurious 'missing field' errors in\ncode that tries to use the struct.", "tree": {"sha": "076690ddefd10a15bb88ebaaa481aa72af5b9571", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/076690ddefd10a15bb88ebaaa481aa72af5b9571"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d429f384734a3245db8f7862e95b5adb2112705", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/VYXCRBK7hj4Ov3rIwAAdHIIAC0ZuHKKr8DVh+HVgBV1aLip\nliYxdsgNd6O25QBGN8fACk7Ujs+D+DvVF46jTpToNl/3ap0D83913q004qhT27B0\n5LUG5BIpdwyzFXTjMEmWSBRcPEcLklwX/9IDRuOcoBR7Q/+Ia06dg1/TdngCWcQA\nX2jO2pmpUyk2fW9Oj/eX7b3TMOpXYtRt1I9YctxU/wr9jT5GKKd/ayCCO80D8u2W\nfxVSZapq9ftqXu6OXhg4LS7Iq5veRlxlYt1OuuHl2sMcLa632F1VftPrZB2E5Wxv\nwJ+wdX53WWo/Hruf1z6gC/xiiz19eEyqetA46lgiNwA4iHXnkTR/W2tyIuz1nU8=\n=GtrH\n-----END PGP SIGNATURE-----\n", "payload": "tree 076690ddefd10a15bb88ebaaa481aa72af5b9571\nparent ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec\nparent 765bd47fa0f0e0d5d893283a94c76e2b1009d680\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593660950 -0700\ncommitter GitHub <noreply@github.com> 1593660950 -0700\n\nRollup merge of #73803 - Aaron1011:feature/angle-field-recovery, r=matthewjasper\n\nRecover extra trailing angle brackets in struct definition\n\nThis commit applies the existing 'extra angle bracket recovery' logic\nwhen parsing fields in struct definitions. This allows us to continue\nparsing the struct's fields, avoiding spurious 'missing field' errors in\ncode that tries to use the struct.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d429f384734a3245db8f7862e95b5adb2112705", "html_url": "https://github.com/rust-lang/rust/commit/5d429f384734a3245db8f7862e95b5adb2112705", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d429f384734a3245db8f7862e95b5adb2112705/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec", "html_url": "https://github.com/rust-lang/rust/commit/ce49944171aad0b53ffd1ea1dc9fdb47c25f85ec"}, {"sha": "765bd47fa0f0e0d5d893283a94c76e2b1009d680", "url": "https://api.github.com/repos/rust-lang/rust/commits/765bd47fa0f0e0d5d893283a94c76e2b1009d680", "html_url": "https://github.com/rust-lang/rust/commit/765bd47fa0f0e0d5d893283a94c76e2b1009d680"}], "stats": {"total": 74, "additions": 66, "deletions": 8}, "files": [{"sha": "16a118cb48c913eb1901a75a64f9cd44cbe1fd58", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5d429f384734a3245db8f7862e95b5adb2112705/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d429f384734a3245db8f7862e95b5adb2112705/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=5d429f384734a3245db8f7862e95b5adb2112705", "patch": "@@ -376,7 +376,14 @@ impl<'a> Parser<'a> {\n     /// let _ = vec![1, 2, 3].into_iter().collect::<Vec<usize>>>>();\n     ///                                                        ^^ help: remove extra angle brackets\n     /// ```\n-    pub(super) fn check_trailing_angle_brackets(&mut self, segment: &PathSegment, end: TokenKind) {\n+    ///\n+    /// If `true` is returned, then trailing brackets were recovered, tokens were consumed\n+    /// up until one of the tokens in 'end' was encountered, and an error was emitted.\n+    pub(super) fn check_trailing_angle_brackets(\n+        &mut self,\n+        segment: &PathSegment,\n+        end: &[&TokenKind],\n+    ) -> bool {\n         // This function is intended to be invoked after parsing a path segment where there are two\n         // cases:\n         //\n@@ -409,7 +416,7 @@ impl<'a> Parser<'a> {\n             parsed_angle_bracket_args,\n         );\n         if !parsed_angle_bracket_args {\n-            return;\n+            return false;\n         }\n \n         // Keep the span at the start so we can highlight the sequence of `>` characters to be\n@@ -447,18 +454,18 @@ impl<'a> Parser<'a> {\n             number_of_gt, number_of_shr,\n         );\n         if number_of_gt < 1 && number_of_shr < 1 {\n-            return;\n+            return false;\n         }\n \n         // Finally, double check that we have our end token as otherwise this is the\n         // second case.\n         if self.look_ahead(position, |t| {\n             trace!(\"check_trailing_angle_brackets: t={:?}\", t);\n-            *t == end\n+            end.contains(&&t.kind)\n         }) {\n             // Eat from where we started until the end token so that parsing can continue\n             // as if we didn't have those extra angle brackets.\n-            self.eat_to_tokens(&[&end]);\n+            self.eat_to_tokens(end);\n             let span = lo.until(self.token.span);\n \n             let total_num_of_gt = number_of_gt + number_of_shr * 2;\n@@ -473,7 +480,9 @@ impl<'a> Parser<'a> {\n                 Applicability::MachineApplicable,\n             )\n             .emit();\n+            return true;\n         }\n+        false\n     }\n \n     /// Check to see if a pair of chained operators looks like an attempt at chained comparison,"}, {"sha": "abb444933536ff0e7d845b3b39170da2f8c6ef4b", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d429f384734a3245db8f7862e95b5adb2112705/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d429f384734a3245db8f7862e95b5adb2112705/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=5d429f384734a3245db8f7862e95b5adb2112705", "patch": "@@ -867,7 +867,7 @@ impl<'a> Parser<'a> {\n \n         let fn_span_lo = self.token.span;\n         let segment = self.parse_path_segment(PathStyle::Expr)?;\n-        self.check_trailing_angle_brackets(&segment, token::OpenDelim(token::Paren));\n+        self.check_trailing_angle_brackets(&segment, &[&token::OpenDelim(token::Paren)]);\n \n         if self.check(&token::OpenDelim(token::Paren)) {\n             // Method call `expr.f()`"}, {"sha": "5923a185dcf939c167bc4b7c8b2875c073a068ab", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5d429f384734a3245db8f7862e95b5adb2112705/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d429f384734a3245db8f7862e95b5adb2112705/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=5d429f384734a3245db8f7862e95b5adb2112705", "patch": "@@ -9,7 +9,7 @@ use rustc_ast::ast::{AssocItem, AssocItemKind, ForeignItemKind, Item, ItemKind,\n use rustc_ast::ast::{Async, Const, Defaultness, IsAuto, Mutability, Unsafe, UseTree, UseTreeKind};\n use rustc_ast::ast::{BindingMode, Block, FnDecl, FnSig, Param, SelfKind};\n use rustc_ast::ast::{EnumDef, Generics, StructField, TraitRef, Ty, TyKind, Variant, VariantData};\n-use rustc_ast::ast::{FnHeader, ForeignItem, PathSegment, Visibility, VisibilityKind};\n+use rustc_ast::ast::{FnHeader, ForeignItem, Path, PathSegment, Visibility, VisibilityKind};\n use rustc_ast::ast::{MacArgs, MacCall, MacDelimiter};\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, TokenKind};\n@@ -1262,6 +1262,25 @@ impl<'a> Parser<'a> {\n                     sp,\n                     &format!(\"expected `,`, or `}}`, found {}\", super::token_descr(&self.token)),\n                 );\n+\n+                // Try to recover extra trailing angle brackets\n+                let mut recovered = false;\n+                if let TyKind::Path(_, Path { segments, .. }) = &a_var.ty.kind {\n+                    if let Some(last_segment) = segments.last() {\n+                        recovered = self.check_trailing_angle_brackets(\n+                            last_segment,\n+                            &[&token::Comma, &token::CloseDelim(token::Brace)],\n+                        );\n+                        if recovered {\n+                            // Handle a case like `Vec<u8>>,` where we can continue parsing fields\n+                            // after the comma\n+                            self.eat(&token::Comma);\n+                            // `check_trailing_angle_brackets` already emitted a nicer error\n+                            err.cancel();\n+                        }\n+                    }\n+                }\n+\n                 if self.token.is_ident() {\n                     // This is likely another field; emit the diagnostic and keep going\n                     err.span_suggestion(\n@@ -1271,6 +1290,14 @@ impl<'a> Parser<'a> {\n                         Applicability::MachineApplicable,\n                     );\n                     err.emit();\n+                    recovered = true;\n+                }\n+\n+                if recovered {\n+                    // Make sure an error was emitted (either by recovering an angle bracket,\n+                    // or by finding an identifier as the next token), since we're\n+                    // going to continue parsing\n+                    assert!(self.sess.span_diagnostic.has_errors());\n                 } else {\n                     return Err(err);\n                 }"}, {"sha": "67e9b3af4a8cfad21ddb0ba0a9712a73db25f30f", "filename": "src/librustc_parse/parser/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d429f384734a3245db8f7862e95b5adb2112705/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d429f384734a3245db8f7862e95b5adb2112705/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpath.rs?ref=5d429f384734a3245db8f7862e95b5adb2112705", "patch": "@@ -169,7 +169,7 @@ impl<'a> Parser<'a> {\n                 // `PathStyle::Expr` is only provided at the root invocation and never in\n                 // `parse_path_segment` to recurse and therefore can be checked to maintain\n                 // this invariant.\n-                self.check_trailing_angle_brackets(&segment, token::ModSep);\n+                self.check_trailing_angle_brackets(&segment, &[&token::ModSep]);\n             }\n             segments.push(segment);\n "}, {"sha": "5e0e00bcb5e8d3eed1c34a9cd6c73d38e4a9eb2f", "filename": "src/test/ui/parser/recover-field-extra-angle-brackets.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5d429f384734a3245db8f7862e95b5adb2112705/src%2Ftest%2Fui%2Fparser%2Frecover-field-extra-angle-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d429f384734a3245db8f7862e95b5adb2112705/src%2Ftest%2Fui%2Fparser%2Frecover-field-extra-angle-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-field-extra-angle-brackets.rs?ref=5d429f384734a3245db8f7862e95b5adb2112705", "patch": "@@ -0,0 +1,14 @@\n+// Tests that we recover from extra trailing angle brackets\n+// in a struct field\n+\n+struct BadStruct {\n+    first: Vec<u8>>, //~ ERROR unmatched angle bracket\n+    second: bool\n+}\n+\n+fn bar(val: BadStruct) {\n+    val.first;\n+    val.second;\n+}\n+\n+fn main() {}"}, {"sha": "318e55f6e99ac993f06b32aeb00e457ca16a4569", "filename": "src/test/ui/parser/recover-field-extra-angle-brackets.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d429f384734a3245db8f7862e95b5adb2112705/src%2Ftest%2Fui%2Fparser%2Frecover-field-extra-angle-brackets.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d429f384734a3245db8f7862e95b5adb2112705/src%2Ftest%2Fui%2Fparser%2Frecover-field-extra-angle-brackets.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-field-extra-angle-brackets.stderr?ref=5d429f384734a3245db8f7862e95b5adb2112705", "patch": "@@ -0,0 +1,8 @@\n+error: unmatched angle bracket\n+  --> $DIR/recover-field-extra-angle-brackets.rs:5:19\n+   |\n+LL |     first: Vec<u8>>,\n+   |                   ^ help: remove extra angle bracket\n+\n+error: aborting due to previous error\n+"}]}