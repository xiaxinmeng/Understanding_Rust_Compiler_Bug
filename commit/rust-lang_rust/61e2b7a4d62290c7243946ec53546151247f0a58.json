{"sha": "61e2b7a4d62290c7243946ec53546151247f0a58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZTJiN2E0ZDYyMjkwYzcyNDM5NDZlYzUzNTQ2MTUxMjQ3ZjBhNTg=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-01-16T09:40:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-16T09:40:12Z"}, "message": "Merge pull request #2355 from alusch/clone_on_ref_ptr_restriction\n\nFix #2048: Move `clone_on_ref_ptr` to the restriction lints", "tree": {"sha": "11347dff9e5160ca01b99224bb71e29361fca44e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11347dff9e5160ca01b99224bb71e29361fca44e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61e2b7a4d62290c7243946ec53546151247f0a58", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaXch8CRBK7hj4Ov3rIwAAdHIIADQjewuZaR4o5YZnyKRZRHnU\nL1cOI+B6SmM5xlalnh2Tk3ajBxoAb1QCGJ1BHWZyoUEjVzWxlUqISfmdvUlboiWi\nlKyP4ICPkI4zKk3AYscZZrbPa25OTEJB8dfidbb8xamPo1InebPu2OBNtgWv8yNF\nxv7QNRSd7rNfNSlNuCyuCVNa3sGH0VFY7uM4+FArl0OLAhsdoRqkB6K2zZMseFvS\nCzL+JYNGpk6FwxromNWkNt+Svc7djlZYcUkCrgJZtI5pQKc/vwB+8WWqo0/fnUBA\nwSIegVXZIdnfH7D9zT6EpmL+PI8XG6+WZxRVRHHbb7aLlwddBc50zK8BtKAEcJg=\n=aaU6\n-----END PGP SIGNATURE-----\n", "payload": "tree 11347dff9e5160ca01b99224bb71e29361fca44e\nparent 28c3d0321aea44716b7898ed29f6dcc4eb1dfc74\nparent f343cd22f63d0d769dd3bfd44b53347d2d4a58c0\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1516095612 +0100\ncommitter GitHub <noreply@github.com> 1516095612 +0100\n\nMerge pull request #2355 from alusch/clone_on_ref_ptr_restriction\n\nFix #2048: Move `clone_on_ref_ptr` to the restriction lints"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61e2b7a4d62290c7243946ec53546151247f0a58", "html_url": "https://github.com/rust-lang/rust/commit/61e2b7a4d62290c7243946ec53546151247f0a58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61e2b7a4d62290c7243946ec53546151247f0a58/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28c3d0321aea44716b7898ed29f6dcc4eb1dfc74", "url": "https://api.github.com/repos/rust-lang/rust/commits/28c3d0321aea44716b7898ed29f6dcc4eb1dfc74", "html_url": "https://github.com/rust-lang/rust/commit/28c3d0321aea44716b7898ed29f6dcc4eb1dfc74"}, {"sha": "f343cd22f63d0d769dd3bfd44b53347d2d4a58c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f343cd22f63d0d769dd3bfd44b53347d2d4a58c0", "html_url": "https://github.com/rust-lang/rust/commit/f343cd22f63d0d769dd3bfd44b53347d2d4a58c0"}], "stats": {"total": 105, "additions": 59, "deletions": 46}, "files": [{"sha": "8a92e49340f4e3f60d7f1899330144d6b6683fb3", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/61e2b7a4d62290c7243946ec53546151247f0a58/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e2b7a4d62290c7243946ec53546151247f0a58/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=61e2b7a4d62290c7243946ec53546151247f0a58", "patch": "@@ -361,9 +361,8 @@ declare_lint! {\n /// ```rust\n /// x.clone()\n /// ```\n-declare_lint! {\n+declare_restriction_lint! {\n     pub CLONE_ON_REF_PTR,\n-    Warn,\n     \"using 'clone' on a ref-counted pointer\"\n }\n \n@@ -1013,24 +1012,26 @@ fn lint_clone_on_copy(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr, arg_t\n fn lint_clone_on_ref_ptr(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr) {\n     let (obj_ty, _) = walk_ptrs_ty_depth(cx.tables.expr_ty(arg));\n \n-    let caller_type = if match_type(cx, obj_ty, &paths::RC) {\n-        \"Rc\"\n-    } else if match_type(cx, obj_ty, &paths::ARC) {\n-        \"Arc\"\n-    } else if match_type(cx, obj_ty, &paths::WEAK_RC) || match_type(cx, obj_ty, &paths::WEAK_ARC) {\n-        \"Weak\"\n-    } else {\n-        return;\n-    };\n+    if let ty::TyAdt(_, subst) = obj_ty.sty {\n+        let caller_type = if match_type(cx, obj_ty, &paths::RC) {\n+            \"Rc\"\n+        } else if match_type(cx, obj_ty, &paths::ARC) {\n+            \"Arc\"\n+        } else if match_type(cx, obj_ty, &paths::WEAK_RC) || match_type(cx, obj_ty, &paths::WEAK_ARC) {\n+            \"Weak\"\n+        } else {\n+            return;\n+        };\n \n-    span_lint_and_sugg(\n-        cx,\n-        CLONE_ON_REF_PTR,\n-        expr.span,\n-        \"using '.clone()' on a ref-counted pointer\",\n-        \"try this\",\n-        format!(\"{}::clone(&{})\", caller_type, snippet(cx, arg.span, \"_\")),\n-    );\n+        span_lint_and_sugg(\n+            cx,\n+            CLONE_ON_REF_PTR,\n+            expr.span,\n+            \"using '.clone()' on a ref-counted pointer\",\n+            \"try this\",\n+            format!(\"{}::<{}>::clone(&{})\", caller_type, subst.type_at(0), snippet(cx, arg.span, \"_\")),\n+        );\n+    }\n }\n \n "}, {"sha": "96166ed4f139aa5c2e518bbbaa13f983d4772cdf", "filename": "tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61e2b7a4d62290c7243946ec53546151247f0a58/tests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e2b7a4d62290c7243946ec53546151247f0a58/tests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.rs?ref=61e2b7a4d62290c7243946ec53546151247f0a58", "patch": "@@ -1,10 +1,15 @@\n+#![warn(clone_on_ref_ptr)]\n #![allow(unused)]\n \n use std::collections::HashSet;\n use std::collections::VecDeque;\n use std::rc::{self, Rc};\n use std::sync::{self, Arc};\n \n+trait SomeTrait {}\n+struct SomeImpl;\n+impl SomeTrait for SomeImpl {}\n+\n fn main() {}\n \n fn clone_on_copy() {\n@@ -34,7 +39,8 @@ fn clone_on_ref_ptr() {\n     arc_weak.clone();\n     sync::Weak::clone(&arc_weak);\n \n-\n+    let x = Arc::new(SomeImpl);\n+    let _: Arc<SomeTrait> = x.clone(); \n }\n \n fn clone_on_copy_generic<T: Copy>(t: T) {"}, {"sha": "bb78bfa164ea06967e6b8592efb268d80b287a3f", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 32, "deletions": 26, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/61e2b7a4d62290c7243946ec53546151247f0a58/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61e2b7a4d62290c7243946ec53546151247f0a58/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=61e2b7a4d62290c7243946ec53546151247f0a58", "patch": "@@ -1,75 +1,81 @@\n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:11:5\n+  --> $DIR/unnecessary_clone.rs:16:5\n    |\n-11 |     42.clone();\n+16 |     42.clone();\n    |     ^^^^^^^^^^ help: try removing the `clone` call: `42`\n    |\n    = note: `-D clone-on-copy` implied by `-D warnings`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:15:5\n+  --> $DIR/unnecessary_clone.rs:20:5\n    |\n-15 |     (&42).clone();\n+20 |     (&42).clone();\n    |     ^^^^^^^^^^^^^ help: try dereferencing it: `*(&42)`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:25:5\n+  --> $DIR/unnecessary_clone.rs:30:5\n    |\n-25 |     rc.clone();\n-   |     ^^^^^^^^^^ help: try this: `Rc::clone(&rc)`\n+30 |     rc.clone();\n+   |     ^^^^^^^^^^ help: try this: `Rc::<bool>::clone(&rc)`\n    |\n    = note: `-D clone-on-ref-ptr` implied by `-D warnings`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:28:5\n+  --> $DIR/unnecessary_clone.rs:33:5\n    |\n-28 |     arc.clone();\n-   |     ^^^^^^^^^^^ help: try this: `Arc::clone(&arc)`\n+33 |     arc.clone();\n+   |     ^^^^^^^^^^^ help: try this: `Arc::<bool>::clone(&arc)`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:31:5\n+  --> $DIR/unnecessary_clone.rs:36:5\n    |\n-31 |     rcweak.clone();\n-   |     ^^^^^^^^^^^^^^ help: try this: `Weak::clone(&rcweak)`\n+36 |     rcweak.clone();\n+   |     ^^^^^^^^^^^^^^ help: try this: `Weak::<bool>::clone(&rcweak)`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:34:5\n+  --> $DIR/unnecessary_clone.rs:39:5\n    |\n-34 |     arc_weak.clone();\n-   |     ^^^^^^^^^^^^^^^^ help: try this: `Weak::clone(&arc_weak)`\n+39 |     arc_weak.clone();\n+   |     ^^^^^^^^^^^^^^^^ help: try this: `Weak::<bool>::clone(&arc_weak)`\n+\n+error: using '.clone()' on a ref-counted pointer\n+  --> $DIR/unnecessary_clone.rs:43:29\n+   |\n+43 |     let _: Arc<SomeTrait> = x.clone(); \n+   |                             ^^^^^^^^^ help: try this: `Arc::<SomeImpl>::clone(&x)`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:41:5\n+  --> $DIR/unnecessary_clone.rs:47:5\n    |\n-41 |     t.clone();\n+47 |     t.clone();\n    |     ^^^^^^^^^ help: try removing the `clone` call: `t`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:43:5\n+  --> $DIR/unnecessary_clone.rs:49:5\n    |\n-43 |     Some(t).clone();\n+49 |     Some(t).clone();\n    |     ^^^^^^^^^^^^^^^ help: try removing the `clone` call: `Some(t)`\n \n error: using `clone` on a double-reference; this will copy the reference instead of cloning the inner type\n-  --> $DIR/unnecessary_clone.rs:49:22\n+  --> $DIR/unnecessary_clone.rs:55:22\n    |\n-49 |     let z: &Vec<_> = y.clone();\n+55 |     let z: &Vec<_> = y.clone();\n    |                      ^^^^^^^^^\n    |\n    = note: `-D clone-double-ref` implied by `-D warnings`\n help: try dereferencing it\n    |\n-49 |     let z: &Vec<_> = &(*y).clone();\n+55 |     let z: &Vec<_> = &(*y).clone();\n    |                      ^^^^^^^^^^^^^\n help: or try being explicit about what type to clone\n    |\n-49 |     let z: &Vec<_> = &std::vec::Vec<i32>::clone(y);\n+55 |     let z: &Vec<_> = &std::vec::Vec<i32>::clone(y);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n-  --> $DIR/unnecessary_clone.rs:56:27\n+  --> $DIR/unnecessary_clone.rs:62:27\n    |\n-56 |     let v2 : Vec<isize> = v.iter().cloned().collect();\n+62 |     let v2 : Vec<isize> = v.iter().cloned().collect();\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D iter-cloned-collect` implied by `-D warnings`"}]}