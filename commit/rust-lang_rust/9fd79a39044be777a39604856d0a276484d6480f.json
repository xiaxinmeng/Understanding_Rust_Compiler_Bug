{"sha": "9fd79a39044be777a39604856d0a276484d6480f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZDc5YTM5MDQ0YmU3NzdhMzk2MDQ4NTZkMGEyNzY0ODRkNjQ4MGY=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-10-19T20:46:30Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-10-19T20:46:30Z"}, "message": "make exhausted RangeInclusive::end_bound return Excluded(end)", "tree": {"sha": "f5f9cc77fd70b999a7772b21da1f84377d8cf871", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5f9cc77fd70b999a7772b21da1f84377d8cf871"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fd79a39044be777a39604856d0a276484d6480f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fd79a39044be777a39604856d0a276484d6480f", "html_url": "https://github.com/rust-lang/rust/commit/9fd79a39044be777a39604856d0a276484d6480f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fd79a39044be777a39604856d0a276484d6480f/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b62b352f4779072c07c110a63fd83afa9508b9e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b62b352f4779072c07c110a63fd83afa9508b9e9", "html_url": "https://github.com/rust-lang/rust/commit/b62b352f4779072c07c110a63fd83afa9508b9e9"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "084ddffab0b7a7065a8c557c0df7e3dfcfe74219", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9fd79a39044be777a39604856d0a276484d6480f/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd79a39044be777a39604856d0a276484d6480f/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=9fd79a39044be777a39604856d0a276484d6480f", "patch": "@@ -495,7 +495,7 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n         Idx: PartialOrd<U>,\n         U: ?Sized + PartialOrd<Idx>,\n     {\n-        !self.exhausted && <Self as RangeBounds<Idx>>::contains(self, item)\n+        <Self as RangeBounds<Idx>>::contains(self, item)\n     }\n \n     /// Returns `true` if the range contains no items.\n@@ -891,7 +891,13 @@ impl<T> RangeBounds<T> for RangeInclusive<T> {\n         Included(&self.start)\n     }\n     fn end_bound(&self) -> Bound<&T> {\n-        Included(&self.end)\n+        if self.exhausted {\n+            // When the iterator is exhausted, we usually have start == end,\n+            // but we want the range to appear empty, containing nothing.\n+            Excluded(&self.end)\n+        } else {\n+            Included(&self.end)\n+        }\n     }\n }\n "}]}