{"sha": "a8df16ae1df9084dc8e20e835f3de981e32d110c", "node_id": "C_kwDOAAsO6NoAKGE4ZGYxNmFlMWRmOTA4NGRjOGUyMGU4MzVmM2RlOTgxZTMyZDExMGM", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-01T05:33:06Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-28T16:51:30Z"}, "message": "Move `IntegerDivision` into `Operators` lint pass", "tree": {"sha": "486fee7cc55dca50d9c52c03512a67d483dc5baa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/486fee7cc55dca50d9c52c03512a67d483dc5baa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8df16ae1df9084dc8e20e835f3de981e32d110c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8df16ae1df9084dc8e20e835f3de981e32d110c", "html_url": "https://github.com/rust-lang/rust/commit/a8df16ae1df9084dc8e20e835f3de981e32d110c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8df16ae1df9084dc8e20e835f3de981e32d110c/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83de67cfec4a1e68c8b63ec8153777c51a19addc", "url": "https://api.github.com/repos/rust-lang/rust/commits/83de67cfec4a1e68c8b63ec8153777c51a19addc", "html_url": "https://github.com/rust-lang/rust/commit/83de67cfec4a1e68c8b63ec8153777c51a19addc"}], "stats": {"total": 123, "additions": 58, "deletions": 65}, "files": [{"sha": "3effba5682607a241c208124760c2905a25c1997", "filename": "clippy_lints/src/integer_division.rs", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/83de67cfec4a1e68c8b63ec8153777c51a19addc/clippy_lints%2Fsrc%2Finteger_division.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83de67cfec4a1e68c8b63ec8153777c51a19addc/clippy_lints%2Fsrc%2Finteger_division.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finteger_division.rs?ref=83de67cfec4a1e68c8b63ec8153777c51a19addc", "patch": "@@ -1,61 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_help;\n-use if_chain::if_chain;\n-use rustc_hir as hir;\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for division of integers\n-    ///\n-    /// ### Why is this bad?\n-    /// When outside of some very specific algorithms,\n-    /// integer division is very often a mistake because it discards the\n-    /// remainder.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// let x = 3 / 2;\n-    /// println!(\"{}\", x);\n-    /// ```\n-    ///\n-    /// Use instead:\n-    /// ```rust\n-    /// let x = 3f32 / 2f32;\n-    /// println!(\"{}\", x);\n-    /// ```\n-    #[clippy::version = \"1.37.0\"]\n-    pub INTEGER_DIVISION,\n-    restriction,\n-    \"integer division may cause loss of precision\"\n-}\n-\n-declare_lint_pass!(IntegerDivision => [INTEGER_DIVISION]);\n-\n-impl<'tcx> LateLintPass<'tcx> for IntegerDivision {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if is_integer_division(cx, expr) {\n-            span_lint_and_help(\n-                cx,\n-                INTEGER_DIVISION,\n-                expr.span,\n-                \"integer division\",\n-                None,\n-                \"division of integers may cause loss of precision. consider using floats\",\n-            );\n-        }\n-    }\n-}\n-\n-fn is_integer_division<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) -> bool {\n-    if_chain! {\n-        if let hir::ExprKind::Binary(binop, left, right) = &expr.kind;\n-        if binop.node == hir::BinOpKind::Div;\n-        then {\n-            let (left_ty, right_ty) = (cx.typeck_results().expr_ty(left), cx.typeck_results().expr_ty(right));\n-            return left_ty.is_integral() && right_ty.is_integral();\n-        }\n-    }\n-\n-    false\n-}"}, {"sha": "7acfdf568409de60aa40abf5bfb3f84dbe1a9280", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8df16ae1df9084dc8e20e835f3de981e32d110c/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8df16ae1df9084dc8e20e835f3de981e32d110c/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=a8df16ae1df9084dc8e20e835f3de981e32d110c", "patch": "@@ -194,7 +194,6 @@ store.register_lints(&[\n     init_numbered_fields::INIT_NUMBERED_FIELDS,\n     inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n     int_plus_one::INT_PLUS_ONE,\n-    integer_division::INTEGER_DIVISION,\n     invalid_upcast_comparisons::INVALID_UPCAST_COMPARISONS,\n     items_after_statements::ITEMS_AFTER_STATEMENTS,\n     iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR,\n@@ -434,6 +433,7 @@ store.register_lints(&[\n     operators::IDENTITY_OP,\n     operators::INEFFECTIVE_BIT_MASK,\n     operators::INTEGER_ARITHMETIC,\n+    operators::INTEGER_DIVISION,\n     operators::MISREFACTORED_ASSIGN_OP,\n     operators::OP_REF,\n     operators::VERBOSE_BIT_MASK,"}, {"sha": "53d968c4710cb5084b17c6c55e9dee0b1cd9ccef", "filename": "clippy_lints/src/lib.register_restriction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8df16ae1df9084dc8e20e835f3de981e32d110c/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8df16ae1df9084dc8e20e835f3de981e32d110c/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=a8df16ae1df9084dc8e20e835f3de981e32d110c", "patch": "@@ -25,7 +25,6 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(implicit_return::IMPLICIT_RETURN),\n     LintId::of(indexing_slicing::INDEXING_SLICING),\n     LintId::of(inherent_impl::MULTIPLE_INHERENT_IMPL),\n-    LintId::of(integer_division::INTEGER_DIVISION),\n     LintId::of(large_include_file::LARGE_INCLUDE_FILE),\n     LintId::of(let_underscore::LET_UNDERSCORE_MUST_USE),\n     LintId::of(literal_representation::DECIMAL_LITERAL_REPRESENTATION),\n@@ -52,6 +51,7 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(modulo_arithmetic::MODULO_ARITHMETIC),\n     LintId::of(operators::FLOAT_ARITHMETIC),\n     LintId::of(operators::INTEGER_ARITHMETIC),\n+    LintId::of(operators::INTEGER_DIVISION),\n     LintId::of(panic_in_result_fn::PANIC_IN_RESULT_FN),\n     LintId::of(panic_unimplemented::PANIC),\n     LintId::of(panic_unimplemented::TODO),"}, {"sha": "4c4d149e1778ca15b4e85722df11b2972193b991", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8df16ae1df9084dc8e20e835f3de981e32d110c/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8df16ae1df9084dc8e20e835f3de981e32d110c/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a8df16ae1df9084dc8e20e835f3de981e32d110c", "patch": "@@ -254,7 +254,6 @@ mod inherent_to_string;\n mod init_numbered_fields;\n mod inline_fn_without_body;\n mod int_plus_one;\n-mod integer_division;\n mod invalid_upcast_comparisons;\n mod items_after_statements;\n mod iter_not_returning_iterator;\n@@ -734,7 +733,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(assertions_on_constants::AssertionsOnConstants));\n     store.register_late_pass(|| Box::new(transmuting_null::TransmutingNull));\n     store.register_late_pass(|| Box::new(path_buf_push_overwrite::PathBufPushOverwrite));\n-    store.register_late_pass(|| Box::new(integer_division::IntegerDivision));\n     store.register_late_pass(|| Box::new(inherent_to_string::InherentToString));\n     let max_trait_bounds = conf.max_trait_bounds;\n     store.register_late_pass(move || Box::new(trait_bounds::TraitBounds::new(max_trait_bounds)));"}, {"sha": "631d10f4a72e9b14710096f4508a7667e466682f", "filename": "clippy_lints/src/operators/integer_division.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a8df16ae1df9084dc8e20e835f3de981e32d110c/clippy_lints%2Fsrc%2Foperators%2Finteger_division.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8df16ae1df9084dc8e20e835f3de981e32d110c/clippy_lints%2Fsrc%2Foperators%2Finteger_division.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Finteger_division.rs?ref=a8df16ae1df9084dc8e20e835f3de981e32d110c", "patch": "@@ -0,0 +1,27 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+\n+use super::INTEGER_DIVISION;\n+\n+pub(crate) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx hir::Expr<'_>,\n+    op: hir::BinOpKind,\n+    left: &'tcx hir::Expr<'_>,\n+    right: &'tcx hir::Expr<'_>,\n+) {\n+    if op == hir::BinOpKind::Div\n+        && cx.typeck_results().expr_ty(left).is_integral()\n+        && cx.typeck_results().expr_ty(right).is_integral()\n+    {\n+        span_lint_and_help(\n+            cx,\n+            INTEGER_DIVISION,\n+            expr.span,\n+            \"integer division\",\n+            None,\n+            \"division of integers may cause loss of precision. consider using floats\",\n+        );\n+    }\n+}"}, {"sha": "ea6a0083bc8e4faf438c46ac24a0d7f087f6977e", "filename": "clippy_lints/src/operators/mod.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a8df16ae1df9084dc8e20e835f3de981e32d110c/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8df16ae1df9084dc8e20e835f3de981e32d110c/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fmod.rs?ref=a8df16ae1df9084dc8e20e835f3de981e32d110c", "patch": "@@ -11,6 +11,7 @@ mod eq_op;\n mod erasing_op;\n mod float_equality_without_abs;\n mod identity_op;\n+mod integer_division;\n mod misrefactored_assign_op;\n mod numeric_arithmetic;\n mod op_ref;\n@@ -437,6 +438,32 @@ declare_clippy_lint! {\n     \"using identity operations, e.g., `x + 0` or `y / 1`\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for division of integers\n+    ///\n+    /// ### Why is this bad?\n+    /// When outside of some very specific algorithms,\n+    /// integer division is very often a mistake because it discards the\n+    /// remainder.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let x = 3 / 2;\n+    /// println!(\"{}\", x);\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// let x = 3f32 / 2f32;\n+    /// println!(\"{}\", x);\n+    /// ```\n+    #[clippy::version = \"1.37.0\"]\n+    pub INTEGER_DIVISION,\n+    restriction,\n+    \"integer division may cause loss of precision\"\n+}\n+\n pub struct Operators {\n     arithmetic_context: numeric_arithmetic::Context,\n     verbose_bit_mask_threshold: u64,\n@@ -457,6 +484,7 @@ impl_lint_pass!(Operators => [\n     ERASING_OP,\n     FLOAT_EQUALITY_WITHOUT_ABS,\n     IDENTITY_OP,\n+    INTEGER_DIVISION,\n ]);\n impl Operators {\n     pub fn new(verbose_bit_mask_threshold: u64) -> Self {\n@@ -486,6 +514,7 @@ impl<'tcx> LateLintPass<'tcx> for Operators {\n                 double_comparison::check(cx, op.node, lhs, rhs, e.span);\n                 duration_subsec::check(cx, e, op.node, lhs, rhs);\n                 float_equality_without_abs::check(cx, e, op.node, lhs, rhs);\n+                integer_division::check(cx, e, op.node, lhs, rhs);\n             },\n             ExprKind::AssignOp(op, lhs, rhs) => {\n                 self.arithmetic_context.check_binary(cx, e, op.node, lhs, rhs);"}]}