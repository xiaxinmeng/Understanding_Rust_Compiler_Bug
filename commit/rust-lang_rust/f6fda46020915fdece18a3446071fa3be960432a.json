{"sha": "f6fda46020915fdece18a3446071fa3be960432a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZmRhNDYwMjA5MTVmZGVjZTE4YTM0NDYwNzFmYTNiZTk2MDQzMmE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-01T02:45:40Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-01T02:45:40Z"}, "message": "Add TYSPEC_mutable, merge control-flag for it and auto_deref into unify_ctx structure.", "tree": {"sha": "05db2d833e02b8e7520e730dff1ae4236664e08a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05db2d833e02b8e7520e730dff1ae4236664e08a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6fda46020915fdece18a3446071fa3be960432a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6fda46020915fdece18a3446071fa3be960432a", "html_url": "https://github.com/rust-lang/rust/commit/f6fda46020915fdece18a3446071fa3be960432a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6fda46020915fdece18a3446071fa3be960432a/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cab674447f8fa7d4086bd55a3a72f2c066f92314", "url": "https://api.github.com/repos/rust-lang/rust/commits/cab674447f8fa7d4086bd55a3a72f2c066f92314", "html_url": "https://github.com/rust-lang/rust/commit/cab674447f8fa7d4086bd55a3a72f2c066f92314"}], "stats": {"total": 435, "additions": 263, "deletions": 172}, "files": [{"sha": "264070147cd5c272eb5ff8aec9a61699963dac6a", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 263, "deletions": 172, "changes": 435, "blob_url": "https://github.com/rust-lang/rust/blob/f6fda46020915fdece18a3446071fa3be960432a/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/f6fda46020915fdece18a3446071fa3be960432a/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=f6fda46020915fdece18a3446071fa3be960432a", "patch": "@@ -6,6 +6,7 @@ type tyspec =\n   | TYSPEC_all\n   | TYSPEC_resolved of (Ast.ty_param array) * Ast.ty\n   | TYSPEC_exterior of tyvar                  (* @ of some t *)\n+  | TYSPEC_mutable of tyvar                   (* something mutable *)\n   | TYSPEC_callable of (tyvar * tyvar array)  (* out, ins *)\n   | TYSPEC_collection of tyvar                (* vec or str *)\n   | TYSPEC_comparable                         (* comparable with = and != *)\n@@ -110,6 +111,10 @@ let rec tyspec_to_str (ts:tyspec) : string =\n           fmt ff \"@@\";\n           fmt_tyspec ff (!tv)\n \n+      | TYSPEC_mutable tv ->\n+          fmt ff \"mutable \";\n+          fmt_tyspec ff (!tv)\n+\n       | TYSPEC_callable (out, ins) ->\n           fmt_obb ff;\n           fmt ff \"callable fn(\";\n@@ -166,6 +171,32 @@ let rec resolve_tyvar (tv:tyvar) : tyvar =\n     | _ -> tv\n ;;\n \n+type unify_ctxt =\n+    { mut_ok: bool;\n+      ext_ok: bool }\n+;;\n+\n+let arg_pass_ctx =\n+  { ext_ok = false;\n+    mut_ok = true }\n+;;\n+\n+let rval_ctx =\n+  { ext_ok = true;\n+    mut_ok = true }\n+;;\n+\n+let lval_ctx =\n+  { ext_ok = false;\n+    mut_ok = true }\n+;;\n+\n+let strict_ctx =\n+  { ext_ok = false;\n+    mut_ok = false }\n+;;\n+\n+\n let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n \n   let depth = ref 0 in\n@@ -206,38 +237,43 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n   let visitor (cx:ctxt) (inner:Walk.visitor) : Walk.visitor =\n \n     let rec unify_slot\n-        (auto_deref:bool)\n+        (ucx:unify_ctxt)\n         (slot:Ast.slot)\n         (id_opt:node_id option)\n         (tv:tyvar) : unit =\n       match id_opt with\n-          Some id -> unify_tyvars auto_deref (Hashtbl.find bindings id) tv\n+          Some id ->\n+            unify_tyvars ucx (Hashtbl.find bindings id) tv\n         | None ->\n             match slot.Ast.slot_ty with\n                 None -> bug () \"untyped unidentified slot\"\n-              | Some ty -> unify_ty auto_deref ty tv\n+              | Some ty -> unify_ty ucx ty tv\n \n     and check_sane_tyvar tv =\n       match !tv with\n           TYSPEC_resolved (_, (Ast.TY_named _)) ->\n             bug () \"named-type in type checker\"\n         | _ -> ()\n \n-    and unify_tyvars (auto_deref:bool) (av:tyvar) (bv:tyvar) : unit =\n+    and unify_tyvars (ucx:unify_ctxt) (av:tyvar) (bv:tyvar) : unit =\n       let indent = String.make (4 * (!depth)) ' ' in\n         iflog cx\n           (fun _ ->\n              log cx \"%s> unifying types:\" indent;\n-             if auto_deref\n+             if ucx.ext_ok || ucx.mut_ok\n              then\n-               log cx \"%s> (w/ auto-deref)\" indent;\n+               log cx \"%s> (w/ %s%s%s)\"\n+                 indent\n+                 (if ucx.ext_ok then \"ext-ok\" else \"\")\n+                 (if ucx.ext_ok && ucx.mut_ok then \" \" else \"\")\n+                 (if ucx.mut_ok then \"mut-ok\" else \"\");\n              log cx \"%s> input tyvar A:     %s\" indent (tyspec_to_str !av);\n              log cx \"%s> input tyvar B:     %s\" indent (tyspec_to_str !bv));\n         check_sane_tyvar av;\n         check_sane_tyvar bv;\n \n         incr depth;\n-        unify_tyvars' auto_deref av bv;\n+        unify_tyvars' ucx av bv;\n         decr depth;\n \n         iflog cx\n@@ -248,7 +284,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n         check_sane_tyvar av;\n         check_sane_tyvar bv;\n \n-    and unify_tyvars' (auto_deref:bool) (av:tyvar) (bv:tyvar) : unit =\n+    and unify_tyvars' (ucx:unify_ctxt) (av:tyvar) (bv:tyvar) : unit =\n       let (a, b) = ((resolve_tyvar av), (resolve_tyvar bv)) in\n       let fail () =\n         err None \"mismatched types: %s vs. %s\" (tyspec_to_str !av)\n@@ -259,7 +295,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n         let c = Hashtbl.create ((Hashtbl.length a) + (Hashtbl.length b)) in\n         let merge ident tv_a =\n           if Hashtbl.mem c ident\n-          then unify_tyvars auto_deref (Hashtbl.find c ident) tv_a\n+          then unify_tyvars ucx (Hashtbl.find c ident) tv_a\n           else Hashtbl.add c ident tv_a\n         in\n           Hashtbl.iter (Hashtbl.add c) b;\n@@ -278,7 +314,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n         in\n \n         let check_entry ident tv =\n-          unify_ty auto_deref (find_ty ident) tv\n+          unify_ty ucx (find_ty ident) tv\n         in\n           Hashtbl.iter check_entry dct\n       in\n@@ -289,7 +325,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n         let check_entry (query:Ast.ident) tv : unit =\n           match htab_search fns query with\n               None -> fail ()\n-            | Some fn -> unify_ty auto_deref (Ast.TY_fn fn) tv\n+            | Some fn -> unify_ty ucx (Ast.TY_fn fn) tv\n         in\n           Hashtbl.iter check_entry dct\n       in\n@@ -300,9 +336,9 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n           : Ast.ty =\n         match ty_a, ty_b with\n             a, b when a = b -> a\n-          | Ast.TY_exterior a, b | b, Ast.TY_exterior a when auto_deref ->\n+          | Ast.TY_exterior a, b | b, Ast.TY_exterior a when ucx.ext_ok ->\n               Ast.TY_exterior (unify_resolved_types a b)\n-          | Ast.TY_mutable a, b | b, Ast.TY_mutable a ->\n+          | Ast.TY_mutable a, b | b, Ast.TY_mutable a when ucx.mut_ok ->\n               Ast.TY_mutable (unify_resolved_types a b)\n           | Ast.TY_constrained (a, constrs), b\n           | b, Ast.TY_constrained (a, constrs) ->\n@@ -321,22 +357,19 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n           | Ast.TY_fn _ | Ast.TY_obj _\n           | Ast.TY_param _ | Ast.TY_native _ | Ast.TY_type -> false\n           | Ast.TY_named _ -> bug () \"unexpected named type\"\n-          | Ast.TY_mutable ty\n           | Ast.TY_constrained (ty, _) ->\n               is_comparable_or_ordered comparable ty\n+          | Ast.TY_mutable ty ->\n+              ucx.mut_ok && is_comparable_or_ordered comparable ty\n           | Ast.TY_exterior ty ->\n-              if auto_deref\n-              then\n-                is_comparable_or_ordered comparable ty\n-              else\n-                false\n+              ucx.ext_ok && is_comparable_or_ordered comparable ty\n       in\n \n       let rec floating (ty:Ast.ty) : bool =\n         match ty with\n             Ast.TY_mach TY_f32 | Ast.TY_mach TY_f64 -> true\n-          | Ast.TY_mutable ty -> floating ty\n-          | Ast.TY_exterior ty when auto_deref -> floating ty\n+          | Ast.TY_mutable ty when ucx.mut_ok -> floating ty\n+          | Ast.TY_exterior ty when ucx.ext_ok -> floating ty\n           | _ -> false\n       in\n \n@@ -347,8 +380,8 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n           | Ast.TY_mach TY_i16 | Ast.TY_mach TY_i32\n           | Ast.TY_mach TY_i64 ->\n               true\n-          | Ast.TY_mutable ty -> integral ty\n-          | Ast.TY_exterior ty when auto_deref -> integral ty\n+          | Ast.TY_mutable ty when ucx.mut_ok -> integral ty\n+          | Ast.TY_exterior ty when ucx.ext_ok -> integral ty\n           | _ -> false\n       in\n \n@@ -358,8 +391,8 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n         match ty with\n             Ast.TY_str -> true\n           | Ast.TY_vec _ -> true\n-          | Ast.TY_mutable ty -> plusable ty\n-          | Ast.TY_exterior ty when auto_deref -> plusable ty\n+          | Ast.TY_mutable ty when ucx.mut_ok -> plusable ty\n+          | Ast.TY_exterior ty when ucx.ext_ok -> plusable ty\n           | _ -> numeric ty\n       in\n \n@@ -369,8 +402,8 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n           | Ast.TY_mach TY_u8 | Ast.TY_mach TY_u16 | Ast.TY_mach TY_u32\n           | Ast.TY_mach TY_i8 | Ast.TY_mach TY_i16 | Ast.TY_mach TY_i32\n               -> true\n-          | Ast.TY_mutable ty -> loggable ty\n-          | Ast.TY_exterior ty when auto_deref -> loggable ty\n+          | Ast.TY_mutable ty when ucx.mut_ok -> loggable ty\n+          | Ast.TY_exterior ty when ucx.ext_ok -> loggable ty\n           | _ -> false\n       in\n \n@@ -383,22 +416,46 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n \n           (* exterior *)\n \n+          | (TYSPEC_exterior a', TYSPEC_exterior b') ->\n+              unify_tyvars ucx a' b'; !a\n+\n           | (TYSPEC_exterior a',\n              TYSPEC_resolved (_, Ast.TY_exterior _)) ->\n-               unify_tyvars auto_deref a' b; !b\n+               unify_tyvars ucx a' b; !b\n \n           | (TYSPEC_resolved (_, Ast.TY_exterior _),\n              TYSPEC_exterior b') ->\n-               unify_tyvars auto_deref a b'; !b\n+               unify_tyvars ucx a b'; !a\n \n-          | (TYSPEC_exterior a', _) when auto_deref\n-              -> unify_tyvars auto_deref a' b; !a\n-          | (_, TYSPEC_exterior b') when auto_deref\n-              -> unify_tyvars auto_deref a b'; !b\n+          | (TYSPEC_exterior a', _) when ucx.ext_ok\n+              -> unify_tyvars ucx a' b; !a\n+          | (_, TYSPEC_exterior b') when ucx.ext_ok\n+              -> unify_tyvars ucx a b'; !b\n \n           | (_, TYSPEC_exterior _)\n           | (TYSPEC_exterior _, _) -> fail()\n \n+          (* mutable *)\n+\n+          | (TYSPEC_mutable a', TYSPEC_mutable b') ->\n+              unify_tyvars ucx a' b'; !a\n+\n+          | (TYSPEC_mutable a',\n+             TYSPEC_resolved (_, Ast.TY_mutable _)) ->\n+               unify_tyvars ucx a' b; !b\n+\n+          | (TYSPEC_resolved (_, Ast.TY_mutable _),\n+             TYSPEC_mutable b') ->\n+               unify_tyvars ucx a b'; !a\n+\n+          | (TYSPEC_mutable a', _) when ucx.mut_ok\n+              -> unify_tyvars ucx a' b; !a\n+          | (_, TYSPEC_mutable b') when ucx.mut_ok\n+              -> unify_tyvars ucx a b'; !b\n+\n+          | (_, TYSPEC_mutable _)\n+          | (TYSPEC_mutable _, _) -> fail()\n+\n           (* resolved *)\n \n           | (TYSPEC_resolved (params_a, ty_a),\n@@ -412,7 +469,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n           | (TYSPEC_callable (out_tv, in_tvs),\n              TYSPEC_resolved (params, ty)) ->\n               let unify_in_slot i in_slot =\n-                unify_slot false in_slot None in_tvs.(i)\n+                unify_slot arg_pass_ctx in_slot None in_tvs.(i)\n               in\n                 let rec unify ty =\n                   match ty with\n@@ -424,12 +481,13 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                         then\n                           fail ()\n                         else\n-                          unify_slot false out_slot None out_tv;\n+                          unify_slot arg_pass_ctx out_slot None out_tv;\n                           Array.iteri unify_in_slot in_slots;\n                           ty\n-                    | Ast.TY_exterior ty when auto_deref\n+                    | Ast.TY_exterior ty when ucx.ext_ok\n                         -> Ast.TY_exterior (unify ty)\n-                    | Ast.TY_mutable ty -> Ast.TY_mutable (unify ty)\n+                    | Ast.TY_mutable ty when ucx.mut_ok\n+                        -> Ast.TY_mutable (unify ty)\n                     | _ -> fail ()\n                 in\n                 TYSPEC_resolved (params, unify ty)\n@@ -438,12 +496,13 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n           | (TYSPEC_collection tv, TYSPEC_resolved (params, ty)) ->\n               let rec unify ty =\n                 match ty with\n-                    Ast.TY_vec ty' -> unify_ty auto_deref ty' tv; ty\n+                    Ast.TY_vec ty' -> unify_ty ucx ty' tv; ty\n                   | Ast.TY_str ->\n-                      unify_ty auto_deref (Ast.TY_mach TY_u8) tv; ty\n+                      unify_ty ucx (Ast.TY_mach TY_u8) tv; ty\n                   | Ast.TY_exterior ty\n-                      when auto_deref -> Ast.TY_exterior (unify ty)\n-                  | Ast.TY_mutable ty -> Ast.TY_mutable (unify ty)\n+                      when ucx.ext_ok -> Ast.TY_exterior (unify ty)\n+                  | Ast.TY_mutable ty\n+                      when ucx.mut_ok -> Ast.TY_mutable (unify ty)\n                   | _ -> fail ()\n               in\n               TYSPEC_resolved (params, unify ty)\n@@ -469,8 +528,9 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                       unify_dict_with_obj_fns dct fns;\n                       ty\n                   | Ast.TY_exterior ty\n-                      when auto_deref -> Ast.TY_exterior (unify ty)\n-                  | Ast.TY_mutable ty -> Ast.TY_mutable (unify ty)\n+                      when ucx.ext_ok -> Ast.TY_exterior (unify ty)\n+                  | Ast.TY_mutable ty\n+                      when ucx.mut_ok -> Ast.TY_mutable (unify ty)\n                   | _ -> fail ()\n               in\n               TYSPEC_resolved (params, unify ty)\n@@ -500,7 +560,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n           | (TYSPEC_resolved (params, ty), TYSPEC_app (tv, args))\n           | (TYSPEC_app (tv, args), TYSPEC_resolved (params, ty)) ->\n               let ty = rebuild_ty_under_params ty params args false in\n-                unify_ty auto_deref ty tv;\n+                unify_ty ucx ty tv;\n                 TYSPEC_resolved ([| |], ty)\n \n           | (TYSPEC_resolved (params, ty), TYSPEC_record dct)\n@@ -511,8 +571,9 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                       unify_dict_with_record_fields dct fields;\n                       ty\n                   | Ast.TY_exterior ty\n-                      when auto_deref -> Ast.TY_exterior (unify ty)\n-                  | Ast.TY_mutable ty -> Ast.TY_mutable (unify ty)\n+                      when ucx.ext_ok -> Ast.TY_exterior (unify ty)\n+                  | Ast.TY_mutable ty\n+                      when ucx.mut_ok -> Ast.TY_mutable (unify ty)\n                   | _ -> fail ()\n               in\n               TYSPEC_resolved (params, unify ty)\n@@ -526,13 +587,14 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                       then fail ()\n                       else\n                         let check_elem i tv =\n-                          unify_ty auto_deref (elem_tys.(i)) tv\n+                          unify_ty ucx (elem_tys.(i)) tv\n                         in\n                           Array.iteri check_elem tvs;\n                           ty\n                   | Ast.TY_exterior ty\n-                      when auto_deref -> Ast.TY_exterior (unify ty)\n-                  | Ast.TY_mutable ty -> Ast.TY_mutable (unify ty)\n+                      when ucx.ext_ok -> Ast.TY_exterior (unify ty)\n+                  | Ast.TY_mutable ty\n+                      when ucx.ext_ok -> Ast.TY_mutable (unify ty)\n                   | _ -> fail ()\n               in\n               TYSPEC_resolved (params, unify ty)\n@@ -541,10 +603,11 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n           | (TYSPEC_vector tv, TYSPEC_resolved (params, ty)) ->\n               let rec unify ty =\n                 match ty with\n-                    Ast.TY_vec ty' -> unify_ty auto_deref ty' tv; ty\n-                  | Ast.TY_exterior ty when auto_deref ->\n+                    Ast.TY_vec ty' -> unify_ty ucx ty' tv; ty\n+                  | Ast.TY_exterior ty when ucx.ext_ok ->\n                       Ast.TY_exterior (unify ty)\n-                  | Ast.TY_mutable ty -> Ast.TY_mutable (unify ty)\n+                  | Ast.TY_mutable ty when ucx.mut_ok ->\n+                      Ast.TY_mutable (unify ty)\n                   | _ -> fail ()\n               in\n               TYSPEC_resolved (params, unify ty)\n@@ -553,9 +616,10 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n \n           | (TYSPEC_callable (a_out_tv, a_in_tvs),\n              TYSPEC_callable (b_out_tv, b_in_tvs)) ->\n-              unify_tyvars false a_out_tv b_out_tv;\n+              unify_tyvars arg_pass_ctx a_out_tv b_out_tv;\n               let check_in_tv i a_in_tv =\n-                unify_tyvars false a_in_tv b_in_tvs.(i)\n+                unify_tyvars arg_pass_ctx\n+                  a_in_tv b_in_tvs.(i)\n               in\n                 Array.iteri check_in_tv a_in_tvs;\n                 TYSPEC_callable (a_out_tv, a_in_tvs)\n@@ -588,7 +652,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n           (* collection *)\n \n           | (TYSPEC_collection av, TYSPEC_collection bv) ->\n-              unify_tyvars auto_deref av bv;\n+              unify_tyvars ucx av bv;\n               TYSPEC_collection av\n \n           | (TYSPEC_collection av, TYSPEC_comparable)\n@@ -617,7 +681,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n \n           | (TYSPEC_collection av, TYSPEC_vector bv)\n           | (TYSPEC_vector bv, TYSPEC_collection av) ->\n-              unify_tyvars auto_deref av bv;\n+              unify_tyvars ucx av bv;\n               TYSPEC_vector av\n \n           (* comparable *)\n@@ -786,7 +850,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n               then fail()\n               else\n                 begin\n-                  unify_tyvars auto_deref tv_a tv_b;\n+                  unify_tyvars ucx tv_a tv_b;\n                   TYSPEC_app (tv_a, args_a)\n                 end\n \n@@ -819,7 +883,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                 else if i >= len_b\n                 then tvs_a.(i)\n                 else begin\n-                  unify_tyvars false tvs_a.(i) tvs_b.(i);\n+                  unify_tyvars strict_ctx tvs_a.(i) tvs_b.(i);\n                   tvs_a.(i)\n                 end\n               in\n@@ -831,27 +895,27 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n           (* vector *)\n \n           | (TYSPEC_vector av, TYSPEC_vector bv) ->\n-              unify_tyvars false av bv;\n+              unify_tyvars strict_ctx av bv;\n               TYSPEC_vector av\n       in\n       let c = ref result in\n         a := TYSPEC_equiv c;\n         b := TYSPEC_equiv c\n \n     and unify_ty_parametric\n-        (auto_deref:bool)\n+        (ucx:unify_ctxt)\n         (ty:Ast.ty)\n         (tps:Ast.ty_param array)\n         (tv:tyvar)\n         : unit =\n-      unify_tyvars auto_deref (ref (TYSPEC_resolved (tps, ty))) tv\n+      unify_tyvars ucx (ref (TYSPEC_resolved (tps, ty))) tv\n \n-    and unify_ty (auto_deref:bool) (ty:Ast.ty) (tv:tyvar) : unit =\n-      unify_ty_parametric auto_deref ty [||] tv\n+    and unify_ty (ucx:unify_ctxt) (ty:Ast.ty) (tv:tyvar) : unit =\n+      unify_ty_parametric ucx ty [||] tv\n \n     in\n \n-    let rec unify_lit (auto_deref:bool) (lit:Ast.lit) (tv:tyvar) : unit =\n+    let rec unify_lit (ucx:unify_ctxt) (lit:Ast.lit) (tv:tyvar) : unit =\n       let ty =\n         match lit with\n             Ast.LIT_nil -> Ast.TY_nil\n@@ -861,16 +925,16 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n           | Ast.LIT_uint (_, _) -> Ast.TY_uint\n           | Ast.LIT_char _ -> Ast.TY_char\n       in\n-        unify_ty auto_deref ty tv\n+        unify_ty ucx ty tv\n \n-    and unify_atom (auto_deref:bool) (atom:Ast.atom) (tv:tyvar) : unit =\n+    and unify_atom (ucx:unify_ctxt) (atom:Ast.atom) (tv:tyvar) : unit =\n       match atom with\n           Ast.ATOM_literal { node = literal; id = _ } ->\n-            unify_lit auto_deref literal tv\n+            unify_lit ucx literal tv\n         | Ast.ATOM_lval lval ->\n-            unify_lval auto_deref lval tv\n+            unify_lval ucx lval tv\n \n-    and unify_expr (auto_deref:bool) (expr:Ast.expr) (tv:tyvar) : unit =\n+    and unify_expr (ucx:unify_ctxt) (expr:Ast.expr) (tv:tyvar) : unit =\n       match expr with\n           Ast.EXPR_binary (binop, lhs, rhs) ->\n             let binop_sig = match binop with\n@@ -901,64 +965,64 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n               begin\n                 match binop_sig with\n                     BINOPSIG_bool_bool_bool ->\n-                      unify_atom true lhs\n+                      unify_atom rval_ctx lhs\n                         (ref (TYSPEC_resolved ([||], Ast.TY_bool)));\n-                      unify_atom true rhs\n+                      unify_atom rval_ctx rhs\n                         (ref (TYSPEC_resolved ([||], Ast.TY_bool)));\n-                      unify_ty true Ast.TY_bool tv\n+                      unify_ty rval_ctx Ast.TY_bool tv\n                   | BINOPSIG_comp_comp_bool ->\n                       let tv_a = ref TYSPEC_comparable in\n-                        unify_atom true lhs tv_a;\n-                        unify_atom true rhs tv_a;\n-                        unify_ty true Ast.TY_bool tv\n+                        unify_atom rval_ctx lhs tv_a;\n+                        unify_atom rval_ctx rhs tv_a;\n+                        unify_ty rval_ctx Ast.TY_bool tv\n                   | BINOPSIG_ord_ord_bool ->\n                       let tv_a = ref TYSPEC_ordered in\n-                        unify_atom true lhs tv_a;\n-                        unify_atom true rhs tv_a;\n-                        unify_ty true Ast.TY_bool tv\n+                        unify_atom rval_ctx lhs tv_a;\n+                        unify_atom rval_ctx rhs tv_a;\n+                        unify_ty rval_ctx Ast.TY_bool tv\n                   | BINOPSIG_integ_integ_integ ->\n                       let tv_a = ref TYSPEC_integral in\n-                        unify_atom true lhs tv_a;\n-                        unify_atom true rhs tv_a;\n-                        unify_tyvars true tv tv_a\n+                        unify_atom rval_ctx lhs tv_a;\n+                        unify_atom rval_ctx rhs tv_a;\n+                        unify_tyvars rval_ctx tv tv_a\n                   | BINOPSIG_num_num_num ->\n                       let tv_a = ref TYSPEC_numeric in\n-                        unify_atom true lhs tv_a;\n-                        unify_atom true rhs tv_a;\n-                        unify_tyvars true tv tv_a\n+                        unify_atom rval_ctx lhs tv_a;\n+                        unify_atom rval_ctx rhs tv_a;\n+                        unify_tyvars rval_ctx tv tv_a\n                   | BINOPSIG_plus_plus_plus ->\n                       let tv_a = ref TYSPEC_plusable in\n-                        unify_atom true lhs tv_a;\n-                        unify_atom true rhs tv_a;\n-                        unify_tyvars true tv tv_a\n+                        unify_atom rval_ctx lhs tv_a;\n+                        unify_atom rval_ctx rhs tv_a;\n+                        unify_tyvars rval_ctx tv tv_a\n               end\n         | Ast.EXPR_unary (unop, atom) ->\n             begin\n               match unop with\n                   Ast.UNOP_not ->\n-                    unify_atom true atom\n+                    unify_atom rval_ctx atom\n                       (ref (TYSPEC_resolved ([||], Ast.TY_bool)));\n-                    unify_ty true Ast.TY_bool tv\n+                    unify_ty rval_ctx Ast.TY_bool tv\n                 | Ast.UNOP_bitnot ->\n                     let tv_a = ref TYSPEC_integral in\n-                      unify_atom true atom tv_a;\n-                      unify_tyvars true tv tv_a\n+                      unify_atom rval_ctx atom tv_a;\n+                      unify_tyvars rval_ctx tv tv_a\n                 | Ast.UNOP_neg ->\n                     let tv_a = ref TYSPEC_numeric in\n-                      unify_atom true atom tv_a;\n-                      unify_tyvars true tv tv_a\n+                      unify_atom rval_ctx atom tv_a;\n+                      unify_tyvars rval_ctx tv tv_a\n                 | Ast.UNOP_cast t ->\n                     (* FIXME (issue #84): check cast-validity in\n                      * post-typecheck pass.  Only some casts make sense.\n                      *)\n                     let tv_a = ref TYSPEC_all in\n                     let t = Hashtbl.find cx.ctxt_all_cast_types t.id in\n-                      unify_atom true atom tv_a;\n-                      unify_ty true t tv\n+                      unify_atom rval_ctx atom tv_a;\n+                      unify_ty rval_ctx t tv\n             end\n-        | Ast.EXPR_atom atom -> unify_atom auto_deref atom tv\n+        | Ast.EXPR_atom atom -> unify_atom ucx atom tv\n \n-    and unify_lval' (auto_deref:bool) (lval:Ast.lval) (tv:tyvar) : unit =\n+    and unify_lval' (ucx:unify_ctxt) (lval:Ast.lval) (tv:tyvar) : unit =\n       let note_args args =\n         iflog cx (fun _ -> log cx \"noting lval '%a' type arguments: %a\"\n                     Ast.sprintf_lval lval Ast.sprintf_app_args args);\n@@ -980,7 +1044,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                                 log cx \"lval-base slot tyspec for %a = %s\"\n                                   Ast.sprintf_lval lval (tyspec_to_str (!tv));\n                           end;\n-                        unify_slot auto_deref slot (Some referent) tv\n+                        unify_slot ucx slot (Some referent) tv\n \n                     | _ ->\n                         let spec = (!(Hashtbl.find bindings referent)) in\n@@ -1002,7 +1066,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                                 ref (TYSPEC_app (tv, args))\n                             | _ -> err None \"bad lval / tyspec combination\"\n                         in\n-                          unify_tyvars auto_deref (ref spec) tv\n+                          unify_tyvars ucx (ref spec) tv\n                 end\n           | Ast.LVAL_ext (base, comp) ->\n               let base_ts = match comp with\n@@ -1023,36 +1087,36 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                       TYSPEC_tuple (Array.init (i + 1) init)\n \n                 | Ast.COMP_atom atom ->\n-                    unify_atom true atom\n+                    unify_atom rval_ctx atom\n                       (ref (TYSPEC_resolved ([||], Ast.TY_int)));\n                     TYSPEC_collection tv\n \n                 | Ast.COMP_deref ->\n                     TYSPEC_exterior tv\n               in\n               let base_tv = ref base_ts in\n-                unify_lval' auto_deref base base_tv;\n+                unify_lval' ucx base base_tv;\n                 match !(resolve_tyvar base_tv) with\n                     TYSPEC_resolved (_, ty) ->\n-                      unify_ty auto_deref (project_type ty comp) tv\n+                      unify_ty ucx (project_type ty comp) tv\n                   | _ ->\n                       ()\n \n-    and unify_lval (auto_deref:bool) (lval:Ast.lval) (tv:tyvar) : unit =\n+    and unify_lval (ucx:unify_ctxt) (lval:Ast.lval) (tv:tyvar) : unit =\n       let id = lval_base_id lval in\n         (* Fetch lval with type components resolved. *)\n         let lval = Hashtbl.find cx.ctxt_all_lvals id in\n         iflog cx (fun _ -> log cx\n                     \"fetched resolved version of lval #%d = %a\"\n                     (int_of_node id) Ast.sprintf_lval lval);\n           Hashtbl.add lval_tyvars id tv;\n-          unify_lval' auto_deref lval tv\n+          unify_lval' ucx lval tv\n \n     in\n     let gen_atom_tvs atoms =\n       let gen_atom_tv atom =\n         let tv = ref TYSPEC_all in\n-          unify_atom false atom tv;\n+          unify_atom strict_ctx atom tv;\n           tv\n       in\n         Array.map gen_atom_tv atoms\n@@ -1062,101 +1126,103 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n       let check_callable out_tv callee args =\n         let in_tvs = gen_atom_tvs args in\n         let callee_tv = ref (TYSPEC_callable (out_tv, in_tvs)) in\n-          unify_lval false callee callee_tv;\n+          unify_lval rval_ctx callee callee_tv;\n       in\n+\n+      let ty t = ref (TYSPEC_resolved ([||], t)) in\n+      let any _ = ref TYSPEC_all in\n+\n       match stmt.node with\n-          Ast.STMT_spawn (out, _, callee, args) ->\n-            let out_tv = ref (TYSPEC_resolved ([||], Ast.TY_nil)) in\n-              unify_lval true out (ref (TYSPEC_resolved ([||], Ast.TY_task)));\n+          Ast.STMT_spawn (dst, _, callee, args) ->\n+            let out_tv = ty Ast.TY_nil in\n+              unify_lval lval_ctx dst (ty Ast.TY_task);\n               check_callable out_tv callee args\n \n-        | Ast.STMT_init_rec (lval, fields, Some base) ->\n+        | Ast.STMT_init_rec (dst, fields, Some base) ->\n             let dct = Hashtbl.create 10 in\n             let tvrec = ref (TYSPEC_record dct) in\n             let add_field (ident, atom) =\n-              let tv = ref TYSPEC_all in\n-                unify_atom true atom tv;\n+              let tv = any() in\n+                unify_atom rval_ctx atom tv;\n                 Hashtbl.add dct ident tv\n             in\n               Array.iter add_field fields;\n-              let tvbase = ref TYSPEC_all in\n-                unify_lval true base tvbase;\n-                unify_tyvars true tvrec tvbase;\n-                unify_lval true lval tvrec\n+              let tvbase = any() in\n+                unify_lval rval_ctx base tvbase;\n+                unify_tyvars rval_ctx tvrec tvbase;\n+                unify_lval lval_ctx dst tvrec\n \n-        | Ast.STMT_init_rec (lval, fields, None) ->\n+        | Ast.STMT_init_rec (dst, fields, None) ->\n             let dct = Hashtbl.create 10 in\n             let add_field (ident, atom) =\n-              let tv = ref TYSPEC_all in\n-                unify_atom true atom tv;\n+              let tv = any() in\n+                unify_atom rval_ctx atom tv;\n                 Hashtbl.add dct ident tv\n             in\n               Array.iter add_field fields;\n-              unify_lval true lval (ref (TYSPEC_record dct))\n+              unify_lval lval_ctx dst (ref (TYSPEC_record dct))\n \n-        | Ast.STMT_init_tup (lval, members) ->\n+        | Ast.STMT_init_tup (dst, members) ->\n             let member_to_tv atom =\n-              let tv = ref TYSPEC_all in\n-                unify_atom true atom tv;\n+              let tv = any() in\n+                unify_atom rval_ctx atom tv;\n                 tv\n             in\n             let member_tvs = Array.map member_to_tv members in\n-              unify_lval true lval (ref (TYSPEC_tuple member_tvs))\n+              unify_lval lval_ctx dst (ref (TYSPEC_tuple member_tvs))\n \n-        | Ast.STMT_init_vec (lval, atoms) ->\n-            let tv = ref TYSPEC_all in\n-            let unify_with_tv atom = unify_atom true atom tv in\n+        | Ast.STMT_init_vec (dst, atoms) ->\n+            let tv = any() in\n+            let unify_with_tv atom = unify_atom rval_ctx atom tv in\n               Array.iter unify_with_tv atoms;\n-              unify_lval true lval (ref (TYSPEC_vector tv))\n+              unify_lval lval_ctx dst (ref (TYSPEC_vector tv))\n \n-        | Ast.STMT_init_str (lval, _) ->\n-            unify_lval true lval (ref (TYSPEC_resolved ([||], Ast.TY_str)))\n+        | Ast.STMT_init_str (dst, _) ->\n+            unify_lval lval_ctx dst (ty Ast.TY_str)\n \n-        | Ast.STMT_copy (lval, expr) ->\n-            let tv = ref TYSPEC_all in\n-              unify_expr false expr tv;\n-              unify_lval false lval tv\n+        | Ast.STMT_copy (dst, expr) ->\n+            let tv = any() in\n+              unify_expr rval_ctx expr tv;\n+              unify_lval lval_ctx dst tv\n \n-        | Ast.STMT_copy_binop (lval, binop, at) ->\n-            let tv = ref TYSPEC_all in\n-              unify_expr false\n-                (Ast.EXPR_binary (binop, Ast.ATOM_lval lval, at)) tv;\n-              unify_lval false lval tv;\n+        | Ast.STMT_copy_binop (dst, binop, at) ->\n+            let tv = any() in\n+              unify_expr rval_ctx\n+                (Ast.EXPR_binary (binop, Ast.ATOM_lval dst, at)) tv;\n+              unify_lval lval_ctx dst tv;\n \n         | Ast.STMT_call (out, callee, args) ->\n-            let out_tv = ref TYSPEC_all in\n-              unify_lval false out out_tv;\n+            let out_tv = any() in\n+              unify_lval arg_pass_ctx out out_tv;\n               check_callable out_tv callee args\n \n-        | Ast.STMT_log atom -> unify_atom true atom (ref TYSPEC_loggable)\n+        | Ast.STMT_log atom ->\n+            unify_atom rval_ctx atom (ref TYSPEC_loggable)\n \n         | Ast.STMT_check_expr expr ->\n-            unify_expr true expr (ref (TYSPEC_resolved ([||], Ast.TY_bool)))\n+            unify_expr rval_ctx expr (ty Ast.TY_bool)\n \n         | Ast.STMT_check (_, check_calls) ->\n-            let out_tv = ref (TYSPEC_resolved ([||], Ast.TY_bool)) in\n+            let out_tv = ty Ast.TY_bool in\n               Array.iter\n                 (fun (callee, args) ->\n                    check_callable out_tv callee args)\n                 check_calls\n \n-        | Ast.STMT_while { Ast.while_lval = (_, expr);\n-                           Ast.while_body = _ } ->\n-            unify_expr true\n-              expr (ref (TYSPEC_resolved ([||], Ast.TY_bool)))\n+        | Ast.STMT_while { Ast.while_lval = (_, expr) } ->\n+            unify_expr rval_ctx expr (ty Ast.TY_bool)\n \n         | Ast.STMT_if { Ast.if_test = if_test } ->\n-            unify_expr true\n-              if_test (ref (TYSPEC_resolved ([||], Ast.TY_bool)));\n+            unify_expr rval_ctx if_test (ty Ast.TY_bool);\n \n         | Ast.STMT_decl _ -> ()\n \n         | Ast.STMT_ret atom_opt\n         | Ast.STMT_put atom_opt ->\n             begin\n               match atom_opt with\n-                  None -> unify_ty false Ast.TY_nil (retval_tv())\n-                | Some atom -> unify_atom false atom (retval_tv())\n+                  None -> unify_ty arg_pass_ctx Ast.TY_nil (retval_tv())\n+                | Some atom -> unify_atom arg_pass_ctx atom (retval_tv())\n             end\n \n         | Ast.STMT_be (callee, args) ->\n@@ -1166,15 +1232,15 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n             (* FIXME (issue #81): handle binding type parameters\n              * eventually.\n              *)\n-            let out_tv = ref TYSPEC_all in\n+            let out_tv = any() in\n             let residue = ref [] in\n             let gen_atom_opt_tvs atoms =\n               let gen_atom_tv atom_opt =\n-                let tv = ref TYSPEC_all in\n+                let tv = any() in\n                   begin\n                     match atom_opt with\n                         None -> residue := tv :: (!residue);\n-                      | Some atom -> unify_atom false atom tv\n+                      | Some atom -> unify_atom arg_pass_ctx atom tv\n                   end;\n                   tv\n               in\n@@ -1185,28 +1251,28 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n             let arg_residue_tvs = Array.of_list (List.rev (!residue)) in\n             let callee_tv = ref (TYSPEC_callable (out_tv, in_tvs)) in\n             let bound_tv = ref (TYSPEC_callable (out_tv, arg_residue_tvs)) in\n-              unify_lval true callee callee_tv;\n-              unify_lval false bound bound_tv\n+              unify_lval rval_ctx callee callee_tv;\n+              unify_lval lval_ctx bound bound_tv\n \n         | Ast.STMT_for_each fe ->\n-            let out_tv = ref TYSPEC_all in\n+            let out_tv = any() in\n             let (si, _) = fe.Ast.for_each_slot in\n             let (callee, args) = fe.Ast.for_each_call in\n-              unify_slot false si.node (Some si.id) out_tv;\n+              unify_slot lval_ctx si.node (Some si.id) out_tv;\n               check_callable out_tv callee args\n \n         | Ast.STMT_for fo ->\n             let mem_tv = ref TYSPEC_all in\n             let seq_tv = ref (TYSPEC_collection mem_tv) in\n             let (si, _) = fo.Ast.for_slot in\n             let (_, seq) = fo.Ast.for_seq in\n-              unify_lval true seq seq_tv;\n-              unify_slot false si.node (Some si.id) mem_tv\n+              unify_lval rval_ctx seq seq_tv;\n+              unify_slot lval_ctx si.node (Some si.id) mem_tv\n \n         | Ast.STMT_alt_tag\n             { Ast.alt_tag_lval = lval; Ast.alt_tag_arms = arms } ->\n-            let lval_tv = ref TYSPEC_all in\n-              unify_lval true lval lval_tv;\n+            let lval_tv = any() in\n+              unify_lval lval_ctx lval lval_tv;\n               Array.iter (fun _ -> push_pat_tv lval_tv) arms\n \n         (* FIXME (issue #52): plenty more to handle here. *)\n@@ -1236,7 +1302,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n     let enter_fn fn retspec =\n       let out = fn.Ast.fn_output_slot in\n         push_retval_tv (ref retspec);\n-        unify_slot false out.node (Some out.id) (retval_tv())\n+        unify_slot arg_pass_ctx out.node (Some out.id) (retval_tv())\n     in\n \n     let visit_obj_fn_pre obj ident fn =\n@@ -1303,12 +1369,12 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n     let visit_pat_pre (pat:Ast.pat) : unit =\n       let expected = pat_tv() in\n         match pat with\n-            Ast.PAT_lit lit -> unify_lit true lit expected\n+            Ast.PAT_lit lit -> unify_lit strict_ctx lit expected\n \n           | Ast.PAT_tag (lval, _) ->\n               let expect ty =\n                 let tv = ref TYSPEC_all in\n-                  unify_ty false ty tv;\n+                  unify_ty strict_ctx ty tv;\n                   push_pat_tv tv;\n               in\n \n@@ -1320,7 +1386,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                * exactly to that function type, rebuilt under any latent type\n                * parameters applied in the lval. *)\n               let lval_tv = ref TYSPEC_all in\n-                unify_lval false lval lval_tv;\n+                unify_lval strict_ctx lval lval_tv;\n                 let tag_ctor_ty =\n                   match !(resolve_tyvar lval_tv) with\n                       TYSPEC_resolved (_, ty) -> ty\n@@ -1332,13 +1398,13 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                 let tag_ty_tup = tag_or_iso_ty_tup_by_name tag_ty lval_nm in\n \n                 let tag_tv = ref TYSPEC_all in\n-                  unify_ty false tag_ty tag_tv;\n-                  unify_tyvars false expected tag_tv;\n+                  unify_ty strict_ctx tag_ty tag_tv;\n+                  unify_tyvars strict_ctx expected tag_tv;\n                   List.iter expect\n                     (List.rev (Array.to_list tag_ty_tup));\n \n           | Ast.PAT_slot (sloti, _) ->\n-              unify_slot false sloti.node (Some sloti.id) expected\n+              unify_slot strict_ctx sloti.node (Some sloti.id) expected\n \n           | Ast.PAT_wild -> ()\n     in\n@@ -1366,7 +1432,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n         match defn with\n             DEFN_slot { Ast.slot_mode = _; Ast.slot_ty = None } ->\n               Queue.add id auto_queue;\n-              Hashtbl.add bindings id (ref TYSPEC_all)\n+              Hashtbl.add bindings id (ref (TYSPEC_mutable (ref TYSPEC_all)))\n           | DEFN_slot { Ast.slot_mode = _; Ast.slot_ty = Some ty } ->\n               let _ = iflog cx (fun _ -> log cx \"initial slot #%d type: %a\"\n                                   (int_of_node id) Ast.sprintf_ty ty)\n@@ -1432,6 +1498,8 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                     match slot_defn.Ast.slot_ty with\n                         Some _ -> ()\n                       | None ->\n+                          log cx \"setting auto slot #%d to %a\"\n+                            (int_of_node id) Ast.sprintf_ty ty;\n                           Hashtbl.replace cx.ctxt_all_defns id\n                             (DEFN_slot { slot_defn with\n                                            Ast.slot_ty = Some ty })\n@@ -1443,7 +1511,29 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n           let ts = !(resolve_tyvar tv) in\n             match ts with\n                 TYSPEC_resolved ([||], ty) -> ty\n-              | TYSPEC_vector (tv) ->\n+              | TYSPEC_exterior tv ->\n+                  begin\n+                    match !(resolve_tyvar tv) with\n+                        TYSPEC_resolved ([||], ty) ->\n+                          (Ast.TY_exterior ty)\n+                      | _ ->\n+                          err (Some id)\n+                            \"unresolved exterior type in %s (%d)\"\n+                            (tyspec_to_str ts) (int_of_node id)\n+                  end\n+\n+              | TYSPEC_mutable tv ->\n+                  begin\n+                    match !(resolve_tyvar tv) with\n+                        TYSPEC_resolved ([||], ty) ->\n+                          (Ast.TY_mutable ty)\n+                      | _ ->\n+                          err (Some id)\n+                            \"unresolved mutable type in %s (%d)\"\n+                            (tyspec_to_str ts) (int_of_node id)\n+                  end\n+\n+              | TYSPEC_vector tv ->\n                   begin\n                     match !(resolve_tyvar tv) with\n                         TYSPEC_resolved ([||], ty) ->\n@@ -1453,6 +1543,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                             \"unresolved vector-element type in %s (%d)\"\n                             (tyspec_to_str ts) (int_of_node id)\n                   end\n+\n               | _ -> err (Some id)\n                   \"unresolved type %s (%d)\"\n                     (tyspec_to_str ts)"}]}