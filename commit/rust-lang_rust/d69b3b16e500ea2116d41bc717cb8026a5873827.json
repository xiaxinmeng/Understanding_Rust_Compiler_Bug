{"sha": "d69b3b16e500ea2116d41bc717cb8026a5873827", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2OWIzYjE2ZTUwMGVhMjExNmQ0MWJjNzE3Y2I4MDI2YTU4NzM4Mjc=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-02-08T04:50:41Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-02-08T04:52:09Z"}, "message": "test: address comments and pacify the merciless tidy.", "tree": {"sha": "3e52bf1e7adcacd670e1ed8157b87a735ccd3509", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e52bf1e7adcacd670e1ed8157b87a735ccd3509"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d69b3b16e500ea2116d41bc717cb8026a5873827", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d69b3b16e500ea2116d41bc717cb8026a5873827", "html_url": "https://github.com/rust-lang/rust/commit/d69b3b16e500ea2116d41bc717cb8026a5873827", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d69b3b16e500ea2116d41bc717cb8026a5873827/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da33935c260bf8859d20b83dec40be7fc3d82310", "url": "https://api.github.com/repos/rust-lang/rust/commits/da33935c260bf8859d20b83dec40be7fc3d82310", "html_url": "https://github.com/rust-lang/rust/commit/da33935c260bf8859d20b83dec40be7fc3d82310"}], "stats": {"total": 36, "additions": 16, "deletions": 20}, "files": [{"sha": "c1fe8b7743a8cc7751bfde7699a22abb33effe0f", "filename": "src/test/auxiliary/rust_test_helpers.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d69b3b16e500ea2116d41bc717cb8026a5873827/src%2Ftest%2Fauxiliary%2Frust_test_helpers.c", "raw_url": "https://github.com/rust-lang/rust/raw/d69b3b16e500ea2116d41bc717cb8026a5873827/src%2Ftest%2Fauxiliary%2Frust_test_helpers.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Frust_test_helpers.c?ref=d69b3b16e500ea2116d41bc717cb8026a5873827", "patch": "@@ -346,9 +346,9 @@ struct U8TaggedEnumOptionU64U64 {\n     uint8_t tag;\n     union {\n         struct {\n-\t    uint64_t a;\n-\t    uint64_t b;\n-\t} some;\n+            uint64_t a;\n+            uint64_t b;\n+        } some;\n     };\n };\n "}, {"sha": "57c2c6127ed9cc01fa04dd8a9e49eeb6c9db20b0", "filename": "src/test/run-make-fulldeps/arguments-non-c-like-enum/nonclike.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d69b3b16e500ea2116d41bc717cb8026a5873827/src%2Ftest%2Frun-make-fulldeps%2Farguments-non-c-like-enum%2Fnonclike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d69b3b16e500ea2116d41bc717cb8026a5873827/src%2Ftest%2Frun-make-fulldeps%2Farguments-non-c-like-enum%2Fnonclike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Farguments-non-c-like-enum%2Fnonclike.rs?ref=d69b3b16e500ea2116d41bc717cb8026a5873827", "patch": "@@ -1,6 +1,3 @@\n-#![crate_type = \"lib\"]\n-#![crate_name = \"nonclike\"]\n-\n #[repr(C, u8)]\n pub enum TT {\n     AA(u64, u64),"}, {"sha": "0a1621e49f2eeed5e86a2622355c74c345d74131", "filename": "src/test/run-make-fulldeps/arguments-non-c-like-enum/test.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d69b3b16e500ea2116d41bc717cb8026a5873827/src%2Ftest%2Frun-make-fulldeps%2Farguments-non-c-like-enum%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/d69b3b16e500ea2116d41bc717cb8026a5873827/src%2Ftest%2Frun-make-fulldeps%2Farguments-non-c-like-enum%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Farguments-non-c-like-enum%2Ftest.c?ref=d69b3b16e500ea2116d41bc717cb8026a5873827", "patch": "@@ -56,7 +56,7 @@ int main(int argc, char *argv[]) {\n   uint64_t rr = tt_add(xx, yy);\n   assert(33 == rr);\n \n-  /* This one returns an incorrect result. */\n+  /* This one used to return an incorrect result (see issue #68190). */\n   T x = { .tag = A, .a = { ._0 = 1 } };\n   T y = { .tag = A, .a = { ._0 = 10 } };\n   uint64_t r = t_add(x, y);"}, {"sha": "517286a868d8ccd5600a41db5cff85b7eaf4320f", "filename": "src/test/run-make-fulldeps/pass-non-c-like-enum-to-c/nonclike.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d69b3b16e500ea2116d41bc717cb8026a5873827/src%2Ftest%2Frun-make-fulldeps%2Fpass-non-c-like-enum-to-c%2Fnonclike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d69b3b16e500ea2116d41bc717cb8026a5873827/src%2Ftest%2Frun-make-fulldeps%2Fpass-non-c-like-enum-to-c%2Fnonclike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpass-non-c-like-enum-to-c%2Fnonclike.rs?ref=d69b3b16e500ea2116d41bc717cb8026a5873827", "patch": "@@ -1,6 +1,3 @@\n-#![crate_type = \"bin\"]\n-#![crate_name = \"nonclike\"]\n-\n #[repr(C, u8)]\n pub enum TT {\n     AA(u64, u64),"}, {"sha": "ea22a2a56e09b44b9d7243ac5d1bf48b2b4f4feb", "filename": "src/test/run-make-fulldeps/return-non-c-like-enum-from-c/nonclike.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d69b3b16e500ea2116d41bc717cb8026a5873827/src%2Ftest%2Frun-make-fulldeps%2Freturn-non-c-like-enum-from-c%2Fnonclike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d69b3b16e500ea2116d41bc717cb8026a5873827/src%2Ftest%2Frun-make-fulldeps%2Freturn-non-c-like-enum-from-c%2Fnonclike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Freturn-non-c-like-enum-from-c%2Fnonclike.rs?ref=d69b3b16e500ea2116d41bc717cb8026a5873827", "patch": "@@ -1,6 +1,3 @@\n-#![crate_type = \"bin\"]\n-#![crate_name = \"nonclike\"]\n-\n #[repr(C, u8)]\n pub enum TT {\n     AA(u64, u64),"}, {"sha": "de529cf641ab06d44a936add077782d2074f1054", "filename": "src/test/run-make-fulldeps/return-non-c-like-enum/nonclike.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d69b3b16e500ea2116d41bc717cb8026a5873827/src%2Ftest%2Frun-make-fulldeps%2Freturn-non-c-like-enum%2Fnonclike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d69b3b16e500ea2116d41bc717cb8026a5873827/src%2Ftest%2Frun-make-fulldeps%2Freturn-non-c-like-enum%2Fnonclike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Freturn-non-c-like-enum%2Fnonclike.rs?ref=d69b3b16e500ea2116d41bc717cb8026a5873827", "patch": "@@ -1,6 +1,3 @@\n-#![crate_type = \"lib\"]\n-#![crate_name = \"nonclike\"]\n-\n #[repr(C, u8)]\n pub enum TT {\n     AA(u64, u64),"}, {"sha": "afadd3c10c5ca0d51e5cacf18f3e937aaefdb76a", "filename": "src/test/run-make-fulldeps/return-non-c-like-enum/test.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d69b3b16e500ea2116d41bc717cb8026a5873827/src%2Ftest%2Frun-make-fulldeps%2Freturn-non-c-like-enum%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/d69b3b16e500ea2116d41bc717cb8026a5873827/src%2Ftest%2Frun-make-fulldeps%2Freturn-non-c-like-enum%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Freturn-non-c-like-enum%2Ftest.c?ref=d69b3b16e500ea2116d41bc717cb8026a5873827", "patch": "@@ -54,7 +54,7 @@ int main(int argc, char *argv[]) {\n   assert(10 == tt.aa._0);\n   assert(20 == tt.aa._1);\n \n-  /* This one segfaults. */\n+  /* This one used to segfault (see issue #68190). */\n   T t = t_new(10);\n   assert(A == t.tag);\n   assert(10 == t.a._0);"}, {"sha": "c87353b93a7c0ebc8e6982defbd2f2fc2d1a55cc", "filename": "src/test/ui/abi/abi-sysv64-arg-passing.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d69b3b16e500ea2116d41bc717cb8026a5873827/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-arg-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d69b3b16e500ea2116d41bc717cb8026a5873827/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-arg-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-arg-passing.rs?ref=d69b3b16e500ea2116d41bc717cb8026a5873827", "patch": "@@ -139,7 +139,11 @@ mod tests {\n         pub fn rust_dbg_abi_2(f: Floats) -> Floats;\n         pub fn rust_dbg_new_some_u64u64(a: u64, b: u64) -> U8TaggedEnumOptionU64U64;\n         pub fn rust_dbg_new_none_u64u64() -> U8TaggedEnumOptionU64U64;\n-        pub fn rust_dbg_unpack_option_u64u64(o: U8TaggedEnumOptionU64U64, a: *mut u64, b: *mut u64) -> i32;\n+        pub fn rust_dbg_unpack_option_u64u64(\n+            o: U8TaggedEnumOptionU64U64,\n+            a: *mut u64,\n+            b: *mut u64,\n+        ) -> i32;\n         pub fn rust_dbg_new_some_u64(some: u64) -> U8TaggedEnumOptionU64;\n         pub fn rust_dbg_new_none_u64() -> U8TaggedEnumOptionU64;\n         pub fn rust_dbg_unpack_option_u64(o: U8TaggedEnumOptionU64, v: *mut u64) -> i32;\n@@ -371,14 +375,18 @@ mod tests {\n \n         let mut a: u64 = 0;\n         let mut b: u64 = 0;\n-        let r = unsafe { rust_dbg_unpack_option_u64u64(some_u64u64, &mut a as *mut _, &mut b as *mut _) };\n+        let r = unsafe {\n+            rust_dbg_unpack_option_u64u64(some_u64u64, &mut a as *mut _, &mut b as *mut _)\n+        };\n         assert_eq!(1, r);\n         assert_eq!(10, a);\n         assert_eq!(20, b);\n \n         let mut a: u64 = 0;\n         let mut b: u64 = 0;\n-        let r = unsafe { rust_dbg_unpack_option_u64u64(none_u64u64, &mut a as *mut _, &mut b as *mut _) };\n+        let r = unsafe {\n+            rust_dbg_unpack_option_u64u64(none_u64u64, &mut a as *mut _, &mut b as *mut _)\n+        };\n         assert_eq!(0, r);\n         assert_eq!(0, a);\n         assert_eq!(0, b);"}]}