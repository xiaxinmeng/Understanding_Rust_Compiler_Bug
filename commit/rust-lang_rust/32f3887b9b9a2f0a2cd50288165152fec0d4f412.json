{"sha": "32f3887b9b9a2f0a2cd50288165152fec0d4f412", "node_id": "C_kwDOAAsO6NoAKDMyZjM4ODdiOWI5YTJmMGEyY2Q1MDI4ODE2NTE1MmZlYzBkNGY0MTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-25T08:22:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-25T08:22:07Z"}, "message": "Auto merge of #90249 - matthiaskrgr:rollup-xwtfhq3, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #89889 (Use the \"nice E0277 errors\"[1] for `!Send` `impl Future` from foreign crate)\n - #90127 (Do not mention a reexported item if it's private)\n - #90143 (tidy: Remove submodules from edition exception list)\n - #90238 (Add alias for guillaume.gomez@huawei.com)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e0414907e27db061fd10dfb39c890ad94f32d9ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0414907e27db061fd10dfb39c890ad94f32d9ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32f3887b9b9a2f0a2cd50288165152fec0d4f412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32f3887b9b9a2f0a2cd50288165152fec0d4f412", "html_url": "https://github.com/rust-lang/rust/commit/32f3887b9b9a2f0a2cd50288165152fec0d4f412", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32f3887b9b9a2f0a2cd50288165152fec0d4f412/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56694b04532cc0dec6e2f577135da3513e856923", "url": "https://api.github.com/repos/rust-lang/rust/commits/56694b04532cc0dec6e2f577135da3513e856923", "html_url": "https://github.com/rust-lang/rust/commit/56694b04532cc0dec6e2f577135da3513e856923"}, {"sha": "34dcfd357d154f5f9984be9599652794877709de", "url": "https://api.github.com/repos/rust-lang/rust/commits/34dcfd357d154f5f9984be9599652794877709de", "html_url": "https://github.com/rust-lang/rust/commit/34dcfd357d154f5f9984be9599652794877709de"}], "stats": {"total": 223, "additions": 121, "deletions": 102}, "files": [{"sha": "a160f2f4fbfecc2d97e69bc408987dacbb9a2157", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32f3887b9b9a2f0a2cd50288165152fec0d4f412/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/32f3887b9b9a2f0a2cd50288165152fec0d4f412/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=32f3887b9b9a2f0a2cd50288165152fec0d4f412", "patch": "@@ -111,6 +111,7 @@ Graydon Hoare <graydon@pobox.com> Graydon Hoare <graydon@mozilla.com>\n Guillaume Gomez <guillaume1.gomez@gmail.com>\n Guillaume Gomez <guillaume1.gomez@gmail.com> ggomez <ggomez@ggo.ifr.lan>\n Guillaume Gomez <guillaume1.gomez@gmail.com> Guillaume Gomez <ggomez@ggo.ifr.lan>\n+Guillaume Gomez <guillaume1.gomez@gmail.com> Guillaume Gomez <guillaume.gomez@huawei.com>\n Hanna Kruppe <hanna.kruppe@gmail.com> <robin.kruppe@gmail.com>\n Heather <heather@cynede.net> <Cynede@Gentoo.org>\n Heather <heather@cynede.net> <Heather@cynede.net>"}, {"sha": "e599bf4cab0093226c7fe65d33468ef68d214135", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32f3887b9b9a2f0a2cd50288165152fec0d4f412/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f3887b9b9a2f0a2cd50288165152fec0d4f412/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=32f3887b9b9a2f0a2cd50288165152fec0d4f412", "patch": "@@ -829,6 +829,15 @@ impl<'a> Resolver<'a> {\n                     return;\n                 }\n \n+                // #90113: Do not count an inaccessible reexported item as a candidate.\n+                if let NameBindingKind::Import { binding, .. } = name_binding.kind {\n+                    if this.is_accessible_from(binding.vis, parent_scope.module)\n+                        && !this.is_accessible_from(name_binding.vis, parent_scope.module)\n+                    {\n+                        return;\n+                    }\n+                }\n+\n                 // collect results based on the filter function\n                 // avoid suggesting anything from the same module in which we are resolving\n                 if ident.name == lookup_ident.name"}, {"sha": "d602662ba6be4bb578466ef239390a6f04c1b603", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 70, "deletions": 77, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/32f3887b9b9a2f0a2cd50288165152fec0d4f412/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f3887b9b9a2f0a2cd50288165152fec0d4f412/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=32f3887b9b9a2f0a2cd50288165152fec0d4f412", "patch": "@@ -151,7 +151,7 @@ pub trait InferCtxtExt<'tcx> {\n         outer_generator: Option<DefId>,\n         trait_ref: ty::TraitRef<'tcx>,\n         target_ty: Ty<'tcx>,\n-        typeck_results: &ty::TypeckResults<'tcx>,\n+        typeck_results: Option<&ty::TypeckResults<'tcx>>,\n         obligation: &PredicateObligation<'tcx>,\n         next_code: Option<&ObligationCauseCode<'tcx>>,\n     );\n@@ -1460,11 +1460,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n \n         // Only continue if a generator was found.\n-        debug!(\n-            \"maybe_note_obligation_cause_for_async_await: generator={:?} trait_ref={:?} \\\n-                target_ty={:?}\",\n-            generator, trait_ref, target_ty\n-        );\n+        debug!(?generator, ?trait_ref, ?target_ty, \"maybe_note_obligation_cause_for_async_await\");\n         let (generator_did, trait_ref, target_ty) = match (generator, trait_ref, target_ty) {\n             (Some(generator_did), Some(trait_ref), Some(target_ty)) => {\n                 (generator_did, trait_ref, target_ty)\n@@ -1474,14 +1470,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         let span = self.tcx.def_span(generator_did);\n \n-        // Do not ICE on closure typeck (#66868).\n-        if !generator_did.is_local() {\n-            return false;\n-        }\n-\n-        // Get the typeck results from the infcx if the generator is the function we are\n-        // currently type-checking; otherwise, get them by performing a query.\n-        // This is needed to avoid cycles.\n         let in_progress_typeck_results = self.in_progress_typeck_results.map(|t| t.borrow());\n         let generator_did_root = self.tcx.closure_base_def_id(generator_did);\n         debug!(\n@@ -1492,14 +1480,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             in_progress_typeck_results.as_ref().map(|t| t.hir_owner),\n             span\n         );\n-        let query_typeck_results;\n-        let typeck_results: &TypeckResults<'tcx> = match &in_progress_typeck_results {\n-            Some(t) if t.hir_owner.to_def_id() == generator_did_root => t,\n-            _ => {\n-                query_typeck_results = self.tcx.typeck(generator_did.expect_local());\n-                &query_typeck_results\n-            }\n-        };\n \n         let generator_body = generator_did\n             .as_local()\n@@ -1542,51 +1522,59 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let mut interior_or_upvar_span = None;\n         let mut interior_extra_info = None;\n \n-        if let Some(upvars) = self.tcx.upvars_mentioned(generator_did) {\n-            interior_or_upvar_span = upvars.iter().find_map(|(upvar_id, upvar)| {\n-                let upvar_ty = typeck_results.node_type(*upvar_id);\n-                let upvar_ty = self.resolve_vars_if_possible(upvar_ty);\n-                if ty_matches(ty::Binder::dummy(upvar_ty)) {\n-                    Some(GeneratorInteriorOrUpvar::Upvar(upvar.span))\n-                } else {\n-                    None\n-                }\n-            });\n+        // Get the typeck results from the infcx if the generator is the function we are currently\n+        // type-checking; otherwise, get them by performing a query.  This is needed to avoid\n+        // cycles. If we can't use resolved types because the generator comes from another crate,\n+        // we still provide a targeted error but without all the relevant spans.\n+        let query_typeck_results;\n+        let typeck_results: Option<&TypeckResults<'tcx>> = match &in_progress_typeck_results {\n+            Some(t) if t.hir_owner.to_def_id() == generator_did_root => Some(&t),\n+            _ if generator_did.is_local() => {\n+                query_typeck_results = self.tcx.typeck(generator_did.expect_local());\n+                Some(&query_typeck_results)\n+            }\n+            _ => None, // Do not ICE on closure typeck (#66868).\n         };\n+        if let Some(typeck_results) = typeck_results {\n+            if let Some(upvars) = self.tcx.upvars_mentioned(generator_did) {\n+                interior_or_upvar_span = upvars.iter().find_map(|(upvar_id, upvar)| {\n+                    let upvar_ty = typeck_results.node_type(*upvar_id);\n+                    let upvar_ty = self.resolve_vars_if_possible(upvar_ty);\n+                    if ty_matches(ty::Binder::dummy(upvar_ty)) {\n+                        Some(GeneratorInteriorOrUpvar::Upvar(upvar.span))\n+                    } else {\n+                        None\n+                    }\n+                });\n+            };\n \n-        // The generator interior types share the same binders\n-        if let Some(cause) =\n-            typeck_results.generator_interior_types.as_ref().skip_binder().iter().find(\n-                |ty::GeneratorInteriorTypeCause { ty, .. }| {\n-                    ty_matches(typeck_results.generator_interior_types.rebind(ty))\n-                },\n-            )\n-        {\n-            // Check to see if any awaited expressions have the target type.\n-            let from_awaited_ty = visitor\n-                .awaits\n-                .into_iter()\n-                .map(|id| hir.expect_expr(id))\n-                .find(|await_expr| {\n-                    let ty = typeck_results.expr_ty_adjusted(&await_expr);\n-                    debug!(\n-                        \"maybe_note_obligation_cause_for_async_await: await_expr={:?}\",\n-                        await_expr\n-                    );\n-                    ty_matches(ty::Binder::dummy(ty))\n-                })\n-                .map(|expr| expr.span);\n-            let ty::GeneratorInteriorTypeCause { span, scope_span, yield_span, expr, .. } = cause;\n+            // The generator interior types share the same binders\n+            if let Some(cause) =\n+                typeck_results.generator_interior_types.as_ref().skip_binder().iter().find(\n+                    |ty::GeneratorInteriorTypeCause { ty, .. }| {\n+                        ty_matches(typeck_results.generator_interior_types.rebind(ty))\n+                    },\n+                )\n+            {\n+                // Check to see if any awaited expressions have the target type.\n+                let from_awaited_ty = visitor\n+                    .awaits\n+                    .into_iter()\n+                    .map(|id| hir.expect_expr(id))\n+                    .find(|await_expr| {\n+                        ty_matches(ty::Binder::dummy(typeck_results.expr_ty_adjusted(&await_expr)))\n+                    })\n+                    .map(|expr| expr.span);\n+                let ty::GeneratorInteriorTypeCause { span, scope_span, yield_span, expr, .. } =\n+                    cause;\n \n-            interior_or_upvar_span = Some(GeneratorInteriorOrUpvar::Interior(*span));\n-            interior_extra_info = Some((*scope_span, *yield_span, *expr, from_awaited_ty));\n-        };\n+                interior_or_upvar_span = Some(GeneratorInteriorOrUpvar::Interior(*span));\n+                interior_extra_info = Some((*scope_span, *yield_span, *expr, from_awaited_ty));\n+            };\n+        } else {\n+            interior_or_upvar_span = Some(GeneratorInteriorOrUpvar::Interior(span));\n+        }\n \n-        debug!(\n-            \"maybe_note_obligation_cause_for_async_await: interior_or_upvar={:?} \\\n-                generator_interior_types={:?}\",\n-            interior_or_upvar_span, typeck_results.generator_interior_types\n-        );\n         if let Some(interior_or_upvar_span) = interior_or_upvar_span {\n             self.note_obligation_cause_for_async_await(\n                 err,\n@@ -1617,7 +1605,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         outer_generator: Option<DefId>,\n         trait_ref: ty::TraitRef<'tcx>,\n         target_ty: Ty<'tcx>,\n-        typeck_results: &ty::TypeckResults<'tcx>,\n+        typeck_results: Option<&ty::TypeckResults<'tcx>>,\n         obligation: &PredicateObligation<'tcx>,\n         next_code: Option<&ObligationCauseCode<'tcx>>,\n     ) {\n@@ -1828,7 +1816,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         // Look at the last interior type to get a span for the `.await`.\n                         debug!(\n                             \"note_obligation_cause_for_async_await generator_interior_types: {:#?}\",\n-                            typeck_results.generator_interior_types\n+                            typeck_results.as_ref().map(|t| &t.generator_interior_types)\n                         );\n                         explain_yield(interior_span, yield_span, scope_span);\n                     }\n@@ -1849,10 +1837,14 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             // ^^^^^^^ a temporary `&T` created inside this method call due to `&self`\n                             // ```\n                             //\n-                            let is_region_borrow = typeck_results\n-                                .expr_adjustments(expr)\n-                                .iter()\n-                                .any(|adj| adj.is_region_borrow());\n+                            let is_region_borrow = if let Some(typeck_results) = typeck_results {\n+                                typeck_results\n+                                    .expr_adjustments(expr)\n+                                    .iter()\n+                                    .any(|adj| adj.is_region_borrow())\n+                            } else {\n+                                false\n+                            };\n \n                             // ```rust\n                             // struct Foo(*const u8);\n@@ -1865,15 +1857,16 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                     DefKind::Fn | DefKind::Ctor(..) => target_ty.is_unsafe_ptr(),\n                                     _ => false,\n                                 };\n-\n-                            if (typeck_results.is_method_call(e) && is_region_borrow)\n-                                || is_raw_borrow_inside_fn_like_call\n-                            {\n-                                err.span_help(\n-                                    parent_span,\n-                                    \"consider moving this into a `let` \\\n+                            if let Some(typeck_results) = typeck_results {\n+                                if (typeck_results.is_method_call(e) && is_region_borrow)\n+                                    || is_raw_borrow_inside_fn_like_call\n+                                {\n+                                    err.span_help(\n+                                        parent_span,\n+                                        \"consider moving this into a `let` \\\n                         binding to create a shorter lived borrow\",\n-                                );\n+                                    );\n+                                }\n                             }\n                         }\n                     }"}, {"sha": "a01d151a7250a540a9cb7ccce5956f020c677c21", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=32f3887b9b9a2f0a2cd50288165152fec0d4f412", "patch": "@@ -1 +1 @@\n-Subproject commit b5c68b02984f74e99d1f1b332029e05f607e2660\n+Subproject commit a01d151a7250a540a9cb7ccce5956f020c677c21"}, {"sha": "b06008731af0f7d07cd0614e820c8276dfed1c18", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=32f3887b9b9a2f0a2cd50288165152fec0d4f412", "patch": "@@ -1 +1 @@\n-Subproject commit fba15a46ca8efa97e8a955794724ac7ce27805b8\n+Subproject commit b06008731af0f7d07cd0614e820c8276dfed1c18"}, {"sha": "8b53408d758e110ef55992fc4f94c42390e4f5cd", "filename": "src/test/ui/async-await/issues/issue-67893.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32f3887b9b9a2f0a2cd50288165152fec0d4f412/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f3887b9b9a2f0a2cd50288165152fec0d4f412/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.rs?ref=32f3887b9b9a2f0a2cd50288165152fec0d4f412", "patch": "@@ -7,5 +7,5 @@ fn g(_: impl Send) {}\n \n fn main() {\n     g(issue_67893::run())\n-    //~^ ERROR: `MutexGuard<'_, ()>` cannot be sent between threads safely\n+    //~^ ERROR generator cannot be sent between threads safely\n }"}, {"sha": "7321a38c021825a21a1ac72f2ce08bba0f920b19", "filename": "src/test/ui/async-await/issues/issue-67893.stderr", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/32f3887b9b9a2f0a2cd50288165152fec0d4f412/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32f3887b9b9a2f0a2cd50288165152fec0d4f412/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr?ref=32f3887b9b9a2f0a2cd50288165152fec0d4f412", "patch": "@@ -1,20 +1,10 @@\n-error[E0277]: `MutexGuard<'_, ()>` cannot be sent between threads safely\n+error: generator cannot be sent between threads safely\n   --> $DIR/issue-67893.rs:9:5\n    |\n LL |     g(issue_67893::run())\n-   |     ^ `MutexGuard<'_, ()>` cannot be sent between threads safely\n-   |\n-  ::: $DIR/auxiliary/issue_67893.rs:7:20\n-   |\n-LL | pub async fn run() {\n-   |                    - within this `impl Future`\n+   |     ^ generator is not `Send`\n    |\n    = help: within `impl Future`, the trait `Send` is not implemented for `MutexGuard<'_, ()>`\n-   = note: required because it appears within the type `for<'r, 's, 't0, 't1, 't2, 't3> {ResumeTy, Arc<Mutex<()>>, &'r Mutex<()>, Result<MutexGuard<'s, ()>, PoisonError<MutexGuard<'t0, ()>>>, &'t1 MutexGuard<'t2, ()>, MutexGuard<'t3, ()>, (), impl Future}`\n-   = note: required because it appears within the type `[static generator@run::{closure#0}]`\n-   = note: required because it appears within the type `from_generator::GenFuture<[static generator@run::{closure#0}]>`\n-   = note: required because it appears within the type `impl Future`\n-   = note: required because it appears within the type `impl Future`\n note: required by a bound in `g`\n   --> $DIR/issue-67893.rs:6:14\n    |\n@@ -23,4 +13,3 @@ LL | fn g(_: impl Send) {}\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "f6658b45ed1a62629fb8d293100c63cc5a645a67", "filename": "src/test/ui/resolve/issue-90113.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/32f3887b9b9a2f0a2cd50288165152fec0d4f412/src%2Ftest%2Fui%2Fresolve%2Fissue-90113.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f3887b9b9a2f0a2cd50288165152fec0d4f412/src%2Ftest%2Fui%2Fresolve%2Fissue-90113.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-90113.rs?ref=32f3887b9b9a2f0a2cd50288165152fec0d4f412", "patch": "@@ -0,0 +1,21 @@\n+mod list {\n+    pub use self::List::Cons;\n+\n+    pub enum List<T> {\n+        Cons(T, Box<List<T>>),\n+    }\n+}\n+\n+mod alias {\n+    use crate::list::List;\n+\n+    pub type Foo = List<String>;\n+}\n+\n+fn foo(l: crate::alias::Foo) {\n+    match l {\n+        Cons(..) => {} //~ ERROR: cannot find tuple struct or tuple variant `Cons` in this scope\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "1b78720571c652e4821cd0c3820e53da42225953", "filename": "src/test/ui/resolve/issue-90113.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32f3887b9b9a2f0a2cd50288165152fec0d4f412/src%2Ftest%2Fui%2Fresolve%2Fissue-90113.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32f3887b9b9a2f0a2cd50288165152fec0d4f412/src%2Ftest%2Fui%2Fresolve%2Fissue-90113.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-90113.stderr?ref=32f3887b9b9a2f0a2cd50288165152fec0d4f412", "patch": "@@ -0,0 +1,14 @@\n+error[E0531]: cannot find tuple struct or tuple variant `Cons` in this scope\n+  --> $DIR/issue-90113.rs:17:9\n+   |\n+LL |         Cons(..) => {}\n+   |         ^^^^ not found in this scope\n+   |\n+help: consider importing this tuple variant\n+   |\n+LL | use list::List::Cons;\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0531`."}, {"sha": "3f59fefd041ebd9b70852d82fda4fb8f49ed68d9", "filename": "src/tools/tidy/src/edition.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/32f3887b9b9a2f0a2cd50288165152fec0d4f412/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f3887b9b9a2f0a2cd50288165152fec0d4f412/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs?ref=32f3887b9b9a2f0a2cd50288165152fec0d4f412", "patch": "@@ -18,21 +18,13 @@ pub fn check(path: &Path, bad: &mut bool) {\n         &mut |path| super::filter_dirs(path) || path.ends_with(\"src/test\"),\n         &mut |entry, contents| {\n             let file = entry.path();\n-            let filestr = file.to_string_lossy().replace(\"\\\\\", \"/\");\n             let filename = file.file_name().unwrap();\n             if filename != \"Cargo.toml\" {\n                 return;\n             }\n \n             // Library crates are not yet ready to migrate to 2021.\n-            //\n-            // The reference and rustc-dev-guide are submodules, so are left at\n-            // 2018 for now. They should be removed from this exception list\n-            // when bumped.\n-            if path.components().any(|c| c.as_os_str() == \"library\")\n-                || filestr.contains(\"src/doc/reference/style-check/Cargo.toml\")\n-                || filestr.contains(\"src/doc/rustc-dev-guide/ci/date-check/Cargo.toml\")\n-            {\n+            if path.components().any(|c| c.as_os_str() == \"library\") {\n                 let has = contents.lines().any(is_edition_2018);\n                 if !has {\n                     tidy_error!("}]}