{"sha": "cf386188c88c39902d4ef7f9a6be20379e288f5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMzg2MTg4Yzg4YzM5OTAyZDRlZjdmOWE2YmUyMDM3OWUyODhmNWY=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-08-31T04:03:19Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-08-31T14:11:07Z"}, "message": "Various JSON pretty printing tweaks", "tree": {"sha": "32672390e49cda528302b0a08960180406012e10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32672390e49cda528302b0a08960180406012e10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf386188c88c39902d4ef7f9a6be20379e288f5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf386188c88c39902d4ef7f9a6be20379e288f5f", "html_url": "https://github.com/rust-lang/rust/commit/cf386188c88c39902d4ef7f9a6be20379e288f5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf386188c88c39902d4ef7f9a6be20379e288f5f/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fb675be2f42a828fb5a6570b9aad2c65f4598b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fb675be2f42a828fb5a6570b9aad2c65f4598b9", "html_url": "https://github.com/rust-lang/rust/commit/4fb675be2f42a828fb5a6570b9aad2c65f4598b9"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "7c5a6187a5760b2914dd281c452add8bfada2a77", "filename": "src/libstd/json.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/cf386188c88c39902d4ef7f9a6be20379e288f5f/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf386188c88c39902d4ef7f9a6be20379e288f5f/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=cf386188c88c39902d4ef7f9a6be20379e288f5f", "patch": "@@ -102,14 +102,20 @@ fn to_writer_pretty(wr: io::Writer, j: Json, indent: uint) {\n       String(s) => wr.write_str(escape_str(*s)),\n       Boolean(b) => wr.write_str(if b { ~\"true\" } else { ~\"false\" }),\n       List(vv) => {\n+        if vv.len() == 0u {\n+            wr.write_str(~\"[]\");\n+            return;\n+        }\n+\n+        let inner_indent = indent + 2;\n+\n         // [\n-        wr.write_str(spaces(indent));\n-        wr.write_str(\"[ \");\n+        wr.write_str(\"[\\n\");\n+        wr.write_str(spaces(inner_indent));\n \n         // [ elem,\n         //   elem,\n         //   elem ]\n-        let inner_indent = indent + 2;\n         let mut first = true;\n         for (*vv).each |item| {\n             if !first {\n@@ -121,9 +127,18 @@ fn to_writer_pretty(wr: io::Writer, j: Json, indent: uint) {\n         };\n \n         // ]\n-        wr.write_str(~\" ]\");\n+        wr.write_str(\"\\n\");\n+        wr.write_str(spaces(indent));\n+        wr.write_str(~\"]\");\n       }\n       Dict(dd) => {\n+        if dd.size() == 0u {\n+            wr.write_str(~\"{}\");\n+            return;\n+        }\n+\n+        let inner_indent = indent + 2;\n+\n         // convert from a dictionary\n         let mut pairs = ~[];\n         for dd.each |key, value| {\n@@ -134,13 +149,12 @@ fn to_writer_pretty(wr: io::Writer, j: Json, indent: uint) {\n         let sorted_pairs = sort::merge_sort(|a,b| *a <= *b, pairs);\n \n         // {\n-        wr.write_str(spaces(indent));\n-        wr.write_str(~\"{ \");\n+        wr.write_str(~\"{\\n\");\n+        wr.write_str(spaces(inner_indent));\n \n         // { k: v,\n         //   k: v,\n         //   k: v }\n-        let inner_indent = indent + 2;\n         let mut first = true;\n         for sorted_pairs.each |kv| {\n             let (key, value) = kv;\n@@ -150,13 +164,15 @@ fn to_writer_pretty(wr: io::Writer, j: Json, indent: uint) {\n             }\n             first = false;\n             let key = str::append(escape_str(key), ~\": \");\n-            let key_indent = str::len(key);\n+            let key_indent = inner_indent + str::len(key);\n             wr.write_str(key);\n             to_writer_pretty(wr, value, key_indent);\n         };\n \n         // }\n-        wr.write_str(~\" }\");\n+        wr.write_str(~\"\\n\");\n+        wr.write_str(spaces(indent));\n+        wr.write_str(~\"}\");\n       }\n       Null => wr.write_str(~\"null\")\n     }\n@@ -892,6 +908,12 @@ mod tests {\n         assert from_str(~\" \\\"foo\\\" \") == Ok(String(@~\"foo\"));\n     }\n \n+    #[test]\n+    fn test_unicode_hex_escapes_in_str() {\n+        assert from_str(~\"\\\"\\\\u12ab\\\"\") == Ok(String(@~\"\\u12ab\"));\n+        assert from_str(~\"\\\"\\\\uAB12\\\"\") == Ok(String(@~\"\\uAB12\"));\n+    }\n+\n     #[test]\n     fn test_read_list() {\n         assert from_str(~\"[\") =="}]}