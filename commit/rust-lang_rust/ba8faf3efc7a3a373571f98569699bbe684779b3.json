{"sha": "ba8faf3efc7a3a373571f98569699bbe684779b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhOGZhZjNlZmM3YTNhMzczNTcxZjk4NTY5Njk5YmJlNjg0Nzc5YjM=", "commit": {"author": {"name": "Timo Freiberg", "email": "timo.freiberg@gmail.com", "date": "2020-04-18T14:12:21Z"}, "committer": {"name": "Timo Freiberg", "email": "timo.freiberg@gmail.com", "date": "2020-04-21T21:04:44Z"}, "message": "Add target file information to AssistAction", "tree": {"sha": "29c4b5e65ca2557ab78451e0ccff3d1fe4c64393", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29c4b5e65ca2557ab78451e0ccff3d1fe4c64393"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba8faf3efc7a3a373571f98569699bbe684779b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba8faf3efc7a3a373571f98569699bbe684779b3", "html_url": "https://github.com/rust-lang/rust/commit/ba8faf3efc7a3a373571f98569699bbe684779b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba8faf3efc7a3a373571f98569699bbe684779b3/comments", "author": {"login": "TimoFreiberg", "id": 5281645, "node_id": "MDQ6VXNlcjUyODE2NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5281645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimoFreiberg", "html_url": "https://github.com/TimoFreiberg", "followers_url": "https://api.github.com/users/TimoFreiberg/followers", "following_url": "https://api.github.com/users/TimoFreiberg/following{/other_user}", "gists_url": "https://api.github.com/users/TimoFreiberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimoFreiberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimoFreiberg/subscriptions", "organizations_url": "https://api.github.com/users/TimoFreiberg/orgs", "repos_url": "https://api.github.com/users/TimoFreiberg/repos", "events_url": "https://api.github.com/users/TimoFreiberg/events{/privacy}", "received_events_url": "https://api.github.com/users/TimoFreiberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimoFreiberg", "id": 5281645, "node_id": "MDQ6VXNlcjUyODE2NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5281645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimoFreiberg", "html_url": "https://github.com/TimoFreiberg", "followers_url": "https://api.github.com/users/TimoFreiberg/followers", "following_url": "https://api.github.com/users/TimoFreiberg/following{/other_user}", "gists_url": "https://api.github.com/users/TimoFreiberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimoFreiberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimoFreiberg/subscriptions", "organizations_url": "https://api.github.com/users/TimoFreiberg/orgs", "repos_url": "https://api.github.com/users/TimoFreiberg/repos", "events_url": "https://api.github.com/users/TimoFreiberg/events{/privacy}", "received_events_url": "https://api.github.com/users/TimoFreiberg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "317fc650d5c1267a8c192041efe6b591d900808f", "url": "https://api.github.com/repos/rust-lang/rust/commits/317fc650d5c1267a8c192041efe6b591d900808f", "html_url": "https://github.com/rust-lang/rust/commit/317fc650d5c1267a8c192041efe6b591d900808f"}], "stats": {"total": 98, "additions": 82, "deletions": 16}, "files": [{"sha": "2791632576541ccf556ba8bfe46febf657c7194e", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba8faf3efc7a3a373571f98569699bbe684779b3/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8faf3efc7a3a373571f98569699bbe684779b3/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=ba8faf3efc7a3a373571f98569699bbe684779b3", "patch": "@@ -10,7 +10,7 @@ use ra_syntax::{\n };\n use ra_text_edit::TextEditBuilder;\n \n-use crate::{AssistAction, AssistId, AssistLabel, GroupLabel, ResolvedAssist};\n+use crate::{AssistAction, AssistFile, AssistId, AssistLabel, GroupLabel, ResolvedAssist};\n use algo::SyntaxRewriter;\n \n #[derive(Clone, Debug)]\n@@ -180,6 +180,7 @@ pub(crate) struct ActionBuilder {\n     edit: TextEditBuilder,\n     cursor_position: Option<TextUnit>,\n     target: Option<TextRange>,\n+    file: AssistFile,\n }\n \n impl ActionBuilder {\n@@ -241,11 +242,16 @@ impl ActionBuilder {\n         algo::diff(&node, &new).into_text_edit(&mut self.edit)\n     }\n \n+    pub(crate) fn set_file(&mut self, assist_file: AssistFile) {\n+        self.file = assist_file\n+    }\n+\n     fn build(self) -> AssistAction {\n         AssistAction {\n             edit: self.edit.finish(),\n             cursor_position: self.cursor_position,\n             target: self.target,\n+            file: self.file,\n         }\n     }\n }"}, {"sha": "b65ded871988189265a3317e2031dff568147c83", "filename": "crates/ra_assists/src/handlers/add_function.rs", "status": "modified", "additions": 57, "deletions": 14, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/ba8faf3efc7a3a373571f98569699bbe684779b3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8faf3efc7a3a373571f98569699bbe684779b3/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs?ref=ba8faf3efc7a3a373571f98569699bbe684779b3", "patch": "@@ -3,7 +3,7 @@ use ra_syntax::{\n     SyntaxKind, SyntaxNode, TextUnit,\n };\n \n-use crate::{Assist, AssistCtx, AssistId};\n+use crate::{Assist, AssistCtx, AssistFile, AssistId};\n use ast::{edit::IndentLevel, ArgListOwner, ModuleItemOwner};\n use hir::HirDisplay;\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -44,10 +44,10 @@ pub(crate) fn add_function(ctx: AssistCtx) -> Option<Assist> {\n     }\n \n     let target_module = if let Some(qualifier) = path.qualifier() {\n-        if let Some(hir::PathResolution::Def(hir::ModuleDef::Module(resolved))) =\n+        if let Some(hir::PathResolution::Def(hir::ModuleDef::Module(module))) =\n             ctx.sema.resolve_path(&qualifier)\n         {\n-            Some(resolved.definition_source(ctx.sema.db).value)\n+            Some(module.definition_source(ctx.sema.db))\n         } else {\n             return None;\n         }\n@@ -61,6 +61,7 @@ pub(crate) fn add_function(ctx: AssistCtx) -> Option<Assist> {\n         edit.target(call.syntax().text_range());\n \n         if let Some(function_template) = function_builder.render() {\n+            edit.set_file(function_template.file);\n             edit.set_cursor(function_template.cursor_offset);\n             edit.insert(function_template.insert_offset, function_template.fn_def.to_string());\n         }\n@@ -71,13 +72,15 @@ struct FunctionTemplate {\n     insert_offset: TextUnit,\n     cursor_offset: TextUnit,\n     fn_def: ast::SourceFile,\n+    file: AssistFile,\n }\n \n struct FunctionBuilder {\n     target: GeneratedFunctionTarget,\n     fn_name: ast::Name,\n     type_params: Option<ast::TypeParamList>,\n     params: ast::ParamList,\n+    file: AssistFile,\n }\n \n impl FunctionBuilder {\n@@ -87,16 +90,19 @@ impl FunctionBuilder {\n         ctx: &AssistCtx,\n         call: &ast::CallExpr,\n         path: &ast::Path,\n-        generate_in: Option<hir::ModuleSource>,\n+        generate_in: Option<hir::InFile<hir::ModuleSource>>,\n     ) -> Option<Self> {\n+        let mut file = AssistFile::default();\n         let target = if let Some(generate_in_module) = generate_in {\n-            next_space_for_fn_in_module(generate_in_module)?\n+            let (in_file, target) = next_space_for_fn_in_module(ctx.sema.db, generate_in_module)?;\n+            file = in_file;\n+            target\n         } else {\n             next_space_for_fn_after_call_site(&call)?\n         };\n         let fn_name = fn_name(&path)?;\n         let (type_params, params) = fn_args(ctx, &call)?;\n-        Some(Self { target, fn_name, type_params, params })\n+        Some(Self { target, fn_name, type_params, params, file })\n     }\n     fn render(self) -> Option<FunctionTemplate> {\n         let placeholder_expr = ast::make::expr_todo();\n@@ -130,7 +136,7 @@ impl FunctionBuilder {\n             .text_range()\n             .start();\n         let cursor_offset = insert_offset + cursor_offset_from_fn_start;\n-        Some(FunctionTemplate { insert_offset, cursor_offset, fn_def })\n+        Some(FunctionTemplate { insert_offset, cursor_offset, fn_def, file: self.file })\n     }\n }\n \n@@ -250,23 +256,29 @@ fn next_space_for_fn_after_call_site(expr: &ast::CallExpr) -> Option<GeneratedFu\n     last_ancestor.map(GeneratedFunctionTarget::BehindItem)\n }\n \n-fn next_space_for_fn_in_module(module: hir::ModuleSource) -> Option<GeneratedFunctionTarget> {\n-    match module {\n+fn next_space_for_fn_in_module(\n+    db: &dyn hir::db::AstDatabase,\n+    module: hir::InFile<hir::ModuleSource>,\n+) -> Option<(AssistFile, GeneratedFunctionTarget)> {\n+    let file = module.file_id.original_file(db);\n+    let assist_file = AssistFile::TargetFile(file);\n+    let assist_item = match module.value {\n         hir::ModuleSource::SourceFile(it) => {\n             if let Some(last_item) = it.items().last() {\n-                Some(GeneratedFunctionTarget::BehindItem(last_item.syntax().clone()))\n+                GeneratedFunctionTarget::BehindItem(last_item.syntax().clone())\n             } else {\n-                Some(GeneratedFunctionTarget::BehindItem(it.syntax().clone()))\n+                GeneratedFunctionTarget::BehindItem(it.syntax().clone())\n             }\n         }\n         hir::ModuleSource::Module(it) => {\n             if let Some(last_item) = it.item_list().and_then(|it| it.items().last()) {\n-                Some(GeneratedFunctionTarget::BehindItem(last_item.syntax().clone()))\n+                GeneratedFunctionTarget::BehindItem(last_item.syntax().clone())\n             } else {\n-                it.item_list().map(GeneratedFunctionTarget::InEmptyItemList)\n+                GeneratedFunctionTarget::InEmptyItemList(it.item_list()?)\n             }\n         }\n-    }\n+    };\n+    Some((assist_file, assist_item))\n }\n \n #[cfg(test)]\n@@ -884,6 +896,37 @@ fn foo() {\n         )\n     }\n \n+    #[test]\n+    fn add_function_in_another_file() {\n+        check_assist(\n+            add_function,\n+            r\"\n+//- /main.rs\n+mod foo;\n+\n+fn main() {\n+    foo::bar<|>()\n+}\n+\n+//- /foo.rs\n+\n+\",\n+            r\"\n+//- /main.rs\n+mod foo;\n+\n+fn main() {\n+    foo::bar()\n+}\n+\n+//- /foo.rs\n+fn bar() {\n+    <|>todo!()\n+}\n+\",\n+        )\n+    }\n+\n     #[test]\n     fn add_function_not_applicable_if_function_already_exists() {\n         check_assist_not_applicable("}, {"sha": "fb57486cb163c1587b136b12cfb24ba46cc3cbe3", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ba8faf3efc7a3a373571f98569699bbe684779b3/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8faf3efc7a3a373571f98569699bbe684779b3/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=ba8faf3efc7a3a373571f98569699bbe684779b3", "patch": "@@ -17,7 +17,7 @@ mod doc_tests;\n pub mod utils;\n pub mod ast_transform;\n \n-use ra_db::FileRange;\n+use ra_db::{FileId, FileRange};\n use ra_ide_db::RootDatabase;\n use ra_syntax::{TextRange, TextUnit};\n use ra_text_edit::TextEdit;\n@@ -54,6 +54,7 @@ pub struct AssistAction {\n     pub cursor_position: Option<TextUnit>,\n     // FIXME: This belongs to `AssistLabel`\n     pub target: Option<TextRange>,\n+    pub file: AssistFile,\n }\n \n #[derive(Debug, Clone)]\n@@ -63,6 +64,18 @@ pub struct ResolvedAssist {\n     pub action: AssistAction,\n }\n \n+#[derive(Debug, Clone, Copy)]\n+pub enum AssistFile {\n+    CurrentFile,\n+    TargetFile(FileId),\n+}\n+\n+impl Default for AssistFile {\n+    fn default() -> Self {\n+        Self::CurrentFile\n+    }\n+}\n+\n /// Return all the assists applicable at the given position.\n ///\n /// Assists are returned in the \"unresolved\" state, that is only labels are"}, {"sha": "2b5d11681af79fe725f86bc89411a4ab505b3264", "filename": "crates/ra_ide/src/assists.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8faf3efc7a3a373571f98569699bbe684779b3/crates%2Fra_ide%2Fsrc%2Fassists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8faf3efc7a3a373571f98569699bbe684779b3/crates%2Fra_ide%2Fsrc%2Fassists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fassists.rs?ref=ba8faf3efc7a3a373571f98569699bbe684779b3", "patch": "@@ -37,6 +37,10 @@ fn action_to_edit(\n     file_id: FileId,\n     assist_label: &AssistLabel,\n ) -> SourceChange {\n+    let file_id = match action.file {\n+        ra_assists::AssistFile::TargetFile(it) => it,\n+        _ => file_id,\n+    };\n     let file_edit = SourceFileEdit { file_id, edit: action.edit };\n     SourceChange::source_file_edit(assist_label.label.clone(), file_edit)\n         .with_cursor_opt(action.cursor_position.map(|offset| FilePosition { offset, file_id }))"}]}