{"sha": "3006ea3560b454404a653a0677a3d03790d5455b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMDZlYTM1NjBiNDU0NDA0YTY1M2EwNjc3YTNkMDM3OTBkNTQ1NWI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-17T21:08:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-17T21:08:55Z"}, "message": "Rollup merge of #71670 - GuillaumeGomez:enforce-codeblocks-attribute-check, r=Mark-Simulacrum\n\nEnforce even more the code blocks attributes check through rustdoc\n\n`rustdoc` now has a lint which allows it to warn if a code block attribute is malformated (which can end up in bad situations, even more in case of testing examples!). Now it'll fail if such a situation is encountered when testing markdown code blocks examples.\n\nr? @Mark-Simulacrum", "tree": {"sha": "34288392ee69b3c07ee1e5a021a086b40a26a8dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34288392ee69b3c07ee1e5a021a086b40a26a8dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3006ea3560b454404a653a0677a3d03790d5455b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfEhNnCRBK7hj4Ov3rIwAAdHIIADs1PH+AQsiUckBYMZBDlI+8\nnwLUSaBSB8UoqYdVm5WebLrf+lXHmOjZFpP9hm5nUFz9fNPVWoDIgi8g8R9uWpbU\nALCuLifWSrRIL3xIrSZCa46lwWHHCvWEEfzv4IVIuBkifoFXbg9n4ssuf8Y9Do86\nhuIkeY/efbSD2EOXq+MoQYQbWBLvKN9clapvboQUBngon4jlX7ArZpT3T3j8Aq7f\nvrmPbqDjQ2FhciEkUU7SrByLz6cd2qNZVUzDurxHHGojseN9SdJ40Exi0BmcOuvQ\nd4fZa4ZYChCQB0D78OAqPyiGEey1RRzDf1HrDS407EPQd9Nbyk+N9gSKn9xkov8=\n=y6OH\n-----END PGP SIGNATURE-----\n", "payload": "tree 34288392ee69b3c07ee1e5a021a086b40a26a8dd\nparent 39d5a61f2e4e237123837f5162cc275c2fd7e625\nparent 5f6c07937ae4afcf80644a82da5f95af97044efd\nauthor Manish Goregaokar <manishsmail@gmail.com> 1595020135 -0700\ncommitter GitHub <noreply@github.com> 1595020135 -0700\n\nRollup merge of #71670 - GuillaumeGomez:enforce-codeblocks-attribute-check, r=Mark-Simulacrum\n\nEnforce even more the code blocks attributes check through rustdoc\n\n`rustdoc` now has a lint which allows it to warn if a code block attribute is malformated (which can end up in bad situations, even more in case of testing examples!). Now it'll fail if such a situation is encountered when testing markdown code blocks examples.\n\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3006ea3560b454404a653a0677a3d03790d5455b", "html_url": "https://github.com/rust-lang/rust/commit/3006ea3560b454404a653a0677a3d03790d5455b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3006ea3560b454404a653a0677a3d03790d5455b/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39d5a61f2e4e237123837f5162cc275c2fd7e625", "url": "https://api.github.com/repos/rust-lang/rust/commits/39d5a61f2e4e237123837f5162cc275c2fd7e625", "html_url": "https://github.com/rust-lang/rust/commit/39d5a61f2e4e237123837f5162cc275c2fd7e625"}, {"sha": "5f6c07937ae4afcf80644a82da5f95af97044efd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f6c07937ae4afcf80644a82da5f95af97044efd", "html_url": "https://github.com/rust-lang/rust/commit/5f6c07937ae4afcf80644a82da5f95af97044efd"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "a1659826707981e311c9837e7f970c4578eeb3a5", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3006ea3560b454404a653a0677a3d03790d5455b/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3006ea3560b454404a653a0677a3d03790d5455b/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=3006ea3560b454404a653a0677a3d03790d5455b", "patch": "@@ -725,7 +725,11 @@ impl<'a> Builder<'a> {\n             .env(\"CFG_RELEASE_CHANNEL\", &self.config.channel)\n             .env(\"RUSTDOC_REAL\", self.rustdoc(compiler))\n             .env(\"RUSTDOC_CRATE_VERSION\", self.rust_version())\n-            .env(\"RUSTC_BOOTSTRAP\", \"1\");\n+            .env(\"RUSTC_BOOTSTRAP\", \"1\")\n+            .arg(\"-Winvalid_codeblock_attributes\");\n+        if self.config.deny_warnings {\n+            cmd.arg(\"-Dwarnings\");\n+        }\n \n         // Remove make-related flags that can cause jobserver problems.\n         cmd.env_remove(\"MAKEFLAGS\");\n@@ -838,7 +842,7 @@ impl<'a> Builder<'a> {\n         // FIXME: It might be better to use the same value for both `RUSTFLAGS` and `RUSTDOCFLAGS`,\n         // but this breaks CI. At the very least, stage0 `rustdoc` needs `--cfg bootstrap`. See\n         // #71458.\n-        let rustdocflags = rustflags.clone();\n+        let mut rustdocflags = rustflags.clone();\n \n         if let Ok(s) = env::var(\"CARGOFLAGS\") {\n             cargo.args(s.split_whitespace());\n@@ -1140,6 +1144,7 @@ impl<'a> Builder<'a> {\n \n             if self.config.deny_warnings {\n                 lint_flags.push(\"-Dwarnings\");\n+                rustdocflags.arg(\"-Dwarnings\");\n             }\n \n             // FIXME(#58633) hide \"unused attribute\" errors in incremental\n@@ -1157,6 +1162,8 @@ impl<'a> Builder<'a> {\n             // are always ignored in dependencies. Eventually this should be\n             // fixed via better support from Cargo.\n             cargo.env(\"RUSTC_LINT_FLAGS\", lint_flags.join(\" \"));\n+\n+            rustdocflags.arg(\"-Winvalid_codeblock_attributes\");\n         }\n \n         if let Mode::Rustc | Mode::Codegen = mode {"}, {"sha": "263909d5559d16bc93a04b354bb0888142f076e8", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3006ea3560b454404a653a0677a3d03790d5455b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3006ea3560b454404a653a0677a3d03790d5455b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=3006ea3560b454404a653a0677a3d03790d5455b", "patch": "@@ -320,7 +320,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n     let missing_doc_example = rustc_lint::builtin::MISSING_DOC_CODE_EXAMPLES.name;\n     let private_doc_tests = rustc_lint::builtin::PRIVATE_DOC_TESTS.name;\n     let no_crate_level_docs = rustc_lint::builtin::MISSING_CRATE_LEVEL_DOCS.name;\n-    let invalid_codeblock_attribute_name = rustc_lint::builtin::INVALID_CODEBLOCK_ATTRIBUTES.name;\n+    let invalid_codeblock_attributes_name = rustc_lint::builtin::INVALID_CODEBLOCK_ATTRIBUTES.name;\n \n     // In addition to those specific lints, we also need to allow those given through\n     // command line, otherwise they'll get ignored and we don't want that.\n@@ -330,12 +330,12 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         missing_doc_example.to_owned(),\n         private_doc_tests.to_owned(),\n         no_crate_level_docs.to_owned(),\n-        invalid_codeblock_attribute_name.to_owned(),\n+        invalid_codeblock_attributes_name.to_owned(),\n     ];\n \n     let (lint_opts, lint_caps) = init_lints(allowed_lints, lint_opts, |lint| {\n         if lint.name == intra_link_resolution_failure_name\n-            || lint.name == invalid_codeblock_attribute_name\n+            || lint.name == invalid_codeblock_attributes_name\n         {\n             None\n         } else {"}, {"sha": "e8ea71997109ad31ec7c78047e201176b7775d5c", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3006ea3560b454404a653a0677a3d03790d5455b/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3006ea3560b454404a653a0677a3d03790d5455b/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=3006ea3560b454404a653a0677a3d03790d5455b", "patch": "@@ -45,14 +45,14 @@ pub struct TestOptions {\n pub fn run(options: Options) -> Result<(), String> {\n     let input = config::Input::File(options.input.clone());\n \n-    let invalid_codeblock_attribute_name = rustc_lint::builtin::INVALID_CODEBLOCK_ATTRIBUTES.name;\n+    let invalid_codeblock_attributes_name = rustc_lint::builtin::INVALID_CODEBLOCK_ATTRIBUTES.name;\n \n     // In addition to those specific lints, we also need to allow those given through\n     // command line, otherwise they'll get ignored and we don't want that.\n-    let allowed_lints = vec![invalid_codeblock_attribute_name.to_owned()];\n+    let allowed_lints = vec![invalid_codeblock_attributes_name.to_owned()];\n \n     let (lint_opts, lint_caps) = init_lints(allowed_lints, options.lint_opts.clone(), |lint| {\n-        if lint.name == invalid_codeblock_attribute_name {\n+        if lint.name == invalid_codeblock_attributes_name {\n             None\n         } else {\n             Some((lint.name_lower(), lint::Allow))"}]}