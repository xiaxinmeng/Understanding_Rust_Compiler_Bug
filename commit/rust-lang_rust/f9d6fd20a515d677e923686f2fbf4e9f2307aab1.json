{"sha": "f9d6fd20a515d677e923686f2fbf4e9f2307aab1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZDZmZDIwYTUxNWQ2NzdlOTIzNjg2ZjJmYmY0ZTlmMjMwN2FhYjE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-30T19:39:55Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-30T23:47:43Z"}, "message": "Support OSX frameworks\n\nThis adds support to link to OSX frameworks via the new link attribute when\nusing `kind = \"framework\"`. It is a compiler error to request linkage to a\nframework when the target is not macos because other platforms don't support\nframeworks.\n\nCloses #2023", "tree": {"sha": "a72a14d12c945d655d45da715cf172fb0439f62d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a72a14d12c945d655d45da715cf172fb0439f62d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9d6fd20a515d677e923686f2fbf4e9f2307aab1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d6fd20a515d677e923686f2fbf4e9f2307aab1", "html_url": "https://github.com/rust-lang/rust/commit/f9d6fd20a515d677e923686f2fbf4e9f2307aab1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9d6fd20a515d677e923686f2fbf4e9f2307aab1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "url": "https://api.github.com/repos/rust-lang/rust/commits/4252a24ae1236207a99c1d313d4b1b1eda3ebb58", "html_url": "https://github.com/rust-lang/rust/commit/4252a24ae1236207a99c1d313d4b1b1eda3ebb58"}], "stats": {"total": 148, "additions": 130, "deletions": 18}, "files": [{"sha": "5cf912a929f6e740a9aecf94b7689654e8f42a75", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f9d6fd20a515d677e923686f2fbf4e9f2307aab1/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d6fd20a515d677e923686f2fbf4e9f2307aab1/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=f9d6fd20a515d677e923686f2fbf4e9f2307aab1", "patch": "@@ -1015,7 +1015,7 @@ fn link_rlib(sess: Session, obj_filename: &Path,\n             cstore::NativeStatic => {\n                 a.add_native_library(l.as_slice());\n             }\n-            cstore::NativeUnknown => {}\n+            cstore::NativeFramework | cstore::NativeUnknown => {}\n         }\n     }\n     return a;\n@@ -1044,8 +1044,13 @@ fn link_staticlib(sess: Session, obj_filename: &Path, out_filename: &Path) {\n         };\n         a.add_rlib(&p);\n         let native_libs = csearch::get_native_libraries(sess.cstore, cnum);\n-        for lib in native_libs.iter() {\n-            sess.warn(format!(\"unlinked native library: {}\", *lib));\n+        for &(kind, ref lib) in native_libs.iter() {\n+            let name = match kind {\n+                cstore::NativeStatic => \"static library\",\n+                cstore::NativeUnknown => \"library\",\n+                cstore::NativeFramework => \"framework\",\n+            };\n+            sess.warn(format!(\"unlinked native {}: {}\", name, *lib));\n         }\n     }\n }\n@@ -1204,8 +1209,17 @@ fn add_upstream_rust_crates(args: &mut ~[~str], sess: Session,\n                 args.push(cratepath.as_str().unwrap().to_owned());\n \n                 let libs = csearch::get_native_libraries(sess.cstore, cnum);\n-                for lib in libs.iter() {\n-                    args.push(\"-l\" + *lib);\n+                for &(kind, ref lib) in libs.iter() {\n+                    match kind {\n+                        cstore::NativeUnknown => args.push(\"-l\" + *lib),\n+                        cstore::NativeFramework => {\n+                            args.push(~\"-framework\");\n+                            args.push(lib.to_owned());\n+                        }\n+                        cstore::NativeStatic => {\n+                            sess.bug(\"statics shouldn't be propagated\");\n+                        }\n+                    }\n                 }\n             }\n             return;\n@@ -1262,7 +1276,15 @@ fn add_local_native_libraries(args: &mut ~[~str], sess: Session) {\n         args.push(\"-L\" + path.as_str().unwrap().to_owned());\n     }\n \n-    for &(ref l, _) in cstore::get_used_libraries(sess.cstore).iter() {\n-        args.push(~\"-l\" + *l);\n+    for &(ref l, kind) in cstore::get_used_libraries(sess.cstore).iter() {\n+        match kind {\n+            cstore::NativeUnknown | cstore::NativeStatic => {\n+                args.push(\"-l\" + *l);\n+            }\n+            cstore::NativeFramework => {\n+                args.push(~\"-framework\");\n+                args.push(l.to_owned());\n+            }\n+        }\n     }\n }"}, {"sha": "f6eadfcc916e5fdb46f84879cf7663acfb152fd8", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9d6fd20a515d677e923686f2fbf4e9f2307aab1/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d6fd20a515d677e923686f2fbf4e9f2307aab1/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=f9d6fd20a515d677e923686f2fbf4e9f2307aab1", "patch": "@@ -199,6 +199,8 @@ pub static tag_region_param_def_def_id: uint = 0x102;\n \n pub static tag_native_libraries: uint = 0x103;\n pub static tag_native_libraries_lib: uint = 0x104;\n+pub static tag_native_libraries_name: uint = 0x105;\n+pub static tag_native_libraries_kind: uint = 0x106;\n \n pub struct LinkMeta {\n     name: @str,"}, {"sha": "b425f1449f5e266e3b42f7c788912550749a3b81", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f9d6fd20a515d677e923686f2fbf4e9f2307aab1/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d6fd20a515d677e923686f2fbf4e9f2307aab1/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=f9d6fd20a515d677e923686f2fbf4e9f2307aab1", "patch": "@@ -18,6 +18,7 @@ use metadata::loader;\n use std::hashmap::HashMap;\n use syntax::ast;\n use std::vec;\n+use syntax::abi;\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n use syntax::codemap::{Span, dummy_sp};\n@@ -191,10 +192,22 @@ fn visit_item(e: &Env, i: @ast::item) {\n                             \"kind\" == k.name()\n                         }).and_then(|a| a.value_str());\n                         let kind = match kind {\n-                            Some(k) if \"static\" == k => cstore::NativeStatic,\n                             Some(k) => {\n-                                e.sess.span_fatal(i.span,\n-                                    format!(\"unknown kind: `{}`\", k));\n+                                if \"static\" == k {\n+                                    cstore::NativeStatic\n+                                } else if e.sess.targ_cfg.os == abi::OsMacos &&\n+                                          \"framework\" == k {\n+                                    cstore::NativeFramework\n+                                } else if \"framework\" == k {\n+                                    e.sess.span_err(m.span,\n+                                        \"native frameworks are only available \\\n+                                         on OSX targets\");\n+                                    cstore::NativeUnknown\n+                                } else {\n+                                    e.sess.span_err(m.span,\n+                                        format!(\"unknown kind: `{}`\", k));\n+                                    cstore::NativeUnknown\n+                                }\n                             }\n                             None => cstore::NativeUnknown\n                         };\n@@ -204,9 +217,10 @@ fn visit_item(e: &Env, i: @ast::item) {\n                         let n = match n {\n                             Some(n) => n,\n                             None => {\n-                                e.sess.span_fatal(i.span,\n+                                e.sess.span_err(m.span,\n                                     \"#[link(...)] specified without \\\n                                      `name = \\\"foo\\\"`\");\n+                                @\"foo\"\n                             }\n                         };\n                         cstore::add_used_library(cstore, n.to_owned(), kind);"}, {"sha": "c1c56e94f27e70de6da0b8a04fbac614d1a80e21", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9d6fd20a515d677e923686f2fbf4e9f2307aab1/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d6fd20a515d677e923686f2fbf4e9f2307aab1/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=f9d6fd20a515d677e923686f2fbf4e9f2307aab1", "patch": "@@ -263,7 +263,8 @@ pub fn get_item_visibility(cstore: @mut cstore::CStore,\n }\n \n pub fn get_native_libraries(cstore: @mut cstore::CStore,\n-                            crate_num: ast::CrateNum) -> ~[~str] {\n+                            crate_num: ast::CrateNum)\n+                                -> ~[(cstore::NativeLibaryKind, ~str)] {\n     let cdata = cstore::get_crate_data(cstore, crate_num);\n     decoder::get_native_libraries(cdata)\n }"}, {"sha": "c2f6443ed5401b5aaf492453103d82b01d7355c5", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9d6fd20a515d677e923686f2fbf4e9f2307aab1/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d6fd20a515d677e923686f2fbf4e9f2307aab1/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=f9d6fd20a515d677e923686f2fbf4e9f2307aab1", "patch": "@@ -40,10 +40,11 @@ pub enum LinkagePreference {\n     RequireStatic,\n }\n \n-#[deriving(Eq)]\n+#[deriving(Eq, FromPrimitive)]\n pub enum NativeLibaryKind {\n-    NativeStatic,\n-    NativeUnknown,\n+    NativeStatic,    // native static library (.a archive)\n+    NativeFramework, // OSX-specific\n+    NativeUnknown,   // default way to specify a dynamic library\n }\n \n // Where a crate came from on the local filesystem. One of these two options"}, {"sha": "b5746cec58d64440ed54f9d2c687b84862291f89", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f9d6fd20a515d677e923686f2fbf4e9f2307aab1/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d6fd20a515d677e923686f2fbf4e9f2307aab1/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=f9d6fd20a515d677e923686f2fbf4e9f2307aab1", "patch": "@@ -1530,11 +1530,16 @@ pub fn get_trait_of_method(cdata: Cmd, id: ast::NodeId, tcx: ty::ctxt)\n }\n \n \n-pub fn get_native_libraries(cdata: Cmd) -> ~[~str] {\n+pub fn get_native_libraries(cdata: Cmd) -> ~[(cstore::NativeLibaryKind, ~str)] {\n     let libraries = reader::get_doc(reader::Doc(cdata.data), tag_native_libraries);\n     let mut result = ~[];\n     reader::tagged_docs(libraries, tag_native_libraries_lib, |lib_doc| {\n-        result.push(lib_doc.as_str());\n+        let kind_doc = reader::get_doc(lib_doc, tag_native_libraries_kind);\n+        let name_doc = reader::get_doc(lib_doc, tag_native_libraries_name);\n+        let kind: cstore::NativeLibaryKind =\n+            FromPrimitive::from_u32(reader::doc_as_u32(kind_doc)).unwrap();\n+        let name = name_doc.as_str();\n+        result.push((kind, name));\n         true\n     });\n     return result;"}, {"sha": "ea4f4b0f3cf5e62de0e22426d49216ae5feb2d2b", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9d6fd20a515d677e923686f2fbf4e9f2307aab1/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d6fd20a515d677e923686f2fbf4e9f2307aab1/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=f9d6fd20a515d677e923686f2fbf4e9f2307aab1", "patch": "@@ -1640,10 +1640,18 @@ fn encode_native_libraries(ecx: &EncodeContext, ebml_w: &mut writer::Encoder) {\n     for &(ref lib, kind) in cstore::get_used_libraries(ecx.cstore).iter() {\n         match kind {\n             cstore::NativeStatic => {} // these libraries are not propagated\n-            cstore::NativeUnknown => {\n+            cstore::NativeFramework | cstore::NativeUnknown => {\n                 ebml_w.start_tag(tag_native_libraries_lib);\n+\n+                ebml_w.start_tag(tag_native_libraries_kind);\n+                ebml_w.writer.write_be_u32(kind as u32);\n+                ebml_w.end_tag();\n+\n+                ebml_w.start_tag(tag_native_libraries_name);\n                 ebml_w.writer.write(lib.as_bytes());\n                 ebml_w.end_tag();\n+\n+                ebml_w.end_tag();\n             }\n         }\n     }"}, {"sha": "0616da266021e86a9397680bd0313d9bb96fc645", "filename": "src/test/compile-fail/bad-extern-link-attrs.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f9d6fd20a515d677e923686f2fbf4e9f2307aab1/src%2Ftest%2Fcompile-fail%2Fbad-extern-link-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d6fd20a515d677e923686f2fbf4e9f2307aab1/src%2Ftest%2Fcompile-fail%2Fbad-extern-link-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-extern-link-attrs.rs?ref=f9d6fd20a515d677e923686f2fbf4e9f2307aab1", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[link()] //~ ERROR: specified without `name =\n+#[link(name = \"foo\")]\n+#[link(name = \"foo\", kind = \"bar\")] //~ ERROR: unknown kind\n+extern {}\n+\n+fn main() {}"}, {"sha": "615936296564eae9f6fa9288467dfe6b08b6b380", "filename": "src/test/compile-fail/osx-frameworks.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f9d6fd20a515d677e923686f2fbf4e9f2307aab1/src%2Ftest%2Fcompile-fail%2Fosx-frameworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d6fd20a515d677e923686f2fbf4e9f2307aab1/src%2Ftest%2Fcompile-fail%2Fosx-frameworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fosx-frameworks.rs?ref=f9d6fd20a515d677e923686f2fbf4e9f2307aab1", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-macos this is supposed to succeed on osx\n+\n+#[link(name = \"foo\", kind = \"framework\")]\n+extern {}\n+//~^^ ERROR: native frameworks are only available on OSX\n+\n+fn main() {\n+}"}, {"sha": "cfb7a8e43befa10d9f5c885fcce102770e08be37", "filename": "src/test/run-pass/osx-frameworks.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f9d6fd20a515d677e923686f2fbf4e9f2307aab1/src%2Ftest%2Frun-pass%2Fosx-frameworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d6fd20a515d677e923686f2fbf4e9f2307aab1/src%2Ftest%2Frun-pass%2Fosx-frameworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fosx-frameworks.rs?ref=f9d6fd20a515d677e923686f2fbf4e9f2307aab1", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::libc;\n+\n+#[cfg(target_os = \"macos\")]\n+#[link(name = \"CoreFoundation\", kind = \"framework\")]\n+extern {\n+    fn CFRunLoopGetTypeID() -> libc::c_ulong;\n+}\n+\n+#[cfg(target_os = \"macos\")]\n+fn main() {\n+    unsafe { CFRunLoopGetTypeID(); }\n+}\n+\n+#[cfg(not(target_os = \"macos\"))]\n+pub fn main() {}"}]}