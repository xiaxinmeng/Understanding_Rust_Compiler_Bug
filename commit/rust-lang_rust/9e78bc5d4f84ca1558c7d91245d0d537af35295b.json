{"sha": "9e78bc5d4f84ca1558c7d91245d0d537af35295b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNzhiYzVkNGY4NGNhMTU1OGM3ZDkxMjQ1ZDBkNTM3YWYzNTI5NWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-18T17:06:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-18T17:06:26Z"}, "message": "Rollup merge of #56594 - sdroege:c_void-is-not-never, r=TimNN\n\nRemove confusing comment about ideally using `!` for `c_void`\n\nUsing `!` for `c_void` would have the problem that pointers and\npotentially references to an uninhabited type would be created, and at\nleast for references this is UB.\n\nIn addition document that newtype wrappers around `c_void` can be used\nsafely in place of `extern type` until the latter is stabilized.\n\n----\n\nI'm not 100% sure about the usage for opaque types as the [nomicon](https://doc.rust-lang.org/nomicon/ffi.html#representing-opaque-structs) still recommends using `#[repr(C)] pub struct Foo { _private: [u8; 0] }` but it seems like these two should be equivalent in the end? Also the `#[repr(C)]` (in both cases) should be unneeded because such types never being passed by value, never being dereferenced but only passed around as pointer or reference, so the representation of (*values* of) the type itself should not matter at all?\n\nAlso in context of `c_void` and `!` the second unresolved question in the [`extern type`](https://github.com/rust-lang/rust/issues/43467) stabilization ticket seems relevant\n\n> In [std's](https://github.com/rust-lang/rust/blob/164619a8cfe6d376d25bd3a6a9a5f2856c8de64d/src/libstd/os/raw.rs#L59-L64) source, it is mentioned that LLVM expects i8* for C's void*.\n> We'd need to continue to hack this for the two c_voids in std and libc.\n> But perhaps this should be done across-the-board for all extern types?\n> Somebody should check what Clang does.\n\nPlease correct me if my understanding is wrong and everything's actually fine as is.", "tree": {"sha": "0c13f735fc47e163f2eba84df45f61e019e86a32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c13f735fc47e163f2eba84df45f61e019e86a32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e78bc5d4f84ca1558c7d91245d0d537af35295b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcQgeSCRBK7hj4Ov3rIwAAdHIIAFlb4JCTonvktn6ZXr8ScrZh\nohWSa1F+eEm7u4VCY72xaknDUuDpCaKGhs00uOv6Lp7gL/vW4MdHX+Or932+Fz4v\naZwqqDVri8cY3hsBV+5KHk9+kbYI9VUjna+0YaNs2vmBlpRYp66QRvdE6JOJ4rwT\nuErill3FmObgMizu2scnZIR2p10m+yznX5gMJ0ya9YG0MEM8mt7W6feyRYouUEDy\nahCJKsUuDbeNajhQNZSGCHWTdwGW3VUHeBIKKa8vod2huBeY3/ISiJ7oZiAoU6+D\nvYfEtdzZMn4lNO19bzBbXJHyn2SFV+59SHZGoETqkU40nULxhUrgzSBuBJ4/NHg=\n=Q7uY\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c13f735fc47e163f2eba84df45f61e019e86a32\nparent 527b8d424392dd7d89cfaa4dfdaec4df226c8018\nparent 8de8880b7b74cb0294c6d8c75c24656130278509\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547831186 +0100\ncommitter GitHub <noreply@github.com> 1547831186 +0100\n\nRollup merge of #56594 - sdroege:c_void-is-not-never, r=TimNN\n\nRemove confusing comment about ideally using `!` for `c_void`\n\nUsing `!` for `c_void` would have the problem that pointers and\npotentially references to an uninhabited type would be created, and at\nleast for references this is UB.\n\nIn addition document that newtype wrappers around `c_void` can be used\nsafely in place of `extern type` until the latter is stabilized.\n\n----\n\nI'm not 100% sure about the usage for opaque types as the [nomicon](https://doc.rust-lang.org/nomicon/ffi.html#representing-opaque-structs) still recommends using `#[repr(C)] pub struct Foo { _private: [u8; 0] }` but it seems like these two should be equivalent in the end? Also the `#[repr(C)]` (in both cases) should be unneeded because such types never being passed by value, never being dereferenced but only passed around as pointer or reference, so the representation of (*values* of) the type itself should not matter at all?\n\nAlso in context of `c_void` and `!` the second unresolved question in the [`extern type`](https://github.com/rust-lang/rust/issues/43467) stabilization ticket seems relevant\n\n> In [std's](https://github.com/rust-lang/rust/blob/164619a8cfe6d376d25bd3a6a9a5f2856c8de64d/src/libstd/os/raw.rs#L59-L64) source, it is mentioned that LLVM expects i8* for C's void*.\n> We'd need to continue to hack this for the two c_voids in std and libc.\n> But perhaps this should be done across-the-board for all extern types?\n> Somebody should check what Clang does.\n\nPlease correct me if my understanding is wrong and everything's actually fine as is.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e78bc5d4f84ca1558c7d91245d0d537af35295b", "html_url": "https://github.com/rust-lang/rust/commit/9e78bc5d4f84ca1558c7d91245d0d537af35295b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e78bc5d4f84ca1558c7d91245d0d537af35295b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "527b8d424392dd7d89cfaa4dfdaec4df226c8018", "url": "https://api.github.com/repos/rust-lang/rust/commits/527b8d424392dd7d89cfaa4dfdaec4df226c8018", "html_url": "https://github.com/rust-lang/rust/commit/527b8d424392dd7d89cfaa4dfdaec4df226c8018"}, {"sha": "8de8880b7b74cb0294c6d8c75c24656130278509", "url": "https://api.github.com/repos/rust-lang/rust/commits/8de8880b7b74cb0294c6d8c75c24656130278509", "html_url": "https://github.com/rust-lang/rust/commit/8de8880b7b74cb0294c6d8c75c24656130278509"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "b50e4f3c289b6e0999adb9d209fe1d4a2d52e3a3", "filename": "src/libcore/ffi.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9e78bc5d4f84ca1558c7d91245d0d537af35295b/src%2Flibcore%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e78bc5d4f84ca1558c7d91245d0d537af35295b/src%2Flibcore%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fffi.rs?ref=9e78bc5d4f84ca1558c7d91245d0d537af35295b", "patch": "@@ -12,24 +12,27 @@ use ::fmt;\n /// and `*mut c_void` is equivalent to C's `void*`. That said, this is\n /// *not* the same as C's `void` return type, which is Rust's `()` type.\n ///\n-/// Ideally, this type would be equivalent to [`!`], but currently it may\n-/// be more ideal to use `c_void` for FFI purposes.\n+/// To model pointers to opaque types in FFI, until `extern type` is\n+/// stabilized, it is recommended to use a newtype wrapper around an empty\n+/// byte array. See the [Nomicon] for details.\n ///\n-/// [`!`]: ../../std/primitive.never.html\n /// [pointer]: ../../std/primitive.pointer.html\n+/// [Nomicon]: https://doc.rust-lang.org/nomicon/ffi.html#representing-opaque-structs\n // N.B., for LLVM to recognize the void pointer type and by extension\n //     functions like malloc(), we need to have it represented as i8* in\n //     LLVM bitcode. The enum used here ensures this and prevents misuse\n-//     of the \"raw\" type by only having private variants.. We need two\n+//     of the \"raw\" type by only having private variants. We need two\n //     variants, because the compiler complains about the repr attribute\n-//     otherwise.\n+//     otherwise and we need at least one variant as otherwise the enum\n+//     would be uninhabited and at least dereferencing such pointers would\n+//     be UB.\n #[repr(u8)]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")]\n pub enum c_void {\n-    #[unstable(feature = \"c_void_variant\", reason = \"should not have to exist\",\n+    #[unstable(feature = \"c_void_variant\", reason = \"temporary implementation detail\",\n                issue = \"0\")]\n     #[doc(hidden)] __variant1,\n-    #[unstable(feature = \"c_void_variant\", reason = \"should not have to exist\",\n+    #[unstable(feature = \"c_void_variant\", reason = \"temporary implementation detail\",\n                issue = \"0\")]\n     #[doc(hidden)] __variant2,\n }"}]}