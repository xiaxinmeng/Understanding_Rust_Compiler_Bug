{"sha": "3d292b793ade0c1c9098fb32586033d79f6e9969", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMjkyYjc5M2FkZTBjMWM5MDk4ZmIzMjU4NjAzM2Q3OWY2ZTk5Njk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-03T17:28:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-03T17:28:08Z"}, "message": "Auto merge of #47845 - Zoxc:gen-fixes, r=nikomatsakis\n\nGenerator bugfixes\n\nr? @nikomatsakis", "tree": {"sha": "19349cbdf0862405b4e3f40ea8ed05cb8e2df442", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19349cbdf0862405b4e3f40ea8ed05cb8e2df442"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d292b793ade0c1c9098fb32586033d79f6e9969", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d292b793ade0c1c9098fb32586033d79f6e9969", "html_url": "https://github.com/rust-lang/rust/commit/3d292b793ade0c1c9098fb32586033d79f6e9969", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d292b793ade0c1c9098fb32586033d79f6e9969/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa0a5a86a1378193424fcf48bd7ce361ce418193", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa0a5a86a1378193424fcf48bd7ce361ce418193", "html_url": "https://github.com/rust-lang/rust/commit/aa0a5a86a1378193424fcf48bd7ce361ce418193"}, {"sha": "6c66e11ff8121034cbc4b299f2a78410b4bf0243", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c66e11ff8121034cbc4b299f2a78410b4bf0243", "html_url": "https://github.com/rust-lang/rust/commit/6c66e11ff8121034cbc4b299f2a78410b4bf0243"}], "stats": {"total": 394, "additions": 342, "deletions": 52}, "files": [{"sha": "e5619f469e774bd22b8c6af6cf981bc4eec9d863", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=3d292b793ade0c1c9098fb32586033d79f6e9969", "patch": "@@ -467,9 +467,13 @@ impl<'tcx> Visitor<'tcx> for ExprLocatorVisitor {\n     }\n \n     fn visit_pat(&mut self, pat: &'tcx Pat) {\n+        intravisit::walk_pat(self, pat);\n+\n         self.expr_and_pat_count += 1;\n \n-        intravisit::walk_pat(self, pat);\n+        if pat.id == self.id {\n+            self.result = Some(self.expr_and_pat_count);\n+        }\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx Expr) {\n@@ -814,7 +818,8 @@ impl<'tcx> ScopeTree {\n \n     /// Checks whether the given scope contains a `yield`. If so,\n     /// returns `Some((span, expr_count))` with the span of a yield we found and\n-    /// the number of expressions appearing before the `yield` in the body.\n+    /// the number of expressions and patterns appearing before the `yield` in the body + 1.\n+    /// If there a are multiple yields in a scope, the one with the highest number is returned.\n     pub fn yield_in_scope(&self, scope: Scope) -> Option<(Span, usize)> {\n         self.yield_in_scope.get(&scope).cloned()\n     }"}, {"sha": "7b86791026b415e30d32a131c9051962d7bdfd42", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=3d292b793ade0c1c9098fb32586033d79f6e9969", "patch": "@@ -1266,6 +1266,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 err.note(\"the return type of a function must have a \\\n                           statically known size\");\n             }\n+            ObligationCauseCode::SizedYieldType => {\n+                err.note(\"the yield type of a generator must have a \\\n+                          statically known size\");\n+            }\n             ObligationCauseCode::AssignmentLhsSized => {\n                 err.note(\"the left-hand-side of an assignment must have a statically known size\");\n             }"}, {"sha": "80819a86b7c4655f8a3a41b0baacb29f4a37d1de", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=3d292b793ade0c1c9098fb32586033d79f6e9969", "patch": "@@ -151,6 +151,8 @@ pub enum ObligationCauseCode<'tcx> {\n     VariableType(ast::NodeId),\n     /// Return type must be Sized\n     SizedReturnType,\n+    /// Yield type must be Sized\n+    SizedYieldType,\n     /// [T,..n] --> T must be Copy\n     RepeatVec,\n "}, {"sha": "1eb14a222787db67a998033be8cae3e884d47f7b", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=3d292b793ade0c1c9098fb32586033d79f6e9969", "patch": "@@ -209,6 +209,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::VariableType(id) => Some(super::VariableType(id)),\n             super::ReturnType(id) => Some(super::ReturnType(id)),\n             super::SizedReturnType => Some(super::SizedReturnType),\n+            super::SizedYieldType => Some(super::SizedYieldType),\n             super::RepeatVec => Some(super::RepeatVec),\n             super::FieldSized(item) => Some(super::FieldSized(item)),\n             super::ConstSized => Some(super::ConstSized),\n@@ -526,6 +527,7 @@ impl<'tcx> TypeFoldable<'tcx> for traits::ObligationCauseCode<'tcx> {\n             super::VariableType(_) |\n             super::ReturnType(_) |\n             super::SizedReturnType |\n+            super::SizedYieldType |\n             super::ReturnNoExpression |\n             super::RepeatVec |\n             super::FieldSized(_) |\n@@ -574,6 +576,7 @@ impl<'tcx> TypeFoldable<'tcx> for traits::ObligationCauseCode<'tcx> {\n             super::VariableType(_) |\n             super::ReturnType(_) |\n             super::SizedReturnType |\n+            super::SizedYieldType |\n             super::ReturnNoExpression |\n             super::RepeatVec |\n             super::FieldSized(_) |"}, {"sha": "1593b452cdffc3c4541819d71e1e8cb36a2d58d1", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=3d292b793ade0c1c9098fb32586033d79f6e9969", "patch": "@@ -390,14 +390,21 @@ impl<'a, 'gcx, 'tcx> ClosureSubsts<'tcx> {\n         state.map(move |d| d.ty.subst(tcx, self.substs))\n     }\n \n+    /// This is the types of the fields of a generate which\n+    /// is available before the generator transformation.\n+    /// It includes the upvars and the state discriminant which is u32.\n+    pub fn pre_transforms_tys(self, def_id: DefId, tcx: TyCtxt<'a, 'gcx, 'tcx>) ->\n+        impl Iterator<Item=Ty<'tcx>> + 'a\n+    {\n+        self.upvar_tys(def_id, tcx).chain(iter::once(tcx.types.u32))\n+    }\n+\n     /// This is the types of all the fields stored in a generator.\n     /// It includes the upvars, state types and the state discriminant which is u32.\n     pub fn field_tys(self, def_id: DefId, tcx: TyCtxt<'a, 'gcx, 'tcx>) ->\n         impl Iterator<Item=Ty<'tcx>> + 'a\n     {\n-        let upvars = self.upvar_tys(def_id, tcx);\n-        let state = self.state_tys(def_id, tcx);\n-        upvars.chain(iter::once(tcx.types.u32)).chain(state)\n+        self.pre_transforms_tys(def_id, tcx).chain(self.state_tys(def_id, tcx))\n     }\n }\n "}, {"sha": "7fadc4b36e44fe4ab6c5b3abef36d7bd7fa13db1", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=3d292b793ade0c1c9098fb32586033d79f6e9969", "patch": "@@ -746,12 +746,12 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     self.describe_field_from_ty(&tnm.ty, field)\n                 }\n                 ty::TyArray(ty, _) | ty::TySlice(ty) => self.describe_field_from_ty(&ty, field),\n-                ty::TyClosure(closure_def_id, _) => {\n+                ty::TyClosure(def_id, _) | ty::TyGenerator(def_id, _, _) => {\n                     // Convert the def-id into a node-id. node-ids are only valid for\n                     // the local code in the current crate, so this returns an `Option` in case\n                     // the closure comes from another crate. But in that case we wouldn't\n                     // be borrowck'ing it, so we can just unwrap:\n-                    let node_id = self.tcx.hir.as_local_node_id(closure_def_id).unwrap();\n+                    let node_id = self.tcx.hir.as_local_node_id(def_id).unwrap();\n                     let freevar = self.tcx.with_freevars(node_id, |fv| fv[field.index()]);\n \n                     self.tcx.hir.name(freevar.var_id()).to_string()"}, {"sha": "fb2ab43fbbb3ac4e151ed5a1c13402e6f688ae9d", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=3d292b793ade0c1c9098fb32586033d79f6e9969", "patch": "@@ -533,15 +533,17 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n                     }\n                 }\n                 ty::TyGenerator(def_id, substs, _) => {\n-                    // Try upvars first. `field_tys` requires final optimized MIR.\n-                    if let Some(ty) = substs.upvar_tys(def_id, tcx).nth(field.index()) {\n+                    // Try pre-transform fields first (upvars and current state)\n+                    if let Some(ty) = substs.pre_transforms_tys(def_id, tcx).nth(field.index()) {\n                         return Ok(ty);\n                     }\n \n+                    // Then try `field_tys` which contains all the fields, but it\n+                    // requires the final optimized MIR.\n                     return match substs.field_tys(def_id, tcx).nth(field.index()) {\n                         Some(ty) => Ok(ty),\n                         None => Err(FieldAccessError::OutOfRange {\n-                            field_count: substs.field_tys(def_id, tcx).count() + 1,\n+                            field_count: substs.field_tys(def_id, tcx).count(),\n                         }),\n                     };\n                 }\n@@ -1233,13 +1235,16 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 }\n             }\n             AggregateKind::Generator(def_id, substs, _) => {\n-                if let Some(ty) = substs.upvar_tys(def_id, tcx).nth(field_index) {\n+                // Try pre-transform fields first (upvars and current state)\n+                if let Some(ty) = substs.pre_transforms_tys(def_id, tcx).nth(field_index) {\n                     Ok(ty)\n                 } else {\n+                    // Then try `field_tys` which contains all the fields, but it\n+                    // requires the final optimized MIR.\n                     match substs.field_tys(def_id, tcx).nth(field_index) {\n                         Some(ty) => Ok(ty),\n                         None => Err(FieldAccessError::OutOfRange {\n-                            field_count: substs.field_tys(def_id, tcx).count() + 1,\n+                            field_count: substs.field_tys(def_id, tcx).count(),\n                         }),\n                     }\n                 }"}, {"sha": "244e8b5ccd7e4b4d45e0259ccd730f9951d66768", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=3d292b793ade0c1c9098fb32586033d79f6e9969", "patch": "@@ -0,0 +1,118 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub use super::*;\n+\n+use rustc::mir::*;\n+use rustc::mir::visit::Visitor;\n+use dataflow::BitDenotation;\n+\n+/// This calculates if any part of a MIR local could have previously been borrowed.\n+/// This means that once a local has been borrowed, its bit will always be set\n+/// from that point and onwards, even if the borrow ends. You could also think of this\n+/// as computing the lifetimes of infinite borrows.\n+/// This is used to compute which locals are live during a yield expression for\n+/// immovable generators.\n+#[derive(Copy, Clone)]\n+pub struct HaveBeenBorrowedLocals<'a, 'tcx: 'a> {\n+    mir: &'a Mir<'tcx>,\n+}\n+\n+impl<'a, 'tcx: 'a> HaveBeenBorrowedLocals<'a, 'tcx> {\n+    pub fn new(mir: &'a Mir<'tcx>)\n+               -> Self {\n+        HaveBeenBorrowedLocals { mir: mir }\n+    }\n+\n+    pub fn mir(&self) -> &Mir<'tcx> {\n+        self.mir\n+    }\n+}\n+\n+impl<'a, 'tcx> BitDenotation for HaveBeenBorrowedLocals<'a, 'tcx> {\n+    type Idx = Local;\n+    fn name() -> &'static str { \"has_been_borrowed_locals\" }\n+    fn bits_per_block(&self) -> usize {\n+        self.mir.local_decls.len()\n+    }\n+\n+    fn start_block_effect(&self, _sets: &mut IdxSet<Local>) {\n+        // Nothing is borrowed on function entry\n+    }\n+\n+    fn statement_effect(&self,\n+                        sets: &mut BlockSets<Local>,\n+                        loc: Location) {\n+        BorrowedLocalsVisitor {\n+            sets,\n+        }.visit_statement(loc.block, &self.mir[loc.block].statements[loc.statement_index], loc);\n+    }\n+\n+    fn terminator_effect(&self,\n+                         sets: &mut BlockSets<Local>,\n+                         loc: Location) {\n+        BorrowedLocalsVisitor {\n+            sets,\n+        }.visit_terminator(loc.block, self.mir[loc.block].terminator(), loc);\n+    }\n+\n+    fn propagate_call_return(&self,\n+                             _in_out: &mut IdxSet<Local>,\n+                             _call_bb: mir::BasicBlock,\n+                             _dest_bb: mir::BasicBlock,\n+                             _dest_place: &mir::Place) {\n+        // Nothing to do when a call returns successfully\n+    }\n+}\n+\n+impl<'a, 'tcx> BitwiseOperator for HaveBeenBorrowedLocals<'a, 'tcx> {\n+    #[inline]\n+    fn join(&self, pred1: usize, pred2: usize) -> usize {\n+        pred1 | pred2 // \"maybe\" means we union effects of both preds\n+    }\n+}\n+\n+impl<'a, 'tcx> InitialFlow for HaveBeenBorrowedLocals<'a, 'tcx> {\n+    #[inline]\n+    fn bottom_value() -> bool {\n+        false // bottom = unborrowed\n+    }\n+}\n+\n+struct BorrowedLocalsVisitor<'b, 'c: 'b> {\n+    sets: &'b mut BlockSets<'c, Local>,\n+}\n+\n+fn find_local<'tcx>(place: &Place<'tcx>) -> Option<Local> {\n+    match *place {\n+        Place::Local(l) => Some(l),\n+        Place::Static(..) => None,\n+        Place::Projection(ref proj) => {\n+            match proj.elem {\n+                ProjectionElem::Deref => None,\n+                _ => find_local(&proj.base)\n+            }\n+        }\n+    }\n+}\n+\n+impl<'tcx, 'b, 'c> Visitor<'tcx> for BorrowedLocalsVisitor<'b, 'c> {\n+    fn visit_rvalue(&mut self,\n+                    rvalue: &Rvalue<'tcx>,\n+                    location: Location) {\n+        if let Rvalue::Ref(_, _, ref place) = *rvalue {\n+            if let Some(local) = find_local(place) {\n+                self.sets.gen(&local);\n+            }\n+        }\n+\n+        self.super_rvalue(rvalue, location)\n+    }\n+}"}, {"sha": "c5f5492cd2c2c20cefc36c6c75e1ab5f6cbebee1", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=3d292b793ade0c1c9098fb32586033d79f6e9969", "patch": "@@ -33,6 +33,10 @@ mod storage_liveness;\n \n pub use self::storage_liveness::*;\n \n+mod borrowed_locals;\n+\n+pub use self::borrowed_locals::*;\n+\n #[allow(dead_code)]\n pub(super) mod borrows;\n "}, {"sha": "291c22b5e1ed0f0aa32081534a97ff24f396cd21", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=3d292b793ade0c1c9098fb32586033d79f6e9969", "patch": "@@ -30,6 +30,7 @@ pub use self::impls::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n pub use self::impls::{DefinitelyInitializedPlaces, MovingOutStatements};\n pub use self::impls::EverInitializedPlaces;\n pub use self::impls::borrows::{Borrows, BorrowData};\n+pub use self::impls::HaveBeenBorrowedLocals;\n pub(crate) use self::impls::borrows::{ActiveBorrows, Reservations, ReserveOrActivateIndex};\n pub use self::at_location::{FlowAtLocation, FlowsAtLocation};\n pub(crate) use self::drop_flag_effects::*;"}, {"sha": "812665f5fa49804d3b2648206e50496bce011977", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 51, "deletions": 17, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=3d292b793ade0c1c9098fb32586033d79f6e9969", "patch": "@@ -78,7 +78,8 @@ use std::mem;\n use transform::{MirPass, MirSource};\n use transform::simplify;\n use transform::no_landing_pads::no_landing_pads;\n-use dataflow::{do_dataflow, DebugFormatted, MaybeStorageLive, state_for_location};\n+use dataflow::{do_dataflow, DebugFormatted, state_for_location};\n+use dataflow::{MaybeStorageLive, HaveBeenBorrowedLocals};\n \n pub struct StateTransform;\n \n@@ -369,17 +370,33 @@ fn locals_live_across_suspend_points<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                 HashMap<BasicBlock, liveness::LocalSet>) {\n     let dead_unwinds = IdxSetBuf::new_empty(mir.basic_blocks().len());\n     let node_id = tcx.hir.as_local_node_id(source.def_id).unwrap();\n-    let analysis = MaybeStorageLive::new(mir);\n+\n+    // Calculate when MIR locals have live storage. This gives us an upper bound of their\n+    // lifetimes.\n+    let storage_live_analysis = MaybeStorageLive::new(mir);\n     let storage_live =\n-        do_dataflow(tcx, mir, node_id, &[], &dead_unwinds, analysis,\n+        do_dataflow(tcx, mir, node_id, &[], &dead_unwinds, storage_live_analysis,\n                     |bd, p| DebugFormatted::new(&bd.mir().local_decls[p]));\n \n+    // Find the MIR locals which do not use StorageLive/StorageDead statements.\n+    // The storage of these locals are always live.\n     let mut ignored = StorageIgnored(IdxSetBuf::new_filled(mir.local_decls.len()));\n     ignored.visit_mir(mir);\n \n-    let mut borrowed_locals = BorrowedLocals(IdxSetBuf::new_empty(mir.local_decls.len()));\n-    borrowed_locals.visit_mir(mir);\n+    // Calculate the MIR locals which have been previously\n+    // borrowed (even if they are still active).\n+    // This is only used for immovable generators.\n+    let borrowed_locals = if !movable {\n+        let analysis = HaveBeenBorrowedLocals::new(mir);\n+        let result =\n+            do_dataflow(tcx, mir, node_id, &[], &dead_unwinds, analysis,\n+                        |bd, p| DebugFormatted::new(&bd.mir().local_decls[p]));\n+        Some((analysis, result))\n+    } else {\n+        None\n+    };\n \n+    // Calculate the liveness of MIR locals ignoring borrows.\n     let mut set = liveness::LocalSet::new_empty(mir.local_decls.len());\n     let mut liveness = liveness::liveness_of_locals(mir, LivenessMode {\n         include_regular_use: true,\n@@ -396,24 +413,41 @@ fn locals_live_across_suspend_points<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 statement_index: data.statements.len(),\n             };\n \n-            let storage_liveness = state_for_location(loc, &analysis, &storage_live, mir);\n+            if let Some((ref analysis, ref result)) = borrowed_locals {\n+                let borrowed_locals = state_for_location(loc,\n+                                                         analysis,\n+                                                         result,\n+                                                         mir);\n+                // The `liveness` variable contains the liveness of MIR locals ignoring borrows.\n+                // This is correct for movable generators since borrows cannot live across\n+                // suspension points. However for immovable generators we need to account for\n+                // borrows, so we conseratively assume that all borrowed locals live forever.\n+                // To do this we just union our `liveness` result with `borrowed_locals`, which\n+                // contains all the locals which has been borrowed before this suspension point.\n+                // If a borrow is converted to a raw reference, we must also assume that it lives\n+                // forever. Note that the final liveness is still bounded by the storage liveness\n+                // of the local, which happens using the `intersect` operation below.\n+                liveness.outs[block].union(&borrowed_locals);\n+            }\n+\n+            let mut storage_liveness = state_for_location(loc,\n+                                                          &storage_live_analysis,\n+                                                          &storage_live,\n+                                                          mir);\n \n+            // Store the storage liveness for later use so we can restore the state\n+            // after a suspension point\n             storage_liveness_map.insert(block, storage_liveness.clone());\n \n-            let mut live_locals = storage_liveness;\n-\n             // Mark locals without storage statements as always having live storage\n-            live_locals.union(&ignored.0);\n+            storage_liveness.union(&ignored.0);\n \n-            if !movable {\n-                // For immovable generators we consider borrowed locals to always be live.\n-                // This effectively makes those locals use just the storage liveness.\n-                liveness.outs[block].union(&borrowed_locals.0);\n-            }\n+            // Locals live are live at this point only if they are used across\n+            // suspension points (the `liveness` variable)\n+            // and their storage is live (the `storage_liveness` variable)\n+            storage_liveness.intersect(&liveness.outs[block]);\n \n-            // Locals live are live at this point only if they are used across suspension points\n-            // and their storage is live\n-            live_locals.intersect(&liveness.outs[block]);\n+            let live_locals = storage_liveness;\n \n             // Add the locals life at this suspension point to the set of locals which live across\n             // any suspension points"}, {"sha": "2e45e3b1f3521db331ef2d9fc537bbd6e0dba346", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=3d292b793ade0c1c9098fb32586033d79f6e9969", "patch": "@@ -150,15 +150,15 @@ impl<'a, 'gcx, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'gcx, 'tcx> {\n     }\n \n     fn visit_pat(&mut self, pat: &'tcx Pat) {\n+        intravisit::walk_pat(self, pat);\n+\n+        self.expr_count += 1;\n+\n         if let PatKind::Binding(..) = pat.node {\n             let scope = self.region_scope_tree.var_scope(pat.hir_id.local_id);\n             let ty = self.fcx.tables.borrow().pat_ty(pat);\n             self.record(ty, Some(scope), None, pat.span);\n         }\n-\n-        self.expr_count += 1;\n-\n-        intravisit::walk_pat(self, pat);\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx Expr) {"}, {"sha": "bc6d1d26289d418aa9641798e71d8c42f4f306af", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3d292b793ade0c1c9098fb32586033d79f6e9969", "patch": "@@ -1015,7 +1015,9 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n     let span = body.value.span;\n \n     if body.is_generator && can_be_generator.is_some() {\n-        fcx.yield_ty = Some(fcx.next_ty_var(TypeVariableOrigin::TypeInference(span)));\n+        let yield_ty = fcx.next_ty_var(TypeVariableOrigin::TypeInference(span));\n+        fcx.require_type_is_sized(yield_ty, span, traits::SizedYieldType);\n+        fcx.yield_ty = Some(yield_ty);\n     }\n \n     GatherLocalsVisitor { fcx: &fcx, }.visit_body(body);"}, {"sha": "7fbe781e9a1f6c74b0071394677b3b5d6df3f09c", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=3d292b793ade0c1c9098fb32586033d79f6e9969", "patch": "@@ -112,6 +112,7 @@ fn ident_can_begin_expr(ident: ast::Ident) -> bool {\n         keywords::Unsafe.name(),\n         keywords::While.name(),\n         keywords::Yield.name(),\n+        keywords::Static.name(),\n     ].contains(&ident.name)\n }\n "}, {"sha": "2314533a6815318b685df6fbc7e8ef5929616716", "filename": "src/test/run-pass/generator/too-live-local-in-immovable-gen.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Ftest%2Frun-pass%2Fgenerator%2Ftoo-live-local-in-immovable-gen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Ftest%2Frun-pass%2Fgenerator%2Ftoo-live-local-in-immovable-gen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Ftoo-live-local-in-immovable-gen.rs?ref=3d292b793ade0c1c9098fb32586033d79f6e9969", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generators)]\n+\n+fn main() {\n+    unsafe {\n+        static move || {\n+            // Tests that the generator transformation finds out that `a` is not live\n+            // during the yield expression. Type checking will also compute liveness\n+            // and it should also find out that `a` is not live.\n+            // The compiler will panic if the generator transformation finds that\n+            // `a` is live and type checking finds it dead.\n+            let a = {\n+                yield ();\n+                4i32\n+            };\n+            &a;\n+        };\n+    }\n+}"}, {"sha": "0f7d2e540d80a8b6e5f3b5aa063f45f999509e7e", "filename": "src/test/ui/generator/generator-with-nll.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.stderr?ref=3d292b793ade0c1c9098fb32586033d79f6e9969", "patch": "@@ -1,12 +1,3 @@\n-error[E0626]: borrow may still be in use when generator yields (Mir)\n-  --> $DIR/generator-with-nll.rs:20:17\n-   |\n-20 |         let b = &mut true; //~ ERROR borrow may still be in use when generator yields (Ast)\n-   |                 ^^^^^^^^^\n-21 |         //~^ borrow may still be in use when generator yields (Mir)\n-22 |         yield ();\n-   |         -------- possible yield occurs here\n-\n error[E0626]: borrow may still be in use when generator yields (Ast)\n   --> $DIR/generator-with-nll.rs:19:23\n    |\n@@ -25,5 +16,14 @@ error[E0626]: borrow may still be in use when generator yields (Ast)\n 22 |         yield ();\n    |         -------- possible yield occurs here\n \n+error[E0626]: borrow may still be in use when generator yields (Mir)\n+  --> $DIR/generator-with-nll.rs:20:17\n+   |\n+20 |         let b = &mut true; //~ ERROR borrow may still be in use when generator yields (Ast)\n+   |                 ^^^^^^^^^\n+21 |         //~^ borrow may still be in use when generator yields (Mir)\n+22 |         yield ();\n+   |         -------- possible yield occurs here\n+\n error: aborting due to 3 previous errors\n "}, {"sha": "557a5e62f7e46229e61c2d78e7c6f4eade1b777c", "filename": "src/test/ui/generator/pattern-borrow.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Ftest%2Fui%2Fgenerator%2Fpattern-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Ftest%2Fui%2Fgenerator%2Fpattern-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpattern-borrow.rs?ref=3d292b793ade0c1c9098fb32586033d79f6e9969", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generators)]\n+\n+enum Test { A(i32), B, }\n+\n+fn main() { }\n+\n+fn fun(test: Test) {\n+    move || {\n+        if let Test::A(ref _a) = test { //~ ERROR borrow may still be in use when generator yields\n+            yield ();\n+        }\n+    };\n+}"}, {"sha": "6b39b272d0e428adc0a28ab2ae2a624d96a96ce1", "filename": "src/test/ui/generator/pattern-borrow.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Ftest%2Fui%2Fgenerator%2Fpattern-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Ftest%2Fui%2Fgenerator%2Fpattern-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpattern-borrow.stderr?ref=3d292b793ade0c1c9098fb32586033d79f6e9969", "patch": "@@ -0,0 +1,10 @@\n+error[E0626]: borrow may still be in use when generator yields\n+  --> $DIR/pattern-borrow.rs:19:24\n+   |\n+19 |         if let Test::A(ref _a) = test { //~ ERROR borrow may still be in use when generator yields\n+   |                        ^^^^^^\n+20 |             yield ();\n+   |             -------- possible yield occurs here\n+\n+error: aborting due to previous error\n+"}, {"sha": "f38ebf8b9463669abdf23d6d63348ef5ee77ea06", "filename": "src/test/ui/generator/sized-yield.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs?ref=3d292b793ade0c1c9098fb32586033d79f6e9969", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::Generator;\n+\n+fn main() {\n+   let s = String::from(\"foo\");\n+   let mut gen = move || { //~ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n+       yield s[..];\n+   };\n+   gen.resume(); //~ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n+}"}, {"sha": "7adb2cc5598dc15efaa5590e34b6fe50700e973c", "filename": "src/test/ui/generator/sized-yield.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr?ref=3d292b793ade0c1c9098fb32586033d79f6e9969", "patch": "@@ -0,0 +1,22 @@\n+error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n+  --> $DIR/sized-yield.rs:17:26\n+   |\n+17 |      let mut gen = move || { //~ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n+   |  __________________________^\n+18 | |        yield s[..];\n+19 | |    };\n+   | |____^ `str` does not have a constant size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `str`\n+   = note: the yield type of a generator must have a statically known size\n+\n+error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n+  --> $DIR/sized-yield.rs:20:8\n+   |\n+20 |    gen.resume(); //~ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n+   |        ^^^^^^ `str` does not have a constant size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `str`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "114fe8ffcab0e02d6d3d0282c84b63d3b690eac1", "filename": "src/test/ui/generator/yield-while-local-borrowed.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d292b793ade0c1c9098fb32586033d79f6e9969/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.stderr?ref=3d292b793ade0c1c9098fb32586033d79f6e9969", "patch": "@@ -1,12 +1,3 @@\n-error[E0626]: borrow may still be in use when generator yields (Mir)\n-  --> $DIR/yield-while-local-borrowed.rs:24:17\n-   |\n-24 |         let a = &mut 3;\n-   |                 ^^^^^^\n-...\n-27 |         yield();\n-   |         ------- possible yield occurs here\n-\n error[E0626]: borrow may still be in use when generator yields (Ast)\n   --> $DIR/yield-while-local-borrowed.rs:24:22\n    |\n@@ -25,6 +16,15 @@ error[E0626]: borrow may still be in use when generator yields (Ast)\n 55 |             yield();\n    |             ------- possible yield occurs here\n \n+error[E0626]: borrow may still be in use when generator yields (Mir)\n+  --> $DIR/yield-while-local-borrowed.rs:24:17\n+   |\n+24 |         let a = &mut 3;\n+   |                 ^^^^^^\n+...\n+27 |         yield();\n+   |         ------- possible yield occurs here\n+\n error[E0626]: borrow may still be in use when generator yields (Mir)\n   --> $DIR/yield-while-local-borrowed.rs:52:21\n    |"}]}