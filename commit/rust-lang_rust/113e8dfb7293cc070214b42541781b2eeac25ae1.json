{"sha": "113e8dfb7293cc070214b42541781b2eeac25ae1", "node_id": "C_kwDOAAsO6NoAKDExM2U4ZGZiNzI5M2NjMDcwMjE0YjQyNTQxNzgxYjJlZWFjMjVhZTE", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2022-10-22T10:48:20Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2022-10-24T09:02:31Z"}, "message": "Port `dead_code` lints to be translatable.", "tree": {"sha": "c12cf2c41c2492e556f72584a00e492783cdc5b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c12cf2c41c2492e556f72584a00e492783cdc5b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/113e8dfb7293cc070214b42541781b2eeac25ae1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/113e8dfb7293cc070214b42541781b2eeac25ae1", "html_url": "https://github.com/rust-lang/rust/commit/113e8dfb7293cc070214b42541781b2eeac25ae1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/113e8dfb7293cc070214b42541781b2eeac25ae1/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56f132565eb31eeb9ec7e1800a6ab2ca354e710e", "url": "https://api.github.com/repos/rust-lang/rust/commits/56f132565eb31eeb9ec7e1800a6ab2ca354e710e", "html_url": "https://github.com/rust-lang/rust/commit/56f132565eb31eeb9ec7e1800a6ab2ca354e710e"}], "stats": {"total": 335, "additions": 236, "deletions": 99}, "files": [{"sha": "a5b002fa3579e053513eed81a4bae19892f75e3b", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/113e8dfb7293cc070214b42541781b2eeac25ae1/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/113e8dfb7293cc070214b42541781b2eeac25ae1/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=113e8dfb7293cc070214b42541781b2eeac25ae1", "patch": "@@ -671,3 +671,37 @@ passes_missing_const_err =\n     attributes `#[rustc_const_unstable]` and `#[rustc_const_stable]` require the function or method to be `const`\n     .help = make the function or method const\n     .label = attribute specified here\n+\n+passes_dead_codes =\n+    { $multiple ->\n+      *[true] multiple {$descr}s are\n+       [false] { $num ->\n+         [one] {$descr} {$name_list} is\n+        *[other] {$descr}s {$name_list} are\n+       }\n+    } never {$participle}\n+\n+passes_change_fields_to_be_of_unit_type =\n+    consider changing the { $num ->\n+      [one] field\n+     *[other] fields\n+    } to be of unit type to suppress this warning\n+    while preserving the field numbering, or remove the { $num ->\n+      [one] field\n+     *[other] fields\n+    }\n+\n+passes_parent_info =\n+    {$num ->\n+      [one] {$descr}\n+     *[other] {$descr}s\n+    } in this {$parent_descr}\n+\n+passes_ignored_derived_impls =\n+    `{$name}` has {$trait_list_len ->\n+      [one] a derived impl\n+     *[other] derived impls\n+    } for the {$trait_list_len ->\n+      [one] trait {$trait_list}, but this is\n+     *[other] traits {$trait_list}, but these are\n+    } intentionally ignored during dead code analysis"}, {"sha": "f6fe9192b45ca1565baad38de990f5cae1f07f83", "filename": "compiler/rustc_errors/src/diagnostic_impls.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/113e8dfb7293cc070214b42541781b2eeac25ae1/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113e8dfb7293cc070214b42541781b2eeac25ae1/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs?ref=113e8dfb7293cc070214b42541781b2eeac25ae1", "patch": "@@ -11,6 +11,7 @@ use rustc_target::abi::TargetDataLayoutErrors;\n use rustc_target::spec::{PanicStrategy, SplitDebuginfo, StackProtector, TargetTriple};\n use std::borrow::Cow;\n use std::fmt;\n+use std::fmt::Write;\n use std::num::ParseIntError;\n use std::path::{Path, PathBuf};\n \n@@ -170,6 +171,37 @@ impl IntoDiagnosticArg for Level {\n     }\n }\n \n+#[derive(Clone)]\n+pub struct DiagnosticSymbolList(Vec<Symbol>);\n+\n+impl From<Vec<Symbol>> for DiagnosticSymbolList {\n+    fn from(v: Vec<Symbol>) -> Self {\n+        DiagnosticSymbolList(v)\n+    }\n+}\n+\n+impl IntoDiagnosticArg for DiagnosticSymbolList {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        // FIXME: replace the logic here with a real list formatter\n+        let symbols = match &self.0[..] {\n+            [symbol] => format!(\"`{symbol}`\"),\n+            [symbol, last] => {\n+                format!(\"`{symbol}` and `{last}`\",)\n+            }\n+            [symbols @ .., last] => {\n+                let mut result = String::new();\n+                for symbol in symbols {\n+                    write!(result, \"`{symbol}`, \").unwrap();\n+                }\n+                write!(result, \"and `{last}`\").unwrap();\n+                result\n+            }\n+            [] => unreachable!(),\n+        };\n+        DiagnosticArgValue::Str(Cow::Owned(symbols))\n+    }\n+}\n+\n impl IntoDiagnostic<'_, !> for TargetDataLayoutErrors<'_> {\n     fn into_diagnostic(self, handler: &Handler) -> DiagnosticBuilder<'_, !> {\n         let mut diag;"}, {"sha": "2c8a70981bc72b3a391a2a41d7a83e9e73836e94", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/113e8dfb7293cc070214b42541781b2eeac25ae1/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113e8dfb7293cc070214b42541781b2eeac25ae1/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=113e8dfb7293cc070214b42541781b2eeac25ae1", "patch": "@@ -376,7 +376,7 @@ pub use diagnostic::{\n     DiagnosticStyledString, IntoDiagnosticArg, SubDiagnostic,\n };\n pub use diagnostic_builder::{DiagnosticBuilder, EmissionGuarantee, Noted};\n-pub use diagnostic_impls::DiagnosticArgFromDisplay;\n+pub use diagnostic_impls::{DiagnosticArgFromDisplay, DiagnosticSymbolList};\n use std::backtrace::Backtrace;\n \n /// A handler deals with errors and other compiler output."}, {"sha": "9157c8279a5c280e8889283b18ca9c0f90d14280", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 84, "deletions": 91, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/113e8dfb7293cc070214b42541781b2eeac25ae1/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113e8dfb7293cc070214b42541781b2eeac25ae1/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=113e8dfb7293cc070214b42541781b2eeac25ae1", "patch": "@@ -4,7 +4,7 @@\n \n use itertools::Itertools;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{pluralize, Applicability, MultiSpan};\n+use rustc_errors::MultiSpan;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -18,7 +18,10 @@ use rustc_session::lint;\n use rustc_span::symbol::{sym, Symbol};\n use std::mem;\n \n-use crate::errors::UselessAssignment;\n+use crate::errors::{\n+    ChangeFieldsToBeOfUnitType, IgnoredDerivedImpls, MultipleDeadCodes, ParentInfo,\n+    UselessAssignment,\n+};\n \n // Any local node that may call something in its body block should be\n // explored. For example, if it's a live Node::Item that is a\n@@ -698,99 +701,89 @@ impl<'tcx> DeadVisitor<'tcx> {\n         parent_item: Option<LocalDefId>,\n         is_positional: bool,\n     ) {\n-        if let Some(&first_id) = dead_codes.first() {\n-            let tcx = self.tcx;\n-            let names: Vec<_> = dead_codes\n-                .iter()\n-                .map(|&def_id| tcx.item_name(def_id.to_def_id()).to_string())\n-                .collect();\n-            let spans: Vec<_> = dead_codes\n-                .iter()\n-                .map(|&def_id| match tcx.def_ident_span(def_id) {\n-                    Some(s) => s.with_ctxt(tcx.def_span(def_id).ctxt()),\n-                    None => tcx.def_span(def_id),\n+        let Some(&first_id) = dead_codes.first() else {\n+            return;\n+        };\n+        let tcx = self.tcx;\n+        let names: Vec<_> =\n+            dead_codes.iter().map(|&def_id| tcx.item_name(def_id.to_def_id())).collect();\n+        let spans: Vec<_> = dead_codes\n+            .iter()\n+            .map(|&def_id| match tcx.def_ident_span(def_id) {\n+                Some(s) => s.with_ctxt(tcx.def_span(def_id).ctxt()),\n+                None => tcx.def_span(def_id),\n+            })\n+            .collect();\n+\n+        let descr = tcx.def_kind(first_id).descr(first_id.to_def_id());\n+        let num = dead_codes.len();\n+        let multiple = num > 6;\n+        let name_list = names.into();\n+\n+        let lint = if is_positional {\n+            lint::builtin::UNUSED_TUPLE_STRUCT_FIELDS\n+        } else {\n+            lint::builtin::DEAD_CODE\n+        };\n+\n+        let parent_info = if let Some(parent_item) = parent_item {\n+            let parent_descr = tcx.def_kind(parent_item).descr(parent_item.to_def_id());\n+            Some(ParentInfo {\n+                num,\n+                descr,\n+                parent_descr,\n+                span: tcx.def_ident_span(parent_item).unwrap(),\n+            })\n+        } else {\n+            None\n+        };\n+\n+        let encl_def_id = parent_item.unwrap_or(first_id);\n+        let ignored_derived_impls =\n+            if let Some(ign_traits) = self.ignored_derived_traits.get(&encl_def_id) {\n+                let trait_list = ign_traits\n+                    .iter()\n+                    .map(|(trait_id, _)| self.tcx.item_name(*trait_id))\n+                    .collect::<Vec<_>>();\n+                let trait_list_len = trait_list.len();\n+                Some(IgnoredDerivedImpls {\n+                    name: self.tcx.item_name(encl_def_id.to_def_id()),\n+                    trait_list: trait_list.into(),\n+                    trait_list_len,\n                 })\n-                .collect();\n-\n-            let descr = tcx.def_kind(first_id).descr(first_id.to_def_id());\n-            let span_len = dead_codes.len();\n-            let names = match &names[..] {\n-                _ if span_len > 6 => String::new(),\n-                [name] => format!(\"`{name}` \"),\n-                [names @ .., last] => {\n-                    format!(\n-                        \"{} and `{last}` \",\n-                        names.iter().map(|name| format!(\"`{name}`\")).join(\", \")\n-                    )\n-                }\n-                [] => unreachable!(),\n+            } else {\n+                None\n             };\n-            let msg = format!(\n-                \"{these}{descr}{s} {names}{are} never {participle}\",\n-                these = if span_len > 6 { \"multiple \" } else { \"\" },\n-                s = pluralize!(span_len),\n-                are = pluralize!(\"is\", span_len),\n-            );\n-\n-            tcx.struct_span_lint_hir(\n-                if is_positional {\n-                    lint::builtin::UNUSED_TUPLE_STRUCT_FIELDS\n-                } else {\n-                    lint::builtin::DEAD_CODE\n-                },\n-                tcx.hir().local_def_id_to_hir_id(first_id),\n-                MultiSpan::from_spans(spans.clone()),\n-                msg,\n-                |err| {\n-                    if is_positional {\n-                        err.multipart_suggestion(\n-                            &format!(\n-                                \"consider changing the field{s} to be of unit type to \\\n-                                      suppress this warning while preserving the field \\\n-                                      numbering, or remove the field{s}\",\n-                                s = pluralize!(span_len)\n-                            ),\n-                            spans.iter().map(|sp| (*sp, \"()\".to_string())).collect(),\n-                            // \"HasPlaceholders\" because applying this fix by itself isn't\n-                            // enough: All constructor calls have to be adjusted as well\n-                            Applicability::HasPlaceholders,\n-                        );\n-                    }\n \n-                    if let Some(parent_item) = parent_item {\n-                        let parent_descr = tcx.def_kind(parent_item).descr(parent_item.to_def_id());\n-                        err.span_label(\n-                            tcx.def_ident_span(parent_item).unwrap(),\n-                            format!(\"{descr}{s} in this {parent_descr}\", s = pluralize!(span_len)),\n-                        );\n-                    }\n+        let diag = if is_positional {\n+            MultipleDeadCodes::UnusedTupleStructFields {\n+                multiple,\n+                num,\n+                descr,\n+                participle,\n+                name_list,\n+                change_fields_suggestion: ChangeFieldsToBeOfUnitType { num, spans: spans.clone() },\n+                parent_info,\n+                ignored_derived_impls,\n+            }\n+        } else {\n+            MultipleDeadCodes::DeadCodes {\n+                multiple,\n+                num,\n+                descr,\n+                participle,\n+                name_list,\n+                parent_info,\n+                ignored_derived_impls,\n+            }\n+        };\n \n-                    let encl_def_id = parent_item.unwrap_or(first_id);\n-                    if let Some(ign_traits) = self.ignored_derived_traits.get(&encl_def_id) {\n-                        let traits_str = ign_traits\n-                            .iter()\n-                            .map(|(trait_id, _)| format!(\"`{}`\", self.tcx.item_name(*trait_id)))\n-                            .collect::<Vec<_>>()\n-                            .join(\" and \");\n-                        let plural_s = pluralize!(ign_traits.len());\n-                        let article = if ign_traits.len() > 1 { \"\" } else { \"a \" };\n-                        let is_are = if ign_traits.len() > 1 { \"these are\" } else { \"this is\" };\n-                        let msg = format!(\n-                            \"`{}` has {}derived impl{} for the trait{} {}, but {} \\\n-                            intentionally ignored during dead code analysis\",\n-                            self.tcx.item_name(encl_def_id.to_def_id()),\n-                            article,\n-                            plural_s,\n-                            plural_s,\n-                            traits_str,\n-                            is_are\n-                        );\n-                        err.note(&msg);\n-                    }\n-                    err\n-                },\n-            );\n-        }\n+        self.tcx.emit_spanned_lint(\n+            lint,\n+            tcx.hir().local_def_id_to_hir_id(first_id),\n+            MultiSpan::from_spans(spans.clone()),\n+            diag,\n+        );\n     }\n \n     fn warn_dead_fields_and_variants("}, {"sha": "d39d7629b287f9e767a5313c2a403708cffadf20", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 79, "deletions": 1, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/113e8dfb7293cc070214b42541781b2eeac25ae1/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113e8dfb7293cc070214b42541781b2eeac25ae1/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=113e8dfb7293cc070214b42541781b2eeac25ae1", "patch": "@@ -4,12 +4,16 @@ use std::{\n };\n \n use rustc_ast::Label;\n-use rustc_errors::{error_code, Applicability, ErrorGuaranteed, IntoDiagnostic, MultiSpan};\n+use rustc_errors::{\n+    error_code, Applicability, DiagnosticSymbolList, ErrorGuaranteed, IntoDiagnostic, MultiSpan,\n+};\n use rustc_hir::{self as hir, ExprKind, Target};\n use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n use rustc_middle::ty::{MainDefinition, Ty};\n use rustc_span::{Span, Symbol, DUMMY_SP};\n \n+use rustc_errors::{pluralize, AddToDiagnostic, Diagnostic, SubdiagnosticMessage};\n+\n use crate::lang_items::Duplicate;\n \n #[derive(LintDiagnostic)]\n@@ -1449,3 +1453,77 @@ pub struct MissingConstErr {\n     #[label]\n     pub const_span: Span,\n }\n+\n+#[derive(LintDiagnostic)]\n+pub enum MultipleDeadCodes<'tcx> {\n+    #[diag(passes_dead_codes)]\n+    DeadCodes {\n+        multiple: bool,\n+        num: usize,\n+        descr: &'tcx str,\n+        participle: &'tcx str,\n+        name_list: DiagnosticSymbolList,\n+        #[subdiagnostic]\n+        parent_info: Option<ParentInfo<'tcx>>,\n+        #[subdiagnostic]\n+        ignored_derived_impls: Option<IgnoredDerivedImpls>,\n+    },\n+    #[diag(passes_dead_codes)]\n+    UnusedTupleStructFields {\n+        multiple: bool,\n+        num: usize,\n+        descr: &'tcx str,\n+        participle: &'tcx str,\n+        name_list: DiagnosticSymbolList,\n+        #[subdiagnostic]\n+        change_fields_suggestion: ChangeFieldsToBeOfUnitType,\n+        #[subdiagnostic]\n+        parent_info: Option<ParentInfo<'tcx>>,\n+        #[subdiagnostic]\n+        ignored_derived_impls: Option<IgnoredDerivedImpls>,\n+    },\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[label(passes_parent_info)]\n+pub struct ParentInfo<'tcx> {\n+    pub num: usize,\n+    pub descr: &'tcx str,\n+    pub parent_descr: &'tcx str,\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[note(passes_ignored_derived_impls)]\n+pub struct IgnoredDerivedImpls {\n+    pub name: Symbol,\n+    pub trait_list: DiagnosticSymbolList,\n+    pub trait_list_len: usize,\n+}\n+\n+pub struct ChangeFieldsToBeOfUnitType {\n+    pub num: usize,\n+    pub spans: Vec<Span>,\n+}\n+\n+// FIXME: Replace this impl with a derive.\n+impl AddToDiagnostic for ChangeFieldsToBeOfUnitType {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n+    {\n+        diag.multipart_suggestion(\n+            &format!(\n+                \"consider changing the field{s} to be of unit type to \\\n+                          suppress this warning while preserving the field \\\n+                          numbering, or remove the field{s}\",\n+                s = pluralize!(self.num)\n+            ),\n+            self.spans.iter().map(|sp| (*sp, \"()\".to_string())).collect(),\n+            // \"HasPlaceholders\" because applying this fix by itself isn't\n+            // enough: All constructor calls have to be adjusted as well\n+            Applicability::HasPlaceholders,\n+        );\n+    }\n+}"}, {"sha": "6ab1fb7b039bd6ec63c06fb4d12b478275296355", "filename": "src/test/ui/derives/clone-debug-dead-code-in-the-same-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/113e8dfb7293cc070214b42541781b2eeac25ae1/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113e8dfb7293cc070214b42541781b2eeac25ae1/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.rs?ref=113e8dfb7293cc070214b42541781b2eeac25ae1", "patch": "@@ -3,7 +3,7 @@\n #[derive(Debug)]\n pub struct Whatever {\n     pub field0: (),\n-    field1: (), //~ ERROR fields `field1`, `field2`, `field3` and `field4` are never read\n+    field1: (), //~ ERROR fields `field1`, `field2`, `field3`, and `field4` are never read\n     field2: (),\n     field3: (),\n     field4: (),"}, {"sha": "7f4f78cebc9189d72d6c168ad6ab763e7c1a9fea", "filename": "src/test/ui/derives/clone-debug-dead-code-in-the-same-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/113e8dfb7293cc070214b42541781b2eeac25ae1/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/113e8dfb7293cc070214b42541781b2eeac25ae1/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code-in-the-same-struct.stderr?ref=113e8dfb7293cc070214b42541781b2eeac25ae1", "patch": "@@ -1,4 +1,4 @@\n-error: fields `field1`, `field2`, `field3` and `field4` are never read\n+error: fields `field1`, `field2`, `field3`, and `field4` are never read\n   --> $DIR/clone-debug-dead-code-in-the-same-struct.rs:6:5\n    |\n LL | pub struct Whatever {"}, {"sha": "2003e1e293a58c18a31b372068690631a14f0110", "filename": "src/test/ui/lint/dead-code/multiple-dead-codes-in-the-same-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/113e8dfb7293cc070214b42541781b2eeac25ae1/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fmultiple-dead-codes-in-the-same-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113e8dfb7293cc070214b42541781b2eeac25ae1/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fmultiple-dead-codes-in-the-same-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fmultiple-dead-codes-in-the-same-struct.rs?ref=113e8dfb7293cc070214b42541781b2eeac25ae1", "patch": "@@ -7,7 +7,7 @@ struct Bar {\n     b: usize, //~ ERROR field `b` is never read\n     #[deny(dead_code)]\n     c: usize, //~ ERROR fields `c` and `e` are never read\n-    d: usize, //~ WARN fields `d`, `f` and `g` are never read\n+    d: usize, //~ WARN fields `d`, `f`, and `g` are never read\n     #[deny(dead_code)]\n     e: usize,\n     f: usize,"}, {"sha": "0e5c78a7167975dc89aad27ace64ecdc41e2726a", "filename": "src/test/ui/lint/dead-code/multiple-dead-codes-in-the-same-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/113e8dfb7293cc070214b42541781b2eeac25ae1/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fmultiple-dead-codes-in-the-same-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/113e8dfb7293cc070214b42541781b2eeac25ae1/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fmultiple-dead-codes-in-the-same-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fmultiple-dead-codes-in-the-same-struct.stderr?ref=113e8dfb7293cc070214b42541781b2eeac25ae1", "patch": "@@ -1,4 +1,4 @@\n-warning: fields `d`, `f` and `g` are never read\n+warning: fields `d`, `f`, and `g` are never read\n   --> $DIR/multiple-dead-codes-in-the-same-struct.rs:10:5\n    |\n LL | struct Bar {"}, {"sha": "14fb30be949dc2b45ca98d49790b0a34e79919dd", "filename": "src/test/ui/lint/dead-code/tuple-struct-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/113e8dfb7293cc070214b42541781b2eeac25ae1/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftuple-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113e8dfb7293cc070214b42541781b2eeac25ae1/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftuple-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftuple-struct-field.rs?ref=113e8dfb7293cc070214b42541781b2eeac25ae1", "patch": "@@ -11,7 +11,7 @@ struct SingleUnused(i32, [u8; LEN], String);\n //~| HELP: consider changing the field to be of unit type\n \n struct MultipleUnused(i32, f32, String, u8);\n-//~^ ERROR: fields `0`, `1`, `2` and `3` are never read\n+//~^ ERROR: fields `0`, `1`, `2`, and `3` are never read\n //~| NOTE: fields in this struct\n //~| HELP: consider changing the fields to be of unit type\n "}, {"sha": "b8ad5cbe4e9779d11e2fba8cecd43f27f4c86dcd", "filename": "src/test/ui/lint/dead-code/tuple-struct-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/113e8dfb7293cc070214b42541781b2eeac25ae1/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftuple-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/113e8dfb7293cc070214b42541781b2eeac25ae1/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftuple-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Ftuple-struct-field.stderr?ref=113e8dfb7293cc070214b42541781b2eeac25ae1", "patch": "@@ -16,7 +16,7 @@ help: consider changing the field to be of unit type to suppress this warning wh\n LL | struct SingleUnused(i32, (), String);\n    |                          ~~\n \n-error: fields `0`, `1`, `2` and `3` are never read\n+error: fields `0`, `1`, `2`, and `3` are never read\n   --> $DIR/tuple-struct-field.rs:13:23\n    |\n LL | struct MultipleUnused(i32, f32, String, u8);"}]}