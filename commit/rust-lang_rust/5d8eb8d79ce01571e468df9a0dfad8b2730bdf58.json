{"sha": "5d8eb8d79ce01571e468df9a0dfad8b2730bdf58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkOGViOGQ3OWNlMDE1NzFlNDY4ZGY5YTBkZmFkOGIyNzMwYmRmNTg=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2021-08-08T01:24:14Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-08-08T18:58:10Z"}, "message": "fix: don't drop drop generic args on assoc ty constraints", "tree": {"sha": "ad1f8b65796c44cd428c8d68910048ec0787cbe4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad1f8b65796c44cd428c8d68910048ec0787cbe4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d8eb8d79ce01571e468df9a0dfad8b2730bdf58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d8eb8d79ce01571e468df9a0dfad8b2730bdf58", "html_url": "https://github.com/rust-lang/rust/commit/5d8eb8d79ce01571e468df9a0dfad8b2730bdf58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d8eb8d79ce01571e468df9a0dfad8b2730bdf58/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fefb5427a2fb28459f91a776948fca0ab0f2d11c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fefb5427a2fb28459f91a776948fca0ab0f2d11c", "html_url": "https://github.com/rust-lang/rust/commit/fefb5427a2fb28459f91a776948fca0ab0f2d11c"}], "stats": {"total": 131, "additions": 75, "deletions": 56}, "files": [{"sha": "9a0d31e51dfc4c76dd5068fff65f804f159c20bb", "filename": "src/types.rs", "status": "modified", "additions": 67, "deletions": 56, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/5d8eb8d79ce01571e468df9a0dfad8b2730bdf58/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d8eb8d79ce01571e468df9a0dfad8b2730bdf58/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=5d8eb8d79ce01571e468df9a0dfad8b2730bdf58", "patch": "@@ -174,31 +174,38 @@ impl<'a> Rewrite for SegmentParam<'a> {\n             SegmentParam::Const(const_) => const_.rewrite(context, shape),\n             SegmentParam::LifeTime(lt) => lt.rewrite(context, shape),\n             SegmentParam::Type(ty) => ty.rewrite(context, shape),\n-            SegmentParam::Binding(assoc_ty_constraint) => {\n-                let mut result = match assoc_ty_constraint.kind {\n-                    ast::AssocTyConstraintKind::Bound { .. } => {\n-                        format!(\"{}: \", rewrite_ident(context, assoc_ty_constraint.ident))\n-                    }\n-                    ast::AssocTyConstraintKind::Equality { .. } => {\n-                        match context.config.type_punctuation_density() {\n-                            TypeDensity::Wide => {\n-                                format!(\"{} = \", rewrite_ident(context, assoc_ty_constraint.ident))\n-                            }\n-                            TypeDensity::Compressed => {\n-                                format!(\"{}=\", rewrite_ident(context, assoc_ty_constraint.ident))\n-                            }\n-                        }\n-                    }\n-                };\n+            SegmentParam::Binding(atc) => atc.rewrite(context, shape),\n+        }\n+    }\n+}\n \n-                let budget = shape.width.checked_sub(result.len())?;\n-                let rewrite = assoc_ty_constraint\n-                    .kind\n-                    .rewrite(context, Shape::legacy(budget, shape.indent + result.len()))?;\n-                result.push_str(&rewrite);\n-                Some(result)\n-            }\n+impl Rewrite for ast::AssocTyConstraint {\n+    fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n+        use ast::AssocTyConstraintKind::{Bound, Equality};\n+\n+        let mut result = String::with_capacity(128);\n+        result.push_str(rewrite_ident(context, self.ident));\n+\n+        if let Some(ref gen_args) = self.gen_args {\n+            let budget = shape.width.checked_sub(result.len())?;\n+            let shape = Shape::legacy(budget, shape.indent + result.len());\n+            let gen_str = rewrite_generic_args(gen_args, context, shape, gen_args.span())?;\n+            result.push_str(&gen_str);\n         }\n+\n+        let infix = match (&self.kind, context.config.type_punctuation_density()) {\n+            (Bound { .. }, _) => \": \",\n+            (Equality { .. }, TypeDensity::Wide) => \" = \",\n+            (Equality { .. }, TypeDensity::Compressed) => \"=\",\n+        };\n+        result.push_str(infix);\n+\n+        let budget = shape.width.checked_sub(result.len())?;\n+        let shape = Shape::legacy(budget, shape.indent + result.len());\n+        let rewrite = self.kind.rewrite(context, shape)?;\n+        result.push_str(&rewrite);\n+\n+        Some(result)\n     }\n }\n \n@@ -240,21 +247,9 @@ fn rewrite_segment(\n     };\n \n     if let Some(ref args) = segment.args {\n+        let generics_str = rewrite_generic_args(args, context, shape, mk_sp(*span_lo, span_hi))?;\n         match **args {\n             ast::GenericArgs::AngleBracketed(ref data) if !data.args.is_empty() => {\n-                let param_list = data\n-                    .args\n-                    .iter()\n-                    .map(|x| match x {\n-                        ast::AngleBracketedArg::Arg(generic_arg) => {\n-                            SegmentParam::from_generic_arg(generic_arg)\n-                        }\n-                        ast::AngleBracketedArg::Constraint(constraint) => {\n-                            SegmentParam::Binding(constraint)\n-                        }\n-                    })\n-                    .collect::<Vec<_>>();\n-\n                 // HACK: squeeze out the span between the identifier and the parameters.\n                 // The hack is requried so that we don't remove the separator inside macro calls.\n                 // This does not work in the presence of comment, hoping that people are\n@@ -270,33 +265,14 @@ fn rewrite_segment(\n                 };\n                 result.push_str(separator);\n \n-                let generics_str = overflow::rewrite_with_angle_brackets(\n-                    context,\n-                    \"\",\n-                    param_list.iter(),\n-                    shape,\n-                    mk_sp(*span_lo, span_hi),\n-                )?;\n-\n                 // Update position of last bracket.\n                 *span_lo = context\n                     .snippet_provider\n                     .span_after(mk_sp(*span_lo, span_hi), \"<\");\n-\n-                result.push_str(&generics_str)\n-            }\n-            ast::GenericArgs::Parenthesized(ref data) => {\n-                result.push_str(&format_function_type(\n-                    data.inputs.iter().map(|x| &**x),\n-                    &data.output,\n-                    false,\n-                    data.span,\n-                    context,\n-                    shape,\n-                )?);\n             }\n             _ => (),\n         }\n+        result.push_str(&generics_str)\n     }\n \n     Some(result)\n@@ -489,6 +465,41 @@ impl Rewrite for ast::GenericArg {\n     }\n }\n \n+fn rewrite_generic_args(\n+    gen_args: &ast::GenericArgs,\n+    context: &RewriteContext<'_>,\n+    shape: Shape,\n+    span: Span,\n+) -> Option<String> {\n+    match gen_args {\n+        ast::GenericArgs::AngleBracketed(ref data) if !data.args.is_empty() => {\n+            let args = data\n+                .args\n+                .iter()\n+                .map(|x| match x {\n+                    ast::AngleBracketedArg::Arg(generic_arg) => {\n+                        SegmentParam::from_generic_arg(generic_arg)\n+                    }\n+                    ast::AngleBracketedArg::Constraint(constraint) => {\n+                        SegmentParam::Binding(constraint)\n+                    }\n+                })\n+                .collect::<Vec<_>>();\n+\n+            overflow::rewrite_with_angle_brackets(context, \"\", args.iter(), shape, span)\n+        }\n+        ast::GenericArgs::Parenthesized(ref data) => format_function_type(\n+            data.inputs.iter().map(|x| &**x),\n+            &data.output,\n+            false,\n+            data.span,\n+            context,\n+            shape,\n+        ),\n+        _ => Some(\"\".to_owned()),\n+    }\n+}\n+\n fn rewrite_bounded_lifetime(\n     lt: &ast::Lifetime,\n     bounds: &[ast::GenericBound],"}, {"sha": "bc8f1a366da29d75c30ab1ee13af05d1d2ff30ee", "filename": "tests/target/issue_4943.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d8eb8d79ce01571e468df9a0dfad8b2730bdf58/tests%2Ftarget%2Fissue_4943.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d8eb8d79ce01571e468df9a0dfad8b2730bdf58/tests%2Ftarget%2Fissue_4943.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_4943.rs?ref=5d8eb8d79ce01571e468df9a0dfad8b2730bdf58", "patch": "@@ -0,0 +1,8 @@\n+impl SomeStruct {\n+    fn process<T>(v: T) -> <Self as GAT>::R<T>\n+    where\n+        Self: GAT<R<T> = T>,\n+    {\n+        SomeStruct::do_something(v)\n+    }\n+}"}]}