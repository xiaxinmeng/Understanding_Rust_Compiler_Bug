{"sha": "a79f1921a977595a0321dee96ba08b17b52850ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3OWYxOTIxYTk3NzU5NWEwMzIxZGVlOTZiYTA4YjE3YjUyODUwYWU=", "commit": {"author": {"name": "Barosl LEE", "email": "github@barosl.com", "date": "2015-01-20T17:16:50Z"}, "committer": {"name": "Barosl LEE", "email": "github@barosl.com", "date": "2015-01-20T17:16:50Z"}, "message": "Rollup merge of #21375 - petrochenkov:ssbsl, r=alexcrichton\n\nAfter PR #19766 added implicit coersions `*mut T -> *const T`, the explicit casts can be removed.\r\n(The number of such casts turned out to be relatively small).", "tree": {"sha": "2da2bbe2af6684be00aa3d762ace19203abcbe50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2da2bbe2af6684be00aa3d762ace19203abcbe50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a79f1921a977595a0321dee96ba08b17b52850ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a79f1921a977595a0321dee96ba08b17b52850ae", "html_url": "https://github.com/rust-lang/rust/commit/a79f1921a977595a0321dee96ba08b17b52850ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a79f1921a977595a0321dee96ba08b17b52850ae/comments", "author": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0efdda314a48b5824673510fbaa0c6d9ddf301df", "url": "https://api.github.com/repos/rust-lang/rust/commits/0efdda314a48b5824673510fbaa0c6d9ddf301df", "html_url": "https://github.com/rust-lang/rust/commit/0efdda314a48b5824673510fbaa0c6d9ddf301df"}, {"sha": "812ce6c190d896cf1cc1bef9f22c00266e962c43", "url": "https://api.github.com/repos/rust-lang/rust/commits/812ce6c190d896cf1cc1bef9f22c00266e962c43", "html_url": "https://github.com/rust-lang/rust/commit/812ce6c190d896cf1cc1bef9f22c00266e962c43"}], "stats": {"total": 81, "additions": 39, "deletions": 42}, "files": [{"sha": "2a66b4a01f7a9a80eeac456c6f3816b2eabcb6da", "filename": "src/doc/trpl/unsafe.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Fdoc%2Ftrpl%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Fdoc%2Ftrpl%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Funsafe.md?ref=a79f1921a977595a0321dee96ba08b17b52850ae", "patch": "@@ -254,7 +254,7 @@ impl<T: Send> Drop for Unique<T> {\n             // Copy the object out from the pointer onto the stack,\n             // where it is covered by normal Rust destructor semantics\n             // and cleans itself up, if necessary\n-            ptr::read(self.ptr as *const T);\n+            ptr::read(self.ptr);\n \n             // clean-up our allocation\n             free(self.ptr as *mut c_void)"}, {"sha": "bd5b43b782e8d67ecddc7fde67efd874c95e57a3", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=a79f1921a977595a0321dee96ba08b17b52850ae", "patch": "@@ -298,7 +298,7 @@ mod imp {\n             libc::realloc(ptr as *mut libc::c_void, size as libc::size_t) as *mut u8\n         } else {\n             let new_ptr = allocate(size, align);\n-            ptr::copy_memory(new_ptr, ptr as *const u8, cmp::min(size, old_size));\n+            ptr::copy_memory(new_ptr, ptr, cmp::min(size, old_size));\n             deallocate(ptr, old_size, align);\n             new_ptr\n         }"}, {"sha": "fa8906430894fbd87846b6b06f99f8260a66519a", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=a79f1921a977595a0321dee96ba08b17b52850ae", "patch": "@@ -344,11 +344,11 @@ impl<K, V> Node<K, V> {\n     pub fn as_slices<'a>(&'a self) -> (&'a [K], &'a [V]) {\n         unsafe {(\n             mem::transmute(raw::Slice {\n-                data: self.keys.0 as *const K,\n+                data: self.keys.0,\n                 len: self.len()\n             }),\n             mem::transmute(raw::Slice {\n-                data: self.vals.0 as *const V,\n+                data: self.vals.0,\n                 len: self.len()\n             })\n         )}\n@@ -368,7 +368,7 @@ impl<K, V> Node<K, V> {\n         } else {\n             unsafe {\n                 mem::transmute(raw::Slice {\n-                    data: self.edges.0 as *const Node<K, V>,\n+                    data: self.edges.0,\n                     len: self.len() + 1\n                 })\n             }"}, {"sha": "b9cb4be7c1891caf463650eeabb524c32952f98b", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=a79f1921a977595a0321dee96ba08b17b52850ae", "patch": "@@ -88,19 +88,19 @@ impl<T> RingBuf<T> {\n     /// Turn ptr into a slice\n     #[inline]\n     unsafe fn buffer_as_slice(&self) -> &[T] {\n-        mem::transmute(RawSlice { data: self.ptr as *const T, len: self.cap })\n+        mem::transmute(RawSlice { data: self.ptr, len: self.cap })\n     }\n \n     /// Turn ptr into a mut slice\n     #[inline]\n     unsafe fn buffer_as_mut_slice(&mut self) -> &mut [T] {\n-        mem::transmute(RawSlice { data: self.ptr as *const T, len: self.cap })\n+        mem::transmute(RawSlice { data: self.ptr, len: self.cap })\n     }\n \n     /// Moves an element out of the buffer\n     #[inline]\n     unsafe fn buffer_read(&mut self, off: uint) -> T {\n-        ptr::read(self.ptr.offset(off as int) as *const T)\n+        ptr::read(self.ptr.offset(off as int))\n     }\n \n     /// Writes an element into the buffer, moving it."}, {"sha": "988ec4c661faae229e2951dea5effe788c05d686", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=a79f1921a977595a0321dee96ba08b17b52850ae", "patch": "@@ -1222,7 +1222,7 @@ fn insertion_sort<T, F>(v: &mut [T], mut compare: F) where F: FnMut(&T, &T) -> O\n                                  &*buf_v.offset(j),\n                                  (i - j) as uint);\n                 ptr::copy_nonoverlapping_memory(buf_v.offset(j),\n-                                                &tmp as *const T,\n+                                                &tmp,\n                                                 1);\n                 mem::forget(tmp);\n             }"}, {"sha": "4ddab8c533aabad27e4265fe55d2c680b1472d8a", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=a79f1921a977595a0321dee96ba08b17b52850ae", "patch": "@@ -426,7 +426,7 @@ impl<T> Vec<T> {\n     pub fn as_mut_slice<'a>(&'a mut self) -> &'a mut [T] {\n         unsafe {\n             mem::transmute(RawSlice {\n-                data: *self.ptr as *const T,\n+                data: *self.ptr,\n                 len: self.len,\n             })\n         }\n@@ -574,7 +574,7 @@ impl<T> Vec<T> {\n                 let ptr = self.as_mut_ptr().offset(index as int);\n                 // copy it out, unsafely having a copy of the value on\n                 // the stack and in the vector at the same time.\n-                ret = ptr::read(ptr as *const T);\n+                ret = ptr::read(ptr);\n \n                 // Shift everything down to fill in that spot.\n                 ptr::copy_memory(ptr, &*ptr.offset(1), len - index - 1);\n@@ -879,7 +879,7 @@ impl<T> Vec<T> {\n                     //          |         |\n                     //          end_u     end_t\n \n-                    let t = ptr::read(pv.start_t as *const T);\n+                    let t = ptr::read(pv.start_t);\n                     //  start_u start_t\n                     //  |       |\n                     // +-+-+-+-+-+-+-+-+-+\n@@ -1443,7 +1443,7 @@ impl<T> AsSlice<T> for Vec<T> {\n     fn as_slice<'a>(&'a self) -> &'a [T] {\n         unsafe {\n             mem::transmute(RawSlice {\n-                data: *self.ptr as *const T,\n+                data: *self.ptr,\n                 len: self.len\n             })\n         }\n@@ -1806,11 +1806,11 @@ impl<T,U> Drop for PartialVecNonZeroSized<T,U> {\n \n             // We have instances of `U`s and `T`s in `vec`. Destruct them.\n             while self.start_u != self.end_u {\n-                let _ = ptr::read(self.start_u as *const U); // Run a `U` destructor.\n+                let _ = ptr::read(self.start_u); // Run a `U` destructor.\n                 self.start_u = self.start_u.offset(1);\n             }\n             while self.start_t != self.end_t {\n-                let _ = ptr::read(self.start_t as *const T); // Run a `T` destructor.\n+                let _ = ptr::read(self.start_t); // Run a `T` destructor.\n                 self.start_t = self.start_t.offset(1);\n             }\n             // After this destructor ran, the destructor of `vec` will run,"}, {"sha": "18f7fff9053ceb00a398ec0727a77eabcf7f7658", "filename": "src/libcore/atomic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Flibcore%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Flibcore%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomic.rs?ref=a79f1921a977595a0321dee96ba08b17b52850ae", "patch": "@@ -199,7 +199,7 @@ impl AtomicBool {\n     #[inline]\n     #[stable]\n     pub fn load(&self, order: Ordering) -> bool {\n-        unsafe { atomic_load(self.v.get() as *const usize, order) > 0 }\n+        unsafe { atomic_load(self.v.get(), order) > 0 }\n     }\n \n     /// Stores a value into the bool.\n@@ -438,7 +438,7 @@ impl AtomicIsize {\n     /// ```\n     #[inline]\n     pub fn load(&self, order: Ordering) -> isize {\n-        unsafe { atomic_load(self.v.get() as *const isize, order) }\n+        unsafe { atomic_load(self.v.get(), order) }\n     }\n \n     /// Stores a value into the isize.\n@@ -615,7 +615,7 @@ impl AtomicUsize {\n     /// ```\n     #[inline]\n     pub fn load(&self, order: Ordering) -> usize {\n-        unsafe { atomic_load(self.v.get() as *const usize, order) }\n+        unsafe { atomic_load(self.v.get(), order) }\n     }\n \n     /// Stores a value into the usize.\n@@ -796,7 +796,7 @@ impl<T> AtomicPtr<T> {\n     #[stable]\n     pub fn load(&self, order: Ordering) -> *mut T {\n         unsafe {\n-            atomic_load(self.p.get() as *const *mut T, order) as *mut T\n+            atomic_load(self.p.get(), order) as *mut T\n         }\n     }\n \n@@ -1070,7 +1070,7 @@ impl AtomicInt {\n \n     #[inline]\n     pub fn load(&self, order: Ordering) -> int {\n-        unsafe { atomic_load(self.v.get() as *const int, order) }\n+        unsafe { atomic_load(self.v.get(), order) }\n     }\n \n     #[inline]\n@@ -1123,7 +1123,7 @@ impl AtomicUint {\n \n     #[inline]\n     pub fn load(&self, order: Ordering) -> uint {\n-        unsafe { atomic_load(self.v.get() as *const uint, order) }\n+        unsafe { atomic_load(self.v.get(), order) }\n     }\n \n     #[inline]"}, {"sha": "0b89467d63b83f2800ff34948a29a0574c801aa2", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=a79f1921a977595a0321dee96ba08b17b52850ae", "patch": "@@ -329,7 +329,7 @@ impl<T> PtrExt for *mut T {\n     #[inline]\n     #[stable]\n     unsafe fn offset(self, count: int) -> *mut T {\n-        intrinsics::offset(self as *const T, count) as *mut T\n+        intrinsics::offset(self, count) as *mut T\n     }\n \n     #[inline]"}, {"sha": "50cbb7a61dce305ce393e1965be56f7436056ccb", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=a79f1921a977595a0321dee96ba08b17b52850ae", "patch": "@@ -741,7 +741,7 @@ macro_rules! make_slice {\n             diff / mem::size_of::<$t>()\n         };\n         unsafe {\n-            transmute::<_, $result>(RawSlice { data: $start as *const T, len: len })\n+            transmute::<_, $result>(RawSlice { data: $start, len: len })\n         }\n     }}\n }\n@@ -1409,7 +1409,7 @@ pub unsafe fn from_raw_buf<'a, T>(p: &'a *const T, len: uint) -> &'a [T] {\n #[inline]\n #[unstable = \"should be renamed to from_raw_parts_mut\"]\n pub unsafe fn from_raw_mut_buf<'a, T>(p: &'a *mut T, len: uint) -> &'a mut [T] {\n-    transmute(RawSlice { data: *p as *const T, len: len })\n+    transmute(RawSlice { data: *p, len: len })\n }\n \n //"}, {"sha": "b307f4e5a9bddaf9c3c97c35734ffcadfe10794e", "filename": "src/librustc_trans/trans/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs?ref=a79f1921a977595a0321dee96ba08b17b52850ae", "patch": "@@ -33,7 +33,7 @@ pub struct Builder<'a, 'tcx: 'a> {\n // lot more efficient) than doing str::as_c_str(\"\", ...) every time.\n pub fn noname() -> *const c_char {\n     static CNULL: c_char = 0;\n-    &CNULL as *const c_char\n+    &CNULL\n }\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {"}, {"sha": "ede71d1935453dbec277b5cfdaf671d667cba2f8", "filename": "src/librustdoc/flock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Flibrustdoc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Flibrustdoc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fflock.rs?ref=a79f1921a977595a0321dee96ba08b17b52850ae", "patch": "@@ -128,7 +128,7 @@ mod imp {\n                 l_sysid: 0,\n             };\n             let ret = unsafe {\n-                libc::fcntl(fd, os::F_SETLKW, &flock as *const os::flock)\n+                libc::fcntl(fd, os::F_SETLKW, &flock)\n             };\n             if ret == -1 {\n                 let errno = stdos::errno();\n@@ -151,7 +151,7 @@ mod imp {\n                 l_sysid: 0,\n             };\n             unsafe {\n-                libc::fcntl(self.fd, os::F_SETLK, &flock as *const os::flock);\n+                libc::fcntl(self.fd, os::F_SETLK, &flock);\n                 libc::close(self.fd);\n             }\n         }"}, {"sha": "d810460a7d497886ca628bbe074d26e654cc68d8", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=a79f1921a977595a0321dee96ba08b17b52850ae", "patch": "@@ -395,9 +395,6 @@ impl<K, V, M: Deref<Target=RawTable<K, V>> + DerefMut> FullBucket<K, V, M> {\n     /// This works similarly to `put`, building an `EmptyBucket` out of the\n     /// taken bucket.\n     pub fn take(mut self) -> (EmptyBucket<K, V, M>, K, V) {\n-        let key = self.raw.key as *const K;\n-        let val = self.raw.val as *const V;\n-\n         self.table.size -= 1;\n \n         unsafe {\n@@ -408,8 +405,8 @@ impl<K, V, M: Deref<Target=RawTable<K, V>> + DerefMut> FullBucket<K, V, M> {\n                     idx: self.idx,\n                     table: self.table\n                 },\n-                ptr::read(key),\n-                ptr::read(val)\n+                ptr::read(self.raw.key),\n+                ptr::read(self.raw.val)\n             )\n         }\n     }\n@@ -477,8 +474,8 @@ impl<K, V, M: Deref<Target=RawTable<K, V>>> GapThenFull<K, V, M> {\n     pub fn shift(mut self) -> Option<GapThenFull<K, V, M>> {\n         unsafe {\n             *self.gap.raw.hash = mem::replace(&mut *self.full.raw.hash, EMPTY_BUCKET);\n-            copy_nonoverlapping_memory(self.gap.raw.key, self.full.raw.key as *const K, 1);\n-            copy_nonoverlapping_memory(self.gap.raw.val, self.full.raw.val as *const V, 1);\n+            copy_nonoverlapping_memory(self.gap.raw.key, self.full.raw.key, 1);\n+            copy_nonoverlapping_memory(self.gap.raw.val, self.full.raw.val, 1);\n         }\n \n         let FullBucket { raw: prev_raw, idx: prev_idx, .. } = self.full;\n@@ -781,8 +778,8 @@ impl<'a, K, V> Iterator for RevMoveBuckets<'a, K, V> {\n                 if *self.raw.hash != EMPTY_BUCKET {\n                     self.elems_left -= 1;\n                     return Some((\n-                        ptr::read(self.raw.key as *const K),\n-                        ptr::read(self.raw.val as *const V)\n+                        ptr::read(self.raw.key),\n+                        ptr::read(self.raw.val)\n                     ));\n                 }\n             }\n@@ -878,8 +875,8 @@ impl<K, V> Iterator for IntoIter<K, V> {\n                     SafeHash {\n                         hash: *bucket.hash,\n                     },\n-                    ptr::read(bucket.key as *const K),\n-                    ptr::read(bucket.val as *const V)\n+                    ptr::read(bucket.key),\n+                    ptr::read(bucket.val)\n                 )\n             }\n         })\n@@ -906,8 +903,8 @@ impl<'a, K, V> Iterator for Drain<'a, K, V> {\n                     SafeHash {\n                         hash: ptr::replace(bucket.hash, EMPTY_BUCKET),\n                     },\n-                    ptr::read(bucket.key as *const K),\n-                    ptr::read(bucket.val as *const V)\n+                    ptr::read(bucket.key),\n+                    ptr::read(bucket.val)\n                 )\n             }\n         })"}, {"sha": "70b9c012b008a38905149265255e63840455eaa5", "filename": "src/libstd/sys/unix/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs?ref=a79f1921a977595a0321dee96ba08b17b52850ae", "patch": "@@ -229,7 +229,7 @@ fn print(w: &mut Writer, idx: int, addr: *mut libc::c_void) -> IoResult<()> {\n     }\n \n     let mut info: Dl_info = unsafe { intrinsics::init() };\n-    if unsafe { dladdr(addr as *const libc::c_void, &mut info) == 0 } {\n+    if unsafe { dladdr(addr, &mut info) == 0 } {\n         output(w, idx,addr, None)\n     } else {\n         output(w, idx, addr, Some(unsafe {"}, {"sha": "4c99cff34da65cba8ace81c1f800c29ff9f732da", "filename": "src/libstd/thread_local/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Flibstd%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79f1921a977595a0321dee96ba08b17b52850ae/src%2Flibstd%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fmod.rs?ref=a79f1921a977595a0321dee96ba08b17b52850ae", "patch": "@@ -449,7 +449,7 @@ mod imp {\n         // destructor as running for this thread so calls to `get` will return\n         // `None`.\n         *(*ptr).dtor_running.get() = true;\n-        ptr::read((*ptr).inner.get() as *const T);\n+        ptr::read((*ptr).inner.get());\n     }\n }\n "}]}