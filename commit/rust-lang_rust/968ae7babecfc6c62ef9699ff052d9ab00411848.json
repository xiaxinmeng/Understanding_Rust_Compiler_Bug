{"sha": "968ae7babecfc6c62ef9699ff052d9ab00411848", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2OGFlN2JhYmVjZmM2YzYyZWY5Njk5ZmYwNTJkOWFiMDA0MTE4NDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-20T13:08:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-20T13:08:07Z"}, "message": "Auto merge of #41191 - seanmonstar:spec-extend-vec-intoiter, r=alexcrichton\n\nspecialize Extend for Vec with IntoIter\n\nBefore, `vec.extend(&other_vec)` was quite a bit faster than `vec.extend(other_vec)`. This allows extending by consuming a vec to use the same code as extending from a slice.", "tree": {"sha": "8047c62010017e7f69253113832daef38777176c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8047c62010017e7f69253113832daef38777176c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/968ae7babecfc6c62ef9699ff052d9ab00411848", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/968ae7babecfc6c62ef9699ff052d9ab00411848", "html_url": "https://github.com/rust-lang/rust/commit/968ae7babecfc6c62ef9699ff052d9ab00411848", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/968ae7babecfc6c62ef9699ff052d9ab00411848/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa6b50fc6282a2c64814b35b16464a22f4ae9265", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa6b50fc6282a2c64814b35b16464a22f4ae9265", "html_url": "https://github.com/rust-lang/rust/commit/fa6b50fc6282a2c64814b35b16464a22f4ae9265"}, {"sha": "f85a5337ab0f8b492cb8df56a7c2af103010037e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f85a5337ab0f8b492cb8df56a7c2af103010037e", "html_url": "https://github.com/rust-lang/rust/commit/f85a5337ab0f8b492cb8df56a7c2af103010037e"}], "stats": {"total": 49, "additions": 41, "deletions": 8}, "files": [{"sha": "64c76142b59d660ca8d975a23da5aa7040c8f2aa", "filename": "src/libcollections/tests/vec.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/968ae7babecfc6c62ef9699ff052d9ab00411848/src%2Flibcollections%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/968ae7babecfc6c62ef9699ff052d9ab00411848/src%2Flibcollections%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Fvec.rs?ref=968ae7babecfc6c62ef9699ff052d9ab00411848", "patch": "@@ -84,6 +84,9 @@ fn test_extend() {\n     let mut v = Vec::new();\n     let mut w = Vec::new();\n \n+    v.extend(w.clone());\n+    assert_eq!(v, &[]);\n+\n     v.extend(0..3);\n     for i in 0..3 {\n         w.push(i)\n@@ -100,6 +103,25 @@ fn test_extend() {\n \n     v.extend(w.clone()); // specializes to `append`\n     assert!(v.iter().eq(w.iter().chain(w.iter())));\n+\n+    // Zero sized types\n+    #[derive(PartialEq, Debug)]\n+    struct Foo;\n+\n+    let mut a = Vec::new();\n+    let b = vec![Foo, Foo];\n+\n+    a.extend(b);\n+    assert_eq!(a, &[Foo, Foo]);\n+\n+    // Double drop\n+    let mut count_x = 0;\n+    {\n+        let mut x = Vec::new();\n+        let y = vec![DropCounter { count: &mut count_x }];\n+        x.extend(y);\n+    }\n+    assert_eq!(count_x, 1);\n }\n \n #[test]"}, {"sha": "6deb87ae772049b0c793df969cbd9d69107980b0", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/968ae7babecfc6c62ef9699ff052d9ab00411848/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/968ae7babecfc6c62ef9699ff052d9ab00411848/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=968ae7babecfc6c62ef9699ff052d9ab00411848", "patch": "@@ -1041,18 +1041,22 @@ impl<T> Vec<T> {\n     #[inline]\n     #[stable(feature = \"append\", since = \"1.4.0\")]\n     pub fn append(&mut self, other: &mut Self) {\n-        self.reserve(other.len());\n-        let len = self.len();\n-        unsafe {\n-            ptr::copy_nonoverlapping(other.as_ptr(), self.get_unchecked_mut(len), other.len());\n-        }\n-\n-        self.len += other.len();\n         unsafe {\n+            self.append_elements(other.as_slice() as _);\n             other.set_len(0);\n         }\n     }\n \n+    /// Appends elements to `Self` from other buffer.\n+    #[inline]\n+    unsafe fn append_elements(&mut self, other: *const [T]) {\n+        let count = (*other).len();\n+        self.reserve(count);\n+        let len = self.len();\n+        ptr::copy_nonoverlapping(other as *const T, self.get_unchecked_mut(len), count);\n+        self.len += count;\n+    }\n+\n     /// Create a draining iterator that removes the specified range in the vector\n     /// and yields the removed items.\n     ///\n@@ -1738,7 +1742,7 @@ impl<T, I> SpecExtend<T, I> for Vec<T>\n         vector\n     }\n \n-    fn spec_extend(&mut self, iterator: I) {\n+    default fn spec_extend(&mut self, iterator: I) {\n         // This is the case for a TrustedLen iterator.\n         let (low, high) = iterator.size_hint();\n         if let Some(high_value) = high {\n@@ -1783,6 +1787,13 @@ impl<T> SpecExtend<T, IntoIter<T>> for Vec<T> {\n             vector\n         }\n     }\n+\n+    fn spec_extend(&mut self, mut iterator: IntoIter<T>) {\n+        unsafe {\n+            self.append_elements(iterator.as_slice() as _);\n+        }\n+        iterator.ptr = iterator.end;\n+    }\n }\n \n impl<'a, T: 'a, I> SpecExtend<&'a T, I> for Vec<T>"}]}