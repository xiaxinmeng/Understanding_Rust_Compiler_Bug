{"sha": "6d0901cb4da43d9316762445f764904a6b4fe1cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMDkwMWNiNGRhNDNkOTMxNjc2MjQ0NWY3NjQ5MDRhNmI0ZmUxY2Y=", "commit": {"author": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2011-12-08T18:30:57Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-14T22:54:16Z"}, "message": "std: export math_f* as math::f* submods and use tailcalls in std::math", "tree": {"sha": "0f6a3572f698be0fe58d030ad0b54f5d56622c61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f6a3572f698be0fe58d030ad0b54f5d56622c61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d0901cb4da43d9316762445f764904a6b4fe1cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0901cb4da43d9316762445f764904a6b4fe1cf", "html_url": "https://github.com/rust-lang/rust/commit/6d0901cb4da43d9316762445f764904a6b4fe1cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d0901cb4da43d9316762445f764904a6b4fe1cf/comments", "author": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cdb69cccbb9a86487fc0fd5d10edb01ce9479a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cdb69cccbb9a86487fc0fd5d10edb01ce9479a4", "html_url": "https://github.com/rust-lang/rust/commit/6cdb69cccbb9a86487fc0fd5d10edb01ce9479a4"}], "stats": {"total": 86, "additions": 45, "deletions": 41}, "files": [{"sha": "1e4ee49763e989ffcf584c4f4001c8ccd9e5cb25", "filename": "src/libstd/cmath.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d0901cb4da43d9316762445f764904a6b4fe1cf/src%2Flibstd%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0901cb4da43d9316762445f764904a6b4fe1cf/src%2Flibstd%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmath.rs?ref=6d0901cb4da43d9316762445f764904a6b4fe1cf", "patch": "@@ -23,7 +23,7 @@ native mod f64 {\n     #[link_name=\"log1p\"] pure fn ln1p(n: f64) -> f64;\n     pure fn log10(n: f64) -> f64;\n     pure fn log2(n: f64) -> f64;\n-    pure fn modf(n: f64, &iptr: f64) -> f64;\n+    pure fn modf(n: f64, iptr: *f64) -> f64;\n     pure fn pow(n: f64, e: f64) -> f64;\n     pure fn rint(n: f64) -> f64;\n     pure fn round(n: f64) -> f64;\n@@ -58,7 +58,7 @@ native mod f32 {\n     #[link_name=\"log1p\"] pure fn ln1p(n: f64) -> f64;\n     #[link_name=\"log2f\"] pure fn log2(n: f32) -> f32;\n     #[link_name=\"log10f\"] pure fn log10(n: f32) -> f32;\n-    #[link_name=\"modff\"] pure fn modf(n: f32, &iptr: f32) -> f32;\n+    #[link_name=\"modff\"] pure fn modf(n: f32, iptr: *f32) -> f32;\n     #[link_name=\"powf\"] pure fn pow(n: f32, e: f32) -> f32;\n     #[link_name=\"rintf\"] pure fn rint(n: f32) -> f32;\n     #[link_name=\"roundf\"] pure fn round(n: f32) -> f32;"}, {"sha": "0f365c44415db84f3d203eb3ddc481ca78e2509f", "filename": "src/libstd/math.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/6d0901cb4da43d9316762445f764904a6b4fe1cf/src%2Flibstd%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0901cb4da43d9316762445f764904a6b4fe1cf/src%2Flibstd%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmath.rs?ref=6d0901cb4da43d9316762445f764904a6b4fe1cf", "patch": "@@ -16,13 +16,18 @@ export\n     ldexp, ln, ln1p, log10, log2, modf, rint, round, pow, sin, sinh, sqrt,\n     tan, tanh, trunc;\n \n+export f64, f32;\n+\n+import f64 = math_f64;\n+import f32 = math_f32;\n+\n // These two must match in width according to architecture\n \n import ctypes::m_float;\n import ctypes::c_int;\n+import ptr;\n import m_float = math_f64;\n \n-// FIXME replace with redirect to m_float::consts::FOO as soon as it works\n /*\n Module: consts\n */\n@@ -143,23 +148,23 @@ Function: acos\n Returns the arccosine of an angle (measured in rad)\n */\n pure fn acos(x: float) -> float\n-    { m_float::acos(x as m_float) as float }\n+    { be m_float::acos(x as m_float) as float }\n \n /*\n Function: asin\n \n Returns the arcsine of an angle (measured in rad)\n */\n pure fn asin(x: float) -> float\n-    { m_float::asin(x as m_float) as float }\n+    { be m_float::asin(x as m_float) as float }\n \n /*\n Function: atan\n \n Returns the arctangents of an angle (measured in rad)\n */\n pure fn atan(x: float) -> float\n-    { m_float::atan(x as m_float) as float }\n+    { be m_float::atan(x as m_float) as float }\n \n \n /*\n@@ -168,23 +173,23 @@ Function: atan2\n Returns the arctangent of an angle (measured in rad)\n */\n pure fn atan2(y: float, x: float) -> float\n-    { m_float::atan2(y as m_float, x as m_float) as float }\n+    { be m_float::atan2(y as m_float, x as m_float) as float }\n \n /*\n Function: ceil\n \n Returns the smallest integral value less than or equal to `n`\n */\n pure fn ceil(n: float) -> float\n-    { m_float::ceil(n as m_float) as float }\n+    { be m_float::ceil(n as m_float) as float }\n \n /*\n Function: cos\n \n Returns the cosine of an angle `x` (measured in rad)\n */\n pure fn cos(x: float) -> float\n-    { m_float::cos(x as m_float) as float }\n+    { be m_float::cos(x as m_float) as float }\n \n /*\n Function: cosh\n@@ -193,7 +198,7 @@ Returns the hyperbolic cosine of `x`\n \n */\n pure fn cosh(x: float) -> float\n-    { m_float::cosh(x as m_float) as float }\n+    { be m_float::cosh(x as m_float) as float }\n \n \n /*\n@@ -202,47 +207,47 @@ Function: exp\n Returns `consts::e` to the power of `n*\n */\n pure fn exp(n: float) -> float\n-    { m_float::exp(n as m_float) as float }\n+    { be m_float::exp(n as m_float) as float }\n \n /*\n Function: abs\n \n Returns the absolute value of  `n`\n */\n pure fn abs(n: float) -> float\n-    { m_float::abs(n as m_float) as float }\n+    { be m_float::abs(n as m_float) as float }\n \n /*\n Function: floor\n \n Returns the largest integral value less than or equal to `n`\n */\n pure fn floor(n: float) -> float\n-    { m_float::floor(n as m_float) as float }\n+    { be m_float::floor(n as m_float) as float }\n \n /*\n Function: fmod\n \n Returns the floating-point remainder of `x/y`\n */\n pure fn fmod(x: float, y: float) -> float\n-    { m_float::fmod(x as m_float, y as m_float) as float }\n+    { be m_float::fmod(x as m_float, y as m_float) as float }\n \n /*\n Function: ln\n \n Returns the natural logaritm of `n`\n */\n pure fn ln(n: float) -> float\n-    { m_float::ln(n as m_float) as float }\n+    { be m_float::ln(n as m_float) as float }\n \n /*\n Function: ldexp\n \n Returns `x` multiplied by 2 to the power of `n`\n */\n pure fn ldexp(n: float, i: int) -> float\n-    { m_float::ldexp(n as m_float, i as c_int) as float }\n+    { be m_float::ldexp(n as m_float, i as c_int) as float }\n \n /*\n Function: ln1p\n@@ -251,24 +256,23 @@ Returns the natural logarithm of `1+n` accurately,\n even for very small values of `n`\n */\n pure fn ln1p(n: float) -> float\n-    { m_float::ln1p(n as m_float) as float }\n+    { be m_float::ln1p(n as m_float) as float }\n \n /*\n Function: log10\n \n Returns the logarithm to base 10 of `n`\n */\n pure fn log10(n: float) -> float\n-    { m_float::log10(n as m_float) as float }\n+    { be m_float::log10(n as m_float) as float }\n \n /*\n Function: log2\n \n Returns the logarithm to base 2 of `n`\n */\n pure fn log2(n: float) -> float\n-    { m_float::log2(n as m_float) as float }\n-\n+    { be m_float::log2(n as m_float) as float }\n \n /*\n Function: modf\n@@ -282,14 +286,10 @@ Returns:\n \n The fractional part of `n`\n */\n-pure fn modf(n: float, &iptr: float) -> float {\n-    unchecked {\n-        let f = iptr as m_float;\n-        let r = m_float::modf(n as m_float, f) as float;\n-        iptr  = f as float;\n-        ret r;\n-    }\n-}\n+#[no(warn_trivial_casts)] // FIXME Implement\n+pure fn modf(n: float, &iptr: float) -> float { unsafe {\n+    be m_float::modf(n as m_float, ptr::addr_of(iptr) as *m_float) as float\n+} }\n \n /*\n Function: frexp\n@@ -306,13 +306,13 @@ Returns:\n The fractional part of `n`\n */\n pure fn frexp(n: float, &exp: c_int) -> float\n-    { m_float::frexp(n as m_float, exp) as float }\n+    { be m_float::frexp(n as m_float, exp) as float }\n \n /*\n Function: pow\n */\n pure fn pow(v: float, e: float) -> float\n-    { m_float::pow(v as m_float, e as m_float) as float }\n+    { be m_float::pow(v as m_float, e as m_float) as float }\n \n \n /*\n@@ -322,7 +322,7 @@ Returns the integral value nearest to `x` (according to the\n prevailing rounding mode) in floating-point format\n */\n pure fn rint(x: float) -> float\n-    { m_float::rint(x as m_float) as float }\n+    { be m_float::rint(x as m_float) as float }\n \n /*\n Function: round\n@@ -332,31 +332,31 @@ Return the integral value nearest to `x` rounding half-way\n cases away from zero, regardless of the current rounding direction.\n */\n pure fn round(x: float) -> float\n-    { m_float::round(x as m_float) as float }\n+    { be m_float::round(x as m_float) as float }\n \n /*\n Function: sin\n \n Returns the sine of an angle `x` (measured in rad)\n */\n pure fn sin(x: float) -> float\n-    { m_float::sin(x as m_float) as float }\n+    { be m_float::sin(x as m_float) as float }\n \n /*\n Function: sinh\n \n Returns the hyperbolic sine of an angle `x` (measured in rad)\n */\n pure fn sinh(x: float) -> float\n-    { m_float::sinh(x as m_float) as float }\n+    { be m_float::sinh(x as m_float) as float }\n \n /*\n Function: sqrt\n \n Returns the square root of `x`\n */\n pure fn sqrt(x: float) -> float\n-    { m_float::sqrt(x as m_float) as float }\n+    { be m_float::sqrt(x as m_float) as float }\n \n /*\n Function: tan\n@@ -365,7 +365,7 @@ Returns the tangent of an angle `x` (measured in rad)\n \n */\n pure fn tan(x: float) -> float\n-    { m_float::tan(x as m_float) as float }\n+    { be m_float::tan(x as m_float) as float }\n \n /*\n Function: tanh\n@@ -374,7 +374,7 @@ Returns the hyperbolic tangent of an angle `x` (measured in rad)\n \n */\n pure fn tanh(x: float) -> float\n-    { m_float::tanh(x as m_float) as float }\n+    { be m_float::tanh(x as m_float) as float }\n \n /*\n Function: trunc\n@@ -383,7 +383,7 @@ Returns the integral value nearest to but no larger in magnitude than `x`\n \n */\n pure fn trunc(x: float) -> float\n-    { m_float::trunc(x as m_float) as float }\n+    { be m_float::trunc(x as m_float) as float }\n \n \n "}, {"sha": "659bf2c5b1402cbb251f25df8660a2c24bdfa419", "filename": "src/libstd/math_f64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d0901cb4da43d9316762445f764904a6b4fe1cf/src%2Flibstd%2Fmath_f64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0901cb4da43d9316762445f764904a6b4fe1cf/src%2Flibstd%2Fmath_f64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmath_f64.rs?ref=6d0901cb4da43d9316762445f764904a6b4fe1cf", "patch": "@@ -17,6 +17,7 @@ export\n \n export consts;\n \n+\n /* Module: consts */\n mod consts {\n "}, {"sha": "dffd48b33e79936c314020b28009f5120271a3dd", "filename": "src/libstd/std.rc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d0901cb4da43d9316762445f764904a6b4fe1cf/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/6d0901cb4da43d9316762445f764904a6b4fe1cf/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=6d0901cb4da43d9316762445f764904a6b4fe1cf", "patch": "@@ -13,7 +13,7 @@ export comm, fs, io, net, run, sys, task, uv;\n export c_vec, ctypes, either, option, result, four, tri, util;\n export bitv, deque, fun_treemap, list, map, smallintmap, sort, treemap, ufind;\n export rope;\n-export math, math_f32, math_f64;\n+export math;\n export ebml, dbg, getopts, json, rand, sha1, term, time, unsafe;\n export extfmt, test, tempfile;\n // FIXME: generic_os and os_fs shouldn't be exported\n@@ -54,6 +54,8 @@ mod uv;\n mod c_vec;\n mod ctypes;\n mod cmath; /* unexported */\n+mod math_f32;\n+mod math_f64;\n mod either;\n mod option;\n mod result;\n@@ -83,8 +85,6 @@ mod dbg;\n mod getopts;\n mod json;\n mod math;\n-mod math_f32;\n-mod math_f64;\n mod rand;\n mod sha1;\n mod tempfile;"}, {"sha": "9d5cf5d0c3a7c34d61f74148ae7e95f88a6c725d", "filename": "src/test/stdtest/math.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d0901cb4da43d9316762445f764904a6b4fe1cf/src%2Ftest%2Fstdtest%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0901cb4da43d9316762445f764904a6b4fe1cf/src%2Ftest%2Fstdtest%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fmath.rs?ref=6d0901cb4da43d9316762445f764904a6b4fe1cf", "patch": "@@ -160,8 +160,11 @@ fn test_exp_and_mod() {\n \n     let d2: float = 1.0;\n     assert modf(float::infinity, d2) == 0.0;\n+    assert d2 == float::infinity;\n     assert modf(float::neg_infinity, d2) == -0.0;\n+    assert d2 == float::neg_infinity;\n     assert float::isNaN(modf(float::NaN, d2));\n+    assert float::isNaN(d2);\n }\n \n #[test]"}]}