{"sha": "ebd8233b3e6737234a39c0cc9361664fbe21ed20", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZDgyMzNiM2U2NzM3MjM0YTM5YzBjYzkzNjE2NjRmYmUyMWVkMjA=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-18T23:29:34Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-18T23:29:34Z"}, "message": "Replace `impls_in_trait` with `CrateImplDefs`", "tree": {"sha": "d717f2a26eea422272b10a0355d4107ddf3a385a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d717f2a26eea422272b10a0355d4107ddf3a385a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebd8233b3e6737234a39c0cc9361664fbe21ed20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebd8233b3e6737234a39c0cc9361664fbe21ed20", "html_url": "https://github.com/rust-lang/rust/commit/ebd8233b3e6737234a39c0cc9361664fbe21ed20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebd8233b3e6737234a39c0cc9361664fbe21ed20/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "902a9c6da7939abec74bb4e4be9d1d16dfb15daa", "url": "https://api.github.com/repos/rust-lang/rust/commits/902a9c6da7939abec74bb4e4be9d1d16dfb15daa", "html_url": "https://github.com/rust-lang/rust/commit/902a9c6da7939abec74bb4e4be9d1d16dfb15daa"}], "stats": {"total": 142, "additions": 79, "deletions": 63}, "files": [{"sha": "b4f818088cfbc4526cbf4ee2615a098218dd9092", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebd8233b3e6737234a39c0cc9361664fbe21ed20/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebd8233b3e6737234a39c0cc9361664fbe21ed20/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=ebd8233b3e6737234a39c0cc9361664fbe21ed20", "patch": "@@ -16,10 +16,10 @@ pub use hir_expand::db::{\n pub use hir_ty::db::{\n     AssociatedTyDataQuery, AssociatedTyValueQuery, CallableItemSignatureQuery, FieldTypesQuery,\n     GenericDefaultsQuery, GenericPredicatesForParamQuery, GenericPredicatesQuery, HirDatabase,\n-    HirDatabaseStorage, ImplDatumQuery, ImplSelfTyQuery, ImplTraitQuery, ImplsForTraitQuery,\n-    ImplsInCrateQuery, InferQueryQuery, InternAssocTyValueQuery, InternChalkImplQuery,\n-    InternTypeCtorQuery, InternTypeParamIdQuery, ReturnTypeImplTraitsQuery, StructDatumQuery,\n-    TraitDatumQuery, TraitSolveQuery, TyQuery, ValueTyQuery,\n+    HirDatabaseStorage, ImplDatumQuery, ImplSelfTyQuery, ImplTraitQuery, ImplsInCrateQuery,\n+    InferQueryQuery, InternAssocTyValueQuery, InternChalkImplQuery, InternTypeCtorQuery,\n+    InternTypeParamIdQuery, ReturnTypeImplTraitsQuery, StructDatumQuery, TraitDatumQuery,\n+    TraitSolveQuery, TyQuery, ValueTyQuery,\n };\n \n #[test]"}, {"sha": "af2a717c9d6a97c3dfd3525a016d5d18e340bbd4", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebd8233b3e6737234a39c0cc9361664fbe21ed20/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebd8233b3e6737234a39c0cc9361664fbe21ed20/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=ebd8233b3e6737234a39c0cc9361664fbe21ed20", "patch": "@@ -159,7 +159,7 @@ pub struct TypeAliasId(salsa::InternId);\n type TypeAliasLoc = AssocItemLoc<ast::TypeAliasDef>;\n impl_intern!(TypeAliasId, TypeAliasLoc, intern_type_alias, lookup_intern_type_alias);\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, Ord, PartialOrd)]\n pub struct ImplId(salsa::InternId);\n type ImplLoc = ItemLoc<ast::ImplDef>;\n impl_intern!(ImplId, ImplLoc, intern_impl, lookup_intern_impl);"}, {"sha": "7889b8d2ccfb99b3bb4e25135646b76e0ecd6c9d", "filename": "crates/ra_hir_ty/src/db.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ebd8233b3e6737234a39c0cc9361664fbe21ed20/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebd8233b3e6737234a39c0cc9361664fbe21ed20/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs?ref=ebd8233b3e6737234a39c0cc9361664fbe21ed20", "patch": "@@ -3,15 +3,15 @@\n use std::sync::Arc;\n \n use hir_def::{\n-    db::DefDatabase, DefWithBodyId, FunctionId, GenericDefId, ImplId, LocalFieldId, TraitId,\n-    TypeParamId, VariantId,\n+    db::DefDatabase, DefWithBodyId, FunctionId, GenericDefId, ImplId, LocalFieldId, TypeParamId,\n+    VariantId,\n };\n use ra_arena::map::ArenaMap;\n use ra_db::{impl_intern_key, salsa, CrateId, Upcast};\n use ra_prof::profile;\n \n use crate::{\n-    method_resolution::{CrateImplDefs, TyFingerprint},\n+    method_resolution::CrateImplDefs,\n     traits::{chalk, AssocTyValue, Impl},\n     Binders, CallableDef, GenericPredicate, InferenceResult, OpaqueTyId, PolyFnSig,\n     ReturnTypeImplTraits, Substs, TraitRef, Ty, TyDefId, TypeCtor, ValueTyDefId,\n@@ -70,13 +70,8 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     #[salsa::invoke(crate::method_resolution::CrateImplDefs::impls_in_crate_query)]\n     fn impls_in_crate(&self, krate: CrateId) -> Arc<CrateImplDefs>;\n \n-    #[salsa::invoke(crate::traits::impls_for_trait_query)]\n-    fn impls_for_trait(\n-        &self,\n-        krate: CrateId,\n-        trait_: TraitId,\n-        self_ty_fp: Option<TyFingerprint>,\n-    ) -> Arc<[ImplId]>;\n+    #[salsa::invoke(crate::method_resolution::CrateImplDefs::impls_from_deps_query)]\n+    fn impls_from_deps(&self, krate: CrateId) -> Arc<CrateImplDefs>;\n \n     // Interned IDs for Chalk integration\n     #[salsa::interned]"}, {"sha": "01b3362d70d8e896c82dc14db4dfe6a1e755e789", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 48, "deletions": 9, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/ebd8233b3e6737234a39c0cc9361664fbe21ed20/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebd8233b3e6737234a39c0cc9361664fbe21ed20/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=ebd8233b3e6737234a39c0cc9361664fbe21ed20", "patch": "@@ -38,26 +38,66 @@ impl TyFingerprint {\n     }\n }\n \n+/// A queryable and mergeable collection of impls.\n #[derive(Debug, PartialEq, Eq)]\n pub struct CrateImplDefs {\n-    impls: FxHashMap<TyFingerprint, Vec<ImplId>>,\n+    inherent_impls: FxHashMap<TyFingerprint, Vec<ImplId>>,\n     impls_by_trait: FxHashMap<TraitId, FxHashMap<Option<TyFingerprint>, Vec<ImplId>>>,\n }\n \n impl CrateImplDefs {\n     pub(crate) fn impls_in_crate_query(db: &dyn HirDatabase, krate: CrateId) -> Arc<CrateImplDefs> {\n         let _p = profile(\"impls_in_crate_query\");\n-        let mut res =\n-            CrateImplDefs { impls: FxHashMap::default(), impls_by_trait: FxHashMap::default() };\n+        let mut res = CrateImplDefs {\n+            inherent_impls: FxHashMap::default(),\n+            impls_by_trait: FxHashMap::default(),\n+        };\n+        res.fill(db, krate);\n+\n+        Arc::new(res)\n+    }\n+\n+    /// Collects all impls from transitive dependencies of `krate` that may be used by `krate`.\n+    ///\n+    /// The full set of impls that can be used by `krate` is the returned map plus all the impls\n+    /// from `krate` itself.\n+    pub(crate) fn impls_from_deps_query(\n+        db: &dyn HirDatabase,\n+        krate: CrateId,\n+    ) -> Arc<CrateImplDefs> {\n+        // FIXME: This should take visibility and orphan rules into account to keep the result\n+        // smaller.\n+        let _p = profile(\"impls_from_deps_query\");\n+        let crate_graph = db.crate_graph();\n+        let mut res = CrateImplDefs {\n+            inherent_impls: FxHashMap::default(),\n+            impls_by_trait: FxHashMap::default(),\n+        };\n+        let mut seen = FxHashSet::default();\n+        let mut worklist = vec![krate];\n+        while let Some(krate) = worklist.pop() {\n+            if !seen.insert(krate) {\n+                continue;\n+            }\n \n+            // No deduplication, since a) impls can't be reexported, b) we visit a crate only once\n+            res.fill(db, krate);\n+\n+            worklist.extend(crate_graph[krate].dependencies.iter().map(|dep| dep.crate_id));\n+        }\n+\n+        Arc::new(res)\n+    }\n+\n+    fn fill(&mut self, db: &dyn HirDatabase, krate: CrateId) {\n         let crate_def_map = db.crate_def_map(krate);\n         for (_module_id, module_data) in crate_def_map.modules.iter() {\n             for impl_id in module_data.scope.impls() {\n                 match db.impl_trait(impl_id) {\n                     Some(tr) => {\n                         let self_ty = db.impl_self_ty(impl_id);\n                         let self_ty_fp = TyFingerprint::for_impl(&self_ty.value);\n-                        res.impls_by_trait\n+                        self.impls_by_trait\n                             .entry(tr.value.trait_)\n                             .or_default()\n                             .entry(self_ty_fp)\n@@ -67,18 +107,17 @@ impl CrateImplDefs {\n                     None => {\n                         let self_ty = db.impl_self_ty(impl_id);\n                         if let Some(self_ty_fp) = TyFingerprint::for_impl(&self_ty.value) {\n-                            res.impls.entry(self_ty_fp).or_default().push(impl_id);\n+                            self.inherent_impls.entry(self_ty_fp).or_default().push(impl_id);\n                         }\n                     }\n                 }\n             }\n         }\n-\n-        Arc::new(res)\n     }\n+\n     pub fn lookup_impl_defs(&self, ty: &Ty) -> impl Iterator<Item = ImplId> + '_ {\n         let fingerprint = TyFingerprint::for_impl(ty);\n-        fingerprint.and_then(|f| self.impls.get(&f)).into_iter().flatten().copied()\n+        fingerprint.and_then(|f| self.inherent_impls.get(&f)).into_iter().flatten().copied()\n     }\n \n     pub fn lookup_impl_defs_for_trait(&self, tr: TraitId) -> impl Iterator<Item = ImplId> + '_ {\n@@ -110,7 +149,7 @@ impl CrateImplDefs {\n     }\n \n     pub fn all_impls<'a>(&'a self) -> impl Iterator<Item = ImplId> + 'a {\n-        self.impls\n+        self.inherent_impls\n             .values()\n             .chain(self.impls_by_trait.values().flat_map(|m| m.values()))\n             .flatten()"}, {"sha": "99d7a96167d2452a5d82262479633bd3c9f0243f", "filename": "crates/ra_hir_ty/src/traits.rs", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ebd8233b3e6737234a39c0cc9361664fbe21ed20/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebd8233b3e6737234a39c0cc9361664fbe21ed20/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs?ref=ebd8233b3e6737234a39c0cc9361664fbe21ed20", "patch": "@@ -5,9 +5,8 @@ use chalk_ir::cast::Cast;\n use hir_def::{expr::ExprId, DefWithBodyId, ImplId, TraitId, TypeAliasId};\n use ra_db::{impl_intern_key, salsa, CrateId};\n use ra_prof::profile;\n-use rustc_hash::FxHashSet;\n \n-use crate::{db::HirDatabase, method_resolution::TyFingerprint, DebruijnIndex};\n+use crate::{db::HirDatabase, DebruijnIndex};\n \n use super::{Canonical, GenericPredicate, HirDisplay, ProjectionTy, TraitRef, Ty, TypeWalk};\n \n@@ -36,34 +35,6 @@ fn create_chalk_solver() -> chalk_solve::Solver<Interner> {\n     solver_choice.into_solver()\n }\n \n-/// Collects impls for the given trait in the whole dependency tree of `krate`.\n-pub(crate) fn impls_for_trait_query(\n-    db: &dyn HirDatabase,\n-    krate: CrateId,\n-    trait_: TraitId,\n-    self_ty_fp: Option<TyFingerprint>,\n-) -> Arc<[ImplId]> {\n-    // FIXME: We could be a lot smarter here - because of the orphan rules and\n-    // the fact that the trait and the self type need to be in the dependency\n-    // tree of a crate somewhere for an impl to exist, we could skip looking in\n-    // a lot of crates completely\n-    let mut impls = FxHashSet::default();\n-    // We call the query recursively here. On the one hand, this means we can\n-    // reuse results from queries for different crates; on the other hand, this\n-    // will only ever get called for a few crates near the root of the tree (the\n-    // ones the user is editing), so this may actually be a waste of memory. I'm\n-    // doing it like this mainly for simplicity for now.\n-    for dep in &db.crate_graph()[krate].dependencies {\n-        impls.extend(db.impls_for_trait(dep.crate_id, trait_, self_ty_fp).iter());\n-    }\n-    let crate_impl_defs = db.impls_in_crate(krate);\n-    match self_ty_fp {\n-        Some(fp) => impls.extend(crate_impl_defs.lookup_impl_defs_for_trait_and_ty(trait_, fp)),\n-        None => impls.extend(crate_impl_defs.lookup_impl_defs_for_trait(trait_)),\n-    }\n-    impls.into_iter().collect()\n-}\n-\n /// A set of clauses that we assume to be true. E.g. if we are inside this function:\n /// ```rust\n /// fn foo<T: Default>(t: T) {}"}, {"sha": "2f35d6d499f23842441b778bb2e05a3eed23eeaa", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ebd8233b3e6737234a39c0cc9361664fbe21ed20/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebd8233b3e6737234a39c0cc9361664fbe21ed20/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=ebd8233b3e6737234a39c0cc9361664fbe21ed20", "patch": "@@ -74,14 +74,26 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n         // Note: Since we're using impls_for_trait, only impls where the trait\n         // can be resolved should ever reach Chalk. `impl_datum` relies on that\n         // and will panic if the trait can't be resolved.\n-        let mut result: Vec<_> = self\n-            .db\n-            .impls_for_trait(self.krate, trait_, self_ty_fp)\n-            .iter()\n-            .copied()\n-            .map(Impl::ImplDef)\n-            .map(|impl_| impl_.to_chalk(self.db))\n-            .collect();\n+        let in_deps = self.db.impls_from_deps(self.krate);\n+        let in_self = self.db.impls_in_crate(self.krate);\n+        let impl_maps = [in_deps, in_self];\n+\n+        let id_to_chalk = |id: hir_def::ImplId| Impl::ImplDef(id).to_chalk(self.db);\n+\n+        let mut result: Vec<_> = match self_ty_fp {\n+            Some(fp) => impl_maps\n+                .iter()\n+                .flat_map(|crate_impl_defs| {\n+                    crate_impl_defs.lookup_impl_defs_for_trait_and_ty(trait_, fp).map(id_to_chalk)\n+                })\n+                .collect(),\n+            None => impl_maps\n+                .iter()\n+                .flat_map(|crate_impl_defs| {\n+                    crate_impl_defs.lookup_impl_defs_for_trait(trait_).map(id_to_chalk)\n+                })\n+                .collect(),\n+        };\n \n         let arg: Option<Ty> =\n             parameters.get(1).map(|p| from_chalk(self.db, p.assert_ty_ref(&Interner).clone()));"}, {"sha": "21622a1b0bbfe00753913848204250a9dbba8707", "filename": "crates/ra_ide_db/src/change.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ebd8233b3e6737234a39c0cc9361664fbe21ed20/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebd8233b3e6737234a39c0cc9361664fbe21ed20/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fchange.rs?ref=ebd8233b3e6737234a39c0cc9361664fbe21ed20", "patch": "@@ -283,7 +283,6 @@ impl RootDatabase {\n             hir::db::GenericPredicatesQuery\n             hir::db::GenericDefaultsQuery\n             hir::db::ImplsInCrateQuery\n-            hir::db::ImplsForTraitQuery\n             hir::db::InternTypeCtorQuery\n             hir::db::InternTypeParamIdQuery\n             hir::db::InternChalkImplQuery"}]}