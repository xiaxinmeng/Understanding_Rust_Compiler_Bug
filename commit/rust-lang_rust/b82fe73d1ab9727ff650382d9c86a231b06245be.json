{"sha": "b82fe73d1ab9727ff650382d9c86a231b06245be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MmZlNzNkMWFiOTcyN2ZmNjUwMzgyZDljODZhMjMxYjA2MjQ1YmU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-18T08:02:30Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-19T12:36:58Z"}, "message": "make token set a const-fn", "tree": {"sha": "e919865c68f78492bab5baa574f1a35a094b0339", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e919865c68f78492bab5baa574f1a35a094b0339"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b82fe73d1ab9727ff650382d9c86a231b06245be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b82fe73d1ab9727ff650382d9c86a231b06245be", "html_url": "https://github.com/rust-lang/rust/commit/b82fe73d1ab9727ff650382d9c86a231b06245be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b82fe73d1ab9727ff650382d9c86a231b06245be/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b028472481df108537b60104314081b65bf51147", "url": "https://api.github.com/repos/rust-lang/rust/commits/b028472481df108537b60104314081b65bf51147", "html_url": "https://github.com/rust-lang/rust/commit/b028472481df108537b60104314081b65bf51147"}], "stats": {"total": 109, "additions": 52, "deletions": 57}, "files": [{"sha": "060c0ccdf48d95ae0af5b7fa9363bf200df54b2c", "filename": "crates/ra_syntax/src/grammar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b82fe73d1ab9727ff650382d9c86a231b06245be/crates%2Fra_syntax%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82fe73d1ab9727ff650382d9c86a231b06245be/crates%2Fra_syntax%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.rs?ref=b82fe73d1ab9727ff650382d9c86a231b06245be", "patch": "@@ -150,7 +150,7 @@ fn name_r(p: &mut Parser, recovery: TokenSet) {\n }\n \n fn name(p: &mut Parser) {\n-    name_r(p, TokenSet::EMPTY)\n+    name_r(p, TokenSet::empty())\n }\n \n fn name_ref(p: &mut Parser) {"}, {"sha": "2236555e0f1a4e3804127798ca60a8d21334a4e3", "filename": "crates/ra_syntax/src/grammar/expressions.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b82fe73d1ab9727ff650382d9c86a231b06245be/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82fe73d1ab9727ff650382d9c86a231b06245be/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=b82fe73d1ab9727ff650382d9c86a231b06245be", "patch": "@@ -211,10 +211,8 @@ fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) -> BlockLike {\n     BlockLike::NotBlock\n }\n \n-const LHS_FIRST: TokenSet = token_set_union![\n-    token_set![AMP, STAR, EXCL, DOTDOT, DOTDOTEQ, MINUS],\n-    atom::ATOM_EXPR_FIRST,\n-];\n+const LHS_FIRST: TokenSet =\n+    atom::ATOM_EXPR_FIRST.union(token_set![AMP, STAR, EXCL, DOTDOT, DOTDOTEQ, MINUS]);\n \n fn lhs(p: &mut Parser, r: Restrictions) -> Option<(CompletedMarker, BlockLike)> {\n     let m;"}, {"sha": "167a76551d647c1f844577d9854d729f53894348", "filename": "crates/ra_syntax/src/grammar/expressions/atom.rs", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b82fe73d1ab9727ff650382d9c86a231b06245be/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82fe73d1ab9727ff650382d9c86a231b06245be/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=b82fe73d1ab9727ff650382d9c86a231b06245be", "patch": "@@ -36,29 +36,26 @@ pub(crate) fn literal(p: &mut Parser) -> Option<CompletedMarker> {\n }\n \n // E.g. for after the break in `if break {}`, this should not match\n-pub(super) const ATOM_EXPR_FIRST: TokenSet = token_set_union![\n-    LITERAL_FIRST,\n-    token_set![\n-        L_PAREN,\n-        L_CURLY,\n-        L_BRACK,\n-        PIPE,\n-        MOVE_KW,\n-        IF_KW,\n-        WHILE_KW,\n-        MATCH_KW,\n-        UNSAFE_KW,\n-        RETURN_KW,\n-        IDENT,\n-        SELF_KW,\n-        SUPER_KW,\n-        CRATE_KW,\n-        COLONCOLON,\n-        BREAK_KW,\n-        CONTINUE_KW,\n-        LIFETIME\n-    ],\n-];\n+pub(super) const ATOM_EXPR_FIRST: TokenSet = LITERAL_FIRST.union(token_set![\n+    L_PAREN,\n+    L_CURLY,\n+    L_BRACK,\n+    PIPE,\n+    MOVE_KW,\n+    IF_KW,\n+    WHILE_KW,\n+    MATCH_KW,\n+    UNSAFE_KW,\n+    RETURN_KW,\n+    IDENT,\n+    SELF_KW,\n+    SUPER_KW,\n+    CRATE_KW,\n+    COLONCOLON,\n+    BREAK_KW,\n+    CONTINUE_KW,\n+    LIFETIME,\n+]);\n \n const EXPR_RECOVERY_SET: TokenSet = token_set![LET_KW];\n \n@@ -363,7 +360,7 @@ pub(crate) fn match_arm_list(p: &mut Parser) {\n fn match_arm(p: &mut Parser) -> BlockLike {\n     let m = p.start();\n     p.eat(PIPE);\n-    patterns::pattern_r(p, TokenSet::EMPTY);\n+    patterns::pattern_r(p, TokenSet::empty());\n     while p.eat(PIPE) {\n         patterns::pattern(p);\n     }"}, {"sha": "658fc582098cb282dabb06ef91cb684b37494c57", "filename": "crates/ra_syntax/src/grammar/params.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b82fe73d1ab9727ff650382d9c86a231b06245be/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fparams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82fe73d1ab9727ff650382d9c86a231b06245be/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fparams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fparams.rs?ref=b82fe73d1ab9727ff650382d9c86a231b06245be", "patch": "@@ -61,8 +61,7 @@ fn list_(p: &mut Parser, flavor: Flavor) {\n     m.complete(p, PARAM_LIST);\n }\n \n-const VALUE_PARAMETER_FIRST: TokenSet =\n-    token_set_union![patterns::PATTERN_FIRST, types::TYPE_FIRST,];\n+const VALUE_PARAMETER_FIRST: TokenSet = patterns::PATTERN_FIRST.union(types::TYPE_FIRST);\n \n fn value_parameter(p: &mut Parser, flavor: Flavor) {\n     let m = p.start();"}, {"sha": "7820c4e027b1aba8b4de11fd7f2bb83146226899", "filename": "crates/ra_syntax/src/grammar/patterns.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b82fe73d1ab9727ff650382d9c86a231b06245be/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82fe73d1ab9727ff650382d9c86a231b06245be/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=b82fe73d1ab9727ff650382d9c86a231b06245be", "patch": "@@ -1,10 +1,10 @@\n use super::*;\n \n-pub(super) const PATTERN_FIRST: TokenSet = token_set_union![\n-    token_set![REF_KW, MUT_KW, L_PAREN, L_BRACK, AMP, UNDERSCORE],\n-    expressions::LITERAL_FIRST,\n-    paths::PATH_FIRST,\n-];\n+pub(super) const PATTERN_FIRST: TokenSet = expressions::LITERAL_FIRST\n+    .union(paths::PATH_FIRST)\n+    .union(token_set![\n+        REF_KW, MUT_KW, L_PAREN, L_BRACK, AMP, UNDERSCORE\n+    ]);\n \n pub(super) fn pattern(p: &mut Parser) {\n     pattern_r(p, PAT_RECOVERY_SET)"}, {"sha": "21d89d83bbd1ba1e450a3ab7b1d752efbef0f56e", "filename": "crates/ra_syntax/src/grammar/types.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b82fe73d1ab9727ff650382d9c86a231b06245be/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82fe73d1ab9727ff650382d9c86a231b06245be/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftypes.rs?ref=b82fe73d1ab9727ff650382d9c86a231b06245be", "patch": "@@ -1,12 +1,9 @@\n use super::*;\n \n-pub(super) const TYPE_FIRST: TokenSet = token_set_union![\n-    token_set![\n-        L_PAREN, EXCL, STAR, L_BRACK, AMP, UNDERSCORE, FN_KW, UNSAFE_KW, EXTERN_KW, FOR_KW,\n-        IMPL_KW, DYN_KW, L_ANGLE,\n-    ],\n-    paths::PATH_FIRST,\n-];\n+pub(super) const TYPE_FIRST: TokenSet = paths::PATH_FIRST.union(token_set![\n+    L_PAREN, EXCL, STAR, L_BRACK, AMP, UNDERSCORE, FN_KW, UNSAFE_KW, EXTERN_KW, FOR_KW, IMPL_KW,\n+    DYN_KW, L_ANGLE,\n+]);\n \n const TYPE_RECOVERY_SET: TokenSet = token_set![R_PAREN, COMMA];\n "}, {"sha": "3148371c517dceb77103c3954abfa9cd3943f0fb", "filename": "crates/ra_syntax/src/parser_api.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b82fe73d1ab9727ff650382d9c86a231b06245be/crates%2Fra_syntax%2Fsrc%2Fparser_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82fe73d1ab9727ff650382d9c86a231b06245be/crates%2Fra_syntax%2Fsrc%2Fparser_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparser_api.rs?ref=b82fe73d1ab9727ff650382d9c86a231b06245be", "patch": "@@ -112,7 +112,7 @@ impl<'t> Parser<'t> {\n \n     /// Create an error node and consume the next token.\n     pub(crate) fn err_and_bump(&mut self, message: &str) {\n-        self.err_recover(message, TokenSet::EMPTY);\n+        self.err_recover(message, TokenSet::empty());\n     }\n \n     /// Create an error node and consume the next token."}, {"sha": "b3fe633e013e1d374a290cfee3d8aa0f67c851e0", "filename": "crates/ra_syntax/src/token_set.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b82fe73d1ab9727ff650382d9c86a231b06245be/crates%2Fra_syntax%2Fsrc%2Ftoken_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82fe73d1ab9727ff650382d9c86a231b06245be/crates%2Fra_syntax%2Fsrc%2Ftoken_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Ftoken_set.rs?ref=b82fe73d1ab9727ff650382d9c86a231b06245be", "patch": "@@ -1,30 +1,34 @@\n use crate::SyntaxKind;\n \n #[derive(Clone, Copy)]\n-pub(crate) struct TokenSet(pub(crate) u128);\n-\n-fn mask(kind: SyntaxKind) -> u128 {\n-    1u128 << (kind as usize)\n-}\n+pub(crate) struct TokenSet(u128);\n \n impl TokenSet {\n-    pub const EMPTY: TokenSet = TokenSet(0);\n+    pub const fn empty() -> TokenSet {\n+        TokenSet(0)\n+    }\n+\n+    pub const fn singleton(kind: SyntaxKind) -> TokenSet {\n+        TokenSet(mask(kind))\n+    }\n+\n+    pub const fn union(self, other: TokenSet) -> TokenSet {\n+        TokenSet(self.0 | other.0)\n+    }\n \n     pub fn contains(&self, kind: SyntaxKind) -> bool {\n         self.0 & mask(kind) != 0\n     }\n }\n \n-#[macro_export]\n-macro_rules! token_set {\n-    ($($t:ident),*) => { TokenSet($(1u128 << ($t as usize))|*) };\n-    ($($t:ident),* ,) => { token_set!($($t),*) };\n+const fn mask(kind: SyntaxKind) -> u128 {\n+    1u128 << (kind as usize)\n }\n \n #[macro_export]\n-macro_rules! token_set_union {\n-    ($($ts:expr),*) => { TokenSet($($ts.0)|*) };\n-    ($($ts:expr),* ,) => { token_set_union!($($ts),*) };\n+macro_rules! token_set {\n+    ($($t:ident),*) => { TokenSet::empty()$(.union(TokenSet::singleton($t)))* };\n+    ($($t:ident),* ,) => { token_set!($($t),*) };\n }\n \n #[test]"}]}