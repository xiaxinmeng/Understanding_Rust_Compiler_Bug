{"sha": "e482856d76fba8d31ee114d4fb74f8c18f63e73c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ODI4NTZkNzZmYmE4ZDMxZWUxMTRkNGZiNzRmOGMxOGY2M2U3M2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-01T18:29:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-01T18:29:24Z"}, "message": "auto merge of #7409 : alexcrichton/rust/threadsafe, r=cmr\n\n@catamorphism, this re-enables threadsafe rustpkg tests, @brson this will fail unless the bots have LLVM rebuilt, so this is a good indicator of whether that happened or not.", "tree": {"sha": "a9680cd28ea9413dad900d649eec3086e4499269", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9680cd28ea9413dad900d649eec3086e4499269"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e482856d76fba8d31ee114d4fb74f8c18f63e73c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e482856d76fba8d31ee114d4fb74f8c18f63e73c", "html_url": "https://github.com/rust-lang/rust/commit/e482856d76fba8d31ee114d4fb74f8c18f63e73c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e482856d76fba8d31ee114d4fb74f8c18f63e73c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b44953b8a3dcf97120e0cc4ed12ce115ce90e83e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b44953b8a3dcf97120e0cc4ed12ce115ce90e83e", "html_url": "https://github.com/rust-lang/rust/commit/b44953b8a3dcf97120e0cc4ed12ce115ce90e83e"}, {"sha": "5183a6cc6c5bcd263ed7a31650351fc64b4412f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5183a6cc6c5bcd263ed7a31650351fc64b4412f4", "html_url": "https://github.com/rust-lang/rust/commit/5183a6cc6c5bcd263ed7a31650351fc64b4412f4"}], "stats": {"total": 121, "additions": 67, "deletions": 54}, "files": [{"sha": "d598a6fbcf913e940637a4248364e16fc3ad3f9c", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e482856d76fba8d31ee114d4fb74f8c18f63e73c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e482856d76fba8d31ee114d4fb74f8c18f63e73c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=e482856d76fba8d31ee114d4fb74f8c18f63e73c", "patch": "@@ -2901,6 +2901,10 @@ pub fn trans_crate(sess: session::Session,\n                    reachable_map: @mut HashSet<ast::node_id>,\n                    maps: astencode::Maps)\n                    -> (ContextRef, ModuleRef, LinkMeta) {\n+    // Before we touch LLVM, make sure that multithreading is enabled.\n+    if unsafe { !llvm::LLVMRustStartMultithreading() } {\n+        sess.bug(\"couldn't enable multi-threaded LLVM\");\n+    }\n \n     let mut symbol_hasher = hash::default_state();\n     let link_meta = link::build_link_meta(sess, crate, output, &mut symbol_hasher);\n@@ -2915,12 +2919,6 @@ pub fn trans_crate(sess: session::Session,\n     // 1. http://llvm.org/bugs/show_bug.cgi?id=11479\n     let llmod_id = link_meta.name.to_owned() + \".rc\";\n \n-    // FIXME(#6511): get LLVM building with --enable-threads so this\n-    //               function can be called\n-    // if !llvm::LLVMRustStartMultithreading() {\n-    //     sess.bug(\"couldn't enable multi-threaded LLVM\");\n-    // }\n-\n     let ccx = @mut CrateContext::new(sess,\n                                      llmod_id,\n                                      tcx,"}, {"sha": "2cdcea203cadfbae03031b4f839fbdab9f20e252", "filename": "src/librusti/rusti.rs", "status": "modified", "additions": 49, "deletions": 34, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/e482856d76fba8d31ee114d4fb74f8c18f63e73c/src%2Flibrusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e482856d76fba8d31ee114d4fb74f8c18f63e73c/src%2Flibrusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rs?ref=e482856d76fba8d31ee114d4fb74f8c18f63e73c", "patch": "@@ -528,6 +528,9 @@ mod tests {\n         }\n     }\n \n+    // FIXME: #7220 rusti on 32bit mac doesn't work.\n+    #[cfg(not(target_word_size=\"32\"))]\n+    #[cfg(not(target_os=\"macos\"))]\n     fn run_program(prog: &str) {\n         let mut r = repl();\n         for prog.split_iter('\\n').advance |cmd| {\n@@ -536,63 +539,66 @@ mod tests {\n             r = result.expect(fmt!(\"the command '%s' failed\", cmd));\n         }\n     }\n+    #[cfg(target_word_size=\"32\", target_os=\"macos\")]\n+    fn run_program(_: &str) {}\n \n     #[test]\n-    // FIXME: #7220 rusti on 32bit mac doesn't work.\n-    #[cfg(not(target_word_size=\"32\",\n-              target_os=\"macos\"))]\n-    fn run_all() {\n-        // FIXME(#7071):\n-        // By default, unit tests are run in parallel. Rusti, on the other hand,\n-        // does not enjoy doing this. I suspect that it is because the LLVM\n-        // bindings are not thread-safe (when running parallel tests, some tests\n-        // were triggering assertions in LLVM (or segfaults). Hence, this\n-        // function exists to run everything serially (sadface).\n-        //\n-        // To get some interesting output, run with RUST_LOG=rusti::tests\n-\n-        debug!(\"hopefully this runs\");\n+    fn super_basic() {\n         run_program(\"\");\n+    }\n \n-        debug!(\"regression test for #5937\");\n+    #[test]\n+    fn regression_5937() {\n         run_program(\"use std::hashmap;\");\n+    }\n \n-        debug!(\"regression test for #5784\");\n+    #[test]\n+    fn regression_5784() {\n         run_program(\"let a = 3;\");\n+    }\n \n+    #[test] #[ignore]\n+    fn new_tasks() {\n         // XXX: can't spawn new tasks because the JIT code is cleaned up\n         //      after the main function is done.\n-        // debug!(\"regression test for #5803\");\n-        // run_program(\"\n-        //     spawn( || println(\\\"Please don't segfault\\\") );\n-        //     do spawn { println(\\\"Please?\\\"); }\n-        // \");\n+        run_program(\"\n+            spawn( || println(\\\"Please don't segfault\\\") );\n+            do spawn { println(\\\"Please?\\\"); }\n+        \");\n+    }\n \n-        debug!(\"inferred integers are usable\");\n+    #[test]\n+    fn inferred_integers_usable() {\n         run_program(\"let a = 2;\\n()\\n\");\n         run_program(\"\n             let a = 3;\n             let b = 4u;\n             assert!((a as uint) + b == 7)\n         \");\n+    }\n \n-        debug!(\"local variables can be shadowed\");\n+    #[test]\n+    fn local_variables_allow_shadowing() {\n         run_program(\"\n             let a = 3;\n             let a = 5;\n             assert!(a == 5)\n         \");\n+    }\n \n-        debug!(\"strings are usable\");\n+    #[test]\n+    fn string_usable() {\n         run_program(\"\n             let a = ~\\\"\\\";\n             let b = \\\"\\\";\n             let c = @\\\"\\\";\n             let d = a + b + c;\n             assert!(d.len() == 0);\n         \");\n+    }\n \n-        debug!(\"vectors are usable\");\n+    #[test]\n+    fn vectors_usable() {\n         run_program(\"\n             let a = ~[1, 2, 3];\n             let b = &[1, 2, 3];\n@@ -601,15 +607,19 @@ mod tests {\n             assert!(d.len() == 9);\n             let e: &[int] = [];\n         \");\n+    }\n \n-        debug!(\"structs are usable\");\n+    #[test]\n+    fn structs_usable() {\n         run_program(\"\n             struct A{ a: int }\n             let b = A{ a: 3 };\n             assert!(b.a == 3)\n         \");\n+    }\n \n-        debug!(\"mutable variables\");\n+    #[test]\n+    fn mutable_variables_work() {\n         run_program(\"\n             let mut a = 3;\n             a = 5;\n@@ -618,29 +628,37 @@ mod tests {\n             assert!(b.contains(&5))\n             assert!(b.len() == 1)\n         \");\n+    }\n \n-        debug!(\"functions are cached\");\n+    #[test]\n+    fn functions_saved() {\n         run_program(\"\n             fn fib(x: int) -> int { if x < 2 {x} else { fib(x - 1) + fib(x - 2) } }\n             let a = fib(3);\n             let a = a + fib(4);\n             assert!(a == 5)\n         \");\n+    }\n \n-        debug!(\"modules are cached\");\n+    #[test]\n+    fn modules_saved() {\n         run_program(\"\n             mod b { pub fn foo() -> uint { 3 } }\n             assert!(b::foo() == 3)\n         \");\n+    }\n \n-        debug!(\"multiple function definitions are allowed\");\n+    #[test]\n+    fn multiple_functions() {\n         run_program(\"\n             fn f() {}\n             fn f() {}\n             f()\n         \");\n+    }\n \n-        debug!(\"multiple item definitions are allowed\");\n+    #[test]\n+    fn multiple_items_same_name() {\n         run_program(\"\n             fn f() {}\n             mod f {}\n@@ -657,9 +675,6 @@ mod tests {\n     }\n \n     #[test]\n-    // FIXME: #7220 rusti on 32bit mac doesn't work.\n-    #[cfg(not(target_word_size=\"32\",\n-              target_os=\"macos\"))]\n     fn exit_quits() {\n         let mut r = repl();\n         assert!(r.running);"}, {"sha": "4acc621e7be245e396eed3ca3943006f0544c674", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e482856d76fba8d31ee114d4fb74f8c18f63e73c/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e482856d76fba8d31ee114d4fb74f8c18f63e73c/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=e482856d76fba8d31ee114d4fb74f8c18f63e73c", "patch": "@@ -307,18 +307,10 @@ fn frob_source_file(workspace: &Path, pkgid: &PkgId) {\n     }\n }\n \n-#[test] #[ignore] //FIXME(#7249)\n-fn test_all() {\n-    // FIXME(#7071): these tests use rustc, so they can't be run in parallel\n-    //               until this issue is resolved\n-    test_make_dir_rwx();\n-    test_install_valid();\n-    test_install_invalid();\n-    test_install_url();\n-    test_package_ids_must_be_relative_path_like();\n-    test_package_version();\n-}\n+// FIXME(#7249): these tests fail on multi-platform builds, so for now they're\n+//               only run one x86\n \n+#[test] #[ignore(cfg(target_arch = \"x86\"))]\n fn test_make_dir_rwx() {\n     let temp = &os::tmpdir();\n     let dir = temp.push(\"quux\");\n@@ -331,6 +323,7 @@ fn test_make_dir_rwx() {\n     assert!(os::remove_dir_recursive(&dir));\n }\n \n+#[test] #[ignore(cfg(target_arch = \"x86\"))]\n fn test_install_valid() {\n     use path_util::installed_library_in_workspace;\n \n@@ -360,6 +353,7 @@ fn test_install_valid() {\n     assert!(!os::path_exists(&bench));\n }\n \n+#[test] #[ignore(cfg(target_arch = \"x86\"))]\n fn test_install_invalid() {\n     use conditions::nonexistent_package::cond;\n     use cond1 = conditions::missing_pkg_files::cond;\n@@ -382,6 +376,7 @@ fn test_install_invalid() {\n     assert!(error_occurred && error1_occurred);\n }\n \n+#[test] #[ignore(cfg(target_arch = \"x86\"))]\n fn test_install_url() {\n     let workspace = mkdtemp(&os::tmpdir(), \"test\").expect(\"couldn't create temp dir\");\n     let sysroot = test_sysroot();\n@@ -417,6 +412,7 @@ fn test_install_url() {\n     assert!(!os::path_exists(&bench));\n }\n \n+#[test] #[ignore(cfg(target_arch = \"x86\"))]\n fn test_package_ids_must_be_relative_path_like() {\n     use conditions::bad_pkg_id::cond;\n \n@@ -457,6 +453,7 @@ fn test_package_ids_must_be_relative_path_like() {\n \n }\n \n+#[test] #[ignore(cfg(target_arch = \"x86\"))]\n fn test_package_version() {\n     let temp_pkg_id = PkgId::new(\"github.com/catamorphism/test_pkg_version\");\n     match temp_pkg_id.version {\n@@ -479,9 +476,8 @@ fn test_package_version() {\n                     push(\"test_pkg_version\")));\n }\n \n-// FIXME #7006: Fails on linux for some reason\n-#[test]\n-#[ignore]\n+// FIXME #7006: Fails on linux/mac for some reason\n+#[test] #[ignore]\n fn test_package_request_version() {\n     let temp_pkg_id = PkgId::new(\"github.com/catamorphism/test_pkg_version#0.3\");\n     let temp = mk_empty_workspace(&LocalPath(Path(\"test_pkg_version\")), &ExactRevision(~\"0.3\"));"}, {"sha": "fbd687778ae76aedca46798072327771d224ddf8", "filename": "src/rustllvm/llvm-auto-clean-trigger", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e482856d76fba8d31ee114d4fb74f8c18f63e73c/src%2Frustllvm%2Fllvm-auto-clean-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/e482856d76fba8d31ee114d4fb74f8c18f63e73c/src%2Frustllvm%2Fllvm-auto-clean-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-auto-clean-trigger?ref=e482856d76fba8d31ee114d4fb74f8c18f63e73c", "patch": "@@ -0,0 +1,4 @@\n+# If this file is modified, then llvm will be forcibly cleaned and then rebuilt.\n+# The actual contents of this file do not matter, but to trigger a change on the\n+# build bots then the contents should be changed so git updates the mtime.\n+6-29-2013"}]}