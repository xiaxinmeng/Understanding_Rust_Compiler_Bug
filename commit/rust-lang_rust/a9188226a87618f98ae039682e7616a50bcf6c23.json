{"sha": "a9188226a87618f98ae039682e7616a50bcf6c23", "node_id": "C_kwDOAAsO6NoAKGE5MTg4MjI2YTg3NjE4Zjk4YWUwMzk2ODJlNzYxNmE1MGJjZjZjMjM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-30T22:11:39Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-08T16:30:05Z"}, "message": "Peel borrows before suggesting as_ref/as_deref", "tree": {"sha": "17b89f79f3d2d1d340cf5b38176477af2b7eb190", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17b89f79f3d2d1d340cf5b38176477af2b7eb190"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9188226a87618f98ae039682e7616a50bcf6c23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9188226a87618f98ae039682e7616a50bcf6c23", "html_url": "https://github.com/rust-lang/rust/commit/a9188226a87618f98ae039682e7616a50bcf6c23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9188226a87618f98ae039682e7616a50bcf6c23/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c92140e83831286c36882fa50cc9edc0ecbbc578", "url": "https://api.github.com/repos/rust-lang/rust/commits/c92140e83831286c36882fa50cc9edc0ecbbc578", "html_url": "https://github.com/rust-lang/rust/commit/c92140e83831286c36882fa50cc9edc0ecbbc578"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "5161a366ae7d3ccbc669c1260016b943d43b5c0e", "filename": "compiler/rustc_hir_typeck/src/errors.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a9188226a87618f98ae039682e7616a50bcf6c23/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9188226a87618f98ae039682e7616a50bcf6c23/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs?ref=a9188226a87618f98ae039682e7616a50bcf6c23", "patch": "@@ -329,15 +329,16 @@ pub struct CtorIsPrivate {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(\n+#[multipart_suggestion(\n     hir_typeck_convert_using_method,\n-    code = \"{sugg}\",\n     applicability = \"machine-applicable\",\n     style = \"verbose\"\n )]\n pub struct SuggestConvertViaMethod<'tcx> {\n-    #[primary_span]\n+    #[suggestion_part(code = \"{sugg}\")]\n     pub span: Span,\n+    #[suggestion_part(code = \"\")]\n+    pub borrow_removal_span: Option<Span>,\n     pub sugg: &'static str,\n     pub expected: Ty<'tcx>,\n     pub found: Ty<'tcx>,"}, {"sha": "3a4fe334f888afdb923e899514895d05f5357c5f", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a9188226a87618f98ae039682e7616a50bcf6c23/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9188226a87618f98ae039682e7616a50bcf6c23/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=a9188226a87618f98ae039682e7616a50bcf6c23", "patch": "@@ -413,7 +413,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.deconstruct_option_or_result(found, expected)\n             && let ty::Ref(_, peeled, hir::Mutability::Not) = *expected_ty_inner.kind()\n         {\n-            // Check that given `Result<_, E>`, our expected ty is `Result<_, &E>`\n+            // Suggest removing any stray borrows (unless there's macro shenanigans involved).\n+            let inner_expr = expr.peel_borrows();\n+            if !inner_expr.span.eq_ctxt(expr.span) {\n+                return false;\n+            }\n+            let borrow_removal_span = if inner_expr.hir_id == expr.hir_id {\n+                None\n+            } else {\n+                Some(expr.span.shrink_to_lo().until(inner_expr.span))\n+            };\n+            // Given `Result<_, E>`, check our expected ty is `Result<_, &E>` for\n+            // `as_ref` and `as_deref` compatibility.\n             let error_tys_equate_as_ref = error_tys.map_or(true, |(found, expected)| {\n                 self.can_eq(self.param_env, self.tcx.mk_imm_ref(self.tcx.lifetimes.re_erased, found), expected)\n             });\n@@ -425,6 +436,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     sugg: \".as_ref()\",\n                     expected,\n                     found,\n+                    borrow_removal_span,\n                 });\n                 return true;\n             } else if let Some((deref_ty, _)) =\n@@ -437,11 +449,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     sugg: \".as_deref()\",\n                     expected,\n                     found,\n+                    borrow_removal_span,\n                 });\n                 return true;\n             } else if let ty::Adt(adt, _) = found_ty_inner.peel_refs().kind()\n                 && Some(adt.did()) == self.tcx.lang_items().string()\n                 && peeled.is_str()\n+                // `Result::map`, conversely, does not take ref of the error type.\n                 && error_tys.map_or(true, |(found, expected)| {\n                     self.can_eq(self.param_env, found, expected)\n                 })"}, {"sha": "6f11f44755a9d0f533e327ff7beca1a1aa112db5", "filename": "tests/ui/issues/issue-100605.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a9188226a87618f98ae039682e7616a50bcf6c23/tests%2Fui%2Fissues%2Fissue-100605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9188226a87618f98ae039682e7616a50bcf6c23/tests%2Fui%2Fissues%2Fissue-100605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-100605.stderr?ref=a9188226a87618f98ae039682e7616a50bcf6c23", "patch": "@@ -36,8 +36,9 @@ LL | fn takes_option(_arg: Option<&String>) {}\n    |    ^^^^^^^^^^^^ ---------------------\n help: try using `.as_ref()` to convert `&Option<String>` to `Option<&String>`\n    |\n-LL |     takes_option(&res.as_ref());\n-   |                      +++++++++\n+LL -     takes_option(&res);\n+LL +     takes_option(res.as_ref());\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0886d7f1770e959764268251654b7527acbf916e", "filename": "tests/ui/let-else/let-else-ref-bindings.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9188226a87618f98ae039682e7616a50bcf6c23/tests%2Fui%2Flet-else%2Flet-else-ref-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9188226a87618f98ae039682e7616a50bcf6c23/tests%2Fui%2Flet-else%2Flet-else-ref-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet-else%2Flet-else-ref-bindings.stderr?ref=a9188226a87618f98ae039682e7616a50bcf6c23", "patch": "@@ -21,8 +21,9 @@ LL |     let Some(ref a): Option<&[u8]> = &some else { return };\n            found reference `&Option<Vec<u8>>`\n help: try using `.as_deref()` to convert `&Option<Vec<u8>>` to `Option<&[u8]>`\n    |\n-LL |     let Some(ref a): Option<&[u8]> = &some.as_deref() else { return };\n-   |                                           +++++++++++\n+LL -     let Some(ref a): Option<&[u8]> = &some else { return };\n+LL +     let Some(ref a): Option<&[u8]> = some.as_deref() else { return };\n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:24:34\n@@ -51,8 +52,9 @@ LL |     let Some(a): Option<&[u8]> = &some else { return };\n            found reference `&Option<Vec<u8>>`\n help: try using `.as_deref()` to convert `&Option<Vec<u8>>` to `Option<&[u8]>`\n    |\n-LL |     let Some(a): Option<&[u8]> = &some.as_deref() else { return };\n-   |                                       +++++++++++\n+LL -     let Some(a): Option<&[u8]> = &some else { return };\n+LL +     let Some(a): Option<&[u8]> = some.as_deref() else { return };\n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:44:46"}]}