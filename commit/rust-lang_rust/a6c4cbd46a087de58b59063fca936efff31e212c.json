{"sha": "a6c4cbd46a087de58b59063fca936efff31e212c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YzRjYmQ0NmEwODdkZTU4YjU5MDYzZmNhOTM2ZWZmZjMxZTIxMmM=", "commit": {"author": {"name": "Vishnunarayan K I", "email": "appukuttancr@gmail.com", "date": "2020-12-01T14:42:22Z"}, "committer": {"name": "Vishnunarayan K I", "email": "appukuttancr@gmail.com", "date": "2020-12-01T14:42:22Z"}, "message": "review comment and one more test", "tree": {"sha": "ffdeb4801ced9cfb665aa27c9d730fa88ba34f2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffdeb4801ced9cfb665aa27c9d730fa88ba34f2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6c4cbd46a087de58b59063fca936efff31e212c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6c4cbd46a087de58b59063fca936efff31e212c", "html_url": "https://github.com/rust-lang/rust/commit/a6c4cbd46a087de58b59063fca936efff31e212c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6c4cbd46a087de58b59063fca936efff31e212c/comments", "author": {"login": "vn-ki", "id": 31964688, "node_id": "MDQ6VXNlcjMxOTY0Njg4", "avatar_url": "https://avatars.githubusercontent.com/u/31964688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vn-ki", "html_url": "https://github.com/vn-ki", "followers_url": "https://api.github.com/users/vn-ki/followers", "following_url": "https://api.github.com/users/vn-ki/following{/other_user}", "gists_url": "https://api.github.com/users/vn-ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/vn-ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vn-ki/subscriptions", "organizations_url": "https://api.github.com/users/vn-ki/orgs", "repos_url": "https://api.github.com/users/vn-ki/repos", "events_url": "https://api.github.com/users/vn-ki/events{/privacy}", "received_events_url": "https://api.github.com/users/vn-ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vn-ki", "id": 31964688, "node_id": "MDQ6VXNlcjMxOTY0Njg4", "avatar_url": "https://avatars.githubusercontent.com/u/31964688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vn-ki", "html_url": "https://github.com/vn-ki", "followers_url": "https://api.github.com/users/vn-ki/followers", "following_url": "https://api.github.com/users/vn-ki/following{/other_user}", "gists_url": "https://api.github.com/users/vn-ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/vn-ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vn-ki/subscriptions", "organizations_url": "https://api.github.com/users/vn-ki/orgs", "repos_url": "https://api.github.com/users/vn-ki/repos", "events_url": "https://api.github.com/users/vn-ki/events{/privacy}", "received_events_url": "https://api.github.com/users/vn-ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5b811aab49837e5fca93f41c9ac9fe9354f746f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5b811aab49837e5fca93f41c9ac9fe9354f746f", "html_url": "https://github.com/rust-lang/rust/commit/b5b811aab49837e5fca93f41c9ac9fe9354f746f"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "6449b7cdebca2f5a8a806196d5a728eaab451048", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4cbd46a087de58b59063fca936efff31e212c/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4cbd46a087de58b59063fca936efff31e212c/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=a6c4cbd46a087de58b59063fca936efff31e212c", "patch": "@@ -38,6 +38,10 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n         if instance.def.requires_caller_location(self.tcx()) {\n             return Ok(false);\n         }\n+        // only memoize instrinsics\n+        if !matches!(instance.def, InstanceDef::Intrinsic(_)) {\n+            return Ok(false);\n+        }\n         // For the moment we only do this for functions which take no arguments\n         // (or all arguments are ZSTs) so that we don't memoize too much.\n         if args.iter().any(|a| !a.layout.is_zst()) {\n@@ -232,13 +236,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n             if ecx.tcx.is_const_fn_raw(def.did) {\n                 // If this function is a `const fn` then under certain circumstances we\n                 // can evaluate call via the query system, thus memoizing all future calls.\n-                match instance.def {\n-                    InstanceDef::Intrinsic(_) => {\n-                        if ecx.try_eval_const_fn_call(instance, ret, args)? {\n-                            return Ok(None);\n-                        }\n-                    }\n-                    _ => {}\n+                if ecx.try_eval_const_fn_call(instance, ret, args)? {\n+                    return Ok(None);\n                 }\n             } else {\n                 // Some functions we support even if they are non-const -- but avoid testing"}, {"sha": "de7fb65f6858f513bcf3c0945c625ca98eefa4c4", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_nontransient.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4cbd46a087de58b59063fca936efff31e212c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4cbd46a087de58b59063fca936efff31e212c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient.rs?ref=a6c4cbd46a087de58b59063fca936efff31e212c", "patch": "@@ -1,11 +1,11 @@\n+// run-pass\n #![feature(core_intrinsics)]\n #![feature(const_heap)]\n #![feature(const_raw_ptr_deref)]\n #![feature(const_mut_refs)]\n use std::intrinsics;\n \n-const FOO: *const i32 = foo();\n-//~^ error: untyped pointers are not allowed in constant\n+const FOO: &i32 = foo();\n \n const fn foo() -> &'static i32 {\n     let t = unsafe {\n@@ -16,5 +16,5 @@ const fn foo() -> &'static i32 {\n     unsafe { &*t }\n }\n fn main() {\n-    assert_eq!(unsafe { *FOO }, 20)\n+    assert_eq!(*FOO, 20)\n }"}, {"sha": "cabd39dde31a79c958a679bfad2af37330946e33", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_nontransient.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b5b811aab49837e5fca93f41c9ac9fe9354f746f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b5b811aab49837e5fca93f41c9ac9fe9354f746f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient.stderr?ref=b5b811aab49837e5fca93f41c9ac9fe9354f746f", "patch": "@@ -1,8 +0,0 @@\n-error: untyped pointers are not allowed in constant\n-  --> $DIR/alloc_intrinsic_nontransient.rs:7:1\n-   |\n-LL | const FOO: *const i32 = foo();\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "de7fb65f6858f513bcf3c0945c625ca98eefa4c4", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_nontransient_fail.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a6c4cbd46a087de58b59063fca936efff31e212c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c4cbd46a087de58b59063fca936efff31e212c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_nontransient_fail.rs?ref=a6c4cbd46a087de58b59063fca936efff31e212c", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+#![feature(const_raw_ptr_deref)]\n+#![feature(const_mut_refs)]\n+use std::intrinsics;\n+\n+const FOO: &i32 = foo();\n+\n+const fn foo() -> &'static i32 {\n+    let t = unsafe {\n+        let i = intrinsics::const_allocate(4, 4) as * mut i32;\n+        *i = 20;\n+        i\n+    };\n+    unsafe { &*t }\n+}\n+fn main() {\n+    assert_eq!(*FOO, 20)\n+}"}]}