{"sha": "1cbef27ff857803fbee123e6730b83e1ef154f6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjYmVmMjdmZjg1NzgwM2ZiZWUxMjNlNjczMGI4M2UxZWYxNTRmNmM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-21T06:12:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-21T06:12:36Z"}, "message": "Merge #2625\n\n2625: Clippy lints r=matklad a=kjeremy\n\n\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>", "tree": {"sha": "7d45ce377fb8f4c7019bb74381228b94f397110f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d45ce377fb8f4c7019bb74381228b94f397110f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cbef27ff857803fbee123e6730b83e1ef154f6c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/bfUCRBK7hj4Ov3rIwAAdHIIAEpjFceknvjPEMq4w3/xMC9f\ncnaQLCvnRfy6/Hk6rUC0hotCe8cFXkUoK2aKw4EXy2wPeVZS0xkqCWVuAyXgoXuN\nShNG4LQCKx6WWad/Jc+8Dh4h7pJ1xai9pTnHOQ3tpxvMNaH3fIauITD1lkFLjI9q\n8UAIV1bXZsl+AMPWn9kv7iqYAvtV72B0alk4zXgJqGms/MCOvwl6/Ox0OtZLNZWX\n84q2pmBtxgrxGEW7e8skLmeY8k53A1USG6Sk16P4oz4vn9PTh4/yxcduJH5mT7mZ\n6xhbX0f9hX58r4VwGjAii0pIHW7kArEM2RuAyyATgTujo1Y3A41s8Fx6e5fzYAg=\n=s8Dw\n-----END PGP SIGNATURE-----\n", "payload": "tree 7d45ce377fb8f4c7019bb74381228b94f397110f\nparent 6eab968c601637361e8fbd1ee93ded1b0d967bee\nparent 0d5d63a80ea08f2af439bcc72fff9b24d144c70d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1576908756 +0000\ncommitter GitHub <noreply@github.com> 1576908756 +0000\n\nMerge #2625\n\n2625: Clippy lints r=matklad a=kjeremy\n\n\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cbef27ff857803fbee123e6730b83e1ef154f6c", "html_url": "https://github.com/rust-lang/rust/commit/1cbef27ff857803fbee123e6730b83e1ef154f6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cbef27ff857803fbee123e6730b83e1ef154f6c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eab968c601637361e8fbd1ee93ded1b0d967bee", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eab968c601637361e8fbd1ee93ded1b0d967bee", "html_url": "https://github.com/rust-lang/rust/commit/6eab968c601637361e8fbd1ee93ded1b0d967bee"}, {"sha": "0d5d63a80ea08f2af439bcc72fff9b24d144c70d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d5d63a80ea08f2af439bcc72fff9b24d144c70d", "html_url": "https://github.com/rust-lang/rust/commit/0d5d63a80ea08f2af439bcc72fff9b24d144c70d"}], "stats": {"total": 150, "additions": 70, "deletions": 80}, "files": [{"sha": "023917aca7b1d717e3ad94d49624a54d5f7e2972", "filename": "crates/ra_assists/src/assists/early_return.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs?ref=1cbef27ff857803fbee123e6730b83e1ef154f6c", "patch": "@@ -83,8 +83,8 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx<impl HirDatabase>) -> Opt\n     let parent_container = parent_block.syntax().parent()?.parent()?;\n \n     let early_expression: ast::Expr = match parent_container.kind() {\n-        WHILE_EXPR | LOOP_EXPR => make::expr_continue().into(),\n-        FN_DEF => make::expr_return().into(),\n+        WHILE_EXPR | LOOP_EXPR => make::expr_continue(),\n+        FN_DEF => make::expr_return(),\n         _ => return None,\n     };\n \n@@ -116,21 +116,21 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx<impl HirDatabase>) -> Opt\n                             )\n                             .into(),\n                         ),\n-                        make::expr_path(make::path_from_name_ref(make::name_ref(\"it\"))).into(),\n+                        make::expr_path(make::path_from_name_ref(make::name_ref(\"it\"))),\n                     );\n \n                     let sad_arm = make::match_arm(\n                         // FIXME: would be cool to use `None` or `Err(_)` if appropriate\n                         once(make::placeholder_pat().into()),\n-                        early_expression.into(),\n+                        early_expression,\n                     );\n \n                     make::expr_match(cond_expr, make::match_arm_list(vec![happy_arm, sad_arm]))\n                 };\n \n                 let let_stmt = make::let_stmt(\n                     make::bind_pat(make::name(&bound_ident.syntax().to_string())).into(),\n-                    Some(match_expr.into()),\n+                    Some(match_expr),\n                 );\n                 let let_stmt = if_indent_level.increase_indent(let_stmt);\n                 replace(let_stmt.syntax(), &then_block, &parent_block, &if_expr)"}, {"sha": "45199fa11496d05951bd0dd761f4479413903a5a", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=1cbef27ff857803fbee123e6730b83e1ef154f6c", "patch": "@@ -399,14 +399,14 @@ where\n                     let resolutions = enum_data\n                         .variants\n                         .iter()\n-                        .filter_map(|(local_id, variant_data)| {\n+                        .map(|(local_id, variant_data)| {\n                             let name = variant_data.name.clone();\n                             let variant = EnumVariantId { parent: e, local_id };\n                             let res = Resolution {\n                                 def: PerNs::both(variant.into(), variant.into()),\n                                 import: Some(import_id),\n                             };\n-                            Some((name, res))\n+                            (name, res)\n                         })\n                         .collect::<Vec<_>>();\n                     self.update(module_id, Some(import_id), &resolutions);"}, {"sha": "857f8a4441ea4884f0ff821a0f0bfb39d1df359c", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=1cbef27ff857803fbee123e6730b83e1ef154f6c", "patch": "@@ -138,7 +138,7 @@ fn to_col_number(db: &dyn AstDatabase, file: HirFileId, pos: TextUnit) -> usize\n         if c == '\\n' {\n             break;\n         }\n-        col_num = col_num + 1;\n+        col_num += 1;\n     }\n     col_num\n }"}, {"sha": "2e12e126f74a909e796e7a0c6b0c0d58a9df768e", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=1cbef27ff857803fbee123e6730b83e1ef154f6c", "patch": "@@ -93,12 +93,11 @@ pub(crate) fn macro_def(\n             Some(Arc::new((TokenExpander::MacroRules(rules), tmap)))\n         }\n         MacroDefKind::BuiltIn(expander) => {\n-            Some(Arc::new((TokenExpander::Builtin(expander.clone()), mbe::TokenMap::default())))\n+            Some(Arc::new((TokenExpander::Builtin(expander), mbe::TokenMap::default())))\n+        }\n+        MacroDefKind::BuiltInDerive(expander) => {\n+            Some(Arc::new((TokenExpander::BuiltinDerive(expander), mbe::TokenMap::default())))\n         }\n-        MacroDefKind::BuiltInDerive(expander) => Some(Arc::new((\n-            TokenExpander::BuiltinDerive(expander.clone()),\n-            mbe::TokenMap::default(),\n-        ))),\n     }\n }\n "}, {"sha": "f32d5786af9589eeab8263fbbbc5b26fa5e2a179", "filename": "crates/ra_hir_ty/src/autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_hir_ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_hir_ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fautoderef.rs?ref=1cbef27ff857803fbee123e6730b83e1ef154f6c", "patch": "@@ -48,7 +48,7 @@ fn deref_by_trait(\n     krate: CrateId,\n     ty: InEnvironment<&Canonical<Ty>>,\n ) -> Option<Canonical<Ty>> {\n-    let deref_trait = match db.lang_item(krate.into(), \"deref\".into())? {\n+    let deref_trait = match db.lang_item(krate, \"deref\".into())? {\n         LangItemTarget::TraitId(it) => it,\n         _ => return None,\n     };\n@@ -78,7 +78,7 @@ fn deref_by_trait(\n \n     let canonical = super::Canonical { num_vars: 1 + ty.value.num_vars, value: in_env };\n \n-    let solution = db.trait_solve(krate.into(), canonical)?;\n+    let solution = db.trait_solve(krate, canonical)?;\n \n     match &solution {\n         Solution::Unique(vars) => {"}, {"sha": "48abf97c92f205a215eae5a459851e0eb681250e", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=1cbef27ff857803fbee123e6730b83e1ef154f6c", "patch": "@@ -919,7 +919,7 @@ impl HirDisplay for ApplicationTy {\n                         {\n                             Option::None => self.parameters.0.as_ref(),\n                             Option::Some(default_parameters) => {\n-                                for (i, parameter) in self.parameters.into_iter().enumerate() {\n+                                for (i, parameter) in self.parameters.iter().enumerate() {\n                                     match (parameter, default_parameters.get(i)) {\n                                         (&Ty::Unknown, _) | (_, None) => {\n                                             non_default_parameters.push(parameter.clone())"}, {"sha": "5470dc291fa4c4f2a52b8335356afb10065e9dc8", "filename": "crates/ra_ide/src/completion/complete_postfix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs?ref=1cbef27ff857803fbee123e6730b83e1ef154f6c", "patch": "@@ -12,7 +12,7 @@ use crate::{\n };\n \n pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n-    if ctx.db.feature_flags.get(\"completion.enable-postfix\") == false {\n+    if !ctx.db.feature_flags.get(\"completion.enable-postfix\") {\n         return;\n     }\n "}, {"sha": "4894ea2f6b734b8f6d7056896d2f87a19f891b36", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=1cbef27ff857803fbee123e6730b83e1ef154f6c", "patch": "@@ -239,16 +239,15 @@ impl<'a> CompletionContext<'a> {\n                 .expr()\n                 .map(|e| e.syntax().text_range())\n                 .and_then(|r| find_node_with_range(original_file.syntax(), r));\n-            self.dot_receiver_is_ambiguous_float_literal = if let Some(ast::Expr::Literal(l)) =\n-                &self.dot_receiver\n-            {\n-                match l.kind() {\n-                    ast::LiteralKind::FloatNumber { suffix: _ } => l.token().text().ends_with('.'),\n-                    _ => false,\n+            self.dot_receiver_is_ambiguous_float_literal =\n+                if let Some(ast::Expr::Literal(l)) = &self.dot_receiver {\n+                    match l.kind() {\n+                        ast::LiteralKind::FloatNumber { .. } => l.token().text().ends_with('.'),\n+                        _ => false,\n+                    }\n+                } else {\n+                    false\n                 }\n-            } else {\n-                false\n-            }\n         }\n         if let Some(method_call_expr) = ast::MethodCallExpr::cast(parent) {\n             // As above"}, {"sha": "bdbc31704b01626c5650299de59fc08bfa0d276f", "filename": "crates/ra_ide/src/expand_macro.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_ide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_ide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fexpand_macro.rs?ref=1cbef27ff857803fbee123e6730b83e1ef154f6c", "patch": "@@ -86,21 +86,18 @@ fn insert_whitespaces(syn: SyntaxNode) -> String {\n         let mut is_next = |f: fn(SyntaxKind) -> bool, default| -> bool {\n             token_iter.peek().map(|it| f(it.kind())).unwrap_or(default)\n         };\n-        let is_last = |f: fn(SyntaxKind) -> bool, default| -> bool {\n-            last.map(|it| f(it)).unwrap_or(default)\n-        };\n+        let is_last =\n+            |f: fn(SyntaxKind) -> bool, default| -> bool { last.map(f).unwrap_or(default) };\n \n         res += &match token.kind() {\n-            k @ _ if is_text(k) && is_next(|it| !it.is_punct(), true) => {\n-                token.text().to_string() + \" \"\n-            }\n+            k if is_text(k) && is_next(|it| !it.is_punct(), true) => token.text().to_string() + \" \",\n             L_CURLY if is_next(|it| it != R_CURLY, true) => {\n                 indent += 1;\n-                let leading_space = if is_last(|it| is_text(it), false) { \" \" } else { \"\" };\n+                let leading_space = if is_last(is_text, false) { \" \" } else { \"\" };\n                 format!(\"{}{{\\n{}\", leading_space, \"  \".repeat(indent))\n             }\n             R_CURLY if is_last(|it| it != L_CURLY, true) => {\n-                indent = indent.checked_sub(1).unwrap_or(0);\n+                indent = indent.saturating_sub(1);\n                 format!(\"\\n{}}}\", \"  \".repeat(indent))\n             }\n             R_CURLY => format!(\"}}\\n{}\", \"  \".repeat(indent)),"}, {"sha": "1ec41a117bdf25808a9c8a2c9754bc2a2d7aa917", "filename": "crates/ra_ide/src/extend_selection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs?ref=1cbef27ff857803fbee123e6730b83e1ef154f6c", "patch": "@@ -138,7 +138,7 @@ fn extend_ws(root: &SyntaxNode, ws: SyntaxToken, offset: TextUnit) -> TextRange\n     ws.text_range()\n }\n \n-fn pick_best<'a>(l: SyntaxToken, r: SyntaxToken) -> SyntaxToken {\n+fn pick_best(l: SyntaxToken, r: SyntaxToken) -> SyntaxToken {\n     return if priority(&r) > priority(&l) { r } else { l };\n     fn priority(n: &SyntaxToken) -> usize {\n         match n.kind() {"}, {"sha": "0228ee7e90f6bb53f27162bf41d4cc47a719b5f9", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=1cbef27ff857803fbee123e6730b83e1ef154f6c", "patch": "@@ -17,31 +17,31 @@ use crate::{\n };\n \n pub mod tags {\n-    pub(crate) const FIELD: &'static str = \"field\";\n-    pub(crate) const FUNCTION: &'static str = \"function\";\n-    pub(crate) const MODULE: &'static str = \"module\";\n-    pub(crate) const TYPE: &'static str = \"type\";\n-    pub(crate) const CONSTANT: &'static str = \"constant\";\n-    pub(crate) const MACRO: &'static str = \"macro\";\n-    pub(crate) const VARIABLE: &'static str = \"variable\";\n-    pub(crate) const VARIABLE_MUT: &'static str = \"variable.mut\";\n-    pub(crate) const TEXT: &'static str = \"text\";\n-\n-    pub(crate) const TYPE_BUILTIN: &'static str = \"type.builtin\";\n-    pub(crate) const TYPE_SELF: &'static str = \"type.self\";\n-    pub(crate) const TYPE_PARAM: &'static str = \"type.param\";\n-    pub(crate) const TYPE_LIFETIME: &'static str = \"type.lifetime\";\n-\n-    pub(crate) const LITERAL_BYTE: &'static str = \"literal.byte\";\n-    pub(crate) const LITERAL_NUMERIC: &'static str = \"literal.numeric\";\n-    pub(crate) const LITERAL_CHAR: &'static str = \"literal.char\";\n-    pub(crate) const LITERAL_COMMENT: &'static str = \"comment\";\n-    pub(crate) const LITERAL_STRING: &'static str = \"string\";\n-    pub(crate) const LITERAL_ATTRIBUTE: &'static str = \"attribute\";\n-\n-    pub(crate) const KEYWORD_UNSAFE: &'static str = \"keyword.unsafe\";\n-    pub(crate) const KEYWORD_CONTROL: &'static str = \"keyword.control\";\n-    pub(crate) const KEYWORD: &'static str = \"keyword\";\n+    pub(crate) const FIELD: &str = \"field\";\n+    pub(crate) const FUNCTION: &str = \"function\";\n+    pub(crate) const MODULE: &str = \"module\";\n+    pub(crate) const TYPE: &str = \"type\";\n+    pub(crate) const CONSTANT: &str = \"constant\";\n+    pub(crate) const MACRO: &str = \"macro\";\n+    pub(crate) const VARIABLE: &str = \"variable\";\n+    pub(crate) const VARIABLE_MUT: &str = \"variable.mut\";\n+    pub(crate) const TEXT: &str = \"text\";\n+\n+    pub(crate) const TYPE_BUILTIN: &str = \"type.builtin\";\n+    pub(crate) const TYPE_SELF: &str = \"type.self\";\n+    pub(crate) const TYPE_PARAM: &str = \"type.param\";\n+    pub(crate) const TYPE_LIFETIME: &str = \"type.lifetime\";\n+\n+    pub(crate) const LITERAL_BYTE: &str = \"literal.byte\";\n+    pub(crate) const LITERAL_NUMERIC: &str = \"literal.numeric\";\n+    pub(crate) const LITERAL_CHAR: &str = \"literal.char\";\n+    pub(crate) const LITERAL_COMMENT: &str = \"comment\";\n+    pub(crate) const LITERAL_STRING: &str = \"string\";\n+    pub(crate) const LITERAL_ATTRIBUTE: &str = \"attribute\";\n+\n+    pub(crate) const KEYWORD_UNSAFE: &str = \"keyword.unsafe\";\n+    pub(crate) const KEYWORD_CONTROL: &str = \"keyword.control\";\n+    pub(crate) const KEYWORD: &str = \"keyword\";\n }\n \n #[derive(Debug)]\n@@ -258,9 +258,7 @@ fn highlight_name(db: &RootDatabase, name_kind: NameKind) -> &'static str {\n         SelfType(_) => tags::TYPE_SELF,\n         TypeParam(_) => tags::TYPE_PARAM,\n         Local(local) => {\n-            if local.is_mut(db) {\n-                tags::VARIABLE_MUT\n-            } else if local.ty(db).is_mutable_reference() {\n+            if local.is_mut(db) || local.ty(db).is_mutable_reference() {\n                 tags::VARIABLE_MUT\n             } else {\n                 tags::VARIABLE"}, {"sha": "9e207415e637c470288fe9c9ede18fb234338114", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=1cbef27ff857803fbee123e6730b83e1ef154f6c", "patch": "@@ -131,7 +131,7 @@ pub fn main_loop(\n         let feature_flags = {\n             let mut ff = FeatureFlags::default();\n             for (flag, value) in config.feature_flags {\n-                if let Err(_) = ff.set(flag.as_str(), value) {\n+                if ff.set(flag.as_str(), value).is_err() {\n                     log::error!(\"unknown feature flag: {:?}\", flag);\n                     show_message(\n                         req::MessageType::Error,"}, {"sha": "5e3b1a73f01af55442ff36a9cc7ae01e182b556a", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=1cbef27ff857803fbee123e6730b83e1ef154f6c", "patch": "@@ -164,7 +164,7 @@ pub fn handle_on_type_formatting(\n \n     // in `ra_ide`, the `on_type` invariant is that\n     // `text.char_at(position) == typed_char`.\n-    position.offset = position.offset - TextUnit::of_char('.');\n+    position.offset -= TextUnit::of_char('.');\n     let char_typed = params.ch.chars().next().unwrap_or('\\0');\n \n     // We have an assist that inserts ` ` after typing `->` in `fn foo() ->{`,"}, {"sha": "f89b23089e08ef9ab1f202cf0adb4d1a09ad17d6", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=1cbef27ff857803fbee123e6730b83e1ef154f6c", "patch": "@@ -287,19 +287,15 @@ impl WorldSnapshot {\n ///\n /// When processing non-windows path, this is essentially the same as `Url::from_file_path`.\n fn url_from_path_with_drive_lowercasing(path: impl AsRef<Path>) -> Result<Url> {\n-    let component_has_windows_drive = path\n-        .as_ref()\n-        .components()\n-        .find(|comp| {\n-            if let Component::Prefix(c) = comp {\n-                match c.kind() {\n-                    Prefix::Disk(_) | Prefix::VerbatimDisk(_) => return true,\n-                    _ => return false,\n-                }\n+    let component_has_windows_drive = path.as_ref().components().any(|comp| {\n+        if let Component::Prefix(c) = comp {\n+            match c.kind() {\n+                Prefix::Disk(_) | Prefix::VerbatimDisk(_) => return true,\n+                _ => return false,\n             }\n-            false\n-        })\n-        .is_some();\n+        }\n+        false\n+    });\n \n     // VSCode expects drive letters to be lowercased, where rust will uppercase the drive letters.\n     if component_has_windows_drive {"}, {"sha": "2c6ae565896b6ba1f8a7629f526d0485288f0aaa", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=1cbef27ff857803fbee123e6730b83e1ef154f6c", "patch": "@@ -97,7 +97,9 @@ impl Shift {\n                     tt::Leaf::Literal(lit) => lit.id = self.shift(lit.id),\n                 },\n                 tt::TokenTree::Subtree(tt) => {\n-                    tt.delimiter.as_mut().map(|it: &mut Delimiter| it.id = self.shift(it.id));\n+                    if let Some(it) = tt.delimiter.as_mut() {\n+                        it.id = self.shift(it.id);\n+                    };\n                     self.shift_all(tt)\n                 }\n             }"}, {"sha": "04a5408fefafc12c803242968fe4d70607fb86eb", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbef27ff857803fbee123e6730b83e1ef154f6c/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=1cbef27ff857803fbee123e6730b83e1ef154f6c", "patch": "@@ -168,8 +168,7 @@ pub fn let_stmt(pattern: ast::Pat, initializer: Option<ast::Expr>) -> ast::LetSt\n \n fn ast_from_text<N: AstNode>(text: &str) -> N {\n     let parse = SourceFile::parse(text);\n-    let res = parse.tree().syntax().descendants().find_map(N::cast).unwrap();\n-    res\n+    parse.tree().syntax().descendants().find_map(N::cast).unwrap()\n }\n \n pub mod tokens {"}]}