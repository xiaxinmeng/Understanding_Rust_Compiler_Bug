{"sha": "55abc0bc907b84b0fe7a9a4793c1549dad978762", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YWJjMGJjOTA3Yjg0YjBmZTdhOWE0NzkzYzE1NDlkYWQ5Nzg3NjI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-05T12:26:07Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-04T09:17:36Z"}, "message": "Also prevent mutation fields directly", "tree": {"sha": "b2cb2396d41f397fbc6c6250ed9c007cf634816f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2cb2396d41f397fbc6c6250ed9c007cf634816f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55abc0bc907b84b0fe7a9a4793c1549dad978762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55abc0bc907b84b0fe7a9a4793c1549dad978762", "html_url": "https://github.com/rust-lang/rust/commit/55abc0bc907b84b0fe7a9a4793c1549dad978762", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55abc0bc907b84b0fe7a9a4793c1549dad978762/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1894a5fe2c72a1e22897026f34e5f9035cc169ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/1894a5fe2c72a1e22897026f34e5f9035cc169ff", "html_url": "https://github.com/rust-lang/rust/commit/1894a5fe2c72a1e22897026f34e5f9035cc169ff"}], "stats": {"total": 82, "additions": 57, "deletions": 25}, "files": [{"sha": "b124f8b1c0be94d5597b53ba09f46041b5cbea1f", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/55abc0bc907b84b0fe7a9a4793c1549dad978762/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55abc0bc907b84b0fe7a9a4793c1549dad978762/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=55abc0bc907b84b0fe7a9a4793c1549dad978762", "patch": "@@ -187,13 +187,15 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                             kind: UnsafetyViolationKind::BorrowPacked(lint_root)\n                         }], &[]);\n                     }\n-                    let is_freeze = base\n-                        .ty(self.mir, self.tcx)\n-                        .to_ty(self.tcx)\n-                        .is_freeze(self.tcx, self.param_env, self.source_info.span);\n-                    if context.is_mutating_use() || !is_freeze {\n-                        self.check_mut_borrowing_layout_constrained_field(place);\n-                    }\n+                }\n+                let is_borrow_of_interior_mut = context.is_borrow() && !base\n+                    .ty(self.mir, self.tcx)\n+                    .to_ty(self.tcx)\n+                    .is_freeze(self.tcx, self.param_env, self.source_info.span);\n+                if context.is_mutating_use() || is_borrow_of_interior_mut {\n+                    self.check_mut_borrowing_layout_constrained_field(\n+                        place, context.is_mutating_use(),\n+                    );\n                 }\n                 let old_source_info = self.source_info;\n                 if let &Place::Local(local) = base {\n@@ -360,6 +362,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     fn check_mut_borrowing_layout_constrained_field(\n         &mut self,\n         mut place: &Place<'tcx>,\n+        is_mut_use: bool,\n     ) {\n         while let &Place::Projection(box Projection {\n             ref base, ref elem\n@@ -371,17 +374,26 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                         ty::Adt(def, _) => match self.tcx.layout_scalar_valid_range(def.did) {\n                             (Bound::Unbounded, Bound::Unbounded) => {},\n                             _ => {\n+                                let (description, details) = if is_mut_use {\n+                                    (\n+                                        \"mutation of layout constrained field\",\n+                                        \"mutating layout constrained fields cannot statically be \\\n+                                        checked for valid values\",\n+                                    )\n+                                } else {\n+                                    (\n+                                        \"borrow of layout constrained field with interior \\\n+                                        mutability\",\n+                                        \"references to fields of layout constrained fields \\\n+                                        lose the constraints. Coupled with interior mutability, \\\n+                                        the field can be changed to invalid values\",\n+                                    )\n+                                };\n                                 let source_info = self.source_info;\n                                 self.register_violations(&[UnsafetyViolation {\n                                     source_info,\n-                                    description: Symbol::intern(\n-                                        \"borrow of layout constrained field\",\n-                                    ).as_interned_str(),\n-                                    details:\n-                                        Symbol::intern(\n-                                            \"references to fields of layout constrained fields \\\n-                                            lose the constraints\",\n-                                        ).as_interned_str(),\n+                                    description: Symbol::intern(description).as_interned_str(),\n+                                    details: Symbol::intern(details).as_interned_str(),\n                                     kind: UnsafetyViolationKind::MinConstFn,\n                                 }], &[]);\n                             }"}, {"sha": "68ba120b279c02a80bdde064cea4bd3fe7f581ba", "filename": "src/test/ui/unsafe/ranged_ints2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55abc0bc907b84b0fe7a9a4793c1549dad978762/src%2Ftest%2Fui%2Funsafe%2Franged_ints2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55abc0bc907b84b0fe7a9a4793c1549dad978762/src%2Ftest%2Fui%2Funsafe%2Franged_ints2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints2.rs?ref=55abc0bc907b84b0fe7a9a4793c1549dad978762", "patch": "@@ -5,5 +5,5 @@\n pub(crate) struct NonZero<T>(pub(crate) T);\n fn main() {\n     let mut x = unsafe { NonZero(1) };\n-    let y = &mut x.0; //~ ERROR borrow of layout constrained field is unsafe\n+    let y = &mut x.0; //~ ERROR mutation of layout constrained field is unsafe\n }"}, {"sha": "ae63f47ed74a7b6bb2f2d0922eb43636bd5f23ae", "filename": "src/test/ui/unsafe/ranged_ints2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55abc0bc907b84b0fe7a9a4793c1549dad978762/src%2Ftest%2Fui%2Funsafe%2Franged_ints2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55abc0bc907b84b0fe7a9a4793c1549dad978762/src%2Ftest%2Fui%2Funsafe%2Franged_ints2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints2.stderr?ref=55abc0bc907b84b0fe7a9a4793c1549dad978762", "patch": "@@ -1,10 +1,10 @@\n-error[E0133]: borrow of layout constrained field is unsafe and requires unsafe function or block\n+error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n   --> $DIR/ranged_ints2.rs:8:13\n    |\n-LL |     let y = &mut x.0; //~ ERROR borrow of layout constrained field is unsafe\n-   |             ^^^^^^^^ borrow of layout constrained field\n+LL |     let y = &mut x.0; //~ ERROR mutation of layout constrained field is unsafe\n+   |             ^^^^^^^^ mutation of layout constrained field\n    |\n-   = note: references to fields of layout constrained fields lose the constraints\n+   = note: mutating layout constrained fields cannot statically be checked for valid values\n \n error: aborting due to previous error\n "}, {"sha": "47d67fac6785c651f030b15970cc7d16caea7dd4", "filename": "src/test/ui/unsafe/ranged_ints3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55abc0bc907b84b0fe7a9a4793c1549dad978762/src%2Ftest%2Fui%2Funsafe%2Franged_ints3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55abc0bc907b84b0fe7a9a4793c1549dad978762/src%2Ftest%2Fui%2Funsafe%2Franged_ints3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints3.rs?ref=55abc0bc907b84b0fe7a9a4793c1549dad978762", "patch": "@@ -7,5 +7,5 @@ use std::cell::Cell;\n pub(crate) struct NonZero<T>(pub(crate) T);\n fn main() {\n     let mut x = unsafe { NonZero(Cell::new(1)) };\n-    let y = &x.0; //~ ERROR borrow of layout constrained field is unsafe\n+    let y = &x.0; //~ ERROR borrow of layout constrained field with interior mutability\n }"}, {"sha": "311a058fdb07f81e8f7e8447fd705428b7d1bdf4", "filename": "src/test/ui/unsafe/ranged_ints3.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55abc0bc907b84b0fe7a9a4793c1549dad978762/src%2Ftest%2Fui%2Funsafe%2Franged_ints3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55abc0bc907b84b0fe7a9a4793c1549dad978762/src%2Ftest%2Fui%2Funsafe%2Franged_ints3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints3.stderr?ref=55abc0bc907b84b0fe7a9a4793c1549dad978762", "patch": "@@ -1,10 +1,10 @@\n-error[E0133]: borrow of layout constrained field is unsafe and requires unsafe function or block\n+error[E0133]: borrow of layout constrained field with interior mutability is unsafe and requires unsafe function or block\n   --> $DIR/ranged_ints3.rs:10:13\n    |\n-LL |     let y = &x.0; //~ ERROR borrow of layout constrained field is unsafe\n-   |             ^^^^ borrow of layout constrained field\n+LL |     let y = &x.0; //~ ERROR borrow of layout constrained field with interior mutability\n+   |             ^^^^ borrow of layout constrained field with interior mutability\n    |\n-   = note: references to fields of layout constrained fields lose the constraints\n+   = note: references to fields of layout constrained fields lose the constraints. Coupled with interior mutability, the field can be changed to invalid values\n \n error: aborting due to previous error\n "}, {"sha": "d8632c48434f25f1653ea41aeec4c889b2739e65", "filename": "src/test/ui/unsafe/ranged_ints4.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/55abc0bc907b84b0fe7a9a4793c1549dad978762/src%2Ftest%2Fui%2Funsafe%2Franged_ints4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55abc0bc907b84b0fe7a9a4793c1549dad978762/src%2Ftest%2Fui%2Funsafe%2Franged_ints4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints4.rs?ref=55abc0bc907b84b0fe7a9a4793c1549dad978762", "patch": "@@ -0,0 +1,9 @@\n+#![feature(rustc_attrs)]\n+\n+#[rustc_layout_scalar_valid_range_start(1)]\n+#[repr(transparent)]\n+pub(crate) struct NonZero<T>(pub(crate) T);\n+fn main() {\n+    let mut x = unsafe { NonZero(1) };\n+    x.0 = 0; //~ ERROR mutation of layout constrained field is unsafe\n+}"}, {"sha": "c6468b643b41a8473270353fd29b2c9bb6f0a582", "filename": "src/test/ui/unsafe/ranged_ints4.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/55abc0bc907b84b0fe7a9a4793c1549dad978762/src%2Ftest%2Fui%2Funsafe%2Franged_ints4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55abc0bc907b84b0fe7a9a4793c1549dad978762/src%2Ftest%2Fui%2Funsafe%2Franged_ints4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints4.stderr?ref=55abc0bc907b84b0fe7a9a4793c1549dad978762", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n+  --> $DIR/ranged_ints4.rs:8:5\n+   |\n+LL |     x.0 = 0; //~ ERROR mutation of layout constrained field is unsafe\n+   |     ^^^^^^^ mutation of layout constrained field\n+   |\n+   = note: mutating layout constrained fields cannot statically be checked for valid values\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}]}