{"sha": "1e9bef916f471e43fcd18593f95374ac42acf99e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlOWJlZjkxNmY0NzFlNDNmY2QxODU5M2Y5NTM3NGFjNDJhY2Y5OWU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-02-26T08:25:16Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-03-17T21:40:59Z"}, "message": "Fixed-size byte string literals (RFC 339)", "tree": {"sha": "b49b5b74f7180f5f777be0d7361f52f2e0a9d03b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b49b5b74f7180f5f777be0d7361f52f2e0a9d03b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e9bef916f471e43fcd18593f95374ac42acf99e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e9bef916f471e43fcd18593f95374ac42acf99e", "html_url": "https://github.com/rust-lang/rust/commit/1e9bef916f471e43fcd18593f95374ac42acf99e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e9bef916f471e43fcd18593f95374ac42acf99e/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfac337daab9b86971bcb3db61382ac44f94621c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfac337daab9b86971bcb3db61382ac44f94621c", "html_url": "https://github.com/rust-lang/rust/commit/bfac337daab9b86971bcb3db61382ac44f94621c"}], "stats": {"total": 143, "additions": 100, "deletions": 43}, "files": [{"sha": "abae8154df6047a518dc4d7635acc38cd6ccf64d", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1e9bef916f471e43fcd18593f95374ac42acf99e/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e9bef916f471e43fcd18593f95374ac42acf99e/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=1e9bef916f471e43fcd18593f95374ac42acf99e", "patch": "@@ -75,14 +75,7 @@ pub fn const_lit(cx: &CrateContext, e: &ast::Expr, lit: &ast::Lit)\n         ast::LitBool(b) => C_bool(cx, b),\n         ast::LitStr(ref s, _) => C_str_slice(cx, (*s).clone()),\n         ast::LitBinary(ref data) => {\n-            let g = addr_of(cx, C_bytes(cx, &data[..]), \"binary\", e.id);\n-            let base = ptrcast(g, Type::i8p(cx));\n-            let prev_const = cx.const_unsized().borrow_mut()\n-                               .insert(base, g);\n-            assert!(prev_const.is_none() || prev_const == Some(g));\n-            assert_eq!(abi::FAT_PTR_ADDR, 0);\n-            assert_eq!(abi::FAT_PTR_EXTRA, 1);\n-            C_struct(cx, &[base, C_uint(cx, data.len())], false)\n+            addr_of(cx, C_bytes(cx, &data[..]), \"binary\", e.id)\n         }\n     }\n }"}, {"sha": "5520c889aa317962f4e5198c5f61e8942a737237", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1e9bef916f471e43fcd18593f95374ac42acf99e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e9bef916f471e43fcd18593f95374ac42acf99e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1e9bef916f471e43fcd18593f95374ac42acf99e", "patch": "@@ -2505,10 +2505,11 @@ fn check_lit<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n \n     match lit.node {\n         ast::LitStr(..) => ty::mk_str_slice(tcx, tcx.mk_region(ty::ReStatic), ast::MutImmutable),\n-        ast::LitBinary(..) => {\n-            ty::mk_slice(tcx,\n-                         tcx.mk_region(ty::ReStatic),\n-                         ty::mt{ ty: tcx.types.u8, mutbl: ast::MutImmutable })\n+        ast::LitBinary(ref v) => {\n+            ty::mk_rptr(tcx, tcx.mk_region(ty::ReStatic), ty::mt {\n+                ty: ty::mk_vec(tcx, tcx.types.u8, Some(v.len())),\n+                mutbl: ast::MutImmutable,\n+            })\n         }\n         ast::LitByte(_) => tcx.types.u8,\n         ast::LitChar(_) => tcx.types.char,"}, {"sha": "1591a9d4d29ee7690f56fa558b117dc31ae77ed1", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1e9bef916f471e43fcd18593f95374ac42acf99e/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e9bef916f471e43fcd18593f95374ac42acf99e/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=1e9bef916f471e43fcd18593f95374ac42acf99e", "patch": "@@ -451,6 +451,23 @@ impl IntoBytes for Vec<u8> {\n     fn into_bytes(self) -> Vec<u8> { self }\n }\n \n+macro_rules! array_impls {\n+    ($($N: expr)+) => {\n+        $(\n+            impl<'a> IntoBytes for &'a [u8; $N] {\n+                fn into_bytes(self) -> Vec<u8> { self.to_vec() }\n+            }\n+        )+\n+    }\n+}\n+\n+array_impls! {\n+     0  1  2  3  4  5  6  7  8  9\n+    10 11 12 13 14 15 16 17 18 19\n+    20 21 22 23 24 25 26 27 28 29\n+    30 31 32\n+}\n+\n #[cfg(test)]\n mod tests {\n     use prelude::v1::*;"}, {"sha": "43eec695274208213e2a1f4e9850a2c58879037f", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e9bef916f471e43fcd18593f95374ac42acf99e/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e9bef916f471e43fcd18593f95374ac42acf99e/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=1e9bef916f471e43fcd18593f95374ac42acf99e", "patch": "@@ -622,7 +622,7 @@ mod tests {\n \n     #[test]\n     fn test_read_line() {\n-        let in_buf = b\"a\\nb\\nc\";\n+        let in_buf: &[u8] = b\"a\\nb\\nc\";\n         let mut reader = BufReader::with_capacity(2, in_buf);\n         let mut s = String::new();\n         reader.read_line(&mut s).unwrap();\n@@ -640,7 +640,7 @@ mod tests {\n \n     #[test]\n     fn test_lines() {\n-        let in_buf = b\"a\\nb\\nc\";\n+        let in_buf: &[u8] = b\"a\\nb\\nc\";\n         let reader = BufReader::with_capacity(2, in_buf);\n         let mut it = reader.lines();\n         assert_eq!(it.next(), Some(Ok(\"a\".to_string())));"}, {"sha": "bfcea75ad6aeebfc05e05eead96802445a8cbc8f", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1e9bef916f471e43fcd18593f95374ac42acf99e/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e9bef916f471e43fcd18593f95374ac42acf99e/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=1e9bef916f471e43fcd18593f95374ac42acf99e", "patch": "@@ -129,6 +129,23 @@ impl<'a> BufRead for Cursor<&'a mut [u8]> { buffer!(); }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> BufRead for Cursor<Vec<u8>> { buffer!(); }\n \n+macro_rules! array_impls {\n+    ($($N: expr)+) => {\n+        $(\n+            impl<'a> io::Seek for Cursor<&'a [u8; $N]> { seek!(); }\n+            impl<'a> Read for Cursor<&'a [u8; $N]> { read!(); }\n+            impl<'a> BufRead for Cursor<&'a [u8; $N]> { buffer!(); }\n+        )+\n+    }\n+}\n+\n+array_impls! {\n+     0  1  2  3  4  5  6  7  8  9\n+    10 11 12 13 14 15 16 17 18 19\n+    20 21 22 23 24 25 26 27 28 29\n+    30 31 32\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Write for Cursor<&'a mut [u8]> {\n     fn write(&mut self, data: &[u8]) -> io::Result<usize> {"}, {"sha": "413184c84d2a8e2c9c2373c911b6bdf65e01ff3a", "filename": "src/libstd/old_io/util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e9bef916f471e43fcd18593f95374ac42acf99e/src%2Flibstd%2Fold_io%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e9bef916f471e43fcd18593f95374ac42acf99e/src%2Flibstd%2Fold_io%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Futil.rs?ref=1e9bef916f471e43fcd18593f95374ac42acf99e", "patch": "@@ -445,7 +445,8 @@ mod test {\n \n     #[test]\n     fn limit_reader_buffer() {\n-        let r = &mut b\"0123456789\\n0123456789\\n\";\n+        let mut r: &[u8] = b\"0123456789\\n0123456789\\n\";\n+        let r = &mut r;\n         {\n             let mut r = LimitReader::new(r.by_ref(), 3);\n             assert_eq!(r.read_line(), Ok(\"012\".to_string()));"}, {"sha": "cb7ee36183deab0e3d3d5a6585fecaabaf1186b5", "filename": "src/libstd/old_path/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1e9bef916f471e43fcd18593f95374ac42acf99e/src%2Flibstd%2Fold_path%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e9bef916f471e43fcd18593f95374ac42acf99e/src%2Flibstd%2Fold_path%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fmod.rs?ref=1e9bef916f471e43fcd18593f95374ac42acf99e", "patch": "@@ -895,6 +895,26 @@ impl BytesContainer for [u8] {\n     }\n }\n \n+macro_rules! array_impls {\n+    ($($N: expr)+) => {\n+        $(\n+            impl BytesContainer for [u8; $N] {\n+                #[inline]\n+                fn container_as_bytes(&self) -> &[u8] {\n+                    &self[..]\n+                }\n+            }\n+        )+\n+    }\n+}\n+\n+array_impls! {\n+     0  1  2  3  4  5  6  7  8  9\n+    10 11 12 13 14 15 16 17 18 19\n+    20 21 22 23 24 25 26 27 28 29\n+    30 31 32\n+}\n+\n impl BytesContainer for Vec<u8> {\n     #[inline]\n     fn container_as_bytes(&self) -> &[u8] {"}, {"sha": "263e8bf057055295e9263b6e48f2868f1a13e4dd", "filename": "src/libstd/old_path/posix.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1e9bef916f471e43fcd18593f95374ac42acf99e/src%2Flibstd%2Fold_path%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e9bef916f471e43fcd18593f95374ac42acf99e/src%2Flibstd%2Fold_path%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fposix.rs?ref=1e9bef916f471e43fcd18593f95374ac42acf99e", "patch": "@@ -632,9 +632,9 @@ mod tests {\n             );\n         }\n \n-        t!(v: b\"a/b/c\", filename, Some(b\"c\"));\n-        t!(v: b\"a/b/c\\xFF\", filename, Some(b\"c\\xFF\"));\n-        t!(v: b\"a/b\\xFF/c\", filename, Some(b\"c\"));\n+        t!(v: b\"a/b/c\", filename, Some(&b\"c\"[..]));\n+        t!(v: b\"a/b/c\\xFF\", filename, Some(&b\"c\\xFF\"[..]));\n+        t!(v: b\"a/b\\xFF/c\", filename, Some(&b\"c\"[..]));\n         t!(s: \"a/b/c\", filename, Some(\"c\"), opt);\n         t!(s: \"/a/b/c\", filename, Some(\"c\"), opt);\n         t!(s: \"a\", filename, Some(\"a\"), opt);\n@@ -656,9 +656,9 @@ mod tests {\n         t!(s: \"..\", dirname, \"..\");\n         t!(s: \"../..\", dirname, \"../..\");\n \n-        t!(v: b\"hi/there.txt\", filestem, Some(b\"there\"));\n-        t!(v: b\"hi/there\\x80.txt\", filestem, Some(b\"there\\x80\"));\n-        t!(v: b\"hi/there.t\\x80xt\", filestem, Some(b\"there\"));\n+        t!(v: b\"hi/there.txt\", filestem, Some(&b\"there\"[..]));\n+        t!(v: b\"hi/there\\x80.txt\", filestem, Some(&b\"there\\x80\"[..]));\n+        t!(v: b\"hi/there.t\\x80xt\", filestem, Some(&b\"there\"[..]));\n         t!(s: \"hi/there.txt\", filestem, Some(\"there\"), opt);\n         t!(s: \"hi/there\", filestem, Some(\"there\"), opt);\n         t!(s: \"there.txt\", filestem, Some(\"there\"), opt);\n@@ -672,9 +672,9 @@ mod tests {\n         t!(s: \"..\", filestem, None, opt);\n         t!(s: \"../..\", filestem, None, opt);\n \n-        t!(v: b\"hi/there.txt\", extension, Some(b\"txt\"));\n-        t!(v: b\"hi/there\\x80.txt\", extension, Some(b\"txt\"));\n-        t!(v: b\"hi/there.t\\x80xt\", extension, Some(b\"t\\x80xt\"));\n+        t!(v: b\"hi/there.txt\", extension, Some(&b\"txt\"[..]));\n+        t!(v: b\"hi/there\\x80.txt\", extension, Some(&b\"txt\"[..]));\n+        t!(v: b\"hi/there.t\\x80xt\", extension, Some(&b\"t\\x80xt\"[..]));\n         t!(v: b\"hi/there\", extension, None);\n         t!(v: b\"hi/there\\x80\", extension, None);\n         t!(s: \"hi/there.txt\", extension, Some(\"txt\"), opt);\n@@ -756,8 +756,8 @@ mod tests {\n         t!(s: \"a/b/c\", [\"d\", \"/e\"], \"/e\");\n         t!(s: \"a/b/c\", [\"d\", \"/e\", \"f\"], \"/e/f\");\n         t!(s: \"a/b/c\", [\"d\".to_string(), \"e\".to_string()], \"a/b/c/d/e\");\n-        t!(v: b\"a/b/c\", [b\"d\", b\"e\"], b\"a/b/c/d/e\");\n-        t!(v: b\"a/b/c\", [b\"d\", b\"/e\", b\"f\"], b\"/e/f\");\n+        t!(v: b\"a/b/c\", [&b\"d\"[..], &b\"e\"[..]], b\"a/b/c/d/e\");\n+        t!(v: b\"a/b/c\", [&b\"d\"[..], &b\"/e\"[..], &b\"f\"[..]], b\"/e/f\");\n         t!(v: b\"a/b/c\", [b\"d\".to_vec(), b\"e\".to_vec()], b\"a/b/c/d/e\");\n     }\n \n@@ -983,10 +983,10 @@ mod tests {\n             )\n         }\n \n-        t!(v: Path::new(b\"a/b/c\"), Some(b\"c\"), b\"a/b\", Some(b\"c\"), None);\n-        t!(v: Path::new(b\"a/b/\\xFF\"), Some(b\"\\xFF\"), b\"a/b\", Some(b\"\\xFF\"), None);\n-        t!(v: Path::new(b\"hi/there.\\xFF\"), Some(b\"there.\\xFF\"), b\"hi\",\n-              Some(b\"there\"), Some(b\"\\xFF\"));\n+        t!(v: Path::new(b\"a/b/c\"), Some(&b\"c\"[..]), b\"a/b\", Some(&b\"c\"[..]), None);\n+        t!(v: Path::new(b\"a/b/\\xFF\"), Some(&b\"\\xFF\"[..]), b\"a/b\", Some(&b\"\\xFF\"[..]), None);\n+        t!(v: Path::new(b\"hi/there.\\xFF\"), Some(&b\"there.\\xFF\"[..]), b\"hi\",\n+              Some(&b\"there\"[..]), Some(&b\"\\xFF\"[..]));\n         t!(s: Path::new(\"a/b/c\"), Some(\"c\"), Some(\"a/b\"), Some(\"c\"), None);\n         t!(s: Path::new(\".\"), None, Some(\".\"), None, None);\n         t!(s: Path::new(\"/\"), None, Some(\"/\"), None, None);"}, {"sha": "3199cf2fcacb8e729598f4792e42960dee9124bc", "filename": "src/libstd/old_path/windows.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1e9bef916f471e43fcd18593f95374ac42acf99e/src%2Flibstd%2Fold_path%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e9bef916f471e43fcd18593f95374ac42acf99e/src%2Flibstd%2Fold_path%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fwindows.rs?ref=1e9bef916f471e43fcd18593f95374ac42acf99e", "patch": "@@ -1397,7 +1397,7 @@ mod tests {\n             )\n         }\n \n-        t!(v: b\"a\\\\b\\\\c\", filename, Some(b\"c\"));\n+        t!(v: b\"a\\\\b\\\\c\", filename, Some(&b\"c\"[..]));\n         t!(s: \"a\\\\b\\\\c\", filename_str, \"c\");\n         t!(s: \"\\\\a\\\\b\\\\c\", filename_str, \"c\");\n         t!(s: \"a\", filename_str, \"a\");\n@@ -1461,7 +1461,7 @@ mod tests {\n         t!(s: \"\\\\\\\\.\\\\foo\", dirname_str, \"\\\\\\\\.\\\\foo\");\n         t!(s: \"\\\\\\\\?\\\\a\\\\b\\\\\", dirname_str, \"\\\\\\\\?\\\\a\");\n \n-        t!(v: b\"hi\\\\there.txt\", filestem, Some(b\"there\"));\n+        t!(v: b\"hi\\\\there.txt\", filestem, Some(&b\"there\"[..]));\n         t!(s: \"hi\\\\there.txt\", filestem_str, \"there\");\n         t!(s: \"hi\\\\there\", filestem_str, \"there\");\n         t!(s: \"there.txt\", filestem_str, \"there\");\n@@ -1476,7 +1476,7 @@ mod tests {\n         t!(s: \"..\\\\..\", filestem_str, None, opt);\n         // filestem is based on filename, so we don't need the full set of prefix tests\n \n-        t!(v: b\"hi\\\\there.txt\", extension, Some(b\"txt\"));\n+        t!(v: b\"hi\\\\there.txt\", extension, Some(&b\"txt\"[..]));\n         t!(v: b\"hi\\\\there\", extension, None);\n         t!(s: \"hi\\\\there.txt\", extension_str, Some(\"txt\"), opt);\n         t!(s: \"hi\\\\there\", extension_str, None, opt);\n@@ -1603,8 +1603,8 @@ mod tests {\n         t!(s: \"a\\\\b\\\\c\", [\"d\", \"\\\\e\"], \"\\\\e\");\n         t!(s: \"a\\\\b\\\\c\", [\"d\", \"\\\\e\", \"f\"], \"\\\\e\\\\f\");\n         t!(s: \"a\\\\b\\\\c\", [\"d\".to_string(), \"e\".to_string()], \"a\\\\b\\\\c\\\\d\\\\e\");\n-        t!(v: b\"a\\\\b\\\\c\", [b\"d\", b\"e\"], b\"a\\\\b\\\\c\\\\d\\\\e\");\n-        t!(v: b\"a\\\\b\\\\c\", [b\"d\", b\"\\\\e\", b\"f\"], b\"\\\\e\\\\f\");\n+        t!(v: b\"a\\\\b\\\\c\", [&b\"d\"[..], &b\"e\"[..]], b\"a\\\\b\\\\c\\\\d\\\\e\");\n+        t!(v: b\"a\\\\b\\\\c\", [&b\"d\"[..], &b\"\\\\e\"[..], &b\"f\"[..]], b\"\\\\e\\\\f\");\n         t!(v: b\"a\\\\b\\\\c\", [b\"d\".to_vec(), b\"e\".to_vec()],\n            b\"a\\\\b\\\\c\\\\d\\\\e\");\n     }\n@@ -1898,7 +1898,7 @@ mod tests {\n             )\n         }\n \n-        t!(v: Path::new(b\"a\\\\b\\\\c\"), Some(b\"c\"), b\"a\\\\b\", Some(b\"c\"), None);\n+        t!(v: Path::new(b\"a\\\\b\\\\c\"), Some(&b\"c\"[..]), b\"a\\\\b\", Some(&b\"c\"[..]), None);\n         t!(s: Path::new(\"a\\\\b\\\\c\"), Some(\"c\"), Some(\"a\\\\b\"), Some(\"c\"), None);\n         t!(s: Path::new(\".\"), None, Some(\".\"), None, None);\n         t!(s: Path::new(\"\\\\\"), None, Some(\"\\\\\"), None, None);"}, {"sha": "abeda3964dd7b525835772d13d74d1f49e9f5054", "filename": "src/test/run-pass/byte-literals.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1e9bef916f471e43fcd18593f95374ac42acf99e/src%2Ftest%2Frun-pass%2Fbyte-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e9bef916f471e43fcd18593f95374ac42acf99e/src%2Ftest%2Frun-pass%2Fbyte-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbyte-literals.rs?ref=1e9bef916f471e43fcd18593f95374ac42acf99e", "patch": "@@ -13,9 +13,13 @@\n \n static FOO: u8 = b'\\xF0';\n static BAR: &'static [u8] = b\"a\\xF0\\t\";\n+static BAR_FIXED: &'static [u8; 3] = b\"a\\xF0\\t\";\n static BAZ: &'static [u8] = br\"a\\n\";\n \n pub fn main() {\n+    let bar: &'static [u8] = b\"a\\xF0\\t\";\n+    let bar_fixed: &'static [u8; 3] = b\"a\\xF0\\t\";\n+\n     assert_eq!(b'a', 97u8);\n     assert_eq!(b'\\n', 10u8);\n     assert_eq!(b'\\r', 13u8);\n@@ -44,19 +48,23 @@ pub fn main() {\n                  b\", expected);\n     let expected: &[_] = &[97u8, 240u8, 9u8];\n     assert_eq!(BAR, expected);\n+    assert_eq!(BAR_FIXED, expected);\n+    assert_eq!(bar, expected);\n+    assert_eq!(bar_fixed, expected);\n \n-    let val: &[_] = &[97u8, 10u8];\n+    let val = &[97u8, 10u8];\n     match val {\n         b\"a\\n\" => {},\n         _ => panic!(),\n     }\n \n-    let buf = vec!(97u8, 98, 99, 100);\n-    assert_eq!(match &buf[0..3] {\n-         b\"def\" => 1_usize,\n-         b\"abc\" => 2_usize,\n-         _ => 3_usize\n-    }, 2);\n+    // FIXME: There are no DST coercions &[T; N] -> &[T] in patterns\n+    // let buf = vec!(97u8, 98, 99, 100);\n+    // assert_eq!(match &buf[0..3] {\n+    //      b\"def\" => 1_usize,\n+    //      b\"abc\" => 2_usize,\n+    //      _ => 3_usize\n+    // }, 2);\n \n     let expected: &[_] = &[97u8, 92u8, 110u8];\n     assert_eq!(BAZ, expected);"}]}