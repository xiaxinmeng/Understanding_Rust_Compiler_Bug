{"sha": "f39c0d6b0a7b80959956a6e006dfc3406f8141e3", "node_id": "C_kwDOAAsO6NoAKGYzOWMwZDZiMGE3YjgwOTU5OTU2YTZlMDA2ZGZjMzQwNmY4MTQxZTM", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-06-24T11:43:56Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-06-24T11:43:56Z"}, "message": "address review", "tree": {"sha": "bc93476773f29d3263c904de4657f060371873f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc93476773f29d3263c904de4657f060371873f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f39c0d6b0a7b80959956a6e006dfc3406f8141e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f39c0d6b0a7b80959956a6e006dfc3406f8141e3", "html_url": "https://github.com/rust-lang/rust/commit/f39c0d6b0a7b80959956a6e006dfc3406f8141e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f39c0d6b0a7b80959956a6e006dfc3406f8141e3/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38814fc03900c2adceb021472027aed28b5714ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/38814fc03900c2adceb021472027aed28b5714ed", "html_url": "https://github.com/rust-lang/rust/commit/38814fc03900c2adceb021472027aed28b5714ed"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "b127b264b834f82dd70918e0fb098335ab00c4ac", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f39c0d6b0a7b80959956a6e006dfc3406f8141e3/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39c0d6b0a7b80959956a6e006dfc3406f8141e3/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=f39c0d6b0a7b80959956a6e006dfc3406f8141e3", "patch": "@@ -159,6 +159,9 @@ impl<'tcx> Cx<'tcx> {\n         Expr { temp_lifetime, ty: adjustment.target, span, kind }\n     }\n \n+    /// Lowers a cast expression.\n+    ///\n+    /// Dealing with user type annotations is left to the caller.\n     fn mirror_expr_cast(\n         &mut self,\n         source: &'tcx hir::Expr<'tcx>,\n@@ -198,25 +201,23 @@ impl<'tcx> Cx<'tcx> {\n             };\n \n             let res = self.typeck_results().qpath_res(qpath, source.hir_id);\n-            let (discr_did, discr_offset, discr_ty, substs) = {\n-                let ty = self.typeck_results().node_type(source.hir_id);\n-                let ty::Adt(adt_def, substs) = ty.kind() else {\n+            let ty = self.typeck_results().node_type(source.hir_id);\n+            let ty::Adt(adt_def, substs) = ty.kind() else {\n                     return ExprKind::Cast { source: self.mirror_expr(source)};\n                 };\n-                let Res::Def(\n+            let Res::Def(\n                             DefKind::Ctor(CtorOf::Variant, CtorKind::Const),\n                             variant_ctor_id,\n                         ) = res else {\n                             return ExprKind::Cast { source: self.mirror_expr(source)};\n                         };\n \n-                let idx = adt_def.variant_index_with_ctor_id(variant_ctor_id);\n-                let (d, o) = adt_def.discriminant_def_for_variant(idx);\n-                use rustc_middle::ty::util::IntTypeExt;\n-                let ty = adt_def.repr().discr_type();\n-                let ty = ty.to_ty(tcx);\n-                (d, o, ty, substs)\n-            };\n+            let idx = adt_def.variant_index_with_ctor_id(variant_ctor_id);\n+            let (discr_did, discr_offset) = adt_def.discriminant_def_for_variant(idx);\n+\n+            use rustc_middle::ty::util::IntTypeExt;\n+            let ty = adt_def.repr().discr_type();\n+            let discr_ty = ty.to_ty(tcx);\n \n             let param_env_ty = self.param_env.and(discr_ty);\n             let size = tcx\n@@ -231,10 +232,9 @@ impl<'tcx> Cx<'tcx> {\n             let offset = self.thir.exprs.push(Expr { temp_lifetime, ty: discr_ty, span, kind });\n \n             let source = match discr_did {\n+                // in case we are offsetting from a computed discriminant\n+                // and not the beginning of discriminants (which is always `0`)\n                 Some(did) => {\n-                    // in case we are offsetting from a computed discriminant\n-                    // and not the beginning of discriminants (which is always `0`)\n-\n                     let kind = ExprKind::NamedConst { def_id: did, substs, user_ty: None };\n                     let lhs =\n                         self.thir.exprs.push(Expr { temp_lifetime, ty: discr_ty, span, kind });"}]}