{"sha": "07bbc4133de98caca7610fa270d51a5d351f6209", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YmJjNDEzM2RlOThjYWNhNzYxMGZhMjcwZDUxYTVkMzUxZjYyMDk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-31T01:37:27Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:02:00Z"}, "message": "libextra: Remove unnecessary `@mut`s", "tree": {"sha": "051dcebf66d86d4124ba40c4f35b28192b1f75c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/051dcebf66d86d4124ba40c4f35b28192b1f75c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07bbc4133de98caca7610fa270d51a5d351f6209", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07bbc4133de98caca7610fa270d51a5d351f6209", "html_url": "https://github.com/rust-lang/rust/commit/07bbc4133de98caca7610fa270d51a5d351f6209", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07bbc4133de98caca7610fa270d51a5d351f6209/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1d6f5ed510574beae78711798fe434caea35baa", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1d6f5ed510574beae78711798fe434caea35baa", "html_url": "https://github.com/rust-lang/rust/commit/c1d6f5ed510574beae78711798fe434caea35baa"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "1f119ca9db4a47b04cfde6010b24139129b29d0f", "filename": "src/libextra/term.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/07bbc4133de98caca7610fa270d51a5d351f6209/src%2Flibextra%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bbc4133de98caca7610fa270d51a5d351f6209/src%2Flibextra%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterm.rs?ref=07bbc4133de98caca7610fa270d51a5d351f6209", "patch": "@@ -113,7 +113,8 @@ impl<T: Writer> Terminal<T> {\n             return Err(entry.unwrap_err());\n         }\n \n-        let ti = parse(entry.unwrap(), false);\n+        let mut file = entry.unwrap();\n+        let ti = parse(&mut file, false);\n         if ti.is_err() {\n             return Err(ti.unwrap_err());\n         }"}, {"sha": "8cbb090269783c16f3697b95d5bf0f4576365cff", "filename": "src/libextra/terminfo/searcher.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/07bbc4133de98caca7610fa270d51a5d351f6209/src%2Flibextra%2Fterminfo%2Fsearcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bbc4133de98caca7610fa270d51a5d351f6209/src%2Flibextra%2Fterminfo%2Fsearcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fsearcher.rs?ref=07bbc4133de98caca7610fa270d51a5d351f6209", "patch": "@@ -11,10 +11,9 @@\n /// Implement ncurses-compatible database discovery\n /// Does not support hashed database, only filesystem!\n \n-use std::{os, str};\n-use std::os::getenv;\n-use std::io;\n use std::io::File;\n+use std::os::getenv;\n+use std::{os, str};\n \n /// Return path to database entry for `term`\n pub fn get_dbpath_for_term(term: &str) -> Option<~Path> {\n@@ -74,9 +73,14 @@ pub fn get_dbpath_for_term(term: &str) -> Option<~Path> {\n }\n \n /// Return open file for `term`\n-pub fn open(term: &str) -> Result<@mut io::Reader, ~str> {\n+pub fn open(term: &str) -> Result<File, ~str> {\n     match get_dbpath_for_term(term) {\n-        Some(x) => Ok(@mut File::open(x) as @mut io::Reader),\n+        Some(x) => {\n+            match File::open(x) {\n+                Some(file) => Ok(file),\n+                None => Err(~\"error opening file\"),\n+            }\n+        }\n         None => Err(format!(\"could not find terminfo entry for {}\", term))\n     }\n }"}, {"sha": "79fb9e3935a9942bc645ca97f03ddcb011597295", "filename": "src/libextra/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/07bbc4133de98caca7610fa270d51a5d351f6209/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bbc4133de98caca7610fa270d51a5d351f6209/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=07bbc4133de98caca7610fa270d51a5d351f6209", "patch": "@@ -949,7 +949,8 @@ impl MetricMap {\n \n     /// Write MetricDiff to a file.\n     pub fn save(&self, p: &Path) {\n-        self.to_json().to_pretty_writer(@mut File::create(p) as @mut io::Writer);\n+        let mut file = File::create(p);\n+        self.to_json().to_pretty_writer(&mut file)\n     }\n \n     /// Compare against another MetricMap. Optionally compare all"}, {"sha": "ef6c9e7f9cd5e35dc23b8051e40d3a0fd725c40d", "filename": "src/libextra/uuid.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07bbc4133de98caca7610fa270d51a5d351f6209/src%2Flibextra%2Fuuid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bbc4133de98caca7610fa270d51a5d351f6209/src%2Flibextra%2Fuuid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuuid.rs?ref=07bbc4133de98caca7610fa270d51a5d351f6209", "patch": "@@ -796,8 +796,8 @@ mod test {\n         use serialize::{Encodable, Decodable};\n \n         let u = Uuid::new_v4();\n-        let wr = @mut MemWriter::new();\n-        u.encode(&mut ebml::writer::Encoder(wr));\n+        let mut wr = MemWriter::new();\n+        u.encode(&mut ebml::writer::Encoder(&mut wr));\n         let doc = ebml::reader::Doc(wr.inner_ref().as_slice());\n         let u2 = Decodable::decode(&mut ebml::reader::Decoder(doc));\n         assert_eq!(u, u2);"}, {"sha": "874e3c70af046e7e3be38f9fb5b4d78e7b751a3a", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07bbc4133de98caca7610fa270d51a5d351f6209/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bbc4133de98caca7610fa270d51a5d351f6209/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=07bbc4133de98caca7610fa270d51a5d351f6209", "patch": "@@ -173,8 +173,8 @@ impl Database {\n \n     // FIXME #4330: This should have &mut self and should set self.db_dirty to false.\n     fn save(&self) {\n-        let f = @mut File::create(&self.db_filename);\n-        self.db_cache.to_json().to_pretty_writer(f as @mut io::Writer);\n+        let mut f = File::create(&self.db_filename);\n+        self.db_cache.to_json().to_pretty_writer(&mut f);\n     }\n \n     fn load(&mut self) {\n@@ -184,14 +184,16 @@ impl Database {\n             Err(e) => fail!(\"Couldn't load workcache database {}: {}\",\n                             self.db_filename.display(),\n                             e.desc),\n-            Ok(r) =>\n-                match json::from_reader(@mut r.unwrap() as @mut io::Reader) {\n+            Ok(r) => {\n+                let mut stream = r.unwrap();\n+                match json::from_reader(&mut stream) {\n                     Err(e) => fail!(\"Couldn't parse workcache database (from file {}): {}\",\n                                     self.db_filename.display(), e.to_str()),\n                     Ok(r) => {\n                         let mut decoder = json::Decoder::new(r);\n                         self.db_cache = Decodable::decode(&mut decoder);\n                     }\n+                }\n             }\n         }\n     }"}]}