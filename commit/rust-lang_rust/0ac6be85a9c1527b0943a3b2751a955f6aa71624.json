{"sha": "0ac6be85a9c1527b0943a3b2751a955f6aa71624", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYzZiZTg1YTljMTUyN2IwOTQzYTNiMjc1MWE5NTVmNmFhNzE2MjQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-30T19:39:11Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-30T19:39:11Z"}, "message": "Add a COMP_deref to lvals for explicit-derefs, modify typechecker to implicitly deref in only *some* contexts.", "tree": {"sha": "af1a4c4aad70c04ca34ff20216d00876ba2be919", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af1a4c4aad70c04ca34ff20216d00876ba2be919"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ac6be85a9c1527b0943a3b2751a955f6aa71624", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac6be85a9c1527b0943a3b2751a955f6aa71624", "html_url": "https://github.com/rust-lang/rust/commit/0ac6be85a9c1527b0943a3b2751a955f6aa71624", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ac6be85a9c1527b0943a3b2751a955f6aa71624/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e4a10790f388afcf75adc55c21139505ac0d3f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e4a10790f388afcf75adc55c21139505ac0d3f8", "html_url": "https://github.com/rust-lang/rust/commit/8e4a10790f388afcf75adc55c21139505ac0d3f8"}], "stats": {"total": 379, "additions": 224, "deletions": 155}, "files": [{"sha": "7edfd432e4d48557bd9e36153c957f9e53180070", "filename": "src/boot/fe/ast.ml", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0ac6be85a9c1527b0943a3b2751a955f6aa71624/src%2Fboot%2Ffe%2Fast.ml", "raw_url": "https://github.com/rust-lang/rust/raw/0ac6be85a9c1527b0943a3b2751a955f6aa71624/src%2Fboot%2Ffe%2Fast.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fast.ml?ref=0ac6be85a9c1527b0943a3b2751a955f6aa71624", "patch": "@@ -337,6 +337,7 @@ and lit =\n and lval_component =\n     COMP_named of name_component\n   | COMP_atom of atom\n+  | COMP_deref\n \n \n (* identifying the name_base here is sufficient to identify the full lval *)\n@@ -862,24 +863,21 @@ and fmt_atom_opts (ff:Format.formatter) (az:(atom option) array) : unit =\n     az;\n   fmt ff \")\"\n \n-and fmt_lval_component (ff:Format.formatter) (lvc:lval_component) : unit =\n-  match lvc with\n-      COMP_named nc -> fmt_name_component ff nc\n-    | COMP_atom a ->\n-        begin\n-          fmt ff \"(\";\n-          fmt_atom ff a;\n-          fmt ff \")\"\n-        end\n-\n and fmt_lval (ff:Format.formatter) (l:lval) : unit =\n   match l with\n       LVAL_base nbi -> fmt_name_base ff nbi.node\n     | LVAL_ext (lv, lvc) ->\n         begin\n-          fmt_lval ff lv;\n-          fmt ff \".\";\n-          fmt_lval_component ff lvc\n+          match lvc with\n+              COMP_named nc ->\n+                fmt_lval ff lv;\n+                fmt ff \".\";\n+                fmt_name_component ff nc\n+            | COMP_atom a ->\n+                fmt_bracketed \"(\" \")\" fmt_atom ff a;\n+            | COMP_deref ->\n+                fmt ff \"*\";\n+                fmt_lval ff lv\n         end\n \n and fmt_stmt (ff:Format.formatter) (s:stmt) : unit =\n@@ -1336,8 +1334,8 @@ and fmt_crate (ff:Format.formatter) (c:crate) : unit =\n \n let sprintf_expr = sprintf_fmt fmt_expr;;\n let sprintf_name = sprintf_fmt fmt_name;;\n+let sprintf_name_component = sprintf_fmt fmt_name_component;;\n let sprintf_lval = sprintf_fmt fmt_lval;;\n-let sprintf_lval_component = sprintf_fmt fmt_lval_component;;\n let sprintf_atom = sprintf_fmt fmt_atom;;\n let sprintf_slot = sprintf_fmt fmt_slot;;\n let sprintf_slot_key = sprintf_fmt fmt_slot_key;;"}, {"sha": "2e422d1e82af0217bd2338e0f974f44dc8636d18", "filename": "src/boot/me/resolve.ml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0ac6be85a9c1527b0943a3b2751a955f6aa71624/src%2Fboot%2Fme%2Fresolve.ml", "raw_url": "https://github.com/rust-lang/rust/raw/0ac6be85a9c1527b0943a3b2751a955f6aa71624/src%2Fboot%2Fme%2Fresolve.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fresolve.ml?ref=0ac6be85a9c1527b0943a3b2751a955f6aa71624", "patch": "@@ -636,7 +636,8 @@ let type_resolving_visitor\n           Ast.LVAL_ext (base, ext) ->\n             let ext =\n               match ext with\n-                  Ast.COMP_named (Ast.COMP_ident _)\n+                  Ast.COMP_deref\n+                | Ast.COMP_named (Ast.COMP_ident _)\n                 | Ast.COMP_named (Ast.COMP_idx _)\n                 | Ast.COMP_atom (Ast.ATOM_literal _) -> ext\n                 | Ast.COMP_atom (Ast.ATOM_lval lv) ->"}, {"sha": "19ef774da6ba43be571e7c10a90a15768bb4149b", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0ac6be85a9c1527b0943a3b2751a955f6aa71624/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/0ac6be85a9c1527b0943a3b2751a955f6aa71624/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=0ac6be85a9c1527b0943a3b2751a955f6aa71624", "patch": "@@ -557,7 +557,8 @@ let rec lval_slots (cx:ctxt) (lv:Ast.lval) : node_id array =\n           if referent_is_slot cx referent\n           then [| referent |]\n           else [| |]\n-    | Ast.LVAL_ext (lv, Ast.COMP_named _) -> lval_slots cx lv\n+    | Ast.LVAL_ext (lv, Ast.COMP_named _)\n+    | Ast.LVAL_ext (lv, Ast.COMP_deref) -> lval_slots cx lv\n     | Ast.LVAL_ext (lv, Ast.COMP_atom a) ->\n         Array.append (lval_slots cx lv) (atom_slots cx a)\n \n@@ -1074,11 +1075,11 @@ let rec simplified_ty (t:Ast.ty) : Ast.ty =\n     | _ -> t\n ;;\n \n-let project_type\n+let rec project_type\n     (base_ty:Ast.ty)\n     (comp:Ast.lval_component)\n     : Ast.ty =\n-  match (simplified_ty base_ty, comp) with\n+  match (base_ty, comp) with\n       (Ast.TY_rec elts, Ast.COMP_named (Ast.COMP_ident id)) ->\n         begin\n           match atab_search elts id with\n@@ -1096,10 +1097,30 @@ let project_type\n     | (Ast.TY_obj (_, fns), Ast.COMP_named (Ast.COMP_ident id)) ->\n         (Ast.TY_fn (Hashtbl.find fns id))\n \n+    | (Ast.TY_exterior t, Ast.COMP_deref) -> t\n+\n+    (* Exterior, mutable and constrained are transparent to the\n+     * other lval-ext forms: x.y and x.(y).\n+     *)\n+    | (Ast.TY_exterior t, _)\n+    | (Ast.TY_mutable t, _)\n+    | (Ast.TY_constrained (t, _), _) -> project_type t comp\n+\n     | (_,_) ->\n         bug ()\n-          \"project_ty: bad lval-ext: %a indexed by %a\"\n-          Ast.sprintf_ty base_ty Ast.sprintf_lval_component comp\n+          \"project_ty: bad lval-ext: %s\"\n+          (match comp with\n+               Ast.COMP_atom at ->\n+                 Printf.sprintf \"%a.(%a)\"\n+                   Ast.sprintf_ty base_ty\n+                   Ast.sprintf_atom at\n+             | Ast.COMP_named nc ->\n+                 Printf.sprintf \"%a.%a\"\n+                   Ast.sprintf_ty base_ty\n+                   Ast.sprintf_name_component nc\n+             | Ast.COMP_deref ->\n+                 Printf.sprintf \"*(%a)\"\n+                   Ast.sprintf_ty base_ty)\n ;;\n \n let exports_permit (view:Ast.mod_view) (ident:Ast.ident) : bool =\n@@ -1129,8 +1150,8 @@ let rec lval_item (cx:ctxt) (lval:Ast.lval) : Ast.mod_item =\n                     | Ast.COMP_named (Ast.COMP_app (i, args)) -> (i, args)\n                     | _ ->\n                         bug ()\n-                          \"unhandled lval-component '%a' in Semant.lval_item\"\n-                          Ast.sprintf_lval_component comp\n+                          \"unhandled lval-component in '%a' in lval_item\"\n+                          Ast.sprintf_lval lval\n                 in\n                   match htab_search items i with\n                     | Some sub when exports_permit view i ->"}, {"sha": "4969d86e88be489e2892dfa9ada8a8be05ea1a8e", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 182, "deletions": 133, "changes": 315, "blob_url": "https://github.com/rust-lang/rust/blob/0ac6be85a9c1527b0943a3b2751a955f6aa71624/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/0ac6be85a9c1527b0943a3b2751a955f6aa71624/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=0ac6be85a9c1527b0943a3b2751a955f6aa71624", "patch": "@@ -5,6 +5,7 @@ type tyspec =\n     TYSPEC_equiv of tyvar\n   | TYSPEC_all\n   | TYSPEC_resolved of (Ast.ty_param array) * Ast.ty\n+  | TYSPEC_exterior of tyvar                  (* @ of some t *)\n   | TYSPEC_callable of (tyvar * tyvar array)  (* out, ins *)\n   | TYSPEC_collection of tyvar                (* vec or str *)\n   | TYSPEC_comparable                         (* comparable with = and != *)\n@@ -105,6 +106,10 @@ let rec tyspec_to_str (ts:tyspec) : string =\n       | TYSPEC_equiv tv ->\n           fmt_tyspec ff (!tv)\n \n+      | TYSPEC_exterior tv ->\n+          fmt ff \"@\";\n+          fmt_tyspec ff (!tv)\n+\n       | TYSPEC_callable (out, ins) ->\n           fmt_obb ff;\n           fmt ff \"callable fn(\";\n@@ -198,40 +203,42 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n   let visitor (cx:ctxt) (inner:Walk.visitor) : Walk.visitor =\n \n     let rec unify_slot\n+        (auto_deref:bool)\n         (slot:Ast.slot)\n         (id_opt:node_id option)\n         (tv:tyvar) : unit =\n       match id_opt with\n-          Some id -> unify_tyvars (Hashtbl.find bindings id) tv\n+          Some id -> unify_tyvars auto_deref (Hashtbl.find bindings id) tv\n         | None ->\n             match slot.Ast.slot_ty with\n                 None -> bug () \"untyped unidentified slot\"\n-              | Some ty -> unify_ty ty tv\n+              | Some ty -> unify_ty auto_deref ty tv\n \n     and check_sane_tyvar tv =\n       match !tv with\n           TYSPEC_resolved (_, (Ast.TY_named _)) ->\n             bug () \"named-type in type checker\"\n         | _ -> ()\n \n-    and unify_tyvars  (av:tyvar) (bv:tyvar) : unit =\n-      iflog cx (fun _ ->\n-                  log cx \"unifying types:\";\n-                  log cx \"input tyvar A: %s\" (tyspec_to_str !av);\n-                  log cx \"input tyvar B: %s\" (tyspec_to_str !bv));\n-      check_sane_tyvar av;\n-      check_sane_tyvar bv;\n-\n-      unify_tyvars' av bv;\n-\n-      iflog cx (fun _ ->\n-                  log cx \"unified types:\";\n-                  log cx \"output tyvar A: %s\" (tyspec_to_str !av);\n-                  log cx \"output tyvar B: %s\" (tyspec_to_str !bv));\n-      check_sane_tyvar av;\n-      check_sane_tyvar bv;\n-\n-    and unify_tyvars' (av:tyvar) (bv:tyvar) : unit =\n+    and unify_tyvars (auto_deref:bool) (av:tyvar) (bv:tyvar) : unit =\n+      let dstr = if auto_deref then \" w/ auto-deref\" else \"\" in\n+        iflog cx (fun _ ->\n+                    log cx \"unifying types%s:\" dstr;\n+                    log cx \"input tyvar A: %s\" (tyspec_to_str !av);\n+                    log cx \"input tyvar B: %s\" (tyspec_to_str !bv));\n+        check_sane_tyvar av;\n+        check_sane_tyvar bv;\n+\n+        unify_tyvars' auto_deref av bv;\n+\n+        iflog cx (fun _ ->\n+                    log cx \"unified types%s:\" dstr;\n+                    log cx \"output tyvar A: %s\" (tyspec_to_str !av);\n+                    log cx \"output tyvar B: %s\" (tyspec_to_str !bv));\n+        check_sane_tyvar av;\n+        check_sane_tyvar bv;\n+\n+    and unify_tyvars' (auto_deref:bool) (av:tyvar) (bv:tyvar) : unit =\n       let (a, b) = ((resolve_tyvar av), (resolve_tyvar bv)) in\n       let fail () =\n         err None \"mismatched types: %s vs. %s\" (tyspec_to_str !av)\n@@ -242,7 +249,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n         let c = Hashtbl.create ((Hashtbl.length a) + (Hashtbl.length b)) in\n         let merge ident tv_a =\n           if Hashtbl.mem c ident\n-          then unify_tyvars (Hashtbl.find c ident) tv_a\n+          then unify_tyvars auto_deref (Hashtbl.find c ident) tv_a\n           else Hashtbl.add c ident tv_a\n         in\n           Hashtbl.iter (Hashtbl.add c) b;\n@@ -261,7 +268,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n         in\n \n         let check_entry ident tv =\n-          unify_ty (find_ty ident) tv\n+          unify_ty auto_deref (find_ty ident) tv\n         in\n           Hashtbl.iter check_entry dct\n       in\n@@ -272,7 +279,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n         let check_entry (query:Ast.ident) tv : unit =\n           match htab_search fns query with\n               None -> fail ()\n-            | Some fn -> unify_ty (Ast.TY_fn fn) tv\n+            | Some fn -> unify_ty auto_deref (Ast.TY_fn fn) tv\n         in\n           Hashtbl.iter check_entry dct\n       in\n@@ -283,7 +290,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n           : Ast.ty =\n         match ty_a, ty_b with\n             a, b when a = b -> a\n-          | Ast.TY_exterior a, b | b, Ast.TY_exterior a ->\n+          | Ast.TY_exterior a, b | b, Ast.TY_exterior a when auto_deref ->\n               Ast.TY_exterior (unify_resolved_types a b)\n           | Ast.TY_mutable a, b | b, Ast.TY_mutable a ->\n               Ast.TY_mutable (unify_resolved_types a b)\n@@ -304,16 +311,22 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n           | Ast.TY_fn _ | Ast.TY_obj _\n           | Ast.TY_param _ | Ast.TY_native _ | Ast.TY_type -> false\n           | Ast.TY_named _ -> bug () \"unexpected named type\"\n-          | Ast.TY_exterior ty\n           | Ast.TY_mutable ty\n           | Ast.TY_constrained (ty, _) ->\n               is_comparable_or_ordered comparable ty\n+          | Ast.TY_exterior ty ->\n+              if auto_deref\n+              then\n+                is_comparable_or_ordered comparable ty\n+              else\n+                false\n       in\n \n       let rec floating (ty:Ast.ty) : bool =\n         match ty with\n             Ast.TY_mach TY_f32 | Ast.TY_mach TY_f64 -> true\n-          | Ast.TY_exterior ty | Ast.TY_mutable ty -> floating ty\n+          | Ast.TY_mutable ty -> floating ty\n+          | Ast.TY_exterior ty when auto_deref -> floating ty\n           | _ -> false\n       in\n \n@@ -324,7 +337,8 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n           | Ast.TY_mach TY_i16 | Ast.TY_mach TY_i32\n           | Ast.TY_mach TY_i64 ->\n               true\n-          | Ast.TY_exterior ty | Ast.TY_mutable ty -> integral ty\n+          | Ast.TY_mutable ty -> integral ty\n+          | Ast.TY_exterior ty when auto_deref -> integral ty\n           | _ -> false\n       in\n \n@@ -334,7 +348,8 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n         match ty with\n             Ast.TY_str -> true\n           | Ast.TY_vec _ -> true\n-          | Ast.TY_exterior ty | Ast.TY_mutable ty -> plusable ty\n+          | Ast.TY_mutable ty -> plusable ty\n+          | Ast.TY_exterior ty when auto_deref -> plusable ty\n           | _ -> numeric ty\n       in\n \n@@ -344,7 +359,8 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n           | Ast.TY_mach TY_u8 | Ast.TY_mach TY_u16 | Ast.TY_mach TY_u32\n           | Ast.TY_mach TY_i8 | Ast.TY_mach TY_i16 | Ast.TY_mach TY_i32\n               -> true\n-          | Ast.TY_exterior ty | Ast.TY_mutable ty -> loggable ty\n+          | Ast.TY_mutable ty -> loggable ty\n+          | Ast.TY_exterior ty when auto_deref -> loggable ty\n           | _ -> false\n       in\n \n@@ -355,6 +371,24 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n \n           | (TYSPEC_all, other) | (other, TYSPEC_all) -> other\n \n+          (* exterior *)\n+\n+          | (TYSPEC_exterior a',\n+             TYSPEC_resolved (_, Ast.TY_exterior _)) ->\n+               unify_tyvars auto_deref a' b; !b\n+\n+          | (TYSPEC_resolved (_, Ast.TY_exterior _),\n+             TYSPEC_exterior b') ->\n+               unify_tyvars auto_deref a b'; !b\n+\n+          | (TYSPEC_exterior a', _) when auto_deref\n+              -> unify_tyvars auto_deref a' b; !a\n+          | (_, TYSPEC_exterior b') when auto_deref\n+              -> unify_tyvars auto_deref a b'; !b\n+\n+          | (_, TYSPEC_exterior _)\n+          | (TYSPEC_exterior _, _) -> fail()\n+\n           (* resolved *)\n \n           | (TYSPEC_resolved (params_a, ty_a),\n@@ -368,7 +402,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n           | (TYSPEC_callable (out_tv, in_tvs),\n              TYSPEC_resolved (params, ty)) ->\n               let unify_in_slot i in_slot =\n-                unify_slot in_slot None in_tvs.(i)\n+                unify_slot false in_slot None in_tvs.(i)\n               in\n                 let rec unify ty =\n                   match ty with\n@@ -380,10 +414,11 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                         then\n                           fail ()\n                         else\n-                          unify_slot out_slot None out_tv;\n+                          unify_slot false out_slot None out_tv;\n                           Array.iteri unify_in_slot in_slots;\n                           ty\n-                    | Ast.TY_exterior ty -> Ast.TY_exterior (unify ty)\n+                    | Ast.TY_exterior ty when auto_deref\n+                        -> Ast.TY_exterior (unify ty)\n                     | Ast.TY_mutable ty -> Ast.TY_mutable (unify ty)\n                     | _ -> fail ()\n                 in\n@@ -393,9 +428,11 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n           | (TYSPEC_collection tv, TYSPEC_resolved (params, ty)) ->\n               let rec unify ty =\n                 match ty with\n-                    Ast.TY_vec ty -> unify_ty ty tv; ty\n-                  | Ast.TY_str -> unify_ty (Ast.TY_mach TY_u8) tv; ty\n-                  | Ast.TY_exterior ty -> Ast.TY_exterior (unify ty)\n+                    Ast.TY_vec ty -> unify_ty auto_deref ty tv; ty\n+                  | Ast.TY_str ->\n+                      unify_ty auto_deref (Ast.TY_mach TY_u8) tv; ty\n+                  | Ast.TY_exterior ty\n+                      when auto_deref -> Ast.TY_exterior (unify ty)\n                   | Ast.TY_mutable ty -> Ast.TY_mutable (unify ty)\n                   | _ -> fail ()\n               in\n@@ -421,7 +458,8 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                   | Ast.TY_obj (_, fns) ->\n                       unify_dict_with_obj_fns dct fns;\n                       ty\n-                  | Ast.TY_exterior ty -> Ast.TY_exterior (unify ty)\n+                  | Ast.TY_exterior ty\n+                      when auto_deref -> Ast.TY_exterior (unify ty)\n                   | Ast.TY_mutable ty -> Ast.TY_mutable (unify ty)\n                   | _ -> fail ()\n               in\n@@ -452,7 +490,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n           | (TYSPEC_resolved (params, ty), TYSPEC_app (tv, args))\n           | (TYSPEC_app (tv, args), TYSPEC_resolved (params, ty)) ->\n               let ty = rebuild_ty_under_params ty params args false in\n-                unify_ty ty tv;\n+                unify_ty auto_deref ty tv;\n                 TYSPEC_resolved ([| |], ty)\n \n           | (TYSPEC_resolved (params, ty), TYSPEC_record dct)\n@@ -462,7 +500,8 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                     Ast.TY_rec fields ->\n                       unify_dict_with_record_fields dct fields;\n                       ty\n-                  | Ast.TY_exterior ty -> Ast.TY_exterior (unify ty)\n+                  | Ast.TY_exterior ty\n+                      when auto_deref -> Ast.TY_exterior (unify ty)\n                   | Ast.TY_mutable ty -> Ast.TY_mutable (unify ty)\n                   | _ -> fail ()\n               in\n@@ -477,11 +516,12 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                       then fail ()\n                       else\n                         let check_elem i tv =\n-                          unify_ty (elem_tys.(i)) tv\n+                          unify_ty auto_deref (elem_tys.(i)) tv\n                         in\n                           Array.iteri check_elem tvs;\n                           ty\n-                  | Ast.TY_exterior ty -> Ast.TY_exterior (unify ty)\n+                  | Ast.TY_exterior ty\n+                      when auto_deref -> Ast.TY_exterior (unify ty)\n                   | Ast.TY_mutable ty -> Ast.TY_mutable (unify ty)\n                   | _ -> fail ()\n               in\n@@ -491,8 +531,9 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n           | (TYSPEC_vector tv, TYSPEC_resolved (params, ty)) ->\n               let rec unify ty =\n                 match ty with\n-                    Ast.TY_vec ty' -> unify_ty ty' tv; ty\n-                  | Ast.TY_exterior ty -> Ast.TY_exterior (unify ty)\n+                    Ast.TY_vec ty' -> unify_ty auto_deref ty' tv; ty\n+                  | Ast.TY_exterior ty when auto_deref ->\n+                      Ast.TY_exterior (unify ty)\n                   | Ast.TY_mutable ty -> Ast.TY_mutable (unify ty)\n                   | _ -> fail ()\n               in\n@@ -502,9 +543,9 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n \n           | (TYSPEC_callable (a_out_tv, a_in_tvs),\n              TYSPEC_callable (b_out_tv, b_in_tvs)) ->\n-              unify_tyvars a_out_tv b_out_tv;\n+              unify_tyvars false a_out_tv b_out_tv;\n               let check_in_tv i a_in_tv =\n-                unify_tyvars a_in_tv b_in_tvs.(i)\n+                unify_tyvars false a_in_tv b_in_tvs.(i)\n               in\n                 Array.iteri check_in_tv a_in_tvs;\n                 TYSPEC_callable (a_out_tv, a_in_tvs)\n@@ -537,7 +578,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n           (* collection *)\n \n           | (TYSPEC_collection av, TYSPEC_collection bv) ->\n-              unify_tyvars av bv;\n+              unify_tyvars auto_deref av bv;\n               TYSPEC_collection av\n \n           | (TYSPEC_collection av, TYSPEC_comparable)\n@@ -566,7 +607,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n \n           | (TYSPEC_collection av, TYSPEC_vector bv)\n           | (TYSPEC_vector bv, TYSPEC_collection av) ->\n-              unify_tyvars av bv;\n+              unify_tyvars auto_deref av bv;\n               TYSPEC_vector av\n \n           (* comparable *)\n@@ -735,7 +776,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n               then fail()\n               else\n                 begin\n-                  unify_tyvars tv_a tv_b;\n+                  unify_tyvars auto_deref tv_a tv_b;\n                   TYSPEC_app (tv_a, args_a)\n                 end\n \n@@ -768,7 +809,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                 else if i >= len_b\n                 then tvs_a.(i)\n                 else begin\n-                  unify_tyvars tvs_a.(i) tvs_b.(i);\n+                  unify_tyvars false tvs_a.(i) tvs_b.(i);\n                   tvs_a.(i)\n                 end\n               in\n@@ -780,26 +821,27 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n           (* vector *)\n \n           | (TYSPEC_vector av, TYSPEC_vector bv) ->\n-              unify_tyvars av bv;\n+              unify_tyvars false av bv;\n               TYSPEC_vector av\n       in\n       let c = ref result in\n         a := TYSPEC_equiv c;\n         b := TYSPEC_equiv c\n \n     and unify_ty_parametric\n+        (auto_deref:bool)\n         (ty:Ast.ty)\n         (tps:Ast.ty_param array)\n         (tv:tyvar)\n         : unit =\n-      unify_tyvars (ref (TYSPEC_resolved (tps, ty))) tv\n+      unify_tyvars auto_deref (ref (TYSPEC_resolved (tps, ty))) tv\n \n-    and unify_ty (ty:Ast.ty) (tv:tyvar) : unit =\n-      unify_ty_parametric ty [||] tv\n+    and unify_ty (auto_deref:bool) (ty:Ast.ty) (tv:tyvar) : unit =\n+      unify_ty_parametric auto_deref ty [||] tv\n \n     in\n \n-    let rec unify_lit (lit:Ast.lit) (tv:tyvar) : unit =\n+    let rec unify_lit (auto_deref:bool) (lit:Ast.lit) (tv:tyvar) : unit =\n       let ty =\n         match lit with\n             Ast.LIT_nil -> Ast.TY_nil\n@@ -809,16 +851,16 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n           | Ast.LIT_uint (_, _) -> Ast.TY_uint\n           | Ast.LIT_char _ -> Ast.TY_char\n       in\n-        unify_ty ty tv\n+        unify_ty auto_deref ty tv\n \n-    and unify_atom (atom:Ast.atom) (tv:tyvar) : unit =\n+    and unify_atom (auto_deref:bool) (atom:Ast.atom) (tv:tyvar) : unit =\n       match atom with\n           Ast.ATOM_literal { node = literal; id = _ } ->\n-            unify_lit literal tv\n+            unify_lit auto_deref literal tv\n         | Ast.ATOM_lval lval ->\n-            unify_lval lval tv\n+            unify_lval auto_deref lval tv\n \n-    and unify_expr (expr:Ast.expr) (tv:tyvar) : unit =\n+    and unify_expr (auto_deref:bool) (expr:Ast.expr) (tv:tyvar) : unit =\n       match expr with\n           Ast.EXPR_binary (binop, lhs, rhs) ->\n             let binop_sig = match binop with\n@@ -849,64 +891,64 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n               begin\n                 match binop_sig with\n                     BINOPSIG_bool_bool_bool ->\n-                      unify_atom lhs\n+                      unify_atom true lhs\n                         (ref (TYSPEC_resolved ([||], Ast.TY_bool)));\n-                      unify_atom rhs\n+                      unify_atom true rhs\n                         (ref (TYSPEC_resolved ([||], Ast.TY_bool)));\n-                      unify_ty Ast.TY_bool tv\n+                      unify_ty true Ast.TY_bool tv\n                   | BINOPSIG_comp_comp_bool ->\n                       let tv_a = ref TYSPEC_comparable in\n-                        unify_atom lhs tv_a;\n-                        unify_atom rhs tv_a;\n-                        unify_ty Ast.TY_bool tv\n+                        unify_atom true lhs tv_a;\n+                        unify_atom true rhs tv_a;\n+                        unify_ty true Ast.TY_bool tv\n                   | BINOPSIG_ord_ord_bool ->\n                       let tv_a = ref TYSPEC_ordered in\n-                        unify_atom lhs tv_a;\n-                        unify_atom rhs tv_a;\n-                        unify_ty Ast.TY_bool tv\n+                        unify_atom true lhs tv_a;\n+                        unify_atom true rhs tv_a;\n+                        unify_ty true Ast.TY_bool tv\n                   | BINOPSIG_integ_integ_integ ->\n                       let tv_a = ref TYSPEC_integral in\n-                        unify_atom lhs tv_a;\n-                        unify_atom rhs tv_a;\n-                        unify_tyvars tv tv_a\n+                        unify_atom true lhs tv_a;\n+                        unify_atom true rhs tv_a;\n+                        unify_tyvars true tv tv_a\n                   | BINOPSIG_num_num_num ->\n                       let tv_a = ref TYSPEC_numeric in\n-                        unify_atom lhs tv_a;\n-                        unify_atom rhs tv_a;\n-                        unify_tyvars tv tv_a\n+                        unify_atom true lhs tv_a;\n+                        unify_atom true rhs tv_a;\n+                        unify_tyvars true tv tv_a\n                   | BINOPSIG_plus_plus_plus ->\n                       let tv_a = ref TYSPEC_plusable in\n-                        unify_atom lhs tv_a;\n-                        unify_atom rhs tv_a;\n-                        unify_tyvars tv tv_a\n+                        unify_atom true lhs tv_a;\n+                        unify_atom true rhs tv_a;\n+                        unify_tyvars true tv tv_a\n               end\n         | Ast.EXPR_unary (unop, atom) ->\n             begin\n               match unop with\n                   Ast.UNOP_not ->\n-                    unify_atom atom\n+                    unify_atom true atom\n                       (ref (TYSPEC_resolved ([||], Ast.TY_bool)));\n-                    unify_ty Ast.TY_bool tv\n+                    unify_ty true Ast.TY_bool tv\n                 | Ast.UNOP_bitnot ->\n                     let tv_a = ref TYSPEC_integral in\n-                      unify_atom atom tv_a;\n-                      unify_tyvars tv tv_a\n+                      unify_atom true atom tv_a;\n+                      unify_tyvars true tv tv_a\n                 | Ast.UNOP_neg ->\n                     let tv_a = ref TYSPEC_numeric in\n-                      unify_atom atom tv_a;\n-                      unify_tyvars tv tv_a\n+                      unify_atom true atom tv_a;\n+                      unify_tyvars true tv tv_a\n                 | Ast.UNOP_cast t ->\n                     (* FIXME (issue #84): check cast-validity in\n                      * post-typecheck pass.  Only some casts make sense.\n                      *)\n                     let tv_a = ref TYSPEC_all in\n                     let t = Hashtbl.find cx.ctxt_all_cast_types t.id in\n-                      unify_atom atom tv_a;\n-                      unify_ty t tv\n+                      unify_atom true atom tv_a;\n+                      unify_ty true t tv\n             end\n-        | Ast.EXPR_atom atom -> unify_atom atom tv\n+        | Ast.EXPR_atom atom -> unify_atom auto_deref atom tv\n \n-    and unify_lval' (lval:Ast.lval) (tv:tyvar) : unit =\n+    and unify_lval' (auto_deref:bool) (lval:Ast.lval) (tv:tyvar) : unit =\n       let note_args args =\n         iflog cx (fun _ -> log cx \"noting lval '%a' type arguments: %a\"\n                     Ast.sprintf_lval lval Ast.sprintf_app_args args);\n@@ -928,7 +970,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                                 log cx \"lval-base slot tyspec for %a = %s\"\n                                   Ast.sprintf_lval lval (tyspec_to_str (!tv));\n                           end;\n-                        unify_slot slot (Some referent) tv\n+                        unify_slot auto_deref slot (Some referent) tv\n \n                     | _ ->\n                         let spec = (!(Hashtbl.find bindings referent)) in\n@@ -950,7 +992,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                                 ref (TYSPEC_app (tv, args))\n                             | _ -> err None \"bad lval / tyspec combination\"\n                         in\n-                          unify_tyvars (ref spec) tv\n+                          unify_tyvars auto_deref (ref spec) tv\n                 end\n           | Ast.LVAL_ext (base, comp) ->\n               let base_ts = match comp with\n@@ -971,33 +1013,36 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                       TYSPEC_tuple (Array.init (i + 1) init)\n \n                 | Ast.COMP_atom atom ->\n-                    unify_atom atom\n+                    unify_atom true atom\n                       (ref (TYSPEC_resolved ([||], Ast.TY_int)));\n                     TYSPEC_collection tv\n+\n+                | Ast.COMP_deref ->\n+                    TYSPEC_exterior tv\n               in\n               let base_tv = ref base_ts in\n-                unify_lval' base base_tv;\n+                unify_lval' auto_deref base base_tv;\n                 match !(resolve_tyvar base_tv) with\n                     TYSPEC_resolved (_, ty) ->\n-                      unify_ty (project_type ty comp) tv\n+                      unify_ty auto_deref (project_type ty comp) tv\n                   | _ ->\n                       ()\n \n-    and unify_lval (lval:Ast.lval) (tv:tyvar) : unit =\n+    and unify_lval (auto_deref:bool) (lval:Ast.lval) (tv:tyvar) : unit =\n       let id = lval_base_id lval in\n         (* Fetch lval with type components resolved. *)\n         let lval = Hashtbl.find cx.ctxt_all_lvals id in\n         iflog cx (fun _ -> log cx\n                     \"fetched resolved version of lval #%d = %a\"\n                     (int_of_node id) Ast.sprintf_lval lval);\n           Hashtbl.add lval_tyvars id tv;\n-          unify_lval' lval tv\n+          unify_lval' auto_deref lval tv\n \n     in\n     let gen_atom_tvs atoms =\n       let gen_atom_tv atom =\n         let tv = ref TYSPEC_all in\n-          unify_atom atom tv;\n+          unify_atom false atom tv;\n           tv\n       in\n         Array.map gen_atom_tv atoms\n@@ -1007,75 +1052,76 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n       let check_callable out_tv callee args =\n         let in_tvs = gen_atom_tvs args in\n         let callee_tv = ref (TYSPEC_callable (out_tv, in_tvs)) in\n-          unify_lval callee callee_tv;\n+          unify_lval false callee callee_tv;\n       in\n       match stmt.node with\n           Ast.STMT_spawn (out, _, callee, args) ->\n             let out_tv = ref (TYSPEC_resolved ([||], Ast.TY_nil)) in\n-              unify_lval out (ref (TYSPEC_resolved ([||], Ast.TY_task)));\n+              unify_lval true out (ref (TYSPEC_resolved ([||], Ast.TY_task)));\n               check_callable out_tv callee args\n \n         | Ast.STMT_init_rec (lval, fields, Some base) ->\n             let dct = Hashtbl.create 10 in\n             let tvrec = ref (TYSPEC_record dct) in\n             let add_field (ident, atom) =\n               let tv = ref TYSPEC_all in\n-                unify_atom atom tv;\n+                unify_atom true atom tv;\n                 Hashtbl.add dct ident tv\n             in\n               Array.iter add_field fields;\n               let tvbase = ref TYSPEC_all in\n-                unify_lval base tvbase;\n-                unify_tyvars tvrec tvbase;\n-                unify_lval lval tvrec\n+                unify_lval true base tvbase;\n+                unify_tyvars true tvrec tvbase;\n+                unify_lval true lval tvrec\n \n         | Ast.STMT_init_rec (lval, fields, None) ->\n             let dct = Hashtbl.create 10 in\n             let add_field (ident, atom) =\n               let tv = ref TYSPEC_all in\n-                unify_atom atom tv;\n+                unify_atom true atom tv;\n                 Hashtbl.add dct ident tv\n             in\n               Array.iter add_field fields;\n-              unify_lval lval (ref (TYSPEC_record dct))\n+              unify_lval true lval (ref (TYSPEC_record dct))\n \n         | Ast.STMT_init_tup (lval, members) ->\n             let member_to_tv atom =\n               let tv = ref TYSPEC_all in\n-                unify_atom atom tv;\n+                unify_atom true atom tv;\n                 tv\n             in\n             let member_tvs = Array.map member_to_tv members in\n-              unify_lval lval (ref (TYSPEC_tuple member_tvs))\n+              unify_lval true lval (ref (TYSPEC_tuple member_tvs))\n \n         | Ast.STMT_init_vec (lval, atoms) ->\n             let tv = ref TYSPEC_all in\n-            let unify_with_tv atom = unify_atom atom tv in\n+            let unify_with_tv atom = unify_atom true atom tv in\n               Array.iter unify_with_tv atoms;\n-              unify_lval lval (ref (TYSPEC_vector tv))\n+              unify_lval true lval (ref (TYSPEC_vector tv))\n \n         | Ast.STMT_init_str (lval, _) ->\n-            unify_lval lval (ref (TYSPEC_resolved ([||], Ast.TY_str)))\n+            unify_lval true lval (ref (TYSPEC_resolved ([||], Ast.TY_str)))\n \n         | Ast.STMT_copy (lval, expr) ->\n             let tv = ref TYSPEC_all in\n-              unify_expr expr tv;\n-              unify_lval lval tv\n+              unify_expr false expr tv;\n+              unify_lval false lval tv\n \n         | Ast.STMT_copy_binop (lval, binop, at) ->\n             let tv = ref TYSPEC_all in\n-              unify_expr (Ast.EXPR_binary (binop, Ast.ATOM_lval lval, at)) tv;\n-              unify_lval lval tv;\n+              unify_expr false\n+                (Ast.EXPR_binary (binop, Ast.ATOM_lval lval, at)) tv;\n+              unify_lval false lval tv;\n \n         | Ast.STMT_call (out, callee, args) ->\n             let out_tv = ref TYSPEC_all in\n-              unify_lval out out_tv;\n+              unify_lval false out out_tv;\n               check_callable out_tv callee args\n \n-        | Ast.STMT_log atom -> unify_atom atom (ref TYSPEC_loggable)\n+        | Ast.STMT_log atom -> unify_atom true atom (ref TYSPEC_loggable)\n \n         | Ast.STMT_check_expr expr ->\n-            unify_expr expr (ref (TYSPEC_resolved ([||], Ast.TY_bool)))\n+            unify_expr true expr (ref (TYSPEC_resolved ([||], Ast.TY_bool)))\n \n         | Ast.STMT_check (_, check_calls) ->\n             let out_tv = ref (TYSPEC_resolved ([||], Ast.TY_bool)) in\n@@ -1084,20 +1130,23 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                    check_callable out_tv callee args)\n                 check_calls\n \n-        | Ast.STMT_while { Ast.while_lval = (_, expr); Ast.while_body = _ } ->\n-            unify_expr expr (ref (TYSPEC_resolved ([||], Ast.TY_bool)))\n+        | Ast.STMT_while { Ast.while_lval = (_, expr);\n+                           Ast.while_body = _ } ->\n+            unify_expr true\n+              expr (ref (TYSPEC_resolved ([||], Ast.TY_bool)))\n \n         | Ast.STMT_if { Ast.if_test = if_test } ->\n-            unify_expr if_test (ref (TYSPEC_resolved ([||], Ast.TY_bool)));\n+            unify_expr true\n+              if_test (ref (TYSPEC_resolved ([||], Ast.TY_bool)));\n \n         | Ast.STMT_decl _ -> ()\n \n         | Ast.STMT_ret atom_opt\n         | Ast.STMT_put atom_opt ->\n             begin\n               match atom_opt with\n-                  None -> unify_ty Ast.TY_nil (retval_tv())\n-                | Some atom -> unify_atom atom (retval_tv())\n+                  None -> unify_ty false Ast.TY_nil (retval_tv())\n+                | Some atom -> unify_atom false atom (retval_tv())\n             end\n \n         | Ast.STMT_be (callee, args) ->\n@@ -1115,7 +1164,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                   begin\n                     match atom_opt with\n                         None -> residue := tv :: (!residue);\n-                      | Some atom -> unify_atom atom tv\n+                      | Some atom -> unify_atom false atom tv\n                   end;\n                   tv\n               in\n@@ -1126,28 +1175,28 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n             let arg_residue_tvs = Array.of_list (List.rev (!residue)) in\n             let callee_tv = ref (TYSPEC_callable (out_tv, in_tvs)) in\n             let bound_tv = ref (TYSPEC_callable (out_tv, arg_residue_tvs)) in\n-              unify_lval callee callee_tv;\n-              unify_lval bound bound_tv\n+              unify_lval true callee callee_tv;\n+              unify_lval false bound bound_tv\n \n         | Ast.STMT_for_each fe ->\n             let out_tv = ref TYSPEC_all in\n             let (si, _) = fe.Ast.for_each_slot in\n             let (callee, args) = fe.Ast.for_each_call in\n-              unify_slot si.node (Some si.id) out_tv;\n+              unify_slot false si.node (Some si.id) out_tv;\n               check_callable out_tv callee args\n \n         | Ast.STMT_for fo ->\n             let mem_tv = ref TYSPEC_all in\n             let seq_tv = ref (TYSPEC_collection mem_tv) in\n             let (si, _) = fo.Ast.for_slot in\n             let (_, seq) = fo.Ast.for_seq in\n-              unify_lval seq seq_tv;\n-              unify_slot si.node (Some si.id) mem_tv\n+              unify_lval true seq seq_tv;\n+              unify_slot false si.node (Some si.id) mem_tv\n \n         | Ast.STMT_alt_tag\n             { Ast.alt_tag_lval = lval; Ast.alt_tag_arms = arms } ->\n             let lval_tv = ref TYSPEC_all in\n-              unify_lval lval lval_tv;\n+              unify_lval true lval lval_tv;\n               Array.iter (fun _ -> push_pat_tv lval_tv) arms\n \n         (* FIXME (issue #52): plenty more to handle here. *)\n@@ -1174,7 +1223,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n     let enter_fn fn retspec =\n       let out = fn.Ast.fn_output_slot in\n         push_retval_tv (ref retspec);\n-        unify_slot out.node (Some out.id) (retval_tv())\n+        unify_slot false out.node (Some out.id) (retval_tv())\n     in\n \n     let visit_obj_fn_pre obj ident fn =\n@@ -1241,12 +1290,12 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n     let visit_pat_pre (pat:Ast.pat) : unit =\n       let expected = pat_tv() in\n         match pat with\n-            Ast.PAT_lit lit -> unify_lit lit expected\n+            Ast.PAT_lit lit -> unify_lit true lit expected\n \n           | Ast.PAT_tag (lval, _) ->\n               let expect ty =\n                 let tv = ref TYSPEC_all in\n-                  unify_ty ty tv;\n+                  unify_ty false ty tv;\n                   push_pat_tv tv;\n               in\n \n@@ -1258,7 +1307,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                * exactly to that function type, rebuilt under any latent type\n                * parameters applied in the lval. *)\n               let lval_tv = ref TYSPEC_all in\n-                unify_lval lval lval_tv;\n+                unify_lval false lval lval_tv;\n                 let tag_ctor_ty =\n                   match !(resolve_tyvar lval_tv) with\n                       TYSPEC_resolved (_, ty) -> ty\n@@ -1270,13 +1319,13 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                 let tag_ty_tup = tag_or_iso_ty_tup_by_name tag_ty lval_nm in\n \n                 let tag_tv = ref TYSPEC_all in\n-                  unify_ty tag_ty tag_tv;\n-                  unify_tyvars expected tag_tv;\n+                  unify_ty false tag_ty tag_tv;\n+                  unify_tyvars false expected tag_tv;\n                   List.iter expect\n                     (List.rev (Array.to_list tag_ty_tup));\n \n           | Ast.PAT_slot (sloti, _) ->\n-              unify_slot sloti.node (Some sloti.id) expected\n+              unify_slot false sloti.node (Some sloti.id) expected\n \n           | Ast.PAT_wild -> ()\n     in"}]}