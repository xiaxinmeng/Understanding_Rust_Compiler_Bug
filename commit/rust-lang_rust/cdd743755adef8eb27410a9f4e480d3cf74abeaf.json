{"sha": "cdd743755adef8eb27410a9f4e480d3cf74abeaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkZDc0Mzc1NWFkZWY4ZWIyNzQxMGE5ZjRlNDgwZDNjZjc0YWJlYWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-13T22:23:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-13T22:23:42Z"}, "message": "Auto merge of #61639 - Mark-Simulacrum:bootstrap-cleanup, r=alexcrichton\n\nBootstrap cleanup\n\nEach commit is (mostly) standalone and probably best reviewed as such. Nothing too major just some drive-by nits as I was looking through the code.\n\nr? @alexcrichton", "tree": {"sha": "a7758e60a2e3c7d05c5e8a2faf795b5386a038f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7758e60a2e3c7d05c5e8a2faf795b5386a038f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdd743755adef8eb27410a9f4e480d3cf74abeaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdd743755adef8eb27410a9f4e480d3cf74abeaf", "html_url": "https://github.com/rust-lang/rust/commit/cdd743755adef8eb27410a9f4e480d3cf74abeaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdd743755adef8eb27410a9f4e480d3cf74abeaf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e4a56b4b04ea98bb16caada30cb2418dd06e250", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e4a56b4b04ea98bb16caada30cb2418dd06e250", "html_url": "https://github.com/rust-lang/rust/commit/0e4a56b4b04ea98bb16caada30cb2418dd06e250"}, {"sha": "d728d27ef3a00734e3a13e68da1c40f371400fbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d728d27ef3a00734e3a13e68da1c40f371400fbd", "html_url": "https://github.com/rust-lang/rust/commit/d728d27ef3a00734e3a13e68da1c40f371400fbd"}], "stats": {"total": 94, "additions": 20, "deletions": 74}, "files": [{"sha": "61e53f53e9797d890e0be7c202d8789450445b01", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdd743755adef8eb27410a9f4e480d3cf74abeaf/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd743755adef8eb27410a9f4e480d3cf74abeaf/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=cdd743755adef8eb27410a9f4e480d3cf74abeaf", "patch": "@@ -1693,10 +1693,6 @@ mod __test {\n                     compiler: Compiler { host: a, stage: 1 },\n                     target: b,\n                 },\n-                compile::Std {\n-                    compiler: Compiler { host: a, stage: 2 },\n-                    target: b,\n-                },\n             ]\n         );\n         assert_eq!("}, {"sha": "eac46c144242dc295953573761721fd99729584c", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 12, "deletions": 39, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/cdd743755adef8eb27410a9f4e480d3cf74abeaf/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd743755adef8eb27410a9f4e480d3cf74abeaf/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=cdd743755adef8eb27410a9f4e480d3cf74abeaf", "patch": "@@ -46,10 +46,11 @@ macro_rules! book {\n             }\n \n             fn run(self, builder: &Builder<'_>) {\n-                builder.ensure(Rustbook {\n+                builder.ensure(RustbookSrc {\n                     target: self.target,\n                     name: INTERNER.intern_str($book_name),\n                     version: $book_ver,\n+                    src: doc_src(builder),\n                 })\n             }\n         }\n@@ -75,35 +76,8 @@ enum RustbookVersion {\n     MdBook2,\n }\n \n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-struct Rustbook {\n-    target: Interned<String>,\n-    name: Interned<String>,\n-    version: RustbookVersion,\n-}\n-\n-impl Step for Rustbook {\n-    type Output = ();\n-\n-    // rustbook is never directly called, and only serves as a shim for the nomicon and the\n-    // reference.\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.never()\n-    }\n-\n-    /// Invoke `rustbook` for `target` for the doc book `name`.\n-    ///\n-    /// This will not actually generate any documentation if the documentation has\n-    /// already been generated.\n-    fn run(self, builder: &Builder<'_>) {\n-        let src = builder.src.join(\"src/doc\");\n-        builder.ensure(RustbookSrc {\n-            target: self.target,\n-            name: self.name,\n-            src: INTERNER.intern_path(src),\n-            version: self.version,\n-        });\n-    }\n+fn doc_src(builder: &Builder<'_>) -> Interned<PathBuf> {\n+    INTERNER.intern_path(builder.src.join(\"src/doc\"))\n }\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n@@ -274,33 +248,37 @@ impl Step for TheBook {\n         let name = self.name;\n \n         // build book\n-        builder.ensure(Rustbook {\n+        builder.ensure(RustbookSrc {\n             target,\n             name: INTERNER.intern_string(name.to_string()),\n             version: RustbookVersion::MdBook2,\n+            src: doc_src(builder),\n         });\n \n         // building older edition redirects\n \n         let source_name = format!(\"{}/first-edition\", name);\n-        builder.ensure(Rustbook {\n+        builder.ensure(RustbookSrc {\n             target,\n             name: INTERNER.intern_string(source_name),\n             version: RustbookVersion::MdBook2,\n+            src: doc_src(builder),\n         });\n \n         let source_name = format!(\"{}/second-edition\", name);\n-        builder.ensure(Rustbook {\n+        builder.ensure(RustbookSrc {\n             target,\n             name: INTERNER.intern_string(source_name),\n             version: RustbookVersion::MdBook2,\n+            src: doc_src(builder),\n         });\n \n         let source_name = format!(\"{}/2018-edition\", name);\n-        builder.ensure(Rustbook {\n+        builder.ensure(RustbookSrc {\n             target,\n             name: INTERNER.intern_string(source_name),\n             version: RustbookVersion::MdBook2,\n+            src: doc_src(builder),\n         });\n \n         // build the version info page and CSS\n@@ -898,11 +876,6 @@ impl Step for UnstableBookGen {\n     fn run(self, builder: &Builder<'_>) {\n         let target = self.target;\n \n-        builder.ensure(compile::Std {\n-            compiler: builder.compiler(builder.top_stage, builder.config.build),\n-            target,\n-        });\n-\n         builder.info(&format!(\"Generating unstable book md files ({})\", target));\n         let out = builder.md_doc_out(target).join(\"unstable-book\");\n         builder.create_dir(&out);"}, {"sha": "7f652c0d7a776c31982346fc20aa18696ae37169", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cdd743755adef8eb27410a9f4e480d3cf74abeaf/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd743755adef8eb27410a9f4e480d3cf74abeaf/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=cdd743755adef8eb27410a9f4e480d3cf74abeaf", "patch": "@@ -270,14 +270,9 @@ pub struct Build {\n #[derive(Debug)]\n struct Crate {\n     name: Interned<String>,\n-    version: String,\n     deps: HashSet<Interned<String>>,\n     id: String,\n     path: PathBuf,\n-    doc_step: String,\n-    build_step: String,\n-    test_step: String,\n-    bench_step: String,\n }\n \n impl Crate {"}, {"sha": "b622b3682a7779c24fc25b8ca022cbfe7c26f3bb", "filename": "src/bootstrap/metadata.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cdd743755adef8eb27410a9f4e480d3cf74abeaf/src%2Fbootstrap%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd743755adef8eb27410a9f4e480d3cf74abeaf/src%2Fbootstrap%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetadata.rs?ref=cdd743755adef8eb27410a9f4e480d3cf74abeaf", "patch": "@@ -20,7 +20,6 @@ struct Output {\n struct Package {\n     id: String,\n     name: String,\n-    version: String,\n     source: Option<String>,\n     manifest_path: String,\n }\n@@ -84,12 +83,7 @@ fn build_krate(features: &str, build: &mut Build, resolves: &mut Vec<ResolveNode\n             let mut path = PathBuf::from(package.manifest_path);\n             path.pop();\n             build.crates.insert(name, Crate {\n-                build_step: format!(\"build-crate-{}\", name),\n-                doc_step: format!(\"doc-crate-{}\", name),\n-                test_step: format!(\"test-crate-{}\", name),\n-                bench_step: format!(\"bench-crate-{}\", name),\n                 name,\n-                version: package.version,\n                 id: package.id,\n                 deps: HashSet::new(),\n                 path,"}, {"sha": "bd77f7a91d94a1a391c2f2c32c136bbfbb919c15", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cdd743755adef8eb27410a9f4e480d3cf74abeaf/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd743755adef8eb27410a9f4e480d3cf74abeaf/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=cdd743755adef8eb27410a9f4e480d3cf74abeaf", "patch": "@@ -268,10 +268,6 @@ macro_rules! bootstrap_tool {\n         }\n \n         impl Tool {\n-            pub fn get_mode(&self) -> Mode {\n-                Mode::ToolBootstrap\n-            }\n-\n             /// Whether this tool requires LLVM to run\n             pub fn uses_llvm_tools(&self) -> bool {\n                 match self {\n@@ -659,23 +655,14 @@ impl<'a> Builder<'a> {\n     pub fn tool_cmd(&self, tool: Tool) -> Command {\n         let mut cmd = Command::new(self.tool_exe(tool));\n         let compiler = self.compiler(0, self.config.build);\n-        self.prepare_tool_cmd(compiler, tool, &mut cmd);\n-        cmd\n-    }\n-\n-    /// Prepares the `cmd` provided to be able to run the `compiler` provided.\n-    ///\n-    /// Notably this munges the dynamic library lookup path to point to the\n-    /// right location to run `compiler`.\n-    fn prepare_tool_cmd(&self, compiler: Compiler, tool: Tool, cmd: &mut Command) {\n         let host = &compiler.host;\n+        // Prepares the `cmd` provided to be able to run the `compiler` provided.\n+        //\n+        // Notably this munges the dynamic library lookup path to point to the\n+        // right location to run `compiler`.\n         let mut lib_paths: Vec<PathBuf> = vec![\n-            if compiler.stage == 0 {\n-                self.build.rustc_snapshot_libdir()\n-            } else {\n-                PathBuf::from(&self.sysroot_libdir(compiler, compiler.host))\n-            },\n-            self.cargo_out(compiler, tool.get_mode(), *host).join(\"deps\"),\n+            self.build.rustc_snapshot_libdir(),\n+            self.cargo_out(compiler, Mode::ToolBootstrap, *host).join(\"deps\"),\n         ];\n \n         // On MSVC a tool may invoke a C compiler (e.g., compiletest in run-make\n@@ -696,6 +683,7 @@ impl<'a> Builder<'a> {\n             }\n         }\n \n-        add_lib_path(lib_paths, cmd);\n+        add_lib_path(lib_paths, &mut cmd);\n+        cmd\n     }\n }"}]}