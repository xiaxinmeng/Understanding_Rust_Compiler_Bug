{"sha": "21ac19d8fefb023752645fcf2517ce0fad663bf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYWMxOWQ4ZmVmYjAyMzc1MjY0NWZjZjI1MTdjZTBmYWQ2NjNiZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-07T14:16:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-07T14:16:27Z"}, "message": "Auto merge of #57304 - davidtwco:issue-57280, r=nikomatsakis\n\nNLL: Fix bug in associated constant type annotations.\n\nFixes #57280.\n\nThis PR reverses the variance used when relating types from the type\nannotation of an associated constant - this matches the behaviour of the\nlexical borrow checker and fixes a bug whereby matching a `&'a str`\nagainst a `&'static str` would produce an error.\n\nr? @nikomatsakis", "tree": {"sha": "12d496ebd189b7cd361e51c06b7e001a3397545f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12d496ebd189b7cd361e51c06b7e001a3397545f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21ac19d8fefb023752645fcf2517ce0fad663bf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21ac19d8fefb023752645fcf2517ce0fad663bf0", "html_url": "https://github.com/rust-lang/rust/commit/21ac19d8fefb023752645fcf2517ce0fad663bf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21ac19d8fefb023752645fcf2517ce0fad663bf0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f7c44cdb2958ceb0a5d78634a704a492a241b6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f7c44cdb2958ceb0a5d78634a704a492a241b6f", "html_url": "https://github.com/rust-lang/rust/commit/1f7c44cdb2958ceb0a5d78634a704a492a241b6f"}, {"sha": "49337938cb783f98ae70cce7bf57a63d3196342f", "url": "https://api.github.com/repos/rust-lang/rust/commits/49337938cb783f98ae70cce7bf57a63d3196342f", "html_url": "https://github.com/rust-lang/rust/commit/49337938cb783f98ae70cce7bf57a63d3196342f"}], "stats": {"total": 110, "additions": 106, "deletions": 4}, "files": [{"sha": "bc7bb485563ad99b52fd07dbbe56bd8aa2fc4bfa", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/21ac19d8fefb023752645fcf2517ce0fad663bf0/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ac19d8fefb023752645fcf2517ce0fad663bf0/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=21ac19d8fefb023752645fcf2517ce0fad663bf0", "patch": "@@ -284,6 +284,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     ..\n                 },\n                 user_ty: pat_ascription_ty,\n+                variance: _,\n                 user_ty_span,\n             } => {\n                 let place =\n@@ -310,6 +311,20 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         source_info: ty_source_info,\n                         kind: StatementKind::AscribeUserType(\n                             place,\n+                            // We always use invariant as the variance here. This is because the\n+                            // variance field from the ascription refers to the variance to use\n+                            // when applying the type to the value being matched, but this\n+                            // ascription applies rather to the type of the binding. e.g., in this\n+                            // example:\n+                            //\n+                            // ```\n+                            // let x: T = <expr>\n+                            // ```\n+                            //\n+                            // We are creating an ascription that defines the type of `x` to be\n+                            // exactly `T` (i.e., with invariance). The variance field, in\n+                            // contrast, is intended to be used to relate `T` to the type of\n+                            // `<expr>`.\n                             ty::Variance::Invariant,\n                             user_ty,\n                         ),\n@@ -541,12 +556,20 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             PatternKind::Deref { ref subpattern } => {\n                 self.visit_bindings(subpattern, pattern_user_ty.deref(), f);\n             }\n-            PatternKind::AscribeUserType { ref subpattern, ref user_ty, user_ty_span } => {\n+            PatternKind::AscribeUserType {\n+                ref subpattern,\n+                ref user_ty,\n+                user_ty_span,\n+                variance: _,\n+            } => {\n                 // This corresponds to something like\n                 //\n                 // ```\n                 // let A::<'a>(_): A<'static> = ...;\n                 // ```\n+                //\n+                // Note that the variance doesn't apply here, as we are tracking the effect\n+                // of `user_ty` on any bindings contained with subpattern.\n                 let annotation = (user_ty_span, user_ty.base);\n                 let projection = UserTypeProjection {\n                     base: self.canonical_user_type_annotations.push(annotation),\n@@ -628,6 +651,7 @@ struct Ascription<'tcx> {\n     span: Span,\n     source: Place<'tcx>,\n     user_ty: PatternTypeProjection<'tcx>,\n+    variance: ty::Variance,\n }\n \n #[derive(Clone, Debug)]\n@@ -1321,7 +1345,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     source_info,\n                     kind: StatementKind::AscribeUserType(\n                         ascription.source.clone(),\n-                        ty::Variance::Covariant,\n+                        ascription.variance,\n                         user_ty,\n                     ),\n                 },"}, {"sha": "22bc3506803f23840f81b42d3ae29517b4826c22", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21ac19d8fefb023752645fcf2517ce0fad663bf0/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ac19d8fefb023752645fcf2517ce0fad663bf0/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=21ac19d8fefb023752645fcf2517ce0fad663bf0", "patch": "@@ -56,11 +56,19 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                  -> Result<(), MatchPair<'pat, 'tcx>> {\n         let tcx = self.hir.tcx();\n         match *match_pair.pattern.kind {\n-            PatternKind::AscribeUserType { ref subpattern, ref user_ty, user_ty_span } => {\n+            PatternKind::AscribeUserType {\n+                ref subpattern,\n+                variance,\n+                ref user_ty,\n+                user_ty_span\n+            } => {\n+                // Apply the type ascription to the value at `match_pair.place`, which is the\n+                // value being matched, taking the variance field into account.\n                 candidate.ascriptions.push(Ascription {\n                     span: user_ty_span,\n                     user_ty: user_ty.clone(),\n                     source: match_pair.place.clone(),\n+                    variance,\n                 });\n \n                 candidate.match_pairs.push(MatchPair::new(match_pair.place, subpattern));"}, {"sha": "ea8b2826732b455c54e8dcd6023645641a080888", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21ac19d8fefb023752645fcf2517ce0fad663bf0/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ac19d8fefb023752645fcf2517ce0fad663bf0/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=21ac19d8fefb023752645fcf2517ce0fad663bf0", "patch": "@@ -3,6 +3,7 @@ use hair::cx::Cx;\n use hair::cx::to_ref::ToRef;\n use rustc::middle::region;\n use rustc::hir;\n+use rustc::ty;\n \n use rustc_data_structures::indexed_vec::Idx;\n \n@@ -86,7 +87,8 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                     kind: Box::new(PatternKind::AscribeUserType {\n                                         user_ty: PatternTypeProjection::from_user_type(user_ty),\n                                         user_ty_span: ty.span,\n-                                        subpattern: pattern\n+                                        subpattern: pattern,\n+                                        variance: ty::Variance::Covariant,\n                                     })\n                                 };\n                             }"}, {"sha": "761bca21fec03e551e95dad283b117c7c694fafe", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/21ac19d8fefb023752645fcf2517ce0fad663bf0/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ac19d8fefb023752645fcf2517ce0fad663bf0/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=21ac19d8fefb023752645fcf2517ce0fad663bf0", "patch": "@@ -91,6 +91,25 @@ pub enum PatternKind<'tcx> {\n     AscribeUserType {\n         user_ty: PatternTypeProjection<'tcx>,\n         subpattern: Pattern<'tcx>,\n+        /// Variance to use when relating the type `user_ty` to the **type of the value being\n+        /// matched**. Typically, this is `Variance::Covariant`, since the value being matched must\n+        /// have a type that is some subtype of the ascribed type.\n+        ///\n+        /// Note that this variance does not apply for any bindings within subpatterns. The type\n+        /// assigned to those bindings must be exactly equal to the `user_ty` given here.\n+        ///\n+        /// The only place where this field is not `Covariant` is when matching constants, where\n+        /// we currently use `Contravariant` -- this is because the constant type just needs to\n+        /// be \"comparable\" to the type of the input value. So, for example:\n+        ///\n+        /// ```text\n+        /// match x { \"foo\" => .. }\n+        /// ```\n+        ///\n+        /// requires that `&'static str <: T_x`, where `T_x` is the type of `x`. Really, we should\n+        /// probably be checking for a `PartialEq` impl instead, but this preserves the behavior\n+        /// of the old type-check for now. See #57280 for details.\n+        variance: ty::Variance,\n         user_ty_span: Span,\n     },\n \n@@ -714,6 +733,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 },\n                 user_ty: PatternTypeProjection::from_user_type(user_ty),\n                 user_ty_span: span,\n+                variance: ty::Variance::Covariant,\n             };\n         }\n \n@@ -763,6 +783,9 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                                         kind: Box::new(\n                                             PatternKind::AscribeUserType {\n                                                 subpattern: pattern,\n+                                                /// Note that use `Contravariant` here. See the\n+                                                /// `variance` field documentation for details.\n+                                                variance: ty::Variance::Contravariant,\n                                                 user_ty,\n                                                 user_ty_span: span,\n                                             }\n@@ -1057,11 +1080,13 @@ impl<'tcx> PatternFoldable<'tcx> for PatternKind<'tcx> {\n             PatternKind::Wild => PatternKind::Wild,\n             PatternKind::AscribeUserType {\n                 ref subpattern,\n+                variance,\n                 ref user_ty,\n                 user_ty_span,\n             } => PatternKind::AscribeUserType {\n                 subpattern: subpattern.fold_with(folder),\n                 user_ty: user_ty.fold_with(folder),\n+                variance,\n                 user_ty_span,\n             },\n             PatternKind::Binding {"}, {"sha": "356c477f1ba36f0ef97994fddc91203b83762447", "filename": "src/test/ui/nll/issue-57280-1.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/21ac19d8fefb023752645fcf2517ce0fad663bf0/src%2Ftest%2Fui%2Fnll%2Fissue-57280-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ac19d8fefb023752645fcf2517ce0fad663bf0/src%2Ftest%2Fui%2Fnll%2Fissue-57280-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57280-1.rs?ref=21ac19d8fefb023752645fcf2517ce0fad663bf0", "patch": "@@ -0,0 +1,21 @@\n+#![feature(nll)]\n+\n+// compile-pass\n+\n+trait Foo<'a> {\n+    const C: &'a u32;\n+}\n+\n+impl<'a, T> Foo<'a> for T {\n+    const C: &'a u32 = &22;\n+}\n+\n+fn foo() {\n+    let a = 22;\n+    match &a {\n+        <() as Foo<'static>>::C => { }\n+        &_ => { }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "4fe6a96f5dcc811e70bbffc94fccee51c75ab385", "filename": "src/test/ui/nll/issue-57280.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/21ac19d8fefb023752645fcf2517ce0fad663bf0/src%2Ftest%2Fui%2Fnll%2Fissue-57280.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ac19d8fefb023752645fcf2517ce0fad663bf0/src%2Ftest%2Fui%2Fnll%2Fissue-57280.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57280.rs?ref=21ac19d8fefb023752645fcf2517ce0fad663bf0", "patch": "@@ -0,0 +1,22 @@\n+#![feature(nll)]\n+\n+// compile-pass\n+\n+trait Foo {\n+    const BLAH: &'static str;\n+}\n+\n+struct Placeholder;\n+\n+impl Foo for Placeholder {\n+    const BLAH: &'static str = \"hi\";\n+}\n+\n+fn foo(x: &str) {\n+    match x {\n+        <Placeholder as Foo>::BLAH => { }\n+        _ => { }\n+    }\n+}\n+\n+fn main() {}"}]}