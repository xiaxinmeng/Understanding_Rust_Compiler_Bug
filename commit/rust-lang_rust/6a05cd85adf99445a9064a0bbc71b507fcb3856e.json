{"sha": "6a05cd85adf99445a9064a0bbc71b507fcb3856e", "node_id": "C_kwDOAAsO6NoAKDZhMDVjZDg1YWRmOTk0NDVhOTA2NGEwYmJjNzFiNTA3ZmNiMzg1NmU", "commit": {"author": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-03-09T18:59:40Z"}, "committer": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-04-04T15:50:07Z"}, "message": "A more general implementation of `IntoDiagnosticArg` for `Binder` (Also removes `DiagArg`, as it's no longer necessary)", "tree": {"sha": "bea0fb2786e6631dd35fc9b52f7e836d07491561", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bea0fb2786e6631dd35fc9b52f7e836d07491561"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a05cd85adf99445a9064a0bbc71b507fcb3856e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a05cd85adf99445a9064a0bbc71b507fcb3856e", "html_url": "https://github.com/rust-lang/rust/commit/6a05cd85adf99445a9064a0bbc71b507fcb3856e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a05cd85adf99445a9064a0bbc71b507fcb3856e/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd18d9a584230ad696302157dac1a1a38f1bda31", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd18d9a584230ad696302157dac1a1a38f1bda31", "html_url": "https://github.com/rust-lang/rust/commit/fd18d9a584230ad696302157dac1a1a38f1bda31"}], "stats": {"total": 42, "additions": 16, "deletions": 26}, "files": [{"sha": "b129621130d4d8b34a27504999bca62a5b13bf46", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6a05cd85adf99445a9064a0bbc71b507fcb3856e/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a05cd85adf99445a9064a0bbc71b507fcb3856e/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=6a05cd85adf99445a9064a0bbc71b507fcb3856e", "patch": "@@ -1146,14 +1146,6 @@ pub struct OpaqueCapturesLifetime<'tcx> {\n     pub opaque_ty: Ty<'tcx>,\n }\n \n-pub struct DiagArg<T>(pub T);\n-\n-impl<T: ToString> IntoDiagnosticArg for DiagArg<T> {\n-    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n-        self.0.to_string().into_diagnostic_arg()\n-    }\n-}\n-\n #[derive(Subdiagnostic)]\n pub enum FunctionPointerSuggestion<'a> {\n     #[suggestion(\n@@ -1221,7 +1213,7 @@ pub enum FunctionPointerSuggestion<'a> {\n         fn_name: String,\n         #[skip_arg]\n         found_sig: Binder<'a, FnSig<'a>>,\n-        expected_sig: DiagArg<Binder<'a, FnSig<'a>>>,\n+        expected_sig: Binder<'a, FnSig<'a>>,\n     },\n     #[suggestion(\n         infer_fps_cast_both,\n@@ -1236,7 +1228,7 @@ pub enum FunctionPointerSuggestion<'a> {\n         fn_name: String,\n         #[skip_arg]\n         found_sig: Binder<'a, FnSig<'a>>,\n-        expected_sig: DiagArg<Binder<'a, FnSig<'a>>>,\n+        expected_sig: Binder<'a, FnSig<'a>>,\n     },\n }\n "}, {"sha": "b5aeca12a1f0c67c24e070ab57df6f57d977c929", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a05cd85adf99445a9064a0bbc71b507fcb3856e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a05cd85adf99445a9064a0bbc71b507fcb3856e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=6a05cd85adf99445a9064a0bbc71b507fcb3856e", "patch": "@@ -13,7 +13,7 @@ use rustc_span::{sym, BytePos, Span};\n use rustc_target::abi::FieldIdx;\n \n use crate::errors::{\n-    ConsiderAddingAwait, DiagArg, FnConsiderCasting, FnItemsAreDistinct, FnUniqTypes,\n+    ConsiderAddingAwait, FnConsiderCasting, FnItemsAreDistinct, FnUniqTypes,\n     FunctionPointerSuggestion, SuggestAccessingField, SuggestAsRefWhereAppropriate,\n     SuggestBoxingForReturnImplTrait, SuggestRemoveSemiOrReturnBinding, SuggestTuplePatternMany,\n     SuggestTuplePatternOne, TypeErrorAdditionalDiags,\n@@ -379,14 +379,14 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                         span,\n                         fn_name,\n                         found_sig: *found_sig,\n-                        expected_sig: DiagArg(*expected_sig),\n+                        expected_sig: *expected_sig,\n                     }\n                 } else {\n                     FunctionPointerSuggestion::CastBoth {\n                         span,\n                         fn_name,\n                         found_sig: *found_sig,\n-                        expected_sig: DiagArg(*expected_sig),\n+                        expected_sig: *expected_sig,\n                     }\n                 };\n "}, {"sha": "061f26384bd0bd5911b8ae5ccd79aba910f44bb8", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6a05cd85adf99445a9064a0bbc71b507fcb3856e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a05cd85adf99445a9064a0bbc71b507fcb3856e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=6a05cd85adf99445a9064a0bbc71b507fcb3856e", "patch": "@@ -15,6 +15,7 @@ use hir::def::DefKind;\n use polonius_engine::Atom;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::intern::Interned;\n+use rustc_errors::{DiagnosticArgValue, IntoDiagnosticArg};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::LangItem;\n@@ -26,7 +27,7 @@ use rustc_target::abi::{FieldIdx, VariantIdx, FIRST_VARIANT};\n use rustc_target::spec::abi::{self, Abi};\n use std::borrow::Cow;\n use std::cmp::Ordering;\n-use std::fmt;\n+use std::fmt::{self, Display};\n use std::marker::PhantomData;\n use std::ops::{ControlFlow, Deref, Range};\n use ty::util::IntTypeExt;\n@@ -877,12 +878,6 @@ impl<'tcx> PolyTraitRef<'tcx> {\n     }\n }\n \n-impl rustc_errors::IntoDiagnosticArg for PolyTraitRef<'_> {\n-    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n-        self.to_string().into_diagnostic_arg()\n-    }\n-}\n-\n /// An existential reference to a trait, where `Self` is erased.\n /// For example, the trait object `Trait<'a, 'b, X, Y>` is:\n /// ```ignore (illustrative)\n@@ -939,12 +934,6 @@ impl<'tcx> PolyExistentialTraitRef<'tcx> {\n     }\n }\n \n-impl rustc_errors::IntoDiagnosticArg for PolyExistentialTraitRef<'_> {\n-    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n-        self.to_string().into_diagnostic_arg()\n-    }\n-}\n-\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n #[derive(HashStable)]\n pub enum BoundVariableKind {\n@@ -1159,6 +1148,15 @@ impl<'tcx, T: IntoIterator> Binder<'tcx, T> {\n     }\n }\n \n+impl<'tcx, T> IntoDiagnosticArg for Binder<'tcx, T>\n+where\n+    Binder<'tcx, T>: Display,\n+{\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        self.to_string().into_diagnostic_arg()\n+    }\n+}\n+\n struct SkipBindersAt<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     index: ty::DebruijnIndex,"}]}