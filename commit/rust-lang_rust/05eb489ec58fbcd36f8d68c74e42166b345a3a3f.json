{"sha": "05eb489ec58fbcd36f8d68c74e42166b345a3a3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZWI0ODllYzU4ZmJjZDM2ZjhkNjhjNzRlNDIxNjZiMzQ1YTNhM2Y=", "commit": {"author": {"name": "Jeremy A. Kolb", "email": "jkolb@ara.com", "date": "2018-10-30T18:07:14Z"}, "committer": {"name": "Jeremy A. Kolb", "email": "jkolb@ara.com", "date": "2018-10-31T19:23:20Z"}, "message": "Useful comments from function signatures", "tree": {"sha": "17083b18fd209334833423728df1a170ea7a3905", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17083b18fd209334833423728df1a170ea7a3905"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05eb489ec58fbcd36f8d68c74e42166b345a3a3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05eb489ec58fbcd36f8d68c74e42166b345a3a3f", "html_url": "https://github.com/rust-lang/rust/commit/05eb489ec58fbcd36f8d68c74e42166b345a3a3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05eb489ec58fbcd36f8d68c74e42166b345a3a3f/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2bcd1a38636a669d2232156fa29010a82e37a3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2bcd1a38636a669d2232156fa29010a82e37a3e", "html_url": "https://github.com/rust-lang/rust/commit/d2bcd1a38636a669d2232156fa29010a82e37a3e"}], "stats": {"total": 224, "additions": 217, "deletions": 7}, "files": [{"sha": "ae40f3e8f863f2c8aaa7c826c8ffb78f2932d9f4", "filename": "crates/ra_analysis/src/descriptors/function/mod.rs", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/05eb489ec58fbcd36f8d68c74e42166b345a3a3f/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eb489ec58fbcd36f8d68c74e42166b345a3a3f/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fmod.rs?ref=05eb489ec58fbcd36f8d68c74e42166b345a3a3f", "patch": "@@ -1,8 +1,11 @@\n pub(super) mod imp;\n mod scope;\n \n+use std::cmp::{min, max};\n+\n use ra_syntax::{\n-    ast::{self, AstNode, NameOwner}\n+    ast::{self, AstNode, DocCommentsOwner, NameOwner},\n+    TextRange, TextUnit\n };\n \n use crate::{\n@@ -30,14 +33,17 @@ pub struct FnDescriptor {\n     pub label: String,\n     pub ret_type: Option<String>,\n     pub params: Vec<String>,\n+    pub doc: Option<String>\n }\n \n impl FnDescriptor {\n     pub fn new(node: ast::FnDef) -> Option<Self> {\n         let name = node.name()?.text().to_string();\n \n+        let mut doc = None;\n+\n         // Strip the body out for the label.\n-        let label: String = if let Some(body) = node.body() {\n+        let mut label: String = if let Some(body) = node.body() {\n             let body_range = body.syntax().range();\n             let label: String = node\n                 .syntax()\n@@ -50,17 +56,65 @@ impl FnDescriptor {\n             node.syntax().text().to_string()\n         };\n \n+        if let Some((comment_range, docs)) = FnDescriptor::extract_doc_comments(node) {\n+            let comment_range = comment_range.checked_sub(node.syntax().range().start()).unwrap();\n+            let start = comment_range.start().to_usize();\n+            let end = comment_range.end().to_usize();\n+\n+            // Remove the comment from the label\n+            label.replace_range(start..end, \"\");\n+\n+            // Massage markdown\n+            let mut processed_lines = Vec::new();\n+            let mut in_code_block = false;\n+            for line in docs.lines() {\n+                if line.starts_with(\"```\") {\n+                    in_code_block = !in_code_block;\n+                }\n+\n+                let line = if in_code_block && line.starts_with(\"```\") && !line.contains(\"rust\") {\n+                    \"```rust\".into()\n+                } else {\n+                    line.to_string()\n+                };\n+\n+                processed_lines.push(line);\n+            }\n+\n+            if !processed_lines.is_empty() {\n+                doc = Some(processed_lines.join(\"\\n\"));\n+            }\n+        }\n+\n         let params = FnDescriptor::param_list(node);\n         let ret_type = node.ret_type().map(|r| r.syntax().text().to_string());\n \n         Some(FnDescriptor {\n             name,\n             ret_type,\n             params,\n-            label,\n+            label: label.trim().to_owned(),\n+            doc\n         })\n     }\n \n+    fn extract_doc_comments(node: ast::FnDef) -> Option<(TextRange, String)> {\n+        if node.doc_comments().count() == 0 {\n+            return None;\n+        }\n+\n+        let comment_text = node.doc_comment_text();\n+\n+        let (begin, end) = node.doc_comments()\n+            .map(|comment| comment.syntax().range())\n+            .map(|range| (range.start().to_usize(), range.end().to_usize()))\n+            .fold((std::usize::MAX, std::usize::MIN), |acc, range| (min(acc.0, range.0), max(acc.1, range.1)));\n+\n+        let range = TextRange::from_to(TextUnit::from_usize(begin), TextUnit::from_usize(end));\n+\n+        Some((range, comment_text))\n+    }\n+\n     fn param_list(node: ast::FnDef) -> Vec<String> {\n         let mut res = vec![];\n         if let Some(param_list) = node.param_list() {"}, {"sha": "03e2df48e26d5bc43e680044cc39bd135ade1477", "filename": "crates/ra_analysis/tests/tests.rs", "status": "modified", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/05eb489ec58fbcd36f8d68c74e42166b345a3a3f/crates%2Fra_analysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eb489ec58fbcd36f8d68c74e42166b345a3a3f/crates%2Fra_analysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftests.rs?ref=05eb489ec58fbcd36f8d68c74e42166b345a3a3f", "patch": "@@ -185,6 +185,153 @@ fn bar() {\n     assert_eq!(param, Some(1));\n }\n \n+#[test]\n+fn test_fn_signature_with_docs_simple() {\n+    let (desc, param) = get_signature(\n+        r#\"\n+// test\n+fn foo(j: u32) -> u32 {\n+    j\n+}\n+\n+fn bar() {\n+    let _ = foo(<|>);\n+}\n+\"#,\n+    );\n+\n+    assert_eq!(desc.name, \"foo\".to_string());\n+    assert_eq!(desc.params, vec![\"j\".to_string()]);\n+    assert_eq!(desc.ret_type, Some(\"-> u32\".to_string()));\n+    assert_eq!(param, Some(0));\n+    assert_eq!(desc.label, \"fn foo(j: u32) -> u32\".to_string());\n+    assert_eq!(desc.doc, Some(\"test\".into()));\n+}\n+\n+#[test]\n+fn test_fn_signature_with_docs() {\n+    let (desc, param) = get_signature(\n+        r#\"\n+/// Adds one to the number given.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// let five = 5;\n+///\n+/// assert_eq!(6, my_crate::add_one(5));\n+/// ```\n+pub fn add_one(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+pub fn do() {\n+    add_one(<|>\n+}\"#,\n+    );\n+\n+    assert_eq!(desc.name, \"add_one\".to_string());\n+    assert_eq!(desc.params, vec![\"x\".to_string()]);\n+    assert_eq!(desc.ret_type, Some(\"-> i32\".to_string()));\n+    assert_eq!(param, Some(0));\n+    assert_eq!(desc.label, \"pub fn add_one(x: i32) -> i32\".to_string());\n+    assert_eq!(desc.doc, Some(\n+r#\"Adds one to the number given.\n+\n+# Examples\n+\n+```rust\n+let five = 5;\n+\n+assert_eq!(6, my_crate::add_one(5));\n+```\"#.into()));\n+}\n+\n+#[test]\n+fn test_fn_signature_with_docs_impl() {\n+    let (desc, param) = get_signature(\n+        r#\"\n+struct addr;\n+impl addr {\n+    /// Adds one to the number given.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let five = 5;\n+    ///\n+    /// assert_eq!(6, my_crate::add_one(5));\n+    /// ```\n+    pub fn add_one(x: i32) -> i32 {\n+        x + 1\n+    }\n+}\n+\n+pub fn do_it() {\n+    addr {};\n+    addr::add_one(<|>);\n+}\"#);\n+\n+    assert_eq!(desc.name, \"add_one\".to_string());\n+    assert_eq!(desc.params, vec![\"x\".to_string()]);\n+    assert_eq!(desc.ret_type, Some(\"-> i32\".to_string()));\n+    assert_eq!(param, Some(0));\n+    assert_eq!(desc.label, \"pub fn add_one(x: i32) -> i32\".to_string());\n+    assert_eq!(desc.doc, Some(\n+r#\"Adds one to the number given.\n+\n+# Examples\n+\n+```rust\n+let five = 5;\n+\n+assert_eq!(6, my_crate::add_one(5));\n+```\"#.into()));\n+}\n+\n+#[test]\n+fn test_fn_signature_with_docs_from_actix() {\n+    let (desc, param) = get_signature(\n+        r#\"\n+pub trait WriteHandler<E>\n+where\n+    Self: Actor,\n+    Self::Context: ActorContext,\n+{\n+    /// Method is called when writer emits error.\n+    ///\n+    /// If this method returns `ErrorAction::Continue` writer processing\n+    /// continues otherwise stream processing stops.\n+    fn error(&mut self, err: E, ctx: &mut Self::Context) -> Running {\n+        Running::Stop\n+    }\n+\n+    /// Method is called when writer finishes.\n+    ///\n+    /// By default this method stops actor's `Context`.\n+    fn finished(&mut self, ctx: &mut Self::Context) {\n+        ctx.stop()\n+    }\n+}\n+\n+pub fn foo() {\n+    WriteHandler r;\n+    r.finished(<|>);\n+}\n+\n+\"#);\n+\n+    assert_eq!(desc.name, \"finished\".to_string());\n+    assert_eq!(desc.params, vec![\"&mut self\".to_string(), \"ctx\".to_string()]);\n+    assert_eq!(desc.ret_type, None);\n+    assert_eq!(param, Some(1));\n+    assert_eq!(desc.doc, Some(\n+r#\"Method is called when writer finishes.\n+\n+By default this method stops actor's `Context`.\"#.into()));\n+}\n+\n+\n fn get_all_refs(text: &str) -> Vec<(FileId, TextRange)> {\n     let (offset, code) = extract_offset(text);\n     let code = code.as_str();"}, {"sha": "71be15d39c5c4854eb615359bd3ed6055ea11f43", "filename": "crates/ra_editor/src/extend_selection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05eb489ec58fbcd36f8d68c74e42166b345a3a3f/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eb489ec58fbcd36f8d68c74e42166b345a3a3f/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs?ref=05eb489ec58fbcd36f8d68c74e42166b345a3a3f", "patch": "@@ -10,7 +10,7 @@ pub fn extend_selection(file: &File, range: TextRange) -> Option<TextRange> {\n     extend(syntax.borrowed(), range)\n }\n \n-pub(crate) fn extend(root: SyntaxNodeRef, range: TextRange) -> Option<TextRange> {\n+pub fn extend(root: SyntaxNodeRef, range: TextRange) -> Option<TextRange> {\n     if range.is_empty() {\n         let offset = range.start();\n         let mut leaves = find_leaf_at_offset(root, offset);"}, {"sha": "b98461ed22093bc7bf3a3d9290e5c770d9826dcd", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05eb489ec58fbcd36f8d68c74e42166b345a3a3f/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eb489ec58fbcd36f8d68c74e42166b345a3a3f/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=05eb489ec58fbcd36f8d68c74e42166b345a3a3f", "patch": "@@ -20,7 +20,7 @@ mod typing;\n pub use self::{\n     code_actions::{add_derive, add_impl, flip_comma, introduce_variable, LocalEdit},\n     edit::{Edit, EditBuilder},\n-    extend_selection::extend_selection,\n+    extend_selection::{extend, extend_selection},\n     folding_ranges::{folding_ranges, Fold, FoldKind},\n     line_index::{LineCol, LineIndex},\n     symbols::{file_structure, file_symbols, FileSymbol, StructureNode},"}, {"sha": "20cb5f7728ddc54bf2860601b7f27d59519da066", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/05eb489ec58fbcd36f8d68c74e42166b345a3a3f/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05eb489ec58fbcd36f8d68c74e42166b345a3a3f/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=05eb489ec58fbcd36f8d68c74e42166b345a3a3f", "patch": "@@ -5,7 +5,7 @@ use languageserver_types::{\n     CodeActionResponse, Command, CompletionItem, CompletionItemKind, Diagnostic,\n     DiagnosticSeverity, DocumentSymbol, FoldingRange, FoldingRangeKind, FoldingRangeParams,\n     InsertTextFormat, Location, Position, SymbolInformation, TextDocumentIdentifier, TextEdit,\n-    RenameParams, WorkspaceEdit, PrepareRenameResponse\n+    RenameParams, WorkspaceEdit, PrepareRenameResponse, Documentation, MarkupContent, MarkupKind\n };\n use gen_lsp_server::ErrorCode;\n use ra_analysis::{FileId, FoldKind, Query, RunnableKind};\n@@ -465,9 +465,18 @@ pub fn handle_signature_help(\n             })\n             .collect();\n \n+        let documentation = if let Some(doc) = descriptor.doc {\n+            Some(Documentation::MarkupContent(MarkupContent {\n+                kind: MarkupKind::Markdown,\n+                value: doc\n+            }))\n+        } else {\n+            None\n+        };\n+\n         let sig_info = SignatureInformation {\n             label: descriptor.label,\n-            documentation: None,\n+            documentation,\n             parameters: Some(parameters),\n         };\n "}]}