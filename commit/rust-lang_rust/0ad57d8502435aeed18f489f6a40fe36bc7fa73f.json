{"sha": "0ad57d8502435aeed18f489f6a40fe36bc7fa73f", "node_id": "C_kwDOAAsO6NoAKDBhZDU3ZDg1MDI0MzVhZWVkMThmNDg5ZjZhNDBmZTM2YmM3ZmE3M2Y", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-29T06:48:39Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-05T16:44:01Z"}, "message": "Delay formatting trimmed path until lint/error is emitted", "tree": {"sha": "e9ae18bb5456145c9946347d820b9ca2c0a13c63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9ae18bb5456145c9946347d820b9ca2c0a13c63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ad57d8502435aeed18f489f6a40fe36bc7fa73f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ad57d8502435aeed18f489f6a40fe36bc7fa73f", "html_url": "https://github.com/rust-lang/rust/commit/0ad57d8502435aeed18f489f6a40fe36bc7fa73f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ad57d8502435aeed18f489f6a40fe36bc7fa73f/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d77da9da84fc89908ad01578c33c2dca8f597ffe", "url": "https://api.github.com/repos/rust-lang/rust/commits/d77da9da84fc89908ad01578c33c2dca8f597ffe", "html_url": "https://github.com/rust-lang/rust/commit/d77da9da84fc89908ad01578c33c2dca8f597ffe"}], "stats": {"total": 65, "additions": 51, "deletions": 14}, "files": [{"sha": "f3d0c759e21c6ce04613aefc6d67ee5cb8bfda11", "filename": "compiler/rustc_privacy/src/errors.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0ad57d8502435aeed18f489f6a40fe36bc7fa73f/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad57d8502435aeed18f489f6a40fe36bc7fa73f/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs?ref=0ad57d8502435aeed18f489f6a40fe36bc7fa73f", "patch": "@@ -1,3 +1,6 @@\n+use std::fmt::Display;\n+\n+use rustc_errors::IntoDiagnosticArg;\n use rustc_macros::{LintDiagnostic, SessionDiagnostic, SessionSubdiagnostic};\n use rustc_span::{Span, Symbol};\n \n@@ -35,7 +38,7 @@ pub struct ItemIsPrivate<'a> {\n     #[label]\n     pub span: Span,\n     pub kind: &'a str,\n-    pub descr: String,\n+    pub descr: FromDisplay<'a>,\n }\n \n #[derive(SessionDiagnostic)]\n@@ -55,7 +58,7 @@ pub struct InPublicInterfaceTraits<'a> {\n     pub span: Span,\n     pub vis_descr: &'static str,\n     pub kind: &'a str,\n-    pub descr: String,\n+    pub descr: FromDisplay<'a>,\n     #[label(privacy::visibility_label)]\n     pub vis_span: Span,\n }\n@@ -69,7 +72,7 @@ pub struct InPublicInterface<'a> {\n     pub span: Span,\n     pub vis_descr: &'static str,\n     pub kind: &'a str,\n-    pub descr: String,\n+    pub descr: FromDisplay<'a>,\n     #[label(privacy::visibility_label)]\n     pub vis_span: Span,\n }\n@@ -78,7 +81,7 @@ pub struct InPublicInterface<'a> {\n #[lint(privacy::from_private_dep_in_public_interface)]\n pub struct FromPrivateDependencyInPublicInterface<'a> {\n     pub kind: &'a str,\n-    pub descr: String,\n+    pub descr: FromDisplay<'a>,\n     pub krate: Symbol,\n }\n \n@@ -87,5 +90,13 @@ pub struct FromPrivateDependencyInPublicInterface<'a> {\n pub struct PrivateInPublicLint<'a> {\n     pub vis_descr: &'static str,\n     pub kind: &'a str,\n-    pub descr: String,\n+    pub descr: FromDisplay<'a>,\n+}\n+\n+pub struct FromDisplay<'a>(pub &'a dyn Display);\n+\n+impl IntoDiagnosticArg for FromDisplay<'_> {\n+    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n+        self.0.to_string().into_diagnostic_arg()\n+    }\n }"}, {"sha": "018ac8b1d99795fa29ddb4d287441503b9a73140", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0ad57d8502435aeed18f489f6a40fe36bc7fa73f/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad57d8502435aeed18f489f6a40fe36bc7fa73f/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=0ad57d8502435aeed18f489f6a40fe36bc7fa73f", "patch": "@@ -38,8 +38,9 @@ use std::ops::ControlFlow;\n use std::{cmp, fmt, mem};\n \n use errors::{\n-    FieldIsPrivate, FieldIsPrivateLabel, FromPrivateDependencyInPublicInterface, InPublicInterface,\n-    InPublicInterfaceTraits, ItemIsPrivate, PrivateInPublicLint, UnnamedItemIsPrivate,\n+    FieldIsPrivate, FieldIsPrivateLabel, FromDisplay, FromPrivateDependencyInPublicInterface,\n+    InPublicInterface, InPublicInterfaceTraits, ItemIsPrivate, PrivateInPublicLint,\n+    UnnamedItemIsPrivate,\n };\n \n ////////////////////////////////////////////////////////////////////////////////\n@@ -1082,7 +1083,7 @@ impl<'tcx> TypePrivacyVisitor<'tcx> {\n             self.tcx.sess.emit_err(ItemIsPrivate {\n                 span: self.span,\n                 kind,\n-                descr: descr.to_string(),\n+                descr: FromDisplay(descr),\n             });\n         }\n         is_error\n@@ -1255,7 +1256,9 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n                 };\n                 let kind = kind.descr(def_id);\n                 let _ = match name {\n-                    Some(name) => sess.emit_err(ItemIsPrivate { span, kind, descr: name }),\n+                    Some(name) => {\n+                        sess.emit_err(ItemIsPrivate { span, kind, descr: FromDisplay(&name) })\n+                    }\n                     None => sess.emit_err(UnnamedItemIsPrivate { span, kind }),\n                 };\n                 return;\n@@ -1723,7 +1726,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n                 self.tcx.def_span(self.item_def_id.to_def_id()),\n                 FromPrivateDependencyInPublicInterface {\n                     kind,\n-                    descr: descr.to_string(),\n+                    descr: FromDisplay(descr),\n                     krate: self.tcx.crate_name(def_id.krate),\n                 },\n             );\n@@ -1750,7 +1753,6 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n                 }\n             };\n             let span = self.tcx.def_span(self.item_def_id.to_def_id());\n-            let descr = descr.to_string();\n             if self.has_old_errors\n                 || self.in_assoc_ty\n                 || self.tcx.resolutions(()).has_pub_restricted\n@@ -1761,15 +1763,15 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n                         span,\n                         vis_descr,\n                         kind,\n-                        descr,\n+                        descr: FromDisplay(descr),\n                         vis_span,\n                     });\n                 } else {\n                     self.tcx.sess.emit_err(InPublicInterface {\n                         span,\n                         vis_descr,\n                         kind,\n-                        descr,\n+                        descr: FromDisplay(descr),\n                         vis_span,\n                     });\n                 }\n@@ -1778,7 +1780,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n                     lint::builtin::PRIVATE_IN_PUBLIC,\n                     hir_id,\n                     span,\n-                    PrivateInPublicLint { vis_descr, kind, descr },\n+                    PrivateInPublicLint { vis_descr, kind, descr: FromDisplay(descr) },\n                 );\n             }\n         }"}, {"sha": "616eb935e93d47d5454041c74e4aa08b8286caa5", "filename": "src/test/ui/lint/issue-99387.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0ad57d8502435aeed18f489f6a40fe36bc7fa73f/src%2Ftest%2Fui%2Flint%2Fissue-99387.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad57d8502435aeed18f489f6a40fe36bc7fa73f/src%2Ftest%2Fui%2Flint%2Fissue-99387.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-99387.rs?ref=0ad57d8502435aeed18f489f6a40fe36bc7fa73f", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+#![allow(private_in_public)]\n+\n+pub type Successors<'a> = impl Iterator<Item = &'a ()>;\n+\n+pub fn f<'a>() -> Successors<'a> {\n+    None.into_iter()\n+}\n+\n+trait Tr {\n+    type Item;\n+}\n+\n+impl<'a> Tr for &'a () {\n+    type Item = Successors<'a>;\n+}\n+\n+pub fn ohno<'a>() -> <&'a () as Tr>::Item {\n+    None.into_iter()\n+}\n+\n+fn main() {}"}]}