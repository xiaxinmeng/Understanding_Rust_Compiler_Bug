{"sha": "999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5OWQ1NWQ1ZjZlMjI5YjhjMTExOGFjMzVjOGNiZjNiOWM1OWUzYTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-01T19:41:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-01T19:41:30Z"}, "message": "auto merge of #12630 : alexcrichton/rust/flush-buffered, r=brson\n\nNow that we can call `flush()` in destructors, I think that it's appropriate for stdout/stderr to return buffered writers by default.\r\n\r\nThis doesn't enable certain functionality like a buffered stdin does, but it's what you want 90% of the time for performance reasons.", "tree": {"sha": "943f63f1204c1164442d0ce320a214e9f4088269", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/943f63f1204c1164442d0ce320a214e9f4088269"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1", "html_url": "https://github.com/rust-lang/rust/commit/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11ca7ec8cd897d8a036e32641b6b38d48f86d600", "url": "https://api.github.com/repos/rust-lang/rust/commits/11ca7ec8cd897d8a036e32641b6b38d48f86d600", "html_url": "https://github.com/rust-lang/rust/commit/11ca7ec8cd897d8a036e32641b6b38d48f86d600"}, {"sha": "2cb83fdd7ea4e76d4b1c830a97480521cc405625", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cb83fdd7ea4e76d4b1c830a97480521cc405625", "html_url": "https://github.com/rust-lang/rust/commit/2cb83fdd7ea4e76d4b1c830a97480521cc405625"}], "stats": {"total": 101, "additions": 66, "deletions": 35}, "files": [{"sha": "2e3b9be5f9b86ec19c18d1a9f1554700e29dce6f", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1", "patch": "@@ -297,8 +297,7 @@ pub fn run_compiler(args: &[~str]) {\n         match input {\n           d::FileInput(ref ifile) => {\n             let mut stdout = io::stdout();\n-            d::list_metadata(sess, &(*ifile),\n-                             &mut stdout as &mut io::Writer).unwrap();\n+            d::list_metadata(sess, &(*ifile), &mut stdout).unwrap();\n           }\n           d::StrInput(_) => {\n             d::early_error(\"can not list metadata for stdin\");"}, {"sha": "67e2fc00b8b49ff050efa3430d7f2e7cf1323b0c", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1", "patch": "@@ -654,8 +654,8 @@ uniform_fn_call_workaround! {\n /// use std::fmt;\n /// use std::io;\n ///\n-/// let w = &mut io::stdout() as &mut io::Writer;\n-/// format_args!(|args| { fmt::write(w, args); }, \"Hello, {}!\", \"world\");\n+/// let mut w = io::stdout();\n+/// format_args!(|args| { fmt::write(&mut w, args); }, \"Hello, {}!\", \"world\");\n /// ```\n pub fn write(output: &mut io::Writer, args: &Arguments) -> Result {\n     unsafe { write_unsafe(output, args.fmt, args.args) }"}, {"sha": "5a69815fa2947a7065a5220ec7d9b85c31a6ee0b", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1", "patch": "@@ -14,7 +14,8 @@ use cmp;\n use container::Container;\n use io::{Reader, Writer, Stream, Buffer, DEFAULT_BUF_SIZE, IoResult};\n use iter::ExactSize;\n-use option::{Some, None};\n+use ops::Drop;\n+use option::{Some, None, Option};\n use result::{Ok, Err};\n use vec::{OwnedVector, ImmutableVector, MutableVector};\n use vec;\n@@ -115,7 +116,7 @@ impl<R: Reader> Reader for BufferedReader<R> {\n \n /// Wraps a Writer and buffers output to it\n ///\n-/// Note that `BufferedWriter` will NOT flush its buffer when dropped.\n+/// This writer will be flushed when it is dropped.\n ///\n /// # Example\n ///\n@@ -130,7 +131,7 @@ impl<R: Reader> Reader for BufferedReader<R> {\n /// writer.flush();\n /// ```\n pub struct BufferedWriter<W> {\n-    priv inner: W,\n+    priv inner: Option<W>,\n     priv buf: ~[u8],\n     priv pos: uint\n }\n@@ -142,7 +143,7 @@ impl<W: Writer> BufferedWriter<W> {\n         let mut buf = vec::with_capacity(cap);\n         unsafe { buf.set_len(cap); }\n         BufferedWriter {\n-            inner: inner,\n+            inner: Some(inner),\n             buf: buf,\n             pos: 0\n         }\n@@ -155,7 +156,7 @@ impl<W: Writer> BufferedWriter<W> {\n \n     fn flush_buf(&mut self) -> IoResult<()> {\n         if self.pos != 0 {\n-            let ret = self.inner.write(self.buf.slice_to(self.pos));\n+            let ret = self.inner.get_mut_ref().write(self.buf.slice_to(self.pos));\n             self.pos = 0;\n             ret\n         } else {\n@@ -167,15 +168,15 @@ impl<W: Writer> BufferedWriter<W> {\n     ///\n     /// This type does not expose the ability to get a mutable reference to the\n     /// underlying reader because that could possibly corrupt the buffer.\n-    pub fn get_ref<'a>(&'a self) -> &'a W { &self.inner }\n+    pub fn get_ref<'a>(&'a self) -> &'a W { self.inner.get_ref() }\n \n     /// Unwraps this buffer, returning the underlying writer.\n     ///\n     /// The buffer is flushed before returning the writer.\n     pub fn unwrap(mut self) -> W {\n-        // FIXME: is failing the right thing to do if flushing fails?\n+        // FIXME(#12628): is failing the right thing to do if flushing fails?\n         self.flush_buf().unwrap();\n-        self.inner\n+        self.inner.take_unwrap()\n     }\n }\n \n@@ -186,7 +187,7 @@ impl<W: Writer> Writer for BufferedWriter<W> {\n         }\n \n         if buf.len() > self.buf.len() {\n-            self.inner.write(buf)\n+            self.inner.get_mut_ref().write(buf)\n         } else {\n             let dst = self.buf.mut_slice_from(self.pos);\n             vec::bytes::copy_memory(dst, buf);\n@@ -196,14 +197,24 @@ impl<W: Writer> Writer for BufferedWriter<W> {\n     }\n \n     fn flush(&mut self) -> IoResult<()> {\n-        self.flush_buf().and_then(|()| self.inner.flush())\n+        self.flush_buf().and_then(|()| self.inner.get_mut_ref().flush())\n+    }\n+}\n+\n+#[unsafe_destructor]\n+impl<W: Writer> Drop for BufferedWriter<W> {\n+    fn drop(&mut self) {\n+        if self.inner.is_some() {\n+            // FIXME(#12628): should this error be ignored?\n+            let _ = self.flush_buf();\n+        }\n     }\n }\n \n /// Wraps a Writer and buffers output to it, flushing whenever a newline (`0x0a`,\n /// `'\\n'`) is detected.\n ///\n-/// Note that this structure does NOT flush the output when dropped.\n+/// This writer will be flushed when it is dropped.\n pub struct LineBufferedWriter<W> {\n     priv inner: BufferedWriter<W>,\n }\n@@ -256,13 +267,13 @@ impl<W> InternalBufferedWriter<W> {\n \n impl<W: Reader> Reader for InternalBufferedWriter<W> {\n     fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> {\n-        self.get_mut_ref().inner.read(buf)\n+        self.get_mut_ref().inner.get_mut_ref().read(buf)\n     }\n }\n \n-/// Wraps a Stream and buffers input and output to and from it\n+/// Wraps a Stream and buffers input and output to and from it.\n ///\n-/// Note that `BufferedStream` will NOT flush its output buffer when dropped.\n+/// The output half will be flushed when this stream is dropped.\n ///\n /// # Example\n ///"}, {"sha": "241f3d23c6b74cc7284673df9c90611b988329bd", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1", "patch": "@@ -90,6 +90,12 @@ fn src<T>(fd: libc::c_int, readable: bool, f: |StdSource| -> T) -> T {\n /// buffered access is not desired, the `stdin_raw` function is provided to\n /// provided unbuffered access to stdin.\n ///\n+/// Care should be taken when creating multiple handles to the stdin of a\n+/// process. Beause this is a buffered reader by default, it's possible for\n+/// pending input to be unconsumed in one reader and unavailable to other\n+/// readers. It is recommended that only one handle at a time is created for the\n+/// stdin of a process.\n+///\n /// See `stdout()` for more notes about this function.\n pub fn stdin() -> BufferedReader<StdReader> {\n     BufferedReader::new(stdin_raw())\n@@ -104,20 +110,38 @@ pub fn stdin_raw() -> StdReader {\n     src(libc::STDIN_FILENO, true, |src| StdReader { inner: src })\n }\n \n-/// Creates a new non-blocking handle to the stdout of the current process.\n+/// Creates a line-buffered handle to the stdout of the current process.\n ///\n /// Note that this is a fairly expensive operation in that at least one memory\n /// allocation is performed. Additionally, this must be called from a runtime\n /// task context because the stream returned will be a non-blocking object using\n /// the local scheduler to perform the I/O.\n-pub fn stdout() -> StdWriter {\n+///\n+/// Care should be taken when creating multiple handles to an output stream for\n+/// a single process. While usage is still safe, the output may be surprising if\n+/// no synchronization is performed to ensure a sane output.\n+pub fn stdout() -> LineBufferedWriter<StdWriter> {\n+    LineBufferedWriter::new(stdout_raw())\n+}\n+\n+/// Creates an unbuffered handle to the stdout of the current process\n+///\n+/// See notes in `stdout()` for more information.\n+pub fn stdout_raw() -> StdWriter {\n     src(libc::STDOUT_FILENO, false, |src| StdWriter { inner: src })\n }\n \n-/// Creates a new non-blocking handle to the stderr of the current process.\n+/// Creates a line-buffered handle to the stderr of the current process.\n ///\n /// See `stdout()` for notes about this function.\n-pub fn stderr() -> StdWriter {\n+pub fn stderr() -> LineBufferedWriter<StdWriter> {\n+    LineBufferedWriter::new(stderr_raw())\n+}\n+\n+/// Creates an unbuffered handle to the stderr of the current process\n+///\n+/// See notes in `stdout()` for more information.\n+pub fn stderr_raw() -> StdWriter {\n     src(libc::STDERR_FILENO, false, |src| StdWriter { inner: src })\n }\n \n@@ -182,7 +206,7 @@ fn with_task_stdout(f: |&mut Writer| -> IoResult<()> ) {\n             Local::put(task);\n \n             if my_stdout.is_none() {\n-                my_stdout = Some(~LineBufferedWriter::new(stdout()) as ~Writer);\n+                my_stdout = Some(~stdout() as ~Writer);\n             }\n             let ret = f(*my_stdout.get_mut_ref());\n "}, {"sha": "2271a7c23808f9b1c36f612d7d5328bf0cfff0da", "filename": "src/libstd/logging.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1/src%2Flibstd%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1/src%2Flibstd%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flogging.rs?ref=999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1", "patch": "@@ -166,9 +166,7 @@ pub fn log(level: u32, args: &fmt::Arguments) {\n     };\n \n     if logger.is_none() {\n-        logger = Some(~DefaultLogger {\n-            handle: LineBufferedWriter::new(io::stderr()),\n-        } as ~Logger);\n+        logger = Some(~DefaultLogger { handle: io::stderr(), } as ~Logger);\n     }\n     logger.get_mut_ref().log(level, args);\n "}, {"sha": "cb7034a375dd04f579a815a32757af5c7587ea39", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1", "patch": "@@ -227,8 +227,8 @@ enum Destination {\n impl EmitterWriter {\n     pub fn stderr() -> EmitterWriter {\n         let stderr = io::stderr();\n-        if stderr.isatty() {\n-            let dst = match term::Terminal::new(stderr) {\n+        if stderr.get_ref().isatty() {\n+            let dst = match term::Terminal::new(stderr.unwrap()) {\n                 Ok(t) => Terminal(t),\n                 Err(..) => Raw(~io::stderr()),\n             };"}, {"sha": "0e062003053c0f71f2cdfacf63f50d64269578eb", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1", "patch": "@@ -415,8 +415,8 @@ impl<T: Writer> ConsoleTestState<T> {\n             Some(ref path) => Some(try!(File::create(path))),\n             None => None\n         };\n-        let out = match term::Terminal::new(io::stdout()) {\n-            Err(_) => Raw(io::stdout()),\n+        let out = match term::Terminal::new(io::stdio::stdout_raw()) {\n+            Err(_) => Raw(io::stdio::stdout_raw()),\n             Ok(t) => Pretty(t)\n         };\n         Ok(ConsoleTestState {"}, {"sha": "532bc714d316540be00c48f4b006acc53becfba3", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::cmp::min;\n-use std::io::{stdout, BufferedWriter, IoResult};\n+use std::io::{stdout, IoResult};\n use std::os;\n use std::vec::bytes::copy_memory;\n use std::vec;\n@@ -183,7 +183,7 @@ fn main() {\n         5\n     };\n \n-    let mut out = BufferedWriter::new(stdout());\n+    let mut out = stdout();\n \n     out.write_line(\">ONE Homo sapiens alu\").unwrap();\n     {"}, {"sha": "ae0bd069c906d7d5b4b97946a8c55df80b1c6542", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1", "patch": "@@ -117,6 +117,6 @@ fn main() {\n         let mut file = BufferedWriter::new(File::create(&Path::new(\"./shootout-fasta.data\")));\n         run(&mut file);\n     } else {\n-        run(&mut BufferedWriter::new(io::stdout()));\n+        run(&mut io::stdout());\n     }\n }"}, {"sha": "2bff20d52f88fec302c148dddadb3e05988ca3d0", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::io;\n-use std::io::BufferedWriter;\n \n struct DummyWriter;\n impl Writer for DummyWriter {\n@@ -27,7 +26,7 @@ fn main() {\n         (1000, ~DummyWriter as ~Writer)\n     } else {\n         (from_str(args[1]).unwrap(),\n-         ~BufferedWriter::new(std::io::stdout()) as ~Writer)\n+         ~std::io::stdout() as ~Writer)\n     };\n     let h = w;\n     let mut byte_acc = 0u8;"}]}