{"sha": "3fe6ca9def2d9bf1107a2072455c0ab10ce18739", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZTZjYTlkZWYyZDliZjExMDdhMjA3MjQ1NWMwYWIxMGNlMTg3Mzk=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-10-26T07:07:24Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-10-26T07:07:24Z"}, "message": "Merge pull request #415 from birkenfeld/fix_409\n\nFix reverse_range_loop not taking sign into account (fixes #409)", "tree": {"sha": "a419ddb6388d2f7acbf8282533fb9b33c35b2e59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a419ddb6388d2f7acbf8282533fb9b33c35b2e59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fe6ca9def2d9bf1107a2072455c0ab10ce18739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fe6ca9def2d9bf1107a2072455c0ab10ce18739", "html_url": "https://github.com/rust-lang/rust/commit/3fe6ca9def2d9bf1107a2072455c0ab10ce18739", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fe6ca9def2d9bf1107a2072455c0ab10ce18739/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b65473ac537e87edc570e9ae0ddb06578a1b38a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b65473ac537e87edc570e9ae0ddb06578a1b38a", "html_url": "https://github.com/rust-lang/rust/commit/2b65473ac537e87edc570e9ae0ddb06578a1b38a"}, {"sha": "a91c618fed0ffdc0651768d148985c1594dc9de5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a91c618fed0ffdc0651768d148985c1594dc9de5", "html_url": "https://github.com/rust-lang/rust/commit/a91c618fed0ffdc0651768d148985c1594dc9de5"}], "stats": {"total": 74, "additions": 71, "deletions": 3}, "files": [{"sha": "766d998c256ad1ee7a2ca88b2ab365dc8f28a17a", "filename": "src/consts.rs", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/3fe6ca9def2d9bf1107a2072455c0ab10ce18739/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe6ca9def2d9bf1107a2072455c0ab10ce18739/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=3fe6ca9def2d9bf1107a2072455c0ab10ce18739", "patch": "@@ -6,10 +6,12 @@ use rustc::middle::def::PathResolution;\n use rustc::middle::def::Def::*;\n use rustc_front::hir::*;\n use syntax::ptr::P;\n+use std::char;\n use std::cmp::PartialOrd;\n use std::cmp::Ordering::{self, Greater, Less, Equal};\n use std::rc::Rc;\n use std::ops::Deref;\n+use std::fmt;\n use self::Constant::*;\n use self::FloatWidth::*;\n \n@@ -21,6 +23,7 @@ use syntax::ast::{UintTy, FloatTy, StrStyle};\n use syntax::ast::UintTy::*;\n use syntax::ast::FloatTy::*;\n use syntax::ast::Sign::{self, Plus, Minus};\n+use syntax::ast_util;\n \n \n #[derive(PartialEq, Eq, Debug, Copy, Clone)]\n@@ -159,6 +162,67 @@ impl PartialOrd for Constant {\n     }\n }\n \n+fn format_byte(fmt: &mut fmt::Formatter, b: u8) -> fmt::Result {\n+    if b == b'\\\\' {\n+        write!(fmt, \"\\\\\\\\\")\n+    } else if 0x20 <= b && b <= 0x7e {\n+        write!(fmt, \"{}\", char::from_u32(b as u32).expect(\"all u8 are valid char\"))\n+    } else if b == 0x0a {\n+        write!(fmt, \"\\\\n\")\n+    } else if b == 0x0d {\n+        write!(fmt, \"\\\\r\")\n+    } else {\n+        write!(fmt, \"\\\\x{:02x}\", b)\n+    }\n+}\n+\n+impl fmt::Display for Constant {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            ConstantStr(ref s, _) => write!(fmt, \"{:?}\", s),\n+            ConstantByte(ref b) =>\n+                write!(fmt, \"b'\").and_then(|_| format_byte(fmt, *b))\n+                                 .and_then(|_| write!(fmt, \"'\")),\n+            ConstantBinary(ref bs) => {\n+                try!(write!(fmt, \"b\\\"\"));\n+                for b in bs.iter() {\n+                    try!(format_byte(fmt, *b));\n+                }\n+                write!(fmt, \"\\\"\")\n+            }\n+            ConstantChar(ref c) => write!(fmt, \"'{}'\", c),\n+            ConstantInt(ref i, ref ity) => {\n+                let (sign, suffix) = match *ity {\n+                    LitIntType::SignedIntLit(ref sity, ref sign) =>\n+                        (if let Sign::Minus = *sign { \"-\" } else { \"\" },\n+                         ast_util::int_ty_to_string(*sity, None)),\n+                    LitIntType::UnsignedIntLit(ref uity) =>\n+                        (\"\", ast_util::uint_ty_to_string(*uity, None)),\n+                    LitIntType::UnsuffixedIntLit(ref sign) =>\n+                        (if let Sign::Minus = *sign { \"-\" } else { \"\" },\n+                         \"\".into()),\n+                };\n+                write!(fmt, \"{}{}{}\", sign, i, suffix)\n+            }\n+            ConstantFloat(ref s, ref fw) => {\n+                let suffix = match *fw {\n+                    FloatWidth::Fw32 => \"f32\",\n+                    FloatWidth::Fw64 => \"f64\",\n+                    FloatWidth::FwAny => \"\",\n+                };\n+                write!(fmt, \"{}{}\", s, suffix)\n+            }\n+            ConstantBool(ref b) => write!(fmt, \"{}\", b),\n+            ConstantRepeat(ref c, ref n) => write!(fmt, \"[{}; {}]\", c, n),\n+            ConstantVec(ref v) => write!(fmt, \"[{}]\",\n+                                         v.iter().map(|i| format!(\"{}\", i))\n+                                                 .collect::<Vec<_>>().join(\", \")),\n+            ConstantTuple(ref t) => write!(fmt, \"({})\",\n+                                           t.iter().map(|i| format!(\"{}\", i))\n+                                                   .collect::<Vec<_>>().join(\", \")),\n+        }\n+    }\n+}\n \n \n fn lit_to_constant(lit: &Lit_) -> Constant {"}, {"sha": "95289cf347c553f2f15d200d13c17254edb6f1d9", "filename": "src/loops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fe6ca9def2d9bf1107a2072455c0ab10ce18739/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe6ca9def2d9bf1107a2072455c0ab10ce18739/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=3fe6ca9def2d9bf1107a2072455c0ab10ce18739", "patch": "@@ -44,7 +44,7 @@ pub struct LoopsPass;\n impl LintPass for LoopsPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NEEDLESS_RANGE_LOOP, EXPLICIT_ITER_LOOP, ITER_NEXT_LOOP,\n-                    WHILE_LET_LOOP, UNUSED_COLLECT, REVERSE_RANGE_LOOP, \n+                    WHILE_LET_LOOP, UNUSED_COLLECT, REVERSE_RANGE_LOOP,\n                     EXPLICIT_COUNTER_LOOP, EMPTY_LOOP)\n     }\n }\n@@ -88,8 +88,8 @@ impl LateLintPass for LoopsPass {\n             // if this for loop is iterating over a two-sided range...\n             if let ExprRange(Some(ref start_expr), Some(ref stop_expr)) = arg.node {\n                 // ...and both sides are compile-time constant integers...\n-                if let Some(Constant::ConstantInt(start_idx, _)) = constant_simple(start_expr) {\n-                    if let Some(Constant::ConstantInt(stop_idx, _)) = constant_simple(stop_expr) {\n+                if let Some(start_idx @ Constant::ConstantInt(..)) = constant_simple(start_expr) {\n+                    if let Some(stop_idx @ Constant::ConstantInt(..)) = constant_simple(stop_expr) {\n                         // ...and the start index is greater than the stop index,\n                         // this loop will never run. This is often confusing for developers\n                         // who think that this will iterate from the larger value to the"}, {"sha": "02c8cc56083874404ea58d310a699b9dce3305d2", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fe6ca9def2d9bf1107a2072455c0ab10ce18739/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe6ca9def2d9bf1107a2072455c0ab10ce18739/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=3fe6ca9def2d9bf1107a2072455c0ab10ce18739", "patch": "@@ -46,6 +46,10 @@ fn main() {\n         println!(\"{}\", i);\n     }\n \n+    for i in -10..0 { // not an error\n+        println!(\"{}\", i);\n+    }\n+\n     for i in (10..0).rev() { // not an error, this is an established idiom for looping backwards on a range\n         println!(\"{}\", i);\n     }"}]}