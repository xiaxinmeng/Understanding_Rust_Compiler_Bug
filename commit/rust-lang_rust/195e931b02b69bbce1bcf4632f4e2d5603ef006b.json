{"sha": "195e931b02b69bbce1bcf4632f4e2d5603ef006b", "node_id": "C_kwDOAAsO6NoAKDE5NWU5MzFiMDJiNjliYmNlMWJjZjQ2MzJmNGUyZDU2MDNlZjAwNmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-15T03:28:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-15T03:28:55Z"}, "message": "Auto merge of #91945 - matthiaskrgr:rollup-jszf9zp, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #90939 (Tweak errors coming from `for`-loop, `?` and `.await` desugaring)\n - #91859 (Iterator::cycle() \u2014 document empty iterator special case)\n - #91868 (Use `OutputFilenames` to generate output file for `-Zllvm-time-trace`)\n - #91870 (Revert setting a default for the MACOSX_DEPLOYMENT_TARGET env var for linking)\n - #91881 (Stabilize `iter::zip`)\n - #91882 (Remove `in_band_lifetimes` from `rustc_typeck`)\n - #91940 (Update cargo)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f56ab523ec6f2a40e2ed60e80fc27f420bfe24f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f56ab523ec6f2a40e2ed60e80fc27f420bfe24f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/195e931b02b69bbce1bcf4632f4e2d5603ef006b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/195e931b02b69bbce1bcf4632f4e2d5603ef006b", "html_url": "https://github.com/rust-lang/rust/commit/195e931b02b69bbce1bcf4632f4e2d5603ef006b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/195e931b02b69bbce1bcf4632f4e2d5603ef006b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d594910a2da12f158477b4c7281716f535cfa3de", "url": "https://api.github.com/repos/rust-lang/rust/commits/d594910a2da12f158477b4c7281716f535cfa3de", "html_url": "https://github.com/rust-lang/rust/commit/d594910a2da12f158477b4c7281716f535cfa3de"}, {"sha": "22fc403757b4e1bbe91375781b33fe51db8030c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/22fc403757b4e1bbe91375781b33fe51db8030c2", "html_url": "https://github.com/rust-lang/rust/commit/22fc403757b4e1bbe91375781b33fe51db8030c2"}], "stats": {"total": 1035, "additions": 543, "deletions": 492}, "files": [{"sha": "fd2f2350c189a7f413e139dad5a5668e47466739", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -276,7 +276,7 @@ dependencies = [\n \n [[package]]\n name = \"cargo\"\n-version = \"0.59.0\"\n+version = \"0.60.0\"\n dependencies = [\n  \"anyhow\",\n  \"atty\",\n@@ -419,7 +419,7 @@ dependencies = [\n \n [[package]]\n name = \"cargo-util\"\n-version = \"0.1.1\"\n+version = \"0.1.2\"\n dependencies = [\n  \"anyhow\",\n  \"core-foundation\",\n@@ -768,7 +768,7 @@ checksum = \"8aebca1129a03dc6dc2b127edd729435bbc4a37e1d5f4d7513165089ceb02634\"\n \n [[package]]\n name = \"crates-io\"\n-version = \"0.33.0\"\n+version = \"0.33.1\"\n dependencies = [\n  \"anyhow\",\n  \"curl\","}, {"sha": "143c6f7610c441a250c0ad931c91bfc9fc4f5d28", "filename": "compiler/rustc_apfloat/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_apfloat%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_apfloat%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_apfloat%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -33,7 +33,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![no_std]\n #![forbid(unsafe_code)]\n-#![feature(iter_zip)]\n #![feature(nll)]\n \n #[macro_use]"}, {"sha": "ff3b501a0bdc25a8a6793ad13f240a1b8005d7d9", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -11,7 +11,6 @@\n #![feature(box_patterns)]\n #![feature(crate_visibility_modifier)]\n #![feature(if_let_guard)]\n-#![feature(iter_zip)]\n #![feature(label_break_value)]\n #![feature(nll)]\n #![feature(min_specialization)]"}, {"sha": "75a45a437e77eb893757f9ebf835a5a1931da9c6", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 55, "deletions": 15, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -130,7 +130,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         hir::AsyncGeneratorKind::Block,\n                         |this| this.with_new_scopes(|this| this.lower_block_expr(block)),\n                     ),\n-                ExprKind::Await(ref expr) => self.lower_expr_await(e.span, expr),\n+                ExprKind::Await(ref expr) => {\n+                    let span = if expr.span.hi() < e.span.hi() {\n+                        expr.span.shrink_to_hi().with_hi(e.span.hi())\n+                    } else {\n+                        // this is a recovered `await expr`\n+                        e.span\n+                    };\n+                    self.lower_expr_await(span, expr)\n+                }\n                 ExprKind::Closure(\n                     capture_clause,\n                     asyncness,\n@@ -479,8 +487,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         expr: &'hir hir::Expr<'hir>,\n         overall_span: Span,\n     ) -> &'hir hir::Expr<'hir> {\n-        let constructor =\n-            self.arena.alloc(self.expr_lang_item_path(method_span, lang_item, ThinVec::new()));\n+        let constructor = self.arena.alloc(self.expr_lang_item_path(\n+            method_span,\n+            lang_item,\n+            ThinVec::new(),\n+            None,\n+        ));\n         self.expr_call(overall_span, constructor, std::slice::from_ref(expr))\n     }\n \n@@ -584,8 +596,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // `future::from_generator`:\n         let unstable_span =\n             self.mark_span_with_reason(DesugaringKind::Async, span, self.allow_gen_future.clone());\n-        let gen_future =\n-            self.expr_lang_item_path(unstable_span, hir::LangItem::FromGenerator, ThinVec::new());\n+        let gen_future = self.expr_lang_item_path(\n+            unstable_span,\n+            hir::LangItem::FromGenerator,\n+            ThinVec::new(),\n+            None,\n+        );\n \n         // `future::from_generator(generator)`:\n         hir::ExprKind::Call(self.arena.alloc(gen_future), arena_vec![self; generator])\n@@ -607,6 +623,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     /// }\n     /// ```\n     fn lower_expr_await(&mut self, await_span: Span, expr: &Expr) -> hir::ExprKind<'hir> {\n+        let dot_await_span = expr.span.shrink_to_hi().to(await_span);\n         match self.generator_kind {\n             Some(hir::GeneratorKind::Async(_)) => {}\n             Some(hir::GeneratorKind::Gen) | None => {\n@@ -623,13 +640,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 err.emit();\n             }\n         }\n-        let span = self.mark_span_with_reason(DesugaringKind::Await, await_span, None);\n+        let span = self.mark_span_with_reason(DesugaringKind::Await, dot_await_span, None);\n         let gen_future_span = self.mark_span_with_reason(\n             DesugaringKind::Await,\n             await_span,\n             self.allow_gen_future.clone(),\n         );\n         let expr = self.lower_expr_mut(expr);\n+        let expr_hir_id = expr.hir_id;\n \n         let pinned_ident = Ident::with_dummy_span(sym::pinned);\n         let (pinned_pat, pinned_pat_hid) =\n@@ -656,16 +674,19 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 span,\n                 hir::LangItem::PinNewUnchecked,\n                 arena_vec![self; ref_mut_pinned],\n+                Some(expr_hir_id),\n             );\n             let get_context = self.expr_call_lang_item_fn_mut(\n                 gen_future_span,\n                 hir::LangItem::GetContext,\n                 arena_vec![self; task_context],\n+                Some(expr_hir_id),\n             );\n             let call = self.expr_call_lang_item_fn(\n                 span,\n                 hir::LangItem::FuturePoll,\n                 arena_vec![self; new_unchecked, get_context],\n+                Some(expr_hir_id),\n             );\n             self.arena.alloc(self.expr_unsafe(call))\n         };\n@@ -678,18 +699,28 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             let (x_pat, x_pat_hid) = self.pat_ident(span, x_ident);\n             let x_expr = self.expr_ident(span, x_ident, x_pat_hid);\n             let ready_field = self.single_pat_field(span, x_pat);\n-            let ready_pat = self.pat_lang_item_variant(span, hir::LangItem::PollReady, ready_field);\n+            let ready_pat = self.pat_lang_item_variant(\n+                span,\n+                hir::LangItem::PollReady,\n+                ready_field,\n+                Some(expr_hir_id),\n+            );\n             let break_x = self.with_loop_scope(loop_node_id, move |this| {\n                 let expr_break =\n                     hir::ExprKind::Break(this.lower_loop_destination(None), Some(x_expr));\n-                this.arena.alloc(this.expr(await_span, expr_break, ThinVec::new()))\n+                this.arena.alloc(this.expr(span, expr_break, ThinVec::new()))\n             });\n             self.arm(ready_pat, break_x)\n         };\n \n         // `::std::task::Poll::Pending => {}`\n         let pending_arm = {\n-            let pending_pat = self.pat_lang_item_variant(span, hir::LangItem::PollPending, &[]);\n+            let pending_pat = self.pat_lang_item_variant(\n+                span,\n+                hir::LangItem::PollPending,\n+                &[],\n+                Some(expr_hir_id),\n+            );\n             let empty_block = self.expr_block_empty(span);\n             self.arm(pending_pat, empty_block)\n         };\n@@ -709,7 +740,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             let unit = self.expr_unit(span);\n             let yield_expr = self.expr(\n                 span,\n-                hir::ExprKind::Yield(unit, hir::YieldSource::Await { expr: Some(expr.hir_id) }),\n+                hir::ExprKind::Yield(unit, hir::YieldSource::Await { expr: Some(expr_hir_id) }),\n                 ThinVec::new(),\n             );\n             let yield_expr = self.arena.alloc(yield_expr);\n@@ -756,6 +787,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             into_future_span,\n             hir::LangItem::IntoFutureIntoFuture,\n             arena_vec![self; expr],\n+            Some(expr_hir_id),\n         );\n \n         // match <into_future_expr> {\n@@ -1160,7 +1192,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_expr_range_closed(&mut self, span: Span, e1: &Expr, e2: &Expr) -> hir::ExprKind<'hir> {\n         let e1 = self.lower_expr_mut(e1);\n         let e2 = self.lower_expr_mut(e2);\n-        let fn_path = hir::QPath::LangItem(hir::LangItem::RangeInclusiveNew, self.lower_span(span));\n+        let fn_path =\n+            hir::QPath::LangItem(hir::LangItem::RangeInclusiveNew, self.lower_span(span), None);\n         let fn_expr =\n             self.arena.alloc(self.expr(span, hir::ExprKind::Path(fn_path), ThinVec::new()));\n         hir::ExprKind::Call(fn_expr, arena_vec![self; e1, e2])\n@@ -1194,7 +1227,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         );\n \n         hir::ExprKind::Struct(\n-            self.arena.alloc(hir::QPath::LangItem(lang_item, self.lower_span(span))),\n+            self.arena.alloc(hir::QPath::LangItem(lang_item, self.lower_span(span), None)),\n             fields,\n             None,\n         )\n@@ -1389,6 +1422,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 head_span,\n                 hir::LangItem::IteratorNext,\n                 arena_vec![self; ref_mut_iter],\n+                None,\n             );\n             let arms = arena_vec![self; none_arm, some_arm];\n \n@@ -1417,6 +1451,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 head_span,\n                 hir::LangItem::IntoIterIntoIter,\n                 arena_vec![self; head],\n+                None,\n             )\n         };\n \n@@ -1472,6 +1507,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 unstable_span,\n                 hir::LangItem::TryTraitBranch,\n                 arena_vec![self; sub_expr],\n+                None,\n             )\n         };\n \n@@ -1628,8 +1664,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         span: Span,\n         lang_item: hir::LangItem,\n         args: &'hir [hir::Expr<'hir>],\n+        hir_id: Option<hir::HirId>,\n     ) -> hir::Expr<'hir> {\n-        let path = self.arena.alloc(self.expr_lang_item_path(span, lang_item, ThinVec::new()));\n+        let path =\n+            self.arena.alloc(self.expr_lang_item_path(span, lang_item, ThinVec::new(), hir_id));\n         self.expr_call_mut(span, path, args)\n     }\n \n@@ -1638,19 +1676,21 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         span: Span,\n         lang_item: hir::LangItem,\n         args: &'hir [hir::Expr<'hir>],\n+        hir_id: Option<hir::HirId>,\n     ) -> &'hir hir::Expr<'hir> {\n-        self.arena.alloc(self.expr_call_lang_item_fn_mut(span, lang_item, args))\n+        self.arena.alloc(self.expr_call_lang_item_fn_mut(span, lang_item, args, hir_id))\n     }\n \n     fn expr_lang_item_path(\n         &mut self,\n         span: Span,\n         lang_item: hir::LangItem,\n         attrs: AttrVec,\n+        hir_id: Option<hir::HirId>,\n     ) -> hir::Expr<'hir> {\n         self.expr(\n             span,\n-            hir::ExprKind::Path(hir::QPath::LangItem(lang_item, self.lower_span(span))),\n+            hir::ExprKind::Path(hir::QPath::LangItem(lang_item, self.lower_span(span), hir_id)),\n             attrs,\n         )\n     }"}, {"sha": "fee2e7636eae05c77951f3548dcf09566e01a013", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -32,7 +32,6 @@\n \n #![feature(crate_visibility_modifier)]\n #![feature(box_patterns)]\n-#![feature(iter_zip)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]\n \n@@ -2127,21 +2126,21 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n     fn pat_cf_continue(&mut self, span: Span, pat: &'hir hir::Pat<'hir>) -> &'hir hir::Pat<'hir> {\n         let field = self.single_pat_field(span, pat);\n-        self.pat_lang_item_variant(span, hir::LangItem::ControlFlowContinue, field)\n+        self.pat_lang_item_variant(span, hir::LangItem::ControlFlowContinue, field, None)\n     }\n \n     fn pat_cf_break(&mut self, span: Span, pat: &'hir hir::Pat<'hir>) -> &'hir hir::Pat<'hir> {\n         let field = self.single_pat_field(span, pat);\n-        self.pat_lang_item_variant(span, hir::LangItem::ControlFlowBreak, field)\n+        self.pat_lang_item_variant(span, hir::LangItem::ControlFlowBreak, field, None)\n     }\n \n     fn pat_some(&mut self, span: Span, pat: &'hir hir::Pat<'hir>) -> &'hir hir::Pat<'hir> {\n         let field = self.single_pat_field(span, pat);\n-        self.pat_lang_item_variant(span, hir::LangItem::OptionSome, field)\n+        self.pat_lang_item_variant(span, hir::LangItem::OptionSome, field, None)\n     }\n \n     fn pat_none(&mut self, span: Span) -> &'hir hir::Pat<'hir> {\n-        self.pat_lang_item_variant(span, hir::LangItem::OptionNone, &[])\n+        self.pat_lang_item_variant(span, hir::LangItem::OptionNone, &[], None)\n     }\n \n     fn single_pat_field(\n@@ -2164,8 +2163,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         span: Span,\n         lang_item: hir::LangItem,\n         fields: &'hir [hir::PatField<'hir>],\n+        hir_id: Option<hir::HirId>,\n     ) -> &'hir hir::Pat<'hir> {\n-        let qpath = hir::QPath::LangItem(lang_item, self.lower_span(span));\n+        let qpath = hir::QPath::LangItem(lang_item, self.lower_span(span), hir_id);\n         self.pat(span, hir::PatKind::Struct(qpath, fields, false))\n     }\n "}, {"sha": "4136adcf65e080db6b329729a24aca09ecc97c1a", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -4,7 +4,6 @@\n #![feature(box_patterns)]\n #![feature(crate_visibility_modifier)]\n #![feature(in_band_lifetimes)]\n-#![feature(iter_zip)]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "3e8b43fea8a507a43cd9ecc0ae598ce80e171925", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -6,7 +6,6 @@\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n-#![feature(iter_zip)]\n #![feature(nll)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]"}, {"sha": "fcdf6b50764ee5088d17957bf536375693aecf6a", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -205,6 +205,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         &self,\n         ongoing_codegen: Box<dyn Any>,\n         _sess: &Session,\n+        _outputs: &OutputFilenames,\n     ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n         Ok(*ongoing_codegen\n             .downcast::<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>)>()"}, {"sha": "30a33b99e5053f4dac1d5422eb473502811bfce1", "filename": "compiler/rustc_codegen_gcc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -96,7 +96,7 @@ impl CodegenBackend for GccCodegenBackend {\n         Box::new(res)\n     }\n \n-    fn join_codegen(&self, ongoing_codegen: Box<dyn Any>, sess: &Session) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n+    fn join_codegen(&self, ongoing_codegen: Box<dyn Any>, sess: &Session, _outputs: &OutputFilenames) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n         let (codegen_results, work_products) = ongoing_codegen\n             .downcast::<rustc_codegen_ssa::back::write::OngoingCodegen<GccCodegenBackend>>()\n             .expect(\"Expected GccCodegenBackend's OngoingCodegen, found Box<Any>\")"}, {"sha": "476371b878deef68c3b06d9839cb2dfae27d8ab1", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -9,7 +9,6 @@\n #![feature(crate_visibility_modifier)]\n #![feature(extern_types)]\n #![feature(in_band_lifetimes)]\n-#![feature(iter_zip)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n \n@@ -339,6 +338,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n         &self,\n         ongoing_codegen: Box<dyn Any>,\n         sess: &Session,\n+        outputs: &OutputFilenames,\n     ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n         let (codegen_results, work_products) = ongoing_codegen\n             .downcast::<rustc_codegen_ssa::back::write::OngoingCodegen<LlvmCodegenBackend>>()\n@@ -347,7 +347,8 @@ impl CodegenBackend for LlvmCodegenBackend {\n \n         sess.time(\"llvm_dump_timing_file\", || {\n             if sess.opts.debugging_opts.llvm_time_trace {\n-                llvm_util::time_trace_profiler_finish(\"llvm_timings.json\");\n+                let file_name = outputs.with_extension(\"llvm_timings.json\");\n+                llvm_util::time_trace_profiler_finish(&file_name);\n             }\n         });\n "}, {"sha": "e4935ac431c8d8bcee2fbb7890377b0b450e5276", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -4,6 +4,7 @@ use libc::c_int;\n use libloading::Library;\n use rustc_codegen_ssa::target_features::supported_target_features;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_fs_util::path_to_c_string;\n use rustc_middle::bug;\n use rustc_session::config::PrintRequest;\n use rustc_session::Session;\n@@ -13,6 +14,7 @@ use std::ffi::{CStr, CString};\n use tracing::debug;\n \n use std::mem;\n+use std::path::Path;\n use std::ptr;\n use std::slice;\n use std::str;\n@@ -134,9 +136,9 @@ unsafe fn configure_llvm(sess: &Session) {\n     llvm::LLVMRustSetLLVMOptions(llvm_args.len() as c_int, llvm_args.as_ptr());\n }\n \n-pub fn time_trace_profiler_finish(file_name: &str) {\n+pub fn time_trace_profiler_finish(file_name: &Path) {\n     unsafe {\n-        let file_name = CString::new(file_name).unwrap();\n+        let file_name = path_to_c_string(file_name);\n         llvm::LLVMTimeTraceProfilerFinish(file_name.as_ptr());\n     }\n }"}, {"sha": "c6abb3f6eb416a9c3e19945a403216e998d4c143", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -97,6 +97,7 @@ pub trait CodegenBackend {\n         &self,\n         ongoing_codegen: Box<dyn Any>,\n         sess: &Session,\n+        outputs: &OutputFilenames,\n     ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported>;\n \n     /// This is called on the returned `Box<dyn Any>` from `join_codegen`"}, {"sha": "92854af55bbf38f2ba6a09a7a2bbcda8e747fd3a", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -11,7 +11,6 @@ Rust MIR: a lowered representation of Rust.\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(exact_size_is_empty)]\n-#![feature(iter_zip)]\n #![feature(let_else)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]"}, {"sha": "a681298301acbf97d0d12f6e1d3a6413ed09cc0a", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -6,7 +6,6 @@\n #![feature(crate_visibility_modifier)]\n #![feature(backtrace)]\n #![feature(if_let_guard)]\n-#![feature(iter_zip)]\n #![feature(let_else)]\n #![feature(nll)]\n "}, {"sha": "60a62ac204ce50138b5cb62240e3fbdf92a11851", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -2,7 +2,6 @@\n #![feature(decl_macro)]\n #![feature(destructuring_assignment)]\n #![feature(if_let_guard)]\n-#![feature(iter_zip)]\n #![feature(let_else)]\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_internals)]"}, {"sha": "f044c187f39a30d2ddd599f80c369040803bc7bb", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -1627,13 +1627,13 @@ pub fn is_range_literal(expr: &Expr<'_>) -> bool {\n                     | LangItem::RangeFrom\n                     | LangItem::RangeFull\n                     | LangItem::RangeToInclusive,\n-                _,\n+                ..\n             )\n         ),\n \n         // `..=` desugars into `::std::ops::RangeInclusive::new(...)`.\n         ExprKind::Call(ref func, _) => {\n-            matches!(func.kind, ExprKind::Path(QPath::LangItem(LangItem::RangeInclusiveNew, _)))\n+            matches!(func.kind, ExprKind::Path(QPath::LangItem(LangItem::RangeInclusiveNew, ..)))\n         }\n \n         _ => false,\n@@ -1788,8 +1788,8 @@ pub enum QPath<'hir> {\n     /// the `X` and `Y` nodes each being a `TyKind::Path(QPath::TypeRelative(..))`.\n     TypeRelative(&'hir Ty<'hir>, &'hir PathSegment<'hir>),\n \n-    /// Reference to a `#[lang = \"foo\"]` item.\n-    LangItem(LangItem, Span),\n+    /// Reference to a `#[lang = \"foo\"]` item. `HirId` of the inner expr.\n+    LangItem(LangItem, Span, Option<HirId>),\n }\n \n impl<'hir> QPath<'hir> {\n@@ -1798,7 +1798,7 @@ impl<'hir> QPath<'hir> {\n         match *self {\n             QPath::Resolved(_, path) => path.span,\n             QPath::TypeRelative(qself, ps) => qself.span.to(ps.ident.span),\n-            QPath::LangItem(_, span) => span,\n+            QPath::LangItem(_, span, _) => span,\n         }\n     }\n \n@@ -1808,7 +1808,7 @@ impl<'hir> QPath<'hir> {\n         match *self {\n             QPath::Resolved(_, path) => path.span,\n             QPath::TypeRelative(qself, _) => qself.span,\n-            QPath::LangItem(_, span) => span,\n+            QPath::LangItem(_, span, _) => span,\n         }\n     }\n \n@@ -1818,7 +1818,7 @@ impl<'hir> QPath<'hir> {\n         match *self {\n             QPath::Resolved(_, path) => path.segments.last().unwrap().ident.span,\n             QPath::TypeRelative(_, segment) => segment.ident.span,\n-            QPath::LangItem(_, span) => span,\n+            QPath::LangItem(_, span, _) => span,\n         }\n     }\n }"}, {"sha": "389e3845c56b9bf6b87568533c6025ce99d1e671", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -1731,7 +1731,7 @@ impl<'a> State<'a> {\n                     colons_before_params,\n                 )\n             }\n-            hir::QPath::LangItem(lang_item, span) => {\n+            hir::QPath::LangItem(lang_item, span, _) => {\n                 self.word(\"#[lang = \\\"\");\n                 self.print_ident(Ident::new(lang_item.name(), span));\n                 self.word(\"\\\"]\");"}, {"sha": "a9efd6bb8bc8db2e109adc77fc819b4c705989ae", "filename": "compiler/rustc_index/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_index%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_index%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -1,7 +1,6 @@\n #![feature(allow_internal_unstable)]\n #![feature(bench_black_box)]\n #![feature(extend_one)]\n-#![feature(iter_zip)]\n #![feature(min_specialization)]\n #![feature(step_trait)]\n #![feature(test)]"}, {"sha": "ba77e363761f366c40364b5a5c842895245c7a75", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -17,7 +17,6 @@\n #![feature(box_patterns)]\n #![feature(derive_default_enum)]\n #![feature(extend_one)]\n-#![feature(iter_zip)]\n #![feature(let_else)]\n #![feature(never_type)]\n #![feature(in_band_lifetimes)]"}, {"sha": "e635ee1e0ec8a44394df59e7a2b2069e3ae7e537", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -335,8 +335,11 @@ pub struct Linker {\n \n impl Linker {\n     pub fn link(self) -> Result<()> {\n-        let (codegen_results, work_products) =\n-            self.codegen_backend.join_codegen(self.ongoing_codegen, &self.sess)?;\n+        let (codegen_results, work_products) = self.codegen_backend.join_codegen(\n+            self.ongoing_codegen,\n+            &self.sess,\n+            &self.prepare_outputs,\n+        )?;\n \n         self.sess.compile_status()?;\n "}, {"sha": "b6151757588dd7c19470291bca4035001fe2cb6f", "filename": "compiler/rustc_lint/src/array_into_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -52,7 +52,7 @@ impl<'tcx> LateLintPass<'tcx> for ArrayIntoIter {\n             if let hir::ExprKind::Call(path, [arg]) = &arg.kind {\n                 if let hir::ExprKind::Path(hir::QPath::LangItem(\n                     hir::LangItem::IntoIterIntoIter,\n-                    _,\n+                    ..,\n                 )) = &path.kind\n                 {\n                     self.for_expr_span = arg.span;"}, {"sha": "c7823032b0c23530d1edbe239e3f549abaed8d5e", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -31,7 +31,6 @@\n #![feature(box_patterns)]\n #![feature(crate_visibility_modifier)]\n #![feature(iter_order_by)]\n-#![feature(iter_zip)]\n #![feature(let_else)]\n #![feature(never_type)]\n #![feature(nll)]"}, {"sha": "8590a5c2e2d9e72d95b082582f2ae6d7302ff3c9", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -51,7 +51,6 @@\n #![feature(half_open_range_patterns)]\n #![feature(control_flow_enum)]\n #![feature(associated_type_defaults)]\n-#![feature(iter_zip)]\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n #![feature(try_reserve_kind)]"}, {"sha": "a5bd246712b8ee2a9d12d90ccd8ab31e7168ce0f", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -348,6 +348,12 @@ pub enum ObligationCauseCode<'tcx> {\n     /// If `X` is the concrete type of an opaque type `impl Y`, then `X` must implement `Y`\n     OpaqueType,\n \n+    AwaitableExpr(Option<hir::HirId>),\n+\n+    ForLoopIterator,\n+\n+    QuestionMark,\n+\n     /// Well-formed checking. If a `WellFormedLoc` is provided,\n     /// then it will be used to eprform HIR-based wf checking\n     /// after an error occurs, in order to generate a more precise error span."}, {"sha": "38bb00f985ab6a9a4ea0aecaefa0da7ef0ba7c14", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -5,7 +5,6 @@\n #![feature(control_flow_enum)]\n #![feature(crate_visibility_modifier)]\n #![feature(bool_to_option)]\n-#![feature(iter_zip)]\n #![feature(let_else)]\n #![feature(once_cell)]\n #![feature(min_specialization)]"}, {"sha": "8fdd0a39f250a2c5884a8d1e0a20c616e53e57a3", "filename": "compiler/rustc_mir_dataflow/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -4,7 +4,6 @@\n #![feature(box_syntax)]\n #![feature(exact_size_is_empty)]\n #![feature(in_band_lifetimes)]\n-#![feature(iter_zip)]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(once_cell)]"}, {"sha": "638baa0b8d3768deac91407adea99054304853d5", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -1,7 +1,6 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]\n-#![feature(iter_zip)]\n #![feature(let_else)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]"}, {"sha": "d6528364e980669fbb17e61b018fda18285d5213", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -7,7 +7,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(crate_visibility_modifier)]\n #![feature(in_band_lifetimes)]\n-#![feature(iter_zip)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]\n #![feature(nll)]"}, {"sha": "8968c163987dcc01951856789412932ab3d63145", "filename": "compiler/rustc_passes/src/region.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fregion.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -421,11 +421,14 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n         // Mark this expr's scope and all parent scopes as containing `yield`.\n         let mut scope = Scope { id: expr.hir_id.local_id, data: ScopeData::Node };\n         loop {\n-            let data = YieldData {\n-                span: expr.span,\n-                expr_and_pat_count: visitor.expr_and_pat_count,\n-                source: *source,\n+            let span = match expr.kind {\n+                hir::ExprKind::Yield(expr, hir::YieldSource::Await { .. }) => {\n+                    expr.span.shrink_to_hi().to(expr.span)\n+                }\n+                _ => expr.span,\n             };\n+            let data =\n+                YieldData { span, expr_and_pat_count: visitor.expr_and_pat_count, source: *source };\n             visitor.scope_tree.yield_in_scope.insert(scope, data);\n             if visitor.pessimistic_yield {\n                 debug!(\"resolve_expr in pessimistic_yield - marking scope {:?} for fixup\", scope);"}, {"sha": "0436e07e2d467360ed6befea94d64f33ec8c658a", "filename": "compiler/rustc_query_system/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -2,7 +2,6 @@\n #![feature(bool_to_option)]\n #![feature(core_intrinsics)]\n #![feature(hash_raw_entry)]\n-#![feature(iter_zip)]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(extern_types)]"}, {"sha": "2bd659441279cf8d61a137f2c53fbf63e001cddc", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -13,7 +13,6 @@\n #![feature(drain_filter)]\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n-#![feature(iter_zip)]\n #![feature(let_else)]\n #![feature(never_type)]\n #![feature(nll)]"}, {"sha": "1d9c44bffa3fc83cdf1618ef6c418a4d2b1e4534", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -286,7 +286,7 @@ impl<'hir> Sig for hir::Ty<'hir> {\n                     refs: vec![SigElement { id, start, end }],\n                 })\n             }\n-            hir::TyKind::Path(hir::QPath::LangItem(lang_item, _)) => {\n+            hir::TyKind::Path(hir::QPath::LangItem(lang_item, _, _)) => {\n                 Ok(text_sig(format!(\"#[lang = \\\"{}\\\"]\", lang_item.name())))\n             }\n             hir::TyKind::TraitObject(bounds, ..) => {"}, {"sha": "f64c9f25e49498cec9315c9d85a566f088d84f06", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -91,7 +91,6 @@\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(in_band_lifetimes)]\n-#![feature(iter_zip)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "f01ff02da072f2bb5c281c403c7dde5ebb858a7c", "filename": "compiler/rustc_target/src/spec/aarch64_apple_darwin.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -9,7 +9,6 @@ pub fn target() -> Target {\n     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::THREAD;\n \n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-arch\".to_string(), \"arm64\".to_string()]);\n-    base.link_env.extend(super::apple_base::macos_link_env(\"arm64\"));\n     base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n \n     // Clang automatically chooses a more specific target based on"}, {"sha": "db6aee59a5dd30cece69887ca7cb238285fd9384", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -79,18 +79,6 @@ pub fn macos_llvm_target(arch: &str) -> String {\n     format!(\"{}-apple-macosx{}.{}.0\", arch, major, minor)\n }\n \n-pub fn macos_link_env(arch: &str) -> Vec<(String, String)> {\n-    // Use the default deployment target for linking just as with the LLVM target if not\n-    // specified via MACOSX_DEPLOYMENT_TARGET, otherwise the system linker would use its\n-    // default which varies with Xcode version.\n-    if env::var(\"MACOSX_DEPLOYMENT_TARGET\").is_err() {\n-        let default = macos_default_deployment_target(arch);\n-        vec![(\"MACOSX_DEPLOYMENT_TARGET\".to_string(), format!(\"{}.{}\", default.0, default.1))]\n-    } else {\n-        vec![]\n-    }\n-}\n-\n pub fn macos_link_env_remove() -> Vec<String> {\n     let mut env_remove = Vec::with_capacity(2);\n     // Remove the `SDKROOT` environment variable if it's clearly set for the wrong platform, which"}, {"sha": "f2635f0656d7a738445df4d41d1dda6302f935ed", "filename": "compiler/rustc_target/src/spec/i686_apple_darwin.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -5,7 +5,6 @@ pub fn target() -> Target {\n     base.cpu = \"yonah\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".to_string()]);\n-    base.link_env.extend(super::apple_base::macos_link_env(\"i686\"));\n     base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;"}, {"sha": "22fdaabfcb89b68821fde9b65c7a137c2b1439ba", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -10,7 +10,6 @@ pub fn target() -> Target {\n         LinkerFlavor::Gcc,\n         vec![\"-m64\".to_string(), \"-arch\".to_string(), \"x86_64\".to_string()],\n     );\n-    base.link_env.extend(super::apple_base::macos_link_env(\"x86_64\"));\n     base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;"}, {"sha": "a03adff288b274ecdbb2d95366663a5d5d7f8a5c", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -17,7 +17,6 @@\n #![feature(derive_default_enum)]\n #![feature(hash_drain_filter)]\n #![feature(in_band_lifetimes)]\n-#![feature(iter_zip)]\n #![feature(let_else)]\n #![feature(never_type)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "239d9d65c58646fbcd39405dafb074e6b4d2ba52", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -439,6 +439,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         self.suggest_remove_reference(&obligation, &mut err, trait_ref);\n                         self.suggest_semicolon_removal(&obligation, &mut err, span, trait_ref);\n                         self.note_version_mismatch(&mut err, &trait_ref);\n+                        self.suggest_remove_await(&obligation, &mut err);\n \n                         if Some(trait_ref.def_id()) == tcx.lang_items().try_trait() {\n                             self.suggest_await_before_try(&mut err, &obligation, trait_ref, span);"}, {"sha": "4d17a7140e80b19496efa05a6a59f0b1a68598a9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 120, "deletions": 121, "changes": 241, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -89,6 +89,12 @@ pub trait InferCtxtExt<'tcx> {\n         trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n     );\n \n+    fn suggest_remove_await(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut DiagnosticBuilder<'_>,\n+    );\n+\n     fn suggest_change_mut(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n@@ -873,6 +879,63 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn suggest_remove_await(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut DiagnosticBuilder<'_>,\n+    ) {\n+        let span = obligation.cause.span;\n+\n+        if let ObligationCauseCode::AwaitableExpr(hir_id) = obligation.cause.code.peel_derives() {\n+            let hir = self.tcx.hir();\n+            if let Some(node) = hir_id.and_then(|hir_id| hir.find(hir_id)) {\n+                if let hir::Node::Expr(expr) = node {\n+                    // FIXME: use `obligation.predicate.kind()...trait_ref.self_ty()` to see if we have `()`\n+                    // and if not maybe suggest doing something else? If we kept the expression around we\n+                    // could also check if it is an fn call (very likely) and suggest changing *that*, if\n+                    // it is from the local crate.\n+                    err.span_suggestion_verbose(\n+                        expr.span.shrink_to_hi().with_hi(span.hi()),\n+                        \"remove the `.await`\",\n+                        String::new(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                    // FIXME: account for associated `async fn`s.\n+                    if let hir::Expr { span, kind: hir::ExprKind::Call(base, _), .. } = expr {\n+                        if let ty::PredicateKind::Trait(pred) =\n+                            obligation.predicate.kind().skip_binder()\n+                        {\n+                            err.span_label(\n+                                *span,\n+                                &format!(\"this call returns `{}`\", pred.self_ty()),\n+                            );\n+                        }\n+                        if let Some(typeck_results) =\n+                            self.in_progress_typeck_results.map(|t| t.borrow())\n+                        {\n+                            let ty = typeck_results.expr_ty_adjusted(base);\n+                            if let ty::FnDef(def_id, _substs) = ty.kind() {\n+                                if let Some(hir::Node::Item(hir::Item { span, ident, .. })) =\n+                                    hir.get_if_local(*def_id)\n+                                {\n+                                    err.span_suggestion_verbose(\n+                                        span.shrink_to_lo(),\n+                                        &format!(\n+                                            \"alternatively, consider making `fn {}` asynchronous\",\n+                                            ident\n+                                        ),\n+                                        \"async \".to_string(),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     /// Check if the trait bound is implemented for a different mutability and note it in the\n     /// final error.\n     fn suggest_change_mut(\n@@ -1654,130 +1717,63 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             format!(\"does not implement `{}`\", trait_ref.print_only_trait_path())\n         };\n \n-        let mut explain_yield =\n-            |interior_span: Span, yield_span: Span, scope_span: Option<Span>| {\n-                let mut span = MultiSpan::from_span(yield_span);\n-                if let Ok(snippet) = source_map.span_to_snippet(interior_span) {\n-                    // #70935: If snippet contains newlines, display \"the value\" instead\n-                    // so that we do not emit complex diagnostics.\n-                    let snippet = &format!(\"`{}`\", snippet);\n-                    let snippet = if snippet.contains('\\n') { \"the value\" } else { snippet };\n-                    // The multispan can be complex here, like:\n-                    // note: future is not `Send` as this value is used across an await\n-                    //   --> $DIR/issue-70935-complex-spans.rs:13:9\n-                    //    |\n-                    // LL |            baz(|| async{\n-                    //    |  __________^___-\n-                    //    | | _________|\n-                    //    | ||\n-                    // LL | ||             foo(tx.clone());\n-                    // LL | ||         }).await;\n-                    //    | ||         -      ^- value is later dropped here\n-                    //    | ||_________|______|\n-                    //    | |__________|      await occurs here, with value maybe used later\n-                    //    |            has type `closure` which is not `Send`\n-                    //\n-                    // So, detect it and separate into some notes, like:\n-                    //\n-                    // note: future is not `Send` as this value is used across an await\n-                    //   --> $DIR/issue-70935-complex-spans.rs:13:9\n-                    //    |\n-                    // LL | /         baz(|| async{\n-                    // LL | |             foo(tx.clone());\n-                    // LL | |         }).await;\n-                    //    | |________________^ first, await occurs here, with the value maybe used later...\n-                    // note: the value is later dropped here\n-                    //   --> $DIR/issue-70935-complex-spans.rs:15:17\n-                    //    |\n-                    // LL |         }).await;\n-                    //    |                 ^\n-                    //\n-                    // If available, use the scope span to annotate the drop location.\n-                    if let Some(scope_span) = scope_span {\n-                        let scope_span = source_map.end_point(scope_span);\n-                        let is_overlapped =\n-                            yield_span.overlaps(scope_span) || yield_span.overlaps(interior_span);\n-                        if is_overlapped {\n-                            span.push_span_label(\n-                                yield_span,\n-                                format!(\n-                                    \"first, {} occurs here, with {} maybe used later...\",\n-                                    await_or_yield, snippet\n-                                ),\n-                            );\n-                            err.span_note(\n-                                span,\n-                                &format!(\n-                                    \"{} {} as this value is used across {}\",\n-                                    future_or_generator, trait_explanation, an_await_or_yield\n-                                ),\n-                            );\n-                            if source_map.is_multiline(interior_span) {\n-                                err.span_note(\n-                                    scope_span,\n-                                    &format!(\"{} is later dropped here\", snippet),\n-                                );\n-                                err.span_note(\n-                                    interior_span,\n-                                    &format!(\n-                                        \"this has type `{}` which {}\",\n-                                        target_ty, trait_explanation\n-                                    ),\n-                                );\n-                            } else {\n-                                let mut span = MultiSpan::from_span(scope_span);\n-                                span.push_span_label(\n-                                    interior_span,\n-                                    format!(\"has type `{}` which {}\", target_ty, trait_explanation),\n-                                );\n-                                err.span_note(span, &format!(\"{} is later dropped here\", snippet));\n-                            }\n-                        } else {\n-                            span.push_span_label(\n-                                yield_span,\n-                                format!(\n-                                    \"{} occurs here, with {} maybe used later\",\n-                                    await_or_yield, snippet\n-                                ),\n-                            );\n-                            span.push_span_label(\n-                                scope_span,\n-                                format!(\"{} is later dropped here\", snippet),\n-                            );\n-                            span.push_span_label(\n-                                interior_span,\n-                                format!(\"has type `{}` which {}\", target_ty, trait_explanation),\n-                            );\n-                            err.span_note(\n-                                span,\n-                                &format!(\n-                                    \"{} {} as this value is used across {}\",\n-                                    future_or_generator, trait_explanation, an_await_or_yield\n-                                ),\n-                            );\n-                        }\n+        let mut explain_yield = |interior_span: Span,\n+                                 yield_span: Span,\n+                                 scope_span: Option<Span>| {\n+            let mut span = MultiSpan::from_span(yield_span);\n+            if let Ok(snippet) = source_map.span_to_snippet(interior_span) {\n+                // #70935: If snippet contains newlines, display \"the value\" instead\n+                // so that we do not emit complex diagnostics.\n+                let snippet = &format!(\"`{}`\", snippet);\n+                let snippet = if snippet.contains('\\n') { \"the value\" } else { snippet };\n+                // note: future is not `Send` as this value is used across an await\n+                //   --> $DIR/issue-70935-complex-spans.rs:13:9\n+                //    |\n+                // LL |            baz(|| async {\n+                //    |  ______________-\n+                //    | |\n+                //    | |\n+                // LL | |              foo(tx.clone());\n+                // LL | |          }).await;\n+                //    | |          - ^^^^^^ await occurs here, with value maybe used later\n+                //    | |__________|\n+                //    |            has type `closure` which is not `Send`\n+                // note: value is later dropped here\n+                // LL | |          }).await;\n+                //    | |                  ^\n+                //\n+                span.push_span_label(\n+                    yield_span,\n+                    format!(\"{} occurs here, with {} maybe used later\", await_or_yield, snippet),\n+                );\n+                span.push_span_label(\n+                    interior_span,\n+                    format!(\"has type `{}` which {}\", target_ty, trait_explanation),\n+                );\n+                // If available, use the scope span to annotate the drop location.\n+                let mut scope_note = None;\n+                if let Some(scope_span) = scope_span {\n+                    let scope_span = source_map.end_point(scope_span);\n+\n+                    let msg = format!(\"{} is later dropped here\", snippet);\n+                    if source_map.is_multiline(yield_span.between(scope_span)) {\n+                        span.push_span_label(scope_span, msg);\n                     } else {\n-                        span.push_span_label(\n-                            yield_span,\n-                            format!(\n-                                \"{} occurs here, with {} maybe used later\",\n-                                await_or_yield, snippet\n-                            ),\n-                        );\n-                        span.push_span_label(\n-                            interior_span,\n-                            format!(\"has type `{}` which {}\", target_ty, trait_explanation),\n-                        );\n-                        err.span_note(\n-                            span,\n-                            &format!(\n-                                \"{} {} as this value is used across {}\",\n-                                future_or_generator, trait_explanation, an_await_or_yield\n-                            ),\n-                        );\n+                        scope_note = Some((scope_span, msg));\n                     }\n                 }\n-            };\n+                err.span_note(\n+                    span,\n+                    &format!(\n+                        \"{} {} as this value is used across {}\",\n+                        future_or_generator, trait_explanation, an_await_or_yield\n+                    ),\n+                );\n+                if let Some((span, msg)) = scope_note {\n+                    err.span_note(span, &msg);\n+                }\n+            }\n+        };\n         match interior_or_upvar_span {\n             GeneratorInteriorOrUpvar::Interior(interior_span) => {\n                 if let Some((scope_span, yield_span, expr, from_awaited_ty)) = interior_extra_info {\n@@ -1935,6 +1931,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             | ObligationCauseCode::ReturnType\n             | ObligationCauseCode::ReturnValue(_)\n             | ObligationCauseCode::BlockTailExpression(_)\n+            | ObligationCauseCode::AwaitableExpr(_)\n+            | ObligationCauseCode::ForLoopIterator\n+            | ObligationCauseCode::QuestionMark\n             | ObligationCauseCode::LetElse => {}\n             ObligationCauseCode::SliceOrArrayElem => {\n                 err.note(\"slice and array elements must have `Sized` type\");"}, {"sha": "ea54b85b2f20c889162316f7d570f11cffc572ff", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -92,7 +92,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         &self,\n         span: Span,\n         trait_def_id: DefId,\n-        trait_segment: &'a hir::PathSegment<'a>,\n+        trait_segment: &'_ hir::PathSegment<'_>,\n     ) {\n         let trait_def = self.tcx().trait_def(trait_def_id);\n "}, {"sha": "23c3b5af262a20183c3e9611b71ff11449acbd57", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -2340,7 +2340,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     .map(|(ty, _, _)| ty)\n                     .unwrap_or_else(|_| tcx.ty_error())\n             }\n-            hir::TyKind::Path(hir::QPath::LangItem(lang_item, span)) => {\n+            hir::TyKind::Path(hir::QPath::LangItem(lang_item, span, _)) => {\n                 let def_id = tcx.require_lang_item(lang_item, Some(span));\n                 let (substs, _) = self.create_substs_for_ast_path(\n                     span,"}, {"sha": "405e4e8594a3ac60bd3d3210a49f57b73b35a4dc", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -557,7 +557,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n }\n \n-fn arms_contain_ref_bindings(arms: &'tcx [hir::Arm<'tcx>]) -> Option<hir::Mutability> {\n+fn arms_contain_ref_bindings<'tcx>(arms: &'tcx [hir::Arm<'tcx>]) -> Option<hir::Mutability> {\n     arms.iter().filter_map(|a| a.pat.contains_explicit_ref_binding()).max_by_key(|m| match *m {\n         hir::Mutability::Mut => 1,\n         hir::Mutability::Not => 0,"}, {"sha": "fd7b3a55dfb97b59d61bb1e2cca8e3f2c6ae65ce", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -453,7 +453,7 @@ pub(super) fn check_opaque<'tcx>(\n /// Checks that an opaque type does not use `Self` or `T::Foo` projections that would result\n /// in \"inheriting lifetimes\".\n #[instrument(level = \"debug\", skip(tcx, span))]\n-pub(super) fn check_opaque_for_inheriting_lifetimes(\n+pub(super) fn check_opaque_for_inheriting_lifetimes<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: LocalDefId,\n     span: Span,\n@@ -517,7 +517,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n         }\n     }\n \n-    impl Visitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n+    impl<'tcx> Visitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n         type Map = rustc_middle::hir::map::Map<'tcx>;\n \n         fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<Self::Map> {\n@@ -1512,7 +1512,7 @@ pub(super) use wfcheck::check_trait_item as check_trait_item_well_formed;\n \n pub(super) use wfcheck::check_impl_item as check_impl_item_well_formed;\n \n-fn async_opaque_type_cycle_error(tcx: TyCtxt<'tcx>, span: Span) {\n+fn async_opaque_type_cycle_error(tcx: TyCtxt<'_>, span: Span) {\n     struct_span_err!(tcx.sess, span, E0733, \"recursion in an `async fn` requires boxing\")\n         .span_label(span, \"recursive `async fn`\")\n         .note(\"a recursive `async fn` must be rewritten to return a boxed `dyn Future`\")\n@@ -1530,7 +1530,7 @@ fn async_opaque_type_cycle_error(tcx: TyCtxt<'tcx>, span: Span) {\n ///\n /// If all the return expressions evaluate to `!`, then we explain that the error will go away\n /// after changing it. This can happen when a user uses `panic!()` or similar as a placeholder.\n-fn opaque_type_cycle_error(tcx: TyCtxt<'tcx>, def_id: LocalDefId, span: Span) {\n+fn opaque_type_cycle_error(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) {\n     let mut err = struct_span_err!(tcx.sess, span, E0720, \"cannot resolve opaque type\");\n \n     let mut label = false;"}, {"sha": "ac18908e95bcda2ea2430fcbc48cd32a196f0888", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -102,7 +102,7 @@ fn identity(_: Ty<'_>) -> Vec<Adjustment<'_>> {\n     vec![]\n }\n \n-fn simple(kind: Adjust<'tcx>) -> impl FnOnce(Ty<'tcx>) -> Vec<Adjustment<'tcx>> {\n+fn simple<'tcx>(kind: Adjust<'tcx>) -> impl FnOnce(Ty<'tcx>) -> Vec<Adjustment<'tcx>> {\n     move |target| vec![Adjustment { kind, target }]\n }\n \n@@ -1694,7 +1694,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         err.help(\"you could instead create a new `enum` with a variant for each returned type\");\n     }\n \n-    fn is_return_ty_unsized(&self, fcx: &FnCtxt<'a, 'tcx>, blk_id: hir::HirId) -> bool {\n+    fn is_return_ty_unsized<'a>(&self, fcx: &FnCtxt<'a, 'tcx>, blk_id: hir::HirId) -> bool {\n         if let Some((fn_decl, _)) = fcx.get_fn_decl(blk_id) {\n             if let hir::FnRetTy::Return(ty) = fn_decl.output {\n                 let ty = <dyn AstConv<'_>>::ast_ty_to_ty(fcx, ty);"}, {"sha": "3cc66aaf0d79c3ec8675a7f8c924f6caada1af9c", "filename": "compiler/rustc_typeck/src/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -302,7 +302,7 @@ impl<'tcx> SimpleEqRelation<'tcx> {\n     }\n }\n \n-impl TypeRelation<'tcx> for SimpleEqRelation<'tcx> {\n+impl<'tcx> TypeRelation<'tcx> for SimpleEqRelation<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}, {"sha": "bc6ad3c9686719a8f8df63ad146276035ddd102f", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -277,8 +277,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ExprKind::AddrOf(kind, mutbl, oprnd) => {\n                 self.check_expr_addr_of(kind, mutbl, oprnd, expected, expr)\n             }\n-            ExprKind::Path(QPath::LangItem(lang_item, _)) => {\n-                self.check_lang_item_path(lang_item, expr)\n+            ExprKind::Path(QPath::LangItem(lang_item, _, hir_id)) => {\n+                self.check_lang_item_path(lang_item, expr, hir_id)\n             }\n             ExprKind::Path(ref qpath) => self.check_expr_path(qpath, expr, &[]),\n             ExprKind::InlineAsm(asm) => self.check_expr_asm(asm),\n@@ -498,8 +498,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         lang_item: hir::LangItem,\n         expr: &'tcx hir::Expr<'tcx>,\n+        hir_id: Option<hir::HirId>,\n     ) -> Ty<'tcx> {\n-        self.resolve_lang_item_path(lang_item, expr.span, expr.hir_id).1\n+        self.resolve_lang_item_path(lang_item, expr.span, expr.hir_id, hir_id).1\n     }\n \n     pub(crate) fn check_expr_path("}, {"sha": "738af9bfb8cc56b04e6a24524d282e28de41093f", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -791,6 +791,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         lang_item: hir::LangItem,\n         span: Span,\n         hir_id: hir::HirId,\n+        expr_hir_id: Option<hir::HirId>,\n     ) -> (Res, Ty<'tcx>) {\n         let def_id = self.tcx.require_lang_item(lang_item, Some(span));\n         let def_kind = self.tcx.def_kind(def_id);\n@@ -804,7 +805,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let ty = item_ty.subst(self.tcx, substs);\n \n         self.write_resolution(hir_id, Ok((def_kind, def_id)));\n-        self.add_required_obligations(span, def_id, &substs);\n+        self.add_required_obligations_with_code(\n+            span,\n+            def_id,\n+            &substs,\n+            match lang_item {\n+                hir::LangItem::IntoFutureIntoFuture => {\n+                    ObligationCauseCode::AwaitableExpr(expr_hir_id)\n+                }\n+                hir::LangItem::IteratorNext | hir::LangItem::IntoIterIntoIter => {\n+                    ObligationCauseCode::ForLoopIterator\n+                }\n+                hir::LangItem::TryTraitFromOutput\n+                | hir::LangItem::TryTraitFromResidual\n+                | hir::LangItem::TryTraitBranch => ObligationCauseCode::QuestionMark,\n+                _ => traits::ItemObligation(def_id),\n+            },\n+        );\n         (Res::Def(def_kind, def_id), ty)\n     }\n \n@@ -1486,12 +1503,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     /// Add all the obligations that are required, substituting and normalized appropriately.\n-    #[tracing::instrument(level = \"debug\", skip(self, span, def_id, substs))]\n     crate fn add_required_obligations(&self, span: Span, def_id: DefId, substs: &SubstsRef<'tcx>) {\n+        self.add_required_obligations_with_code(\n+            span,\n+            def_id,\n+            substs,\n+            traits::ItemObligation(def_id),\n+        )\n+    }\n+\n+    #[tracing::instrument(level = \"debug\", skip(self, span, def_id, substs))]\n+    fn add_required_obligations_with_code(\n+        &self,\n+        span: Span,\n+        def_id: DefId,\n+        substs: &SubstsRef<'tcx>,\n+        code: ObligationCauseCode<'tcx>,\n+    ) {\n         let (bounds, _) = self.instantiate_bounds(span, def_id, &substs);\n \n         for obligation in traits::predicates_for_generics(\n-            traits::ObligationCause::new(span, self.body_id, traits::ItemObligation(def_id)),\n+            traits::ObligationCause::new(span, self.body_id, code),\n             self.param_env,\n             bounds,\n         ) {"}, {"sha": "b2641726075c99a98c4cdd3fbefdcc790fe7c6d1", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -938,8 +938,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 (result.map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)), ty)\n             }\n-            QPath::LangItem(lang_item, span) => {\n-                self.resolve_lang_item_path(lang_item, span, hir_id)\n+            QPath::LangItem(lang_item, span, id) => {\n+                self.resolve_lang_item_path(lang_item, span, hir_id, id)\n             }\n         }\n     }"}, {"sha": "beb6b371b2bb8de1dba246009a5569c74f96a412", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -76,7 +76,7 @@ pub struct InheritedBuilder<'tcx> {\n     def_id: LocalDefId,\n }\n \n-impl Inherited<'_, 'tcx> {\n+impl<'tcx> Inherited<'_, 'tcx> {\n     pub fn build(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> InheritedBuilder<'tcx> {\n         let hir_owner = tcx.hir().local_def_id_to_hir_id(def_id).owner;\n \n@@ -97,7 +97,7 @@ impl<'tcx> InheritedBuilder<'tcx> {\n     }\n }\n \n-impl Inherited<'a, 'tcx> {\n+impl<'a, 'tcx> Inherited<'a, 'tcx> {\n     pub(super) fn new(infcx: InferCtxt<'a, 'tcx>, def_id: LocalDefId) -> Self {\n         let tcx = infcx.tcx;\n         let item_id = tcx.hir().local_def_id_to_hir_id(def_id);"}, {"sha": "8392731b28d619df44841895ab084ac2ba9a8fa4", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -1968,7 +1968,7 @@ fn find_use_placement<'tcx>(tcx: TyCtxt<'tcx>, target_module: LocalDefId) -> (Op\n     (span, found_use)\n }\n \n-fn print_disambiguation_help(\n+fn print_disambiguation_help<'tcx>(\n     item_name: Ident,\n     args: Option<&'tcx [hir::Expr<'tcx>]>,\n     err: &mut DiagnosticBuilder<'_>,"}, {"sha": "a9e6b1caff07b03d55d67d979c52368b1031fd6a", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -508,7 +508,7 @@ struct GeneratorTypes<'tcx> {\n \n /// Given a `DefId` for an opaque type in return position, find its parent item's return\n /// expressions.\n-fn get_owner_return_paths(\n+fn get_owner_return_paths<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: LocalDefId,\n ) -> Option<(hir::HirId, ReturnsVisitor<'tcx>)> {\n@@ -906,7 +906,7 @@ struct CheckItemTypesVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'tcx> {\n+impl<'tcx> ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'tcx> {\n     fn visit_item(&mut self, i: &'tcx hir::Item<'tcx>) {\n         check_item_type(self.tcx, i);\n     }"}, {"sha": "8ebfcdd539b67382d883710ab5c40bf25137309b", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -893,7 +893,7 @@ enum Op {\n }\n \n /// Dereferences a single level of immutable referencing.\n-fn deref_ty_if_possible(ty: Ty<'tcx>) -> Ty<'tcx> {\n+fn deref_ty_if_possible<'tcx>(ty: Ty<'tcx>) -> Ty<'tcx> {\n     match ty.kind() {\n         ty::Ref(_, ty, hir::Mutability::Not) => ty,\n         _ => ty,\n@@ -1007,7 +1007,7 @@ impl<'tcx> TypeVisitor<'tcx> for TypeParamVisitor<'tcx> {\n \n struct TypeParamEraser<'a, 'tcx>(&'a FnCtxt<'a, 'tcx>, Span);\n \n-impl TypeFolder<'tcx> for TypeParamEraser<'_, 'tcx> {\n+impl<'tcx> TypeFolder<'tcx> for TypeParamEraser<'_, 'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.0.tcx\n     }"}, {"sha": "ec06e0b11264d9683f31b944520f7dad3419b202", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -740,7 +740,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn check_pat_path(\n+    fn check_pat_path<'b>(\n         &self,\n         pat: &Pat<'_>,\n         path_resolution: (Res, Option<Ty<'tcx>>, &'b [hir::PathSegment<'b>]),\n@@ -816,7 +816,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         false\n     }\n \n-    fn emit_bad_pat_path(\n+    fn emit_bad_pat_path<'b>(\n         &self,\n         mut e: DiagnosticBuilder<'_>,\n         pat_span: Span,"}, {"sha": "1b42edc83be20d18c07a4d59e12daa896ba565d3", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -106,7 +106,7 @@ macro_rules! ignore_err {\n pub(crate) trait OutlivesEnvironmentExt<'tcx> {\n     fn add_implied_bounds(\n         &mut self,\n-        infcx: &InferCtxt<'a, 'tcx>,\n+        infcx: &InferCtxt<'_, 'tcx>,\n         fn_sig_tys: FxHashSet<Ty<'tcx>>,\n         body_id: hir::HirId,\n         span: Span,\n@@ -130,7 +130,7 @@ impl<'tcx> OutlivesEnvironmentExt<'tcx> for OutlivesEnvironment<'tcx> {\n     /// add those assumptions into the outlives-environment.\n     ///\n     /// Tests: `src/test/ui/regions/regions-free-region-ordering-*.rs`\n-    fn add_implied_bounds(\n+    fn add_implied_bounds<'a>(\n         &mut self,\n         infcx: &InferCtxt<'a, 'tcx>,\n         fn_sig_tys: FxHashSet<Ty<'tcx>>,"}, {"sha": "ffd7d29bbbbeedb9eb52986d8cbfde4910c59653", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -1672,7 +1672,7 @@ fn restrict_repr_packed_field_ref_capture<'tcx>(\n }\n \n /// Returns a Ty that applies the specified capture kind on the provided capture Ty\n-fn apply_capture_kind_on_capture_ty(\n+fn apply_capture_kind_on_capture_ty<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ty: Ty<'tcx>,\n     capture_kind: UpvarCapture<'tcx>,\n@@ -1685,7 +1685,7 @@ fn apply_capture_kind_on_capture_ty(\n }\n \n /// Returns the Span of where the value with the provided HirId would be dropped\n-fn drop_location_span(tcx: TyCtxt<'tcx>, hir_id: &hir::HirId) -> Span {\n+fn drop_location_span<'tcx>(tcx: TyCtxt<'tcx>, hir_id: &hir::HirId) -> Span {\n     let owner_id = tcx.hir().get_enclosing_scope(*hir_id).unwrap();\n \n     let owner_node = tcx.hir().get(owner_id);\n@@ -1999,7 +1999,7 @@ fn restrict_precision_for_drop_types<'a, 'tcx>(\n /// - No projections are applied to raw pointers, since these require unsafe blocks. We capture\n ///   them completely.\n /// - No projections are applied on top of Union ADTs, since these require unsafe blocks.\n-fn restrict_precision_for_unsafe(\n+fn restrict_precision_for_unsafe<'tcx>(\n     mut place: Place<'tcx>,\n     mut curr_mode: ty::UpvarCapture<'tcx>,\n ) -> (Place<'tcx>, ty::UpvarCapture<'tcx>) {\n@@ -2097,7 +2097,7 @@ fn adjust_for_non_move_closure<'tcx>(\n     (place, kind)\n }\n \n-fn construct_place_string(tcx: TyCtxt<'_>, place: &Place<'tcx>) -> String {\n+fn construct_place_string<'tcx>(tcx: TyCtxt<'_>, place: &Place<'tcx>) -> String {\n     let variable_name = match place.base {\n         PlaceBase::Upvar(upvar_id) => var_name(tcx, upvar_id.var_path.hir_id).to_string(),\n         _ => bug!(\"Capture_information should only contain upvars\"),\n@@ -2120,7 +2120,7 @@ fn construct_place_string(tcx: TyCtxt<'_>, place: &Place<'tcx>) -> String {\n     format!(\"{}[{}]\", variable_name, projections_str)\n }\n \n-fn construct_capture_kind_reason_string(\n+fn construct_capture_kind_reason_string<'tcx>(\n     tcx: TyCtxt<'_>,\n     place: &Place<'tcx>,\n     capture_info: &ty::CaptureInfo<'tcx>,\n@@ -2135,13 +2135,13 @@ fn construct_capture_kind_reason_string(\n     format!(\"{} captured as {} here\", place_str, capture_kind_str)\n }\n \n-fn construct_path_string(tcx: TyCtxt<'_>, place: &Place<'tcx>) -> String {\n+fn construct_path_string<'tcx>(tcx: TyCtxt<'_>, place: &Place<'tcx>) -> String {\n     let place_str = construct_place_string(tcx, place);\n \n     format!(\"{} used here\", place_str)\n }\n \n-fn construct_capture_info_string(\n+fn construct_capture_info_string<'tcx>(\n     tcx: TyCtxt<'_>,\n     place: &Place<'tcx>,\n     capture_info: &ty::CaptureInfo<'tcx>,\n@@ -2233,7 +2233,7 @@ fn migration_suggestion_for_2229(\n /// would've already handled `E1`, and have an existing capture_information for it.\n /// Calling `determine_capture_info(existing_info_e1, current_info_e2)` will return\n /// `existing_info_e1` in this case, allowing us to point to `E1` in case of diagnostics.\n-fn determine_capture_info(\n+fn determine_capture_info<'tcx>(\n     capture_info_a: ty::CaptureInfo<'tcx>,\n     capture_info_b: ty::CaptureInfo<'tcx>,\n ) -> ty::CaptureInfo<'tcx> {\n@@ -2292,7 +2292,7 @@ fn determine_capture_info(\n ///\n /// Note: Capture kind changes from `MutBorrow` to `UniqueImmBorrow` if the truncated part of the `place`\n /// contained `Deref` of `&mut`.\n-fn truncate_place_to_len_and_update_capture_kind(\n+fn truncate_place_to_len_and_update_capture_kind<'tcx>(\n     place: &mut Place<'tcx>,\n     curr_mode: &mut ty::UpvarCapture<'tcx>,\n     len: usize,\n@@ -2330,7 +2330,7 @@ fn truncate_place_to_len_and_update_capture_kind(\n /// `PlaceAncestryRelation::Ancestor` implies Place A is ancestor of Place B\n /// `PlaceAncestryRelation::Descendant` implies Place A is descendant of Place B\n /// `PlaceAncestryRelation::Divergent` implies neither of them is the ancestor of the other.\n-fn determine_place_ancestry_relation(\n+fn determine_place_ancestry_relation<'tcx>(\n     place_a: &Place<'tcx>,\n     place_b: &Place<'tcx>,\n ) -> PlaceAncestryRelation {"}, {"sha": "7c4f5d16abcaba934f1755ded4f77c385a842ea8", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -1488,7 +1488,7 @@ fn check_method_receiver<'fcx, 'tcx>(\n     }\n }\n \n-fn e0307(fcx: &FnCtxt<'fcx, 'tcx>, span: Span, receiver_ty: Ty<'_>) {\n+fn e0307<'tcx>(fcx: &FnCtxt<'_, 'tcx>, span: Span, receiver_ty: Ty<'_>) {\n     struct_span_err!(\n         fcx.tcx.sess.diagnostic(),\n         span,\n@@ -1591,7 +1591,7 @@ fn receiver_is_valid<'fcx, 'tcx>(\n     true\n }\n \n-fn receiver_is_implemented(\n+fn receiver_is_implemented<'tcx>(\n     fcx: &FnCtxt<'_, 'tcx>,\n     receiver_trait_def_id: DefId,\n     cause: ObligationCause<'tcx>,\n@@ -1734,13 +1734,13 @@ pub struct CheckTypeWellFormedVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl CheckTypeWellFormedVisitor<'tcx> {\n+impl<'tcx> CheckTypeWellFormedVisitor<'tcx> {\n     pub fn new(tcx: TyCtxt<'tcx>) -> CheckTypeWellFormedVisitor<'tcx> {\n         CheckTypeWellFormedVisitor { tcx }\n     }\n }\n \n-impl ParItemLikeVisitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {\n+impl<'tcx> ParItemLikeVisitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {\n     fn visit_item(&self, i: &'tcx hir::Item<'tcx>) {\n         Visitor::visit_item(&mut self.clone(), i);\n     }\n@@ -1758,7 +1758,7 @@ impl ParItemLikeVisitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {\n     }\n }\n \n-impl Visitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {\n+impl<'tcx> Visitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {\n     type Map = hir_map::Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> hir_visit::NestedVisitorMap<Self::Map> {"}, {"sha": "f45cd3ed68948655ec3304aeec7ddc3d9413f2b1", "filename": "compiler/rustc_typeck/src/check_unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -21,7 +21,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n     unused_crates_lint(tcx);\n }\n \n-impl ItemLikeVisitor<'v> for CheckVisitor<'tcx> {\n+impl<'tcx> ItemLikeVisitor<'_> for CheckVisitor<'tcx> {\n     fn visit_item(&mut self, item: &hir::Item<'_>) {\n         if item.vis.node.is_pub() || item.span.is_dummy() {\n             return;\n@@ -43,7 +43,7 @@ struct CheckVisitor<'tcx> {\n     used_trait_imports: FxHashSet<LocalDefId>,\n }\n \n-impl CheckVisitor<'tcx> {\n+impl<'tcx> CheckVisitor<'tcx> {\n     fn check_import(&self, item_id: hir::ItemId, span: Span) {\n         if !self.tcx.maybe_unused_trait_import(item_id.def_id) {\n             return;"}, {"sha": "d5494c5a6854847a48f571a844a6719ecbf7bca7", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -108,7 +108,7 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n     }\n }\n \n-fn visit_implementation_of_coerce_unsized(tcx: TyCtxt<'tcx>, impl_did: LocalDefId) {\n+fn visit_implementation_of_coerce_unsized<'tcx>(tcx: TyCtxt<'tcx>, impl_did: LocalDefId) {\n     debug!(\"visit_implementation_of_coerce_unsized: impl_did={:?}\", impl_did);\n \n     // Just compute this for the side-effects, in particular reporting\n@@ -118,7 +118,7 @@ fn visit_implementation_of_coerce_unsized(tcx: TyCtxt<'tcx>, impl_did: LocalDefI\n     tcx.at(span).coerce_unsized_info(impl_did);\n }\n \n-fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n+fn visit_implementation_of_dispatch_from_dyn<'tcx>(tcx: TyCtxt<'tcx>, impl_did: LocalDefId) {\n     debug!(\"visit_implementation_of_dispatch_from_dyn: impl_did={:?}\", impl_did);\n \n     let impl_hir_id = tcx.hir().local_def_id_to_hir_id(impl_did);\n@@ -287,7 +287,7 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDef\n     })\n }\n \n-pub fn coerce_unsized_info(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUnsizedInfo {\n+pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUnsizedInfo {\n     debug!(\"compute_coerce_unsized_info(impl_did={:?})\", impl_did);\n \n     // this provider should only get invoked for local def-ids"}, {"sha": "f4e5cce0129c9109d7932836f408c0bf7c22ffaa", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -38,7 +38,7 @@ struct InherentCollect<'tcx> {\n     impls_map: CrateInherentImpls,\n }\n \n-impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n+impl<'tcx> ItemLikeVisitor<'_> for InherentCollect<'tcx> {\n     fn visit_item(&mut self, item: &hir::Item<'_>) {\n         let (ty, assoc_items) = match item.kind {\n             hir::ItemKind::Impl(hir::Impl { of_trait: None, ref self_ty, items, .. }) => {\n@@ -370,7 +370,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n     fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}\n }\n \n-impl InherentCollect<'tcx> {\n+impl<'tcx> InherentCollect<'tcx> {\n     fn check_def_id(&mut self, item: &hir::Item<'_>, def_id: DefId) {\n         if let Some(def_id) = def_id.as_local() {\n             // Add the implementation to the mapping from implementation to base"}, {"sha": "59f211bd2c36c9ec82b50d9de3fdeb3701c264a5", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -18,7 +18,7 @@ struct InherentOverlapChecker<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl InherentOverlapChecker<'tcx> {\n+impl<'tcx> InherentOverlapChecker<'tcx> {\n     /// Checks whether any associated items in impls 1 and 2 share the same identifier and\n     /// namespace.\n     fn impls_have_common_items(\n@@ -115,8 +115,8 @@ impl InherentOverlapChecker<'tcx> {\n     }\n }\n \n-impl ItemLikeVisitor<'v> for InherentOverlapChecker<'tcx> {\n-    fn visit_item(&mut self, item: &'v hir::Item<'v>) {\n+impl<'tcx> ItemLikeVisitor<'_> for InherentOverlapChecker<'tcx> {\n+    fn visit_item(&mut self, item: &hir::Item<'_>) {\n         match item.kind {\n             hir::ItemKind::Enum(..)\n             | hir::ItemKind::Struct(..)\n@@ -300,9 +300,9 @@ impl ItemLikeVisitor<'v> for InherentOverlapChecker<'tcx> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'v>) {}\n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}\n \n-    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'v>) {}\n+    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}\n \n-    fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'v>) {}\n+    fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}\n }"}, {"sha": "e954b4cf512c5a8820341333fa5b9d8aa4d9282c", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -143,7 +143,7 @@ fn orphan_check_impl(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Result<(), ErrorRep\n     Ok(())\n }\n \n-fn emit_orphan_check_error(\n+fn emit_orphan_check_error<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     sp: Span,\n     trait_span: Span,"}, {"sha": "f7aabf2406f371f19bab0d828924050e8d308752", "filename": "compiler/rustc_typeck/src/coherence/unsafety.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Funsafety.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -16,10 +16,10 @@ struct UnsafetyChecker<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl UnsafetyChecker<'tcx> {\n+impl<'tcx> UnsafetyChecker<'tcx> {\n     fn check_unsafety_coherence(\n         &mut self,\n-        item: &'v hir::Item<'v>,\n+        item: &hir::Item<'_>,\n         impl_generics: Option<&hir::Generics<'_>>,\n         unsafety: hir::Unsafety,\n         polarity: hir::ImplPolarity,\n@@ -83,8 +83,8 @@ impl UnsafetyChecker<'tcx> {\n     }\n }\n \n-impl ItemLikeVisitor<'v> for UnsafetyChecker<'tcx> {\n-    fn visit_item(&mut self, item: &'v hir::Item<'v>) {\n+impl<'tcx> ItemLikeVisitor<'_> for UnsafetyChecker<'tcx> {\n+    fn visit_item(&mut self, item: &hir::Item<'_>) {\n         if let hir::ItemKind::Impl(ref impl_) = item.kind {\n             self.check_unsafety_coherence(\n                 item,"}, {"sha": "b96a5b158a2682a035b6a1e528e65d3b8a6dfb45", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -147,7 +147,7 @@ struct CollectItemTypesVisitor<'tcx> {\n /// If there are any placeholder types (`_`), emit an error explaining that this is not allowed\n /// and suggest adding type parameters in the appropriate place, taking into consideration any and\n /// all already existing generic type parameters to avoid suggesting a name that is already in use.\n-crate fn placeholder_type_error(\n+crate fn placeholder_type_error<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     span: Option<Span>,\n     generics: &[hir::GenericParam<'_>],\n@@ -223,7 +223,10 @@ crate fn placeholder_type_error(\n     err.emit();\n }\n \n-fn reject_placeholder_type_signatures_in_item(tcx: TyCtxt<'tcx>, item: &'tcx hir::Item<'tcx>) {\n+fn reject_placeholder_type_signatures_in_item<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    item: &'tcx hir::Item<'tcx>,\n+) {\n     let (generics, suggest) = match &item.kind {\n         hir::ItemKind::Union(_, generics)\n         | hir::ItemKind::Enum(_, generics)\n@@ -251,7 +254,7 @@ fn reject_placeholder_type_signatures_in_item(tcx: TyCtxt<'tcx>, item: &'tcx hir\n     );\n }\n \n-impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n+impl<'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n@@ -311,7 +314,7 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Utility types and common code for the above passes.\n \n-fn bad_placeholder_type(\n+fn bad_placeholder_type<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mut spans: Vec<Span>,\n     kind: &'static str,\n@@ -332,7 +335,7 @@ fn bad_placeholder_type(\n     err\n }\n \n-impl ItemCtxt<'tcx> {\n+impl<'tcx> ItemCtxt<'tcx> {\n     pub fn new(tcx: TyCtxt<'tcx>, item_def_id: DefId) -> ItemCtxt<'tcx> {\n         ItemCtxt { tcx, item_def_id }\n     }\n@@ -350,7 +353,7 @@ impl ItemCtxt<'tcx> {\n     }\n }\n \n-impl AstConv<'tcx> for ItemCtxt<'tcx> {\n+impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -643,7 +646,7 @@ fn type_param_predicates(\n     result\n }\n \n-impl ItemCtxt<'tcx> {\n+impl<'tcx> ItemCtxt<'tcx> {\n     /// Finds bounds from `hir::Generics`. This requires scanning through the\n     /// AST. We do this to avoid having to convert *all* the bounds, which\n     /// would create artificial cycles. Instead, we can only convert the\n@@ -1239,7 +1242,7 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n         has_late_bound_regions: Option<Span>,\n     }\n \n-    impl Visitor<'tcx> for LateBoundRegionsDetector<'tcx> {\n+    impl<'tcx> Visitor<'tcx> for LateBoundRegionsDetector<'tcx> {\n         type Map = intravisit::ErasedMap<'tcx>;\n \n         fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n@@ -1746,7 +1749,7 @@ fn is_suggestable_infer_ty(ty: &hir::Ty<'_>) -> bool {\n     }\n }\n \n-pub fn get_infer_ret_ty(output: &'hir hir::FnRetTy<'hir>) -> Option<&'hir hir::Ty<'hir>> {\n+pub fn get_infer_ret_ty<'hir>(output: &'hir hir::FnRetTy<'hir>) -> Option<&'hir hir::Ty<'hir>> {\n     if let hir::FnRetTy::Return(ty) = output {\n         if is_suggestable_infer_ty(ty) {\n             return Some(&*ty);"}, {"sha": "99fddcb00ceca52b2a2994e8c16a174d4b5d8a62", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -731,7 +731,7 @@ fn infer_placeholder_type<'a>(\n         }\n     }\n \n-    impl TypeFolder<'tcx> for MakeNameable<'tcx> {\n+    impl<'tcx> TypeFolder<'tcx> for MakeNameable<'tcx> {\n         fn tcx(&self) -> TyCtxt<'tcx> {\n             self.tcx\n         }"}, {"sha": "0896daf48b78435f0d5afc868ef126c4c195af45", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -482,7 +482,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn walk_struct_expr(\n+    fn walk_struct_expr<'hir>(\n         &mut self,\n         fields: &[hir::ExprField<'_>],\n         opt_with: &Option<&'hir hir::Expr<'_>>,\n@@ -705,7 +705,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n     /// - When reporting the Place back to the Delegate, ensure that the UpvarId uses the enclosing\n     /// closure as the DefId.\n     fn walk_captures(&mut self, closure_expr: &hir::Expr<'_>) {\n-        fn upvar_is_local_variable(\n+        fn upvar_is_local_variable<'tcx>(\n             upvars: Option<&'tcx FxIndexMap<hir::HirId, hir::Upvar>>,\n             upvar_id: &hir::HirId,\n             body_owner_is_closure: bool,\n@@ -846,7 +846,7 @@ fn delegate_consume<'a, 'tcx>(\n     }\n }\n \n-fn is_multivariant_adt(ty: Ty<'tcx>) -> bool {\n+fn is_multivariant_adt(ty: Ty<'_>) -> bool {\n     if let ty::Adt(def, _) = ty.kind() {\n         // Note that if a non-exhaustive SingleVariant is defined in another crate, we need\n         // to assume that more cases will be added to the variant in the future. This mean"}, {"sha": "ae6321de7f2d5d34aa8546063a03a44135eca0fe", "filename": "compiler/rustc_typeck/src/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -76,7 +76,7 @@ struct ImplWfCheck<'tcx> {\n     min_specialization: bool,\n }\n \n-impl ItemLikeVisitor<'tcx> for ImplWfCheck<'tcx> {\n+impl<'tcx> ItemLikeVisitor<'tcx> for ImplWfCheck<'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         if let hir::ItemKind::Impl(ref impl_) = item.kind {\n             enforce_impl_params_are_constrained(self.tcx, item.def_id, impl_.items);"}, {"sha": "24e427f4bcff90f23c4ea51a06ab51c20047b228", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -59,9 +59,7 @@ This API is completely unstable and subject to change.\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(if_let_guard)]\n-#![feature(in_band_lifetimes)]\n #![feature(is_sorted)]\n-#![feature(iter_zip)]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(nll)]"}, {"sha": "b3efd9f9ec36747b42b63632974b5ad5a0b5c0b1", "filename": "compiler/rustc_typeck/src/outlives/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Ftest.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -12,7 +12,7 @@ struct OutlivesTest<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl ItemLikeVisitor<'tcx> for OutlivesTest<'tcx> {\n+impl<'tcx> ItemLikeVisitor<'tcx> for OutlivesTest<'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         // For unit testing: check for a special \"rustc_outlives\"\n         // attribute and report an error with various results if found."}, {"sha": "d6959075d888379671221b8ca539528109a7dcb6", "filename": "compiler/rustc_typeck/src/variance/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Ftest.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -12,7 +12,7 @@ struct VarianceTest<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl ItemLikeVisitor<'tcx> for VarianceTest<'tcx> {\n+impl<'tcx> ItemLikeVisitor<'tcx> for VarianceTest<'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         // For unit testing: check for a special \"rustc_variance\"\n         // attribute and report an error with various results if found."}, {"sha": "e8a932835f653b3d3f8724935b85c91fab6f6e36", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -107,7 +107,6 @@\n #![feature(inherent_ascii_escape)]\n #![feature(inplace_iteration)]\n #![feature(iter_advance_by)]\n-#![feature(iter_zip)]\n #![feature(layout_for_ptr)]\n #![feature(maybe_uninit_extra)]\n #![feature(maybe_uninit_slice)]"}, {"sha": "b1b917775c3fa3072274aa3541e918e7d3b3d655", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -54,7 +54,7 @@ pub use self::zip::TrustedRandomAccess;\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n pub use self::zip::TrustedRandomAccessNoCoerce;\n \n-#[unstable(feature = \"iter_zip\", issue = \"83574\")]\n+#[stable(feature = \"iter_zip\", since = \"1.59.0\")]\n pub use self::zip::zip;\n \n /// This trait provides transitive access to source-stage in an iterator-adapter pipeline"}, {"sha": "e1ee0de3d1fa5bc3cb61b1689a2573699596c45c", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -40,7 +40,6 @@ impl<A: Iterator, B: Iterator> Zip<A, B> {\n /// # Examples\n ///\n /// ```\n-/// #![feature(iter_zip)]\n /// use std::iter::zip;\n ///\n /// let xs = [1, 2, 3];\n@@ -63,7 +62,7 @@ impl<A: Iterator, B: Iterator> Zip<A, B> {\n /// assert_eq!(iter.next().unwrap(), ((3, 6), 9));\n /// assert!(iter.next().is_none());\n /// ```\n-#[unstable(feature = \"iter_zip\", issue = \"83574\")]\n+#[stable(feature = \"iter_zip\", since = \"1.59.0\")]\n pub fn zip<A, B>(a: A, b: B) -> Zip<A::IntoIter, B::IntoIter>\n where\n     A: IntoIterator,"}, {"sha": "da459ed7c68f47d6b452d403a5f93f5c5c4e289d", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -391,7 +391,7 @@ pub use self::traits::{\n     DoubleEndedIterator, ExactSizeIterator, Extend, FromIterator, IntoIterator, Product, Sum,\n };\n \n-#[unstable(feature = \"iter_zip\", issue = \"83574\")]\n+#[stable(feature = \"iter_zip\", since = \"1.59.0\")]\n pub use self::adapters::zip;\n #[stable(feature = \"iter_cloned\", since = \"1.1.0\")]\n pub use self::adapters::Cloned;"}, {"sha": "9a9a844f41bb44cecf96fd29cb5364ab1b3f7058", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -3028,7 +3028,8 @@ pub trait Iterator {\n     ///\n     /// Instead of stopping at [`None`], the iterator will instead start again,\n     /// from the beginning. After iterating again, it will start at the\n-    /// beginning again. And again. And again. Forever.\n+    /// beginning again. And again. And again. Forever. Note that in case the\n+    /// original iterator is empty, the resulting iterator will also be empty.\n     ///\n     /// # Examples\n     ///"}, {"sha": "6a414ae8c4b800981533f7e44e297caa828f28e3", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -115,15 +115,14 @@ use crate::ops::ControlFlow;\n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n #[rustc_on_unimplemented(\n     on(\n-        all(from_method = \"from_output\", from_desugaring = \"TryBlock\"),\n+        all(from_desugaring = \"TryBlock\"),\n         message = \"a `try` block must return `Result` or `Option` \\\n                     (or another type that implements `{Try}`)\",\n         label = \"could not wrap the final value of the block as `{Self}` doesn't implement `Try`\",\n     ),\n     on(\n-        all(from_method = \"branch\", from_desugaring = \"QuestionMark\"),\n-        message = \"the `?` operator can only be applied to values \\\n-                    that implement `{Try}`\",\n+        all(from_desugaring = \"QuestionMark\"),\n+        message = \"the `?` operator can only be applied to values that implement `{Try}`\",\n         label = \"the `?` operator cannot be applied to type `{Self}`\"\n     )\n )]\n@@ -226,7 +225,6 @@ pub trait Try: FromResidual {\n #[rustc_on_unimplemented(\n     on(\n         all(\n-            from_method = \"from_residual\",\n             from_desugaring = \"QuestionMark\",\n             _Self = \"std::result::Result<T, E>\",\n             R = \"std::option::Option<std::convert::Infallible>\"\n@@ -238,7 +236,6 @@ pub trait Try: FromResidual {\n     ),\n     on(\n         all(\n-            from_method = \"from_residual\",\n             from_desugaring = \"QuestionMark\",\n             _Self = \"std::result::Result<T, E>\",\n         ),\n@@ -252,7 +249,6 @@ pub trait Try: FromResidual {\n     ),\n     on(\n         all(\n-            from_method = \"from_residual\",\n             from_desugaring = \"QuestionMark\",\n             _Self = \"std::option::Option<T>\",\n             R = \"std::result::Result<T, E>\",\n@@ -264,7 +260,6 @@ pub trait Try: FromResidual {\n     ),\n     on(\n         all(\n-            from_method = \"from_residual\",\n             from_desugaring = \"QuestionMark\",\n             _Self = \"std::option::Option<T>\",\n         ),\n@@ -277,7 +272,6 @@ pub trait Try: FromResidual {\n     ),\n     on(\n         all(\n-            from_method = \"from_residual\",\n             from_desugaring = \"QuestionMark\",\n             _Self = \"std::ops::ControlFlow<B, C>\",\n             R = \"std::ops::ControlFlow<B, C>\",\n@@ -290,7 +284,6 @@ pub trait Try: FromResidual {\n     ),\n     on(\n         all(\n-            from_method = \"from_residual\",\n             from_desugaring = \"QuestionMark\",\n             _Self = \"std::ops::ControlFlow<B, C>\",\n             // `R` is not a `ControlFlow`, as that case was matched previously\n@@ -301,10 +294,7 @@ pub trait Try: FromResidual {\n         enclosing_scope = \"this function returns a `ControlFlow`\",\n     ),\n     on(\n-        all(\n-            from_method = \"from_residual\",\n-            from_desugaring = \"QuestionMark\"\n-        ),\n+        all(from_desugaring = \"QuestionMark\"),\n         message = \"the `?` operator can only be used in {ItemContext} \\\n                     that returns `Result` or `Option` \\\n                     (or another type that implements `{FromResidual}`)\","}, {"sha": "22e721d79bfed993ad69f085008b7c029583c200", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -292,7 +292,6 @@\n #![feature(int_log)]\n #![feature(into_future)]\n #![feature(intra_doc_pointers)]\n-#![feature(iter_zip)]\n #![feature(lang_items)]\n #![feature(linkage)]\n #![feature(llvm_asm)]"}, {"sha": "2f69adbd81c51eb884cb9ca25e4ac269a016b146", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.async.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.async.txt", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.async.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.async.txt?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -41,9 +41,9 @@\n    41|      1|                    // executed asynchronously.\n    42|      1|    match x {\n    43|      1|        y if c(x).await == y + 1 => { d().await; }\n-                      ^0                            ^0\n+                      ^0       ^0                   ^0 ^0\n    44|      1|        y if f().await == y + 1 => (),\n-                      ^0                         ^0\n+                      ^0      ^0                 ^0\n    45|      1|        _ => (),\n    46|       |    }\n    47|      1|}"}, {"sha": "8047a42c2b1768721e7d038a7ad9778484233593", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -46,6 +46,7 @@ impl CodegenBackend for TheBackend {\n         &self,\n         ongoing_codegen: Box<dyn Any>,\n         _sess: &Session,\n+        _outputs: &OutputFilenames,\n     ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n         let codegen_results = ongoing_codegen\n             .downcast::<CodegenResults>()"}, {"sha": "7d4447b6d5578a171f55641bbe421eb4666af734", "filename": "src/test/ui/async-await/async-error-span.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -14,10 +14,10 @@ LL |     let a;\n    |         ^ cannot infer type\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/async-error-span.rs:14:5\n+  --> $DIR/async-error-span.rs:14:17\n    |\n LL |     get_future().await;\n-   |     ^^^^^^^^^^^^^^^^^^\n+   |                 ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bff282085735c8d8ba701253aed8b0c72df0c5f7", "filename": "src/test/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -6,13 +6,13 @@ LL |     assert_send(local_dropped_before_await());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:24:5\n+  --> $DIR/async-fn-nonsend.rs:24:10\n    |\n LL |     let x = non_send();\n    |         - has type `impl Debug` which is not `Send`\n LL |     drop(x);\n LL |     fut().await;\n-   |     ^^^^^^^^^^^ await occurs here, with `x` maybe used later\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n LL | }\n    | - `x` is later dropped here\n note: required by a bound in `assert_send`\n@@ -29,12 +29,12 @@ LL |     assert_send(non_send_temporary_in_match());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:33:20\n+  --> $DIR/async-fn-nonsend.rs:33:25\n    |\n LL |     match Some(non_send()) {\n    |                ---------- has type `impl Debug` which is not `Send`\n LL |         Some(_) => fut().await,\n-   |                    ^^^^^^^^^^^ await occurs here, with `non_send()` maybe used later\n+   |                         ^^^^^^ await occurs here, with `non_send()` maybe used later\n ...\n LL | }\n    | - `non_send()` is later dropped here\n@@ -52,13 +52,13 @@ LL |     assert_send(non_sync_with_method_call());\n    |\n    = help: the trait `Send` is not implemented for `dyn std::fmt::Write`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:42:9\n+  --> $DIR/async-fn-nonsend.rs:42:14\n    |\n LL |     let f: &mut std::fmt::Formatter = panic!();\n    |         - has type `&mut Formatter<'_>` which is not `Send`\n LL |     if non_sync().fmt(f).unwrap() == () {\n LL |         fut().await;\n-   |         ^^^^^^^^^^^ await occurs here, with `f` maybe used later\n+   |              ^^^^^^ await occurs here, with `f` maybe used later\n LL |     }\n LL | }\n    | - `f` is later dropped here"}, {"sha": "b4323c314badcc4659542f884b919b924f164cdb", "filename": "src/test/ui/async-await/await-keyword/incorrect-syntax-suggestions.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -162,68 +162,68 @@ LL |     let _ = (await bar())?;\n    |              ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:71:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:71:18\n    |\n LL | fn foo13() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await();\n-   |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                  ^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:76:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:76:18\n    |\n LL | fn foo14() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await()?;\n-   |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                  ^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:81:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:81:18\n    |\n LL | fn foo15() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await;\n-   |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                  ^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:85:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:85:18\n    |\n LL | fn foo16() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await?;\n-   |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                  ^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:90:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:90:22\n    |\n LL |     fn foo() -> Result<(), ()> {\n    |        --- this is not `async`\n LL |         let _ = bar().await?;\n-   |                 ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                      ^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:97:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:97:22\n    |\n LL |     let foo = || {\n    |               -- this is not `async`\n LL |         let _ = bar().await?;\n-   |                 ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                      ^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:113:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:113:29\n    |\n LL |     fn foo() -> Result<(), ()> {\n    |        --- this is not `async`\n LL |         let _ = await!(bar())?;\n-   |                 ^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                             ^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:121:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:121:29\n    |\n LL |     let foo = || {\n    |               -- this is not `async`\n LL |         let _ = await!(bar())?;\n-   |                 ^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                             ^ only allowed inside `async` functions and blocks\n \n error: aborting due to 33 previous errors\n "}, {"sha": "e205de4738f24c3ebac12fd79d0d12c27e2ae625", "filename": "src/test/ui/async-await/issue-64130-1-sync.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -6,12 +6,12 @@ LL |     is_sync(bar());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Sync` is not implemented for `Foo`\n note: future is not `Sync` as this value is used across an await\n-  --> $DIR/issue-64130-1-sync.rs:15:5\n+  --> $DIR/issue-64130-1-sync.rs:15:10\n    |\n LL |     let x = Foo;\n    |         - has type `Foo` which is not `Sync`\n LL |     baz().await;\n-   |     ^^^^^^^^^^^ await occurs here, with `x` maybe used later\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n LL | }\n    | - `x` is later dropped here\n note: required by a bound in `is_sync`"}, {"sha": "2225000e2e5797c6383d1c636fdec7de1147ff0b", "filename": "src/test/ui/async-await/issue-64130-2-send.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -6,12 +6,12 @@ LL |     is_send(bar());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Foo`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-64130-2-send.rs:15:5\n+  --> $DIR/issue-64130-2-send.rs:15:10\n    |\n LL |     let x = Foo;\n    |         - has type `Foo` which is not `Send`\n LL |     baz().await;\n-   |     ^^^^^^^^^^^ await occurs here, with `x` maybe used later\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n LL | }\n    | - `x` is later dropped here\n note: required by a bound in `is_send`"}, {"sha": "17867a6a3f62e6b6fc48f646a2967d89cc7b96ea", "filename": "src/test/ui/async-await/issue-64130-3-other.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -8,12 +8,12 @@ LL |     is_qux(bar());\n    |            ^^^^^ within `impl Future<Output = ()>`, the trait `Qux` is not implemented for `Foo`\n    |\n note: future does not implement `Qux` as this value is used across an await\n-  --> $DIR/issue-64130-3-other.rs:18:5\n+  --> $DIR/issue-64130-3-other.rs:18:10\n    |\n LL |     let x = Foo;\n    |         - has type `Foo` which does not implement `Qux`\n LL |     baz().await;\n-   |     ^^^^^^^^^^^ await occurs here, with `x` maybe used later\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n LL | }\n    | - `x` is later dropped here\n note: required by a bound in `is_qux`"}, {"sha": "d631e6dc7f7e968aa80446b2791fbe7114d8a7fb", "filename": "src/test/ui/async-await/issue-64130-4-async-move.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -6,13 +6,13 @@ LL | pub fn foo() -> impl Future + Send {\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Any + Send + 'static)`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-64130-4-async-move.rs:21:26\n+  --> $DIR/issue-64130-4-async-move.rs:21:31\n    |\n LL |         match client.status() {\n    |               ------ has type `&Client` which is not `Send`\n LL |             200 => {\n LL |                 let _x = get().await;\n-   |                          ^^^^^^^^^^^ await occurs here, with `client` maybe used later\n+   |                               ^^^^^^ await occurs here, with `client` maybe used later\n ...\n LL |     }\n    |     - `client` is later dropped here"}, {"sha": "1da80d98bf8fc465f0626b17421760c2a1fccdc6", "filename": "src/test/ui/async-await/issue-64130-non-send-future-diags.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -6,12 +6,12 @@ LL |     is_send(foo());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `MutexGuard<'_, u32>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-64130-non-send-future-diags.rs:17:5\n+  --> $DIR/issue-64130-non-send-future-diags.rs:17:10\n    |\n LL |     let g = x.lock().unwrap();\n    |         - has type `MutexGuard<'_, u32>` which is not `Send`\n LL |     baz().await;\n-   |     ^^^^^^^^^^^ await occurs here, with `g` maybe used later\n+   |          ^^^^^^ await occurs here, with `g` maybe used later\n LL | }\n    | - `g` is later dropped here\n note: required by a bound in `is_send`"}, {"sha": "f32e074d75d620a1656a053b5c2745b79e677a79", "filename": "src/test/ui/async-await/issue-67252-unnamed-future.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -6,12 +6,12 @@ LL |     spawn(async {\n    |\n    = help: within `impl Future<Output = [async output]>`, the trait `Send` is not implemented for `*mut ()`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-67252-unnamed-future.rs:20:9\n+  --> $DIR/issue-67252-unnamed-future.rs:20:16\n    |\n LL |         let _a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n    |             -- has type `*mut ()` which is not `Send`\n LL |         AFuture.await;\n-   |         ^^^^^^^^^^^^^ await occurs here, with `_a` maybe used later\n+   |                ^^^^^^ await occurs here, with `_a` maybe used later\n LL |     });\n    |     - `_a` is later dropped here\n note: required by a bound in `spawn`"}, {"sha": "a159edd51187f35e6b2c42e6fe2378aae95de3ac", "filename": "src/test/ui/async-await/issue-70594.stderr", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -1,10 +1,10 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-70594.rs:4:9\n+  --> $DIR/issue-70594.rs:4:11\n    |\n LL | async fn fun() {\n    |          --- this is not `async`\n LL |     [1; ().await];\n-   |         ^^^^^^^^ only allowed inside `async` functions and blocks\n+   |           ^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0744]: `.await` is not allowed in a `const`\n   --> $DIR/issue-70594.rs:4:9\n@@ -13,20 +13,25 @@ LL |     [1; ().await];\n    |         ^^^^^^^^\n \n error[E0744]: `.await` is not allowed in a `const`\n-  --> $DIR/issue-70594.rs:4:9\n+  --> $DIR/issue-70594.rs:4:11\n    |\n LL |     [1; ().await];\n-   |         ^^^^^^^^\n+   |           ^^^^^^\n \n error[E0277]: `()` is not a future\n-  --> $DIR/issue-70594.rs:4:9\n+  --> $DIR/issue-70594.rs:4:11\n    |\n LL |     [1; ().await];\n-   |         ^^^^^^^^ `()` is not a future\n+   |           ^^^^^^ `()` is not a future\n    |\n    = help: the trait `Future` is not implemented for `()`\n    = note: () must be a future or must implement `IntoFuture` to be awaited\n    = note: required because of the requirements on the impl of `IntoFuture` for `()`\n+help: remove the `.await`\n+   |\n+LL -     [1; ().await];\n+LL +     [1; ()];\n+   | \n \n error: aborting due to 4 previous errors\n "}, {"sha": "db3099381196b771692e3f1b29677d201c77aea1", "filename": "src/test/ui/async-await/issue-70935-complex-spans.stderr", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -6,25 +6,20 @@ LL | fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n    |\n    = help: the trait `Sync` is not implemented for `Sender<i32>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-70935-complex-spans.rs:13:9\n+  --> $DIR/issue-70935-complex-spans.rs:15:11\n    |\n-LL | /         baz(|| async{\n+LL |           baz(|| async{\n+   |  _____________-\n LL | |             foo(tx.clone());\n LL | |         }).await;\n-   | |________________^ first, await occurs here, with the value maybe used later...\n+   | |         - ^^^^^^ await occurs here, with the value maybe used later\n+   | |_________|\n+   |           has type `[closure@$DIR/issue-70935-complex-spans.rs:13:13: 15:10]` which is not `Send`\n note: the value is later dropped here\n   --> $DIR/issue-70935-complex-spans.rs:15:17\n    |\n LL |         }).await;\n    |                 ^\n-note: this has type `[closure@$DIR/issue-70935-complex-spans.rs:13:13: 15:10]` which is not `Send`\n-  --> $DIR/issue-70935-complex-spans.rs:13:13\n-   |\n-LL |           baz(|| async{\n-   |  _____________^\n-LL | |             foo(tx.clone());\n-LL | |         }).await;\n-   | |_________^\n \n error: aborting due to previous error\n "}, {"sha": "eade6aa2d3dcc7673de407b8f2c86cbccbea88cd", "filename": "src/test/ui/async-await/issue-71137.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -6,12 +6,12 @@ LL |   fake_spawn(wrong_mutex());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `MutexGuard<'_, i32>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-71137.rs:14:5\n+  --> $DIR/issue-71137.rs:14:25\n    |\n LL |     let mut guard = m.lock().unwrap();\n    |         --------- has type `MutexGuard<'_, i32>` which is not `Send`\n LL |     (async { \"right\"; }).await;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ await occurs here, with `mut guard` maybe used later\n+   |                         ^^^^^^ await occurs here, with `mut guard` maybe used later\n LL |     *guard += 1;\n LL |   }\n    |   - `mut guard` is later dropped here"}, {"sha": "f3ce5d1c897c3c5118af87de8d64fde83adf67a8", "filename": "src/test/ui/async-await/issues/issue-51719.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -1,8 +1,8 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-51719.rs:8:19\n+  --> $DIR/issue-51719.rs:8:24\n    |\n LL |     let _gen = || foo().await;\n-   |                -- ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                --      ^^^^^^ only allowed inside `async` functions and blocks\n    |                |\n    |                this is not `async`\n "}, {"sha": "8696a5b798b3c3259d62301ee82e28f05be5d8b0", "filename": "src/test/ui/async-await/issues/issue-51751.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -1,11 +1,11 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-51751.rs:9:20\n+  --> $DIR/issue-51751.rs:9:26\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     let result = inc(10000);\n LL |     let finished = result.await;\n-   |                    ^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                          ^^^^^^ only allowed inside `async` functions and blocks\n \n error: aborting due to previous error\n "}, {"sha": "40ccf25712e2b06dc6833b227d7e15a55a31cc85", "filename": "src/test/ui/async-await/issues/issue-62009-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -6,10 +6,10 @@ fn main() {\n     async { let (); }.await;\n     //~^ ERROR `await` is only allowed inside `async` functions and blocks\n     async {\n-    //~^ ERROR `await` is only allowed inside `async` functions and blocks\n         let task1 = print_dur().await;\n     }.await;\n+    //~^ ERROR `await` is only allowed inside `async` functions and blocks\n     (|_| 2333).await;\n     //~^ ERROR `await` is only allowed inside `async` functions and blocks\n-    //~^^ ERROR\n+    //~| ERROR is not a future\n }"}, {"sha": "3d80c34942c1b38229c258e8301654cdfd96fc18", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -1,41 +1,43 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:6:5\n+  --> $DIR/issue-62009-1.rs:6:22\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     async { let (); }.await;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                      ^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:8:5\n+  --> $DIR/issue-62009-1.rs:10:6\n    |\n-LL |   fn main() {\n-   |      ---- this is not `async`\n+LL | fn main() {\n+   |    ---- this is not `async`\n ...\n-LL | /     async {\n-LL | |\n-LL | |         let task1 = print_dur().await;\n-LL | |     }.await;\n-   | |___________^ only allowed inside `async` functions and blocks\n+LL |     }.await;\n+   |      ^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:12:5\n+  --> $DIR/issue-62009-1.rs:12:15\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n ...\n LL |     (|_| 2333).await;\n-   |     ^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |               ^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0277]: `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]` is not a future\n-  --> $DIR/issue-62009-1.rs:12:5\n+  --> $DIR/issue-62009-1.rs:12:15\n    |\n LL |     (|_| 2333).await;\n-   |     ^^^^^^^^^^^^^^^^ `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]` is not a future\n+   |               ^^^^^^ `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]` is not a future\n    |\n    = help: the trait `Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n    = note: [closure@$DIR/issue-62009-1.rs:12:5: 12:15] must be a future or must implement `IntoFuture` to be awaited\n    = note: required because of the requirements on the impl of `IntoFuture` for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n+help: remove the `.await`\n+   |\n+LL -     (|_| 2333).await;\n+LL +     (|_| 2333);\n+   | \n \n error: aborting due to 4 previous errors\n "}, {"sha": "92e9a8a69a88b1e0df087dc32130c454a173489e", "filename": "src/test/ui/async-await/issues/issue-62009-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -1,10 +1,10 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-2.rs:8:5\n+  --> $DIR/issue-62009-2.rs:8:22\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     (async || 2333)().await;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                      ^^^^^^ only allowed inside `async` functions and blocks\n \n error: aborting due to previous error\n "}, {"sha": "b4d2006480390302ff4c02886bf3cfcdae3fc3dc", "filename": "src/test/ui/async-await/issues/issue-65436-raw-ptr-not-send.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -6,17 +6,17 @@ LL |     assert_send(async {\n    |\n    = help: within `impl Future<Output = [async output]>`, the trait `Send` is not implemented for `*const u8`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-65436-raw-ptr-not-send.rs:14:9\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:14:35\n    |\n LL |         bar(Foo(std::ptr::null())).await;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ first, await occurs here, with `std::ptr::null()` maybe used later...\n+   |                 ----------------  ^^^^^^ await occurs here, with `std::ptr::null()` maybe used later\n+   |                 |\n+   |                 has type `*const u8` which is not `Send`\n note: `std::ptr::null()` is later dropped here\n   --> $DIR/issue-65436-raw-ptr-not-send.rs:14:41\n    |\n LL |         bar(Foo(std::ptr::null())).await;\n-   |                 ----------------        ^\n-   |                 |\n-   |                 has type `*const u8` which is not `Send`\n+   |                                         ^\n help: consider moving this into a `let` binding to create a shorter lived borrow\n   --> $DIR/issue-65436-raw-ptr-not-send.rs:14:13\n    |"}, {"sha": "20b827479fa808c75804caa4ff6caf5111070d0c", "filename": "src/test/ui/async-await/issues/non-async-enclosing-span.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -1,11 +1,11 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/non-async-enclosing-span.rs:9:13\n+  --> $DIR/non-async-enclosing-span.rs:9:27\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     let x = move || {};\n LL |     let y = do_the_thing().await;\n-   |             ^^^^^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                           ^^^^^^ only allowed inside `async` functions and blocks\n \n error: aborting due to previous error\n "}, {"sha": "24673777b8039dd24bd54f963220920055248d60", "filename": "src/test/ui/async-await/unnecessary-await.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Funnecessary-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Funnecessary-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funnecessary-await.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -0,0 +1,14 @@\n+// edition:2018\n+\n+async fn foo () { }\n+fn bar() -> impl std::future::Future { async {} }\n+fn boo() {}\n+\n+async fn baz() -> std::io::Result<()> {\n+    foo().await;\n+    boo().await; //~ ERROR `()` is not a future\n+    bar().await;\n+    std::io::Result::Ok(())\n+}\n+\n+fn main() {}"}, {"sha": "c3d2a6e7b1e1b6a38a41d533258ea4ebf7099150", "filename": "src/test/ui/async-await/unnecessary-await.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Funnecessary-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Funnecessary-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funnecessary-await.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -0,0 +1,24 @@\n+error[E0277]: `()` is not a future\n+  --> $DIR/unnecessary-await.rs:9:10\n+   |\n+LL |     boo().await;\n+   |     -----^^^^^^ `()` is not a future\n+   |     |\n+   |     this call returns `()`\n+   |\n+   = help: the trait `Future` is not implemented for `()`\n+   = note: () must be a future or must implement `IntoFuture` to be awaited\n+   = note: required because of the requirements on the impl of `IntoFuture` for `()`\n+help: remove the `.await`\n+   |\n+LL -     boo().await;\n+LL +     boo();\n+   | \n+help: alternatively, consider making `fn boo` asynchronous\n+   |\n+LL | async fn boo() {}\n+   | +++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "8c0ecb8785d3375dc2493ae7fc36f4612fc8d1ad", "filename": "src/test/ui/async-await/unresolved_type_param.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -5,10 +5,10 @@ LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:9:5\n+  --> $DIR/unresolved_type_param.rs:9:10\n    |\n LL |     bar().await;\n-   |     ^^^^^^^^^^^\n+   |          ^^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n   --> $DIR/unresolved_type_param.rs:9:5\n@@ -17,10 +17,10 @@ LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:9:5\n+  --> $DIR/unresolved_type_param.rs:9:10\n    |\n LL |     bar().await;\n-   |     ^^^^^^^^^^^\n+   |          ^^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n   --> $DIR/unresolved_type_param.rs:9:5\n@@ -29,10 +29,10 @@ LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:9:5\n+  --> $DIR/unresolved_type_param.rs:9:10\n    |\n LL |     bar().await;\n-   |     ^^^^^^^^^^^\n+   |          ^^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n   --> $DIR/unresolved_type_param.rs:9:5\n@@ -41,10 +41,10 @@ LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:9:5\n+  --> $DIR/unresolved_type_param.rs:9:10\n    |\n LL |     bar().await;\n-   |     ^^^^^^^^^^^\n+   |          ^^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n   --> $DIR/unresolved_type_param.rs:9:5\n@@ -53,10 +53,10 @@ LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:9:5\n+  --> $DIR/unresolved_type_param.rs:9:10\n    |\n LL |     bar().await;\n-   |     ^^^^^^^^^^^\n+   |          ^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "c6650d60c21e97371bf7d0614276a88c5eb47022", "filename": "src/test/ui/issues/issue-33941.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -16,10 +16,10 @@ error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _,\n   --> $DIR/issue-33941.rs:4:14\n    |\n LL |     for _ in HashMap::new().iter().cloned() {}\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found tuple\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected tuple, found reference\n    |\n-   = note: expected reference `&_`\n-                  found tuple `(&_, &_)`\n+   = note:  expected tuple `(&_, &_)`\n+           found reference `&_`\n    = note: required because of the requirements on the impl of `Iterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n    = note: required because of the requirements on the impl of `IntoIterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n "}, {"sha": "b3c9b43810cd90c845938f67dbc74d2215f2356c", "filename": "src/test/ui/lint/must_not_suspend/boxed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -4,7 +4,7 @@ error: boxed `Umm` held across a suspend point, but should not be\n LL |     let _guard = bar();\n    |         ^^^^^^\n LL |     other().await;\n-   |     ------------- the value is held across this suspend point\n+   |            ------ the value is held across this suspend point\n    |\n note: the lint level is defined here\n   --> $DIR/boxed.rs:3:9"}, {"sha": "bc1b611299a2b2caaf9e3e52af4b916f0689931e", "filename": "src/test/ui/lint/must_not_suspend/dedup.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -2,7 +2,7 @@ error: `No` held across a suspend point, but should not be\n   --> $DIR/dedup.rs:16:12\n    |\n LL |     wheeee(No {}).await;\n-   |     -------^^^^^------- the value is held across this suspend point\n+   |            ^^^^^ ------ the value is held across this suspend point\n    |\n note: the lint level is defined here\n   --> $DIR/dedup.rs:3:9"}, {"sha": "0d4319670e6622e7ade73ade1dc610e6e25feb41", "filename": "src/test/ui/lint/must_not_suspend/gated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -31,7 +31,7 @@ error: `MutexGuard` held across a suspend point, but should not be\n LL |     let _guard = m.lock().unwrap();\n    |         ^^^^^^\n LL |     other().await;\n-   |     ------------- the value is held across this suspend point\n+   |            ------ the value is held across this suspend point\n    |\n note: the lint level is defined here\n   --> $DIR/gated.rs:2:9"}, {"sha": "a968b7ca0330fb7b72b3033b145624805b4006f1", "filename": "src/test/ui/lint/must_not_suspend/mutex.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -4,7 +4,7 @@ error: `MutexGuard` held across a suspend point, but should not be\n LL |     let _guard = m.lock().unwrap();\n    |         ^^^^^^\n LL |     other().await;\n-   |     ------------- the value is held across this suspend point\n+   |            ------ the value is held across this suspend point\n    |\n note: the lint level is defined here\n   --> $DIR/mutex.rs:3:9"}, {"sha": "6d30f134ec4216afb0904a5ac7254f83e8a50e51", "filename": "src/test/ui/lint/must_not_suspend/ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -5,7 +5,7 @@ LL |         let guard = &mut self.u;\n    |                          ^^^^^^\n LL | \n LL |         other().await;\n-   |         ------------- the value is held across this suspend point\n+   |                ------ the value is held across this suspend point\n    |\n note: the lint level is defined here\n   --> $DIR/ref.rs:3:9"}, {"sha": "dd3978b02a852f36893372fe32d2e11420c37d1f", "filename": "src/test/ui/lint/must_not_suspend/trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -5,7 +5,7 @@ LL |     let _guard1 = r#impl();\n    |         ^^^^^^^\n ...\n LL |     other().await;\n-   |     ------------- the value is held across this suspend point\n+   |            ------ the value is held across this suspend point\n    |\n note: the lint level is defined here\n   --> $DIR/trait.rs:3:9\n@@ -25,7 +25,7 @@ LL |     let _guard2 = r#dyn();\n    |         ^^^^^^^\n LL | \n LL |     other().await;\n-   |     ------------- the value is held across this suspend point\n+   |            ------ the value is held across this suspend point\n    |\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n   --> $DIR/trait.rs:22:9"}, {"sha": "42d037b350b1999175231adb23c25d816c43aa26", "filename": "src/test/ui/lint/must_not_suspend/unit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -4,7 +4,7 @@ error: `Umm` held across a suspend point, but should not be\n LL |     let _guard = bar();\n    |         ^^^^^^\n LL |     other().await;\n-   |     ------------- the value is held across this suspend point\n+   |            ------ the value is held across this suspend point\n    |\n note: the lint level is defined here\n   --> $DIR/unit.rs:3:9"}, {"sha": "417c397dad0101c0b48ea0e3a05f69a5e8d1601b", "filename": "src/test/ui/lint/must_not_suspend/warn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -4,7 +4,7 @@ warning: `Umm` held across a suspend point, but should not be\n LL |     let _guard = bar();\n    |         ^^^^^^\n LL |     other().await;\n-   |     ------------- the value is held across this suspend point\n+   |            ------ the value is held across this suspend point\n    |\n note: the lint level is defined here\n   --> $DIR/warn.rs:4:9"}, {"sha": "a359ce16073401f28b84840da85b268aa3d37c88", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -1 +1 @@\n-Subproject commit 40dc281755137ee804bc9b3b08e782773b726e44\n+Subproject commit a359ce16073401f28b84840da85b268aa3d37c88"}, {"sha": "77b7fee638923a833b2a01e51801f0ab35c85295", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -3,7 +3,6 @@\n #![feature(box_patterns)]\n #![feature(drain_filter)]\n #![feature(in_band_lifetimes)]\n-#![feature(iter_zip)]\n #![feature(once_cell)]\n #![feature(rustc_private)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "e5fafdb075c66374f42ef4eafe0b13fb2ea52b9f", "filename": "src/tools/clippy/clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -204,7 +204,7 @@ fn parse_iter_usage(\n         match e.kind {\n             ExprKind::Call(\n                 Expr {\n-                    kind: ExprKind::Path(QPath::LangItem(LangItem::TryTraitBranch, _)),\n+                    kind: ExprKind::Path(QPath::LangItem(LangItem::TryTraitBranch, ..)),\n                     ..\n                 },\n                 _,"}, {"sha": "5b098659377c64805c5dc72eb8904bc740ca8ba1", "filename": "src/tools/clippy/clippy_lints/src/needless_late_init.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_late_init.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -73,7 +73,7 @@ fn contains_assign_expr<'tcx>(cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'tcx>) ->\n     seen\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n struct LocalAssign {\n     lhs_id: HirId,\n     lhs_span: Span,\n@@ -154,9 +154,14 @@ fn assignment_suggestions<'tcx>(\n         assignments.push(assign);\n     }\n \n-    let suggestions = assignments\n+    let suggestions = assignments.clone()\n         .into_iter()\n-        .map(|assignment| Some((assignment.span, snippet_opt(cx, assignment.rhs_span)?)))\n+        .map(|assignment| Some((assignment.span.until(assignment.rhs_span), String::new())))\n+        .chain(\n+            assignments\n+                .into_iter()\n+                .map(|assignment| Some((assignment.rhs_span.shrink_to_hi().with_hi(assignment.span.hi()), String::new())))\n+        )\n         .collect::<Option<Vec<(Span, String)>>>()?;\n \n     let applicability = if suggestions.len() > 1 {"}, {"sha": "0e7ae43ce2dd53df347a380c4321f24b50f6cd51", "filename": "src/tools/clippy/clippy_lints/src/needless_question_mark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_question_mark.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -105,7 +105,7 @@ fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n         };\n         if let ExprKind::Match(inner_expr_with_q, _, MatchSource::TryDesugar) = &arg.kind;\n         if let ExprKind::Call(called, [inner_expr]) = &inner_expr_with_q.kind;\n-        if let ExprKind::Path(QPath::LangItem(LangItem::TryTraitBranch, _)) = &called.kind;\n+        if let ExprKind::Path(QPath::LangItem(LangItem::TryTraitBranch, ..)) = &called.kind;\n         if expr.span.ctxt() == inner_expr.span.ctxt();\n         let expr_ty = cx.typeck_results().expr_ty(expr);\n         let inner_ty = cx.typeck_results().expr_ty(inner_expr);"}, {"sha": "c2163a24b7f44b7271cf7116be68dea0c949707e", "filename": "src/tools/clippy/clippy_lints/src/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -260,7 +260,7 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n             if method_names[0] == sym!(as_bytes);\n \n             // Check for slicer\n-            if let ExprKind::Struct(QPath::LangItem(LangItem::Range, _), _, _) = right.kind;\n+            if let ExprKind::Struct(QPath::LangItem(LangItem::Range, ..), _, _) = right.kind;\n \n             then {\n                 let mut applicability = Applicability::MachineApplicable;"}, {"sha": "4da32c52e750a06e47e1c68a840a83df0c429b8d", "filename": "src/tools/clippy/clippy_lints/src/try_err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftry_err.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -65,7 +65,7 @@ impl<'tcx> LateLintPass<'tcx> for TryErr {\n             if let ExprKind::Match(match_arg, _, MatchSource::TryDesugar) = expr.kind;\n             if let ExprKind::Call(match_fun, try_args) = match_arg.kind;\n             if let ExprKind::Path(ref match_fun_path) = match_fun.kind;\n-            if matches!(match_fun_path, QPath::LangItem(LangItem::TryTraitBranch, _));\n+            if matches!(match_fun_path, QPath::LangItem(LangItem::TryTraitBranch, ..));\n             if let Some(try_arg) = try_args.get(0);\n             if let ExprKind::Call(err_fun, err_args) = try_arg.kind;\n             if let Some(err_arg) = err_args.get(0);"}, {"sha": "111413e51930bd06dacd48a0e8c99917f617d443", "filename": "src/tools/clippy/clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_io_amount.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -49,7 +49,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedIoAmount {\n                 if let hir::ExprKind::Call(func, [ref arg_0, ..]) = res.kind {\n                     if matches!(\n                         func.kind,\n-                        hir::ExprKind::Path(hir::QPath::LangItem(hir::LangItem::TryTraitBranch, _))\n+                        hir::ExprKind::Path(hir::QPath::LangItem(hir::LangItem::TryTraitBranch, ..))\n                     ) {\n                         check_map_error(cx, arg_0, expr);\n                     }"}, {"sha": "f186e1f05a0b45d3324f75717f5daf3a00d606c2", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -260,7 +260,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n     }\n \n     fn qpath(&self, qpath: &Binding<&QPath<'_>>) {\n-        if let QPath::LangItem(lang_item, _) = *qpath.value {\n+        if let QPath::LangItem(lang_item, ..) = *qpath.value {\n             out!(\"if matches!({qpath}, QPath::LangItem(LangItem::{lang_item:?}, _));\");\n         } else {\n             out!(\"if match_qpath({qpath}, &[{}]);\", path_to_string(qpath.value));"}, {"sha": "fc32e49420e4b82debc05b94c593f3814a52c7f7", "filename": "src/tools/clippy/clippy_utils/src/higher.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -218,7 +218,7 @@ impl<'a> Range<'a> {\n             hir::ExprKind::Call(path, args)\n                 if matches!(\n                     path.kind,\n-                    hir::ExprKind::Path(hir::QPath::LangItem(hir::LangItem::RangeInclusiveNew, _))\n+                    hir::ExprKind::Path(hir::QPath::LangItem(hir::LangItem::RangeInclusiveNew, ..))\n                 ) =>\n             {\n                 Some(Range {\n@@ -228,27 +228,27 @@ impl<'a> Range<'a> {\n                 })\n             },\n             hir::ExprKind::Struct(path, fields, None) => match &path {\n-                hir::QPath::LangItem(hir::LangItem::RangeFull, _) => Some(Range {\n+                hir::QPath::LangItem(hir::LangItem::RangeFull, ..) => Some(Range {\n                     start: None,\n                     end: None,\n                     limits: ast::RangeLimits::HalfOpen,\n                 }),\n-                hir::QPath::LangItem(hir::LangItem::RangeFrom, _) => Some(Range {\n+                hir::QPath::LangItem(hir::LangItem::RangeFrom, ..) => Some(Range {\n                     start: Some(get_field(\"start\", fields)?),\n                     end: None,\n                     limits: ast::RangeLimits::HalfOpen,\n                 }),\n-                hir::QPath::LangItem(hir::LangItem::Range, _) => Some(Range {\n+                hir::QPath::LangItem(hir::LangItem::Range, ..) => Some(Range {\n                     start: Some(get_field(\"start\", fields)?),\n                     end: Some(get_field(\"end\", fields)?),\n                     limits: ast::RangeLimits::HalfOpen,\n                 }),\n-                hir::QPath::LangItem(hir::LangItem::RangeToInclusive, _) => Some(Range {\n+                hir::QPath::LangItem(hir::LangItem::RangeToInclusive, ..) => Some(Range {\n                     start: None,\n                     end: Some(get_field(\"end\", fields)?),\n                     limits: ast::RangeLimits::Closed,\n                 }),\n-                hir::QPath::LangItem(hir::LangItem::RangeTo, _) => Some(Range {\n+                hir::QPath::LangItem(hir::LangItem::RangeTo, ..) => Some(Range {\n                     start: None,\n                     end: Some(get_field(\"end\", fields)?),\n                     limits: ast::RangeLimits::HalfOpen,"}, {"sha": "5b059e37886996fe085a7b90a9a61e2ffea2e237", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -346,7 +346,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (&QPath::TypeRelative(lty, lseg), &QPath::TypeRelative(rty, rseg)) => {\n                 self.eq_ty(lty, rty) && self.eq_path_segment(lseg, rseg)\n             },\n-            (&QPath::LangItem(llang_item, _), &QPath::LangItem(rlang_item, _)) => llang_item == rlang_item,\n+            (&QPath::LangItem(llang_item, ..), &QPath::LangItem(rlang_item, ..)) => llang_item == rlang_item,\n             _ => false,\n         }\n     }"}, {"sha": "8413b8c8280aac83817a1e983c3d6a89b1b8b9bf", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -1,6 +1,5 @@\n #![feature(box_patterns)]\n #![feature(in_band_lifetimes)]\n-#![feature(iter_zip)]\n #![feature(let_else)]\n #![feature(rustc_private)]\n #![feature(control_flow_enum)]"}, {"sha": "a9f2ad36d0aba06294010d71216093977cba5319", "filename": "src/tools/clippy/tests/ui/future_not_send.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffuture_not_send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffuture_not_send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffuture_not_send.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -6,22 +6,22 @@ LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n    |\n    = note: `-D clippy::future-not-send` implied by `-D warnings`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:8:5\n+  --> $DIR/future_not_send.rs:8:19\n    |\n LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n    |                         -- has type `std::rc::Rc<[u8]>` which is not `Send`\n LL |     async { true }.await\n-   |     ^^^^^^^^^^^^^^^^^^^^ await occurs here, with `rc` maybe used later\n+   |                   ^^^^^^ await occurs here, with `rc` maybe used later\n LL | }\n    | - `rc` is later dropped here\n    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:8:5\n+  --> $DIR/future_not_send.rs:8:19\n    |\n LL | async fn private_future(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n    |                                       ---- has type `&std::cell::Cell<usize>` which is not `Send`\n LL |     async { true }.await\n-   |     ^^^^^^^^^^^^^^^^^^^^ await occurs here, with `cell` maybe used later\n+   |                   ^^^^^^ await occurs here, with `cell` maybe used later\n LL | }\n    | - `cell` is later dropped here\n    = note: `std::cell::Cell<usize>` doesn't implement `std::marker::Sync`\n@@ -33,12 +33,12 @@ LL | pub async fn public_future(rc: Rc<[u8]>) {\n    |                                          ^ future returned by `public_future` is not `Send`\n    |\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:12:5\n+  --> $DIR/future_not_send.rs:12:19\n    |\n LL | pub async fn public_future(rc: Rc<[u8]>) {\n    |                            -- has type `std::rc::Rc<[u8]>` which is not `Send`\n LL |     async { true }.await;\n-   |     ^^^^^^^^^^^^^^^^^^^^ await occurs here, with `rc` maybe used later\n+   |                   ^^^^^^ await occurs here, with `rc` maybe used later\n LL | }\n    | - `rc` is later dropped here\n    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`\n@@ -82,12 +82,12 @@ LL |     async fn private_future(&self) -> usize {\n    |                                       ^^^^^ future returned by `private_future` is not `Send`\n    |\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:35:9\n+  --> $DIR/future_not_send.rs:35:23\n    |\n LL |     async fn private_future(&self) -> usize {\n    |                             ----- has type `&Dummy` which is not `Send`\n LL |         async { true }.await;\n-   |         ^^^^^^^^^^^^^^^^^^^^ await occurs here, with `&self` maybe used later\n+   |                       ^^^^^^ await occurs here, with `&self` maybe used later\n LL |         self.rc.len()\n LL |     }\n    |     - `&self` is later dropped here\n@@ -100,12 +100,12 @@ LL |     pub async fn public_future(&self) {\n    |                                       ^ future returned by `public_future` is not `Send`\n    |\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:40:9\n+  --> $DIR/future_not_send.rs:40:30\n    |\n LL |     pub async fn public_future(&self) {\n    |                                ----- has type `&Dummy` which is not `Send`\n LL |         self.private_future().await;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ await occurs here, with `&self` maybe used later\n+   |                              ^^^^^^ await occurs here, with `&self` maybe used later\n LL |     }\n    |     - `&self` is later dropped here\n    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Sync`\n@@ -117,12 +117,12 @@ LL | async fn generic_future<T>(t: T) -> T\n    |                                     ^ future returned by `generic_future` is not `Send`\n    |\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/future_not_send.rs:54:5\n+  --> $DIR/future_not_send.rs:54:19\n    |\n LL |     let rt = &t;\n    |         -- has type `&T` which is not `Send`\n LL |     async { true }.await;\n-   |     ^^^^^^^^^^^^^^^^^^^^ await occurs here, with `rt` maybe used later\n+   |                   ^^^^^^ await occurs here, with `rt` maybe used later\n LL |     t\n LL | }\n    | - `rt` is later dropped here"}, {"sha": "32d5d04fde4d52001484eef8e615a157eaad177e", "filename": "src/tools/clippy/tests/ui/needless_late_init_fixable.fixed", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d594910a2da12f158477b4c7281716f535cfa3de/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d594910a2da12f158477b4c7281716f535cfa3de/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.fixed?ref=d594910a2da12f158477b4c7281716f535cfa3de", "patch": "@@ -1,38 +0,0 @@\n-// run-rustfix\n-\n-#![allow(unused, clippy::assign_op_pattern)]\n-\n-fn main() {\n-    \n-    let a = \"zero\";\n-\n-    \n-    \n-    let b = 1;\n-    let c = 2;\n-\n-    \n-    let d: usize = 1;\n-\n-    \n-    let mut e = 1;\n-    e = 2;\n-\n-    \n-    let f = match 1 {\n-        1 => \"three\",\n-        _ => return,\n-    }; // has semi\n-\n-    \n-    let g: usize = if true {\n-        5\n-    } else {\n-        panic!();\n-    };\n-\n-    \n-    let h = format!(\"{}\", e);\n-\n-    println!(\"{}\", a);\n-}"}, {"sha": "76099df0e0689cfa8e51b25fe3564315d171b2cf", "filename": "src/tools/clippy/tests/ui/needless_late_init_fixable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.rs?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -1,5 +1,3 @@\n-// run-rustfix\n-\n #![allow(unused, clippy::assign_op_pattern)]\n \n fn main() {"}, {"sha": "728e19252ea707b4428fed20f466f12646e0d6d8", "filename": "src/tools/clippy/tests/ui/needless_late_init_fixable.stderr", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/195e931b02b69bbce1bcf4632f4e2d5603ef006b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.stderr?ref=195e931b02b69bbce1bcf4632f4e2d5603ef006b", "patch": "@@ -1,5 +1,5 @@\n error: unneeded late initalization\n-  --> $DIR/needless_late_init_fixable.rs:6:5\n+  --> $DIR/needless_late_init_fixable.rs:4:5\n    |\n LL |     let a;\n    |     ^^^^^^\n@@ -11,7 +11,7 @@ LL |     let a = \"zero\";\n    |     ~~~~~\n \n error: unneeded late initalization\n-  --> $DIR/needless_late_init_fixable.rs:9:5\n+  --> $DIR/needless_late_init_fixable.rs:7:5\n    |\n LL |     let b;\n    |     ^^^^^^\n@@ -22,7 +22,7 @@ LL |     let b = 1;\n    |     ~~~~~\n \n error: unneeded late initalization\n-  --> $DIR/needless_late_init_fixable.rs:10:5\n+  --> $DIR/needless_late_init_fixable.rs:8:5\n    |\n LL |     let c;\n    |     ^^^^^^\n@@ -33,7 +33,7 @@ LL |     let c = 2;\n    |     ~~~~~\n \n error: unneeded late initalization\n-  --> $DIR/needless_late_init_fixable.rs:14:5\n+  --> $DIR/needless_late_init_fixable.rs:12:5\n    |\n LL |     let d: usize;\n    |     ^^^^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL |     let d: usize = 1;\n    |     ~~~~~~~~~~~~\n \n error: unneeded late initalization\n-  --> $DIR/needless_late_init_fixable.rs:17:5\n+  --> $DIR/needless_late_init_fixable.rs:15:5\n    |\n LL |     let mut e;\n    |     ^^^^^^^^^^\n@@ -55,7 +55,7 @@ LL |     let mut e = 1;\n    |     ~~~~~~~~~\n \n error: unneeded late initalization\n-  --> $DIR/needless_late_init_fixable.rs:21:5\n+  --> $DIR/needless_late_init_fixable.rs:19:5\n    |\n LL |     let f;\n    |     ^^^^^^\n@@ -66,11 +66,12 @@ LL |     let f = match 1 {\n    |     +++++++\n help: remove the assignments from the `match` arms\n    |\n-LL |         1 => \"three\",\n-   |              ~~~~~~~\n+LL -         1 => f = \"three\",\n+LL +         1 => \"three\",\n+   | \n \n error: unneeded late initalization\n-  --> $DIR/needless_late_init_fixable.rs:27:5\n+  --> $DIR/needless_late_init_fixable.rs:25:5\n    |\n LL |     let g: usize;\n    |     ^^^^^^^^^^^^^\n@@ -81,15 +82,16 @@ LL |     let g: usize = if true {\n    |     ++++++++++++++\n help: remove the assignments from the branches\n    |\n-LL |         5\n-   |\n+LL -         g = 5;\n+LL +         5\n+   | \n help: add a semicolon after the `if` expression\n    |\n LL |     };\n    |      +\n \n error: unneeded late initalization\n-  --> $DIR/needless_late_init_fixable.rs:34:5\n+  --> $DIR/needless_late_init_fixable.rs:32:5\n    |\n LL |     let h;\n    |     ^^^^^^"}]}