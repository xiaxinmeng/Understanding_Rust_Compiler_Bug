{"sha": "6fd564112f1ec00f6f8a56e8a3577dd255639131", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZDU2NDExMmYxZWMwMGY2ZjhhNTZlOGEzNTc3ZGQyNTU2MzkxMzE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-13T21:13:12Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-16T17:37:24Z"}, "message": "Specific error for unsized `dyn Trait` return type\n\nSuggest `impl Trait` when possible, and `Box<dyn Trait>` otherwise.", "tree": {"sha": "8546cbbbf0491c1a2586eaa8885d8517f9868cc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8546cbbbf0491c1a2586eaa8885d8517f9868cc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fd564112f1ec00f6f8a56e8a3577dd255639131", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fd564112f1ec00f6f8a56e8a3577dd255639131", "html_url": "https://github.com/rust-lang/rust/commit/6fd564112f1ec00f6f8a56e8a3577dd255639131", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fd564112f1ec00f6f8a56e8a3577dd255639131/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fe05e9456b84996637c2f29b35c37960e537540", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe05e9456b84996637c2f29b35c37960e537540", "html_url": "https://github.com/rust-lang/rust/commit/9fe05e9456b84996637c2f29b35c37960e537540"}], "stats": {"total": 514, "additions": 512, "deletions": 2}, "files": [{"sha": "8f771658e4098cd773cdf2983fdf7e709a1ed4d1", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 199, "deletions": 2, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/6fd564112f1ec00f6f8a56e8a3577dd255639131/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd564112f1ec00f6f8a56e8a3577dd255639131/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=6fd564112f1ec00f6f8a56e8a3577dd255639131", "patch": "@@ -1,3 +1,4 @@\n+// ignore-tidy-filelength\n use super::{\n     ConstEvalFailure, EvaluationResult, FulfillmentError, FulfillmentErrorCode,\n     MismatchedProjectionTypes, ObjectSafetyViolation, Obligation, ObligationCause,\n@@ -22,9 +23,12 @@ use crate::ty::TypeckTables;\n use crate::ty::{self, AdtKind, DefIdTree, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, Style};\n+use rustc_errors::{\n+    error_code, pluralize, struct_span_err, Applicability, DiagnosticBuilder, Style,\n+};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::intravisit::Visitor;\n use rustc_hir::Node;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym};\n@@ -758,7 +762,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                 )),\n                                 Some(\n                                     \"the question mark operation (`?`) implicitly performs a \\\n-                                 conversion on the error value using the `From` trait\"\n+                                     conversion on the error value using the `From` trait\"\n                                         .to_owned(),\n                                 ),\n                             )\n@@ -835,6 +839,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         self.suggest_remove_reference(&obligation, &mut err, &trait_ref);\n                         self.suggest_semicolon_removal(&obligation, &mut err, span, &trait_ref);\n                         self.note_version_mismatch(&mut err, &trait_ref);\n+                        if self.suggest_impl_trait(&mut err, span, &obligation, &trait_ref) {\n+                            err.emit();\n+                            return;\n+                        }\n \n                         // Try to report a help message\n                         if !trait_ref.has_infer_types()\n@@ -1696,6 +1704,195 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn suggest_impl_trait(\n+        &self,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        span: Span,\n+        obligation: &PredicateObligation<'tcx>,\n+        trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n+    ) -> bool {\n+        if let ObligationCauseCode::SizedReturnType = obligation.cause.code.peel_derives() {\n+        } else {\n+            return false;\n+        }\n+\n+        let hir = self.tcx.hir();\n+        let parent_node = hir.get_parent_node(obligation.cause.body_id);\n+        let node = hir.find(parent_node);\n+        if let Some(hir::Node::Item(hir::Item {\n+            kind: hir::ItemKind::Fn(sig, _, body_id), ..\n+        })) = node\n+        {\n+            let body = hir.body(*body_id);\n+            let trait_ref = self.resolve_vars_if_possible(trait_ref);\n+            let ty = trait_ref.skip_binder().self_ty();\n+            if let ty::Dynamic(..) = ty.kind {\n+            } else {\n+                // We only want to suggest `impl Trait` to `dyn Trait`s.\n+                // For example, `fn foo() -> str` needs to be filtered out.\n+                return false;\n+            }\n+            // Use `TypeVisitor` instead of the output type directly to find the span of `ty` for\n+            // cases like `fn foo() -> (dyn Trait, i32) {}`.\n+            // Recursively look for `TraitObject` types and if there's only one, use that span to\n+            // suggest `impl Trait`.\n+\n+            struct ReturnsVisitor<'v>(Vec<&'v hir::Expr<'v>>);\n+\n+            impl<'v> Visitor<'v> for ReturnsVisitor<'v> {\n+                type Map = rustc::hir::map::Map<'v>;\n+\n+                fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<'_, Self::Map> {\n+                    hir::intravisit::NestedVisitorMap::None\n+                }\n+\n+                fn visit_expr(&mut self, ex: &'v hir::Expr<'v>) {\n+                    match ex.kind {\n+                        hir::ExprKind::Ret(Some(ex)) => self.0.push(ex),\n+                        _ => {}\n+                    }\n+                    hir::intravisit::walk_expr(self, ex);\n+                }\n+\n+                fn visit_body(&mut self, body: &'v hir::Body<'v>) {\n+                    if body.generator_kind().is_none() {\n+                        if let hir::ExprKind::Block(block, None) = body.value.kind {\n+                            if let Some(expr) = block.expr {\n+                                self.0.push(expr);\n+                            }\n+                        }\n+                    }\n+                    hir::intravisit::walk_body(self, body);\n+                }\n+            }\n+\n+            // Visit to make sure there's a single `return` type to suggest `impl Trait`,\n+            // otherwise suggest using `Box<dyn Trait>` or an enum.\n+            let mut visitor = ReturnsVisitor(vec![]);\n+            visitor.visit_body(&body);\n+\n+            let tables = self.in_progress_tables.map(|t| t.borrow()).unwrap();\n+\n+            if let hir::FunctionRetTy::Return(ret_ty) = sig.decl.output {\n+                let mut all_returns_conform_to_trait = true;\n+                let mut all_returns_have_same_type = true;\n+                let mut last_ty = None;\n+                if let Some(ty_ret_ty) = tables.node_type_opt(ret_ty.hir_id) {\n+                    let cause = ObligationCause::misc(ret_ty.span, ret_ty.hir_id);\n+                    if let ty::Dynamic(predicates, _) = &ty_ret_ty.kind {\n+                        for predicate in predicates.iter() {\n+                            for expr in &visitor.0 {\n+                                if let Some(returned_ty) = tables.node_type_opt(expr.hir_id) {\n+                                    if let Some(ty) = last_ty {\n+                                        all_returns_have_same_type &= ty == returned_ty;\n+                                    }\n+                                    last_ty = Some(returned_ty);\n+\n+                                    let param_env = ty::ParamEnv::empty();\n+                                    let pred = predicate.with_self_ty(self.tcx, returned_ty);\n+                                    let obligation =\n+                                        Obligation::new(cause.clone(), param_env, pred);\n+                                    all_returns_conform_to_trait &=\n+                                        self.predicate_may_hold(&obligation);\n+                                }\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    // We still want to verify whether all the return types conform to each other.\n+                    for expr in &visitor.0 {\n+                        if let Some(returned_ty) = tables.node_type_opt(expr.hir_id) {\n+                            if let Some(ty) = last_ty {\n+                                all_returns_have_same_type &= ty == returned_ty;\n+                            }\n+                            last_ty = Some(returned_ty);\n+                        }\n+                    }\n+                }\n+\n+                if let (true, hir::TyKind::TraitObject(..), Ok(snippet), true, Some(last_ty)) = (\n+                    ret_ty.span.overlaps(span),\n+                    &ret_ty.kind,\n+                    self.tcx.sess.source_map().span_to_snippet(ret_ty.span),\n+                    all_returns_conform_to_trait,\n+                    last_ty,\n+                ) {\n+                    err.code = Some(error_code!(E0746));\n+                    err.set_primary_message(\n+                        \"return type cannot have a bare trait because it must be `Sized`\",\n+                    );\n+                    err.children.clear();\n+                    let impl_trait_msg = \"for information on `impl Trait`, see \\\n+                        <https://doc.rust-lang.org/book/ch10-02-traits.html\\\n+                        #returning-types-that-implement-traits>\";\n+                    let trait_obj_msg = \"for information on trait objects, see \\\n+                        <https://doc.rust-lang.org/book/ch17-02-trait-objects.html\\\n+                        #using-trait-objects-that-allow-for-values-of-different-types>\";\n+                    let has_dyn = snippet.split_whitespace().next().map_or(false, |s| s == \"dyn\");\n+                    let trait_obj = if has_dyn { &snippet[4..] } else { &snippet[..] };\n+                    if all_returns_have_same_type {\n+                        err.span_suggestion(\n+                            ret_ty.span,\n+                            &format!(\n+                                \"you can use the `impl Trait` feature \\\n+                                 in the return type because all the return paths are of type \\\n+                                 `{}`, which implements `dyn {}`\",\n+                                last_ty, trait_obj,\n+                            ),\n+                            format!(\"impl {}\", trait_obj),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                        err.note(impl_trait_msg);\n+                    } else {\n+                        let mut suggestions = visitor\n+                            .0\n+                            .iter()\n+                            .map(|expr| {\n+                                (\n+                                    expr.span,\n+                                    format!(\n+                                        \"Box::new({})\",\n+                                        self.tcx\n+                                            .sess\n+                                            .source_map()\n+                                            .span_to_snippet(expr.span)\n+                                            .unwrap()\n+                                    ),\n+                                )\n+                            })\n+                            .collect::<Vec<_>>();\n+                        suggestions.push((\n+                            ret_ty.span,\n+                            format!(\"Box<{}{}>\", if has_dyn { \"\" } else { \"dyn \" }, snippet),\n+                        ));\n+                        err.multipart_suggestion(\n+                            \"if the performance implications are acceptable, you can return a \\\n+                             trait object\",\n+                            suggestions,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                        err.span_help(\n+                            visitor.0.iter().map(|expr| expr.span).collect::<Vec<_>>(),\n+                            &format!(\n+                                \"if all the returned values were of the same type you could use \\\n+                                 `impl {}` as the return type\",\n+                                trait_obj,\n+                            ),\n+                        );\n+                        err.help(\n+                            \"alternatively, you can always create a new `enum` with a variant \\\n+                             for each returned type\",\n+                        );\n+                        err.note(impl_trait_msg);\n+                        err.note(trait_obj_msg);\n+                    }\n+                    return true;\n+                }\n+            }\n+        }\n+        false\n+    }\n+\n     /// Given some node representing a fn-like thing in the HIR map,\n     /// returns a span and `ArgKind` information that describes the\n     /// arguments it expects. This can be supplied to"}, {"sha": "f68711c06205bf92e68e8b487029e62a410d03f9", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6fd564112f1ec00f6f8a56e8a3577dd255639131/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd564112f1ec00f6f8a56e8a3577dd255639131/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=6fd564112f1ec00f6f8a56e8a3577dd255639131", "patch": "@@ -1171,6 +1171,17 @@ impl<'tcx> ObligationCause<'tcx> {\n     }\n }\n \n+impl<'tcx> ObligationCauseCode<'tcx> {\n+    pub fn peel_derives(&self) -> &Self {\n+        match self {\n+            BuiltinDerivedObligation(cause) | ImplDerivedObligation(cause) => {\n+                cause.parent_code.peel_derives()\n+            }\n+            _ => self,\n+        }\n+    }\n+}\n+\n impl<'tcx, N> Vtable<'tcx, N> {\n     pub fn nested_obligations(self) -> Vec<N> {\n         match self {"}, {"sha": "c17cb7dd9f161e46b363c452dcc89b1ff4e88018", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fd564112f1ec00f6f8a56e8a3577dd255639131/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd564112f1ec00f6f8a56e8a3577dd255639131/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=6fd564112f1ec00f6f8a56e8a3577dd255639131", "patch": "@@ -608,4 +608,5 @@ E0745: include_str!(\"./error_codes/E0745.md\"),\n     E0726, // non-explicit (not `'_`) elided lifetime in unsupported position\n     E0727, // `async` generators are not yet supported\n     E0739, // invalid track_caller application/syntax\n+    E0746, // `dyn Trait` return type\n }"}, {"sha": "ad257b01e1b40f27a56ba98ec3f1ed7339ac242b", "filename": "src/test/ui/error-codes/E0746.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6fd564112f1ec00f6f8a56e8a3577dd255639131/src%2Ftest%2Fui%2Ferror-codes%2FE0746.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd564112f1ec00f6f8a56e8a3577dd255639131/src%2Ftest%2Fui%2Ferror-codes%2FE0746.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0746.rs?ref=6fd564112f1ec00f6f8a56e8a3577dd255639131", "patch": "@@ -0,0 +1,17 @@\n+struct Struct;\n+trait Trait {}\n+impl Trait for Struct {}\n+impl Trait for u32 {}\n+\n+fn foo() -> dyn Trait { Struct }\n+//~^ ERROR E0746\n+//~| ERROR E0308\n+\n+fn bar() -> dyn Trait { //~ ERROR E0746\n+    if true {\n+        return 0; //~ ERROR E0308\n+    }\n+    42 //~ ERROR E0308\n+}\n+\n+fn main() {}"}, {"sha": "baafcd27c29d462e9aa91aeabd34c4cf242f6556", "filename": "src/test/ui/error-codes/E0746.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/6fd564112f1ec00f6f8a56e8a3577dd255639131/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6fd564112f1ec00f6f8a56e8a3577dd255639131/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr?ref=6fd564112f1ec00f6f8a56e8a3577dd255639131", "patch": "@@ -0,0 +1,62 @@\n+error[E0308]: mismatched types\n+  --> $DIR/E0746.rs:6:25\n+   |\n+LL | fn foo() -> dyn Trait { Struct }\n+   |             ---------   ^^^^^^ expected trait `Trait`, found struct `Struct`\n+   |             |\n+   |             expected `(dyn Trait + 'static)` because of return type\n+   |\n+   = note: expected trait object `(dyn Trait + 'static)`\n+                    found struct `Struct`\n+\n+error[E0746]: return type cannot have a bare trait because it must be `Sized`\n+  --> $DIR/E0746.rs:6:13\n+   |\n+LL | fn foo() -> dyn Trait { Struct }\n+   |             ^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n+help: you can use the `impl Trait` feature in the return type because all the return paths are of type `Struct`, which implements `dyn Trait`\n+   |\n+LL | fn foo() -> impl Trait { Struct }\n+   |             ^^^^^^^^^^\n+\n+error[E0746]: return type cannot have a bare trait because it must be `Sized`\n+  --> $DIR/E0746.rs:10:13\n+   |\n+LL | fn bar() -> dyn Trait {\n+   |             ^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n+help: you can use the `impl Trait` feature in the return type because all the return paths are of type `{integer}`, which implements `dyn Trait`\n+   |\n+LL | fn bar() -> impl Trait {\n+   |             ^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/E0746.rs:12:16\n+   |\n+LL | fn bar() -> dyn Trait {\n+   |             --------- expected `(dyn Trait + 'static)` because of return type\n+LL |     if true {\n+LL |         return 0;\n+   |                ^ expected trait `Trait`, found integer\n+   |\n+   = note: expected trait object `(dyn Trait + 'static)`\n+                      found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/E0746.rs:14:5\n+   |\n+LL | fn bar() -> dyn Trait {\n+   |             --------- expected `(dyn Trait + 'static)` because of return type\n+...\n+LL |     42\n+   |     ^^ expected trait `Trait`, found integer\n+   |\n+   = note: expected trait object `(dyn Trait + 'static)`\n+                      found type `{integer}`\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "80168ca82577420d70595a983bb0b4e66c102ad8", "filename": "src/test/ui/impl-trait/dyn-trait-return-should-be-impl-trait.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6fd564112f1ec00f6f8a56e8a3577dd255639131/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd564112f1ec00f6f8a56e8a3577dd255639131/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.rs?ref=6fd564112f1ec00f6f8a56e8a3577dd255639131", "patch": "@@ -0,0 +1,36 @@\n+#![allow(bare_trait_objects)]\n+struct Struct;\n+trait Trait {}\n+impl Trait for Struct {}\n+impl Trait for u32 {}\n+\n+fn fuz() -> (usize, Trait) { (42, Struct) }\n+//~^ ERROR E0277\n+//~| ERROR E0308\n+fn bar() -> (usize, dyn Trait) { (42, Struct) }\n+//~^ ERROR E0277\n+//~| ERROR E0308\n+fn bap() -> Trait { Struct }\n+//~^ ERROR E0746\n+//~| ERROR E0308\n+fn ban() -> dyn Trait { Struct }\n+//~^ ERROR E0746\n+//~| ERROR E0308\n+fn bak() -> dyn Trait { unimplemented!() } //~ ERROR E0277\n+// Suggest using `Box<dyn Trait>`\n+fn bal() -> dyn Trait { //~ ERROR E0746\n+    if true {\n+        return Struct; //~ ERROR E0308\n+    }\n+    42 //~ ERROR E0308\n+}\n+\n+// Suggest using `impl Trait`\n+fn bat() -> dyn Trait { //~ ERROR E0746\n+    if true {\n+        return 0; //~ ERROR E0308\n+    }\n+    42 //~ ERROR E0308\n+}\n+\n+fn main() {}"}, {"sha": "ce4c141a0af9d512306a41d7f7d7b802565e1c83", "filename": "src/test/ui/impl-trait/dyn-trait-return-should-be-impl-trait.stderr", "status": "added", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/6fd564112f1ec00f6f8a56e8a3577dd255639131/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6fd564112f1ec00f6f8a56e8a3577dd255639131/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr?ref=6fd564112f1ec00f6f8a56e8a3577dd255639131", "patch": "@@ -0,0 +1,186 @@\n+error[E0308]: mismatched types\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:7:35\n+   |\n+LL | fn fuz() -> (usize, Trait) { (42, Struct) }\n+   |                                   ^^^^^^ expected trait `Trait`, found struct `Struct`\n+   |\n+   = note: expected trait object `(dyn Trait + 'static)`\n+                    found struct `Struct`\n+\n+error[E0277]: the size for values of type `(dyn Trait + 'static)` cannot be known at compilation time\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:7:13\n+   |\n+LL | fn fuz() -> (usize, Trait) { (42, Struct) }\n+   |             ^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `(usize, (dyn Trait + 'static))`, the trait `std::marker::Sized` is not implemented for `(dyn Trait + 'static)`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: required because it appears within the type `(usize, (dyn Trait + 'static))`\n+   = note: the return type of a function must have a statically known size\n+\n+error[E0308]: mismatched types\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:10:39\n+   |\n+LL | fn bar() -> (usize, dyn Trait) { (42, Struct) }\n+   |                                       ^^^^^^ expected trait `Trait`, found struct `Struct`\n+   |\n+   = note: expected trait object `(dyn Trait + 'static)`\n+                    found struct `Struct`\n+\n+error[E0277]: the size for values of type `(dyn Trait + 'static)` cannot be known at compilation time\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:10:13\n+   |\n+LL | fn bar() -> (usize, dyn Trait) { (42, Struct) }\n+   |             ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `(usize, (dyn Trait + 'static))`, the trait `std::marker::Sized` is not implemented for `(dyn Trait + 'static)`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: required because it appears within the type `(usize, (dyn Trait + 'static))`\n+   = note: the return type of a function must have a statically known size\n+\n+error[E0308]: mismatched types\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:13:21\n+   |\n+LL | fn bap() -> Trait { Struct }\n+   |             -----   ^^^^^^ expected trait `Trait`, found struct `Struct`\n+   |             |\n+   |             expected `(dyn Trait + 'static)` because of return type\n+   |\n+   = note: expected trait object `(dyn Trait + 'static)`\n+                    found struct `Struct`\n+\n+error[E0746]: return type cannot have a bare trait because it must be `Sized`\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:13:13\n+   |\n+LL | fn bap() -> Trait { Struct }\n+   |             ^^^^^ doesn't have a size known at compile-time\n+   |\n+   = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n+help: you can use the `impl Trait` feature in the return type because all the return paths are of type `Struct`, which implements `dyn Trait`\n+   |\n+LL | fn bap() -> impl Trait { Struct }\n+   |             ^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:16:25\n+   |\n+LL | fn ban() -> dyn Trait { Struct }\n+   |             ---------   ^^^^^^ expected trait `Trait`, found struct `Struct`\n+   |             |\n+   |             expected `(dyn Trait + 'static)` because of return type\n+   |\n+   = note: expected trait object `(dyn Trait + 'static)`\n+                    found struct `Struct`\n+\n+error[E0746]: return type cannot have a bare trait because it must be `Sized`\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:16:13\n+   |\n+LL | fn ban() -> dyn Trait { Struct }\n+   |             ^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n+help: you can use the `impl Trait` feature in the return type because all the return paths are of type `Struct`, which implements `dyn Trait`\n+   |\n+LL | fn ban() -> impl Trait { Struct }\n+   |             ^^^^^^^^^^\n+\n+error[E0277]: the size for values of type `(dyn Trait + 'static)` cannot be known at compilation time\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:19:13\n+   |\n+LL | fn bak() -> dyn Trait { unimplemented!() }\n+   |             ^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `(dyn Trait + 'static)`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: the return type of a function must have a statically known size\n+\n+error[E0308]: mismatched types\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:23:16\n+   |\n+LL | fn bal() -> dyn Trait {\n+   |             --------- expected `(dyn Trait + 'static)` because of return type\n+LL |     if true {\n+LL |         return Struct;\n+   |                ^^^^^^ expected trait `Trait`, found struct `Struct`\n+   |\n+   = note: expected trait object `(dyn Trait + 'static)`\n+                    found struct `Struct`\n+\n+error[E0746]: return type cannot have a bare trait because it must be `Sized`\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:21:13\n+   |\n+LL | fn bal() -> dyn Trait {\n+   |             ^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+help: if all the returned values were of the same type you could use `impl Trait` as the return type\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:25:5\n+   |\n+LL |         return Struct;\n+   |                ^^^^^^\n+LL |     }\n+LL |     42\n+   |     ^^\n+   = help: alternatively, you can always create a new `enum` with a variant for each returned type\n+   = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n+   = note: for information on trait objects, see <https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types>\n+help: if the performance implications are acceptable, you can return a trait object\n+   |\n+LL | fn bal() -> Box<dyn Trait> {\n+LL |     if true {\n+LL |         return Box::new(Struct);\n+LL |     }\n+LL |     Box::new(42)\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:25:5\n+   |\n+LL | fn bal() -> dyn Trait {\n+   |             --------- expected `(dyn Trait + 'static)` because of return type\n+...\n+LL |     42\n+   |     ^^ expected trait `Trait`, found integer\n+   |\n+   = note: expected trait object `(dyn Trait + 'static)`\n+                      found type `{integer}`\n+\n+error[E0746]: return type cannot have a bare trait because it must be `Sized`\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:29:13\n+   |\n+LL | fn bat() -> dyn Trait {\n+   |             ^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = note: for information on `impl Trait`, see <https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits>\n+help: you can use the `impl Trait` feature in the return type because all the return paths are of type `{integer}`, which implements `dyn Trait`\n+   |\n+LL | fn bat() -> impl Trait {\n+   |             ^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:31:16\n+   |\n+LL | fn bat() -> dyn Trait {\n+   |             --------- expected `(dyn Trait + 'static)` because of return type\n+LL |     if true {\n+LL |         return 0;\n+   |                ^ expected trait `Trait`, found integer\n+   |\n+   = note: expected trait object `(dyn Trait + 'static)`\n+                      found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/dyn-trait-return-should-be-impl-trait.rs:33:5\n+   |\n+LL | fn bat() -> dyn Trait {\n+   |             --------- expected `(dyn Trait + 'static)` because of return type\n+...\n+LL |     42\n+   |     ^^ expected trait `Trait`, found integer\n+   |\n+   = note: expected trait object `(dyn Trait + 'static)`\n+                      found type `{integer}`\n+\n+error: aborting due to 15 previous errors\n+\n+Some errors have detailed explanations: E0277, E0308.\n+For more information about an error, try `rustc --explain E0277`."}]}