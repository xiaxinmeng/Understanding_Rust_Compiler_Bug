{"sha": "033b38b636eb6323b57fd9905caa4a3833155db5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzM2IzOGI2MzZlYjYzMjNiNTdmZDk5MDVjYWE0YTM4MzMxNTVkYjU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-12T23:57:08Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-12T23:57:08Z"}, "message": "rustc: Make ty::expr_ann() terser", "tree": {"sha": "d4521e5f636824a6bd8e78f745e6b816e38c7193", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4521e5f636824a6bd8e78f745e6b816e38c7193"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/033b38b636eb6323b57fd9905caa4a3833155db5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/033b38b636eb6323b57fd9905caa4a3833155db5", "html_url": "https://github.com/rust-lang/rust/commit/033b38b636eb6323b57fd9905caa4a3833155db5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/033b38b636eb6323b57fd9905caa4a3833155db5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b7dd0d918d9c23ad4ac4933d5c53d0a0024b92e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b7dd0d918d9c23ad4ac4933d5c53d0a0024b92e", "html_url": "https://github.com/rust-lang/rust/commit/0b7dd0d918d9c23ad4ac4933d5c53d0a0024b92e"}], "stats": {"total": 146, "additions": 37, "deletions": 109}, "files": [{"sha": "9f62f2b2ed30ff46c73fdf6ac0684e6b74399744", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 37, "deletions": 109, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/033b38b636eb6323b57fd9905caa4a3833155db5/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033b38b636eb6323b57fd9905caa4a3833155db5/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=033b38b636eb6323b57fd9905caa4a3833155db5", "patch": "@@ -1657,115 +1657,43 @@ fn pat_ty(&ctxt cx, &node_type_table ntt, &@ast::pat pat) -> t {\n }\n \n fn expr_ann(&@ast::expr e) -> ast::ann {\n-    alt(e.node) {\n-        case (ast::expr_vec(_,_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_tup(_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_rec(_,_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_call(_,_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_bind(_,_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_binary(_,_,_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_unary(_,_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_lit(_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_cast(_,_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_if(_,_,_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_while(_,_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_for(_,_,_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_for_each(_,_,_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_do_while(_,_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_alt(_,_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_block(_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_assign(_,_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_assign_op(_,_,_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_send(_,_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_recv(_,_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_field(_,_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_index(_,_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_path(_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_ext(_,_,_,_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_fail(?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_ret(_,?a)) {\n-            ret a; \n-        }\n-        case (ast::expr_put(_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_be(_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_log(_,_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_assert(_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_check(_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_port(?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_chan(_,?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_break(?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_cont(?a)) {\n-            ret a;\n-        }\n-        case (ast::expr_self_method(_, ?a)) {\n-            ret a;\n-        }\n+    alt (e.node) {\n+        case (ast::expr_vec(_,_,?a)) { ret a; }\n+        case (ast::expr_tup(_,?a)) { ret a; }\n+        case (ast::expr_rec(_,_,?a)) { ret a; }\n+        case (ast::expr_call(_,_,?a)) { ret a; }\n+        case (ast::expr_bind(_,_,?a)) { ret a; }\n+        case (ast::expr_binary(_,_,_,?a)) { ret a; }\n+        case (ast::expr_unary(_,_,?a)) { ret a; }\n+        case (ast::expr_lit(_,?a)) { ret a; }\n+        case (ast::expr_cast(_,_,?a)) { ret a; }\n+        case (ast::expr_if(_,_,_,?a)) { ret a; }\n+        case (ast::expr_while(_,_,?a)) { ret a; }\n+        case (ast::expr_for(_,_,_,?a)) { ret a; }\n+        case (ast::expr_for_each(_,_,_,?a)) { ret a; }\n+        case (ast::expr_do_while(_,_,?a)) { ret a; }\n+        case (ast::expr_alt(_,_,?a)) { ret a; }\n+        case (ast::expr_block(_,?a)) { ret a; }\n+        case (ast::expr_assign(_,_,?a)) { ret a; }\n+        case (ast::expr_assign_op(_,_,_,?a)) { ret a; }\n+        case (ast::expr_send(_,_,?a)) { ret a; }\n+        case (ast::expr_recv(_,_,?a)) { ret a; }\n+        case (ast::expr_field(_,_,?a)) { ret a; }\n+        case (ast::expr_index(_,_,?a)) { ret a; }\n+        case (ast::expr_path(_,?a)) { ret a; }\n+        case (ast::expr_ext(_,_,_,_,?a)) { ret a; }\n+        case (ast::expr_fail(?a)) { ret a; }\n+        case (ast::expr_ret(_,?a)) { ret a; }\n+        case (ast::expr_put(_,?a)) { ret a; }\n+        case (ast::expr_be(_,?a)) { ret a; }\n+        case (ast::expr_log(_,_,?a)) { ret a; }\n+        case (ast::expr_assert(_,?a)) { ret a; }\n+        case (ast::expr_check(_,?a)) { ret a; }\n+        case (ast::expr_port(?a)) { ret a; }\n+        case (ast::expr_chan(_,?a)) { ret a; }\n+        case (ast::expr_break(?a)) { ret a; }\n+        case (ast::expr_cont(?a)) { ret a; }\n+        case (ast::expr_self_method(_, ?a)) { ret a; }\n     }\n }\n "}]}