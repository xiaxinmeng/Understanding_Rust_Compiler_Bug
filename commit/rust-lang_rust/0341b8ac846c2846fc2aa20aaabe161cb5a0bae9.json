{"sha": "0341b8ac846c2846fc2aa20aaabe161cb5a0bae9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNDFiOGFjODQ2YzI4NDZmYzJhYTIwYWFhYmUxNjFjYjVhMGJhZTk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-11T12:18:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-11T12:18:44Z"}, "message": "fmt: set force_multiline_blocks=true", "tree": {"sha": "5e09bf180ef4f7028edc56a225174954e8483511", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e09bf180ef4f7028edc56a225174954e8483511"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9", "html_url": "https://github.com/rust-lang/rust/commit/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b06130762ed75f52da7c22979c61c597ced667c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b06130762ed75f52da7c22979c61c597ced667c6", "html_url": "https://github.com/rust-lang/rust/commit/b06130762ed75f52da7c22979c61c597ced667c6"}], "stats": {"total": 255, "additions": 141, "deletions": 114}, "files": [{"sha": "2d27616a3613f24faa047ee0426f83007e8bea81", "filename": "benches/helpers/miri_helper.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9/benches%2Fhelpers%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9/benches%2Fhelpers%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fmiri_helper.rs?ref=0341b8ac846c2846fc2aa20aaabe161cb5a0bae9", "patch": "@@ -40,9 +40,10 @@ fn find_sysroot() -> String {\n     let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n     match (home, toolchain) {\n         (Some(home), Some(toolchain)) => format!(\"{}/toolchains/{}\", home, toolchain),\n-        _ => option_env!(\"RUST_SYSROOT\")\n-            .expect(\"need to specify RUST_SYSROOT env var or use rustup or multirust\")\n-            .to_owned(),\n+        _ =>\n+            option_env!(\"RUST_SYSROOT\")\n+                .expect(\"need to specify RUST_SYSROOT env var or use rustup or multirust\")\n+                .to_owned(),\n     }\n }\n "}, {"sha": "be5af7379eae7773e98f4cb968cf4296c13a76cf", "filename": "rustfmt.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=0341b8ac846c2846fc2aa20aaabe161cb5a0bae9", "patch": "@@ -2,3 +2,4 @@ version = \"Two\"\n use_small_heuristics = \"Max\"\n match_arm_blocks = false\n match_arm_leading_pipes = \"Preserve\"\n+force_multiline_blocks = true"}, {"sha": "9dbd5e24aeba90018a5b10fe3eaffc33bbfff992", "filename": "src/bin/miri.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=0341b8ac846c2846fc2aa20aaabe161cb5a0bae9", "patch": "@@ -203,9 +203,12 @@ fn compile_time_sysroot() -> Option<String> {\n     let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n     Some(match (home, toolchain) {\n         (Some(home), Some(toolchain)) => format!(\"{}/toolchains/{}\", home, toolchain),\n-        _ => option_env!(\"RUST_SYSROOT\")\n-            .expect(\"To build Miri without rustup, set the `RUST_SYSROOT` env var at build time\")\n-            .to_owned(),\n+        _ =>\n+            option_env!(\"RUST_SYSROOT\")\n+                .expect(\n+                    \"To build Miri without rustup, set the `RUST_SYSROOT` env var at build time\",\n+                )\n+                .to_owned(),\n     })\n }\n \n@@ -336,9 +339,10 @@ fn main() {\n                         \"warn\" => miri::IsolatedOp::Reject(miri::RejectOpWith::Warning),\n                         \"warn-nobacktrace\" =>\n                             miri::IsolatedOp::Reject(miri::RejectOpWith::WarningWithoutBacktrace),\n-                        _ => panic!(\n-                            \"-Zmiri-isolation-error must be `abort`, `hide`, `warn`, or `warn-nobacktrace`\"\n-                        ),\n+                        _ =>\n+                            panic!(\n+                                \"-Zmiri-isolation-error must be `abort`, `hide`, `warn`, or `warn-nobacktrace`\"\n+                            ),\n                     };\n                 }\n                 \"-Zmiri-ignore-leaks\" => {\n@@ -383,10 +387,11 @@ fn main() {\n                     let id: u64 =\n                         match arg.strip_prefix(\"-Zmiri-track-pointer-tag=\").unwrap().parse() {\n                             Ok(id) => id,\n-                            Err(err) => panic!(\n-                                \"-Zmiri-track-pointer-tag requires a valid `u64` argument: {}\",\n-                                err\n-                            ),\n+                            Err(err) =>\n+                                panic!(\n+                                    \"-Zmiri-track-pointer-tag requires a valid `u64` argument: {}\",\n+                                    err\n+                                ),\n                         };\n                     if let Some(id) = miri::PtrId::new(id) {\n                         miri_config.tracked_pointer_tag = Some(id);\n@@ -422,13 +427,15 @@ fn main() {\n                         .parse::<f64>()\n                     {\n                         Ok(rate) if rate >= 0.0 && rate <= 1.0 => rate,\n-                        Ok(_) => panic!(\n-                            \"-Zmiri-compare-exchange-weak-failure-rate must be between `0.0` and `1.0`\"\n-                        ),\n-                        Err(err) => panic!(\n-                            \"-Zmiri-compare-exchange-weak-failure-rate requires a `f64` between `0.0` and `1.0`: {}\",\n-                            err\n-                        ),\n+                        Ok(_) =>\n+                            panic!(\n+                                \"-Zmiri-compare-exchange-weak-failure-rate must be between `0.0` and `1.0`\"\n+                            ),\n+                        Err(err) =>\n+                            panic!(\n+                                \"-Zmiri-compare-exchange-weak-failure-rate requires a `f64` between `0.0` and `1.0`: {}\",\n+                                err\n+                            ),\n                     };\n                     miri_config.cmpxchg_weak_failure_rate = rate;\n                 }"}, {"sha": "4476ce237ff494b3e2c67d4d3f38beee814223f8", "filename": "src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=0341b8ac846c2846fc2aa20aaabe161cb5a0bae9", "patch": "@@ -43,11 +43,12 @@ impl fmt::Display for TerminationInfo {\n             Deadlock => write!(f, \"the evaluated program deadlocked\"),\n             MultipleSymbolDefinitions { link_name, .. } =>\n                 write!(f, \"multiple definitions of symbol `{}`\", link_name),\n-            SymbolShimClashing { link_name, .. } => write!(\n-                f,\n-                \"found `{}` symbol definition that clashes with a built-in shim\",\n-                link_name\n-            ),\n+            SymbolShimClashing { link_name, .. } =>\n+                write!(\n+                    f,\n+                    \"found `{}` symbol definition that clashes with a built-in shim\",\n+                    link_name\n+                ),\n         }\n     }\n }"}, {"sha": "057684562fdb266ff0988cdd462000be1f9da1a5", "filename": "src/helpers.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=0341b8ac846c2846fc2aa20aaabe161cb5a0bae9", "patch": "@@ -498,10 +498,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 match err_kind {\n                     NotFound => \"ERROR_FILE_NOT_FOUND\",\n                     PermissionDenied => \"ERROR_ACCESS_DENIED\",\n-                    _ => throw_unsup_format!(\n-                        \"io error {:?} cannot be translated into a raw os error\",\n-                        err_kind\n-                    ),\n+                    _ =>\n+                        throw_unsup_format!(\n+                            \"io error {:?} cannot be translated into a raw os error\",\n+                            err_kind\n+                        ),\n                 },\n             )?\n         } else {"}, {"sha": "59322b91d67996f498b13bdd2a07a199dd905534", "filename": "src/shims/env.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=0341b8ac846c2846fc2aa20aaabe161cb5a0bae9", "patch": "@@ -53,10 +53,11 @@ impl<'tcx> EnvVars<'tcx> {\n                         \"linux\" | \"macos\" =>\n                             alloc_env_var_as_c_str(name.as_ref(), value.as_ref(), ecx)?,\n                         \"windows\" => alloc_env_var_as_wide_str(name.as_ref(), value.as_ref(), ecx)?,\n-                        unsupported => throw_unsup_format!(\n-                            \"environment support for target OS `{}` not yet available\",\n-                            unsupported\n-                        ),\n+                        unsupported =>\n+                            throw_unsup_format!(\n+                                \"environment support for target OS `{}` not yet available\",\n+                                unsupported\n+                            ),\n                     };\n                     ecx.machine.env_vars.map.insert(OsString::from(name), var_ptr);\n                 }"}, {"sha": "61dca93f0ed4931a600c3b82513515b94c17116e", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 49, "deletions": 47, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=0341b8ac846c2846fc2aa20aaabe161cb5a0bae9", "patch": "@@ -223,54 +223,56 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // First: functions that diverge.\n         let (dest, ret) = match ret {\n-            None => match &*link_name.as_str() {\n-                \"miri_start_panic\" => {\n-                    // `check_shim` happens inside `handle_miri_start_panic`.\n-                    this.handle_miri_start_panic(abi, link_name, args, unwind)?;\n-                    return Ok(None);\n-                }\n-                // This matches calls to the foreign item `panic_impl`.\n-                // The implementation is provided by the function with the `#[panic_handler]` attribute.\n-                \"panic_impl\" => {\n-                    // We don't use `check_shim` here because we are just forwarding to the lang\n-                    // item. Argument count checking will be performed when the returned `Body` is\n-                    // called.\n-                    this.check_abi_and_shim_symbol_clash(abi, Abi::Rust, link_name)?;\n-                    let panic_impl_id = tcx.lang_items().panic_impl().unwrap();\n-                    let panic_impl_instance = ty::Instance::mono(tcx, panic_impl_id);\n-                    return Ok(Some(&*this.load_mir(panic_impl_instance.def, None)?));\n-                }\n-                #[rustfmt::skip]\n-                | \"exit\"\n-                | \"ExitProcess\"\n-                => {\n-                    let exp_abi = if link_name.as_str() == \"exit\" {\n-                        Abi::C { unwind: false }\n-                    } else {\n-                        Abi::System { unwind: false }\n-                    };\n-                    let &[ref code] = this.check_shim(abi, exp_abi, link_name, args)?;\n-                    // it's really u32 for ExitProcess, but we have to put it into the `Exit` variant anyway\n-                    let code = this.read_scalar(code)?.to_i32()?;\n-                    throw_machine_stop!(TerminationInfo::Exit(code.into()));\n-                }\n-                \"abort\" => {\n-                    let &[] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                    throw_machine_stop!(TerminationInfo::Abort(\n-                        \"the program aborted execution\".to_owned()\n-                    ))\n-                }\n-                _ => {\n-                    if let Some(body) = this.lookup_exported_symbol(link_name)? {\n-                        return Ok(Some(body));\n+            None =>\n+                match &*link_name.as_str() {\n+                    \"miri_start_panic\" => {\n+                        // `check_shim` happens inside `handle_miri_start_panic`.\n+                        this.handle_miri_start_panic(abi, link_name, args, unwind)?;\n+                        return Ok(None);\n                     }\n-                    this.handle_unsupported(format!(\n-                        \"can't call (diverging) foreign function: {}\",\n-                        link_name\n-                    ))?;\n-                    return Ok(None);\n-                }\n-            },\n+                    // This matches calls to the foreign item `panic_impl`.\n+                    // The implementation is provided by the function with the `#[panic_handler]` attribute.\n+                    \"panic_impl\" => {\n+                        // We don't use `check_shim` here because we are just forwarding to the lang\n+                        // item. Argument count checking will be performed when the returned `Body` is\n+                        // called.\n+                        this.check_abi_and_shim_symbol_clash(abi, Abi::Rust, link_name)?;\n+                        let panic_impl_id = tcx.lang_items().panic_impl().unwrap();\n+                        let panic_impl_instance = ty::Instance::mono(tcx, panic_impl_id);\n+                        return Ok(Some(&*this.load_mir(panic_impl_instance.def, None)?));\n+                    }\n+                    #[rustfmt::skip]\n+                    | \"exit\"\n+                    | \"ExitProcess\"\n+                    => {\n+                        let exp_abi = if link_name.as_str() == \"exit\" {\n+                            Abi::C { unwind: false }\n+                        } else {\n+                            Abi::System { unwind: false }\n+                        };\n+                        let &[ref code] = this.check_shim(abi, exp_abi, link_name, args)?;\n+                        // it's really u32 for ExitProcess, but we have to put it into the `Exit` variant anyway\n+                        let code = this.read_scalar(code)?.to_i32()?;\n+                        throw_machine_stop!(TerminationInfo::Exit(code.into()));\n+                    }\n+                    \"abort\" => {\n+                        let &[] =\n+                            this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                        throw_machine_stop!(TerminationInfo::Abort(\n+                            \"the program aborted execution\".to_owned()\n+                        ))\n+                    }\n+                    _ => {\n+                        if let Some(body) = this.lookup_exported_symbol(link_name)? {\n+                            return Ok(Some(body));\n+                        }\n+                        this.handle_unsupported(format!(\n+                            \"can't call (diverging) foreign function: {}\",\n+                            link_name\n+                        ))?;\n+                        return Ok(None);\n+                    }\n+                },\n             Some(p) => p,\n         };\n "}, {"sha": "caef57df8dd2899c6420d6de69a876b556229c9b", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=0341b8ac846c2846fc2aa20aaabe161cb5a0bae9", "patch": "@@ -295,10 +295,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         this.float_to_int_unchecked(val.to_scalar()?.to_f32()?, dest.layout.ty)?,\n                     ty::Float(FloatTy::F64) =>\n                         this.float_to_int_unchecked(val.to_scalar()?.to_f64()?, dest.layout.ty)?,\n-                    _ => bug!(\n-                        \"`float_to_int_unchecked` called with non-float input type {:?}\",\n-                        val.layout.ty\n-                    ),\n+                    _ =>\n+                        bug!(\n+                            \"`float_to_int_unchecked` called with non-float input type {:?}\",\n+                            val.layout.ty\n+                        ),\n                 };\n \n                 this.write_scalar(res, dest)?;"}, {"sha": "bfc6195b3af33d84b2d3466e8a879b9119f9591e", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=0341b8ac846c2846fc2aa20aaabe161cb5a0bae9", "patch": "@@ -434,10 +434,11 @@ trait EvalContextExtPrivate<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, '\n             Err(e) =>\n                 return match e.raw_os_error() {\n                     Some(error) => Ok(error),\n-                    None => throw_unsup_format!(\n-                        \"the error {} couldn't be converted to a return value\",\n-                        e\n-                    ),\n+                    None =>\n+                        throw_unsup_format!(\n+                            \"the error {} couldn't be converted to a return value\",\n+                            e\n+                        ),\n                 },\n         }\n     }\n@@ -1203,13 +1204,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_null(&this.deref_operand(result_op)?.into())?;\n                 Ok(0)\n             }\n-            Some(Err(e)) => match e.raw_os_error() {\n-                // return positive error number on error\n-                Some(error) => Ok(error),\n-                None => {\n-                    throw_unsup_format!(\"the error {} couldn't be converted to a return value\", e)\n-                }\n-            },\n+            Some(Err(e)) =>\n+                match e.raw_os_error() {\n+                    // return positive error number on error\n+                    Some(error) => Ok(error),\n+                    None => {\n+                        throw_unsup_format!(\n+                            \"the error {} couldn't be converted to a return value\",\n+                            e\n+                        )\n+                    }\n+                },\n         }\n     }\n \n@@ -1294,13 +1299,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_null(&this.deref_operand(result_op)?.into())?;\n                 Ok(0)\n             }\n-            Some(Err(e)) => match e.raw_os_error() {\n-                // return positive error number on error\n-                Some(error) => Ok(error),\n-                None => {\n-                    throw_unsup_format!(\"the error {} couldn't be converted to a return value\", e)\n-                }\n-            },\n+            Some(Err(e)) =>\n+                match e.raw_os_error() {\n+                    // return positive error number on error\n+                    Some(error) => Ok(error),\n+                    None => {\n+                        throw_unsup_format!(\n+                            \"the error {} couldn't be converted to a return value\",\n+                            e\n+                        )\n+                    }\n+                },\n         }\n     }\n "}, {"sha": "0365e9ca00edd3823c0566a220b540851f034980", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=0341b8ac846c2846fc2aa20aaabe161cb5a0bae9", "patch": "@@ -699,10 +699,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         fn qualify(ty: ty::Ty<'_>, kind: RetagKind) -> Option<(RefKind, bool)> {\n             match ty.kind() {\n                 // References are simple.\n-                ty::Ref(_, _, Mutability::Mut) => Some((\n-                    RefKind::Unique { two_phase: kind == RetagKind::TwoPhase },\n-                    kind == RetagKind::FnEntry,\n-                )),\n+                ty::Ref(_, _, Mutability::Mut) =>\n+                    Some((\n+                        RefKind::Unique { two_phase: kind == RetagKind::TwoPhase },\n+                        kind == RetagKind::FnEntry,\n+                    )),\n                 ty::Ref(_, _, Mutability::Not) =>\n                     Some((RefKind::Shared, kind == RetagKind::FnEntry)),\n                 // Raw pointers need to be enabled."}, {"sha": "74180f25b3bbe0da197963e748db4491d11d1a35", "filename": "src/vector_clock.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9/src%2Fvector_clock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0341b8ac846c2846fc2aa20aaabe161cb5a0bae9/src%2Fvector_clock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvector_clock.rs?ref=0341b8ac846c2846fc2aa20aaabe161cb5a0bae9", "patch": "@@ -186,16 +186,18 @@ impl PartialOrd for VClock {\n             Ordering::Equal => Some(order),\n             // Right has at least 1 element > than the implicit 0,\n             // so the only valid values are Ordering::Less or None.\n-            Ordering::Less => match order {\n-                Ordering::Less | Ordering::Equal => Some(Ordering::Less),\n-                Ordering::Greater => None,\n-            },\n+            Ordering::Less =>\n+                match order {\n+                    Ordering::Less | Ordering::Equal => Some(Ordering::Less),\n+                    Ordering::Greater => None,\n+                },\n             // Left has at least 1 element > than the implicit 0,\n             // so the only valid values are Ordering::Greater or None.\n-            Ordering::Greater => match order {\n-                Ordering::Greater | Ordering::Equal => Some(Ordering::Greater),\n-                Ordering::Less => None,\n-            },\n+            Ordering::Greater =>\n+                match order {\n+                    Ordering::Greater | Ordering::Equal => Some(Ordering::Greater),\n+                    Ordering::Less => None,\n+                },\n         }\n     }\n "}]}