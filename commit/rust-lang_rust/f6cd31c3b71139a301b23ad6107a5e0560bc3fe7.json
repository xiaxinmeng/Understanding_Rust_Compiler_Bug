{"sha": "f6cd31c3b71139a301b23ad6107a5e0560bc3fe7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2Y2QzMWMzYjcxMTM5YTMwMWIyM2FkNjEwN2E1ZTA1NjBiYzNmZTc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-17T21:09:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-17T21:09:02Z"}, "message": "Rollup merge of #73930 - a1phyr:feature_const_option, r=dtolnay\n\nMake some Option methods const\n\nTracking issue: #67441\n\nConstantify the following methods of `Option`:\n- `as_ref`\n- `is_some`\n- `is_none`\n- `iter` (not sure about this one, but it is possible, and will be useful when const traits are a thing)\n\ncc @rust-lang/wg-const-eval @rust-lang/libs", "tree": {"sha": "e5a54f2f3c06668bbde3ece55a4d44f25e1cf127", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5a54f2f3c06668bbde3ece55a4d44f25e1cf127"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6cd31c3b71139a301b23ad6107a5e0560bc3fe7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfEhNuCRBK7hj4Ov3rIwAAdHIIABUVQNrcgwD7RQ8sY6SBuM9q\nHdJWHxiJWHQZPmBs5PWlRUTULwBR6m5d0Pl96yDTVTt1un7HGZBv+XccdtLnI8Yk\nZy/TO5qCiazCTS6FN2heY6jpbyRuQMAUOUlIs4wSlWYkNK7p+wqOKC+LFGdazYjA\nQ6h9lFe/UFcQYiP270MtQmIuMkUP905IiUTsKyRzErIoyCtdM+8NNhJg5h8S6Mqx\nH3u2mxPpfxMAMNqvv8oES4gmrUWDPZOb+lDrqoOMxI9aQ6R2bj2BwWmHXD3lDHEc\nzSHqTZW94b09fwVoqHS/fXY2Mu+fpL4hhMTnS5UM6voxwTMJv/w1dBJAcMQliGw=\n=Dxde\n-----END PGP SIGNATURE-----\n", "payload": "tree e5a54f2f3c06668bbde3ece55a4d44f25e1cf127\nparent 3006ea3560b454404a653a0677a3d03790d5455b\nparent e7d9944e205dc59f1174b584cd8ed41deced9646\nauthor Manish Goregaokar <manishsmail@gmail.com> 1595020142 -0700\ncommitter GitHub <noreply@github.com> 1595020142 -0700\n\nRollup merge of #73930 - a1phyr:feature_const_option, r=dtolnay\n\nMake some Option methods const\n\nTracking issue: #67441\n\nConstantify the following methods of `Option`:\n- `as_ref`\n- `is_some`\n- `is_none`\n- `iter` (not sure about this one, but it is possible, and will be useful when const traits are a thing)\n\ncc @rust-lang/wg-const-eval @rust-lang/libs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6cd31c3b71139a301b23ad6107a5e0560bc3fe7", "html_url": "https://github.com/rust-lang/rust/commit/f6cd31c3b71139a301b23ad6107a5e0560bc3fe7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6cd31c3b71139a301b23ad6107a5e0560bc3fe7/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3006ea3560b454404a653a0677a3d03790d5455b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3006ea3560b454404a653a0677a3d03790d5455b", "html_url": "https://github.com/rust-lang/rust/commit/3006ea3560b454404a653a0677a3d03790d5455b"}, {"sha": "e7d9944e205dc59f1174b584cd8ed41deced9646", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7d9944e205dc59f1174b584cd8ed41deced9646", "html_url": "https://github.com/rust-lang/rust/commit/e7d9944e205dc59f1174b584cd8ed41deced9646"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "166aa6580ebbef4688af09c7414f6ead3ff37ee2", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6cd31c3b71139a301b23ad6107a5e0560bc3fe7/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6cd31c3b71139a301b23ad6107a5e0560bc3fe7/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=f6cd31c3b71139a301b23ad6107a5e0560bc3fe7", "patch": "@@ -83,6 +83,7 @@\n #![feature(const_panic)]\n #![feature(const_fn_union)]\n #![feature(const_generics)]\n+#![feature(const_option)]\n #![feature(const_ptr_offset)]\n #![feature(const_ptr_offset_from)]\n #![feature(const_raw_ptr_comparison)]"}, {"sha": "5932f8e5856a74c7aafb67e98a95f2ec0e8118fb", "filename": "src/libcore/option.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f6cd31c3b71139a301b23ad6107a5e0560bc3fe7/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6cd31c3b71139a301b23ad6107a5e0560bc3fe7/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=f6cd31c3b71139a301b23ad6107a5e0560bc3fe7", "patch": "@@ -179,8 +179,9 @@ impl<T> Option<T> {\n     /// [`Some`]: #variant.Some\n     #[must_use = \"if you intended to assert that this has a value, consider `.unwrap()` instead\"]\n     #[inline]\n+    #[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn is_some(&self) -> bool {\n+    pub const fn is_some(&self) -> bool {\n         matches!(*self, Some(_))\n     }\n \n@@ -200,8 +201,9 @@ impl<T> Option<T> {\n     #[must_use = \"if you intended to assert that this doesn't have a value, consider \\\n                   `.and_then(|| panic!(\\\"`Option` had a value when expected `None`\\\"))` instead\"]\n     #[inline]\n+    #[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn is_none(&self) -> bool {\n+    pub const fn is_none(&self) -> bool {\n         !self.is_some()\n     }\n \n@@ -259,8 +261,9 @@ impl<T> Option<T> {\n     /// println!(\"still can print text: {:?}\", text);\n     /// ```\n     #[inline]\n+    #[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn as_ref(&self) -> Option<&T> {\n+    pub const fn as_ref(&self) -> Option<&T> {\n         match *self {\n             Some(ref x) => Some(x),\n             None => None,\n@@ -580,8 +583,9 @@ impl<T> Option<T> {\n     /// assert_eq!(x.iter().next(), None);\n     /// ```\n     #[inline]\n+    #[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter(&self) -> Iter<'_, T> {\n+    pub const fn iter(&self) -> Iter<'_, T> {\n         Iter { inner: Item { opt: self.as_ref() } }\n     }\n "}, {"sha": "fbf20b9db67415434e49cdb1313922b870846efe", "filename": "src/test/ui/consts/const-option.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f6cd31c3b71139a301b23ad6107a5e0560bc3fe7/src%2Ftest%2Fui%2Fconsts%2Fconst-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6cd31c3b71139a301b23ad6107a5e0560bc3fe7/src%2Ftest%2Fui%2Fconsts%2Fconst-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-option.rs?ref=f6cd31c3b71139a301b23ad6107a5e0560bc3fe7", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+\n+#![feature(const_option)]\n+\n+const X: Option<i32> = Some(32);\n+const Y: Option<&i32> = X.as_ref();\n+\n+const IS_SOME: bool = X.is_some();\n+const IS_NONE: bool = Y.is_none();\n+\n+fn main() {\n+    assert!(IS_SOME);\n+    assert!(!IS_NONE)\n+}"}]}