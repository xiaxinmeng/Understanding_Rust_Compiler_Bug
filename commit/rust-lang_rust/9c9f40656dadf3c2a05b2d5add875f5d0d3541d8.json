{"sha": "9c9f40656dadf3c2a05b2d5add875f5d0d3541d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljOWY0MDY1NmRhZGYzYzJhMDViMmQ1YWRkODc1ZjVkMGQzNTQxZDg=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-11-24T19:47:49Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-11-24T21:38:58Z"}, "message": "Invoke attributes on the statement for statement items", "tree": {"sha": "944fac25493affccbc839cda51f024829f001cd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/944fac25493affccbc839cda51f024829f001cd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl+9fXMACgkQtAh+UQ6Y\nsWTt/g//YaYizR7D1txgTKMrhdVwBGa8UvLvB8FtpyM9DlaatB5etAiSu4no5jbz\nzWaSjI5HQ8IgVEYRjvZKNb+6d4TwCGy0mdhH+IygMj21668MfPKNlLfWcPPs7lcY\n01+7d8J09r6RqGlYug8Bxs3FUhEwaxiqdJYZjPYeJCTGwMB4/PMpOmtSsYtO8VtL\nx5vhcRkMQsRHFEavNRgsfGiCSJvFpKtEutNv4Fy0VvysT1J7+9MGHfckokEVFcVC\n7hPIBV1+OEDe0d6P4Dk+9IaJ+sLons2KpApue/6IaBVThFZgip1qIk+3wZ86MNe1\n1MsYNUbH+0pmTcxJd+qolyiZ/TovspF1JwnsjyXsnx4Lp/FgVLV0+MoT/g50xPVC\nwdjgiFIPdtfPhIBfFAmkPHkhLmzf9NoPLav08/WoNRkze0+6fmUiNjVDjOUWlft4\nnvFFYypK8PQrRy/vFUc9xzPVcDm3ki89QZW9FX+vHerlppusHYcwD5gZQewHDKXm\nNHwqzD+jxSWmxceYeIBiGlp3RJEdxgaQbFH8wRtMBtUtH+8T1fl202+Q6Ba5ZoGO\na1USgC60UTSBgPmQVDLn+zQ6NWGv41UMfh386Pud3k1Tr/E9MFDMYcoxmb6WC0rZ\nYrDsjibcXP1ccAt81LG92hd/eSb5c2a+BZLJQiWwrIPu+7bnrao=\n=LJQu\n-----END PGP SIGNATURE-----", "payload": "tree 944fac25493affccbc839cda51f024829f001cd2\nparent e9546bdbaf5794e8cb9a20541c483b8f8f6eb56f\nauthor Aaron Hill <aa1ronham@gmail.com> 1606247269 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1606253938 -0500\n\nInvoke attributes on the statement for statement items\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8", "html_url": "https://github.com/rust-lang/rust/commit/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9546bdbaf5794e8cb9a20541c483b8f8f6eb56f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9546bdbaf5794e8cb9a20541c483b8f8f6eb56f", "html_url": "https://github.com/rust-lang/rust/commit/e9546bdbaf5794e8cb9a20541c483b8f8f6eb56f"}], "stats": {"total": 583, "additions": 574, "deletions": 9}, "files": [{"sha": "1b5c06a96bcbd863ab8b76790dd9f3392757d621", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=9c9f40656dadf3c2a05b2d5add875f5d0d3541d8", "patch": "@@ -234,6 +234,15 @@ impl Annotatable {\n \n     pub fn derive_allowed(&self) -> bool {\n         match *self {\n+            Annotatable::Stmt(ref stmt) => match stmt.kind {\n+                ast::StmtKind::Item(ref item) => match item.kind {\n+                    ast::ItemKind::Struct(..)\n+                    | ast::ItemKind::Enum(..)\n+                    | ast::ItemKind::Union(..) => true,\n+                    _ => false,\n+                },\n+                _ => false,\n+            },\n             Annotatable::Item(ref item) => match item.kind {\n                 ast::ItemKind::Struct(..) | ast::ItemKind::Enum(..) | ast::ItemKind::Union(..) => {\n                     true"}, {"sha": "ce560c6c178274aef2608e559f1b474cfe48f1e2", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=9c9f40656dadf3c2a05b2d5add875f5d0d3541d8", "patch": "@@ -795,7 +795,14 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             | Annotatable::TraitItem(_)\n             | Annotatable::ImplItem(_)\n             | Annotatable::ForeignItem(_) => return,\n-            Annotatable::Stmt(_) => \"statements\",\n+            Annotatable::Stmt(stmt) => {\n+                // Attributes are stable on item statements,\n+                // but unstable on all other kinds of statements\n+                if stmt.is_item() {\n+                    return;\n+                }\n+                \"statements\"\n+            }\n             Annotatable::Expr(_) => \"expressions\",\n             Annotatable::Arm(..)\n             | Annotatable::Field(..)\n@@ -1266,9 +1273,19 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n \n         // we'll expand attributes on expressions separately\n         if !stmt.is_expr() {\n-            // FIXME: Handle custom attributes on statements (#15701).\n-            let attr =\n-                if stmt.is_item() { None } else { self.take_first_attr_no_derive(&mut stmt) };\n+            let attr = if stmt.is_item() {\n+                // FIXME: Implement proper token collection for statements\n+                if let StmtKind::Item(item) = &mut stmt.kind {\n+                    stmt.tokens = item.tokens.take()\n+                } else {\n+                    unreachable!()\n+                };\n+                self.take_first_attr(&mut stmt)\n+            } else {\n+                // Ignore derives on non-item statements for backwards compatibility.\n+                // This will result in a unused attribute warning\n+                self.take_first_attr_no_derive(&mut stmt)\n+            };\n \n             if let Some(attr) = attr {\n                 return self"}, {"sha": "36707a1ae272da6b61bdbb3389dba5cd7302c105", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=9c9f40656dadf3c2a05b2d5add875f5d0d3541d8", "patch": "@@ -1,6 +1,7 @@\n use crate::base::{self, *};\n use crate::proc_macro_server;\n \n+use rustc_ast::ptr::P;\n use rustc_ast::token;\n use rustc_ast::tokenstream::{TokenStream, TokenTree};\n use rustc_ast::{self as ast, *};\n@@ -74,8 +75,20 @@ impl MultiItemModifier for ProcMacroDerive {\n         _meta_item: &ast::MetaItem,\n         item: Annotatable,\n     ) -> ExpandResult<Vec<Annotatable>, Annotatable> {\n+        // We need special handling for statement items\n+        // (e.g. `fn foo() { #[derive(Debug)] struct Bar; }`)\n+        let mut is_stmt = false;\n         let item = match item {\n             Annotatable::Item(item) => token::NtItem(item),\n+            Annotatable::Stmt(stmt) => {\n+                is_stmt = true;\n+                assert!(stmt.is_item());\n+\n+                // A proc macro can't observe the fact that we're passing\n+                // them an `NtStmt` - it can only see the underlying tokens\n+                // of the wrapped item\n+                token::NtStmt(stmt.into_inner())\n+            }\n             _ => unreachable!(),\n         };\n         let input = if item.pretty_printing_compatibility_hack() {\n@@ -106,7 +119,13 @@ impl MultiItemModifier for ProcMacroDerive {\n         loop {\n             match parser.parse_item() {\n                 Ok(None) => break,\n-                Ok(Some(item)) => items.push(Annotatable::Item(item)),\n+                Ok(Some(item)) => {\n+                    if is_stmt {\n+                        items.push(Annotatable::Stmt(P(ecx.stmt_item(span, item))));\n+                    } else {\n+                        items.push(Annotatable::Item(item));\n+                    }\n+                }\n                 Err(mut err) => {\n                     err.emit();\n                     break;"}, {"sha": "03c10a43248988b805a643f97dd0ca606fe79c99", "filename": "src/test/ui/proc-macro/allowed-attr-stmt-expr.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.rs?ref=9c9f40656dadf3c2a05b2d5add875f5d0d3541d8", "patch": "@@ -0,0 +1,59 @@\n+// aux-build:attr-stmt-expr.rs\n+// aux-build:test-macros.rs\n+// compile-flags: -Z span-debug\n+// check-pass\n+\n+#![feature(proc_macro_hygiene)]\n+#![feature(stmt_expr_attributes)]\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n+extern crate attr_stmt_expr;\n+extern crate test_macros;\n+use attr_stmt_expr::{expect_let, expect_print_stmt, expect_expr, expect_print_expr};\n+use test_macros::print_attr;\n+use std::println;\n+\n+fn print_str(string: &'static str) {\n+    // macros are handled a bit differently\n+    #[expect_print_expr]\n+    println!(\"{}\", string)\n+}\n+\n+macro_rules! make_stmt {\n+    ($stmt:stmt) => {\n+        $stmt\n+    }\n+}\n+\n+macro_rules! second_make_stmt {\n+    ($stmt:stmt) => {\n+        make_stmt!($stmt);\n+    }\n+}\n+\n+\n+fn main() {\n+    make_stmt!(struct Foo {});\n+\n+    #[print_attr]\n+    #[expect_let]\n+    let string = \"Hello, world!\";\n+\n+    #[print_attr]\n+    #[expect_print_stmt]\n+    println!(\"{}\", string);\n+\n+    #[print_attr]\n+    second_make_stmt!(#[allow(dead_code)] struct Bar {});\n+\n+    #[print_attr]\n+    #[rustc_dummy]\n+    struct Other {};\n+\n+    #[expect_expr]\n+    print_str(\"string\")\n+}"}, {"sha": "0c7ac4fb682aeef3c325505345dad8533ae4b707", "filename": "src/test/ui/proc-macro/allowed-attr-stmt-expr.stdout", "status": "added", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fallowed-attr-stmt-expr.stdout?ref=9c9f40656dadf3c2a05b2d5add875f5d0d3541d8", "patch": "@@ -0,0 +1,187 @@\n+PRINT-ATTR INPUT (DISPLAY): #[expect_let] let string = \"Hello, world!\" ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"expect_let\",\n+                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+        ],\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Ident {\n+        ident: \"let\",\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Ident {\n+        ident: \"string\",\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: '=',\n+        spacing: Alone,\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Literal {\n+        kind: Str,\n+        symbol: \"Hello, world!\",\n+        suffix: None,\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): #[expect_print_stmt] println ! (\"{}\", string) ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"expect_print_stmt\",\n+                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+        ],\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Ident {\n+        ident: \"println\",\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: '!',\n+        spacing: Alone,\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Str,\n+                symbol: \"{}\",\n+                suffix: None,\n+                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+            Punct {\n+                ch: ',',\n+                spacing: Alone,\n+                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+            Ident {\n+                ident: \"string\",\n+                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+        ],\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): second_make_stmt ! (#[allow(dead_code)] struct Bar { }) ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"second_make_stmt\",\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: '!',\n+        spacing: Alone,\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '#',\n+                spacing: Alone,\n+                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"allow\",\n+                        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"dead_code\",\n+                                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                    },\n+                ],\n+                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+            Ident {\n+                ident: \"struct\",\n+                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+            Ident {\n+                ident: \"Bar\",\n+                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+            Group {\n+                delimiter: Brace,\n+                stream: TokenStream [],\n+                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+        ],\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] struct Other { }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"rustc_dummy\",\n+                span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+        ],\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Ident {\n+        ident: \"struct\",\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Ident {\n+        ident: \"Other\",\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [],\n+        span: $DIR/allowed-attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+]"}, {"sha": "ca1b163c986e04d7e7e5e8c74f5aa8039e29f492", "filename": "src/test/ui/proc-macro/attr-stmt-expr.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.rs?ref=9c9f40656dadf3c2a05b2d5add875f5d0d3541d8", "patch": "@@ -1,8 +1,17 @@\n // aux-build:attr-stmt-expr.rs\n+// aux-build:test-macros.rs\n+// compile-flags: -Z span-debug\n \n #![feature(proc_macro_hygiene)]\n+#![feature(rustc_attrs)]\n \n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+extern crate test_macros;\n extern crate attr_stmt_expr;\n+\n+use test_macros::print_attr;\n+use std::println;\n use attr_stmt_expr::{expect_let, expect_print_stmt, expect_expr, expect_print_expr};\n \n fn print_str(string: &'static str) {\n@@ -13,13 +22,36 @@ fn print_str(string: &'static str) {\n     println!(\"{}\", string)\n }\n \n+macro_rules! make_stmt {\n+    ($stmt:stmt) => {\n+        $stmt\n+    }\n+}\n+\n+macro_rules! second_make_stmt {\n+    ($stmt:stmt) => {\n+        make_stmt!($stmt);\n+    }\n+}\n+\n fn main() {\n+    make_stmt!(struct Foo {});\n+\n+    #[print_attr]\n     #[expect_let]\n     let string = \"Hello, world!\";\n \n+    #[print_attr]\n     #[expect_print_stmt]\n     println!(\"{}\", string);\n \n+    #[print_attr]\n+    second_make_stmt!(#[allow(dead_code)] struct Bar {});\n+\n+    #[print_attr]\n+    #[rustc_dummy]\n+    struct Other {}\n+\n     #[expect_expr]\n     //~^ ERROR attributes on expressions are experimental\n     //~| HELP add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable"}, {"sha": "7bd60e8ee77f98dbf4ae741fe3216975dfec1c71", "filename": "src/test/ui/proc-macro/attr-stmt-expr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stderr?ref=9c9f40656dadf3c2a05b2d5add875f5d0d3541d8", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/attr-stmt-expr.rs:10:5\n+  --> $DIR/attr-stmt-expr.rs:19:5\n    |\n LL |     #[expect_print_expr]\n    |     ^^^^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     #[expect_print_expr]\n    = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/attr-stmt-expr.rs:23:5\n+  --> $DIR/attr-stmt-expr.rs:55:5\n    |\n LL |     #[expect_expr]\n    |     ^^^^^^^^^^^^^^"}, {"sha": "5c1b586725b24f9739230710122923e8fb51d78a", "filename": "src/test/ui/proc-macro/attr-stmt-expr.stdout", "status": "added", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-stmt-expr.stdout?ref=9c9f40656dadf3c2a05b2d5add875f5d0d3541d8", "patch": "@@ -0,0 +1,187 @@\n+PRINT-ATTR INPUT (DISPLAY): #[expect_let] let string = \"Hello, world!\" ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"expect_let\",\n+                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+        ],\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Ident {\n+        ident: \"let\",\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Ident {\n+        ident: \"string\",\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: '=',\n+        spacing: Alone,\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Literal {\n+        kind: Str,\n+        symbol: \"Hello, world!\",\n+        suffix: None,\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): #[expect_print_stmt] println ! (\"{}\", string) ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"expect_print_stmt\",\n+                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+        ],\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Ident {\n+        ident: \"println\",\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: '!',\n+        spacing: Alone,\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Str,\n+                symbol: \"{}\",\n+                suffix: None,\n+                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+            Punct {\n+                ch: ',',\n+                spacing: Alone,\n+                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+            Ident {\n+                ident: \"string\",\n+                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+        ],\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): second_make_stmt ! (#[allow(dead_code)] struct Bar { }) ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"second_make_stmt\",\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: '!',\n+        spacing: Alone,\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '#',\n+                spacing: Alone,\n+                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"allow\",\n+                        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"dead_code\",\n+                                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+                    },\n+                ],\n+                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+            Ident {\n+                ident: \"struct\",\n+                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+            Ident {\n+                ident: \"Bar\",\n+                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+            Group {\n+                delimiter: Brace,\n+                stream: TokenStream [],\n+                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+        ],\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] struct Other { }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"rustc_dummy\",\n+                span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+            },\n+        ],\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Ident {\n+        ident: \"struct\",\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Ident {\n+        ident: \"Other\",\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [],\n+        span: $DIR/attr-stmt-expr.rs:1:1: 1:1 (#0),\n+    },\n+]"}, {"sha": "0bf889a855d01e15893e4b52d1e8ed24c452e79c", "filename": "src/test/ui/proc-macro/keep-expr-tokens.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.rs?ref=9c9f40656dadf3c2a05b2d5add875f5d0d3541d8", "patch": "@@ -1,7 +1,12 @@\n // aux-build:test-macros.rs\n+// compile-flags: -Z span-debug\n \n #![feature(stmt_expr_attributes)]\n #![feature(proc_macro_hygiene)]\n+#![feature(rustc_attrs)]\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n \n extern crate test_macros;\n \n@@ -12,4 +17,8 @@ fn main() {\n     for item in missing_fn() {} //~ ERROR cannot find\n \n     (#[recollect_attr] #[recollect_attr] ((#[recollect_attr] bad))); //~ ERROR cannot\n+\n+    #[test_macros::print_attr]\n+    #[rustc_dummy]\n+    { 1 +1; } // Don't change the weird spacing of the '+'\n }"}, {"sha": "11052d11c25089abc373b6eec738218d8f848d84", "filename": "src/test/ui/proc-macro/keep-expr-tokens.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.stderr?ref=9c9f40656dadf3c2a05b2d5add875f5d0d3541d8", "patch": "@@ -1,11 +1,11 @@\n error[E0425]: cannot find function `missing_fn` in this scope\n-  --> $DIR/keep-expr-tokens.rs:12:17\n+  --> $DIR/keep-expr-tokens.rs:17:17\n    |\n LL |     for item in missing_fn() {}\n    |                 ^^^^^^^^^^ not found in this scope\n \n error[E0425]: cannot find value `bad` in this scope\n-  --> $DIR/keep-expr-tokens.rs:14:62\n+  --> $DIR/keep-expr-tokens.rs:19:62\n    |\n LL |     (#[recollect_attr] #[recollect_attr] ((#[recollect_attr] bad)));\n    |                                                              ^^^ not found in this scope"}, {"sha": "fcd72a0e017ea86aedfa8a2bf47538db0b378bb3", "filename": "src/test/ui/proc-macro/keep-expr-tokens.stdout", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/9c9f40656dadf3c2a05b2d5add875f5d0d3541d8/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.stdout?ref=9c9f40656dadf3c2a05b2d5add875f5d0d3541d8", "patch": "@@ -0,0 +1,46 @@\n+PRINT-ATTR INPUT (DISPLAY): #[rustc_dummy] { 1 + 1 ; }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/keep-expr-tokens.rs:22:5: 22:6 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"rustc_dummy\",\n+                span: $DIR/keep-expr-tokens.rs:22:7: 22:18 (#0),\n+            },\n+        ],\n+        span: $DIR/keep-expr-tokens.rs:22:6: 22:19 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/keep-expr-tokens.rs:23:7: 23:8 (#0),\n+            },\n+            Punct {\n+                ch: '+',\n+                spacing: Alone,\n+                span: $DIR/keep-expr-tokens.rs:23:9: 23:10 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/keep-expr-tokens.rs:23:10: 23:11 (#0),\n+            },\n+            Punct {\n+                ch: ';',\n+                spacing: Alone,\n+                span: $DIR/keep-expr-tokens.rs:23:11: 23:12 (#0),\n+            },\n+        ],\n+        span: $DIR/keep-expr-tokens.rs:23:5: 23:14 (#0),\n+    },\n+]"}]}