{"sha": "409c3ce44165d61ad573cacccf3f462ad834d524", "node_id": "C_kwDOAAsO6NoAKDQwOWMzY2U0NDE2NWQ2MWFkNTczY2FjY2NmM2Y0NjJhZDgzNGQ1MjQ", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-13T18:49:21Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-13T18:49:21Z"}, "message": "Remove unused diagnostic items", "tree": {"sha": "a7c9b2bd0196a0e5426e4b789ee23bbe99505879", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7c9b2bd0196a0e5426e4b789ee23bbe99505879"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/409c3ce44165d61ad573cacccf3f462ad834d524", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/409c3ce44165d61ad573cacccf3f462ad834d524", "html_url": "https://github.com/rust-lang/rust/commit/409c3ce44165d61ad573cacccf3f462ad834d524", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/409c3ce44165d61ad573cacccf3f462ad834d524/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3be81dd0cedef3c83fba7047857418633708890f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3be81dd0cedef3c83fba7047857418633708890f", "html_url": "https://github.com/rust-lang/rust/commit/3be81dd0cedef3c83fba7047857418633708890f"}], "stats": {"total": 38, "additions": 0, "deletions": 38}, "files": [{"sha": "4d1d25889f1dde38576d3ee1c710261a505579d6", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/409c3ce44165d61ad573cacccf3f462ad834d524/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409c3ce44165d61ad573cacccf3f462ad834d524/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=409c3ce44165d61ad573cacccf3f462ad834d524", "patch": "@@ -190,9 +190,6 @@ symbols! {\n         Error,\n         File,\n         FileType,\n-        Fn,\n-        FnMut,\n-        FnOnce,\n         FormatSpec,\n         Formatter,\n         From,\n@@ -462,7 +459,6 @@ symbols! {\n         cfg_doctest,\n         cfg_eval,\n         cfg_hide,\n-        cfg_macro,\n         cfg_panic,\n         cfg_sanitize,\n         cfg_target_abi,\n@@ -495,19 +491,16 @@ symbols! {\n         cold,\n         collapse_debuginfo,\n         column,\n-        column_macro,\n         compare_and_swap,\n         compare_exchange,\n         compare_exchange_weak,\n         compile_error,\n-        compile_error_macro,\n         compiler,\n         compiler_builtins,\n         compiler_fence,\n         concat,\n         concat_bytes,\n         concat_idents,\n-        concat_macro,\n         conservative_impl_trait,\n         console,\n         const_allocate,\n@@ -724,7 +717,6 @@ symbols! {\n         field,\n         field_init_shorthand,\n         file,\n-        file_macro,\n         fill,\n         finish,\n         flags,\n@@ -826,7 +818,6 @@ symbols! {\n         include,\n         include_bytes,\n         include_bytes_macro,\n-        include_macro,\n         include_str,\n         include_str_macro,\n         inclusive_range_syntax,\n@@ -881,7 +872,6 @@ symbols! {\n         lifetimes,\n         likely,\n         line,\n-        line_macro,\n         link,\n         link_args,\n         link_cfg,\n@@ -926,7 +916,6 @@ symbols! {\n         masked,\n         match_beginning_vert,\n         match_default_bindings,\n-        matches_macro,\n         maxnumf32,\n         maxnumf64,\n         may_dangle,\n@@ -965,7 +954,6 @@ symbols! {\n         modifiers,\n         module,\n         module_path,\n-        module_path_macro,\n         more_qualified_paths,\n         more_struct_aliases,\n         movbe_target_feature,\n@@ -1103,7 +1091,6 @@ symbols! {\n         plugins,\n         pointee_trait,\n         pointer,\n-        pointer_trait_fmt,\n         poll,\n         position,\n         post_dash_lto: \"post-lto\",\n@@ -1449,7 +1436,6 @@ symbols! {\n         str_trim_start,\n         strict_provenance,\n         stringify,\n-        stringify_macro,\n         struct_field_attributes,\n         struct_inherit,\n         struct_variant,\n@@ -1568,7 +1554,6 @@ symbols! {\n         unreachable_2015,\n         unreachable_2015_macro,\n         unreachable_2021,\n-        unreachable_2021_macro,\n         unreachable_code,\n         unreachable_display,\n         unreachable_macro,"}, {"sha": "2adc968bd469276929609a7a50ceba0e544a1103", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/409c3ce44165d61ad573cacccf3f462ad834d524/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409c3ce44165d61ad573cacccf3f462ad834d524/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=409c3ce44165d61ad573cacccf3f462ad834d524", "patch": "@@ -1054,7 +1054,6 @@ pub trait UpperHex {\n pub trait Pointer {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_diagnostic_item = \"pointer_trait_fmt\"]\n     fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n }\n "}, {"sha": "34247c058450851402a6160af94d653010fb8842", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/409c3ce44165d61ad573cacccf3f462ad834d524/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409c3ce44165d61ad573cacccf3f462ad834d524/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=409c3ce44165d61ad573cacccf3f462ad834d524", "patch": "@@ -338,7 +338,6 @@ pub macro debug_assert_matches($($arg:tt)*) {\n /// ```\n #[macro_export]\n #[stable(feature = \"matches_macro\", since = \"1.42.0\")]\n-#[cfg_attr(not(test), rustc_diagnostic_item = \"matches_macro\")]\n macro_rules! matches {\n     ($expression:expr, $(|)? $( $pattern:pat_param )|+ $( if $guard: expr )? $(,)?) => {\n         match $expression {\n@@ -820,7 +819,6 @@ pub(crate) mod builtin {\n     #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n-    #[cfg_attr(not(test), rustc_diagnostic_item = \"compile_error_macro\")]\n     macro_rules! compile_error {\n         ($msg:expr $(,)?) => {{ /* compiler built-in */ }};\n     }\n@@ -944,7 +942,6 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n-    #[cfg_attr(not(test), rustc_diagnostic_item = \"env_macro\")]\n     macro_rules! env {\n         ($name:expr $(,)?) => {{ /* compiler built-in */ }};\n         ($name:expr, $error_msg:expr $(,)?) => {{ /* compiler built-in */ }};\n@@ -973,7 +970,6 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n-    #[cfg_attr(not(test), rustc_diagnostic_item = \"option_env_macro\")]\n     macro_rules! option_env {\n         ($name:expr $(,)?) => {{ /* compiler built-in */ }};\n     }\n@@ -1058,7 +1054,6 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n-    #[cfg_attr(not(test), rustc_diagnostic_item = \"concat_macro\")]\n     macro_rules! concat {\n         ($($e:expr),* $(,)?) => {{ /* compiler built-in */ }};\n     }\n@@ -1084,7 +1079,6 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n-    #[cfg_attr(not(test), rustc_diagnostic_item = \"line_macro\")]\n     macro_rules! line {\n         () => {\n             /* compiler built-in */\n@@ -1124,7 +1118,6 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n-    #[cfg_attr(not(test), rustc_diagnostic_item = \"column_macro\")]\n     macro_rules! column {\n         () => {\n             /* compiler built-in */\n@@ -1150,7 +1143,6 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n-    #[cfg_attr(not(test), rustc_diagnostic_item = \"file_macro\")]\n     macro_rules! file {\n         () => {\n             /* compiler built-in */\n@@ -1175,7 +1167,6 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n-    #[cfg_attr(not(test), rustc_diagnostic_item = \"stringify_macro\")]\n     macro_rules! stringify {\n         ($($t:tt)*) => {\n             /* compiler built-in */\n@@ -1282,7 +1273,6 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n-    #[cfg_attr(not(test), rustc_diagnostic_item = \"module_path_macro\")]\n     macro_rules! module_path {\n         () => {\n             /* compiler built-in */\n@@ -1316,7 +1306,6 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n-    #[cfg_attr(not(test), rustc_diagnostic_item = \"cfg_macro\")]\n     macro_rules! cfg {\n         ($($cfg:tt)*) => {\n             /* compiler built-in */\n@@ -1367,7 +1356,6 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n-    #[cfg_attr(not(test), rustc_diagnostic_item = \"include_macro\")]\n     macro_rules! include {\n         ($file:expr $(,)?) => {{ /* compiler built-in */ }};\n     }"}, {"sha": "2bcc9779ec7f2a09b82cc33a9eb752cb23f2493d", "filename": "library/core/src/ops/function.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/409c3ce44165d61ad573cacccf3f462ad834d524/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409c3ce44165d61ad573cacccf3f462ad834d524/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs?ref=409c3ce44165d61ad573cacccf3f462ad834d524", "patch": "@@ -57,7 +57,6 @@ use crate::marker::Tuple;\n #[cfg(bootstrap)]\n #[lang = \"fn\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_diagnostic_item = \"Fn\"]\n #[rustc_paren_sugar]\n #[rustc_on_unimplemented(\n     on(\n@@ -137,7 +136,6 @@ pub trait Fn<Args>: FnMut<Args> {\n #[cfg(not(bootstrap))]\n #[lang = \"fn\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_diagnostic_item = \"Fn\"]\n #[rustc_paren_sugar]\n #[rustc_on_unimplemented(\n     on(\n@@ -226,7 +224,6 @@ pub trait Fn<Args: Tuple>: FnMut<Args> {\n #[cfg(bootstrap)]\n #[lang = \"fn_mut\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_diagnostic_item = \"FnMut\"]\n #[rustc_paren_sugar]\n #[rustc_on_unimplemented(\n     on(\n@@ -314,7 +311,6 @@ pub trait FnMut<Args>: FnOnce<Args> {\n #[cfg(not(bootstrap))]\n #[lang = \"fn_mut\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_diagnostic_item = \"FnMut\"]\n #[rustc_paren_sugar]\n #[rustc_on_unimplemented(\n     on(\n@@ -395,7 +391,6 @@ pub trait FnMut<Args: Tuple>: FnOnce<Args> {\n #[cfg(bootstrap)]\n #[lang = \"fn_once\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_diagnostic_item = \"FnOnce\"]\n #[rustc_paren_sugar]\n #[rustc_on_unimplemented(\n     on(\n@@ -480,7 +475,6 @@ pub trait FnOnce<Args> {\n #[cfg(not(bootstrap))]\n #[lang = \"fn_once\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_diagnostic_item = \"FnOnce\"]\n #[rustc_paren_sugar]\n #[rustc_on_unimplemented(\n     on("}, {"sha": "959bdea7dba9847e289f693d20df2286a9e6cd75", "filename": "library/core/src/panic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409c3ce44165d61ad573cacccf3f462ad834d524/library%2Fcore%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409c3ce44165d61ad573cacccf3f462ad834d524/library%2Fcore%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic.rs?ref=409c3ce44165d61ad573cacccf3f462ad834d524", "patch": "@@ -43,7 +43,6 @@ pub macro panic_2015 {\n #[doc(hidden)]\n #[unstable(feature = \"edition_panic\", issue = \"none\", reason = \"use panic!() instead\")]\n #[allow_internal_unstable(core_panic, const_format_args)]\n-#[rustc_diagnostic_item = \"core_panic_2021_macro\"]\n #[rustc_macro_transparency = \"semitransparent\"]\n pub macro panic_2021 {\n     () => (\n@@ -80,7 +79,6 @@ pub macro unreachable_2015 {\n #[doc(hidden)]\n #[unstable(feature = \"edition_panic\", issue = \"none\", reason = \"use unreachable!() instead\")]\n #[allow_internal_unstable(core_panic)]\n-#[rustc_diagnostic_item = \"unreachable_2021_macro\"]\n #[rustc_macro_transparency = \"semitransparent\"]\n pub macro unreachable_2021 {\n     () => ("}, {"sha": "5453853e1381abacf285cb10cc786a4e26af4cb6", "filename": "library/std/src/net/ip_addr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409c3ce44165d61ad573cacccf3f462ad834d524/library%2Fstd%2Fsrc%2Fnet%2Fip_addr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409c3ce44165d61ad573cacccf3f462ad834d524/library%2Fstd%2Fsrc%2Fnet%2Fip_addr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip_addr.rs?ref=409c3ce44165d61ad573cacccf3f462ad834d524", "patch": "@@ -73,7 +73,6 @@ pub enum IpAddr {\n /// assert!(\"0xcb.0x0.0x71.0x00\".parse::<Ipv4Addr>().is_err()); // all octets are in hex\n /// ```\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n-#[cfg_attr(not(test), rustc_diagnostic_item = \"Ipv4Addr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Ipv4Addr {\n     octets: [u8; 4],\n@@ -156,7 +155,6 @@ pub struct Ipv4Addr {\n /// assert_eq!(localhost.is_loopback(), true);\n /// ```\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n-#[cfg_attr(not(test), rustc_diagnostic_item = \"Ipv6Addr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Ipv6Addr {\n     octets: [u8; 16],"}]}