{"sha": "2461b7a264676fbe24800beb0bcb39ab9e853562", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NjFiN2EyNjQ2NzZmYmUyNDgwMGJlYjBiY2IzOWFiOWU4NTM1NjI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-11-23T17:58:51Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-11-24T16:26:45Z"}, "message": "Use `get_parent_node` instead of using spans", "tree": {"sha": "b955ef708c1e7aa8f34bd80a06afee7a66e0ad59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b955ef708c1e7aa8f34bd80a06afee7a66e0ad59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2461b7a264676fbe24800beb0bcb39ab9e853562", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2461b7a264676fbe24800beb0bcb39ab9e853562", "html_url": "https://github.com/rust-lang/rust/commit/2461b7a264676fbe24800beb0bcb39ab9e853562", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2461b7a264676fbe24800beb0bcb39ab9e853562/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c2526a9d7ff0d141681d4b836e71cd877e4f56e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c2526a9d7ff0d141681d4b836e71cd877e4f56e", "html_url": "https://github.com/rust-lang/rust/commit/7c2526a9d7ff0d141681d4b836e71cd877e4f56e"}], "stats": {"total": 71, "additions": 30, "deletions": 41}, "files": [{"sha": "f03f782ebb45238cea8a967c82d23c4f4b8a199e", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/2461b7a264676fbe24800beb0bcb39ab9e853562/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2461b7a264676fbe24800beb0bcb39ab9e853562/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=2461b7a264676fbe24800beb0bcb39ab9e853562", "patch": "@@ -23,9 +23,7 @@ use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::cmp;\n use syntax::ast;\n use syntax::codemap::Spanned;\n-use syntax::errors::DiagnosticBuilder;\n use syntax::feature_gate;\n-use syntax::parse::ParseSess;\n use syntax::ptr::P;\n use syntax_pos::Span;\n \n@@ -122,32 +120,35 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         .pat_adjustments_mut()\n                         .insert(pat.hir_id, pat_adjustments);\n                 } else {\n-                    fn feature_err<'a>(sp: Span, sess: &'a ParseSess) -> DiagnosticBuilder<'a> {\n-                        feature_gate::feature_err(\n-                            sess,\n-                            \"match_default_bindings\",\n-                            sp,\n-                            feature_gate::GateIssue::Language,\n-                            \"non-reference pattern used to match a reference\",\n-                        )\n-                    }\n-                    if let Ok(snippet) = tcx.sess.codemap().span_to_snippet(pat.span) {\n-                        // The following is a bit of a hack. We probably should check the AST for\n-                        // this instead, but this should be good enough for the expected cases.\n-                        let prev_span = pat.span.prev_point();\n-                        let (sp, sugg) = match tcx.sess.codemap().span_to_snippet(prev_span) {\n-                            // Make the suggestion more obvious when having `&(_, _)`\n-                            Ok(ref prev) if &*prev == \"&\" => {\n-                                (prev_span.to(pat.span), format!(\"&&{}\", &snippet)),\n+                    let mut ref_sp = pat.span;\n+                    let mut id = pat.id;\n+                    loop {  // make span include all enclosing `&` to avoid confusing diag output\n+                        id = tcx.hir.get_parent_node(id);\n+                        let node = tcx.hir.find(id);\n+                        if let Some(hir::map::NodePat(pat)) = node {\n+                            if let hir::PatKind::Ref(..) = pat.node {\n+                                ref_sp = pat.span;\n+                            } else {\n+                                break;\n                             }\n-                            _ => (pat.span, format!(\"&{}\", &snippet)),\n-                        };\n-                        let mut err = feature_err(sp, &tcx.sess.parse_sess);\n-                        err.span_suggestion(sp, \"consider using a reference\", sugg);\n-                        err.emit();\n-                    } else {\n-                        feature_err(pat.span, &tcx.sess.parse_sess).emit();\n+                        } else {\n+                            break;\n+                        }\n+                    }\n+                    let sp = ref_sp.to(pat.span);\n+                    let mut err = feature_gate::feature_err(\n+                        &tcx.sess.parse_sess,\n+                        \"match_default_bindings\",\n+                        sp,\n+                        feature_gate::GateIssue::Language,\n+                        \"non-reference pattern used to match a reference\",\n+                    );\n+                    if let Ok(snippet) = tcx.sess.codemap().span_to_snippet(sp) {\n+                        err.span_suggestion(sp,\n+                                            \"consider using a reference\",\n+                                            format!(\"&{}\", &snippet));\n                     }\n+                    err.emit();\n                 }\n             }\n         }"}, {"sha": "47755dc1d54680a3a0c899ec0ff94a459897d79b", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2461b7a264676fbe24800beb0bcb39ab9e853562/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2461b7a264676fbe24800beb0bcb39ab9e853562/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=2461b7a264676fbe24800beb0bcb39ab9e853562", "patch": "@@ -159,18 +159,6 @@ impl Span {\n         Span::new(BytePos(lo), BytePos(lo), span.ctxt)\n     }\n \n-    /// Returns a new span representing the previous character after the start-point of this span\n-    pub fn prev_point(self) -> Span {\n-        let span = self.data();\n-        let span_lo = span.lo.0;\n-        let lo = if span_lo == 0 {\n-            0\n-        } else {\n-            span_lo - 1\n-        };\n-        Span::new(BytePos(lo), BytePos(span_lo), span.ctxt)\n-    }\n-\n     /// Returns `self` if `self` is not the dummy span, and `other` otherwise.\n     pub fn substitute_dummy(self, other: Span) -> Span {\n         if self.source_equal(&DUMMY_SP) { other } else { self }"}, {"sha": "ebf9e498ffd9ed9adc13d6bb64d424cf93571c95", "filename": "src/test/ui/rfc-2005-default-binding-mode/suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2461b7a264676fbe24800beb0bcb39ab9e853562/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fsuggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2461b7a264676fbe24800beb0bcb39ab9e853562/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fsuggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fsuggestion.stderr?ref=2461b7a264676fbe24800beb0bcb39ab9e853562", "patch": "@@ -2,7 +2,7 @@ error: non-reference pattern used to match a reference (see issue #42640)\n   --> $DIR/suggestion.rs:12:12\n    |\n 12 |     if let Some(y) = &Some(22) { //~ ERROR non-reference pattern\n-   |            ^^^^^^^ help: consider using: `&Some(y)`\n+   |            ^^^^^^^ help: consider using a reference: `&Some(y)`\n    |\n    = help: add #![feature(match_default_bindings)] to the crate attributes to enable\n "}, {"sha": "56303146d5d2f336eab22d9cf6f9c834291110f7", "filename": "src/test/ui/suggestions/dont-suggest-dereference-on-arg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2461b7a264676fbe24800beb0bcb39ab9e853562/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-dereference-on-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2461b7a264676fbe24800beb0bcb39ab9e853562/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-dereference-on-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-dereference-on-arg.stderr?ref=2461b7a264676fbe24800beb0bcb39ab9e853562", "patch": "@@ -1,8 +1,8 @@\n error: non-reference pattern used to match a reference (see issue #42640)\n-  --> dont-suggest-dereference-on-arg.rs:16:19\n+  --> $DIR/dont-suggest-dereference-on-arg.rs:16:19\n    |\n 16 |         .filter(|&(ref a, _)| foo(a))\n-   |                  ^^^^^^^^^^^ help: consider using: `&&(ref k, _)`\n+   |                  ^^^^^^^^^^^ help: consider using a reference: `&&(ref k, _)`\n    |\n    = help: add #![feature(match_default_bindings)] to the crate attributes to enable\n "}]}