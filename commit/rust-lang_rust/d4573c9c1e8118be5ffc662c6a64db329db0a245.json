{"sha": "d4573c9c1e8118be5ffc662c6a64db329db0a245", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NTczYzljMWU4MTE4YmU1ZmZjNjYyYzZhNjRkYjMyOWRiMGEyNDU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-26T16:07:54Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-26T17:21:09Z"}, "message": "Rename `TraitItem.node` to `TraitItem.kind`", "tree": {"sha": "70898abfa17c25b8fad22b298764db0bd38ab022", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70898abfa17c25b8fad22b298764db0bd38ab022"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4573c9c1e8118be5ffc662c6a64db329db0a245", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4573c9c1e8118be5ffc662c6a64db329db0a245", "html_url": "https://github.com/rust-lang/rust/commit/d4573c9c1e8118be5ffc662c6a64db329db0a245", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4573c9c1e8118be5ffc662c6a64db329db0a245/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17726f6b52b68279384cfb13209f015ab491c1c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/17726f6b52b68279384cfb13209f015ab491c1c0", "html_url": "https://github.com/rust-lang/rust/commit/17726f6b52b68279384cfb13209f015ab491c1c0"}], "stats": {"total": 164, "additions": 82, "deletions": 82}, "files": [{"sha": "13e4ce4cbc29ebd264f43992d89bb3cbccb92637", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -856,7 +856,7 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n     visitor.visit_ident(trait_item.ident);\n     walk_list!(visitor, visit_attribute, &trait_item.attrs);\n     visitor.visit_generics(&trait_item.generics);\n-    match trait_item.node {\n+    match trait_item.kind {\n         TraitItemKind::Const(ref ty, default) => {\n             visitor.visit_id(trait_item.hir_id);\n             visitor.visit_ty(ty);"}, {"sha": "f2170714f1a02fdfe063b437f213ad36ff2ad298", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -469,7 +469,7 @@ impl<'a> LoweringContext<'a> {\n             fn visit_trait_item(&mut self, item: &'tcx TraitItem) {\n                 self.lctx.allocate_hir_id_counter(item.id);\n \n-                match item.node {\n+                match item.kind {\n                     TraitItemKind::Method(_, None) => {\n                         // Ignore patterns in trait methods without bodies\n                         self.with_hir_id_owner(None, |this| {"}, {"sha": "c0540c8e94d56ed30a97f59297ff1cdd1e8163c1", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -818,7 +818,7 @@ impl LoweringContext<'_> {\n     fn lower_trait_item(&mut self, i: &TraitItem) -> hir::TraitItem {\n         let trait_item_def_id = self.resolver.definitions().local_def_id(i.id);\n \n-        let (generics, node) = match i.node {\n+        let (generics, kind) = match i.kind {\n             TraitItemKind::Const(ref ty, ref default) => (\n                 self.lower_generics(&i.generics, ImplTraitContext::disallowed()),\n                 hir::TraitItemKind::Const(\n@@ -852,14 +852,14 @@ impl LoweringContext<'_> {\n             }\n             TraitItemKind::Type(ref bounds, ref default) => {\n                 let generics = self.lower_generics(&i.generics, ImplTraitContext::disallowed());\n-                let node = hir::TraitItemKind::Type(\n+                let kind = hir::TraitItemKind::Type(\n                     self.lower_param_bounds(bounds, ImplTraitContext::disallowed()),\n                     default\n                         .as_ref()\n                         .map(|x| self.lower_ty(x, ImplTraitContext::disallowed())),\n                 );\n \n-                (generics, node)\n+                (generics, kind)\n             },\n             TraitItemKind::Macro(..) => bug!(\"macro item shouldn't exist at this point\"),\n         };\n@@ -869,13 +869,13 @@ impl LoweringContext<'_> {\n             ident: i.ident,\n             attrs: self.lower_attrs(&i.attrs),\n             generics,\n-            node,\n+            kind,\n             span: i.span,\n         }\n     }\n \n     fn lower_trait_item_ref(&mut self, i: &TraitItem) -> hir::TraitItemRef {\n-        let (kind, has_default) = match i.node {\n+        let (kind, has_default) = match i.kind {\n             TraitItemKind::Const(_, ref default) => {\n                 (hir::AssocItemKind::Const, default.is_some())\n             }"}, {"sha": "a6da2e92df168add2b874f04672d5c3c53962370", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -52,7 +52,7 @@ impl MaybeFnLike for ast::ImplItem {\n \n impl MaybeFnLike for ast::TraitItem {\n     fn is_fn_like(&self) -> bool {\n-        match self.node {\n+        match self.kind {\n             ast::TraitItemKind::Method(_, ast::TraitMethod::Provided(_)) => true,\n             _ => false,\n         }\n@@ -230,7 +230,7 @@ impl<'a> FnLikeNode<'a> {\n                     }),\n                 _ => bug!(\"item FnLikeNode that is not fn-like\"),\n             },\n-            map::Node::TraitItem(ti) => match ti.node {\n+            map::Node::TraitItem(ti) => match ti.kind {\n                 ast::TraitItemKind::Method(ref sig, ast::TraitMethod::Provided(body)) => {\n                     method(ti.hir_id, ti.ident, sig, None, body, ti.span, &ti.attrs)\n                 }"}, {"sha": "8237e4a58abb1f57d25bf25dcd8651fc2ba80851", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -214,7 +214,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     }\n \n     fn visit_trait_item(&mut self, ti: &'a TraitItem) {\n-        let def_data = match ti.node {\n+        let def_data = match ti.kind {\n             TraitItemKind::Method(..) | TraitItemKind::Const(..) =>\n                 DefPathData::ValueNs(ti.ident.as_interned_str()),\n             TraitItemKind::Type(..) => {"}, {"sha": "e6b4611a505c4a7bbe41a2fea42ce2b2c7b4b0ad", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -57,7 +57,7 @@ impl<'hir> Entry<'hir> {\n             }\n \n             Node::TraitItem(ref item) => {\n-                match item.node {\n+                match item.kind {\n                     TraitItemKind::Method(ref method_sig, _) => Some(&method_sig.decl),\n                     _ => None\n                 }\n@@ -93,7 +93,7 @@ impl<'hir> Entry<'hir> {\n             }\n \n             Node::TraitItem(item) => {\n-                match item.node {\n+                match item.kind {\n                     TraitItemKind::Const(_, Some(body)) |\n                     TraitItemKind::Method(_, TraitMethod::Provided(body)) => Some(body),\n                     _ => None\n@@ -320,7 +320,7 @@ impl<'hir> Map<'hir> {\n                 }\n             }\n             Node::TraitItem(item) => {\n-                match item.node {\n+                match item.kind {\n                     TraitItemKind::Const(..) => DefKind::AssocConst,\n                     TraitItemKind::Method(..) => DefKind::Method,\n                     TraitItemKind::Type(..) => DefKind::AssocTy,\n@@ -454,14 +454,14 @@ impl<'hir> Map<'hir> {\n     pub fn body_owner_kind(&self, id: HirId) -> BodyOwnerKind {\n         match self.get(id) {\n             Node::Item(&Item { node: ItemKind::Const(..), .. }) |\n-            Node::TraitItem(&TraitItem { node: TraitItemKind::Const(..), .. }) |\n+            Node::TraitItem(&TraitItem { kind: TraitItemKind::Const(..), .. }) |\n             Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. }) |\n             Node::AnonConst(_) => {\n                 BodyOwnerKind::Const\n             }\n             Node::Ctor(..) |\n             Node::Item(&Item { node: ItemKind::Fn(..), .. }) |\n-            Node::TraitItem(&TraitItem { node: TraitItemKind::Method(..), .. }) |\n+            Node::TraitItem(&TraitItem { kind: TraitItemKind::Method(..), .. }) |\n             Node::ImplItem(&ImplItem { kind: ImplItemKind::Method(..), .. }) => {\n                 BodyOwnerKind::Fn\n             }\n@@ -653,7 +653,7 @@ impl<'hir> Map<'hir> {\n                 ..\n             })\n             | Node::TraitItem(&TraitItem {\n-                node: TraitItemKind::Const(..),\n+                kind: TraitItemKind::Const(..),\n                 ..\n             })\n             | Node::ImplItem(&ImplItem {\n@@ -826,7 +826,7 @@ impl<'hir> Map<'hir> {\n                 }\n             },\n             Node::TraitItem(ti) => {\n-                match ti.node {\n+                match ti.kind {\n                     TraitItemKind::Method(..) => true,\n                     _ => false,\n                 }\n@@ -1326,7 +1326,7 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId, include_id: bool) -> String {\n             }\n         }\n         Some(Node::TraitItem(ti)) => {\n-            let kind = match ti.node {\n+            let kind = match ti.kind {\n                 TraitItemKind::Const(..) => \"assoc constant\",\n                 TraitItemKind::Method(..) => \"trait method\",\n                 TraitItemKind::Type(..) => \"assoc type\","}, {"sha": "4bc34cae450572971ac2af4f8af0af0f78f0d1b2", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -1830,7 +1830,7 @@ pub struct TraitItem {\n     pub hir_id: HirId,\n     pub attrs: HirVec<Attribute>,\n     pub generics: Generics,\n-    pub node: TraitItemKind,\n+    pub kind: TraitItemKind,\n     pub span: Span,\n }\n "}, {"sha": "6fbbbf7a1f2167e41c8fd4dabbc7037808bd879c", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -858,7 +858,7 @@ impl<'a> State<'a> {\n         self.hardbreak_if_not_bol();\n         self.maybe_print_comment(ti.span.lo());\n         self.print_outer_attributes(&ti.attrs);\n-        match ti.node {\n+        match ti.kind {\n             hir::TraitItemKind::Const(ref ty, default) => {\n                 let vis = Spanned { span: syntax_pos::DUMMY_SP,\n                                     node: hir::VisibilityKind::Inherited };"}, {"sha": "f212b7318c3fd42efc1ec15363995a1516d2ccd7", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -200,15 +200,15 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::TraitItem {\n             ident,\n             ref attrs,\n             ref generics,\n-            ref node,\n+            ref kind,\n             span\n         } = *self;\n \n         hcx.hash_hir_item_like(|hcx| {\n             ident.name.hash_stable(hcx, hasher);\n             attrs.hash_stable(hcx, hasher);\n             generics.hash_stable(hcx, hasher);\n-            node.hash_stable(hcx, hasher);\n+            kind.hash_stable(hcx, hasher);\n             span.hash_stable(hcx, hasher);\n         });\n     }"}, {"sha": "58164fbe146813ce75e92f11c23301f5ef32ffcb", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -260,7 +260,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     fn trait_item_scope_tag(item: &hir::TraitItem) -> &'static str {\n-        match item.node {\n+        match item.kind {\n             hir::TraitItemKind::Method(..) => \"method body\",\n             hir::TraitItemKind::Const(..) | hir::TraitItemKind::Type(..) => \"associated item\",\n         }"}, {"sha": "3878a98caa5bcdba449dfc22a7c900ebc3a5bcc9", "filename": "src/librustc/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -35,7 +35,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                         ..\n                     }) => &fndecl,\n                     Node::TraitItem(&hir::TraitItem {\n-                        node: hir::TraitItemKind::Method(ref m, ..),\n+                        kind: hir::TraitItemKind::Method(ref m, ..),\n                         ..\n                     })\n                     | Node::ImplItem(&hir::ImplItem {"}, {"sha": "673cf6aba328c20f7818071c54b157ac593f31b0", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -384,7 +384,7 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n             hir::ItemKind::Trait(.., ref trait_item_refs) => {\n                 for trait_item_ref in trait_item_refs {\n                     let trait_item = self.krate.trait_item(trait_item_ref.id);\n-                    match trait_item.node {\n+                    match trait_item.kind {\n                         hir::TraitItemKind::Const(_, Some(_)) |\n                         hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(_)) => {\n                             if has_allow_dead_code_or_lang_attr(self.tcx,\n@@ -652,7 +652,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n \n     // Overwrite so that we don't warn the trait item itself.\n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n-        match trait_item.node {\n+        match trait_item.kind {\n             hir::TraitItemKind::Const(_, Some(body_id)) |\n             hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(body_id)) => {\n                 self.visit_nested_body(body_id)"}, {"sha": "061a1f62918bba4e87980e17c3e2dba056b04651", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -164,7 +164,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                 }\n             }\n             Some(Node::TraitItem(trait_method)) => {\n-                match trait_method.node {\n+                match trait_method.kind {\n                     hir::TraitItemKind::Const(_, ref default) => default.is_some(),\n                     hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(_)) => true,\n                     hir::TraitItemKind::Method(_, hir::TraitMethod::Required(_)) |\n@@ -286,7 +286,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                 }\n             }\n             Node::TraitItem(trait_method) => {\n-                match trait_method.node {\n+                match trait_method.kind {\n                     hir::TraitItemKind::Const(_, None) |\n                     hir::TraitItemKind::Method(_, hir::TraitMethod::Required(_)) => {\n                         // Keep going, nothing to get exported"}, {"sha": "cafc58024e2bd5f9eda98eded391de2d1304c934", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -778,7 +778,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n         use self::hir::TraitItemKind::*;\n-        match trait_item.node {\n+        match trait_item.kind {\n             Method(ref sig, _) => {\n                 let tcx = self.tcx;\n                 self.visit_early_late(\n@@ -1871,7 +1871,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         ..\n                     })\n                     | Node::TraitItem(&hir::TraitItem {\n-                        node: hir::TraitItemKind::Method(..),\n+                        kind: hir::TraitItemKind::Method(..),\n                         ..\n                     })\n                     | Node::ImplItem(&hir::ImplItem {\n@@ -2170,7 +2170,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }) => Some(body),\n \n             Node::TraitItem(&hir::TraitItem {\n-                node: hir::TraitItemKind::Method(_, ref m),\n+                kind: hir::TraitItemKind::Method(_, ref m),\n                 ..\n             }) => {\n                 if let hir::ItemKind::Trait(.., ref trait_items) = self.tcx"}, {"sha": "d2b34ed37cd2788e2dadcbc908028359cdc81ef3", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -1173,7 +1173,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }) |\n             Node::TraitItem(&hir::TraitItem {\n                 span,\n-                node: hir::TraitItemKind::Method(hir::MethodSig { ref decl, .. }, _),\n+                kind: hir::TraitItemKind::Method(hir::MethodSig { ref decl, .. }, _),\n                 ..\n             }) => {\n                 (self.tcx.sess.source_map().def_span(span), decl.inputs.iter()"}, {"sha": "a907a89162e53854df724e7a2da035792bf2a4f7", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -397,7 +397,7 @@ impl DirtyCleanVisitor<'tcx> {\n                 }\n             },\n             HirNode::TraitItem(item) => {\n-                match item.node {\n+                match item.kind {\n                     TraitItemKind::Method(..) => (\"Node::TraitItem\", LABELS_FN_IN_TRAIT),\n                     TraitItemKind::Const(..) => (\"NodeTraitConst\", LABELS_CONST_IN_TRAIT),\n                     TraitItemKind::Type(..) => (\"NodeTraitType\", LABELS_CONST_IN_TRAIT),"}, {"sha": "7b6c5f5e638d4bf4735b7a7afe35818f5553ce16", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -796,7 +796,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a> {\n     }\n \n     fn flat_map_trait_item(&mut self, i: ast::TraitItem) -> SmallVec<[ast::TraitItem; 1]> {\n-        let is_const = match i.node {\n+        let is_const = match i.kind {\n             ast::TraitItemKind::Const(..) => true,\n             ast::TraitItemKind::Method(ast::MethodSig { ref decl, ref header, .. }, _) =>\n                 header.constness.node == ast::Constness::Const || Self::should_ignore_fn(decl),"}, {"sha": "dd5e68995cc18e38bece306804c43d0c31fcc88e", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -268,7 +268,7 @@ impl EarlyLintPass for UnsafeCode {\n     }\n \n     fn check_trait_item(&mut self, cx: &EarlyContext<'_>, item: &ast::TraitItem) {\n-        if let ast::TraitItemKind::Method(ref sig, None) = item.node {\n+        if let ast::TraitItemKind::Method(ref sig, None) = item.kind {\n             if sig.header.unsafety == ast::Unsafety::Unsafe {\n                 self.report_unsafe(cx, item.span, \"declaration of an `unsafe` method\")\n             }\n@@ -440,7 +440,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n             return;\n         }\n \n-        let desc = match trait_item.node {\n+        let desc = match trait_item.kind {\n             hir::TraitItemKind::Const(..) => \"an associated constant\",\n             hir::TraitItemKind::Method(..) => \"a trait method\",\n             hir::TraitItemKind::Type(..) => \"an associated type\",\n@@ -611,7 +611,7 @@ declare_lint_pass!(\n \n impl EarlyLintPass for AnonymousParameters {\n     fn check_trait_item(&mut self, cx: &EarlyContext<'_>, it: &ast::TraitItem) {\n-        match it.node {\n+        match it.kind {\n             ast::TraitItemKind::Method(ref sig, _) => {\n                 for arg in sig.decl.inputs.iter() {\n                     match arg.pat.kind {"}, {"sha": "e1dfe390f19fc7ed935ef3fedb9c77ffca3962cb", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -332,7 +332,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::TraitItem) {\n-        if let hir::TraitItemKind::Method(_, hir::TraitMethod::Required(pnames)) = &item.node {\n+        if let hir::TraitItemKind::Method(_, hir::TraitMethod::Required(pnames)) = &item.kind {\n             self.check_snake_case(cx, \"trait method\", &item.ident);\n             for param_name in pnames {\n                 self.check_snake_case(cx, \"variable\", param_name);\n@@ -399,7 +399,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonUpperCaseGlobals {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'_, '_>, ti: &hir::TraitItem) {\n-        if let hir::TraitItemKind::Const(..) = ti.node {\n+        if let hir::TraitItemKind::Const(..) = ti.kind {\n             NonUpperCaseGlobals::check_upper_case(cx, \"associated constant\", &ti.ident);\n         }\n     }"}, {"sha": "060672221dd0b14e30e379f89b8530e4a6bebac2", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -862,7 +862,7 @@ impl EncodeContext<'tcx> {\n         let kind = match trait_item.kind {\n             ty::AssocKind::Const => {\n                 let const_qualif =\n-                    if let hir::TraitItemKind::Const(_, Some(body)) = ast_item.node {\n+                    if let hir::TraitItemKind::Const(_, Some(body)) = ast_item.kind {\n                         self.const_qualif(0, body)\n                     } else {\n                         ConstQualif { mir: 0, ast_promotable: false }\n@@ -875,7 +875,7 @@ impl EncodeContext<'tcx> {\n                 EntryKind::AssocConst(container, const_qualif, rendered_const)\n             }\n             ty::AssocKind::Method => {\n-                let fn_data = if let hir::TraitItemKind::Method(method_sig, m) = &ast_item.node {\n+                let fn_data = if let hir::TraitItemKind::Method(method_sig, m) = &ast_item.kind {\n                     let param_names = match *m {\n                         hir::TraitMethod::Required(ref names) => {\n                             self.encode_fn_param_names(names)"}, {"sha": "0645e3b96c97101c5e055cc98038b795cc8f3ab4", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -37,7 +37,7 @@ pub fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> Body<'_> {\n         )\n         | Node::TraitItem(\n             hir::TraitItem {\n-                node: hir::TraitItemKind::Method(\n+                kind: hir::TraitItemKind::Method(\n                     hir::MethodSig { decl, .. },\n                     hir::TraitMethod::Provided(body_id),\n                 ),\n@@ -50,7 +50,7 @@ pub fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> Body<'_> {\n         | Node::Item(hir::Item { node: hir::ItemKind::Const(ty, body_id), .. })\n         | Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Const(ty, body_id), .. })\n         | Node::TraitItem(\n-            hir::TraitItem { node: hir::TraitItemKind::Const(ty, Some(body_id)), .. }\n+            hir::TraitItem { kind: hir::TraitItemKind::Const(ty, Some(body_id)), .. }\n         ) => {\n             (*body_id, ty.span)\n         }"}, {"sha": "6e640b93d7d2328d3b7697b38f16f7ae61c117e5", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -628,7 +628,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 }\n                 self.no_questions_in_bounds(bounds, \"supertraits\", true);\n                 for trait_item in trait_items {\n-                    if let TraitItemKind::Method(ref sig, ref block) = trait_item.node {\n+                    if let TraitItemKind::Method(ref sig, ref block) = trait_item.kind {\n                         self.check_fn_decl(&sig.decl);\n                         self.check_trait_fn_not_async(trait_item.span, sig.header.asyncness.node);\n                         self.check_trait_fn_not_const(sig.header.constness);"}, {"sha": "c12a4c6c06b4b55b90cd6027137f95873d9c8fa6", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -1190,14 +1190,14 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n     fn visit_trait_item(&mut self, item: &'b TraitItem) {\n         let parent = self.parent_scope.module;\n \n-        if let TraitItemKind::Macro(_) = item.node {\n+        if let TraitItemKind::Macro(_) = item.kind {\n             self.visit_invoc(item.id);\n             return\n         }\n \n         // Add the item to the trait info.\n         let item_def_id = self.r.definitions.local_def_id(item.id);\n-        let (res, ns) = match item.node {\n+        let (res, ns) = match item.kind {\n             TraitItemKind::Const(..) => (Res::Def(DefKind::AssocConst, item_def_id), ValueNS),\n             TraitItemKind::Method(ref sig, _) => {\n                 if sig.decl.has_self() {"}, {"sha": "f1de620d0568e0013ce8377e3c81d811a4d24e0c", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -740,7 +740,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n                                     AssocItemRibKind,\n                                 );\n                                 this.with_generic_param_rib(generic_params, |this| {\n-                                    match trait_item.node {\n+                                    match trait_item.kind {\n                                         TraitItemKind::Const(ref ty, ref default) => {\n                                             this.visit_ty(ty);\n \n@@ -938,7 +938,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n     ) -> T {\n         let trait_assoc_types = replace(\n             &mut self.current_trait_assoc_types,\n-            trait_items.iter().filter_map(|item| match &item.node {\n+            trait_items.iter().filter_map(|item| match &item.kind {\n                 TraitItemKind::Type(bounds, _) if bounds.len() == 0 => Some(item.ident),\n                 _ => None,\n             }).collect(),"}, {"sha": "8ea770696f900c74b08f0473e769b6dfbf926c32", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -1007,7 +1007,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n     fn process_trait_item(&mut self, trait_item: &'l ast::TraitItem, trait_id: DefId) {\n         self.process_macro_use(trait_item.span);\n         let vis_span = trait_item.span.shrink_to_lo();\n-        match trait_item.node {\n+        match trait_item.kind {\n             ast::TraitItemKind::Const(ref ty, ref expr) => {\n                 self.process_assoc_const(\n                     trait_item.id,"}, {"sha": "6eec7158e47172a3bc2312875d0c2e6752274862", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -195,7 +195,7 @@ crate fn environment(tcx: TyCtxt<'_>, def_id: DefId) -> Environment<'_> {\n     };\n \n     let node_kind = match node {\n-        Node::TraitItem(item) => match item.node {\n+        Node::TraitItem(item) => match item.kind {\n             TraitItemKind::Method(..) => NodeKind::Fn,\n             _ => NodeKind::Other,\n         }"}, {"sha": "c69c94d6c8484efb0d29b32afc4bbd97acba2089", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -437,7 +437,7 @@ fn extract_spans_for_error_reporting<'a, 'tcx>(\n             if let Some(trait_m_hir_id) = tcx.hir().as_local_hir_id(trait_m.def_id) {\n                 let trait_m_iter = match tcx.hir()\n                                             .expect_trait_item(trait_m_hir_id)\n-                                            .node {\n+                                            .kind {\n                     TraitItemKind::Method(ref trait_m_sig, _) => {\n                         trait_m_sig.decl.inputs.iter()\n                     }\n@@ -463,7 +463,7 @@ fn extract_spans_for_error_reporting<'a, 'tcx>(\n         TypeError::Sorts(ExpectedFound { .. }) => {\n             if let Some(trait_m_hir_id) = tcx.hir().as_local_hir_id(trait_m.def_id) {\n                 let (trait_m_output, trait_m_iter) =\n-                    match tcx.hir().expect_trait_item(trait_m_hir_id).node {\n+                    match tcx.hir().expect_trait_item(trait_m_hir_id).kind {\n                         TraitItemKind::Method(ref trait_m_sig, _) => {\n                             (&trait_m_sig.decl.output, trait_m_sig.decl.inputs.iter())\n                         }\n@@ -715,7 +715,7 @@ fn compare_number_of_method_arguments<'tcx>(\n     if trait_number_args != impl_number_args {\n         let trait_m_hir_id = tcx.hir().as_local_hir_id(trait_m.def_id);\n         let trait_span = if let Some(trait_id) = trait_m_hir_id {\n-            match tcx.hir().expect_trait_item(trait_id).node {\n+            match tcx.hir().expect_trait_item(trait_id).kind {\n                 TraitItemKind::Method(ref trait_m_sig, _) => {\n                     let pos = if trait_number_args > 0 {\n                         trait_number_args - 1\n@@ -1029,7 +1029,7 @@ pub fn compare_const_impl<'tcx>(\n             let trait_c_hir_id = tcx.hir().as_local_hir_id(trait_c.def_id);\n             let trait_c_span = trait_c_hir_id.map(|trait_c_hir_id| {\n                 // Add a label to the Span containing just the type of the const\n-                match tcx.hir().expect_trait_item(trait_c_hir_id).node {\n+                match tcx.hir().expect_trait_item(trait_c_hir_id).kind {\n                     TraitItemKind::Const(ref ty, _) => ty.span,\n                     _ => bug!(\"{:?} is not a trait const\", trait_c),\n                 }"}, {"sha": "850eed12f84f6efd7b58eb6c81eb50cb3f39ea33", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -803,7 +803,7 @@ fn primary_body_of(\n             }\n         }\n         Node::TraitItem(item) => {\n-            match item.node {\n+            match item.kind {\n                 hir::TraitItemKind::Const(ref ty, Some(body)) =>\n                     Some((body, Some(ty), None, None)),\n                 hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) =>\n@@ -1520,7 +1520,7 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item) {\n \n             for item in items.iter() {\n                 let item = tcx.hir().trait_item(item.id);\n-                if let hir::TraitItemKind::Method(sig, _) = &item.node {\n+                if let hir::TraitItemKind::Method(sig, _) = &item.kind {\n                     let abi = sig.header.abi;\n                     fn_maybe_err(tcx, item.ident.span, abi);\n                 }\n@@ -4102,7 +4102,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Some((decl, ident, ident.name != sym::main))\n             }\n             Node::TraitItem(&hir::TraitItem {\n-                ident, node: hir::TraitItemKind::Method(hir::MethodSig {\n+                ident, kind: hir::TraitItemKind::Method(hir::MethodSig {\n                     ref decl, ..\n                 }, ..), ..\n             }) => Some((decl, ident, true)),\n@@ -4200,7 +4200,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ..\n                 })) |\n                 Some(Node::TraitItem(hir::TraitItem {\n-                    node: hir::TraitItemKind::Method(.., hir::TraitMethod::Provided(body_id)),\n+                    kind: hir::TraitItemKind::Method(.., hir::TraitMethod::Provided(body_id)),\n                     ..\n                 })) => {\n                     let body = hir.body(*body_id);\n@@ -4246,7 +4246,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ..\n                 })) |\n                 Some(Node::TraitItem(hir::TraitItem {\n-                    node: hir::TraitItemKind::Method(.., hir::TraitMethod::Required(idents)),\n+                    kind: hir::TraitItemKind::Method(.., hir::TraitMethod::Required(idents)),\n                     ..\n                 })) => sugg_call = idents.iter()\n                         .map(|ident| if ident.name != kw::SelfLower {"}, {"sha": "732499cae141b56afafe535922fcd2ac0b01e437", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -167,7 +167,7 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let trait_item = tcx.hir().expect_trait_item(hir_id);\n \n-    let method_sig = match trait_item.node {\n+    let method_sig = match trait_item.kind {\n         hir::TraitItemKind::Method(ref sig, _) => Some(sig),\n         _ => None\n     };"}, {"sha": "caddba9f5a80c5ee5fb418dade2f7fdc30d7c040", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -486,12 +486,12 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::HirId) {\n     let def_id = tcx.hir().local_def_id(trait_item.hir_id);\n     tcx.generics_of(def_id);\n \n-    match trait_item.node {\n+    match trait_item.kind {\n         hir::TraitItemKind::Const(..)\n         | hir::TraitItemKind::Type(_, Some(_))\n         | hir::TraitItemKind::Method(..) => {\n             tcx.type_of(def_id);\n-            if let hir::TraitItemKind::Method(..) = trait_item.node {\n+            if let hir::TraitItemKind::Method(..) = trait_item.kind {\n                 tcx.fn_sig(def_id);\n             }\n         }\n@@ -860,7 +860,7 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n     }\n \n     match node {\n-        Node::TraitItem(item) => match item.node {\n+        Node::TraitItem(item) => match item.kind {\n             hir::TraitItemKind::Method(ref sig, _) => {\n                 has_late_bound_regions(tcx, &item.generics, &sig.decl)\n             }\n@@ -1207,7 +1207,7 @@ pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<\n     let icx = ItemCtxt::new(tcx, def_id);\n \n     Some(match tcx.hir().get(hir_id) {\n-        Node::TraitItem(item) => match item.node {\n+        Node::TraitItem(item) => match item.kind {\n             TraitItemKind::Method(..) => {\n                 let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                 tcx.mk_fn_def(def_id, substs)\n@@ -1786,7 +1786,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n \n     match tcx.hir().get(hir_id) {\n         TraitItem(hir::TraitItem {\n-            node: TraitItemKind::Method(MethodSig { header, decl }, TraitMethod::Provided(_)),\n+            kind: TraitItemKind::Method(MethodSig { header, decl }, TraitMethod::Provided(_)),\n             ..\n         })\n         | ImplItem(hir::ImplItem {\n@@ -1816,7 +1816,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n         },\n \n         TraitItem(hir::TraitItem {\n-            node: TraitItemKind::Method(MethodSig { header, decl }, _),\n+            kind: TraitItemKind::Method(MethodSig { header, decl }, _),\n             ..\n         }) => {\n             AstConv::ty_of_fn(&icx, header.unsafety, header.abi, decl)\n@@ -2281,7 +2281,7 @@ fn explicit_predicates_of(\n     if let Some((self_trait_ref, trait_items)) = is_trait {\n         predicates.extend(trait_items.iter().flat_map(|trait_item_ref| {\n             let trait_item = tcx.hir().trait_item(trait_item_ref.id);\n-            let bounds = match trait_item.node {\n+            let bounds = match trait_item.kind {\n                 hir::TraitItemKind::Type(ref bounds, _) => bounds,\n                 _ => return Vec::new().into_iter()\n             };"}, {"sha": "2bd00172efb3a16fabbe5de21f2eab9f42bb9ed6", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -105,7 +105,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &hir::TraitItem) {\n-        if let hir::TraitItemKind::Method(..) = trait_item.node {\n+        if let hir::TraitItemKind::Method(..) = trait_item.kind {\n             self.visit_node_helper(trait_item.hir_id);\n         }\n     }"}, {"sha": "8145a97a020d79cdd17e00bc12b20413ca81f462", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -58,7 +58,7 @@ fn variances_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[ty::Variance] {\n             _ => unsupported()\n         },\n \n-        Node::TraitItem(item) => match item.node {\n+        Node::TraitItem(item) => match item.kind {\n             hir::TraitItemKind::Method(..) => {}\n \n             _ => unsupported()"}, {"sha": "3511a6596221dd05a3eff1e41579830993fe887e", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -168,7 +168,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &hir::TraitItem) {\n-        if let hir::TraitItemKind::Method(..) = trait_item.node {\n+        if let hir::TraitItemKind::Method(..) = trait_item.kind {\n             self.add_inferreds_for_item(trait_item.hir_id);\n         }\n     }"}, {"sha": "8479502722fb335a039cde90d3427129f2ec6a98", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -2280,7 +2280,7 @@ impl Clean<PolyTrait> for hir::PolyTraitRef {\n \n impl Clean<Item> for hir::TraitItem {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n-        let inner = match self.node {\n+        let inner = match self.kind {\n             hir::TraitItemKind::Const(ref ty, default) => {\n                 AssocConstItem(ty.clean(cx),\n                                     default.map(|e| print_const_expr(cx, e)))"}, {"sha": "f5a9c18dba1c9dba70befdc3334b6619162cb43d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -1474,7 +1474,7 @@ pub struct TraitItem {\n     pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n     pub generics: Generics,\n-    pub node: TraitItemKind,\n+    pub kind: TraitItemKind,\n     pub span: Span,\n     /// See `Item::tokens` for what this is.\n     pub tokens: Option<TokenStream>,"}, {"sha": "13ac6266fb661e12b116fe61a93da76c35c97306", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -1318,7 +1318,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                                      AstFragmentKind::TraitItems, after_derive).make_trait_items()\n         }\n \n-        match item.node {\n+        match item.kind {\n             ast::TraitItemKind::Macro(mac) => {\n                 let ast::TraitItem { attrs, span, .. } = item;\n                 self.check_attributes(&attrs);"}, {"sha": "a1278c9c7a8e9a32e8ac6564c765ebab4c1279d3", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -53,7 +53,7 @@ pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId) -> AstFragment {\n         })]),\n         AstFragmentKind::TraitItems => AstFragment::TraitItems(smallvec![ast::TraitItem {\n             id, span, ident, attrs, generics,\n-            node: ast::TraitItemKind::Macro(mac_placeholder()),\n+            kind: ast::TraitItemKind::Macro(mac_placeholder()),\n             tokens: None,\n         }]),\n         AstFragmentKind::ImplItems => AstFragment::ImplItems(smallvec![ast::ImplItem {\n@@ -261,7 +261,7 @@ impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n     }\n \n     fn flat_map_trait_item(&mut self, item: ast::TraitItem) -> SmallVec<[ast::TraitItem; 1]> {\n-        match item.node {\n+        match item.kind {\n             ast::TraitItemKind::Macro(_) => self.remove(item.id).make_trait_items(),\n             _ => noop_flat_map_trait_item(item, self),\n         }"}, {"sha": "b041c2d46a1ec3b3e6a139bba1b6134e8adb3456", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -559,7 +559,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     }\n \n     fn visit_trait_item(&mut self, ti: &'a ast::TraitItem) {\n-        match ti.node {\n+        match ti.kind {\n             ast::TraitItemKind::Method(ref sig, ref block) => {\n                 if block.is_none() {\n                     self.check_abi(sig.header.abi, ti.span);"}, {"sha": "3e2a1fa6a807704150957b02e557e01f63215081", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -921,12 +921,12 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n pub fn noop_flat_map_trait_item<T: MutVisitor>(mut item: TraitItem, vis: &mut T)\n     -> SmallVec<[TraitItem; 1]>\n {\n-    let TraitItem { id, ident, attrs, generics, node, span, tokens: _ } = &mut item;\n+    let TraitItem { id, ident, attrs, generics, kind, span, tokens: _ } = &mut item;\n     vis.visit_id(id);\n     vis.visit_ident(ident);\n     visit_attrs(attrs, vis);\n     vis.visit_generics(generics);\n-    match node {\n+    match kind {\n         TraitItemKind::Const(ty, default) => {\n             vis.visit_ty(ty);\n             visit_opt(default, |default| vis.visit_expr(default));"}, {"sha": "e96d35e1999c5686c984a25cffb9809aaeaf00bc", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -1009,7 +1009,7 @@ impl<'a> Parser<'a> {\n                          mut attrs: Vec<Attribute>) -> PResult<'a, TraitItem> {\n         let lo = self.token.span;\n         self.eat_bad_pub();\n-        let (name, node, generics) = if self.eat_keyword(kw::Type) {\n+        let (name, kind, generics) = if self.eat_keyword(kw::Type) {\n             self.parse_trait_item_assoc_ty()?\n         } else if self.is_const_item() {\n             self.expect_keyword(kw::Const)?;\n@@ -1094,7 +1094,7 @@ impl<'a> Parser<'a> {\n             ident: name,\n             attrs,\n             generics,\n-            node,\n+            kind,\n             span: lo.to(self.prev_span),\n             tokens: None,\n         })"}, {"sha": "50e45184427627d120be3aea5f37fc186365aa58", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -1550,7 +1550,7 @@ impl<'a> State<'a> {\n         self.hardbreak_if_not_bol();\n         self.maybe_print_comment(ti.span.lo());\n         self.print_outer_attributes(&ti.attrs);\n-        match ti.node {\n+        match ti.kind {\n             ast::TraitItemKind::Const(ref ty, ref default) => {\n                 self.print_associated_const(\n                     ti.ident,"}, {"sha": "54566b3e038ba2d27b7b93f0f68d2dd51ff3d834", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4573c9c1e8118be5ffc662c6a64db329db0a245/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=d4573c9c1e8118be5ffc662c6a64db329db0a245", "patch": "@@ -589,7 +589,7 @@ pub fn walk_trait_item<'a, V: Visitor<'a>>(visitor: &mut V, trait_item: &'a Trai\n     visitor.visit_ident(trait_item.ident);\n     walk_list!(visitor, visit_attribute, &trait_item.attrs);\n     visitor.visit_generics(&trait_item.generics);\n-    match trait_item.node {\n+    match trait_item.kind {\n         TraitItemKind::Const(ref ty, ref default) => {\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, default);"}]}