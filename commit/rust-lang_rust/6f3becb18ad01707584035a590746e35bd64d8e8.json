{"sha": "6f3becb18ad01707584035a590746e35bd64d8e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmM2JlY2IxOGFkMDE3MDc1ODQwMzVhNTkwNzQ2ZTM1YmQ2NGQ4ZTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-26T14:50:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-26T14:50:36Z"}, "message": "Auto merge of #30061 - tshepang:doc-time, r=brson", "tree": {"sha": "3de177ce9b7571a0604d6b7d88dd1bfcbe12aaf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3de177ce9b7571a0604d6b7d88dd1bfcbe12aaf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f3becb18ad01707584035a590746e35bd64d8e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f3becb18ad01707584035a590746e35bd64d8e8", "html_url": "https://github.com/rust-lang/rust/commit/6f3becb18ad01707584035a590746e35bd64d8e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f3becb18ad01707584035a590746e35bd64d8e8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da0444d5d49bca80a75df7dbca502909558dfee5", "url": "https://api.github.com/repos/rust-lang/rust/commits/da0444d5d49bca80a75df7dbca502909558dfee5", "html_url": "https://github.com/rust-lang/rust/commit/da0444d5d49bca80a75df7dbca502909558dfee5"}, {"sha": "cc815d2de087c85aa416693edcba2006774383ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc815d2de087c85aa416693edcba2006774383ed", "html_url": "https://github.com/rust-lang/rust/commit/cc815d2de087c85aa416693edcba2006774383ed"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "261f3e266d7d1984dbc16d3249f30580b28bf094", "filename": "src/libstd/time/mod.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6f3becb18ad01707584035a590746e35bd64d8e8/src%2Flibstd%2Ftime%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3becb18ad01707584035a590746e35bd64d8e8/src%2Flibstd%2Ftime%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fmod.rs?ref=6f3becb18ad01707584035a590746e35bd64d8e8", "patch": "@@ -22,22 +22,21 @@ pub use self::duration::Duration;\n \n mod duration;\n \n-/// A measurement of a monotonically increasing clock which is suitable for\n-/// measuring the amount of time that an operation takes.\n+/// A measurement of a monotonically increasing clock.\n ///\n-/// Instants are guaranteed always be greater than any previously measured\n+/// Instants are always guaranteed to be greater than any previously measured\n /// instant when created, and are often useful for tasks such as measuring\n /// benchmarks or timing how long an operation takes.\n ///\n /// Note, however, that instants are not guaranteed to be **steady**.  In other\n-/// words each tick of the underlying clock may not be the same length (e.g.\n+/// words, each tick of the underlying clock may not be the same length (e.g.\n /// some seconds may be longer than others). An instant may jump forwards or\n /// experience time dilation (slow down or speed up), but it will never go\n /// backwards.\n ///\n /// Instants are opaque types that can only be compared to one another. There is\n-/// no method to get \"the number of seconds\" from an instant but instead it only\n-/// allow learning the duration between two instants (or comparing two\n+/// no method to get \"the number of seconds\" from an instant. Instead, it only\n+/// allows measuring the duration between two instants (or comparing two\n /// instants).\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\n #[unstable(feature = \"time2\", reason = \"recently added\", issue = \"29866\")]\n@@ -60,7 +59,7 @@ pub struct Instant(time::Instant);\n /// Although a `SystemTime` cannot be directly inspected, the `UNIX_EPOCH`\n /// constant is provided in this module as an anchor in time to learn\n /// information about a `SystemTime`. By calculating the duration from this\n-/// fixed point in time a `SystemTime` can be converted to a human-readable time\n+/// fixed point in time, a `SystemTime` can be converted to a human-readable time,\n /// or perhaps some other string representation.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\n #[unstable(feature = \"time2\", reason = \"recently added\", issue = \"29866\")]\n@@ -95,8 +94,9 @@ impl Instant {\n     ///\n     /// # Panics\n     ///\n-    /// This function may panic if the current time is earlier than this instant\n-    /// which can happen if an `Instant` is produced synthetically.\n+    /// This function may panic if the current time is earlier than this\n+    /// instant, which is something that can happen if an `Instant` is\n+    /// produced synthetically.\n     pub fn elapsed(&self) -> Duration {\n         Instant::now().duration_from_earlier(*self)\n     }\n@@ -140,7 +140,7 @@ impl SystemTime {\n     /// guaranteed to always be before later measurements (due to anomalies such\n     /// as the system clock being adjusted either forwards or backwards).\n     ///\n-    /// If successful, `Ok(duration)` is returned where the duration represents\n+    /// If successful, `Ok(Duration)` is returned where the duration represents\n     /// the amount of time elapsed from the specified measurement to this one.\n     ///\n     /// Returns an `Err` if `earlier` is later than `self`, and the error\n@@ -207,9 +207,8 @@ impl SystemTimeError {\n     /// second system time was from the first.\n     ///\n     /// A `SystemTimeError` is returned from the `duration_from_earlier`\n-    /// operation whenever the second duration, `earlier`, actually represents a\n-    /// point later in time than the `self` of the method call. This function\n-    /// will extract and return the amount of time later `earlier` actually is.\n+    /// operation whenever the second system time represents a point later\n+    /// in time than the `self` of the method call.\n     pub fn duration(&self) -> Duration {\n         self.0\n     }"}]}