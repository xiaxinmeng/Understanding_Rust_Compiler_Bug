{"sha": "8b0298ce095b6dd635f7ed35dc97f1874157040b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMDI5OGNlMDk1YjZkZDYzNWY3ZWQzNWRjOTdmMTg3NDE1NzA0MGI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-27T07:01:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-27T07:01:31Z"}, "message": "scopes", "tree": {"sha": "3d6f941f7612ba1800c1e2f9fbb0a94761999be7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d6f941f7612ba1800c1e2f9fbb0a94761999be7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b0298ce095b6dd635f7ed35dc97f1874157040b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b0298ce095b6dd635f7ed35dc97f1874157040b", "html_url": "https://github.com/rust-lang/rust/commit/8b0298ce095b6dd635f7ed35dc97f1874157040b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b0298ce095b6dd635f7ed35dc97f1874157040b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b69c7df194d5f9081698745ed20414d7c7c2f1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b69c7df194d5f9081698745ed20414d7c7c2f1c", "html_url": "https://github.com/rust-lang/rust/commit/9b69c7df194d5f9081698745ed20414d7c7c2f1c"}], "stats": {"total": 230, "additions": 155, "deletions": 75}, "files": [{"sha": "6335dba1705e4d2baeffc0d4dc6e9533f446b8c4", "filename": "crates/libeditor/src/completion.rs", "status": "modified", "additions": 109, "deletions": 69, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/8b0298ce095b6dd635f7ed35dc97f1874157040b/crates%2Flibeditor%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0298ce095b6dd635f7ed35dc97f1874157040b/crates%2Flibeditor%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fcompletion.rs?ref=8b0298ce095b6dd635f7ed35dc97f1874157040b", "patch": "@@ -7,6 +7,7 @@ use libsyntax2::{\n         ancestors,\n         visit::{visitor_ctx, VisitorCtx},\n         walk::preorder,\n+        generate,\n     },\n };\n \n@@ -27,86 +28,125 @@ pub fn scope_completion(file: &File, offset: TextUnit) -> Option<Vec<CompletionI\n         file.incremental_reparse(&edit)?\n     };\n     let name_ref = find_node_at_offset::<ast::NameRef>(file.syntax(), offset)?;\n-    Some(complete(name_ref))\n+    let fn_def = ancestors(name_ref.syntax()).filter_map(ast::FnDef::cast).next()?;\n+    let scopes = compute_scopes(fn_def);\n+    Some(complete(name_ref, &scopes))\n }\n \n-fn complete(name_ref: ast::NameRef) -> Vec<CompletionItem> {\n-    let mut res = Vec::new();\n-    for node in ancestors(name_ref.syntax()) {\n-        process_scope(node, &mut res);\n-    }\n-    res\n-}\n-\n-fn process_scope(node: SyntaxNodeRef, sink: &mut Vec<CompletionItem>) {\n-    let _ = visitor_ctx(sink)\n-        .visit::<ast::Block, _>(|block, sink| {\n-            block.let_stmts()\n-                .filter_map(|it| it.pat())\n-                .for_each(move |it| process_pat(it, sink))\n-        })\n-        .visit::<ast::FnDef, _>(|fn_def, sink| {\n-            fn_def.param_list().into_iter()\n-                .flat_map(|it| it.params())\n-                .filter_map(|it| it.pat())\n-                .for_each(move |it| process_pat(it, sink))\n+fn complete(name_ref: ast::NameRef, scopes: &FnScopes) -> Vec<CompletionItem> {\n+    scopes.scope_chain(name_ref.syntax())\n+        .flat_map(|scope| scopes.entries(scope).iter())\n+        .map(|entry| CompletionItem {\n+            name: entry.name().to_string()\n         })\n-        .accept(node);\n+        .collect()\n+}\n \n-    fn process_pat(pat: ast::Pat, sink: &mut Vec<CompletionItem>) {\n-        let items = preorder(pat.syntax())\n-            .filter_map(ast::BindPat::cast)\n-            .filter_map(ast::BindPat::name)\n-            .map(|name| CompletionItem { name: name.text().to_string() });\n-        sink.extend(items);\n+fn compute_scopes(fn_def: ast::FnDef) -> FnScopes {\n+    let mut scopes = FnScopes::new();\n+    let root = scopes.root_scope();\n+    fn_def.param_list().into_iter()\n+        .flat_map(|it| it.params())\n+        .filter_map(|it| it.pat())\n+        .for_each(|it| scopes.add_bindings(root, it));\n+\n+    let mut scope = root;\n+    if let Some(body) = fn_def.body() {\n+        for child in body.syntax().children() {\n+            let _ = visitor_ctx((&mut scopes, &mut scope))\n+                .visit::<ast::LetStmt, _>(|stmt, (scopes, scope)| {\n+                    *scope = scopes.new_scope(*scope);\n+                    if let Some(pat) = stmt.pat() {\n+                        scopes.add_bindings(*scope, pat);\n+                    }\n+                    if let Some(expr) = stmt.initializer() {\n+                        scopes.set_scope(expr.syntax(), *scope)\n+                    }\n+                })\n+                .visit::<ast::ExprStmt, _>(|expr, (scopes, scope)| {\n+                    scopes.set_scope(expr.syntax(), *scope)\n+                })\n+                .visit::<ast::Expr, _>(|expr, (scopes, scope)| {\n+                    scopes.set_scope(expr.syntax(), *scope)\n+                })\n+                .accept(child);\n+        }\n     }\n+    scopes\n }\n \n-// fn compute_scopes(fn_def: ast::FnDef) -> FnScopes {\n-//     let mut scopes = FnScopes::new();\n-// }\n-\n-// type ScopeId = usize;\n+type ScopeId = usize;\n \n-// struct FnScopes {\n-//     scopes: Vec<ScopeData>,\n-//     scope_for_expr: HashMap<SyntaxNode, ScopeId>,\n-// }\n-\n-// impl FnScopes {\n-//     fn new() -> FnScopes {\n-//         FnScopes {\n-//             scopes: vec![],\n-//             scope_for_expr: HashMap::new(),\n-//         }\n-//     }\n+struct FnScopes {\n+    scopes: Vec<ScopeData>,\n+    scope_for: HashMap<SyntaxNode, ScopeId>,\n+}\n \n-//     fn new_scope(&mut Self) -> ScopeId {\n-//         let res = self.scopes.len();\n-//         self.scopes.push(ScopeData { parent: None, entries: vec![] })\n-//     }\n+impl FnScopes {\n+    fn new() -> FnScopes {\n+        FnScopes {\n+            scopes: vec![],\n+            scope_for: HashMap::new(),\n+        }\n+    }\n+    fn root_scope(&mut self) -> ScopeId {\n+        let res = self.scopes.len();\n+        self.scopes.push(ScopeData { parent: None, entries: vec![] });\n+        res\n+    }\n+    fn new_scope(&mut self, parent: ScopeId) -> ScopeId {\n+        let res = self.scopes.len();\n+        self.scopes.push(ScopeData { parent: Some(parent), entries: vec![] });\n+        res\n+    }\n+    fn add_bindings(&mut self, scope: ScopeId, pat: ast::Pat) {\n+        let entries = preorder(pat.syntax())\n+            .filter_map(ast::BindPat::cast)\n+            .filter_map(ScopeEntry::new);\n+        self.scopes[scope].entries.extend(entries);\n+    }\n+    fn set_scope(&mut self, node: SyntaxNodeRef, scope: ScopeId) {\n+        self.scope_for.insert(node.owned(), scope);\n+    }\n+    fn entries(&self, scope: ScopeId) -> &[ScopeEntry] {\n+        &self.scopes[scope].entries\n+    }\n+    fn scope_for(&self, node: SyntaxNodeRef) -> Option<ScopeId> {\n+        ancestors(node)\n+            .filter_map(|it| self.scope_for.get(&it.owned()).map(|&scope| scope))\n+            .next()\n+    }\n+    fn scope_chain<'a>(&'a self, node: SyntaxNodeRef) -> impl Iterator<Item=ScopeId> + 'a {\n+        generate(self.scope_for(node), move |&scope| self.scopes[scope].parent)\n+    }\n+}\n \n-//     fn set_parent\n-// }\n+struct ScopeData {\n+    parent: Option<ScopeId>,\n+    entries: Vec<ScopeEntry>\n+}\n \n-// struct ScopeData {\n-//     parent: Option<ScopeId>,\n-//     entries: Vec<ScopeEntry>\n-// }\n+struct ScopeEntry {\n+    syntax: SyntaxNode\n+}\n \n-// struct ScopeEntry {\n-//     syntax: SyntaxNode\n-// }\n+impl ScopeEntry {\n+    fn new(pat: ast::BindPat) -> Option<ScopeEntry> {\n+        if pat.name().is_some() {\n+            Some(ScopeEntry { syntax: pat.syntax().owned() })\n+        } else {\n+            None\n+        }\n+    }\n \n-// impl ScopeEntry {\n-//     fn name(&self) -> SmolStr {\n-//         self.ast().name()\n-//             .unwrap()\n-//             .text()\n-//     }\n+    fn name(&self) -> SmolStr {\n+        self.ast().name()\n+            .unwrap()\n+            .text()\n+    }\n \n-//     fn ast(&self) -> ast::BindPat {\n-//         ast::BindPat::cast(self.syntax.borrowed())\n-//             .unwrap()\n-//     }\n-// }\n+    fn ast(&self) -> ast::BindPat {\n+        ast::BindPat::cast(self.syntax.borrowed())\n+            .unwrap()\n+    }\n+}"}, {"sha": "7979bfffe14ddeb3383502acdb021c9c79926e4b", "filename": "crates/libeditor/tests/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b0298ce095b6dd635f7ed35dc97f1874157040b/crates%2Flibeditor%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0298ce095b6dd635f7ed35dc97f1874157040b/crates%2Flibeditor%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Ftests%2Ftest.rs?ref=8b0298ce095b6dd635f7ed35dc97f1874157040b", "patch": "@@ -268,7 +268,8 @@ fn test_completion() {\n     do_check(r\"\n fn quux(x: i32) {\n     let y = 92;\n-    1 + <|>\n+    1 + <|>;\n+    let z = ();\n }\n \", r#\"[CompletionItem { name: \"y\" },\n        CompletionItem { name: \"x\" }]\"#);"}, {"sha": "7287f5bb23369c3afba2a0f92886aaa663b6145a", "filename": "crates/libsyntax2/src/algo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b0298ce095b6dd635f7ed35dc97f1874157040b/crates%2Flibsyntax2%2Fsrc%2Falgo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0298ce095b6dd635f7ed35dc97f1874157040b/crates%2Flibsyntax2%2Fsrc%2Falgo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Falgo%2Fmod.rs?ref=8b0298ce095b6dd635f7ed35dc97f1874157040b", "patch": "@@ -119,7 +119,7 @@ fn common_ancestor<'a>(n1: SyntaxNodeRef<'a>, n2: SyntaxNodeRef<'a>) -> SyntaxNo\n     panic!(\"Can't find common ancestor of {:?} and {:?}\", n1, n2)\n }\n \n-fn generate<T>(seed: Option<T>, step: impl Fn(&T) -> Option<T>) -> impl Iterator<Item=T> {\n+pub fn generate<T>(seed: Option<T>, step: impl Fn(&T) -> Option<T>) -> impl Iterator<Item=T> {\n     ::itertools::unfold(seed, move |slot| {\n         slot.take().map(|curr| {\n             *slot = step(&curr);"}, {"sha": "b937fe5a276bc669eee27e4c3e959f453f002da3", "filename": "crates/libsyntax2/src/ast/generated.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8b0298ce095b6dd635f7ed35dc97f1874157040b/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0298ce095b6dd635f7ed35dc97f1874157040b/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs?ref=8b0298ce095b6dd635f7ed35dc97f1874157040b", "patch": "@@ -383,6 +383,24 @@ impl<'a> AstNode<'a> for Expr<'a> {\n \n impl<'a> Expr<'a> {}\n \n+// ExprStmt\n+#[derive(Debug, Clone, Copy)]\n+pub struct ExprStmt<'a> {\n+    syntax: SyntaxNodeRef<'a>,\n+}\n+\n+impl<'a> AstNode<'a> for ExprStmt<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            EXPR_STMT => Some(ExprStmt { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n+}\n+\n+impl<'a> ExprStmt<'a> {}\n+\n // FieldExpr\n #[derive(Debug, Clone, Copy)]\n pub struct FieldExpr<'a> {\n@@ -442,6 +460,10 @@ impl<'a> FnDef<'a> {\n     pub fn param_list(self) -> Option<ParamList<'a>> {\n         super::child_opt(self)\n     }\n+\n+    pub fn body(self) -> Option<Block<'a>> {\n+        super::child_opt(self)\n+    }\n }\n \n // FnPointerType\n@@ -626,6 +648,10 @@ impl<'a> LetStmt<'a> {\n     pub fn pat(self) -> Option<Pat<'a>> {\n         super::child_opt(self)\n     }\n+\n+    pub fn initializer(self) -> Option<Expr<'a>> {\n+        super::child_opt(self)\n+    }\n }\n \n // LoopExpr"}, {"sha": "aa2742b3e8f8f84f35801c8bec3fa8a756e99c0c", "filename": "crates/libsyntax2/src/grammar.ron", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b0298ce095b6dd635f7ed35dc97f1874157040b/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/8b0298ce095b6dd635f7ed35dc97f1874157040b/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron?ref=8b0298ce095b6dd635f7ed35dc97f1874157040b", "patch": "@@ -248,7 +248,8 @@ Grammar(\n                 \"AttrsOwner\",\n             ],\n             options: [\n-                [\"param_list\", \"ParamList\"]\n+                [\"param_list\", \"ParamList\"],\n+                [\"body\", \"Block\"],\n             ],\n         ),\n         \"StructDef\": (\n@@ -431,7 +432,11 @@ Grammar(\n         \"TypeParamList\": ( collections: [ [\"type_params\", \"TypeParam\" ] ]),\n         \"TypeParam\": ( traits: [\"NameOwner\"] ),\n         \"WhereClause\": (),\n-        \"LetStmt\": ( options: [ [\"pat\", \"Pat\"] ]),\n+        \"ExprStmt\": (),\n+        \"LetStmt\": ( options: [\n+            [\"pat\", \"Pat\"],\n+            [\"initializer\", \"Expr\"],\n+        ]),\n         \"Block\": (\n             collections: [\n                 [\"let_stmts\", \"LetStmt\"],"}, {"sha": "b94c794fe1aed67b678bfac384deee653fbb924a", "filename": "crates/libsyntax2/src/yellow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b0298ce095b6dd635f7ed35dc97f1874157040b/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0298ce095b6dd635f7ed35dc97f1874157040b/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fmod.rs?ref=8b0298ce095b6dd635f7ed35dc97f1874157040b", "patch": "@@ -66,7 +66,7 @@ impl SyntaxRoot {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n+#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]\n pub(crate) struct RedPtr(ptr::NonNull<RedNode>);\n \n unsafe impl Send for RedPtr {}"}, {"sha": "75b6cb7dc3ccac28f3925ab0a3d059d96d740756", "filename": "crates/libsyntax2/src/yellow/syntax.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b0298ce095b6dd635f7ed35dc97f1874157040b/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0298ce095b6dd635f7ed35dc97f1874157040b/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fsyntax.rs?ref=8b0298ce095b6dd635f7ed35dc97f1874157040b", "patch": "@@ -1,4 +1,7 @@\n-use std::{fmt, sync::Arc};\n+use std::{\n+    fmt, sync::Arc,\n+    hash::{Hasher, Hash},\n+};\n \n use smol_str::SmolStr;\n \n@@ -27,6 +30,11 @@ impl<R1: TreeRoot, R2: TreeRoot> PartialEq<SyntaxNode<R1>> for SyntaxNode<R2> {\n }\n \n impl<R: TreeRoot> Eq for SyntaxNode<R> {}\n+impl<R: TreeRoot> Hash for SyntaxNode<R> {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        self.red.hash(state)\n+    }\n+}\n \n pub type SyntaxNodeRef<'a> = SyntaxNode<RefRoot<'a>>;\n "}]}