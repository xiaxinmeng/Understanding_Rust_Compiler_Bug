{"sha": "1974b6b68dc168cac046039ce404c8311c4d8765", "node_id": "C_kwDOAAsO6NoAKDE5NzRiNmI2OGRjMTY4Y2FjMDQ2MDM5Y2U0MDRjODMxMWM0ZDg3NjU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-01T12:56:24Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-27T18:58:44Z"}, "message": "Introduce GeneratorWitnessMIR.", "tree": {"sha": "2e53cb474e5d19368b5d90ce8e1afc30c4c188c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e53cb474e5d19368b5d90ce8e1afc30c4c188c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1974b6b68dc168cac046039ce404c8311c4d8765", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1974b6b68dc168cac046039ce404c8311c4d8765", "html_url": "https://github.com/rust-lang/rust/commit/1974b6b68dc168cac046039ce404c8311c4d8765", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1974b6b68dc168cac046039ce404c8311c4d8765/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03618d6afddd851bfa0bec5dc038a5252c297478", "url": "https://api.github.com/repos/rust-lang/rust/commits/03618d6afddd851bfa0bec5dc038a5252c297478", "html_url": "https://github.com/rust-lang/rust/commit/03618d6afddd851bfa0bec5dc038a5252c297478"}], "stats": {"total": 337, "additions": 265, "deletions": 72}, "files": [{"sha": "b0e007ce0097bd4c966edc23d1ce16017a0885c6", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -414,6 +414,7 @@ fn push_debuginfo_type_name<'tcx>(\n         | ty::Placeholder(..)\n         | ty::Alias(..)\n         | ty::Bound(..)\n+        | ty::GeneratorWitnessMIR(..)\n         | ty::GeneratorWitness(..) => {\n             bug!(\n                 \"debuginfo: Trying to create type name for \\"}, {"sha": "c52886b77e64bc77388757aa9c520a6b96ea43e4", "filename": "compiler/rustc_const_eval/src/const_eval/valtrees.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -151,7 +151,7 @@ pub(crate) fn const_to_valtree_inner<'tcx>(\n         // FIXME(oli-obk): we can probably encode closures just like structs\n         | ty::Closure(..)\n         | ty::Generator(..)\n-        | ty::GeneratorWitness(..) => Err(ValTreeCreationError::NonSupportedType),\n+        | ty::GeneratorWitness(..) |ty::GeneratorWitnessMIR(..)=> Err(ValTreeCreationError::NonSupportedType),\n     }\n }\n \n@@ -314,6 +314,7 @@ pub fn valtree_to_const_value<'tcx>(\n         | ty::Closure(..)\n         | ty::Generator(..)\n         | ty::GeneratorWitness(..)\n+        | ty::GeneratorWitnessMIR(..)\n         | ty::FnPtr(_)\n         | ty::RawPtr(_)\n         | ty::Str"}, {"sha": "907f014dfb5180f90b48e2a2403c9d6b38dd699e", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -101,6 +101,7 @@ pub(crate) fn eval_nullary_intrinsic<'tcx>(\n             | ty::Closure(_, _)\n             | ty::Generator(_, _, _)\n             | ty::GeneratorWitness(_)\n+            | ty::GeneratorWitnessMIR(_, _)\n             | ty::Never\n             | ty::Tuple(_)\n             | ty::Error(_) => ConstValue::from_machine_usize(0u64, &tcx),"}, {"sha": "aa539516d5e503ee328cb9734b7b55ff034c4d74", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -602,6 +602,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n             | ty::Bound(..)\n             | ty::Param(..)\n             | ty::Alias(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::GeneratorWitness(..) => bug!(\"Encountered invalid type {:?}\", ty),\n         }\n     }"}, {"sha": "4e80a28518668ef10f9f77971f281fb069abd557", "filename": "compiler/rustc_const_eval/src/util/type_name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -64,6 +64,7 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n             ty::Foreign(def_id) => self.print_def_path(def_id, &[]),\n \n             ty::GeneratorWitness(_) => bug!(\"type_name: unexpected `GeneratorWitness`\"),\n+            ty::GeneratorWitnessMIR(..) => bug!(\"type_name: unexpected `GeneratorWitnessMIR`\"),\n         }\n     }\n "}, {"sha": "c1b0237b2d1f13813c9ccd195d60441e532b4ea2", "filename": "compiler/rustc_hir_analysis/src/coherence/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -240,6 +240,7 @@ impl<'tcx> InherentCollect<'tcx> {\n             | ty::Closure(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Bound(..)\n             | ty::Placeholder(_)\n             | ty::Infer(_) => {"}, {"sha": "a1872822d365a6d9a34ddb8defbabbc4c93cce22", "filename": "compiler/rustc_hir_analysis/src/variance/constraints.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -295,12 +295,12 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 // types, where we use Error as the Self type\n             }\n \n-            ty::Placeholder(..) | ty::GeneratorWitness(..) | ty::Bound(..) | ty::Infer(..) => {\n-                bug!(\n-                    \"unexpected type encountered in \\\n-                      variance inference: {}\",\n-                    ty\n-                );\n+            ty::Placeholder(..)\n+            | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n+            | ty::Bound(..)\n+            | ty::Infer(..) => {\n+                bug!(\"unexpected type encountered in variance inference: {}\", ty);\n             }\n         }\n     }"}, {"sha": "8e21c084841d0d1707edea19be3f534c4fb7fd36", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -130,6 +130,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             | ty::Float(_)\n             | ty::Array(..)\n             | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::RawPtr(_)\n             | ty::Ref(..)\n             | ty::FnDef(..)"}, {"sha": "87c6dfad5fa2bd01b79578277f8f8c329af1f567", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -435,6 +435,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n             ty::Closure(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Bool\n             | ty::Char\n             | ty::Int(..)"}, {"sha": "83d71edc2abd927a640819ce5a71e28b4b8409a4", "filename": "compiler/rustc_infer/src/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -209,6 +209,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n             | ty::Foreign(..)\n             | ty::Param(..)\n             | ty::Closure(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::GeneratorWitness(..) => t.super_fold_with(self),\n \n             ty::Placeholder(..) | ty::Bound(..) => bug!(\"unexpected type {:?}\", t),"}, {"sha": "e3d9566917125546c49c5383572fe27625861895", "filename": "compiler/rustc_infer/src/infer/outlives/components.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -112,7 +112,7 @@ fn compute_components<'tcx>(\n             }\n \n             // All regions are bound inside a witness\n-            ty::GeneratorWitness(..) => (),\n+            ty::GeneratorWitness(..) | ty::GeneratorWitnessMIR(..) => (),\n \n             // OutlivesTypeParameterEnv -- the actual checking that `X:'a`\n             // is implied by the environment is done in regionck."}, {"sha": "c32aeaa87223617dffee4ffbf8c7177fc48bddc4", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -1107,6 +1107,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             | ty::Closure(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Placeholder(..)\n             | ty::FnDef(..) => bug!(\"unexpected type in foreign function: {:?}\", ty),\n         }"}, {"sha": "c680eeb1fdaf088ccb4888d9d165e0fe02033561", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -1306,6 +1306,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     Placeholder,\n                     Generator,\n                     GeneratorWitness,\n+                    GeneratorWitnessMIR,\n                     Dynamic,\n                     Closure,\n                     Tuple,\n@@ -1815,6 +1816,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_mut_ref(self.lifetimes.re_erased, context_ty)\n     }\n \n+    #[inline]\n+    pub fn mk_generator_witness_mir(self, id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {\n+        self.mk_ty(GeneratorWitnessMIR(id, substs))\n+    }\n+\n     #[inline]\n     pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {\n         self.mk_ty_infer(TyVar(v))"}, {"sha": "d83fc95ac4eeb04995110044354443608befb283", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -325,7 +325,8 @@ impl<'tcx> Ty<'tcx> {\n             ty::Dynamic(..) => \"trait object\".into(),\n             ty::Closure(..) => \"closure\".into(),\n             ty::Generator(def_id, ..) => tcx.generator_kind(def_id).unwrap().descr().into(),\n-            ty::GeneratorWitness(..) => \"generator witness\".into(),\n+            ty::GeneratorWitness(..) |\n+            ty::GeneratorWitnessMIR(..) => \"generator witness\".into(),\n             ty::Tuple(..) => \"tuple\".into(),\n             ty::Infer(ty::TyVar(_)) => \"inferred type\".into(),\n             ty::Infer(ty::IntVar(_)) => \"integer\".into(),\n@@ -373,7 +374,7 @@ impl<'tcx> Ty<'tcx> {\n             ty::Dynamic(..) => \"trait object\".into(),\n             ty::Closure(..) => \"closure\".into(),\n             ty::Generator(def_id, ..) => tcx.generator_kind(def_id).unwrap().descr().into(),\n-            ty::GeneratorWitness(..) => \"generator witness\".into(),\n+            ty::GeneratorWitness(..) | ty::GeneratorWitnessMIR(..) => \"generator witness\".into(),\n             ty::Tuple(..) => \"tuple\".into(),\n             ty::Placeholder(..) => \"higher-ranked type\".into(),\n             ty::Bound(..) => \"bound type variable\".into(),"}, {"sha": "9afa37e9ef3ee137467dcaf2c7d1944b090bead5", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -32,6 +32,7 @@ pub enum SimplifiedType {\n     ClosureSimplifiedType(DefId),\n     GeneratorSimplifiedType(DefId),\n     GeneratorWitnessSimplifiedType(usize),\n+    GeneratorWitnessMIRSimplifiedType(DefId),\n     FunctionSimplifiedType(usize),\n     PlaceholderSimplifiedType,\n }\n@@ -108,6 +109,7 @@ pub fn simplify_type<'tcx>(\n         ty::FnDef(def_id, _) | ty::Closure(def_id, _) => Some(ClosureSimplifiedType(def_id)),\n         ty::Generator(def_id, _, _) => Some(GeneratorSimplifiedType(def_id)),\n         ty::GeneratorWitness(tys) => Some(GeneratorWitnessSimplifiedType(tys.skip_binder().len())),\n+        ty::GeneratorWitnessMIR(def_id, _) => Some(GeneratorWitnessMIRSimplifiedType(def_id)),\n         ty::Never => Some(NeverSimplifiedType),\n         ty::Tuple(tys) => Some(TupleSimplifiedType(tys.len())),\n         ty::FnPtr(f) => Some(FunctionSimplifiedType(f.skip_binder().inputs().len())),\n@@ -139,7 +141,8 @@ impl SimplifiedType {\n             | ForeignSimplifiedType(d)\n             | TraitSimplifiedType(d)\n             | ClosureSimplifiedType(d)\n-            | GeneratorSimplifiedType(d) => Some(d),\n+            | GeneratorSimplifiedType(d)\n+            | GeneratorWitnessMIRSimplifiedType(d) => Some(d),\n             _ => None,\n         }\n     }\n@@ -208,6 +211,7 @@ impl DeepRejectCtxt {\n             | ty::Closure(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Placeholder(..)\n             | ty::Bound(..)\n             | ty::Infer(_) => bug!(\"unexpected impl_ty: {impl_ty}\"),\n@@ -306,7 +310,7 @@ impl DeepRejectCtxt {\n \n             ty::Error(_) => true,\n \n-            ty::GeneratorWitness(..) | ty::Bound(..) => {\n+            ty::GeneratorWitness(..) | ty::GeneratorWitnessMIR(..) | ty::Bound(..) => {\n                 bug!(\"unexpected obligation type: {:?}\", obligation_ty)\n             }\n         }"}, {"sha": "dc6f5851b7d883ad6a2fd843615d23446f06a87b", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -125,6 +125,16 @@ impl FlagComputation {\n                 self.bound_computation(ts, |flags, ts| flags.add_tys(ts));\n             }\n \n+            &ty::GeneratorWitnessMIR(_, ref substs) => {\n+                let should_remove_further_specializable =\n+                    !self.flags.contains(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n+                self.add_substs(substs);\n+                if should_remove_further_specializable {\n+                    self.flags -= TypeFlags::STILL_FURTHER_SPECIALIZABLE;\n+                }\n+                self.add_flags(TypeFlags::HAS_TY_GENERATOR);\n+            }\n+\n             &ty::Closure(_, substs) => {\n                 let substs = substs.as_closure();\n                 let should_remove_further_specializable ="}, {"sha": "cdcd6281f209bb4d25761ebb9e0a6cd9d1fac8f3", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -645,6 +645,7 @@ where\n                 | ty::Never\n                 | ty::FnDef(..)\n                 | ty::GeneratorWitness(..)\n+                | ty::GeneratorWitnessMIR(..)\n                 | ty::Foreign(..)\n                 | ty::Dynamic(_, _, ty::Dyn) => {\n                     bug!(\"TyAndLayout::field({:?}): not applicable\", this)"}, {"sha": "7ff58f02623dc1aa399f0c8cda4844a62f51d6b2", "filename": "compiler/rustc_middle/src/ty/opaque_types.rs", "status": "modified", "additions": 49, "deletions": 46, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -3,6 +3,7 @@ use crate::ty::fold::{TypeFolder, TypeSuperFoldable};\n use crate::ty::subst::{GenericArg, GenericArgKind};\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_span::def_id::DefId;\n use rustc_span::Span;\n \n /// Converts generic params of a TypeFoldable from one\n@@ -47,6 +48,47 @@ impl<'tcx> ReverseMapper<'tcx> {\n         assert!(!self.do_not_error);\n         kind.fold_with(self)\n     }\n+\n+    fn fold_closure_substs(\n+        &mut self,\n+        def_id: DefId,\n+        substs: ty::SubstsRef<'tcx>,\n+    ) -> ty::SubstsRef<'tcx> {\n+        // I am a horrible monster and I pray for death. When\n+        // we encounter a closure here, it is always a closure\n+        // from within the function that we are currently\n+        // type-checking -- one that is now being encapsulated\n+        // in an opaque type. Ideally, we would\n+        // go through the types/lifetimes that it references\n+        // and treat them just like we would any other type,\n+        // which means we would error out if we find any\n+        // reference to a type/region that is not in the\n+        // \"reverse map\".\n+        //\n+        // **However,** in the case of closures, there is a\n+        // somewhat subtle (read: hacky) consideration. The\n+        // problem is that our closure types currently include\n+        // all the lifetime parameters declared on the\n+        // enclosing function, even if they are unused by the\n+        // closure itself. We can't readily filter them out,\n+        // so here we replace those values with `'empty`. This\n+        // can't really make a difference to the rest of the\n+        // compiler; those regions are ignored for the\n+        // outlives relation, and hence don't affect trait\n+        // selection or auto traits, and they are erased\n+        // during codegen.\n+\n+        let generics = self.tcx.generics_of(def_id);\n+        self.tcx.mk_substs(substs.iter().enumerate().map(|(index, kind)| {\n+            if index < generics.parent_count {\n+                // Accommodate missing regions in the parent kinds...\n+                self.fold_kind_no_missing_regions_error(kind)\n+            } else {\n+                // ...but not elsewhere.\n+                self.fold_kind_normally(kind)\n+            }\n+        }))\n+    }\n }\n \n impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n@@ -104,59 +146,20 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         match *ty.kind() {\n             ty::Closure(def_id, substs) => {\n-                // I am a horrible monster and I pray for death. When\n-                // we encounter a closure here, it is always a closure\n-                // from within the function that we are currently\n-                // type-checking -- one that is now being encapsulated\n-                // in an opaque type. Ideally, we would\n-                // go through the types/lifetimes that it references\n-                // and treat them just like we would any other type,\n-                // which means we would error out if we find any\n-                // reference to a type/region that is not in the\n-                // \"reverse map\".\n-                //\n-                // **However,** in the case of closures, there is a\n-                // somewhat subtle (read: hacky) consideration. The\n-                // problem is that our closure types currently include\n-                // all the lifetime parameters declared on the\n-                // enclosing function, even if they are unused by the\n-                // closure itself. We can't readily filter them out,\n-                // so here we replace those values with `'empty`. This\n-                // can't really make a difference to the rest of the\n-                // compiler; those regions are ignored for the\n-                // outlives relation, and hence don't affect trait\n-                // selection or auto traits, and they are erased\n-                // during codegen.\n-\n-                let generics = self.tcx.generics_of(def_id);\n-                let substs = self.tcx.mk_substs(substs.iter().enumerate().map(|(index, kind)| {\n-                    if index < generics.parent_count {\n-                        // Accommodate missing regions in the parent kinds...\n-                        self.fold_kind_no_missing_regions_error(kind)\n-                    } else {\n-                        // ...but not elsewhere.\n-                        self.fold_kind_normally(kind)\n-                    }\n-                }));\n-\n+                let substs = self.fold_closure_substs(def_id, substs);\n                 self.tcx.mk_closure(def_id, substs)\n             }\n \n             ty::Generator(def_id, substs, movability) => {\n-                let generics = self.tcx.generics_of(def_id);\n-                let substs = self.tcx.mk_substs(substs.iter().enumerate().map(|(index, kind)| {\n-                    if index < generics.parent_count {\n-                        // Accommodate missing regions in the parent kinds...\n-                        self.fold_kind_no_missing_regions_error(kind)\n-                    } else {\n-                        // ...but not elsewhere.\n-                        self.fold_kind_normally(kind)\n-                    }\n-                }));\n-\n+                let substs = self.fold_closure_substs(def_id, substs);\n                 self.tcx.mk_generator(def_id, substs, movability)\n             }\n \n+            ty::GeneratorWitnessMIR(def_id, substs) => {\n+                let substs = self.fold_closure_substs(def_id, substs);\n+                self.tcx.mk_generator_witness_mir(def_id, substs)\n+            }\n+\n             ty::Param(param) => {\n                 // Look it up in the substitution list.\n                 match self.map.get(&ty.into()).map(|k| k.unpack()) {"}, {"sha": "90bf3288ccf5489946a63560ca32c066c30f5e6d", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -265,6 +265,7 @@ fn characteristic_def_id_of_type_cached<'a>(\n         ty::FnDef(def_id, _)\n         | ty::Closure(def_id, _)\n         | ty::Generator(def_id, _, _)\n+        | ty::GeneratorWitnessMIR(def_id, _)\n         | ty::Foreign(def_id) => Some(def_id),\n \n         ty::Bool"}, {"sha": "f2abec216b7b371d594bd85f5a657fbca09e7f05", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -811,6 +811,28 @@ pub trait PrettyPrinter<'tcx>:\n             ty::GeneratorWitness(types) => {\n                 p!(in_binder(&types));\n             }\n+            ty::GeneratorWitnessMIR(did, substs) => {\n+                p!(write(\"[\"));\n+                if !self.tcx().sess.verbose() {\n+                    p!(\"generator witness\");\n+                    // FIXME(eddyb) should use `def_span`.\n+                    if let Some(did) = did.as_local() {\n+                        let span = self.tcx().def_span(did);\n+                        p!(write(\n+                            \"@{}\",\n+                            // This may end up in stderr diagnostics but it may also be emitted\n+                            // into MIR. Hence we use the remapped path if available\n+                            self.tcx().sess.source_map().span_to_embeddable_string(span)\n+                        ));\n+                    } else {\n+                        p!(write(\"@\"), print_def_path(did, substs));\n+                    }\n+                } else {\n+                    p!(print_def_path(did, substs));\n+                }\n+\n+                p!(\"]\")\n+            }\n             ty::Closure(did, substs) => {\n                 p!(write(\"[\"));\n                 if !self.should_print_verbose() {"}, {"sha": "7122e864cf231e879b87b76c8c26f68b2ded7ccb", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -473,6 +473,16 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n             Ok(tcx.mk_generator_witness(types))\n         }\n \n+        (&ty::GeneratorWitnessMIR(a_id, a_substs), &ty::GeneratorWitnessMIR(b_id, b_substs))\n+            if a_id == b_id =>\n+        {\n+            // All GeneratorWitness types with the same id represent\n+            // the (anonymous) type of the same generator expression. So\n+            // all of their regions should be equated.\n+            let substs = relation.relate(a_substs, b_substs)?;\n+            Ok(tcx.mk_generator_witness_mir(a_id, substs))\n+        }\n+\n         (&ty::Closure(a_id, a_substs), &ty::Closure(b_id, b_substs)) if a_id == b_id => {\n             // All Closure types with the same id represent\n             // the (anonymous) type of the same closure expression. So"}, {"sha": "034aab0c38ea32a9a60d4be70d82bd37460c43a3", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -656,6 +656,9 @@ impl<'tcx> TypeSuperFoldable<'tcx> for Ty<'tcx> {\n                 ty::Generator(did, substs.try_fold_with(folder)?, movability)\n             }\n             ty::GeneratorWitness(types) => ty::GeneratorWitness(types.try_fold_with(folder)?),\n+            ty::GeneratorWitnessMIR(did, substs) => {\n+                ty::GeneratorWitnessMIR(did, substs.try_fold_with(folder)?)\n+            }\n             ty::Closure(did, substs) => ty::Closure(did, substs.try_fold_with(folder)?),\n             ty::Alias(kind, data) => ty::Alias(kind, data.try_fold_with(folder)?),\n \n@@ -701,6 +704,7 @@ impl<'tcx> TypeSuperVisitable<'tcx> for Ty<'tcx> {\n             }\n             ty::Generator(_did, ref substs, _) => substs.visit_with(visitor),\n             ty::GeneratorWitness(ref types) => types.visit_with(visitor),\n+            ty::GeneratorWitnessMIR(_did, ref substs) => substs.visit_with(visitor),\n             ty::Closure(_did, ref substs) => substs.visit_with(visitor),\n             ty::Alias(_, ref data) => data.visit_with(visitor),\n "}, {"sha": "eba65e34023a99b9ca06346f23cc49862632d079", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -2175,6 +2175,7 @@ impl<'tcx> Ty<'tcx> {\n             | ty::Dynamic(..)\n             | ty::Closure(..)\n             | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Never\n             | ty::Tuple(_)\n             | ty::Error(_)\n@@ -2210,6 +2211,7 @@ impl<'tcx> Ty<'tcx> {\n             | ty::Ref(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Array(..)\n             | ty::Closure(..)\n             | ty::Never\n@@ -2296,6 +2298,7 @@ impl<'tcx> Ty<'tcx> {\n             | ty::Ref(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Array(..)\n             | ty::Closure(..)\n             | ty::Never\n@@ -2360,7 +2363,7 @@ impl<'tcx> Ty<'tcx> {\n             // anything with custom metadata it might be more complicated.\n             ty::Ref(_, _, hir::Mutability::Not) | ty::RawPtr(..) => false,\n \n-            ty::Generator(..) | ty::GeneratorWitness(..) => false,\n+            ty::Generator(..) | ty::GeneratorWitness(..) | ty::GeneratorWitnessMIR(..) => false,\n \n             // Might be, but not \"trivial\" so just giving the safe answer.\n             ty::Adt(..) | ty::Closure(..) => false,"}, {"sha": "3ed3b9f09459dd81db9473bd721b97abf275b3f5", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -896,6 +896,7 @@ impl<'tcx> Ty<'tcx> {\n             | ty::Foreign(_)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(_)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Infer(_)\n             | ty::Alias(..)\n             | ty::Param(_)\n@@ -935,6 +936,7 @@ impl<'tcx> Ty<'tcx> {\n             | ty::Foreign(_)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(_)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Infer(_)\n             | ty::Alias(..)\n             | ty::Param(_)\n@@ -1062,7 +1064,10 @@ impl<'tcx> Ty<'tcx> {\n                 false\n             }\n \n-            ty::Foreign(_) | ty::GeneratorWitness(..) | ty::Error(_) => false,\n+            ty::Foreign(_)\n+            | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n+            | ty::Error(_) => false,\n         }\n     }\n \n@@ -1158,6 +1163,7 @@ pub fn needs_drop_components<'tcx>(\n         | ty::FnPtr(_)\n         | ty::Char\n         | ty::GeneratorWitness(..)\n+        | ty::GeneratorWitnessMIR(..)\n         | ty::RawPtr(_)\n         | ty::Ref(..)\n         | ty::Str => Ok(SmallVec::new()),\n@@ -1228,7 +1234,11 @@ pub fn is_trivially_const_drop(ty: Ty<'_>) -> bool {\n \n         // Not trivial because they have components, and instead of looking inside,\n         // we'll just perform trait selection.\n-        ty::Closure(..) | ty::Generator(..) | ty::GeneratorWitness(_) | ty::Adt(..) => false,\n+        ty::Closure(..)\n+        | ty::Generator(..)\n+        | ty::GeneratorWitness(_)\n+        | ty::GeneratorWitnessMIR(..)\n+        | ty::Adt(..) => false,\n \n         ty::Array(ty, _) | ty::Slice(ty) => is_trivially_const_drop(ty),\n "}, {"sha": "d7b7a094737266e4d348a958b2f0b92cff7f708b", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -100,6 +100,9 @@ pub trait TypeVisitable<'tcx>: fmt::Debug + Clone {\n     fn has_opaque_types(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_OPAQUE)\n     }\n+    fn has_generators(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_TY_GENERATOR)\n+    }\n     fn references_error(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_ERROR)\n     }"}, {"sha": "182945b9c3db1ba01c210154cee3c1ecc015f0c6", "filename": "compiler/rustc_middle/src/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -190,6 +190,7 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n             ty::Adt(_, substs)\n             | ty::Closure(_, substs)\n             | ty::Generator(_, substs, _)\n+            | ty::GeneratorWitnessMIR(_, substs)\n             | ty::FnDef(_, substs) => {\n                 stack.extend(substs.iter().rev());\n             }"}, {"sha": "59972b2e408bcac2e35b8350dcfd2859b38322d3", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -271,7 +271,8 @@ where\n             | ty::FnPtr(..)\n             | ty::Param(..)\n             | ty::Error(_)\n-            | ty::GeneratorWitness(..) => {}\n+            | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..) => {}\n             ty::Bound(..) | ty::Placeholder(..) | ty::Infer(..) => {\n                 bug!(\"unexpected type: {:?}\", ty)\n             }"}, {"sha": "c9b4ab0a38d6ee185538827ce623ac2c8f6b0424", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -640,6 +640,7 @@ fn encode_ty<'tcx>(\n         ty::Bound(..)\n         | ty::Error(..)\n         | ty::GeneratorWitness(..)\n+        | ty::GeneratorWitnessMIR(..)\n         | ty::Infer(..)\n         | ty::Alias(..)\n         | ty::Param(..)\n@@ -793,6 +794,7 @@ fn transform_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, options: TransformTyOptio\n         ty::Bound(..)\n         | ty::Error(..)\n         | ty::GeneratorWitness(..)\n+        | ty::GeneratorWitnessMIR(..)\n         | ty::Infer(..)\n         | ty::Alias(..)\n         | ty::Param(..)"}, {"sha": "00d1ff5ceedf7cc326dd1bc610b47b48f8cc962c", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -490,6 +490,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n             }\n \n             ty::GeneratorWitness(_) => bug!(\"symbol_names: unexpected `GeneratorWitness`\"),\n+            ty::GeneratorWitnessMIR(..) => bug!(\"symbol_names: unexpected `GeneratorWitnessMIR`\"),\n         }\n \n         // Only cache types that do not refer to an enclosing"}, {"sha": "0c18fc355e9ed0e8924dda6e96110143f50ffd33", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -331,6 +331,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             | ty::Closure(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(_)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Never\n             | ty::Tuple(_)\n             | ty::Param(_)\n@@ -382,6 +383,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             | ty::Closure(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(_)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Never\n             | ty::Tuple(_)\n             | ty::Param(_)"}, {"sha": "b4626f492bc1537b3e014c3a90862575cbdc9d7c", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -414,6 +414,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                 | ty::Infer(ty::IntVar(..) | ty::FloatVar(..))\n                 | ty::Generator(..)\n                 | ty::GeneratorWitness(..)\n+                | ty::GeneratorWitnessMIR(..)\n                 | ty::Never\n                 | ty::Foreign(..) => tcx.types.unit,\n "}, {"sha": "5007a019e1892a3995400c1a7fa8e2550743b284", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -57,6 +57,8 @@ pub(super) fn instantiate_constituent_tys_for_auto_trait<'tcx>(\n             Ok(infcx.replace_bound_vars_with_placeholders(types).to_vec())\n         }\n \n+        ty::GeneratorWitnessMIR(..) => todo!(),\n+\n         // For `PhantomData<T>`, we pass `T`.\n         ty::Adt(def, substs) if def.is_phantom_data() => Ok(vec![substs.type_at(0)]),\n \n@@ -88,6 +90,7 @@ pub(super) fn instantiate_constituent_tys_for_sized_trait<'tcx>(\n         | ty::Ref(..)\n         | ty::Generator(..)\n         | ty::GeneratorWitness(..)\n+        | ty::GeneratorWitnessMIR(..)\n         | ty::Array(..)\n         | ty::Closure(..)\n         | ty::Never\n@@ -173,6 +176,8 @@ pub(super) fn instantiate_constituent_tys_for_copy_clone_trait<'tcx>(\n         ty::GeneratorWitness(types) => {\n             Ok(infcx.replace_bound_vars_with_placeholders(types).to_vec())\n         }\n+\n+        ty::GeneratorWitnessMIR(..) => todo!(),\n     }\n }\n \n@@ -215,6 +220,7 @@ pub(crate) fn extract_tupled_inputs_and_output_from_callable<'tcx>(\n         | ty::Dynamic(_, _, _)\n         | ty::Generator(_, _, _)\n         | ty::GeneratorWitness(_)\n+        | ty::GeneratorWitnessMIR(..)\n         | ty::Never\n         | ty::Tuple(_)\n         | ty::Alias(_, _)"}, {"sha": "61f508a7a0750c37746591d9c94ac3f14106b25d", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -696,7 +696,9 @@ impl<'tcx> TypeVisitor<'tcx> for OrphanChecker<'tcx> {\n             // This should only be created when checking whether we have to check whether some\n             // auto trait impl applies. There will never be multiple impls, so we can just\n             // act as if it were a local type here.\n-            ty::GeneratorWitness(_) => ControlFlow::Break(OrphanCheckEarlyExit::LocalTy(ty)),\n+            ty::GeneratorWitness(_) | ty::GeneratorWitnessMIR(..) => {\n+                ControlFlow::Break(OrphanCheckEarlyExit::LocalTy(ty))\n+            }\n             ty::Alias(ty::Opaque, ..) => {\n                 // This merits some explanation.\n                 // Normally, opaque types are not involved when performing"}, {"sha": "e9842b2cba516a6d692f71765f86b1b2e0a366d9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -1919,6 +1919,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 ty::Generator(..) => Some(16),\n                 ty::Foreign(..) => Some(17),\n                 ty::GeneratorWitness(..) => Some(18),\n+                ty::GeneratorWitnessMIR(..) => Some(19),\n                 ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) | ty::Error(_) => None,\n             }\n         }"}, {"sha": "a11c5e819695296e429657dd82234c44c827c103", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -1605,6 +1605,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                         | ty::Closure(..)\n                         | ty::Generator(..)\n                         | ty::GeneratorWitness(..)\n+                        | ty::GeneratorWitnessMIR(..)\n                         | ty::Never\n                         | ty::Tuple(..)\n                         // Integers and floats always have `u8` as their discriminant.\n@@ -1654,6 +1655,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                         | ty::Closure(..)\n                         | ty::Generator(..)\n                         | ty::GeneratorWitness(..)\n+                        | ty::GeneratorWitnessMIR(..)\n                         | ty::Never\n                         // Extern types have unit metadata, according to RFC 2850\n                         | ty::Foreign(_)"}, {"sha": "455b53bfb7d8fa351b09487b74f46010f3765780", "filename": "compiler/rustc_trait_selection/src/traits/query/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -31,6 +31,7 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n         | ty::FnPtr(_)\n         | ty::Char\n         | ty::GeneratorWitness(..)\n+        | ty::GeneratorWitnessMIR(..)\n         | ty::RawPtr(_)\n         | ty::Ref(..)\n         | ty::Str"}, {"sha": "52f4d29181d2922005e6bfa99a31ae30dd6ecbdd", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -765,7 +765,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Closure(..)\n             | ty::Generator(..)\n             | ty::Tuple(_)\n-            | ty::GeneratorWitness(_) => {\n+            | ty::GeneratorWitness(_)\n+            | ty::GeneratorWitnessMIR(..) => {\n                 // These are built-in, and cannot have a custom `impl const Destruct`.\n                 candidates.vec.push(ConstDestructCandidate(None));\n             }\n@@ -826,6 +827,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Closure(_, _)\n             | ty::Generator(_, _, _)\n             | ty::GeneratorWitness(_)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Never\n             | ty::Alias(..)\n             | ty::Param(_)"}, {"sha": "996a33cdd689aa4fbf97e30aaa2876e934d1af89", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -1285,6 +1285,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ty::GeneratorWitness(tys) => {\n                     stack.extend(tcx.erase_late_bound_regions(tys).to_vec());\n                 }\n+                ty::GeneratorWitnessMIR(..) => {\n+                    todo!()\n+                }\n \n                 // If we have a projection type, make sure to normalize it so we replace it\n                 // with a fresh infer variable"}, {"sha": "ba62d99f01a6cfa299baeeae6dbfc3d0a8a67b3b", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -2066,6 +2066,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Ref(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Array(..)\n             | ty::Closure(..)\n             | ty::Never\n@@ -2182,6 +2183,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Where(ty::Binder::bind_with_vars(witness_tys.to_vec(), all_vars))\n             }\n \n+            ty::GeneratorWitnessMIR(..) => {\n+                todo!()\n+            }\n+\n             ty::Closure(_, substs) => {\n                 // (*) binder moved here\n                 let ty = self.infcx.shallow_resolve(substs.as_closure().tupled_upvars_ty());\n@@ -2279,6 +2284,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 types.map_bound(|types| types.to_vec())\n             }\n \n+            ty::GeneratorWitnessMIR(..) => {\n+                todo!()\n+            }\n+\n             // For `PhantomData<T>`, we pass `T`.\n             ty::Adt(def, substs) if def.is_phantom_data() => t.rebind(substs.types().collect()),\n "}, {"sha": "69b965f3a389a58ca3ed4c2ce218c3e0cd2431d9", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -101,7 +101,7 @@ impl<'tcx> TypeVisitor<'tcx> for Search<'tcx> {\n             ty::Closure(..) => {\n                 return ControlFlow::Break(ty);\n             }\n-            ty::Generator(..) | ty::GeneratorWitness(..) => {\n+            ty::Generator(..) | ty::GeneratorWitness(..) | ty::GeneratorWitnessMIR(..) => {\n                 return ControlFlow::Break(ty);\n             }\n             ty::FnDef(..) => {"}, {"sha": "7c5e147a950f19ba225a50d558f876e04ccc4647", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -551,6 +551,7 @@ impl<'tcx> WfPredicates<'tcx> {\n                 | ty::Error(_)\n                 | ty::Str\n                 | ty::GeneratorWitness(..)\n+                | ty::GeneratorWitnessMIR(..)\n                 | ty::Never\n                 | ty::Param(_)\n                 | ty::Bound(..)"}, {"sha": "3a254105162095aae614f679bf85c39eaa2abe62", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -343,6 +343,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                 substs.lower_into(interner),\n             ),\n             ty::GeneratorWitness(_) => unimplemented!(),\n+            ty::GeneratorWitnessMIR(..) => unimplemented!(),\n             ty::Never => chalk_ir::TyKind::Never,\n             ty::Tuple(types) => {\n                 chalk_ir::TyKind::Tuple(types.len(), types.as_substs().lower_into(interner))"}, {"sha": "8b7f8033bfaceb7d7636eb89ab1576f43db2925c", "filename": "compiler/rustc_traits/src/dropck_outlives.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -164,7 +164,8 @@ fn dtorck_constraint_for_ty<'tcx>(\n         | ty::Ref(..)\n         | ty::FnDef(..)\n         | ty::FnPtr(_)\n-        | ty::GeneratorWitness(..) => {\n+        | ty::GeneratorWitness(..)\n+        | ty::GeneratorWitnessMIR(..) => {\n             // these types never have a destructor\n         }\n "}, {"sha": "44c8569baa98513369df3b5ee761683eca7ea2d5", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -470,7 +470,10 @@ fn layout_of_uncached<'tcx>(\n             return Err(LayoutError::Unknown(ty));\n         }\n \n-        ty::Placeholder(..) | ty::GeneratorWitness(..) | ty::Infer(_) => {\n+        ty::Placeholder(..)\n+        | ty::GeneratorWitness(..)\n+        | ty::GeneratorWitnessMIR(..)\n+        | ty::Infer(_) => {\n             bug!(\"Layout::compute: unexpected type `{}`\", ty)\n         }\n "}, {"sha": "89abffebdc68406b887a4b73f54303a3164065ba", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -16,7 +16,13 @@ fn sized_constraint_for_ty<'tcx>(\n         Bool | Char | Int(..) | Uint(..) | Float(..) | RawPtr(..) | Ref(..) | FnDef(..)\n         | FnPtr(_) | Array(..) | Closure(..) | Generator(..) | Never => vec![],\n \n-        Str | Dynamic(..) | Slice(_) | Foreign(..) | Error(_) | GeneratorWitness(..) => {\n+        Str\n+        | Dynamic(..)\n+        | Slice(_)\n+        | Foreign(..)\n+        | Error(_)\n+        | GeneratorWitness(..)\n+        | GeneratorWitnessMIR(..) => {\n             // these are never sized - return the target type\n             vec![ty]\n         }"}, {"sha": "d5de457a82ce98ece71342abaa4d3ff6f0ee2225", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -265,6 +265,9 @@ bitflags! {\n \n         /// Does this value have `InferConst::Fresh`?\n         const HAS_CT_FRESH                = 1 << 21;\n+\n+        /// Does this have `Generator` or `GeneratorWitness`?\n+        const HAS_TY_GENERATOR            = 1 << 22;\n     }\n }\n "}, {"sha": "843a75aacdb0c70ed18a66d84ee4813e0c938c81", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -160,6 +160,32 @@ pub enum TyKind<I: Interner> {\n     /// ```\n     GeneratorWitness(I::BinderListTy),\n \n+    /// A type representing the types stored inside a generator.\n+    /// This should only appear as part of the `GeneratorSubsts`.\n+    ///\n+    /// Unlike upvars, the witness can reference lifetimes from\n+    /// inside of the generator itself. To deal with them in\n+    /// the type of the generator, we convert them to higher ranked\n+    /// lifetimes bound by the witness itself.\n+    ///\n+    /// This variant is only using when `drop_tracking_mir` is set.\n+    /// This contains the `DefId` and the `SubstRef` of the generator.\n+    /// The actual witness types are computed on MIR by the `mir_generator_info` query.\n+    ///\n+    /// Looking at the following example, the witness for this generator\n+    /// may end up as something like `for<'a> [Vec<i32>, &'a Vec<i32>]`:\n+    ///\n+    /// ```ignore UNSOLVED (ask @compiler-errors, should this error? can we just swap the yields?)\n+    /// #![feature(generators)]\n+    /// |a| {\n+    ///     let x = &vec![3];\n+    ///     yield a;\n+    ///     yield x[0];\n+    /// }\n+    /// # ;\n+    /// ```\n+    GeneratorWitnessMIR(I::DefId, I::SubstsRef),\n+\n     /// The never type `!`.\n     Never,\n \n@@ -241,6 +267,7 @@ const fn tykind_discriminant<I: Interner>(value: &TyKind<I>) -> usize {\n         Placeholder(_) => 23,\n         Infer(_) => 24,\n         Error(_) => 25,\n+        GeneratorWitnessMIR(_, _) => 26,\n     }\n }\n \n@@ -266,6 +293,7 @@ impl<I: Interner> Clone for TyKind<I> {\n             Closure(d, s) => Closure(d.clone(), s.clone()),\n             Generator(d, s, m) => Generator(d.clone(), s.clone(), m.clone()),\n             GeneratorWitness(g) => GeneratorWitness(g.clone()),\n+            GeneratorWitnessMIR(d, s) => GeneratorWitnessMIR(d.clone(), s.clone()),\n             Never => Never,\n             Tuple(t) => Tuple(t.clone()),\n             Alias(k, p) => Alias(*k, p.clone()),\n@@ -303,6 +331,10 @@ impl<I: Interner> PartialEq for TyKind<I> {\n                     a_d == b_d && a_s == b_s && a_m == b_m\n                 }\n                 (GeneratorWitness(a_g), GeneratorWitness(b_g)) => a_g == b_g,\n+                (\n+                    &GeneratorWitnessMIR(ref a_d, ref a_s),\n+                    &GeneratorWitnessMIR(ref b_d, ref b_s),\n+                ) => a_d == b_d && a_s == b_s,\n                 (Tuple(a_t), Tuple(b_t)) => a_t == b_t,\n                 (Alias(a_i, a_p), Alias(b_i, b_p)) => a_i == b_i && a_p == b_p,\n                 (Param(a_p), Param(b_p)) => a_p == b_p,\n@@ -360,6 +392,13 @@ impl<I: Interner> Ord for TyKind<I> {\n                     a_d.cmp(b_d).then_with(|| a_s.cmp(b_s).then_with(|| a_m.cmp(b_m)))\n                 }\n                 (GeneratorWitness(a_g), GeneratorWitness(b_g)) => a_g.cmp(b_g),\n+                (\n+                    &GeneratorWitnessMIR(ref a_d, ref a_s),\n+                    &GeneratorWitnessMIR(ref b_d, ref b_s),\n+                ) => match Ord::cmp(a_d, b_d) {\n+                    Ordering::Equal => Ord::cmp(a_s, b_s),\n+                    cmp => cmp,\n+                },\n                 (Tuple(a_t), Tuple(b_t)) => a_t.cmp(b_t),\n                 (Alias(a_i, a_p), Alias(b_i, b_p)) => a_i.cmp(b_i).then_with(|| a_p.cmp(b_p)),\n                 (Param(a_p), Param(b_p)) => a_p.cmp(b_p),\n@@ -421,6 +460,10 @@ impl<I: Interner> hash::Hash for TyKind<I> {\n                 m.hash(state)\n             }\n             GeneratorWitness(g) => g.hash(state),\n+            GeneratorWitnessMIR(d, s) => {\n+                d.hash(state);\n+                s.hash(state);\n+            }\n             Tuple(t) => t.hash(state),\n             Alias(i, p) => {\n                 i.hash(state);\n@@ -461,6 +504,7 @@ impl<I: Interner> fmt::Debug for TyKind<I> {\n             Closure(d, s) => f.debug_tuple_field2_finish(\"Closure\", d, s),\n             Generator(d, s, m) => f.debug_tuple_field3_finish(\"Generator\", d, s, m),\n             GeneratorWitness(g) => f.debug_tuple_field1_finish(\"GeneratorWitness\", g),\n+            GeneratorWitnessMIR(d, s) => f.debug_tuple_field2_finish(\"GeneratorWitnessMIR\", d, s),\n             Never => f.write_str(\"Never\"),\n             Tuple(t) => f.debug_tuple_field1_finish(\"Tuple\", t),\n             Alias(i, a) => f.debug_tuple_field2_finish(\"Alias\", i, a),\n@@ -559,6 +603,10 @@ where\n             GeneratorWitness(b) => e.emit_enum_variant(disc, |e| {\n                 b.encode(e);\n             }),\n+            GeneratorWitnessMIR(def_id, substs) => e.emit_enum_variant(disc, |e| {\n+                def_id.encode(e);\n+                substs.encode(e);\n+            }),\n             Never => e.emit_enum_variant(disc, |_| {}),\n             Tuple(substs) => e.emit_enum_variant(disc, |e| {\n                 substs.encode(e);\n@@ -641,6 +689,7 @@ where\n             23 => Placeholder(Decodable::decode(d)),\n             24 => Infer(Decodable::decode(d)),\n             25 => Error(Decodable::decode(d)),\n+            26 => GeneratorWitnessMIR(Decodable::decode(d), Decodable::decode(d)),\n             _ => panic!(\n                 \"{}\",\n                 format!(\n@@ -742,6 +791,10 @@ where\n             GeneratorWitness(b) => {\n                 b.hash_stable(__hcx, __hasher);\n             }\n+            GeneratorWitnessMIR(def_id, substs) => {\n+                def_id.hash_stable(__hcx, __hasher);\n+                substs.hash_stable(__hcx, __hasher);\n+            }\n             Never => {}\n             Tuple(substs) => {\n                 substs.hash_stable(__hcx, __hasher);"}, {"sha": "204d4127c8f069ebc169d89e217f65b5ff42a62f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -1855,6 +1855,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n         ty::Bound(..) => panic!(\"Bound\"),\n         ty::Placeholder(..) => panic!(\"Placeholder\"),\n         ty::GeneratorWitness(..) => panic!(\"GeneratorWitness\"),\n+        ty::GeneratorWitnessMIR(..) => panic!(\"GeneratorWitnessMIR\"),\n         ty::Infer(..) => panic!(\"Infer\"),\n         ty::Error(_) => rustc_errors::FatalError.raise(),\n     }"}, {"sha": "8435972bb11f2805ba6252f3b6eab16f2fa0bf14", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -542,6 +542,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             | ty::Closure(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(_)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Dynamic(..)\n             | ty::Param(_)\n             | ty::Bound(..)"}, {"sha": "8e921839e8b2fd48ac55a06530d3f33ee8a35390", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -1419,6 +1419,7 @@ fn ty_auto_deref_stability<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, precedenc\n             | ty::FnDef(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)\n+            | ty::GeneratorWitnessMIR(..)\n             | ty::Closure(..)\n             | ty::Never\n             | ty::Tuple(_)"}, {"sha": "fe490a6000d7bc6eaabd936c7f0fc8d1555f47c3", "filename": "tests/ui/symbol-names/basic.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/tests%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/tests%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN5basic4main17hcbad207c0eeb0b3bE)\n+error: symbol-name(_ZN5basic4main17he9f658e438f1cac0E)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(basic::main::hcbad207c0eeb0b3b)\n+error: demangling(basic::main::he9f658e438f1cac0)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "29b42f48d803a09ccd6ee8d036daf65e909e3f8e", "filename": "tests/ui/symbol-names/issue-60925.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1974b6b68dc168cac046039ce404c8311c4d8765/tests%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1974b6b68dc168cac046039ce404c8311c4d8765/tests%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr?ref=1974b6b68dc168cac046039ce404c8311c4d8765", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17h2f2efcf580c9b1eeE)\n+error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17h13209029be24b923E)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::h2f2efcf580c9b1ee)\n+error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::h13209029be24b923)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]"}]}