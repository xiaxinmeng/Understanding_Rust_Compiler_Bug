{"sha": "007b40be01ca4e0eb0bca875e9134e4f87c9cd4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwN2I0MGJlMDFjYTRlMGViMGJjYTg3NWU5MTM0ZTRmODdjOWNkNGI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-18T01:30:26Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-18T01:30:26Z"}, "message": "Point at try `?` on errors affecting the err match arm of the desugared code", "tree": {"sha": "1b9271e4b2be42139d72913e5bed8ba2d3b18198", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b9271e4b2be42139d72913e5bed8ba2d3b18198"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/007b40be01ca4e0eb0bca875e9134e4f87c9cd4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/007b40be01ca4e0eb0bca875e9134e4f87c9cd4b", "html_url": "https://github.com/rust-lang/rust/commit/007b40be01ca4e0eb0bca875e9134e4f87c9cd4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/007b40be01ca4e0eb0bca875e9134e4f87c9cd4b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70f130954d6fd36fe3e77f4b5b33e5af50489288", "url": "https://api.github.com/repos/rust-lang/rust/commits/70f130954d6fd36fe3e77f4b5b33e5af50489288", "html_url": "https://github.com/rust-lang/rust/commit/70f130954d6fd36fe3e77f4b5b33e5af50489288"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "42ad571cf283259d8ea496a4be57254634917b7d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/007b40be01ca4e0eb0bca875e9134e4f87c9cd4b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007b40be01ca4e0eb0bca875e9134e4f87c9cd4b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=007b40be01ca4e0eb0bca875e9134e4f87c9cd4b", "patch": "@@ -4685,6 +4685,14 @@ impl<'a> LoweringContext<'a> {\n                         Symbol::intern(\"try_trait\")\n                     ].into()),\n                 );\n+                let try_span = self.sess.source_map().end_point(e.span);\n+                let try_span = self.mark_span_with_reason(\n+                    CompilerDesugaringKind::QuestionMark,\n+                    try_span,\n+                    Some(vec![\n+                        Symbol::intern(\"try_trait\")\n+                    ].into()),\n+                );\n \n                 // `Try::into_result(<expr>)`\n                 let discr = {\n@@ -4729,14 +4737,14 @@ impl<'a> LoweringContext<'a> {\n                 //              return Try::from_error(From::from(err)),`\n                 let err_arm = {\n                     let err_ident = self.str_to_ident(\"err\");\n-                    let (err_local, err_local_nid) = self.pat_ident(e.span, err_ident);\n+                    let (err_local, err_local_nid) = self.pat_ident(try_span, err_ident);\n                     let from_expr = {\n                         let path = &[\"convert\", \"From\", \"from\"];\n                         let from = P(self.expr_std_path(\n-                                e.span, path, None, ThinVec::new()));\n-                        let err_expr = self.expr_ident(e.span, err_ident, err_local_nid);\n+                                try_span, path, None, ThinVec::new()));\n+                        let err_expr = self.expr_ident(try_span, err_ident, err_local_nid);\n \n-                        self.expr_call(e.span, from, hir_vec![err_expr])\n+                        self.expr_call(try_span, from, hir_vec![err_expr])\n                     };\n                     let from_err_expr =\n                         self.wrap_in_try_constructor(\"from_error\", from_expr, unstable_span);\n@@ -4745,7 +4753,7 @@ impl<'a> LoweringContext<'a> {\n                     let ret_expr = if let Some(catch_node) = catch_scope {\n                         let target_id = Ok(self.lower_node_id(catch_node).hir_id);\n                         P(self.expr(\n-                            e.span,\n+                            try_span,\n                             hir::ExprKind::Break(\n                                 hir::Destination {\n                                     label: None,\n@@ -4756,10 +4764,10 @@ impl<'a> LoweringContext<'a> {\n                             thin_attrs,\n                         ))\n                     } else {\n-                        P(self.expr(e.span, hir::ExprKind::Ret(Some(from_err_expr)), thin_attrs))\n+                        P(self.expr(try_span, hir::ExprKind::Ret(Some(from_err_expr)), thin_attrs))\n                     };\n \n-                    let err_pat = self.pat_err(e.span, err_local);\n+                    let err_pat = self.pat_err(try_span, err_local);\n                     self.arm(hir_vec![err_pat], ret_expr)\n                 };\n "}, {"sha": "4a37e0a2e5282143e9c9ab1ffec30fd521bd9175", "filename": "src/test/ui/issues/issue-32709.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/007b40be01ca4e0eb0bca875e9134e4f87c9cd4b/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/007b40be01ca4e0eb0bca875e9134e4f87c9cd4b/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr?ref=007b40be01ca4e0eb0bca875e9134e4f87c9cd4b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `(): std::convert::From<{integer}>` is not satisfied\n-  --> $DIR/issue-32709.rs:4:5\n+  --> $DIR/issue-32709.rs:4:11\n    |\n LL |     Err(5)?;\n-   |     ^^^^^^^ the trait `std::convert::From<{integer}>` is not implemented for `()`\n+   |           ^ the trait `std::convert::From<{integer}>` is not implemented for `()`\n    |\n    = note: required by `std::convert::From::from`\n "}, {"sha": "a39c8cfba12aa60c0ffafbdf138296453c7c384b", "filename": "src/test/ui/try-block/try-block-bad-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/007b40be01ca4e0eb0bca875e9134e4f87c9cd4b/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/007b40be01ca4e0eb0bca875e9134e4f87c9cd4b/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr?ref=007b40be01ca4e0eb0bca875e9134e4f87c9cd4b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `i32: std::convert::From<&str>` is not satisfied\n-  --> $DIR/try-block-bad-type.rs:7:9\n+  --> $DIR/try-block-bad-type.rs:7:16\n    |\n LL |         Err(\"\")?;\n-   |         ^^^^^^^^ the trait `std::convert::From<&str>` is not implemented for `i32`\n+   |                ^ the trait `std::convert::From<&str>` is not implemented for `i32`\n    |\n    = help: the following implementations were found:\n              <i32 as std::convert::From<bool>>"}, {"sha": "3e081d0376649ee11cbd211b6af1abf788fa4d1e", "filename": "src/test/ui/try-on-option.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/007b40be01ca4e0eb0bca875e9134e4f87c9cd4b/src%2Ftest%2Fui%2Ftry-on-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/007b40be01ca4e0eb0bca875e9134e4f87c9cd4b/src%2Ftest%2Fui%2Ftry-on-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-on-option.stderr?ref=007b40be01ca4e0eb0bca875e9134e4f87c9cd4b", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `(): std::convert::From<std::option::NoneError>` is not satisfied\n-  --> $DIR/try-on-option.rs:7:5\n+  --> $DIR/try-on-option.rs:7:6\n    |\n LL |     x?;\n-   |     ^^ the trait `std::convert::From<std::option::NoneError>` is not implemented for `()`\n+   |      ^ the trait `std::convert::From<std::option::NoneError>` is not implemented for `()`\n    |\n    = note: required by `std::convert::From::from`\n "}]}