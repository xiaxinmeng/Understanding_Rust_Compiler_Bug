{"sha": "21a554caf680b74ee6270d3a61b0336b643c5456", "node_id": "C_kwDOAAsO6NoAKDIxYTU1NGNhZjY4MGI3NGVlNjI3MGQzYTYxYjAzMzZiNjQzYzU0NTY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-29T15:11:12Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-29T16:50:52Z"}, "message": "Remember mutability in `DefKind::Static`.\n\nThis allows to compute the `BodyOwnerKind` from `DefKind` only, and\nremoves a direct dependency of some MIR queries onto HIR.\n\nAs a side effect, it also simplifies metadata, since we don't need 4\nflavours of `EntryKind::*Static` any more.", "tree": {"sha": "e292c7ada14407a4008626d27304c3f7b244e6c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e292c7ada14407a4008626d27304c3f7b244e6c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21a554caf680b74ee6270d3a61b0336b643c5456", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21a554caf680b74ee6270d3a61b0336b643c5456", "html_url": "https://github.com/rust-lang/rust/commit/21a554caf680b74ee6270d3a61b0336b643c5456", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21a554caf680b74ee6270d3a61b0336b643c5456/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11909e3588319235e28e99294e17cca11db1d7e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/11909e3588319235e28e99294e17cca11db1d7e2", "html_url": "https://github.com/rust-lang/rust/commit/11909e3588319235e28e99294e17cca11db1d7e2"}], "stats": {"total": 226, "additions": 98, "deletions": 128}, "files": [{"sha": "2484d6d15b404a0ba9a0e42bac18d6147e428a28", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -154,7 +154,6 @@ fn do_mir_borrowck<'a, 'tcx>(\n \n     let tcx = infcx.tcx;\n     let param_env = tcx.param_env(def.did);\n-    let id = tcx.hir().local_def_id_to_hir_id(def.did);\n \n     let mut local_names = IndexVec::from_elem(None, &input_body.local_decls);\n     for var_debug_info in &input_body.var_debug_info {\n@@ -224,7 +223,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         .iterate_to_fixpoint()\n         .into_results_cursor(&body);\n \n-    let locals_are_invalidated_at_exit = tcx.hir().body_owner_kind(id).is_fn_or_closure();\n+    let locals_are_invalidated_at_exit = tcx.hir().body_owner_kind(def.did).is_fn_or_closure();\n     let borrow_set =\n         Rc::new(BorrowSet::build(tcx, body, locals_are_invalidated_at_exit, &mdpe.move_data));\n \n@@ -287,8 +286,9 @@ fn do_mir_borrowck<'a, 'tcx>(\n         .pass_name(\"borrowck\")\n         .iterate_to_fixpoint();\n \n+    let def_hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n     let movable_generator = !matches!(\n-        tcx.hir().get(id),\n+        tcx.hir().get(def_hir_id),\n         Node::Expr(&hir::Expr {\n             kind: hir::ExprKind::Closure(.., Some(hir::Movability::Static)),\n             ..\n@@ -383,7 +383,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         let scope = mbcx.body.source_info(location).scope;\n         let lint_root = match &mbcx.body.source_scopes[scope].local_data {\n             ClearCrossCrate::Set(data) => data.lint_root,\n-            _ => id,\n+            _ => def_hir_id,\n         };\n \n         // Span and message don't matter; we overwrite them below anyway"}, {"sha": "92d08f090abdc52433d397e1d34e030ea5edd4bb", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -524,7 +524,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         let tcx = self.infcx.tcx;\n         let typeck_root_def_id = tcx.typeck_root_def_id(self.mir_def.did.to_def_id());\n \n-        match tcx.hir().body_owner_kind(self.mir_hir_id) {\n+        match tcx.hir().body_owner_kind(self.mir_def.did) {\n             BodyOwnerKind::Closure | BodyOwnerKind::Fn => {\n                 let defining_ty = if self.mir_def.did.to_def_id() == typeck_root_def_id {\n                     tcx.type_of(typeck_root_def_id)"}, {"sha": "946546263ea727a92a81d854b2819fb26a3e3008", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -38,7 +38,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n             || matches!(\n                 ecx.tcx.def_kind(cid.instance.def_id()),\n                 DefKind::Const\n-                    | DefKind::Static\n+                    | DefKind::Static(_)\n                     | DefKind::ConstParam\n                     | DefKind::AnonConst\n                     | DefKind::InlineConst"}, {"sha": "352f369f0d4bc84ca67dae3476f0e10981eb26cd", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -78,7 +78,7 @@ pub enum DefKind {\n     Const,\n     /// Constant generic parameter: `struct Foo<const N: usize> { ... }`\n     ConstParam,\n-    Static,\n+    Static(ast::Mutability),\n     /// Refers to the struct or enum variant's constructor.\n     ///\n     /// The reason `Ctor` exists in addition to [`DefKind::Struct`] and\n@@ -128,7 +128,7 @@ impl DefKind {\n                 \"crate\"\n             }\n             DefKind::Mod => \"module\",\n-            DefKind::Static => \"static\",\n+            DefKind::Static(..) => \"static\",\n             DefKind::Enum => \"enum\",\n             DefKind::Variant => \"variant\",\n             DefKind::Ctor(CtorOf::Variant, CtorKind::Fn) => \"tuple variant\",\n@@ -202,7 +202,7 @@ impl DefKind {\n             DefKind::Fn\n             | DefKind::Const\n             | DefKind::ConstParam\n-            | DefKind::Static\n+            | DefKind::Static(..)\n             | DefKind::Ctor(..)\n             | DefKind::AssocFn\n             | DefKind::AssocConst => Some(Namespace::ValueNS),"}, {"sha": "5399cd6e413304b2562ad5fae3f4d231a52c60fc", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -1530,7 +1530,7 @@ impl Expr<'_> {\n     pub fn is_place_expr(&self, mut allow_projections_from: impl FnMut(&Self) -> bool) -> bool {\n         match self.kind {\n             ExprKind::Path(QPath::Resolved(_, ref path)) => {\n-                matches!(path.res, Res::Local(..) | Res::Def(DefKind::Static, _) | Res::Err)\n+                matches!(path.res, Res::Local(..) | Res::Def(DefKind::Static(_), _) | Res::Err)\n             }\n \n             // Type ascription inherits its place expression kind from its"}, {"sha": "7a44798a3b5040cac3772faca1a4d8f801fe0e36", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -1442,21 +1442,11 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n     fn is_foreign_item(self, id: DefIndex) -> bool {\n         match self.kind(id) {\n-            EntryKind::ForeignImmStatic | EntryKind::ForeignMutStatic | EntryKind::ForeignFn(_) => {\n-                true\n-            }\n+            EntryKind::ForeignStatic | EntryKind::ForeignFn(_) => true,\n             _ => false,\n         }\n     }\n \n-    fn static_mutability(self, id: DefIndex) -> Option<hir::Mutability> {\n-        match self.kind(id) {\n-            EntryKind::ImmStatic | EntryKind::ForeignImmStatic => Some(hir::Mutability::Not),\n-            EntryKind::MutStatic | EntryKind::ForeignMutStatic => Some(hir::Mutability::Mut),\n-            _ => None,\n-        }\n-    }\n-\n     #[inline]\n     fn def_key(self, index: DefIndex) -> DefKey {\n         *self"}, {"sha": "8d9d83bd4268eee2e156f80ab55db4c75c03edd0", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -153,7 +153,6 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     inherent_impls => { cdata.get_inherent_implementations_for_type(tcx, def_id.index) }\n     is_const_fn_raw => { cdata.is_const_fn_raw(def_id.index) }\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n-    static_mutability => { cdata.static_mutability(def_id.index) }\n     item_attrs => { tcx.arena.alloc_from_iter(cdata.get_item_attrs(def_id.index, tcx.sess)) }\n     trait_of_item => { cdata.get_trait_of_item(def_id.index) }\n     is_mir_available => { cdata.is_item_mir_available(def_id.index) }"}, {"sha": "03b2c456a9f0b0d33d44af87569e82733dd2585d", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -792,7 +792,7 @@ fn should_encode_visibility(def_kind: DefKind) -> bool {\n         | DefKind::AssocTy\n         | DefKind::Fn\n         | DefKind::Const\n-        | DefKind::Static\n+        | DefKind::Static(..)\n         | DefKind::Ctor(..)\n         | DefKind::AssocFn\n         | DefKind::AssocConst\n@@ -826,7 +826,7 @@ fn should_encode_stability(def_kind: DefKind) -> bool {\n         | DefKind::AssocConst\n         | DefKind::TyParam\n         | DefKind::ConstParam\n-        | DefKind::Static\n+        | DefKind::Static(..)\n         | DefKind::Const\n         | DefKind::Fn\n         | DefKind::ForeignMod\n@@ -870,7 +870,7 @@ fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {\n         DefKind::AnonConst\n         | DefKind::InlineConst\n         | DefKind::AssocConst\n-        | DefKind::Static\n+        | DefKind::Static(..)\n         | DefKind::Const => (true, false),\n         // Full-fledged functions\n         DefKind::AssocFn | DefKind::Fn => {\n@@ -915,7 +915,7 @@ fn should_encode_variances(def_kind: DefKind) -> bool {\n         | DefKind::AssocConst\n         | DefKind::TyParam\n         | DefKind::ConstParam\n-        | DefKind::Static\n+        | DefKind::Static(..)\n         | DefKind::Const\n         | DefKind::ForeignMod\n         | DefKind::TyAlias\n@@ -949,7 +949,7 @@ fn should_encode_generics(def_kind: DefKind) -> bool {\n         | DefKind::AssocTy\n         | DefKind::Fn\n         | DefKind::Const\n-        | DefKind::Static\n+        | DefKind::Static(..)\n         | DefKind::Ctor(..)\n         | DefKind::AssocFn\n         | DefKind::AssocConst\n@@ -1385,8 +1385,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         self.encode_ident_span(def_id, item.ident);\n \n         let entry_kind = match item.kind {\n-            hir::ItemKind::Static(_, hir::Mutability::Mut, _) => EntryKind::MutStatic,\n-            hir::ItemKind::Static(_, hir::Mutability::Not, _) => EntryKind::ImmStatic,\n+            hir::ItemKind::Static(..) => EntryKind::Static,\n             hir::ItemKind::Const(_, body_id) => {\n                 let qualifs = self.tcx.at(item.span).mir_const_qualif(def_id);\n                 let const_data = self.encode_rendered_const_for_body(body_id);\n@@ -1874,11 +1873,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 };\n                 record!(self.tables.kind[def_id] <- EntryKind::ForeignFn(self.lazy(data)));\n             }\n-            hir::ForeignItemKind::Static(_, hir::Mutability::Mut) => {\n-                record!(self.tables.kind[def_id] <- EntryKind::ForeignMutStatic);\n-            }\n-            hir::ForeignItemKind::Static(_, hir::Mutability::Not) => {\n-                record!(self.tables.kind[def_id] <- EntryKind::ForeignImmStatic);\n+            hir::ForeignItemKind::Static(..) => {\n+                record!(self.tables.kind[def_id] <- EntryKind::ForeignStatic);\n             }\n             hir::ForeignItemKind::Type => {\n                 record!(self.tables.kind[def_id] <- EntryKind::ForeignType);"}, {"sha": "0584982978c6ef321a652dfdeba3079bd9a2171f", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -331,10 +331,8 @@ define_tables! {\n enum EntryKind {\n     AnonConst,\n     Const,\n-    ImmStatic,\n-    MutStatic,\n-    ForeignImmStatic,\n-    ForeignMutStatic,\n+    Static,\n+    ForeignStatic,\n     ForeignMod,\n     ForeignType,\n     GlobalAsm,"}, {"sha": "2b9dda6a4e426dcbb86b610e09416b222997778b", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -228,7 +228,7 @@ impl<'hir> Map<'hir> {\n         let hir_id = self.local_def_id_to_hir_id(local_def_id);\n         let def_kind = match self.find(hir_id)? {\n             Node::Item(item) => match item.kind {\n-                ItemKind::Static(..) => DefKind::Static,\n+                ItemKind::Static(_, mt, _) => DefKind::Static(mt),\n                 ItemKind::Const(..) => DefKind::Const,\n                 ItemKind::Fn(..) => DefKind::Fn,\n                 ItemKind::Macro(_, macro_kind) => DefKind::Macro(macro_kind),\n@@ -248,7 +248,7 @@ impl<'hir> Map<'hir> {\n             },\n             Node::ForeignItem(item) => match item.kind {\n                 ForeignItemKind::Fn(..) => DefKind::Fn,\n-                ForeignItemKind::Static(..) => DefKind::Static,\n+                ForeignItemKind::Static(_, mt) => DefKind::Static(mt),\n                 ForeignItemKind::Type => DefKind::ForeignTy,\n             },\n             Node::TraitItem(item) => match item.kind {\n@@ -471,19 +471,15 @@ impl<'hir> Map<'hir> {\n     /// Returns the `BodyOwnerKind` of this `LocalDefId`.\n     ///\n     /// Panics if `LocalDefId` does not have an associated body.\n-    pub fn body_owner_kind(self, id: HirId) -> BodyOwnerKind {\n-        match self.get(id) {\n-            Node::Item(&Item { kind: ItemKind::Const(..), .. })\n-            | Node::TraitItem(&TraitItem { kind: TraitItemKind::Const(..), .. })\n-            | Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. })\n-            | Node::AnonConst(_) => BodyOwnerKind::Const,\n-            Node::Ctor(..)\n-            | Node::Item(&Item { kind: ItemKind::Fn(..), .. })\n-            | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })\n-            | Node::ImplItem(&ImplItem { kind: ImplItemKind::Fn(..), .. }) => BodyOwnerKind::Fn,\n-            Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),\n-            Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,\n-            node => bug!(\"{:#?} is not a body node\", node),\n+    pub fn body_owner_kind(self, def_id: LocalDefId) -> BodyOwnerKind {\n+        match self.tcx.def_kind(def_id) {\n+            DefKind::Const | DefKind::AssocConst | DefKind::InlineConst | DefKind::AnonConst => {\n+                BodyOwnerKind::Const\n+            }\n+            DefKind::Ctor(..) | DefKind::Fn | DefKind::AssocFn => BodyOwnerKind::Fn,\n+            DefKind::Closure | DefKind::Generator => BodyOwnerKind::Closure,\n+            DefKind::Static(mt) => BodyOwnerKind::Static(mt),\n+            dk => bug!(\"{:?} is not a body node: {:?}\", def_id, dk),\n         }\n     }\n \n@@ -494,16 +490,17 @@ impl<'hir> Map<'hir> {\n     /// This should only be used for determining the context of a body, a return\n     /// value of `Some` does not always suggest that the owner of the body is `const`,\n     /// just that it has to be checked as if it were.\n-    pub fn body_const_context(self, did: LocalDefId) -> Option<ConstContext> {\n-        let hir_id = self.local_def_id_to_hir_id(did);\n-        let ccx = match self.body_owner_kind(hir_id) {\n+    pub fn body_const_context(self, def_id: LocalDefId) -> Option<ConstContext> {\n+        let ccx = match self.body_owner_kind(def_id) {\n             BodyOwnerKind::Const => ConstContext::Const,\n             BodyOwnerKind::Static(mt) => ConstContext::Static(mt),\n \n-            BodyOwnerKind::Fn if self.tcx.is_constructor(did.to_def_id()) => return None,\n-            BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(did.to_def_id()) => ConstContext::ConstFn,\n+            BodyOwnerKind::Fn if self.tcx.is_constructor(def_id.to_def_id()) => return None,\n+            BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(def_id.to_def_id()) => {\n+                ConstContext::ConstFn\n+            }\n             BodyOwnerKind::Fn\n-                if self.tcx.has_attr(did.to_def_id(), sym::default_method_body_is_const) =>\n+                if self.tcx.has_attr(def_id.to_def_id(), sym::default_method_body_is_const) =>\n             {\n                 ConstContext::ConstFn\n             }"}, {"sha": "b2dd67fb16dce8bc907cf0532a18b767ea2de03a", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -950,9 +950,8 @@ fn write_mir_sig(tcx: TyCtxt<'_>, body: &Body<'_>, w: &mut dyn Write) -> io::Res\n     match (kind, body.source.promoted) {\n         (_, Some(i)) => write!(w, \"{:?} in \", i)?,\n         (DefKind::Const | DefKind::AssocConst, _) => write!(w, \"const \")?,\n-        (DefKind::Static, _) => {\n-            write!(w, \"static {}\", if tcx.is_mutable_static(def_id) { \"mut \" } else { \"\" })?\n-        }\n+        (DefKind::Static(hir::Mutability::Not), _) => write!(w, \"static \")?,\n+        (DefKind::Static(hir::Mutability::Mut), _) => write!(w, \"static mut \")?,\n         (_, _) if is_function => write!(w, \"fn \")?,\n         (DefKind::AnonConst | DefKind::InlineConst, _) => {} // things like anon const, not an item\n         _ => bug!(\"Unexpected def kind {:?}\", kind),"}, {"sha": "783fe970679fb26f18ebd902ff55e8063d7fd362", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -586,12 +586,6 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n-    /// Returns `Some(mutability)` if the node pointed to by `def_id` is a static item.\n-    query static_mutability(def_id: DefId) -> Option<hir::Mutability> {\n-        desc { |tcx| \"looking up static mutability of `{}`\", tcx.def_path_str(def_id) }\n-        separate_provide_extern\n-    }\n-\n     /// Returns `Some(generator_kind)` if the node pointed to by `def_id` is a generator.\n     query generator_kind(def_id: DefId) -> Option<hir::GeneratorKind> {\n         desc { |tcx| \"looking up generator kind of `{}`\", tcx.def_path_str(def_id) }"}, {"sha": "0efa59221465e682f22515b8253759302cd915c2", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -2103,7 +2103,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         match instance {\n             ty::InstanceDef::Item(def) => match self.def_kind(def.did) {\n                 DefKind::Const\n-                | DefKind::Static\n+                | DefKind::Static(..)\n                 | DefKind::AssocConst\n                 | DefKind::Ctor(..)\n                 | DefKind::AnonConst"}, {"sha": "e03af41291c74e3c2919202a0d03d550e12cc600", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -1185,7 +1185,7 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted: None }) => {\n                 match self.tcx().def_kind(def.did) {\n-                    DefKind::Static | DefKind::Const | DefKind::AssocConst => {\n+                    DefKind::Static(..) | DefKind::Const | DefKind::AssocConst => {\n                         p!(print_value_path(def.did, substs))\n                     }\n                     _ => {"}, {"sha": "7d9a917d04c761d1186ec86959d9d252ec81745d", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -533,8 +533,14 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     /// Returns `true` if the node pointed to by `def_id` is a `static` item.\n+    #[inline]\n     pub fn is_static(self, def_id: DefId) -> bool {\n-        self.static_mutability(def_id).is_some()\n+        matches!(self.def_kind(def_id), DefKind::Static(_))\n+    }\n+\n+    #[inline]\n+    pub fn static_mutability(self, def_id: DefId) -> Option<hir::Mutability> {\n+        if let DefKind::Static(mt) = self.def_kind(def_id) { Some(mt) } else { None }\n     }\n \n     /// Returns `true` if this is a `static` item with the `#[thread_local]` attribute.\n@@ -543,6 +549,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     /// Returns `true` if the node pointed to by `def_id` is a mutable `static` item.\n+    #[inline]\n     pub fn is_mutable_static(self, def_id: DefId) -> bool {\n         self.static_mutability(def_id) == Some(hir::Mutability::Mut)\n     }"}, {"sha": "901635dc488a7c42fa99f9c472a3b900fc0fd94d", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -41,7 +41,7 @@ crate fn mir_built<'tcx>(\n /// Construct the MIR for a given `DefId`.\n fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_> {\n     let id = tcx.hir().local_def_id_to_hir_id(def.did);\n-    let body_owner_kind = tcx.hir().body_owner_kind(id);\n+    let body_owner_kind = tcx.hir().body_owner_kind(def.did);\n     let typeck_results = tcx.typeck_opt_const_arg(def);\n \n     // Ensure unsafeck and abstract const building is ran before we steal the THIR.\n@@ -802,7 +802,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         check_overflow |= tcx.sess.overflow_checks();\n         // Constants always need overflow checks.\n         check_overflow |= matches!(\n-            tcx.hir().body_owner_kind(hir_id),\n+            tcx.hir().body_owner_kind(def.did),\n             hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_)\n         );\n "}, {"sha": "e6afc89baa03b4dad31299108929584c07283f2c", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -523,7 +523,7 @@ impl<'tcx> Cx<'tcx> {\n                                         }\n                                     }\n \n-                                    Res::Def(DefKind::Static, def_id) => {\n+                                    Res::Def(DefKind::Static(_), def_id) => {\n                                         InlineAsmOperand::SymStatic { def_id }\n                                     }\n \n@@ -901,7 +901,7 @@ impl<'tcx> Cx<'tcx> {\n \n             // We encode uses of statics as a `*&STATIC` where the `&STATIC` part is\n             // a constant reference (or constant raw pointer for `static mut`) in MIR\n-            Res::Def(DefKind::Static, id) => {\n+            Res::Def(DefKind::Static(_), id) => {\n                 let ty = self.tcx.static_ptr_ty(id);\n                 let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);\n                 let kind = if self.tcx.is_thread_local_static(id) {"}, {"sha": "57aec86785657c286e2771f102e90de6c7cc891c", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -420,7 +420,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n             _ => {\n                 let pattern_error = match res {\n                     Res::Def(DefKind::ConstParam, _) => PatternError::ConstParamInPattern(span),\n-                    Res::Def(DefKind::Static, _) => PatternError::StaticInPattern(span),\n+                    Res::Def(DefKind::Static(_), _) => PatternError::StaticInPattern(span),\n                     _ => PatternError::NonConstPath(span),\n                 };\n                 self.errors.push(pattern_error);"}, {"sha": "b6bb56990eddee36237e67340fe70d25b4803290", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -59,11 +59,10 @@ impl<'tcx> MirPass<'tcx> for Inline {\n }\n \n fn inline<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) -> bool {\n-    let def_id = body.source.def_id();\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n+    let def_id = body.source.def_id().expect_local();\n \n     // Only do inlining into fn bodies.\n-    if !tcx.hir().body_owner_kind(hir_id).is_fn_or_closure() {\n+    if !tcx.hir().body_owner_kind(def_id).is_fn_or_closure() {\n         return false;\n     }\n     if body.source.promoted.is_some() {\n@@ -77,9 +76,10 @@ fn inline<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) -> bool {\n     }\n \n     let param_env = tcx.param_env_reveal_all_normalized(def_id);\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n     let param_env = rustc_trait_selection::traits::normalize_param_env_or_error(\n         tcx,\n-        def_id,\n+        def_id.to_def_id(),\n         param_env,\n         ObligationCause::misc(body.span, hir_id),\n     );"}, {"sha": "c6a99aae588afcd501b66964eeb671db40cc3bfc", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -158,7 +158,7 @@ fn mark_used_by_default_parameters<'tcx>(\n         | DefKind::Fn\n         | DefKind::Const\n         | DefKind::ConstParam\n-        | DefKind::Static\n+        | DefKind::Static(_)\n         | DefKind::Ctor(_, _)\n         | DefKind::AssocFn\n         | DefKind::AssocConst"}, {"sha": "7b21ab32f4fcde352ed6fd48d78f27b0c1a1a89d", "filename": "compiler/rustc_passes/src/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fregion.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -734,7 +734,7 @@ impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n \n     fn visit_body(&mut self, body: &'tcx hir::Body<'tcx>) {\n         let body_id = body.id();\n-        let owner_id = self.tcx.hir().body_owner(body_id);\n+        let owner_id = self.tcx.hir().body_owner_def_id(body_id);\n \n         debug!(\n             \"visit_body(id={:?}, span={:?}, body.id={:?}, cx.parent={:?})\","}, {"sha": "85168aad1c3f004010a018883fb54ff25d80965d", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -553,7 +553,7 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n         }\n         match def_kind {\n             // No type privacy, so can be directly marked as reachable.\n-            DefKind::Const | DefKind::Static | DefKind::TraitAlias | DefKind::TyAlias => {\n+            DefKind::Const | DefKind::Static(_) | DefKind::TraitAlias | DefKind::TyAlias => {\n                 if vis.is_accessible_from(module.to_def_id(), self.tcx) {\n                     self.update(def_id, level);\n                 }\n@@ -1243,12 +1243,12 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n         let def = def.filter(|(kind, _)| {\n             matches!(\n                 kind,\n-                DefKind::AssocFn | DefKind::AssocConst | DefKind::AssocTy | DefKind::Static\n+                DefKind::AssocFn | DefKind::AssocConst | DefKind::AssocTy | DefKind::Static(_)\n             )\n         });\n         if let Some((kind, def_id)) = def {\n             let is_local_static =\n-                if let DefKind::Static = kind { def_id.is_local() } else { false };\n+                if let DefKind::Static(_) = kind { def_id.is_local() } else { false };\n             if !self.item_is_accessible(def_id) && !is_local_static {\n                 let sess = self.tcx.sess;\n                 let sm = sess.source_map();"}, {"sha": "b706547f7fcb58818cff8d090d0746e8ce024e67", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -701,8 +701,8 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             }\n \n             // These items live in the value namespace.\n-            ItemKind::Static(..) => {\n-                let res = Res::Def(DefKind::Static, def_id);\n+            ItemKind::Static(_, mt, _) => {\n+                let res = Res::Def(DefKind::Static(mt), def_id);\n                 self.r.define(parent, ident, ValueNS, (res, vis, sp, expansion));\n             }\n             ItemKind::Const(..) => {\n@@ -907,7 +907,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         let def_id = local_def_id.to_def_id();\n         let (def_kind, ns) = match item.kind {\n             ForeignItemKind::Fn(..) => (DefKind::Fn, ValueNS),\n-            ForeignItemKind::Static(..) => (DefKind::Static, ValueNS),\n+            ForeignItemKind::Static(_, mt, _) => (DefKind::Static(mt), ValueNS),\n             ForeignItemKind::TyAlias(..) => (DefKind::ForeignTy, TypeNS),\n             ForeignItemKind::MacCall(_) => unreachable!(),\n         };\n@@ -963,7 +963,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             Res::Def(\n                 DefKind::Fn\n                 | DefKind::AssocFn\n-                | DefKind::Static\n+                | DefKind::Static(_)\n                 | DefKind::Const\n                 | DefKind::AssocConst\n                 | DefKind::Ctor(..),"}, {"sha": "400adf20cba7c234d61ab3134e505c27bc5e14b5", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -300,7 +300,7 @@ impl<'a> PathSource<'a> {\n                 Res::Def(\n                     DefKind::Ctor(_, CtorKind::Const | CtorKind::Fn)\n                         | DefKind::Const\n-                        | DefKind::Static\n+                        | DefKind::Static(_)\n                         | DefKind::Fn\n                         | DefKind::AssocFn\n                         | DefKind::AssocConst\n@@ -1830,7 +1830,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 }\n                 Some(res)\n             }\n-            Res::Def(DefKind::Ctor(..) | DefKind::Const | DefKind::Static, _) => {\n+            Res::Def(DefKind::Ctor(..) | DefKind::Const | DefKind::Static(_), _) => {\n                 // This is unambiguously a fresh binding, either syntactically\n                 // (e.g., `IDENT @ PAT` or `ref IDENT`) or because `IDENT` resolves\n                 // to something unusable as a pattern (e.g., constructor function),"}, {"sha": "08a990c65fff759a98af16c8b38b1da75dcecdba", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -701,7 +701,7 @@ impl<'tcx> SaveContext<'tcx> {\n                 let parent_def_id = self.tcx.parent(def_id).unwrap();\n                 Some(Ref { kind: RefKind::Type, span, ref_id: id_from_def_id(parent_def_id) })\n             }\n-            Res::Def(HirDefKind::Static | HirDefKind::Const | HirDefKind::AssocConst, _) => {\n+            Res::Def(HirDefKind::Static(_) | HirDefKind::Const | HirDefKind::AssocConst, _) => {\n                 Some(Ref { kind: RefKind::Variable, span, ref_id: id_from_def_id(res.def_id()) })\n             }\n             Res::Def(HirDefKind::AssocFn, decl_id) => {"}, {"sha": "0d522702e67217e7e373865606b9b2fe4ab8e5c6", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -2186,7 +2186,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n \n             // Case 3. Reference to a top-level value.\n-            DefKind::Fn | DefKind::Const | DefKind::ConstParam | DefKind::Static => {\n+            DefKind::Fn | DefKind::Const | DefKind::ConstParam | DefKind::Static(_) => {\n                 path_segs.push(PathSeg(def_id, last));\n             }\n "}, {"sha": "308de574ac25fb8e11fb901ec433d95330149fcc", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -184,7 +184,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         hir::Path {\n                             res:\n                                 hir::def::Res::Def(\n-                                    hir::def::DefKind::Static | hir::def::DefKind::Const,\n+                                    hir::def::DefKind::Static(_) | hir::def::DefKind::Const,\n                                     def_id,\n                                 ),\n                             .."}, {"sha": "f040755bde7209ae7a8d6d569606e40802d2c0ca", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -52,7 +52,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             wbcx.visit_node_id(param.pat.span, param.hir_id);\n         }\n         // Type only exists for constants and statics, not functions.\n-        match self.tcx.hir().body_owner_kind(item_id) {\n+        match self.tcx.hir().body_owner_kind(item_def_id) {\n             hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => {\n                 wbcx.visit_node_id(body.value.span, item_id);\n             }"}, {"sha": "3078eba9dc2459089896e7fa4864880530da4727", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -85,7 +85,6 @@ pub fn provide(providers: &mut Providers) {\n         impl_trait_ref,\n         impl_polarity,\n         is_foreign_item,\n-        static_mutability,\n         generator_kind,\n         codegen_fn_attrs,\n         asm_target_features,\n@@ -2602,20 +2601,6 @@ fn is_foreign_item(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     }\n }\n \n-fn static_mutability(tcx: TyCtxt<'_>, def_id: DefId) -> Option<hir::Mutability> {\n-    match tcx.hir().get_if_local(def_id) {\n-        Some(\n-            Node::Item(&hir::Item { kind: hir::ItemKind::Static(_, mutbl, _), .. })\n-            | Node::ForeignItem(&hir::ForeignItem {\n-                kind: hir::ForeignItemKind::Static(_, mutbl),\n-                ..\n-            }),\n-        ) => Some(mutbl),\n-        Some(_) => None,\n-        _ => bug!(\"static_mutability applied to non-local def-id {:?}\", def_id),\n-    }\n-}\n-\n fn generator_kind(tcx: TyCtxt<'_>, def_id: DefId) -> Option<hir::GeneratorKind> {\n     match tcx.hir().get_if_local(def_id) {\n         Some(Node::Expr(&rustc_hir::Expr {"}, {"sha": "055e391d7069efe430ead0b1dd899a1405ad360f", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -723,10 +723,8 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         let upvars = tcx.upvars_mentioned(self.body_owner);\n \n         // For purposes of this function, generator and closures are equivalent.\n-        let body_owner_is_closure = matches!(\n-            tcx.hir().body_owner_kind(tcx.hir().local_def_id_to_hir_id(self.body_owner)),\n-            hir::BodyOwnerKind::Closure,\n-        );\n+        let body_owner_is_closure =\n+            matches!(tcx.hir().body_owner_kind(self.body_owner), hir::BodyOwnerKind::Closure,);\n \n         // If we have a nested closure, we want to include the fake reads present in the nested closure.\n         if let Some(fake_reads) = self.mc.typeck_results.closure_fake_reads.get(&closure_def_id) {"}, {"sha": "85e9a670ffbf16de5502c2a581ec0ccb3a9c8e90", "filename": "compiler/rustc_typeck/src/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -404,7 +404,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             )\n             | Res::SelfCtor(..) => Ok(self.cat_rvalue(hir_id, span, expr_ty)),\n \n-            Res::Def(DefKind::Static, _) => {\n+            Res::Def(DefKind::Static(_), _) => {\n                 Ok(PlaceWithHirId::new(hir_id, expr_ty, PlaceBase::StaticItem, Vec::new()))\n             }\n "}, {"sha": "8c19cf973fc86862a3c12e29db57a015df8f7156", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -100,7 +100,7 @@ crate fn try_inline(\n             record_extern_fqn(cx, did, ItemType::Module);\n             clean::ModuleItem(build_module(cx, did, visited))\n         }\n-        Res::Def(DefKind::Static, did) => {\n+        Res::Def(DefKind::Static(_), did) => {\n             record_extern_fqn(cx, did, ItemType::Static);\n             clean::StaticItem(build_static(cx, did, cx.tcx.is_mutable_static(did)))\n         }"}, {"sha": "c94824f5c646ef6d49b9b20a24747c3b10b2e871", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -397,7 +397,7 @@ crate fn register_res(cx: &mut DocContext<'_>, res: Res) -> DefId {\n         // These should be added to the cache using `record_extern_fqn`.\n         Res::Def(\n             kind @ (AssocTy | AssocFn | AssocConst | Variant | Fn | TyAlias | Enum | Trait | Struct\n-            | Union | Mod | ForeignTy | Const | Static | Macro(..) | TraitAlias),\n+            | Union | Mod | ForeignTy | Const | Static(_) | Macro(..) | TraitAlias),\n             i,\n         ) => (i, kind.into()),\n         // This is part of a trait definition or trait impl; document the trait."}, {"sha": "f8660c296cb0bdb02aa0c722ebc0f7c8e265d09f", "filename": "src/librustdoc/formats/item_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fitem_type.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -111,7 +111,7 @@ impl From<DefKind> for ItemType {\n             DefKind::Fn => Self::Function,\n             DefKind::Mod => Self::Module,\n             DefKind::Const => Self::Constant,\n-            DefKind::Static => Self::Static,\n+            DefKind::Static(_) => Self::Static,\n             DefKind::Struct => Self::Struct,\n             DefKind::Union => Self::Union,\n             DefKind::Trait => Self::Trait,"}, {"sha": "afe16d7f67ff98b2da00f8178bb0d3d3012e2d16", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -10,6 +10,7 @@ use rustc_hir::def::{\n     PerNS,\n };\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_ID};\n+use rustc_hir::Mutability;\n use rustc_middle::ty::{DefIdTree, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug, ty};\n use rustc_session::lint::Lint;\n@@ -130,7 +131,7 @@ impl Res {\n             DefKind::Const | DefKind::ConstParam | DefKind::AssocConst | DefKind::AnonConst => {\n                 \"const\"\n             }\n-            DefKind::Static => \"static\",\n+            DefKind::Static(_) => \"static\",\n             DefKind::Macro(MacroKind::Derive) => \"derive\",\n             // Now handle things that don't have a specific disambiguator\n             _ => match kind\n@@ -1737,7 +1738,7 @@ impl Disambiguator {\n                 \"union\" => Kind(DefKind::Union),\n                 \"module\" | \"mod\" => Kind(DefKind::Mod),\n                 \"const\" | \"constant\" => Kind(DefKind::Const),\n-                \"static\" => Kind(DefKind::Static),\n+                \"static\" => Kind(DefKind::Static(Mutability::Not)),\n                 \"function\" | \"fn\" | \"method\" => Kind(DefKind::Fn),\n                 \"derive\" => Kind(DefKind::Macro(MacroKind::Derive)),\n                 \"type\" => NS(Namespace::TypeNS),\n@@ -2091,7 +2092,7 @@ fn resolution_failure(\n                                 return;\n                             }\n                             Trait | TyAlias | ForeignTy | OpaqueTy | TraitAlias | TyParam\n-                            | Static => \"associated item\",\n+                            | Static(_) => \"associated item\",\n                             Impl | GlobalAsm => unreachable!(\"not a path\"),\n                         }\n                     } else {"}, {"sha": "c5948707c812448d88a8ec9c45eb7c97c31f4bb3", "filename": "src/tools/clippy/clippy_lints/src/arithmetic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Farithmetic.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -139,11 +139,11 @@ impl<'tcx> LateLintPass<'tcx> for Arithmetic {\n     }\n \n     fn check_body(&mut self, cx: &LateContext<'_>, body: &hir::Body<'_>) {\n-        let body_owner = cx.tcx.hir().body_owner(body.id());\n+        let body_owner = cx.tcx.hir().body_owner_def_id(body.id());\n \n         match cx.tcx.hir().body_owner_kind(body_owner) {\n             hir::BodyOwnerKind::Static(_) | hir::BodyOwnerKind::Const => {\n-                let body_span = cx.tcx.hir().span(body_owner);\n+                let body_span = cx.tcx.def_span(body_owner);\n \n                 if let Some(span) = self.const_span {\n                     if span.contains(body_span) {"}, {"sha": "72e86804ed2c3b4136a534d024ae6d7d59283b8a", "filename": "src/tools/clippy/clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -273,7 +273,7 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n                         }\n                         return false;  // no need to walk further *on the variable*\n                     }\n-                    Res::Def(DefKind::Static | DefKind::Const, ..) => {\n+                    Res::Def(DefKind::Static (_)| DefKind::Const, ..) => {\n                         if index_used_directly {\n                             self.indexed_directly.insert(\n                                 seqvar.segments[0].ident.name,"}, {"sha": "a63422d2a36ac530c14b75843a7bd38905c58774", "filename": "src/tools/clippy/clippy_lints/src/loops/while_immutable_condition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -104,7 +104,7 @@ impl<'a, 'tcx> VarCollectorVisitor<'a, 'tcx> {\n                     Res::Local(hir_id) => {\n                         self.ids.insert(hir_id);\n                     },\n-                    Res::Def(DefKind::Static, def_id) => {\n+                    Res::Def(DefKind::Static(_), def_id) => {\n                         let mutable = self.cx.tcx.is_mutable_static(def_id);\n                         self.def_ids.insert(def_id, mutable);\n                     },"}, {"sha": "6f2307d8f18ff1505acd84603ff2003c3f0e1feb", "filename": "src/tools/clippy/clippy_lints/src/methods/expect_fun_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -93,7 +93,7 @@ pub(super) fn check<'tcx>(\n             },\n             hir::ExprKind::Path(ref p) => matches!(\n                 cx.qpath_res(p, arg.hir_id),\n-                hir::def::Res::Def(hir::def::DefKind::Const | hir::def::DefKind::Static, _)\n+                hir::def::Res::Def(hir::def::DefKind::Const | hir::def::DefKind::Static(_), _)\n             ),\n             _ => false,\n         }"}, {"sha": "1188258504461d8e15d9c43219c557946388af7d", "filename": "src/tools/clippy/clippy_lints/src/shadow.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21a554caf680b74ee6270d3a61b0336b643c5456/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a554caf680b74ee6270d3a61b0336b643c5456/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs?ref=21a554caf680b74ee6270d3a61b0336b643c5456", "patch": "@@ -139,14 +139,20 @@ impl<'tcx> LateLintPass<'tcx> for Shadow {\n \n     fn check_body(&mut self, cx: &LateContext<'_>, body: &Body<'_>) {\n         let hir = cx.tcx.hir();\n-        if !matches!(hir.body_owner_kind(hir.body_owner(body.id())), BodyOwnerKind::Closure) {\n+        if !matches!(\n+            hir.body_owner_kind(hir.body_owner_def_id(body.id())),\n+            BodyOwnerKind::Closure\n+        ) {\n             self.bindings.push(FxHashMap::default());\n         }\n     }\n \n     fn check_body_post(&mut self, cx: &LateContext<'_>, body: &Body<'_>) {\n         let hir = cx.tcx.hir();\n-        if !matches!(hir.body_owner_kind(hir.body_owner(body.id())), BodyOwnerKind::Closure) {\n+        if !matches!(\n+            hir.body_owner_kind(hir.body_owner_def_id(body.id())),\n+            BodyOwnerKind::Closure\n+        ) {\n             self.bindings.pop();\n         }\n     }"}]}