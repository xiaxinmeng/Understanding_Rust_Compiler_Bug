{"sha": "7ea85333ffbeaf255e94e25770bdbdeaf4222684", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYTg1MzMzZmZiZWFmMjU1ZTk0ZTI1NzcwYmRiZGVhZjQyMjI2ODQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-17T11:45:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-17T11:45:45Z"}, "message": "auto merge of #9239 : steveklabnik/rust/rustpkg_tutorial, r=catamorphism\n\nFirst shot at a new tutorial for rustpkg. /cc @catamorphism\r\n\r\nRight now, I'm linking to my sample package on GitHub, I'm not sure that everyone would be comfortable with me having that there. Maybe under the mozilla org? I think having one to install and hold up as a default makes sense.", "tree": {"sha": "c04815e99027d16533a72b5b592369ec42af07ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c04815e99027d16533a72b5b592369ec42af07ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ea85333ffbeaf255e94e25770bdbdeaf4222684", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ea85333ffbeaf255e94e25770bdbdeaf4222684", "html_url": "https://github.com/rust-lang/rust/commit/7ea85333ffbeaf255e94e25770bdbdeaf4222684", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ea85333ffbeaf255e94e25770bdbdeaf4222684/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a706aab1c5990a37378f2b3fdfef8410c3743b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a706aab1c5990a37378f2b3fdfef8410c3743b2", "html_url": "https://github.com/rust-lang/rust/commit/2a706aab1c5990a37378f2b3fdfef8410c3743b2"}, {"sha": "cf2253ba3fb24ef3ab466b79e199dd2130a1e9c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf2253ba3fb24ef3ab466b79e199dd2130a1e9c2", "html_url": "https://github.com/rust-lang/rust/commit/cf2253ba3fb24ef3ab466b79e199dd2130a1e9c2"}], "stats": {"total": 225, "additions": 225, "deletions": 0}, "files": [{"sha": "43d83093eea571fed84e28af889c98e93562d788", "filename": "doc/tutorial-rustpkg.md", "status": "added", "additions": 223, "deletions": 0, "changes": 223, "blob_url": "https://github.com/rust-lang/rust/blob/7ea85333ffbeaf255e94e25770bdbdeaf4222684/doc%2Ftutorial-rustpkg.md", "raw_url": "https://github.com/rust-lang/rust/raw/7ea85333ffbeaf255e94e25770bdbdeaf4222684/doc%2Ftutorial-rustpkg.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-rustpkg.md?ref=7ea85333ffbeaf255e94e25770bdbdeaf4222684", "patch": "@@ -0,0 +1,223 @@\n+% Rust Packaging Tutorial\n+\n+# Introduction\n+\n+Sharing is caring. Rust comes with a tool, `rustpkg`, which allows you to\n+package up your Rust code and share it with other people. This tutorial will\n+get you started on all of the concepts and commands you need to give the gift\n+of Rust code to someone else.\n+\n+## Installing External Packages\n+\n+First, let's try to use an external package somehow. I've made a sample package\n+called `hello` to demonstrate how to do so.  Here's how `hello` is used:\n+\n+~~~~\n+extern mod hello;\n+\n+fn main() {\n+    hello::world();\n+}\n+~~~~\n+\n+Easy! But if you try to compile this, you'll get an error:\n+\n+~~~~ {.notrust}\n+$ rustc main.rs \n+main.rs:1:0: 1:17 error: can't find crate for `hello`\n+main.rs:1 extern mod hello;\n+          ^~~~~~~~~~~~~~~~~\n+\n+~~~~\n+\n+This makes sense, as we haven't gotten it from anywhere yet!  Luckily for us,\n+`rustpkg` has an easy way to fetch others' code: the `install` command. It's\n+used like this:\n+\n+~~~ {.notrust}\n+$ rustpkg install pkg_id\n+~~~\n+\n+This will install a package named 'pkg_id' into your current Rust environment.\n+I called it 'pkg_id' in this example because `rustpkg` calls this a 'package\n+identifier.' When using it with an external package like this, it's often a\n+URI fragment.  You see, Rust has no central authority for packages. You can\n+build your own `hello` library if you want, and that's fine. We'd both host\n+them in different places and different projects would rely on whichever version\n+they preferred.\n+\n+To install the `hello` library, simply run this in your terminal:\n+\n+~~~ {.notrust}\n+$ rustpkg install github.com/steveklabnik/hello\n+~~~\n+\n+You should see a message that looks like this:\n+\n+~~~ {.notrust}\n+note: Installed package github.com/steveklabnik/hello-0.1 to /some/path/.rust\n+~~~\n+\n+Now, compiling our example should work:\n+\n+~~~ {.notrust}\n+$ rustc main.rs\n+$ ./main \n+Hello, world.\n+~~~\n+\n+Simple! That's all it takes.\n+\n+## Workspaces\n+\n+Before we can talk about how to make packages of your own, you have to\n+understand the big concept with `rustpkg`: workspaces. A 'workspace' is simply\n+a directory that has certain sub-directories that `rustpkg` expects. Different\n+Rust projects will go into different workspaces.\n+\n+A workspace consists of any directory that has the following\n+directories:\n+\n+* `src`: The directory where all the source code goes.\n+* `build`: This directory contains all of the build output.\n+* `lib`: The directory where any libraries distributed with the package go.\n+* `bin`: This directory holds any binaries distributed with the package.\n+\n+There are also default file names you'll want to follow as well:\n+\n+* `main.rs`: A file that's going to become an executable.\n+* `lib.rs`: A file that's going to become a library.\n+\n+## Building your own Package\n+\n+Now that you've got workspaces down, let's build your own copy of `hello`. Go\n+to wherever you keep your personal projects, and let's make all of the\n+directories we'll need. I'll refer to this personal project directory as\n+`~/src` for the rest of this tutorial.\n+\n+### Creating our workspace\n+\n+~~~ {.notrust}\n+$ cd ~/src\n+$ mkdir -p hello/src/hello\n+$ cd hello\n+~~~\n+\n+Easy enough! Let's do one or two more things that are nice to do:\n+\n+~~~ {.notrust}\n+$ git init .\n+$ cat > README.md\n+# hello\n+\n+A simple package for Rust.\n+\n+## Installation\n+\n+```\n+$ rustpkg install github.com/YOUR_USERNAME/hello\n+```\n+^D\n+$ cat > .gitignore\n+.rust\n+build\n+^D\n+$ git commit -am \"Initial commit.\"\n+~~~\n+\n+If you're not familliar with the `cat >` idiom, it will make files with the\n+text you type inside. Control-D (`^D`) ends the text for the file.\n+\n+Anyway, we've got a README and a `.gitignore`. Let's talk about that\n+`.gitignore` for a minute: we are ignoring two directories, `build` and\n+`.rust`. `build`, as we discussed earlier, is for build artifacts, and we don't\n+want to check those into a repository. `.rust` is a directory that `rustpkg`\n+uses to keep track of its own settings, as well as the source code of any other\n+external packages that this workspace uses. This is where that `rustpkg\n+install` puts all of its files. Those are also not to go into our repository,\n+so we ignore it all as well.\n+\n+Next, let's add a source file:\n+\n+~~~\n+#[desc = \"A hello world Rust package.\"];\n+#[license = \"MIT\"];\n+\n+pub fn world() {\n+    println(\"Hello, world.\");\n+}\n+~~~\n+\n+Put this into `src/hello/lib.rs`. Let's talk about each of these attributes:\n+\n+### Crate attributes for packages\n+\n+`license` is equally simple: the license we want this code to have. I chose MIT\n+here, but you should pick whatever license makes the most sense for you.\n+\n+`desc` is a description of the package and what it does. This should just be a\n+sentence or two.\n+\n+### Building your package\n+\n+Building your package is simple:\n+\n+~~~ {.notrust}\n+$ rustpkg build hello\n+~~~\n+\n+This will compile `src/hello/lib.rs` into a library. After this process\n+completes, you'll want to check out `build`:\n+\n+~~~ {.notrust}\n+$ ls build/x86_64-unknown-linux-gnu/hello/\n+libhello-ed8619dad9ce7d58-0.1.0.so\n+~~~\n+\n+This directory naming structure is called a 'build triple,' and is because I'm\n+on 64 bit Linux. Yours may differ based on platform.\n+\n+You'll also notice that `src/hello/lib.rs` turned into\n+`libhello-ed8619dad9ce7d58-0.1.0.so`. This is a simple combination of the\n+library name, a hash of its content, and the version.\n+\n+Now that your library builds, you'll want to commit:\n+\n+~~~ {.notrust}\n+$ git add src\n+$ git commit -m \"Adding source code.\"\n+~~~\n+\n+If you're using GitHub, after creating the project, do this:\n+\n+~~~ {.notrust}\n+$ git remote add origin git@github.com:YOUR_USERNAME/hello.git\n+$ git push origin -u master\n+~~~\n+\n+Now you can install and use it! Go anywhere else in your filesystem:\n+\n+~~~ {.notrust}\n+$ cd ~/src/foo\n+$ rustpkg install github/YOUR_USERNAME/hello\n+WARNING: The Rust package manager is experimental and may be unstable\n+note: Installed package github.com/YOUR_USERNAME/hello-0.1 to /home/yourusername/src/hello/.rust\n+~~~\n+\n+That's it!\n+\n+## More resources\n+\n+There's a lot more going on with `rustpkg`, this is just to get you started.\n+Check out [the rustpkg manual](rustpkg.html) for the full details on how to\n+customize `rustpkg`.\n+\n+A tag was created on GitHub specifically for `rustpkg`-related issues. You can\n+[see all the Issues for rustpkg\n+here](https://github.com/mozilla/rust/issues?direction=desc&labels=A-pkg&sort=created&state=open),\n+with bugs as well as new feature plans. `rustpkg` is still under development,\n+and so may be a bit flaky at the moment.\n+\n+You may also want to check out [this blog\n+post](http://tim.dreamwidth.org/1820526.html), which contains some of the early\n+design decisions and justifications."}, {"sha": "7a9bb4adf65e352cb40533e7ffcae57a6b8fcbd5", "filename": "doc/tutorial.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ea85333ffbeaf255e94e25770bdbdeaf4222684/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/7ea85333ffbeaf255e94e25770bdbdeaf4222684/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=7ea85333ffbeaf255e94e25770bdbdeaf4222684", "patch": "@@ -2979,13 +2979,15 @@ tutorials on individual topics.\n * [The foreign function interface][ffi]\n * [Containers and iterators](tutorial-container.html)\n * [Error-handling and Conditions](tutorial-conditions.html)\n+* [Packaging up Rust code](rustpkg)\n \n There is further documentation on the [wiki], however those tend to be even more out of date as this document.\n \n [borrow]: tutorial-borrowed-ptr.html\n [tasks]: tutorial-tasks.html\n [macros]: tutorial-macros.html\n [ffi]: tutorial-ffi.html\n+[rustpkg]: tutorial-rustpkg.html\n \n [wiki]: https://github.com/mozilla/rust/wiki/Docs\n "}]}