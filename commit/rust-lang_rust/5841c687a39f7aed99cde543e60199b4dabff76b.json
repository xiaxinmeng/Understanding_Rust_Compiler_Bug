{"sha": "5841c687a39f7aed99cde543e60199b4dabff76b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NDFjNjg3YTM5ZjdhZWQ5OWNkZTU0M2U2MDE5OWI0ZGFiZmY3NmI=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-13T20:20:10Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-16T21:30:35Z"}, "message": "Improve query cycle error message", "tree": {"sha": "76f58d7a31a7a0fd36e28e08a0e6b4b34c5471b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76f58d7a31a7a0fd36e28e08a0e6b4b34c5471b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5841c687a39f7aed99cde543e60199b4dabff76b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5841c687a39f7aed99cde543e60199b4dabff76b", "html_url": "https://github.com/rust-lang/rust/commit/5841c687a39f7aed99cde543e60199b4dabff76b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5841c687a39f7aed99cde543e60199b4dabff76b/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21f6e55ce99d59733cc49977a1a416882da1c808", "url": "https://api.github.com/repos/rust-lang/rust/commits/21f6e55ce99d59733cc49977a1a416882da1c808", "html_url": "https://github.com/rust-lang/rust/commit/21f6e55ce99d59733cc49977a1a416882da1c808"}], "stats": {"total": 50, "additions": 32, "deletions": 18}, "files": [{"sha": "374406158c1d51a5695dfd0ae615e4dd686d1e8c", "filename": "src/librustc/ty/maps/job.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5841c687a39f7aed99cde543e60199b4dabff76b/src%2Flibrustc%2Fty%2Fmaps%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5841c687a39f7aed99cde543e60199b4dabff76b/src%2Flibrustc%2Fty%2Fmaps%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fjob.rs?ref=5841c687a39f7aed99cde543e60199b4dabff76b", "patch": "@@ -31,6 +31,7 @@ pub(super) enum QueryResult<'tcx, T> {\n /// A span and a query key\n #[derive(Clone, Debug)]\n pub struct QueryInfo<'tcx> {\n+    /// The span for a reason this query was required\n     pub span: Span,\n     pub query: Query<'tcx>,\n }\n@@ -73,13 +74,22 @@ impl<'tcx> QueryJob<'tcx> {\n             cycle.insert(0, job.info.clone());\n \n             if &*job as *const _ == self as *const _ {\n-                break;\n+                // This is the end of the cycle\n+                // The span entry we included was for the usage\n+                // of the cycle itself, and not part of the cycle\n+                // Replace it with the span which caused the cycle to form\n+                cycle[0].span = span;\n+                // Find out why the cycle itself was used\n+                let usage = job.parent.as_ref().map(|parent| {\n+                    (job.info.span, parent.info.query.clone())\n+                });\n+                return Err(CycleError { usage, cycle });\n             }\n \n             current_job = job.parent.clone();\n         }\n \n-        Err(CycleError { span, cycle })\n+        panic!(\"did not find a cycle\")\n     }\n \n     /// Signals to waiters that the query is complete."}, {"sha": "003fe71b946f5613d892c89834b2ce4d9587898c", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5841c687a39f7aed99cde543e60199b4dabff76b/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5841c687a39f7aed99cde543e60199b4dabff76b/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=5841c687a39f7aed99cde543e60199b4dabff76b", "patch": "@@ -64,8 +64,8 @@ pub(super) trait GetCacheInternal<'tcx>: QueryDescription<'tcx> + Sized {\n \n #[derive(Clone)]\n pub(super) struct CycleError<'tcx> {\n-    /// The span of the reason the first query in `cycle` ran the last query in `cycle`\n-    pub(super) span: Span,\n+    /// The query and related span which uses the cycle\n+    pub(super) usage: Option<(Span, Query<'tcx>)>,\n     pub(super) cycle: Vec<QueryInfo<'tcx>>,\n }\n \n@@ -81,7 +81,7 @@ pub(super) enum TryGetLock<'a, 'tcx: 'a, T, D: QueryDescription<'tcx> + 'a> {\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n-    pub(super) fn report_cycle(self, CycleError { span, cycle: stack }: CycleError<'gcx>)\n+    pub(super) fn report_cycle(self, CycleError { usage, cycle: stack }: CycleError<'gcx>)\n         -> DiagnosticBuilder<'a>\n     {\n         assert!(!stack.is_empty());\n@@ -95,23 +95,27 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // (And cycle errors around impls tend to occur during the\n         // collect/coherence phases anyhow.)\n         item_path::with_forced_impl_filename_line(|| {\n-            let span = fix_span(span, &stack.first().unwrap().query);\n-            let mut err =\n-                struct_span_err!(self.sess, span, E0391,\n-                                 \"cyclic dependency detected\");\n-            err.span_label(span, \"cyclic reference\");\n-\n-            err.span_note(fix_span(stack[0].span, &stack[0].query),\n-                          &format!(\"the cycle begins when {}...\", stack[0].query.describe(self)));\n-\n-            for &QueryInfo { span, ref query, .. } in &stack[1..] {\n-                err.span_note(fix_span(span, query),\n-                              &format!(\"...which then requires {}...\", query.describe(self)));\n+            let span = fix_span(stack[1 % stack.len()].span, &stack[0].query);\n+            let mut err = struct_span_err!(self.sess,\n+                                           span,\n+                                           E0391,\n+                                           \"cycle detected when {}\",\n+                                           stack[0].query.describe(self));\n+\n+            for i in 1..stack.len() {\n+                let query = &stack[i].query;\n+                let span = fix_span(stack[(i + 1) % stack.len()].span, query);\n+                err.span_note(span, &format!(\"...which requires {}...\", query.describe(self)));\n             }\n \n-            err.note(&format!(\"...which then again requires {}, completing the cycle.\",\n+            err.note(&format!(\"...which again requires {}, completing the cycle\",\n                               stack[0].query.describe(self)));\n \n+            if let Some((span, query)) = usage {\n+                err.span_note(fix_span(span, &query),\n+                              &format!(\"cycle used when {}\", query.describe(self)));\n+            }\n+\n             return err\n         })\n     }"}]}