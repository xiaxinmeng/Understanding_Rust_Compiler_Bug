{"sha": "277416edcd9932c68d05bc9a76c52b1297d6044d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NzQxNmVkY2Q5OTMyYzY4ZDA1YmM5YTc2YzUyYjEyOTdkNjA0NGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-17T23:55:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-17T23:55:53Z"}, "message": "Auto merge of #29900 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #29612, #29888, #29889, #29890, #29891, #29892\n- Failed merges:", "tree": {"sha": "705e5295f1e1e6016d820d463b5c68c89cde85ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/705e5295f1e1e6016d820d463b5c68c89cde85ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/277416edcd9932c68d05bc9a76c52b1297d6044d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/277416edcd9932c68d05bc9a76c52b1297d6044d", "html_url": "https://github.com/rust-lang/rust/commit/277416edcd9932c68d05bc9a76c52b1297d6044d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/277416edcd9932c68d05bc9a76c52b1297d6044d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "841e36eb21b35becaf369c6730691a61d8b127d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/841e36eb21b35becaf369c6730691a61d8b127d9", "html_url": "https://github.com/rust-lang/rust/commit/841e36eb21b35becaf369c6730691a61d8b127d9"}, {"sha": "5c99fb78c6ce6c3da27b3434c874e2d11faeada9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c99fb78c6ce6c3da27b3434c874e2d11faeada9", "html_url": "https://github.com/rust-lang/rust/commit/5c99fb78c6ce6c3da27b3434c874e2d11faeada9"}], "stats": {"total": 211, "additions": 178, "deletions": 33}, "files": [{"sha": "b1aa400d1e2a7fbc349503fc4a4a5572f3c933f5", "filename": "src/doc/reference.md", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/277416edcd9932c68d05bc9a76c52b1297d6044d/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/277416edcd9932c68d05bc9a76c52b1297d6044d/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=277416edcd9932c68d05bc9a76c52b1297d6044d", "patch": "@@ -147,11 +147,11 @@ a form of constant expression, so is evaluated (primarily) at compile time.\n \n |                                              | Example         | `#` sets   | Characters  | Escapes             |\n |----------------------------------------------|-----------------|------------|-------------|---------------------|\n-| [Character](#character-literals)             | `'H'`           | `N/A`      | All Unicode | `\\'` & [Byte](#byte-escapes) & [Unicode](#unicode-escapes) |\n-| [String](#string-literals)                   | `\"hello\"`       | `N/A`      | All Unicode | `\\\"` & [Byte](#byte-escapes) & [Unicode](#unicode-escapes) |\n+| [Character](#character-literals)             | `'H'`           | `N/A`      | All Unicode | [Quote](#quote-escapes) & [Byte](#byte-escapes) & [Unicode](#unicode-escapes) |\n+| [String](#string-literals)                   | `\"hello\"`       | `N/A`      | All Unicode | [Quote](#quote-escapes) & [Byte](#byte-escapes) & [Unicode](#unicode-escapes) |\n | [Raw](#raw-string-literals)                  | `r#\"hello\"#`    | `0...`     | All Unicode | `N/A`                                                      |\n-| [Byte](#byte-literals)                       | `b'H'`          | `N/A`      | All ASCII   | `\\'` & [Byte](#byte-escapes)                               |\n-| [Byte string](#byte-string-literals)         | `b\"hello\"`      | `N/A`      | All ASCII   | `\\\"` & [Byte](#byte-escapes)                               |\n+| [Byte](#byte-literals)                       | `b'H'`          | `N/A`      | All ASCII   | [Quote](#quote-escapes) & [Byte](#byte-escapes)                               |\n+| [Byte string](#byte-string-literals)         | `b\"hello\"`      | `N/A`      | All ASCII   | [Quote](#quote-escapes) & [Byte](#byte-escapes)                               |\n | [Raw byte string](#raw-byte-string-literals) | `br#\"hello\"#`   | `0...`     | All ASCII   | `N/A`                                                      |\n \n ##### Byte escapes\n@@ -163,12 +163,19 @@ a form of constant expression, so is evaluated (primarily) at compile time.\n | `\\r` | Carriage return |\n | `\\t` | Tab |\n | `\\\\` | Backslash |\n+| `\\0` | Null |\n \n ##### Unicode escapes\n |   | Name |\n |---|------|\n | `\\u{7FFF}` | 24-bit Unicode character code (up to 6 digits) |\n \n+##### Quote escapes\n+|   | Name |\n+|---|------|\n+| `\\'` | Single quote |\n+| `\\\"` | Double quote |\n+\n ##### Numbers\n \n | [Number literals](#number-literals)`*` | Example | Exponentiation | Suffixes |\n@@ -2415,9 +2422,9 @@ in meaning to declaring the item outside the statement block.\n > **Note**: there is no implicit capture of the function's dynamic environment when\n > declaring a function-local item.\n \n-#### Variable declarations\n+#### `let` statements\n \n-A _variable declaration_ introduces a new set of variable, given by a pattern. The\n+A _`let` statement_ introduces a new set of variables, given by a pattern. The\n pattern may be followed by a type annotation, and/or an initializer expression.\n When no type annotation is given, the compiler will infer the type, or signal\n an error if insufficient type information is available for definite inference.\n@@ -3190,10 +3197,11 @@ let message = match maybe_digit {\n \n ### `if let` expressions\n \n-An `if let` expression is semantically identical to an `if` expression but in place\n-of a condition expression it expects a refutable let statement. If the value of the\n-expression on the right hand side of the let statement matches the pattern, the corresponding\n-block will execute, otherwise flow proceeds to the first `else` block that follows.\n+An `if let` expression is semantically identical to an `if` expression but in\n+place of a condition expression it expects a `let` statement with a refutable\n+pattern. If the value of the expression on the right hand side of the `let`\n+statement matches the pattern, the corresponding block will execute, otherwise\n+flow proceeds to the first `else` block that follows.\n \n ```\n let dish = (\"Ham\", \"Eggs\");\n@@ -3211,11 +3219,11 @@ if let (\"Ham\", b) = dish {\n \n ### `while let` loops\n \n-A `while let` loop is semantically identical to a `while` loop but in place of a\n-condition expression it expects a refutable let statement. If the value of the\n-expression on the right hand side of the let statement matches the pattern, the\n-loop body block executes and control returns to the pattern matching statement.\n-Otherwise, the while expression completes.\n+A `while let` loop is semantically identical to a `while` loop but in place of\n+a condition expression it expects `let` statement with a refutable pattern. If\n+the value of the expression on the right hand side of the `let` statement\n+matches the pattern, the loop body block executes and control returns to the\n+pattern matching statement. Otherwise, the while expression completes.\n \n ### `return` expressions\n "}, {"sha": "d949bf33b6eeaa458e9a4a051744d824602d3025", "filename": "src/doc/trpl/ffi.md", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/277416edcd9932c68d05bc9a76c52b1297d6044d/src%2Fdoc%2Ftrpl%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/277416edcd9932c68d05bc9a76c52b1297d6044d/src%2Fdoc%2Ftrpl%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fffi.md?ref=277416edcd9932c68d05bc9a76c52b1297d6044d", "patch": "@@ -8,6 +8,23 @@ foreign code. Rust is currently unable to call directly into a C++ library, but\n snappy includes a C interface (documented in\n [`snappy-c.h`](https://github.com/google/snappy/blob/master/snappy-c.h)).\n \n+## A note about libc\n+\n+Many of these examples use [the `libc` crate][libc], which provides various\n+type definitions for C types, among other things. If you\u2019re trying these\n+examples yourself, you\u2019ll need to add `libc` to your `Cargo.toml`:\n+\n+```toml\n+[dependencies]\n+libc = \"0.2.0\"\n+```\n+\n+[libc]: https://crates.io/crates/libc\n+\n+and add `extern crate libc;` to your crate root.\n+\n+## Calling foreign functions\n+\n The following is a minimal example of calling a foreign function which will\n compile if snappy is installed:\n "}, {"sha": "68bbd0c98993dad5e3ac960a73cdfb936efb8bfc", "filename": "src/doc/trpl/lifetimes.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/277416edcd9932c68d05bc9a76c52b1297d6044d/src%2Fdoc%2Ftrpl%2Flifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/277416edcd9932c68d05bc9a76c52b1297d6044d/src%2Fdoc%2Ftrpl%2Flifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Flifetimes.md?ref=277416edcd9932c68d05bc9a76c52b1297d6044d", "patch": "@@ -116,7 +116,8 @@ reference to an `i32` with the lifetime `'a`\u2019.\n \n # In `struct`s\n \n-You\u2019ll also need explicit lifetimes when working with [`struct`][structs]s:\n+You\u2019ll also need explicit lifetimes when working with [`struct`][structs]s that\n+contain references:\n \n ```rust\n struct Foo<'a> {"}, {"sha": "020f7e37a4a1de4437506ab08135dc873f36a1b7", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 132, "deletions": 16, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/277416edcd9932c68d05bc9a76c52b1297d6044d/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/277416edcd9932c68d05bc9a76c52b1297d6044d/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=277416edcd9932c68d05bc9a76c52b1297d6044d", "patch": "@@ -2375,32 +2375,118 @@ impl<'a, I: Iterator + ?Sized> Iterator for &'a mut I {\n }\n \n /// Conversion from an `Iterator`.\n+///\n+/// By implementing `FromIterator` for a type, you define how it will be\n+/// created from an iterator. This is common for types which describe a\n+/// collection of some kind.\n+///\n+/// `FromIterator`'s [`from_iter()`] is rarely called explicitly, and is instead\n+/// used through [`Iterator`]'s [`collect()`] method. See [`collect()`]'s\n+/// documentation for more examples.\n+///\n+/// [`from_iter()`]: #tymethod.from_iter\n+/// [`Iterator`]: trait.Iterator.html\n+/// [`collect()`]: trait.Iterator.html#method.collect\n+///\n+/// See also: [`IntoIterator`].\n+///\n+/// [`IntoIterator`]: trait.IntoIterator.html\n+///\n+/// # Examples\n+///\n+/// Basic usage:\n+///\n+/// ```\n+/// use std::iter::FromIterator;\n+///\n+/// let five_fives = std::iter::repeat(5).take(5);\n+///\n+/// let v = Vec::from_iter(five_fives);\n+///\n+/// assert_eq!(v, vec![5, 5, 5, 5, 5]);\n+/// ```\n+///\n+/// Using [`collect()`] to implicitly use `FromIterator`:\n+///\n+/// ```\n+/// let five_fives = std::iter::repeat(5).take(5);\n+///\n+/// let v: Vec<i32> = five_fives.collect();\n+///\n+/// assert_eq!(v, vec![5, 5, 5, 5, 5]);\n+/// ```\n+///\n+/// Implementing `FromIterator` for your type:\n+///\n+/// ```\n+/// use std::iter::FromIterator;\n+///\n+/// // A sample collection, that's just a wrapper over Vec<T>\n+/// #[derive(Debug)]\n+/// struct MyCollection(Vec<i32>);\n+///\n+/// // Let's give it some methods so we can create one and add things\n+/// // to it.\n+/// impl MyCollection {\n+///     fn new() -> MyCollection {\n+///         MyCollection(Vec::new())\n+///     }\n+///\n+///     fn add(&mut self, elem: i32) {\n+///         self.0.push(elem);\n+///     }\n+/// }\n+///\n+/// // and we'll implement FromIterator\n+/// impl FromIterator<i32> for MyCollection {\n+///     fn from_iter<I: IntoIterator<Item=i32>>(iterator: I) -> Self {\n+///         let mut c = MyCollection::new();\n+///\n+///         for i in iterator {\n+///             c.add(i);\n+///         }\n+///\n+///         c\n+///     }\n+/// }\n+///\n+/// // Now we can make a new iterator...\n+/// let iter = (0..5).into_iter();\n+///\n+/// // ... and make a MyCollection out of it\n+/// let c = MyCollection::from_iter(iter);\n+///\n+/// assert_eq!(c.0, vec![0, 1, 2, 3, 4]);\n+///\n+/// // collect works too!\n+///\n+/// let iter = (0..5).into_iter();\n+/// let c: MyCollection = iter.collect();\n+///\n+/// assert_eq!(c.0, vec![0, 1, 2, 3, 4]);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented=\"a collection of type `{Self}` cannot be \\\n                           built from an iterator over elements of type `{A}`\"]\n pub trait FromIterator<A>: Sized {\n-    /// Builds a container with elements from something iterable.\n+    /// Creates a value from an iterator.\n+    ///\n+    /// See the [module-level documentation] for more.\n+    ///\n+    /// [module-level documentation]: trait.FromIterator.html\n     ///\n     /// # Examples\n     ///\n-    /// ```\n-    /// use std::collections::HashSet;\n-    /// use std::iter::FromIterator;\n+    /// Basic usage:\n     ///\n-    /// let colors_vec = vec![\"red\", \"red\", \"yellow\", \"blue\"];\n-    /// let colors_set = HashSet::<&str>::from_iter(colors_vec);\n-    /// assert_eq!(colors_set.len(), 3);\n     /// ```\n+    /// use std::iter::FromIterator;\n     ///\n-    /// `FromIterator` is more commonly used implicitly via the\n-    /// `Iterator::collect` method:\n+    /// let five_fives = std::iter::repeat(5).take(5);\n     ///\n-    /// ```\n-    /// use std::collections::HashSet;\n+    /// let v = Vec::from_iter(five_fives);\n     ///\n-    /// let colors_vec = vec![\"red\", \"red\", \"yellow\", \"blue\"];\n-    /// let colors_set = colors_vec.into_iter().collect::<HashSet<&str>>();\n-    /// assert_eq!(colors_set.len(), 3);\n+    /// assert_eq!(v, vec![5, 5, 5, 5, 5]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn from_iter<T: IntoIterator<Item=A>>(iterator: T) -> Self;\n@@ -2415,9 +2501,13 @@ pub trait FromIterator<A>: Sized {\n /// One benefit of implementing `IntoIterator` is that your type will [work\n /// with Rust's `for` loop syntax](index.html#for-loops-and-intoiterator).\n ///\n+/// See also: [`FromIterator`].\n+///\n+/// [`FromIterator`]: trait.FromIterator.html\n+///\n /// # Examples\n ///\n-/// Vectors implement `IntoIterator`:\n+/// Basic usage:\n ///\n /// ```\n /// let v = vec![1, 2, 3];\n@@ -2489,7 +2579,33 @@ pub trait IntoIterator {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type IntoIter: Iterator<Item=Self::Item>;\n \n-    /// Consumes `Self` and returns an iterator over it.\n+    /// Creates an iterator from a value.\n+    ///\n+    /// See the [module-level documentation] for more.\n+    ///\n+    /// [module-level documentation]: trait.IntoIterator.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// let v = vec![1, 2, 3];\n+    ///\n+    /// let mut iter = v.into_iter();\n+    ///\n+    /// let n = iter.next();\n+    /// assert_eq!(Some(1), n);\n+    ///\n+    /// let n = iter.next();\n+    /// assert_eq!(Some(2), n);\n+    ///\n+    /// let n = iter.next();\n+    /// assert_eq!(Some(3), n);\n+    ///\n+    /// let n = iter.next();\n+    /// assert_eq!(None, n);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn into_iter(self) -> Self::IntoIter;\n }"}, {"sha": "263d01a5d26379edac6d599b6d605fc1ea9e28bf", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/277416edcd9932c68d05bc9a76c52b1297d6044d/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/277416edcd9932c68d05bc9a76c52b1297d6044d/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=277416edcd9932c68d05bc9a76c52b1297d6044d", "patch": "@@ -10,12 +10,15 @@\n \n //! # The Rust Core Library\n //!\n-//! The Rust Core Library is the dependency-free foundation of [The\n+//! The Rust Core Library is the dependency-free[^free] foundation of [The\n //! Rust Standard Library](../std/index.html). It is the portable glue\n //! between the language and its libraries, defining the intrinsic and\n //! primitive building blocks of all Rust code. It links to no\n //! upstream libraries, no system libraries, and no libc.\n //!\n+//! [^free]: Strictly speaking, there are some symbols which are needed but\n+//!          they aren't always neccesary.\n+//!\n //! The core library is *minimal*: it isn't even aware of heap allocation,\n //! nor does it provide concurrency or I/O. These things require\n //! platform integration, and this library is platform-agnostic."}]}