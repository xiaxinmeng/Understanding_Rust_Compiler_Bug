{"sha": "0711e11593e7d3ce7cffdb7bd966553e4a4f858f", "node_id": "C_kwDOAAsO6NoAKDA3MTFlMTE1OTNlN2QzY2U3Y2ZmZGI3YmQ5NjY1NTNlNGE0Zjg1OGY", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2022-03-21T07:05:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-21T07:05:38Z"}, "message": "rust-lang/portable-simd#267: fix big-endian bitmasks smaller than a byte", "tree": {"sha": "b3511a4bc6951e196cb5a66998430a8be6c58f9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3511a4bc6951e196cb5a66998430a8be6c58f9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0711e11593e7d3ce7cffdb7bd966553e4a4f858f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiOCPCCRBK7hj4Ov3rIwAA8GIIACv9XVp9xG6DiomOPmtK+QGR\njQNSTVnwoYcATZM7fzs9J2gnxB+RHjd8q/BCHZd0fXDXXPIxFLVplvWp+j7sqH2g\ntkm0XPKaLocAPUunqiDNqAkUvf8mb+QzJ6mwvIjDWgz7jidYFSqk/L79eL2mZ2xd\nGfuFLUTWkxgdY4dPXKmaTtjvJX4Kh7Xb20Jxh4l0wJavsGpsx5SlNGDqyB9r/Ilx\nN9dQkWb3PEh/h/aqeVQa/Yg/8gBFFvUzliIBeYLKIiXa5QBGYFODCZiyhhD1T0BC\neYqS2zI+a/7nTIaYFpOhQ100C4RKycJ7vbTcq1BErX8F6T/8T774HOTnjMASSfg=\n=jbC4\n-----END PGP SIGNATURE-----\n", "payload": "tree b3511a4bc6951e196cb5a66998430a8be6c58f9a\nparent 35e16a1e0652a0c2f351be8a23c18514bdd35f34\nparent 60555b57f1a61962e0df48cd303fbefff2e61ec3\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1647846338 -0700\ncommitter GitHub <noreply@github.com> 1647846338 -0700\n\nrust-lang/portable-simd#267: fix big-endian bitmasks smaller than a byte\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0711e11593e7d3ce7cffdb7bd966553e4a4f858f", "html_url": "https://github.com/rust-lang/rust/commit/0711e11593e7d3ce7cffdb7bd966553e4a4f858f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0711e11593e7d3ce7cffdb7bd966553e4a4f858f/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35e16a1e0652a0c2f351be8a23c18514bdd35f34", "url": "https://api.github.com/repos/rust-lang/rust/commits/35e16a1e0652a0c2f351be8a23c18514bdd35f34", "html_url": "https://github.com/rust-lang/rust/commit/35e16a1e0652a0c2f351be8a23c18514bdd35f34"}, {"sha": "60555b57f1a61962e0df48cd303fbefff2e61ec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/60555b57f1a61962e0df48cd303fbefff2e61ec3", "html_url": "https://github.com/rust-lang/rust/commit/60555b57f1a61962e0df48cd303fbefff2e61ec3"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "efa688b128fd07f4df819c2994494ce0ecaf334d", "filename": "crates/core_simd/src/masks/full_masks.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0711e11593e7d3ce7cffdb7bd966553e4a4f858f/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0711e11593e7d3ce7cffdb7bd966553e4a4f858f/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs?ref=0711e11593e7d3ce7cffdb7bd966553e4a4f858f", "patch": "@@ -68,14 +68,26 @@ where\n \n // Used for bitmask bit order workaround\n pub(crate) trait ReverseBits {\n-    fn reverse_bits(self) -> Self;\n+    // Reverse the least significant `n` bits of `self`.\n+    // (Remaining bits must be 0.)\n+    fn reverse_bits(self, n: usize) -> Self;\n }\n \n macro_rules! impl_reverse_bits {\n     { $($int:ty),* } => {\n         $(\n         impl ReverseBits for $int {\n-            fn reverse_bits(self) -> Self { <$int>::reverse_bits(self) }\n+            #[inline(always)]\n+            fn reverse_bits(self, n: usize) -> Self {\n+                let rev = <$int>::reverse_bits(self);\n+                let bitsize = core::mem::size_of::<$int>() * 8;\n+                if n < bitsize {\n+                    // Shift things back to the right\n+                    rev >> (bitsize - n)\n+                } else {\n+                    rev\n+                }\n+            }\n         }\n         )*\n     }\n@@ -137,7 +149,7 @@ where\n \n         // LLVM assumes bit order should match endianness\n         if cfg!(target_endian = \"big\") {\n-            bitmask.reverse_bits()\n+            bitmask.reverse_bits(LANES)\n         } else {\n             bitmask\n         }\n@@ -150,7 +162,7 @@ where\n     {\n         // LLVM assumes bit order should match endianness\n         let bitmask = if cfg!(target_endian = \"big\") {\n-            bitmask.reverse_bits()\n+            bitmask.reverse_bits(LANES)\n         } else {\n             bitmask\n         };"}, {"sha": "d10c6610f5051be8b1b7ae0e7e25baeda1621a79", "filename": "crates/core_simd/tests/masks.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0711e11593e7d3ce7cffdb7bd966553e4a4f858f/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0711e11593e7d3ce7cffdb7bd966553e4a4f858f/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmasks.rs?ref=0711e11593e7d3ce7cffdb7bd966553e4a4f858f", "patch": "@@ -80,6 +80,25 @@ macro_rules! test_mask_api {\n                 assert_eq!(bitmask, 0b1000001101001001);\n                 assert_eq!(core_simd::Mask::<$type, 16>::from_bitmask(bitmask), mask);\n             }\n+\n+            #[test]\n+            fn roundtrip_bitmask_conversion_short() {\n+                use core_simd::ToBitMask;\n+\n+                let values = [\n+                    false, false, false, true,\n+                ];\n+                let mask = core_simd::Mask::<$type, 4>::from_array(values);\n+                let bitmask = mask.to_bitmask();\n+                assert_eq!(bitmask, 0b1000);\n+                assert_eq!(core_simd::Mask::<$type, 4>::from_bitmask(bitmask), mask);\n+\n+                let values = [true, false];\n+                let mask = core_simd::Mask::<$type, 2>::from_array(values);\n+                let bitmask = mask.to_bitmask();\n+                assert_eq!(bitmask, 0b01);\n+                assert_eq!(core_simd::Mask::<$type, 2>::from_bitmask(bitmask), mask);\n+            }\n         }\n     }\n }"}]}