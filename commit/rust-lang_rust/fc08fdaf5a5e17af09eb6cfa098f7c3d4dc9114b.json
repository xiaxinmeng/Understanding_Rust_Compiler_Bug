{"sha": "fc08fdaf5a5e17af09eb6cfa098f7c3d4dc9114b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMDhmZGFmNWE1ZTE3YWYwOWViNmNmYTA5OGY3YzNkNGRjOTExNGI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-26T22:37:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-26T22:37:11Z"}, "message": "Merge #7457\n\n7457: Add no-buffering file logging and wait for a debugger option. r=vsrs a=vsrs\n\nAdds two command line flags: `--no-buffering` and `--wait-dbg`. \r\n\r\nNot  sure if someone else needs this, but personally I found both flags extremely useful trying to figure out why RA does not work with Visual Studio. Or better to say why Visual Studio does not work with RA.\n\nCo-authored-by: vsrs <vit@conrlab.com>", "tree": {"sha": "1fd1e5d10660f2de31c604806893958a84c4ff4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fd1e5d10660f2de31c604806893958a84c4ff4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc08fdaf5a5e17af09eb6cfa098f7c3d4dc9114b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgEJmXCRBK7hj4Ov3rIwAAdHIIAJEfKgdNK9ZuG0xKLe47JfFz\nNgs3BiXqcCQWMtig6iD4o9U7H6fYVgNaChw/UiZutn1afrLhRmbB5tQTz/LKG2Lg\nQdDuK9Hlc9mhamSGuS9bhzcsPPOnsEwjDUqGlMTk4kxsydRFrTX2Gsg0d8mvKwBR\nqEhRwie/OfDst2B5bjdZ+OIwEFcPj4nylCZ4s3JQBo58qSmc/df58365hUGH9w+I\nsdBBaxAgSOdrahkkRSMztE7Bj1VfIxbrtI8JhCx2V42WuSCxHsRNBnkvsquyUND+\n6jjab1jLA6f73cyGcfF4dDJqUPb0L7SUofLg53acgsq/XYmDM8wbM+LV1acBCkM=\n=I5Sh\n-----END PGP SIGNATURE-----\n", "payload": "tree 1fd1e5d10660f2de31c604806893958a84c4ff4f\nparent 8775bc4be18fac9c7935c1edeacf048c515e7518\nparent 5f1eb544da9f33f3402914ba5c4318032cbad0c3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1611700631 +0000\ncommitter GitHub <noreply@github.com> 1611700631 +0000\n\nMerge #7457\n\n7457: Add no-buffering file logging and wait for a debugger option. r=vsrs a=vsrs\n\nAdds two command line flags: `--no-buffering` and `--wait-dbg`. \r\n\r\nNot  sure if someone else needs this, but personally I found both flags extremely useful trying to figure out why RA does not work with Visual Studio. Or better to say why Visual Studio does not work with RA.\n\nCo-authored-by: vsrs <vit@conrlab.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc08fdaf5a5e17af09eb6cfa098f7c3d4dc9114b", "html_url": "https://github.com/rust-lang/rust/commit/fc08fdaf5a5e17af09eb6cfa098f7c3d4dc9114b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc08fdaf5a5e17af09eb6cfa098f7c3d4dc9114b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8775bc4be18fac9c7935c1edeacf048c515e7518", "url": "https://api.github.com/repos/rust-lang/rust/commits/8775bc4be18fac9c7935c1edeacf048c515e7518", "html_url": "https://github.com/rust-lang/rust/commit/8775bc4be18fac9c7935c1edeacf048c515e7518"}, {"sha": "5f1eb544da9f33f3402914ba5c4318032cbad0c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f1eb544da9f33f3402914ba5c4318032cbad0c3", "html_url": "https://github.com/rust-lang/rust/commit/5f1eb544da9f33f3402914ba5c4318032cbad0c3"}], "stats": {"total": 118, "additions": 97, "deletions": 21}, "files": [{"sha": "021b8f048cf2c3f8efae6a9da797650edbf0e238", "filename": ".vscode/launch.json", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc08fdaf5a5e17af09eb6cfa098f7c3d4dc9114b/.vscode%2Flaunch.json", "raw_url": "https://github.com/rust-lang/rust/raw/fc08fdaf5a5e17af09eb6cfa098f7c3d4dc9114b/.vscode%2Flaunch.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.vscode%2Flaunch.json?ref=fc08fdaf5a5e17af09eb6cfa098f7c3d4dc9114b", "patch": "@@ -120,6 +120,12 @@\n       \"sourceMaps\": true,\n       \"outFiles\": [ \"${workspaceFolder}/editors/code/out/tests/unit/**/*.js\" ],\n       \"preLaunchTask\": \"Pretest\"\n+    },\n+    {\n+      \"name\": \"Win Attach to Server\",\n+      \"type\": \"cppvsdbg\",\n+      \"processId\":\"${command:pickProcess}\",\n+      \"request\": \"attach\"\n     }\n   ]\n }"}, {"sha": "37d8414f4e60bf6437536bda6417e178f92b964a", "filename": "crates/rust-analyzer/src/bin/args.rs", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/fc08fdaf5a5e17af09eb6cfa098f7c3d4dc9114b/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc08fdaf5a5e17af09eb6cfa098f7c3d4dc9114b/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs?ref=fc08fdaf5a5e17af09eb6cfa098f7c3d4dc9114b", "patch": "@@ -14,7 +14,9 @@ use vfs::AbsPathBuf;\n pub(crate) struct Args {\n     pub(crate) verbosity: Verbosity,\n     pub(crate) log_file: Option<PathBuf>,\n+    pub(crate) no_buffering: bool,\n     pub(crate) command: Command,\n+    pub(crate) wait_dbg: bool,\n }\n \n pub(crate) enum Command {\n@@ -47,11 +49,17 @@ FLAGS:\n     -vv, --spammy\n     -q,  --quiet      Set verbosity\n \n-    --log-file <PATH> Log to the specified filed instead of stderr\n+    --log-file <PATH> Log to the specified file instead of stderr\n+    --no-log-buffering\n+                      Flush log records to the file immediately\n+\n+    --wait-dbg        Wait until a debugger is attached to.\n+                      The flag is valid for debug builds only\n \n ENVIRONMENTAL VARIABLES:\n     RA_LOG            Set log filter in env_logger format\n     RA_PROFILE        Enable hierarchical profiler\n+    RA_WAIT_DBG       If set acts like a --wait-dbg flag\n \n COMMANDS:\n \n@@ -114,6 +122,8 @@ impl Args {\n                 verbosity: Verbosity::Normal,\n                 log_file: None,\n                 command: Command::Version,\n+                no_buffering: false,\n+                wait_dbg: false,\n             });\n         }\n \n@@ -130,21 +140,41 @@ impl Args {\n             (false, true, true) => bail!(\"Invalid flags: -q conflicts with -v\"),\n         };\n         let log_file = matches.opt_value_from_str(\"--log-file\")?;\n+        let no_buffering = matches.contains(\"--no-log-buffering\");\n+        let wait_dbg = matches.contains(\"--wait-dbg\");\n \n         if matches.contains([\"-h\", \"--help\"]) {\n             eprintln!(\"{}\", HELP);\n-            return Ok(Args { verbosity, log_file: None, command: Command::Help });\n+            return Ok(Args {\n+                verbosity,\n+                log_file: None,\n+                command: Command::Help,\n+                no_buffering,\n+                wait_dbg,\n+            });\n         }\n \n         if matches.contains(\"--print-config-schema\") {\n-            return Ok(Args { verbosity, log_file, command: Command::PrintConfigSchema });\n+            return Ok(Args {\n+                verbosity,\n+                log_file,\n+                command: Command::PrintConfigSchema,\n+                no_buffering,\n+                wait_dbg,\n+            });\n         }\n \n         let subcommand = match matches.subcommand()? {\n             Some(it) => it,\n             None => {\n                 finish_args(matches)?;\n-                return Ok(Args { verbosity, log_file, command: Command::RunServer });\n+                return Ok(Args {\n+                    verbosity,\n+                    log_file,\n+                    command: Command::RunServer,\n+                    no_buffering,\n+                    wait_dbg,\n+                });\n             }\n         };\n         let command = match subcommand.as_str() {\n@@ -219,11 +249,17 @@ impl Args {\n             },\n             _ => {\n                 eprintln!(\"{}\", HELP);\n-                return Ok(Args { verbosity, log_file: None, command: Command::Help });\n+                return Ok(Args {\n+                    verbosity,\n+                    log_file: None,\n+                    command: Command::Help,\n+                    no_buffering,\n+                    wait_dbg,\n+                });\n             }\n         };\n         finish_args(matches)?;\n-        Ok(Args { verbosity, log_file, command })\n+        Ok(Args { verbosity, log_file, command, no_buffering, wait_dbg })\n     }\n }\n "}, {"sha": "14887c5ccfefb10132fe2a8ce4a50e667c3edf44", "filename": "crates/rust-analyzer/src/bin/logger.rs", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fc08fdaf5a5e17af09eb6cfa098f7c3d4dc9114b/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc08fdaf5a5e17af09eb6cfa098f7c3d4dc9114b/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs?ref=fc08fdaf5a5e17af09eb6cfa098f7c3d4dc9114b", "patch": "@@ -4,7 +4,7 @@\n \n use std::{\n     fs::File,\n-    io::{BufWriter, Write},\n+    io::{self, BufWriter, Write},\n };\n \n use env_logger::filter::{Builder, Filter};\n@@ -14,10 +14,11 @@ use parking_lot::Mutex;\n pub(crate) struct Logger {\n     filter: Filter,\n     file: Option<Mutex<BufWriter<File>>>,\n+    no_buffering: bool,\n }\n \n impl Logger {\n-    pub(crate) fn new(log_file: Option<File>, filter: Option<&str>) -> Logger {\n+    pub(crate) fn new(log_file: Option<File>, no_buffering: bool, filter: Option<&str>) -> Logger {\n         let filter = {\n             let mut builder = Builder::new();\n             if let Some(filter) = filter {\n@@ -28,7 +29,7 @@ impl Logger {\n \n         let file = log_file.map(|it| Mutex::new(BufWriter::new(it)));\n \n-        Logger { filter, file }\n+        Logger { filter, file, no_buffering }\n     }\n \n     pub(crate) fn install(self) {\n@@ -46,7 +47,8 @@ impl Log for Logger {\n         if !self.filter.matches(record) {\n             return;\n         }\n-        match &self.file {\n+\n+        let should_flush = match &self.file {\n             Some(w) => {\n                 let _ = writeln!(\n                     w.lock(),\n@@ -55,19 +57,32 @@ impl Log for Logger {\n                     record.module_path().unwrap_or_default(),\n                     record.args(),\n                 );\n+                self.no_buffering\n+            }\n+            None => {\n+                eprintln!(\n+                    \"[{} {}] {}\",\n+                    record.level(),\n+                    record.module_path().unwrap_or_default(),\n+                    record.args(),\n+                );\n+                true // flush stderr unconditionally\n             }\n-            None => eprintln!(\n-                \"[{} {}] {}\",\n-                record.level(),\n-                record.module_path().unwrap_or_default(),\n-                record.args(),\n-            ),\n+        };\n+\n+        if should_flush {\n+            self.flush();\n         }\n     }\n \n     fn flush(&self) {\n-        if let Some(w) = &self.file {\n-            let _ = w.lock().flush();\n+        match &self.file {\n+            Some(w) => {\n+                let _ = w.lock().flush();\n+            }\n+            None => {\n+                let _ = io::stderr().flush();\n+            }\n         }\n     }\n }"}, {"sha": "088b17b03b79c430561a9e51a5708da8641ba7cd", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fc08fdaf5a5e17af09eb6cfa098f7c3d4dc9114b/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc08fdaf5a5e17af09eb6cfa098f7c3d4dc9114b/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=fc08fdaf5a5e17af09eb6cfa098f7c3d4dc9114b", "patch": "@@ -21,14 +21,25 @@ static ALLOC: jemallocator::Jemalloc = jemallocator::Jemalloc;\n \n fn main() {\n     if let Err(err) = try_main() {\n+        log::error!(\"Unexpected error: {}\", err);\n         eprintln!(\"{}\", err);\n         process::exit(101);\n     }\n }\n \n fn try_main() -> Result<()> {\n     let args = args::Args::parse()?;\n-    setup_logging(args.log_file)?;\n+\n+    #[cfg(debug_assertions)]\n+    if args.wait_dbg || env::var(\"RA_WAIT_DBG\").is_ok() {\n+        #[allow(unused_mut)]\n+        let mut d = 4;\n+        while d == 4 {\n+            d = 4;\n+        }\n+    }\n+\n+    setup_logging(args.log_file, args.no_buffering)?;\n     match args.command {\n         args::Command::RunServer => run_server()?,\n         args::Command::PrintConfigSchema => {\n@@ -56,7 +67,7 @@ fn try_main() -> Result<()> {\n     Ok(())\n }\n \n-fn setup_logging(log_file: Option<PathBuf>) -> Result<()> {\n+fn setup_logging(log_file: Option<PathBuf>, no_buffering: bool) -> Result<()> {\n     env::set_var(\"RUST_BACKTRACE\", \"short\");\n \n     let log_file = match log_file {\n@@ -69,7 +80,7 @@ fn setup_logging(log_file: Option<PathBuf>) -> Result<()> {\n         None => None,\n     };\n     let filter = env::var(\"RA_LOG\").ok();\n-    logger::Logger::new(log_file, filter.as_deref()).install();\n+    logger::Logger::new(log_file, no_buffering, filter.as_deref()).install();\n \n     tracing_setup::setup_tracing()?;\n "}, {"sha": "cc7a790ff462f5ffc303c37029e0cb8bba6621c7", "filename": "docs/dev/debugging.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc08fdaf5a5e17af09eb6cfa098f7c3d4dc9114b/docs%2Fdev%2Fdebugging.md", "raw_url": "https://github.com/rust-lang/rust/raw/fc08fdaf5a5e17af09eb6cfa098f7c3d4dc9114b/docs%2Fdev%2Fdebugging.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fdebugging.md?ref=fc08fdaf5a5e17af09eb6cfa098f7c3d4dc9114b", "patch": "@@ -57,6 +57,14 @@ To apply changes to an already running debug process, press <kbd>Ctrl+Shift+P</k\n \n - Go back to the `[Extension Development Host]` instance and hover over a Rust variable and your breakpoint should hit.\n \n+If you need to debug the server from the very beginning, including its initialization code, you can use the `--wait-dbg` command line argument or `RA_WAIT_DBG` environment variable. The server will spin at the beginning of the `try_main` function (see `crates\\rust-analyzer\\src\\bin\\main.rs`)\n+```rust\n+    let mut d = 4;\n+    while d == 4 { // set a breakpoint here and change the value\n+        d = 4;\n+    }\n+```\n+\n ## Demo\n \n - [Debugging TypeScript VScode extension](https://www.youtube.com/watch?v=T-hvpK6s4wM)."}]}