{"sha": "009525dc413ef10098d532b017a64f7595bff25b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwOTUyNWRjNDEzZWYxMDA5OGQ1MzJiMDE3YTY0Zjc1OTViZmYyNWI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-16T07:54:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-16T07:54:09Z"}, "message": "Merge branch 'master' into hack_branch_for_miri_do_not_delete_until_merged", "tree": {"sha": "827b9216506c41921cbb88d8b6d5245410185b6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/827b9216506c41921cbb88d8b6d5245410185b6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/009525dc413ef10098d532b017a64f7595bff25b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbTE8hCRBK7hj4Ov3rIwAAdHIIAHERad8qtgx67Ua6bEEVRMRr\nuJTyPjGnBQ+Ch3eT9s2YMydLVnDSPzLEITbzj0F6ae1pPza9Fl8vETf59pXvYt7g\nWSdhTw+XFGBvOJjr3/dH0wPnMUruETGG7vvBmEgmlMCQuURm0vJ3blWGhkUDurvC\nuoykIHv0pt9zd5jnxF/MsaowQO+p8BRcyGHgrXIN9vvCeYCClrhsODbAanwvjzFJ\nxA3FHQYvPio5vy2fXx8MSncsEoN21pyagVzVkj2M+jJSm1kSnbtXPpWU8VAufwL4\nilolZLIJrNf+X5k2n4TnEU8Als3/gS0GH6o/ugSLSEAmRl7av8AiKHg8boR1Cas=\n=MwtU\n-----END PGP SIGNATURE-----\n", "payload": "tree 827b9216506c41921cbb88d8b6d5245410185b6d\nparent 022bd13bee5c083578895ccc2b2675b9bd6e82ae\nparent d7ddad676cfb9dd961e763565c7e5d185e3246d2\nauthor Ralf Jung <post@ralfj.de> 1531727649 +0200\ncommitter GitHub <noreply@github.com> 1531727649 +0200\n\nMerge branch 'master' into hack_branch_for_miri_do_not_delete_until_merged"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/009525dc413ef10098d532b017a64f7595bff25b", "html_url": "https://github.com/rust-lang/rust/commit/009525dc413ef10098d532b017a64f7595bff25b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/009525dc413ef10098d532b017a64f7595bff25b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "022bd13bee5c083578895ccc2b2675b9bd6e82ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/022bd13bee5c083578895ccc2b2675b9bd6e82ae", "html_url": "https://github.com/rust-lang/rust/commit/022bd13bee5c083578895ccc2b2675b9bd6e82ae"}, {"sha": "d7ddad676cfb9dd961e763565c7e5d185e3246d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7ddad676cfb9dd961e763565c7e5d185e3246d2", "html_url": "https://github.com/rust-lang/rust/commit/d7ddad676cfb9dd961e763565c7e5d185e3246d2"}], "stats": {"total": 93, "additions": 44, "deletions": 49}, "files": [{"sha": "d515aad8bea519b250f995ec247dd7a0782408e0", "filename": "README.md", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/009525dc413ef10098d532b017a64f7595bff25b/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/009525dc413ef10098d532b017a64f7595bff25b/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=009525dc413ef10098d532b017a64f7595bff25b", "patch": "@@ -40,25 +40,6 @@ how to fix it, you could send a PR. :smile:\n cargo run --bin miri tests/run-pass-fullmir/vecs.rs # Or whatever test you like.\n ```\n \n-## Debugging\n-\n-Since the heart of miri (the main interpreter engine) lives in rustc, tracing\n-the interpreter requires a version of rustc compiled with tracing.  To this\n-end, you will have to compile your own rustc:\n-```\n-git clone https://github.com/rust-lang/rust/ rustc\n-cd rustc\n-cp config.toml.example config.toml\n-# Now edit `config.toml` and set `debug-assertions = true`\n-./x.py build src/rustc\n-rustup toolchain link custom build/x86_64-unknown-linux-gnu/stage2\n-```\n-The `build` step can take 30 to 60 minutes.\n-\n-Now, in the miri directory, you can `rustup override set custom` and re-build\n-everything.  Finally, if you now set `RUST_LOG=rustc_mir::interpret=trace` as\n-environment variable, you will get detailed step-by-step tracing information.\n-\n ## Running miri on your own project('s test suite)\n \n Install miri as a cargo subcommand with `cargo install --debug`.\n@@ -68,8 +49,8 @@ through miri.\n \n ## Running miri with full libstd\n \n-Per default libstd does not contain the MIR of non-polymorphic functions.  When\n-miri hits a call to such a function, execution terminates.  To fix this, it is\n+Per default libstd does not contain the MIR of non-polymorphic functions. When\n+miri hits a call to such a function, execution terminates. To fix this, it is\n possible to compile libstd with full MIR:\n \n ```sh\n@@ -91,6 +72,37 @@ your toolchain changes (e.g., when you update the nightly).\n You can also set `-Zmiri-start-fn` to make miri start evaluation with the\n `start_fn` lang item, instead of starting at the `main` function.\n \n+## Development and Debugging\n+\n+Since the heart of miri (the main interpreter engine) lives in rustc, working on\n+miri will often require using a locally built rustc. This includes getting a\n+trace of the execution, as distributed rustc has `trace!` disabled.\n+\n+The first-time setup for a local rustc looks as follows:\n+```\n+git clone https://github.com/rust-lang/rust/ rustc\n+cd rustc\n+cp config.toml.example config.toml\n+# Now edit `config.toml` and set `debug-assertions = true`\n+./x.py build src/rustc\n+# You may have to change the architecture in the next command\n+rustup toolchain link custom build/x86_64-unknown-linux-gnu/stage2\n+# Now cd to your miri directory\n+rustup override set custom\n+```\n+The `build` step can take 30 minutes and more.\n+\n+Now you can `cargo build` miri, and you can `cargo test --tests`.  (`--tests`\n+is needed to skip doctests because we have not built rustdoc for your custom\n+toolchain.) You can also set `RUST_LOG=rustc_mir::interpret=trace` as\n+environment variable to get a step-by-step trace.\n+\n+If you changed something in rustc and want to re-build, run\n+```\n+./x.py build src/rustc --keep-stage 0\n+```\n+This avoids rebuilding the entire stage 0, which can save a lot of time.\n+\n ## Contributing and getting help\n \n Check out the issues on this GitHub repository for some ideas. There's lots that"}, {"sha": "207324cfcb00c323fc098fc6c15b0004a18eb75d", "filename": "src/operator.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/009525dc413ef10098d532b017a64f7595bff25b/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009525dc413ef10098d532b017a64f7595bff25b/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=009525dc413ef10098d532b017a64f7595bff25b", "patch": "@@ -34,6 +34,8 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n         right: Scalar,\n         right_ty: ty::Ty<'tcx>,\n     ) -> EvalResult<'tcx, Option<(Scalar, bool)>> {\n+        trace!(\"ptr_op: {:?} {:?} {:?}\", left, bin_op, right);\n+\n         use rustc::mir::BinOp::*;\n         use rustc::ty::layout::Integer::*;\n         let usize = Primitive::Int(match self.memory.pointer_size().bytes() {\n@@ -81,7 +83,9 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n                     (Scalar::Bits { .. }, Scalar::Bits { .. }) => {\n                         left.to_bits(left_layout.size)? == right.to_bits(right_layout.size)?\n                     },\n+                    // FIXME: Test if both allocations are still live *or* if they are in the same allocation? (same for Ne below)\n                     (Scalar::Ptr(left), Scalar::Ptr(right)) => left == right,\n+                    // FIXME: We should probably error out when comparing anything but NULL with a pointer (same for Ne below)\n                     _ => false,\n                 };\n                 Ok(Some((Scalar::from_bool(result), false)))"}, {"sha": "489b7bebcdc8f7fb24f30d526e332e03844ebd34", "filename": "tests/compile-fail-fullmir/reallocate-bad-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/009525dc413ef10098d532b017a64f7595bff25b/tests%2Fcompile-fail-fullmir%2Freallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009525dc413ef10098d532b017a64f7595bff25b/tests%2Fcompile-fail-fullmir%2Freallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Freallocate-bad-size.rs?ref=009525dc413ef10098d532b017a64f7595bff25b", "patch": "@@ -10,6 +10,6 @@ use std::alloc::*;\n fn main() {\n     unsafe {\n         let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n-        let _y = Global.realloc(x, Layout::from_size_align_unchecked(2, 1), 1).unwrap();\n+        Global.realloc(x, Layout::from_size_align_unchecked(2, 1), 1).unwrap();\n     }\n }"}, {"sha": "c73f86bc1721ce6fb00922785062faa3900caac0", "filename": "tests/compile-fail-fullmir/reallocate-change-alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/009525dc413ef10098d532b017a64f7595bff25b/tests%2Fcompile-fail-fullmir%2Freallocate-change-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009525dc413ef10098d532b017a64f7595bff25b/tests%2Fcompile-fail-fullmir%2Freallocate-change-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Freallocate-change-alloc.rs?ref=009525dc413ef10098d532b017a64f7595bff25b", "patch": "@@ -8,7 +8,7 @@ use std::alloc::*;\n fn main() {\n     unsafe {\n         let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n-        let _y = Global.realloc(x, Layout::from_size_align_unchecked(1, 1), 1).unwrap();\n+        Global.realloc(x, Layout::from_size_align_unchecked(1, 1), 1).unwrap();\n         let _z = *(x.as_ptr() as *mut u8); //~ ERROR constant evaluation error\n         //~^ NOTE dangling pointer was dereferenced\n     }"}, {"sha": "38d8069672814d583380cd40e42d6298c90604ac", "filename": "tests/compiletest.rs", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/009525dc413ef10098d532b017a64f7595bff25b/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009525dc413ef10098d532b017a64f7595bff25b/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=009525dc413ef10098d532b017a64f7595bff25b", "patch": "@@ -62,6 +62,7 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, need_fullm\n         config.compile_lib_path = rustc_lib_path();\n     }\n     flags.push(format!(\"--sysroot {}\", sysroot.display()));\n+    flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n     config.src_base = PathBuf::from(path.to_string());\n     flags.push(\"-Zmir-emit-validate=1\".to_owned());\n     config.target_rustcflags = Some(flags.join(\" \"));\n@@ -70,23 +71,6 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, need_fullm\n     compiletest::run_tests(&config);\n }\n \n-fn rustc_pass(sysroot: &Path, path: &str) {\n-    eprintln!(\"{}\", format!(\"## Running run-pass tests in {} against rustc\", path).green().bold());\n-    let mut config = compiletest::Config::default().tempdir();\n-    config.mode = \"run-pass\".parse().expect(\"Invalid mode\");\n-    config.src_base = PathBuf::from(path);\n-    if let Some(rustc_path) = rustc_test_suite() {\n-        config.rustc_path = rustc_path;\n-        config.run_lib_path = rustc_lib_path();\n-        config.compile_lib_path = rustc_lib_path();\n-        config.target_rustcflags = Some(format!(\"-Dwarnings --sysroot {}\", sysroot.display()));\n-    } else {\n-        config.target_rustcflags = Some(\"-Dwarnings\".to_owned());\n-    }\n-    config.host_rustcflags = Some(\"-Dwarnings\".to_string());\n-    compiletest::run_tests(&config);\n-}\n-\n fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir: bool, opt: bool) {\n     if need_fullmir && !have_fullmir() {\n         eprintln!(\"{}\", format!(\n@@ -116,6 +100,7 @@ fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir:\n     }\n     let mut flags = Vec::new();\n     flags.push(format!(\"--sysroot {}\", sysroot.display()));\n+    flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n     if have_fullmir() {\n         flags.push(\"-Zmiri-start-fn\".to_owned());\n     }\n@@ -190,12 +175,6 @@ fn run_pass_miri(opt: bool) {\n     miri_pass(&sysroot, \"tests/run-pass-fullmir\", &host, &host, true, opt);\n }\n \n-fn run_pass_rustc() {\n-    let sysroot = get_sysroot();\n-    rustc_pass(&sysroot, \"tests/run-pass\");\n-    rustc_pass(&sysroot, \"tests/run-pass-fullmir\");\n-}\n-\n fn compile_fail_miri() {\n     let sysroot = get_sysroot();\n     let host = get_host();\n@@ -211,10 +190,7 @@ fn test() {\n     // introduces.  We still get parallelism within our tests because `compiletest`\n     // uses `libtest` which runs jobs in parallel.\n \n-    run_pass_rustc();\n-\n     run_pass_miri(false);\n-\n     // FIXME: Disabled for now, as the optimizer is pretty broken and crashes...\n     // See https://github.com/rust-lang/rust/issues/50411\n     //run_pass_miri(true);"}, {"sha": "7fe568522d53e397ee3a0663e0e47460fa24bdfc", "filename": "tests/run-pass/box_box_trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/009525dc413ef10098d532b017a64f7595bff25b/tests%2Frun-pass%2Fbox_box_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009525dc413ef10098d532b017a64f7595bff25b/tests%2Frun-pass%2Fbox_box_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbox_box_trait.rs?ref=009525dc413ef10098d532b017a64f7595bff25b", "patch": "@@ -13,7 +13,9 @@ impl Drop for DroppableStruct {\n trait MyTrait { fn dummy(&self) { } }\n impl MyTrait for Box<DroppableStruct> {}\n \n+#[allow(dead_code)]\n struct Whatever { w: Box<MyTrait+'static> }\n+\n impl  Whatever {\n     fn new(w: Box<MyTrait+'static>) -> Whatever {\n         Whatever { w: w }"}, {"sha": "936ec73bcb8c0b23b3d5ffd39778851996755e79", "filename": "tests/run-pass/pointers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/009525dc413ef10098d532b017a64f7595bff25b/tests%2Frun-pass%2Fpointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009525dc413ef10098d532b017a64f7595bff25b/tests%2Frun-pass%2Fpointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpointers.rs?ref=009525dc413ef10098d532b017a64f7595bff25b", "patch": "@@ -57,4 +57,5 @@ fn main() {\n     assert_eq!(match_ref_mut(), 42);\n     // FIXME: improve this test... how?\n     assert!(dangling_pointer() != std::ptr::null());\n+    assert!(match dangling_pointer() as usize { 0 => false, _ => true });\n }"}]}