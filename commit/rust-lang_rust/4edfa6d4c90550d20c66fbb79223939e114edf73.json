{"sha": "4edfa6d4c90550d20c66fbb79223939e114edf73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZGZhNmQ0YzkwNTUwZDIwYzY2ZmJiNzkyMjM5MzllMTE0ZWRmNzM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-20T08:29:42Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-06T04:43:58Z"}, "message": "Enforce 'cond: bool' in while-expr + improve reachability diags.", "tree": {"sha": "84e1583c647ee86e01ce231d1e8f7bde492bbf0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84e1583c647ee86e01ce231d1e8f7bde492bbf0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4edfa6d4c90550d20c66fbb79223939e114edf73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4edfa6d4c90550d20c66fbb79223939e114edf73", "html_url": "https://github.com/rust-lang/rust/commit/4edfa6d4c90550d20c66fbb79223939e114edf73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4edfa6d4c90550d20c66fbb79223939e114edf73/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7b544ee836831b1b469f62816ab965b2790351c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7b544ee836831b1b469f62816ab965b2790351c", "html_url": "https://github.com/rust-lang/rust/commit/e7b544ee836831b1b469f62816ab965b2790351c"}], "stats": {"total": 91, "additions": 50, "deletions": 41}, "files": [{"sha": "198c6797cca32a46453e6e89a9dcd2752cc573c4", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4edfa6d4c90550d20c66fbb79223939e114edf73/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4edfa6d4c90550d20c66fbb79223939e114edf73/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=4edfa6d4c90550d20c66fbb79223939e114edf73", "patch": "@@ -63,7 +63,7 @@ use syntax::errors;\n use syntax::ext::hygiene::{Mark, SyntaxContext};\n use syntax::print::pprust;\n use syntax::source_map::{self, respan, ExpnInfo, CompilerDesugaringKind, Spanned};\n-use syntax::source_map::CompilerDesugaringKind::IfTemporary;\n+use syntax::source_map::CompilerDesugaringKind::CondTemporary;\n use syntax::std_inject;\n use syntax::symbol::{kw, sym, Symbol};\n use syntax::tokenstream::{TokenStream, TokenTree};\n@@ -4408,7 +4408,7 @@ impl<'a> LoweringContext<'a> {\n                         // Wrap in a construct equivalent to `{ let _t = $cond; _t }`\n                         // to preserve drop semantics since `if cond { ... }`\n                         // don't let temporaries live outside of `cond`.\n-                        let span_block = self.mark_span_with_reason(IfTemporary, cond.span, None);\n+                        let span_block = self.mark_span_with_reason(CondTemporary, cond.span, None);\n                         // Wrap in a construct equivalent to `{ let _t = $cond; _t }`\n                         // to preserve drop semantics since `if cond { ... }` does not\n                         // let temporaries live outside of `cond`.\n@@ -4484,7 +4484,7 @@ impl<'a> LoweringContext<'a> {\n                         // ```\n                         // 'label: loop {\n                         //     match DropTemps($cond) {\n-                        //         true => $block,\n+                        //         true => $body,\n                         //         _ => break,\n                         //     }\n                         // }\n@@ -4502,11 +4502,12 @@ impl<'a> LoweringContext<'a> {\n                         let else_arm = this.arm(hir_vec![else_pat], else_expr);\n \n                         // Lower condition:\n+                        let span_block = this.mark_span_with_reason(CondTemporary, cond.span, None);\n                         let cond = this.with_loop_condition_scope(|this| this.lower_expr(cond));\n                         // Wrap in a construct equivalent to `{ let _t = $cond; _t }`\n                         // to preserve drop semantics since `if cond { ... }` does not\n                         // let temporaries live outside of `cond`.\n-                        let cond = this.expr_drop_temps(cond.span, P(cond), ThinVec::new());\n+                        let cond = this.expr_drop_temps(span_block, P(cond), ThinVec::new());\n \n                         let match_expr = this.expr_match(\n                             cond.span,"}, {"sha": "1db18d30282582eb61364224b12e59ea24ff4f1b", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4edfa6d4c90550d20c66fbb79223939e114edf73/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4edfa6d4c90550d20c66fbb79223939e114edf73/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=4edfa6d4c90550d20c66fbb79223939e114edf73", "patch": "@@ -415,7 +415,7 @@ impl_stable_hash_for!(enum ::syntax_pos::hygiene::ExpnFormat {\n });\n \n impl_stable_hash_for!(enum ::syntax_pos::hygiene::CompilerDesugaringKind {\n-    IfTemporary,\n+    CondTemporary,\n     Async,\n     Await,\n     QuestionMark,"}, {"sha": "d24f92a6fafef5a451989c59afdbe6be5da60225", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4edfa6d4c90550d20c66fbb79223939e114edf73/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4edfa6d4c90550d20c66fbb79223939e114edf73/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=4edfa6d4c90550d20c66fbb79223939e114edf73", "patch": "@@ -180,7 +180,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // then that's equivalent to there existing a LUB.\n                 if let Some(mut err) = self.demand_suptype_diag(pat.span, expected, pat_ty) {\n                     err.emit_unless(discrim_span\n-                        .filter(|&s| s.is_compiler_desugaring(CompilerDesugaringKind::IfTemporary))\n+                        .filter(|&s| {\n+                            // In the case of `if`- and `while`-expressions we've already checked\n+                            // that `scrutinee: bool`. We know that the pattern is `true`,\n+                            // so an error here would be a duplicate and from the wrong POV.\n+                            s.is_compiler_desugaring(CompilerDesugaringKind::CondTemporary)\n+                        })\n                         .is_some());\n                 }\n \n@@ -624,14 +629,15 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n         let tcx = self.tcx;\n \n         use hir::MatchSource::*;\n-        let (source_if, if_no_else, if_desugar) = match match_src {\n+        let (source_if, if_no_else, force_scrutinee_bool) = match match_src {\n             IfDesugar { contains_else_clause } => (true, !contains_else_clause, true),\n             IfLetDesugar { contains_else_clause } => (true, !contains_else_clause, false),\n+            WhileDesugar => (false, false, true),\n             _ => (false, false, false),\n         };\n \n         // Type check the descriminant and get its type.\n-        let discrim_ty = if if_desugar {\n+        let discrim_ty = if force_scrutinee_bool {\n             // Here we want to ensure:\n             //\n             // 1. That default match bindings are *not* accepted in the condition of an\n@@ -651,7 +657,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n             return tcx.types.never;\n         }\n \n-        self.warn_arms_when_scrutinee_diverges(arms, source_if);\n+        self.warn_arms_when_scrutinee_diverges(arms, match_src);\n \n         // Otherwise, we have to union together the types that the\n         // arms produce and so forth.\n@@ -726,7 +732,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n             if source_if {\n                 let then_expr = &arms[0].body;\n                 match (i, if_no_else) {\n-                    (0, _) => coercion.coerce(self, &self.misc(span), then_expr, arm_ty),\n+                    (0, _) => coercion.coerce(self, &self.misc(span), &arm.body, arm_ty),\n                     (_, true) => self.if_fallback_coercion(span, then_expr, &mut coercion),\n                     (_, _) => {\n                         let then_ty = prior_arm_ty.unwrap();\n@@ -771,9 +777,14 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n \n     /// When the previously checked expression (the scrutinee) diverges,\n     /// warn the user about the match arms being unreachable.\n-    fn warn_arms_when_scrutinee_diverges(&self, arms: &'tcx [hir::Arm], source_if: bool) {\n+    fn warn_arms_when_scrutinee_diverges(&self, arms: &'tcx [hir::Arm], source: hir::MatchSource) {\n         if self.diverges.get().always() {\n-            let msg = if source_if { \"block in `if` expression\" } else { \"arm\" };\n+            use hir::MatchSource::*;\n+            let msg = match source {\n+                IfDesugar { .. } | IfLetDesugar { .. } => \"block in `if` expression\",\n+                WhileDesugar { .. } | WhileLetDesugar { .. } => \"block in `while` expression\",\n+                _ => \"arm\",\n+            };\n             for arm in arms {\n                 self.warn_if_unreachable(arm.body.hir_id, arm.body.span, msg);\n             }"}, {"sha": "3bfb3477d4774c7f04150c406a90877e6fd25225", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4edfa6d4c90550d20c66fbb79223939e114edf73/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4edfa6d4c90550d20c66fbb79223939e114edf73/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4edfa6d4c90550d20c66fbb79223939e114edf73", "patch": "@@ -2161,10 +2161,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// function is unreachable, and there hasn't been another warning.\n     fn warn_if_unreachable(&self, id: hir::HirId, span: Span, kind: &str) {\n         if self.diverges.get() == Diverges::Always &&\n-            // If span arose from a desugaring of `if` then it is the condition itself,\n-            // which diverges, that we are about to lint on. This gives suboptimal diagnostics\n-            // and so we stop here and allow the block of the `if`-expression to be linted instead.\n-            !span.is_compiler_desugaring(CompilerDesugaringKind::IfTemporary) {\n+            // If span arose from a desugaring of `if` or `while`, then it is the condition itself,\n+            // which diverges, that we are about to lint on. This gives suboptimal diagnostics.\n+            // Instead, stop here so that the `if`- or `while`-expression's block is linted instead.\n+            !span.is_compiler_desugaring(CompilerDesugaringKind::CondTemporary) {\n             self.diverges.set(Diverges::WarnedAlways);\n \n             debug!(\"warn_if_unreachable: id={:?} span={:?} kind={}\", id, span, kind);"}, {"sha": "a6c8c76cf23f7375b2bdc13cd0d75d3c2c984a3c", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4edfa6d4c90550d20c66fbb79223939e114edf73/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4edfa6d4c90550d20c66fbb79223939e114edf73/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=4edfa6d4c90550d20c66fbb79223939e114edf73", "patch": "@@ -723,7 +723,8 @@ pub enum CompilerDesugaringKind {\n     /// We desugar `if c { i } else { e }` to `match $ExprKind::Use(c) { true => i, _ => e }`.\n     /// However, we do not want to blame `c` for unreachability but rather say that `i`\n     /// is unreachable. This desugaring kind allows us to avoid blaming `c`.\n-    IfTemporary,\n+    /// This also applies to `while` loops.\n+    CondTemporary,\n     QuestionMark,\n     TryBlock,\n     /// Desugaring of an `impl Trait` in return type position\n@@ -738,7 +739,7 @@ pub enum CompilerDesugaringKind {\n impl CompilerDesugaringKind {\n     pub fn name(self) -> Symbol {\n         Symbol::intern(match self {\n-            CompilerDesugaringKind::IfTemporary => \"if\",\n+            CompilerDesugaringKind::CondTemporary => \"if and while condition\",\n             CompilerDesugaringKind::Async => \"async\",\n             CompilerDesugaringKind::Await => \"await\",\n             CompilerDesugaringKind::QuestionMark => \"?\","}, {"sha": "10a4b69939f12505c04a971367fe9842ae5563f0", "filename": "src/test/ui/reachable/expr_while.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4edfa6d4c90550d20c66fbb79223939e114edf73/src%2Ftest%2Fui%2Freachable%2Fexpr_while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4edfa6d4c90550d20c66fbb79223939e114edf73/src%2Ftest%2Fui%2Freachable%2Fexpr_while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_while.rs?ref=4edfa6d4c90550d20c66fbb79223939e114edf73", "patch": "@@ -5,8 +5,8 @@\n \n fn foo() {\n     while {return} {\n+        //~^ ERROR unreachable block in `while` expression\n         println!(\"Hello, world!\");\n-        //~^ ERROR unreachable\n     }\n }\n \n@@ -20,11 +20,10 @@ fn bar() {\n fn baz() {\n     // Here, we cite the `while` loop as dead.\n     while {return} {\n+        //~^ ERROR unreachable block in `while` expression\n         println!(\"I am dead.\");\n-        //~^ ERROR unreachable\n     }\n     println!(\"I am, too.\");\n-    //~^ ERROR unreachable\n }\n \n fn main() { }"}, {"sha": "fc528926b4c97bdb60be6d0729d37f8265b46ee6", "filename": "src/test/ui/reachable/expr_while.stderr", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4edfa6d4c90550d20c66fbb79223939e114edf73/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4edfa6d4c90550d20c66fbb79223939e114edf73/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr?ref=4edfa6d4c90550d20c66fbb79223939e114edf73", "patch": "@@ -1,31 +1,28 @@\n-error: unreachable statement\n-  --> $DIR/expr_while.rs:8:9\n+error: unreachable block in `while` expression\n+  --> $DIR/expr_while.rs:7:20\n    |\n-LL |         println!(\"Hello, world!\");\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |       while {return} {\n+   |  ____________________^\n+LL | |\n+LL | |         println!(\"Hello, world!\");\n+LL | |     }\n+   | |_____^\n    |\n note: lint level defined here\n   --> $DIR/expr_while.rs:4:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: unreachable statement\n-  --> $DIR/expr_while.rs:23:9\n+error: unreachable block in `while` expression\n+  --> $DIR/expr_while.rs:22:20\n    |\n-LL |         println!(\"I am dead.\");\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error: unreachable statement\n-  --> $DIR/expr_while.rs:26:5\n-   |\n-LL |     println!(\"I am, too.\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+LL |       while {return} {\n+   |  ____________________^\n+LL | |\n+LL | |         println!(\"I am dead.\");\n+LL | |     }\n+   | |_____^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n "}]}