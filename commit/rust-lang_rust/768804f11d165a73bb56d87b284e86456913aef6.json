{"sha": "768804f11d165a73bb56d87b284e86456913aef6", "node_id": "C_kwDOAAsO6NoAKDc2ODgwNGYxMWQxNjVhNzNiYjU2ZDg3YjI4NGU4NjQ1NjkxM2FlZjY", "commit": {"author": {"name": "Daniel Conley", "email": "himself@danii.dev", "date": "2022-02-14T20:26:40Z"}, "committer": {"name": "Daniel Conley", "email": "himself@danii.dev", "date": "2022-02-14T20:26:40Z"}, "message": "Hide Keyword Expression Hover For Units `()`\n\nCleaned up the code for keyword expression hovers.\n\nAdded a check to hide units `()` in keyword expression hovers.", "tree": {"sha": "28f4f97417169ef9d1047e50d88b09ed2605b66d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28f4f97417169ef9d1047e50d88b09ed2605b66d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/768804f11d165a73bb56d87b284e86456913aef6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3a0fQwhlargOXuthlMIeegYH8dwFAmIKuwAACgkQlMIeegYH\n8dwAIg/8DYXxwhAO4+ldjfPHAteRF91aibMK+aQjM26uIOz0I5Y+2duyNTWx+VDn\nxtR11oqZQfgNTCd3W/tYQUSPWLHZlxcScT/t+RMr9Dl8f/Gesj1E88CsXSGsPus4\nu+fSjGK0rLVwIKfyNxS5Z+9pewxxFp0fEqivTEyIzIeT5pKJU0mTCP0etcJ7kfbW\nupzlgKnuMbCTi1rKEtrDkuVOEaQ4FmcTdN5fjzzW5gixUy6nEWWoNztKSRy510/5\nJHAPBCB9uhcr9BRUhe16bO79MA7T42JQzMEF2/0s5WKgnIHhAw5LKQZTiErQp2gM\nKc9QHBPJ8dadrnM7Zt8tr7eMEoxdNrzdlys0mAu6mRa1VZCzHtnj4F2UsIZ4vtZu\nn9ig7SSmDdyhyODzNhzt/CRyswE2YYHLVnWlwbSn4tlTy6Me96x2LV9mkgc8a+sd\n/ZSW5VUhbs3fy6hAIK+L6Q5an/iX7YPAuIMa2/17uw0J7ygZADXfyEdoW5YaBX+C\n3SoROKihhYG+r+ROSclfi9f7k8BpBi+pc9cs2xHI6mo2Bvm2kmLY1blue4hyghsk\n4PihDA8X30JVWky1vqXUuMasP21NhheRC3Ubz6HbfYoVl16Ii8q8fE3gwv9CaVt4\nsX2JnUDGfJxLVfsLzXuV8pyGjUpUZ+dvdlQr9jiuougRm79hAsc=\n=qhGL\n-----END PGP SIGNATURE-----", "payload": "tree 28f4f97417169ef9d1047e50d88b09ed2605b66d\nparent 261abbf45ea8558ee8fb7332606691f136c73982\nauthor Daniel Conley <himself@danii.dev> 1644870400 -0500\ncommitter Daniel Conley <himself@danii.dev> 1644870400 -0500\n\nHide Keyword Expression Hover For Units `()`\n\nCleaned up the code for keyword expression hovers.\n\nAdded a check to hide units `()` in keyword expression hovers.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/768804f11d165a73bb56d87b284e86456913aef6", "html_url": "https://github.com/rust-lang/rust/commit/768804f11d165a73bb56d87b284e86456913aef6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/768804f11d165a73bb56d87b284e86456913aef6/comments", "author": {"login": "danii", "id": 39541871, "node_id": "MDQ6VXNlcjM5NTQxODcx", "avatar_url": "https://avatars.githubusercontent.com/u/39541871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danii", "html_url": "https://github.com/danii", "followers_url": "https://api.github.com/users/danii/followers", "following_url": "https://api.github.com/users/danii/following{/other_user}", "gists_url": "https://api.github.com/users/danii/gists{/gist_id}", "starred_url": "https://api.github.com/users/danii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danii/subscriptions", "organizations_url": "https://api.github.com/users/danii/orgs", "repos_url": "https://api.github.com/users/danii/repos", "events_url": "https://api.github.com/users/danii/events{/privacy}", "received_events_url": "https://api.github.com/users/danii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danii", "id": 39541871, "node_id": "MDQ6VXNlcjM5NTQxODcx", "avatar_url": "https://avatars.githubusercontent.com/u/39541871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danii", "html_url": "https://github.com/danii", "followers_url": "https://api.github.com/users/danii/followers", "following_url": "https://api.github.com/users/danii/following{/other_user}", "gists_url": "https://api.github.com/users/danii/gists{/gist_id}", "starred_url": "https://api.github.com/users/danii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danii/subscriptions", "organizations_url": "https://api.github.com/users/danii/orgs", "repos_url": "https://api.github.com/users/danii/repos", "events_url": "https://api.github.com/users/danii/events{/privacy}", "received_events_url": "https://api.github.com/users/danii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "261abbf45ea8558ee8fb7332606691f136c73982", "url": "https://api.github.com/repos/rust-lang/rust/commits/261abbf45ea8558ee8fb7332606691f136c73982", "html_url": "https://github.com/rust-lang/rust/commit/261abbf45ea8558ee8fb7332606691f136c73982"}], "stats": {"total": 73, "additions": 21, "deletions": 52}, "files": [{"sha": "f94348ec581df33d1e1a4ef85043dbb504473175", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 21, "deletions": 52, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/768804f11d165a73bb56d87b284e86456913aef6/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768804f11d165a73bb56d87b284e86456913aef6/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=768804f11d165a73bb56d87b284e86456913aef6", "patch": "@@ -240,11 +240,9 @@ pub(super) fn keyword(\n     let parent = token.parent()?;\n     let famous_defs = FamousDefs(sema, sema.scope(&parent).krate());\n \n-    // some keywords get fancy type tooltips if they are apart of an expression, which require some extra work\n-    // panic safety: we just checked that token is a keyword, and we have it's parent in scope, so it must have a parent\n-    let KeywordHint { description, documentation, actions } = keyword_hints(sema, token);\n+    let KeywordHint { description, keyword_mod, actions } = keyword_hints(sema, token, parent);\n \n-    let doc_owner = find_std_module(&famous_defs, &documentation)?;\n+    let doc_owner = find_std_module(&famous_defs, &keyword_mod)?;\n     let docs = doc_owner.attrs(sema.db).docs()?;\n     let markup = process_markup(\n         sema.db,\n@@ -501,29 +499,28 @@ fn local(db: &RootDatabase, it: hir::Local) -> Option<Markup> {\n \n struct KeywordHint {\n     description: String,\n-    documentation: String,\n+    keyword_mod: String,\n     actions: Vec<HoverAction>,\n }\n \n impl KeywordHint {\n-    fn new(description: String, documentation: String) -> Self {\n-        Self { description, documentation, actions: Vec::default() }\n+    fn new(description: String, keyword_mod: String) -> Self {\n+        Self { description, keyword_mod, actions: Vec::default() }\n     }\n }\n \n-/// Panics\n-/// ------\n-/// `token` is assumed to:\n-/// - have a parent, and\n-/// - be a keyword\n-fn keyword_hints<'t>(sema: &Semantics<RootDatabase>, token: &'t SyntaxToken) -> KeywordHint {\n-    let parent = token.parent().expect(\"token was assumed to have a parent, but had none\");\n-\n-    macro_rules! create_hint {\n-        ($ty_info:expr, $doc:expr) => {{\n-            let documentation = $doc;\n-            match $ty_info {\n-                Some(ty) => {\n+fn keyword_hints(\n+    sema: &Semantics<RootDatabase>,\n+    token: &SyntaxToken,\n+    parent: syntax::SyntaxNode,\n+) -> KeywordHint {\n+    match token.kind() {\n+        T![await] | T![loop] | T![match] | T![unsafe] | T![as] | T![try] | T![if] | T![else] => {\n+            let keyword_mod = format!(\"{}_keyword\", token.text());\n+\n+            match ast::Expr::cast(parent).and_then(|site| sema.type_of_expr(&site)) {\n+                // ignore the unit type ()\n+                Some(ty) if !ty.adjusted.as_ref().unwrap_or(&ty.original).is_unit() => {\n                     let mut targets: Vec<hir::ModuleDef> = Vec::new();\n                     let mut push_new_def = |item: hir::ModuleDef| {\n                         if !targets.contains(&item) {\n@@ -537,40 +534,16 @@ fn keyword_hints<'t>(sema: &Semantics<RootDatabase>, token: &'t SyntaxToken) ->\n \n                     KeywordHint {\n                         description,\n-                        documentation,\n+                        keyword_mod,\n                         actions: vec![HoverAction::goto_type_from_targets(sema.db, targets)],\n                     }\n                 }\n-                None => KeywordHint {\n+                _ => KeywordHint {\n                     description: token.text().to_string(),\n-                    documentation,\n+                    keyword_mod,\n                     actions: Vec::new(),\n                 },\n             }\n-        }};\n-    }\n-\n-    match token.kind() {\n-        T![await] | T![loop] | T![match] | T![unsafe] => {\n-            let ty = ast::Expr::cast(parent).and_then(|site| sema.type_of_expr(&site));\n-            create_hint!(ty, format!(\"{}_keyword\", token.text()))\n-        }\n-\n-        T![if] | T![else] => {\n-            fn if_has_else(site: &ast::IfExpr) -> bool {\n-                match site.else_branch() {\n-                    Some(ast::ElseBranch::IfExpr(inner)) => if_has_else(&inner),\n-                    Some(ast::ElseBranch::Block(_)) => true,\n-                    None => false,\n-                }\n-            }\n-\n-            // only include the type if there is an else branch; it isn't worth annotating\n-            // an expression that always returns `()`, is it?\n-            let ty = ast::IfExpr::cast(parent)\n-                .and_then(|site| if_has_else(&site).then(|| site))\n-                .and_then(|site| sema.type_of_expr(&ast::Expr::IfExpr(site)));\n-            create_hint!(ty, format!(\"{}_keyword\", token.text()))\n         }\n \n         T![fn] => {\n@@ -582,10 +555,6 @@ fn keyword_hints<'t>(sema: &Semantics<RootDatabase>, token: &'t SyntaxToken) ->\n             KeywordHint::new(token.text().to_string(), module)\n         }\n \n-        kind if kind.is_keyword() => {\n-            KeywordHint::new(token.text().to_string(), format!(\"{}_keyword\", token.text()))\n-        }\n-\n-        _ => panic!(\"{} was assumed to be a keyword, but it wasn't\", token),\n+        _ => KeywordHint::new(token.text().to_string(), format!(\"{}_keyword\", token.text())),\n     }\n }"}]}