{"sha": "2bd482ef11936560981bb2399640a9a1bfc6106a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZDQ4MmVmMTE5MzY1NjA5ODFiYjIzOTk2NDBhOWExYmZjNjEwNmE=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-07-07T01:20:36Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-08T05:27:00Z"}, "message": "Add the Alioth chameneos-redux benchmark\n\nThis adds a Rust implementation of the Alioth chameneos-redux benchmark:\nhttp://shootout.alioth.debian.org/u64q/performance.php?test=chameneosredux\n\nThis version already seems faster than Clojure, Ruby, and OCaml. I'm running\nwith N=6,000,000 in about 1m 50s.  Further optimization would be good, though.\n\nI'm talking right now with @eholk about how pipes could be used (this is 1:many)...", "tree": {"sha": "b765962d78a28b4f4020c55cb8054f67dcc4dbae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b765962d78a28b4f4020c55cb8054f67dcc4dbae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bd482ef11936560981bb2399640a9a1bfc6106a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd482ef11936560981bb2399640a9a1bfc6106a", "html_url": "https://github.com/rust-lang/rust/commit/2bd482ef11936560981bb2399640a9a1bfc6106a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bd482ef11936560981bb2399640a9a1bfc6106a/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f9744d92de8efaa153cfed7270e03850298e5dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f9744d92de8efaa153cfed7270e03850298e5dd", "html_url": "https://github.com/rust-lang/rust/commit/8f9744d92de8efaa153cfed7270e03850298e5dd"}], "stats": {"total": 214, "additions": 214, "deletions": 0}, "files": [{"sha": "631c612d081f2318e5a8bab0097f3bdcd53dd3ac", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "added", "additions": 214, "deletions": 0, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/2bd482ef11936560981bb2399640a9a1bfc6106a/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd482ef11936560981bb2399640a9a1bfc6106a/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=2bd482ef11936560981bb2399640a9a1bfc6106a", "patch": "@@ -0,0 +1,214 @@\n+// chameneos\n+\n+import io::reader_util;\n+\n+use std;\n+import std::map;\n+import std::map::hashmap;\n+import std::sort;\n+\n+fn print_complements() {\n+    let all = ~[Blue, Red, Yellow];\n+    for vec::each(all) |aa| {\n+        for vec::each(all) |bb| {\n+            io::println(show_color(aa) + \" + \" + show_color(bb) +\n+                \" -> \" + show_color(transform(aa,bb)));\n+        }\n+    }\n+}\n+\n+// can I combine these two lines?\n+enum color_e { Red, Yellow, Blue }\n+type color = color_e;\n+\n+type creature_info = { name: uint, color: color };\n+\n+fn show_color(cc: color) -> str {\n+    alt (cc) {\n+        Red    {\"red\"}\n+        Yellow {\"yellow\"}\n+        Blue   {\"blue\"}\n+    }\n+}\n+\n+fn show_color_list(set: ~[color]) -> str {\n+    let mut out = \"\";\n+    for vec::eachi(set) |_ii, col| {\n+        out += \" \";\n+        out += show_color(col);\n+    }\n+    ret out;\n+}\n+\n+fn show_digit(nn: uint) -> str {\n+    alt (nn) {\n+        0 {\"zero\"}\n+        1 {\"one\"}\n+        2 {\"two\"}\n+        3 {\"three\"}\n+        4 {\"four\"}\n+        5 {\"five\"}\n+        6 {\"six\"}\n+        7 {\"seven\"}\n+        8 {\"eight\"}\n+        9 {\"nine\"}\n+        _ {fail \"expected digits from 0 to 9...\"}\n+    }\n+}\n+\n+fn show_number(nn: uint) -> str {\n+    let mut out = \"\";\n+    let mut num = nn;\n+    let mut dig;\n+\n+    if num == 0 { out = show_digit(0) };\n+\n+    while num != 0 {\n+        dig = num % 10;\n+        num = num / 10;\n+        out = show_digit(dig) + \" \" + out;\n+    }\n+\n+    ret out;\n+}\n+\n+fn transform(aa: color, bb: color) -> color {\n+    alt (aa, bb) {\n+        (Red,    Red   ) { Red    }\n+        (Red,    Yellow) { Blue   }\n+        (Red,    Blue  ) { Yellow }\n+        (Yellow, Red   ) { Blue   }\n+        (Yellow, Yellow) { Yellow }\n+        (Yellow, Blue  ) { Red    }\n+        (Blue,   Red   ) { Yellow }\n+        (Blue,   Yellow) { Red    }\n+        (Blue,   Blue  ) { Blue   }\n+    }\n+}\n+\n+fn creature(\n+    name: uint,\n+    color: color,\n+    from_rendezvous: comm::port<option<creature_info>>,\n+    to_rendezvous: comm::chan<creature_info>,\n+    to_rendezvous_log: comm::chan<str>\n+) {\n+    let mut color = color;\n+    let mut creatures_met = 0;\n+    let mut evil_clones_met = 0;\n+\n+    loop {\n+        // ask for a pairing\n+        comm::send(to_rendezvous, {name: name, color: color});\n+        let resp = comm::recv(from_rendezvous);\n+\n+        // log and change, or print and quit\n+        alt resp {\n+            option::some(other_creature) {\n+                color = transform(color, other_creature.color);\n+\n+                // track some statistics\n+                creatures_met += 1;\n+                if other_creature.name == name {\n+                   evil_clones_met += 1;\n+                }\n+            }\n+            option::none {\n+                // log creatures met and evil clones of self\n+                let report = #fmt(\"%u\", creatures_met) + \" \" +\n+                             show_number(evil_clones_met);\n+                comm::send(to_rendezvous_log, report);\n+                break;\n+            }\n+        }\n+    }\n+}\n+\n+fn rendezvous(nn: uint, set: ~[color]) {\n+    let from_creatures:     comm::port<creature_info> = comm::port();\n+    let from_creatures_log: comm::port<str> = comm::port();\n+    let to_rendezvous     = comm::chan(from_creatures);\n+    let to_rendezvous_log = comm::chan(from_creatures_log);\n+    let to_creature: ~[comm::chan<option<creature_info>>] =\n+        vec::mapi(set,\n+            fn@(ii: uint, col: color) -> comm::chan<option<creature_info>> {\n+                ret do task::spawn_listener |from_rendezvous| {\n+                    creature(ii, col, from_rendezvous, to_rendezvous,\n+                             to_rendezvous_log);\n+                };\n+            }\n+        );\n+\n+    let mut meetings = 0;\n+    let mut creatures_met = 0;\n+    let mut creatures_present = 0;\n+\n+    // use option type instead of initializing to junk?\n+    let mut first_creature  = { name: 0, color: Red };\n+    let mut second_creature = { name: 0, color: Red };\n+\n+    // set up meetings...\n+    while meetings < nn {\n+        let creature_req: creature_info = comm::recv(from_creatures);\n+        creatures_met += 1;\n+\n+        alt creatures_present {\n+            0 {\n+                first_creature = creature_req;\n+                creatures_present = 1;\n+              }\n+            1 {\n+                second_creature = creature_req;\n+                comm::send(to_creature[first_creature.name],\n+                           some(second_creature));\n+                comm::send(to_creature[second_creature.name],\n+                           some(first_creature));\n+                creatures_present = 0;\n+                meetings += 1;\n+              }\n+            _ { fail \"too many creatures are here!\" }\n+        }\n+    }\n+\n+    // tell each creature to stop\n+    for vec::eachi(to_creature) |_ii, to_one| {\n+        comm::send(to_one, none);\n+    }\n+\n+    // save each creature's meeting stats\n+    let mut report = ~[];\n+    for vec::each(to_creature) |_to_one| {\n+        vec::push(report, comm::recv(from_creatures_log));\n+    }\n+\n+    // print each color in the set\n+    io::println(show_color_list(set));\n+\n+    // print each creature's stats\n+    for vec::each(report) |rep| {\n+        io::println(rep);\n+    }\n+\n+    // print the total number of creatures met\n+    io::println(show_number(creatures_met));\n+}\n+\n+fn main(args: ~[str]) {\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() || args.len() <= 1u {\n+        ~[\"\", \"600\"]\n+    } else {\n+        args\n+    };\n+\n+    let nn = uint::from_str(args[1]).get();\n+\n+    print_complements();\n+    io::println(\"\");\n+\n+    rendezvous(nn, ~[Blue, Red, Yellow]);\n+    io::println(\"\");\n+\n+    rendezvous(nn,\n+        ~[Blue, Red, Yellow, Red, Yellow, Blue, Red, Yellow, Red, Blue]);\n+}\n+"}]}