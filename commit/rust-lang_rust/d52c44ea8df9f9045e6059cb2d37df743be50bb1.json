{"sha": "d52c44ea8df9f9045e6059cb2d37df743be50bb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MmM0NGVhOGRmOWY5MDQ1ZTYwNTljYjJkMzdkZjc0M2JlNTBiYjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-28T22:18:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-28T22:18:13Z"}, "message": "Auto merge of #49460 - kennytm:rollup, r=kennytm\n\nRollup of 12 pull requests\n\n- Successful merges: #49243, #49329, #49364, #49400, #49405, #49427, #49428, #49429, #49439, #49442, #49444, #49452\n- Failed merges:", "tree": {"sha": "c23ef9f643221d7f4b1869f7a681248cff99f304", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c23ef9f643221d7f4b1869f7a681248cff99f304"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d52c44ea8df9f9045e6059cb2d37df743be50bb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d52c44ea8df9f9045e6059cb2d37df743be50bb1", "html_url": "https://github.com/rust-lang/rust/commit/d52c44ea8df9f9045e6059cb2d37df743be50bb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d52c44ea8df9f9045e6059cb2d37df743be50bb1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5277c1457d397f22ba18a1d40c1318729becbb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5277c1457d397f22ba18a1d40c1318729becbb4", "html_url": "https://github.com/rust-lang/rust/commit/e5277c1457d397f22ba18a1d40c1318729becbb4"}, {"sha": "30560bb99a8875560bbad9030715520b8300110c", "url": "https://api.github.com/repos/rust-lang/rust/commits/30560bb99a8875560bbad9030715520b8300110c", "html_url": "https://github.com/rust-lang/rust/commit/30560bb99a8875560bbad9030715520b8300110c"}], "stats": {"total": 630, "additions": 472, "deletions": 158}, "files": [{"sha": "049444aa49bdd2ef90d7316c2e6d6d41bdf16f80", "filename": "src/doc/unstable-book/src/library-features/string-retain.md", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e5277c1457d397f22ba18a1d40c1318729becbb4/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fstring-retain.md", "raw_url": "https://github.com/rust-lang/rust/raw/e5277c1457d397f22ba18a1d40c1318729becbb4/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fstring-retain.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fstring-retain.md?ref=e5277c1457d397f22ba18a1d40c1318729becbb4", "patch": "@@ -1,23 +0,0 @@\n-# `string_retain`\n-\n-The tracking issue for this feature is: [#43874]\n-\n-[#43874]: https://github.com/rust-lang/rust/issues/43874\n-\n-------------------------\n-\n-Retains only the characters specified by the predicate.\n-\n-In other words, remove all characters `c` such that `f(c)` returns `false`.\n-This method operates in place and preserves the order of the retained\n-characters.\n-\n-```rust\n-#![feature(string_retain)]\n-\n-let mut s = String::from(\"f_o_ob_ar\");\n-\n-s.retain(|c| c != '_');\n-\n-assert_eq!(s, \"foobar\");\n-```"}, {"sha": "f6a666b599b0984d0aa54b6f70a03d0ec5dfe650", "filename": "src/liballoc/binary_heap.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Fliballoc%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Fliballoc%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbinary_heap.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -509,6 +509,31 @@ impl<T: Ord> BinaryHeap<T> {\n         self.data.shrink_to_fit();\n     }\n \n+    /// Discards capacity with a lower bound.\n+    ///\n+    /// The capacity will remain at least as large as both the length\n+    /// and the supplied value.\n+    ///\n+    /// Panics if the current capacity is smaller than the supplied\n+    /// minimum capacity.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(shrink_to)]\n+    /// use std::collections::BinaryHeap;\n+    /// let mut heap: BinaryHeap<i32> = BinaryHeap::with_capacity(100);\n+    ///\n+    /// assert!(heap.capacity() >= 100);\n+    /// heap.shrink_to(10);\n+    /// assert!(heap.capacity() >= 10);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"0\")]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        self.data.shrink_to(min_capacity)\n+    }\n+\n     /// Removes the greatest item from the binary heap and returns it, or `None` if it\n     /// is empty.\n     ///"}, {"sha": "23c12bef3aa7cc2166a21bde49d97920f71c7180", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -1015,6 +1015,34 @@ impl String {\n         self.vec.shrink_to_fit()\n     }\n \n+    /// Shrinks the capacity of this `String` with a lower bound.\n+    ///\n+    /// The capacity will remain at least as large as both the length\n+    /// and the supplied value.\n+    ///\n+    /// Panics if the current capacity is smaller than the supplied\n+    /// minimum capacity.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(shrink_to)]\n+    /// let mut s = String::from(\"foo\");\n+    ///\n+    /// s.reserve(100);\n+    /// assert!(s.capacity() >= 100);\n+    ///\n+    /// s.shrink_to(10);\n+    /// assert!(s.capacity() >= 10);\n+    /// s.shrink_to(0);\n+    /// assert!(s.capacity() >= 3);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"0\")]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        self.vec.shrink_to(min_capacity)\n+    }\n+\n     /// Appends the given [`char`] to the end of this `String`.\n     ///\n     /// [`char`]: ../../std/primitive.char.html\n@@ -1177,16 +1205,14 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(string_retain)]\n-    ///\n     /// let mut s = String::from(\"f_o_ob_ar\");\n     ///\n     /// s.retain(|c| c != '_');\n     ///\n     /// assert_eq!(s, \"foobar\");\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"string_retain\", issue = \"43874\")]\n+    #[stable(feature = \"string_retain\", since = \"1.26.0\")]\n     pub fn retain<F>(&mut self, mut f: F)\n         where F: FnMut(char) -> bool\n     {"}, {"sha": "bcc999d73863318b6c87ec0e25052ca452143229", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -66,7 +66,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::cmp::Ordering;\n+use core::cmp::{self, Ordering};\n use core::fmt;\n use core::hash::{self, Hash};\n use core::intrinsics::{arith_offset, assume};\n@@ -334,9 +334,10 @@ impl<T> Vec<T> {\n     /// The vector will be able to hold exactly `capacity` elements without\n     /// reallocating. If `capacity` is 0, the vector will not allocate.\n     ///\n-    /// It is important to note that this function does not specify the *length*\n-    /// of the returned vector, but only the *capacity*. For an explanation of\n-    /// the difference between length and capacity, see *[Capacity and reallocation]*.\n+    /// It is important to note that although the returned vector has the\n+    /// *capacity* specified, the vector will have a zero *length*. For an\n+    /// explanation of the difference between length and capacity, see\n+    /// *[Capacity and reallocation]*.\n     ///\n     /// [Capacity and reallocation]: #capacity-and-reallocation\n     ///\n@@ -586,6 +587,31 @@ impl<T> Vec<T> {\n         self.buf.shrink_to_fit(self.len);\n     }\n \n+    /// Shrinks the capacity of the vector with a lower bound.\n+    ///\n+    /// The capacity will remain at least as large as both the length\n+    /// and the supplied value.\n+    ///\n+    /// Panics if the current capacity is smaller than the supplied\n+    /// minimum capacity.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(shrink_to)]\n+    /// let mut vec = Vec::with_capacity(10);\n+    /// vec.extend([1, 2, 3].iter().cloned());\n+    /// assert_eq!(vec.capacity(), 10);\n+    /// vec.shrink_to(4);\n+    /// assert!(vec.capacity() >= 4);\n+    /// vec.shrink_to(0);\n+    /// assert!(vec.capacity() >= 3);\n+    /// ```\n+    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"0\")]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        self.buf.shrink_to_fit(cmp::max(self.len, min_capacity));\n+    }\n+\n     /// Converts the vector into [`Box<[T]>`][owned slice].\n     ///\n     /// Note that this will drop any excess capacity."}, {"sha": "be6e8d0f22f07bea2c6e5e299e478311d2209852", "filename": "src/liballoc/vec_deque.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Fliballoc%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Fliballoc%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec_deque.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -676,9 +676,42 @@ impl<T> VecDeque<T> {\n     /// ```\n     #[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]\n     pub fn shrink_to_fit(&mut self) {\n+        self.shrink_to(0);\n+    }\n+\n+    /// Shrinks the capacity of the `VecDeque` with a lower bound.\n+    ///\n+    /// The capacity will remain at least as large as both the length\n+    /// and the supplied value.\n+    ///\n+    /// Panics if the current capacity is smaller than the supplied\n+    /// minimum capacity.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(shrink_to)]\n+    /// use std::collections::VecDeque;\n+    ///\n+    /// let mut buf = VecDeque::with_capacity(15);\n+    /// buf.extend(0..4);\n+    /// assert_eq!(buf.capacity(), 15);\n+    /// buf.shrink_to(6);\n+    /// assert!(buf.capacity() >= 6);\n+    /// buf.shrink_to(0);\n+    /// assert!(buf.capacity() >= 4);\n+    /// ```\n+    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"0\")]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        assert!(self.capacity() >= min_capacity, \"Tried to shrink to a larger capacity\");\n+\n         // +1 since the ringbuffer always leaves one space empty\n         // len + 1 can't overflow for an existing, well-formed ringbuffer.\n-        let target_cap = cmp::max(self.len() + 1, MINIMUM_CAPACITY + 1).next_power_of_two();\n+        let target_cap = cmp::max(\n+            cmp::max(min_capacity, self.len()) + 1,\n+            MINIMUM_CAPACITY + 1\n+        ).next_power_of_two();\n+\n         if target_cap < self.cap() {\n             // There are three cases of interest:\n             //   All elements are out of desired bounds"}, {"sha": "2620448927d86e5f283537ff44b67f6fe40dd5c6", "filename": "src/librustc_const_eval/lib.rs", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e5277c1457d397f22ba18a1d40c1318729becbb4/src%2Flibrustc_const_eval%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5277c1457d397f22ba18a1d40c1318729becbb4/src%2Flibrustc_const_eval%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Flib.rs?ref=e5277c1457d397f22ba18a1d40c1318729becbb4", "patch": "@@ -1,59 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! constant evaluation on the HIR and code to validate patterns/matches\n-//!\n-//! # Note\n-//!\n-//! This API is completely unstable and subject to change.\n-\n-#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-      html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n-#![deny(warnings)]\n-\n-#![feature(rustc_diagnostic_macros)]\n-#![feature(box_patterns)]\n-#![feature(box_syntax)]\n-#![feature(macro_lifetime_matcher)]\n-#![cfg_attr(stage0, feature(i128_type))]\n-#![feature(from_ref)]\n-\n-extern crate arena;\n-#[macro_use] extern crate syntax;\n-#[macro_use] extern crate log;\n-#[macro_use] extern crate rustc;\n-extern crate rustc_const_math;\n-extern crate rustc_data_structures;\n-extern crate rustc_errors;\n-extern crate syntax_pos;\n-\n-// NB: This module needs to be declared first so diagnostics are\n-// registered before they are used.\n-mod diagnostics;\n-\n-mod eval;\n-mod _match;\n-pub mod check_match;\n-pub mod pattern;\n-\n-pub use eval::*;\n-\n-use rustc::ty::maps::Providers;\n-\n-pub fn provide(providers: &mut Providers) {\n-    *providers = Providers {\n-        check_match: check_match::check_match,\n-        ..*providers\n-    };\n-}\n-\n-// Build the diagnostics array at the end so that the metadata includes error use sites.\n-__build_diagnostic_array! { librustc_const_eval, DIAGNOSTICS }"}, {"sha": "c6ebc99268057c4bbfd361291e6d35cd486408a9", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -901,7 +901,9 @@ pub fn phase_2_configure_and_expand_inner<'a, F>(sess: &'a Session,\n         Some(future) => {\n             let prev_graph = time(sess, \"blocked while dep-graph loading finishes\", || {\n                 future.open()\n-                      .expect(\"Could not join with background dep_graph thread\")\n+                      .unwrap_or_else(|e| rustc_incremental::LoadResult::Error {\n+                          message: format!(\"could not decode incremental cache: {:?}\", e)\n+                      })\n                       .open(sess)\n             });\n             DepGraph::new(prev_graph)"}, {"sha": "cad72ff778b55155e816b9d78950ad6b5c3e5f3a", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -39,6 +39,7 @@ pub use assert_dep_graph::assert_dep_graph;\n pub use persist::dep_graph_tcx_init;\n pub use persist::load_dep_graph;\n pub use persist::load_query_result_cache;\n+pub use persist::LoadResult;\n pub use persist::save_dep_graph;\n pub use persist::save_trans_partition;\n pub use persist::save_work_products;"}, {"sha": "44d6e532f79bb4aa67b52c4446ac18dc665d4aef", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -89,7 +89,8 @@ impl LoadResult<PreviousDepGraph> {\n     pub fn open(self, sess: &Session) -> PreviousDepGraph {\n         match self {\n             LoadResult::Error { message } => {\n-                sess.fatal(&message) /* never returns */\n+                sess.warn(&message);\n+                PreviousDepGraph::new(SerializedDepGraph::new())\n             },\n             LoadResult::DataOutOfDate => {\n                 if let Err(err) = delete_all_session_dir_contents(sess) {"}, {"sha": "755a550b5bca31e4af3a120cd56d4b6ce22dd204", "filename": "src/librustc_incremental/persist/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -27,6 +27,7 @@ pub use self::fs::prepare_session_directory;\n pub use self::load::dep_graph_tcx_init;\n pub use self::load::load_dep_graph;\n pub use self::load::load_query_result_cache;\n+pub use self::load::LoadResult;\n pub use self::save::save_dep_graph;\n pub use self::save::save_work_products;\n pub use self::work_product::save_trans_partition;"}, {"sha": "5bd63e0340e5c31412de7afa2a0ac992551b6260", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -713,6 +713,7 @@ fn link_natively(sess: &Session,\n         // linking executables as pie. Different versions of gcc seem to use\n         // different quotes in the error message so don't check for them.\n         if sess.target.target.options.linker_is_gnu &&\n+           sess.linker_flavor() != LinkerFlavor::Ld &&\n            (out.contains(\"unrecognized command line option\") ||\n             out.contains(\"unknown argument\")) &&\n            out.contains(\"-no-pie\") &&\n@@ -1008,8 +1009,9 @@ fn link_args(cmd: &mut Linker,\n         } else {\n             // recent versions of gcc can be configured to generate position\n             // independent executables by default. We have to pass -no-pie to\n-            // explicitly turn that off.\n-            if sess.target.target.options.linker_is_gnu {\n+            // explicitly turn that off. Not applicable to ld.\n+            if sess.target.target.options.linker_is_gnu\n+                && sess.linker_flavor() != LinkerFlavor::Ld {\n                 cmd.no_position_independent_executable();\n             }\n         }"}, {"sha": "3a79c14f4ec2ace96417215f477817e55ef4f103", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 59, "deletions": 10, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -1380,17 +1380,18 @@ fn external_path(cx: &DocContext, name: &str, trait_did: Option<DefId>, has_self\n     }\n }\n \n-impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n+impl<'a, 'tcx> Clean<TyParamBound> for (&'a ty::TraitRef<'tcx>, Vec<TypeBinding>) {\n     fn clean(&self, cx: &DocContext) -> TyParamBound {\n-        inline::record_extern_fqn(cx, self.def_id, TypeKind::Trait);\n-        let path = external_path(cx, &cx.tcx.item_name(self.def_id),\n-                                 Some(self.def_id), true, vec![], self.substs);\n+        let (trait_ref, ref bounds) = *self;\n+        inline::record_extern_fqn(cx, trait_ref.def_id, TypeKind::Trait);\n+        let path = external_path(cx, &cx.tcx.item_name(trait_ref.def_id),\n+                                 Some(trait_ref.def_id), true, bounds.clone(), trait_ref.substs);\n \n-        debug!(\"ty::TraitRef\\n  subst: {:?}\\n\", self.substs);\n+        debug!(\"ty::TraitRef\\n  subst: {:?}\\n\", trait_ref.substs);\n \n         // collect any late bound regions\n         let mut late_bounds = vec![];\n-        for ty_s in self.input_types().skip(1) {\n+        for ty_s in trait_ref.input_types().skip(1) {\n             if let ty::TyTuple(ts) = ty_s.sty {\n                 for &ty_s in ts {\n                     if let ty::TyRef(ref reg, _) = ty_s.sty {\n@@ -1410,7 +1411,7 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n                 trait_: ResolvedPath {\n                     path,\n                     typarams: None,\n-                    did: self.def_id,\n+                    did: trait_ref.def_id,\n                     is_generic: false,\n                 },\n                 generic_params: late_bounds,\n@@ -1420,6 +1421,12 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n     }\n }\n \n+impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n+    fn clean(&self, cx: &DocContext) -> TyParamBound {\n+        (self, vec![]).clean(cx)\n+    }\n+}\n+\n impl<'tcx> Clean<Option<Vec<TyParamBound>>> for Substs<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Option<Vec<TyParamBound>> {\n         let mut v = Vec::new();\n@@ -2780,9 +2787,51 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 let predicates_of = cx.tcx.predicates_of(def_id);\n                 let substs = cx.tcx.lift(&substs).unwrap();\n                 let bounds = predicates_of.instantiate(cx.tcx, substs);\n-                ImplTrait(bounds.predicates.into_iter().filter_map(|predicate| {\n-                    predicate.to_opt_poly_trait_ref().clean(cx)\n-                }).collect())\n+                let mut regions = vec![];\n+                let mut has_sized = false;\n+                let mut bounds = bounds.predicates.iter().filter_map(|predicate| {\n+                    let trait_ref = if let Some(tr) = predicate.to_opt_poly_trait_ref() {\n+                        tr\n+                    } else if let ty::Predicate::TypeOutlives(pred) = *predicate {\n+                        // these should turn up at the end\n+                        pred.skip_binder().1.clean(cx).map(|r| regions.push(RegionBound(r)));\n+                        return None;\n+                    } else {\n+                        return None;\n+                    };\n+\n+                    if let Some(sized) = cx.tcx.lang_items().sized_trait() {\n+                        if trait_ref.def_id() == sized {\n+                            has_sized = true;\n+                            return None;\n+                        }\n+                    }\n+\n+\n+                    let bounds = bounds.predicates.iter().filter_map(|pred|\n+                        if let ty::Predicate::Projection(proj) = *pred {\n+                            let proj = proj.skip_binder();\n+                            if proj.projection_ty.trait_ref(cx.tcx) == *trait_ref.skip_binder() {\n+                                Some(TypeBinding {\n+                                    name: cx.tcx.associated_item(proj.projection_ty.item_def_id)\n+                                                .name.clean(cx),\n+                                    ty: proj.ty.clean(cx),\n+                                })\n+                            } else {\n+                                None\n+                            }\n+                        } else {\n+                            None\n+                        }\n+                    ).collect();\n+\n+                    Some((trait_ref.skip_binder(), bounds).clean(cx))\n+                }).collect::<Vec<_>>();\n+                bounds.extend(regions);\n+                if !has_sized && !bounds.is_empty() {\n+                    bounds.insert(0, TyParamBound::maybe_sized(cx));\n+                }\n+                ImplTrait(bounds)\n             }\n \n             ty::TyClosure(..) | ty::TyGenerator(..) => Tuple(vec![]), // FIXME(pcwalton)"}, {"sha": "2eee60890e87d410e01d0e88a16beefd2760effc", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -2243,14 +2243,7 @@ fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n \n fn render_implementor(cx: &Context, implementor: &Impl, w: &mut fmt::Formatter,\n                       implementor_dups: &FxHashMap<&str, (DefId, bool)>) -> Result<(), fmt::Error> {\n-    write!(w, \"<li>\")?;\n-    if let Some(l) = (Item { cx, item: &implementor.impl_item }).src_href() {\n-        write!(w, \"<div class='out-of-band'>\")?;\n-        write!(w, \"<a class='srclink' href='{}' title='{}'>[src]</a>\",\n-                    l, \"goto source code\")?;\n-        write!(w, \"</div>\")?;\n-    }\n-    write!(w, \"<code>\")?;\n+    write!(w, \"<li><table class='table-display'><tbody><tr><td><code>\")?;\n     // If there's already another implementor that has the same abbridged name, use the\n     // full path, for example in `std::iter::ExactSizeIterator`\n     let use_absolute = match implementor.inner_impl().for_ {\n@@ -2269,7 +2262,14 @@ fn render_implementor(cx: &Context, implementor: &Impl, w: &mut fmt::Formatter,\n             write!(w, \";</span>\")?;\n         }\n     }\n-    writeln!(w, \"</code></li>\")?;\n+    write!(w, \"</code><td>\")?;\n+    if let Some(l) = (Item { cx, item: &implementor.impl_item }).src_href() {\n+        write!(w, \"<div class='out-of-band'>\")?;\n+        write!(w, \"<a class='srclink' href='{}' title='{}'>[src]</a>\",\n+                    l, \"goto source code\")?;\n+        write!(w, \"</div>\")?;\n+    }\n+    writeln!(w, \"</td></tr></tbody></table></li>\")?;\n     Ok(())\n }\n \n@@ -3314,10 +3314,11 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n             Some(ref t) => format!(\"impl-{}\", small_url_encode(&format!(\"{:#}\", t))),\n             None => \"impl\".to_string(),\n         });\n-        write!(w, \"<h3 id='{}' class='impl'><span class='in-band'><code>{}</code>\",\n+        write!(w, \"<h3 id='{}' class='impl'><span class='in-band'><table class='table-display'>\\\n+                   <tbody><tr><td><code>{}</code>\",\n                id, i.inner_impl())?;\n         write!(w, \"<a href='#{}' class='anchor'></a>\", id)?;\n-        write!(w, \"</span><span class='out-of-band'>\")?;\n+        write!(w, \"</span></td><td><span class='out-of-band'>\")?;\n         let since = i.impl_item.stability.as_ref().map(|s| &s.since[..]);\n         if let Some(l) = (Item { item: &i.impl_item, cx: cx }).src_href() {\n             write!(w, \"<div class='ghost'></div>\")?;\n@@ -3327,8 +3328,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n         } else {\n             render_stability_since_raw(w, since, outer_version)?;\n         }\n-        write!(w, \"</span>\")?;\n-        write!(w, \"</h3>\\n\")?;\n+        write!(w, \"</span></td></tr></tbody></table></h3>\")?;\n         if let Some(ref dox) = cx.shared.maybe_collapsed_doc_value(&i.impl_item) {\n             write!(w, \"<div class='docblock'>{}</div>\",\n                    Markdown(&*dox, &i.impl_item.links()))?;\n@@ -3357,19 +3357,20 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                     write!(w, \"<h4 id='{}' class=\\\"{}\\\">\", id, item_type)?;\n                     write!(w, \"{}\", spotlight_decl(decl)?)?;\n                     write!(w, \"<span id='{}' class='invisible'>\", ns_id)?;\n-                    write!(w, \"<code>\")?;\n+                    write!(w, \"<table class='table-display'><tbody><tr><td><code>\")?;\n                     render_assoc_item(w, item, link.anchor(&id), ItemType::Impl)?;\n                     write!(w, \"</code>\")?;\n                     if let Some(l) = (Item { cx, item }).src_href() {\n-                        write!(w, \"</span><span class='out-of-band'>\")?;\n+                        write!(w, \"</span></td><td><span class='out-of-band'>\")?;\n                         write!(w, \"<div class='ghost'></div>\")?;\n                         render_stability_since_raw(w, item.stable_since(), outer_version)?;\n                         write!(w, \"<a class='srclink' href='{}' title='{}'>[src]</a>\",\n                                l, \"goto source code\")?;\n                     } else {\n+                        write!(w, \"</td><td>\")?;\n                         render_stability_since_raw(w, item.stable_since(), outer_version)?;\n                     }\n-                    write!(w, \"</span></h4>\\n\")?;\n+                    write!(w, \"</td></tr></tbody></table></span></h4>\")?;\n                 }\n             }\n             clean::TypedefItem(ref tydef, _) => {"}, {"sha": "66f45272e726bc6e0c6170b1457750284858341d", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -1171,6 +1171,10 @@\n             return h1.innerHTML;\n         }\n \n+        function pathSplitter(path) {\n+            return '<span>' + path.replace(/::/g, '::</span><span>');\n+        }\n+\n         function addTab(array, query, display) {\n             var extraStyle = '';\n             if (display === false) {\n@@ -1225,7 +1229,7 @@\n \n                     output += '<tr class=\"' + type + ' result\"><td>' +\n                               '<a href=\"' + href + '\">' +\n-                              displayPath + '<span class=\"' + type + '\">' +\n+                              pathSplitter(displayPath) + '<span class=\"' + type + '\">' +\n                               name + '</span></a></td><td>' +\n                               '<a href=\"' + href + '\">' +\n                               '<span class=\"desc\">' + escape(item.desc) +\n@@ -1713,19 +1717,20 @@\n             // we are collapsing the impl block\n             function implHider(addOrRemove) {\n                 return function(n) {\n-                    if (hasClass(n, \"method\")) {\n-                        if (addOrRemove) {\n-                            addClass(n, \"hidden-by-impl-hider\");\n-                        } else {\n-                            removeClass(n, \"hidden-by-impl-hider\");\n+                    var is_method = hasClass(n, \"method\");\n+                    if (is_method || hasClass(n, \"type\")) {\n+                        if (is_method === true) {\n+                            if (addOrRemove) {\n+                                addClass(n, \"hidden-by-impl-hider\");\n+                            } else {\n+                                removeClass(n, \"hidden-by-impl-hider\");\n+                            }\n                         }\n                         var ns = n.nextElementSibling;\n                         while (true) {\n                             if (ns && (\n                                     hasClass(ns, \"docblock\") ||\n-                                    hasClass(ns, \"stability\") ||\n-                                    false\n-                                    )) {\n+                                    hasClass(ns, \"stability\"))) {\n                                 if (addOrRemove) {\n                                     addClass(ns, \"hidden-by-impl-hider\");\n                                 } else {\n@@ -1741,20 +1746,22 @@\n             }\n \n             var relatedDoc = toggle.parentNode;\n+            var docblock = relatedDoc.nextElementSibling;\n \n             while (!hasClass(relatedDoc, \"impl-items\")) {\n                 relatedDoc = relatedDoc.nextElementSibling;\n             }\n \n-            if (!relatedDoc) {\n+            if (!relatedDoc && !hasClass(docblock, \"docblock\")) {\n                 return;\n             }\n \n             // Hide all functions, but not associated types/consts\n \n             var action = mode;\n             if (action === \"toggle\") {\n-                if (hasClass(relatedDoc, \"fns-now-collapsed\")) {\n+                if (hasClass(relatedDoc, \"fns-now-collapsed\") ||\n+                    hasClass(docblock,  \"hidden-by-impl-hider\")) {\n                     action = \"show\";\n                 } else {\n                     action = \"hide\";\n@@ -1763,10 +1770,12 @@\n \n             if (action === \"show\") {\n                 removeClass(relatedDoc, \"fns-now-collapsed\");\n+                removeClass(docblock, \"hidden-by-usual-hider\");\n                 onEach(toggle.childNodes, adjustToggle(false));\n                 onEach(relatedDoc.childNodes, implHider(false));\n             } else if (action === \"hide\") {\n                 addClass(relatedDoc, \"fns-now-collapsed\");\n+                addClass(docblock, \"hidden-by-usual-hider\");\n                 onEach(toggle.childNodes, adjustToggle(true));\n                 onEach(relatedDoc.childNodes, implHider(true));\n             }\n@@ -1816,6 +1825,9 @@\n \n     var func = function(e) {\n         var next = e.nextElementSibling;\n+        if (hasClass(e, 'impl') && next && hasClass(next, 'docblock')) {\n+            next = next.nextElementSibling;\n+        }\n         if (!next) {\n             return;\n         }"}, {"sha": "949b41d3aea22f4b228d7427cf6f51573c5b5224", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -296,6 +296,11 @@ nav.sub {\n \toverflow: auto;\n }\n \n+#results > table {\n+\twidth: 100%;\n+\ttable-layout: fixed;\n+}\n+\n .content pre.line-numbers {\n \tfloat: left;\n \tborder: none;\n@@ -387,8 +392,6 @@ h4 > code, h3 > code, .invisible > code {\n .content .in-band {\n \tmargin: 0px;\n \tpadding: 0px;\n-\tdisplay: inline-block;\n-\tmax-width: calc(100% - 43px);\n }\n \n .in-band > code {\n@@ -403,7 +406,7 @@ h4 > code, h3 > code, .invisible > code {\n \tfont-family: \"Fira Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n }\n \n-.content table {\n+.content table:not(.table-display) {\n \tborder-spacing: 0 5px;\n \tborder-collapse: separate;\n }\n@@ -470,7 +473,6 @@ h4 > code, h3 > code, .invisible > code {\n .content .methods > div:not(.important-traits) { margin-left: 40px; }\n \n .content .impl-items .docblock, .content .impl-items .stability {\n-\tmargin-left: 40px;\n \tmargin-bottom: .6em;\n }\n .content .impl-items .method, .content .impl-items > .type, .impl-items > .associatedconstant {\n@@ -577,8 +579,16 @@ a {\n \tdisplay: block;\n }\n \n-.content .search-results td:first-child { padding-right: 0; }\n-.content .search-results td:first-child a { padding-right: 10px; }\n+.content .search-results td:first-child {\n+\tpadding-right: 0;\n+\twidth: 75%;\n+}\n+.content .search-results td:first-child a {\n+\tpadding-right: 10px;\n+}\n+.content .search-results td:first-child a span {\n+\tfloat: left;\n+}\n \n tr.result span.primitive::after {\n \tcontent: ' (primitive type)';\n@@ -1254,3 +1264,28 @@ kbd {\n \t/* important because of conflicting rule for small screens */\n \tdisplay: none !important;\n }\n+\n+#implementations-list > h3 > span.in-band {\n+\twidth: 100%;\n+}\n+\n+.table-display {\n+\twidth: 100%;\n+\tborder: 0;\n+\tborder-collapse: collapse;\n+\tborder-spacing: 0;\n+\tfont-size: 16px;\n+}\n+\n+.table-display tr td:first-child {\n+\tpadding-right: 0;\n+}\n+\n+.table-display tr td:last-child {\n+\tfloat: right;\n+}\n+.table-display .out-of-band {\n+\tposition: relative;\n+\tfont-size: 19px;\n+\tdisplay: block;\n+}"}, {"sha": "474999a6646df687cd91ec5c8566443feff5efd6", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -910,6 +910,46 @@ impl<K, V, S> HashMap<K, V, S>\n         }\n     }\n \n+    /// Shrinks the capacity of the map with a lower limit. It will drop\n+    /// down no lower than the supplied limit while maintaining the internal rules\n+    /// and possibly leaving some space in accordance with the resize policy.\n+    ///\n+    /// Panics if the current capacity is smaller than the supplied\n+    /// minimum capacity.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(shrink_to)]\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);\n+    /// map.insert(1, 2);\n+    /// map.insert(3, 4);\n+    /// assert!(map.capacity() >= 100);\n+    /// map.shrink_to(10);\n+    /// assert!(map.capacity() >= 10);\n+    /// map.shrink_to(0);\n+    /// assert!(map.capacity() >= 2);\n+    /// ```\n+    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"0\")]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        assert!(self.capacity() >= min_capacity, \"Tried to shrink to a larger capacity\");\n+\n+        let new_raw_cap = self.resize_policy.raw_capacity(max(self.len(), min_capacity));\n+        if self.raw_capacity() != new_raw_cap {\n+            let old_table = replace(&mut self.table, RawTable::new(new_raw_cap));\n+            let old_size = old_table.size();\n+\n+            // Shrink the table. Naive algorithm for resizing:\n+            for (h, k, v) in old_table.into_iter() {\n+                self.insert_hashed_nocheck(h, k, v);\n+            }\n+\n+            debug_assert_eq!(self.table.size(), old_size);\n+        }\n+    }\n+\n     /// Insert a pre-hashed key-value pair, without first checking\n     /// that there's enough room in the buckets. Returns a reference to the\n     /// newly insert value."}, {"sha": "855563a5cb8db8c07479eaa990068d76b1ed0581", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -292,6 +292,34 @@ impl<T, S> HashSet<T, S>\n         self.map.shrink_to_fit()\n     }\n \n+    /// Shrinks the capacity of the set with a lower limit. It will drop\n+    /// down no lower than the supplied limit while maintaining the internal rules\n+    /// and possibly leaving some space in accordance with the resize policy.\n+    ///\n+    /// Panics if the current capacity is smaller than the supplied\n+    /// minimum capacity.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(shrink_to)]\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let mut set = HashSet::with_capacity(100);\n+    /// set.insert(1);\n+    /// set.insert(2);\n+    /// assert!(set.capacity() >= 100);\n+    /// set.shrink_to(10);\n+    /// assert!(set.capacity() >= 10);\n+    /// set.shrink_to(0);\n+    /// assert!(set.capacity() >= 2);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"0\")]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        self.map.shrink_to(min_capacity)\n+    }\n+\n     /// An iterator visiting all elements in arbitrary order.\n     /// The iterator element type is `&'a T`.\n     ///"}, {"sha": "7520121a8c2900f51506920814679790e61707ff", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -295,6 +295,36 @@ impl OsString {\n         self.inner.shrink_to_fit()\n     }\n \n+    /// Shrinks the capacity of the `OsString` with a lower bound.\n+    ///\n+    /// The capacity will remain at least as large as both the length\n+    /// and the supplied value.\n+    ///\n+    /// Panics if the current capacity is smaller than the supplied\n+    /// minimum capacity.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(shrink_to)]\n+    /// use std::ffi::OsString;\n+    ///\n+    /// let mut s = OsString::from(\"foo\");\n+    ///\n+    /// s.reserve(100);\n+    /// assert!(s.capacity() >= 100);\n+    ///\n+    /// s.shrink_to(10);\n+    /// assert!(s.capacity() >= 10);\n+    /// s.shrink_to(0);\n+    /// assert!(s.capacity() >= 3);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"shrink_to\", reason = \"new API\", issue=\"0\")]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        self.inner.shrink_to(min_capacity)\n+    }\n+\n     /// Converts this `OsString` into a boxed [`OsStr`].\n     ///\n     /// [`OsStr`]: struct.OsStr.html"}, {"sha": "68d3b946d9ef55af8b27318091d46915da396a9e", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -298,6 +298,7 @@\n #![feature(raw)]\n #![feature(rustc_attrs)]\n #![feature(stdsimd)]\n+#![feature(shrink_to)]\n #![feature(slice_bytes)]\n #![feature(slice_concat_ext)]\n #![feature(slice_internals)]"}, {"sha": "da27787babb97d63a14953027d39714c37b79d70", "filename": "src/libstd/sys/redox/os_str.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -104,6 +104,11 @@ impl Buf {\n         self.inner.shrink_to_fit()\n     }\n \n+    #[inline]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        self.inner.shrink_to(min_capacity)\n+    }\n+\n     pub fn as_slice(&self) -> &Slice {\n         unsafe { mem::transmute(&*self.inner) }\n     }"}, {"sha": "e43bc6da5f1f8219b3e99bace02be04f8813a492", "filename": "src/libstd/sys/unix/os_str.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -104,6 +104,11 @@ impl Buf {\n         self.inner.shrink_to_fit()\n     }\n \n+    #[inline]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        self.inner.shrink_to(min_capacity)\n+    }\n+\n     pub fn as_slice(&self) -> &Slice {\n         unsafe { mem::transmute(&*self.inner) }\n     }"}, {"sha": "84f560af69beca53db1c17bf5e18d0f1923953ac", "filename": "src/libstd/sys/wasm/os_str.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibstd%2Fsys%2Fwasm%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibstd%2Fsys%2Fwasm%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fos_str.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -104,6 +104,11 @@ impl Buf {\n         self.inner.shrink_to_fit()\n     }\n \n+    #[inline]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        self.inner.shrink_to(min_capacity)\n+    }\n+\n     pub fn as_slice(&self) -> &Slice {\n         unsafe { mem::transmute(&*self.inner) }\n     }"}, {"sha": "bcc66b9954b895c97b0db3bc9c57ab864c5f9052", "filename": "src/libstd/sys/windows/os_str.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -113,6 +113,11 @@ impl Buf {\n         self.inner.shrink_to_fit()\n     }\n \n+    #[inline]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        self.inner.shrink_to(min_capacity)\n+    }\n+\n     #[inline]\n     pub fn into_box(self) -> Box<Slice> {\n         unsafe { mem::transmute(self.inner.into_box()) }"}, {"sha": "dda4e1bab3b42f2b916de2ca7c2379443c2b78e4", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -253,6 +253,11 @@ impl Wtf8Buf {\n         self.bytes.shrink_to_fit()\n     }\n \n+    #[inline]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        self.bytes.shrink_to(min_capacity)\n+    }\n+\n     /// Returns the number of bytes that this string buffer can hold without reallocating.\n     #[inline]\n     pub fn capacity(&self) -> usize {"}, {"sha": "382ef2cc407dd93ba704457c5fee7a58073fde86", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -205,17 +205,13 @@ GEN_SUBTARGETS\n \n extern \"C\" bool LLVMRustHasFeature(LLVMTargetMachineRef TM,\n                                    const char *Feature) {\n-#if LLVM_RUSTLLVM\n+#if LLVM_VERSION_GE(6, 0)\n   TargetMachine *Target = unwrap(TM);\n   const MCSubtargetInfo *MCInfo = Target->getMCSubtargetInfo();\n-  const FeatureBitset &Bits = MCInfo->getFeatureBits();\n-  const ArrayRef<SubtargetFeatureKV> FeatTable = MCInfo->getFeatureTable();\n-\n-  for (auto &FeatureEntry : FeatTable)\n-    if (!strcmp(FeatureEntry.Key, Feature))\n-      return (Bits & FeatureEntry.Value) == FeatureEntry.Value;\n-#endif\n+  return MCInfo->checkFeatures(std::string(\"+\") + Feature);\n+#else\n   return false;\n+#endif\n }\n \n enum class LLVMRustCodeModel {"}, {"sha": "b1d7e5435c4cb9b33d905aa3b78cb234a6c7a38b", "filename": "src/test/run-pass/sse2.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Ftest%2Frun-pass%2Fsse2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Ftest%2Frun-pass%2Fsse2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsse2.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// no-system-llvm -- needs MCSubtargetInfo::getFeatureTable()\n+// min-llvm-version 6.0\n+// ^ needs MCSubtargetInfo::checkFeatures()\n // ignore-cloudabi no std::env\n \n #![feature(cfg_target_feature)]\n@@ -29,4 +30,7 @@ fn main() {\n         assert!(cfg!(target_feature = \"sse2\"),\n                 \"SSE2 was not detected as available on an x86 platform\");\n     }\n+    // check a negative case too -- whitelisted on x86, but not enabled by default\n+    assert!(cfg!(not(target_feature = \"avx2\")),\n+            \"AVX2 shouldn't be detected as available by default on any platform\");\n }"}, {"sha": "ba6c3e956953be16dacb3b317f33dd92b478c081", "filename": "src/test/rustdoc/auxiliary/extern-impl-trait.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Ftest%2Frustdoc%2Fauxiliary%2Fextern-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Ftest%2Frustdoc%2Fauxiliary%2Fextern-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fextern-impl-trait.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait Foo {\n+    type Associated;\n+}\n+\n+pub struct X;\n+pub struct Y;\n+\n+\n+impl Foo for X {\n+    type Associated = ();\n+}\n+\n+impl Foo for Y {\n+    type Associated = ();\n+}\n+\n+impl X {\n+    pub fn returns_sized<'a>(&'a self) -> impl Foo<Associated=()> + 'a {\n+        X\n+    }\n+}\n+\n+impl Y {\n+    pub fn returns_unsized<'a>(&'a self) -> Box<impl ?Sized + Foo<Associated=()> + 'a> {\n+        Box::new(X)\n+    }\n+}"}, {"sha": "02a8e962fe17badf2f5e4ca430b459e49337c750", "filename": "src/test/rustdoc/extern-impl-trait.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Ftest%2Frustdoc%2Fextern-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Ftest%2Frustdoc%2Fextern-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fextern-impl-trait.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:extern-impl-trait.rs\n+\n+#![crate_name = \"foo\"]\n+\n+extern crate extern_impl_trait;\n+\n+// @has 'foo/struct.X.html' '//code' \"impl Foo<Associated = ()> + 'a\"\n+pub use extern_impl_trait::X;\n+\n+// @has 'foo/struct.Y.html' '//code' \"impl ?Sized + Foo<Associated = ()> + 'a\"\n+pub use extern_impl_trait::Y;"}, {"sha": "a4ebf6d3a7e8335cd76aa2b497bace29caaaa843", "filename": "src/test/rustdoc/synthetic_auto/complex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -30,7 +30,7 @@ mod foo {\n }\n \n // @has complex/struct.NotOuter.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' \"impl<'a, T, K: \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<'a, T, K: \\\n // ?Sized> Send for NotOuter<'a, T, K> where K: for<'b> Fn((&'b bool, &'a u8)) \\\n // -> &'b i8, T: MyTrait<'a>, <T as MyTrait<'a>>::MyItem: Copy, 'a: 'static\"\n "}, {"sha": "1c1e7bc2505261bd6efcc69b89a5e486853f1577", "filename": "src/test/rustdoc/synthetic_auto/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -18,10 +18,10 @@ where\n {}\n \n // @has lifetimes/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' \"impl<'c, K> Send \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<'c, K> Send \\\n // for Foo<'c, K> where K: for<'b> Fn(&'b bool) -> &'c u8, 'c: 'static\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' \"impl<'c, K> Sync \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<'c, K> Sync \\\n // for Foo<'c, K> where K: Sync\"\n pub struct Foo<'c, K: 'c> {\n     inner_field: Inner<'c, K>,"}, {"sha": "ef6797ecf3c54277ce872fd01541907a3e46d171", "filename": "src/test/rustdoc/synthetic_auto/manual.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n // @has manual/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' 'impl<T> Sync for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' 'impl<T> Sync for \\\n // Foo<T> where T: Sync'\n //\n-// @has - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]/*/code' \\\n+// @has - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]//*/code' \\\n // 'impl<T> Send for Foo<T>'\n //\n // @count - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]' 1"}, {"sha": "64480d28240b648eff8e9072b4b5b90e3fd1ddea", "filename": "src/test/rustdoc/synthetic_auto/negative.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnegative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnegative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnegative.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -13,10 +13,10 @@ pub struct Inner<T: Copy> {\n }\n \n // @has negative/struct.Outer.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' \"impl<T> !Send for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<T> !Send for \\\n // Outer<T>\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' \"impl<T> \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<T> \\\n // !Sync for Outer<T>\"\n pub struct Outer<T: Copy> {\n     inner_field: Inner<T>,"}, {"sha": "ccdbe159b6c5a5c5144e69812cc3bec5f695943d", "filename": "src/test/rustdoc/synthetic_auto/nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -18,10 +18,10 @@ where\n }\n \n // @has nested/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' 'impl<T> Send for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' 'impl<T> Send for \\\n // Foo<T> where T: Copy'\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \\\n // 'impl<T> Sync for Foo<T> where T: Sync'\n pub struct Foo<T> {\n     inner_field: Inner<T>,"}, {"sha": "24fba221b99372947d21a520f5d1a0f2fd49a507", "filename": "src/test/rustdoc/synthetic_auto/no-redundancy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -19,7 +19,7 @@ where\n }\n \n // @has no_redundancy/struct.Outer.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' \"impl<T> Send for \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<T> Send for \\\n // Outer<T> where T: Copy + Send\"\n pub struct Outer<T> {\n     inner_field: Inner<T>,"}, {"sha": "d588190c4f9d20748c4a373e835ede65af562684", "filename": "src/test/rustdoc/synthetic_auto/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52c44ea8df9f9045e6059cb2d37df743be50bb1/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs?ref=d52c44ea8df9f9045e6059cb2d37df743be50bb1", "patch": "@@ -33,10 +33,10 @@ where\n }\n \n // @has project/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' \"impl<'c, K> Send \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<'c, K> Send \\\n // for Foo<'c, K> where K: MyTrait<MyItem = bool>, 'c: 'static\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]/*/code' \"impl<'c, K> Sync \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<'c, K> Sync \\\n // for Foo<'c, K> where K: MyTrait, <K as MyTrait>::MyItem: OtherTrait, 'c: 'static,\"\n pub struct Foo<'c, K: 'c> {\n     inner_field: Inner<'c, K>,"}]}