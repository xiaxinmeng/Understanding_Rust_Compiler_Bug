{"sha": "ac5366b669b5a4f9a6c7e231ac6f99e709c44fe9", "node_id": "C_kwDOAAsO6NoAKGFjNTM2NmI2NjliNWE0ZjlhNmM3ZTIzMWFjNmY5OWU3MDljNDRmZTk", "commit": {"author": {"name": "ricked-twice", "email": "39213807+ricked-twice@users.noreply.github.com", "date": "2022-05-17T20:59:13Z"}, "committer": {"name": "ricked-twice", "email": "39213807+ricked-twice@users.noreply.github.com", "date": "2022-05-17T20:59:13Z"}, "message": "Taking review into account", "tree": {"sha": "74ca5fda4b39892e01136f86da6cf283de02adee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74ca5fda4b39892e01136f86da6cf283de02adee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac5366b669b5a4f9a6c7e231ac6f99e709c44fe9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEy//zn6QeojTXHSMFkquVU+1XdQMFAmKEDKEACgkQkquVU+1X\ndQNAXRAAmU6phDuitTxCNktBJqJ8r7kKn2/36psm1vn/LGfsSQeM0WpTEM/9dKSD\npmM3xSlyUwOJMCwviSkiCYtKSsblibL/566xZ9ZAaCAGEIIIwKRrVNTt0XWVzywq\nmL3f6xvJ1Gwhqd4lhRgyxkq9h/Qy4t3ek9ZoK9s9j7obtsi4K19qJLXs9i0eJxGl\nQi52cJjelRvm6BGN+k3YVsQHWbRdSjPEYwjL3JbztEssKGW57Zb5fCVCIjGzqLIS\nr8SNBKvpSlo/sWlVwn4YIdOxY2wT3mftYgXaRLgyuqfc1kPl/hm2ha28ZPLLNck4\nrEOzdPqU0ioZDDvCp7ghF8ZMToS8T56F8gO76dxgAVm5MrKig5YxP109o1uk/gsc\nY1FrjO0AGo+q5LDu75qDbwOvBantz2jYjwMbqSlnHnaIv5oNuQx0t0f9n/E6N3+I\ns15K2UzwbAovbdtcz2Dqrx9GCczPWS/yjWt3vP6wE3DEEQmjtbru4v9l7bc5bSMy\niX+PMhLqBS3dYpELk5HD44wZuhNUlXD0cigUGGquRkjYgSb57+pjmPYyylQi9Xdm\nnjUw6298Jb40Fn5I7lAkoht6JRyMRAn7rtfx5kuEEGgvZemr/3jGdwfEJJIIFUfX\n561Ftwx04KXcmnD9KlCKGFXJ3wH7l1kol9PbLqBnHkWnONRpykY=\n=B+lt\n-----END PGP SIGNATURE-----", "payload": "tree 74ca5fda4b39892e01136f86da6cf283de02adee\nparent 4d7e014550444129deb3c83dd588357cb36241b2\nauthor ricked-twice <39213807+ricked-twice@users.noreply.github.com> 1652821153 +0200\ncommitter ricked-twice <39213807+ricked-twice@users.noreply.github.com> 1652821153 +0200\n\nTaking review into account\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac5366b669b5a4f9a6c7e231ac6f99e709c44fe9", "html_url": "https://github.com/rust-lang/rust/commit/ac5366b669b5a4f9a6c7e231ac6f99e709c44fe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac5366b669b5a4f9a6c7e231ac6f99e709c44fe9/comments", "author": {"login": "ricked-twice", "id": 39213807, "node_id": "MDQ6VXNlcjM5MjEzODA3", "avatar_url": "https://avatars.githubusercontent.com/u/39213807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ricked-twice", "html_url": "https://github.com/ricked-twice", "followers_url": "https://api.github.com/users/ricked-twice/followers", "following_url": "https://api.github.com/users/ricked-twice/following{/other_user}", "gists_url": "https://api.github.com/users/ricked-twice/gists{/gist_id}", "starred_url": "https://api.github.com/users/ricked-twice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ricked-twice/subscriptions", "organizations_url": "https://api.github.com/users/ricked-twice/orgs", "repos_url": "https://api.github.com/users/ricked-twice/repos", "events_url": "https://api.github.com/users/ricked-twice/events{/privacy}", "received_events_url": "https://api.github.com/users/ricked-twice/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ricked-twice", "id": 39213807, "node_id": "MDQ6VXNlcjM5MjEzODA3", "avatar_url": "https://avatars.githubusercontent.com/u/39213807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ricked-twice", "html_url": "https://github.com/ricked-twice", "followers_url": "https://api.github.com/users/ricked-twice/followers", "following_url": "https://api.github.com/users/ricked-twice/following{/other_user}", "gists_url": "https://api.github.com/users/ricked-twice/gists{/gist_id}", "starred_url": "https://api.github.com/users/ricked-twice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ricked-twice/subscriptions", "organizations_url": "https://api.github.com/users/ricked-twice/orgs", "repos_url": "https://api.github.com/users/ricked-twice/repos", "events_url": "https://api.github.com/users/ricked-twice/events{/privacy}", "received_events_url": "https://api.github.com/users/ricked-twice/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d7e014550444129deb3c83dd588357cb36241b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d7e014550444129deb3c83dd588357cb36241b2", "html_url": "https://github.com/rust-lang/rust/commit/4d7e014550444129deb3c83dd588357cb36241b2"}], "stats": {"total": 51, "additions": 21, "deletions": 30}, "files": [{"sha": "c3ee849d857165346ce33eeddb69f73c2da7d49e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ac5366b669b5a4f9a6c7e231ac6f99e709c44fe9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac5366b669b5a4f9a6c7e231ac6f99e709c44fe9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=ac5366b669b5a4f9a6c7e231ac6f99e709c44fe9", "patch": "@@ -628,15 +628,17 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             if let Some(parent_trait_pred) = parent_trait_pred {\n                 real_trait_pred = parent_trait_pred;\n             }\n-            let Some(real_ty) = real_trait_pred.self_ty().no_bound_vars() else {\n-                continue;\n-            };\n+\n+            // Skipping binder here, remapping below\n+            let real_ty = real_trait_pred.self_ty().skip_binder();\n \n             if let ty::Ref(region, base_ty, mutbl) = *real_ty.kind() {\n                 let mut autoderef = Autoderef::new(self, param_env, body_id, span, base_ty, span);\n                 if let Some(steps) = autoderef.find_map(|(ty, steps)| {\n                     // Re-add the `&`\n                     let ty = self.tcx.mk_ref(region, TypeAndMut { ty, mutbl });\n+\n+                    // Remapping bound vars here\n                     let real_trait_pred_and_ty =\n                         real_trait_pred.map_bound(|inner_trait_pred| (inner_trait_pred, ty));\n                     let obligation = self\n@@ -661,6 +663,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     }\n                 } else if real_trait_pred != trait_pred {\n                     // This branch addresses #87437.\n+\n+                    // Remapping bound vars here\n                     let real_trait_pred_and_base_ty =\n                         real_trait_pred.map_bound(|inner_trait_pred| (inner_trait_pred, base_ty));\n                     let obligation = self.mk_trait_obligation_with_new_self_ty(\n@@ -723,6 +727,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> bool {\n+        // Skipping binder here, remapping below\n         let self_ty = trait_pred.self_ty().skip_binder();\n \n         let (def_id, output_ty, callable) = match *self_ty.kind() {\n@@ -732,8 +737,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         };\n         let msg = format!(\"use parentheses to call the {}\", callable);\n \n+        // \"We should really create a single list of bound vars from the combined vars\n+        // from the predicate and function, but instead we just liberate the function bound vars\"\n         let output_ty = self.tcx.liberate_late_bound_regions(def_id, output_ty);\n \n+        // Remapping bound vars here\n         let trait_pred_and_self = trait_pred.map_bound(|trait_pred| (trait_pred, output_ty));\n \n         let new_obligation =\n@@ -876,12 +884,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         // Because of this, we modify the error to refer to the original obligation and\n                         // return early in the caller.\n \n-                        let msg = format!(\n-                            \"the trait bound `{}: {}` is not satisfied\",\n-                            // Safe to skip binder here\n-                            old_pred.self_ty().skip_binder(),\n-                            old_pred.print_modifiers_and_trait_path(),\n-                        );\n+                        let msg = format!(\"the trait bound `{}` is not satisfied\", old_pred);\n                         if has_custom_message {\n                             err.note(&msg);\n                         } else {\n@@ -997,7 +1000,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 return false;\n             }\n \n-            // We skip binder here\n+            // Skipping binder here, remapping below\n             let mut suggested_ty = trait_pred.self_ty().skip_binder();\n \n             for refs_remaining in 0..refs_number {\n@@ -1006,7 +1009,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 };\n                 suggested_ty = *inner_ty;\n \n-                // We remap bounds here\n+                // Remapping bound vars here\n                 let trait_pred_and_suggested_ty =\n                     trait_pred.map_bound(|trait_pred| (trait_pred, suggested_ty));\n \n@@ -1132,22 +1135,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 return;\n             }\n \n+            // Skipping binder here, remapping below\n             if let ty::Ref(region, t_type, mutability) = *trait_pred.skip_binder().self_ty().kind()\n             {\n-                if region.is_late_bound() || t_type.has_escaping_bound_vars() {\n-                    // Avoid debug assertion in `mk_obligation_for_def_id`.\n-                    //\n-                    // If the self type has escaping bound vars then it's not\n-                    // going to be the type of an expression, so the suggestion\n-                    // probably won't apply anyway.\n-                    return;\n-                }\n-\n                 let suggested_ty = match mutability {\n                     hir::Mutability::Mut => self.tcx.mk_imm_ref(region, t_type),\n                     hir::Mutability::Not => self.tcx.mk_mut_ref(region, t_type),\n                 };\n \n+                // Remapping bound vars here\n                 let trait_pred_and_suggested_ty =\n                     trait_pred.map_bound(|trait_pred| (trait_pred, suggested_ty));\n "}, {"sha": "68303b842088ecadca31671af29cf1e884c719e6", "filename": "src/test/ui/binop/issue-77910-1.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ac5366b669b5a4f9a6c7e231ac6f99e709c44fe9/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac5366b669b5a4f9a6c7e231ac6f99e709c44fe9/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr?ref=ac5366b669b5a4f9a6c7e231ac6f99e709c44fe9", "patch": "@@ -12,20 +12,14 @@ LL |     assert_eq!(foo, y);\n error[E0277]: `for<'r> fn(&'r i32) -> &'r i32 {foo}` doesn't implement `Debug`\n   --> $DIR/issue-77910-1.rs:8:5\n    |\n+LL | fn foo(s: &i32) -> &i32 {\n+   |    --- consider calling this function\n+...\n LL |     assert_eq!(foo, y);\n    |     ^^^^^^^^^^^^^^^^^^ `for<'r> fn(&'r i32) -> &'r i32 {foo}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = help: the trait `Debug` is not implemented for `for<'r> fn(&'r i32) -> &'r i32 {foo}`\n-   = help: the following other types implement trait `Debug`:\n-             extern \"C\" fn() -> Ret\n-             extern \"C\" fn(A) -> Ret\n-             extern \"C\" fn(A, ...) -> Ret\n-             extern \"C\" fn(A, B) -> Ret\n-             extern \"C\" fn(A, B, ...) -> Ret\n-             extern \"C\" fn(A, B, C) -> Ret\n-             extern \"C\" fn(A, B, C, ...) -> Ret\n-             extern \"C\" fn(A, B, C, D) -> Ret\n-           and 68 others\n+   = help: use parentheses to call the function: `foo(s)`\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors"}, {"sha": "ba6af8f15fa89658915f1ddad572cbfd4c52fe3f", "filename": "src/test/ui/suggestions/imm-ref-trait-object-literal-bound-regions.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac5366b669b5a4f9a6c7e231ac6f99e709c44fe9/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal-bound-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac5366b669b5a4f9a6c7e231ac6f99e709c44fe9/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal-bound-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal-bound-regions.stderr?ref=ac5366b669b5a4f9a6c7e231ac6f99e709c44fe9", "patch": "@@ -5,6 +5,7 @@ LL |     foo::<S>(s);\n    |     ^^^^^^^^ the trait `for<'b> Trait` is not implemented for `&'b S`\n    |\n    = help: the trait `Trait` is implemented for `&'a mut S`\n+   = note: `for<'b> Trait` is implemented for `&'b mut S`, but not for `&'b S`\n note: required by a bound in `foo`\n   --> $DIR/imm-ref-trait-object-literal-bound-regions.rs:11:20\n    |"}]}