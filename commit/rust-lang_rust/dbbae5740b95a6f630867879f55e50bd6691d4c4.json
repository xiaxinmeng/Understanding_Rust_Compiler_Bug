{"sha": "dbbae5740b95a6f630867879f55e50bd6691d4c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYmFlNTc0MGI5NWE2ZjYzMDg2Nzg3OWY1NWU1MGJkNjY5MWQ0YzQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-01-30T08:31:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-30T08:31:56Z"}, "message": "Merge pull request #2412 from topecongiro/double-comparison\n\nAdd double comparison lint", "tree": {"sha": "3a94b056f42240143f5718a9f65a47626b7330a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a94b056f42240143f5718a9f65a47626b7330a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbbae5740b95a6f630867879f55e50bd6691d4c4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJacC18CRBK7hj4Ov3rIwAAdHIIAGO6RzFYGulZBswzPW1AwsIR\nSycDS4mgmBvAaDJhJH9d4OSN99MUmwyR7OzetjvKkhfD3SyWqvhzMKdFrAdZ24R2\nXs0WSkHGIKvS8DLDVvFom+oJ/RnYqf7KnNp82RoHFhkfNImHpF0ZYFDMqkyzJe6/\n8G/5DPaJmDzo/2dWrEHfm4BfTNK/a2QBmFIJP+p8cC47DuFHJeYEn5J30dMYkgKd\n0srklSoic3yZ17ayrMlg2sbK2YlcoMiR6nSm1OOr2zIN7vkdXycRxBYFo2Y+J3Bu\nXV7JrSdE4NOGaE24Q5KL+suTgS5G90spXqam4N4tb9vbhNb4nUvRG3Ld953ReDE=\n=Ppax\n-----END PGP SIGNATURE-----\n", "payload": "tree 3a94b056f42240143f5718a9f65a47626b7330a9\nparent 4e467661c009bcb618bda46e8d770ec69ef0fcfd\nparent a3c23237674290e380c8046a430d7ea61f86c7b2\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1517301116 +0100\ncommitter GitHub <noreply@github.com> 1517301116 +0100\n\nMerge pull request #2412 from topecongiro/double-comparison\n\nAdd double comparison lint"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbbae5740b95a6f630867879f55e50bd6691d4c4", "html_url": "https://github.com/rust-lang/rust/commit/dbbae5740b95a6f630867879f55e50bd6691d4c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbbae5740b95a6f630867879f55e50bd6691d4c4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e467661c009bcb618bda46e8d770ec69ef0fcfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e467661c009bcb618bda46e8d770ec69ef0fcfd", "html_url": "https://github.com/rust-lang/rust/commit/4e467661c009bcb618bda46e8d770ec69ef0fcfd"}, {"sha": "a3c23237674290e380c8046a430d7ea61f86c7b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3c23237674290e380c8046a430d7ea61f86c7b2", "html_url": "https://github.com/rust-lang/rust/commit/a3c23237674290e380c8046a430d7ea61f86c7b2"}], "stats": {"total": 171, "additions": 169, "deletions": 2}, "files": [{"sha": "a4124883fcb65947e3477004ca3257e5ff61cdb1", "filename": "clippy_lints/src/double_comparison.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/dbbae5740b95a6f630867879f55e50bd6691d4c4/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbae5740b95a6f630867879f55e50bd6691d4c4/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_comparison.rs?ref=dbbae5740b95a6f630867879f55e50bd6691d4c4", "patch": "@@ -0,0 +1,85 @@\n+//! Lint on unnecessary double comparisons. Some examples:\n+\n+use rustc::hir::*;\n+use rustc::lint::*;\n+use syntax::codemap::Span;\n+\n+use utils::{snippet, span_lint_and_sugg, SpanlessEq};\n+\n+/// **What it does:** Checks for double comparions that could be simpified to a single expression.\n+///\n+///\n+/// **Why is this bad?** Readability.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// x == y || x < y\n+/// ```\n+///\n+/// Could be written as:\n+///\n+/// ```rust\n+/// x <= y\n+/// ```\n+declare_lint! {\n+    pub DOUBLE_COMPARISONS,\n+    Deny,\n+    \"unnecessary double comparisons that can be simplified\"\n+}\n+\n+pub struct DoubleComparisonPass;\n+\n+impl LintPass for DoubleComparisonPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(DOUBLE_COMPARISONS)\n+    }\n+}\n+\n+impl<'a, 'tcx> DoubleComparisonPass {\n+    fn check_binop(\n+        &self,\n+        cx: &LateContext<'a, 'tcx>,\n+        op: BinOp_,\n+        lhs: &'tcx Expr,\n+        rhs: &'tcx Expr,\n+        span: Span,\n+    ) {\n+        let (lkind, llhs, lrhs, rkind, rlhs, rrhs) = match (lhs.node.clone(), rhs.node.clone()) {\n+            (ExprBinary(lb, llhs, lrhs), ExprBinary(rb, rlhs, rrhs)) => {\n+                (lb.node, llhs, lrhs, rb.node, rlhs, rrhs)\n+            }\n+            _ => return,\n+        };\n+        let spanless_eq = SpanlessEq::new(cx).ignore_fn();\n+        if !(spanless_eq.eq_expr(&llhs, &rlhs) && spanless_eq.eq_expr(&lrhs, &rrhs)) {\n+            return;\n+        }\n+        macro_rules! lint_double_comparison {\n+            ($op:tt) => {{\n+                let lhs_str = snippet(cx, llhs.span, \"\");\n+                let rhs_str = snippet(cx, lrhs.span, \"\");\n+                let sugg = format!(\"{} {} {}\", lhs_str, stringify!($op), rhs_str);\n+                span_lint_and_sugg(cx, DOUBLE_COMPARISONS, span,\n+                                   \"This binary expression can be simplified\",\n+                                   \"try\", sugg);\n+            }}\n+        }\n+        match (op, lkind, rkind) {\n+            (BiOr, BiEq, BiLt) | (BiOr, BiLt, BiEq) => lint_double_comparison!(<=),\n+            (BiOr, BiEq, BiGt) | (BiOr, BiGt, BiEq) => lint_double_comparison!(>=),\n+            (BiOr, BiLt, BiGt) | (BiOr, BiGt, BiLt) => lint_double_comparison!(!=),\n+            (BiAnd, BiLe, BiGe) | (BiAnd, BiGe, BiLe) => lint_double_comparison!(==),\n+            _ => (),\n+        };\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DoubleComparisonPass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if let ExprBinary(ref kind, ref lhs, ref rhs) = expr.node {\n+            self.check_binop(cx, kind.node, lhs, rhs, expr.span);\n+        }\n+    }\n+}"}, {"sha": "5f2d34d9eaad8541db6be61390cfec39f753b0b4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbbae5740b95a6f630867879f55e50bd6691d4c4/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbae5740b95a6f630867879f55e50bd6691d4c4/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=dbbae5740b95a6f630867879f55e50bd6691d4c4", "patch": "@@ -86,6 +86,7 @@ pub mod copies;\n pub mod cyclomatic_complexity;\n pub mod derive;\n pub mod doc;\n+pub mod double_comparison;\n pub mod double_parens;\n pub mod drop_forget_ref;\n pub mod else_if_without_else;\n@@ -369,6 +370,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box fallible_impl_from::FallibleImplFrom);\n     reg.register_late_lint_pass(box replace_consts::ReplaceConsts);\n     reg.register_late_lint_pass(box types::UnitArg);\n+    reg.register_late_lint_pass(box double_comparison::DoubleComparisonPass);\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,"}, {"sha": "04cc488d562bf5fbe7ffef2df55e76602b36940e", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbbae5740b95a6f630867879f55e50bd6691d4c4/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbae5740b95a6f630867879f55e50bd6691d4c4/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=dbbae5740b95a6f630867879f55e50bd6691d4c4", "patch": "@@ -545,11 +545,11 @@ fn check_to_owned(cx: &LateContext, expr: &Expr, other: &Expr) {\n \n     // *arg impls PartialEq<other>\n     if !arg_ty\n-        .builtin_deref(true, ty::LvaluePreference::NoPreference)\n+        .builtin_deref(true)\n         .map_or(false, |tam| implements_trait(cx, tam.ty, partial_eq_trait_id, &[other_ty]))\n         // arg impls PartialEq<*other>\n         && !other_ty\n-        .builtin_deref(true, ty::LvaluePreference::NoPreference)\n+        .builtin_deref(true)\n         .map_or(false, |tam| implements_trait(cx, arg_ty, partial_eq_trait_id, &[tam.ty]))\n         // arg impls PartialEq<other>\n         && !implements_trait(cx, arg_ty, partial_eq_trait_id, &[other_ty])"}, {"sha": "2c8f116281bdd2e28a1ab01e65bbc84c2c277fe3", "filename": "tests/ui/double_comparison.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dbbae5740b95a6f630867879f55e50bd6691d4c4/tests%2Fui%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbae5740b95a6f630867879f55e50bd6691d4c4/tests%2Fui%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_comparison.rs?ref=dbbae5740b95a6f630867879f55e50bd6691d4c4", "patch": "@@ -0,0 +1,28 @@\n+fn main() {\n+    let x = 1;\n+    let y = 2;\n+    if x == y || x < y {\n+        // do something\n+    }\n+    if x < y || x == y {\n+        // do something\n+    }\n+    if x == y || x > y {\n+        // do something\n+    }\n+    if x > y || x == y {\n+        // do something\n+    }\n+    if x < y || x > y {\n+        // do something\n+    }\n+    if x > y || x < y {\n+        // do something\n+    }\n+    if x <= y && x >= y {\n+        // do something\n+    }\n+    if x >= y && x <= y {\n+        // do something\n+    }\n+}"}, {"sha": "a97b0a246af355d15f08ae546633841757aa64cc", "filename": "tests/ui/double_comparison.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/dbbae5740b95a6f630867879f55e50bd6691d4c4/tests%2Fui%2Fdouble_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbbae5740b95a6f630867879f55e50bd6691d4c4/tests%2Fui%2Fdouble_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_comparison.stderr?ref=dbbae5740b95a6f630867879f55e50bd6691d4c4", "patch": "@@ -0,0 +1,52 @@\n+error: This binary expression can be simplified\n+ --> $DIR/double_comparison.rs:4:8\n+  |\n+4 |     if x == y || x < y {\n+  |        ^^^^^^^^^^^^^^^ help: try: `x <= y`\n+  |\n+  = note: #[deny(double_comparisons)] on by default\n+\n+error: This binary expression can be simplified\n+ --> $DIR/double_comparison.rs:7:8\n+  |\n+7 |     if x < y || x == y {\n+  |        ^^^^^^^^^^^^^^^ help: try: `x <= y`\n+\n+error: This binary expression can be simplified\n+  --> $DIR/double_comparison.rs:10:8\n+   |\n+10 |     if x == y || x > y {\n+   |        ^^^^^^^^^^^^^^^ help: try: `x >= y`\n+\n+error: This binary expression can be simplified\n+  --> $DIR/double_comparison.rs:13:8\n+   |\n+13 |     if x > y || x == y {\n+   |        ^^^^^^^^^^^^^^^ help: try: `x >= y`\n+\n+error: This binary expression can be simplified\n+  --> $DIR/double_comparison.rs:16:8\n+   |\n+16 |     if x < y || x > y {\n+   |        ^^^^^^^^^^^^^^ help: try: `x != y`\n+\n+error: This binary expression can be simplified\n+  --> $DIR/double_comparison.rs:19:8\n+   |\n+19 |     if x > y || x < y {\n+   |        ^^^^^^^^^^^^^^ help: try: `x != y`\n+\n+error: This binary expression can be simplified\n+  --> $DIR/double_comparison.rs:22:8\n+   |\n+22 |     if x <= y && x >= y {\n+   |        ^^^^^^^^^^^^^^^^ help: try: `x == y`\n+\n+error: This binary expression can be simplified\n+  --> $DIR/double_comparison.rs:25:8\n+   |\n+25 |     if x >= y && x <= y {\n+   |        ^^^^^^^^^^^^^^^^ help: try: `x == y`\n+\n+error: aborting due to 8 previous errors\n+"}]}