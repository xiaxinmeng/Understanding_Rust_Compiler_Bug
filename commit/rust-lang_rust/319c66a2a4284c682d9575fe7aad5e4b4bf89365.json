{"sha": "319c66a2a4284c682d9575fe7aad5e4b4bf89365", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxOWM2NmEyYTQyODRjNjgyZDk1NzVmZTdhYWQ1ZTRiNGJmODkzNjU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-07-12T15:36:11Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-07-12T15:36:11Z"}, "message": "lint on implementing `visit_string` without also implementing `visit_str`", "tree": {"sha": "bb4ec8e4274b905cc24b7471db4e5a380e4d8fa7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb4ec8e4274b905cc24b7471db4e5a380e4d8fa7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/319c66a2a4284c682d9575fe7aad5e4b4bf89365", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXhQ5rAAoJEFbW7qD8Z6xGvLEP/i/mYEucMFcCBv6SYpZ96Jdy\nhCkPEE1NzVnhrivY7VIyRx9AVA801jCPfO8vFCGbiX3qGfSwOwra5XjOLDvE+dnu\nGXBvElZgsk8/ALOIs69mVM4v1ty8ohRw1sJJYK/f+ciQsf6o6vVoAVCdv5RLTZHE\n7rvSvsGUeD6iBXoLZB5AT/oENMW+G8MkNy0qFneNIOCbl2bYyd2XeBWlLmIARH4D\naKua8k/JTE4isx+itSNp3lMpTaPYNtvcz2hjDr3LQ69iamf+Y5lJCEzlW/CFlOrr\nR+tvkXdsmS4cNgLzW53otaDVHIC32F+KMEq0XWr+ay1xpcTzJx1Dxx36Eqj92n6I\nUzKizdp04W02wzAXQemj9Rz+5Rb4HFh7LAy7i/u3DFqKTCBD7vjicGyWMUTVIAI9\n/wTwtaMoPDca7rdvCV5yRmPm6vj5qQfAgjFunag/gPQbbrAbR42SIEgz+gVF1Yfa\nzmljyxwi+eqZc9+1hKO6jH7WZOsNZOG7UYhmVv1As7zl4wUgEz5jVtImkNbto7Vj\naSPWI9nt5NOvKHXIeUuoMiJx5yheLhhcU8s9t5YATeswoDO37E/t5Nvxd7Qmsag4\nyrLB3SvGu2l+gNuDo1DzKsBgAfb+yi3vu80iIuvwCUEMEF3Au5GNNGDjEttJlq7f\n+iwv1p7ON0VlHOv9yP9Z\n=phFc\n-----END PGP SIGNATURE-----", "payload": "tree bb4ec8e4274b905cc24b7471db4e5a380e4d8fa7\nparent b14114f2537b06731b3be4ecbeea1e4c47d3eb12\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1468337771 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1468337771 +0200\n\nlint on implementing `visit_string` without also implementing `visit_str`"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/319c66a2a4284c682d9575fe7aad5e4b4bf89365", "html_url": "https://github.com/rust-lang/rust/commit/319c66a2a4284c682d9575fe7aad5e4b4bf89365", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/319c66a2a4284c682d9575fe7aad5e4b4bf89365/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b14114f2537b06731b3be4ecbeea1e4c47d3eb12", "url": "https://api.github.com/repos/rust-lang/rust/commits/b14114f2537b06731b3be4ecbeea1e4c47d3eb12", "html_url": "https://github.com/rust-lang/rust/commit/b14114f2537b06731b3be4ecbeea1e4c47d3eb12"}], "stats": {"total": 102, "additions": 101, "deletions": 1}, "files": [{"sha": "e6ceb4131690c96e823389d16d409b05049d95b8", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/319c66a2a4284c682d9575fe7aad5e4b4bf89365/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/319c66a2a4284c682d9575fe7aad5e4b4bf89365/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=319c66a2a4284c682d9575fe7aad5e4b4bf89365", "patch": "@@ -246,6 +246,7 @@ All notable changes to this project will be documented in this file.\n [`result_unwrap_used`]: https://github.com/Manishearth/rust-clippy/wiki#result_unwrap_used\n [`reverse_range_loop`]: https://github.com/Manishearth/rust-clippy/wiki#reverse_range_loop\n [`search_is_some`]: https://github.com/Manishearth/rust-clippy/wiki#search_is_some\n+[`serde_api_misuse`]: https://github.com/Manishearth/rust-clippy/wiki#serde_api_misuse\n [`shadow_reuse`]: https://github.com/Manishearth/rust-clippy/wiki#shadow_reuse\n [`shadow_same`]: https://github.com/Manishearth/rust-clippy/wiki#shadow_same\n [`shadow_unrelated`]: https://github.com/Manishearth/rust-clippy/wiki#shadow_unrelated"}, {"sha": "9790937a30719af3fc952f8a460b0a89cbc88ed0", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/319c66a2a4284c682d9575fe7aad5e4b4bf89365/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/319c66a2a4284c682d9575fe7aad5e4b4bf89365/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=319c66a2a4284c682d9575fe7aad5e4b4bf89365", "patch": "@@ -34,6 +34,7 @@ lazy_static = \"0.1.15\"\n regex = \"0.1.71\"\n rustc-serialize = \"0.3\"\n clippy-mini-macro-test = { version = \"0.1\", path = \"mini-macro\" }\n+serde = \"0.7\"\n \n \n [features]"}, {"sha": "c62edbe03ae75f1d02e7b6e5665bb83f9f050b2d", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/319c66a2a4284c682d9575fe7aad5e4b4bf89365/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/319c66a2a4284c682d9575fe7aad5e4b4bf89365/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=319c66a2a4284c682d9575fe7aad5e4b4bf89365", "patch": "@@ -17,7 +17,7 @@ Table of contents:\n \n ## Lints\n \n-There are 158 lints included in this crate:\n+There are 159 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -136,6 +136,7 @@ name\n [result_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#result_unwrap_used)                             | allow   | using `Result.unwrap()`, which might be better handled\n [reverse_range_loop](https://github.com/Manishearth/rust-clippy/wiki#reverse_range_loop)                             | warn    | Iterating over an empty range, such as `10..0` or `5..5`\n [search_is_some](https://github.com/Manishearth/rust-clippy/wiki#search_is_some)                                     | warn    | using an iterator search followed by `is_some()`, which is more succinctly expressed as a call to `any()`\n+[serde_api_misuse](https://github.com/Manishearth/rust-clippy/wiki#serde_api_misuse)                                 | warn    | Various things that will negatively affect your serde experience\n [shadow_reuse](https://github.com/Manishearth/rust-clippy/wiki#shadow_reuse)                                         | allow   | rebinding a name to an expression that re-uses the original value, e.g. `let x = x + 1`\n [shadow_same](https://github.com/Manishearth/rust-clippy/wiki#shadow_same)                                           | allow   | rebinding a name to itself, e.g. `let mut x = &mut x`\n [shadow_unrelated](https://github.com/Manishearth/rust-clippy/wiki#shadow_unrelated)                                 | allow   | The name is re-bound without even using the original value"}, {"sha": "4a8ecdda6f03861ba6b2b717a4396478f26dcc3d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/319c66a2a4284c682d9575fe7aad5e4b4bf89365/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319c66a2a4284c682d9575fe7aad5e4b4bf89365/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=319c66a2a4284c682d9575fe7aad5e4b4bf89365", "patch": "@@ -114,6 +114,7 @@ pub mod ptr_arg;\n pub mod ranges;\n pub mod regex;\n pub mod returns;\n+pub mod serde;\n pub mod shadow;\n pub mod strings;\n pub mod swap;\n@@ -167,6 +168,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     store.register_removed(\"string_to_string\", \"using `string::to_string` is common even today and specialization will likely happen soon\");\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n+    reg.register_late_lint_pass(box serde::Serde);\n     reg.register_late_lint_pass(box types::TypePass);\n     reg.register_late_lint_pass(box booleans::NonminimalBool);\n     reg.register_late_lint_pass(box misc::TopLevelRefPass);\n@@ -399,6 +401,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         regex::TRIVIAL_REGEX,\n         returns::LET_AND_RETURN,\n         returns::NEEDLESS_RETURN,\n+        serde::SERDE_API_MISUSE,\n         strings::STRING_LIT_AS_BYTES,\n         swap::ALMOST_SWAPPED,\n         swap::MANUAL_SWAP,"}, {"sha": "c916ad3c514c320bb31a2c5117c41d93c23a355f", "filename": "clippy_lints/src/serde.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/319c66a2a4284c682d9575fe7aad5e4b4bf89365/clippy_lints%2Fsrc%2Fserde.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319c66a2a4284c682d9575fe7aad5e4b4bf89365/clippy_lints%2Fsrc%2Fserde.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fserde.rs?ref=319c66a2a4284c682d9575fe7aad5e4b4bf89365", "patch": "@@ -0,0 +1,55 @@\n+use rustc::lint::*;\n+use rustc::hir::*;\n+use utils::{span_lint, get_trait_def_id};\n+\n+/// **What it does:** This lint checks for mis-uses of the serde API\n+///\n+/// **Why is this bad?** Serde is very finnicky about how its API should be used, but the type system can't be used to enforce it (yet)\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:** implementing `Visitor::visit_string` but not `Visitor::visit_str`\n+declare_lint! {\n+    pub SERDE_API_MISUSE, Warn,\n+    \"Various things that will negatively affect your serde experience\"\n+}\n+\n+\n+#[derive(Copy, Clone)]\n+pub struct Serde;\n+\n+impl LintPass for Serde {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(SERDE_API_MISUSE)\n+    }\n+}\n+\n+impl LateLintPass for Serde {\n+    fn check_item(&mut self, cx: &LateContext, item: &Item) {\n+        if let ItemImpl(_, _, _, Some(ref trait_ref), _, ref items) = item.node {\n+            let did = cx.tcx.expect_def(trait_ref.ref_id).def_id();\n+            if let Some(visit_did) = get_trait_def_id(cx, &[\"serde\", \"de\", \"Visitor\"]) {\n+                if did == visit_did {\n+                    let mut seen_str = None;\n+                    let mut seen_string = None;\n+                    for item in items {\n+                        match &*item.name.as_str() {\n+                            \"visit_str\" => seen_str = Some(item.span),\n+                            \"visit_string\" => seen_string = Some(item.span),\n+                            _ => {},\n+                        }\n+                    }\n+                    if let Some(span) = seen_string {\n+                        if seen_str.is_none() {\n+                            span_lint(cx,\n+                                      SERDE_API_MISUSE,\n+                                      span,\n+                                      \"you should not implement `visit_string` without also implementing `visit_str`\",\n+                            );\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "d5099edbc0c8fb58b4c3f63b84e8dc2bcaa6e05b", "filename": "tests/compile-fail/serde.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/319c66a2a4284c682d9575fe7aad5e4b4bf89365/tests%2Fcompile-fail%2Fserde.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319c66a2a4284c682d9575fe7aad5e4b4bf89365/tests%2Fcompile-fail%2Fserde.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fserde.rs?ref=319c66a2a4284c682d9575fe7aad5e4b4bf89365", "patch": "@@ -0,0 +1,39 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![deny(serde_api_misuse)]\n+#![allow(dead_code)]\n+\n+extern crate serde;\n+\n+struct A;\n+\n+impl serde::de::Visitor for A {\n+    type Value = ();\n+    fn visit_str<E>(&mut self, _v: &str) -> Result<Self::Value, E>\n+        where E: serde::Error,\n+    {\n+        unimplemented!()\n+    }\n+\n+    fn visit_string<E>(&mut self, _v: String) -> Result<Self::Value, E>\n+        where E: serde::Error,\n+    {\n+        unimplemented!()\n+    }\n+}\n+\n+struct B;\n+\n+impl serde::de::Visitor for B {\n+    type Value = ();\n+\n+    fn visit_string<E>(&mut self, _v: String) -> Result<Self::Value, E>\n+    //~^ ERROR you should not implement `visit_string` without also implementing `visit_str`\n+        where E: serde::Error,\n+    {\n+        unimplemented!()\n+    }\n+}\n+\n+fn main() {\n+}"}]}