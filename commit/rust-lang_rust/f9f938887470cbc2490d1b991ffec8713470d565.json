{"sha": "f9f938887470cbc2490d1b991ffec8713470d565", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZjkzODg4NzQ3MGNiYzI0OTBkMWI5OTFmZmVjODcxMzQ3MGQ1NjU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-01T04:42:06Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-01T04:42:06Z"}, "message": "rustdoc: Apply string ops to impl docs", "tree": {"sha": "5911ea2b28b7c6d4d46d50f0ba54b48ea53bc582", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5911ea2b28b7c6d4d46d50f0ba54b48ea53bc582"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9f938887470cbc2490d1b991ffec8713470d565", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9f938887470cbc2490d1b991ffec8713470d565", "html_url": "https://github.com/rust-lang/rust/commit/f9f938887470cbc2490d1b991ffec8713470d565", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9f938887470cbc2490d1b991ffec8713470d565/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f1534ad72465577ce5152d2d51e2aebeec143dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f1534ad72465577ce5152d2d51e2aebeec143dc", "html_url": "https://github.com/rust-lang/rust/commit/3f1534ad72465577ce5152d2d51e2aebeec143dc"}], "stats": {"total": 99, "additions": 81, "deletions": 18}, "files": [{"sha": "317c1f70a43738aa8c7ed80023e884ff0a03e1d1", "filename": "src/rustdoc/desc_pass.rs", "status": "modified", "additions": 81, "deletions": 18, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/f9f938887470cbc2490d1b991ffec8713470d565/src%2Frustdoc%2Fdesc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f938887470cbc2490d1b991ffec8713470d565/src%2Frustdoc%2Fdesc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_pass.rs?ref=f9f938887470cbc2490d1b991ffec8713470d565", "patch": "@@ -21,7 +21,8 @@ fn run(\n         fold_fn: fold_fn,\n         fold_enum: fold_enum,\n         fold_res: fold_res,\n-        fold_iface: fold_iface\n+        fold_iface: fold_iface,\n+        fold_impl: fold_impl\n         with *fold::default_seq_fold(op)\n     });\n     fold.fold_crate(fold, doc)\n@@ -104,24 +105,37 @@ fn fold_iface(fold: fold::fold<op>, doc: doc::ifacedoc) -> doc::ifacedoc {\n     {\n         brief: maybe_apply_op(fold.ctxt, doc.brief),\n         desc: maybe_apply_op(fold.ctxt, doc.desc),\n-        methods: vec::map(doc.methods) {|doc|\n-            {\n-                brief: maybe_apply_op(fold.ctxt, doc.brief),\n-                desc: maybe_apply_op(fold.ctxt, doc.desc),\n-                args: vec::map(doc.args) {|doc|\n-                    {\n-                        desc: maybe_apply_op(fold.ctxt, doc.desc)\n-                        with doc\n-                    }\n-                },\n-                return: {\n-                    desc: maybe_apply_op(fold.ctxt, doc.return.desc)\n-                    with doc.return\n-                },\n-                failure: maybe_apply_op(fold.ctxt, doc.failure)\n-                with doc\n-            }\n+        methods: apply_to_methods(fold.ctxt, doc.methods)\n+        with doc\n+    }\n+}\n+\n+fn apply_to_methods(op: op, docs: [doc::methoddoc]) -> [doc::methoddoc] {\n+    vec::map(docs) {|doc|\n+        {\n+            brief: maybe_apply_op(op, doc.brief),\n+            desc: maybe_apply_op(op, doc.desc),\n+            args: vec::map(doc.args) {|doc|\n+                {\n+                    desc: maybe_apply_op(op, doc.desc)\n+                    with doc\n+                }\n+            },\n+            return: {\n+                desc: maybe_apply_op(op, doc.return.desc)\n+                with doc.return\n+            },\n+            failure: maybe_apply_op(op, doc.failure)\n+            with doc\n         }\n+    }\n+}\n+\n+fn fold_impl(fold: fold::fold<op>, doc: doc::impldoc) -> doc::impldoc {\n+    {\n+        brief: maybe_apply_op(fold.ctxt, doc.brief),\n+        desc: maybe_apply_op(fold.ctxt, doc.desc),\n+        methods: apply_to_methods(fold.ctxt, doc.methods)\n         with doc\n     }\n }\n@@ -211,6 +225,55 @@ fn should_execute_op_on_iface_method_failure_condition() {\n     assert doc.topmod.ifaces()[0].methods[0].failure == some(\"a\");\n }\n \n+#[test]\n+fn should_execute_op_on_impl_brief() {\n+    let doc = test::mk_doc(\n+        \"#[doc(brief = \\\" a \\\")] impl i for int { fn a() { } }\");\n+    assert doc.topmod.impls()[0].brief == some(\"a\");\n+}\n+\n+#[test]\n+fn should_execute_op_on_impl_desc() {\n+    let doc = test::mk_doc(\n+        \"#[doc(desc = \\\" a \\\")] impl i for int { fn a() { } }\");\n+    assert doc.topmod.impls()[0].desc == some(\"a\");\n+}\n+\n+#[test]\n+fn should_execute_op_on_impl_method_brief() {\n+    let doc = test::mk_doc(\n+        \"impl i for int { #[doc(brief = \\\" a \\\")] fn a() { } }\");\n+    assert doc.topmod.impls()[0].methods[0].brief == some(\"a\");\n+}\n+\n+#[test]\n+fn should_execute_op_on_impl_method_desc() {\n+    let doc = test::mk_doc(\n+        \"impl i for int { #[doc(desc = \\\" a \\\")] fn a() { } }\");\n+    assert doc.topmod.impls()[0].methods[0].desc == some(\"a\");\n+}\n+\n+#[test]\n+fn should_execute_op_on_impl_method_args() {\n+    let doc = test::mk_doc(\n+        \"impl i for int { #[doc(args(a = \\\" a \\\"))] fn a(a: bool) { } }\");\n+    assert doc.topmod.impls()[0].methods[0].args[0].desc == some(\"a\");\n+}\n+\n+#[test]\n+fn should_execute_op_on_impl_method_return() {\n+    let doc = test::mk_doc(\n+        \"impl i for int { #[doc(return = \\\" a \\\")] fn a() -> int { fail } }\");\n+    assert doc.topmod.impls()[0].methods[0].return.desc == some(\"a\");\n+}\n+\n+#[test]\n+fn should_execute_op_on_impl_method_failure_condition() {\n+    let doc = test::mk_doc(\n+        \"impl i for int { #[doc(failure = \\\" a \\\")] fn a() { } }\");\n+    assert doc.topmod.impls()[0].methods[0].failure == some(\"a\");\n+}\n+\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {"}]}