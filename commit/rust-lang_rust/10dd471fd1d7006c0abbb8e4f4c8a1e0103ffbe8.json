{"sha": "10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8", "node_id": "C_kwDOAAsO6NoAKDEwZGQ0NzFmZDFkNzAwNmMwYWJiYjhlNGY0YzhhMWUwMTAzZmZiZTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-06T13:45:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-06T13:45:12Z"}, "message": "Auto merge of #12175 - Veykril:completion-rev, r=Veykril\n\nfix: Fix snippets triggering where they shouldn't\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/12169", "tree": {"sha": "8fd2b34eda75d561987593511807379efce6037a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fd2b34eda75d561987593511807379efce6037a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8", "html_url": "https://github.com/rust-lang/rust/commit/10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57c5447f904c1edf45acd35dd9e606c98ef9a35b", "url": "https://api.github.com/repos/rust-lang/rust/commits/57c5447f904c1edf45acd35dd9e606c98ef9a35b", "html_url": "https://github.com/rust-lang/rust/commit/57c5447f904c1edf45acd35dd9e606c98ef9a35b"}, {"sha": "0ce620686cd3c8a9ada6da9b0fcd08b9d9e544b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ce620686cd3c8a9ada6da9b0fcd08b9d9e544b6", "html_url": "https://github.com/rust-lang/rust/commit/0ce620686cd3c8a9ada6da9b0fcd08b9d9e544b6"}], "stats": {"total": 234, "additions": 133, "deletions": 101}, "files": [{"sha": "496b4168c02d9f32377a956da0a4526895a14b2b", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8", "patch": "@@ -1370,11 +1370,12 @@ impl Function {\n         None\n     }\n \n+    pub fn has_self_param(self, db: &dyn HirDatabase) -> bool {\n+        db.function_data(self.id).has_self_param()\n+    }\n+\n     pub fn self_param(self, db: &dyn HirDatabase) -> Option<SelfParam> {\n-        if !db.function_data(self.id).has_self_param() {\n-            return None;\n-        }\n-        Some(SelfParam { func: self.id })\n+        self.has_self_param(db).then(|| SelfParam { func: self.id })\n     }\n \n     pub fn assoc_fn_params(self, db: &dyn HirDatabase) -> Vec<Param> {"}, {"sha": "33af76c71001f3005124c522a410578d43ecc9fa", "filename": "crates/ide-completion/src/completions/dot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8", "patch": "@@ -42,7 +42,7 @@ fn complete_undotted_self(acc: &mut Completions, ctx: &CompletionContext) {\n         Some(PathCompletionCtx {\n             is_absolute_path: false,\n             qualifier: None,\n-            kind: PathKind::Expr,\n+            kind: PathKind::Expr { .. },\n             ..\n         }) if !ctx.is_path_disallowed() => {}\n         _ => return,"}, {"sha": "b7e2b886574f05dc9e644f9e0751d9e85163d492", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8", "patch": "@@ -15,9 +15,12 @@ pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext)\n     }\n \n     let (&is_absolute_path, qualifier) = match &ctx.path_context {\n-        Some(PathCompletionCtx { kind: PathKind::Expr, is_absolute_path, qualifier, .. }) => {\n-            (is_absolute_path, qualifier)\n-        }\n+        Some(PathCompletionCtx {\n+            kind: PathKind::Expr { .. },\n+            is_absolute_path,\n+            qualifier,\n+            ..\n+        }) => (is_absolute_path, qualifier),\n         _ => return,\n     };\n "}, {"sha": "7a90126916fe6214e5958db33aab8cd681260db9", "filename": "crates/ide-completion/src/completions/flyimport.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8", "patch": "@@ -161,12 +161,12 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n             (_, ItemInNs::Types(hir::ModuleDef::Module(_))) => true,\n             // and so are macros(except for attributes)\n             (\n-                PathKind::Expr | PathKind::Type | PathKind::Item | PathKind::Pat,\n+                PathKind::Expr { .. } | PathKind::Type | PathKind::Item { .. } | PathKind::Pat,\n                 ItemInNs::Macros(mac),\n             ) => mac.is_fn_like(ctx.db),\n-            (PathKind::Item, _) => true,\n+            (PathKind::Item { .. }, _) => true,\n \n-            (PathKind::Expr, ItemInNs::Types(_) | ItemInNs::Values(_)) => true,\n+            (PathKind::Expr { .. }, ItemInNs::Types(_) | ItemInNs::Values(_)) => true,\n \n             (PathKind::Pat, ItemInNs::Types(_)) => true,\n             (PathKind::Pat, ItemInNs::Values(def)) => matches!(def, hir::ModuleDef::Const(_)),"}, {"sha": "df03120dfe158aa11b1fad5c32f4e1dbc6ba4559", "filename": "crates/ide-completion/src/completions/item_list.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs?ref=10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8", "patch": "@@ -13,9 +13,12 @@ pub(crate) fn complete_item_list(acc: &mut Completions, ctx: &CompletionContext)\n     }\n \n     let (&is_absolute_path, qualifier) = match &ctx.path_context {\n-        Some(PathCompletionCtx { kind: PathKind::Item, is_absolute_path, qualifier, .. }) => {\n-            (is_absolute_path, qualifier)\n-        }\n+        Some(PathCompletionCtx {\n+            kind: PathKind::Item { .. },\n+            is_absolute_path,\n+            qualifier,\n+            ..\n+        }) => (is_absolute_path, qualifier),\n         _ => return,\n     };\n "}, {"sha": "557992d14a9f14e9c98dc029dbe0bcaf8c832764", "filename": "crates/ide-completion/src/completions/keyword.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8", "patch": "@@ -125,9 +125,11 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n     }\n \n     let (can_be_stmt, in_loop_body) = match ctx.path_context {\n-        Some(PathCompletionCtx { is_absolute_path: false, can_be_stmt, in_loop_body, .. }) => {\n-            (can_be_stmt, in_loop_body)\n-        }\n+        Some(PathCompletionCtx {\n+            is_absolute_path: false,\n+            kind: PathKind::Expr { in_block_expr, in_loop_body, .. },\n+            ..\n+        }) => (in_block_expr, in_loop_body),\n         _ => return,\n     };\n "}, {"sha": "38136db4a9fd47fb487ce76958e07e58ca176fe6", "filename": "crates/ide-completion/src/completions/snippet.rs", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8", "patch": "@@ -5,8 +5,9 @@ use ide_db::{imports::insert_use::ImportScope, SnippetCap};\n use syntax::T;\n \n use crate::{\n-    context::PathCompletionCtx, item::Builder, CompletionContext, CompletionItem,\n-    CompletionItemKind, Completions, SnippetScope,\n+    context::{ItemListKind, PathCompletionCtx, PathKind},\n+    item::Builder,\n+    CompletionContext, CompletionItem, CompletionItemKind, Completions, SnippetScope,\n };\n \n fn snippet(ctx: &CompletionContext, cap: SnippetCap, label: &str, snippet: &str) -> Builder {\n@@ -16,14 +17,13 @@ fn snippet(ctx: &CompletionContext, cap: SnippetCap, label: &str, snippet: &str)\n }\n \n pub(crate) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n-    if ctx.function_def.is_none() {\n-        return;\n-    }\n-\n     let can_be_stmt = match ctx.path_context {\n         Some(PathCompletionCtx {\n-            is_absolute_path: false, qualifier: None, can_be_stmt, ..\n-        }) => can_be_stmt,\n+            is_absolute_path: false,\n+            qualifier: None,\n+            kind: PathKind::Expr { in_block_expr, .. },\n+            ..\n+        }) => in_block_expr,\n         _ => return,\n     };\n \n@@ -43,11 +43,16 @@ pub(crate) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionConte\n }\n \n pub(crate) fn complete_item_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !(ctx.expects_item() || ctx.has_block_expr_parent())\n-        || ctx.previous_token_is(T![unsafe])\n-        || ctx.path_qual().is_some()\n-        || ctx.has_unfinished_impl_or_trait_prev_sibling()\n-    {\n+    let path_kind = match ctx.path_context {\n+        Some(PathCompletionCtx {\n+            is_absolute_path: false,\n+            qualifier: None,\n+            kind: kind @ (PathKind::Item { .. } | PathKind::Expr { in_block_expr: true, .. }),\n+            ..\n+        }) => kind,\n+        _ => return,\n+    };\n+    if ctx.previous_token_is(T![unsafe]) || ctx.has_unfinished_impl_or_trait_prev_sibling() {\n         return;\n     }\n     if ctx.has_visibility_prev_sibling() {\n@@ -64,7 +69,8 @@ pub(crate) fn complete_item_snippet(acc: &mut Completions, ctx: &CompletionConte\n     }\n \n     // Test-related snippets shouldn't be shown in blocks.\n-    if !ctx.has_block_expr_parent() {\n+    if let PathKind::Item { kind: ItemListKind::SourceFile | ItemListKind::Module, .. } = path_kind\n+    {\n         let mut item = snippet(\n             ctx,\n             cap,\n@@ -96,19 +102,22 @@ fn ${1:feature}() {\n         item.lookup_by(\"tfn\");\n         item.add_to(acc);\n     }\n-\n-    let item = snippet(\n-        ctx,\n-        cap,\n-        \"macro_rules\",\n-        \"\\\n+    if let PathKind::Item { kind: ItemListKind::SourceFile | ItemListKind::Module, .. }\n+    | PathKind::Expr { .. } = path_kind\n+    {\n+        let item = snippet(\n+            ctx,\n+            cap,\n+            \"macro_rules\",\n+            \"\\\n macro_rules! $1 {\n     ($2) => {\n         $0\n     };\n }\",\n-    );\n-    item.add_to(acc);\n+        );\n+        item.add_to(acc);\n+    }\n }\n \n fn add_custom_completions("}, {"sha": "e3c15038d07a30b72df118328fc588d9bceaff6e", "filename": "crates/ide-completion/src/completions/trait_impl.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8", "patch": "@@ -56,26 +56,25 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n     if let Some((kind, replacement_range, impl_def)) = completion_match(ctx) {\n         if let Some(hir_impl) = ctx.sema.to_def(&impl_def) {\n             get_missing_assoc_items(&ctx.sema, &impl_def).into_iter().for_each(|item| {\n+                use self::ImplCompletionKind::*;\n                 match (item, kind) {\n-                    (\n-                        hir::AssocItem::Function(fn_item),\n-                        ImplCompletionKind::All | ImplCompletionKind::Fn,\n-                    ) => add_function_impl(acc, ctx, replacement_range, fn_item, hir_impl),\n-                    (\n-                        hir::AssocItem::TypeAlias(type_item),\n-                        ImplCompletionKind::All | ImplCompletionKind::TypeAlias,\n-                    ) => add_type_alias_impl(acc, ctx, replacement_range, type_item),\n-                    (\n-                        hir::AssocItem::Const(const_item),\n-                        ImplCompletionKind::All | ImplCompletionKind::Const,\n-                    ) => add_const_impl(acc, ctx, replacement_range, const_item, hir_impl),\n+                    (hir::AssocItem::Function(func), All | Fn) => {\n+                        add_function_impl(acc, ctx, replacement_range, func, hir_impl)\n+                    }\n+                    (hir::AssocItem::TypeAlias(type_alias), All | TypeAlias) => {\n+                        add_type_alias_impl(acc, ctx, replacement_range, type_alias)\n+                    }\n+                    (hir::AssocItem::Const(const_), All | Const) => {\n+                        add_const_impl(acc, ctx, replacement_range, const_, hir_impl)\n+                    }\n                     _ => {}\n                 }\n             });\n         }\n     }\n }\n \n+// FIXME: This should be lifted out so that we can do proper smart item keyword completions\n fn completion_match(ctx: &CompletionContext) -> Option<(ImplCompletionKind, TextRange, ast::Impl)> {\n     let token = ctx.token.clone();\n \n@@ -152,15 +151,15 @@ fn add_function_impl(\n     func: hir::Function,\n     impl_def: hir::Impl,\n ) {\n-    let fn_name = func.name(ctx.db).to_smol_str();\n+    let fn_name = func.name(ctx.db);\n \n-    let label = if func.assoc_fn_params(ctx.db).is_empty() {\n-        format!(\"fn {}()\", fn_name)\n-    } else {\n-        format!(\"fn {}(..)\", fn_name)\n-    };\n+    let label = format!(\n+        \"fn {}({})\",\n+        fn_name,\n+        if func.assoc_fn_params(ctx.db).is_empty() { \"\" } else { \"..\" }\n+    );\n \n-    let completion_kind = if func.self_param(ctx.db).is_some() {\n+    let completion_kind = if func.has_self_param(ctx.db) {\n         CompletionItemKind::Method\n     } else {\n         CompletionItemKind::SymbolKind(SymbolKind::Function)"}, {"sha": "802e48f23a61f34ce5cf8e9abc1023270d11bbcb", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 57, "deletions": 42, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8", "patch": "@@ -45,22 +45,36 @@ pub(crate) enum Visible {\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub(super) enum PathKind {\n-    Expr,\n+    Expr {\n+        in_block_expr: bool,\n+        in_loop_body: bool,\n+    },\n     Type,\n     Attr {\n         kind: AttrKind,\n         annotated_item_kind: Option<SyntaxKind>,\n     },\n     Derive,\n     /// Path in item position, that is inside an (Assoc)ItemList\n-    Item,\n+    Item {\n+        kind: ItemListKind,\n+    },\n     Pat,\n     Vis {\n         has_in_token: bool,\n     },\n     Use,\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+pub(super) enum ItemListKind {\n+    SourceFile,\n+    Module,\n+    Impl,\n+    Trait,\n+    ExternBlock,\n+}\n+\n #[derive(Debug)]\n pub(crate) struct PathCompletionCtx {\n     /// If this is a call with () already there (or {} in case of record patterns)\n@@ -78,9 +92,6 @@ pub(crate) struct PathCompletionCtx {\n     pub(super) kind: PathKind,\n     /// Whether the path segment has type args or not.\n     pub(super) has_type_args: bool,\n-    /// `true` if we are a statement or a last expr in the block.\n-    pub(super) can_be_stmt: bool,\n-    pub(super) in_loop_body: bool,\n }\n \n #[derive(Debug)]\n@@ -314,7 +325,7 @@ impl<'a> CompletionContext<'a> {\n     }\n \n     pub(crate) fn expects_expression(&self) -> bool {\n-        matches!(self.path_context, Some(PathCompletionCtx { kind: PathKind::Expr, .. }))\n+        matches!(self.path_context, Some(PathCompletionCtx { kind: PathKind::Expr { .. }, .. }))\n     }\n \n     pub(crate) fn expects_type(&self) -> bool {\n@@ -968,13 +979,18 @@ impl<'a> CompletionContext<'a> {\n             is_absolute_path: false,\n             qualifier: None,\n             parent: path.parent_path(),\n-            kind: PathKind::Item,\n+            kind: PathKind::Item { kind: ItemListKind::SourceFile },\n             has_type_args: false,\n-            can_be_stmt: false,\n-            in_loop_body: false,\n         };\n         let mut pat_ctx = None;\n-        path_ctx.in_loop_body = is_in_loop_body(name_ref.syntax());\n+\n+        let is_in_block = |it: &SyntaxNode| {\n+            it.parent()\n+                .map(|node| {\n+                    ast::ExprStmt::can_cast(node.kind()) || ast::StmtList::can_cast(node.kind())\n+                })\n+                .unwrap_or(false)\n+        };\n \n         path_ctx.kind = path.syntax().ancestors().find_map(|it| {\n             // using Option<Option<PathKind>> as extra controlflow\n@@ -983,7 +999,10 @@ impl<'a> CompletionContext<'a> {\n                     ast::PathType(_) => Some(PathKind::Type),\n                     ast::PathExpr(it) => {\n                         path_ctx.has_call_parens = it.syntax().parent().map_or(false, |it| ast::CallExpr::can_cast(it.kind()));\n-                        Some(PathKind::Expr)\n+                        let in_block_expr = is_in_block(it.syntax());\n+                        let in_loop_body = is_in_loop_body(it.syntax());\n+\n+                        Some(PathKind::Expr { in_block_expr, in_loop_body })\n                     },\n                     ast::TupleStructPat(it) => {\n                         path_ctx.has_call_parens = true;\n@@ -1001,17 +1020,25 @@ impl<'a> CompletionContext<'a> {\n                     },\n                     ast::MacroCall(it) => {\n                         path_ctx.has_macro_bang = it.excl_token().is_some();\n-                        match it.syntax().parent().map(|it| it.kind()) {\n+                        let parent = it.syntax().parent();\n+                        match parent.as_ref().map(|it| it.kind()) {\n                             Some(SyntaxKind::MACRO_PAT) => Some(PathKind::Pat),\n                             Some(SyntaxKind::MACRO_TYPE) => Some(PathKind::Type),\n-                            Some(SyntaxKind::MACRO_EXPR) => Some(PathKind::Expr),\n-                            Some(\n-                                SyntaxKind::ITEM_LIST\n-                                | SyntaxKind::ASSOC_ITEM_LIST\n-                                | SyntaxKind::EXTERN_ITEM_LIST\n-                                | SyntaxKind::SOURCE_FILE\n-                            ) => Some(PathKind::Item),\n-                            _ => return Some(None),\n+                            Some(SyntaxKind::ITEM_LIST) => Some(PathKind::Item { kind: ItemListKind::Module }),\n+                            Some(SyntaxKind::ASSOC_ITEM_LIST) => Some(PathKind::Item { kind: match parent.and_then(|it| it.parent()).map(|it| it.kind()) {\n+                                Some(SyntaxKind::TRAIT) => ItemListKind::Trait,\n+                                Some(SyntaxKind::IMPL) => ItemListKind::Impl,\n+                                _ => return Some(None),\n+                            } }),\n+                            Some(SyntaxKind::EXTERN_ITEM_LIST) => Some(PathKind::Item { kind: ItemListKind::ExternBlock }),\n+                            Some(SyntaxKind::SOURCE_FILE) => Some(PathKind::Item { kind: ItemListKind::SourceFile }),\n+                            _ => {\n+                               return Some(parent.and_then(ast::MacroExpr::cast).map(|it| {\n+                                    let in_loop_body = is_in_loop_body(it.syntax());\n+                                    let in_block_expr = is_in_block(it.syntax());\n+                                    PathKind::Expr { in_block_expr, in_loop_body }\n+                                }));\n+                            },\n                         }\n                     },\n                     ast::Meta(meta) => (|| {\n@@ -1032,10 +1059,16 @@ impl<'a> CompletionContext<'a> {\n                     })(),\n                     ast::Visibility(it) => Some(PathKind::Vis { has_in_token: it.in_token().is_some() }),\n                     ast::UseTree(_) => Some(PathKind::Use),\n-                    ast::ItemList(_) => Some(PathKind::Item),\n-                    ast::AssocItemList(_) => Some(PathKind::Item),\n-                    ast::ExternItemList(_) => Some(PathKind::Item),\n-                    ast::SourceFile(_) => Some(PathKind::Item),\n+                    ast::ItemList(_) => Some(PathKind::Item { kind: ItemListKind::Module }),\n+                    ast::AssocItemList(it) => Some(PathKind::Item { kind: {\n+                            match it.syntax().parent()?.kind() {\n+                                SyntaxKind::TRAIT => ItemListKind::Trait,\n+                                SyntaxKind::IMPL => ItemListKind::Impl,\n+                                _ => return None,\n+                            }\n+                        }}),\n+                    ast::ExternItemList(_) => Some(PathKind::Item { kind: ItemListKind::ExternBlock }),\n+                    ast::SourceFile(_) => Some(PathKind::Item { kind: ItemListKind::SourceFile }),\n                     _ => return None,\n                 }\n             };\n@@ -1086,24 +1119,6 @@ impl<'a> CompletionContext<'a> {\n             }\n         }\n \n-        // Find either enclosing expr statement (thing with `;`) or a\n-        // block. If block, check that we are the last expr.\n-        path_ctx.can_be_stmt = name_ref\n-            .syntax()\n-            .ancestors()\n-            .find_map(|node| {\n-                if let Some(stmt) = ast::ExprStmt::cast(node.clone()) {\n-                    return Some(stmt.syntax().text_range() == name_ref.syntax().text_range());\n-                }\n-                if let Some(stmt_list) = ast::StmtList::cast(node) {\n-                    return Some(\n-                        stmt_list.tail_expr().map(|e| e.syntax().text_range())\n-                            == Some(name_ref.syntax().text_range()),\n-                    );\n-                }\n-                None\n-            })\n-            .unwrap_or(false);\n         Some((path_ctx, pat_ctx))\n     }\n }"}, {"sha": "0117d869ea4c98ede2207b5548447dada7163c1b", "filename": "crates/ide-completion/src/render/function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs?ref=10dd471fd1d7006c0abbb8e4f4c8a1e0103ffbe8", "patch": "@@ -197,7 +197,7 @@ fn should_add_parens(ctx: &CompletionContext) -> bool {\n     }\n \n     match ctx.path_context {\n-        Some(PathCompletionCtx { kind: PathKind::Expr, has_call_parens: true, .. }) => {\n+        Some(PathCompletionCtx { kind: PathKind::Expr { .. }, has_call_parens: true, .. }) => {\n             return false\n         }\n         Some(PathCompletionCtx { kind: PathKind::Use | PathKind::Type, .. }) => {"}]}