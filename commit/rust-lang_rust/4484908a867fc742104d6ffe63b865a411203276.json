{"sha": "4484908a867fc742104d6ffe63b865a411203276", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ODQ5MDhhODY3ZmM3NDIxMDRkNmZmZTYzYjg2NWE0MTEyMDMyNzY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-30T11:03:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-30T11:03:08Z"}, "message": "Rewrite goto definition tests", "tree": {"sha": "048d7019112e588f4416ed88070f59ae46564d75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/048d7019112e588f4416ed88070f59ae46564d75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4484908a867fc742104d6ffe63b865a411203276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4484908a867fc742104d6ffe63b865a411203276", "html_url": "https://github.com/rust-lang/rust/commit/4484908a867fc742104d6ffe63b865a411203276", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4484908a867fc742104d6ffe63b865a411203276/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d34e725f09994af145884464942dd205bfc7717e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d34e725f09994af145884464942dd205bfc7717e", "html_url": "https://github.com/rust-lang/rust/commit/d34e725f09994af145884464942dd205bfc7717e"}], "stats": {"total": 1101, "additions": 487, "deletions": 614}, "files": [{"sha": "1ddacc1f6c235eef643867226c0b17ed197ee921", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4484908a867fc742104d6ffe63b865a411203276/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4484908a867fc742104d6ffe63b865a411203276/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=4484908a867fc742104d6ffe63b865a411203276", "patch": "@@ -80,7 +80,7 @@ pub struct FilePosition {\n     pub offset: TextSize,\n }\n \n-#[derive(Clone, Copy, Debug)]\n+#[derive(Clone, Copy, Debug, Eq, PartialEq)]\n pub struct FileRange {\n     pub file_id: FileId,\n     pub range: TextRange,"}, {"sha": "02f55e5ba7f08722697d9a09427e2b8686f4536f", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4484908a867fc742104d6ffe63b865a411203276/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4484908a867fc742104d6ffe63b865a411203276/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=4484908a867fc742104d6ffe63b865a411203276", "patch": "@@ -64,6 +64,7 @@ impl NavigationTarget {\n         self.file_id\n     }\n \n+    // TODO: inconsistent\n     pub fn file_range(&self) -> FileRange {\n         FileRange { file_id: self.file_id, range: self.full_range }\n     }\n@@ -283,11 +284,13 @@ impl ToNav for hir::ImplDef {\n         } else {\n             original_range(db, src.as_ref().map(|it| it.syntax()))\n         };\n+        let focus_range =\n+            src.value.target_type().map(|ty| original_range(db, src.with_value(ty.syntax())).range);\n \n         NavigationTarget::from_syntax(\n             frange.file_id,\n             \"impl\".into(),\n-            None,\n+            focus_range,\n             frange.range,\n             src.value.syntax().kind(),\n         )"}, {"sha": "4c78fa214222249748e9763509f4a9f7d7d4b107", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 452, "deletions": 611, "changes": 1063, "blob_url": "https://github.com/rust-lang/rust/blob/4484908a867fc742104d6ffe63b865a411203276/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4484908a867fc742104d6ffe63b865a411203276/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=4484908a867fc742104d6ffe63b865a411203276", "patch": "@@ -103,753 +103,628 @@ pub(crate) fn reference_definition(\n \n #[cfg(test)]\n mod tests {\n-    use expect::{expect, Expect};\n-    use test_utils::assert_eq_text;\n-\n-    use crate::mock_analysis::analysis_and_position;\n-\n-    fn check_goto(ra_fixture: &str, expected: &str, expected_range: &str) {\n-        let (analysis, pos) = analysis_and_position(ra_fixture);\n-\n-        let mut navs = analysis.goto_definition(pos).unwrap().unwrap().info;\n-        if navs.len() == 0 {\n-            panic!(\"unresolved reference\")\n-        }\n-        assert_eq!(navs.len(), 1);\n-\n-        let nav = navs.pop().unwrap();\n-        let file_text = analysis.file_text(nav.file_id()).unwrap();\n-\n-        let mut actual = file_text[nav.full_range()].to_string();\n-        if let Some(focus) = nav.focus_range() {\n-            actual += \"|\";\n-            actual += &file_text[focus];\n-        }\n-\n-        if !expected_range.contains(\"...\") {\n-            test_utils::assert_eq_text!(&actual, expected_range);\n-        } else {\n-            let mut parts = expected_range.split(\"...\");\n-            let prefix = parts.next().unwrap();\n-            let suffix = parts.next().unwrap();\n-            assert!(\n-                actual.starts_with(prefix) && actual.ends_with(suffix),\n-                \"\\nExpected: {}\\n Actual: {}\\n\",\n-                expected_range,\n-                actual\n-            );\n+    use ra_db::FileRange;\n+    use ra_syntax::{TextRange, TextSize};\n+\n+    use crate::mock_analysis::MockAnalysis;\n+\n+    fn check(ra_fixture: &str) {\n+        let (mock, position) = MockAnalysis::with_files_and_position(ra_fixture);\n+        let (mut expected, data) = mock.annotation();\n+        let analysis = mock.analysis();\n+        match data.as_str() {\n+            \"\" => (),\n+            \"file\" => {\n+                expected.range =\n+                    TextRange::up_to(TextSize::of(&*analysis.file_text(expected.file_id).unwrap()))\n+            }\n+            data => panic!(\"bad data: {}\", data),\n         }\n \n-        nav.assert_match(expected);\n-    }\n-\n-    fn check(ra_fixture: &str, expect: Expect) {\n-        let (analysis, pos) = analysis_and_position(ra_fixture);\n-\n-        let mut navs = analysis.goto_definition(pos).unwrap().unwrap().info;\n+        let mut navs = analysis.goto_definition(position).unwrap().unwrap().info;\n         if navs.len() == 0 {\n             panic!(\"unresolved reference\")\n         }\n         assert_eq!(navs.len(), 1);\n \n         let nav = navs.pop().unwrap();\n-        let file_text = analysis.file_text(nav.file_id()).unwrap();\n-\n-        let mut actual = nav.debug_render();\n-        actual += \"\\n\";\n-        actual += &file_text[nav.full_range()].to_string();\n-        if let Some(focus) = nav.focus_range() {\n-            actual += \"|\";\n-            actual += &file_text[focus];\n-            actual += \"\\n\";\n-        }\n-        expect.assert_eq(&actual);\n+        assert_eq!(expected, FileRange { file_id: nav.file_id(), range: nav.range() });\n     }\n \n     #[test]\n     fn goto_def_in_items() {\n         check(\n             r#\"\n struct Foo;\n+     //^^^\n enum E { X(Foo<|>) }\n \"#,\n-            expect![[r#\"\n-                Foo STRUCT_DEF FileId(1) 0..11 7..10\n-                struct Foo;|Foo\n-            \"#]],\n         );\n     }\n \n     #[test]\n     fn goto_def_at_start_of_item() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            struct Foo;\n-            enum E { X(<|>Foo) }\n-            \",\n-            \"Foo STRUCT_DEF FileId(1) 0..11 7..10\",\n-            \"struct Foo;|Foo\",\n+        check(\n+            r#\"\n+struct Foo;\n+     //^^^\n+enum E { X(<|>Foo) }\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_definition_resolves_correct_name() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            use a::Foo;\n-            mod a;\n-            mod b;\n-            enum E { X(Foo<|>) }\n-\n-            //- /a.rs\n-            struct Foo;\n+        check(\n+            r#\"\n+//- /lib.rs\n+use a::Foo;\n+mod a;\n+mod b;\n+enum E { X(Foo<|>) }\n \n-            //- /b.rs\n-            struct Foo;\n-            \",\n-            \"Foo STRUCT_DEF FileId(2) 0..11 7..10\",\n-            \"struct Foo;|Foo\",\n+//- /a.rs\n+struct Foo;\n+     //^^^\n+//- /b.rs\n+struct Foo;\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_def_for_module_declaration() {\n-        check_goto(\n+        check(\n             r#\"\n //- /lib.rs\n mod <|>foo;\n \n //- /foo.rs\n // empty\n+//^ file\n \"#,\n-            \"foo SOURCE_FILE FileId(2) 0..9\",\n-            \"// empty\\n\",\n         );\n \n-        check_goto(\n+        check(\n             r#\"\n //- /lib.rs\n mod <|>foo;\n \n //- /foo/mod.rs\n // empty\n+//^ file\n \"#,\n-            \"foo SOURCE_FILE FileId(2) 0..9\",\n-            \"// empty\\n\",\n         );\n     }\n \n     #[test]\n     fn goto_def_for_macros() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            macro_rules! foo { () => { () } }\n-\n-            fn bar() {\n-                <|>foo!();\n-            }\n-            \",\n-            \"foo MACRO_CALL FileId(1) 0..33 13..16\",\n-            \"macro_rules! foo { () => { () } }|foo\",\n+        check(\n+            r#\"\n+macro_rules! foo { () => { () } }\n+           //^^^\n+fn bar() {\n+    <|>foo!();\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_def_for_macros_from_other_crates() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            use foo::foo;\n-            fn bar() {\n-                <|>foo!();\n-            }\n-\n-            //- /foo/lib.rs\n-            #[macro_export]\n-            macro_rules! foo { () => { () } }\n-            \",\n-            \"foo MACRO_CALL FileId(2) 0..49 29..32\",\n-            \"#[macro_export]\\nmacro_rules! foo { () => { () } }|foo\",\n-        );\n-    }\n-\n-    #[test]\n-    fn goto_def_for_use_alias() {\n-        check_goto(\n+        check(\n             r#\"\n //- /lib.rs\n-use foo as bar<|>;\n+use foo::foo;\n+fn bar() {\n+    <|>foo!();\n+}\n \n //- /foo/lib.rs\n #[macro_export]\n macro_rules! foo { () => { () } }\n+           //^^^\n \"#,\n-            \"SOURCE_FILE FileId(2) 0..50\",\n-            \"#[macro_export]\\nmacro_rules! foo { () => { () } }\\n\",\n-        );\n-    }\n-\n-    #[test]\n-    fn goto_def_for_use_alias_foo_macro() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            use foo::foo as bar<|>;\n-\n-            //- /foo/lib.rs\n-            #[macro_export]\n-            macro_rules! foo { () => { () } }\n-            \",\n-            \"foo MACRO_CALL FileId(2) 0..49 29..32\",\n-            \"#[macro_export]\\nmacro_rules! foo { () => { () } }|foo\",\n         );\n     }\n \n     #[test]\n     fn goto_def_for_macros_in_use_tree() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            use foo::foo<|>;\n+        check(\n+            r#\"\n+//- /lib.rs\n+use foo::foo<|>;\n \n-            //- /foo/lib.rs\n-            #[macro_export]\n-            macro_rules! foo { () => { () } }\n-            \",\n-            \"foo MACRO_CALL FileId(2) 0..49 29..32\",\n-            \"#[macro_export]\\nmacro_rules! foo { () => { () } }|foo\",\n+//- /foo/lib.rs\n+#[macro_export]\n+macro_rules! foo { () => { () } }\n+           //^^^\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_def_for_macro_defined_fn_with_arg() {\n-        check_goto(\n+        check(\n             r#\"\n //- /lib.rs\n macro_rules! define_fn {\n     ($name:ident) => (fn $name() {})\n }\n \n define_fn!(foo);\n+         //^^^\n \n fn bar() {\n    <|>foo();\n }\n \"#,\n-            \"foo FN_DEF FileId(1) 65..81 76..79\",\n-            \"define_fn!(foo);|foo\",\n         );\n     }\n \n     #[test]\n     fn goto_def_for_macro_defined_fn_no_arg() {\n-        check_goto(\n+        check(\n             r#\"\n //- /lib.rs\n macro_rules! define_fn {\n     () => (fn foo() {})\n }\n \n-define_fn!();\n+  define_fn!();\n+//^^^^^^^^^^^^^\n \n fn bar() {\n    <|>foo();\n }\n \"#,\n-            \"foo FN_DEF FileId(1) 52..65 52..65\",\n-            \"define_fn!();|define_fn!();\",\n         );\n     }\n \n     #[test]\n     fn goto_definition_works_for_macro_inside_pattern() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            macro_rules! foo {() => {0}}\n-\n-            fn bar() {\n-                match (0,1) {\n-                    (<|>foo!(), _) => {}\n-                }\n-            }\n-            \",\n-            \"foo MACRO_CALL FileId(1) 0..28 13..16\",\n-            \"macro_rules! foo {() => {0}}|foo\",\n+        check(\n+            r#\"\n+//- /lib.rs\n+macro_rules! foo {() => {0}}\n+           //^^^\n+\n+fn bar() {\n+    match (0,1) {\n+        (<|>foo!(), _) => {}\n+    }\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_definition_works_for_macro_inside_match_arm_lhs() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            macro_rules! foo {() => {0}}\n-\n-            fn bar() {\n-                match 0 {\n-                    <|>foo!() => {}\n-                }\n-            }\n-            \",\n-            \"foo MACRO_CALL FileId(1) 0..28 13..16\",\n-            \"macro_rules! foo {() => {0}}|foo\",\n+        check(\n+            r#\"\n+//- /lib.rs\n+macro_rules! foo {() => {0}}\n+           //^^^\n+fn bar() {\n+    match 0 {\n+        <|>foo!() => {}\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_def_for_use_alias() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+use foo as bar<|>;\n+\n+//- /foo/lib.rs\n+// empty\n+//^ file\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_def_for_use_alias_foo_macro() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+use foo::foo as bar<|>;\n+\n+//- /foo/lib.rs\n+#[macro_export]\n+macro_rules! foo { () => { () } }\n+           //^^^\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_def_for_methods() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            struct Foo;\n-            impl Foo {\n-                fn frobnicate(&self) { }\n-            }\n+        check(\n+            r#\"\n+//- /lib.rs\n+struct Foo;\n+impl Foo {\n+    fn frobnicate(&self) { }\n+     //^^^^^^^^^^\n+}\n \n-            fn bar(foo: &Foo) {\n-                foo.frobnicate<|>();\n-            }\n-            \",\n-            \"frobnicate FN_DEF FileId(1) 27..51 30..40\",\n-            \"fn frobnicate(&self) { }|frobnicate\",\n+fn bar(foo: &Foo) {\n+    foo.frobnicate<|>();\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_def_for_fields() {\n-        check_goto(\n-            r\"\n-            //- /lib.rs\n-            struct Foo {\n-                spam: u32,\n-            }\n+        check(\n+            r#\"\n+struct Foo {\n+    spam: u32,\n+} //^^^^\n \n-            fn bar(foo: &Foo) {\n-                foo.spam<|>;\n-            }\n-            \",\n-            \"spam RECORD_FIELD_DEF FileId(1) 17..26 17..21\",\n-            \"spam: u32|spam\",\n+fn bar(foo: &Foo) {\n+    foo.spam<|>;\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_def_for_record_fields() {\n-        check_goto(\n-            r\"\n-            //- /lib.rs\n-            struct Foo {\n-                spam: u32,\n-            }\n+        check(\n+            r#\"\n+//- /lib.rs\n+struct Foo {\n+    spam: u32,\n+} //^^^^\n \n-            fn bar() -> Foo {\n-                Foo {\n-                    spam<|>: 0,\n-                }\n-            }\n-            \",\n-            \"spam RECORD_FIELD_DEF FileId(1) 17..26 17..21\",\n-            \"spam: u32|spam\",\n+fn bar() -> Foo {\n+    Foo {\n+        spam<|>: 0,\n+    }\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_def_for_record_pat_fields() {\n-        check_goto(\n-            r\"\n-            //- /lib.rs\n-            struct Foo {\n-                spam: u32,\n-            }\n+        check(\n+            r#\"\n+//- /lib.rs\n+struct Foo {\n+    spam: u32,\n+} //^^^^\n \n-            fn bar(foo: Foo) -> Foo {\n-                let Foo { spam<|>: _, } = foo\n-            }\n-            \",\n-            \"spam RECORD_FIELD_DEF FileId(1) 17..26 17..21\",\n-            \"spam: u32|spam\",\n+fn bar(foo: Foo) -> Foo {\n+    let Foo { spam<|>: _, } = foo\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_def_for_record_fields_macros() {\n-        check_goto(\n+        check(\n             r\"\n-            //- /lib.rs\n-            macro_rules! m { () => { 92 };}\n-            struct Foo { spam: u32 }\n+macro_rules! m { () => { 92 };}\n+struct Foo { spam: u32 }\n+           //^^^^\n \n-            fn bar() -> Foo {\n-                Foo { spam<|>: m!() }\n-            }\n-            \",\n-            \"spam RECORD_FIELD_DEF FileId(1) 45..54 45..49\",\n-            \"spam: u32|spam\",\n+fn bar() -> Foo {\n+    Foo { spam<|>: m!() }\n+}\n+\",\n         );\n     }\n \n     #[test]\n     fn goto_for_tuple_fields() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            struct Foo(u32);\n-\n-            fn bar() {\n-                let foo = Foo(0);\n-                foo.<|>0;\n-            }\n-            \",\n-            \"TUPLE_FIELD_DEF FileId(1) 11..14\",\n-            \"u32\",\n+        check(\n+            r#\"\n+struct Foo(u32);\n+         //^^^\n+\n+fn bar() {\n+    let foo = Foo(0);\n+    foo.<|>0;\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_def_for_ufcs_inherent_methods() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            struct Foo;\n-            impl Foo {\n-                fn frobnicate() { }\n-            }\n+        check(\n+            r#\"\n+struct Foo;\n+impl Foo {\n+    fn frobnicate() { }\n+}    //^^^^^^^^^^\n \n-            fn bar(foo: &Foo) {\n-                Foo::frobnicate<|>();\n-            }\n-            \",\n-            \"frobnicate FN_DEF FileId(1) 27..46 30..40\",\n-            \"fn frobnicate() { }|frobnicate\",\n+fn bar(foo: &Foo) {\n+    Foo::frobnicate<|>();\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_def_for_ufcs_trait_methods_through_traits() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            trait Foo {\n-                fn frobnicate();\n-            }\n+        check(\n+            r#\"\n+trait Foo {\n+    fn frobnicate();\n+}    //^^^^^^^^^^\n \n-            fn bar() {\n-                Foo::frobnicate<|>();\n-            }\n-            \",\n-            \"frobnicate FN_DEF FileId(1) 16..32 19..29\",\n-            \"fn frobnicate();|frobnicate\",\n+fn bar() {\n+    Foo::frobnicate<|>();\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_def_for_ufcs_trait_methods_through_self() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            struct Foo;\n-            trait Trait {\n-                fn frobnicate();\n-            }\n-            impl Trait for Foo {}\n+        check(\n+            r#\"\n+struct Foo;\n+trait Trait {\n+    fn frobnicate();\n+}    //^^^^^^^^^^\n+impl Trait for Foo {}\n \n-            fn bar() {\n-                Foo::frobnicate<|>();\n-            }\n-            \",\n-            \"frobnicate FN_DEF FileId(1) 30..46 33..43\",\n-            \"fn frobnicate();|frobnicate\",\n+fn bar() {\n+    Foo::frobnicate<|>();\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_definition_on_self() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            struct Foo;\n-            impl Foo {\n-                pub fn new() -> Self {\n-                    Self<|> {}\n-                }\n-            }\n-            \",\n-            \"impl IMPL_DEF FileId(1) 12..73\",\n-            \"impl Foo {...}\",\n-        );\n-\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            struct Foo;\n-            impl Foo {\n-                pub fn new() -> Self<|> {\n-                    Self {}\n-                }\n-            }\n-            \",\n-            \"impl IMPL_DEF FileId(1) 12..73\",\n-            \"impl Foo {...}\",\n-        );\n-\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            enum Foo { A }\n-            impl Foo {\n-                pub fn new() -> Self<|> {\n-                    Foo::A\n-                }\n-            }\n-            \",\n-            \"impl IMPL_DEF FileId(1) 15..75\",\n-            \"impl Foo {...}\",\n-        );\n-\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            enum Foo { A }\n-            impl Foo {\n-                pub fn thing(a: &Self<|>) {\n-                }\n-            }\n-            \",\n-            \"impl IMPL_DEF FileId(1) 15..62\",\n-            \"impl Foo {...}\",\n+        check(\n+            r#\"\n+struct Foo;\n+impl Foo {\n+   //^^^\n+    pub fn new() -> Self {\n+        Self<|> {}\n+    }\n+}\n+\"#,\n+        );\n+        check(\n+            r#\"\n+struct Foo;\n+impl Foo {\n+   //^^^\n+    pub fn new() -> Self<|> {\n+        Self {}\n+    }\n+}\n+\"#,\n+        );\n+\n+        check(\n+            r#\"\n+enum Foo { A }\n+impl Foo {\n+   //^^^\n+    pub fn new() -> Self<|> {\n+        Foo::A\n+    }\n+}\n+\"#,\n+        );\n+\n+        check(\n+            r#\"\n+enum Foo { A }\n+impl Foo {\n+   //^^^\n+    pub fn thing(a: &Self<|>) {\n+    }\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_definition_on_self_in_trait_impl() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            struct Foo;\n-            trait Make {\n-                fn new() -> Self;\n-            }\n-            impl Make for Foo {\n-                fn new() -> Self {\n-                    Self<|> {}\n-                }\n-            }\n-            \",\n-            \"impl IMPL_DEF FileId(1) 49..115\",\n-            \"impl Make for Foo {...}\",\n+        check(\n+            r#\"\n+struct Foo;\n+trait Make {\n+    fn new() -> Self;\n+}\n+impl Make for Foo {\n+            //^^^\n+    fn new() -> Self {\n+        Self<|> {}\n+    }\n+}\n+\"#,\n         );\n \n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            struct Foo;\n-            trait Make {\n-                fn new() -> Self;\n-            }\n-            impl Make for Foo {\n-                fn new() -> Self<|> {\n-                    Self {}\n-                }\n-            }\n-            \",\n-            \"impl IMPL_DEF FileId(1) 49..115\",\n-            \"impl Make for Foo {...}\",\n+        check(\n+            r#\"\n+struct Foo;\n+trait Make {\n+    fn new() -> Self;\n+}\n+impl Make for Foo {\n+            //^^^\n+    fn new() -> Self<|> {\n+        Self {}\n+    }\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_def_when_used_on_definition_name_itself() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            struct Foo<|> { value: u32 }\n-            \",\n-            \"Foo STRUCT_DEF FileId(1) 0..25 7..10\",\n-            \"struct Foo { value: u32 }|Foo\",\n+        check(\n+            r#\"\n+struct Foo<|> { value: u32 }\n+     //^^^\n+            \"#,\n         );\n \n-        check_goto(\n+        check(\n             r#\"\n-            //- /lib.rs\n-            struct Foo {\n-                field<|>: string,\n-            }\n-            \"#,\n-            \"field RECORD_FIELD_DEF FileId(1) 17..30 17..22\",\n-            \"field: string|field\",\n+struct Foo {\n+    field<|>: string,\n+} //^^^^^\n+\"#,\n         );\n \n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            fn foo_test<|>() { }\n-            \",\n-            \"foo_test FN_DEF FileId(1) 0..17 3..11\",\n-            \"fn foo_test() { }|foo_test\",\n+        check(\n+            r#\"\n+fn foo_test<|>() { }\n+ //^^^^^^^^\n+\"#,\n         );\n \n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            enum Foo<|> {\n-                Variant,\n-            }\n-            \",\n-            \"Foo ENUM_DEF FileId(1) 0..25 5..8\",\n-            \"enum Foo {...}|Foo\",\n-        );\n-\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            enum Foo {\n-                Variant1,\n-                Variant2<|>,\n-                Variant3,\n-            }\n-            \",\n-            \"Variant2 ENUM_VARIANT FileId(1) 29..37 29..37\",\n-            \"Variant2|Variant2\",\n+        check(\n+            r#\"\n+enum Foo<|> { Variant }\n+   //^^^\n+\"#,\n         );\n \n-        check_goto(\n+        check(\n             r#\"\n-            //- /lib.rs\n-            static INNER<|>: &str = \"\";\n-            \"#,\n-            \"INNER STATIC_DEF FileId(1) 0..24 7..12\",\n-            \"static INNER: &str = \\\"\\\";|INNER\",\n+enum Foo {\n+    Variant1,\n+    Variant2<|>,\n+  //^^^^^^^^\n+    Variant3,\n+}\n+\"#,\n         );\n \n-        check_goto(\n+        check(\n             r#\"\n-            //- /lib.rs\n-            const INNER<|>: &str = \"\";\n-            \"#,\n-            \"INNER CONST_DEF FileId(1) 0..23 6..11\",\n-            \"const INNER: &str = \\\"\\\";|INNER\",\n+static INNER<|>: &str = \"\";\n+     //^^^^^\n+\"#,\n         );\n \n-        check_goto(\n+        check(\n             r#\"\n-            //- /lib.rs\n-            type Thing<|> = Option<()>;\n-            \"#,\n-            \"Thing TYPE_ALIAS_DEF FileId(1) 0..24 5..10\",\n-            \"type Thing = Option<()>;|Thing\",\n+const INNER<|>: &str = \"\";\n+    //^^^^^\n+\"#,\n         );\n \n-        check_goto(\n+        check(\n             r#\"\n-            //- /lib.rs\n-            trait Foo<|> { }\n-            \"#,\n-            \"Foo TRAIT_DEF FileId(1) 0..13 6..9\",\n-            \"trait Foo { }|Foo\",\n+type Thing<|> = Option<()>;\n+   //^^^^^\n+\"#,\n         );\n \n-        check_goto(\n+        check(\n             r#\"\n-            //- /lib.rs\n-            mod bar<|> { }\n-            \"#,\n-            \"bar MODULE FileId(1) 0..11 4..7\",\n-            \"mod bar { }|bar\",\n+trait Foo<|> { }\n+    //^^^\n+\"#,\n+        );\n+\n+        check(\n+            r#\"\n+mod bar<|> { }\n+  //^^^\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_from_macro() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            macro_rules! id {\n-                ($($tt:tt)*) => { $($tt)* }\n-            }\n-            fn foo() {}\n-            id! {\n-                fn bar() {\n-                    fo<|>o();\n-                }\n-            }\n-            mod confuse_index { fn foo(); }\n-            \",\n-            \"foo FN_DEF FileId(1) 52..63 55..58\",\n-            \"fn foo() {}|foo\",\n+        check(\n+            r#\"\n+macro_rules! id {\n+    ($($tt:tt)*) => { $($tt)* }\n+}\n+fn foo() {}\n+ //^^^\n+id! {\n+    fn bar() {\n+        fo<|>o();\n+    }\n+}\n+mod confuse_index { fn foo(); }\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_through_format() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            #[macro_export]\n-            macro_rules! format {\n-                ($($arg:tt)*) => ($crate::fmt::format($crate::__export::format_args!($($arg)*)))\n-            }\n-            #[rustc_builtin_macro]\n-            #[macro_export]\n-            macro_rules! format_args {\n-                ($fmt:expr) => ({ /* compiler built-in */ });\n-                ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n-            }\n-            pub mod __export {\n-                pub use crate::format_args;\n-                fn foo() {} // for index confusion\n-            }\n-            fn foo() -> i8 {}\n-            fn test() {\n-                format!(\\\"{}\\\", fo<|>o())\n-            }\n-            \",\n-            \"foo FN_DEF FileId(1) 398..415 401..404\",\n-            \"fn foo() -> i8 {}|foo\",\n+        check(\n+            r#\"\n+#[macro_export]\n+macro_rules! format {\n+    ($($arg:tt)*) => ($crate::fmt::format($crate::__export::format_args!($($arg)*)))\n+}\n+#[rustc_builtin_macro]\n+#[macro_export]\n+macro_rules! format_args {\n+    ($fmt:expr) => ({ /* compiler built-in */ });\n+    ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n+}\n+pub mod __export {\n+    pub use crate::format_args;\n+    fn foo() {} // for index confusion\n+}\n+fn foo() -> i8 {}\n+ //^^^\n+fn test() {\n+    format!(\"{}\", fo<|>o())\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_for_type_param() {\n-        check_goto(\n+        check(\n             r#\"\n-            //- /lib.rs\n-            struct Foo<T: Clone> {\n-                t: <|>T,\n-            }\n-            \"#,\n-            \"T TYPE_PARAM FileId(1) 11..19 11..12\",\n-            \"T: Clone|T\",\n+struct Foo<T: Clone> { t: <|>T }\n+         //^\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_within_macro() {\n-        check_goto(\n+        check(\n             r#\"\n-//- /lib.rs\n macro_rules! id {\n     ($($tt:tt)*) => ($($tt)*)\n }\n \n fn foo() {\n     let x = 1;\n+      //^\n     id!({\n         let y = <|>x;\n         let z = y;\n     });\n }\n \"#,\n-            \"x BIND_PAT FileId(1) 70..71\",\n-            \"x\",\n         );\n \n-        check_goto(\n+        check(\n             r#\"\n-//- /lib.rs\n macro_rules! id {\n     ($($tt:tt)*) => ($($tt)*)\n }\n@@ -858,159 +733,125 @@ fn foo() {\n     let x = 1;\n     id!({\n         let y = x;\n+          //^\n         let z = <|>y;\n     });\n }\n \"#,\n-            \"y BIND_PAT FileId(1) 99..100\",\n-            \"y\",\n         );\n     }\n \n     #[test]\n     fn goto_def_in_local_fn() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            fn main() {\n-                fn foo() {\n-                    let x = 92;\n-                    <|>x;\n-                }\n-            }\n-            \",\n-            \"x BIND_PAT FileId(1) 39..40\",\n-            \"x\",\n+        check(\n+            r#\"\n+fn main() {\n+    fn foo() {\n+        let x = 92;\n+          //^\n+        <|>x;\n+    }\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_def_in_local_macro() {\n-        check_goto(\n-            r\"\n-            //- /lib.rs\n-            fn bar() {\n-                macro_rules! foo { () => { () } }\n-                <|>foo!();\n-            }\n-            \",\n-            \"foo MACRO_CALL FileId(1) 15..48 28..31\",\n-            \"macro_rules! foo { () => { () } }|foo\",\n+        check(\n+            r#\"\n+fn bar() {\n+    macro_rules! foo { () => { () } }\n+               //^^^\n+    <|>foo!();\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_def_for_field_init_shorthand() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            struct Foo { x: i32 }\n-            fn main() {\n-                let x = 92;\n-                Foo { x<|> };\n-            }\n-            \",\n-            \"x BIND_PAT FileId(1) 42..43\",\n-            \"x\",\n+        check(\n+            r#\"\n+struct Foo { x: i32 }\n+fn main() {\n+    let x = 92;\n+      //^\n+    Foo { x<|> };\n+}\n+\"#,\n         )\n     }\n \n     #[test]\n     fn goto_def_for_enum_variant_field() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            enum Foo {\n-                Bar { x: i32 }\n-            }\n-            fn baz(foo: Foo) {\n-                match foo {\n-                    Foo::Bar { x<|> } => x\n-                };\n-            }\n-            \",\n-            \"x RECORD_FIELD_DEF FileId(1) 21..27 21..22\",\n-            \"x: i32|x\",\n+        check(\n+            r#\"\n+enum Foo {\n+    Bar { x: i32 }\n+}       //^\n+fn baz(foo: Foo) {\n+    match foo {\n+        Foo::Bar { x<|> } => x\n+    };\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_def_for_enum_variant_self_pattern_const() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            enum Foo {\n-                Bar,\n-            }\n-            impl Foo {\n-                fn baz(self) {\n-                    match self {\n-                        Self::Bar<|> => {}\n-                    }\n-                }\n-            }\n-            \",\n-            \"Bar ENUM_VARIANT FileId(1) 15..18 15..18\",\n-            \"Bar|Bar\",\n+        check(\n+            r#\"\n+enum Foo { Bar }\n+         //^^^\n+impl Foo {\n+    fn baz(self) {\n+        match self { Self::Bar<|> => {} }\n+    }\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_def_for_enum_variant_self_pattern_record() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            enum Foo {\n-                Bar { val: i32 },\n-            }\n-            impl Foo {\n-                fn baz(self) -> i32 {\n-                    match self {\n-                        Self::Bar<|> { val } => {}\n-                    }\n-                }\n-            }\n-            \",\n-            \"Bar ENUM_VARIANT FileId(1) 15..31 15..18\",\n-            \"Bar { val: i32 }|Bar\",\n+        check(\n+            r#\"\n+enum Foo { Bar { val: i32 } }\n+         //^^^\n+impl Foo {\n+    fn baz(self) -> i32 {\n+        match self { Self::Bar<|> { val } => {} }\n+    }\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_def_for_enum_variant_self_expr_const() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            enum Foo {\n-                Bar,\n-            }\n-            impl Foo {\n-                fn baz(self) {\n-                    Self::Bar<|>;\n-                }\n-            }\n-            \",\n-            \"Bar ENUM_VARIANT FileId(1) 15..18 15..18\",\n-            \"Bar|Bar\",\n+        check(\n+            r#\"\n+enum Foo { Bar }\n+         //^^^\n+impl Foo {\n+    fn baz(self) { Self::Bar<|>; }\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn goto_def_for_enum_variant_self_expr_record() {\n-        check_goto(\n-            \"\n-            //- /lib.rs\n-            enum Foo {\n-                Bar { val: i32 },\n-            }\n-            impl Foo {\n-                fn baz(self) {\n-                    Self::Bar<|> {val: 4};\n-                }\n-            }\n-            \",\n-            \"Bar ENUM_VARIANT FileId(1) 15..31 15..18\",\n-            \"Bar { val: i32 }|Bar\",\n+        check(\n+            r#\"\n+enum Foo { Bar { val: i32 } }\n+         //^^^\n+impl Foo {\n+    fn baz(self) { Self::Bar<|> {val: 4}; }\n+}\n+\"#,\n         );\n     }\n }"}, {"sha": "120d29aa03cce2f2d04f176deb3041dda6c32426", "filename": "crates/ra_ide/src/mock_analysis.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4484908a867fc742104d6ffe63b865a411203276/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4484908a867fc742104d6ffe63b865a411203276/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs?ref=4484908a867fc742104d6ffe63b865a411203276", "patch": "@@ -3,11 +3,15 @@ use std::sync::Arc;\n \n use ra_cfg::CfgOptions;\n use ra_db::{CrateName, Env, FileSet, SourceRoot, VfsPath};\n-use test_utils::{extract_range_or_offset, Fixture, RangeOrOffset, CURSOR_MARKER};\n+use test_utils::{\n+    extract_annotations, extract_range_or_offset, Fixture, RangeOrOffset, CURSOR_MARKER,\n+};\n \n use crate::{\n     Analysis, AnalysisChange, AnalysisHost, CrateGraph, Edition, FileId, FilePosition, FileRange,\n };\n+use ra_syntax::TextRange;\n+use rustc_hash::FxHashMap;\n \n /// Mock analysis is used in test to bootstrap an AnalysisHost/Analysis\n /// from a set of in-memory files.\n@@ -77,6 +81,28 @@ impl MockAnalysis {\n             .expect(\"no file in this mock\");\n         FileId(idx as u32 + 1)\n     }\n+    pub fn annotations(&self) -> FxHashMap<FileId, Vec<(TextRange, String)>> {\n+        self.files\n+            .iter()\n+            .enumerate()\n+            .filter_map(|(idx, fixture)| {\n+                let file_id = FileId(idx as u32 + 1);\n+                let annotations = extract_annotations(&fixture.text);\n+                if annotations.is_empty() {\n+                    return None;\n+                }\n+                Some((file_id, annotations))\n+            })\n+            .collect()\n+    }\n+    pub fn annotation(&self) -> (FileRange, String) {\n+        let all = self.annotations();\n+        assert_eq!(all.len(), 1);\n+        let (file_id, mut for_file) = all.into_iter().next().unwrap();\n+        assert_eq!(for_file.len(), 1);\n+        let (range, data) = for_file.pop().unwrap();\n+        (FileRange { file_id, range}, data)\n+    }\n     pub fn analysis_host(self) -> AnalysisHost {\n         let mut host = AnalysisHost::default();\n         let mut change = AnalysisChange::new();"}, {"sha": "f1139d2f42060e086a5b46311a6478d395691619", "filename": "docs/dev/README.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4484908a867fc742104d6ffe63b865a411203276/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/4484908a867fc742104d6ffe63b865a411203276/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=4484908a867fc742104d6ffe63b865a411203276", "patch": "@@ -177,6 +177,9 @@ There are many benefits to this:\n * less stuff printed during printf-debugging\n * less time to run test\n \n+It also makes sense to format snippets more compactly (for example, by placing enum defitions like `enum E { Foo, Bar }` on a single line),\n+as long as they are still readable.\n+\n ## Order of Imports\n \n We separate import groups with blank lines"}]}