{"sha": "0e332e9e3c4a33458cac1801f59c2d0a3ca28484", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMzMyZTllM2M0YTMzNDU4Y2FjMTgwMWY1OWMyZDBhM2NhMjg0ODQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-18T22:20:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-18T22:20:51Z"}, "message": "Rollup merge of #73034 - doctorn:nomangle-inline-linkage, r=matthewjasper\n\nExport `#[inline]` fns with extern indicators\n\nIn ancient history (#36280) we stopped `#[inline]` fns being codegened if they weren't used. However,\n\n- #72944\n- #72463\n\nobserve that when writing something like\n\n```rust\n#![crate_type = \"cdylib\"]\n\n#[no_mangle]\n#[inline]\npub extern \"C\" fn foo() {\n    // ...\n}\n```\n\nwe really _do_ want `foo` to be codegened. This change makes this the case.\n\nResolves #72944, resolves #72463 (and maybe some more)", "tree": {"sha": "47466b9f29e0272a3aa750d65a9820bbbaae2b76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47466b9f29e0272a3aa750d65a9820bbbaae2b76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e332e9e3c4a33458cac1801f59c2d0a3ca28484", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe6+jDCRBK7hj4Ov3rIwAAdHIIAFfvojsZkEIxXXXY2vNTQaom\nyW1llOyNgPhZG3G9/B9ucmzNSR/tZ6Oa2IF++3BMrBp6MuCK1YgiAbx8bUwDJsDR\njwpGzi7smevj2lmhUJiJCvxc10fGhavbPlIstmQvikziNPfVLLSp0jJa3nTgdHXE\nwyM40kA05yGwHRgIPAEh7qYCx4KEWqrdaAY0qK7O5fE0YG7qeGeodmmrbuH4omcA\n27tBVmjEg2FXLXF9EYD/h5otSkjYstu7VCY67JlwW5k1JZbPzfBdfzKfxcot6y4g\niF033nvO2nUFiV3XT5I/7yiVwfbPQEyg8kS0UMRIfZ8SxI9qbz0ktiny4+UKtoA=\n=m5TS\n-----END PGP SIGNATURE-----\n", "payload": "tree 47466b9f29e0272a3aa750d65a9820bbbaae2b76\nparent bf59152c01d9ffc4ceeb982e26b3df2354ebede6\nparent e8e0a0e4e220533db31bc6a572ed9f1b99b31289\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592518851 -0700\ncommitter GitHub <noreply@github.com> 1592518851 -0700\n\nRollup merge of #73034 - doctorn:nomangle-inline-linkage, r=matthewjasper\n\nExport `#[inline]` fns with extern indicators\n\nIn ancient history (#36280) we stopped `#[inline]` fns being codegened if they weren't used. However,\n\n- #72944\n- #72463\n\nobserve that when writing something like\n\n```rust\n#![crate_type = \"cdylib\"]\n\n#[no_mangle]\n#[inline]\npub extern \"C\" fn foo() {\n    // ...\n}\n```\n\nwe really _do_ want `foo` to be codegened. This change makes this the case.\n\nResolves #72944, resolves #72463 (and maybe some more)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e332e9e3c4a33458cac1801f59c2d0a3ca28484", "html_url": "https://github.com/rust-lang/rust/commit/0e332e9e3c4a33458cac1801f59c2d0a3ca28484", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e332e9e3c4a33458cac1801f59c2d0a3ca28484/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf59152c01d9ffc4ceeb982e26b3df2354ebede6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf59152c01d9ffc4ceeb982e26b3df2354ebede6", "html_url": "https://github.com/rust-lang/rust/commit/bf59152c01d9ffc4ceeb982e26b3df2354ebede6"}, {"sha": "e8e0a0e4e220533db31bc6a572ed9f1b99b31289", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8e0a0e4e220533db31bc6a572ed9f1b99b31289", "html_url": "https://github.com/rust-lang/rust/commit/e8e0a0e4e220533db31bc6a572ed9f1b99b31289"}], "stats": {"total": 146, "additions": 132, "deletions": 14}, "files": [{"sha": "98f7da8361cc408b9041265f0e9a43dfa2bd5bf8", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0e332e9e3c4a33458cac1801f59c2d0a3ca28484/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e332e9e3c4a33458cac1801f59c2d0a3ca28484/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=0e332e9e3c4a33458cac1801f59c2d0a3ca28484", "patch": "@@ -89,10 +89,12 @@ fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<\n                 | Node::ImplItem(&hir::ImplItem { kind: hir::ImplItemKind::Fn(..), .. }) => {\n                     let def_id = tcx.hir().local_def_id(hir_id);\n                     let generics = tcx.generics_of(def_id);\n-                    if !generics.requires_monomorphization(tcx) &&\n-                        // Functions marked with #[inline] are only ever codegened\n-                        // with \"internal\" linkage and are never exported.\n-                        !Instance::mono(tcx, def_id.to_def_id()).def.generates_cgu_internal_copy(tcx)\n+                    if !generics.requires_monomorphization(tcx)\n+                        // Functions marked with #[inline] are codegened with \"internal\"\n+                        // linkage and are not exported unless marked with an extern\n+                        // inidicator\n+                        && (!Instance::mono(tcx, def_id.to_def_id()).def.generates_cgu_internal_copy(tcx)\n+                            || tcx.codegen_fn_attrs(def_id.to_def_id()).contains_extern_indicator())\n                     {\n                         Some(def_id)\n                     } else {"}, {"sha": "f1c1b962ab997fbbd698cd6380083aa851240444", "filename": "src/librustc_middle/mir/mono.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e332e9e3c4a33458cac1801f59c2d0a3ca28484/src%2Flibrustc_middle%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e332e9e3c4a33458cac1801f59c2d0a3ca28484/src%2Flibrustc_middle%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmono.rs?ref=0e332e9e3c4a33458cac1801f59c2d0a3ca28484", "patch": "@@ -91,9 +91,9 @@ impl<'tcx> MonoItem<'tcx> {\n         match *self {\n             MonoItem::Fn(ref instance) => {\n                 let entry_def_id = tcx.entry_fn(LOCAL_CRATE).map(|(id, _)| id);\n-                // If this function isn't inlined or otherwise has explicit\n-                // linkage, then we'll be creating a globally shared version.\n-                if self.explicit_linkage(tcx).is_some()\n+                // If this function isn't inlined or otherwise has an extern\n+                // indicator, then we'll be creating a globally shared version.\n+                if tcx.codegen_fn_attrs(instance.def_id()).contains_extern_indicator()\n                     || !instance.def.generates_cgu_internal_copy(tcx)\n                     || Some(instance.def_id()) == entry_def_id.map(LocalDefId::to_def_id)\n                 {\n@@ -102,7 +102,7 @@ impl<'tcx> MonoItem<'tcx> {\n \n                 // At this point we don't have explicit linkage and we're an\n                 // inlined function. If we're inlining into all CGUs then we'll\n-                // be creating a local copy per CGU\n+                // be creating a local copy per CGU.\n                 if generate_cgu_internal_copies {\n                     return InstantiationMode::LocalCopy;\n                 }"}, {"sha": "519be6b6a99a43d2d870ee6dfcad1117f264a753", "filename": "src/test/codegen/cdylib-external-inline-fns.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0e332e9e3c4a33458cac1801f59c2d0a3ca28484/src%2Ftest%2Fcodegen%2Fcdylib-external-inline-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e332e9e3c4a33458cac1801f59c2d0a3ca28484/src%2Ftest%2Fcodegen%2Fcdylib-external-inline-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcdylib-external-inline-fns.rs?ref=0e332e9e3c4a33458cac1801f59c2d0a3ca28484", "patch": "@@ -0,0 +1,43 @@\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"cdylib\"]\n+\n+// CHECK: define void @a()\n+#[no_mangle]\n+#[inline]\n+pub extern \"C\" fn a() {}\n+\n+// CHECK: define void @b()\n+#[export_name = \"b\"]\n+#[inline]\n+pub extern \"C\" fn b() {}\n+\n+// CHECK: define void @c()\n+#[no_mangle]\n+#[inline]\n+extern \"C\" fn c() {}\n+\n+// CHECK: define void @d()\n+#[export_name = \"d\"]\n+#[inline]\n+extern \"C\" fn d() {}\n+\n+// CHECK: define void @e()\n+#[no_mangle]\n+#[inline(always)]\n+pub extern \"C\" fn e() {}\n+\n+// CHECK: define void @f()\n+#[export_name = \"f\"]\n+#[inline(always)]\n+pub extern \"C\" fn f() {}\n+\n+// CHECK: define void @g()\n+#[no_mangle]\n+#[inline(always)]\n+extern \"C\" fn g() {}\n+\n+// CHECK: define void @h()\n+#[export_name = \"h\"]\n+#[inline(always)]\n+extern \"C\" fn h() {}"}, {"sha": "59e97601c838d6427d6e741e1a91aa97aa64b8cc", "filename": "src/test/codegen/export-no-mangle.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0e332e9e3c4a33458cac1801f59c2d0a3ca28484/src%2Ftest%2Fcodegen%2Fexport-no-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e332e9e3c4a33458cac1801f59c2d0a3ca28484/src%2Ftest%2Fcodegen%2Fexport-no-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fexport-no-mangle.rs?ref=0e332e9e3c4a33458cac1801f59c2d0a3ca28484", "patch": "@@ -11,11 +11,21 @@ mod private {\n     #[export_name = \"BAR\"]\n     static BAR: u32 = 3;\n \n-    // CHECK: void @foo()\n+    // CHECK: void @a()\n     #[no_mangle]\n-    pub extern fn foo() {}\n+    pub extern fn a() {}\n \n-    // CHECK: void @bar()\n-    #[export_name = \"bar\"]\n-    extern fn bar() {}\n+    // CHECK: void @b()\n+    #[export_name = \"b\"]\n+    extern fn b() {}\n+\n+    // CHECK: void @c()\n+    #[export_name = \"c\"]\n+    #[inline]\n+    extern fn c() {}\n+\n+    // CHECK: void @d()\n+    #[export_name = \"d\"]\n+    #[inline(always)]\n+    extern fn d() {}\n }"}, {"sha": "41820b057f1ef27710bf098403d3829daee3dac8", "filename": "src/test/codegen/external-no-mangle-fns.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0e332e9e3c4a33458cac1801f59c2d0a3ca28484/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e332e9e3c4a33458cac1801f59c2d0a3ca28484/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-fns.rs?ref=0e332e9e3c4a33458cac1801f59c2d0a3ca28484", "patch": "@@ -53,3 +53,23 @@ fn x() {\n         core::ptr::read_volatile(&42);\n     }\n }\n+\n+// CHECK: define void @i()\n+#[no_mangle]\n+#[inline]\n+fn i() {}\n+\n+// CHECK: define void @j()\n+#[no_mangle]\n+#[inline]\n+pub fn j() {}\n+\n+// CHECK: define void @k()\n+#[no_mangle]\n+#[inline(always)]\n+fn k() {}\n+\n+// CHECK: define void @l()\n+#[no_mangle]\n+#[inline(always)]\n+pub fn l() {}"}, {"sha": "48231d6f7208d7d9e9d398e7da4e20c35edc0667", "filename": "src/test/codegen/sanitizer-no-sanitize-inlining.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e332e9e3c4a33458cac1801f59c2d0a3ca28484/src%2Ftest%2Fcodegen%2Fsanitizer-no-sanitize-inlining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e332e9e3c4a33458cac1801f59c2d0a3ca28484/src%2Ftest%2Fcodegen%2Fsanitizer-no-sanitize-inlining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsanitizer-no-sanitize-inlining.rs?ref=0e332e9e3c4a33458cac1801f59c2d0a3ca28484", "patch": "@@ -13,7 +13,7 @@\n #![feature(no_sanitize)]\n \n // ASAN-LABEL: define void @test\n-// ASAN:         tail call fastcc void @random_inline\n+// ASAN:         call {{.*}} @random_inline\n // ASAN:       }\n //\n // LSAN-LABEL: define void @test"}, {"sha": "8876ab7376afe3ce5ca7b7c400c86251efae375e", "filename": "src/test/codegen/staticlib-external-inline-fns.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0e332e9e3c4a33458cac1801f59c2d0a3ca28484/src%2Ftest%2Fcodegen%2Fstaticlib-external-inline-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e332e9e3c4a33458cac1801f59c2d0a3ca28484/src%2Ftest%2Fcodegen%2Fstaticlib-external-inline-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstaticlib-external-inline-fns.rs?ref=0e332e9e3c4a33458cac1801f59c2d0a3ca28484", "patch": "@@ -0,0 +1,43 @@\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"staticlib\"]\n+\n+// CHECK: define void @a()\n+#[no_mangle]\n+#[inline]\n+pub extern \"C\" fn a() {}\n+\n+// CHECK: define void @b()\n+#[export_name = \"b\"]\n+#[inline]\n+pub extern \"C\" fn b() {}\n+\n+// CHECK: define void @c()\n+#[no_mangle]\n+#[inline]\n+extern \"C\" fn c() {}\n+\n+// CHECK: define void @d()\n+#[export_name = \"d\"]\n+#[inline]\n+extern \"C\" fn d() {}\n+\n+// CHECK: define void @e()\n+#[no_mangle]\n+#[inline(always)]\n+pub extern \"C\" fn e() {}\n+\n+// CHECK: define void @f()\n+#[export_name = \"f\"]\n+#[inline(always)]\n+pub extern \"C\" fn f() {}\n+\n+// CHECK: define void @g()\n+#[no_mangle]\n+#[inline(always)]\n+extern \"C\" fn g() {}\n+\n+// CHECK: define void @h()\n+#[export_name = \"h\"]\n+#[inline(always)]\n+extern \"C\" fn h() {}"}]}