{"sha": "c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwODQ4MGZjZTBmMzlmNWM5YzZkYjZkZGUwZGNjYjM3NWNhMGFiMTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-23T18:38:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-23T18:38:16Z"}, "message": "Auto merge of #49308 - alexcrichton:rollup, r=alexcrichton\n\nRollup of 15 pull requests\n\n- Successful merges: #48265, #48528, #48552, #48624, #48883, #48909, #49028, #49030, #49102, #49160, #49169, #49203, #49262, #49272, #49295\n- Failed merges: #48942, #49035", "tree": {"sha": "32db4f9e696b8c5ba9d249bf05b4af6c40974e2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32db4f9e696b8c5ba9d249bf05b4af6c40974e2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "html_url": "https://github.com/rust-lang/rust/commit/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55e1104dd918a809d2751d325c11d59c85485a2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/55e1104dd918a809d2751d325c11d59c85485a2e", "html_url": "https://github.com/rust-lang/rust/commit/55e1104dd918a809d2751d325c11d59c85485a2e"}, {"sha": "0e6cd8b61a392cd80d575eaef86d12d9c3f9e2dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e6cd8b61a392cd80d575eaef86d12d9c3f9e2dc", "html_url": "https://github.com/rust-lang/rust/commit/0e6cd8b61a392cd80d575eaef86d12d9c3f9e2dc"}], "stats": {"total": 3685, "additions": 3062, "deletions": 623}, "files": [{"sha": "2e094a889820695e378a74f9a3dd078e03c975a2", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -313,6 +313,7 @@ impl<'a> Builder<'a> {\n                 test::RunPassFullDepsPretty, test::RunFailFullDepsPretty,\n                 test::Crate, test::CrateLibrustc, test::CrateRustdoc, test::Linkcheck,\n                 test::Cargotest, test::Cargo, test::Rls, test::ErrorIndex, test::Distcheck,\n+                test::RunMakeFullDeps,\n                 test::Nomicon, test::Reference, test::RustdocBook, test::RustByExample,\n                 test::TheBook, test::UnstableBook,\n                 test::Rustfmt, test::Miri, test::Clippy, test::RustdocJS, test::RustdocTheme,"}, {"sha": "2640248373c3d9504688bcd1c7c2ea131e37c01a", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -915,7 +915,7 @@ impl Step for Assemble {\n             }\n         }\n \n-        let lld_install = if build.config.lld_enabled && target_compiler.stage > 0 {\n+        let lld_install = if build.config.lld_enabled {\n             Some(builder.ensure(native::Lld {\n                 target: target_compiler.host,\n             }))"}, {"sha": "6c19da4648a298dce4cfdd1755824c8453f273bc", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -759,12 +759,18 @@ test!(RunFailFullDepsPretty {\n     host: true\n });\n \n-host_test!(RunMake {\n+default_test!(RunMake {\n     path: \"src/test/run-make\",\n     mode: \"run-make\",\n     suite: \"run-make\"\n });\n \n+host_test!(RunMakeFullDeps {\n+    path: \"src/test/run-make-fulldeps\",\n+    mode: \"run-make\",\n+    suite: \"run-make-fulldeps\"\n+});\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n struct Compiletest {\n     compiler: Compiler,\n@@ -827,8 +833,7 @@ impl Step for Compiletest {\n             // FIXME: Does pretty need librustc compiled? Note that there are\n             // fulldeps test suites with mode = pretty as well.\n             mode == \"pretty\" ||\n-            mode == \"rustdoc\" ||\n-            mode == \"run-make\" {\n+            mode == \"rustdoc\" {\n             builder.ensure(compile::Rustc { compiler, target });\n         }\n \n@@ -849,7 +854,7 @@ impl Step for Compiletest {\n         cmd.arg(\"--rustc-path\").arg(builder.rustc(compiler));\n \n         // Avoid depending on rustdoc when we don't need it.\n-        if mode == \"rustdoc\" || mode == \"run-make\" {\n+        if mode == \"rustdoc\" || (mode == \"run-make\" && suite.ends_with(\"fulldeps\")) {\n             cmd.arg(\"--rustdoc-path\").arg(builder.rustdoc(compiler.host));\n         }\n \n@@ -931,7 +936,7 @@ impl Step for Compiletest {\n \n             // Only pass correct values for these flags for the `run-make` suite as it\n             // requires that a C++ compiler was configured which isn't always the case.\n-            if suite == \"run-make\" {\n+            if suite == \"run-make-fulldeps\" {\n                 let llvm_components = output(Command::new(&llvm_config).arg(\"--components\"));\n                 let llvm_cxxflags = output(Command::new(&llvm_config).arg(\"--cxxflags\"));\n                 cmd.arg(\"--cc\").arg(build.cc(target))\n@@ -944,12 +949,12 @@ impl Step for Compiletest {\n                 }\n             }\n         }\n-        if suite == \"run-make\" && !build.config.llvm_enabled {\n+        if suite == \"run-make-fulldeps\" && !build.config.llvm_enabled {\n             println!(\"Ignoring run-make test suite as they generally don't work without LLVM\");\n             return;\n         }\n \n-        if suite != \"run-make\" {\n+        if suite != \"run-make-fulldeps\" {\n             cmd.arg(\"--cc\").arg(\"\")\n                .arg(\"--cxx\").arg(\"\")\n                .arg(\"--cflags\").arg(\"\")"}, {"sha": "6c0ec1ad9d4e14879bf787dd3823a5a36d503539", "filename": "src/ci/docker/wasm32-unknown/Dockerfile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Fci%2Fdocker%2Fwasm32-unknown%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Fci%2Fdocker%2Fwasm32-unknown%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fwasm32-unknown%2FDockerfile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -26,6 +26,7 @@ ENV RUST_CONFIGURE_ARGS \\\n   --set rust.lld\n \n ENV SCRIPT python2.7 /checkout/x.py test --target $TARGETS \\\n+  src/test/run-make \\\n   src/test/ui \\\n   src/test/run-pass \\\n   src/test/compile-fail \\"}, {"sha": "46528187c11754eecbf2be1e59434bb2a3acaec5", "filename": "src/doc/rustdoc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -5,3 +5,4 @@\n - [The `#[doc]` attribute](the-doc-attribute.md)\n - [Documentation tests](documentation-tests.md)\n - [Passes](passes.md)\n+- [Unstable features](unstable-features.md)"}, {"sha": "16356c20c70694470af16bb752a96d95d7fc9253", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "added", "additions": 362, "deletions": 0, "changes": 362, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -0,0 +1,362 @@\n+# Unstable features\n+\n+Rustdoc is under active developement, and like the Rust compiler, some features are only available\n+on the nightly releases. Some of these are new and need some more testing before they're able to get\n+released to the world at large, and some of them are tied to features in the Rust compiler that are\n+themselves unstable. Several features here require a matching `#![feature(...)]` attribute to\n+enable, and thus are more fully documented in the [Unstable Book]. Those sections will link over\n+there as necessary.\n+\n+[Unstable Book]: ../unstable-book/index.html\n+\n+## Nightly-gated functionality\n+\n+These features just require a nightly build to operate. Unlike the other features on this page,\n+these don't need to be \"turned on\" with a command-line flag or a `#![feature(...)]` attribute in\n+your crate. This can give them some subtle fallback modes when used on a stable release, so be\n+careful!\n+\n+### Error numbers for `compile-fail` doctests\n+\n+As detailed in [the chapter on documentation tests][doctest-attributes], you can add a\n+`compile_fail` attribute to a doctest to state that the test should fail to compile. However, on\n+nightly, you can optionally add an error number to state that a doctest should emit a specific error\n+number:\n+\n+[doctest-attributes]: documentation-tests.html#attributes\n+\n+``````markdown\n+```compile_fail,E0044\n+extern { fn some_func<T>(x: T); }\n+```\n+``````\n+\n+This is used by the error index to ensure that the samples that correspond to a given error number\n+properly emit that error code. However, these error codes aren't guaranteed to be the only thing\n+that a piece of code emits from version to version, so this is unlikely to be stabilized in the\n+future.\n+\n+Attempting to use these error numbers on stable will result in the code sample being interpreted as\n+plain text.\n+\n+### Linking to items by type\n+\n+As designed in [RFC 1946], Rustdoc can parse paths to items when you use them as links. To resolve\n+these type names, it uses the items currently in-scope, either by declaration or by `use` statement.\n+For modules, the \"active scope\" depends on whether the documentation is written outside the module\n+(as `///` comments on the `mod` statement) or inside the module (at `//!` comments inside the file\n+or block). For all other items, it uses the enclosing module's scope.\n+\n+[RFC 1946]: https://github.com/rust-lang/rfcs/pull/1946\n+\n+For example, in the following code:\n+\n+```rust\n+/// Does the thing.\n+pub fn do_the_thing(_: SomeType) {\n+\tprintln!(\"Let's do the thing!\");\n+}\n+\n+/// Token you use to [`do_the_thing`].\n+pub struct SomeType;\n+```\n+\n+The link to ``[`do_the_thing`]`` in `SomeType`'s docs will properly link to the page for `fn\n+do_the_thing`. Note that here, rustdoc will insert the link target for you, but manually writing the\n+target out also works:\n+\n+```rust\n+pub mod some_module {\n+\t/// Token you use to do the thing.\n+\tpub struct SomeStruct;\n+}\n+\n+/// Does the thing. Requires one [`SomeStruct`] for the thing to work.\n+///\n+/// [`SomeStruct`]: some_module::SomeStruct\n+pub fn do_the_thing(_: some_module::SomeStruct) {\n+\tprintln!(\"Let's do the thing!\");\n+}\n+```\n+\n+For more details, check out [the RFC][RFC 1946], and see [the tracking issue][43466] for more\n+information about what parts of the feature are available.\n+\n+[43466]: https://github.com/rust-lang/rust/issues/43466\n+\n+## Extensions to the `#[doc]` attribute\n+\n+These features operate by extending the `#[doc]` attribute, and thus can be caught by the compiler\n+and enabled with a `#![feature(...)]` attribute in your crate.\n+\n+### Documenting platform-/feature-specific information\n+\n+Because of the way Rustdoc documents a crate, the documentation it creates is specific to the target\n+rustc compiles for. Anything that's specific to any other target is dropped via `#[cfg]` attribute\n+processing early in the compilation process. However, Rustdoc has a trick up its sleeve to handle\n+platform-specific code if it *does* receive it.\n+\n+Because Rustdoc doesn't need to fully compile a crate to binary, it replaces function bodies with\n+`loop {}` to prevent having to process more than necessary. This means that any code within a\n+function that requires platform-specific pieces is ignored. Combined with a special attribute,\n+`#[doc(cfg(...))]`, you can tell Rustdoc exactly which platform something is supposed to run on,\n+ensuring that doctests are only run on the appropriate platforms.\n+\n+The `#[doc(cfg(...))]` attribute has another effect: When Rustdoc renders documentation for that\n+item, it will be accompanied by a banner explaining that the item is only available on certain\n+platforms.\n+\n+As mentioned earlier, getting the items to Rustdoc requires some extra preparation. The standard\n+library adds a `--cfg dox` flag to every Rustdoc command, but the same thing can be accomplished by\n+adding a feature to your Cargo.toml and adding `--feature dox` (or whatever you choose to name the\n+feature) to your `cargo doc` calls.\n+\n+Either way, once you create an environment for the documentation, you can start to augment your\n+`#[cfg]` attributes to allow both the target platform *and* the documentation configuration to leave\n+the item in. For example, `#[cfg(any(windows, feature = \"dox\"))]` will preserve the item either on\n+Windows or during the documentation process. Then, adding a new attribute `#[doc(cfg(windows))]`\n+will tell Rustdoc that the item is supposed to be used on Windows. For example:\n+\n+```rust\n+#![feature(doc_cfg)]\n+\n+/// Token struct that can only be used on Windows.\n+#[cfg(any(windows, feature = \"dox\"))]\n+#[doc(cfg(windows))]\n+pub struct WindowsToken;\n+\n+/// Token struct that can only be used on Unix.\n+#[cfg(any(unix, feature = \"dox\"))]\n+#[doc(cfg(unix))]\n+pub struct UnixToken;\n+```\n+\n+In this sample, the tokens will only appear on their respective platforms, but they will both appear\n+in documentation.\n+\n+`#[doc(cfg(...))]` was introduced to be used by the standard library and currently requires the\n+`#![feature(doc_cfg)]` feature gate. For more information, see [its chapter in the Unstable\n+Book][unstable-doc-cfg] and [its tracking issue][issue-doc-cfg].\n+\n+[unstable-doc-cfg]: ../unstable-book/language-features/doc-cfg.html\n+[issue-doc-cfg]: https://github.com/rust-lang/rust/issues/43781\n+\n+### Adding your trait to the \"Important Traits\" dialog\n+\n+Rustdoc keeps a list of a few traits that are believed to be \"fundamental\" to a given type when\n+implemented on it. These traits are intended to be the primary interface for their types, and are\n+often the only thing available to be documented on their types. For this reason, Rustdoc will track\n+when a given type implements one of these traits and call special attention to it when a function\n+returns one of these types. This is the \"Important Traits\" dialog, visible as a circle-i button next\n+to the function, which, when clicked, shows the dialog.\n+\n+In the standard library, the traits that qualify for inclusion are `Iterator`, `io::Read`, and\n+`io::Write`. However, rather than being implemented as a hard-coded list, these traits have a\n+special marker attribute on them: `#[doc(spotlight)]`. This means that you could apply this\n+attribute to your own trait to include it in the \"Important Traits\" dialog in documentation.\n+\n+The `#[doc(spotlight)]` attribute currently requires the `#![feature(doc_spotlight)]` feature gate.\n+For more information, see [its chapter in the Unstable Book][unstable-spotlight] and [its tracking\n+issue][issue-spotlight].\n+\n+[unstable-spotlight]: ../unstable-book/language-features/doc-spotlight.html\n+[issue-spotlight]: https://github.com/rust-lang/rust/issues/45040\n+\n+### Exclude certain dependencies from documentation\n+\n+The standard library uses several dependencies which, in turn, use several types and traits from the\n+standard library. In addition, there are several compiler-internal crates that are not considered to\n+be part of the official standard library, and thus would be a distraction to include in\n+documentation. It's not enough to exclude their crate documentation, since information about trait\n+implementations appears on the pages for both the type and the trait, which can be in different\n+crates!\n+\n+To prevent internal types from being included in documentation, the standard library adds an\n+attribute to their `extern crate` declarations: `#[doc(masked)]`. This causes Rustdoc to \"mask out\"\n+types from these crates when building lists of trait implementations.\n+\n+The `#[doc(masked)]` attribute is intended to be used internally, and requires the\n+`#![feature(doc_masked)]` feature gate.  For more information, see [its chapter in the Unstable\n+Book][unstable-masked] and [its tracking issue][issue-masked].\n+\n+[unstable-masked]: ../unstable-book/language-features/doc-masked.html\n+[issue-masked]: https://github.com/rust-lang/rust/issues/44027\n+\n+### Include external files as API documentation\n+\n+As designed in [RFC 1990], Rustdoc can read an external file to use as a type's documentation. This\n+is useful if certain documentation is so long that it would break the flow of reading the source.\n+Instead of writing it all inline, writing `#[doc(include = \"sometype.md\")]` (where `sometype.md` is\n+a file adjacent to the `lib.rs` for the crate) will ask Rustdoc to instead read that file and use it\n+as if it were written inline.\n+\n+[RFC 1990]: https://github.com/rust-lang/rfcs/pull/1990\n+\n+`#[doc(include = \"...\")]` currently requires the `#![feature(external_doc)]` feature gate. For more\n+information, see [its chapter in the Unstable Book][unstable-include] and [its tracking\n+issue][issue-include].\n+\n+[unstable-include]: ../unstable-book/language-features/external-doc.html\n+[issue-include]: https://github.com/rust-lang/rust/issues/44732\n+\n+## Unstable command-line arguments\n+\n+These features are enabled by passing a command-line flag to Rustdoc, but the flags in question are\n+themselves marked as unstable. To use any of these options, pass `-Z unstable-options` as well as\n+the flag in question to Rustdoc on the command-line. To do this from Cargo, you can either use the\n+`RUSTDOCFLAGS` environment variable or the `cargo rustdoc` command.\n+\n+### `--markdown-before-content`: include rendered Markdown before the content\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -Z unstable-options --markdown-before-content extra.md\n+$ rustdoc README.md -Z unstable-options --markdown-before-content extra.md\n+```\n+\n+Just like `--html-before-content`, this allows you to insert extra content inside the `<body>` tag\n+but before the other content `rustdoc` would normally produce in the rendered documentation.\n+However, instead of directly inserting the file verbatim, `rustdoc` will pass the files through a\n+Markdown renderer before inserting the result into the file.\n+\n+### `--markdown-after-content`: include rendered Markdown after the content\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -Z unstable-options --markdown-after-content extra.md\n+$ rustdoc README.md -Z unstable-options --markdown-after-content extra.md\n+```\n+\n+Just like `--html-after-content`, this allows you to insert extra content before the `</body>` tag\n+but after the other content `rustdoc` would normally produce in the rendered documentation.\n+However, instead of directly inserting the file verbatim, `rustdoc` will pass the files through a\n+Markdown renderer before inserting the result into the file.\n+\n+### `--playground-url`: control the location of the playground\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -Z unstable-options --playground-url https://play.rust-lang.org/\n+```\n+\n+When rendering a crate's docs, this flag gives the base URL of the Rust Playground, to use for\n+generating `Run` buttons. Unlike `--markdown-playground-url`, this argument works for standalone\n+Markdown files *and* Rust crates. This works the same way as adding `#![doc(html_playground_url =\n+\"url\")]` to your crate root, as mentioned in [the chapter about the `#[doc]`\n+attribute][doc-playground]. Please be aware that the official Rust Playground at\n+https://play.rust-lang.org does not have every crate available, so if your examples require your\n+crate, make sure the playground you provide has your crate available.\n+\n+[doc-playground]: the-doc-attribute.html#html_playground_url\n+\n+If both `--playground-url` and `--markdown-playground-url` are present when rendering a standalone\n+Markdown file, the URL given to `--markdown-playground-url` will take precedence. If both\n+`--playground-url` and `#![doc(html_playground_url = \"url\")]` are present when rendering crate docs,\n+the attribute will take precedence.\n+\n+### `--crate-version`: control the crate version\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -Z unstable-options --crate-version 1.3.37\n+```\n+\n+When `rustdoc` receives this flag, it will print an extra \"Version (version)\" into the sidebar of\n+the crate root's docs. You can use this flag to differentiate between different versions of your\n+library's documentation.\n+\n+### `--linker`: control the linker used for documentation tests\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc --test src/lib.rs -Z unstable-options --linker foo\n+$ rustdoc --test README.md -Z unstable-options --linker foo\n+```\n+\n+When `rustdoc` runs your documentation tests, it needs to compile and link the tests as executables\n+before running them. This flag can be used to change the linker used on these executables. It's\n+equivalent to passing `-C linker=foo` to `rustc`.\n+\n+### `--sort-modules-by-appearance`: control how items on module pages are sorted\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -Z unstable-options --sort-modules-by-appearance\n+```\n+\n+Ordinarily, when `rustdoc` prints items in module pages, it will sort them alphabetically (taking\n+some consideration for their stability, and names that end in a number). Giving this flag to\n+`rustdoc` will disable this sorting and instead make it print the items in the order they appear in\n+the source.\n+\n+### `--themes`: provide additional themes\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -Z unstable-options --themes theme.css\n+```\n+\n+Giving this flag to `rustdoc` will make it copy your theme into the generated crate docs and enable\n+it in the theme selector. Note that `rustdoc` will reject your theme file if it doesn't style\n+everything the \"main\" theme does. See `--theme-checker` below for details.\n+\n+### `--theme-checker`: verify theme CSS for validity\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc -Z unstable-options --theme-checker theme.css\n+```\n+\n+Before including your theme in crate docs, `rustdoc` will compare all the CSS rules it contains\n+against the \"main\" theme included by default. Using this flag will allow you to see which rules are\n+missing if `rustdoc` rejects your theme.\n+\n+### `--resource-suffix`: modifying the name of CSS/JavaScript in crate docs\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -Z unstable-options --resource-suffix suf\n+```\n+\n+When rendering docs, `rustdoc` creates several CSS and JavaScript files as part of the output. Since\n+all these files are linked from every page, changing where they are can be cumbersome if you need to\n+specially cache them. This flag will rename all these files in the output to include the suffix in\n+the filename. For example, `main.css` would become `main-suf.css` with the above command.\n+\n+### `--display-warnings`: display warnings when documenting or running documentation tests\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -Z unstable-options --display-warnings\n+$ rustdoc --test src/lib.rs -Z unstable-options --display-warnings\n+```\n+\n+The intent behind this flag is to allow the user to see warnings that occur within their library or\n+their documentation tests, which are usually suppressed. However, [due to a\n+bug][issue-display-warnings], this flag doesn't 100% work as intended. See the linked issue for\n+details.\n+\n+[issue-display-warnings]: https://github.com/rust-lang/rust/issues/41574\n+\n+### `-Z force-unstable-if-unmarked`\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -Z force-unstable-if-unmarked\n+```\n+\n+This is an internal flag intended for the standard library and compiler that applies an\n+`#[unstable]` attribute to any dependent crate that doesn't have another stability attribute. This\n+allows `rustdoc` to be able to generate documentation for the compiler crates and the standard\n+library, as an equivalent command-line argument is provided to `rustc` when building those crates."}, {"sha": "361e8d8e60eed9a48edc1c7a7023e7c3bb9ffadf", "filename": "src/etc/cat-and-grep.sh", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Fetc%2Fcat-and-grep.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Fetc%2Fcat-and-grep.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcat-and-grep.sh?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -63,6 +63,11 @@ done\n \n shift $((OPTIND - 1))\n \n+# use gnu version of tool if available (for bsd)\n+if command -v \"g${GREPPER}\"; then\n+    GREPPER=\"g${GREPPER}\"\n+fi\n+\n LOG=$(mktemp -t cgrep.XXXXXX)\n trap \"rm -f $LOG\" EXIT\n "}, {"sha": "464f8f2f4eced25d14eca2f3bfeb6c8b40f523c1", "filename": "src/liballoc/btree/node.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Fliballoc%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Fliballoc%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fnode.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -43,8 +43,7 @@\n \n use core::marker::PhantomData;\n use core::mem;\n-use core::nonzero::NonZero;\n-use core::ptr::{self, Unique};\n+use core::ptr::{self, Unique, NonNull};\n use core::slice;\n \n use boxed::Box;\n@@ -149,14 +148,12 @@ impl<K, V> BoxedNode<K, V> {\n         }\n     }\n \n-    unsafe fn from_ptr(ptr: NonZero<*const LeafNode<K, V>>) -> Self {\n-        BoxedNode { ptr: Unique::new_unchecked(ptr.get() as *mut LeafNode<K, V>) }\n+    unsafe fn from_ptr(ptr: NonNull<LeafNode<K, V>>) -> Self {\n+        BoxedNode { ptr: Unique::from(ptr) }\n     }\n \n-    fn as_ptr(&self) -> NonZero<*const LeafNode<K, V>> {\n-        unsafe {\n-            NonZero::from(self.ptr.as_ref())\n-        }\n+    fn as_ptr(&self) -> NonNull<LeafNode<K, V>> {\n+        NonNull::from(self.ptr)\n     }\n }\n \n@@ -276,7 +273,7 @@ impl<K, V> Root<K, V> {\n ///   `NodeRef` could be pointing to either type of node.\n pub struct NodeRef<BorrowType, K, V, Type> {\n     height: usize,\n-    node: NonZero<*const LeafNode<K, V>>,\n+    node: NonNull<LeafNode<K, V>>,\n     // This is null unless the borrow type is `Mut`\n     root: *const Root<K, V>,\n     _marker: PhantomData<(BorrowType, Type)>\n@@ -302,15 +299,15 @@ unsafe impl<K: Send, V: Send, Type> Send\n impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Internal> {\n     fn as_internal(&self) -> &InternalNode<K, V> {\n         unsafe {\n-            &*(self.node.get() as *const InternalNode<K, V>)\n+            &*(self.node.as_ptr() as *mut InternalNode<K, V>)\n         }\n     }\n }\n \n impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n     fn as_internal_mut(&mut self) -> &mut InternalNode<K, V> {\n         unsafe {\n-            &mut *(self.node.get() as *mut InternalNode<K, V>)\n+            &mut *(self.node.as_ptr() as *mut InternalNode<K, V>)\n         }\n     }\n }\n@@ -352,7 +349,7 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n \n     fn as_leaf(&self) -> &LeafNode<K, V> {\n         unsafe {\n-            &*self.node.get()\n+            self.node.as_ref()\n         }\n     }\n \n@@ -382,7 +379,8 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n         >,\n         Self\n     > {\n-        if let Some(non_zero) = NonZero::new(self.as_leaf().parent as *const LeafNode<K, V>) {\n+        let parent_as_leaf = self.as_leaf().parent as *const LeafNode<K, V>;\n+        if let Some(non_zero) = NonNull::new(parent_as_leaf as *mut _) {\n             Ok(Handle {\n                 node: NodeRef {\n                     height: self.height + 1,\n@@ -498,7 +496,7 @@ impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n \n     fn as_leaf_mut(&mut self) -> &mut LeafNode<K, V> {\n         unsafe {\n-            &mut *(self.node.get() as *mut LeafNode<K, V>)\n+            self.node.as_mut()\n         }\n     }\n \n@@ -1241,12 +1239,12 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n                 }\n \n                 Heap.dealloc(\n-                    right_node.node.get() as *mut u8,\n+                    right_node.node.as_ptr() as *mut u8,\n                     Layout::new::<InternalNode<K, V>>(),\n                 );\n             } else {\n                 Heap.dealloc(\n-                    right_node.node.get() as *mut u8,\n+                    right_node.node.as_ptr() as *mut u8,\n                     Layout::new::<LeafNode<K, V>>(),\n                 );\n             }"}, {"sha": "c8ee166fee3e9240383a7ff37c77a0c2e15be536", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -146,13 +146,12 @@\n //!\n //! ```\n //! #![feature(core_intrinsics)]\n-//! #![feature(shared)]\n //! use std::cell::Cell;\n-//! use std::ptr::Shared;\n+//! use std::ptr::NonNull;\n //! use std::intrinsics::abort;\n //!\n //! struct Rc<T: ?Sized> {\n-//!     ptr: Shared<RcBox<T>>\n+//!     ptr: NonNull<RcBox<T>>\n //! }\n //!\n //! struct RcBox<T: ?Sized> {"}, {"sha": "427765aed208acc871d6a64693442c8f757d2a70", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -105,10 +105,6 @@ struct Binary;\n #[derive(Clone, PartialEq)]\n struct Octal;\n \n-/// A decimal (base 10) radix\n-#[derive(Clone, PartialEq)]\n-struct Decimal;\n-\n /// A hexadecimal (base 16) radix, formatted with lower-case characters\n #[derive(Clone, PartialEq)]\n struct LowerHex;\n@@ -134,7 +130,6 @@ macro_rules! radix {\n \n radix! { Binary,    2, \"0b\", x @  0 ...  1 => b'0' + x }\n radix! { Octal,     8, \"0o\", x @  0 ...  7 => b'0' + x }\n-radix! { Decimal,  10, \"\",   x @  0 ...  9 => b'0' + x }\n radix! { LowerHex, 16, \"0x\", x @  0 ...  9 => b'0' + x,\n                              x @ 10 ... 15 => b'a' + (x - 10) }\n radix! { UpperHex, 16, \"0x\", x @  0 ...  9 => b'0' + x,"}, {"sha": "19836d98844e292d7be235601e344664faac182f", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -9,9 +9,10 @@\n // except according to those terms.\n \n //! Exposes the NonZero lang item which provides optimization hints.\n-#![unstable(feature = \"nonzero\",\n-            reason = \"needs an RFC to flesh out the design\",\n-            issue = \"27730\")]\n+#![unstable(feature = \"nonzero\", reason = \"deprecated\", issue = \"49137\")]\n+#![rustc_deprecated(reason = \"use `std::ptr::NonNull` or `std::num::NonZero*` instead\",\n+                    since = \"1.26.0\")]\n+#![allow(deprecated)]\n \n use ops::CoerceUnsized;\n \n@@ -62,14 +63,11 @@ impl_zeroable_for_integer_types! {\n /// NULL or 0 that might allow certain optimizations.\n #[lang = \"non_zero\"]\n #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Debug, Hash)]\n-pub struct NonZero<T: Zeroable>(T);\n+pub struct NonZero<T: Zeroable>(pub(crate) T);\n \n impl<T: Zeroable> NonZero<T> {\n     /// Creates an instance of NonZero with the provided value.\n     /// You must indeed ensure that the value is actually \"non-zero\".\n-    #[unstable(feature = \"nonzero\",\n-               reason = \"needs an RFC to flesh out the design\",\n-               issue = \"27730\")]\n     #[inline]\n     pub const unsafe fn new_unchecked(inner: T) -> Self {\n         NonZero(inner)"}, {"sha": "18e0aa453d8df2c71674be7bf554a4ebb5bd7c48", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -15,9 +15,98 @@\n use convert::TryFrom;\n use fmt;\n use intrinsics;\n+#[allow(deprecated)] use nonzero::NonZero;\n use ops;\n use str::FromStr;\n \n+macro_rules! impl_nonzero_fmt {\n+    ( #[$stability: meta] ( $( $Trait: ident ),+ ) for $Ty: ident ) => {\n+        $(\n+            #[$stability]\n+            impl fmt::$Trait for $Ty {\n+                #[inline]\n+                fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+                    self.get().fmt(f)\n+                }\n+            }\n+        )+\n+    }\n+}\n+\n+macro_rules! nonzero_integers {\n+    ( #[$stability: meta] $( $Ty: ident($Int: ty); )+ ) => {\n+        $(\n+            /// An integer that is known not to equal zero.\n+            ///\n+            /// This may enable some memory layout optimization such as:\n+            ///\n+            /// ```rust\n+            /// # #![feature(nonzero)]\n+            /// use std::mem::size_of;\n+            /// assert_eq!(size_of::<Option<std::num::NonZeroU32>>(), size_of::<u32>());\n+            /// ```\n+            #[$stability]\n+            #[allow(deprecated)]\n+            #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n+            pub struct $Ty(NonZero<$Int>);\n+\n+            #[allow(deprecated)]\n+            impl $Ty {\n+                /// Create a non-zero without checking the value.\n+                ///\n+                /// # Safety\n+                ///\n+                /// The value must not be zero.\n+                #[$stability]\n+                #[inline]\n+                pub const unsafe fn new_unchecked(n: $Int) -> Self {\n+                    $Ty(NonZero(n))\n+                }\n+\n+                /// Create a non-zero if the given value is not zero.\n+                #[$stability]\n+                #[inline]\n+                pub fn new(n: $Int) -> Option<Self> {\n+                    if n != 0 {\n+                        Some($Ty(NonZero(n)))\n+                    } else {\n+                        None\n+                    }\n+                }\n+\n+                /// Returns the value as a primitive type.\n+                #[$stability]\n+                #[inline]\n+                pub fn get(self) -> $Int {\n+                    self.0 .0\n+                }\n+\n+            }\n+\n+            impl_nonzero_fmt! {\n+                #[$stability]\n+                (Debug, Display, Binary, Octal, LowerHex, UpperHex) for $Ty\n+            }\n+        )+\n+    }\n+}\n+\n+nonzero_integers! {\n+    #[unstable(feature = \"nonzero\", issue = \"49137\")]\n+    NonZeroU8(u8); NonZeroI8(i8);\n+    NonZeroU16(u16); NonZeroI16(i16);\n+    NonZeroU32(u32); NonZeroI32(i32);\n+    NonZeroU64(u64); NonZeroI64(i64);\n+    NonZeroUsize(usize); NonZeroIsize(isize);\n+}\n+\n+nonzero_integers! {\n+    // Change this to `#[unstable(feature = \"i128\", issue = \"35118\")]`\n+    // if other NonZero* integer types are stabilizied before 128-bit integers\n+    #[unstable(feature = \"nonzero\", issue = \"49137\")]\n+    NonZeroU128(u128); NonZeroI128(i128);\n+}\n+\n /// Provides intentionally-wrapped arithmetic on `T`.\n ///\n /// Operations like `+` on `u32` values is intended to never overflow,"}, {"sha": "cebd5989e96cd2a78c187a3aa048fd550b0e727a", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -23,7 +23,7 @@ use fmt;\n use hash;\n use marker::{PhantomData, Unsize};\n use mem;\n-use nonzero::NonZero;\n+#[allow(deprecated)] use nonzero::NonZero;\n \n use cmp::Ordering::{self, Less, Equal, Greater};\n \n@@ -2285,6 +2285,7 @@ impl<T: ?Sized> PartialOrd for *mut T {\n #[unstable(feature = \"ptr_internals\", issue = \"0\",\n            reason = \"use NonNull instead and consider PhantomData<T> \\\n                      (if you also use #[may_dangle]), Send, and/or Sync\")]\n+#[allow(deprecated)]\n pub struct Unique<T: ?Sized> {\n     pointer: NonZero<*const T>,\n     // NOTE: this marker has no consequences for variance, but is necessary\n@@ -2332,24 +2333,29 @@ impl<T: Sized> Unique<T> {\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n+#[allow(deprecated)]\n impl<T: ?Sized> Unique<T> {\n     /// Creates a new `Unique`.\n     ///\n     /// # Safety\n     ///\n     /// `ptr` must be non-null.\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n-        Unique { pointer: NonZero::new_unchecked(ptr), _marker: PhantomData }\n+        Unique { pointer: NonZero(ptr as _), _marker: PhantomData }\n     }\n \n     /// Creates a new `Unique` if `ptr` is non-null.\n     pub fn new(ptr: *mut T) -> Option<Self> {\n-        NonZero::new(ptr as *const T).map(|nz| Unique { pointer: nz, _marker: PhantomData })\n+        if !ptr.is_null() {\n+            Some(Unique { pointer: NonZero(ptr as _), _marker: PhantomData })\n+        } else {\n+            None\n+        }\n     }\n \n     /// Acquires the underlying `*mut` pointer.\n     pub fn as_ptr(self) -> *mut T {\n-        self.pointer.get() as *mut T\n+        self.pointer.0 as *mut T\n     }\n \n     /// Dereferences the content.\n@@ -2392,16 +2398,18 @@ impl<T: ?Sized> fmt::Pointer for Unique<T> {\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n+#[allow(deprecated)]\n impl<'a, T: ?Sized> From<&'a mut T> for Unique<T> {\n     fn from(reference: &'a mut T) -> Self {\n-        Unique { pointer: NonZero::from(reference), _marker: PhantomData }\n+        Unique { pointer: NonZero(reference as _), _marker: PhantomData }\n     }\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n+#[allow(deprecated)]\n impl<'a, T: ?Sized> From<&'a T> for Unique<T> {\n     fn from(reference: &'a T) -> Self {\n-        Unique { pointer: NonZero::from(reference), _marker: PhantomData }\n+        Unique { pointer: NonZero(reference as _), _marker: PhantomData }\n     }\n }\n \n@@ -2412,11 +2420,6 @@ impl<'a, T: ?Sized> From<NonNull<T>> for Unique<T> {\n     }\n }\n \n-/// Previous name of `NonNull`.\n-#[rustc_deprecated(since = \"1.25.0\", reason = \"renamed to `NonNull`\")]\n-#[unstable(feature = \"shared\", issue = \"27730\")]\n-pub type Shared<T> = NonNull<T>;\n-\n /// `*mut T` but non-zero and covariant.\n ///\n /// This is often the correct thing to use when building data structures using\n@@ -2436,7 +2439,7 @@ pub type Shared<T> = NonNull<T>;\n /// provide a public API that follows the normal shared XOR mutable rules of Rust.\n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n pub struct NonNull<T: ?Sized> {\n-    pointer: NonZero<*const T>,\n+    #[allow(deprecated)] pointer: NonZero<*const T>,\n }\n \n /// `NonNull` pointers are not `Send` because the data they reference may be aliased.\n@@ -2463,6 +2466,7 @@ impl<T: Sized> NonNull<T> {\n     }\n }\n \n+#[allow(deprecated)]\n impl<T: ?Sized> NonNull<T> {\n     /// Creates a new `NonNull`.\n     ///\n@@ -2471,19 +2475,23 @@ impl<T: ?Sized> NonNull<T> {\n     /// `ptr` must be non-null.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n-        NonNull { pointer: NonZero::new_unchecked(ptr) }\n+        NonNull { pointer: NonZero(ptr as _) }\n     }\n \n     /// Creates a new `NonNull` if `ptr` is non-null.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub fn new(ptr: *mut T) -> Option<Self> {\n-        NonZero::new(ptr as *const T).map(|nz| NonNull { pointer: nz })\n+        if !ptr.is_null() {\n+            Some(NonNull { pointer: NonZero(ptr as _) })\n+        } else {\n+            None\n+        }\n     }\n \n     /// Acquires the underlying `*mut` pointer.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub fn as_ptr(self) -> *mut T {\n-        self.pointer.get() as *mut T\n+        self.pointer.0 as *mut T\n     }\n \n     /// Dereferences the content.\n@@ -2581,15 +2589,17 @@ impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+#[allow(deprecated)]\n impl<'a, T: ?Sized> From<&'a mut T> for NonNull<T> {\n     fn from(reference: &'a mut T) -> Self {\n-        NonNull { pointer: NonZero::from(reference) }\n+        NonNull { pointer: NonZero(reference as _) }\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+#[allow(deprecated)]\n impl<'a, T: ?Sized> From<&'a T> for NonNull<T> {\n     fn from(reference: &'a T) -> Self {\n-        NonNull { pointer: NonZero::from(reference) }\n+        NonNull { pointer: NonZero(reference as _) }\n     }\n }"}, {"sha": "8d39298bac3d1b1b3cd13210987fac5e94a1bf71", "filename": "src/libcore/tests/nonzero.rs", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnonzero.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -8,36 +8,36 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::nonzero::NonZero;\n+use core::num::NonZeroU32;\n use core::option::Option;\n use core::option::Option::{Some, None};\n use std::mem::size_of;\n \n #[test]\n fn test_create_nonzero_instance() {\n     let _a = unsafe {\n-        NonZero::new_unchecked(21)\n+        NonZeroU32::new_unchecked(21)\n     };\n }\n \n #[test]\n fn test_size_nonzero_in_option() {\n-    assert_eq!(size_of::<NonZero<u32>>(), size_of::<Option<NonZero<u32>>>());\n+    assert_eq!(size_of::<NonZeroU32>(), size_of::<Option<NonZeroU32>>());\n }\n \n #[test]\n fn test_match_on_nonzero_option() {\n     let a = Some(unsafe {\n-        NonZero::new_unchecked(42)\n+        NonZeroU32::new_unchecked(42)\n     });\n     match a {\n         Some(val) => assert_eq!(val.get(), 42),\n-        None => panic!(\"unexpected None while matching on Some(NonZero(_))\")\n+        None => panic!(\"unexpected None while matching on Some(NonZeroU32(_))\")\n     }\n \n-    match unsafe { Some(NonZero::new_unchecked(43)) } {\n+    match unsafe { Some(NonZeroU32::new_unchecked(43)) } {\n         Some(val) => assert_eq!(val.get(), 43),\n-        None => panic!(\"unexpected None while matching on Some(NonZero(_))\")\n+        None => panic!(\"unexpected None while matching on Some(NonZeroU32(_))\")\n     }\n }\n \n@@ -98,3 +98,26 @@ fn test_match_option_string() {\n         None => panic!(\"unexpected None while matching on Some(String { ... })\")\n     }\n }\n+\n+mod atom {\n+    use core::num::NonZeroU32;\n+\n+    #[derive(PartialEq, Eq)]\n+    pub struct Atom {\n+        index: NonZeroU32, // private\n+    }\n+    pub const FOO_ATOM: Atom = Atom { index: unsafe { NonZeroU32::new_unchecked(7) } };\n+}\n+\n+macro_rules! atom {\n+    (\"foo\") => { atom::FOO_ATOM }\n+}\n+\n+#[test]\n+fn test_match_nonzero_const_pattern() {\n+    match atom!(\"foo\") {\n+        // Using as a pattern is supported by the compiler:\n+        atom!(\"foo\") => {}\n+        _ => panic!(\"Expected the const item as a pattern to match.\")\n+    }\n+}"}, {"sha": "d6e679bad48b75b5ff751bfff86c9f3467f5f71c", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -681,7 +681,8 @@ impl TokenTree {\n             Dollar => op!('$'),\n             Question => op!('?'),\n \n-            Ident(ident) | Lifetime(ident) => TokenNode::Term(Term(ident.name)),\n+            Ident(ident, false) | Lifetime(ident) => TokenNode::Term(Term(ident.name)),\n+            Ident(ident, true) => TokenNode::Term(Term(Symbol::intern(&format!(\"r#{}\", ident)))),\n             Literal(..) | DocComment(..) => TokenNode::Literal(self::Literal(token)),\n \n             Interpolated(_) => {\n@@ -713,8 +714,14 @@ impl TokenTree {\n             },\n             TokenNode::Term(symbol) => {\n                 let ident = ast::Ident { name: symbol.0, ctxt: self.span.0.ctxt() };\n+                let sym_str = symbol.0.as_str();\n                 let token =\n-                    if symbol.0.as_str().starts_with(\"'\") { Lifetime(ident) } else { Ident(ident) };\n+                    if sym_str.starts_with(\"'\") { Lifetime(ident) }\n+                    else if sym_str.starts_with(\"r#\") {\n+                        let name = Symbol::intern(&sym_str[2..]);\n+                        let ident = ast::Ident { name, ctxt: self.span.0.ctxt() };\n+                        Ident(ident, true)\n+                    } else { Ident(ident, false) };\n                 return TokenTree::Token(self.span.0, token).into();\n             }\n             TokenNode::Literal(token) => return TokenTree::Token(self.span.0, token.0).into(),"}, {"sha": "8bcec79d99f17be3ce33a24d9c61309347bd4bbb", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -593,6 +593,7 @@ define_dep_nodes!( <'tcx>\n     [] ImplementationsOfTrait { krate: CrateNum, trait_id: DefId },\n     [] AllTraitImplementations(CrateNum),\n \n+    [] DllimportForeignItems(CrateNum),\n     [] IsDllimportForeignItem(DefId),\n     [] IsStaticallyIncludedForeignItem(DefId),\n     [] NativeLibraryKind(DefId),\n@@ -650,9 +651,13 @@ define_dep_nodes!( <'tcx>\n \n     [] GetSymbolExportLevel(DefId),\n \n+    [] WasmCustomSections(CrateNum),\n+\n     [input] Features,\n \n     [] ProgramClausesFor(DefId),\n+    [] WasmImportModuleMap(CrateNum),\n+    [] ForeignModules(CrateNum),\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "9b2647ad4db2bce2a39eab7cd97d9d4f9a2c9ca1", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -25,6 +25,8 @@ enum Target {\n     Struct,\n     Union,\n     Enum,\n+    Const,\n+    ForeignMod,\n     Other,\n }\n \n@@ -35,6 +37,8 @@ impl Target {\n             hir::ItemStruct(..) => Target::Struct,\n             hir::ItemUnion(..) => Target::Union,\n             hir::ItemEnum(..) => Target::Enum,\n+            hir::ItemConst(..) => Target::Const,\n+            hir::ItemForeignMod(..) => Target::ForeignMod,\n             _ => Target::Other,\n         }\n     }\n@@ -55,14 +59,42 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n                 .emit();\n         }\n \n+        let mut has_wasm_import_module = false;\n         for attr in &item.attrs {\n-            if let Some(name) = attr.name() {\n-                if name == \"inline\" {\n-                    self.check_inline(attr, item, target)\n+            if attr.check_name(\"inline\") {\n+                self.check_inline(attr, item, target)\n+            } else if attr.check_name(\"wasm_import_module\") {\n+                has_wasm_import_module = true;\n+                if attr.value_str().is_none() {\n+                    self.tcx.sess.span_err(attr.span, \"\\\n+                        must be of the form #[wasm_import_module = \\\"...\\\"]\");\n+                }\n+                if target != Target::ForeignMod {\n+                    self.tcx.sess.span_err(attr.span, \"\\\n+                        must only be attached to foreign modules\");\n+                }\n+            } else if attr.check_name(\"wasm_custom_section\") {\n+                if target != Target::Const {\n+                    self.tcx.sess.span_err(attr.span, \"only allowed on consts\");\n+                }\n+\n+                if attr.value_str().is_none() {\n+                    self.tcx.sess.span_err(attr.span, \"must be of the form \\\n+                        #[wasm_custom_section = \\\"foo\\\"]\");\n                 }\n             }\n         }\n \n+        if target == Target::ForeignMod &&\n+            !has_wasm_import_module &&\n+            self.tcx.sess.target.target.arch == \"wasm32\" &&\n+            false // FIXME: eventually enable this warning when stable\n+        {\n+            self.tcx.sess.span_warn(item.span, \"\\\n+                must have a #[wasm_import_module = \\\"...\\\"] attribute, this \\\n+                will become a hard error before too long\");\n+        }\n+\n         self.check_repr(item, target);\n     }\n "}, {"sha": "12b472a7285446f0c1e306137d27540d3d005867", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -395,6 +395,15 @@ pub enum TyParamBound {\n     RegionTyParamBound(Lifetime),\n }\n \n+impl TyParamBound {\n+    pub fn span(&self) -> Span {\n+        match self {\n+            &TraitTyParamBound(ref t, ..) => t.span,\n+            &RegionTyParamBound(ref l) => l.span,\n+        }\n+    }\n+}\n+\n /// A modifier on a bound, currently this is only used for `?Sized`, where the\n /// modifier is `Maybe`. Negative bounds should also be handled here.\n #[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n@@ -571,6 +580,16 @@ pub enum WherePredicate {\n     EqPredicate(WhereEqPredicate),\n }\n \n+impl WherePredicate {\n+    pub fn span(&self) -> Span {\n+        match self {\n+            &WherePredicate::BoundPredicate(ref p) => p.span,\n+            &WherePredicate::RegionPredicate(ref p) => p.span,\n+            &WherePredicate::EqPredicate(ref p) => p.span,\n+        }\n+    }\n+}\n+\n /// A type bound, eg `for<'c> Foo: Send+Clone+'c`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct WhereBoundPredicate {"}, {"sha": "0071850e1052b5a77292d68d50e34c1a64ca6e89", "filename": "src/librustc/ich/impls_cstore.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fich%2Fimpls_cstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fich%2Fimpls_cstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_cstore.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -33,7 +33,12 @@ impl_stable_hash_for!(struct middle::cstore::NativeLibrary {\n     kind,\n     name,\n     cfg,\n-    foreign_items\n+    foreign_module\n+});\n+\n+impl_stable_hash_for!(struct middle::cstore::ForeignModule {\n+    foreign_items,\n+    def_id\n });\n \n impl_stable_hash_for!(enum middle::cstore::LinkagePreference {"}, {"sha": "0b037964981c936ff6604ecec4875af797b3d228", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -318,7 +318,10 @@ fn hash_token<'a, 'gcx, W: StableHasherResult>(\n             opt_name.hash_stable(hcx, hasher);\n         }\n \n-        token::Token::Ident(ident) |\n+        token::Token::Ident(ident, is_raw) => {\n+            ident.name.hash_stable(hcx, hasher);\n+            is_raw.hash_stable(hcx, hasher);\n+        }\n         token::Token::Lifetime(ident) => ident.name.hash_stable(hcx, hasher),\n \n         token::Token::Interpolated(_) => {"}, {"sha": "3c833251f72a78c410b5ab735ced0fb569791bc9", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -41,7 +41,7 @@ use util::nodemap::FxHashMap;\n use std::default::Default as StdDefault;\n use std::cell::{Ref, RefCell};\n use syntax::ast;\n-use syntax::epoch;\n+use syntax::edition;\n use syntax_pos::{MultiSpan, Span};\n use errors::DiagnosticBuilder;\n use hir;\n@@ -103,9 +103,9 @@ pub struct FutureIncompatibleInfo {\n     pub id: LintId,\n     /// e.g., a URL for an issue/PR/RFC or error code\n     pub reference: &'static str,\n-    /// If this is an epoch fixing lint, the epoch in which\n+    /// If this is an edition fixing lint, the edition in which\n     /// this lint becomes obsolete\n-    pub epoch: Option<epoch::Epoch>,\n+    pub edition: Option<edition::Edition>,\n }\n \n /// The target of the `by_name` map, which accounts for renaming/deprecation.\n@@ -201,11 +201,11 @@ impl LintStore {\n                                         sess: Option<&Session>,\n                                         lints: Vec<FutureIncompatibleInfo>) {\n \n-        for epoch in epoch::ALL_EPOCHS {\n-            let lints = lints.iter().filter(|f| f.epoch == Some(*epoch)).map(|f| f.id)\n+        for edition in edition::ALL_EDITIONS {\n+            let lints = lints.iter().filter(|f| f.edition == Some(*edition)).map(|f| f.id)\n                              .collect::<Vec<_>>();\n             if !lints.is_empty() {\n-                self.register_group(sess, false, epoch.lint_name(), lints)\n+                self.register_group(sess, false, edition.lint_name(), lints)\n             }\n         }\n "}, {"sha": "cd038d067a1fd950f7565d1ceefb6e5d08fbd39e", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -42,7 +42,7 @@ use session::{Session, DiagnosticMessageId};\n use std::hash;\n use syntax::ast;\n use syntax::codemap::MultiSpan;\n-use syntax::epoch::Epoch;\n+use syntax::edition::Edition;\n use syntax::symbol::Symbol;\n use syntax::visit as ast_visit;\n use syntax_pos::Span;\n@@ -77,8 +77,8 @@ pub struct Lint {\n     /// e.g. \"imports that are never used\"\n     pub desc: &'static str,\n \n-    /// Deny lint after this epoch\n-    pub epoch_deny: Option<Epoch>,\n+    /// Deny lint after this edition\n+    pub edition_deny: Option<Edition>,\n }\n \n impl Lint {\n@@ -88,8 +88,8 @@ impl Lint {\n     }\n \n     pub fn default_level(&self, session: &Session) -> Level {\n-        if let Some(epoch_deny) = self.epoch_deny {\n-            if session.epoch() >= epoch_deny {\n+        if let Some(edition_deny) = self.edition_deny {\n+            if session.edition() >= edition_deny {\n                 return Level::Deny\n             }\n         }\n@@ -100,20 +100,20 @@ impl Lint {\n /// Declare a static item of type `&'static Lint`.\n #[macro_export]\n macro_rules! declare_lint {\n-    ($vis: vis $NAME: ident, $Level: ident, $desc: expr, $epoch: expr) => (\n+    ($vis: vis $NAME: ident, $Level: ident, $desc: expr, $edition: expr) => (\n         $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n             name: stringify!($NAME),\n             default_level: $crate::lint::$Level,\n             desc: $desc,\n-            epoch_deny: Some($epoch)\n+            edition_deny: Some($edition)\n         };\n     );\n     ($vis: vis $NAME: ident, $Level: ident, $desc: expr) => (\n         $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n             name: stringify!($NAME),\n             default_level: $crate::lint::$Level,\n             desc: $desc,\n-            epoch_deny: None,\n+            edition_deny: None,\n         };\n     );\n }\n@@ -499,8 +499,8 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n     // Check for future incompatibility lints and issue a stronger warning.\n     let lints = sess.lint_store.borrow();\n     if let Some(future_incompatible) = lints.future_incompatible(LintId::of(lint)) {\n-        let future = if let Some(epoch) = future_incompatible.epoch {\n-            format!(\"the {} epoch\", epoch)\n+        let future = if let Some(edition) = future_incompatible.edition {\n+            format!(\"the {} edition\", edition)\n         } else {\n             \"a future release\".to_owned()\n         };"}, {"sha": "19a7576b7ceac4ed1abd99d739a9c89751ebb46b", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -19,7 +19,7 @@ use graphviz::IntoCow;\n use syntax_pos::Span;\n \n use std::borrow::Cow;\n-use std::rc::Rc;\n+use rustc_data_structures::sync::Lrc;\n \n pub type EvalResult<'tcx> = Result<&'tcx ty::Const<'tcx>, ConstEvalErr<'tcx>>;\n \n@@ -52,7 +52,7 @@ impl<'tcx> ConstVal<'tcx> {\n #[derive(Clone, Debug)]\n pub struct ConstEvalErr<'tcx> {\n     pub span: Span,\n-    pub kind: Rc<ErrKind<'tcx>>,\n+    pub kind: Lrc<ErrKind<'tcx>>,\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "add9b621596b63219db2d406dab8020c0a4bb13a", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -132,7 +132,13 @@ pub struct NativeLibrary {\n     pub kind: NativeLibraryKind,\n     pub name: Symbol,\n     pub cfg: Option<ast::MetaItem>,\n+    pub foreign_module: Option<DefId>,\n+}\n+\n+#[derive(Clone, Hash, RustcEncodable, RustcDecodable)]\n+pub struct ForeignModule {\n     pub foreign_items: Vec<DefId>,\n+    pub def_id: DefId,\n }\n \n pub enum LoadedMacro {"}, {"sha": "abd52624c30d4c6b96e7d4083c764ccdd7b28bcd", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -318,6 +318,11 @@ fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt,\n         return true;\n     }\n \n+    // These constants are special for wasm\n+    if attr::contains_name(attrs, \"wasm_custom_section\") {\n+        return true;\n+    }\n+\n     tcx.lint_level_at_node(lint::builtin::DEAD_CODE, id).0 == lint::Allow\n }\n "}, {"sha": "4ba634f8b25cd26953e9eda384c8a120450dd55d", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -28,7 +28,7 @@ use middle::cstore;\n \n use syntax::ast::{self, IntTy, UintTy};\n use syntax::codemap::{FileName, FilePathMapping};\n-use syntax::epoch::Epoch;\n+use syntax::edition::Edition;\n use syntax::parse::token;\n use syntax::parse;\n use syntax::symbol::Symbol;\n@@ -771,7 +771,7 @@ macro_rules! options {\n             Some(\"`string` or `string=string`\");\n         pub const parse_lto: Option<&'static str> =\n             Some(\"one of `thin`, `fat`, or omitted\");\n-        pub const parse_epoch: Option<&'static str> =\n+        pub const parse_edition: Option<&'static str> =\n             Some(\"one of: `2015`, `2018`\");\n     }\n \n@@ -780,7 +780,7 @@ macro_rules! options {\n         use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer, Lto};\n         use rustc_back::{LinkerFlavor, PanicStrategy, RelroLevel};\n         use std::path::PathBuf;\n-        use syntax::epoch::Epoch;\n+        use syntax::edition::Edition;\n \n         $(\n             pub fn $opt(cg: &mut $struct_name, v: Option<&str>) -> bool {\n@@ -983,11 +983,11 @@ macro_rules! options {\n             true\n         }\n \n-        fn parse_epoch(slot: &mut Epoch, v: Option<&str>) -> bool {\n+        fn parse_edition(slot: &mut Edition, v: Option<&str>) -> bool {\n             match v {\n                 Some(s) => {\n-                    let epoch = s.parse();\n-                    if let Ok(parsed) = epoch {\n+                    let edition = s.parse();\n+                    if let Ok(parsed) = edition {\n                         *slot = parsed;\n                         true\n                     } else {\n@@ -1280,10 +1280,10 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         `everybody_loops` (all function bodies replaced with `loop {}`),\n         `hir` (the HIR), `hir,identified`, or\n         `hir,typed` (HIR with types for each node).\"),\n-    epoch: Epoch = (Epoch::Epoch2015, parse_epoch, [TRACKED],\n-        \"The epoch to build Rust with. Newer epochs may include features\n-         that require breaking changes. The default epoch is 2015 (the first\n-         epoch). Crates compiled with different epochs can be linked together.\"),\n+    edition: Edition = (Edition::Edition2015, parse_edition, [TRACKED],\n+        \"The edition to build Rust with. Newer editions may include features\n+         that require breaking changes. The default edition is 2015 (the first\n+         edition). Crates compiled with different editions can be linked together.\"),\n     run_dsymutil: Option<bool> = (None, parse_opt_bool, [TRACKED],\n           \"run `dsymutil` and delete intermediate object files\"),\n     ui_testing: bool = (false, parse_bool, [UNTRACKED],\n@@ -2258,7 +2258,7 @@ mod dep_tracking {\n     use std::hash::Hash;\n     use std::path::PathBuf;\n     use std::collections::hash_map::DefaultHasher;\n-    use super::{CrateType, DebugInfoLevel, Epoch, ErrorOutputType, Lto, OptLevel, OutputTypes,\n+    use super::{CrateType, DebugInfoLevel, Edition, ErrorOutputType, Lto, OptLevel, OutputTypes,\n                 Passes, Sanitizer};\n     use syntax::feature_gate::UnstableFeatures;\n     use rustc_back::{PanicStrategy, RelroLevel};\n@@ -2320,7 +2320,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(cstore::NativeLibraryKind);\n     impl_dep_tracking_hash_via_hash!(Sanitizer);\n     impl_dep_tracking_hash_via_hash!(Option<Sanitizer>);\n-    impl_dep_tracking_hash_via_hash!(Epoch);\n+    impl_dep_tracking_hash_via_hash!(Edition);\n \n     impl_dep_tracking_hash_for_sortable_vec_of!(String);\n     impl_dep_tracking_hash_for_sortable_vec_of!(PathBuf);"}, {"sha": "556255e06ed008a9b4564ab09701d5d153fc863f", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -31,7 +31,7 @@ use rustc_data_structures::sync::{Lrc, Lock};\n use syntax::ast::NodeId;\n use errors::{self, DiagnosticBuilder, DiagnosticId};\n use errors::emitter::{Emitter, EmitterWriter};\n-use syntax::epoch::Epoch;\n+use syntax::edition::Edition;\n use syntax::json::JsonEmitter;\n use syntax::feature_gate;\n use syntax::symbol::Symbol;\n@@ -976,13 +976,13 @@ impl Session {\n         self.opts.debugging_opts.teach && !self.parse_sess.span_diagnostic.code_emitted(code)\n     }\n \n-    /// Are we allowed to use features from the Rust 2018 epoch?\n+    /// Are we allowed to use features from the Rust 2018 edition?\n     pub fn rust_2018(&self) -> bool {\n-        self.opts.debugging_opts.epoch >= Epoch::Epoch2018\n+        self.opts.debugging_opts.edition >= Edition::Edition2018\n     }\n \n-    pub fn epoch(&self) -> Epoch {\n-        self.opts.debugging_opts.epoch\n+    pub fn edition(&self) -> Edition {\n+        self.opts.debugging_opts.edition\n     }\n }\n "}, {"sha": "79d5cf7935941bd99f384bca1ef96bdd096583d9", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -443,10 +443,20 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         } else {\n             4\n         };\n+\n+        let normalize = |candidate| self.tcx.global_tcx().infer_ctxt().enter(|ref infcx| {\n+            let normalized = infcx\n+                .at(&ObligationCause::dummy(), ty::ParamEnv::empty())\n+                .normalize(candidate)\n+                .ok();\n+            match normalized {\n+                Some(normalized) => format!(\"\\n  {:?}\", normalized.value),\n+                None => format!(\"\\n  {:?}\", candidate),\n+            }\n+        });\n+\n         err.help(&format!(\"the following implementations were found:{}{}\",\n-                          &impl_candidates[0..end].iter().map(|candidate| {\n-                              format!(\"\\n  {:?}\", candidate)\n-                          }).collect::<String>(),\n+                          &impl_candidates[0..end].iter().map(normalize).collect::<String>(),\n                           if impl_candidates.len() > 5 {\n                               format!(\"\\nand {} others\", impl_candidates.len() - 4)\n                           } else {"}, {"sha": "af1d2c77c28a867bf40460843ebb964cffef6772", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -15,7 +15,7 @@ use std::iter::FromIterator;\n use traits::query::CanonicalTyGoal;\n use ty::{self, Ty, TyCtxt};\n use ty::subst::Kind;\n-use std::rc::Rc;\n+use rustc_data_structures::sync::Lrc;\n \n impl<'cx, 'gcx, 'tcx> At<'cx, 'gcx, 'tcx> {\n     /// Given a type `ty` of some value being dropped, computes a set\n@@ -183,13 +183,13 @@ impl_stable_hash_for!(struct DropckOutlivesResult<'tcx> {\n \n impl<'gcx: 'tcx, 'tcx> Canonicalize<'gcx, 'tcx> for QueryResult<'tcx, DropckOutlivesResult<'tcx>> {\n     // we ought to intern this, but I'm too lazy just now\n-    type Canonicalized = Rc<Canonical<'gcx, QueryResult<'gcx, DropckOutlivesResult<'gcx>>>>;\n+    type Canonicalized = Lrc<Canonical<'gcx, QueryResult<'gcx, DropckOutlivesResult<'gcx>>>>;\n \n     fn intern(\n         _gcx: TyCtxt<'_, 'gcx, 'gcx>,\n         value: Canonical<'gcx, Self::Lifted>,\n     ) -> Self::Canonicalized {\n-        Rc::new(value)\n+        Lrc::new(value)\n     }\n }\n "}, {"sha": "63f50cff4c2ad2c01a37626d52bfe00d9a5e8b25", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -17,7 +17,7 @@ use infer::at::At;\n use infer::canonical::{Canonical, Canonicalize, QueryResult};\n use middle::const_val::ConstVal;\n use mir::interpret::GlobalId;\n-use std::rc::Rc;\n+use rustc_data_structures::sync::Lrc;\n use traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n use traits::query::CanonicalProjectionGoal;\n use traits::project::Normalized;\n@@ -259,13 +259,13 @@ impl<'gcx: 'tcx, 'tcx> Canonicalize<'gcx, 'tcx> for ty::ParamEnvAnd<'tcx, ty::Pr\n \n impl<'gcx: 'tcx, 'tcx> Canonicalize<'gcx, 'tcx> for QueryResult<'tcx, NormalizationResult<'tcx>> {\n     // we ought to intern this, but I'm too lazy just now\n-    type Canonicalized = Rc<Canonical<'gcx, QueryResult<'gcx, NormalizationResult<'gcx>>>>;\n+    type Canonicalized = Lrc<Canonical<'gcx, QueryResult<'gcx, NormalizationResult<'gcx>>>>;\n \n     fn intern(\n         _gcx: TyCtxt<'_, 'gcx, 'gcx>,\n         value: Canonical<'gcx, Self::Lifted>,\n     ) -> Self::Canonicalized {\n-        Rc::new(value)\n+        Lrc::new(value)\n     }\n }\n "}, {"sha": "966c96e594fc4d1781f927b0cbb713a222dc58c6", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -161,12 +161,12 @@ impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n                  -> Ty<'tcx> {\n         let ty = {\n             let mut interner = self.type_.borrow_mut();\n-            let global_interner = global_interners.map(|interners| {\n-                interners.type_.borrow_mut()\n-            });\n             if let Some(&Interned(ty)) = interner.get(&st) {\n                 return ty;\n             }\n+            let global_interner = global_interners.map(|interners| {\n+                interners.type_.borrow_mut()\n+            });\n             if let Some(ref interner) = global_interner {\n                 if let Some(&Interned(ty)) = interner.get(&st) {\n                     return ty;\n@@ -1010,17 +1010,16 @@ impl<'tcx> InterpretInterner<'tcx> {\n     }\n }\n \n-impl<'tcx> GlobalCtxt<'tcx> {\n+impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// Get the global TyCtxt.\n-    pub fn global_tcx<'a>(&'a self) -> TyCtxt<'a, 'tcx, 'tcx> {\n+    #[inline]\n+    pub fn global_tcx(self) -> TyCtxt<'a, 'gcx, 'gcx> {\n         TyCtxt {\n-            gcx: self,\n-            interners: &self.global_interners\n+            gcx: self.gcx,\n+            interners: &self.gcx.global_interners,\n         }\n     }\n-}\n \n-impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn alloc_generics(self, generics: ty::Generics) -> &'gcx ty::Generics {\n         self.global_arenas.generics.alloc(generics)\n     }\n@@ -1081,12 +1080,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self,\n         alloc: interpret::Allocation,\n     ) -> &'gcx interpret::Allocation {\n-        if let Some(alloc) = self.interpret_interner.inner.borrow().allocs.get(&alloc) {\n+        let allocs = &mut self.interpret_interner.inner.borrow_mut().allocs;\n+        if let Some(alloc) = allocs.get(&alloc) {\n             return alloc;\n         }\n \n         let interned = self.global_arenas.const_allocs.alloc(alloc);\n-        if let Some(prev) = self.interpret_interner.inner.borrow_mut().allocs.replace(interned) {\n+        if let Some(prev) = allocs.replace(interned) {\n             bug!(\"Tried to overwrite interned Allocation: {:#?}\", prev)\n         }\n         interned\n@@ -1113,24 +1113,26 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn intern_stability(self, stab: attr::Stability) -> &'gcx attr::Stability {\n-        if let Some(st) = self.stability_interner.borrow().get(&stab) {\n+        let mut stability_interner = self.stability_interner.borrow_mut();\n+        if let Some(st) = stability_interner.get(&stab) {\n             return st;\n         }\n \n         let interned = self.global_interners.arena.alloc(stab);\n-        if let Some(prev) = self.stability_interner.borrow_mut().replace(interned) {\n+        if let Some(prev) = stability_interner.replace(interned) {\n             bug!(\"Tried to overwrite interned Stability: {:?}\", prev)\n         }\n         interned\n     }\n \n     pub fn intern_layout(self, layout: LayoutDetails) -> &'gcx LayoutDetails {\n-        if let Some(layout) = self.layout_interner.borrow().get(&layout) {\n+        let mut layout_interner = self.layout_interner.borrow_mut();\n+        if let Some(layout) = layout_interner.get(&layout) {\n             return layout;\n         }\n \n         let interned = self.global_arenas.layout.alloc(layout);\n-        if let Some(prev) = self.layout_interner.borrow_mut().replace(interned) {\n+        if let Some(prev) = layout_interner.replace(interned) {\n             bug!(\"Tried to overwrite interned Layout: {:?}\", prev)\n         }\n         interned"}, {"sha": "7565e90df986f49d5d43297345b7434e5ea682f8", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -430,6 +430,12 @@ impl<'tcx> QueryDescription<'tcx> for queries::native_libraries<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::foreign_modules<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"looking up the foreign modules of a linked crate\")\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::plugin_registrar_fn<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"looking up the plugin registrar for a crate\")\n@@ -678,6 +684,12 @@ impl<'tcx> QueryDescription<'tcx> for queries::instance_def_size_estimate<'tcx>\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::wasm_custom_sections<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"custom wasm sections for a crate\")\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::generics_of<'tcx> {\n     #[inline]\n     fn cache_on_disk(def_id: Self::Key) -> bool {\n@@ -699,6 +711,18 @@ impl<'tcx> QueryDescription<'tcx> for queries::program_clauses_for<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::wasm_import_module_map<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"wasm import module map\")\n+    }\n+}\n+\n+impl<'tcx> QueryDescription<'tcx> for queries::dllimport_foreign_items<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"wasm import module map\")\n+    }\n+}\n+\n macro_rules! impl_disk_cacheable_query(\n     ($query_name:ident, |$key:tt| $cond:expr) => {\n         impl<'tcx> QueryDescription<'tcx> for queries::$query_name<'tcx> {"}, {"sha": "c16ad0d8ca1401d6536d9e6c81f836b191611540", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -18,7 +18,7 @@ use infer::canonical::{Canonical, QueryResult};\n use lint;\n use middle::borrowck::BorrowCheckResult;\n use middle::cstore::{ExternCrate, LinkagePreference, NativeLibrary,\n-                     ExternBodyNestedBodies};\n+                     ExternBodyNestedBodies, ForeignModule};\n use middle::cstore::{NativeLibraryKind, DepKind, CrateSource, ExternConstBody};\n use middle::privacy::AccessLevels;\n use middle::reachable::ReachableSet;\n@@ -320,6 +320,9 @@ define_maps! { <'tcx>\n \n \n     [] fn native_libraries: NativeLibraries(CrateNum) -> Lrc<Vec<NativeLibrary>>,\n+\n+    [] fn foreign_modules: ForeignModules(CrateNum) -> Lrc<Vec<ForeignModule>>,\n+\n     [] fn plugin_registrar_fn: PluginRegistrarFn(CrateNum) -> Option<DefId>,\n     [] fn derive_registrar_fn: DeriveRegistrarFn(CrateNum) -> Option<DefId>,\n     [] fn crate_disambiguator: CrateDisambiguator(CrateNum) -> CrateDisambiguator,\n@@ -331,6 +334,8 @@ define_maps! { <'tcx>\n     [] fn all_trait_implementations: AllTraitImplementations(CrateNum)\n         -> Lrc<Vec<DefId>>,\n \n+    [] fn dllimport_foreign_items: DllimportForeignItems(CrateNum)\n+        -> Lrc<FxHashSet<DefId>>,\n     [] fn is_dllimport_foreign_item: IsDllimportForeignItem(DefId) -> bool,\n     [] fn is_statically_included_foreign_item: IsStaticallyIncludedForeignItem(DefId) -> bool,\n     [] fn native_library_kind: NativeLibraryKind(DefId)\n@@ -424,6 +429,10 @@ define_maps! { <'tcx>\n     [] fn features_query: features_node(CrateNum) -> Lrc<feature_gate::Features>,\n \n     [] fn program_clauses_for: ProgramClausesFor(DefId) -> Lrc<Vec<Clause<'tcx>>>,\n+\n+    [] fn wasm_custom_sections: WasmCustomSections(CrateNum) -> Lrc<Vec<DefId>>,\n+    [] fn wasm_import_module_map: WasmImportModuleMap(CrateNum)\n+        -> Lrc<FxHashMap<DefId, String>>,\n }\n \n //////////////////////////////////////////////////////////////////////"}, {"sha": "46106d8ec0e9141c6ceeb781b807a44e0b8cf846", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -886,6 +886,9 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n             force!(all_trait_implementations, krate!());\n         }\n \n+        DepKind::DllimportForeignItems => {\n+            force!(dllimport_foreign_items, krate!());\n+        }\n         DepKind::IsDllimportForeignItem => {\n             force!(is_dllimport_foreign_item, def_id!());\n         }\n@@ -940,6 +943,9 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::Features => { force!(features_query, LOCAL_CRATE); }\n \n         DepKind::ProgramClausesFor => { force!(program_clauses_for, def_id!()); }\n+        DepKind::WasmCustomSections => { force!(wasm_custom_sections, krate!()); }\n+        DepKind::WasmImportModuleMap => { force!(wasm_import_module_map, krate!()); }\n+        DepKind::ForeignModules => { force!(foreign_modules, krate!()); }\n     }\n \n     true"}, {"sha": "3fc20508ad7ee0d901f064752870cdffaed364a2", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -18,6 +18,7 @@ use ty::{self, Lift, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n+use rustc_data_structures::sync::Lrc;\n use mir::interpret;\n \n use std::rc::Rc;\n@@ -465,7 +466,7 @@ impl<'a, 'tcx> Lift<'tcx> for ConstEvalErr<'a> {\n         tcx.lift(&*self.kind).map(|kind| {\n             ConstEvalErr {\n                 span: self.span,\n-                kind: Rc::new(kind),\n+                kind: Lrc::new(kind),\n             }\n         })\n     }"}, {"sha": "2b88db503030d9e43d3d5008f9d409a409a53a65", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -1670,7 +1670,6 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n pub struct Const<'tcx> {\n     pub ty: Ty<'tcx>,\n \n-    // FIXME(eddyb) Replace this with a miri value.\n     pub val: ConstVal<'tcx>,\n }\n "}, {"sha": "e7b58ae1564aa1683a86a36d92c5ee81eae26a47", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -19,11 +19,11 @@ use syntax_pos::{Span, DUMMY_SP};\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n \n use core::intrinsics;\n-use core::nonzero::NonZero;\n use std::fmt;\n use std::iter;\n use std::marker::PhantomData;\n use std::mem;\n+use std::num::NonZeroUsize;\n \n /// An entity in the Rust typesystem, which can be one of\n /// several kinds (only types and lifetimes for now).\n@@ -32,7 +32,7 @@ use std::mem;\n /// indicate the type (`Ty` or `Region`) it points to.\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Kind<'tcx> {\n-    ptr: NonZero<usize>,\n+    ptr: NonZeroUsize,\n     marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>)>\n }\n \n@@ -63,7 +63,7 @@ impl<'tcx> UnpackedKind<'tcx> {\n \n         Kind {\n             ptr: unsafe {\n-                NonZero::new_unchecked(ptr | tag)\n+                NonZeroUsize::new_unchecked(ptr | tag)\n             },\n             marker: PhantomData\n         }"}, {"sha": "056f1278c47c75b3b44825cf43158ba6abbccd9d", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -1177,8 +1177,8 @@ define_print! {\n                         ConstVal::Value(Value::ByVal(PrimVal::Bytes(sz))) => {\n                             write!(f, \"{}\", sz)?;\n                         }\n-                        ConstVal::Unevaluated(_def_id, substs) => {\n-                            write!(f, \"<unevaluated{:?}>\", &substs[..])?;\n+                        ConstVal::Unevaluated(_def_id, _substs) => {\n+                            write!(f, \"_\")?;\n                         }\n                         _ => {\n                             write!(f, \"{:?}\", sz)?;"}, {"sha": "bf0b3726bb301a46f13a6d07b993ea2084ed154d", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -76,6 +76,14 @@ pub mod flock;\n pub mod sync;\n pub mod owning_ref;\n \n+pub struct OnDrop<F: Fn()>(pub F);\n+\n+impl<F: Fn()> Drop for OnDrop<F> {\n+      fn drop(&mut self) {\n+            (self.0)();\n+      }\n+}\n+\n // See comments in src/librustc/lib.rs\n #[doc(hidden)]\n pub fn __noop_fix_for_27438() {}"}, {"sha": "37512e4bcd57f334e971f44aff537f61475d2eba", "filename": "src/librustc_data_structures/obligation_forest/node_index.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_data_structures%2Fobligation_forest%2Fnode_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_data_structures%2Fobligation_forest%2Fnode_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fnode_index.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -8,18 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::nonzero::NonZero;\n+use std::num::NonZeroU32;\n use std::u32;\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub struct NodeIndex {\n-    index: NonZero<u32>,\n+    index: NonZeroU32,\n }\n \n impl NodeIndex {\n     pub fn new(value: usize) -> NodeIndex {\n         assert!(value < (u32::MAX as usize));\n-        NodeIndex { index: NonZero::new((value as u32) + 1).unwrap() }\n+        NodeIndex { index: NonZeroU32::new((value as u32) + 1).unwrap() }\n     }\n \n     pub fn get(self) -> usize {"}, {"sha": "184ef1369761cb181501960b2484197037a14d46", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -26,11 +26,6 @@\n //!\n //! `MTLock` is a mutex which disappears if cfg!(parallel_queries) is false.\n //!\n-//! `rustc_global!` gives us a way to declare variables which are intended to be\n-//! global for the current rustc session. This currently maps to thread-locals,\n-//! since rustdoc uses the rustc libraries in multiple threads.\n-//! These globals should eventually be moved into the `Session` structure.\n-//!\n //! `rustc_erase_owner!` erases a OwningRef owner into Erased or Erased + Send + Sync\n //! depending on the value of cfg!(parallel_queries).\n \n@@ -228,31 +223,6 @@ pub fn assert_sync<T: ?Sized + Sync>() {}\n pub fn assert_send_val<T: ?Sized + Send>(_t: &T) {}\n pub fn assert_send_sync_val<T: ?Sized + Sync + Send>(_t: &T) {}\n \n-#[macro_export]\n-#[allow_internal_unstable]\n-macro_rules! rustc_global {\n-    // empty (base case for the recursion)\n-    () => {};\n-\n-    // process multiple declarations\n-    ($(#[$attr:meta])* $vis:vis static $name:ident: $t:ty = $init:expr; $($rest:tt)*) => (\n-        thread_local!($(#[$attr])* $vis static $name: $t = $init);\n-        rustc_global!($($rest)*);\n-    );\n-\n-    // handle a single declaration\n-    ($(#[$attr:meta])* $vis:vis static $name:ident: $t:ty = $init:expr) => (\n-        thread_local!($(#[$attr])* $vis static $name: $t = $init);\n-    );\n-}\n-\n-#[macro_export]\n-macro_rules! rustc_access_global {\n-    ($name:path, $callback:expr) => {\n-        $name.with($callback)\n-    }\n-}\n-\n impl<T: Copy + Debug> Debug for LockCell<T> {\n     fn fmt(&self, f: &mut Formatter) -> fmt::Result {\n         f.debug_struct(\"LockCell\")\n@@ -363,6 +333,13 @@ impl<T> Lock<T> {\n     }\n }\n \n+impl<T: Default> Default for Lock<T> {\n+    #[inline]\n+    fn default() -> Self {\n+        Lock::new(T::default())\n+    }\n+}\n+\n // FIXME: Probably a bad idea\n impl<T: Clone> Clone for Lock<T> {\n     #[inline]"}, {"sha": "a3115544f30b954e1f4b6477b5928907401865e9", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -648,7 +648,7 @@ pub fn phase_2_configure_and_expand_inner<'a, F>(sess: &'a Session,\n {\n     let (mut krate, features) = syntax::config::features(krate, &sess.parse_sess,\n                                                          sess.opts.test,\n-                                                         sess.opts.debugging_opts.epoch);\n+                                                         sess.opts.debugging_opts.edition);\n     // these need to be set \"early\" so that expansion sees `quote` if enabled.\n     sess.init_features(features);\n "}, {"sha": "c0728cb2b6669da1579869acc939e0a1294fe2f0", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 86, "deletions": 18, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -46,6 +46,7 @@ use syntax::attr;\n use syntax::feature_gate::{AttributeGate, AttributeType, Stability, deprecated_attributes};\n use syntax_pos::{BytePos, Span, SyntaxContext};\n use syntax::symbol::keywords;\n+use syntax::errors::DiagnosticBuilder;\n \n use rustc::hir::{self, PatKind};\n use rustc::hir::intravisit::FnKind;\n@@ -1316,48 +1317,115 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnreachablePub {\n     }\n }\n \n-/// Lint for trait and lifetime bounds that are (accidentally) accepted by the parser, but\n-/// ignored later.\n+/// Lint for trait and lifetime bounds in type aliases being mostly ignored:\n+/// They are relevant when using associated types, but otherwise neither checked\n+/// at definition site nor enforced at use site.\n \n-pub struct IgnoredGenericBounds;\n+pub struct TypeAliasBounds;\n \n declare_lint! {\n-    IGNORED_GENERIC_BOUNDS,\n+    TYPE_ALIAS_BOUNDS,\n     Warn,\n-    \"these generic bounds are ignored\"\n+    \"bounds in type aliases are not enforced\"\n }\n \n-impl LintPass for IgnoredGenericBounds {\n+impl LintPass for TypeAliasBounds {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(IGNORED_GENERIC_BOUNDS)\n+        lint_array!(TYPE_ALIAS_BOUNDS)\n     }\n }\n \n-impl EarlyLintPass for IgnoredGenericBounds {\n-    fn check_item(&mut self, cx: &EarlyContext, item: &ast::Item) {\n-        let type_alias_generics = match item.node {\n-            ast::ItemKind::Ty(_, ref generics) => generics,\n+impl TypeAliasBounds {\n+    fn is_type_variable_assoc(qpath: &hir::QPath) -> bool {\n+        match *qpath {\n+            hir::QPath::TypeRelative(ref ty, _) => {\n+                // If this is a type variable, we found a `T::Assoc`.\n+                match ty.node {\n+                    hir::TyPath(hir::QPath::Resolved(None, ref path)) => {\n+                        match path.def {\n+                            Def::TyParam(_) => true,\n+                            _ => false\n+                        }\n+                    }\n+                    _ => false\n+                }\n+            }\n+            hir::QPath::Resolved(..) => false,\n+        }\n+    }\n+\n+    fn suggest_changing_assoc_types(ty: &hir::Ty, err: &mut DiagnosticBuilder) {\n+        // Access to associates types should use `<T as Bound>::Assoc`, which does not need a\n+        // bound.  Let's see if this type does that.\n+\n+        // We use a HIR visitor to walk the type.\n+        use rustc::hir::intravisit::{self, Visitor};\n+        use syntax::ast::NodeId;\n+        struct WalkAssocTypes<'a, 'db> where 'db: 'a {\n+            err: &'a mut DiagnosticBuilder<'db>\n+        }\n+        impl<'a, 'db, 'v> Visitor<'v> for WalkAssocTypes<'a, 'db> {\n+            fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'v>\n+            {\n+                intravisit::NestedVisitorMap::None\n+            }\n+\n+            fn visit_qpath(&mut self, qpath: &'v hir::QPath, id: NodeId, span: Span) {\n+                if TypeAliasBounds::is_type_variable_assoc(qpath) {\n+                    self.err.span_help(span,\n+                        \"use fully disambiguated paths (i.e., `<T as Trait>::Assoc`) to refer to \\\n+                         associated types in type aliases\");\n+                }\n+                intravisit::walk_qpath(self, qpath, id, span)\n+            }\n+        }\n+\n+        // Let's go for a walk!\n+        let mut visitor = WalkAssocTypes { err };\n+        visitor.visit_ty(ty);\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeAliasBounds {\n+    fn check_item(&mut self, cx: &LateContext, item: &hir::Item) {\n+        let (ty, type_alias_generics) = match item.node {\n+            hir::ItemTy(ref ty, ref generics) => (&*ty, generics),\n             _ => return,\n         };\n+        let mut suggested_changing_assoc_types = false;\n         // There must not be a where clause\n         if !type_alias_generics.where_clause.predicates.is_empty() {\n             let spans : Vec<_> = type_alias_generics.where_clause.predicates.iter()\n                 .map(|pred| pred.span()).collect();\n-            cx.span_lint(IGNORED_GENERIC_BOUNDS, spans,\n-                \"where clauses are ignored in type aliases\");\n+            let mut err = cx.struct_span_lint(TYPE_ALIAS_BOUNDS, spans,\n+                \"where clauses are not enforced in type aliases\");\n+            err.help(\"the clause will not be checked when the type alias is used, \\\n+                      and should be removed\");\n+            if !suggested_changing_assoc_types {\n+                TypeAliasBounds::suggest_changing_assoc_types(ty, &mut err);\n+                suggested_changing_assoc_types = true;\n+            }\n+            err.emit();\n         }\n         // The parameters must not have bounds\n         for param in type_alias_generics.params.iter() {\n             let spans : Vec<_> = match param {\n-                &ast::GenericParam::Lifetime(ref l) => l.bounds.iter().map(|b| b.span).collect(),\n-                &ast::GenericParam::Type(ref ty) => ty.bounds.iter().map(|b| b.span()).collect(),\n+                &hir::GenericParam::Lifetime(ref l) => l.bounds.iter().map(|b| b.span).collect(),\n+                &hir::GenericParam::Type(ref ty) => ty.bounds.iter().map(|b| b.span()).collect(),\n             };\n             if !spans.is_empty() {\n-                cx.span_lint(\n-                    IGNORED_GENERIC_BOUNDS,\n+                let mut err = cx.struct_span_lint(\n+                    TYPE_ALIAS_BOUNDS,\n                     spans,\n-                    \"bounds on generic parameters are ignored in type aliases\",\n+                    \"bounds on generic parameters are not enforced in type aliases\",\n                 );\n+                err.help(\"the bound will not be checked when the type alias is used, \\\n+                          and should be removed\");\n+                if !suggested_changing_assoc_types {\n+                    TypeAliasBounds::suggest_changing_assoc_types(ty, &mut err);\n+                    suggested_changing_assoc_types = true;\n+                }\n+                err.emit();\n             }\n         }\n     }"}, {"sha": "901d76edc80654ca9661d40372deec1c0f4e48b8", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -48,7 +48,7 @@ use rustc::session;\n use rustc::util;\n \n use session::Session;\n-use syntax::epoch::Epoch;\n+use syntax::edition::Edition;\n use lint::LintId;\n use lint::FutureIncompatibleInfo;\n \n@@ -109,7 +109,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                        UnusedImportBraces,\n                        AnonymousParameters,\n                        UnusedDocComment,\n-                       IgnoredGenericBounds,\n                        );\n \n     add_early_builtin_with_new!(sess,\n@@ -139,6 +138,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                  MutableTransmutes,\n                  UnionsWithDropFields,\n                  UnreachablePub,\n+                 TypeAliasBounds,\n                  );\n \n     add_builtin_with_new!(sess,\n@@ -197,82 +197,82 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         FutureIncompatibleInfo {\n             id: LintId::of(PRIVATE_IN_PUBLIC),\n             reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(PUB_USE_OF_PRIVATE_EXTERN_CRATE),\n             reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(PATTERNS_IN_FNS_WITHOUT_BODY),\n             reference: \"issue #35203 <https://github.com/rust-lang/rust/issues/35203>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(SAFE_EXTERN_STATICS),\n             reference: \"issue #36247 <https://github.com/rust-lang/rust/issues/36247>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(INVALID_TYPE_PARAM_DEFAULT),\n             reference: \"issue #36887 <https://github.com/rust-lang/rust/issues/36887>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(LEGACY_DIRECTORY_OWNERSHIP),\n             reference: \"issue #37872 <https://github.com/rust-lang/rust/issues/37872>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(LEGACY_IMPORTS),\n             reference: \"issue #38260 <https://github.com/rust-lang/rust/issues/38260>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(LEGACY_CONSTRUCTOR_VISIBILITY),\n             reference: \"issue #39207 <https://github.com/rust-lang/rust/issues/39207>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(MISSING_FRAGMENT_SPECIFIER),\n             reference: \"issue #40107 <https://github.com/rust-lang/rust/issues/40107>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(ILLEGAL_FLOATING_POINT_LITERAL_PATTERN),\n             reference: \"issue #41620 <https://github.com/rust-lang/rust/issues/41620>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(ANONYMOUS_PARAMETERS),\n             reference: \"issue #41686 <https://github.com/rust-lang/rust/issues/41686>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES),\n             reference: \"issue #42238 <https://github.com/rust-lang/rust/issues/42238>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(LATE_BOUND_LIFETIME_ARGUMENTS),\n             reference: \"issue #42868 <https://github.com/rust-lang/rust/issues/42868>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(SAFE_PACKED_BORROWS),\n             reference: \"issue #46043 <https://github.com/rust-lang/rust/issues/46043>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(INCOHERENT_FUNDAMENTAL_IMPLS),\n             reference: \"issue #46205 <https://github.com/rust-lang/rust/issues/46205>\",\n-            epoch: None,\n+            edition: None,\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(TYVAR_BEHIND_RAW_POINTER),\n             reference: \"issue #46906 <https://github.com/rust-lang/rust/issues/46906>\",\n-            epoch: Some(Epoch::Epoch2018),\n+            edition: Some(Edition::Edition2018),\n         }\n         ]);\n "}, {"sha": "baaf57c890898948f96dc69d704fb6d8663abf4e", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -12,7 +12,6 @@\n \n use cstore::{self, CStore, CrateSource, MetadataBlob};\n use locator::{self, CratePaths};\n-use native_libs::relevant_lib;\n use schema::CrateRoot;\n use rustc_data_structures::sync::{Lrc, RwLock, Lock};\n \n@@ -230,7 +229,7 @@ impl<'a> CrateLoader<'a> {\n             .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))\n             .collect();\n \n-        let mut cmeta = cstore::CrateMetadata {\n+        let cmeta = cstore::CrateMetadata {\n             name,\n             extern_crate: Lock::new(None),\n             def_path_table: Lrc::new(def_path_table),\n@@ -250,25 +249,8 @@ impl<'a> CrateLoader<'a> {\n                 rlib,\n                 rmeta,\n             },\n-            // Initialize this with an empty set. The field is populated below\n-            // after we were able to deserialize its contents.\n-            dllimport_foreign_items: FxHashSet(),\n         };\n \n-        let dllimports: FxHashSet<_> = cmeta\n-            .root\n-            .native_libraries\n-            .decode((&cmeta, self.sess))\n-            .filter(|lib| relevant_lib(self.sess, lib) &&\n-                          lib.kind == cstore::NativeLibraryKind::NativeUnknown)\n-            .flat_map(|lib| {\n-                assert!(lib.foreign_items.iter().all(|def_id| def_id.krate == cnum));\n-                lib.foreign_items.into_iter().map(|def_id| def_id.index)\n-            })\n-            .collect();\n-\n-        cmeta.dllimport_foreign_items = dllimports;\n-\n         let cmeta = Lrc::new(cmeta);\n         self.cstore.set_crate_data(cnum, cmeta.clone());\n         (cnum, cmeta)"}, {"sha": "53986f074100561bff2588f1832a3ff7e3756da7", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -20,7 +20,7 @@ use rustc::middle::cstore::{DepKind, ExternCrate, MetadataLoader};\n use rustc::session::{Session, CrateDisambiguator};\n use rustc_back::PanicStrategy;\n use rustc_data_structures::indexed_vec::IndexVec;\n-use rustc::util::nodemap::{FxHashMap, FxHashSet, NodeMap};\n+use rustc::util::nodemap::{FxHashMap, NodeMap};\n \n use rustc_data_structures::sync::{Lrc, RwLock, Lock};\n use syntax::{ast, attr};\n@@ -30,7 +30,7 @@ use syntax_pos;\n \n pub use rustc::middle::cstore::{NativeLibrary, NativeLibraryKind, LinkagePreference};\n pub use rustc::middle::cstore::NativeLibraryKind::*;\n-pub use rustc::middle::cstore::{CrateSource, LibSource};\n+pub use rustc::middle::cstore::{CrateSource, LibSource, ForeignModule};\n \n pub use cstore_impl::{provide, provide_extern};\n \n@@ -84,8 +84,6 @@ pub struct CrateMetadata {\n     pub source: CrateSource,\n \n     pub proc_macros: Option<Vec<(ast::Name, Lrc<SyntaxExtension>)>>,\n-    // Foreign items imported from a dylib (Windows only)\n-    pub dllimport_foreign_items: FxHashSet<DefIndex>,\n }\n \n pub struct CStore {"}, {"sha": "e911a03bbe2b5bfc74206f35eb9d69b81dd57afc", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -12,6 +12,7 @@ use cstore;\n use encoder;\n use link_args;\n use native_libs;\n+use foreign_modules;\n use schema;\n \n use rustc::ty::maps::QueryConfig;\n@@ -197,6 +198,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         Lrc::new(reachable_non_generics)\n     }\n     native_libraries => { Lrc::new(cdata.get_native_libraries(tcx.sess)) }\n+    foreign_modules => { Lrc::new(cdata.get_foreign_modules(tcx.sess)) }\n     plugin_registrar_fn => {\n         cdata.root.plugin_registrar_fn.map(|index| {\n             DefId { krate: def_id.krate, index }\n@@ -224,9 +226,6 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         Lrc::new(result)\n     }\n \n-    is_dllimport_foreign_item => {\n-        cdata.is_dllimport_foreign_item(def_id.index)\n-    }\n     visibility => { cdata.get_visibility(def_id.index) }\n     dep_kind => {\n         let r = *cdata.dep_kind.lock();\n@@ -271,6 +270,8 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n \n         Arc::new(cdata.exported_symbols())\n     }\n+\n+    wasm_custom_sections => { Lrc::new(cdata.wasm_custom_sections()) }\n }\n \n pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n@@ -304,13 +305,28 @@ pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n             tcx.native_libraries(id.krate)\n                 .iter()\n                 .filter(|lib| native_libs::relevant_lib(&tcx.sess, lib))\n-                .find(|l| l.foreign_items.contains(&id))\n+                .find(|lib| {\n+                    let fm_id = match lib.foreign_module {\n+                        Some(id) => id,\n+                        None => return false,\n+                    };\n+                    tcx.foreign_modules(id.krate)\n+                        .iter()\n+                        .find(|m| m.def_id == fm_id)\n+                        .expect(\"failed to find foreign module\")\n+                        .foreign_items\n+                        .contains(&id)\n+                })\n                 .map(|l| l.kind)\n         },\n         native_libraries: |tcx, cnum| {\n             assert_eq!(cnum, LOCAL_CRATE);\n             Lrc::new(native_libs::collect(tcx))\n         },\n+        foreign_modules: |tcx, cnum| {\n+            assert_eq!(cnum, LOCAL_CRATE);\n+            Lrc::new(foreign_modules::collect(tcx))\n+        },\n         link_args: |tcx, cnum| {\n             assert_eq!(cnum, LOCAL_CRATE);\n             Lrc::new(link_args::collect(tcx))"}, {"sha": "e72f9ddd82abeba704fd53058307bad80d5bc682", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -10,7 +10,7 @@\n \n // Decoding metadata from a single crate's metadata\n \n-use cstore::{self, CrateMetadata, MetadataBlob, NativeLibrary};\n+use cstore::{self, CrateMetadata, MetadataBlob, NativeLibrary, ForeignModule};\n use schema::*;\n \n use rustc_data_structures::sync::{Lrc, ReadGuard};\n@@ -1031,6 +1031,10 @@ impl<'a, 'tcx> CrateMetadata {\n         self.root.native_libraries.decode((self, sess)).collect()\n     }\n \n+    pub fn get_foreign_modules(&self, sess: &Session) -> Vec<ForeignModule> {\n+        self.root.foreign_modules.decode((self, sess)).collect()\n+    }\n+\n     pub fn get_dylib_dependency_formats(&self) -> Vec<(CrateNum, LinkagePreference)> {\n         self.root\n             .dylib_dependency_formats\n@@ -1067,6 +1071,16 @@ impl<'a, 'tcx> CrateMetadata {\n             .collect()\n     }\n \n+    pub fn wasm_custom_sections(&self) -> Vec<DefId> {\n+        let sections = self.root\n+            .wasm_custom_sections\n+            .decode(self)\n+            .map(|def_index| self.local_def_id(def_index))\n+            .collect::<Vec<_>>();\n+        info!(\"loaded wasm sections {:?}\", sections);\n+        return sections\n+    }\n+\n     pub fn get_macro(&self, id: DefIndex) -> (InternedString, MacroDef) {\n         let entry = self.entry(id);\n         match entry.kind {\n@@ -1093,10 +1107,6 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    pub fn is_dllimport_foreign_item(&self, id: DefIndex) -> bool {\n-        self.dllimport_foreign_items.contains(&id)\n-    }\n-\n     pub fn fn_sig(&self,\n                   id: DefIndex,\n                   tcx: TyCtxt<'a, 'tcx, 'tcx>)"}, {"sha": "39de1ec852ec41cf51f7604714ca4107016b9277", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -14,7 +14,7 @@ use isolated_encoder::IsolatedEncoder;\n use schema::*;\n \n use rustc::middle::cstore::{LinkMeta, LinkagePreference, NativeLibrary,\n-                            EncodedMetadata};\n+                            EncodedMetadata, ForeignModule};\n use rustc::hir::def::CtorKind;\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefIndex, DefId, LocalDefId, LOCAL_CRATE};\n use rustc::hir::map::definitions::DefPathTable;\n@@ -412,6 +412,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             ());\n         let native_lib_bytes = self.position() - i;\n \n+        let foreign_modules = self.tracked(\n+            IsolatedEncoder::encode_foreign_modules,\n+            ());\n+\n         // Encode codemap\n         i = self.position();\n         let codemap = self.encode_codemap();\n@@ -435,6 +439,12 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             &exported_symbols);\n         let exported_symbols_bytes = self.position() - i;\n \n+        // encode wasm custom sections\n+        let wasm_custom_sections = self.tcx.wasm_custom_sections(LOCAL_CRATE);\n+        let wasm_custom_sections = self.tracked(\n+            IsolatedEncoder::encode_wasm_custom_sections,\n+            &wasm_custom_sections);\n+\n         // Encode and index the items.\n         i = self.position();\n         let items = self.encode_info_for_items();\n@@ -474,10 +484,12 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             lang_items,\n             lang_items_missing,\n             native_libraries,\n+            foreign_modules,\n             codemap,\n             def_path_table,\n             impls,\n             exported_symbols,\n+            wasm_custom_sections,\n             index,\n         });\n \n@@ -1330,6 +1342,11 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         self.lazy_seq(used_libraries.iter().cloned())\n     }\n \n+    fn encode_foreign_modules(&mut self, _: ()) -> LazySeq<ForeignModule> {\n+        let foreign_modules = self.tcx.foreign_modules(LOCAL_CRATE);\n+        self.lazy_seq(foreign_modules.iter().cloned())\n+    }\n+\n     fn encode_crate_deps(&mut self, _: ()) -> LazySeq<CrateDep> {\n         let crates = self.tcx.crates();\n \n@@ -1444,6 +1461,11 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             .cloned())\n     }\n \n+    fn encode_wasm_custom_sections(&mut self, statics: &[DefId]) -> LazySeq<DefIndex> {\n+        info!(\"encoding custom wasm section constants {:?}\", statics);\n+        self.lazy_seq(statics.iter().map(|id| id.index))\n+    }\n+\n     fn encode_dylib_dependency_formats(&mut self, _: ()) -> LazySeq<Option<LinkagePreference>> {\n         match self.tcx.sess.dependency_formats.borrow().get(&config::CrateTypeDylib) {\n             Some(arr) => {"}, {"sha": "c44d891b7f39a406d321f04f466347edaac30834", "filename": "src/librustc_metadata/foreign_modules.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_metadata%2Fforeign_modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_metadata%2Fforeign_modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fforeign_modules.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n+use rustc::hir;\n+use rustc::middle::cstore::ForeignModule;\n+use rustc::ty::TyCtxt;\n+\n+pub fn collect<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Vec<ForeignModule> {\n+    let mut collector = Collector {\n+        tcx,\n+        modules: Vec::new(),\n+    };\n+    tcx.hir.krate().visit_all_item_likes(&mut collector);\n+    return collector.modules\n+}\n+\n+struct Collector<'a, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    modules: Vec<ForeignModule>,\n+}\n+\n+impl<'a, 'tcx> ItemLikeVisitor<'tcx> for Collector<'a, 'tcx> {\n+    fn visit_item(&mut self, it: &'tcx hir::Item) {\n+        let fm = match it.node {\n+            hir::ItemForeignMod(ref fm) => fm,\n+            _ => return,\n+        };\n+\n+        let foreign_items = fm.items.iter()\n+            .map(|it| self.tcx.hir.local_def_id(it.id))\n+            .collect();\n+        self.modules.push(ForeignModule {\n+            foreign_items,\n+            def_id: self.tcx.hir.local_def_id(it.id),\n+        });\n+    }\n+\n+    fn visit_trait_item(&mut self, _it: &'tcx hir::TraitItem) {}\n+    fn visit_impl_item(&mut self, _it: &'tcx hir::ImplItem) {}\n+}"}, {"sha": "8509966744948be24f7d09127f72773a0bdc0122", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -56,6 +56,7 @@ mod isolated_encoder;\n mod schema;\n mod native_libs;\n mod link_args;\n+mod foreign_modules;\n \n pub mod creader;\n pub mod cstore;"}, {"sha": "4bb6d8fb87cf5b490b2c3622ba6c1bedbf999a1b", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -105,14 +105,11 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for Collector<'a, 'tcx> {\n             } else {\n                 None\n             };\n-            let foreign_items = fm.items.iter()\n-                .map(|it| self.tcx.hir.local_def_id(it.id))\n-                .collect();\n             let lib = NativeLibrary {\n                 name: n,\n                 kind,\n                 cfg,\n-                foreign_items,\n+                foreign_module: Some(self.tcx.hir.local_def_id(it.id)),\n             };\n             self.register_native_lib(Some(m.span), lib);\n         }\n@@ -218,7 +215,7 @@ impl<'a, 'tcx> Collector<'a, 'tcx> {\n                     name: Symbol::intern(new_name.unwrap_or(name)),\n                     kind: if let Some(k) = kind { k } else { cstore::NativeUnknown },\n                     cfg: None,\n-                    foreign_items: Vec::new(),\n+                    foreign_module: None,\n                 };\n                 self.register_native_lib(None, lib);\n             }"}, {"sha": "983279452970172a46940016f1455717922218d9", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -15,8 +15,8 @@ use rustc::hir;\n use rustc::hir::def::{self, CtorKind};\n use rustc::hir::def_id::{DefIndex, DefId, CrateNum};\n use rustc::ich::StableHashingContext;\n-use rustc::middle::cstore::{DepKind, LinkagePreference, NativeLibrary};\n use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n+use rustc::middle::cstore::{DepKind, LinkagePreference, NativeLibrary, ForeignModule};\n use rustc::middle::lang_items;\n use rustc::mir;\n use rustc::session::CrateDisambiguator;\n@@ -200,10 +200,12 @@ pub struct CrateRoot {\n     pub lang_items: LazySeq<(DefIndex, usize)>,\n     pub lang_items_missing: LazySeq<lang_items::LangItem>,\n     pub native_libraries: LazySeq<NativeLibrary>,\n+    pub foreign_modules: LazySeq<ForeignModule>,\n     pub codemap: LazySeq<syntax_pos::FileMap>,\n     pub def_path_table: Lazy<hir::map::definitions::DefPathTable>,\n     pub impls: LazySeq<TraitImpls>,\n     pub exported_symbols: LazySeq<(ExportedSymbol, SymbolExportLevel)>,\n+    pub wasm_custom_sections: LazySeq<DefIndex>,\n \n     pub index: LazySeq<index::Index>,\n }"}, {"sha": "9f6cf8c036e19a686e44febe3a783e252f8dd44c", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -29,17 +29,17 @@ mod abs_domain;\n // (which is likely to yield a subtle off-by-one error).\n pub(crate) mod indexes {\n     use std::fmt;\n-    use core::nonzero::NonZero;\n+    use std::num::NonZeroUsize;\n     use rustc_data_structures::indexed_vec::Idx;\n \n     macro_rules! new_index {\n         ($Index:ident, $debug_name:expr) => {\n             #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n-            pub struct $Index(NonZero<usize>);\n+            pub struct $Index(NonZeroUsize);\n \n             impl Idx for $Index {\n                 fn new(idx: usize) -> Self {\n-                    $Index(NonZero::new(idx + 1).unwrap())\n+                    $Index(NonZeroUsize::new(idx + 1).unwrap())\n                 }\n                 fn index(self) -> usize {\n                     self.0.get() - 1"}, {"sha": "87219511e6ff3a3608649989039983a33babe49e", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -14,7 +14,7 @@ use super::{Place, EvalContext, StackPopCleanup, ValTy, PlaceExtra, Memory};\n \n use std::fmt;\n use std::error::Error;\n-use std::rc::Rc;\n+use rustc_data_structures::sync::Lrc;\n \n pub fn mk_borrowck_eval_cx<'a, 'mir, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -485,7 +485,7 @@ pub fn const_eval_provider<'a, 'tcx>(\n         // Do match-check before building MIR\n         if tcx.check_match(def_id).is_err() {\n             return Err(ConstEvalErr {\n-                kind: Rc::new(CheckMatchError),\n+                kind: Lrc::new(CheckMatchError),\n                 span,\n             });\n         }\n@@ -497,7 +497,7 @@ pub fn const_eval_provider<'a, 'tcx>(\n         // Do not continue into miri if typeck errors occurred; it will fail horribly\n         if tables.tainted_by_errors {\n             return Err(ConstEvalErr {\n-                kind: Rc::new(TypeckError),\n+                kind: Lrc::new(TypeckError),\n                 span,\n             });\n         }"}, {"sha": "37274d1fc4479f538185c0288acdcc22229e5004", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -41,13 +41,13 @@ impl<'a> AstValidator<'a> {\n                            keywords::StaticLifetime.name(),\n                            keywords::Invalid.name()];\n         if !valid_names.contains(&lifetime.ident.name) &&\n-            token::Ident(lifetime.ident.without_first_quote()).is_reserved_ident() {\n+            token::is_reserved_ident(lifetime.ident.without_first_quote()) {\n             self.err_handler().span_err(lifetime.span, \"lifetimes cannot use keyword names\");\n         }\n     }\n \n     fn check_label(&self, label: Ident, span: Span) {\n-        if token::Ident(label.without_first_quote()).is_reserved_ident() {\n+        if token::is_reserved_ident(label.without_first_quote()) {\n             self.err_handler().span_err(span, &format!(\"invalid label name `{}`\", label.name));\n         }\n     }"}, {"sha": "2cb2c76c6320b4b30a9f078e477732de83d1298d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -3206,7 +3206,7 @@ impl<'a> Resolver<'a> {\n                     // `$crate::a::b`\n                     module = Some(self.resolve_crate_root(ident.node.ctxt, true));\n                     continue\n-                } else if i == 1 && !token::Ident(ident.node).is_path_segment_keyword() {\n+                } else if i == 1 && !token::is_path_segment_keyword(ident.node) {\n                     let prev_name = path[0].node.name;\n                     if prev_name == keywords::Extern.name() ||\n                        prev_name == keywords::CrateRoot.name() &&"}, {"sha": "0692a1e0d7f8afbf396dfd48f904db4083cbcd70", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -268,7 +268,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n                                 if k > 0 {\n                                     tokens.push(TokenTree::Token(path.span, Token::ModSep).into());\n                                 }\n-                                let tok = Token::Ident(segment.identifier);\n+                                let tok = Token::from_ast_ident(segment.identifier);\n                                 tokens.push(TokenTree::Token(path.span, tok).into());\n                             }\n                         }"}, {"sha": "7036bdd0e2b07f6edff00b380bca860b6751bc90", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -625,7 +625,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                         } else {\n                             Some(self.resolve_crate_root(source.ctxt.modern(), false))\n                         }\n-                    } else if is_extern && !token::Ident(source).is_path_segment_keyword() {\n+                    } else if is_extern && !token::is_path_segment_keyword(source) {\n                         let crate_id =\n                             self.crate_loader.resolve_crate_from_path(source.name, directive.span);\n                         let crate_root =\n@@ -667,7 +667,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             }\n             PathResult::Failed(span, msg, true) => {\n                 let (mut self_path, mut self_result) = (module_path.clone(), None);\n-                let is_special = |ident| token::Ident(ident).is_path_segment_keyword() &&\n+                let is_special = |ident| token::is_path_segment_keyword(ident) &&\n                                          ident.name != keywords::CrateRoot.name();\n                 if !self_path.is_empty() && !is_special(self_path[0].node) &&\n                    !(self_path.len() > 1 && is_special(self_path[1].node)) {"}, {"sha": "1fe2f87128abddcb099554aefea8df2fe6acb03b", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -16,14 +16,14 @@ use rustc::traits::query::dropck_outlives::{DtorckConstraint, DropckOutlivesResu\n use rustc::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use rustc::ty::subst::Subst;\n use rustc::util::nodemap::FxHashSet;\n-use std::rc::Rc;\n+use rustc_data_structures::sync::Lrc;\n use syntax::codemap::{Span, DUMMY_SP};\n use util;\n \n crate fn dropck_outlives<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     goal: CanonicalTyGoal<'tcx>,\n-) -> Result<Rc<Canonical<'tcx, QueryResult<'tcx, DropckOutlivesResult<'tcx>>>>, NoSolution> {\n+) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, DropckOutlivesResult<'tcx>>>>, NoSolution> {\n     debug!(\"dropck_outlives(goal={:#?})\", goal);\n \n     tcx.infer_ctxt().enter(|ref infcx| {"}, {"sha": "62d5ef11551c0a044f3da4c499957bd51c911fac", "filename": "src/librustc_traits/normalize_projection_ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -14,15 +14,15 @@ use rustc::traits::{self, FulfillmentContext, Normalized, ObligationCause,\n use rustc::traits::query::{CanonicalProjectionGoal, NoSolution, normalize::NormalizationResult};\n use rustc::ty::{ParamEnvAnd, TyCtxt};\n use rustc::util::common::CellUsizeExt;\n-use std::rc::Rc;\n+use rustc_data_structures::sync::Lrc;\n use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::DUMMY_SP;\n use util;\n \n crate fn normalize_projection_ty<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     goal: CanonicalProjectionGoal<'tcx>,\n-) -> Result<Rc<Canonical<'tcx, QueryResult<'tcx, NormalizationResult<'tcx>>>>, NoSolution> {\n+) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, NormalizationResult<'tcx>>>>, NoSolution> {\n     debug!(\"normalize_provider(goal={:#?})\", goal);\n \n     tcx.sess.perf_stats.normalize_projection_ty.increment();"}, {"sha": "df78ccdd2298a2be450437365982aa9fbdd121e1", "filename": "src/librustc_trans/attributes.rs", "status": "modified", "additions": 77, "deletions": 1, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_trans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_trans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fattributes.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -11,11 +11,14 @@\n \n use std::ffi::{CStr, CString};\n \n-use rustc::hir::TransFnAttrFlags;\n+use rustc::hir::{self, TransFnAttrFlags};\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::session::config::Sanitizer;\n+use rustc::ty::TyCtxt;\n use rustc::ty::maps::Providers;\n use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::fx::FxHashMap;\n \n use llvm::{self, Attribute, ValueRef};\n use llvm::AttributePlace::Function;\n@@ -139,6 +142,20 @@ pub fn from_fn_attrs(cx: &CodegenCx, llfn: ValueRef, id: DefId) {\n             llfn, llvm::AttributePlace::Function,\n             cstr(\"target-features\\0\"), &val);\n     }\n+\n+    // Note that currently the `wasm-import-module` doesn't do anything, but\n+    // eventually LLVM 7 should read this and ferry the appropriate import\n+    // module to the output file.\n+    if cx.tcx.sess.target.target.arch == \"wasm32\" {\n+        if let Some(module) = wasm_import_module(cx.tcx, id) {\n+            llvm::AddFunctionAttrStringValue(\n+                llfn,\n+                llvm::AttributePlace::Function,\n+                cstr(\"wasm-import-module\\0\"),\n+                &module,\n+            );\n+        }\n+    }\n }\n \n fn cstr(s: &'static str) -> &CStr {\n@@ -161,4 +178,63 @@ pub fn provide(providers: &mut Providers) {\n                 .collect())\n         }\n     };\n+\n+    providers.wasm_custom_sections = |tcx, cnum| {\n+        assert_eq!(cnum, LOCAL_CRATE);\n+        let mut finder = WasmSectionFinder { tcx, list: Vec::new() };\n+        tcx.hir.krate().visit_all_item_likes(&mut finder);\n+        Lrc::new(finder.list)\n+    };\n+\n+    provide_extern(providers);\n+}\n+\n+struct WasmSectionFinder<'a, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    list: Vec<DefId>,\n+}\n+\n+impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for WasmSectionFinder<'a, 'tcx> {\n+    fn visit_item(&mut self, i: &'tcx hir::Item) {\n+        match i.node {\n+            hir::ItemConst(..) => {}\n+            _ => return,\n+        }\n+        if i.attrs.iter().any(|i| i.check_name(\"wasm_custom_section\")) {\n+            self.list.push(self.tcx.hir.local_def_id(i.id));\n+        }\n+    }\n+\n+    fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem) {}\n+\n+    fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) {}\n+}\n+\n+pub fn provide_extern(providers: &mut Providers) {\n+    providers.wasm_import_module_map = |tcx, cnum| {\n+        let mut ret = FxHashMap();\n+        for lib in tcx.foreign_modules(cnum).iter() {\n+            let attrs = tcx.get_attrs(lib.def_id);\n+            let mut module = None;\n+            for attr in attrs.iter().filter(|a| a.check_name(\"wasm_import_module\")) {\n+                module = attr.value_str();\n+            }\n+            let module = match module {\n+                Some(s) => s,\n+                None => continue,\n+            };\n+            for id in lib.foreign_items.iter() {\n+                assert_eq!(id.krate, cnum);\n+                ret.insert(*id, module.to_string());\n+            }\n+        }\n+\n+        Lrc::new(ret)\n+    }\n+}\n+\n+fn wasm_import_module(tcx: TyCtxt, id: DefId) -> Option<CString> {\n+    tcx.wasm_import_module_map(id.krate)\n+        .get(&id)\n+        .map(|s| CString::new(&s[..]).unwrap())\n }"}, {"sha": "542cdc5baad32ba94b902466cdade37561c8e5cc", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use back::wasm;\n use cc::windows_registry;\n use super::archive::{ArchiveBuilder, ArchiveConfig};\n use super::bytecode::RLIB_BYTECODE_EXTENSION;\n@@ -810,6 +811,12 @@ fn link_natively(sess: &Session,\n             Err(e) => sess.fatal(&format!(\"failed to run dsymutil: {}\", e)),\n         }\n     }\n+\n+    if sess.opts.target_triple == \"wasm32-unknown-unknown\" {\n+        wasm::rewrite_imports(&out_filename, &trans.crate_info.wasm_imports);\n+        wasm::add_custom_sections(&out_filename,\n+                                  &trans.crate_info.wasm_custom_sections);\n+    }\n }\n \n fn exec_linker(sess: &Session, cmd: &mut Command, tmpdir: &Path)"}, {"sha": "d6d386c9fbe77d74cd3468c1aed99fdf985c1704", "filename": "src/librustc_trans/back/wasm.rs", "status": "added", "additions": 261, "deletions": 0, "changes": 261, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_trans%2Fback%2Fwasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_trans%2Fback%2Fwasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwasm.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -0,0 +1,261 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::collections::BTreeMap;\n+use std::fs;\n+use std::path::Path;\n+use std::str;\n+\n+use rustc_data_structures::fx::FxHashMap;\n+use serialize::leb128;\n+\n+// https://webassembly.github.io/spec/core/binary/modules.html#binary-importsec\n+const WASM_IMPORT_SECTION_ID: u8 = 2;\n+\n+const WASM_EXTERNAL_KIND_FUNCTION: u8 = 0;\n+const WASM_EXTERNAL_KIND_TABLE: u8 = 1;\n+const WASM_EXTERNAL_KIND_MEMORY: u8 = 2;\n+const WASM_EXTERNAL_KIND_GLOBAL: u8 = 3;\n+\n+/// Append all the custom sections listed in `sections` to the wasm binary\n+/// specified at `path`.\n+///\n+/// LLVM 6 which we're using right now doesn't have the ability to create custom\n+/// sections in wasm files nor does LLD have the ability to merge these sections\n+/// into one larger section when linking. It's expected that this will\n+/// eventually get implemented, however!\n+///\n+/// Until that time though this is a custom implementation in rustc to append\n+/// all sections to a wasm file to the finished product that LLD produces.\n+///\n+/// Support for this is landing in LLVM in https://reviews.llvm.org/D43097,\n+/// although after that support will need to be in LLD as well.\n+pub fn add_custom_sections(path: &Path, sections: &BTreeMap<String, Vec<u8>>) {\n+    if sections.len() == 0 {\n+        return\n+    }\n+\n+    let wasm = fs::read(path).expect(\"failed to read wasm output\");\n+\n+    // see https://webassembly.github.io/spec/core/binary/modules.html#custom-section\n+    let mut wasm = WasmEncoder { data: wasm };\n+    for (section, bytes) in sections {\n+        // write the `id` identifier, 0 for a custom section\n+        wasm.byte(0);\n+\n+        // figure out how long our name descriptor will be\n+        let mut name = WasmEncoder::new();\n+        name.str(section);\n+\n+        // write the length of the payload followed by all its contents\n+        wasm.u32((bytes.len() + name.data.len()) as u32);\n+        wasm.data.extend_from_slice(&name.data);\n+        wasm.data.extend_from_slice(bytes);\n+    }\n+\n+    fs::write(path, &wasm.data).expect(\"failed to write wasm output\");\n+}\n+\n+/// Rewrite the module imports are listed from in a wasm module given the field\n+/// name to module name mapping in `import_map`.\n+///\n+/// LLVM 6 which we're using right now doesn't have the ability to configure the\n+/// module a wasm symbol is import from. Rather all imported symbols come from\n+/// the bland `\"env\"` module unconditionally. Furthermore we'd *also* need\n+/// support in LLD for preserving these import modules, which it unfortunately\n+/// currently does not.\n+///\n+/// This function is intended as a hack for now where we manually rewrite the\n+/// wasm output by LLVM to have the correct import modules listed. The\n+/// `#[wasm_import_module]` attribute in Rust translates to the module that each\n+/// symbol is imported from, so here we manually go through the wasm file,\n+/// decode it, rewrite imports, and then rewrite the wasm module.\n+///\n+/// Support for this was added to LLVM in\n+/// https://github.com/llvm-mirror/llvm/commit/0f32e1365, although support still\n+/// needs to be added (AFAIK at the time of this writing) to LLD\n+pub fn rewrite_imports(path: &Path, import_map: &FxHashMap<String, String>) {\n+    if import_map.len() == 0 {\n+        return\n+    }\n+\n+    let wasm = fs::read(path).expect(\"failed to read wasm output\");\n+    let mut ret = WasmEncoder::new();\n+    ret.data.extend(&wasm[..8]);\n+\n+    // skip the 8 byte wasm/version header\n+    for (id, raw) in WasmSections(WasmDecoder::new(&wasm[8..])) {\n+        ret.byte(id);\n+        if id == WASM_IMPORT_SECTION_ID {\n+            info!(\"rewriting import section\");\n+            let data = rewrite_import_section(\n+                &mut WasmDecoder::new(raw),\n+                import_map,\n+            );\n+            ret.bytes(&data);\n+        } else {\n+            info!(\"carry forward section {}, {} bytes long\", id, raw.len());\n+            ret.bytes(raw);\n+        }\n+    }\n+\n+    fs::write(path, &ret.data).expect(\"failed to write wasm output\");\n+\n+    fn rewrite_import_section(\n+        wasm: &mut WasmDecoder,\n+        import_map: &FxHashMap<String, String>,\n+    )\n+        -> Vec<u8>\n+    {\n+        let mut dst = WasmEncoder::new();\n+        let n = wasm.u32();\n+        dst.u32(n);\n+        info!(\"rewriting {} imports\", n);\n+        for _ in 0..n {\n+            rewrite_import_entry(wasm, &mut dst, import_map);\n+        }\n+        return dst.data\n+    }\n+\n+    fn rewrite_import_entry(wasm: &mut WasmDecoder,\n+                            dst: &mut WasmEncoder,\n+                            import_map: &FxHashMap<String, String>) {\n+        // More info about the binary format here is available at:\n+        // https://webassembly.github.io/spec/core/binary/modules.html#import-section\n+        //\n+        // Note that you can also find the whole point of existence of this\n+        // function here, where we map the `module` name to a different one if\n+        // we've got one listed.\n+        let module = wasm.str();\n+        let field = wasm.str();\n+        let new_module = if module == \"env\" {\n+            import_map.get(field).map(|s| &**s).unwrap_or(module)\n+        } else {\n+            module\n+        };\n+        info!(\"import rewrite ({} => {}) / {}\", module, new_module, field);\n+        dst.str(new_module);\n+        dst.str(field);\n+        let kind = wasm.byte();\n+        dst.byte(kind);\n+        match kind {\n+            WASM_EXTERNAL_KIND_FUNCTION => dst.u32(wasm.u32()),\n+            WASM_EXTERNAL_KIND_TABLE => {\n+                dst.byte(wasm.byte()); // element_type\n+                dst.limits(wasm.limits());\n+            }\n+            WASM_EXTERNAL_KIND_MEMORY => dst.limits(wasm.limits()),\n+            WASM_EXTERNAL_KIND_GLOBAL => {\n+                dst.byte(wasm.byte()); // content_type\n+                dst.bool(wasm.bool()); // mutable\n+            }\n+            b => panic!(\"unknown kind: {}\", b),\n+        }\n+    }\n+}\n+\n+struct WasmSections<'a>(WasmDecoder<'a>);\n+\n+impl<'a> Iterator for WasmSections<'a> {\n+    type Item = (u8, &'a [u8]);\n+\n+    fn next(&mut self) -> Option<(u8, &'a [u8])> {\n+        if self.0.data.len() == 0 {\n+            return None\n+        }\n+\n+        // see https://webassembly.github.io/spec/core/binary/modules.html#sections\n+        let id = self.0.byte();\n+        let section_len = self.0.u32();\n+        info!(\"new section {} / {} bytes\", id, section_len);\n+        let section = self.0.skip(section_len as usize);\n+        Some((id, section))\n+    }\n+}\n+\n+struct WasmDecoder<'a> {\n+    data: &'a [u8],\n+}\n+\n+impl<'a> WasmDecoder<'a> {\n+    fn new(data: &'a [u8]) -> WasmDecoder<'a> {\n+        WasmDecoder { data }\n+    }\n+\n+    fn byte(&mut self) -> u8 {\n+        self.skip(1)[0]\n+    }\n+\n+    fn u32(&mut self) -> u32 {\n+        let (n, l1) = leb128::read_u32_leb128(self.data);\n+        self.data = &self.data[l1..];\n+        return n\n+    }\n+\n+    fn skip(&mut self, amt: usize) -> &'a [u8] {\n+        let (data, rest) = self.data.split_at(amt);\n+        self.data = rest;\n+        data\n+    }\n+\n+    fn str(&mut self) -> &'a str {\n+        let len = self.u32();\n+        str::from_utf8(self.skip(len as usize)).unwrap()\n+    }\n+\n+    fn bool(&mut self) -> bool {\n+        self.byte() == 1\n+    }\n+\n+    fn limits(&mut self) -> (u32, Option<u32>) {\n+        let has_max = self.bool();\n+        (self.u32(), if has_max { Some(self.u32()) } else { None })\n+    }\n+}\n+\n+struct WasmEncoder {\n+    data: Vec<u8>,\n+}\n+\n+impl WasmEncoder {\n+    fn new() -> WasmEncoder {\n+        WasmEncoder { data: Vec::new() }\n+    }\n+\n+    fn u32(&mut self, val: u32) {\n+        let at = self.data.len();\n+        leb128::write_u32_leb128(&mut self.data, at, val);\n+    }\n+\n+    fn byte(&mut self, val: u8) {\n+        self.data.push(val);\n+    }\n+\n+    fn bytes(&mut self, val: &[u8]) {\n+        self.u32(val.len() as u32);\n+        self.data.extend_from_slice(val);\n+    }\n+\n+    fn str(&mut self, val: &str) {\n+        self.bytes(val.as_bytes())\n+    }\n+\n+    fn bool(&mut self, b: bool) {\n+        self.byte(b as u8);\n+    }\n+\n+    fn limits(&mut self, limits: (u32, Option<u32>)) {\n+        self.bool(limits.1.is_some());\n+        self.u32(limits.0);\n+        if let Some(c) = limits.1 {\n+            self.u32(c);\n+        }\n+    }\n+}"}, {"sha": "56eece9f31e7ee135c8e82c10be44a9da58aa008", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 111, "deletions": 1, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -72,8 +72,10 @@ use type_::Type;\n use type_of::LayoutLlvmExt;\n use rustc::util::nodemap::{FxHashMap, FxHashSet, DefIdSet};\n use CrateInfo;\n+use rustc_data_structures::sync::Lrc;\n \n use std::any::Any;\n+use std::collections::BTreeMap;\n use std::ffi::CString;\n use std::str;\n use std::sync::Arc;\n@@ -1070,8 +1072,26 @@ impl CrateInfo {\n             used_crates_dynamic: cstore::used_crates(tcx, LinkagePreference::RequireDynamic),\n             used_crates_static: cstore::used_crates(tcx, LinkagePreference::RequireStatic),\n             used_crate_source: FxHashMap(),\n+            wasm_custom_sections: BTreeMap::new(),\n+            wasm_imports: FxHashMap(),\n         };\n \n+        let load_wasm_items = tcx.sess.crate_types.borrow()\n+            .iter()\n+            .any(|c| *c != config::CrateTypeRlib) &&\n+            tcx.sess.opts.target_triple == \"wasm32-unknown-unknown\";\n+\n+        if load_wasm_items {\n+            info!(\"attempting to load all wasm sections\");\n+            for &id in tcx.wasm_custom_sections(LOCAL_CRATE).iter() {\n+                let (name, contents) = fetch_wasm_section(tcx, id);\n+                info.wasm_custom_sections.entry(name)\n+                    .or_insert(Vec::new())\n+                    .extend(contents);\n+            }\n+            info.load_wasm_imports(tcx, LOCAL_CRATE);\n+        }\n+\n         for &cnum in tcx.crates().iter() {\n             info.native_libraries.insert(cnum, tcx.native_libraries(cnum));\n             info.crate_name.insert(cnum, tcx.crate_name(cnum).to_string());\n@@ -1091,11 +1111,27 @@ impl CrateInfo {\n             if tcx.is_no_builtins(cnum) {\n                 info.is_no_builtins.insert(cnum);\n             }\n+            if load_wasm_items {\n+                for &id in tcx.wasm_custom_sections(cnum).iter() {\n+                    let (name, contents) = fetch_wasm_section(tcx, id);\n+                    info.wasm_custom_sections.entry(name)\n+                        .or_insert(Vec::new())\n+                        .extend(contents);\n+                }\n+                info.load_wasm_imports(tcx, cnum);\n+            }\n         }\n \n-\n         return info\n     }\n+\n+    fn load_wasm_imports(&mut self, tcx: TyCtxt, cnum: CrateNum) {\n+        for (&id, module) in tcx.wasm_import_module_map(cnum).iter() {\n+            let instance = Instance::mono(tcx, id);\n+            let import_name = tcx.symbol_name(instance);\n+            self.wasm_imports.insert(import_name.to_string(), module.clone());\n+        }\n+    }\n }\n \n fn is_translated_item(tcx: TyCtxt, id: DefId) -> bool {\n@@ -1223,6 +1259,39 @@ pub fn provide(providers: &mut Providers) {\n             .expect(&format!(\"failed to find cgu with name {:?}\", name))\n     };\n     providers.compile_codegen_unit = compile_codegen_unit;\n+\n+    provide_extern(providers);\n+}\n+\n+pub fn provide_extern(providers: &mut Providers) {\n+    providers.dllimport_foreign_items = |tcx, krate| {\n+        let module_map = tcx.foreign_modules(krate);\n+        let module_map = module_map.iter()\n+            .map(|lib| (lib.def_id, lib))\n+            .collect::<FxHashMap<_, _>>();\n+\n+        let dllimports = tcx.native_libraries(krate)\n+            .iter()\n+            .filter(|lib| {\n+                if lib.kind != cstore::NativeLibraryKind::NativeUnknown {\n+                    return false\n+                }\n+                let cfg = match lib.cfg {\n+                    Some(ref cfg) => cfg,\n+                    None => return true,\n+                };\n+                attr::cfg_matches(cfg, &tcx.sess.parse_sess, None)\n+            })\n+            .filter_map(|lib| lib.foreign_module)\n+            .map(|id| &module_map[&id])\n+            .flat_map(|module| module.foreign_items.iter().cloned())\n+            .collect();\n+        Lrc::new(dllimports)\n+    };\n+\n+    providers.is_dllimport_foreign_item = |tcx, def_id| {\n+        tcx.dllimport_foreign_items(def_id.krate).contains(&def_id)\n+    };\n }\n \n pub fn linkage_to_llvm(linkage: Linkage) -> llvm::Linkage {\n@@ -1270,3 +1339,44 @@ mod temp_stable_hash_impls {\n         }\n     }\n }\n+\n+fn fetch_wasm_section(tcx: TyCtxt, id: DefId) -> (String, Vec<u8>) {\n+    use rustc::mir::interpret::{GlobalId, Value, PrimVal};\n+    use rustc::middle::const_val::ConstVal;\n+\n+    info!(\"loading wasm section {:?}\", id);\n+\n+    let section = tcx.get_attrs(id)\n+        .iter()\n+        .find(|a| a.check_name(\"wasm_custom_section\"))\n+        .expect(\"missing #[wasm_custom_section] attribute\")\n+        .value_str()\n+        .expect(\"malformed #[wasm_custom_section] attribute\");\n+\n+    let instance = ty::Instance::mono(tcx, id);\n+    let cid = GlobalId {\n+        instance,\n+        promoted: None\n+    };\n+    let param_env = ty::ParamEnv::reveal_all();\n+    let val = tcx.const_eval(param_env.and(cid)).unwrap();\n+\n+    let val = match val.val {\n+        ConstVal::Value(val) => val,\n+        ConstVal::Unevaluated(..) => bug!(\"should be evaluated\"),\n+    };\n+    let val = match val {\n+        Value::ByRef(ptr, _align) => ptr.into_inner_primval(),\n+        ref v => bug!(\"should be ByRef, was {:?}\", v),\n+    };\n+    let mem = match val {\n+        PrimVal::Ptr(mem) => mem,\n+        ref v => bug!(\"should be Ptr, was {:?}\", v),\n+    };\n+    assert_eq!(mem.offset, 0);\n+    let alloc = tcx\n+        .interpret_interner\n+        .get_alloc(mem.alloc_id)\n+        .expect(\"miri allocation never successfully created\");\n+    (section.to_string(), alloc.bytes.clone())\n+}"}, {"sha": "9f654c8ab29c0683fb97a99c72a46e27a81ded49", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -72,6 +72,7 @@ pub use llvm_util::target_features;\n use std::any::Any;\n use std::path::PathBuf;\n use std::sync::mpsc;\n+use std::collections::BTreeMap;\n use rustc_data_structures::sync::Lrc;\n \n use rustc::dep_graph::DepGraph;\n@@ -98,6 +99,7 @@ mod back {\n     pub mod symbol_export;\n     pub mod write;\n     mod rpath;\n+    mod wasm;\n }\n \n mod abi;\n@@ -214,6 +216,8 @@ impl TransCrate for LlvmTransCrate {\n \n     fn provide_extern(&self, providers: &mut ty::maps::Providers) {\n         back::symbol_export::provide_extern(providers);\n+        base::provide_extern(providers);\n+        attributes::provide_extern(providers);\n     }\n \n     fn trans_crate<'a, 'tcx>(\n@@ -400,6 +404,8 @@ struct CrateInfo {\n     used_crate_source: FxHashMap<CrateNum, Lrc<CrateSource>>,\n     used_crates_static: Vec<(CrateNum, LibSource)>,\n     used_crates_dynamic: Vec<(CrateNum, LibSource)>,\n+    wasm_custom_sections: BTreeMap<String, Vec<u8>>,\n+    wasm_imports: FxHashMap<String, String>,\n }\n \n __build_diagnostic_array! { librustc_trans, DIAGNOSTICS }"}, {"sha": "7965806af5d097c9b4f52b80e09543a6cbe8f811", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 60, "deletions": 33, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -904,6 +904,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n         // Keep track of which fields have already appeared in the pattern.\n         let mut used_fields = FxHashMap();\n \n+        let mut inexistent_fields = vec![];\n         // Typecheck each field.\n         for &Spanned { node: ref field, span } in fields {\n             let field_ty = match used_fields.entry(field.name) {\n@@ -927,34 +928,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                             self.field_ty(span, f, substs)\n                         })\n                         .unwrap_or_else(|| {\n-                            let mut err = struct_span_err!(\n-                                tcx.sess,\n-                                span,\n-                                E0026,\n-                                \"{} `{}` does not have a field named `{}`\",\n-                                kind_name,\n-                                tcx.item_path_str(variant.did),\n-                                field.name\n-                            );\n-                            err.span_label(span,\n-                                           format!(\"{} `{}` does not have field `{}`\",\n-                                                   kind_name,\n-                                                   tcx.item_path_str(variant.did),\n-                                                   field.name));\n-                            if tcx.sess.teach(&err.get_code().unwrap()) {\n-                                err.note(\n-                                    \"This error indicates that a struct pattern attempted to \\\n-                                     extract a non-existent field from a struct. Struct fields \\\n-                                     are identified by the name used before the colon : so struct \\\n-                                     patterns should resemble the declaration of the struct type \\\n-                                     being matched.\\n\\n\\\n-                                     If you are using shorthand field patterns but want to refer \\\n-                                     to the struct field by a different name, you should rename \\\n-                                     it explicitly.\"\n-                                );\n-                            }\n-                            err.emit();\n-\n+                            inexistent_fields.push((span, field.name));\n                             tcx.types.err\n                         })\n                 }\n@@ -963,6 +937,47 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n             self.check_pat_walk(&field.pat, field_ty, def_bm, true);\n         }\n \n+        if inexistent_fields.len() > 0 {\n+            let (field_names, t, plural) = if inexistent_fields.len() == 1 {\n+                (format!(\"a field named `{}`\", inexistent_fields[0].1), \"this\", \"\")\n+            } else {\n+                (format!(\"fields named {}\",\n+                         inexistent_fields.iter()\n+                            .map(|(_, name)| format!(\"`{}`\", name))\n+                            .collect::<Vec<String>>()\n+                            .join(\", \")), \"these\", \"s\")\n+            };\n+            let spans = inexistent_fields.iter().map(|(span, _)| *span).collect::<Vec<_>>();\n+            let mut err = struct_span_err!(tcx.sess,\n+                                           spans,\n+                                           E0026,\n+                                           \"{} `{}` does not have {}\",\n+                                           kind_name,\n+                                           tcx.item_path_str(variant.did),\n+                                           field_names);\n+            if let Some((span, _)) = inexistent_fields.last() {\n+                err.span_label(*span,\n+                               format!(\"{} `{}` does not have {} field{}\",\n+                                       kind_name,\n+                                       tcx.item_path_str(variant.did),\n+                                       t,\n+                                       plural));\n+            }\n+            if tcx.sess.teach(&err.get_code().unwrap()) {\n+                err.note(\n+                    \"This error indicates that a struct pattern attempted to \\\n+                     extract a non-existent field from a struct. Struct fields \\\n+                     are identified by the name used before the colon : so struct \\\n+                     patterns should resemble the declaration of the struct type \\\n+                     being matched.\\n\\n\\\n+                     If you are using shorthand field patterns but want to refer \\\n+                     to the struct field by a different name, you should rename \\\n+                     it explicitly.\"\n+                );\n+            }\n+            err.emit();\n+        }\n+\n         // Require `..` if struct has non_exhaustive attribute.\n         if adt.is_struct() && adt.is_non_exhaustive() && !adt.did.is_local() && !etc {\n             span_err!(tcx.sess, span, E0638,\n@@ -979,13 +994,25 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                 tcx.sess.span_err(span, \"`..` cannot be used in union patterns\");\n             }\n         } else if !etc {\n-            for field in variant.fields\n+            let unmentioned_fields = variant.fields\n                 .iter()\n-                .filter(|field| !used_fields.contains_key(&field.name)) {\n+                .map(|field| field.name)\n+                .filter(|field| !used_fields.contains_key(&field))\n+                .collect::<Vec<_>>();\n+            if unmentioned_fields.len() > 0 {\n+                let field_names = if unmentioned_fields.len() == 1 {\n+                    format!(\"field `{}`\", unmentioned_fields[0])\n+                } else {\n+                    format!(\"fields {}\",\n+                            unmentioned_fields.iter()\n+                                .map(|name| format!(\"`{}`\", name))\n+                                .collect::<Vec<String>>()\n+                                .join(\", \"))\n+                };\n                 let mut diag = struct_span_err!(tcx.sess, span, E0027,\n-                                                \"pattern does not mention field `{}`\",\n-                                                field.name);\n-                diag.span_label(span, format!(\"missing field `{}`\", field.name));\n+                                                \"pattern does not mention {}\",\n+                                                field_names);\n+                diag.span_label(span, format!(\"missing {}\", field_names));\n                 if variant.ctor_kind == CtorKind::Fn {\n                     diag.note(\"trying to match a tuple variant with a struct variant pattern\");\n                 }"}, {"sha": "c7921d2bd45889645d5aa559158430d3fc7b868b", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -326,7 +326,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     if reached_raw_pointer\n                     && !self.tcx.features().arbitrary_self_types {\n                         // this case used to be allowed by the compiler,\n-                        // so we do a future-compat lint here for the 2015 epoch\n+                        // so we do a future-compat lint here for the 2015 edition\n                         // (see https://github.com/rust-lang/rust/issues/46906)\n                         if self.tcx.sess.rust_2018() {\n                           span_err!(self.tcx.sess, span, E0908,"}, {"sha": "f86fe1fb7564363b126bfa67653a31706cdfa0f1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -1182,9 +1182,15 @@ pub fn check_item_type<'a,'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, it: &'tcx hir::Item\n     let _indenter = indenter();\n     match it.node {\n       // Consts can play a role in type-checking, so they are included here.\n-      hir::ItemStatic(..) |\n+      hir::ItemStatic(..) => {\n+        tcx.typeck_tables_of(tcx.hir.local_def_id(it.id));\n+      }\n       hir::ItemConst(..) => {\n         tcx.typeck_tables_of(tcx.hir.local_def_id(it.id));\n+        if it.attrs.iter().any(|a| a.check_name(\"wasm_custom_section\")) {\n+            let def_id = tcx.hir.local_def_id(it.id);\n+            check_const_is_u8_array(tcx, def_id, it.span);\n+        }\n       }\n       hir::ItemEnum(ref enum_definition, _) => {\n         check_enum(tcx,\n@@ -1256,6 +1262,21 @@ pub fn check_item_type<'a,'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, it: &'tcx hir::Item\n     }\n }\n \n+fn check_const_is_u8_array<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                     def_id: DefId,\n+                                     span: Span) {\n+    match tcx.type_of(def_id).sty {\n+        ty::TyArray(t, _) => {\n+            match t.sty {\n+                ty::TyUint(ast::UintTy::U8) => return,\n+                _ => {}\n+            }\n+        }\n+        _ => {}\n+    }\n+    tcx.sess.span_err(span, \"must be an array of bytes like `[u8; N]`\");\n+}\n+\n fn check_on_unimplemented<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                     trait_def_id: DefId,\n                                     item: &hir::Item) {"}, {"sha": "cfa3f5a4e0b4f259ac03990b0892c0b0822377b0", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -323,12 +323,12 @@ impl<'a> Classifier<'a> {\n             }\n \n             // Keywords are also included in the identifier set.\n-            token::Ident(ident) => {\n+            token::Ident(ident, is_raw) => {\n                 match &*ident.name.as_str() {\n-                    \"ref\" | \"mut\" => Class::RefKeyWord,\n+                    \"ref\" | \"mut\" if !is_raw => Class::RefKeyWord,\n \n-                    \"self\" |\"Self\" => Class::Self_,\n-                    \"false\" | \"true\" => Class::Bool,\n+                    \"self\" | \"Self\" => Class::Self_,\n+                    \"false\" | \"true\" if !is_raw => Class::Bool,\n \n                     \"Option\" | \"Result\" => Class::PreludeTy,\n                     \"Some\" | \"None\" | \"Ok\" | \"Err\" => Class::PreludeVal,"}, {"sha": "36eb72918221004e9da36b038e598bd5d169da47", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -282,6 +282,7 @@\n #![feature(macro_vis_matcher)]\n #![feature(needs_panic_runtime)]\n #![feature(exhaustive_patterns)]\n+#![feature(nonzero)]\n #![feature(num_bits_bytes)]\n #![feature(old_wrapping)]\n #![feature(on_unimplemented)]"}, {"sha": "6f537fd5c50e11e11de41b66058a7f572f744a1c", "filename": "src/libstd/num.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibstd%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibstd%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -21,6 +21,17 @@ pub use core::num::{FpCategory, ParseIntError, ParseFloatError, TryFromIntError}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::num::Wrapping;\n \n+#[unstable(feature = \"nonzero\", issue = \"49137\")]\n+pub use core::num::{\n+    NonZeroU8, NonZeroI8, NonZeroU16, NonZeroI16, NonZeroU32, NonZeroI32,\n+    NonZeroU64, NonZeroI64, NonZeroUsize, NonZeroIsize,\n+};\n+\n+// Change this to `#[unstable(feature = \"i128\", issue = \"35118\")]`\n+// if other NonZero* integer types are stabilizied before 128-bit integers\n+#[unstable(feature = \"nonzero\", issue = \"49137\")]\n+pub use core::num::{NonZeroU128, NonZeroI128};\n+\n #[cfg(test)] use fmt;\n #[cfg(test)] use ops::{Add, Sub, Mul, Div, Rem};\n "}, {"sha": "04d9f0b06d344efbda8cce7bebdcd6bdd835c983", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -383,42 +383,19 @@ impl IntoInner<c_int> for Socket {\n // believe it's thread-safe).\n #[cfg(target_env = \"gnu\")]\n fn on_resolver_failure() {\n+    use sys;\n+\n     // If the version fails to parse, we treat it the same as \"not glibc\".\n-    if let Some(Ok(version_str)) = glibc_version_cstr().map(CStr::to_str) {\n-        if let Some(version) = parse_glibc_version(version_str) {\n-            if version < (2, 26) {\n-                unsafe { libc::res_init() };\n-            }\n+    if let Some(version) = sys::os::glibc_version() {\n+        if version < (2, 26) {\n+            unsafe { libc::res_init() };\n         }\n     }\n }\n \n #[cfg(not(target_env = \"gnu\"))]\n fn on_resolver_failure() {}\n \n-#[cfg(target_env = \"gnu\")]\n-fn glibc_version_cstr() -> Option<&'static CStr> {\n-    weak! {\n-        fn gnu_get_libc_version() -> *const libc::c_char\n-    }\n-    if let Some(f) = gnu_get_libc_version.get() {\n-        unsafe { Some(CStr::from_ptr(f())) }\n-    } else {\n-        None\n-    }\n-}\n-\n-// Returns Some((major, minor)) if the string is a valid \"x.y\" version,\n-// ignoring any extra dot-separated parts. Otherwise return None.\n-#[cfg(target_env = \"gnu\")]\n-fn parse_glibc_version(version: &str) -> Option<(usize, usize)> {\n-    let mut parsed_ints = version.split(\".\").map(str::parse::<usize>).fuse();\n-    match (parsed_ints.next(), parsed_ints.next()) {\n-        (Some(Ok(major)), Some(Ok(minor))) => Some((major, minor)),\n-        _ => None\n-    }\n-}\n-\n #[cfg(all(test, taget_env = \"gnu\"))]\n mod test {\n     use super::*;"}, {"sha": "4c86fddee4b45c3eef51466095edc283340e9839", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -546,3 +546,35 @@ pub fn getpid() -> u32 {\n pub fn getppid() -> u32 {\n     unsafe { libc::getppid() as u32 }\n }\n+\n+#[cfg(target_env = \"gnu\")]\n+pub fn glibc_version() -> Option<(usize, usize)> {\n+    if let Some(Ok(version_str)) = glibc_version_cstr().map(CStr::to_str) {\n+        parse_glibc_version(version_str)\n+    } else {\n+        None\n+    }\n+}\n+\n+#[cfg(target_env = \"gnu\")]\n+fn glibc_version_cstr() -> Option<&'static CStr> {\n+    weak! {\n+        fn gnu_get_libc_version() -> *const libc::c_char\n+    }\n+    if let Some(f) = gnu_get_libc_version.get() {\n+        unsafe { Some(CStr::from_ptr(f())) }\n+    } else {\n+        None\n+    }\n+}\n+\n+// Returns Some((major, minor)) if the string is a valid \"x.y\" version,\n+// ignoring any extra dot-separated parts. Otherwise return None.\n+#[cfg(target_env = \"gnu\")]\n+fn parse_glibc_version(version: &str) -> Option<(usize, usize)> {\n+    let mut parsed_ints = version.split(\".\").map(str::parse::<usize>).fuse();\n+    match (parsed_ints.next(), parsed_ints.next()) {\n+        (Some(Ok(major)), Some(Ok(minor))) => Some((major, minor)),\n+        _ => None\n+    }\n+}"}, {"sha": "b7f30600b8a4c7dc3bf63c21a3cb2397510202d4", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -184,6 +184,10 @@ impl Command {\n         let maybe_env = self.env.capture_if_changed();\n         maybe_env.map(|env| construct_envp(env, &mut self.saw_nul))\n     }\n+    #[allow(dead_code)]\n+    pub fn env_saw_path(&self) -> bool {\n+        self.env.have_changed_path()\n+    }\n \n     pub fn setup_io(&self, default: Stdio, needs_stdin: bool)\n                 -> io::Result<(StdioPipes, ChildPipes)> {"}, {"sha": "9d6d607e3f3409127e08f99d95685c656de70de3", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -34,6 +34,11 @@ impl Command {\n         }\n \n         let (ours, theirs) = self.setup_io(default, needs_stdin)?;\n+\n+        if let Some(ret) = self.posix_spawn(&theirs, envp.as_ref())? {\n+            return Ok((ret, ours))\n+        }\n+\n         let (input, output) = sys::pipe::anon_pipe()?;\n \n         let pid = unsafe {\n@@ -229,6 +234,119 @@ impl Command {\n         libc::execvp(self.get_argv()[0], self.get_argv().as_ptr());\n         io::Error::last_os_error()\n     }\n+\n+    #[cfg(not(any(target_os = \"macos\", target_os = \"freebsd\",\n+                  all(target_os = \"linux\", target_env = \"gnu\"))))]\n+    fn posix_spawn(&mut self, _: &ChildPipes, _: Option<&CStringArray>)\n+        -> io::Result<Option<Process>>\n+    {\n+        Ok(None)\n+    }\n+\n+    // Only support platforms for which posix_spawn() can return ENOENT\n+    // directly.\n+    #[cfg(any(target_os = \"macos\", target_os = \"freebsd\",\n+              all(target_os = \"linux\", target_env = \"gnu\")))]\n+    fn posix_spawn(&mut self, stdio: &ChildPipes, envp: Option<&CStringArray>)\n+        -> io::Result<Option<Process>>\n+    {\n+        use mem;\n+        use sys;\n+\n+        if self.get_cwd().is_some() ||\n+            self.get_gid().is_some() ||\n+            self.get_uid().is_some() ||\n+            self.env_saw_path() ||\n+            self.get_closures().len() != 0 {\n+            return Ok(None)\n+        }\n+\n+        // Only glibc 2.24+ posix_spawn() supports returning ENOENT directly.\n+        #[cfg(all(target_os = \"linux\", target_env = \"gnu\"))]\n+        {\n+            if let Some(version) = sys::os::glibc_version() {\n+                if version < (2, 24) {\n+                    return Ok(None)\n+                }\n+            } else {\n+                return Ok(None)\n+            }\n+        }\n+\n+        let mut p = Process { pid: 0, status: None };\n+\n+        struct PosixSpawnFileActions(libc::posix_spawn_file_actions_t);\n+\n+        impl Drop for PosixSpawnFileActions {\n+            fn drop(&mut self) {\n+                unsafe {\n+                    libc::posix_spawn_file_actions_destroy(&mut self.0);\n+                }\n+            }\n+        }\n+\n+        struct PosixSpawnattr(libc::posix_spawnattr_t);\n+\n+        impl Drop for PosixSpawnattr {\n+            fn drop(&mut self) {\n+                unsafe {\n+                    libc::posix_spawnattr_destroy(&mut self.0);\n+                }\n+            }\n+        }\n+\n+        unsafe {\n+            let mut file_actions = PosixSpawnFileActions(mem::uninitialized());\n+            let mut attrs = PosixSpawnattr(mem::uninitialized());\n+\n+            libc::posix_spawnattr_init(&mut attrs.0);\n+            libc::posix_spawn_file_actions_init(&mut file_actions.0);\n+\n+            if let Some(fd) = stdio.stdin.fd() {\n+                cvt(libc::posix_spawn_file_actions_adddup2(&mut file_actions.0,\n+                                                           fd,\n+                                                           libc::STDIN_FILENO))?;\n+            }\n+            if let Some(fd) = stdio.stdout.fd() {\n+                cvt(libc::posix_spawn_file_actions_adddup2(&mut file_actions.0,\n+                                                           fd,\n+                                                           libc::STDOUT_FILENO))?;\n+            }\n+            if let Some(fd) = stdio.stderr.fd() {\n+                cvt(libc::posix_spawn_file_actions_adddup2(&mut file_actions.0,\n+                                                           fd,\n+                                                           libc::STDERR_FILENO))?;\n+            }\n+\n+            let mut set: libc::sigset_t = mem::uninitialized();\n+            cvt(libc::sigemptyset(&mut set))?;\n+            cvt(libc::posix_spawnattr_setsigmask(&mut attrs.0,\n+                                                 &set))?;\n+            cvt(libc::sigaddset(&mut set, libc::SIGPIPE))?;\n+            cvt(libc::posix_spawnattr_setsigdefault(&mut attrs.0,\n+                                                    &set))?;\n+\n+            let flags = libc::POSIX_SPAWN_SETSIGDEF |\n+                libc::POSIX_SPAWN_SETSIGMASK;\n+            cvt(libc::posix_spawnattr_setflags(&mut attrs.0, flags as _))?;\n+\n+            let envp = envp.map(|c| c.as_ptr())\n+                .unwrap_or(*sys::os::environ() as *const _);\n+            let ret = libc::posix_spawnp(\n+                &mut p.pid,\n+                self.get_argv()[0],\n+                &file_actions.0,\n+                &attrs.0,\n+                self.get_argv().as_ptr() as *const _,\n+                envp as *const _,\n+            );\n+            if ret == 0 {\n+                Ok(Some(p))\n+            } else {\n+                Err(io::Error::from_raw_os_error(ret))\n+            }\n+        }\n+    }\n }\n \n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "d0c5951bd6c0a4d141d7174648b8fe9e1883169f", "filename": "src/libstd/sys_common/process.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibstd%2Fsys_common%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibstd%2Fsys_common%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fprocess.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -47,13 +47,15 @@ impl EnvKey for DefaultEnvKey {}\n #[derive(Clone, Debug)]\n pub struct CommandEnv<K> {\n     clear: bool,\n+    saw_path: bool,\n     vars: BTreeMap<K, Option<OsString>>\n }\n \n impl<K: EnvKey> Default for CommandEnv<K> {\n     fn default() -> Self {\n         CommandEnv {\n             clear: false,\n+            saw_path: false,\n             vars: Default::default()\n         }\n     }\n@@ -108,9 +110,11 @@ impl<K: EnvKey> CommandEnv<K> {\n \n     // The following functions build up changes\n     pub fn set(&mut self, key: &OsStr, value: &OsStr) {\n+        self.maybe_saw_path(&key);\n         self.vars.insert(key.to_owned().into(), Some(value.to_owned()));\n     }\n     pub fn remove(&mut self, key: &OsStr) {\n+        self.maybe_saw_path(&key);\n         if self.clear {\n             self.vars.remove(key);\n         } else {\n@@ -121,4 +125,12 @@ impl<K: EnvKey> CommandEnv<K> {\n         self.clear = true;\n         self.vars.clear();\n     }\n+    pub fn have_changed_path(&self) -> bool {\n+        self.saw_path || self.clear\n+    }\n+    fn maybe_saw_path(&mut self, key: &OsStr) {\n+        if !self.saw_path && key == \"PATH\" {\n+            self.saw_path = true;\n+        }\n+    }\n }"}, {"sha": "a3af6b247ee2f96b463644e1737603ac23aac77a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -112,7 +112,7 @@ impl Path {\n     // or starts with something like `self`/`super`/`$crate`/etc.\n     pub fn make_root(&self) -> Option<PathSegment> {\n         if let Some(ident) = self.segments.get(0).map(|seg| seg.identifier) {\n-            if ::parse::token::Ident(ident).is_path_segment_keyword() &&\n+            if ::parse::token::is_path_segment_keyword(ident) &&\n                ident.name != keywords::Crate.name() {\n                 return None;\n             }"}, {"sha": "5954b9eb2747552aa323085bcab5222e6375ce27", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -1106,17 +1106,18 @@ impl IntType {\n \n impl MetaItem {\n     fn tokens(&self) -> TokenStream {\n-        let ident = TokenTree::Token(self.span, Token::Ident(Ident::with_empty_ctxt(self.name)));\n+        let ident = TokenTree::Token(self.span,\n+                                     Token::from_ast_ident(Ident::with_empty_ctxt(self.name)));\n         TokenStream::concat(vec![ident.into(), self.node.tokens(self.span)])\n     }\n \n     fn from_tokens<I>(tokens: &mut iter::Peekable<I>) -> Option<MetaItem>\n         where I: Iterator<Item = TokenTree>,\n     {\n         let (span, name) = match tokens.next() {\n-            Some(TokenTree::Token(span, Token::Ident(ident))) => (span, ident.name),\n+            Some(TokenTree::Token(span, Token::Ident(ident, _))) => (span, ident.name),\n             Some(TokenTree::Token(_, Token::Interpolated(ref nt))) => match nt.0 {\n-                token::Nonterminal::NtIdent(ident) => (ident.span, ident.node.name),\n+                token::Nonterminal::NtIdent(ident, _) => (ident.span, ident.node.name),\n                 token::Nonterminal::NtMeta(ref meta) => return Some(meta.clone()),\n                 _ => return None,\n             },\n@@ -1269,14 +1270,14 @@ impl LitKind {\n                 \"true\"\n             } else {\n                 \"false\"\n-            }))),\n+            })), false),\n         }\n     }\n \n     fn from_token(token: Token) -> Option<LitKind> {\n         match token {\n-            Token::Ident(ident) if ident.name == \"true\" => Some(LitKind::Bool(true)),\n-            Token::Ident(ident) if ident.name == \"false\" => Some(LitKind::Bool(false)),\n+            Token::Ident(ident, false) if ident.name == \"true\" => Some(LitKind::Bool(true)),\n+            Token::Ident(ident, false) if ident.name == \"false\" => Some(LitKind::Bool(false)),\n             Token::Interpolated(ref nt) => match nt.0 {\n                 token::NtExpr(ref v) => match v.node {\n                     ExprKind::Lit(ref lit) => Some(lit.node.clone()),"}, {"sha": "56b1306e5b33f2336980a805fa02db46cf6c6f73", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -13,7 +13,7 @@ use feature_gate::{feature_err, EXPLAIN_STMT_ATTR_SYNTAX, Features, get_features\n use {fold, attr};\n use ast;\n use codemap::Spanned;\n-use epoch::Epoch;\n+use edition::Edition;\n use parse::{token, ParseSess};\n \n use ptr::P;\n@@ -27,7 +27,7 @@ pub struct StripUnconfigured<'a> {\n }\n \n // `cfg_attr`-process the crate's attributes and compute the crate's features.\n-pub fn features(mut krate: ast::Crate, sess: &ParseSess, should_test: bool, epoch: Epoch)\n+pub fn features(mut krate: ast::Crate, sess: &ParseSess, should_test: bool, edition: Edition)\n                 -> (ast::Crate, Features) {\n     let features;\n     {\n@@ -47,7 +47,7 @@ pub fn features(mut krate: ast::Crate, sess: &ParseSess, should_test: bool, epoc\n             return (krate, Features::new());\n         }\n \n-        features = get_features(&sess.span_diagnostic, &krate.attrs, epoch);\n+        features = get_features(&sess.span_diagnostic, &krate.attrs, edition);\n \n         // Avoid reconfiguring malformed `cfg_attr`s\n         if err_count == sess.span_diagnostic.err_count() {"}, {"sha": "aecf32ab6afb773d19b90327b934c6ee6267f5aa", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -44,7 +44,7 @@ pub fn expand_diagnostic_used<'cx>(ecx: &'cx mut ExtCtxt,\n                                    token_tree: &[TokenTree])\n                                    -> Box<MacResult+'cx> {\n     let code = match (token_tree.len(), token_tree.get(0)) {\n-        (1, Some(&TokenTree::Token(_, token::Ident(code)))) => code,\n+        (1, Some(&TokenTree::Token(_, token::Ident(code, _)))) => code,\n         _ => unreachable!()\n     };\n \n@@ -82,10 +82,10 @@ pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt,\n         token_tree.get(1),\n         token_tree.get(2)\n     ) {\n-        (1, Some(&TokenTree::Token(_, token::Ident(ref code))), None, None) => {\n+        (1, Some(&TokenTree::Token(_, token::Ident(ref code, _))), None, None) => {\n             (code, None)\n         },\n-        (3, Some(&TokenTree::Token(_, token::Ident(ref code))),\n+        (3, Some(&TokenTree::Token(_, token::Ident(ref code, _))),\n             Some(&TokenTree::Token(_, token::Comma)),\n             Some(&TokenTree::Token(_, token::Literal(token::StrRaw(description, _), None)))) => {\n             (code, Some(description))\n@@ -150,9 +150,9 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n     let (crate_name, name) = match (&token_tree[0], &token_tree[2]) {\n         (\n             // Crate name.\n-            &TokenTree::Token(_, token::Ident(ref crate_name)),\n+            &TokenTree::Token(_, token::Ident(ref crate_name, _)),\n             // DIAGNOSTICS ident.\n-            &TokenTree::Token(_, token::Ident(ref name))\n+            &TokenTree::Token(_, token::Ident(ref name, _))\n         ) => (*&crate_name, name),\n         _ => unreachable!()\n     };"}, {"sha": "61246d4493ca387810f5004941ba1f5324061dbd", "filename": "src/libsyntax/edition.rs", "status": "renamed", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fedition.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -11,58 +11,58 @@\n use std::fmt;\n use std::str::FromStr;\n \n-/// The epoch of the compiler (RFC 2052)\n+/// The edition of the compiler (RFC 2052)\n #[derive(Clone, Copy, Hash, PartialOrd, Ord, Eq, PartialEq, Debug)]\n #[non_exhaustive]\n-pub enum Epoch {\n-    // epochs must be kept in order, newest to oldest\n+pub enum Edition {\n+    // editions must be kept in order, newest to oldest\n \n-    /// The 2015 epoch\n-    Epoch2015,\n-    /// The 2018 epoch\n-    Epoch2018,\n+    /// The 2015 edition\n+    Edition2015,\n+    /// The 2018 edition\n+    Edition2018,\n \n-    // when adding new epochs, be sure to update:\n+    // when adding new editions, be sure to update:\n     //\n-    // - the list in the `parse_epoch` static in librustc::session::config\n+    // - the list in the `parse_edition` static in librustc::session::config\n     // - add a `rust_####()` function to the session\n     // - update the enum in Cargo's sources as well\n     //\n-    // When -Zepoch becomes --epoch, there will\n-    // also be a check for the epoch being nightly-only\n+    // When -Zedition becomes --edition, there will\n+    // also be a check for the edition being nightly-only\n     // somewhere. That will need to be updated\n-    // whenever we're stabilizing/introducing a new epoch\n+    // whenever we're stabilizing/introducing a new edition\n     // as well as changing the default Cargo template.\n }\n \n // must be in order from oldest to newest\n-pub const ALL_EPOCHS: &[Epoch] = &[Epoch::Epoch2015, Epoch::Epoch2018];\n+pub const ALL_EDITIONS: &[Edition] = &[Edition::Edition2015, Edition::Edition2018];\n \n-impl fmt::Display for Epoch {\n+impl fmt::Display for Edition {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let s = match *self {\n-            Epoch::Epoch2015 => \"2015\",\n-            Epoch::Epoch2018 => \"2018\",\n+            Edition::Edition2015 => \"2015\",\n+            Edition::Edition2018 => \"2018\",\n         };\n         write!(f, \"{}\", s)\n     }\n }\n \n-impl Epoch {\n+impl Edition {\n     pub fn lint_name(&self) -> &'static str {\n         match *self {\n-            Epoch::Epoch2015 => \"epoch_2015\",\n-            Epoch::Epoch2018 => \"epoch_2018\",\n+            Edition::Edition2015 => \"edition_2015\",\n+            Edition::Edition2018 => \"edition_2018\",\n         }\n     }\n }\n \n-impl FromStr for Epoch {\n+impl FromStr for Edition {\n     type Err = ();\n     fn from_str(s: &str) -> Result<Self, ()> {\n         match s {\n-            \"2015\" => Ok(Epoch::Epoch2015),\n-            \"2018\" => Ok(Epoch::Epoch2018),\n+            \"2015\" => Ok(Edition::Edition2015),\n+            \"2018\" => Ok(Edition::Edition2018),\n             _ => Err(())\n         }\n     }", "previous_filename": "src/libsyntax/epoch.rs"}, {"sha": "c3ae0fd2ca863469101f8c3918228889d445383e", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -229,8 +229,9 @@ impl<F> TTMacroExpander for F\n         impl Folder for AvoidInterpolatedIdents {\n             fn fold_tt(&mut self, tt: tokenstream::TokenTree) -> tokenstream::TokenTree {\n                 if let tokenstream::TokenTree::Token(_, token::Interpolated(ref nt)) = tt {\n-                    if let token::NtIdent(ident) = nt.0 {\n-                        return tokenstream::TokenTree::Token(ident.span, token::Ident(ident.node));\n+                    if let token::NtIdent(ident, is_raw) = nt.0 {\n+                        return tokenstream::TokenTree::Token(ident.span,\n+                                                             token::Ident(ident.node, is_raw));\n                     }\n                 }\n                 fold::noop_fold_tt(tt, self)"}, {"sha": "540a03ff032ffef2527e5395d99cad058fb08975", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -75,7 +75,7 @@ pub mod rt {\n \n     impl ToTokens for ast::Ident {\n         fn to_tokens(&self, _cx: &ExtCtxt) -> Vec<TokenTree> {\n-            vec![TokenTree::Token(DUMMY_SP, token::Ident(*self))]\n+            vec![TokenTree::Token(DUMMY_SP, Token::from_ast_ident(*self))]\n         }\n     }\n \n@@ -238,7 +238,9 @@ pub mod rt {\n                 if i > 0 {\n                     inner.push(TokenTree::Token(self.span, token::Colon).into());\n                 }\n-                inner.push(TokenTree::Token(self.span, token::Ident(segment.identifier)).into());\n+                inner.push(TokenTree::Token(\n+                    self.span, token::Token::from_ast_ident(segment.identifier)\n+                ).into());\n             }\n             inner.push(self.tokens.clone());\n \n@@ -658,10 +660,10 @@ fn expr_mk_token(cx: &ExtCtxt, sp: Span, tok: &token::Token) -> P<ast::Expr> {\n         token::Literal(token::ByteStr(i), suf) => return mk_lit!(\"ByteStr\", suf, i),\n         token::Literal(token::ByteStrRaw(i, n), suf) => return mk_lit!(\"ByteStrRaw\", suf, i, n),\n \n-        token::Ident(ident) => {\n+        token::Ident(ident, is_raw) => {\n             return cx.expr_call(sp,\n                                 mk_token_path(cx, sp, \"Ident\"),\n-                                vec![mk_ident(cx, sp, ident)]);\n+                                vec![mk_ident(cx, sp, ident), cx.expr_bool(sp, is_raw)]);\n         }\n \n         token::Lifetime(ident) => {\n@@ -720,7 +722,7 @@ fn expr_mk_token(cx: &ExtCtxt, sp: Span, tok: &token::Token) -> P<ast::Expr> {\n \n fn statements_mk_tt(cx: &ExtCtxt, tt: &TokenTree, quoted: bool) -> Vec<ast::Stmt> {\n     match *tt {\n-        TokenTree::Token(sp, token::Ident(ident)) if quoted => {\n+        TokenTree::Token(sp, token::Ident(ident, _)) if quoted => {\n             // tt.extend($ident.to_tokens(ext_cx))\n \n             let e_to_toks ="}, {"sha": "8cb331c65da2871c5ffca5f7a7d178bff1a08c0b", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -364,8 +364,8 @@ pub fn parse_failure_msg(tok: Token) -> String {\n \n /// Perform a token equality check, ignoring syntax context (that is, an unhygienic comparison)\n fn token_name_eq(t1: &Token, t2: &Token) -> bool {\n-    if let (Some(id1), Some(id2)) = (t1.ident(), t2.ident()) {\n-        id1.name == id2.name\n+    if let (Some((id1, is_raw1)), Some((id2, is_raw2))) = (t1.ident(), t2.ident()) {\n+        id1.name == id2.name && is_raw1 == is_raw2\n     } else if let (&token::Lifetime(id1), &token::Lifetime(id2)) = (t1, t2) {\n         id1.name == id2.name\n     } else {\n@@ -711,9 +711,10 @@ pub fn parse(\n \n /// The token is an identifier, but not `_`.\n /// We prohibit passing `_` to macros expecting `ident` for now.\n-fn get_macro_ident(token: &Token) -> Option<Ident> {\n+fn get_macro_ident(token: &Token) -> Option<(Ident, bool)> {\n     match *token {\n-        token::Ident(ident) if ident.name != keywords::Underscore.name() => Some(ident),\n+        token::Ident(ident, is_raw) if ident.name != keywords::Underscore.name() =>\n+            Some((ident, is_raw)),\n         _ => None,\n     }\n }\n@@ -737,7 +738,7 @@ fn may_begin_with(name: &str, token: &Token) -> bool {\n         \"ident\" => get_macro_ident(token).is_some(),\n         \"vis\" => match *token {\n             // The follow-set of :vis + \"priv\" keyword + interpolated\n-            Token::Comma | Token::Ident(_) | Token::Interpolated(_) => true,\n+            Token::Comma | Token::Ident(..) | Token::Interpolated(_) => true,\n             _ => token.can_begin_type(),\n         },\n         \"block\" => match *token {\n@@ -746,7 +747,7 @@ fn may_begin_with(name: &str, token: &Token) -> bool {\n                 token::NtItem(_)\n                 | token::NtPat(_)\n                 | token::NtTy(_)\n-                | token::NtIdent(_)\n+                | token::NtIdent(..)\n                 | token::NtMeta(_)\n                 | token::NtPath(_)\n                 | token::NtVis(_) => false, // none of these may start with '{'.\n@@ -755,15 +756,15 @@ fn may_begin_with(name: &str, token: &Token) -> bool {\n             _ => false,\n         },\n         \"path\" | \"meta\" => match *token {\n-            Token::ModSep | Token::Ident(_) => true,\n+            Token::ModSep | Token::Ident(..) => true,\n             Token::Interpolated(ref nt) => match nt.0 {\n                 token::NtPath(_) | token::NtMeta(_) => true,\n                 _ => may_be_ident(&nt.0),\n             },\n             _ => false,\n         },\n         \"pat\" => match *token {\n-            Token::Ident(_) |               // box, ref, mut, and other identifiers (can stricten)\n+            Token::Ident(..) |               // box, ref, mut, and other identifiers (can stricten)\n             Token::OpenDelim(token::Paren) |    // tuple pattern\n             Token::OpenDelim(token::Bracket) |  // slice pattern\n             Token::BinOp(token::And) |          // reference\n@@ -823,9 +824,9 @@ fn parse_nt<'a>(p: &mut Parser<'a>, sp: Span, name: &str) -> Nonterminal {\n         \"expr\" => token::NtExpr(panictry!(p.parse_expr())),\n         \"ty\" => token::NtTy(panictry!(p.parse_ty())),\n         // this could be handled like a token, since it is one\n-        \"ident\" => if let Some(ident) = get_macro_ident(&p.token) {\n+        \"ident\" => if let Some((ident, is_raw)) = get_macro_ident(&p.token) {\n             p.bump();\n-            token::NtIdent(respan(p.prev_span, ident))\n+            token::NtIdent(respan(p.prev_span, ident), is_raw)\n         } else {\n             let token_str = pprust::token_to_string(&p.token);\n             p.fatal(&format!(\"expected ident, found {}\", &token_str)).emit();"}, {"sha": "10e5926eb9e36d45667f31fcb038d5e610873419", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -831,7 +831,7 @@ fn is_in_follow(tok: &quoted::TokenTree, frag: &str) -> Result<bool, (String, &'\n             \"pat\" => match *tok {\n                 TokenTree::Token(_, ref tok) => match *tok {\n                     FatArrow | Comma | Eq | BinOp(token::Or) => Ok(true),\n-                    Ident(i) if i.name == \"if\" || i.name == \"in\" => Ok(true),\n+                    Ident(i, false) if i.name == \"if\" || i.name == \"in\" => Ok(true),\n                     _ => Ok(false)\n                 },\n                 _ => Ok(false),\n@@ -840,7 +840,7 @@ fn is_in_follow(tok: &quoted::TokenTree, frag: &str) -> Result<bool, (String, &'\n                 TokenTree::Token(_, ref tok) => match *tok {\n                     OpenDelim(token::DelimToken::Brace) | OpenDelim(token::DelimToken::Bracket) |\n                     Comma | FatArrow | Colon | Eq | Gt | Semi | BinOp(token::Or) => Ok(true),\n-                    Ident(i) if i.name == \"as\" || i.name == \"where\" => Ok(true),\n+                    Ident(i, false) if i.name == \"as\" || i.name == \"where\" => Ok(true),\n                     _ => Ok(false)\n                 },\n                 TokenTree::MetaVarDecl(_, _, frag) if frag.name == \"block\" => Ok(true),\n@@ -860,7 +860,7 @@ fn is_in_follow(tok: &quoted::TokenTree, frag: &str) -> Result<bool, (String, &'\n                 match *tok {\n                     TokenTree::Token(_, ref tok) => match *tok {\n                         Comma => Ok(true),\n-                        Ident(i) if i.name != \"priv\" => Ok(true),\n+                        Ident(i, is_raw) if is_raw || i.name != \"priv\" => Ok(true),\n                         ref tok => Ok(tok.can_begin_type())\n                     },\n                     TokenTree::MetaVarDecl(_, _, frag) if frag.name == \"ident\""}, {"sha": "f324edeb1178ad49db4d4fc6e9f9cda20dc56be6", "filename": "src/libsyntax/ext/tt/quoted.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -200,7 +200,7 @@ pub fn parse(\n                 let span = match trees.next() {\n                     Some(tokenstream::TokenTree::Token(span, token::Colon)) => match trees.next() {\n                         Some(tokenstream::TokenTree::Token(end_sp, ref tok)) => match tok.ident() {\n-                            Some(kind) => {\n+                            Some((kind, _)) => {\n                                 let span = end_sp.with_lo(start_sp.lo());\n                                 result.push(TokenTree::MetaVarDecl(span, ident, kind));\n                                 continue;\n@@ -289,14 +289,14 @@ where\n             // `tree` is followed by an `ident`. This could be `$meta_var` or the `$crate` special\n             // metavariable that names the crate of the invokation.\n             Some(tokenstream::TokenTree::Token(ident_span, ref token)) if token.is_ident() => {\n-                let ident = token.ident().unwrap();\n+                let (ident, _) = token.ident().unwrap();\n                 let span = ident_span.with_lo(span.lo());\n                 if ident.name == keywords::Crate.name() {\n                     let ident = ast::Ident {\n                         name: keywords::DollarCrate.name(),\n                         ..ident\n                     };\n-                    TokenTree::Token(span, token::Ident(ident))\n+                    TokenTree::Token(span, token::Ident(ident, false))\n                 } else {\n                     TokenTree::MetaVar(span, ident)\n                 }"}, {"sha": "3f01d5ec6dd876e1117ea9c030206968d1f3ffbc", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -169,7 +169,7 @@ pub fn transcribe(cx: &ExtCtxt,\n                         Ident { ctxt: ident.ctxt.apply_mark(cx.current_expansion.mark), ..ident };\n                     sp = sp.with_ctxt(sp.ctxt().apply_mark(cx.current_expansion.mark));\n                     result.push(TokenTree::Token(sp, token::Dollar).into());\n-                    result.push(TokenTree::Token(sp, token::Ident(ident)).into());\n+                    result.push(TokenTree::Token(sp, token::Token::from_ast_ident(ident)).into());\n                 }\n             }\n             quoted::TokenTree::Delimited(mut span, delimited) => {"}, {"sha": "69612054ae3daf84c1d1f79982be2fdf888485de", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 39, "deletions": 10, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -28,7 +28,7 @@ use self::AttributeGate::*;\n use abi::Abi;\n use ast::{self, NodeId, PatKind, RangeEnd};\n use attr;\n-use epoch::Epoch;\n+use edition::Edition;\n use codemap::Spanned;\n use syntax_pos::{Span, DUMMY_SP};\n use errors::{DiagnosticBuilder, Handler, FatalError};\n@@ -55,13 +55,13 @@ macro_rules! set {\n }\n \n macro_rules! declare_features {\n-    ($((active, $feature: ident, $ver: expr, $issue: expr, $epoch: expr),)+) => {\n+    ($((active, $feature: ident, $ver: expr, $issue: expr, $edition: expr),)+) => {\n         /// Represents active features that are currently being implemented or\n         /// currently being considered for addition/removal.\n         const ACTIVE_FEATURES:\n                 &'static [(&'static str, &'static str, Option<u32>,\n-                           Option<Epoch>, fn(&mut Features, Span))] =\n-            &[$((stringify!($feature), $ver, $issue, $epoch, set!($feature))),+];\n+                           Option<Edition>, fn(&mut Features, Span))] =\n+            &[$((stringify!($feature), $ver, $issue, $edition, set!($feature))),+];\n \n         /// A set of features to be used by later passes.\n         #[derive(Clone)]\n@@ -402,7 +402,7 @@ declare_features! (\n     (active, match_default_bindings, \"1.22.0\", Some(42640), None),\n \n     // Trait object syntax with `dyn` prefix\n-    (active, dyn_trait, \"1.22.0\", Some(44662), Some(Epoch::Epoch2018)),\n+    (active, dyn_trait, \"1.22.0\", Some(44662), Some(Edition::Edition2018)),\n \n     // `crate` as visibility modifier, synonymous to `pub(crate)`\n     (active, crate_visibility_modifier, \"1.23.0\", Some(45388), None),\n@@ -451,6 +451,15 @@ declare_features! (\n \n     // `use path as _;` and `extern crate c as _;`\n     (active, underscore_imports, \"1.26.0\", Some(48216), None),\n+\n+    // The #[wasm_custom_section] attribute\n+    (active, wasm_custom_section, \"1.26.0\", None, None),\n+\n+    // The #![wasm_import_module] attribute\n+    (active, wasm_import_module, \"1.26.0\", None, None),\n+\n+    // Allows keywords to be escaped for use as identifiers\n+    (active, raw_identifiers, \"1.26.0\", Some(48589), None),\n );\n \n declare_features! (\n@@ -917,6 +926,10 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n         \"the `#[no_debug]` attribute was an experimental feature that has been \\\n          deprecated due to lack of demand\",\n         cfg_fn!(no_debug))),\n+    (\"wasm_import_module\", Normal, Gated(Stability::Unstable,\n+                                 \"wasm_import_module\",\n+                                 \"experimental attribute\",\n+                                 cfg_fn!(wasm_import_module))),\n     (\"omit_gdb_pretty_printer_section\", Whitelisted, Gated(Stability::Unstable,\n                                                        \"omit_gdb_pretty_printer_section\",\n                                                        \"the `#[omit_gdb_pretty_printer_section]` \\\n@@ -1004,6 +1017,11 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                  \"never will be stable\",\n                                  cfg_fn!(rustc_attrs))),\n \n+    (\"wasm_custom_section\", Whitelisted, Gated(Stability::Unstable,\n+                                 \"wasm_custom_section\",\n+                                 \"attribute is currently unstable\",\n+                                 cfg_fn!(wasm_custom_section))),\n+\n     // Crate level attributes\n     (\"crate_name\", CrateLevel, Ungated),\n     (\"crate_type\", CrateLevel, Ungated),\n@@ -1800,16 +1818,16 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n }\n \n pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n-                    epoch: Epoch) -> Features {\n+                    edition: Edition) -> Features {\n     let mut features = Features::new();\n \n     let mut feature_checker = FeatureChecker::default();\n \n-    for &(.., f_epoch, set) in ACTIVE_FEATURES.iter() {\n-        if let Some(f_epoch) = f_epoch {\n-            if epoch >= f_epoch {\n+    for &(.., f_edition, set) in ACTIVE_FEATURES.iter() {\n+        if let Some(f_edition) = f_edition {\n+            if edition >= f_edition {\n                 // FIXME(Manishearth) there is currently no way to set\n-                // lang features by epoch\n+                // lang features by edition\n                 set(&mut features, DUMMY_SP);\n             }\n         }\n@@ -1926,6 +1944,17 @@ pub fn check_crate(krate: &ast::Crate,\n         parse_sess: sess,\n         plugin_attributes,\n     };\n+\n+    if !features.raw_identifiers {\n+        for &span in sess.raw_identifier_spans.borrow().iter() {\n+            if !span.allows_unstable() {\n+                gate_feature!(&ctx, raw_identifiers, span,\n+                    \"raw identifiers are experimental and subject to change\"\n+                );\n+            }\n+        }\n+    }\n+\n     let visitor = &mut PostExpansionVisitor { context: &ctx };\n     visitor.whole_crate_feature_gates(krate);\n     visit::walk_crate(visitor, krate);"}, {"sha": "05a3150c139c92a753fbe87cf67b08372f150e01", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -578,7 +578,7 @@ pub fn noop_fold_tts<T: Folder>(tts: TokenStream, fld: &mut T) -> TokenStream {\n // apply ident folder if it's an ident, apply other folds to interpolated nodes\n pub fn noop_fold_token<T: Folder>(t: token::Token, fld: &mut T) -> token::Token {\n     match t {\n-        token::Ident(id) => token::Ident(fld.fold_ident(id)),\n+        token::Ident(id, is_raw) => token::Ident(fld.fold_ident(id), is_raw),\n         token::Lifetime(id) => token::Lifetime(fld.fold_ident(id)),\n         token::Interpolated(nt) => {\n             let nt = match Lrc::try_unwrap(nt) {\n@@ -630,7 +630,8 @@ pub fn noop_fold_interpolated<T: Folder>(nt: token::Nonterminal, fld: &mut T)\n         token::NtPat(pat) => token::NtPat(fld.fold_pat(pat)),\n         token::NtExpr(expr) => token::NtExpr(fld.fold_expr(expr)),\n         token::NtTy(ty) => token::NtTy(fld.fold_ty(ty)),\n-        token::NtIdent(id) => token::NtIdent(Spanned::<Ident>{node: fld.fold_ident(id.node), ..id}),\n+        token::NtIdent(id, is_raw) =>\n+            token::NtIdent(Spanned::<Ident>{node: fld.fold_ident(id.node), ..id}, is_raw),\n         token::NtMeta(meta) => token::NtMeta(fld.fold_meta_item(meta)),\n         token::NtPath(path) => token::NtPath(fld.fold_path(path)),\n         token::NtTT(tt) => token::NtTT(fld.fold_tt(tt)),"}, {"sha": "74f1ee373ec635afca4369065565c2b115eb58e8", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -145,7 +145,7 @@ pub mod codemap;\n #[macro_use]\n pub mod config;\n pub mod entry;\n-pub mod epoch;\n+pub mod edition;\n pub mod feature_gate;\n pub mod fold;\n pub mod parse;"}, {"sha": "068929c8948df983ef3eb17bc2573922bebab8d1", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 51, "deletions": 23, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -14,7 +14,7 @@ use codemap::{CodeMap, FilePathMapping};\n use errors::{FatalError, DiagnosticBuilder};\n use parse::{token, ParseSess};\n use str::char_at;\n-use symbol::Symbol;\n+use symbol::{Symbol, keywords};\n use std_unicode::property::Pattern_White_Space;\n \n use std::borrow::Cow;\n@@ -1115,26 +1115,53 @@ impl<'a> StringReader<'a> {\n     /// token, and updates the interner\n     fn next_token_inner(&mut self) -> Result<token::Token, ()> {\n         let c = self.ch;\n-        if ident_start(c) &&\n-           match (c.unwrap(), self.nextch(), self.nextnextch()) {\n-            // Note: r as in r\" or r#\" is part of a raw string literal,\n-            // b as in b' is part of a byte literal.\n-            // They are not identifiers, and are handled further down.\n-            ('r', Some('\"'), _) |\n-            ('r', Some('#'), _) |\n-            ('b', Some('\"'), _) |\n-            ('b', Some('\\''), _) |\n-            ('b', Some('r'), Some('\"')) |\n-            ('b', Some('r'), Some('#')) => false,\n-            _ => true,\n-        } {\n-            let start = self.pos;\n-            while ident_continue(self.ch) {\n-                self.bump();\n-            }\n \n-            // FIXME: perform NFKC normalization here. (Issue #2253)\n-            return Ok(self.with_str_from(start, |string| token::Ident(self.mk_ident(string))));\n+        if ident_start(c) {\n+            let (is_ident_start, is_raw_ident) =\n+                match (c.unwrap(), self.nextch(), self.nextnextch()) {\n+                    // r# followed by an identifier starter is a raw identifier.\n+                    // This is an exception to the r# case below.\n+                    ('r', Some('#'), x) if ident_start(x) => (true, true),\n+                    // r as in r\" or r#\" is part of a raw string literal.\n+                    // b as in b' is part of a byte literal.\n+                    // They are not identifiers, and are handled further down.\n+                    ('r', Some('\"'), _) |\n+                    ('r', Some('#'), _) |\n+                    ('b', Some('\"'), _) |\n+                    ('b', Some('\\''), _) |\n+                    ('b', Some('r'), Some('\"')) |\n+                    ('b', Some('r'), Some('#')) => (false, false),\n+                    _ => (true, false),\n+                };\n+            if is_ident_start {\n+                let raw_start = self.pos;\n+                if is_raw_ident {\n+                    // Consume the 'r#' characters.\n+                    self.bump();\n+                    self.bump();\n+                }\n+\n+                let start = self.pos;\n+                while ident_continue(self.ch) {\n+                    self.bump();\n+                }\n+\n+                return Ok(self.with_str_from(start, |string| {\n+                    // FIXME: perform NFKC normalization here. (Issue #2253)\n+                    let ident = self.mk_ident(string);\n+                    if is_raw_ident && (token::is_path_segment_keyword(ident) ||\n+                                        ident.name == keywords::Underscore.name()) {\n+                        self.fatal_span_(raw_start, self.pos,\n+                            &format!(\"`r#{}` is not currently supported.\", ident.name)\n+                        ).raise();\n+                    }\n+                    if is_raw_ident {\n+                        let span = self.mk_sp(raw_start, self.pos);\n+                        self.sess.raw_identifier_spans.borrow_mut().push(span);\n+                    }\n+                    token::Ident(ident, is_raw_ident)\n+                }));\n+            }\n         }\n \n         if is_dec_digit(c) {\n@@ -1773,6 +1800,7 @@ mod tests {\n             included_mod_stack: RefCell::new(Vec::new()),\n             code_map: cm,\n             missing_fragment_specifiers: RefCell::new(HashSet::new()),\n+            raw_identifier_spans: RefCell::new(Vec::new()),\n             registered_diagnostics: Lock::new(ErrorMap::new()),\n             non_modrs_mods: RefCell::new(vec![]),\n         }\n@@ -1801,7 +1829,7 @@ mod tests {\n             assert_eq!(string_reader.next_token().tok, token::Whitespace);\n             let tok1 = string_reader.next_token();\n             let tok2 = TokenAndSpan {\n-                tok: token::Ident(id),\n+                tok: token::Ident(id, false),\n                 sp: Span::new(BytePos(21), BytePos(23), NO_EXPANSION),\n             };\n             assert_eq!(tok1, tok2);\n@@ -1811,7 +1839,7 @@ mod tests {\n             // read another token:\n             let tok3 = string_reader.next_token();\n             let tok4 = TokenAndSpan {\n-                tok: token::Ident(Ident::from_str(\"main\")),\n+                tok: mk_ident(\"main\"),\n                 sp: Span::new(BytePos(24), BytePos(28), NO_EXPANSION),\n             };\n             assert_eq!(tok3, tok4);\n@@ -1830,7 +1858,7 @@ mod tests {\n \n     // make the identifier by looking up the string in the interner\n     fn mk_ident(id: &str) -> token::Token {\n-        token::Ident(Ident::from_str(id))\n+        token::Token::from_ast_ident(Ident::from_str(id))\n     }\n \n     #[test]"}, {"sha": "7b39db16ac2c84ff9758ee3b0415332b020c0a58", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -48,6 +48,9 @@ pub struct ParseSess {\n     pub unstable_features: UnstableFeatures,\n     pub config: CrateConfig,\n     pub missing_fragment_specifiers: RefCell<HashSet<Span>>,\n+    /// Places where raw identifiers were used. This is used for feature gating\n+    /// raw identifiers\n+    pub raw_identifier_spans: RefCell<Vec<Span>>,\n     /// The registered diagnostics codes\n     pub registered_diagnostics: Lock<ErrorMap>,\n     // Spans where a `mod foo;` statement was included in a non-mod.rs file.\n@@ -74,6 +77,7 @@ impl ParseSess {\n             unstable_features: UnstableFeatures::from_environment(),\n             config: HashSet::new(),\n             missing_fragment_specifiers: RefCell::new(HashSet::new()),\n+            raw_identifier_spans: RefCell::new(Vec::new()),\n             registered_diagnostics: Lock::new(ErrorMap::new()),\n             included_mod_stack: RefCell::new(vec![]),\n             code_map,\n@@ -739,9 +743,9 @@ mod tests {\n             match (tts.len(), tts.get(0), tts.get(1), tts.get(2), tts.get(3)) {\n                 (\n                     4,\n-                    Some(&TokenTree::Token(_, token::Ident(name_macro_rules))),\n+                    Some(&TokenTree::Token(_, token::Ident(name_macro_rules, false))),\n                     Some(&TokenTree::Token(_, token::Not)),\n-                    Some(&TokenTree::Token(_, token::Ident(name_zip))),\n+                    Some(&TokenTree::Token(_, token::Ident(name_zip, false))),\n                     Some(&TokenTree::Delimited(_, ref macro_delimed)),\n                 )\n                 if name_macro_rules.name == \"macro_rules\"\n@@ -760,7 +764,7 @@ mod tests {\n                                 (\n                                     2,\n                                     Some(&TokenTree::Token(_, token::Dollar)),\n-                                    Some(&TokenTree::Token(_, token::Ident(ident))),\n+                                    Some(&TokenTree::Token(_, token::Ident(ident, false))),\n                                 )\n                                 if first_delimed.delim == token::Paren && ident.name == \"a\" => {},\n                                 _ => panic!(\"value 3: {:?}\", *first_delimed),\n@@ -770,7 +774,7 @@ mod tests {\n                                 (\n                                     2,\n                                     Some(&TokenTree::Token(_, token::Dollar)),\n-                                    Some(&TokenTree::Token(_, token::Ident(ident))),\n+                                    Some(&TokenTree::Token(_, token::Ident(ident, false))),\n                                 )\n                                 if second_delimed.delim == token::Paren\n                                 && ident.name == \"a\" => {},\n@@ -791,25 +795,27 @@ mod tests {\n             let tts = string_to_stream(\"fn a (b : i32) { b; }\".to_string());\n \n             let expected = TokenStream::concat(vec![\n-                TokenTree::Token(sp(0, 2), token::Ident(Ident::from_str(\"fn\"))).into(),\n-                TokenTree::Token(sp(3, 4), token::Ident(Ident::from_str(\"a\"))).into(),\n+                TokenTree::Token(sp(0, 2), token::Ident(Ident::from_str(\"fn\"), false)).into(),\n+                TokenTree::Token(sp(3, 4), token::Ident(Ident::from_str(\"a\"), false)).into(),\n                 TokenTree::Delimited(\n                     sp(5, 14),\n                     tokenstream::Delimited {\n                         delim: token::DelimToken::Paren,\n                         tts: TokenStream::concat(vec![\n-                            TokenTree::Token(sp(6, 7), token::Ident(Ident::from_str(\"b\"))).into(),\n+                            TokenTree::Token(sp(6, 7),\n+                                             token::Ident(Ident::from_str(\"b\"), false)).into(),\n                             TokenTree::Token(sp(8, 9), token::Colon).into(),\n                             TokenTree::Token(sp(10, 13),\n-                                             token::Ident(Ident::from_str(\"i32\"))).into(),\n+                                             token::Ident(Ident::from_str(\"i32\"), false)).into(),\n                         ]).into(),\n                     }).into(),\n                 TokenTree::Delimited(\n                     sp(15, 21),\n                     tokenstream::Delimited {\n                         delim: token::DelimToken::Brace,\n                         tts: TokenStream::concat(vec![\n-                            TokenTree::Token(sp(17, 18), token::Ident(Ident::from_str(\"b\"))).into(),\n+                            TokenTree::Token(sp(17, 18),\n+                                             token::Ident(Ident::from_str(\"b\"), false)).into(),\n                             TokenTree::Token(sp(18, 19), token::Semi).into(),\n                         ]).into(),\n                     }).into()"}, {"sha": "a07279acae2d3f9286c6a84c7cbf611df8211ba7", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -358,7 +358,7 @@ impl TokenCursor {\n \n         let body = TokenTree::Delimited(sp, Delimited {\n             delim: token::Bracket,\n-            tts: [TokenTree::Token(sp, token::Ident(ast::Ident::from_str(\"doc\"))),\n+            tts: [TokenTree::Token(sp, token::Ident(ast::Ident::from_str(\"doc\"), false)),\n                   TokenTree::Token(sp, token::Eq),\n                   TokenTree::Token(sp, token::Literal(\n                       token::StrRaw(Symbol::intern(&stripped), num_of_hashes), None))]\n@@ -784,7 +784,7 @@ impl<'a> Parser<'a> {\n \n     fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, ast::Ident> {\n         match self.token {\n-            token::Ident(i) => {\n+            token::Ident(i, _) => {\n                 if self.token.is_reserved_ident() {\n                     let mut err = self.expected_ident_found();\n                     if recover {\n@@ -1925,7 +1925,7 @@ impl<'a> Parser<'a> {\n \n     pub fn parse_path_segment_ident(&mut self) -> PResult<'a, ast::Ident> {\n         match self.token {\n-            token::Ident(sid) if self.token.is_path_segment_keyword() => {\n+            token::Ident(sid, _) if self.token.is_path_segment_keyword() => {\n                 self.bump();\n                 Ok(sid)\n             }\n@@ -2740,11 +2740,14 @@ impl<'a> Parser<'a> {\n     }\n \n     pub fn process_potential_macro_variable(&mut self) {\n-        let ident = match self.token {\n+        let (ident, is_raw) = match self.token {\n             token::Dollar if self.span.ctxt() != syntax_pos::hygiene::SyntaxContext::empty() &&\n                              self.look_ahead(1, |t| t.is_ident()) => {\n                 self.bump();\n-                let name = match self.token { token::Ident(ident) => ident, _ => unreachable!() };\n+                let name = match self.token {\n+                    token::Ident(ident, _) => ident,\n+                    _ => unreachable!()\n+                };\n                 let mut err = self.fatal(&format!(\"unknown macro variable `{}`\", name));\n                 err.span_label(self.span, \"unknown macro variable\");\n                 err.emit();\n@@ -2753,13 +2756,13 @@ impl<'a> Parser<'a> {\n             token::Interpolated(ref nt) => {\n                 self.meta_var_span = Some(self.span);\n                 match nt.0 {\n-                    token::NtIdent(ident) => ident,\n+                    token::NtIdent(ident, is_raw) => (ident, is_raw),\n                     _ => return,\n                 }\n             }\n             _ => return,\n         };\n-        self.token = token::Ident(ident.node);\n+        self.token = token::Ident(ident.node, is_raw);\n         self.span = ident.span;\n     }\n \n@@ -4245,7 +4248,7 @@ impl<'a> Parser<'a> {\n                      -> PResult<'a, Option<P<Item>>> {\n         let token_lo = self.span;\n         let (ident, def) = match self.token {\n-            token::Ident(ident) if ident.name == keywords::Macro.name() => {\n+            token::Ident(ident, false) if ident.name == keywords::Macro.name() => {\n                 self.bump();\n                 let ident = self.parse_ident()?;\n                 let tokens = if self.check(&token::OpenDelim(token::Brace)) {\n@@ -4273,7 +4276,7 @@ impl<'a> Parser<'a> {\n \n                 (ident, ast::MacroDef { tokens: tokens.into(), legacy: false })\n             }\n-            token::Ident(ident) if ident.name == \"macro_rules\" &&\n+            token::Ident(ident, _) if ident.name == \"macro_rules\" &&\n                                    self.look_ahead(1, |t| *t == token::Not) => {\n                 let prev_span = self.prev_span;\n                 self.complain_if_pub_macro(&vis.node, prev_span);\n@@ -5078,7 +5081,9 @@ impl<'a> Parser<'a> {\n     fn parse_self_arg(&mut self) -> PResult<'a, Option<Arg>> {\n         let expect_ident = |this: &mut Self| match this.token {\n             // Preserve hygienic context.\n-            token::Ident(ident) => { let sp = this.span; this.bump(); codemap::respan(sp, ident) }\n+            token::Ident(ident, _) => {\n+                let sp = this.span; this.bump(); codemap::respan(sp, ident)\n+            }\n             _ => unreachable!()\n         };\n         let isolated_self = |this: &mut Self, n| {\n@@ -5375,7 +5380,7 @@ impl<'a> Parser<'a> {\n             VisibilityKind::Inherited => Ok(()),\n             _ => {\n                 let is_macro_rules: bool = match self.token {\n-                    token::Ident(sid) => sid.name == Symbol::intern(\"macro_rules\"),\n+                    token::Ident(sid, _) => sid.name == Symbol::intern(\"macro_rules\"),\n                     _ => false,\n                 };\n                 if is_macro_rules {\n@@ -7016,7 +7021,7 @@ impl<'a> Parser<'a> {\n     fn parse_rename(&mut self) -> PResult<'a, Option<Ident>> {\n         if self.eat_keyword(keywords::As) {\n             match self.token {\n-                token::Ident(ident) if ident.name == keywords::Underscore.name() => {\n+                token::Ident(ident, false) if ident.name == keywords::Underscore.name() => {\n                     self.bump(); // `_`\n                     Ok(Some(Ident { name: ident.name.gensymed(), ..ident }))\n                 }"}, {"sha": "7798a7a77ee6c8c63e96cd47895759427b6d213b", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 61, "deletions": 26, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -91,8 +91,8 @@ impl Lit {\n     }\n }\n \n-fn ident_can_begin_expr(ident: ast::Ident) -> bool {\n-    let ident_token: Token = Ident(ident);\n+fn ident_can_begin_expr(ident: ast::Ident, is_raw: bool) -> bool {\n+    let ident_token: Token = Ident(ident, is_raw);\n \n     !ident_token.is_reserved_ident() ||\n     ident_token.is_path_segment_keyword() ||\n@@ -116,8 +116,8 @@ fn ident_can_begin_expr(ident: ast::Ident) -> bool {\n     ].contains(&ident.name)\n }\n \n-fn ident_can_begin_type(ident: ast::Ident) -> bool {\n-    let ident_token: Token = Ident(ident);\n+fn ident_can_begin_type(ident: ast::Ident, is_raw: bool) -> bool {\n+    let ident_token: Token = Ident(ident, is_raw);\n \n     !ident_token.is_reserved_ident() ||\n     ident_token.is_path_segment_keyword() ||\n@@ -132,6 +132,37 @@ fn ident_can_begin_type(ident: ast::Ident) -> bool {\n     ].contains(&ident.name)\n }\n \n+pub fn is_path_segment_keyword(id: ast::Ident) -> bool {\n+    id.name == keywords::Super.name() ||\n+    id.name == keywords::SelfValue.name() ||\n+    id.name == keywords::SelfType.name() ||\n+    id.name == keywords::Extern.name() ||\n+    id.name == keywords::Crate.name() ||\n+    id.name == keywords::CrateRoot.name() ||\n+    id.name == keywords::DollarCrate.name()\n+}\n+\n+// Returns true for reserved identifiers used internally for elided lifetimes,\n+// unnamed method parameters, crate root module, error recovery etc.\n+pub fn is_special_ident(id: ast::Ident) -> bool {\n+    id.name <= keywords::Underscore.name()\n+}\n+\n+/// Returns `true` if the token is a keyword used in the language.\n+pub fn is_used_keyword(id: ast::Ident) -> bool {\n+    id.name >= keywords::As.name() && id.name <= keywords::While.name()\n+}\n+\n+/// Returns `true` if the token is a keyword reserved for possible future use.\n+pub fn is_unused_keyword(id: ast::Ident) -> bool {\n+    id.name >= keywords::Abstract.name() && id.name <= keywords::Yield.name()\n+}\n+\n+/// Returns `true` if the token is either a special identifier or a keyword.\n+pub fn is_reserved_ident(id: ast::Ident) -> bool {\n+    is_special_ident(id) || is_used_keyword(id) || is_unused_keyword(id)\n+}\n+\n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Debug)]\n pub enum Token {\n     /* Expression-operator symbols. */\n@@ -175,7 +206,7 @@ pub enum Token {\n     Literal(Lit, Option<ast::Name>),\n \n     /* Name components */\n-    Ident(ast::Ident),\n+    Ident(ast::Ident, /* is_raw */ bool),\n     Lifetime(ast::Ident),\n \n     // The `LazyTokenStream` is a pure function of the `Nonterminal`,\n@@ -203,6 +234,11 @@ impl Token {\n         Token::Interpolated(Lrc::new((nt, LazyTokenStream::new())))\n     }\n \n+    /// Recovers a `Token` from an `ast::Ident`. This creates a raw identifier if necessary.\n+    pub fn from_ast_ident(ident: ast::Ident) -> Token {\n+        Ident(ident, is_reserved_ident(ident) && !is_path_segment_keyword(ident))\n+    }\n+\n     /// Returns `true` if the token starts with '>'.\n     pub fn is_like_gt(&self) -> bool {\n         match *self {\n@@ -214,7 +250,8 @@ impl Token {\n     /// Returns `true` if the token can appear at the start of an expression.\n     pub fn can_begin_expr(&self) -> bool {\n         match *self {\n-            Ident(ident)                => ident_can_begin_expr(ident), // value name or keyword\n+            Ident(ident, is_raw)              =>\n+                ident_can_begin_expr(ident, is_raw), // value name or keyword\n             OpenDelim(..)                     | // tuple, array or block\n             Literal(..)                       | // literal\n             Not                               | // operator not\n@@ -239,7 +276,8 @@ impl Token {\n     /// Returns `true` if the token can appear at the start of a type.\n     pub fn can_begin_type(&self) -> bool {\n         match *self {\n-            Ident(ident)                => ident_can_begin_type(ident), // type name or keyword\n+            Ident(ident, is_raw)        =>\n+                ident_can_begin_type(ident, is_raw), // type name or keyword\n             OpenDelim(Paren)            | // tuple\n             OpenDelim(Bracket)          | // array\n             Not                         | // never\n@@ -272,11 +310,11 @@ impl Token {\n         }\n     }\n \n-    pub fn ident(&self) -> Option<ast::Ident> {\n+    pub fn ident(&self) -> Option<(ast::Ident, bool)> {\n         match *self {\n-            Ident(ident) => Some(ident),\n+            Ident(ident, is_raw) => Some((ident, is_raw)),\n             Interpolated(ref nt) => match nt.0 {\n-                NtIdent(ident) => Some(ident.node),\n+                NtIdent(ident, is_raw) => Some((ident.node, is_raw)),\n                 _ => None,\n             },\n             _ => None,\n@@ -351,43 +389,37 @@ impl Token {\n \n     /// Returns `true` if the token is a given keyword, `kw`.\n     pub fn is_keyword(&self, kw: keywords::Keyword) -> bool {\n-        self.ident().map(|ident| ident.name == kw.name()).unwrap_or(false)\n+        self.ident().map(|(ident, is_raw)| ident.name == kw.name() && !is_raw).unwrap_or(false)\n     }\n \n     pub fn is_path_segment_keyword(&self) -> bool {\n         match self.ident() {\n-            Some(id) => id.name == keywords::Super.name() ||\n-                        id.name == keywords::SelfValue.name() ||\n-                        id.name == keywords::SelfType.name() ||\n-                        id.name == keywords::Extern.name() ||\n-                        id.name == keywords::Crate.name() ||\n-                        id.name == keywords::CrateRoot.name() ||\n-                        id.name == keywords::DollarCrate.name(),\n-            None => false,\n+            Some((id, false)) => is_path_segment_keyword(id),\n+            _ => false,\n         }\n     }\n \n     // Returns true for reserved identifiers used internally for elided lifetimes,\n     // unnamed method parameters, crate root module, error recovery etc.\n     pub fn is_special_ident(&self) -> bool {\n         match self.ident() {\n-            Some(id) => id.name <= keywords::Underscore.name(),\n+            Some((id, false)) => is_special_ident(id),\n             _ => false,\n         }\n     }\n \n     /// Returns `true` if the token is a keyword used in the language.\n     pub fn is_used_keyword(&self) -> bool {\n         match self.ident() {\n-            Some(id) => id.name >= keywords::As.name() && id.name <= keywords::While.name(),\n+            Some((id, false)) => is_used_keyword(id),\n             _ => false,\n         }\n     }\n \n     /// Returns `true` if the token is a keyword reserved for possible future use.\n     pub fn is_unused_keyword(&self) -> bool {\n         match self.ident() {\n-            Some(id) => id.name >= keywords::Abstract.name() && id.name <= keywords::Yield.name(),\n+            Some((id, false)) => is_unused_keyword(id),\n             _ => false,\n         }\n     }\n@@ -460,7 +492,10 @@ impl Token {\n \n     /// Returns `true` if the token is either a special identifier or a keyword.\n     pub fn is_reserved_ident(&self) -> bool {\n-        self.is_special_ident() || self.is_used_keyword() || self.is_unused_keyword()\n+        match self.ident() {\n+            Some((id, false)) => is_reserved_ident(id),\n+            _ => false,\n+        }\n     }\n \n     pub fn interpolated_to_tokenstream(&self, sess: &ParseSess, span: Span)\n@@ -496,8 +531,8 @@ impl Token {\n             Nonterminal::NtImplItem(ref item) => {\n                 tokens = prepend_attrs(sess, &item.attrs, item.tokens.as_ref(), span);\n             }\n-            Nonterminal::NtIdent(ident) => {\n-                let token = Token::Ident(ident.node);\n+            Nonterminal::NtIdent(ident, is_raw) => {\n+                let token = Token::Ident(ident.node, is_raw);\n                 tokens = Some(TokenTree::Token(ident.span, token).into());\n             }\n             Nonterminal::NtLifetime(lifetime) => {\n@@ -529,7 +564,7 @@ pub enum Nonterminal {\n     NtPat(P<ast::Pat>),\n     NtExpr(P<ast::Expr>),\n     NtTy(P<ast::Ty>),\n-    NtIdent(ast::SpannedIdent),\n+    NtIdent(ast::SpannedIdent, /* is_raw */ bool),\n     /// Stuff inside brackets for attributes\n     NtMeta(ast::MetaItem),\n     NtPath(ast::Path),"}, {"sha": "50577a26abf41a1d2bc341d08998059455d2ff38", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -250,7 +250,8 @@ pub fn token_to_string(tok: &Token) -> String {\n         }\n \n         /* Name components */\n-        token::Ident(s)             => s.to_string(),\n+        token::Ident(s, false)      => s.to_string(),\n+        token::Ident(s, true)       => format!(\"r#{}\", s),\n         token::Lifetime(s)          => s.to_string(),\n \n         /* Other */\n@@ -261,24 +262,25 @@ pub fn token_to_string(tok: &Token) -> String {\n         token::Shebang(s)           => format!(\"/* shebang: {}*/\", s),\n \n         token::Interpolated(ref nt) => match nt.0 {\n-            token::NtExpr(ref e)        => expr_to_string(e),\n-            token::NtMeta(ref e)        => meta_item_to_string(e),\n-            token::NtTy(ref e)          => ty_to_string(e),\n-            token::NtPath(ref e)        => path_to_string(e),\n-            token::NtItem(ref e)        => item_to_string(e),\n-            token::NtBlock(ref e)       => block_to_string(e),\n-            token::NtStmt(ref e)        => stmt_to_string(e),\n-            token::NtPat(ref e)         => pat_to_string(e),\n-            token::NtIdent(ref e)       => ident_to_string(e.node),\n-            token::NtTT(ref tree)       => tt_to_string(tree.clone()),\n-            token::NtArm(ref e)         => arm_to_string(e),\n-            token::NtImplItem(ref e)    => impl_item_to_string(e),\n-            token::NtTraitItem(ref e)   => trait_item_to_string(e),\n-            token::NtGenerics(ref e)    => generic_params_to_string(&e.params),\n-            token::NtWhereClause(ref e) => where_clause_to_string(e),\n-            token::NtArg(ref e)         => arg_to_string(e),\n-            token::NtVis(ref e)         => vis_to_string(e),\n-            token::NtLifetime(ref e)    => lifetime_to_string(e),\n+            token::NtExpr(ref e)         => expr_to_string(e),\n+            token::NtMeta(ref e)         => meta_item_to_string(e),\n+            token::NtTy(ref e)           => ty_to_string(e),\n+            token::NtPath(ref e)         => path_to_string(e),\n+            token::NtItem(ref e)         => item_to_string(e),\n+            token::NtBlock(ref e)        => block_to_string(e),\n+            token::NtStmt(ref e)         => stmt_to_string(e),\n+            token::NtPat(ref e)          => pat_to_string(e),\n+            token::NtIdent(ref e, false) => ident_to_string(e.node),\n+            token::NtIdent(ref e, true)  => format!(\"r#{}\", ident_to_string(e.node)),\n+            token::NtTT(ref tree)        => tt_to_string(tree.clone()),\n+            token::NtArm(ref e)          => arm_to_string(e),\n+            token::NtImplItem(ref e)     => impl_item_to_string(e),\n+            token::NtTraitItem(ref e)    => trait_item_to_string(e),\n+            token::NtGenerics(ref e)     => generic_params_to_string(&e.params),\n+            token::NtWhereClause(ref e)  => where_clause_to_string(e),\n+            token::NtArg(ref e)          => arg_to_string(e),\n+            token::NtVis(ref e)          => vis_to_string(e),\n+            token::NtLifetime(ref e)     => lifetime_to_string(e),\n         }\n     }\n }"}, {"sha": "3a7a1b9a66966f322d5367bd6458be389e57f4f0", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -684,7 +684,7 @@ mod tests {\n         with_globals(|| {\n             let test0: TokenStream = Vec::<TokenTree>::new().into_iter().collect();\n             let test1: TokenStream =\n-                TokenTree::Token(sp(0, 1), Token::Ident(Ident::from_str(\"a\"))).into();\n+                TokenTree::Token(sp(0, 1), Token::Ident(Ident::from_str(\"a\"), false)).into();\n             let test2 = string_to_ts(\"foo(bar::baz)\");\n \n             assert_eq!(test0.is_empty(), true);"}, {"sha": "d513008f0e2d388a92aad7c1da6989b8b2cd67ff", "filename": "src/libsyntax_ext/concat_idents.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax_ext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax_ext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat_idents.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -44,7 +44,8 @@ pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt,\n             }\n         } else {\n             match *e {\n-                TokenTree::Token(_, token::Ident(ident)) => res_str.push_str(&ident.name.as_str()),\n+                TokenTree::Token(_, token::Ident(ident, _)) =>\n+                    res_str.push_str(&ident.name.as_str()),\n                 _ => {\n                     cx.span_err(sp, \"concat_idents! requires ident args.\");\n                     return DummyResult::expr(sp);"}, {"sha": "d9c68e3167bd68cc3f983d72b4899ff55f5bdf02", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -149,7 +149,7 @@ fn parse_args(ecx: &mut ExtCtxt,\n         if named || (p.token.is_ident() && p.look_ahead(1, |t| *t == token::Eq)) {\n             named = true;\n             let ident = match p.token {\n-                token::Ident(i) => {\n+                token::Ident(i, _) => {\n                     p.bump();\n                     i\n                 }"}, {"sha": "5a7b7e9ceca5c68f6e79b136bb94be07ef0cc5ef", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -184,8 +184,12 @@ impl SpanData {\n     }\n }\n \n-// The interner in thread-local, so `Span` shouldn't move between threads.\n+// The interner is pointed to by a thread local value which is only set on the main thread\n+// with parallelization is disabled. So we don't allow Span to transfer between threads\n+// to avoid panics and other errors, even though it would be memory safe to do so.\n+#[cfg(not(parallel_queries))]\n impl !Send for Span {}\n+#[cfg(not(parallel_queries))]\n impl !Sync for Span {}\n \n impl PartialOrd for Span {"}, {"sha": "098eafef2585c146a751ce2fb9c382d4466d52f1", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -83,8 +83,12 @@ impl Decodable for Ident {\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct Symbol(u32);\n \n-// The interner in thread-local, so `Symbol` shouldn't move between threads.\n+// The interner is pointed to by a thread local value which is only set on the main thread\n+// with parallelization is disabled. So we don't allow Symbol to transfer between threads\n+// to avoid panics and other errors, even though it would be memory safe to do so.\n+#[cfg(not(parallel_queries))]\n impl !Send for Symbol { }\n+#[cfg(not(parallel_queries))]\n impl !Sync for Symbol { }\n \n impl Symbol {"}, {"sha": "8553665c01797aedd7747d20c002f5f7bfc2ed2f", "filename": "src/test/COMPILER_TESTS.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2FCOMPILER_TESTS.md", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2FCOMPILER_TESTS.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2FCOMPILER_TESTS.md?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -54,6 +54,8 @@ be compiled or run.\n * `ignore-test` always ignores the test\n * `ignore-lldb` and `ignore-gdb` will skip a debuginfo test on that debugger.\n \n+`only-X` is the opposite. The test will run only when `X` matches.\n+\n Some examples of `X` in `ignore-X`:\n \n * Architecture: `aarch64`, `arm`, `asmjs`, `mips`, `wasm32`, `x86_64`, `x86`, ..."}, {"sha": "fdc9b4f704cd16f4c988cb87f198291b3e46d27d", "filename": "src/test/compile-fail/edition-raw-pointer-method-2015.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2015.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n // ignore-tidy-linelength\n-// compile-flags: -Zepoch=2015 -Zunstable-options\n+// compile-flags: -Zedition=2015 -Zunstable-options\n \n-// tests that epochs work with the tyvar warning-turned-error\n+// tests that editions work with the tyvar warning-turned-error\n \n #[deny(warnings)]\n fn main() {", "previous_filename": "src/test/compile-fail/epoch-raw-pointer-method-2015.rs"}, {"sha": "58b34591029ba98ee18542a695e7e797e1012264", "filename": "src/test/compile-fail/edition-raw-pointer-method-2018.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2018.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n // ignore-tidy-linelength\n-// compile-flags: -Zepoch=2018 -Zunstable-options\n+// compile-flags: -Zedition=2018 -Zunstable-options\n \n-// tests that epochs work with the tyvar warning-turned-error\n+// tests that editions work with the tyvar warning-turned-error\n \n #[deny(warnings)]\n fn main() {", "previous_filename": "src/test/compile-fail/epoch-raw-pointer-method-2018.rs"}, {"sha": "25141b9b8255788e9e1688f31a5eedb3dc075c02", "filename": "src/test/compile-fail/issue-17994.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Fcompile-fail%2Fissue-17994.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Fcompile-fail%2Fissue-17994.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17994.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -10,5 +10,4 @@\n \n trait Tr {}\n type Huh<T> where T: Tr = isize; //~  ERROR type parameter `T` is unused\n-                                 //~| WARNING where clauses are ignored in type aliases\n fn main() {}"}, {"sha": "6eeb14638e7591661a52269b7dd22deb3673c60c", "filename": "src/test/compile-fail/private-in-public-warn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -58,7 +58,6 @@ mod traits {\n     pub trait PubTr {}\n \n     pub type Alias<T: PrivTr> = T; //~ ERROR private trait `traits::PrivTr` in public interface\n-    //~^ WARNING bounds on generic parameters are ignored\n     //~| WARNING hard error\n     pub trait Tr1: PrivTr {} //~ ERROR private trait `traits::PrivTr` in public interface\n     //~^ WARNING hard error\n@@ -85,7 +84,6 @@ mod traits_where {\n     pub type Alias<T> where T: PrivTr = T;\n         //~^ ERROR private trait `traits_where::PrivTr` in public interface\n         //~| WARNING hard error\n-        //~| WARNING where clauses are ignored in type aliases\n     pub trait Tr2<T> where T: PrivTr {}\n         //~^ ERROR private trait `traits_where::PrivTr` in public interface\n         //~| WARNING hard error"}, {"sha": "d3130c4e831f65adef8ebaa3a86ba5a1ff281968", "filename": "src/test/compile-fail/struct-pat-derived-error.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Fcompile-fail%2Fstruct-pat-derived-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Fcompile-fail%2Fstruct-pat-derived-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-pat-derived-error.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -16,10 +16,8 @@ struct a {\n impl a {\n     fn foo(&self) {\n         let a { x, y } = self.d; //~ ERROR no field `d` on type `&a`\n-        //~^ ERROR struct `a` does not have a field named `x`\n-        //~^^ ERROR struct `a` does not have a field named `y`\n-        //~^^^ ERROR pattern does not mention field `b`\n-        //~^^^^ ERROR pattern does not mention field `c`\n+        //~^ ERROR struct `a` does not have fields named `x`, `y`\n+        //~| ERROR pattern does not mention fields `b`, `c`\n     }\n }\n "}, {"sha": "8c0027287deceea029275286e3f8d9615509f151", "filename": "src/test/parse-fail/raw-str-delim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Fparse-fail%2Fraw-str-delim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Fparse-fail%2Fraw-str-delim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fraw-str-delim.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "patch": "@@ -11,5 +11,5 @@\n // compile-flags: -Z parse-only\n \n static s: &'static str =\n-    r#x\"#\"x# //~ ERROR found invalid character; only `#` is allowed in raw string delimitation\n+    r#~\"#\"~# //~ ERROR found invalid character; only `#` is allowed in raw string delimitation\n ;"}, {"sha": "0962ebfbff546fa99ecf8206c4c46194e686272d", "filename": "src/test/run-make-fulldeps/a-b-a-linker-guard/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fa-b-a-linker-guard%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fa-b-a-linker-guard%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fa-b-a-linker-guard%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/a-b-a-linker-guard/Makefile"}, {"sha": "c6680a78819dba189fe551482ebbe3fbdf790d0a", "filename": "src/test/run-make-fulldeps/a-b-a-linker-guard/a.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fa-b-a-linker-guard%2Fa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fa-b-a-linker-guard%2Fa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fa-b-a-linker-guard%2Fa.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/a-b-a-linker-guard/a.rs"}, {"sha": "89fd48de5bbf94736dee0f4f3b3096d27758f5db", "filename": "src/test/run-make-fulldeps/a-b-a-linker-guard/b.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fa-b-a-linker-guard%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fa-b-a-linker-guard%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fa-b-a-linker-guard%2Fb.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/a-b-a-linker-guard/b.rs"}, {"sha": "7197f4e17e3cc89750dc5aa9f125150533c48049", "filename": "src/test/run-make-fulldeps/alloc-extern-crates/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Falloc-extern-crates%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Falloc-extern-crates%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Falloc-extern-crates%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/alloc-extern-crates/Makefile"}, {"sha": "43f974893148a583f51c1991d02b907e5c413a48", "filename": "src/test/run-make-fulldeps/alloc-extern-crates/fakealloc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Falloc-extern-crates%2Ffakealloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Falloc-extern-crates%2Ffakealloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Falloc-extern-crates%2Ffakealloc.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/alloc-extern-crates/fakealloc.rs"}, {"sha": "c14006cc2e052b7a0bd77f6ae17dc0fa668b23cb", "filename": "src/test/run-make-fulldeps/allow-non-lint-warnings-cmdline/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fallow-non-lint-warnings-cmdline%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fallow-non-lint-warnings-cmdline%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fallow-non-lint-warnings-cmdline%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/allow-non-lint-warnings-cmdline/Makefile"}, {"sha": "a9e18f5a8f1e6b0dade592613e8579396a091dcd", "filename": "src/test/run-make-fulldeps/allow-non-lint-warnings-cmdline/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fallow-non-lint-warnings-cmdline%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fallow-non-lint-warnings-cmdline%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fallow-non-lint-warnings-cmdline%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/allow-non-lint-warnings-cmdline/foo.rs"}, {"sha": "3eecaf9314226c884551faa7241a621a3f9db70f", "filename": "src/test/run-make-fulldeps/allow-warnings-cmdline-stability/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fallow-warnings-cmdline-stability%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fallow-warnings-cmdline-stability%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fallow-warnings-cmdline-stability%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/allow-warnings-cmdline-stability/Makefile"}, {"sha": "fed1405b7f4d284f447af620ce070efa4918fb1d", "filename": "src/test/run-make-fulldeps/allow-warnings-cmdline-stability/bar.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fallow-warnings-cmdline-stability%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fallow-warnings-cmdline-stability%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fallow-warnings-cmdline-stability%2Fbar.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/allow-warnings-cmdline-stability/bar.rs"}, {"sha": "a36cc474c2bf052054aa6614b805302073987703", "filename": "src/test/run-make-fulldeps/allow-warnings-cmdline-stability/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fallow-warnings-cmdline-stability%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fallow-warnings-cmdline-stability%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fallow-warnings-cmdline-stability%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/allow-warnings-cmdline-stability/foo.rs"}, {"sha": "93711c41d79f82cc8a906f761a74b76828a18adf", "filename": "src/test/run-make-fulldeps/archive-duplicate-names/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Farchive-duplicate-names%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Farchive-duplicate-names%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Farchive-duplicate-names%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/archive-duplicate-names/Makefile"}, {"sha": "a25fa10f4d3ee51dabea7ba2efd91f8bf5846d1a", "filename": "src/test/run-make-fulldeps/archive-duplicate-names/bar.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Farchive-duplicate-names%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Farchive-duplicate-names%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Farchive-duplicate-names%2Fbar.c?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/archive-duplicate-names/bar.c"}, {"sha": "1200a6de8e2e063302cd4b4caa8f84091f1cd6c8", "filename": "src/test/run-make-fulldeps/archive-duplicate-names/bar.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Farchive-duplicate-names%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Farchive-duplicate-names%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Farchive-duplicate-names%2Fbar.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/archive-duplicate-names/bar.rs"}, {"sha": "61d5d15407891a0a497a36c4a38dd7ab2b3526dc", "filename": "src/test/run-make-fulldeps/archive-duplicate-names/foo.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Farchive-duplicate-names%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Farchive-duplicate-names%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Farchive-duplicate-names%2Ffoo.c?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/archive-duplicate-names/foo.c"}, {"sha": "24b4734f2cd334fb6d10cbe6100913d868e97512", "filename": "src/test/run-make-fulldeps/archive-duplicate-names/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Farchive-duplicate-names%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Farchive-duplicate-names%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Farchive-duplicate-names%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/archive-duplicate-names/foo.rs"}, {"sha": "a7df821f92d719bf18bdb312bd67e638346b7ebf", "filename": "src/test/run-make-fulldeps/atomic-lock-free/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fatomic-lock-free%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fatomic-lock-free%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fatomic-lock-free%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/atomic-lock-free/Makefile"}, {"sha": "b41e8e9226b326e43f87d5eacf0d83f2d27064c0", "filename": "src/test/run-make-fulldeps/atomic-lock-free/atomic_lock_free.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fatomic-lock-free%2Fatomic_lock_free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fatomic-lock-free%2Fatomic_lock_free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fatomic-lock-free%2Fatomic_lock_free.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/atomic-lock-free/atomic_lock_free.rs"}, {"sha": "baa4c1c0237b25573e52921cda167ec51bc1db65", "filename": "src/test/run-make-fulldeps/bare-outfile/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fbare-outfile%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fbare-outfile%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fbare-outfile%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/bare-outfile/Makefile"}, {"sha": "63e747901ae87b4e83c69e81fe59e18ee4de9498", "filename": "src/test/run-make-fulldeps/bare-outfile/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fbare-outfile%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fbare-outfile%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fbare-outfile%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/bare-outfile/foo.rs"}, {"sha": "83bddd4c73c3f481d2f0084292cdffbeecb751dc", "filename": "src/test/run-make-fulldeps/c-dynamic-dylib/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-dylib%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/c-dynamic-dylib/Makefile"}, {"sha": "37b120decd1a8a1ef43e426c1d158da5f7a18d3d", "filename": "src/test/run-make-fulldeps/c-dynamic-dylib/bar.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-dylib%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-dylib%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-dylib%2Fbar.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/c-dynamic-dylib/bar.rs"}, {"sha": "a97554935412332df45cf1a7ddf47334770780ea", "filename": "src/test/run-make-fulldeps/c-dynamic-dylib/cfoo.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-dylib%2Fcfoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-dylib%2Fcfoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-dylib%2Fcfoo.c?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/c-dynamic-dylib/cfoo.c"}, {"sha": "04253be71d454222c99d85cb26f8ff3703fc0542", "filename": "src/test/run-make-fulldeps/c-dynamic-dylib/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-dylib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-dylib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-dylib%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/c-dynamic-dylib/foo.rs"}, {"sha": "e15cfd34d6c36f3e394635003b8644f6c56a931f", "filename": "src/test/run-make-fulldeps/c-dynamic-rlib/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-rlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-rlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-rlib%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/c-dynamic-rlib/Makefile"}, {"sha": "37b120decd1a8a1ef43e426c1d158da5f7a18d3d", "filename": "src/test/run-make-fulldeps/c-dynamic-rlib/bar.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-rlib%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-rlib%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-rlib%2Fbar.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/c-dynamic-rlib/bar.rs"}, {"sha": "b2849326a7588583aaea7f7badaff2abb855e174", "filename": "src/test/run-make-fulldeps/c-dynamic-rlib/cfoo.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-rlib%2Fcfoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-rlib%2Fcfoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-rlib%2Fcfoo.c?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/c-dynamic-rlib/cfoo.c"}, {"sha": "a1f01bd2b626ca6a10ec4b055903cb96b95d565a", "filename": "src/test/run-make-fulldeps/c-dynamic-rlib/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-rlib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-rlib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-rlib%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/c-dynamic-rlib/foo.rs"}, {"sha": "98e112a374423910cf249c8170e6a6e123a7d5c6", "filename": "src/test/run-make-fulldeps/c-link-to-rust-dylib/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-dylib%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/c-link-to-rust-dylib/Makefile"}, {"sha": "5729d411c5bcd9a974e321a4a535e0b08c7dfc0b", "filename": "src/test/run-make-fulldeps/c-link-to-rust-dylib/bar.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-dylib%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-dylib%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-dylib%2Fbar.c?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/c-link-to-rust-dylib/bar.c"}, {"sha": "32675bcba1e0a1d2802be8eaadb653074a60c067", "filename": "src/test/run-make-fulldeps/c-link-to-rust-dylib/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-dylib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-dylib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-dylib%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/c-link-to-rust-dylib/foo.rs"}, {"sha": "47264e82165b4a96b80bba72fc96c0ac0214212f", "filename": "src/test/run-make-fulldeps/c-link-to-rust-staticlib/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-staticlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-staticlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-staticlib%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/c-link-to-rust-staticlib/Makefile"}, {"sha": "5729d411c5bcd9a974e321a4a535e0b08c7dfc0b", "filename": "src/test/run-make-fulldeps/c-link-to-rust-staticlib/bar.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-staticlib%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-staticlib%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-staticlib%2Fbar.c?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/c-link-to-rust-staticlib/bar.c"}, {"sha": "1bb1901670035c4ad6c04084ca4fc81af281faaa", "filename": "src/test/run-make-fulldeps/c-link-to-rust-staticlib/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-staticlib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-staticlib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-staticlib%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/c-link-to-rust-staticlib/foo.rs"}, {"sha": "f88786857ccdc26bd247f326fffc2c349d4b9bb7", "filename": "src/test/run-make-fulldeps/c-static-dylib/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-static-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-static-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-static-dylib%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/c-static-dylib/Makefile"}, {"sha": "37b120decd1a8a1ef43e426c1d158da5f7a18d3d", "filename": "src/test/run-make-fulldeps/c-static-dylib/bar.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-static-dylib%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-static-dylib%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-static-dylib%2Fbar.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/c-static-dylib/bar.rs"}, {"sha": "113717a776a99f8f533c6d77622170a747568e35", "filename": "src/test/run-make-fulldeps/c-static-dylib/cfoo.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-static-dylib%2Fcfoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-static-dylib%2Fcfoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-static-dylib%2Fcfoo.c?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/c-static-dylib/cfoo.c"}, {"sha": "44be5ac890d6e3b0bcf924d49f398dd6549815bf", "filename": "src/test/run-make-fulldeps/c-static-dylib/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-static-dylib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-static-dylib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-static-dylib%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/c-static-dylib/foo.rs"}, {"sha": "be22b2728f05b0eca8e1a1e4d82cc86b8b2ba80d", "filename": "src/test/run-make-fulldeps/c-static-rlib/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-static-rlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-static-rlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-static-rlib%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/c-static-rlib/Makefile"}, {"sha": "37b120decd1a8a1ef43e426c1d158da5f7a18d3d", "filename": "src/test/run-make-fulldeps/c-static-rlib/bar.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-static-rlib%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-static-rlib%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-static-rlib%2Fbar.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/c-static-rlib/bar.rs"}, {"sha": "113717a776a99f8f533c6d77622170a747568e35", "filename": "src/test/run-make-fulldeps/c-static-rlib/cfoo.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-static-rlib%2Fcfoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-static-rlib%2Fcfoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-static-rlib%2Fcfoo.c?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/c-static-rlib/cfoo.c"}, {"sha": "cbd7b020bd8126420018069bce321ebd53695bfb", "filename": "src/test/run-make-fulldeps/c-static-rlib/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-static-rlib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fc-static-rlib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-static-rlib%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/c-static-rlib/foo.rs"}, {"sha": "fead197ce3906ce0ec4bef130979db12728644b8", "filename": "src/test/run-make-fulldeps/cat-and-grep-sanity-check/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcat-and-grep-sanity-check%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcat-and-grep-sanity-check%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcat-and-grep-sanity-check%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/cat-and-grep-sanity-check/Makefile"}, {"sha": "1a0664dfafd7e56eec9f209c78b1fae20a6ac73c", "filename": "src/test/run-make-fulldeps/cdylib-fewer-symbols/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcdylib-fewer-symbols%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcdylib-fewer-symbols%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcdylib-fewer-symbols%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/cdylib-fewer-symbols/Makefile"}, {"sha": "4ec8d4ee86079ce968efc99c5be0c772f5da4634", "filename": "src/test/run-make-fulldeps/cdylib-fewer-symbols/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcdylib-fewer-symbols%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcdylib-fewer-symbols%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcdylib-fewer-symbols%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/cdylib-fewer-symbols/foo.rs"}, {"sha": "47ec762b3e94c86ebceea79022d5dba0be923911", "filename": "src/test/run-make-fulldeps/cdylib/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcdylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcdylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcdylib%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/cdylib/Makefile"}, {"sha": "2c97298604cbc27953659e677409816c07635d4d", "filename": "src/test/run-make-fulldeps/cdylib/bar.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcdylib%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcdylib%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcdylib%2Fbar.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/cdylib/bar.rs"}, {"sha": "1c950427c658b94f0bc61c52fbc322956def0827", "filename": "src/test/run-make-fulldeps/cdylib/foo.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcdylib%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcdylib%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcdylib%2Ffoo.c?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/cdylib/foo.c"}, {"sha": "cdac6d19035251ca91f1a92ebf56ee0535fef392", "filename": "src/test/run-make-fulldeps/cdylib/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcdylib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcdylib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcdylib%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/cdylib/foo.rs"}, {"sha": "fda96a8b1fb5eb0bad399e2cbe0d971161c01ece", "filename": "src/test/run-make-fulldeps/codegen-options-parsing/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcodegen-options-parsing%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcodegen-options-parsing%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcodegen-options-parsing%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/codegen-options-parsing/Makefile"}, {"sha": "8ae3d072362ed6b5db81a00be3becce691926a7f", "filename": "src/test/run-make-fulldeps/codegen-options-parsing/dummy.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcodegen-options-parsing%2Fdummy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcodegen-options-parsing%2Fdummy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcodegen-options-parsing%2Fdummy.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/codegen-options-parsing/dummy.rs"}, {"sha": "1442224cf9a7699f4f81f510173afb7bf6380350", "filename": "src/test/run-make-fulldeps/compile-stdin/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompile-stdin%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompile-stdin%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcompile-stdin%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/compile-stdin/Makefile"}, {"sha": "bd7f62d5c2d893e2fe8332c37a3ad47220fb21fe", "filename": "src/test/run-make-fulldeps/compiler-lookup-paths-2/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths-2%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths-2%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths-2%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/compiler-lookup-paths-2/Makefile"}, {"sha": "e7572a5f6157891289b89ffdc56ed86a237cd119", "filename": "src/test/run-make-fulldeps/compiler-lookup-paths-2/a.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths-2%2Fa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths-2%2Fa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths-2%2Fa.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/compiler-lookup-paths-2/a.rs"}, {"sha": "fee0da9b4c194845a69dda18bd924a98b560d027", "filename": "src/test/run-make-fulldeps/compiler-lookup-paths-2/b.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths-2%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths-2%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths-2%2Fb.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/compiler-lookup-paths-2/b.rs"}, {"sha": "66fe51d10991e6f4c479069fdb5789b4763276d9", "filename": "src/test/run-make-fulldeps/compiler-lookup-paths-2/c.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths-2%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths-2%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths-2%2Fc.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/compiler-lookup-paths-2/c.rs"}, {"sha": "e22b937a0876345c05330fe24b59bff19ca8fba2", "filename": "src/test/run-make-fulldeps/compiler-lookup-paths/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/compiler-lookup-paths/Makefile"}, {"sha": "4ddf231fba2a459d192ff53021ff53308611f306", "filename": "src/test/run-make-fulldeps/compiler-lookup-paths/a.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Fa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Fa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Fa.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/compiler-lookup-paths/a.rs"}, {"sha": "c38300f976ebcbe9f27c110a41b13f52a96162f4", "filename": "src/test/run-make-fulldeps/compiler-lookup-paths/b.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Fb.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/compiler-lookup-paths/b.rs"}, {"sha": "b5c54558a4f0ac9165b8d7436171a619be766388", "filename": "src/test/run-make-fulldeps/compiler-lookup-paths/c.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Fc.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/compiler-lookup-paths/c.rs"}, {"sha": "295b6e00e41ab076f4934c988914c81da299a770", "filename": "src/test/run-make-fulldeps/compiler-lookup-paths/d.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Fd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Fd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Fd.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/compiler-lookup-paths/d.rs"}, {"sha": "c0407aba7c9f548cd22e89e0bcfd6932154e7ab4", "filename": "src/test/run-make-fulldeps/compiler-lookup-paths/e.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Fe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Fe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Fe.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/compiler-lookup-paths/e.rs"}, {"sha": "f8c8c029c0bdde940ffb3ddb6dd61f4fc30ecd65", "filename": "src/test/run-make-fulldeps/compiler-lookup-paths/e2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Fe2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Fe2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Fe2.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/compiler-lookup-paths/e2.rs"}, {"sha": "e616042257625bb9e38ac8e81c2c2e2744f883f0", "filename": "src/test/run-make-fulldeps/compiler-lookup-paths/f.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Ff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Ff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Ff.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/compiler-lookup-paths/f.rs"}, {"sha": "3066947052294caa54c41630fb3b7fed44de07ea", "filename": "src/test/run-make-fulldeps/compiler-lookup-paths/native.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Fnative.c", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Fnative.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Fnative.c?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/compiler-lookup-paths/native.c"}, {"sha": "06d1bb6698ece6ba07aa4379cd2ad0ce9f22238c", "filename": "src/test/run-make-fulldeps/compiler-rt-works-on-mingw/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-rt-works-on-mingw%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-rt-works-on-mingw%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-rt-works-on-mingw%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/compiler-rt-works-on-mingw/Makefile"}, {"sha": "aac3ba42201012ae80ce26bed0da01813c1a9e05", "filename": "src/test/run-make-fulldeps/compiler-rt-works-on-mingw/foo.cpp", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-rt-works-on-mingw%2Ffoo.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-rt-works-on-mingw%2Ffoo.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-rt-works-on-mingw%2Ffoo.cpp?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/compiler-rt-works-on-mingw/foo.cpp"}, {"sha": "293f9d582945e175c32b52e263b967a46a357bc5", "filename": "src/test/run-make-fulldeps/compiler-rt-works-on-mingw/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-rt-works-on-mingw%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-rt-works-on-mingw%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-rt-works-on-mingw%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/compiler-rt-works-on-mingw/foo.rs"}, {"sha": "1afda457411da96b4b515bc5de0641c8aac6d5e2", "filename": "src/test/run-make-fulldeps/crate-data-smoke/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcrate-data-smoke%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcrate-data-smoke%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcrate-data-smoke%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/crate-data-smoke/Makefile"}, {"sha": "305b3dc70a625006de0c6f3a198e046bcf6a1ff0", "filename": "src/test/run-make-fulldeps/crate-data-smoke/crate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcrate-data-smoke%2Fcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcrate-data-smoke%2Fcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcrate-data-smoke%2Fcrate.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/crate-data-smoke/crate.rs"}, {"sha": "639a5d0387b8ea045146515086885abdd0c89e4e", "filename": "src/test/run-make-fulldeps/crate-data-smoke/lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcrate-data-smoke%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcrate-data-smoke%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcrate-data-smoke%2Flib.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/crate-data-smoke/lib.rs"}, {"sha": "4e0937486003c19db4449023356883814c211b55", "filename": "src/test/run-make-fulldeps/crate-data-smoke/rlib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcrate-data-smoke%2Frlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcrate-data-smoke%2Frlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcrate-data-smoke%2Frlib.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/crate-data-smoke/rlib.rs"}, {"sha": "17ecb33ab28d0124e3a11891a493e786c0eeab74", "filename": "src/test/run-make-fulldeps/crate-name-priority/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcrate-name-priority%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcrate-name-priority%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcrate-name-priority%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/crate-name-priority/Makefile"}, {"sha": "8ae3d072362ed6b5db81a00be3becce691926a7f", "filename": "src/test/run-make-fulldeps/crate-name-priority/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcrate-name-priority%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcrate-name-priority%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcrate-name-priority%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/crate-name-priority/foo.rs"}, {"sha": "a397d6bc749fe4de75f64cf3c0c9d3b2367847f5", "filename": "src/test/run-make-fulldeps/crate-name-priority/foo1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcrate-name-priority%2Ffoo1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fcrate-name-priority%2Ffoo1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcrate-name-priority%2Ffoo1.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/crate-name-priority/foo1.rs"}, {"sha": "76ada90f1e25af3709d33aad5629702234a3b513", "filename": "src/test/run-make-fulldeps/debug-assertions/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdebug-assertions%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdebug-assertions%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fdebug-assertions%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/debug-assertions/Makefile"}, {"sha": "65682cb86c36881c1ddaca9a586f469d3b97337f", "filename": "src/test/run-make-fulldeps/debug-assertions/debug.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdebug-assertions%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdebug-assertions%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fdebug-assertions%2Fdebug.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/debug-assertions/debug.rs"}, {"sha": "2fd84639f21904131a4547a455aa37de3839d826", "filename": "src/test/run-make-fulldeps/dep-info-doesnt-run-much/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info-doesnt-run-much%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info-doesnt-run-much%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fdep-info-doesnt-run-much%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/dep-info-doesnt-run-much/Makefile"}, {"sha": "35911821044982825a5dfade9db91d6101c78237", "filename": "src/test/run-make-fulldeps/dep-info-doesnt-run-much/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info-doesnt-run-much%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info-doesnt-run-much%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fdep-info-doesnt-run-much%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/dep-info-doesnt-run-much/foo.rs"}, {"sha": "82686ffdd9d93d3c47ee8bfff16383e3f9ea0aee", "filename": "src/test/run-make-fulldeps/dep-info-spaces/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info-spaces%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info-spaces%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fdep-info-spaces%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/dep-info-spaces/Makefile"}, {"sha": "80a5d4333cdc22f4d4766c3a0a0291c232b6d55a", "filename": "src/test/run-make-fulldeps/dep-info-spaces/Makefile.foo", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info-spaces%2FMakefile.foo", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info-spaces%2FMakefile.foo", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fdep-info-spaces%2FMakefile.foo?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/dep-info-spaces/Makefile.foo"}, {"sha": "4c79f7e2855356528414cdf805b4f5215d8d7c7c", "filename": "src/test/run-make-fulldeps/dep-info-spaces/bar.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info-spaces%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info-spaces%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fdep-info-spaces%2Fbar.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/dep-info-spaces/bar.rs"}, {"sha": "2661b1f4eb49b7a93d03ca34e2563991eb2e37c3", "filename": "src/test/run-make-fulldeps/dep-info-spaces/foo foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info-spaces%2Ffoo%20foo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info-spaces%2Ffoo%20foo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fdep-info-spaces%2Ffoo%20foo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/dep-info-spaces/foo foo.rs"}, {"sha": "bfbe41baeac48fb0ef0bf53761d30e04df2e50cb", "filename": "src/test/run-make-fulldeps/dep-info-spaces/lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info-spaces%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info-spaces%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fdep-info-spaces%2Flib.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/dep-info-spaces/lib.rs"}, {"sha": "9b79d1af5218164ce4d1d10cbee0283a19a83ff3", "filename": "src/test/run-make-fulldeps/dep-info/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fdep-info%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/dep-info/Makefile"}, {"sha": "e5df31f88c1e155a452f0baa34733870d8e7fdc1", "filename": "src/test/run-make-fulldeps/dep-info/Makefile.foo", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info%2FMakefile.foo", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info%2FMakefile.foo", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fdep-info%2FMakefile.foo?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/dep-info/Makefile.foo"}, {"sha": "4c79f7e2855356528414cdf805b4f5215d8d7c7c", "filename": "src/test/run-make-fulldeps/dep-info/bar.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fdep-info%2Fbar.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/dep-info/bar.rs"}, {"sha": "2661b1f4eb49b7a93d03ca34e2563991eb2e37c3", "filename": "src/test/run-make-fulldeps/dep-info/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fdep-info%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/dep-info/foo.rs"}, {"sha": "7c15785bbb23d61eaa2a5e6315852dd2e9c2de25", "filename": "src/test/run-make-fulldeps/dep-info/lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fdep-info%2Flib.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/dep-info/lib.rs"}, {"sha": "1b70fb4eb4b47714d3d9213f4d0a69458b8c6a16", "filename": "src/test/run-make-fulldeps/dep-info/lib2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info%2Flib2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdep-info%2Flib2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fdep-info%2Flib2.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/dep-info/lib2.rs"}, {"sha": "e33279966c97187be0c905c72e015b60c66345ce", "filename": "src/test/run-make-fulldeps/duplicate-output-flavors/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fduplicate-output-flavors%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fduplicate-output-flavors%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fduplicate-output-flavors%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/duplicate-output-flavors/Makefile"}, {"sha": "04d3ae67207228d9bfe4d16f9873b5cd8bbe3f92", "filename": "src/test/run-make-fulldeps/duplicate-output-flavors/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fduplicate-output-flavors%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fduplicate-output-flavors%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fduplicate-output-flavors%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/duplicate-output-flavors/foo.rs"}, {"sha": "a33177197b119c4c6d5fcebe68045150297cec9d", "filename": "src/test/run-make-fulldeps/dylib-chain/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdylib-chain%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdylib-chain%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fdylib-chain%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/dylib-chain/Makefile"}, {"sha": "5437c935c4e9520dce90475222c1183d32b9ca3c", "filename": "src/test/run-make-fulldeps/dylib-chain/m1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdylib-chain%2Fm1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdylib-chain%2Fm1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fdylib-chain%2Fm1.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/dylib-chain/m1.rs"}, {"sha": "b464f32eae204a08321ea7520721c436d1ea8ee1", "filename": "src/test/run-make-fulldeps/dylib-chain/m2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdylib-chain%2Fm2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdylib-chain%2Fm2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fdylib-chain%2Fm2.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/dylib-chain/m2.rs"}, {"sha": "bf431cc827b0b450e231aaf25eb33a64fa6ae81d", "filename": "src/test/run-make-fulldeps/dylib-chain/m3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdylib-chain%2Fm3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdylib-chain%2Fm3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fdylib-chain%2Fm3.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/dylib-chain/m3.rs"}, {"sha": "6c2a66858028e04988ef470b1885001db8c7586c", "filename": "src/test/run-make-fulldeps/dylib-chain/m4.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdylib-chain%2Fm4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fdylib-chain%2Fm4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fdylib-chain%2Fm4.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/dylib-chain/m4.rs"}, {"sha": "e0b57107e5b7b27b21af4ea78a6e6ef2f1c2c405", "filename": "src/test/run-make-fulldeps/emit/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Femit%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Femit%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Femit%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/emit/Makefile"}, {"sha": "ab69decbf007e7f36d58887a49a022f94b2e3f2c", "filename": "src/test/run-make-fulldeps/emit/test-24876.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Femit%2Ftest-24876.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Femit%2Ftest-24876.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Femit%2Ftest-24876.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/emit/test-24876.rs"}, {"sha": "97b58a3671bf3531224cdcec425adcc6eb92f4f5", "filename": "src/test/run-make-fulldeps/emit/test-26235.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Femit%2Ftest-26235.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Femit%2Ftest-26235.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Femit%2Ftest-26235.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/emit/test-26235.rs"}, {"sha": "fef12c4da67033b2466b3d86a9e96d5953a4be71", "filename": "src/test/run-make-fulldeps/error-found-staticlib-instead-crate/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Ferror-found-staticlib-instead-crate%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Ferror-found-staticlib-instead-crate%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ferror-found-staticlib-instead-crate%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/error-found-staticlib-instead-crate/Makefile"}, {"sha": "5ab3e5ee99dd8ca949035eaa7b52313a2ad7e648", "filename": "src/test/run-make-fulldeps/error-found-staticlib-instead-crate/bar.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Ferror-found-staticlib-instead-crate%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Ferror-found-staticlib-instead-crate%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ferror-found-staticlib-instead-crate%2Fbar.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/error-found-staticlib-instead-crate/bar.rs"}, {"sha": "222d98a12de9dddaf1c6294b21ed029713f978c6", "filename": "src/test/run-make-fulldeps/error-found-staticlib-instead-crate/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Ferror-found-staticlib-instead-crate%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Ferror-found-staticlib-instead-crate%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ferror-found-staticlib-instead-crate%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/error-found-staticlib-instead-crate/foo.rs"}, {"sha": "cbc96901a388aed9f7ce95291d796305831376a9", "filename": "src/test/run-make-fulldeps/error-writing-dependencies/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Ferror-writing-dependencies%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Ferror-writing-dependencies%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ferror-writing-dependencies%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/error-writing-dependencies/Makefile"}, {"sha": "8ae3d072362ed6b5db81a00be3becce691926a7f", "filename": "src/test/run-make-fulldeps/error-writing-dependencies/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Ferror-writing-dependencies%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Ferror-writing-dependencies%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ferror-writing-dependencies%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/error-writing-dependencies/foo.rs"}, {"sha": "b84e930757b251c8495f2dc01973f04468b25404", "filename": "src/test/run-make-fulldeps/extern-diff-internal-name/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-diff-internal-name%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-diff-internal-name%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-diff-internal-name%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-diff-internal-name/Makefile"}, {"sha": "e8779bba13c8887b40cc90f8752d77e15f76d4c8", "filename": "src/test/run-make-fulldeps/extern-diff-internal-name/lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-diff-internal-name%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-diff-internal-name%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-diff-internal-name%2Flib.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-diff-internal-name/lib.rs"}, {"sha": "11e042c8c4a067da2747cf79f23418486b78b420", "filename": "src/test/run-make-fulldeps/extern-diff-internal-name/test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-diff-internal-name%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-diff-internal-name%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-diff-internal-name%2Ftest.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-diff-internal-name/test.rs"}, {"sha": "81930e969a9f6a1adf43e1842cb9e7322969a8c6", "filename": "src/test/run-make-fulldeps/extern-flag-disambiguates/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-disambiguates%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-disambiguates%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-disambiguates%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-flag-disambiguates/Makefile"}, {"sha": "ac92aede7894f72083fef91889efeaa00e8195a9", "filename": "src/test/run-make-fulldeps/extern-flag-disambiguates/a.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-disambiguates%2Fa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-disambiguates%2Fa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-disambiguates%2Fa.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-flag-disambiguates/a.rs"}, {"sha": "8ae238f5a482c2f1a063b2ac825097f842724883", "filename": "src/test/run-make-fulldeps/extern-flag-disambiguates/b.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-disambiguates%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-disambiguates%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-disambiguates%2Fb.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-flag-disambiguates/b.rs"}, {"sha": "6eccdf7e5c857b28b0cded71213ca98895b81747", "filename": "src/test/run-make-fulldeps/extern-flag-disambiguates/c.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-disambiguates%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-disambiguates%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-disambiguates%2Fc.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-flag-disambiguates/c.rs"}, {"sha": "9923ff83a918500f0d3c888564fa986ee0035ef4", "filename": "src/test/run-make-fulldeps/extern-flag-disambiguates/d.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-disambiguates%2Fd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-disambiguates%2Fd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-disambiguates%2Fd.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-flag-disambiguates/d.rs"}, {"sha": "a9f25853350037b385032c6b3aae0fcae02f07ef", "filename": "src/test/run-make-fulldeps/extern-flag-fun/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-fun%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-fun%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-fun%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-flag-fun/Makefile"}, {"sha": "d6ebd9d896fbc268a304bdbc698303f0240f62ff", "filename": "src/test/run-make-fulldeps/extern-flag-fun/bar-alt.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-fun%2Fbar-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-fun%2Fbar-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-fun%2Fbar-alt.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-flag-fun/bar-alt.rs"}, {"sha": "e6c760257380c6639446ab5e533b74c2a17b7a3e", "filename": "src/test/run-make-fulldeps/extern-flag-fun/bar.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-fun%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-fun%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-fun%2Fbar.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-flag-fun/bar.rs"}, {"sha": "52741668640112e4d2dc33bca3c1de4e0043ca38", "filename": "src/test/run-make-fulldeps/extern-flag-fun/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-fun%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-fun%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-fun%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-flag-fun/foo.rs"}, {"sha": "cf897dba1f2798ba4944b6523eeba7c1def1b9cf", "filename": "src/test/run-make-fulldeps/extern-fn-generic/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-generic%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-generic%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-generic%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-fn-generic/Makefile"}, {"sha": "f9faef64afc41a519832a2372d48e7cea401fad4", "filename": "src/test/run-make-fulldeps/extern-fn-generic/test.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-generic%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-generic%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-generic%2Ftest.c?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-fn-generic/test.c"}, {"sha": "8f5ff091b3b6b81296fd9ce77a862b0403c938ff", "filename": "src/test/run-make-fulldeps/extern-fn-generic/test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-generic%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-generic%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-generic%2Ftest.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-fn-generic/test.rs"}, {"sha": "d02c05047c0099fd6f9a72f849ccffdd4162ac4d", "filename": "src/test/run-make-fulldeps/extern-fn-generic/testcrate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-generic%2Ftestcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-generic%2Ftestcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-generic%2Ftestcrate.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-fn-generic/testcrate.rs"}, {"sha": "042048ec25f63c05096693257dff6b2d8f6a3a2d", "filename": "src/test/run-make-fulldeps/extern-fn-mangle/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-mangle%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-mangle%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-mangle%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-fn-mangle/Makefile"}, {"sha": "1a9855dedec490f85bcec3c5efc8212d19f44fb6", "filename": "src/test/run-make-fulldeps/extern-fn-mangle/test.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-mangle%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-mangle%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-mangle%2Ftest.c?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-fn-mangle/test.c"}, {"sha": "35b5a9278a4295d629dd35467cc8142f8b79a629", "filename": "src/test/run-make-fulldeps/extern-fn-mangle/test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-mangle%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-mangle%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-mangle%2Ftest.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-fn-mangle/test.rs"}, {"sha": "79a9a3c640f03b62cc294be160d9e82f48372ab2", "filename": "src/test/run-make-fulldeps/extern-fn-reachable/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-reachable%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-reachable%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-reachable%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-fn-reachable/Makefile"}, {"sha": "f24265e7a5229726b5c09a7b8f451bebb966e76f", "filename": "src/test/run-make-fulldeps/extern-fn-reachable/dylib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-reachable%2Fdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-reachable%2Fdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-reachable%2Fdylib.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-fn-reachable/dylib.rs"}, {"sha": "27387332c1c1f50b0a7c4f5f8fbb3ff8eba44a3e", "filename": "src/test/run-make-fulldeps/extern-fn-reachable/main.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-reachable%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-reachable%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-reachable%2Fmain.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-fn-reachable/main.rs"}, {"sha": "042048ec25f63c05096693257dff6b2d8f6a3a2d", "filename": "src/test/run-make-fulldeps/extern-fn-struct-passing-abi/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-struct-passing-abi%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-struct-passing-abi%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-struct-passing-abi%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-fn-struct-passing-abi/Makefile"}, {"sha": "25cd6da10b8fd105399db6c286df9d39b887b73e", "filename": "src/test/run-make-fulldeps/extern-fn-struct-passing-abi/test.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-struct-passing-abi%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-struct-passing-abi%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-struct-passing-abi%2Ftest.c?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-fn-struct-passing-abi/test.c"}, {"sha": "54a4f868eb4e53e06e3a68cb0fc1d3182e8c158d", "filename": "src/test/run-make-fulldeps/extern-fn-struct-passing-abi/test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-struct-passing-abi%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-struct-passing-abi%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-struct-passing-abi%2Ftest.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-fn-struct-passing-abi/test.rs"}, {"sha": "8977e14c3ad1a8457a4741942056594612821f36", "filename": "src/test/run-make-fulldeps/extern-fn-with-extern-types/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-extern-types%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-extern-types%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-extern-types%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-fn-with-extern-types/Makefile"}, {"sha": "c3d6166fb1284d740c0a1801de35964cf7e57f8e", "filename": "src/test/run-make-fulldeps/extern-fn-with-extern-types/ctest.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-extern-types%2Fctest.c", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-extern-types%2Fctest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-extern-types%2Fctest.c?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-fn-with-extern-types/ctest.c"}, {"sha": "9d6c87885b16ecd291f0b71c391a8e5857fdfb68", "filename": "src/test/run-make-fulldeps/extern-fn-with-extern-types/test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-extern-types%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-extern-types%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-extern-types%2Ftest.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-fn-with-extern-types/test.rs"}, {"sha": "042048ec25f63c05096693257dff6b2d8f6a3a2d", "filename": "src/test/run-make-fulldeps/extern-fn-with-packed-struct/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-packed-struct%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-packed-struct%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-packed-struct%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-fn-with-packed-struct/Makefile"}, {"sha": "4124e202c1dd05d4f0875493c6912dc41748f97b", "filename": "src/test/run-make-fulldeps/extern-fn-with-packed-struct/test.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-packed-struct%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-packed-struct%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-packed-struct%2Ftest.c?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-fn-with-packed-struct/test.c"}, {"sha": "d2540ad61542b0bc709cafac2a2fa304388f3218", "filename": "src/test/run-make-fulldeps/extern-fn-with-packed-struct/test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-packed-struct%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-packed-struct%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-packed-struct%2Ftest.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-fn-with-packed-struct/test.rs"}, {"sha": "71a5407e882dd0e7a0b609a3c87f465044ed2862", "filename": "src/test/run-make-fulldeps/extern-fn-with-union/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-union%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-union%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-union%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-fn-with-union/Makefile"}, {"sha": "8c87c230693d1d0d490d2028ac9b302f2c0d12f3", "filename": "src/test/run-make-fulldeps/extern-fn-with-union/ctest.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-union%2Fctest.c", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-union%2Fctest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-union%2Fctest.c?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-fn-with-union/ctest.c"}, {"sha": "f9277ba11f4763fe996964ecef581608cd2fbcb6", "filename": "src/test/run-make-fulldeps/extern-fn-with-union/test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-union%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-union%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-union%2Ftest.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-fn-with-union/test.rs"}, {"sha": "66978c38511eb40b474ae35ec2c2e8c66d92ef94", "filename": "src/test/run-make-fulldeps/extern-fn-with-union/testcrate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-union%2Ftestcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-union%2Ftestcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-union%2Ftestcrate.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-fn-with-union/testcrate.rs"}, {"sha": "1631aa806af090ec454544f599a3f0c6b7e9c854", "filename": "src/test/run-make-fulldeps/extern-multiple-copies/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-multiple-copies%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-multiple-copies%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-multiple-copies%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-multiple-copies/Makefile"}, {"sha": "a50f5de384c0281c3530af42335ca8d973739fc3", "filename": "src/test/run-make-fulldeps/extern-multiple-copies/bar.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-multiple-copies%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-multiple-copies%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-multiple-copies%2Fbar.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-multiple-copies/bar.rs"}, {"sha": "0be200ddcd27dd53d6e03180a5f8149c586e34dd", "filename": "src/test/run-make-fulldeps/extern-multiple-copies/foo1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-multiple-copies%2Ffoo1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-multiple-copies%2Ffoo1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-multiple-copies%2Ffoo1.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-multiple-copies/foo1.rs"}, {"sha": "0be200ddcd27dd53d6e03180a5f8149c586e34dd", "filename": "src/test/run-make-fulldeps/extern-multiple-copies/foo2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-multiple-copies%2Ffoo2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-multiple-copies%2Ffoo2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-multiple-copies%2Ffoo2.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-multiple-copies/foo2.rs"}, {"sha": "567d7e78a57a47793c600263e2dd8c5adc1ed488", "filename": "src/test/run-make-fulldeps/extern-multiple-copies2/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-multiple-copies2%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-multiple-copies2%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-multiple-copies2%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-multiple-copies2/Makefile"}, {"sha": "b8ac34aa53e3099bc0efebcf6f4cb51551166bc2", "filename": "src/test/run-make-fulldeps/extern-multiple-copies2/bar.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-multiple-copies2%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-multiple-copies2%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-multiple-copies2%2Fbar.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-multiple-copies2/bar.rs"}, {"sha": "1787772053ba455f4c035d99d6aec11e3042e79a", "filename": "src/test/run-make-fulldeps/extern-multiple-copies2/foo1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-multiple-copies2%2Ffoo1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-multiple-copies2%2Ffoo1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-multiple-copies2%2Ffoo1.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-multiple-copies2/foo1.rs"}, {"sha": "bad1030438779165a962beaab1639d7d44fc84b4", "filename": "src/test/run-make-fulldeps/extern-multiple-copies2/foo2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-multiple-copies2%2Ffoo2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-multiple-copies2%2Ffoo2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-multiple-copies2%2Ffoo2.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-multiple-copies2/foo2.rs"}, {"sha": "7d063a4c83cba1cd929bfa4906570bd1f5f5cac9", "filename": "src/test/run-make-fulldeps/extern-overrides-distribution/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-overrides-distribution%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-overrides-distribution%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-overrides-distribution%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-overrides-distribution/Makefile"}, {"sha": "a489d834a9236ea46aaed2290a2a18ad9923d1aa", "filename": "src/test/run-make-fulldeps/extern-overrides-distribution/libc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-overrides-distribution%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-overrides-distribution%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-overrides-distribution%2Flibc.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-overrides-distribution/libc.rs"}, {"sha": "451841e736899aba7746a755900ba610b6f12c67", "filename": "src/test/run-make-fulldeps/extern-overrides-distribution/main.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-overrides-distribution%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextern-overrides-distribution%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-overrides-distribution%2Fmain.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extern-overrides-distribution/main.rs"}, {"sha": "6de4f97df0c16bf6df2b83c8fec542a2e8198910", "filename": "src/test/run-make-fulldeps/extra-filename-with-temp-outputs/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextra-filename-with-temp-outputs%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextra-filename-with-temp-outputs%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextra-filename-with-temp-outputs%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extra-filename-with-temp-outputs/Makefile"}, {"sha": "8ae3d072362ed6b5db81a00be3becce691926a7f", "filename": "src/test/run-make-fulldeps/extra-filename-with-temp-outputs/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextra-filename-with-temp-outputs%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fextra-filename-with-temp-outputs%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextra-filename-with-temp-outputs%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/extra-filename-with-temp-outputs/foo.rs"}, {"sha": "6de58c2db18d3e013d01202ac07c7400803e4476", "filename": "src/test/run-make-fulldeps/fpic/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Ffpic%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Ffpic%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ffpic%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/fpic/Makefile"}, {"sha": "a9e231b0ea839791c963402de9fd4719b0b5a414", "filename": "src/test/run-make-fulldeps/fpic/hello.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Ffpic%2Fhello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Ffpic%2Fhello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ffpic%2Fhello.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/fpic/hello.rs"}, {"sha": "2e100b269e14bfa440f429d84050a3ad0be50256", "filename": "src/test/run-make-fulldeps/hir-tree/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fhir-tree%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fhir-tree%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhir-tree%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/hir-tree/Makefile"}, {"sha": "12adc083bcd1050650428f670da9517746c7498f", "filename": "src/test/run-make-fulldeps/hir-tree/input.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fhir-tree%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fhir-tree%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhir-tree%2Finput.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/hir-tree/input.rs"}, {"sha": "2ddf3aa5439f62d4b0d3be11924d705da4fa5a6e", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/hotplug_codegen_backend/Makefile"}, {"sha": "26ffce01b2e2c0516f319e9527829e6a904793e8", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/some_crate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fsome_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fsome_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fsome_crate.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/hotplug_codegen_backend/some_crate.rs"}, {"sha": "e266b0f5e834744e25371dd838a50844ccfd6147", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/hotplug_codegen_backend/the_backend.rs"}, {"sha": "1293695b7997776e270e51f0f9e4405f8a57a3ab", "filename": "src/test/run-make-fulldeps/include_bytes_deps/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finclude_bytes_deps%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finclude_bytes_deps%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finclude_bytes_deps%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/include_bytes_deps/Makefile"}, {"sha": "cd0875583aabe89ee197ea133980a9085d08e497", "filename": "src/test/run-make-fulldeps/include_bytes_deps/input.bin", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finclude_bytes_deps%2Finput.bin", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finclude_bytes_deps%2Finput.bin", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finclude_bytes_deps%2Finput.bin?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/include_bytes_deps/input.bin"}, {"sha": "2a19b7405f795f88e9346104f4a843251e6eef2d", "filename": "src/test/run-make-fulldeps/include_bytes_deps/input.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finclude_bytes_deps%2Finput.md", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finclude_bytes_deps%2Finput.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finclude_bytes_deps%2Finput.md?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/include_bytes_deps/input.md"}, {"sha": "cd0875583aabe89ee197ea133980a9085d08e497", "filename": "src/test/run-make-fulldeps/include_bytes_deps/input.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finclude_bytes_deps%2Finput.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finclude_bytes_deps%2Finput.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finclude_bytes_deps%2Finput.txt?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/include_bytes_deps/input.txt"}, {"sha": "27ca1a46a500d6613891f0a991917c9dd53e0ae9", "filename": "src/test/run-make-fulldeps/include_bytes_deps/main.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finclude_bytes_deps%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finclude_bytes_deps%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finclude_bytes_deps%2Fmain.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/include_bytes_deps/main.rs"}, {"sha": "0cab955f6442bb70d3acb8063ed645666a9ba414", "filename": "src/test/run-make-fulldeps/inline-always-many-cgu/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finline-always-many-cgu%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finline-always-many-cgu%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finline-always-many-cgu%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/inline-always-many-cgu/Makefile"}, {"sha": "539dcdfa9b30b7bfff5f4e7a372b465df0e4f876", "filename": "src/test/run-make-fulldeps/inline-always-many-cgu/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finline-always-many-cgu%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finline-always-many-cgu%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finline-always-many-cgu%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/inline-always-many-cgu/foo.rs"}, {"sha": "1268022e37b744294eb2772f96333598109f9e33", "filename": "src/test/run-make-fulldeps/interdependent-c-libraries/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/interdependent-c-libraries/Makefile"}, {"sha": "c761f029effbec56ea1bf0e5a7690eb3f3baa57c", "filename": "src/test/run-make-fulldeps/interdependent-c-libraries/bar.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Fbar.c?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/interdependent-c-libraries/bar.c"}, {"sha": "1963976b4b0f5e63ee294dbe709974da9277e3e1", "filename": "src/test/run-make-fulldeps/interdependent-c-libraries/bar.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Fbar.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/interdependent-c-libraries/bar.rs"}, {"sha": "2895ad473bf966158015a0295e161767b673f29a", "filename": "src/test/run-make-fulldeps/interdependent-c-libraries/foo.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Ffoo.c?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/interdependent-c-libraries/foo.c"}, {"sha": "7a0fe6bb18f90528f0b5fc727adb267071c98adf", "filename": "src/test/run-make-fulldeps/interdependent-c-libraries/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/interdependent-c-libraries/foo.rs"}, {"sha": "f42e3dd44a92497bd7e13f2ea08e008452a83dac", "filename": "src/test/run-make-fulldeps/interdependent-c-libraries/main.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Fmain.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/interdependent-c-libraries/main.rs"}, {"sha": "305e8a7ddc96894d79c54ebedbed52a666f8dc11", "filename": "src/test/run-make-fulldeps/intrinsic-unreachable/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/intrinsic-unreachable/Makefile"}, {"sha": "1b8b644dd78e867888038e4f5412cdd806d36774", "filename": "src/test/run-make-fulldeps/intrinsic-unreachable/exit-ret.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2Fexit-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2Fexit-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2Fexit-ret.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/intrinsic-unreachable/exit-ret.rs"}, {"sha": "de63809ab6638f19fc9df0dd41333d8052c78ef7", "filename": "src/test/run-make-fulldeps/intrinsic-unreachable/exit-unreachable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2Fexit-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2Fexit-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2Fexit-unreachable.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/intrinsic-unreachable/exit-unreachable.rs"}, {"sha": "b6fb122d98bf227bec3f3f7d5fd70126bbff3bbf", "filename": "src/test/run-make-fulldeps/invalid-library/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finvalid-library%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finvalid-library%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finvalid-library%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/invalid-library/Makefile"}, {"sha": "6316cfa3bba08c9efa9bedac15a71633e66bf7a0", "filename": "src/test/run-make-fulldeps/invalid-library/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finvalid-library%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finvalid-library%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finvalid-library%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/invalid-library/foo.rs"}, {"sha": "3a91902ccceb622fc9ae2b78b103ac0f1c2c0cab", "filename": "src/test/run-make-fulldeps/invalid-staticlib/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finvalid-staticlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Finvalid-staticlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finvalid-staticlib%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/invalid-staticlib/Makefile"}, {"sha": "cf6572c27ad5e0b84594aaaa92c4335dca064d6b", "filename": "src/test/run-make-fulldeps/issue-11908/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-11908%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-11908%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-11908%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/issue-11908/Makefile"}, {"sha": "6316cfa3bba08c9efa9bedac15a71633e66bf7a0", "filename": "src/test/run-make-fulldeps/issue-11908/bar.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-11908%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-11908%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-11908%2Fbar.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/issue-11908/bar.rs"}, {"sha": "0858d3c4e47a12b8f1ab52030597d3ee872df721", "filename": "src/test/run-make-fulldeps/issue-11908/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-11908%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-11908%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-11908%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/issue-11908/foo.rs"}, {"sha": "bd94db09520288c593995cd866c8f043435f6223", "filename": "src/test/run-make-fulldeps/issue-14500/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-14500%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-14500%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-14500%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/issue-14500/Makefile"}, {"sha": "4b4916fe96d636eaf83d1bb07d9852b6ece1cebf", "filename": "src/test/run-make-fulldeps/issue-14500/bar.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-14500%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-14500%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-14500%2Fbar.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/issue-14500/bar.rs"}, {"sha": "e84b5509c50362d2a510d5ab4452d57325701882", "filename": "src/test/run-make-fulldeps/issue-14500/foo.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-14500%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-14500%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-14500%2Ffoo.c?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/issue-14500/foo.c"}, {"sha": "a91d8d6a21df47e5045b80e4280e4c5763ddabb7", "filename": "src/test/run-make-fulldeps/issue-14500/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-14500%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-14500%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-14500%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/issue-14500/foo.rs"}, {"sha": "dbe8317dbc4bc3b51292a9919e2e52460b44fe64", "filename": "src/test/run-make-fulldeps/issue-14698/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-14698%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-14698%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-14698%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/issue-14698/Makefile"}, {"sha": "7dc79f2043ba84fcfd20a4d9feaab2a0f674506a", "filename": "src/test/run-make-fulldeps/issue-14698/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-14698%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-14698%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-14698%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/issue-14698/foo.rs"}, {"sha": "846805686a12a82a8598b24a7e14fd17b00f1c7b", "filename": "src/test/run-make-fulldeps/issue-15460/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-15460%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-15460%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-15460%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/issue-15460/Makefile"}, {"sha": "46777f7fbd241ef49163ad73d540a01b46a9b05c", "filename": "src/test/run-make-fulldeps/issue-15460/bar.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-15460%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-15460%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-15460%2Fbar.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/issue-15460/bar.rs"}, {"sha": "fdf595b574e3397280431138651de0bfd5c85c6f", "filename": "src/test/run-make-fulldeps/issue-15460/foo.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-15460%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-15460%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-15460%2Ffoo.c?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/issue-15460/foo.c"}, {"sha": "6917fa55579801da9e10c8fc76b3a83257303340", "filename": "src/test/run-make-fulldeps/issue-15460/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-15460%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-15460%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-15460%2Ffoo.rs?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/issue-15460/foo.rs"}, {"sha": "bef70a0edaab9b566487179c6aed08f52312d052", "filename": "src/test/run-make-fulldeps/issue-18943/Makefile", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-18943%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14/src%2Ftest%2Frun-make-fulldeps%2Fissue-18943%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-18943%2FMakefile?ref=c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "previous_filename": "src/test/run-make/issue-18943/Makefile"}]}