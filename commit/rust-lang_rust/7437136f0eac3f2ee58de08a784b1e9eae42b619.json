{"sha": "7437136f0eac3f2ee58de08a784b1e9eae42b619", "node_id": "C_kwDOAAsO6NoAKDc0MzcxMzZmMGVhYzNmMmVlNThkZTA4YTc4NGIxZTllYWU0MmI2MTk", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-23T13:50:02Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-21T19:13:43Z"}, "message": "Use CreateParameter mode for closures too.", "tree": {"sha": "0924e2ca0dbce0946a33a5bf1cd887207eda16cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0924e2ca0dbce0946a33a5bf1cd887207eda16cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7437136f0eac3f2ee58de08a784b1e9eae42b619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7437136f0eac3f2ee58de08a784b1e9eae42b619", "html_url": "https://github.com/rust-lang/rust/commit/7437136f0eac3f2ee58de08a784b1e9eae42b619", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7437136f0eac3f2ee58de08a784b1e9eae42b619/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32af719b07217ff89e61a2031500cee138599baa", "url": "https://api.github.com/repos/rust-lang/rust/commits/32af719b07217ff89e61a2031500cee138599baa", "html_url": "https://github.com/rust-lang/rust/commit/32af719b07217ff89e61a2031500cee138599baa"}], "stats": {"total": 152, "additions": 85, "deletions": 67}, "files": [{"sha": "3babe73030a45efac44d1eab8f4c50e9e4fb7385", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 34, "deletions": 23, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/7437136f0eac3f2ee58de08a784b1e9eae42b619/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7437136f0eac3f2ee58de08a784b1e9eae42b619/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=7437136f0eac3f2ee58de08a784b1e9eae42b619", "patch": "@@ -165,6 +165,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     if let Async::Yes { closure_id, .. } = asyncness {\n                         self.lower_expr_async_closure(\n                             capture_clause,\n+                            e.id,\n                             closure_id,\n                             decl,\n                             body,\n@@ -173,6 +174,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     } else {\n                         self.lower_expr_closure(\n                             capture_clause,\n+                            e.id,\n                             movability,\n                             decl,\n                             body,\n@@ -604,6 +606,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // `static |_task_context| -> <ret_ty> { body }`:\n         let generator_kind = hir::ExprKind::Closure {\n             capture_clause,\n+            bound_generic_params: &[],\n             fn_decl,\n             body,\n             fn_decl_span: self.lower_span(span),\n@@ -828,6 +831,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_expr_closure(\n         &mut self,\n         capture_clause: CaptureBy,\n+        closure_id: NodeId,\n         movability: Movability,\n         decl: &FnDecl,\n         body: &Expr,\n@@ -848,16 +852,19 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             (body_id, generator_option)\n         });\n \n-        // Lower outside new scope to preserve `is_in_loop_condition`.\n-        let fn_decl = self.lower_fn_decl(decl, None, FnDeclKind::Closure, None);\n-\n-        hir::ExprKind::Closure {\n-            capture_clause,\n-            fn_decl,\n-            body,\n-            fn_decl_span: self.lower_span(fn_decl_span),\n-            movability: generator_option,\n-        }\n+        self.with_lifetime_binder(closure_id, &[], |this, bound_generic_params| {\n+            // Lower outside new scope to preserve `is_in_loop_condition`.\n+            let fn_decl = this.lower_fn_decl(decl, None, FnDeclKind::Closure, None);\n+\n+            hir::ExprKind::Closure {\n+                capture_clause,\n+                bound_generic_params,\n+                fn_decl,\n+                body,\n+                fn_decl_span: this.lower_span(fn_decl_span),\n+                movability: generator_option,\n+            }\n+        })\n     }\n \n     fn generator_movability_for_fn(\n@@ -897,6 +904,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         &mut self,\n         capture_clause: CaptureBy,\n         closure_id: NodeId,\n+        inner_closure_id: NodeId,\n         decl: &FnDecl,\n         body: &Expr,\n         fn_decl_span: Span,\n@@ -927,7 +935,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     if let FnRetTy::Ty(ty) = &decl.output { Some(ty.clone()) } else { None };\n                 let async_body = this.make_async_expr(\n                     capture_clause,\n-                    closure_id,\n+                    inner_closure_id,\n                     async_ret_ty,\n                     body.span,\n                     hir::AsyncGeneratorKind::Closure,\n@@ -938,18 +946,21 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             body_id\n         });\n \n-        // We need to lower the declaration outside the new scope, because we\n-        // have to conserve the state of being inside a loop condition for the\n-        // closure argument types.\n-        let fn_decl = self.lower_fn_decl(&outer_decl, None, FnDeclKind::Closure, None);\n-\n-        hir::ExprKind::Closure {\n-            capture_clause,\n-            fn_decl,\n-            body,\n-            fn_decl_span: self.lower_span(fn_decl_span),\n-            movability: None,\n-        }\n+        self.with_lifetime_binder(closure_id, &[], |this, bound_generic_params| {\n+            // We need to lower the declaration outside the new scope, because we\n+            // have to conserve the state of being inside a loop condition for the\n+            // closure argument types.\n+            let fn_decl = this.lower_fn_decl(&outer_decl, None, FnDeclKind::Closure, None);\n+\n+            hir::ExprKind::Closure {\n+                capture_clause,\n+                bound_generic_params,\n+                fn_decl,\n+                body,\n+                fn_decl_span: this.lower_span(fn_decl_span),\n+                movability: None,\n+            }\n+        })\n     }\n \n     /// Destructure the LHS of complex assignments."}, {"sha": "a7fc59255d79a3dd73d40a7052a37d4172b48ec3", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7437136f0eac3f2ee58de08a784b1e9eae42b619/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7437136f0eac3f2ee58de08a784b1e9eae42b619/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=7437136f0eac3f2ee58de08a784b1e9eae42b619", "patch": "@@ -1932,6 +1932,7 @@ pub enum ExprKind<'hir> {\n     /// `Option<Movability>`.\n     Closure {\n         capture_clause: CaptureBy,\n+        bound_generic_params: &'hir [GenericParam<'hir>],\n         fn_decl: &'hir FnDecl<'hir>,\n         body: BodyId,\n         fn_decl_span: Span,\n@@ -3480,7 +3481,7 @@ impl<'hir> Node<'hir> {\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n mod size_asserts {\n     rustc_data_structures::static_assert_size!(super::Block<'static>, 48);\n-    rustc_data_structures::static_assert_size!(super::Expr<'static>, 56);\n+    rustc_data_structures::static_assert_size!(super::Expr<'static>, 64);\n     rustc_data_structures::static_assert_size!(super::Pat<'static>, 88);\n     rustc_data_structures::static_assert_size!(super::QPath<'static>, 24);\n     rustc_data_structures::static_assert_size!(super::Ty<'static>, 72);"}, {"sha": "e68274e2ad9788d0f46906c9848ac2f1a98b6b89", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7437136f0eac3f2ee58de08a784b1e9eae42b619/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7437136f0eac3f2ee58de08a784b1e9eae42b619/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=7437136f0eac3f2ee58de08a784b1e9eae42b619", "patch": "@@ -1169,12 +1169,16 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n             walk_list!(visitor, visit_arm, arms);\n         }\n         ExprKind::Closure {\n+            bound_generic_params,\n             ref fn_decl,\n             body,\n             capture_clause: _,\n             fn_decl_span: _,\n             movability: _,\n-        } => visitor.visit_fn(FnKind::Closure, fn_decl, body, expression.span, expression.hir_id),\n+        } => {\n+            walk_list!(visitor, visit_generic_param, bound_generic_params);\n+            visitor.visit_fn(FnKind::Closure, fn_decl, body, expression.span, expression.hir_id)\n+        }\n         ExprKind::Block(ref block, ref opt_label) => {\n             walk_list!(visitor, visit_label, opt_label);\n             visitor.visit_block(block);"}, {"sha": "7bf91df9f760b6fbac5e409564847039712128c2", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7437136f0eac3f2ee58de08a784b1e9eae42b619/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7437136f0eac3f2ee58de08a784b1e9eae42b619/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=7437136f0eac3f2ee58de08a784b1e9eae42b619", "patch": "@@ -1459,11 +1459,13 @@ impl<'a> State<'a> {\n             }\n             hir::ExprKind::Closure {\n                 capture_clause,\n+                bound_generic_params,\n                 ref fn_decl,\n                 body,\n                 fn_decl_span: _,\n                 movability: _,\n             } => {\n+                self.print_formal_generic_params(bound_generic_params);\n                 self.print_capture_clause(capture_clause);\n \n                 self.print_closure_params(&fn_decl, body);"}, {"sha": "e36f55b2e0237d5d53d2cb768cfa2b891a0c10b7", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7437136f0eac3f2ee58de08a784b1e9eae42b619/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7437136f0eac3f2ee58de08a784b1e9eae42b619/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=7437136f0eac3f2ee58de08a784b1e9eae42b619", "patch": "@@ -845,11 +845,13 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                         }\n                     }\n                     FnKind::Closure(declaration, body) => {\n-                        // Do not attempt to create generic lifetime parameters.\n-                        // FIXME: Revisit this decision once `for<>` bounds on closures become a\n-                        // thing.\n+                        // We do not have any explicit generic lifetime parameter.\n+                        // FIXME(rfc3216): Change when implementing `for<>` bounds on closures.\n                         this.with_lifetime_rib(\n-                            LifetimeRibKind::AnonymousPassThrough(fn_id, false),\n+                            LifetimeRibKind::AnonymousCreateParameter {\n+                                binder: fn_id,\n+                                report_in_path: false,\n+                            },\n                             // Add each argument to the rib.\n                             |this| this.resolve_params(&declaration.inputs),\n                         );\n@@ -1582,7 +1584,10 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                             }\n                             break;\n                         }\n-                        _ => {}\n+                        LifetimeRibKind::AnonymousCreateParameter { .. }\n+                        | LifetimeRibKind::Generics { .. }\n+                        | LifetimeRibKind::ConstGeneric\n+                        | LifetimeRibKind::AnonConst => {}\n                     }\n                 }\n                 continue;"}, {"sha": "172dc7ffe959e40095951a5fdd69833893f1b428", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 32, "deletions": 37, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/7437136f0eac3f2ee58de08a784b1e9eae42b619/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7437136f0eac3f2ee58de08a784b1e9eae42b619/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=7437136f0eac3f2ee58de08a784b1e9eae42b619", "patch": "@@ -29,8 +29,6 @@ use std::cell::Cell;\n use std::fmt;\n use std::mem::take;\n \n-use tracing::{debug, span, Level};\n-\n trait RegionExt {\n     fn early(hir_map: Map<'_>, index: &mut u32, param: &GenericParam<'_>) -> (LocalDefId, Region);\n \n@@ -572,41 +570,38 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         });\n     }\n \n-    fn visit_fn(\n-        &mut self,\n-        fk: intravisit::FnKind<'tcx>,\n-        fd: &'tcx hir::FnDecl<'tcx>,\n-        b: hir::BodyId,\n-        s: rustc_span::Span,\n-        hir_id: hir::HirId,\n-    ) {\n-        let name = match fk {\n-            intravisit::FnKind::ItemFn(id, _, _) => id.name,\n-            intravisit::FnKind::Method(id, _) => id.name,\n-            intravisit::FnKind::Closure => sym::closure,\n-        };\n-        let name = name.as_str();\n-        let span = span!(Level::DEBUG, \"visit_fn\", name);\n-        let _enter = span.enter();\n-        match fk {\n-            // Any `Binders` are handled elsewhere\n-            intravisit::FnKind::ItemFn(..) | intravisit::FnKind::Method(..) => {\n-                intravisit::walk_fn(self, fk, fd, b, s, hir_id)\n-            }\n-            intravisit::FnKind::Closure => {\n-                self.map.late_bound_vars.insert(hir_id, vec![]);\n-                let scope = Scope::Binder {\n-                    hir_id,\n-                    lifetimes: FxIndexMap::default(),\n-                    next_early_index: self.next_early_index(),\n-                    s: self.scope,\n-                    opaque_type_parent: false,\n-                    scope_type: BinderScopeType::Normal,\n-                    allow_late_bound: true,\n-                    where_bound_origin: None,\n-                };\n-                self.with(scope, move |this| intravisit::walk_fn(this, fk, fd, b, s, hir_id));\n-            }\n+    fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {\n+        if let hir::ExprKind::Closure { bound_generic_params, .. } = e.kind {\n+            let next_early_index = self.next_early_index();\n+            let (lifetimes, binders): (FxIndexMap<LocalDefId, Region>, Vec<_>) =\n+                bound_generic_params\n+                    .iter()\n+                    .filter(|param| matches!(param.kind, GenericParamKind::Lifetime { .. }))\n+                    .enumerate()\n+                    .map(|(late_bound_idx, param)| {\n+                        let pair = Region::late(late_bound_idx as u32, self.tcx.hir(), param);\n+                        let r = late_region_as_bound_region(self.tcx, &pair.1);\n+                        (pair, r)\n+                    })\n+                    .unzip();\n+            self.map.late_bound_vars.insert(e.hir_id, binders);\n+            let scope = Scope::Binder {\n+                hir_id: e.hir_id,\n+                lifetimes,\n+                s: self.scope,\n+                next_early_index,\n+                opaque_type_parent: false,\n+                scope_type: BinderScopeType::Normal,\n+                allow_late_bound: true,\n+                where_bound_origin: None,\n+            };\n+            self.with(scope, |this| {\n+                // a closure has no bounds, so everything\n+                // contained within is scoped within its binder.\n+                intravisit::walk_expr(this, e)\n+            });\n+        } else {\n+            intravisit::walk_expr(self, e)\n         }\n     }\n "}]}