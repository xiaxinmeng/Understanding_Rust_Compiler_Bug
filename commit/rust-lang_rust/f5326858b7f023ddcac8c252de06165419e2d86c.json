{"sha": "f5326858b7f023ddcac8c252de06165419e2d86c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MzI2ODU4YjdmMDIzZGRjYWM4YzI1MmRlMDYxNjU0MTllMmQ4NmM=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2016-04-20T13:00:33Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2016-04-20T13:00:33Z"}, "message": "Show previous definition of duplicate impl item", "tree": {"sha": "c6bc4041e80c06bff6719caf53b8c672232e3b58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6bc4041e80c06bff6719caf53b8c672232e3b58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5326858b7f023ddcac8c252de06165419e2d86c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5326858b7f023ddcac8c252de06165419e2d86c", "html_url": "https://github.com/rust-lang/rust/commit/f5326858b7f023ddcac8c252de06165419e2d86c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5326858b7f023ddcac8c252de06165419e2d86c/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dd88f60de01774b9f9e29c0289a874a5dcaa1ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dd88f60de01774b9f9e29c0289a874a5dcaa1ce", "html_url": "https://github.com/rust-lang/rust/commit/3dd88f60de01774b9f9e29c0289a874a5dcaa1ce"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "859fbd974fedc113f46af2297750fad25d47e422", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f5326858b7f023ddcac8c252de06165419e2d86c/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5326858b7f023ddcac8c252de06165419e2d86c/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=f5326858b7f023ddcac8c252de06165419e2d86c", "patch": "@@ -34,9 +34,7 @@ use CrateCtxt;\n use rustc::infer::{self, InferCtxt, TypeOrigin, new_infer_ctxt};\n use std::cell::RefCell;\n use std::rc::Rc;\n-use syntax::ast;\n use syntax::codemap::Span;\n-use syntax::errors::DiagnosticBuilder;\n use util::nodemap::{DefIdMap, FnvHashMap};\n use rustc::dep_graph::DepNode;\n use rustc::hir::map as hir_map;\n@@ -517,13 +515,6 @@ fn enforce_trait_manually_implementable(tcx: &TyCtxt, sp: Span, trait_def_id: De\n     err.emit();\n }\n \n-// Factored out into helper because the error cannot be defined in multiple locations.\n-pub fn report_duplicate_item<'tcx>(tcx: &TyCtxt<'tcx>, sp: Span, name: ast::Name)\n-                                   -> DiagnosticBuilder<'tcx>\n-{\n-    struct_span_err!(tcx.sess, sp, E0201, \"duplicate definitions with name `{}`:\", name)\n-}\n-\n pub fn check_coherence(crate_context: &CrateCtxt) {\n     let _task = crate_context.tcx.dep_graph.in_task(DepNode::Coherence);\n     let infcx = new_infer_ctxt(crate_context.tcx,"}, {"sha": "95958d78067da4edcb12a6b366a02f1ab8045d43", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f5326858b7f023ddcac8c252de06165419e2d86c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5326858b7f023ddcac8c252de06165419e2d86c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f5326858b7f023ddcac8c252de06165419e2d86c", "patch": "@@ -63,7 +63,6 @@ use lint;\n use hir::def::Def;\n use hir::def_id::DefId;\n use constrained_type_params as ctp;\n-use coherence;\n use middle::lang_items::SizedTraitLangItem;\n use middle::resolve_lifetime;\n use middle::const_val::ConstVal;\n@@ -80,13 +79,14 @@ use rscope::*;\n use rustc::dep_graph::DepNode;\n use rustc::hir::map as hir_map;\n use util::common::{ErrorReported, MemoizationMap};\n-use util::nodemap::{FnvHashMap, FnvHashSet};\n+use util::nodemap::FnvHashMap;\n use write_ty_to_tcx;\n \n use rustc_const_math::ConstInt;\n \n use std::cell::RefCell;\n use std::collections::HashSet;\n+use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::rc::Rc;\n \n use syntax::abi;\n@@ -742,16 +742,27 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n \n             // Convert all the associated consts.\n             // Also, check if there are any duplicate associated items\n-            let mut seen_type_items = FnvHashSet();\n-            let mut seen_value_items = FnvHashSet();\n+            let mut seen_type_items = FnvHashMap();\n+            let mut seen_value_items = FnvHashMap();\n \n             for impl_item in impl_items {\n                 let seen_items = match impl_item.node {\n                     hir::ImplItemKind::Type(_) => &mut seen_type_items,\n                     _                    => &mut seen_value_items,\n                 };\n-                if !seen_items.insert(impl_item.name) {\n-                    coherence::report_duplicate_item(tcx, impl_item.span, impl_item.name).emit();\n+                match seen_items.entry(impl_item.name) {\n+                    Occupied(entry) => {\n+                        let mut err = struct_span_err!(tcx.sess, impl_item.span, E0201,\n+                                                       \"duplicate definitions with name `{}`:\",\n+                                                       impl_item.name);\n+                        span_note!(&mut err, *entry.get(),\n+                                   \"previous definition of `{}` here\",\n+                                   impl_item.name);\n+                        err.emit();\n+                    }\n+                    Vacant(entry) => {\n+                        entry.insert(impl_item.span);\n+                    }\n                 }\n \n                 if let hir::ImplItemKind::Const(ref ty, _) = impl_item.node {"}, {"sha": "981eddc9dd96b20d502cf8523615be8bf7e3233f", "filename": "src/test/compile-fail/impl-duplicate-methods.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f5326858b7f023ddcac8c252de06165419e2d86c/src%2Ftest%2Fcompile-fail%2Fimpl-duplicate-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5326858b7f023ddcac8c252de06165419e2d86c/src%2Ftest%2Fcompile-fail%2Fimpl-duplicate-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-duplicate-methods.rs?ref=f5326858b7f023ddcac8c252de06165419e2d86c", "patch": "@@ -9,9 +9,10 @@\n // except according to those terms.\n \n struct Foo;\n+\n impl Foo {\n-    fn orange(&self){}\n-    fn orange(&self){}   //~ ERROR duplicate definitions\n+    fn orange(&self) {} //~ NOTE previous definition of `orange` here\n+    fn orange(&self) {} //~ ERROR duplicate definitions with name `orange`\n }\n \n fn main() {}"}]}