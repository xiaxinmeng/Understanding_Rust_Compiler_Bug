{"sha": "93f627daa53677f76ad50bcfa3c8eb618f5ca89f", "node_id": "C_kwDOAAsO6NoAKDkzZjYyN2RhYTUzNjc3Zjc2YWQ1MGJjZmEzYzhlYjYxOGY1Y2E4OWY", "commit": {"author": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-02-17T13:17:19Z"}, "committer": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-02-17T13:17:19Z"}, "message": "Keep the path after `program_exists`  succeeds", "tree": {"sha": "9a4d4db30caef5a95d3a1ecc78b4db212339a86b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a4d4db30caef5a95d3a1ecc78b4db212339a86b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93f627daa53677f76ad50bcfa3c8eb618f5ca89f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+p/jD6jrzmnSIWJLcTRy8vRWJ94FAmIOSt8ACgkQcTRy8vRW\nJ97ExQ/9HwImzxDi1l5OYlYD4RFj2MEBCRFoa1qztMTLcaZvJynd3NQx/iNcGPQh\nDrpnabHR8+mtfIBGqYGI0HZgAxmXnJNXCzDUFid+LI2vNYyiXRfhIeZJNWeqEVPT\nsuGOl3CUkTEkhLX9Ds9IeWqYCiOxU3aesD6MEEUMm/t7mtFU6KmJ63SQ3YEwpR5q\nd6Xw1MpBstaLIvbB5W0r2/tKC2i1hv0FeGR9tBXtQ1oxyK+grglrVu72+UrLEKxD\nmX/0XKMTcXJoi9HJygHx/AHZBNLr+Yp84t+4NjKQd8m7NDU/Q2QtM9hlPJEolh3n\n7aDpc9NsRewrkM4JLImrATzR3RgeihsJhbvm+ETugwBfKWtSAiPnwBW6WVadVBjT\nm5YR4DTPrnyPuNnGhdShqHT95BaS0xZQmHujUHFtn8cSmHcYX/DAb35lQyqed5zy\n70jNGxuOtGZgva93d5KpLVNgyys1teiyY0rU5DUgBTHk4HgW/6u1JTQ4letQcwTy\nics5/Q9JH6M3BaVSCd71J7W8JKJsHtAIXTYwc5fVwFgTWWRor/kg1xxJMrcM2+f1\np35rv4wdg8efdAf9/9zifMv3RoK+ZYG+fwW8euYr2BmHzgN0I+a6mz8Pz5EH6J7e\nCPONJfHvDWms1jdIgZI11yyli+NkvzR75LuFU2hEUCPe3W4sRnM=\n=Covm\n-----END PGP SIGNATURE-----", "payload": "tree 9a4d4db30caef5a95d3a1ecc78b4db212339a86b\nparent d4686c60669591ea9ae6e4391fc7a6628ce8062a\nauthor Chris Denton <christophersdenton@gmail.com> 1645103839 +0000\ncommitter Chris Denton <christophersdenton@gmail.com> 1645103839 +0000\n\nKeep the path after `program_exists`  succeeds\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93f627daa53677f76ad50bcfa3c8eb618f5ca89f", "html_url": "https://github.com/rust-lang/rust/commit/93f627daa53677f76ad50bcfa3c8eb618f5ca89f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93f627daa53677f76ad50bcfa3c8eb618f5ca89f/comments", "author": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4686c60669591ea9ae6e4391fc7a6628ce8062a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4686c60669591ea9ae6e4391fc7a6628ce8062a", "html_url": "https://github.com/rust-lang/rust/commit/d4686c60669591ea9ae6e4391fc7a6628ce8062a"}], "stats": {"total": 45, "additions": 23, "deletions": 22}, "files": [{"sha": "a13585a02224aed6e43f0cc1fd042635275c3b25", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/93f627daa53677f76ad50bcfa3c8eb618f5ca89f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f627daa53677f76ad50bcfa3c8eb618f5ca89f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=93f627daa53677f76ad50bcfa3c8eb618f5ca89f", "patch": "@@ -269,11 +269,11 @@ impl Command {\n             None\n         };\n         let program = resolve_exe(&self.program, || env::var_os(\"PATH\"), child_paths)?;\n-        let is_batch_file = program\n-            .extension()\n-            .map(|ext| ext.eq_ignore_ascii_case(\"cmd\") || ext.eq_ignore_ascii_case(\"bat\"))\n-            .unwrap_or(false);\n-        let program = path::maybe_verbatim(&program)?;\n+        // Case insensitive \"ends_with\" of UTF-16 encoded \".bat\" or \".cmd\"\n+        let is_batch_file = matches!(\n+            program.len().checked_sub(5).and_then(|i| program.get(i..)),\n+            Some([46, 98 | 66, 97 | 65, 116 | 84, 0] | [46, 99 | 67, 109 | 77, 100 | 68, 0])\n+        );\n         let mut cmd_str =\n             make_command_line(&program, &self.args, self.force_quotes_enabled, is_batch_file)?;\n         cmd_str.push(0); // add null terminator\n@@ -370,7 +370,7 @@ fn resolve_exe<'a>(\n     exe_path: &'a OsStr,\n     parent_paths: impl FnOnce() -> Option<OsString>,\n     child_paths: Option<&OsStr>,\n-) -> io::Result<PathBuf> {\n+) -> io::Result<Vec<u16>> {\n     // Early return if there is no filename.\n     if exe_path.is_empty() || path::has_trailing_slash(exe_path) {\n         return Err(io::const_io_error!(\n@@ -392,19 +392,19 @@ fn resolve_exe<'a>(\n         if has_exe_suffix {\n             // The application name is a path to a `.exe` file.\n             // Let `CreateProcessW` figure out if it exists or not.\n-            return Ok(exe_path.into());\n+            return path::maybe_verbatim(Path::new(exe_path));\n         }\n         let mut path = PathBuf::from(exe_path);\n \n         // Append `.exe` if not already there.\n         path = path::append_suffix(path, EXE_SUFFIX.as_ref());\n-        if program_exists(&path) {\n+        if let Some(path) = program_exists(&path) {\n             return Ok(path);\n         } else {\n             // It's ok to use `set_extension` here because the intent is to\n             // remove the extension that was just added.\n             path.set_extension(\"\");\n-            return Ok(path);\n+            return path::maybe_verbatim(&path);\n         }\n     } else {\n         ensure_no_nuls(exe_path)?;\n@@ -419,7 +419,7 @@ fn resolve_exe<'a>(\n             if !has_extension {\n                 path.set_extension(EXE_EXTENSION);\n             }\n-            if program_exists(&path) { Some(path) } else { None }\n+            program_exists(&path)\n         });\n         if let Some(path) = result {\n             return Ok(path);\n@@ -435,10 +435,10 @@ fn search_paths<Paths, Exists>(\n     parent_paths: Paths,\n     child_paths: Option<&OsStr>,\n     mut exists: Exists,\n-) -> Option<PathBuf>\n+) -> Option<Vec<u16>>\n where\n     Paths: FnOnce() -> Option<OsString>,\n-    Exists: FnMut(PathBuf) -> Option<PathBuf>,\n+    Exists: FnMut(PathBuf) -> Option<Vec<u16>>,\n {\n     // 1. Child paths\n     // This is for consistency with Rust's historic behaviour.\n@@ -490,17 +490,18 @@ where\n }\n \n /// Check if a file exists without following symlinks.\n-fn program_exists(path: &Path) -> bool {\n+fn program_exists(path: &Path) -> Option<Vec<u16>> {\n     unsafe {\n-        to_u16s(path)\n-            .map(|path| {\n-                // Getting attributes using `GetFileAttributesW` does not follow symlinks\n-                // and it will almost always be successful if the link exists.\n-                // There are some exceptions for special system files (e.g. the pagefile)\n-                // but these are not executable.\n-                c::GetFileAttributesW(path.as_ptr()) != c::INVALID_FILE_ATTRIBUTES\n-            })\n-            .unwrap_or(false)\n+        let path = path::maybe_verbatim(path).ok()?;\n+        // Getting attributes using `GetFileAttributesW` does not follow symlinks\n+        // and it will almost always be successful if the link exists.\n+        // There are some exceptions for special system files (e.g. the pagefile)\n+        // but these are not executable.\n+        if c::GetFileAttributesW(path.as_ptr()) == c::INVALID_FILE_ATTRIBUTES {\n+            None\n+        } else {\n+            Some(path)\n+        }\n     }\n }\n "}]}