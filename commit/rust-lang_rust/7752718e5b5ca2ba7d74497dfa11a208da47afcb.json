{"sha": "7752718e5b5ca2ba7d74497dfa11a208da47afcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NTI3MThlNWI1Y2EyYmE3ZDc0NDk3ZGZhMTFhMjA4ZGE0N2FmY2I=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-08-19T16:52:56Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-08-19T16:52:56Z"}, "message": "Update target_feature_whitelist", "tree": {"sha": "7cafe081722426da59b553aae9b8177e32191446", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cafe081722426da59b553aae9b8177e32191446"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7752718e5b5ca2ba7d74497dfa11a208da47afcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7752718e5b5ca2ba7d74497dfa11a208da47afcb", "html_url": "https://github.com/rust-lang/rust/commit/7752718e5b5ca2ba7d74497dfa11a208da47afcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7752718e5b5ca2ba7d74497dfa11a208da47afcb/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50cd72d5905a020500e912bc2913e0013e9cebab", "url": "https://api.github.com/repos/rust-lang/rust/commits/50cd72d5905a020500e912bc2913e0013e9cebab", "html_url": "https://github.com/rust-lang/rust/commit/50cd72d5905a020500e912bc2913e0013e9cebab"}], "stats": {"total": 79, "additions": 47, "deletions": 32}, "files": [{"sha": "07b70155f0f21e3901097b345678bc0f9f426fab", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7752718e5b5ca2ba7d74497dfa11a208da47afcb/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7752718e5b5ca2ba7d74497dfa11a208da47afcb/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7752718e5b5ca2ba7d74497dfa11a208da47afcb", "patch": "@@ -187,7 +187,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                     .map(|(a, b)| (a.to_string(), b))\n                     .collect()\n             } else {\n-                target_features_whitelist::target_feature_whitelist(tcx.sess)\n+                target_features_whitelist::supported_target_features(tcx.sess)\n                     .iter()\n                     .map(|&(a, b)| (a.to_string(), b))\n                     .collect()"}, {"sha": "04c8fde48d8d5fc73122f22527393e509e770480", "filename": "src/target_features_whitelist.rs", "status": "modified", "additions": 46, "deletions": 31, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/7752718e5b5ca2ba7d74497dfa11a208da47afcb/src%2Ftarget_features_whitelist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7752718e5b5ca2ba7d74497dfa11a208da47afcb/src%2Ftarget_features_whitelist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftarget_features_whitelist.rs?ref=7752718e5b5ca2ba7d74497dfa11a208da47afcb", "patch": "@@ -2,18 +2,20 @@ use rustc_span::symbol::{sym, Symbol};\n \n use rustc_session::Session;\n \n-// Copied from https://github.com/rust-lang/rust/blob/f69b07144a151f46aaee1b6230ba4160e9394562/src/librustc_codegen_llvm/llvm_util.rs#L93-L264\n+// Copied from https://github.com/rust-lang/rust/blob/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c/src/librustc_codegen_llvm/llvm_util.rs#L139-L275\n \n // WARNING: the features after applying `to_llvm_feature` must be known\n // to LLVM or the feature detection code will walk past the end of the feature\n // array, leading to crashes.\n \n-const ARM_WHITELIST: &[(&str, Option<Symbol>)] = &[\n+const ARM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"aclass\", Some(sym::arm_target_feature)),\n     (\"mclass\", Some(sym::arm_target_feature)),\n     (\"rclass\", Some(sym::arm_target_feature)),\n     (\"dsp\", Some(sym::arm_target_feature)),\n     (\"neon\", Some(sym::arm_target_feature)),\n+    (\"crc\", Some(sym::arm_target_feature)),\n+    (\"crypto\", Some(sym::arm_target_feature)),\n     (\"v5te\", Some(sym::arm_target_feature)),\n     (\"v6\", Some(sym::arm_target_feature)),\n     (\"v6k\", Some(sym::arm_target_feature)),\n@@ -23,9 +25,13 @@ const ARM_WHITELIST: &[(&str, Option<Symbol>)] = &[\n     (\"vfp2\", Some(sym::arm_target_feature)),\n     (\"vfp3\", Some(sym::arm_target_feature)),\n     (\"vfp4\", Some(sym::arm_target_feature)),\n+    // This is needed for inline assembly, but shouldn't be stabilized as-is\n+    // since it should be enabled per-function using #[instruction_set], not\n+    // #[target_feature].\n+    (\"thumb-mode\", Some(sym::arm_target_feature)),\n ];\n \n-const AARCH64_WHITELIST: &[(&str, Option<Symbol>)] = &[\n+const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"fp\", Some(sym::aarch64_target_feature)),\n     (\"neon\", Some(sym::aarch64_target_feature)),\n     (\"sve\", Some(sym::aarch64_target_feature)),\n@@ -37,12 +43,13 @@ const AARCH64_WHITELIST: &[(&str, Option<Symbol>)] = &[\n     (\"fp16\", Some(sym::aarch64_target_feature)),\n     (\"rcpc\", Some(sym::aarch64_target_feature)),\n     (\"dotprod\", Some(sym::aarch64_target_feature)),\n+    (\"tme\", Some(sym::aarch64_target_feature)),\n     (\"v8.1a\", Some(sym::aarch64_target_feature)),\n     (\"v8.2a\", Some(sym::aarch64_target_feature)),\n     (\"v8.3a\", Some(sym::aarch64_target_feature)),\n ];\n \n-const X86_WHITELIST: &[(&str, Option<Symbol>)] = &[\n+const X86_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"adx\", Some(sym::adx_target_feature)),\n     (\"aes\", None),\n     (\"avx\", None),\n@@ -86,12 +93,12 @@ const X86_WHITELIST: &[(&str, Option<Symbol>)] = &[\n     (\"xsaves\", None),\n ];\n \n-const HEXAGON_WHITELIST: &[(&str, Option<Symbol>)] = &[\n+const HEXAGON_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"hvx\", Some(sym::hexagon_target_feature)),\n-    (\"hvx-double\", Some(sym::hexagon_target_feature)),\n+    (\"hvx-length128b\", Some(sym::hexagon_target_feature)),\n ];\n \n-const POWERPC_WHITELIST: &[(&str, Option<Symbol>)] = &[\n+const POWERPC_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"altivec\", Some(sym::powerpc_target_feature)),\n     (\"power8-altivec\", Some(sym::powerpc_target_feature)),\n     (\"power9-altivec\", Some(sym::powerpc_target_feature)),\n@@ -100,43 +107,51 @@ const POWERPC_WHITELIST: &[(&str, Option<Symbol>)] = &[\n     (\"vsx\", Some(sym::powerpc_target_feature)),\n ];\n \n-const MIPS_WHITELIST: &[(&str, Option<Symbol>)] = &[\n-    (\"fp64\", Some(sym::mips_target_feature)),\n-    (\"msa\", Some(sym::mips_target_feature)),\n+const MIPS_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] =\n+    &[(\"fp64\", Some(sym::mips_target_feature)), (\"msa\", Some(sym::mips_target_feature))];\n+\n+const RISCV_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n+    (\"m\", Some(sym::riscv_target_feature)),\n+    (\"a\", Some(sym::riscv_target_feature)),\n+    (\"c\", Some(sym::riscv_target_feature)),\n+    (\"f\", Some(sym::riscv_target_feature)),\n+    (\"d\", Some(sym::riscv_target_feature)),\n+    (\"e\", Some(sym::riscv_target_feature)),\n ];\n \n-const WASM_WHITELIST: &[(&str, Option<Symbol>)] = &[\n+const WASM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"simd128\", Some(sym::wasm_target_feature)),\n     (\"atomics\", Some(sym::wasm_target_feature)),\n+    (\"nontrapping-fptoint\", Some(sym::wasm_target_feature)),\n ];\n \n /// When rustdoc is running, provide a list of all known features so that all their respective\n /// primitives may be documented.\n ///\n-/// IMPORTANT: If you're adding another whitelist to the above lists, make sure to add it to this\n-/// iterator!\n-pub(crate) fn all_known_features() -> impl Iterator<Item = (&'static str, Option<Symbol>)> {\n-    ARM_WHITELIST\n-        .iter()\n+/// IMPORTANT: If you're adding another feature list above, make sure to add it to this iterator!\n+pub fn all_known_features() -> impl Iterator<Item = (&'static str, Option<Symbol>)> {\n+    std::iter::empty()\n+        .chain(ARM_ALLOWED_FEATURES.iter())\n+        .chain(AARCH64_ALLOWED_FEATURES.iter())\n+        .chain(X86_ALLOWED_FEATURES.iter())\n+        .chain(HEXAGON_ALLOWED_FEATURES.iter())\n+        .chain(POWERPC_ALLOWED_FEATURES.iter())\n+        .chain(MIPS_ALLOWED_FEATURES.iter())\n+        .chain(RISCV_ALLOWED_FEATURES.iter())\n+        .chain(WASM_ALLOWED_FEATURES.iter())\n         .cloned()\n-        .chain(AARCH64_WHITELIST.iter().cloned())\n-        .chain(X86_WHITELIST.iter().cloned())\n-        .chain(HEXAGON_WHITELIST.iter().cloned())\n-        .chain(POWERPC_WHITELIST.iter().cloned())\n-        .chain(MIPS_WHITELIST.iter().cloned())\n-        .chain(WASM_WHITELIST.iter().cloned())\n }\n \n-pub(crate) fn target_feature_whitelist(sess: &Session) -> &'static [(&'static str, Option<Symbol>)] {\n+pub fn supported_target_features(sess: &Session) -> &'static [(&'static str, Option<Symbol>)] {\n     match &*sess.target.target.arch {\n-        \"arm\" => ARM_WHITELIST,\n-        \"aarch64\" => AARCH64_WHITELIST,\n-        \"x86\" | \"x86_64\" => X86_WHITELIST,\n-        \"hexagon\" => HEXAGON_WHITELIST,\n-        \"mips\" | \"mips64\" => MIPS_WHITELIST,\n-        \"powerpc\" | \"powerpc64\" => POWERPC_WHITELIST,\n-        // wasm32 on emscripten does not support these target features\n-        \"wasm32\" if !sess.target.target.options.is_like_emscripten => WASM_WHITELIST,\n+        \"arm\" => ARM_ALLOWED_FEATURES,\n+        \"aarch64\" => AARCH64_ALLOWED_FEATURES,\n+        \"x86\" | \"x86_64\" => X86_ALLOWED_FEATURES,\n+        \"hexagon\" => HEXAGON_ALLOWED_FEATURES,\n+        \"mips\" | \"mips64\" => MIPS_ALLOWED_FEATURES,\n+        \"powerpc\" | \"powerpc64\" => POWERPC_ALLOWED_FEATURES,\n+        \"riscv32\" | \"riscv64\" => RISCV_ALLOWED_FEATURES,\n+        \"wasm32\" => WASM_ALLOWED_FEATURES,\n         _ => &[],\n     }\n }"}]}