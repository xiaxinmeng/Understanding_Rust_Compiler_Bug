{"sha": "33137dd612cab59026bc5c0469b8761b198e3cae", "node_id": "C_kwDOAAsO6NoAKDMzMTM3ZGQ2MTJjYWI1OTAyNmJjNWMwNDY5Yjg3NjFiMTk4ZTNjYWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-28T06:26:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-28T06:26:49Z"}, "message": "Auto merge of #9733 - nbdd0121:master, r=dswij\n\nEnsure new_ret_no_self is not fired if impl Trait<Self> is returned.\n\nFix #7344: ensure new_ret_no_self is not fired if `impl Trait<Self>` is returned.\n\nchangelog: [`new_ret_no_self`]: No longer lints when `impl Trait<Self>` is returned", "tree": {"sha": "d46c910eade5af338ac7fd3bb6f695542dc385f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d46c910eade5af338ac7fd3bb6f695542dc385f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33137dd612cab59026bc5c0469b8761b198e3cae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33137dd612cab59026bc5c0469b8761b198e3cae", "html_url": "https://github.com/rust-lang/rust/commit/33137dd612cab59026bc5c0469b8761b198e3cae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33137dd612cab59026bc5c0469b8761b198e3cae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43268141da663e42bf3cd1bb4964c5af20c7e979", "url": "https://api.github.com/repos/rust-lang/rust/commits/43268141da663e42bf3cd1bb4964c5af20c7e979", "html_url": "https://github.com/rust-lang/rust/commit/43268141da663e42bf3cd1bb4964c5af20c7e979"}, {"sha": "92a119bc83507b728f7c44f357d99ccbef26bdfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/92a119bc83507b728f7c44f357d99ccbef26bdfb", "html_url": "https://github.com/rust-lang/rust/commit/92a119bc83507b728f7c44f357d99ccbef26bdfb"}], "stats": {"total": 150, "additions": 121, "deletions": 29}, "files": [{"sha": "6665329d1148f6701997a8773bcea42e584e1a68", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/33137dd612cab59026bc5c0469b8761b198e3cae/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33137dd612cab59026bc5c0469b8761b198e3cae/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=33137dd612cab59026bc5c0469b8761b198e3cae", "patch": "@@ -103,7 +103,7 @@ mod zst_offset;\n use bind_instead_of_map::BindInsteadOfMap;\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n-use clippy_utils::ty::{contains_adt_constructor, implements_trait, is_copy, is_type_diagnostic_item};\n+use clippy_utils::ty::{contains_ty_adt_constructor_opaque, implements_trait, is_copy, is_type_diagnostic_item};\n use clippy_utils::{contains_return, is_trait_method, iter_input_pats, meets_msrv, msrvs, return_ty};\n use if_chain::if_chain;\n use rustc_hir as hir;\n@@ -3394,36 +3394,10 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         if let hir::ImplItemKind::Fn(_, _) = impl_item.kind {\n             let ret_ty = return_ty(cx, impl_item.hir_id());\n \n-            // walk the return type and check for Self (this does not check associated types)\n-            if let Some(self_adt) = self_ty.ty_adt_def() {\n-                if contains_adt_constructor(ret_ty, self_adt) {\n-                    return;\n-                }\n-            } else if ret_ty.contains(self_ty) {\n+            if contains_ty_adt_constructor_opaque(cx, ret_ty, self_ty) {\n                 return;\n             }\n \n-            // if return type is impl trait, check the associated types\n-            if let ty::Opaque(def_id, _) = *ret_ty.kind() {\n-                // one of the associated types must be Self\n-                for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n-                    if let ty::PredicateKind::Projection(projection_predicate) = predicate.kind().skip_binder() {\n-                        let assoc_ty = match projection_predicate.term.unpack() {\n-                            ty::TermKind::Ty(ty) => ty,\n-                            ty::TermKind::Const(_c) => continue,\n-                        };\n-                        // walk the associated type and check for Self\n-                        if let Some(self_adt) = self_ty.ty_adt_def() {\n-                            if contains_adt_constructor(assoc_ty, self_adt) {\n-                                return;\n-                            }\n-                        } else if assoc_ty.contains(self_ty) {\n-                            return;\n-                        }\n-                    }\n-                }\n-            }\n-\n             if name == \"new\" && ret_ty != self_ty {\n                 span_lint(\n                     cx,"}, {"sha": "2dd8c826ab38288fa47e9d18ff6df193dbbb7334", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/33137dd612cab59026bc5c0469b8761b198e3cae/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33137dd612cab59026bc5c0469b8761b198e3cae/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=33137dd612cab59026bc5c0469b8761b198e3cae", "patch": "@@ -59,6 +59,58 @@ pub fn contains_adt_constructor<'tcx>(ty: Ty<'tcx>, adt: AdtDef<'tcx>) -> bool {\n     })\n }\n \n+/// Walks into `ty` and returns `true` if any inner type is an instance of the given type, or adt\n+/// constructor of the same type.\n+///\n+/// This method also recurses into opaque type predicates, so call it with `impl Trait<U>` and `U`\n+/// will also return `true`.\n+pub fn contains_ty_adt_constructor_opaque<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, needle: Ty<'tcx>) -> bool {\n+    ty.walk().any(|inner| match inner.unpack() {\n+        GenericArgKind::Type(inner_ty) => {\n+            if inner_ty == needle {\n+                return true;\n+            }\n+\n+            if inner_ty.ty_adt_def() == needle.ty_adt_def() {\n+                return true;\n+            }\n+\n+            if let ty::Opaque(def_id, _) = *inner_ty.kind() {\n+                for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n+                    match predicate.kind().skip_binder() {\n+                        // For `impl Trait<U>`, it will register a predicate of `T: Trait<U>`, so we go through\n+                        // and check substituions to find `U`.\n+                        ty::PredicateKind::Trait(trait_predicate) => {\n+                            if trait_predicate\n+                                .trait_ref\n+                                .substs\n+                                .types()\n+                                .skip(1) // Skip the implicit `Self` generic parameter\n+                                .any(|ty| contains_ty_adt_constructor_opaque(cx, ty, needle))\n+                            {\n+                                return true;\n+                            }\n+                        },\n+                        // For `impl Trait<Assoc=U>`, it will register a predicate of `<T as Trait>::Assoc = U`,\n+                        // so we check the term for `U`.\n+                        ty::PredicateKind::Projection(projection_predicate) => {\n+                            if let ty::TermKind::Ty(ty) = projection_predicate.term.unpack() {\n+                                if contains_ty_adt_constructor_opaque(cx, ty, needle) {\n+                                    return true;\n+                                }\n+                            };\n+                        },\n+                        _ => (),\n+                    }\n+                }\n+            }\n+\n+            false\n+        },\n+        GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n+    })\n+}\n+\n /// Resolves `<T as Iterator>::Item` for `T`\n /// Do not invoke without first verifying that the type implements `Iterator`\n pub fn get_iterator_item_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {"}, {"sha": "f69982d63a898d17ba3b9f6ff417c42ea8442bd8", "filename": "tests/ui/new_ret_no_self.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/33137dd612cab59026bc5c0469b8761b198e3cae/tests%2Fui%2Fnew_ret_no_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33137dd612cab59026bc5c0469b8761b198e3cae/tests%2Fui%2Fnew_ret_no_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.rs?ref=33137dd612cab59026bc5c0469b8761b198e3cae", "patch": "@@ -350,3 +350,53 @@ impl RetOtherSelf<T> {\n         RetOtherSelf(RetOtherSelfWrapper(t))\n     }\n }\n+\n+mod issue7344 {\n+    struct RetImplTraitSelf<T>(T);\n+\n+    impl<T> RetImplTraitSelf<T> {\n+        // should not trigger lint\n+        fn new(t: T) -> impl Into<Self> {\n+            Self(t)\n+        }\n+    }\n+\n+    struct RetImplTraitNoSelf<T>(T);\n+\n+    impl<T> RetImplTraitNoSelf<T> {\n+        // should trigger lint\n+        fn new(t: T) -> impl Into<i32> {\n+            1\n+        }\n+    }\n+\n+    trait Trait2<T, U> {}\n+    impl<T, U> Trait2<T, U> for () {}\n+\n+    struct RetImplTraitSelf2<T>(T);\n+\n+    impl<T> RetImplTraitSelf2<T> {\n+        // should not trigger lint\n+        fn new(t: T) -> impl Trait2<(), Self> {\n+            unimplemented!()\n+        }\n+    }\n+\n+    struct RetImplTraitNoSelf2<T>(T);\n+\n+    impl<T> RetImplTraitNoSelf2<T> {\n+        // should trigger lint\n+        fn new(t: T) -> impl Trait2<(), i32> {\n+            unimplemented!()\n+        }\n+    }\n+\n+    struct RetImplTraitSelfAdt<'a>(&'a str);\n+\n+    impl<'a> RetImplTraitSelfAdt<'a> {\n+        // should not trigger lint\n+        fn new<'b: 'a>(s: &'b str) -> impl Into<RetImplTraitSelfAdt<'b>> {\n+            RetImplTraitSelfAdt(s)\n+        }\n+    }\n+}"}, {"sha": "bc13be47927b1c3fa37a75795a316f5c521319ac", "filename": "tests/ui/new_ret_no_self.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/33137dd612cab59026bc5c0469b8761b198e3cae/tests%2Fui%2Fnew_ret_no_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33137dd612cab59026bc5c0469b8761b198e3cae/tests%2Fui%2Fnew_ret_no_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.stderr?ref=33137dd612cab59026bc5c0469b8761b198e3cae", "patch": "@@ -76,5 +76,21 @@ LL | |             unimplemented!();\n LL | |         }\n    | |_________^\n \n-error: aborting due to 10 previous errors\n+error: methods called `new` usually return `Self`\n+  --> $DIR/new_ret_no_self.rs:368:9\n+   |\n+LL | /         fn new(t: T) -> impl Into<i32> {\n+LL | |             1\n+LL | |         }\n+   | |_________^\n+\n+error: methods called `new` usually return `Self`\n+  --> $DIR/new_ret_no_self.rs:389:9\n+   |\n+LL | /         fn new(t: T) -> impl Trait2<(), i32> {\n+LL | |             unimplemented!()\n+LL | |         }\n+   | |_________^\n+\n+error: aborting due to 12 previous errors\n "}]}