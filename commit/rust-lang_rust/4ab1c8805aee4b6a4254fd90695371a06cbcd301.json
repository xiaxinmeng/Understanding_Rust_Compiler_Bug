{"sha": "4ab1c8805aee4b6a4254fd90695371a06cbcd301", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhYjFjODgwNWFlZTRiNmE0MjU0ZmQ5MDY5NTM3MWEwNmNiY2QzMDE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-06T03:22:48Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-06T03:23:13Z"}, "message": "Convert Num to explicit self", "tree": {"sha": "dab4555175a51694f1e5fa31d986e3a851b089a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dab4555175a51694f1e5fa31d986e3a851b089a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ab1c8805aee4b6a4254fd90695371a06cbcd301", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ab1c8805aee4b6a4254fd90695371a06cbcd301", "html_url": "https://github.com/rust-lang/rust/commit/4ab1c8805aee4b6a4254fd90695371a06cbcd301", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ab1c8805aee4b6a4254fd90695371a06cbcd301/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e23ea24aed95885c8bc59de49c616f60fa5053d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e23ea24aed95885c8bc59de49c616f60fa5053d1", "html_url": "https://github.com/rust-lang/rust/commit/e23ea24aed95885c8bc59de49c616f60fa5053d1"}], "stats": {"total": 168, "additions": 82, "deletions": 86}, "files": [{"sha": "9fbf902170aef0dac3958d89826272e1a094adac", "filename": "src/libcore/f32.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4ab1c8805aee4b6a4254fd90695371a06cbcd301/src%2Flibcore%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab1c8805aee4b6a4254fd90695371a06cbcd301/src%2Flibcore%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff32.rs?ref=4ab1c8805aee4b6a4254fd90695371a06cbcd301", "patch": "@@ -163,14 +163,14 @@ impl f32 : cmp::Ord {\n }\n \n impl f32: num::Num {\n-    pure fn add(other: &f32)    -> f32 { return self + *other; }\n-    pure fn sub(other: &f32)    -> f32 { return self - *other; }\n-    pure fn mul(other: &f32)    -> f32 { return self * *other; }\n-    pure fn div(other: &f32)    -> f32 { return self / *other; }\n-    pure fn modulo(other: &f32) -> f32 { return self % *other; }\n-    pure fn neg()                -> f32 { return -self;        }\n-\n-    pure fn to_int()         -> int { return self as int; }\n+    pure fn add(&self, other: &f32) -> f32 { return *self + *other; }\n+    pure fn sub(&self, other: &f32) -> f32 { return *self - *other; }\n+    pure fn mul(&self, other: &f32) -> f32 { return *self * *other; }\n+    pure fn div(&self, other: &f32) -> f32 { return *self / *other; }\n+    pure fn modulo(&self, other: &f32) -> f32 { return *self % *other; }\n+    pure fn neg(&self)                -> f32 { return -*self;        }\n+\n+    pure fn to_int(&self)         -> int { return *self as int; }\n     static pure fn from_int(n: int) -> f32 { return n as f32;    }\n }\n "}, {"sha": "86565f9e2528a60eda025bd11e24501d1309f4a8", "filename": "src/libcore/f64.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4ab1c8805aee4b6a4254fd90695371a06cbcd301/src%2Flibcore%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab1c8805aee4b6a4254fd90695371a06cbcd301/src%2Flibcore%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff64.rs?ref=4ab1c8805aee4b6a4254fd90695371a06cbcd301", "patch": "@@ -182,14 +182,14 @@ impl f64 : cmp::Ord {\n }\n \n impl f64: num::Num {\n-    pure fn add(other: &f64)    -> f64 { return self + *other; }\n-    pure fn sub(other: &f64)    -> f64 { return self - *other; }\n-    pure fn mul(other: &f64)    -> f64 { return self * *other; }\n-    pure fn div(other: &f64)    -> f64 { return self / *other; }\n-    pure fn modulo(other: &f64) -> f64 { return self % *other; }\n-    pure fn neg()                -> f64 { return -self;        }\n-\n-    pure fn to_int()         -> int { return self as int; }\n+    pure fn add(&self, other: &f64)    -> f64 { return *self + *other; }\n+    pure fn sub(&self, other: &f64)    -> f64 { return *self - *other; }\n+    pure fn mul(&self, other: &f64)    -> f64 { return *self * *other; }\n+    pure fn div(&self, other: &f64)    -> f64 { return *self / *other; }\n+    pure fn modulo(&self, other: &f64) -> f64 { return *self % *other; }\n+    pure fn neg(&self)                -> f64 { return -*self;        }\n+\n+    pure fn to_int(&self)         -> int { return *self as int; }\n     static pure fn from_int(n: int) -> f64 { return n as f64;    }\n }\n "}, {"sha": "2a86d7ae04fda668615d00dcbe791aced01c2f7f", "filename": "src/libcore/float.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4ab1c8805aee4b6a4254fd90695371a06cbcd301/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab1c8805aee4b6a4254fd90695371a06cbcd301/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=4ab1c8805aee4b6a4254fd90695371a06cbcd301", "patch": "@@ -425,22 +425,22 @@ impl float : Ord {\n \n impl float: num::Num {\n     #[inline(always)]\n-    pub pure fn add(other: &float)    -> float { return self + *other; }\n+    pub pure fn add(&self, other: &float) -> float { return *self + *other; }\n     #[inline(always)]\n-    pub pure fn sub(other: &float)    -> float { return self - *other; }\n+    pub pure fn sub(&self, other: &float) -> float { return *self - *other; }\n     #[inline(always)]\n-    pub pure fn mul(other: &float)    -> float { return self * *other; }\n+    pub pure fn mul(&self, other: &float) -> float { return *self * *other; }\n     #[inline(always)]\n-    pub pure fn div(other: &float)    -> float { return self / *other; }\n+    pub pure fn div(&self, other: &float) -> float { return *self / *other; }\n     #[inline(always)]\n-    pure fn modulo(other: &float) -> float { return self % *other; }\n+    pure fn modulo(&self, other: &float) -> float { return *self % *other; }\n     #[inline(always)]\n-    pure fn neg()                  -> float { return -self;        }\n+    pure fn neg(&self)                  -> float { return -*self;        }\n \n     #[inline(always)]\n-    pure fn to_int()         -> int   { return self as int; }\n+    pure fn to_int(&self)         -> int   { return *self as int; }\n     #[inline(always)]\n-    static pure fn from_int(n: int) -> float { return n as float;  }\n+    static pure fn from_int(&self, n: int) -> float { return n as float;  }\n }\n \n #[test]"}, {"sha": "dbeb51b813ff27829fd84648e91785b59b1d0a59", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4ab1c8805aee4b6a4254fd90695371a06cbcd301/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab1c8805aee4b6a4254fd90695371a06cbcd301/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=4ab1c8805aee4b6a4254fd90695371a06cbcd301", "patch": "@@ -79,14 +79,14 @@ impl T : Eq {\n }\n \n impl T: num::Num {\n-    pure fn add(other: &T)    -> T { return self + *other; }\n-    pure fn sub(other: &T)    -> T { return self - *other; }\n-    pure fn mul(other: &T)    -> T { return self * *other; }\n-    pure fn div(other: &T)    -> T { return self / *other; }\n-    pure fn modulo(other: &T) -> T { return self % *other; }\n-    pure fn neg()              -> T { return -self;        }\n-\n-    pure fn to_int()         -> int { return self as int; }\n+    pure fn add(&self, other: &T)    -> T { return *self + *other; }\n+    pure fn sub(&self, other: &T)    -> T { return *self - *other; }\n+    pure fn mul(&self, other: &T)    -> T { return *self * *other; }\n+    pure fn div(&self, other: &T)    -> T { return *self / *other; }\n+    pure fn modulo(&self, other: &T) -> T { return *self % *other; }\n+    pure fn neg(&self)              -> T { return -*self;        }\n+\n+    pure fn to_int(&self)         -> int { return *self as int; }\n     static pure fn from_int(n: int) -> T   { return n as T;      }\n }\n "}, {"sha": "fed9db8767b9c7cc77694059afadafaa5fb8ddcf", "filename": "src/libcore/num.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4ab1c8805aee4b6a4254fd90695371a06cbcd301/src%2Flibcore%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab1c8805aee4b6a4254fd90695371a06cbcd301/src%2Flibcore%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum.rs?ref=4ab1c8805aee4b6a4254fd90695371a06cbcd301", "patch": "@@ -12,13 +12,13 @@\n \n pub trait Num {\n     // FIXME: Trait composition. (#2616)\n-    pure fn add(other: &self) -> self;\n-    pure fn sub(other: &self) -> self;\n-    pure fn mul(other: &self) -> self;\n-    pure fn div(other: &self) -> self;\n-    pure fn modulo(other: &self) -> self;\n-    pure fn neg() -> self;\n+    pure fn add(&self, other: &self) -> self;\n+    pure fn sub(&self, other: &self) -> self;\n+    pure fn mul(&self, other: &self) -> self;\n+    pure fn div(&self, other: &self) -> self;\n+    pure fn modulo(&self, other: &self) -> self;\n+    pure fn neg(&self) -> self;\n \n-    pure fn to_int() -> int;\n+    pure fn to_int(&self) -> int;\n     static pure fn from_int(n: int) -> self;\n }"}, {"sha": "8a03b0f94bcd8c5b081592dbfb75585dd07b5af7", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4ab1c8805aee4b6a4254fd90695371a06cbcd301/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab1c8805aee4b6a4254fd90695371a06cbcd301/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=4ab1c8805aee4b6a4254fd90695371a06cbcd301", "patch": "@@ -73,14 +73,14 @@ impl T : Eq {\n }\n \n impl T: num::Num {\n-    pure fn add(other: &T)    -> T { return self + *other; }\n-    pure fn sub(other: &T)    -> T { return self - *other; }\n-    pure fn mul(other: &T)    -> T { return self * *other; }\n-    pure fn div(other: &T)    -> T { return self / *other; }\n-    pure fn modulo(other: &T) -> T { return self % *other; }\n-    pure fn neg()              -> T { return -self;        }\n-\n-    pure fn to_int()         -> int { return self as int; }\n+    pure fn add(&self, other: &T)    -> T { return *self + *other; }\n+    pure fn sub(&self, other: &T)    -> T { return *self - *other; }\n+    pure fn mul(&self, other: &T)    -> T { return *self * *other; }\n+    pure fn div(&self, other: &T)    -> T { return *self / *other; }\n+    pure fn modulo(&self, other: &T) -> T { return *self % *other; }\n+    pure fn neg(&self)              -> T { return -*self;        }\n+\n+    pure fn to_int(&self)         -> int { return *self as int; }\n     static pure fn from_int(n: int) -> T   { return n as T;      }\n }\n "}, {"sha": "2473011be0d2772f3713c6eab34e4a3827794463", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 35, "deletions": 39, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/4ab1c8805aee4b6a4254fd90695371a06cbcd301/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab1c8805aee4b6a4254fd90695371a06cbcd301/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=4ab1c8805aee4b6a4254fd90695371a06cbcd301", "patch": "@@ -59,27 +59,25 @@ impl BytePos: cmp::Ord {\n     pure fn gt(&self, other: &BytePos) -> bool { **self > **other }\n }\n \n-impl BytePos: Num {\n-    pure fn add(other: &BytePos) -> BytePos {\n-        BytePos(*self + **other)\n+#[cfg(stage0)]\n+impl BytePos: Add<BytePos, BytePos> {\n+    pure fn add(rhs: &BytePos) -> BytePos {\n+        BytePos(*self + **rhs)\n     }\n-    pure fn sub(other: &BytePos) -> BytePos {\n-        BytePos(*self - **other)\n-    }\n-    pure fn mul(other: &BytePos) -> BytePos {\n-        BytePos(*self * (**other))\n-    }\n-    pure fn div(other: &BytePos) -> BytePos {\n-        BytePos(*self / **other)\n-    }\n-    pure fn modulo(other: &BytePos) -> BytePos {\n-        BytePos(*self % **other)\n+}\n+\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+impl BytePos: Add<BytePos, BytePos> {\n+    pure fn add(&self, rhs: &BytePos) -> BytePos {\n+        BytePos(**self + **rhs)\n     }\n-    pure fn neg() -> BytePos {\n-        BytePos(-*self)\n+}\n+\n+impl BytePos: Sub<BytePos, BytePos> {\n+    pure fn sub(&self, rhs: &BytePos) -> BytePos {\n+        BytePos(**self - **rhs)\n     }\n-    pure fn to_int() -> int { *self as int }\n-    static pure fn from_int(+n: int) -> BytePos { BytePos(n as uint) }\n }\n \n impl BytePos: to_bytes::IterBytes {\n@@ -105,32 +103,30 @@ impl CharPos: cmp::Ord {\n     pure fn gt(&self, other: &CharPos) -> bool { **self > **other }\n }\n \n-impl CharPos: Num {\n-    pure fn add(other: &CharPos) -> CharPos {\n-        CharPos(*self + **other)\n-    }\n-    pure fn sub(other: &CharPos) -> CharPos {\n-        CharPos(*self - **other)\n-    }\n-    pure fn mul(other: &CharPos) -> CharPos {\n-        CharPos(*self * (**other))\n-    }\n-    pure fn div(other: &CharPos) -> CharPos {\n-        CharPos(*self / **other)\n+impl CharPos: to_bytes::IterBytes {\n+    pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n+        (**self).iter_bytes(lsb0, f)\n     }\n-    pure fn modulo(other: &CharPos) -> CharPos {\n-        CharPos(*self % **other)\n+}\n+\n+#[cfg(stage0)]\n+impl CharPos: Add<CharPos, CharPos> {\n+    pure fn add(rhs: &CharPos) -> CharPos {\n+        CharPos(*self + **rhs)\n     }\n-    pure fn neg() -> CharPos {\n-        CharPos(-*self)\n+}\n+\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+impl CharPos: Add<CharPos, CharPos> {\n+    pure fn add(&self, rhs: &CharPos) -> CharPos {\n+        CharPos(**self + **rhs)\n     }\n-    pure fn to_int() -> int { *self as int }\n-    static pure fn from_int(+n: int) -> CharPos { CharPos(n as uint) }\n }\n \n-impl CharPos: to_bytes::IterBytes {\n-    pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n-        (**self).iter_bytes(lsb0, f)\n+impl CharPos: Sub<CharPos, CharPos> {\n+    pure fn sub(&self, rhs: &CharPos) -> CharPos {\n+        CharPos(**self - **rhs)\n     }\n }\n "}]}