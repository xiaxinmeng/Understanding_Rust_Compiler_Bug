{"sha": "77cd5b5485a9ba13ff291cc993cff44cf81e1901", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3Y2Q1YjU0ODVhOWJhMTNmZjI5MWNjOTkzY2ZmNDRjZjgxZTE5MDE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-10-24T12:12:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-24T12:12:06Z"}, "message": "Rollup merge of #78249 - lcnr:ct-infer-origin, r=varkor\n\nimprove const infer error\n\nFor type inference we probably have to be careful about subtyping and stuff but considering that subtyping shouldn't be relevant for constants I don't really see a reason why we may not want to reuse the const origin here.\n\nr? `@varkor`", "tree": {"sha": "becd65967b09190f225a8636bb8ffeaba2153f84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/becd65967b09190f225a8636bb8ffeaba2153f84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77cd5b5485a9ba13ff291cc993cff44cf81e1901", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJflBoXCRBK7hj4Ov3rIwAAdHIIAKu1kKJWsdYKf9NrYKo0NiFm\nI97QT/FZo/YoLlBk0vNuU9ZIyGB6BWZW9EwKrnsyimCDl0UcLzD16IOKQvdZEW9W\nF/y1pbG0lWK4ZOlvB1dPGyQpbFyDGgKRSCUUenpBpZlh5PuaxCAOBcANfNE1dI05\nPTt5iXl+AUpbZVaAgD9ZT6v6pGjl22s2cHERGPkeBM8GqFFAfpF0pTkH9xqFc6MD\nGs3rDV7QYJcLJCrU+wzS/OAet+R+rvwOJjBkgnPYNf4VuS+fnkYgHIMiQRrALUzc\nQLEm8OHGheEPyMFfnZgAjQ8gCsOJxQlBgzaPbA+3ogr20k3BFYmQDllXhwY5KJs=\n=ReSn\n-----END PGP SIGNATURE-----\n", "payload": "tree becd65967b09190f225a8636bb8ffeaba2153f84\nparent 6b2ed99a5601ddeef2f8fb5b0f6368e3d0c0b44b\nparent e1c524cd457bd02435a47214052320f8d4bfa999\nauthor Jonas Schievink <jonasschievink@gmail.com> 1603541526 +0200\ncommitter GitHub <noreply@github.com> 1603541526 +0200\n\nRollup merge of #78249 - lcnr:ct-infer-origin, r=varkor\n\nimprove const infer error\n\nFor type inference we probably have to be careful about subtyping and stuff but considering that subtyping shouldn't be relevant for constants I don't really see a reason why we may not want to reuse the const origin here.\n\nr? `@varkor`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77cd5b5485a9ba13ff291cc993cff44cf81e1901", "html_url": "https://github.com/rust-lang/rust/commit/77cd5b5485a9ba13ff291cc993cff44cf81e1901", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77cd5b5485a9ba13ff291cc993cff44cf81e1901/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b2ed99a5601ddeef2f8fb5b0f6368e3d0c0b44b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b2ed99a5601ddeef2f8fb5b0f6368e3d0c0b44b", "html_url": "https://github.com/rust-lang/rust/commit/6b2ed99a5601ddeef2f8fb5b0f6368e3d0c0b44b"}, {"sha": "e1c524cd457bd02435a47214052320f8d4bfa999", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1c524cd457bd02435a47214052320f8d4bfa999", "html_url": "https://github.com/rust-lang/rust/commit/e1c524cd457bd02435a47214052320f8d4bfa999"}], "stats": {"total": 27, "additions": 9, "deletions": 18}, "files": [{"sha": "16e9aafb25a54e6987ab1534ab6a024e3e037f7f", "filename": "compiler/rustc_middle/src/infer/unify_key.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/77cd5b5485a9ba13ff291cc993cff44cf81e1901/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77cd5b5485a9ba13ff291cc993cff44cf81e1901/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs?ref=77cd5b5485a9ba13ff291cc993cff44cf81e1901", "patch": "@@ -175,19 +175,15 @@ impl<'tcx> UnifyKey for ty::ConstVid<'tcx> {\n impl<'tcx> UnifyValue for ConstVarValue<'tcx> {\n     type Error = (&'tcx ty::Const<'tcx>, &'tcx ty::Const<'tcx>);\n \n-    fn unify_values(value1: &Self, value2: &Self) -> Result<Self, Self::Error> {\n-        let (val, span) = match (value1.val, value2.val) {\n+    fn unify_values(&value1: &Self, &value2: &Self) -> Result<Self, Self::Error> {\n+        Ok(match (value1.val, value2.val) {\n             (ConstVariableValue::Known { .. }, ConstVariableValue::Known { .. }) => {\n                 bug!(\"equating two const variables, both of which have known values\")\n             }\n \n             // If one side is known, prefer that one.\n-            (ConstVariableValue::Known { .. }, ConstVariableValue::Unknown { .. }) => {\n-                (value1.val, value1.origin.span)\n-            }\n-            (ConstVariableValue::Unknown { .. }, ConstVariableValue::Known { .. }) => {\n-                (value2.val, value2.origin.span)\n-            }\n+            (ConstVariableValue::Known { .. }, ConstVariableValue::Unknown { .. }) => value1,\n+            (ConstVariableValue::Unknown { .. }, ConstVariableValue::Known { .. }) => value2,\n \n             // If both sides are *unknown*, it hardly matters, does it?\n             (\n@@ -200,16 +196,11 @@ impl<'tcx> UnifyValue for ConstVarValue<'tcx> {\n                 // universe is the minimum of the two universes, because that is\n                 // the one which contains the fewest names in scope.\n                 let universe = cmp::min(universe1, universe2);\n-                (ConstVariableValue::Unknown { universe }, value1.origin.span)\n+                ConstVarValue {\n+                    val: ConstVariableValue::Unknown { universe },\n+                    origin: value1.origin,\n+                }\n             }\n-        };\n-\n-        Ok(ConstVarValue {\n-            origin: ConstVariableOrigin {\n-                kind: ConstVariableOriginKind::ConstInference,\n-                span: span,\n-            },\n-            val,\n         })\n     }\n }"}, {"sha": "63facbf3b8c0f3f23106d0bedf5c569f3a065a01", "filename": "src/test/ui/const-generics/infer/issue-77092.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77cd5b5485a9ba13ff291cc993cff44cf81e1901/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77cd5b5485a9ba13ff291cc993cff44cf81e1901/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.stderr?ref=77cd5b5485a9ba13ff291cc993cff44cf81e1901", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed\n   --> $DIR/issue-77092.rs:13:26\n    |\n LL |         println!(\"{:?}\", take_array_from_mut(&mut arr, i));\n-   |                          ^^^^^^^^^^^^^^^^^^^ cannot infer the value of the constant `{_: usize}`\n+   |                          ^^^^^^^^^^^^^^^^^^^ cannot infer the value of const parameter `N` declared on the function `take_array_from_mut`\n \n error: aborting due to previous error\n "}]}