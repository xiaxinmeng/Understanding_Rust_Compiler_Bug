{"sha": "c5a43b8d3917d15b30b7d99021540cf7831f4182", "node_id": "C_kwDOAAsO6NoAKGM1YTQzYjhkMzkxN2QxNWIzMGI3ZDk5MDIxNTQwY2Y3ODMxZjQxODI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-11T01:51:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-11T01:51:49Z"}, "message": "Auto merge of #94276 - scottmcm:primitive-clone, r=oli-obk\n\nmir-opt: Replace clone on primitives with copy\n\nWe can't do it for everything, but it would be nice to at least stop making calls to clone methods in debug from things like derived-clones.\n\nr? `@ghost`", "tree": {"sha": "4c1a78d88d7cdd5627c187409d50de40c52d8553", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c1a78d88d7cdd5627c187409d50de40c52d8553"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5a43b8d3917d15b30b7d99021540cf7831f4182", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5a43b8d3917d15b30b7d99021540cf7831f4182", "html_url": "https://github.com/rust-lang/rust/commit/c5a43b8d3917d15b30b7d99021540cf7831f4182", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5a43b8d3917d15b30b7d99021540cf7831f4182/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "352e621368c31d7b4a6362e081586cdb931ba020", "url": "https://api.github.com/repos/rust-lang/rust/commits/352e621368c31d7b4a6362e081586cdb931ba020", "html_url": "https://github.com/rust-lang/rust/commit/352e621368c31d7b4a6362e081586cdb931ba020"}, {"sha": "705b8807d531348d05ed3e941b3af695abc24f85", "url": "https://api.github.com/repos/rust-lang/rust/commits/705b8807d531348d05ed3e941b3af695abc24f85", "html_url": "https://github.com/rust-lang/rust/commit/705b8807d531348d05ed3e941b3af695abc24f85"}], "stats": {"total": 278, "additions": 273, "deletions": 5}, "files": [{"sha": "18c2dd71ad3d0bf11c7e2080f0a7cdcf1eaf87d5", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c5a43b8d3917d15b30b7d99021540cf7831f4182/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a43b8d3917d15b30b7d99021540cf7831f4182/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=c5a43b8d3917d15b30b7d99021540cf7831f4182", "patch": "@@ -1915,6 +1915,27 @@ impl<'tcx> Place<'tcx> {\n             (base, proj)\n         })\n     }\n+\n+    /// Generates a new place by appending `more_projections` to the existing ones\n+    /// and interning the result.\n+    pub fn project_deeper(self, more_projections: &[PlaceElem<'tcx>], tcx: TyCtxt<'tcx>) -> Self {\n+        if more_projections.is_empty() {\n+            return self;\n+        }\n+\n+        let mut v: Vec<PlaceElem<'tcx>>;\n+\n+        let new_projections = if self.projection.is_empty() {\n+            more_projections\n+        } else {\n+            v = Vec::with_capacity(self.projection.len() + more_projections.len());\n+            v.extend(self.projection);\n+            v.extend(more_projections);\n+            &v\n+        };\n+\n+        Place { local: self.local, projection: tcx.intern_place_elems(new_projections) }\n+    }\n }\n \n impl From<Local> for Place<'_> {\n@@ -2187,6 +2208,15 @@ impl<'tcx> Operand<'tcx> {\n             Operand::Copy(_) | Operand::Move(_) => None,\n         }\n     }\n+\n+    /// Gets the `ty::FnDef` from an operand if it's a constant function item.\n+    ///\n+    /// While this is unlikely in general, it's the normal case of what you'll\n+    /// find as the `func` in a [`TerminatorKind::Call`].\n+    pub fn const_fn_def(&self) -> Option<(DefId, SubstsRef<'tcx>)> {\n+        let const_ty = self.constant()?.literal.ty();\n+        if let ty::FnDef(def_id, substs) = *const_ty.kind() { Some((def_id, substs)) } else { None }\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "775d86153ced20929f402b35ab1995d41e37f478", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c5a43b8d3917d15b30b7d99021540cf7831f4182/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a43b8d3917d15b30b7d99021540cf7831f4182/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=c5a43b8d3917d15b30b7d99021540cf7831f4182", "patch": "@@ -2380,6 +2380,57 @@ impl<'tcx> Ty<'tcx> {\n             }\n         }\n     }\n+\n+    /// Fast path helper for primitives which are always `Copy` and which\n+    /// have a side-effect-free `Clone` impl.\n+    ///\n+    /// Returning true means the type is known to be pure and `Copy+Clone`.\n+    /// Returning `false` means nothing -- could be `Copy`, might not be.\n+    ///\n+    /// This is mostly useful for optimizations, as there are the types\n+    /// on which we can replace cloning with dereferencing.\n+    pub fn is_trivially_pure_clone_copy(self) -> bool {\n+        match self.kind() {\n+            ty::Bool | ty::Char | ty::Never => true,\n+\n+            // These aren't even `Clone`\n+            ty::Str | ty::Slice(..) | ty::Foreign(..) | ty::Dynamic(..) => false,\n+\n+            ty::Int(..) | ty::Uint(..) | ty::Float(..) => true,\n+\n+            // The voldemort ZSTs are fine.\n+            ty::FnDef(..) => true,\n+\n+            ty::Array(element_ty, _len) => element_ty.is_trivially_pure_clone_copy(),\n+\n+            // A 100-tuple isn't \"trivial\", so doing this only for reasonable sizes.\n+            ty::Tuple(field_tys) => {\n+                field_tys.len() <= 3 && field_tys.iter().all(Self::is_trivially_pure_clone_copy)\n+            }\n+\n+            // Sometimes traits aren't implemented for every ABI or arity,\n+            // because we can't be generic over everything yet.\n+            ty::FnPtr(..) => false,\n+\n+            // Definitely absolutely not copy.\n+            ty::Ref(_, _, hir::Mutability::Mut) => false,\n+\n+            // Thin pointers & thin shared references are pure-clone-copy, but for\n+            // anything with custom metadata it might be more complicated.\n+            ty::Ref(_, _, hir::Mutability::Not) | ty::RawPtr(..) => false,\n+\n+            ty::Generator(..) | ty::GeneratorWitness(..) => false,\n+\n+            // Might be, but not \"trivial\" so just giving the safe answer.\n+            ty::Adt(..) | ty::Closure(..) | ty::Opaque(..) => false,\n+\n+            ty::Projection(..) | ty::Param(..) | ty::Infer(..) | ty::Error(..) => false,\n+\n+            ty::Bound(..) | ty::Placeholder(..) => {\n+                bug!(\"`is_trivially_pure_clone_copy` applied to unexpected type: {:?}\", self);\n+            }\n+        }\n+    }\n }\n \n /// Extra information about why we ended up with a particular variance."}, {"sha": "eb16d305d0a8085c17caab0668a982a65a2e586b", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5a43b8d3917d15b30b7d99021540cf7831f4182/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a43b8d3917d15b30b7d99021540cf7831f4182/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=c5a43b8d3917d15b30b7d99021540cf7831f4182", "patch": "@@ -704,7 +704,7 @@ impl<'tcx> Ty<'tcx> {\n         tcx_at: TyCtxtAt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> bool {\n-        tcx_at.is_copy_raw(param_env.and(self))\n+        self.is_trivially_pure_clone_copy() || tcx_at.is_copy_raw(param_env.and(self))\n     }\n \n     /// Checks whether values of this type `T` have a size known at"}, {"sha": "d1c4a4b21d0a2e3f4fe886ab5738053c2022c71a", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/c5a43b8d3917d15b30b7d99021540cf7831f4182/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a43b8d3917d15b30b7d99021540cf7831f4182/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=c5a43b8d3917d15b30b7d99021540cf7831f4182", "patch": "@@ -4,7 +4,7 @@ use crate::MirPass;\n use rustc_hir::Mutability;\n use rustc_middle::mir::{\n     BinOp, Body, Constant, LocalDecls, Operand, Place, ProjectionElem, Rvalue, SourceInfo,\n-    StatementKind, UnOp,\n+    Statement, StatementKind, Terminator, TerminatorKind, UnOp,\n };\n use rustc_middle::ty::{self, TyCtxt};\n \n@@ -29,6 +29,11 @@ impl<'tcx> MirPass<'tcx> for InstCombine {\n                     _ => {}\n                 }\n             }\n+\n+            ctx.combine_primitive_clone(\n+                &mut block.terminator.as_mut().unwrap(),\n+                &mut block.statements,\n+            );\n         }\n     }\n }\n@@ -130,4 +135,70 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n             }\n         }\n     }\n+\n+    fn combine_primitive_clone(\n+        &self,\n+        terminator: &mut Terminator<'tcx>,\n+        statements: &mut Vec<Statement<'tcx>>,\n+    ) {\n+        let TerminatorKind::Call { func, args, destination, .. } = &mut terminator.kind\n+        else { return };\n+\n+        // It's definitely not a clone if there are multiple arguments\n+        if args.len() != 1 {\n+            return;\n+        }\n+\n+        let Some((destination_place, destination_block)) = *destination\n+        else { return };\n+\n+        // Only bother looking more if it's easy to know what we're calling\n+        let Some((fn_def_id, fn_substs)) = func.const_fn_def()\n+        else { return };\n+\n+        // Clone needs one subst, so we can cheaply rule out other stuff\n+        if fn_substs.len() != 1 {\n+            return;\n+        }\n+\n+        // These types are easily available from locals, so check that before\n+        // doing DefId lookups to figure out what we're actually calling.\n+        let arg_ty = args[0].ty(self.local_decls, self.tcx);\n+\n+        let ty::Ref(_region, inner_ty, Mutability::Not) = *arg_ty.kind()\n+        else { return };\n+\n+        if !inner_ty.is_trivially_pure_clone_copy() {\n+            return;\n+        }\n+\n+        let trait_def_id = self.tcx.trait_of_item(fn_def_id);\n+        if trait_def_id.is_none() || trait_def_id != self.tcx.lang_items().clone_trait() {\n+            return;\n+        }\n+\n+        if !self.tcx.consider_optimizing(|| {\n+            format!(\n+                \"InstCombine - Call: {:?} SourceInfo: {:?}\",\n+                (fn_def_id, fn_substs),\n+                terminator.source_info\n+            )\n+        }) {\n+            return;\n+        }\n+\n+        let Some(arg_place) = args.pop().unwrap().place()\n+        else { return };\n+\n+        statements.push(Statement {\n+            source_info: terminator.source_info,\n+            kind: StatementKind::Assign(box (\n+                destination_place,\n+                Rvalue::Use(Operand::Copy(\n+                    arg_place.project_deeper(&[ProjectionElem::Deref], self.tcx),\n+                )),\n+            )),\n+        });\n+        terminator.kind = TerminatorKind::Goto { target: destination_block };\n+    }\n }"}, {"sha": "6a898b2974a65f40fb3eba2dc11cc205c457a5fe", "filename": "src/test/assembly/sparc-struct-abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fassembly%2Fsparc-struct-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fassembly%2Fsparc-struct-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fsparc-struct-abi.rs?ref=c5a43b8d3917d15b30b7d99021540cf7831f4182", "patch": "@@ -13,6 +13,7 @@\n pub trait Sized {}\n #[lang = \"copy\"]\n pub trait Copy {}\n+impl Copy for f32 {}\n \n #[repr(C)]\n pub struct Franta {"}, {"sha": "18d896e86b215e8bc1e8df05489d0209c6ef8c29", "filename": "src/test/assembly/target-feature-multiple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fassembly%2Ftarget-feature-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fassembly%2Ftarget-feature-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Ftarget-feature-multiple.rs?ref=c5a43b8d3917d15b30b7d99021540cf7831f4182", "patch": "@@ -23,6 +23,7 @@\n trait Sized {}\n #[lang = \"copy\"]\n trait Copy {}\n+impl Copy for u32 {}\n \n // Use of these requires target features to be enabled\n extern \"unadjusted\" {"}, {"sha": "dfc312279083d6fe576440b4e6fa7bb796651ec0", "filename": "src/test/codegen/abi-sysv64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fcodegen%2Fabi-sysv64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fcodegen%2Fabi-sysv64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-sysv64.rs?ref=c5a43b8d3917d15b30b7d99021540cf7831f4182", "patch": "@@ -13,6 +13,7 @@\n trait Sized {}\n #[lang = \"copy\"]\n trait Copy {}\n+impl Copy for i64 {}\n \n // CHECK: define x86_64_sysvcc i64 @has_sysv64_abi\n #[no_mangle]"}, {"sha": "d612f603e4fea0d27e64b0e4f17b914f565a195d", "filename": "src/test/codegen/abi-x86-interrupt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fcodegen%2Fabi-x86-interrupt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fcodegen%2Fabi-x86-interrupt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-x86-interrupt.rs?ref=c5a43b8d3917d15b30b7d99021540cf7831f4182", "patch": "@@ -13,6 +13,7 @@\n trait Sized {}\n #[lang = \"copy\"]\n trait Copy {}\n+impl Copy for i64 {}\n \n // CHECK: define x86_intrcc i64 @has_x86_interrupt_abi\n #[no_mangle]"}, {"sha": "f7c02d47939fed4314f87dde85ba35526761d7da", "filename": "src/test/codegen/frame-pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fcodegen%2Fframe-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fcodegen%2Fframe-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fframe-pointer.rs?ref=c5a43b8d3917d15b30b7d99021540cf7831f4182", "patch": "@@ -17,7 +17,7 @@\n trait Sized { }\n #[lang=\"copy\"]\n trait Copy { }\n-\n+impl Copy for u32 {}\n \n \n // CHECK: define i32 @peach{{.*}}[[PEACH_ATTRS:\\#[0-9]+]] {"}, {"sha": "d3ea1915a8b1967537facedd40c8ab69bc18bea6", "filename": "src/test/codegen/inline-hint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fcodegen%2Finline-hint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fcodegen%2Finline-hint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Finline-hint.rs?ref=c5a43b8d3917d15b30b7d99021540cf7831f4182", "patch": "@@ -6,7 +6,7 @@\n \n pub fn f() {\n     let a = A;\n-    let b = (0i32, 1i32, 2i32, 3i32);\n+    let b = (0i32, 1i32, 2i32, 3 as *const i32);\n     let c = || {};\n \n     a(String::new(), String::new());\n@@ -21,7 +21,7 @@ struct A(String, String);\n // CHECK-NOT:  inlinehint\n // CHECK-SAME: {{$}}\n \n-// CHECK:      ; <(i32, i32, i32, i32) as core::clone::Clone>::clone\n+// CHECK:      ; <(i32, i32, i32, *const i{{16|32|64}}) as core::clone::Clone>::clone\n // CHECK-NEXT: ; Function Attrs: inlinehint\n \n // CHECK:      ; inline_hint::f::{closure#0}"}, {"sha": "7f0f678062a64b3295343054993a21f47ebe0a2a", "filename": "src/test/codegen/riscv-abi/riscv64-lp64-lp64f-lp64d-abi.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fcodegen%2Friscv-abi%2Friscv64-lp64-lp64f-lp64d-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fcodegen%2Friscv-abi%2Friscv64-lp64-lp64f-lp64d-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Friscv-abi%2Friscv64-lp64-lp64f-lp64d-abi.rs?ref=c5a43b8d3917d15b30b7d99021540cf7831f4182", "patch": "@@ -10,6 +10,14 @@\n trait Sized {}\n #[lang = \"copy\"]\n trait Copy {}\n+impl Copy for bool {}\n+impl Copy for i8 {}\n+impl Copy for u8 {}\n+impl Copy for i32 {}\n+impl Copy for i64 {}\n+impl Copy for u64 {}\n+impl Copy for f32 {}\n+impl Copy for f64 {}\n \n // CHECK: define void @f_void()\n #[no_mangle]"}, {"sha": "0972d2d68a115f143b3d4660ebca56941e325c2d", "filename": "src/test/mir-opt/combine_clone_of_primitives.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.rs?ref=c5a43b8d3917d15b30b7d99021540cf7831f4182", "patch": "@@ -0,0 +1,20 @@\n+// compile-flags: -C opt-level=0 -Z inline_mir=no\n+// ignore-wasm32 compiled with panic=abort by default\n+\n+// EMIT_MIR combine_clone_of_primitives.{impl#0}-clone.InstCombine.diff\n+\n+#[derive(Clone)]\n+struct MyThing<T> {\n+    v: T,\n+    i: u64,\n+    a: [f32; 3],\n+}\n+\n+fn main() {\n+    let x = MyThing::<i16> { v: 2, i: 3, a: [0.0; 3] };\n+    let y = x.clone();\n+\n+    assert_eq!(y.v, 2);\n+    assert_eq!(y.i, 3);\n+    assert_eq!(y.a, [0.0; 3]);\n+}"}, {"sha": "62e5da4902cb40dae936669d4165f07a324972f1", "filename": "src/test/mir-opt/combine_clone_of_primitives.{impl#0}-clone.InstCombine.diff", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff?ref=c5a43b8d3917d15b30b7d99021540cf7831f4182", "patch": "@@ -0,0 +1,80 @@\n+- // MIR for `<impl at $DIR/combine_clone_of_primitives.rs:6:10: 6:15>::clone` before InstCombine\n++ // MIR for `<impl at $DIR/combine_clone_of_primitives.rs:6:10: 6:15>::clone` after InstCombine\n+  \n+  fn <impl at $DIR/combine_clone_of_primitives.rs:6:10: 6:15>::clone(_1: &MyThing<T>) -> MyThing<T> {\n+      debug self => _1;                    // in scope 0 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n+      let mut _0: MyThing<T>;              // return place in scope 0 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n+      let _2: &T;                          // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+      let _3: &u64;                        // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+      let _4: &[f32; 3];                   // in scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+      let mut _5: T;                       // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+      let mut _6: &T;                      // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+      let _7: &T;                          // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+      let mut _8: u64;                     // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+      let mut _9: &u64;                    // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+      let _10: &u64;                       // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+      let mut _11: [f32; 3];               // in scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+      let mut _12: &[f32; 3];              // in scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+      let _13: &[f32; 3];                  // in scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+      scope 1 {\n+          debug __self_0_0 => _2;          // in scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+          debug __self_0_1 => _3;          // in scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+          debug __self_0_2 => _4;          // in scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+      }\n+  \n+      bb0: {\n+          _2 = &((*_1).0: T);              // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+          _3 = &((*_1).1: u64);            // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+          _4 = &((*_1).2: [f32; 3]);       // scope 0 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+-         _7 = &(*_2);                     // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+-         _6 = &(*_7);                     // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n++         _7 = _2;                         // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n++         _6 = _7;                         // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+          _5 = <T as Clone>::clone(move _6) -> bb1; // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+                                           // mir::Constant\n+                                           // + span: $DIR/combine_clone_of_primitives.rs:8:5: 8:9\n+                                           // + literal: Const { ty: for<'r> fn(&'r T) -> T {<T as Clone>::clone}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+-         _10 = &(*_3);                    // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+-         _9 = &(*_10);                    // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+-         _8 = <u64 as Clone>::clone(move _9) -> [return: bb2, unwind: bb4]; // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+-                                          // + literal: Const { ty: for<'r> fn(&'r u64) -> u64 {<u64 as Clone>::clone}, val: Value(Scalar(<ZST>)) }\n++         _10 = _3;                        // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n++         _9 = _10;                        // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n++         _8 = (*_9);                      // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n++         goto -> bb2;                     // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:11\n+      }\n+  \n+      bb2: {\n+-         _13 = &(*_4);                    // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+-         _12 = &(*_13);                   // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+-         _11 = <[f32; 3] as Clone>::clone(move _12) -> [return: bb3, unwind: bb4]; // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+-                                          // + literal: Const { ty: for<'r> fn(&'r [f32; 3]) -> [f32; 3] {<[f32; 3] as Clone>::clone}, val: Value(Scalar(<ZST>)) }\n++         _13 = _4;                        // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n++         _12 = _13;                       // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n++         _11 = (*_12);                    // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n++         goto -> bb3;                     // scope 1 at $DIR/combine_clone_of_primitives.rs:10:5: 10:16\n+      }\n+  \n+      bb3: {\n+          (_0.0: T) = move _5;             // scope 1 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n+          (_0.1: u64) = move _8;           // scope 1 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n+          (_0.2: [f32; 3]) = move _11;     // scope 1 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n+          return;                          // scope 0 at $DIR/combine_clone_of_primitives.rs:6:15: 6:15\n+      }\n+  \n+      bb4 (cleanup): {\n+          drop(_5) -> bb5;                 // scope 1 at $DIR/combine_clone_of_primitives.rs:6:14: 6:15\n+      }\n+  \n+      bb5 (cleanup): {\n+          resume;                          // scope 0 at $DIR/combine_clone_of_primitives.rs:6:10: 6:15\n+      }\n+  }\n+  "}, {"sha": "bbc039bdf5c7bec56625d64c98ba26038f0d1c54", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-call/params-on-registers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fparams-on-registers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fparams-on-registers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fparams-on-registers.rs?ref=c5a43b8d3917d15b30b7d99021540cf7831f4182", "patch": "@@ -7,6 +7,7 @@\n pub trait Sized { }\n #[lang=\"copy\"]\n pub trait Copy { }\n+impl Copy for u32 {}\n \n extern \"rust-intrinsic\" {\n     pub fn transmute<T, U>(e: T) -> U;"}, {"sha": "b8112b20a54c6429832283028feb298334f2c64b", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-call/params-on-stack.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fparams-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fparams-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fparams-on-stack.rs?ref=c5a43b8d3917d15b30b7d99021540cf7831f4182", "patch": "@@ -7,6 +7,7 @@\n pub trait Sized { }\n #[lang=\"copy\"]\n pub trait Copy { }\n+impl Copy for u32 {}\n \n extern \"rust-intrinsic\" {\n     pub fn transmute<T, U>(e: T) -> U;"}, {"sha": "5591a8a5864b5bb8e2d15e1e5799d18c07d7eecb", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-entry/params-on-registers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-registers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-registers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-registers.rs?ref=c5a43b8d3917d15b30b7d99021540cf7831f4182", "patch": "@@ -7,6 +7,7 @@\n trait Sized { }\n #[lang=\"copy\"]\n trait Copy { }\n+impl Copy for u32 {}\n \n #[no_mangle]\n #[cmse_nonsecure_entry]"}, {"sha": "39b41dac41f773aa86de0243068e64e8189f4205", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-entry/params-on-stack.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a43b8d3917d15b30b7d99021540cf7831f4182/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-stack.rs?ref=c5a43b8d3917d15b30b7d99021540cf7831f4182", "patch": "@@ -7,6 +7,7 @@\n trait Sized { }\n #[lang=\"copy\"]\n trait Copy { }\n+impl Copy for u32 {}\n \n #[no_mangle]\n #[cmse_nonsecure_entry]"}]}