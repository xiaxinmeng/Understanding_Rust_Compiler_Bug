{"sha": "d91b32b4dc9db066ab7deedbc51dc62ba597524b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MWIzMmI0ZGM5ZGIwNjZhYjdkZWVkYmM1MWRjNjJiYTU5NzUyNGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-25T12:21:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-25T12:21:46Z"}, "message": "Auto merge of #59256 - petrochenkov:derval2, r=Zoxc\n\nMake meta-item API compatible with `LocalInternedString::get` soundness fix\n\nr? @Zoxc", "tree": {"sha": "a365dc02925877c979e93aed911e26d2e3e0169e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a365dc02925877c979e93aed911e26d2e3e0169e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d91b32b4dc9db066ab7deedbc51dc62ba597524b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d91b32b4dc9db066ab7deedbc51dc62ba597524b", "html_url": "https://github.com/rust-lang/rust/commit/d91b32b4dc9db066ab7deedbc51dc62ba597524b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d91b32b4dc9db066ab7deedbc51dc62ba597524b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f36ac4e835dfa0af77d5261a444a674ec9da3a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f36ac4e835dfa0af77d5261a444a674ec9da3a5", "html_url": "https://github.com/rust-lang/rust/commit/3f36ac4e835dfa0af77d5261a444a674ec9da3a5"}, {"sha": "db74efce69711fcee03d3338afcbca67c27ceee8", "url": "https://api.github.com/repos/rust-lang/rust/commits/db74efce69711fcee03d3338afcbca67c27ceee8", "html_url": "https://github.com/rust-lang/rust/commit/db74efce69711fcee03d3338afcbca67c27ceee8"}], "stats": {"total": 181, "additions": 84, "deletions": 97}, "files": [{"sha": "4c527f80d0f5d7593401c2891cfdeda08b08b8fa", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=d91b32b4dc9db066ab7deedbc51dc62ba597524b", "patch": "@@ -177,16 +177,8 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n         let mut is_transparent = false;\n \n         for hint in &hints {\n-            let name = if let Some(name) = hint.ident_str() {\n-                name\n-            } else {\n-                // Invalid repr hint like repr(42). We don't check for unrecognized hints here\n-                // (libsyntax does that), so just ignore it.\n-                continue;\n-            };\n-\n-            let (article, allowed_targets) = match name {\n-                \"C\" | \"align\" => {\n+            let (article, allowed_targets) = match hint.name_or_empty().get() {\n+                name @ \"C\" | name @ \"align\" => {\n                     is_c |= name == \"C\";\n                     if target != Target::Struct &&\n                             target != Target::Union &&"}, {"sha": "2e5bd8add0cdcb017c247f6b43f15640ab032be4", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=d91b32b4dc9db066ab7deedbc51dc62ba597524b", "patch": "@@ -194,7 +194,7 @@ impl<'a> LintLevelsBuilder<'a> {\n             struct_span_err!(sess, span, E0452, \"malformed lint attribute\")\n         };\n         for attr in attrs {\n-            let level = match attr.ident_str().and_then(|name| Level::from_str(name)) {\n+            let level = match Level::from_str(&attr.name_or_empty()) {\n                 None => continue,\n                 Some(lvl) => lvl,\n             };"}, {"sha": "ae44210bcfffcff8e4d7310f9b450dc0b1876b31", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=d91b32b4dc9db066ab7deedbc51dc62ba597524b", "patch": "@@ -723,12 +723,7 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n \n pub fn maybe_lint_level_root(tcx: TyCtxt<'_, '_, '_>, id: hir::HirId) -> bool {\n     let attrs = tcx.hir().attrs_by_hir_id(id);\n-    for attr in attrs {\n-        if attr.ident_str().and_then(Level::from_str).is_some() {\n-            return true;\n-        }\n-    }\n-    false\n+    attrs.iter().any(|attr| Level::from_str(&attr.name_or_empty()).is_some())\n }\n \n fn lint_levels<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, cnum: CrateNum)"}, {"sha": "ee8dd9e58b5ff9b2babee032a9575bfad06aeac1", "filename": "src/librustc/middle/lib_features.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flib_features.rs?ref=d91b32b4dc9db066ab7deedbc51dc62ba597524b", "patch": "@@ -65,9 +65,9 @@ impl<'a, 'tcx> LibFeatureCollector<'a, 'tcx> {\n                 for meta in metas {\n                     if let Some(mi) = meta.meta_item() {\n                         // Find the `feature = \"..\"` meta-item.\n-                        match (mi.ident_str(), mi.value_str()) {\n-                            (Some(\"feature\"), val) => feature = val,\n-                            (Some(\"since\"), val) => since = val,\n+                        match (mi.name_or_empty().get(), mi.value_str()) {\n+                            (\"feature\", val) => feature = val,\n+                            (\"since\", val) => since = val,\n                             _ => {}\n                         }\n                     }"}, {"sha": "f2fe92a06220fc465da4a45e7e2dfc0b14dcde30", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=d91b32b4dc9db066ab7deedbc51dc62ba597524b", "patch": "@@ -194,12 +194,11 @@ impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n         } else {\n             // Emit errors for non-staged-api crates.\n             for attr in attrs {\n-                if let Some(tag) = attr.ident_str() {\n-                    if tag == \"unstable\" || tag == \"stable\" || tag == \"rustc_deprecated\" {\n-                        attr::mark_used(attr);\n-                        self.tcx.sess.span_err(attr.span, \"stability attributes may not be used \\\n-                                                           outside of the standard library\");\n-                    }\n+                let name = attr.name_or_empty();\n+                if [\"unstable\", \"stable\", \"rustc_deprecated\"].contains(&name.get()) {\n+                    attr::mark_used(attr);\n+                    self.tcx.sess.span_err(attr.span, \"stability attributes may not be used \\\n+                                                        outside of the standard library\");\n                 }\n             }\n "}, {"sha": "2b286ee1b97fb222948e28187d1ba277f0a4d0f2", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=d91b32b4dc9db066ab7deedbc51dc62ba597524b", "patch": "@@ -177,9 +177,9 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n         for command in self.subcommands.iter().chain(Some(self)).rev() {\n             if let Some(ref condition) = command.condition {\n                 if !attr::eval_condition(condition, &tcx.sess.parse_sess, &mut |c| {\n-                    c.ident_str().map_or(false, |name| {\n+                    c.ident().map_or(false, |ident| {\n                         options.contains(&(\n-                            name.to_string(),\n+                            ident.to_string(),\n                             c.value_str().map(|s| s.as_str().to_string())\n                         ))\n                     })"}, {"sha": "8977f626d2b5104c824136abd249ee757e6aea7f", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=d91b32b4dc9db066ab7deedbc51dc62ba597524b", "patch": "@@ -576,8 +576,8 @@ fn expect_associated_value(tcx: TyCtxt<'_, '_, '_>, item: &NestedMetaItem) -> as\n     if let Some(value) = item.value_str() {\n         value\n     } else {\n-        let msg = if let Some(name) = item.ident_str() {\n-            format!(\"associated value expected for `{}`\", name)\n+        let msg = if let Some(ident) = item.ident() {\n+            format!(\"associated value expected for `{}`\", ident)\n         } else {\n             \"expected an associated value\".to_string()\n         };"}, {"sha": "304e6eb712e3c92bb48c40691f5f98bbec37d272", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=d91b32b4dc9db066ab7deedbc51dc62ba597524b", "patch": "@@ -756,8 +756,9 @@ impl LintPass for DeprecatedAttr {\n \n impl EarlyLintPass for DeprecatedAttr {\n     fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &ast::Attribute) {\n+        let name = attr.name_or_empty();\n         for &&(n, _, _, ref g) in &self.depr_attrs {\n-            if attr.ident_str() == Some(n) {\n+            if name == n {\n                 if let &AttributeGate::Gated(Stability::Deprecated(link, suggestion),\n                                              ref name,\n                                              ref reason,"}, {"sha": "ebbd27798419bdd46d295a9476607e8ff54667ff", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=d91b32b4dc9db066ab7deedbc51dc62ba597524b", "patch": "@@ -267,21 +267,21 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAttributes {\n             }\n         }\n \n-        let name = attr.ident_str();\n+        let name = attr.name_or_empty();\n         if !attr::is_used(attr) {\n             debug!(\"Emitting warning for: {:?}\", attr);\n             cx.span_lint(UNUSED_ATTRIBUTES, attr.span, \"unused attribute\");\n             // Is it a builtin attribute that must be used at the crate level?\n             let known_crate = BUILTIN_ATTRIBUTES.iter()\n                 .find(|&&(builtin, ty, ..)| {\n-                    name == Some(builtin) && ty == AttributeType::CrateLevel\n+                    name == builtin && ty == AttributeType::CrateLevel\n                 })\n                 .is_some();\n \n             // Has a plugin registered this attribute as one that must be used at\n             // the crate level?\n             let plugin_crate = plugin_attributes.iter()\n-                .find(|&&(ref x, t)| name == Some(x) && AttributeType::CrateLevel == t)\n+                .find(|&&(ref x, t)| name == x.as_str() && AttributeType::CrateLevel == t)\n                 .is_some();\n             if known_crate || plugin_crate {\n                 let msg = match attr.style {"}, {"sha": "6940f8f442ee94a5789dc4f5a54c830244037be6", "filename": "src/librustc_passes/layout_test.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustc_passes%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustc_passes%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flayout_test.rs?ref=d91b32b4dc9db066ab7deedbc51dc62ba597524b", "patch": "@@ -53,8 +53,7 @@ impl<'a, 'tcx> VarianceTest<'a, 'tcx> {\n                 // The `..` are the names of fields to dump.\n                 let meta_items = attr.meta_item_list().unwrap_or_default();\n                 for meta_item in meta_items {\n-                    let name = meta_item.ident_str().unwrap_or(\"\");\n-                    match name {\n+                    match meta_item.name_or_empty().get() {\n                         \"abi\" => {\n                             self.tcx\n                                 .sess\n@@ -84,7 +83,7 @@ impl<'a, 'tcx> VarianceTest<'a, 'tcx> {\n                             );\n                         }\n \n-                        _ => {\n+                        name => {\n                             self.tcx.sess.span_err(\n                                 meta_item.span(),\n                                 &format!(\"unrecognized field name `{}`\", name),"}, {"sha": "8b86bddb29f4e25264bbcae11e096e34f2fab62e", "filename": "src/librustc_plugin/load.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustc_plugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustc_plugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fload.rs?ref=d91b32b4dc9db066ab7deedbc51dc62ba597524b", "patch": "@@ -56,12 +56,12 @@ pub fn load_plugins(sess: &Session,\n \n             for plugin in plugins {\n                 // plugins must have a name and can't be key = value\n-                match plugin.ident_str() {\n-                    Some(name) if !plugin.is_value_str() => {\n-                        let args = plugin.meta_item_list().map(ToOwned::to_owned);\n-                        loader.load_plugin(plugin.span(), name, args.unwrap_or_default());\n-                    },\n-                    _ => call_malformed_plugin_attribute(sess, attr.span),\n+                let name = plugin.name_or_empty();\n+                if !name.is_empty() && !plugin.is_value_str() {\n+                    let args = plugin.meta_item_list().map(ToOwned::to_owned);\n+                    loader.load_plugin(plugin.span(), &name, args.unwrap_or_default());\n+                } else {\n+                    call_malformed_plugin_attribute(sess, attr.span);\n                 }\n             }\n         }"}, {"sha": "3cf6b32b07c4c0868d6a22e3e053cdd6607f2f8b", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=d91b32b4dc9db066ab7deedbc51dc62ba597524b", "patch": "@@ -529,21 +529,21 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n             for attr in krate.module.as_ref().unwrap().attrs.lists(\"doc\") {\n                 let diag = ctxt.sess().diagnostic();\n \n-                let name = attr.ident_str();\n+                let name = attr.name_or_empty();\n                 if attr.is_word() {\n-                    if name == Some(\"no_default_passes\") {\n+                    if name == \"no_default_passes\" {\n                         report_deprecated_attr(\"no_default_passes\", diag);\n                         if default_passes == passes::DefaultPassOption::Default {\n                             default_passes = passes::DefaultPassOption::None;\n                         }\n                     }\n                 } else if let Some(value) = attr.value_str() {\n-                    let sink = match name {\n-                        Some(\"passes\") => {\n+                    let sink = match name.get() {\n+                        \"passes\" => {\n                             report_deprecated_attr(\"passes = \\\"...\\\"\", diag);\n                             &mut manual_passes\n                         },\n-                        Some(\"plugins\") => {\n+                        \"plugins\" => {\n                             report_deprecated_attr(\"plugins = \\\"...\\\"\", diag);\n                             eprintln!(\"WARNING: #![doc(plugins = \\\"...\\\")] no longer functions; \\\n                                       see CVE-2018-1000622\");\n@@ -556,7 +556,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                     }\n                 }\n \n-                if attr.is_word() && name == Some(\"document_private_items\") {\n+                if attr.is_word() && name == \"document_private_items\" {\n                     if default_passes == passes::DefaultPassOption::Default {\n                         default_passes = passes::DefaultPassOption::Private;\n                     }"}, {"sha": "bead4c78e47d34409353c85270c24ed658065e17", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=d91b32b4dc9db066ab7deedbc51dc62ba597524b", "patch": "@@ -562,23 +562,23 @@ pub fn run(mut krate: clean::Crate,\n     // going to emit HTML\n     if let Some(attrs) = krate.module.as_ref().map(|m| &m.attrs) {\n         for attr in attrs.lists(\"doc\") {\n-            match (attr.ident_str(), attr.value_str()) {\n-                (Some(\"html_favicon_url\"), Some(s)) => {\n+            match (attr.name_or_empty().get(), attr.value_str()) {\n+                (\"html_favicon_url\", Some(s)) => {\n                     scx.layout.favicon = s.to_string();\n                 }\n-                (Some(\"html_logo_url\"), Some(s)) => {\n+                (\"html_logo_url\", Some(s)) => {\n                     scx.layout.logo = s.to_string();\n                 }\n-                (Some(\"html_playground_url\"), Some(s)) => {\n+                (\"html_playground_url\", Some(s)) => {\n                     markdown::PLAYGROUND.with(|slot| {\n                         let name = krate.name.clone();\n                         *slot.borrow_mut() = Some((Some(name), s.to_string()));\n                     });\n                 }\n-                (Some(\"issue_tracker_base_url\"), Some(s)) => {\n+                (\"issue_tracker_base_url\", Some(s)) => {\n                     scx.issue_tracker_base_url = Some(s.to_string());\n                 }\n-                (Some(\"html_no_source\"), None) if attr.is_word() => {\n+                (\"html_no_source\", None) if attr.is_word() => {\n                     scx.include_sources = false;\n                 }\n                 _ => {}\n@@ -3751,7 +3751,7 @@ fn render_attributes(w: &mut fmt::Formatter<'_>, it: &clean::Item) -> fmt::Resul\n     let mut attrs = String::new();\n \n     for attr in &it.attrs.other_attrs {\n-        if !attr.ident_str().map_or(false, |name| ATTRIBUTE_WHITELIST.contains(&name)) {\n+        if !ATTRIBUTE_WHITELIST.contains(&attr.name_or_empty().get()) {\n             continue;\n         }\n         if let Some(s) = render_attribute(&attr.meta().unwrap()) {"}, {"sha": "74c952b076cd72483da3bcc67a4dbc068fd63f2a", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=d91b32b4dc9db066ab7deedbc51dc62ba597524b", "patch": "@@ -222,9 +222,9 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                     )+\n                     for meta in metas {\n                         if let Some(mi) = meta.meta_item() {\n-                            match mi.ident_str() {\n+                            match mi.name_or_empty().get() {\n                                 $(\n-                                    Some(stringify!($name))\n+                                    stringify!($name)\n                                         => if !get(mi, &mut $name) { continue 'outer },\n                                 )+\n                                 _ => {\n@@ -252,7 +252,7 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                 }\n             }\n \n-            match meta.ident_str().expect(\"not a stability level\") {\n+            match meta.name_or_empty().get() {\n                 \"rustc_deprecated\" => {\n                     if rustc_depr.is_some() {\n                         span_err!(diagnostic, item_sp, E0540,\n@@ -306,10 +306,10 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                     let mut issue = None;\n                     for meta in metas {\n                         if let Some(mi) = meta.meta_item() {\n-                            match mi.ident_str() {\n-                                Some(\"feature\") => if !get(mi, &mut feature) { continue 'outer },\n-                                Some(\"reason\") => if !get(mi, &mut reason) { continue 'outer },\n-                                Some(\"issue\") => if !get(mi, &mut issue) { continue 'outer },\n+                            match mi.name_or_empty().get() {\n+                                \"feature\" => if !get(mi, &mut feature) { continue 'outer },\n+                                \"reason\" => if !get(mi, &mut reason) { continue 'outer },\n+                                \"issue\" => if !get(mi, &mut issue) { continue 'outer },\n                                 _ => {\n                                     handle_errors(\n                                         sess,\n@@ -377,10 +377,10 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                     for meta in metas {\n                         match meta {\n                             NestedMetaItem::MetaItem(mi) => {\n-                                match mi.ident_str() {\n-                                    Some(\"feature\") =>\n+                                match mi.name_or_empty().get() {\n+                                    \"feature\" =>\n                                         if !get(mi, &mut feature) { continue 'outer },\n-                                    Some(\"since\") =>\n+                                    \"since\" =>\n                                         if !get(mi, &mut since) { continue 'outer },\n                                     _ => {\n                                         handle_errors(\n@@ -532,14 +532,14 @@ pub fn eval_condition<F>(cfg: &ast::MetaItem, sess: &ParseSess, eval: &mut F)\n \n             // The unwraps below may look dangerous, but we've already asserted\n             // that they won't fail with the loop above.\n-            match cfg.ident_str() {\n-                Some(\"any\") => mis.iter().any(|mi| {\n+            match cfg.name_or_empty().get() {\n+                \"any\" => mis.iter().any(|mi| {\n                     eval_condition(mi.meta_item().unwrap(), sess, eval)\n                 }),\n-                Some(\"all\") => mis.iter().all(|mi| {\n+                \"all\" => mis.iter().all(|mi| {\n                     eval_condition(mi.meta_item().unwrap(), sess, eval)\n                 }),\n-                Some(\"not\") => {\n+                \"not\" => {\n                     if mis.len() != 1 {\n                         span_err!(sess.span_diagnostic, cfg.span, E0536, \"expected 1 cfg-pattern\");\n                         return false;\n@@ -635,9 +635,9 @@ fn find_deprecation_generic<'a, I>(sess: &ParseSess,\n                 for meta in list {\n                     match meta {\n                         NestedMetaItem::MetaItem(mi) => {\n-                            match mi.ident_str() {\n-                                Some(\"since\") => if !get(mi, &mut since) { continue 'outer },\n-                                Some(\"note\") => if !get(mi, &mut note) { continue 'outer },\n+                            match mi.name_or_empty().get() {\n+                                \"since\" => if !get(mi, &mut since) { continue 'outer },\n+                                \"note\" => if !get(mi, &mut note) { continue 'outer },\n                                 _ => {\n                                     handle_errors(\n                                         sess,\n@@ -729,12 +729,12 @@ pub fn find_repr_attrs(sess: &ParseSess, attr: &Attribute) -> Vec<ReprAttr> {\n \n                 let mut recognised = false;\n                 if item.is_word() {\n-                    let hint = match item.ident_str() {\n-                        Some(\"C\") => Some(ReprC),\n-                        Some(\"packed\") => Some(ReprPacked(1)),\n-                        Some(\"simd\") => Some(ReprSimd),\n-                        Some(\"transparent\") => Some(ReprTransparent),\n-                        name => name.and_then(|name| int_type_of_word(name)).map(ReprInt),\n+                    let hint = match item.name_or_empty().get() {\n+                        \"C\" => Some(ReprC),\n+                        \"packed\" => Some(ReprPacked(1)),\n+                        \"simd\" => Some(ReprSimd),\n+                        \"transparent\" => Some(ReprTransparent),\n+                        name => int_type_of_word(name).map(ReprInt),\n                     };\n \n                     if let Some(h) = hint {"}, {"sha": "c0bd5c79b1dd107d1ef76d96b79734d43cb2cfa1", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=d91b32b4dc9db066ab7deedbc51dc62ba597524b", "patch": "@@ -22,7 +22,7 @@ use crate::parse::parser::Parser;\n use crate::parse::{self, ParseSess, PResult};\n use crate::parse::token::{self, Token};\n use crate::ptr::P;\n-use crate::symbol::Symbol;\n+use crate::symbol::{keywords, LocalInternedString, Symbol};\n use crate::ThinVec;\n use crate::tokenstream::{TokenStream, TokenTree, DelimSpan};\n use crate::GLOBALS;\n@@ -89,8 +89,8 @@ impl NestedMetaItem {\n     pub fn ident(&self) -> Option<Ident> {\n         self.meta_item().and_then(|meta_item| meta_item.ident())\n     }\n-    pub fn ident_str(&self) -> Option<&str> {\n-        self.ident().map(|name| name.as_str().get())\n+    pub fn name_or_empty(&self) -> LocalInternedString {\n+        self.ident().unwrap_or(keywords::Invalid.ident()).name.as_str()\n     }\n \n     /// Gets the string value if self is a MetaItem and the MetaItem is a\n@@ -167,8 +167,8 @@ impl Attribute {\n             None\n         }\n     }\n-    pub fn ident_str(&self) -> Option<&str> {\n-        self.ident().map(|name| name.as_str().get())\n+    pub fn name_or_empty(&self) -> LocalInternedString {\n+        self.ident().unwrap_or(keywords::Invalid.ident()).name.as_str()\n     }\n \n     pub fn value_str(&self) -> Option<Symbol> {\n@@ -205,8 +205,8 @@ impl MetaItem {\n             None\n         }\n     }\n-    pub fn ident_str(&self) -> Option<&str> {\n-        self.ident().map(|name| name.as_str().get())\n+    pub fn name_or_empty(&self) -> LocalInternedString {\n+        self.ident().unwrap_or(keywords::Invalid.ident()).name.as_str()\n     }\n \n     // #[attribute(name = \"value\")]"}, {"sha": "d1d0d79a705dadc9fc1ca961075c6cceaee23690", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d91b32b4dc9db066ab7deedbc51dc62ba597524b", "patch": "@@ -1341,9 +1341,9 @@ macro_rules! gate_feature {\n impl<'a> Context<'a> {\n     fn check_attribute(&self, attr: &ast::Attribute, is_macro: bool) {\n         debug!(\"check_attribute(attr = {:?})\", attr);\n-        let name = attr.ident_str();\n+        let name = attr.name_or_empty();\n         for &(n, ty, _template, ref gateage) in BUILTIN_ATTRIBUTES {\n-            if name == Some(n) {\n+            if name == n {\n                 if let Gated(_, name, desc, ref has_feature) = *gateage {\n                     if !attr.span.allows_unstable(name) {\n                         gate_feature_fn!(\n@@ -1373,7 +1373,7 @@ impl<'a> Context<'a> {\n             }\n         }\n         if !attr::is_known(attr) {\n-            if name.map_or(false, |name| name.starts_with(\"rustc_\")) {\n+            if name.starts_with(\"rustc_\") {\n                 let msg = \"unless otherwise specified, attributes with the prefix `rustc_` \\\n                            are reserved for internal compiler diagnostics\";\n                 gate_feature!(self, rustc_attrs, attr.span, msg);\n@@ -2054,12 +2054,12 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n         };\n \n         for mi in list {\n-            let name = match mi.ident_str() {\n-                Some(name) if mi.is_word() => name,\n-                _ => continue,\n-            };\n+            if !mi.is_word() {\n+                continue;\n+            }\n \n-            if incomplete_features.iter().any(|f| *f == name) {\n+            let name = mi.name_or_empty();\n+            if incomplete_features.iter().any(|f| name == *f) {\n                 span_handler.struct_span_warn(\n                     mi.span(),\n                     &format!("}, {"sha": "e5939e396e5c1372141a718c41e5387996f46247", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91b32b4dc9db066ab7deedbc51dc62ba597524b/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=d91b32b4dc9db066ab7deedbc51dc62ba597524b", "patch": "@@ -463,9 +463,10 @@ impl<'a> TraitDef<'a> {\n                 let mut attrs = newitem.attrs.clone();\n                 attrs.extend(item.attrs\n                     .iter()\n-                    .filter(|a| a.ident_str().map_or(false, |name| {\n-                        [\"allow\", \"warn\", \"deny\", \"forbid\", \"stable\", \"unstable\"].contains(&name)\n-                    }))\n+                    .filter(|a| {\n+                        [\"allow\", \"warn\", \"deny\", \"forbid\", \"stable\", \"unstable\"]\n+                            .contains(&a.name_or_empty().get())\n+                    })\n                     .cloned());\n                 push(Annotatable::Item(P(ast::Item { attrs: attrs, ..(*newitem).clone() })))\n             }"}]}