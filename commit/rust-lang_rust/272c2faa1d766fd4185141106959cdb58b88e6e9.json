{"sha": "272c2faa1d766fd4185141106959cdb58b88e6e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MmMyZmFhMWQ3NjZmZDQxODUxNDExMDY5NTljZGI1OGI4OGU2ZTk=", "commit": {"author": {"name": "Wonwoo Choi", "email": "chwo9843@gmail.com", "date": "2017-11-02T01:25:54Z"}, "committer": {"name": "Wonwoo Choi", "email": "chwo9843@gmail.com", "date": "2017-11-02T18:15:39Z"}, "message": "Display spans correctly when there are non-half-width characters", "tree": {"sha": "2871d83d8d22fb2f83259d6c836fcad23205fae4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2871d83d8d22fb2f83259d6c836fcad23205fae4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/272c2faa1d766fd4185141106959cdb58b88e6e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/272c2faa1d766fd4185141106959cdb58b88e6e9", "html_url": "https://github.com/rust-lang/rust/commit/272c2faa1d766fd4185141106959cdb58b88e6e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/272c2faa1d766fd4185141106959cdb58b88e6e9/comments", "author": {"login": "tirr-c", "id": 2322996, "node_id": "MDQ6VXNlcjIzMjI5OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/2322996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirr-c", "html_url": "https://github.com/tirr-c", "followers_url": "https://api.github.com/users/tirr-c/followers", "following_url": "https://api.github.com/users/tirr-c/following{/other_user}", "gists_url": "https://api.github.com/users/tirr-c/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirr-c/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirr-c/subscriptions", "organizations_url": "https://api.github.com/users/tirr-c/orgs", "repos_url": "https://api.github.com/users/tirr-c/repos", "events_url": "https://api.github.com/users/tirr-c/events{/privacy}", "received_events_url": "https://api.github.com/users/tirr-c/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tirr-c", "id": 2322996, "node_id": "MDQ6VXNlcjIzMjI5OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/2322996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirr-c", "html_url": "https://github.com/tirr-c", "followers_url": "https://api.github.com/users/tirr-c/followers", "following_url": "https://api.github.com/users/tirr-c/following{/other_user}", "gists_url": "https://api.github.com/users/tirr-c/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirr-c/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirr-c/subscriptions", "organizations_url": "https://api.github.com/users/tirr-c/orgs", "repos_url": "https://api.github.com/users/tirr-c/repos", "events_url": "https://api.github.com/users/tirr-c/events{/privacy}", "received_events_url": "https://api.github.com/users/tirr-c/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2be4cc040211a85b17f21e813ff62351ae4de642", "url": "https://api.github.com/repos/rust-lang/rust/commits/2be4cc040211a85b17f21e813ff62351ae4de642", "html_url": "https://github.com/rust-lang/rust/commit/2be4cc040211a85b17f21e813ff62351ae4de642"}], "stats": {"total": 247, "additions": 231, "deletions": 16}, "files": [{"sha": "81bc4da5b5ce29f80356186a0839fa413af22cef", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=272c2faa1d766fd4185141106959cdb58b88e6e9", "patch": "@@ -2244,6 +2244,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"rustc_data_structures 0.0.0\",\n  \"serialize 0.0.0\",\n+ \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]"}, {"sha": "fea4e283db13f524ba7835f4a5616bbfca8b484d", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=272c2faa1d766fd4185141106959cdb58b88e6e9", "patch": "@@ -364,6 +364,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for FileMap {\n             end_pos: _,\n             ref lines,\n             ref multibyte_chars,\n+            ref non_narrow_chars,\n         } = *self;\n \n         name.hash_stable(hcx, hasher);\n@@ -389,6 +390,12 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for FileMap {\n         for &char_pos in multibyte_chars.iter() {\n             stable_multibyte_char(char_pos, start_pos).hash_stable(hcx, hasher);\n         }\n+\n+        let non_narrow_chars = non_narrow_chars.borrow();\n+        non_narrow_chars.len().hash_stable(hcx, hasher);\n+        for &char_pos in non_narrow_chars.iter() {\n+            stable_non_narrow_char(char_pos, start_pos).hash_stable(hcx, hasher);\n+        }\n     }\n }\n \n@@ -408,3 +415,12 @@ fn stable_multibyte_char(mbc: ::syntax_pos::MultiByteChar,\n \n     (pos.0 - filemap_start.0, bytes as u32)\n }\n+\n+fn stable_non_narrow_char(swc: ::syntax_pos::NonNarrowChar,\n+                          filemap_start: ::syntax_pos::BytePos)\n+                          -> (u32, u32) {\n+    let pos = swc.pos();\n+    let width = swc.width();\n+\n+    (pos.0 - filemap_start.0, width as u32)\n+}"}, {"sha": "7417794db6b8984d8fa316e99400da9b3af2ed42", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=272c2faa1d766fd4185141106959cdb58b88e6e9", "patch": "@@ -10,7 +10,7 @@\n \n use self::Destination::*;\n \n-use syntax_pos::{DUMMY_SP, FileMap, Span, MultiSpan, CharPos};\n+use syntax_pos::{DUMMY_SP, FileMap, Span, MultiSpan};\n \n use {Level, CodeSuggestion, DiagnosticBuilder, SubDiagnostic, CodeMapper};\n use RenderSpan::*;\n@@ -201,17 +201,17 @@ impl EmitterWriter {\n                 // 6..7. This is degenerate input, but it's best to degrade\n                 // gracefully -- and the parser likes to supply a span like\n                 // that for EOF, in particular.\n-                if lo.col == hi.col && lo.line == hi.line {\n-                    hi.col = CharPos(lo.col.0 + 1);\n+                if lo.col_display == hi.col_display && lo.line == hi.line {\n+                    hi.col_display += 1;\n                 }\n \n                 let ann_type = if lo.line != hi.line {\n                     let ml = MultilineAnnotation {\n                         depth: 1,\n                         line_start: lo.line,\n                         line_end: hi.line,\n-                        start_col: lo.col.0,\n-                        end_col: hi.col.0,\n+                        start_col: lo.col_display,\n+                        end_col: hi.col_display,\n                         is_primary: span_label.is_primary,\n                         label: span_label.label.clone(),\n                     };\n@@ -221,8 +221,8 @@ impl EmitterWriter {\n                     AnnotationType::Singleline\n                 };\n                 let ann = Annotation {\n-                    start_col: lo.col.0,\n-                    end_col: hi.col.0,\n+                    start_col: lo.col_display,\n+                    end_col: hi.col_display,\n                     is_primary: span_label.is_primary,\n                     label: span_label.label.clone(),\n                     annotation_type: ann_type,"}, {"sha": "02cee9610b7a62e8b76b5894e9ee2ba0724ecea1", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=272c2faa1d766fd4185141106959cdb58b88e6e9", "patch": "@@ -1189,6 +1189,7 @@ impl<'a, 'tcx> CrateMetadata {\n                                       end_pos,\n                                       lines,\n                                       multibyte_chars,\n+                                      non_narrow_chars,\n                                       .. } = filemap_to_import;\n \n             let source_length = (end_pos - start_pos).to_usize();\n@@ -1206,14 +1207,19 @@ impl<'a, 'tcx> CrateMetadata {\n             for mbc in &mut multibyte_chars {\n                 mbc.pos = mbc.pos - start_pos;\n             }\n+            let mut non_narrow_chars = non_narrow_chars.into_inner();\n+            for swc in &mut non_narrow_chars {\n+                *swc = *swc - start_pos;\n+            }\n \n             let local_version = local_codemap.new_imported_filemap(name,\n                                                                    name_was_remapped,\n                                                                    self.cnum.as_u32(),\n                                                                    src_hash,\n                                                                    source_length,\n                                                                    lines,\n-                                                                   multibyte_chars);\n+                                                                   multibyte_chars,\n+                                                                   non_narrow_chars);\n             debug!(\"CrateMetaData::imported_filemaps alloc \\\n                     filemap {:?} original (start_pos {:?} end_pos {:?}) \\\n                     translated (start_pos {:?} end_pos {:?})\","}, {"sha": "3464db2a811119ebd63767af1a7ca2c49f7e6e79", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=272c2faa1d766fd4185141106959cdb58b88e6e9", "patch": "@@ -242,7 +242,8 @@ impl CodeMap {\n                                 src_hash: u128,\n                                 source_len: usize,\n                                 mut file_local_lines: Vec<BytePos>,\n-                                mut file_local_multibyte_chars: Vec<MultiByteChar>)\n+                                mut file_local_multibyte_chars: Vec<MultiByteChar>,\n+                                mut file_local_non_narrow_chars: Vec<NonNarrowChar>)\n                                 -> Rc<FileMap> {\n         let start_pos = self.next_start_pos();\n         let mut files = self.files.borrow_mut();\n@@ -258,6 +259,10 @@ impl CodeMap {\n             mbc.pos = mbc.pos + start_pos;\n         }\n \n+        for swc in &mut file_local_non_narrow_chars {\n+            *swc = *swc + start_pos;\n+        }\n+\n         let filemap = Rc::new(FileMap {\n             name: filename,\n             name_was_remapped,\n@@ -270,6 +275,7 @@ impl CodeMap {\n             end_pos,\n             lines: RefCell::new(file_local_lines),\n             multibyte_chars: RefCell::new(file_local_multibyte_chars),\n+            non_narrow_chars: RefCell::new(file_local_non_narrow_chars),\n         });\n \n         files.push(filemap.clone());\n@@ -297,6 +303,24 @@ impl CodeMap {\n                 let line = a + 1; // Line numbers start at 1\n                 let linebpos = (*f.lines.borrow())[a];\n                 let linechpos = self.bytepos_to_file_charpos(linebpos);\n+                let col = chpos - linechpos;\n+\n+                let col_display = {\n+                    let non_narrow_chars = f.non_narrow_chars.borrow();\n+                    let start_width_idx = non_narrow_chars\n+                        .binary_search_by_key(&linebpos, |x| x.pos())\n+                        .unwrap_or_else(|x| x);\n+                    let end_width_idx = non_narrow_chars\n+                        .binary_search_by_key(&pos, |x| x.pos())\n+                        .unwrap_or_else(|x| x);\n+                    let special_chars = end_width_idx - start_width_idx;\n+                    let non_narrow: usize =\n+                        non_narrow_chars[start_width_idx..end_width_idx]\n+                        .into_iter()\n+                        .map(|x| x.width())\n+                        .sum();\n+                    col.0 - special_chars + non_narrow\n+                };\n                 debug!(\"byte pos {:?} is on the line at byte pos {:?}\",\n                        pos, linebpos);\n                 debug!(\"char pos {:?} is on the line at char pos {:?}\",\n@@ -306,14 +330,28 @@ impl CodeMap {\n                 Loc {\n                     file: f,\n                     line,\n-                    col: chpos - linechpos,\n+                    col,\n+                    col_display,\n                 }\n             }\n             Err(f) => {\n+                let col_display = {\n+                    let non_narrow_chars = f.non_narrow_chars.borrow();\n+                    let end_width_idx = non_narrow_chars\n+                        .binary_search_by_key(&pos, |x| x.pos())\n+                        .unwrap_or_else(|x| x);\n+                    let non_narrow: usize =\n+                        non_narrow_chars[0..end_width_idx]\n+                        .into_iter()\n+                        .map(|x| x.width())\n+                        .sum();\n+                    chpos.0 - end_width_idx + non_narrow\n+                };\n                 Loc {\n                     file: f,\n                     line: 0,\n                     col: chpos,\n+                    col_display,\n                 }\n             }\n         }"}, {"sha": "951163d35fa0fbc7fe321e18a31e783bdbcc4ee0", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=272c2faa1d766fd4185141106959cdb58b88e6e9", "patch": "@@ -433,6 +433,7 @@ impl<'a> StringReader<'a> {\n                     self.filemap.record_multibyte_char(self.pos, new_ch_len);\n                 }\n             }\n+            self.filemap.record_width(self.pos, new_ch);\n         } else {\n             self.ch = None;\n             self.pos = new_pos;"}, {"sha": "aad2155157d841cf62a7595d26da62131e2dfef2", "filename": "src/libsyntax_pos/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Flibsyntax_pos%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Flibsyntax_pos%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2FCargo.toml?ref=272c2faa1d766fd4185141106959cdb58b88e6e9", "patch": "@@ -11,3 +11,4 @@ crate-type = [\"dylib\"]\n [dependencies]\n serialize = { path = \"../libserialize\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+unicode-width = \"0.1.4\""}, {"sha": "47755dc1d54680a3a0c899ec0ff94a459897d79b", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 91, "deletions": 4, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=272c2faa1d766fd4185141106959cdb58b88e6e9", "patch": "@@ -44,6 +44,8 @@ use serialize::{Encodable, Decodable, Encoder, Decoder};\n extern crate serialize;\n extern crate serialize as rustc_serialize; // used by deriving\n \n+extern crate unicode_width;\n+\n pub mod hygiene;\n pub use hygiene::{SyntaxContext, ExpnInfo, ExpnFormat, NameAndSpan, CompilerDesugaringKind};\n \n@@ -494,6 +496,63 @@ pub struct MultiByteChar {\n     pub bytes: usize,\n }\n \n+/// Identifies an offset of a non-narrow character in a FileMap\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Eq, PartialEq)]\n+pub enum NonNarrowChar {\n+    /// Represents a zero-width character\n+    ZeroWidth(BytePos),\n+    /// Represents a wide (fullwidth) character\n+    Wide(BytePos),\n+}\n+\n+impl NonNarrowChar {\n+    fn new(pos: BytePos, width: usize) -> Self {\n+        match width {\n+            0 => NonNarrowChar::ZeroWidth(pos),\n+            2 => NonNarrowChar::Wide(pos),\n+            _ => panic!(\"width {} given for non-narrow character\", width),\n+        }\n+    }\n+\n+    /// Returns the absolute offset of the character in the CodeMap\n+    pub fn pos(&self) -> BytePos {\n+        match *self {\n+            NonNarrowChar::ZeroWidth(p) |\n+            NonNarrowChar::Wide(p) => p,\n+        }\n+    }\n+\n+    /// Returns the width of the character, 0 (zero-width) or 2 (wide)\n+    pub fn width(&self) -> usize {\n+        match *self {\n+            NonNarrowChar::ZeroWidth(_) => 0,\n+            NonNarrowChar::Wide(_) => 2,\n+        }\n+    }\n+}\n+\n+impl Add<BytePos> for NonNarrowChar {\n+    type Output = Self;\n+\n+    fn add(self, rhs: BytePos) -> Self {\n+        match self {\n+            NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),\n+            NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),\n+        }\n+    }\n+}\n+\n+impl Sub<BytePos> for NonNarrowChar {\n+    type Output = Self;\n+\n+    fn sub(self, rhs: BytePos) -> Self {\n+        match self {\n+            NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),\n+            NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),\n+        }\n+    }\n+}\n+\n /// The state of the lazy external source loading mechanism of a FileMap.\n #[derive(PartialEq, Eq, Clone)]\n pub enum ExternalSource {\n@@ -552,11 +611,13 @@ pub struct FileMap {\n     pub lines: RefCell<Vec<BytePos>>,\n     /// Locations of multi-byte characters in the source code\n     pub multibyte_chars: RefCell<Vec<MultiByteChar>>,\n+    /// Width of characters that are not narrow in the source code\n+    pub non_narrow_chars: RefCell<Vec<NonNarrowChar>>,\n }\n \n impl Encodable for FileMap {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_struct(\"FileMap\", 7, |s| {\n+        s.emit_struct(\"FileMap\", 8, |s| {\n             s.emit_struct_field(\"name\", 0, |s| self.name.encode(s))?;\n             s.emit_struct_field(\"name_was_remapped\", 1, |s| self.name_was_remapped.encode(s))?;\n             s.emit_struct_field(\"src_hash\", 6, |s| self.src_hash.encode(s))?;\n@@ -610,6 +671,9 @@ impl Encodable for FileMap {\n             })?;\n             s.emit_struct_field(\"multibyte_chars\", 5, |s| {\n                 (*self.multibyte_chars.borrow()).encode(s)\n+            })?;\n+            s.emit_struct_field(\"non_narrow_chars\", 7, |s| {\n+                (*self.non_narrow_chars.borrow()).encode(s)\n             })\n         })\n     }\n@@ -618,7 +682,7 @@ impl Encodable for FileMap {\n impl Decodable for FileMap {\n     fn decode<D: Decoder>(d: &mut D) -> Result<FileMap, D::Error> {\n \n-        d.read_struct(\"FileMap\", 6, |d| {\n+        d.read_struct(\"FileMap\", 8, |d| {\n             let name: String = d.read_struct_field(\"name\", 0, |d| Decodable::decode(d))?;\n             let name_was_remapped: bool =\n                 d.read_struct_field(\"name_was_remapped\", 1, |d| Decodable::decode(d))?;\n@@ -657,6 +721,8 @@ impl Decodable for FileMap {\n             })?;\n             let multibyte_chars: Vec<MultiByteChar> =\n                 d.read_struct_field(\"multibyte_chars\", 5, |d| Decodable::decode(d))?;\n+            let non_narrow_chars: Vec<NonNarrowChar> =\n+                d.read_struct_field(\"non_narrow_chars\", 7, |d| Decodable::decode(d))?;\n             Ok(FileMap {\n                 name,\n                 name_was_remapped,\n@@ -671,7 +737,8 @@ impl Decodable for FileMap {\n                 src_hash,\n                 external_src: RefCell::new(ExternalSource::AbsentOk),\n                 lines: RefCell::new(lines),\n-                multibyte_chars: RefCell::new(multibyte_chars)\n+                multibyte_chars: RefCell::new(multibyte_chars),\n+                non_narrow_chars: RefCell::new(non_narrow_chars)\n             })\n         })\n     }\n@@ -709,6 +776,7 @@ impl FileMap {\n             end_pos: Pos::from_usize(end_pos),\n             lines: RefCell::new(Vec::new()),\n             multibyte_chars: RefCell::new(Vec::new()),\n+            non_narrow_chars: RefCell::new(Vec::new()),\n         }\n     }\n \n@@ -798,6 +866,23 @@ impl FileMap {\n         self.multibyte_chars.borrow_mut().push(mbc);\n     }\n \n+    pub fn record_width(&self, pos: BytePos, ch: char) {\n+        let width = match ch {\n+            '\\t' | '\\n' =>\n+                // Tabs will consume one column.\n+                // Make newlines take one column so that displayed spans can point them.\n+                1,\n+            ch =>\n+                // Assume control characters are zero width.\n+                // FIXME: How can we decide between `width` and `width_cjk`?\n+                unicode_width::UnicodeWidthChar::width(ch).unwrap_or(0),\n+        };\n+        // Only record non-narrow characters.\n+        if width != 1 {\n+            self.non_narrow_chars.borrow_mut().push(NonNarrowChar::new(pos, width));\n+        }\n+    }\n+\n     pub fn is_real_file(&self) -> bool {\n         !(self.name.starts_with(\"<\") &&\n           self.name.ends_with(\">\"))\n@@ -944,7 +1029,9 @@ pub struct Loc {\n     /// The (1-based) line number\n     pub line: usize,\n     /// The (0-based) column offset\n-    pub col: CharPos\n+    pub col: CharPos,\n+    /// The (0-based) column offset when displayed\n+    pub col_display: usize,\n }\n \n /// A source code location used as the result of lookup_char_pos_adj"}, {"sha": "02a9d7ee0ef4f6dd12708fb21c95fbfdb2bd2c7e", "filename": "src/test/ui/codemap_tests/unicode.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr?ref=272c2faa1d766fd4185141106959cdb58b88e6e9", "patch": "@@ -2,7 +2,7 @@ error: invalid ABI: expected one of [cdecl, stdcall, fastcall, vectorcall, thisc\n   --> $DIR/unicode.rs:11:8\n    |\n 11 | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {}\n-   |        ^^^^^^^^\n+   |        ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "cc3eae90f90a1abfb75d641d35ed07be12aa8e7c", "filename": "src/test/ui/codemap_tests/unicode_2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_2.rs?ref=272c2faa1d766fd4185141106959cdb58b88e6e9", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(non_ascii_idents)]\n+\n+fn main() {\n+    let _ = (\"a\u0310e\u0301o\u0308\u0332\", 0u7);\n+    let _ = (\"\uc544\u3042\", 1i42);\n+    let _ = a\u0310e\u0301;\n+}"}, {"sha": "6cfa66730a2042fe22d255d26b474128967b5471", "filename": "src/test/ui/codemap_tests/unicode_2.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_2.stderr?ref=272c2faa1d766fd4185141106959cdb58b88e6e9", "patch": "@@ -0,0 +1,24 @@\n+error: invalid width `7` for integer literal\n+  --> $DIR/unicode_2.rs:14:25\n+   |\n+14 |     let _ = (\"a\u0310e\u0301o\u0308\u0332\", 0u7);\n+   |                     ^^^\n+   |\n+   = help: valid widths are 8, 16, 32, 64 and 128\n+\n+error: invalid width `42` for integer literal\n+  --> $DIR/unicode_2.rs:15:20\n+   |\n+15 |     let _ = (\"\uc544\u3042\", 1i42);\n+   |                      ^^^^\n+   |\n+   = help: valid widths are 8, 16, 32, 64 and 128\n+\n+error[E0425]: cannot find value `a\u0310e\u0301` in this scope\n+  --> $DIR/unicode_2.rs:16:13\n+   |\n+16 |     let _ = a\u0310e\u0301;\n+   |             ^^ not found in this scope\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "5294eedb8457cee47455060711a5349eab8215ee", "filename": "src/test/ui/codemap_tests/unicode_3.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_3.rs?ref=272c2faa1d766fd4185141106959cdb58b88e6e9", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let s = \"Z\u0368A\u0351\u0366\u0352\u034b\u0364\u0351\u031aL\u0304\u0351\u034bG\u0302\u0368\u0365\u033f\u0352\u033d\u0344O\u0365\u035b\u036d!\u030f\"; while true { break; }\n+    println!(\"{}\", s);\n+}"}, {"sha": "a7514a6b7922928e3afc8ae5068bfb748c6448bd", "filename": "src/test/ui/codemap_tests/unicode_3.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_3.stderr?ref=272c2faa1d766fd4185141106959cdb58b88e6e9", "patch": "@@ -0,0 +1,10 @@\n+warning: denote infinite loops with `loop { ... }`\n+  --> $DIR/unicode_3.rs:12:45\n+   |\n+12 |     let s = \"Z\u0368A\u0351\u0366\u0352\u034b\u0364\u0351\u031aL\u0304\u0351\u034bG\u0302\u0368\u0365\u033f\u0352\u033d\u0344O\u0365\u035b\u036d!\u030f\"; while true { break; }\n+   |                       ----------^^^^^^^^^^^\n+   |                       |\n+   |                       help: use `loop`\n+   |\n+   = note: #[warn(while_true)] on by default\n+"}, {"sha": "2ed4578d5389ec7e143eade954ce687caa3758f4", "filename": "src/test/ui/issue-44078.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Ftest%2Fui%2Fissue-44078.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/272c2faa1d766fd4185141106959cdb58b88e6e9/src%2Ftest%2Fui%2Fissue-44078.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-44078.stderr?ref=272c2faa1d766fd4185141106959cdb58b88e6e9", "patch": "@@ -2,7 +2,7 @@ error: unterminated double quote string\n   --> $DIR/issue-44078.rs:12:8\n    |\n 12 |       \"\ud83d\ude0a\"\";\n-   |  ________^\n+   |  _________^\n 13 | | }\n    | |__^\n "}]}