{"sha": "7976cd6eb05fc63228398b65ebe9227678c43cc9", "node_id": "C_kwDOAAsO6NoAKDc5NzZjZDZlYjA1ZmM2MzIyODM5OGI2NWViZTkyMjc2NzhjNDNjYzk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-15T05:09:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-15T05:09:47Z"}, "message": "Rollup merge of #99257 - Manishearth:regression, r=jackh726\n\nAdd regression test for #89436\n\nI never got around to adding such a test.\n\nIn general I think the `yoke` crate has a bunch of interesting testcases that exercise various edges of the algorithms here, it would be nice if we could simply depend on the crate and add some tests that exercise it, but I don't think that's possible. Do you or `@eddyb` think there's any use trying to upstream a bunch of common yoke minimal working example code to the testsuite and having a ton of yoke tests?", "tree": {"sha": "c5ca9faabd087992a99dd9968699804286fdfa6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5ca9faabd087992a99dd9968699804286fdfa6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7976cd6eb05fc63228398b65ebe9227678c43cc9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi0PabCRBK7hj4Ov3rIwAAp+QIAA8YMatuF0AVYsVDL26nyxFF\nssEjbFFPEUTNfWh73HUMZRadoRKVPgVosH3nkOo5GbngF+Csk4JWSA9Q9pL1wwHQ\nT6GwUPdgQ3TXkSdiKIz1WnN82F69TDvW6sg77DtUtoFI5h1HFg+X+ph73X3/NllR\n0NUOKob7pMHgd28NMi/vW1tHIRc9kp+lqUHtGrEjDo+Xa6YEXGfX5QvG0XqgI4co\nCoMiswJoI2wEhHha9Rq7bpzgZ4EZttYYqu33VnJimumWguK0kb8O+uwWXAGi7mK1\nClasOn06N6rV5Jfx/E9Pz2kT3Li8MpiMUobzLlUHoMBrwVK90VTvRtg/Sxg78yM=\n=79Ds\n-----END PGP SIGNATURE-----\n", "payload": "tree c5ca9faabd087992a99dd9968699804286fdfa6f\nparent 6dae197afadd3d7bf532ebbfd6e9acbc6f16be2f\nparent 62edbbecb7f8bc5637cda78febdd5cf3b15d7d45\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1657861787 +0530\ncommitter GitHub <noreply@github.com> 1657861787 +0530\n\nRollup merge of #99257 - Manishearth:regression, r=jackh726\n\nAdd regression test for #89436\n\nI never got around to adding such a test.\n\nIn general I think the `yoke` crate has a bunch of interesting testcases that exercise various edges of the algorithms here, it would be nice if we could simply depend on the crate and add some tests that exercise it, but I don't think that's possible. Do you or `@eddyb` think there's any use trying to upstream a bunch of common yoke minimal working example code to the testsuite and having a ton of yoke tests?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7976cd6eb05fc63228398b65ebe9227678c43cc9", "html_url": "https://github.com/rust-lang/rust/commit/7976cd6eb05fc63228398b65ebe9227678c43cc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7976cd6eb05fc63228398b65ebe9227678c43cc9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dae197afadd3d7bf532ebbfd6e9acbc6f16be2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dae197afadd3d7bf532ebbfd6e9acbc6f16be2f", "html_url": "https://github.com/rust-lang/rust/commit/6dae197afadd3d7bf532ebbfd6e9acbc6f16be2f"}, {"sha": "62edbbecb7f8bc5637cda78febdd5cf3b15d7d45", "url": "https://api.github.com/repos/rust-lang/rust/commits/62edbbecb7f8bc5637cda78febdd5cf3b15d7d45", "html_url": "https://github.com/rust-lang/rust/commit/62edbbecb7f8bc5637cda78febdd5cf3b15d7d45"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "f7e467b3786dc66cf88c2b10c7c7bc752b1e8c1e", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-89436.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7976cd6eb05fc63228398b65ebe9227678c43cc9/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-89436.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7976cd6eb05fc63228398b65ebe9227678c43cc9/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-89436.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-89436.rs?ref=7976cd6eb05fc63228398b65ebe9227678c43cc9", "patch": "@@ -0,0 +1,44 @@\n+// check-pass\n+\n+#![allow(unused)]\n+\n+trait MiniYokeable<'a> {\n+    type Output;\n+}\n+\n+struct MiniYoke<Y: for<'a> MiniYokeable<'a>> {\n+    pub yokeable: Y,\n+}\n+\n+fn map_project_broken<Y, P>(\n+    source: MiniYoke<Y>,\n+    f: impl for<'a> FnOnce(\n+        <Y as MiniYokeable<'a>>::Output,\n+        core::marker::PhantomData<&'a ()>,\n+    ) -> <P as MiniYokeable<'a>>::Output,\n+) -> MiniYoke<P>\n+where\n+    Y: for<'a> MiniYokeable<'a>,\n+    P: for<'a> MiniYokeable<'a>\n+{\n+    unimplemented!()\n+}\n+\n+struct Bar<'a> {\n+    string_1: &'a str,\n+    string_2: &'a str,\n+}\n+\n+impl<'a> MiniYokeable<'a> for Bar<'static> {\n+    type Output = Bar<'a>;\n+}\n+\n+impl<'a> MiniYokeable<'a> for &'static str {\n+    type Output = &'a str;\n+}\n+\n+fn demo_broken(bar: MiniYoke<Bar<'static>>) -> MiniYoke<&'static str> {\n+    map_project_broken(bar, |bar, _| bar.string_1)\n+}\n+\n+fn main() {}"}]}