{"sha": "fcc32797ded7d5ed155ddcdf11904b06e7d0e11a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYzMyNzk3ZGVkN2Q1ZWQxNTVkZGNkZjExOTA0YjA2ZTdkMGUxMWE=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2011-08-02T01:43:46Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2011-08-02T01:51:56Z"}, "message": "Fix incorrect uses of str::buf()", "tree": {"sha": "cf7e1e57c5bc25684e452a09a69203060aeed030", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf7e1e57c5bc25684e452a09a69203060aeed030"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcc32797ded7d5ed155ddcdf11904b06e7d0e11a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcc32797ded7d5ed155ddcdf11904b06e7d0e11a", "html_url": "https://github.com/rust-lang/rust/commit/fcc32797ded7d5ed155ddcdf11904b06e7d0e11a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcc32797ded7d5ed155ddcdf11904b06e7d0e11a/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "286be2d94e8904765e1ef0f5fcc2899f8501a654", "url": "https://api.github.com/repos/rust-lang/rust/commits/286be2d94e8904765e1ef0f5fcc2899f8501a654", "html_url": "https://github.com/rust-lang/rust/commit/286be2d94e8904765e1ef0f5fcc2899f8501a654"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "db06a6ca6cda28e0a16e91c6d36b45187767ed70", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fcc32797ded7d5ed155ddcdf11904b06e7d0e11a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc32797ded7d5ed155ddcdf11904b06e7d0e11a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=fcc32797ded7d5ed155ddcdf11904b06e7d0e11a", "patch": "@@ -5993,9 +5993,11 @@ fn new_block_ctxt(cx: &@fn_ctxt, parent: &block_parent, kind: block_kind,\n                   name: &str) -> @block_ctxt {\n     let cleanups: cleanup[] = ~[];\n     let s = str::buf(\"\");\n+    let held_name; //HACK for str::buf, which doesn't keep its value alive\n     if cx.lcx.ccx.sess.get_opts().save_temps ||\n            cx.lcx.ccx.sess.get_opts().debuginfo {\n-        s = str::buf(cx.lcx.ccx.names.next(name));\n+        held_name = cx.lcx.ccx.names.next(name);\n+        s = str::buf(held_name);\n     }\n     let llbb: BasicBlockRef = llvm::LLVMAppendBasicBlock(cx.llfn, s);\n     ret @{llbb: llbb,\n@@ -8001,11 +8003,14 @@ fn make_common_glue(sess: &session::session, output: &str) {\n     let llmod =\n         llvm::LLVMModuleCreateWithNameInContext(str::buf(\"rust_out\"),\n                                                 llvm::LLVMGetGlobalContext());\n-    llvm::LLVMSetDataLayout(llmod, str::buf(x86::get_data_layout()));\n-    llvm::LLVMSetTarget(llmod, str::buf(x86::get_target_triple()));\n+    let dat_layt = x86::get_data_layout(); //HACK (buf lifetime issue)\n+    llvm::LLVMSetDataLayout(llmod, str::buf(dat_layt));\n+    let targ_trip = x86::get_target_triple(); //HACK (buf lifetime issue)\n+    llvm::LLVMSetTarget(llmod, str::buf(targ_trip));\n     mk_target_data(x86::get_data_layout());\n     declare_intrinsics(llmod);\n-    llvm::LLVMSetModuleInlineAsm(llmod, str::buf(x86::get_module_asm()));\n+    let modl_asm = x86::get_module_asm(); //HACK (buf lifetime issue)\n+    llvm::LLVMSetModuleInlineAsm(llmod, str::buf(modl_asm));\n     make_glues(llmod, taskptr_type);\n     link::write::run_passes(sess, llmod, output);\n }\n@@ -8035,10 +8040,9 @@ fn create_crate_map(ccx: &@crate_ctxt) -> ValueRef {\n     let i = 1;\n     let cstore = ccx.sess.get_cstore();\n     while cstore::have_crate_data(cstore, i) {\n-        let name = cstore::get_crate_data(cstore, i).name;\n+        let nm = \"_rust_crate_map_\" + cstore::get_crate_data(cstore, i).name;\n         let cr =\n-            llvm::LLVMAddGlobal(ccx.llmod, T_int(),\n-                                str::buf(\"_rust_crate_map_\" + name));\n+            llvm::LLVMAddGlobal(ccx.llmod, T_int(), str::buf(nm));\n         subcrates += ~[p2i(cr)];\n         i += 1;\n     }\n@@ -8067,7 +8071,8 @@ fn write_metadata(cx: &@crate_ctxt, crate: &@ast::crate) {\n         llvm::LLVMAddGlobal(cx.llmod, val_ty(llconst),\n                             str::buf(\"rust_metadata\"));\n     llvm::LLVMSetInitializer(llglobal, llconst);\n-    llvm::LLVMSetSection(llglobal, str::buf(x86::get_meta_sect_name()));\n+    let met_sct_nm = x86::get_meta_sect_name(); //HACK (buf lifetime issue)\n+    llvm::LLVMSetSection(llglobal, str::buf(met_sct_nm));\n     llvm::LLVMSetLinkage(llglobal,\n                          lib::llvm::LLVMInternalLinkage as llvm::Linkage);\n \n@@ -8086,9 +8091,11 @@ fn trans_crate(sess: &session::session, crate: &@ast::crate, tcx: &ty::ctxt,\n     let llmod =\n         llvm::LLVMModuleCreateWithNameInContext(str::buf(\"rust_out\"),\n                                                 llvm::LLVMGetGlobalContext());\n-    llvm::LLVMSetDataLayout(llmod, str::buf(x86::get_data_layout()));\n-    llvm::LLVMSetTarget(llmod, str::buf(x86::get_target_triple()));\n-    let td = mk_target_data(x86::get_data_layout());\n+    let dat_layt = x86::get_data_layout(); //HACK (buf lifetime issue)\n+    llvm::LLVMSetDataLayout(llmod, str::buf(dat_layt));\n+    let targ_trip = x86::get_target_triple(); //HACK (buf lifetime issue)\n+    llvm::LLVMSetTarget(llmod, str::buf(targ_trip));\n+    let td = mk_target_data(dat_layt);\n     let tn = mk_type_names();\n     let intrinsics = declare_intrinsics(llmod);\n     let task_type = T_task();"}]}