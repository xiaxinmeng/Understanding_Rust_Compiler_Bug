{"sha": "b48eb5e0be2a6e06d9629f770288c46f7bcb326c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OGViNWUwYmUyYTZlMDZkOTYyOWY3NzAyODhjNDZmN2JjYjMyNmM=", "commit": {"author": {"name": "Gianni Ciccarelli", "email": "gianni.ciccarelli@gmail.com", "date": "2017-04-26T03:17:48Z"}, "committer": {"name": "Gianni Ciccarelli", "email": "gianni.ciccarelli@gmail.com", "date": "2017-04-26T14:43:09Z"}, "message": "    support `default impl` for specialization\n\n    `[default] [unsafe] impl` and typecheck", "tree": {"sha": "788c9f27af9f780a3765dbdd80e9981274698265", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/788c9f27af9f780a3765dbdd80e9981274698265"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b48eb5e0be2a6e06d9629f770288c46f7bcb326c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b48eb5e0be2a6e06d9629f770288c46f7bcb326c", "html_url": "https://github.com/rust-lang/rust/commit/b48eb5e0be2a6e06d9629f770288c46f7bcb326c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b48eb5e0be2a6e06d9629f770288c46f7bcb326c/comments", "author": {"login": "giannicic", "id": 10560238, "node_id": "MDQ6VXNlcjEwNTYwMjM4", "avatar_url": "https://avatars.githubusercontent.com/u/10560238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giannicic", "html_url": "https://github.com/giannicic", "followers_url": "https://api.github.com/users/giannicic/followers", "following_url": "https://api.github.com/users/giannicic/following{/other_user}", "gists_url": "https://api.github.com/users/giannicic/gists{/gist_id}", "starred_url": "https://api.github.com/users/giannicic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giannicic/subscriptions", "organizations_url": "https://api.github.com/users/giannicic/orgs", "repos_url": "https://api.github.com/users/giannicic/repos", "events_url": "https://api.github.com/users/giannicic/events{/privacy}", "received_events_url": "https://api.github.com/users/giannicic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "giannicic", "id": 10560238, "node_id": "MDQ6VXNlcjEwNTYwMjM4", "avatar_url": "https://avatars.githubusercontent.com/u/10560238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giannicic", "html_url": "https://github.com/giannicic", "followers_url": "https://api.github.com/users/giannicic/followers", "following_url": "https://api.github.com/users/giannicic/following{/other_user}", "gists_url": "https://api.github.com/users/giannicic/gists{/gist_id}", "starred_url": "https://api.github.com/users/giannicic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giannicic/subscriptions", "organizations_url": "https://api.github.com/users/giannicic/orgs", "repos_url": "https://api.github.com/users/giannicic/repos", "events_url": "https://api.github.com/users/giannicic/events{/privacy}", "received_events_url": "https://api.github.com/users/giannicic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "url": "https://api.github.com/repos/rust-lang/rust/commits/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "html_url": "https://github.com/rust-lang/rust/commit/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05"}], "stats": {"total": 90, "additions": 44, "deletions": 46}, "files": [{"sha": "c9fcdf7647b9cfa79e42164ca858d728a7685dd7", "filename": "src/grammar/parser-lalr.y", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b48eb5e0be2a6e06d9629f770288c46f7bcb326c/src%2Fgrammar%2Fparser-lalr.y", "raw_url": "https://github.com/rust-lang/rust/raw/b48eb5e0be2a6e06d9629f770288c46f7bcb326c/src%2Fgrammar%2Fparser-lalr.y", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fparser-lalr.y?ref=b48eb5e0be2a6e06d9629f770288c46f7bcb326c", "patch": "@@ -535,10 +535,11 @@ maybe_unsafe\n | %empty { $$ = mk_none(); }\n ;\n \n-maybe_default_impl\n-:         IMPL { $$ = mk_none(); }\n-| DEFAULT IMPL { $$ = $1 }\n-;\n+maybe_default_maybe_unsafe\n+: DEFAULT UNSAFE { $$ = mk_atom(\"DefaultUnsafe\"); }\n+| DEFAULT        { $$ = mk_atom(\"Default\"); }\n+|         UNSAFE { $$ = mk_atom(\"Unsafe\"); }\n+| %empty { $$ = mk_none(); }\n \n trait_method\n : type_method { $$ = mk_node(\"Required\", 1, $1); }\n@@ -594,27 +595,27 @@ impl_method\n // they are ambiguous with traits. We do the same here, regrettably,\n // by splitting ty into ty and ty_prim.\n item_impl\n-: maybe_unsafe maybe_default_impl generic_params ty_prim_sum maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n+: maybe_default_maybe_unsafe IMPL generic_params ty_prim_sum maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n {\n-  $$ = mk_node(\"ItemImpl\", 6, $1, $3, $4, $5, $7, $8, $2);\n+  $$ = mk_node(\"ItemImpl\", 6, $1, $3, $4, $5, $7, $8);\n }\n-| maybe_unsafe maybe_default_impl generic_params '(' ty ')' maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n+| maybe_default_maybe_unsafe IMPL generic_params '(' ty ')' maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n {\n-  $$ = mk_node(\"ItemImpl\", 6, $1, $3, 5, $6, $9, $10, $2);\n+  $$ = mk_node(\"ItemImpl\", 6, $1, $3, 5, $6, $9, $10);\n }\n-| maybe_unsafe maybe_default_impl generic_params trait_ref FOR ty_sum maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n+| maybe_default_maybe_unsafe IMPL generic_params trait_ref FOR ty_sum maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n {\n-  $$ = mk_node(\"ItemImpl\", 6, $3, $4, $6, $7, $9, $10, $2);\n+  $$ = mk_node(\"ItemImpl\", 6, $3, $4, $6, $7, $9, $10);\n }\n-| maybe_unsafe maybe_default_impl generic_params '!' trait_ref FOR ty_sum maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n+| maybe_default_maybe_unsafe IMPL generic_params '!' trait_ref FOR ty_sum maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n {\n-  $$ = mk_node(\"ItemImplNeg\", 7, $1, $3, $5, $7, $8, $10, $11, $2);\n+  $$ = mk_node(\"ItemImplNeg\", 7, $1, $3, $5, $7, $8, $10, $11);\n }\n-| maybe_unsafe maybe_default_impl generic_params trait_ref FOR DOTDOT '{' '}'\n+| maybe_default_maybe_unsafe IMPL generic_params trait_ref FOR DOTDOT '{' '}'\n {\n   $$ = mk_node(\"ItemImplDefault\", 3, $1, $3, $4);\n }\n-| maybe_unsafe maybe_default_impl generic_params '!' trait_ref FOR DOTDOT '{' '}'\n+| maybe_default_maybe_unsafe IMPL generic_params '!' trait_ref FOR DOTDOT '{' '}'\n {\n   $$ = mk_node(\"ItemImplDefaultNeg\", 3, $1, $3, $4);\n }"}, {"sha": "8f4dce5a78303d51d2c5850fd4fceb6af612df39", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b48eb5e0be2a6e06d9629f770288c46f7bcb326c/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48eb5e0be2a6e06d9629f770288c46f7bcb326c/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=b48eb5e0be2a6e06d9629f770288c46f7bcb326c", "patch": "@@ -1363,7 +1363,7 @@ impl<'a> LoweringContext<'a> {\n             ItemKind::MacroDef(..) | ItemKind::Mac(..) => panic!(\"Shouldn't still be around\"),\n         }\n \n-        // [1] `defaultness.has_value()` is necer called for an `impl`, always `true` in order to\n+        // [1] `defaultness.has_value()` is never called for an `impl`, always `true` in order to\n         //     not cause an assertion failure inside the `lower_defaultness` function\n     }\n "}, {"sha": "e7c61dde768c011626a2dd5c11b2bad482a86f60", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b48eb5e0be2a6e06d9629f770288c46f7bcb326c/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48eb5e0be2a6e06d9629f770288c46f7bcb326c/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=b48eb5e0be2a6e06d9629f770288c46f7bcb326c", "patch": "@@ -14,6 +14,7 @@ use ty::{self, Ty, TyCtxt, ToPredicate, ToPolyTraitRef};\n use ty::outlives::Component;\n use util::nodemap::FxHashSet;\n use hir::{self};\n+use traits::specialize::specialization_graph::NodeItem;\n \n use super::{Obligation, ObligationCause, PredicateObligation, SelectionContext, Normalized};\n \n@@ -525,6 +526,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n     }\n+\n+    pub fn impl_item_is_final(self, node_item: &NodeItem<hir::Defaultness>) -> bool {\n+        node_item.item.is_final() && !self.impl_is_default(node_item.node.def_id())\n+    }\n }\n \n pub enum TupleArgumentsFlag { Yes, No }"}, {"sha": "631e09d831d5c61f26f6a2989f2df14f43f17745", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b48eb5e0be2a6e06d9629f770288c46f7bcb326c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48eb5e0be2a6e06d9629f770288c46f7bcb326c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b48eb5e0be2a6e06d9629f770288c46f7bcb326c", "patch": "@@ -1141,10 +1141,8 @@ fn check_specialization_validity<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         .map(|node_item| node_item.map(|parent| parent.defaultness));\n \n     if let Some(parent) = parent {\n-        if parent.item.is_final() {\n-            if !tcx.impl_is_default(parent.node.def_id()) {\n-                report_forbidden_specialization(tcx, impl_item, parent.node.def_id());\n-            }\n+        if tcx.impl_item_is_final(&parent) {\n+            report_forbidden_specialization(tcx, impl_item, parent.node.def_id());\n         }\n     }\n "}, {"sha": "b6a2c983fd4d7fb687abc39bea3ea65ddb14a844", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b48eb5e0be2a6e06d9629f770288c46f7bcb326c/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48eb5e0be2a6e06d9629f770288c46f7bcb326c/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=b48eb5e0be2a6e06d9629f770288c46f7bcb326c", "patch": "@@ -1226,13 +1226,10 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     _ => {}\n                 }\n \n-                match defaultness {\n-                    ast::Defaultness::Default => {\n-                        gate_feature_post!(&self, specialization,\n-                                      i.span,\n-                                      \"specialization is unstable\");\n-                    }\n-                    _ => {}\n+                if let ast::Defaultness::Default = defaultness {\n+                    gate_feature_post!(&self, specialization,\n+                                       i.span,\n+                                       \"specialization is unstable\");\n                 }\n             }\n "}, {"sha": "f806e1e3bde624144ecc065a31fc7920238800d6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b48eb5e0be2a6e06d9629f770288c46f7bcb326c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48eb5e0be2a6e06d9629f770288c46f7bcb326c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b48eb5e0be2a6e06d9629f770288c46f7bcb326c", "patch": "@@ -4918,12 +4918,9 @@ impl<'a> Parser<'a> {\n                                           allowed to have generics\");\n             }\n \n-            match defaultness {\n-                ast::Defaultness::Default => {\n-                    self.span_err(impl_span, \"`default impl` is not allowed for \\\n-                                               default trait implementations\");\n-                }\n-                _ => {}\n+            if let ast::Defaultness::Default = defaultness {\n+                self.span_err(impl_span, \"`default impl` is not allowed for \\\n+                                         default trait implementations\");\n             }\n \n             self.expect(&token::OpenDelim(token::Brace))?;\n@@ -5768,13 +5765,13 @@ impl<'a> Parser<'a> {\n         }\n         if (self.check_keyword(keywords::Unsafe) &&\n             self.look_ahead(1, |t| t.is_keyword(keywords::Impl))) ||\n-           (self.check_keyword(keywords::Unsafe) &&\n-            self.look_ahead(1, |t| t.is_keyword(keywords::Default)) &&\n+           (self.check_keyword(keywords::Default) &&\n+            self.look_ahead(1, |t| t.is_keyword(keywords::Unsafe)) &&\n             self.look_ahead(2, |t| t.is_keyword(keywords::Impl)))\n         {\n             // IMPL ITEM\n-            self.expect_keyword(keywords::Unsafe)?;\n             let defaultness = self.parse_defaultness()?;\n+            self.expect_keyword(keywords::Unsafe)?;\n             self.expect_keyword(keywords::Impl)?;\n             let (ident,\n                  item_,"}, {"sha": "7daecc842f3f9fd8a2140a3785db00b2f34cbffc", "filename": "src/test/run-pass/specialization/defaultimpl/specialization-basics-unsafe.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b48eb5e0be2a6e06d9629f770288c46f7bcb326c/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-basics-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48eb5e0be2a6e06d9629f770288c46f7bcb326c/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-basics-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-basics-unsafe.rs?ref=b48eb5e0be2a6e06d9629f770288c46f7bcb326c", "patch": "@@ -17,61 +17,61 @@ unsafe trait Foo {\n     fn foo(&self) -> &'static str;\n }\n \n-unsafe default impl<T> Foo for T {\n+default unsafe impl<T> Foo for T {\n     fn foo(&self) -> &'static str {\n         \"generic\"\n     }\n }\n \n-unsafe default impl<T: Clone> Foo for T {\n+default unsafe impl<T: Clone> Foo for T {\n     fn foo(&self) -> &'static str {\n         \"generic Clone\"\n     }\n }\n \n-unsafe default impl<T, U> Foo for (T, U) where T: Clone, U: Clone {\n+default unsafe impl<T, U> Foo for (T, U) where T: Clone, U: Clone {\n     fn foo(&self) -> &'static str {\n         \"generic pair\"\n     }\n }\n \n-unsafe default impl<T: Clone> Foo for (T, T) {\n+default unsafe impl<T: Clone> Foo for (T, T) {\n     fn foo(&self) -> &'static str {\n         \"generic uniform pair\"\n     }\n }\n \n-unsafe default impl Foo for (u8, u32) {\n+default unsafe impl Foo for (u8, u32) {\n     fn foo(&self) -> &'static str {\n         \"(u8, u32)\"\n     }\n }\n \n-unsafe default impl Foo for (u8, u8) {\n+default unsafe impl Foo for (u8, u8) {\n     fn foo(&self) -> &'static str {\n         \"(u8, u8)\"\n     }\n }\n \n-unsafe default impl<T: Clone> Foo for Vec<T> {\n+default unsafe impl<T: Clone> Foo for Vec<T> {\n     fn foo(&self) -> &'static str {\n         \"generic Vec\"\n     }\n }\n \n-unsafe impl Foo for Vec<i32> {\n+default unsafe impl Foo for Vec<i32> {\n     fn foo(&self) -> &'static str {\n         \"Vec<i32>\"\n     }\n }\n \n-unsafe impl Foo for String {\n+default unsafe impl Foo for String {\n     fn foo(&self) -> &'static str {\n         \"String\"\n     }\n }\n \n-unsafe impl Foo for i32 {\n+default unsafe impl Foo for i32 {\n     fn foo(&self) -> &'static str {\n         \"i32\"\n     }\n@@ -80,7 +80,7 @@ unsafe impl Foo for i32 {\n struct NotClone;\n \n unsafe trait MyMarker {}\n-unsafe default impl<T: Clone + MyMarker> Foo for T {\n+default unsafe impl<T: Clone + MyMarker> Foo for T {\n     fn foo(&self) -> &'static str {\n         \"generic Clone + MyMarker\"\n     }"}]}