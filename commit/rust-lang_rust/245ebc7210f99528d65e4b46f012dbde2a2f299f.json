{"sha": "245ebc7210f99528d65e4b46f012dbde2a2f299f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NWViYzcyMTBmOTk1MjhkNjVlNGI0NmYwMTJkYmRlMmEyZjI5OWY=", "commit": {"author": {"name": "Rakshith Ravi", "email": "rakshith.ravi@gmx.com", "date": "2020-05-24T14:08:54Z"}, "committer": {"name": "Rakshith Ravi", "email": "rakshith.ravi@gmx.com", "date": "2020-05-24T14:08:54Z"}, "message": "Removed all instances of const_field.", "tree": {"sha": "d255edcf561048cbaed17e28bf9d9a97d61f608c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d255edcf561048cbaed17e28bf9d9a97d61f608c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/245ebc7210f99528d65e4b46f012dbde2a2f299f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/245ebc7210f99528d65e4b46f012dbde2a2f299f", "html_url": "https://github.com/rust-lang/rust/commit/245ebc7210f99528d65e4b46f012dbde2a2f299f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/245ebc7210f99528d65e4b46f012dbde2a2f299f/comments", "author": {"login": "rakshith-ravi", "id": 12864597, "node_id": "MDQ6VXNlcjEyODY0NTk3", "avatar_url": "https://avatars.githubusercontent.com/u/12864597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rakshith-ravi", "html_url": "https://github.com/rakshith-ravi", "followers_url": "https://api.github.com/users/rakshith-ravi/followers", "following_url": "https://api.github.com/users/rakshith-ravi/following{/other_user}", "gists_url": "https://api.github.com/users/rakshith-ravi/gists{/gist_id}", "starred_url": "https://api.github.com/users/rakshith-ravi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rakshith-ravi/subscriptions", "organizations_url": "https://api.github.com/users/rakshith-ravi/orgs", "repos_url": "https://api.github.com/users/rakshith-ravi/repos", "events_url": "https://api.github.com/users/rakshith-ravi/events{/privacy}", "received_events_url": "https://api.github.com/users/rakshith-ravi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rakshith-ravi", "id": 12864597, "node_id": "MDQ6VXNlcjEyODY0NTk3", "avatar_url": "https://avatars.githubusercontent.com/u/12864597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rakshith-ravi", "html_url": "https://github.com/rakshith-ravi", "followers_url": "https://api.github.com/users/rakshith-ravi/followers", "following_url": "https://api.github.com/users/rakshith-ravi/following{/other_user}", "gists_url": "https://api.github.com/users/rakshith-ravi/gists{/gist_id}", "starred_url": "https://api.github.com/users/rakshith-ravi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rakshith-ravi/subscriptions", "organizations_url": "https://api.github.com/users/rakshith-ravi/orgs", "repos_url": "https://api.github.com/users/rakshith-ravi/repos", "events_url": "https://api.github.com/users/rakshith-ravi/events{/privacy}", "received_events_url": "https://api.github.com/users/rakshith-ravi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52b605c8cb2f730e607de0777a694cd1b9bb3e15", "url": "https://api.github.com/repos/rust-lang/rust/commits/52b605c8cb2f730e607de0777a694cd1b9bb3e15", "html_url": "https://github.com/rust-lang/rust/commit/52b605c8cb2f730e607de0777a694cd1b9bb3e15"}], "stats": {"total": 58, "additions": 7, "deletions": 51}, "files": [{"sha": "574f91e5b4d813d54e57475c83534b0c96288908", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/245ebc7210f99528d65e4b46f012dbde2a2f299f/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245ebc7210f99528d65e4b46f012dbde2a2f299f/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=245ebc7210f99528d65e4b46f012dbde2a2f299f", "patch": "@@ -1,6 +1,5 @@\n use crate::mir::operand::OperandRef;\n use crate::traits::*;\n-use rustc_index::vec::Idx;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{ConstValue, ErrorHandled};\n use rustc_middle::ty::layout::HasTyCtxt;\n@@ -59,17 +58,14 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         constant\n             .map(|val| {\n                 let field_ty = ty.builtin_index().unwrap();\n-                let fields = match ty.kind {\n-                    ty::Array(_, n) => n.eval_usize(bx.tcx(), ty::ParamEnv::reveal_all()),\n-                    _ => bug!(\"invalid simd shuffle type: {}\", ty),\n-                };\n                 let c = ty::Const::from_value(bx.tcx(), val, ty);\n-                let values: Vec<_> = (0..fields)\n+                let values: Vec<_> = bx\n+                    .tcx()\n+                    .destructure_const(ty::ParamEnv::reveal_all().and(&c))\n+                    .fields\n+                    .into_iter()\n                     .map(|field| {\n-                        let field = bx.tcx().const_field(\n-                            ty::ParamEnv::reveal_all().and((&c, mir::Field::new(field as usize))),\n-                        );\n-                        if let Some(prim) = field.try_to_scalar() {\n+                        if let Some(prim) = field.val.try_to_scalar() {\n                             let layout = bx.layout_of(field_ty);\n                             let scalar = match layout.abi {\n                                 Abi::Scalar(ref x) => x,"}, {"sha": "2c0524fa9910212c0b6f425fbee24bd149883c27", "filename": "src/librustc_middle/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/245ebc7210f99528d65e4b46f012dbde2a2f299f/src%2Flibrustc_middle%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245ebc7210f99528d65e4b46f012dbde2a2f299f/src%2Flibrustc_middle%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fdep_graph%2Fdep_node.rs?ref=245ebc7210f99528d65e4b46f012dbde2a2f299f", "patch": "@@ -49,7 +49,6 @@\n //! user of the `DepNode` API of having to know how to compute the expected\n //! fingerprint for a given set of node parameters.\n \n-use crate::mir;\n use crate::mir::interpret::{GlobalId, LitToConstInput};\n use crate::traits;\n use crate::traits::query::{"}, {"sha": "f04a6f0899a0694f506d54756aaf51fe1a3787b8", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/245ebc7210f99528d65e4b46f012dbde2a2f299f/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245ebc7210f99528d65e4b46f012dbde2a2f299f/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=245ebc7210f99528d65e4b46f012dbde2a2f299f", "patch": "@@ -1,5 +1,4 @@\n use crate::dep_graph::SerializedDepNodeIndex;\n-use crate::mir;\n use crate::mir::interpret::{GlobalId, LitToConstInput};\n use crate::traits;\n use crate::traits::query::{\n@@ -553,13 +552,6 @@ rustc_queries! {\n             }\n         }\n \n-        /// Extracts a field of a (variant of a) const.\n-        query const_field(\n-            key: ty::ParamEnvAnd<'tcx, (&'tcx ty::Const<'tcx>, mir::Field)>\n-        ) -> ConstValue<'tcx> {\n-            desc { \"extract field of const\" }\n-        }\n-\n         /// Destructure a constant ADT or array into its variant index and its\n         /// field values.\n         query destructure_const("}, {"sha": "695e0741e35989fa35269270871ea830891e7a80", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/245ebc7210f99528d65e4b46f012dbde2a2f299f/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245ebc7210f99528d65e4b46f012dbde2a2f299f/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=245ebc7210f99528d65e4b46f012dbde2a2f299f", "patch": "@@ -122,7 +122,7 @@ pub(super) fn op_to_const<'tcx>(\n     } else {\n         // It is guaranteed that any non-slice scalar pair is actually ByRef here.\n         // When we come back from raw const eval, we are always by-ref. The only way our op here is\n-        // by-val is if we are in const_field, i.e., if this is (a field of) something that we\n+        // by-val is if we are in destructure_const, i.e., if this is (a field of) something that we\n         // \"tried to make immediate\" before. We wouldn't do that for non-slice scalar pairs or\n         // structs containing such.\n         op.try_as_mplace(ecx)"}, {"sha": "3539ccf5de038299aa83a349ec41de59265b50b7", "filename": "src/librustc_mir/const_eval/mod.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/245ebc7210f99528d65e4b46f012dbde2a2f299f/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245ebc7210f99528d65e4b46f012dbde2a2f299f/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs?ref=245ebc7210f99528d65e4b46f012dbde2a2f299f", "patch": "@@ -5,7 +5,6 @@ use std::convert::TryFrom;\n use rustc_middle::mir;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::{source_map::DUMMY_SP, symbol::Symbol};\n-use rustc_target::abi::VariantIdx;\n \n use crate::interpret::{intern_const_alloc_recursive, ConstValue, InternKind, InterpCx};\n \n@@ -19,32 +18,6 @@ pub use eval_queries::*;\n pub use fn_queries::*;\n pub use machine::*;\n \n-/// Extracts a field of a (variant of a) const.\n-// this function uses `unwrap` copiously, because an already validated constant must have valid\n-// fields and can thus never fail outside of compiler bugs\n-pub(crate) fn const_field<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-    variant: Option<VariantIdx>,\n-    field: mir::Field,\n-    value: &'tcx ty::Const<'tcx>,\n-) -> ConstValue<'tcx> {\n-    trace!(\"const_field: {:?}, {:?}\", field, value);\n-    let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env, false);\n-    // get the operand again\n-    let op = ecx.eval_const_to_op(value, None).unwrap();\n-    // downcast\n-    let down = match variant {\n-        None => op,\n-        Some(variant) => ecx.operand_downcast(op, variant).unwrap(),\n-    };\n-    // then project\n-    let field = ecx.operand_field(down, field.index()).unwrap();\n-    // and finally move back to the const world, always normalizing because\n-    // this is not called for statics.\n-    op_to_const(&ecx, field)\n-}\n-\n pub(crate) fn const_caller_location(\n     tcx: TyCtxt<'tcx>,\n     (file, line, col): (Symbol, u32, u32),"}, {"sha": "928d5bf88f2fcbaa44880d4de197830647e7a522", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/245ebc7210f99528d65e4b46f012dbde2a2f299f/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245ebc7210f99528d65e4b46f012dbde2a2f299f/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=245ebc7210f99528d65e4b46f012dbde2a2f299f", "patch": "@@ -56,10 +56,6 @@ pub fn provide(providers: &mut Providers<'_>) {\n     providers.const_eval_validated = const_eval::const_eval_validated_provider;\n     providers.const_eval_raw = const_eval::const_eval_raw_provider;\n     providers.const_caller_location = const_eval::const_caller_location;\n-    providers.const_field = |tcx, param_env_and_value| {\n-        let (param_env, (value, field)) = param_env_and_value.into_parts();\n-        const_eval::const_field(tcx, param_env, None, field, value)\n-    };\n     providers.destructure_const = |tcx, param_env_and_value| {\n         let (param_env, value) = param_env_and_value.into_parts();\n         const_eval::destructure_const(tcx, param_env, value)"}]}