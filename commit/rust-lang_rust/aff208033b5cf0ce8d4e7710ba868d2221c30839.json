{"sha": "aff208033b5cf0ce8d4e7710ba868d2221c30839", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZjIwODAzM2I1Y2YwY2U4ZDRlNzcxMGJhODY4ZDIyMjFjMzA4Mzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-12T09:50:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-12T09:50:13Z"}, "message": "Auto merge of #26985 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #26881, #26967, #26973, #26974, #26976, #26979\n- Failed merges:", "tree": {"sha": "66046b5a2250caaa1384c176a2ff12fd0816e148", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66046b5a2250caaa1384c176a2ff12fd0816e148"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aff208033b5cf0ce8d4e7710ba868d2221c30839", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aff208033b5cf0ce8d4e7710ba868d2221c30839", "html_url": "https://github.com/rust-lang/rust/commit/aff208033b5cf0ce8d4e7710ba868d2221c30839", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aff208033b5cf0ce8d4e7710ba868d2221c30839/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88c1105fc7cadf3c4cbaf4fa700e00c3850be5d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/88c1105fc7cadf3c4cbaf4fa700e00c3850be5d7", "html_url": "https://github.com/rust-lang/rust/commit/88c1105fc7cadf3c4cbaf4fa700e00c3850be5d7"}, {"sha": "aad7cb8339964a70fa2d52ce4ab1378f0835a7ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/aad7cb8339964a70fa2d52ce4ab1378f0835a7ef", "html_url": "https://github.com/rust-lang/rust/commit/aad7cb8339964a70fa2d52ce4ab1378f0835a7ef"}], "stats": {"total": 133, "additions": 66, "deletions": 67}, "files": [{"sha": "9ccba7ad78d45a785278ab64b02e34300812ae23", "filename": "src/libcore/option.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/aff208033b5cf0ce8d4e7710ba868d2221c30839/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff208033b5cf0ce8d4e7710ba868d2221c30839/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=aff208033b5cf0ce8d4e7710ba868d2221c30839", "patch": "@@ -46,7 +46,7 @@\n //!     // The division was valid\n //!     Some(x) => println!(\"Result: {}\", x),\n //!     // The division was invalid\n-//!     None    => println!(\"Cannot divide by 0\")\n+//!     None    => println!(\"Cannot divide by 0\"),\n //! }\n //! ```\n //!\n@@ -75,7 +75,7 @@\n //! fn check_optional(optional: &Option<Box<i32>>) {\n //!     match *optional {\n //!         Some(ref p) => println!(\"have value {}\", p),\n-//!         None => println!(\"have no value\")\n+//!         None => println!(\"have no value\"),\n //!     }\n //! }\n //! ```\n@@ -95,13 +95,13 @@\n //! // Take a reference to the contained string\n //! match msg {\n //!     Some(ref m) => println!(\"{}\", *m),\n-//!     None => ()\n+//!     None => (),\n //! }\n //!\n //! // Remove the contained string, destroying the Option\n //! let unwrapped_msg = match msg {\n //!     Some(m) => m,\n-//!     None => \"default message\"\n+//!     None => \"default message\",\n //! };\n //! ```\n //!\n@@ -137,7 +137,7 @@\n //!\n //! match name_of_biggest_animal {\n //!     Some(name) => println!(\"the biggest animal is {}\", name),\n-//!     None => println!(\"there are no animals :(\")\n+//!     None => println!(\"there are no animals :(\"),\n //! }\n //! ```\n \n@@ -198,7 +198,7 @@ impl<T> Option<T> {\n     pub fn is_some(&self) -> bool {\n         match *self {\n             Some(_) => true,\n-            None => false\n+            None => false,\n         }\n     }\n \n@@ -244,7 +244,7 @@ impl<T> Option<T> {\n     pub fn as_ref<'r>(&'r self) -> Option<&'r T> {\n         match *self {\n             Some(ref x) => Some(x),\n-            None => None\n+            None => None,\n         }\n     }\n \n@@ -265,7 +265,7 @@ impl<T> Option<T> {\n     pub fn as_mut<'r>(&'r mut self) -> Option<&'r mut T> {\n         match *self {\n             Some(ref mut x) => Some(x),\n-            None => None\n+            None => None,\n         }\n     }\n \n@@ -376,7 +376,7 @@ impl<T> Option<T> {\n     pub fn unwrap_or(self, def: T) -> T {\n         match self {\n             Some(x) => x,\n-            None => def\n+            None => def,\n         }\n     }\n \n@@ -394,7 +394,7 @@ impl<T> Option<T> {\n     pub fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n         match self {\n             Some(x) => x,\n-            None => f()\n+            None => f(),\n         }\n     }\n \n@@ -420,7 +420,7 @@ impl<T> Option<T> {\n     pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {\n         match self {\n             Some(x) => Some(f(x)),\n-            None => None\n+            None => None,\n         }\n     }\n \n@@ -464,7 +464,7 @@ impl<T> Option<T> {\n     pub fn map_or_else<U, D: FnOnce() -> U, F: FnOnce(T) -> U>(self, default: D, f: F) -> U {\n         match self {\n             Some(t) => f(t),\n-            None => default()\n+            None => default(),\n         }\n     }\n \n@@ -637,7 +637,7 @@ impl<T> Option<T> {\n     pub fn or(self, optb: Option<T>) -> Option<T> {\n         match self {\n             Some(_) => self,\n-            None => optb\n+            None => optb,\n         }\n     }\n \n@@ -659,7 +659,7 @@ impl<T> Option<T> {\n     pub fn or_else<F: FnOnce() -> Option<T>>(self, f: F) -> Option<T> {\n         match self {\n             Some(_) => self,\n-            None => f()\n+            None => f(),\n         }\n     }\n \n@@ -736,7 +736,7 @@ impl<T: Default> Option<T> {\n     pub fn unwrap_or_default(self) -> T {\n         match self {\n             Some(x) => x,\n-            None => Default::default()\n+            None => Default::default(),\n         }\n     }\n }"}, {"sha": "9aa5daa3a0a275aae3742183ac4f3aa69fe1a68e", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aff208033b5cf0ce8d4e7710ba868d2221c30839/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff208033b5cf0ce8d4e7710ba868d2221c30839/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=aff208033b5cf0ce8d4e7710ba868d2221c30839", "patch": "@@ -791,8 +791,7 @@ trait Foo {\n     fn bar(&self);\n }\n \n-// we now declare a function which takes an object with Foo trait implemented\n-// as parameter\n+// we now declare a function which takes an object implementing the Foo trait\n fn some_func<T: Foo>(foo: T) {\n     foo.bar();\n }\n@@ -1006,7 +1005,7 @@ a compile-time constant.\n \n E0308: r##\"\n This error occurs when the compiler was unable to infer the concrete type of a\n-variable. This error can occur for several cases, the most common of which is a\n+variable. It can occur for several cases, the most common of which is a\n mismatch in the expected type that the compiler inferred for a variable's\n initializing expression, and the actual type explicitly assigned to the\n variable."}, {"sha": "c77cdd4d021837b645f868253783c939cb5893a9", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 48, "deletions": 44, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/aff208033b5cf0ce8d4e7710ba868d2221c30839/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/aff208033b5cf0ce8d4e7710ba868d2221c30839/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=aff208033b5cf0ce8d4e7710ba868d2221c30839", "patch": "@@ -76,62 +76,65 @@\n     highlightSourceLines(null);\n     $(window).on('hashchange', highlightSourceLines);\n \n-    // Helper function for Keyboard events,\n-    // Get's the char from the keypress event\n+    // Gets the human-readable string for the virtual-key code of the\n+    // given KeyboardEvent, ev.\n     //\n-    // This method is used because e.wich === x is not\n-    // compatible with non-english keyboard layouts\n+    // This function is meant as a polyfill for KeyboardEvent#key,\n+    // since it is not supported in Trident.  We also test for\n+    // KeyboardEvent#keyCode because the handleShortcut handler is\n+    // also registered for the keydown event, because Blink doesn't fire\n+    // keypress on hitting the Escape key.\n     //\n-    // Note: event.type must be keypress !\n-    function getChar(event) {\n-      if (event.which == null) {\n-        return String.fromCharCode(event.keyCode) // IE\n-      } else if (event.which!=0 && event.charCode!=0) {\n-        return String.fromCharCode(event.which)   // the rest\n-      } else {\n-        return null // special key\n-      }\n+    // So I guess you could say things are getting pretty interoperable.\n+    function getVirtualKey(ev) {\n+        if (\"key\" in ev && typeof ev.key != \"undefined\")\n+            return ev.key;\n+\n+        var c = ev.charCode || ev.keyCode;\n+        if (c == 27)\n+            return \"Escape\";\n+        return String.fromCharCode(c);\n     }\n \n-    $(document).on('keypress', function handleKeyboardShortcut(e) {\n-        if (document.activeElement.tagName === 'INPUT') {\n+    function handleShortcut(ev) {\n+        if (document.activeElement.tagName == \"INPUT\")\n             return;\n-        }\n \n-        if (getChar(e) === '?') {\n-            if (e.shiftKey && $('#help').hasClass('hidden')) {\n-                e.preventDefault();\n-                $('#help').removeClass('hidden');\n+        switch (getVirtualKey(ev)) {\n+        case \"Escape\":\n+            if (!$(\"#help\").hasClass(\"hidden\")) {\n+                ev.preventDefault();\n+                $(\"#help\").addClass(\"hidden\");\n+            } else if (!$(\"#search\").hasClass(\"hidden\")) {\n+                ev.preventDefault();\n+                $(\"#search\").addClass(\"hidden\");\n+                $(\"#main\").removeClass(\"hidden\");\n             }\n-        } else if (getChar(e) === 's' || getChar(e) === 'S') {\n-            e.preventDefault();\n-            $('.search-input').focus();\n-        }\n-    }).on('keydown', function(e) {\n-        // The escape key event has to be captured with the keydown event.\n-        // Because keypressed has no keycode for the escape key\n-        // (and other special keys in general)...\n-        if (document.activeElement.tagName === 'INPUT') {\n-            return;\n-        }\n-\n-        if (e.keyCode === 27) { // escape key\n-            if (!$('#help').hasClass('hidden')) {\n-                e.preventDefault();\n-                $('#help').addClass('hidden');\n-            } else if (!$('#search').hasClass('hidden')) {\n-                e.preventDefault();\n-                $('#search').addClass('hidden');\n-                $('#main').removeClass('hidden');\n+            break;\n+\n+        case \"s\":\n+        case \"S\":\n+            ev.preventDefault();\n+            $(\".search-input\").focus();\n+            break;\n+\n+        case \"?\":\n+            if (ev.shiftKey && $(\"#help\").hasClass(\"hidden\")) {\n+                ev.preventDefault();\n+                $(\"#help\").removeClass(\"hidden\");\n             }\n+            break;\n         }\n-    }).on('click', function(e) {\n-        if (!$(e.target).closest('#help').length) {\n-            $('#help').addClass('hidden');\n+    }\n+\n+    $(document).on(\"keypress\", handleShortcut);\n+    $(document).on(\"keydown\", handleShortcut);\n+    $(document).on(\"click\", function(ev) {\n+        if (!$(ev.target).closest(\"#help\").length) {\n+            $(\"#help\").addClass(\"hidden\");\n         }\n     });\n \n-\n     $('.version-selector').on('change', function() {\n         var i, match,\n             url = document.location.href,\n@@ -150,6 +153,7 @@\n \n         document.location.href = url;\n     });\n+\n     /**\n      * A function to compute the Levenshtein distance between two strings\n      * Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported"}, {"sha": "ef8bdf5e2ce9738146d429b227f1c8a5b817777d", "filename": "src/librustdoc/html/static/playpen.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aff208033b5cf0ce8d4e7710ba868d2221c30839/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fplaypen.js", "raw_url": "https://github.com/rust-lang/rust/raw/aff208033b5cf0ce8d4e7710ba868d2221c30839/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fplaypen.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fplaypen.js?ref=aff208033b5cf0ce8d4e7710ba868d2221c30839", "patch": "@@ -17,7 +17,7 @@ document.addEventListener('DOMContentLoaded', function() {\n     }\n \n     var featureRegexp = new RegExp('^\\s*#!\\\\[feature\\\\(\\.*?\\\\)\\\\]');\n-    var elements = document.querySelectorAll('pre.rust');\n+    var elements = document.querySelectorAll('pre.rust-example-rendered');\n \n     Array.prototype.forEach.call(elements, function(el) {\n         el.onmouseover = function(e) {"}, {"sha": "db5c1da8a42274af24c1560bfa8e17b2b20696f9", "filename": "src/libstd/io/prelude.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aff208033b5cf0ce8d4e7710ba868d2221c30839/src%2Flibstd%2Fio%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff208033b5cf0ce8d4e7710ba868d2221c30839/src%2Flibstd%2Fio%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprelude.rs?ref=aff208033b5cf0ce8d4e7710ba868d2221c30839", "patch": "@@ -17,10 +17,6 @@\n //! # #![allow(unused_imports)]\n //! use std::io::prelude::*;\n //! ```\n-//!\n-//! This module contains reexports of many core I/O traits such as `Read`,\n-//! `Write` and `BufRead`. Structures and functions are not\n-//! contained in this module.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}]}