{"sha": "f742803c6a5a632af6e0aecb123920d1962e5fee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NDI4MDNjNmE1YTYzMmFmNmUwYWVjYjEyMzkyMGQxOTYyZTVmZWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-11T16:21:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-11T16:21:55Z"}, "message": "Merge #2213\n\n2213: Hir generic param r=flodiebold a=matklad\n\nr? @flodiebold \r\n\r\nThis should make the life of IDE easier: before, it got `GenericParam(u32)` which was of questionable utility. Now, it's a proper code_model type, so it can gain `source`, `name`, `module` and all the other hir methods, should the IDE need them. Moreover, IDE now doesn't care about internal representation of generic param, which seems like a long-term win. \r\n\r\nThe problem is, of course, that we now have to types named `GenericParam` in hir: this code_model type, and an internal type with an index which doesn't know about the parent. I think it's fine for the time being, but, after we finish cratefication of hir, this local `GenericParam` should move to `hir_def` or `hir_ty`, and *maybe* restrucured as `ParamId / PramData` pair. \n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "1b0f7c7b0f430d4174ca05e5464b3af98128bafe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b0f7c7b0f430d4174ca05e5464b3af98128bafe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f742803c6a5a632af6e0aecb123920d1962e5fee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdyYqjCRBK7hj4Ov3rIwAAdHIIAHONgY7J2PbJXuoAGoxj28wn\nj8DEpr/rM6qRRNXdbUxNUTEn1lUUNCmf55OiwMKoGkYfvOTC6wyDbtp/p/9iv+7s\nrippy53+X3llXcSctLMQ13q5UsIR1cTK+1l/Q476KjKc9FOzfJ9SlEWK1aVQQQfQ\nXWkh+BlPOl/B+4bTjXMXXAa77ao84yA2XiHpGZbvXfmA1blfPMjUbiF2NY8OINGj\nxCja1jplIBD4JEs83H2J2FQH3IRlxzBUWAeL4t2bQhRP8iXmtSqHzgMvdM6ep21l\nkdzJa3vt9k3GraAb6n7CQefb9LVdV01O/ni1hFXfPPJpowuh1YmO7FiystKYc9I=\n=i7sO\n-----END PGP SIGNATURE-----\n", "payload": "tree 1b0f7c7b0f430d4174ca05e5464b3af98128bafe\nparent a599147b4232c0d4f6b071a3a96e86f903f4cf52\nparent c5a18c44e5211282c22b9ca7aae8700ee8ca1817\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1573489315 +0000\ncommitter GitHub <noreply@github.com> 1573489315 +0000\n\nMerge #2213\n\n2213: Hir generic param r=flodiebold a=matklad\n\nr? @flodiebold \r\n\r\nThis should make the life of IDE easier: before, it got `GenericParam(u32)` which was of questionable utility. Now, it's a proper code_model type, so it can gain `source`, `name`, `module` and all the other hir methods, should the IDE need them. Moreover, IDE now doesn't care about internal representation of generic param, which seems like a long-term win. \r\n\r\nThe problem is, of course, that we now have to types named `GenericParam` in hir: this code_model type, and an internal type with an index which doesn't know about the parent. I think it's fine for the time being, but, after we finish cratefication of hir, this local `GenericParam` should move to `hir_def` or `hir_ty`, and *maybe* restrucured as `ParamId / PramData` pair. \n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f742803c6a5a632af6e0aecb123920d1962e5fee", "html_url": "https://github.com/rust-lang/rust/commit/f742803c6a5a632af6e0aecb123920d1962e5fee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f742803c6a5a632af6e0aecb123920d1962e5fee/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a599147b4232c0d4f6b071a3a96e86f903f4cf52", "url": "https://api.github.com/repos/rust-lang/rust/commits/a599147b4232c0d4f6b071a3a96e86f903f4cf52", "html_url": "https://github.com/rust-lang/rust/commit/a599147b4232c0d4f6b071a3a96e86f903f4cf52"}, {"sha": "c5a18c44e5211282c22b9ca7aae8700ee8ca1817", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5a18c44e5211282c22b9ca7aae8700ee8ca1817", "html_url": "https://github.com/rust-lang/rust/commit/c5a18c44e5211282c22b9ca7aae8700ee8ca1817"}], "stats": {"total": 53, "additions": 32, "deletions": 21}, "files": [{"sha": "5a0bd0c192e886073816b3862ee7e45d73540a24", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f742803c6a5a632af6e0aecb123920d1962e5fee/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f742803c6a5a632af6e0aecb123920d1962e5fee/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=f742803c6a5a632af6e0aecb123920d1962e5fee", "patch": "@@ -23,7 +23,7 @@ use crate::{\n     adt::VariantDef,\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     expr::{validation::ExprValidator, BindingAnnotation, Body, BodySourceMap, Pat, PatId},\n-    generics::HasGenericParams,\n+    generics::{GenericDef, HasGenericParams},\n     ids::{\n         AstItemDef, ConstId, EnumId, FunctionId, MacroDefId, StaticId, StructId, TraitId,\n         TypeAliasId,\n@@ -1121,3 +1121,9 @@ impl Local {\n         src.map(|ast| ast.map(|it| it.cast().unwrap().to_node(&root), |it| it.to_node(&root)))\n     }\n }\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub struct GenericParam {\n+    pub(crate) parent: GenericDef,\n+    pub(crate) idx: u32,\n+}"}, {"sha": "92d71b9e88f9fe505be5153bd943108ed4ea5e08", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f742803c6a5a632af6e0aecb123920d1962e5fee/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f742803c6a5a632af6e0aecb123920d1962e5fee/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=f742803c6a5a632af6e0aecb123920d1962e5fee", "patch": "@@ -39,7 +39,7 @@ mod ty;\n mod impl_block;\n mod expr;\n mod lang_item;\n-mod generics;\n+pub mod generics;\n mod resolve;\n pub mod diagnostics;\n mod util;\n@@ -65,12 +65,12 @@ pub use crate::{\n         docs::{DocDef, Docs, Documentation},\n         src::{HasBodySource, HasSource},\n         Adt, AssocItem, Const, ConstData, Container, Crate, CrateDependency, DefWithBody, Enum,\n-        EnumVariant, FieldSource, FnData, Function, HasBody, Local, MacroDef, Module, ModuleDef,\n-        ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n+        EnumVariant, FieldSource, FnData, Function, GenericParam, HasBody, Local, MacroDef, Module,\n+        ModuleDef, ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n     },\n     expr::ExprScopes,\n     from_source::FromSource,\n-    generics::{GenericDef, GenericParam, GenericParams, HasGenericParams},\n+    generics::GenericDef,\n     ids::{HirFileId, MacroCallId, MacroCallLoc, MacroDefId, MacroFile},\n     impl_block::ImplBlock,\n     resolve::ScopeDef,"}, {"sha": "fe4211819edf4b912106d66af32cec1280c497c8", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f742803c6a5a632af6e0aecb123920d1962e5fee/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f742803c6a5a632af6e0aecb123920d1962e5fee/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=f742803c6a5a632af6e0aecb123920d1962e5fee", "patch": "@@ -28,8 +28,8 @@ use crate::{\n     ids::LocationCtx,\n     resolve::{ScopeDef, TypeNs, ValueNs},\n     ty::method_resolution::{self, implements_trait},\n-    AssocItem, Const, DefWithBody, Either, Enum, FromSource, Function, HasBody, HirFileId, Local,\n-    MacroDef, Module, Name, Path, Resolver, Static, Struct, Ty,\n+    AssocItem, Const, DefWithBody, Either, Enum, FromSource, Function, GenericParam, HasBody,\n+    HirFileId, Local, MacroDef, Module, Name, Path, Resolver, Static, Struct, Ty,\n };\n \n fn try_get_resolver_for_node(\n@@ -107,7 +107,7 @@ pub enum PathResolution {\n     /// A local binding (only value namespace)\n     Local(Local),\n     /// A generic parameter\n-    GenericParam(u32),\n+    GenericParam(GenericParam),\n     SelfType(crate::ImplBlock),\n     Macro(MacroDef),\n     AssocItem(crate::AssocItem),\n@@ -227,7 +227,10 @@ impl SourceAnalyzer {\n     ) -> Option<PathResolution> {\n         let types = self.resolver.resolve_path_in_type_ns_fully(db, &path).map(|ty| match ty {\n             TypeNs::SelfType(it) => PathResolution::SelfType(it),\n-            TypeNs::GenericParam(it) => PathResolution::GenericParam(it),\n+            TypeNs::GenericParam(idx) => PathResolution::GenericParam(GenericParam {\n+                parent: self.resolver.generic_def().unwrap(),\n+                idx,\n+            }),\n             TypeNs::AdtSelfType(it) | TypeNs::Adt(it) => PathResolution::Def(it.into()),\n             TypeNs::EnumVariant(it) => PathResolution::Def(it.into()),\n             TypeNs::TypeAlias(it) => PathResolution::Def(it.into()),"}, {"sha": "6f24cfad602fd9db0ccade8eed3dc3020cb25ea8", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f742803c6a5a632af6e0aecb123920d1962e5fee/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f742803c6a5a632af6e0aecb123920d1962e5fee/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=f742803c6a5a632af6e0aecb123920d1962e5fee", "patch": "@@ -17,8 +17,11 @@ use std::sync::Arc;\n use std::{fmt, iter, mem};\n \n use crate::{\n-    db::HirDatabase, expr::ExprId, util::make_mut_slice, Adt, Crate, DefWithBody, GenericParams,\n-    HasGenericParams, Mutability, Name, Trait, TypeAlias,\n+    db::HirDatabase,\n+    expr::ExprId,\n+    generics::{GenericParams, HasGenericParams},\n+    util::make_mut_slice,\n+    Adt, Crate, DefWithBody, Mutability, Name, Trait, TypeAlias,\n };\n use display::{HirDisplay, HirFormatter};\n \n@@ -342,10 +345,7 @@ impl Substs {\n         )\n     }\n \n-    pub fn build_for_def(\n-        db: &impl HirDatabase,\n-        def: impl crate::HasGenericParams,\n-    ) -> SubstsBuilder {\n+    pub fn build_for_def(db: &impl HirDatabase, def: impl HasGenericParams) -> SubstsBuilder {\n         let params = def.generic_params(db);\n         let param_count = params.count_params_including_parent();\n         Substs::builder(param_count)"}, {"sha": "872a4517d1369ce44c548685d71934917df7be04", "filename": "crates/ra_hir/src/ty/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f742803c6a5a632af6e0aecb123920d1962e5fee/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f742803c6a5a632af6e0aecb123920d1962e5fee/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs?ref=f742803c6a5a632af6e0aecb123920d1962e5fee", "patch": "@@ -9,7 +9,7 @@ use hir_expand::name;\n use log::{info, warn};\n \n use super::{traits::Solution, Canonical, Substs, Ty, TypeWalk};\n-use crate::{db::HirDatabase, HasGenericParams, Resolver};\n+use crate::{db::HirDatabase, generics::HasGenericParams, Resolver};\n \n const AUTODEREF_RECURSION_LIMIT: usize = 10;\n "}, {"sha": "31ca675aac03d8318e0118ee841bf36d0e99401e", "filename": "crates/ra_hir/src/ty/infer/path.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f742803c6a5a632af6e0aecb123920d1962e5fee/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f742803c6a5a632af6e0aecb123920d1962e5fee/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs?ref=f742803c6a5a632af6e0aecb123920d1962e5fee", "patch": "@@ -5,9 +5,10 @@ use hir_def::path::PathSegment;\n use super::{ExprOrPatId, InferenceContext, TraitRef};\n use crate::{\n     db::HirDatabase,\n+    generics::HasGenericParams,\n     resolve::{ResolveValueResult, Resolver, TypeNs, ValueNs},\n     ty::{method_resolution, Namespace, Substs, Ty, TypableDef, TypeWalk},\n-    AssocItem, Container, HasGenericParams, Name, Path,\n+    AssocItem, Container, Name, Path,\n };\n \n impl<'a, D: HirDatabase> InferenceContext<'a, D> {"}, {"sha": "14c54b9fb4811d8d3360aeabc8de1378c5e62a09", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f742803c6a5a632af6e0aecb123920d1962e5fee/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f742803c6a5a632af6e0aecb123920d1962e5fee/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=f742803c6a5a632af6e0aecb123920d1962e5fee", "patch": "@@ -16,13 +16,13 @@ use ra_db::salsa::{InternId, InternKey};\n use super::{Canonical, ChalkContext, Impl, Obligation};\n use crate::{\n     db::HirDatabase,\n-    generics::GenericDef,\n+    generics::{GenericDef, HasGenericParams},\n     ty::display::HirDisplay,\n     ty::{\n         ApplicationTy, GenericPredicate, Namespace, ProjectionTy, Substs, TraitRef, Ty, TypeCtor,\n         TypeWalk,\n     },\n-    AssocItem, Crate, HasGenericParams, ImplBlock, Trait, TypeAlias,\n+    AssocItem, Crate, ImplBlock, Trait, TypeAlias,\n };\n \n /// This represents a trait whose name we could not resolve."}, {"sha": "ccd75278ae857b4fb59c58920714cf15db1c02e4", "filename": "crates/ra_ide_api/src/references/name_definition.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f742803c6a5a632af6e0aecb123920d1962e5fee/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fname_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f742803c6a5a632af6e0aecb123920d1962e5fee/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fname_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fname_definition.rs?ref=f742803c6a5a632af6e0aecb123920d1962e5fee", "patch": "@@ -4,7 +4,8 @@\n //! Note that the reference search is possible for not all of the classified items.\n \n use hir::{\n-    Adt, AssocItem, HasSource, Local, MacroDef, Module, ModuleDef, StructField, Ty, VariantDef,\n+    Adt, AssocItem, GenericParam, HasSource, Local, MacroDef, Module, ModuleDef, StructField, Ty,\n+    VariantDef,\n };\n use ra_syntax::{ast, ast::VisibilityOwner};\n \n@@ -18,7 +19,7 @@ pub enum NameKind {\n     Def(ModuleDef),\n     SelfType(Ty),\n     Local(Local),\n-    GenericParam(u32),\n+    GenericParam(GenericParam),\n }\n \n #[derive(PartialEq, Eq)]"}]}