{"sha": "43d7d7c15e964c1cb506cbce90bb4b32b57281b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZDdkN2MxNWU5NjRjMWNiNTA2Y2JjZTkwYmI0YjMyYjU3MjgxYjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-27T01:37:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-27T01:37:53Z"}, "message": "auto merge of #17506 : sfackler/rust/cfg-attr, r=alexcrichton\n\ncc #17490 \r\n\r\nReopening of #16230", "tree": {"sha": "ce3d1c405d06461fb8de8ba58b7f62440be5d199", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce3d1c405d06461fb8de8ba58b7f62440be5d199"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43d7d7c15e964c1cb506cbce90bb4b32b57281b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43d7d7c15e964c1cb506cbce90bb4b32b57281b8", "html_url": "https://github.com/rust-lang/rust/commit/43d7d7c15e964c1cb506cbce90bb4b32b57281b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d64b4103d688f38c2e9e2daf966d50beeb383f1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d64b4103d688f38c2e9e2daf966d50beeb383f1e", "html_url": "https://github.com/rust-lang/rust/commit/d64b4103d688f38c2e9e2daf966d50beeb383f1e"}, {"sha": "dcdbdc10036b444ef39c329e9440d4acc6975fda", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcdbdc10036b444ef39c329e9440d4acc6975fda", "html_url": "https://github.com/rust-lang/rust/commit/dcdbdc10036b444ef39c329e9440d4acc6975fda"}], "stats": {"total": 163, "additions": 143, "deletions": 20}, "files": [{"sha": "07813855d9b9bb1e95a61bd7301f84c14c3927aa", "filename": "src/doc/guide-testing.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Fdoc%2Fguide-testing.md", "raw_url": "https://github.com/rust-lang/rust/raw/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Fdoc%2Fguide-testing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-testing.md?ref=43d7d7c15e964c1cb506cbce90bb4b32b57281b8", "patch": "@@ -72,8 +72,8 @@ is not used.\n Tests that should not be run can be annotated with the `ignore`\n attribute. The existence of these tests will be noted in the test\n runner output, but the test will not be run. Tests can also be ignored\n-by configuration so, for example, to ignore a test on windows you can\n-write `#[ignore(cfg(target_os = \"win32\"))]`.\n+by configuration using the `cfg_attr` attribute so, for example, to ignore a\n+test on windows you can write `#[cfg_attr(windows, ignore)]`.\n \n Tests that are intended to fail can be annotated with the\n `should_fail` attribute. The test will be run, and if it causes its"}, {"sha": "1688b009ad7fb3b063951840af8c22facb44de0f", "filename": "src/libnative/io/file_unix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibnative%2Fio%2Ffile_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibnative%2Fio%2Ffile_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_unix.rs?ref=43d7d7c15e964c1cb506cbce90bb4b32b57281b8", "patch": "@@ -506,7 +506,7 @@ mod tests {\n     use std::os;\n     use std::rt::rtio::{RtioFileStream, SeekSet};\n \n-    #[ignore(cfg(target_os = \"freebsd\"))] // hmm, maybe pipes have a tiny buffer\n+    #[cfg_attr(target_os = \"freebsd\", ignore)] // hmm, maybe pipes have a tiny buffer\n     #[test]\n     fn test_file_desc() {\n         // Run this test with some pipes so we don't have to mess around with"}, {"sha": "0e70527cdca7965cc827e4e2fa368b7cc492dbc0", "filename": "src/libnum/complex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibnum%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibnum%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fcomplex.rs?ref=43d7d7c15e964c1cb506cbce90bb4b32b57281b8", "patch": "@@ -219,7 +219,7 @@ mod test {\n     }\n \n     #[test]\n-    #[ignore(cfg(target_arch = \"x86\"))]\n+    #[cfg_attr(target_arch = \"x86\", ignore)]\n     // FIXME #7158: (maybe?) currently failing on x86.\n     fn test_norm() {\n         fn test(c: Complex64, ns: f64) {"}, {"sha": "3531d162db08115968eae31dde7f78cdd2c946cf", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=43d7d7c15e964c1cb506cbce90bb4b32b57281b8", "patch": "@@ -1085,7 +1085,7 @@ mod test {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))] // FIXME(#10102) server never sees second packet\n+    #[cfg_attr(windows, ignore)] // FIXME(#10102) server never sees second packet\n     fn test_udp_twice() {\n         let server_addr = ::next_test_ip4();\n         let client_addr = ::next_test_ip4();"}, {"sha": "b936dde6fe4bea32ccb4b78347041eb12e4c2388", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=43d7d7c15e964c1cb506cbce90bb4b32b57281b8", "patch": "@@ -3352,7 +3352,7 @@ mod tests {\n         }\n     }\n     #[test]\n-    #[ignore(cfg(target_word_size = \"32\"))] // FIXME(#14064)\n+    #[cfg_attr(target_word_size = \"32\", ignore)] // FIXME(#14064)\n     fn test_streaming_parser() {\n         assert_stream_equal(\n             r#\"{ \"foo\":\"bar\", \"array\" : [0, 1, 2, 3, 4, 5], \"idents\":[null,true,false]}\"#,\n@@ -3388,7 +3388,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(cfg(target_word_size = \"32\"))] // FIXME(#14064)\n+    #[cfg_attr(target_word_size = \"32\", ignore)] // FIXME(#14064)\n     fn test_read_object_streaming() {\n         assert_eq!(last_event(\"{ \"),      Error(SyntaxError(EOFWhileParsingObject, 1, 3)));\n         assert_eq!(last_event(\"{1\"),      Error(SyntaxError(KeyMustBeAString,      1, 2)));\n@@ -3461,7 +3461,7 @@ mod tests {\n         );\n     }\n     #[test]\n-    #[ignore(cfg(target_word_size = \"32\"))] // FIXME(#14064)\n+    #[cfg_attr(target_word_size = \"32\", ignore)] // FIXME(#14064)\n     fn test_read_list_streaming() {\n         assert_stream_equal(\n             \"[]\","}, {"sha": "a88448f47e0c6e9c62f3bfdc1e783242cba51ca4", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=43d7d7c15e964c1cb506cbce90bb4b32b57281b8", "patch": "@@ -162,8 +162,7 @@ mod test {\n     use mem;\n \n     #[test]\n-    #[ignore(cfg(windows))] // FIXME #8818\n-    #[ignore(cfg(target_os=\"android\"))] // FIXME(#10379)\n+    #[cfg_attr(any(windows, target_os = \"android\"), ignore)] // FIXME #8818, #10379\n     fn test_loading_cosine() {\n         // The math library does not need to be loaded since it is already\n         // statically linked in"}, {"sha": "a7ce18c40ef19be93c1aa19632bcbdb07d2addba", "filename": "src/libstd/io/net/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs?ref=43d7d7c15e964c1cb506cbce90bb4b32b57281b8", "patch": "@@ -320,7 +320,7 @@ mod tests {\n         }, proc(_client) {\n             // drop the client\n         })\n-    } #[ignore(cfg(windows))]) // FIXME(#12516)\n+    } #[cfg_attr(windows, ignore)]) // FIXME(#12516)\n \n     iotest!(fn write_begone() {\n         smalltest(proc(mut server) {"}, {"sha": "65d8f1c9c776458c4dbfa98dbd254d31ba4a256f", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=43d7d7c15e964c1cb506cbce90bb4b32b57281b8", "patch": "@@ -533,7 +533,7 @@ mod test {\n             Ok(..) => fail!(),\n             Err(e) => assert_eq!(e.kind, PermissionDenied),\n         }\n-    } #[ignore(cfg(windows))] #[ignore(cfg(target_os = \"android\"))])\n+    } #[cfg_attr(any(windows, target_os = \"android\"), ignore)])\n \n     iotest!(fn connect_error() {\n         match TcpStream::connect(\"0.0.0.0\", 1) {"}, {"sha": "ab61d2a4d916e14b3aa4edf0883593e5125ddf74", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=43d7d7c15e964c1cb506cbce90bb4b32b57281b8", "patch": "@@ -273,7 +273,7 @@ mod test {\n             Ok(..) => fail!(),\n             Err(e) => assert_eq!(e.kind, PermissionDenied),\n         }\n-    } #[ignore(cfg(windows))] #[ignore(cfg(target_os = \"android\"))])\n+    } #[cfg_attr(any(windows, target_os = \"android\"), ignore)])\n \n     iotest!(fn socket_smoke_test_ip4() {\n         let server_ip = next_test_ip4();"}, {"sha": "b2a9f1b7b20d338211899ab8d796d59bd2741d77", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=43d7d7c15e964c1cb506cbce90bb4b32b57281b8", "patch": "@@ -766,7 +766,7 @@ mod tests {\n         assert_eq!((-0f32).frexp(), (-0f32, 0));\n     }\n \n-    #[test] #[ignore(cfg(windows))] // FIXME #8755\n+    #[test] #[cfg_attr(windows, ignore)] // FIXME #8755\n     fn test_frexp_nowin() {\n         let inf: f32 = Float::infinity();\n         let neg_inf: f32 = Float::neg_infinity();"}, {"sha": "6fe9fcad2aad7c177a8db243ad603d967e0ab6a2", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=43d7d7c15e964c1cb506cbce90bb4b32b57281b8", "patch": "@@ -768,7 +768,7 @@ mod tests {\n         assert_eq!((-0f64).frexp(), (-0f64, 0));\n     }\n \n-    #[test] #[ignore(cfg(windows))] // FIXME #8755\n+    #[test] #[cfg_attr(windows, ignore)] // FIXME #8755\n     fn test_frexp_nowin() {\n         let inf: f64 = Float::infinity();\n         let neg_inf: f64 = Float::neg_infinity();"}, {"sha": "15c0c14b28a86d587f75d2c48c9550f2d944237f", "filename": "src/libsync/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibsync%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibsync%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fdeque.rs?ref=43d7d7c15e964c1cb506cbce90bb4b32b57281b8", "patch": "@@ -600,7 +600,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))] // apparently windows scheduling is weird?\n+    #[cfg_attr(windows, ignore)] // apparently windows scheduling is weird?\n     fn no_starvation() {\n         static AMT: int = 10000;\n         static NTHREADS: int = 4;"}, {"sha": "8bf13e20fedf79e6f5b685185a9945b39a99f687", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=43d7d7c15e964c1cb506cbce90bb4b32b57281b8", "patch": "@@ -439,6 +439,8 @@ fn initial_syntax_expander_table() -> SyntaxEnv {\n     syntax_expanders.insert(intern(\"cfg\"),\n                             builtin_normal_expander(\n                                     ext::cfg::expand_cfg));\n+    syntax_expanders.insert(intern(\"cfg_attr\"),\n+                            Modifier(box ext::cfg_attr::expand));\n     syntax_expanders.insert(intern(\"trace_macros\"),\n                             builtin_normal_expander(\n                                     ext::trace_macros::expand_trace_macros));"}, {"sha": "ad02b50f248b4a6f3be98c98e58c6fbb6baf8783", "filename": "src/libsyntax/ext/cfg_attr.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibsyntax%2Fext%2Fcfg_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibsyntax%2Fext%2Fcfg_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fcfg_attr.rs?ref=43d7d7c15e964c1cb506cbce90bb4b32b57281b8", "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use ast;\n+use attr;\n+use codemap::Span;\n+use ext::base::ExtCtxt;\n+use ext::build::AstBuilder;\n+use ptr::P;\n+\n+pub fn expand(cx: &mut ExtCtxt, sp: Span, mi: &ast::MetaItem, it: P<ast::Item>) -> P<ast::Item> {\n+    let (cfg, attr) = match mi.node {\n+        ast::MetaList(_, ref mis) if mis.len() == 2 => (&mis[0], &mis[1]),\n+        _ => {\n+            cx.span_err(sp, \"expected `#[cfg_attr(<cfg pattern>, <attr>)]`\");\n+            return it;\n+        }\n+    };\n+\n+    let mut out = (*it).clone();\n+    if cfg_matches(cx, &**cfg) {\n+        out.attrs.push(cx.attribute(attr.span, attr.clone()));\n+    }\n+\n+    P(out)\n+}\n+\n+fn cfg_matches(cx: &mut ExtCtxt, cfg: &ast::MetaItem) -> bool {\n+    match cfg.node {\n+        ast::MetaList(ref pred, ref mis) if pred.get() == \"any\" =>\n+            mis.iter().any(|mi| cfg_matches(cx, &**mi)),\n+        ast::MetaList(ref pred, ref mis) if pred.get() == \"all\" =>\n+            mis.iter().all(|mi| cfg_matches(cx, &**mi)),\n+        ast::MetaList(ref pred, ref mis) if pred.get() == \"not\" => {\n+            if mis.len() != 1 {\n+                cx.span_err(cfg.span, format!(\"expected 1 value, got {}\",\n+                                              mis.len()).as_slice());\n+                return false;\n+            }\n+            !cfg_matches(cx, &*mis[0])\n+        }\n+        ast::MetaList(ref pred, _) => {\n+            cx.span_err(cfg.span,\n+                        format!(\"invalid predicate `{}`\", pred).as_slice());\n+            false\n+        },\n+        ast::MetaWord(_) | ast::MetaNameValue(..) =>\n+            attr::contains(cx.cfg.as_slice(), cfg),\n+    }\n+}"}, {"sha": "7a504d22c1e9e192a4dce9ec7add4d76b071fbda", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=43d7d7c15e964c1cb506cbce90bb4b32b57281b8", "patch": "@@ -83,6 +83,7 @@ pub mod ext {\n     pub mod build;\n     pub mod bytes;\n     pub mod cfg;\n+    pub mod cfg_attr;\n     pub mod concat;\n     pub mod concat_idents;\n     pub mod deriving;"}, {"sha": "091b0ce8ed949adab4d483e223d787e5e2c6489f", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=43d7d7c15e964c1cb506cbce90bb4b32b57281b8", "patch": "@@ -339,6 +339,12 @@ fn is_ignored(cx: &TestCtxt, i: &ast::Item) -> bool {\n         // check ignore(cfg(foo, bar))\n         attr.check_name(\"ignore\") && match attr.meta_item_list() {\n             Some(ref cfgs) => {\n+                if cfgs.iter().any(|cfg| cfg.check_name(\"cfg\")) {\n+                    cx.span_diagnostic.span_warn(attr.span,\n+                            \"The use of cfg filters in #[ignore] is \\\n+                             deprecated. Use #[cfg_attr(<cfg pattern>, \\\n+                             ignore)] instead.\");\n+                }\n                 attr::test_cfg(cx.config.as_slice(), cfgs.iter())\n             }\n             None => true"}, {"sha": "04489d780278dbc3245afbe71078a5676072ba9b", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=43d7d7c15e964c1cb506cbce90bb4b32b57281b8", "patch": "@@ -356,8 +356,7 @@ Test Attributes:\n     #[ignore]      - When applied to a function which is already attributed as a\n                      test, then the test runner will ignore these tests during\n                      normal test runs. Running with --ignored will run these\n-                     tests. This may also be written as #[ignore(cfg(...))] to\n-                     ignore the test on certain configurations.\",\n+                     tests.\",\n              usage = getopts::usage(message.as_slice(),\n                                     optgroups().as_slice()));\n }"}, {"sha": "9cec71104d403f3efe66f7784dabfb37f7e4070f", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=43d7d7c15e964c1cb506cbce90bb4b32b57281b8", "patch": "@@ -1564,7 +1564,7 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(cfg(target_os = \"android\"))] // FIXME #10958\n+    #[cfg_attr(target_os = \"android\", ignore)] // FIXME #10958\n     fn run_tests() {\n         // The tests race on tzset. So instead of having many independent\n         // tests, we will just call the functions now."}, {"sha": "15d3f4a04d57ae6bb1e4186d884ed6a1f29c7605", "filename": "src/test/run-pass/cfg_attr.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Ftest%2Frun-pass%2Fcfg_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Ftest%2Frun-pass%2Fcfg_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg_attr.rs?ref=43d7d7c15e964c1cb506cbce90bb4b32b57281b8", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:--cfg set1 --cfg set2\n+#![allow(dead_code)]\n+use std::fmt::Show;\n+\n+struct NotShowable;\n+\n+#[cfg_attr(set1, deriving(Show))]\n+struct Set1;\n+\n+#[cfg_attr(notset, deriving(Show))]\n+struct Notset(NotShowable);\n+\n+#[cfg_attr(not(notset), deriving(Show))]\n+struct NotNotset;\n+\n+#[cfg_attr(not(set1), deriving(Show))]\n+struct NotSet1(NotShowable);\n+\n+#[cfg_attr(all(set1, set2), deriving(Show))]\n+struct AllSet1Set2;\n+\n+#[cfg_attr(all(set1, notset), deriving(Show))]\n+struct AllSet1Notset(NotShowable);\n+\n+#[cfg_attr(any(set1, notset), deriving(Show))]\n+struct AnySet1Notset;\n+\n+#[cfg_attr(any(notset, notset2), deriving(Show))]\n+struct AnyNotsetNotset2(NotShowable);\n+\n+#[cfg_attr(all(not(notset), any(set1, notset)), deriving(Show))]\n+struct Complex;\n+\n+#[cfg_attr(any(notset, not(any(set1, notset))), deriving(Show))]\n+struct ComplexNot(NotShowable);\n+\n+#[cfg_attr(any(target_endian = \"little\", target_endian = \"big\"), deriving(Show))]\n+struct KeyValue;\n+\n+fn is_show<T: Show>() {}\n+\n+fn main() {\n+    is_show::<Set1>();\n+    is_show::<NotNotset>();\n+    is_show::<AllSet1Set2>();\n+    is_show::<AnySet1Notset>();\n+    is_show::<Complex>();\n+    is_show::<KeyValue>();\n+}"}, {"sha": "00906004dbfb0cc06cb27d85ef1037ee511f7dc4", "filename": "src/test/run-pass/tcp-connect-timeouts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d7d7c15e964c1cb506cbce90bb4b32b57281b8/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs?ref=43d7d7c15e964c1cb506cbce90bb4b32b57281b8", "patch": "@@ -80,7 +80,7 @@ iotest!(fn eventual_timeout() {\n         }\n     }\n     fail!(\"never timed out!\");\n-} #[ignore(cfg(target_os = \"freebsd\"))])\n+} #[cfg_attr(target_os = \"freebsd\", ignore)])\n \n iotest!(fn timeout_success() {\n     let addr = next_test_ip4();"}]}