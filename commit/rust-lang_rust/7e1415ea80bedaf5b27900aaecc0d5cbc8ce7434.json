{"sha": "7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "node_id": "C_kwDOAAsO6NoAKDdlMTQxNWVhODBiZWRhZjViMjc5MDBhYWVjYzBkNWNiYzhjZTc0MzQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-17T21:55:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-17T21:55:00Z"}, "message": "Rollup merge of #93222 - mark-i-m:errorreported, r=oli-obk\n\nMake ErrorReported impossible to construct outside `rustc_errors`\n\nThere are a few places were we have to construct it, though, and a few\nplaces that are more invasive to change. To do this, we create a\nconstructor with a long obvious name.\n\ncc #69426 `@varkor` `@eddyb` `@estebank`\n\nI actually didn't see that I was assigned to this issue until now...", "tree": {"sha": "360eb126ee5345c31a10314d676f6c18e0fd98e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/360eb126ee5345c31a10314d676f6c18e0fd98e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiM640CRBK7hj4Ov3rIwAAK5oIAKd2TQPw0tlhhx0p4d9oDlFt\nTMzoiPNhQe5T6pYqVazs/8+NENxloIqf6JT/hA6d7IaNGOjw/ejT37cdivXs0xnz\nVpJV6uSEkq2qaCx1XHwKOKWw/JdIAj/tDm82+khKwzM7xJ7mkHB6+4Pg4MPbD3wD\n1dfq0T4jsQf4SOpBbq72E4p0jKpZUmaxKuYdmQnU1z1x6/UVY+IjJtLSUHfAc1j1\nskNwkabG0cTn+fx9jazbiQnH/gOQfhO3uR5/8X6igqiZo7bjXlZFAmrfd6G50Gyv\nxbcbo72dvvL9uL3L0CncZS6onfuzju5gskYQA/r002DrcXkF+B2r5XxcVaIhFtU=\n=ucz4\n-----END PGP SIGNATURE-----\n", "payload": "tree 360eb126ee5345c31a10314d676f6c18e0fd98e7\nparent c8133f6f5e7de007e2568a3ef8fbb2e96075411e\nparent bb8d4307eb723850e98bcb52d71d860a4aba220a\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1647554100 +0100\ncommitter GitHub <noreply@github.com> 1647554100 +0100\n\nRollup merge of #93222 - mark-i-m:errorreported, r=oli-obk\n\nMake ErrorReported impossible to construct outside `rustc_errors`\n\nThere are a few places were we have to construct it, though, and a few\nplaces that are more invasive to change. To do this, we create a\nconstructor with a long obvious name.\n\ncc #69426 `@varkor` `@eddyb` `@estebank`\n\nI actually didn't see that I was assigned to this issue until now...\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "html_url": "https://github.com/rust-lang/rust/commit/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8133f6f5e7de007e2568a3ef8fbb2e96075411e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8133f6f5e7de007e2568a3ef8fbb2e96075411e", "html_url": "https://github.com/rust-lang/rust/commit/c8133f6f5e7de007e2568a3ef8fbb2e96075411e"}, {"sha": "bb8d4307eb723850e98bcb52d71d860a4aba220a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb8d4307eb723850e98bcb52d71d860a4aba220a", "html_url": "https://github.com/rust-lang/rust/commit/bb8d4307eb723850e98bcb52d71d860a4aba220a"}], "stats": {"total": 1253, "additions": 704, "deletions": 549}, "files": [{"sha": "abf1bc739a3f78243df4b75c9bbf6aaa16bda4bc", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -952,7 +952,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                 sess.diagnostic().delay_span_bug(\n                                     span,\n                                     \"unexpected delimiter in key-value attribute's value\",\n-                                )\n+                                );\n                             }\n                             unwrap_single_token(sess, tokens, span)\n                         }"}, {"sha": "f5e6b15fcbfd115784f682984af8a2f4ab291144", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -440,7 +440,7 @@ impl<'a> AstValidator<'a> {\n                         attr.span,\n                         \"allow, cfg, cfg_attr, deny, \\\n                 forbid, and warn are the only allowed built-in attributes in function parameters\",\n-                    )\n+                    );\n                 }\n             });\n     }"}, {"sha": "5b6147c72230d53b943586280b3a6d457d103886", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -252,11 +252,12 @@ impl<'a> PostExpansionVisitor<'a> {\n                     \"wasm ABI is experimental and subject to change\"\n                 );\n             }\n-            abi => self\n-                .sess\n-                .parse_sess\n-                .span_diagnostic\n-                .delay_span_bug(span, &format!(\"unrecognized ABI not caught in lowering: {}\", abi)),\n+            abi => {\n+                self.sess.parse_sess.span_diagnostic.delay_span_bug(\n+                    span,\n+                    &format!(\"unrecognized ABI not caught in lowering: {}\", abi),\n+                );\n+            }\n         }\n     }\n "}, {"sha": "c9c973bd34350267fb0520a326cef38eec911b74", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -178,7 +178,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n \n     // Gather the upvars of a closure, if any.\n     let tables = tcx.typeck_opt_const_arg(def);\n-    if let Some(ErrorGuaranteed) = tables.tainted_by_errors {\n+    if let Some(ErrorGuaranteed { .. }) = tables.tainted_by_errors {\n         infcx.set_tainted_by_errors();\n         errors.set_tainted_by_errors();\n     }\n@@ -2274,6 +2274,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n }\n \n mod error {\n+    use rustc_errors::ErrorGuaranteed;\n+\n     use super::*;\n \n     pub struct BorrowckErrors<'tcx> {\n@@ -2311,7 +2313,7 @@ mod error {\n         // FIXME(eddyb) this is a suboptimal API because `tainted_by_errors` is\n         // set before any emission actually happens (weakening the guarantee).\n         pub fn buffer_error(&mut self, t: DiagnosticBuilder<'_, ErrorGuaranteed>) {\n-            self.tainted_by_errors = Some(ErrorGuaranteed {});\n+            self.tainted_by_errors = Some(ErrorGuaranteed::unchecked_claim_error_was_emitted());\n             t.buffer(&mut self.buffered);\n         }\n \n@@ -2320,7 +2322,7 @@ mod error {\n         }\n \n         pub fn set_tainted_by_errors(&mut self) {\n-            self.tainted_by_errors = Some(ErrorGuaranteed {});\n+            self.tainted_by_errors = Some(ErrorGuaranteed::unchecked_claim_error_was_emitted());\n         }\n     }\n "}, {"sha": "4657791345b8eb22d3f0d1c304d829ca2132c2ff", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -1,7 +1,6 @@\n //! Handling of `static`s, `const`s and promoted allocations\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::ErrorGuaranteed;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{\n     read_target_uint, AllocId, ConstAllocation, ConstValue, ErrorHandled, GlobalAlloc, Scalar,\n@@ -54,7 +53,7 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n                 {\n                     all_constants_ok = false;\n                     match err {\n-                        ErrorHandled::Reported(ErrorGuaranteed) | ErrorHandled::Linted => {\n+                        ErrorHandled::Reported(_) | ErrorHandled::Linted => {\n                             fx.tcx.sess.span_err(constant.span, \"erroneous constant encountered\");\n                         }\n                         ErrorHandled::TooGeneric => {"}, {"sha": "6c139df0a8555c35109549a12a7305bad2bccc6a", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -1,5 +1,4 @@\n use crate::traits::*;\n-use rustc_errors::ErrorGuaranteed;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt, TyAndLayout};\n@@ -191,7 +190,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             all_consts_ok = false;\n             match err {\n                 // errored or at least linted\n-                ErrorHandled::Reported(ErrorGuaranteed) | ErrorHandled::Linted => {}\n+                ErrorHandled::Reported(_) | ErrorHandled::Linted => {}\n                 ErrorHandled::TooGeneric => {\n                     span_bug!(const_.span, \"codgen encountered polymorphic constant: {:?}\", err)\n                 }"}, {"sha": "2b58c1e8233c1bb6bf35384c5a459347af4f38ca", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -1,4 +1,3 @@\n-use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::DefKind;\n use rustc_middle::mir;\n use rustc_middle::ty::{self, Ty};\n@@ -247,11 +246,11 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                 if ecx.tcx.is_ctfe_mir_available(def.did) {\n                     Ok(ecx.tcx.mir_for_ctfe_opt_const_arg(def))\n                 } else if ecx.tcx.def_kind(def.did) == DefKind::AssocConst {\n-                    ecx.tcx.sess.delay_span_bug(\n+                    let guar = ecx.tcx.sess.delay_span_bug(\n                         rustc_span::DUMMY_SP,\n                         \"This is likely a const item that is missing from its impl\",\n                     );\n-                    throw_inval!(AlreadyReported(ErrorGuaranteed {}));\n+                    throw_inval!(AlreadyReported(guar));\n                 } else {\n                     let path = ecx.tcx.def_path_str(def.did);\n                     Err(ConstEvalErrKind::NeedsRfc(format!(\"calling extern function `{}`\", path))"}, {"sha": "43ab74f4b888a21794f055bb3442d20eab46dff7", "filename": "compiler/rustc_const_eval/src/interpret/intern.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -406,8 +406,11 @@ pub fn intern_const_alloc_recursive<\n         } else if ecx.memory.dead_alloc_map.contains_key(&alloc_id) {\n             // Codegen does not like dangling pointers, and generally `tcx` assumes that\n             // all allocations referenced anywhere actually exist. So, make sure we error here.\n-            ecx.tcx.sess.span_err(ecx.tcx.span, \"encountered dangling pointer in final constant\");\n-            return Err(ErrorGuaranteed);\n+            let reported = ecx\n+                .tcx\n+                .sess\n+                .span_err(ecx.tcx.span, \"encountered dangling pointer in final constant\");\n+            return Err(reported);\n         } else if ecx.tcx.get_global_alloc(alloc_id).is_none() {\n             // We have hit an `AllocId` that is neither in local or global memory and isn't\n             // marked as dangling by local memory.  That should be impossible."}, {"sha": "9000567558b84cf6974678545af388fb0508c3b8", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -4,12 +4,11 @@\n use std::convert::TryFrom;\n use std::fmt::Write;\n \n-use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::Namespace;\n use rustc_macros::HashStable;\n use rustc_middle::ty::layout::{LayoutOf, PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::print::{FmtPrinter, PrettyPrinter, Printer};\n-use rustc_middle::ty::{ConstInt, Ty};\n+use rustc_middle::ty::{ConstInt, DelaySpanBugEmitted, Ty};\n use rustc_middle::{mir, ty};\n use rustc_target::abi::{Abi, HasDataLayout, Size, TagEncoding};\n use rustc_target::abi::{VariantIdx, Variants};\n@@ -565,7 +564,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         match val.val() {\n             ty::ConstKind::Param(_) | ty::ConstKind::Bound(..) => throw_inval!(TooGeneric),\n-            ty::ConstKind::Error(_) => throw_inval!(AlreadyReported(ErrorGuaranteed)),\n+            ty::ConstKind::Error(DelaySpanBugEmitted { reported, .. }) => {\n+                throw_inval!(AlreadyReported(reported))\n+            }\n             ty::ConstKind::Unevaluated(uv) => {\n                 let instance = self.resolve(uv.def, uv.substs)?;\n                 Ok(self.eval_to_allocation(GlobalId { instance, promoted: uv.promoted })?.into())"}, {"sha": "eb01e261c1a55706a94c3cbd6814809e3e215c42", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -259,7 +259,7 @@ impl<'mir, 'tcx> Checker<'mir, 'tcx> {\n                 self.tcx.sess.diagnostic().emit_diagnostic(&error);\n             }\n         } else {\n-            assert!(self.tcx.sess.has_errors());\n+            assert!(self.tcx.sess.has_errors().is_some());\n         }\n     }\n \n@@ -327,8 +327,8 @@ impl<'mir, 'tcx> Checker<'mir, 'tcx> {\n \n         match op.importance() {\n             ops::DiagnosticImportance::Primary => {\n-                self.error_emitted = Some(ErrorGuaranteed);\n-                err.emit();\n+                let reported = err.emit();\n+                self.error_emitted = Some(reported);\n             }\n \n             ops::DiagnosticImportance::Secondary => err.buffer(&mut self.secondary_errors),"}, {"sha": "91bb38e5a95d5321e758e9810b977fd2abe3dab7", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -235,7 +235,7 @@ fn run_compiler(\n     };\n \n     match make_input(config.opts.error_format, &matches.free) {\n-        Err(ErrorGuaranteed) => return Err(ErrorGuaranteed),\n+        Err(reported) => return Err(reported),\n         Ok(Some((input, input_file_path))) => {\n             config.input = input;\n             config.input_path = input_file_path;\n@@ -465,11 +465,11 @@ fn make_input(\n             if io::stdin().read_to_string(&mut src).is_err() {\n                 // Immediately stop compilation if there was an issue reading\n                 // the input (for example if the input stream is not UTF-8).\n-                early_error_no_abort(\n+                let reported = early_error_no_abort(\n                     error_format,\n                     \"couldn't read from stdin, as it did not contain valid UTF-8\",\n                 );\n-                return Err(ErrorGuaranteed);\n+                return Err(reported);\n             }\n             if let Ok(path) = env::var(\"UNSTABLE_RUSTDOC_TEST_PATH\") {\n                 let line = env::var(\"UNSTABLE_RUSTDOC_TEST_LINE\").expect(\n@@ -1128,7 +1128,7 @@ fn extra_compiler_flags() -> Option<(Vec<String>, bool)> {\n pub fn catch_fatal_errors<F: FnOnce() -> R, R>(f: F) -> Result<R, ErrorGuaranteed> {\n     catch_unwind(panic::AssertUnwindSafe(f)).map_err(|value| {\n         if value.is::<rustc_errors::FatalErrorMarker>() {\n-            ErrorGuaranteed\n+            ErrorGuaranteed::unchecked_claim_error_was_emitted()\n         } else {\n             panic::resume_unwind(value);\n         }"}, {"sha": "72471638a966bbb4fffd7ef0ec5628de47691808", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -128,7 +128,7 @@ impl EmissionGuarantee for ErrorGuaranteed {\n             DiagnosticBuilderState::Emittable(handler) => {\n                 db.inner.state = DiagnosticBuilderState::AlreadyEmittedOrDuringCancellation;\n \n-                handler.emit_diagnostic(&db.inner.diagnostic);\n+                let guar = handler.emit_diagnostic(&db.inner.diagnostic);\n \n                 // Only allow a guarantee if the `level` wasn't switched to a\n                 // non-error - the field isn't `pub`, but the whole `Diagnostic`\n@@ -139,7 +139,7 @@ impl EmissionGuarantee for ErrorGuaranteed {\n                      from `DiagnosticBuilder<ErrorGuaranteed>`\",\n                     db.inner.diagnostic.level,\n                 );\n-                ErrorGuaranteed\n+                guar.unwrap()\n             }\n             // `.emit()` was previously called, disallowed from repeating it,\n             // but can take advantage of the previous `.emit()`'s guarantee\n@@ -154,7 +154,7 @@ impl EmissionGuarantee for ErrorGuaranteed {\n                      became non-error ({:?}), after original `.emit()`\",\n                     db.inner.diagnostic.level,\n                 );\n-                ErrorGuaranteed\n+                ErrorGuaranteed::unchecked_claim_error_was_emitted()\n             }\n         }\n     }"}, {"sha": "c719e4910ce4eaa3942536193e9abacb0f855adb", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 61, "deletions": 34, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -399,7 +399,7 @@ impl fmt::Display for ExplicitBug {\n impl error::Error for ExplicitBug {}\n \n pub use diagnostic::{Diagnostic, DiagnosticId, DiagnosticStyledString, SubDiagnostic};\n-pub use diagnostic_builder::DiagnosticBuilder;\n+pub use diagnostic_builder::{DiagnosticBuilder, EmissionGuarantee};\n use std::backtrace::Backtrace;\n \n /// A handler deals with errors and other compiler output.\n@@ -644,8 +644,8 @@ impl Handler {\n     }\n \n     /// Emit all stashed diagnostics.\n-    pub fn emit_stashed_diagnostics(&self) {\n-        self.inner.borrow_mut().emit_stashed_diagnostics();\n+    pub fn emit_stashed_diagnostics(&self) -> Option<ErrorGuaranteed> {\n+        self.inner.borrow_mut().emit_stashed_diagnostics()\n     }\n \n     /// Construct a builder at the `Warning` level at the given `span` and with the `msg`.\n@@ -805,8 +805,8 @@ impl Handler {\n         FatalError.raise()\n     }\n \n-    pub fn span_err(&self, span: impl Into<MultiSpan>, msg: &str) {\n-        self.emit_diag_at_span(Diagnostic::new(Error { lint: false }, msg), span);\n+    pub fn span_err(&self, span: impl Into<MultiSpan>, msg: &str) -> ErrorGuaranteed {\n+        self.emit_diag_at_span(Diagnostic::new(Error { lint: false }, msg), span).unwrap()\n     }\n \n     pub fn span_err_with_code(&self, span: impl Into<MultiSpan>, msg: &str, code: DiagnosticId) {\n@@ -829,7 +829,7 @@ impl Handler {\n     }\n \n     #[track_caller]\n-    pub fn delay_span_bug(&self, span: impl Into<MultiSpan>, msg: &str) {\n+    pub fn delay_span_bug(&self, span: impl Into<MultiSpan>, msg: &str) -> ErrorGuaranteed {\n         self.inner.borrow_mut().delay_span_bug(span, msg)\n     }\n \n@@ -858,8 +858,8 @@ impl Handler {\n         self.inner.borrow_mut().fatal(msg)\n     }\n \n-    pub fn err(&self, msg: &str) {\n-        self.inner.borrow_mut().err(msg);\n+    pub fn err(&self, msg: &str) -> ErrorGuaranteed {\n+        self.inner.borrow_mut().err(msg)\n     }\n \n     pub fn warn(&self, msg: &str) {\n@@ -880,11 +880,15 @@ impl Handler {\n         self.inner.borrow().err_count()\n     }\n \n-    pub fn has_errors(&self) -> bool {\n-        self.inner.borrow().has_errors()\n+    pub fn has_errors(&self) -> Option<ErrorGuaranteed> {\n+        if self.inner.borrow().has_errors() { Some(ErrorGuaranteed(())) } else { None }\n     }\n-    pub fn has_errors_or_lint_errors(&self) -> bool {\n-        self.inner.borrow().has_errors_or_lint_errors()\n+    pub fn has_errors_or_lint_errors(&self) -> Option<ErrorGuaranteed> {\n+        if self.inner.borrow().has_errors_or_lint_errors() {\n+            Some(ErrorGuaranteed(()))\n+        } else {\n+            None\n+        }\n     }\n     pub fn has_errors_or_delayed_span_bugs(&self) -> bool {\n         self.inner.borrow().has_errors_or_delayed_span_bugs()\n@@ -915,13 +919,17 @@ impl Handler {\n         self.inner.borrow_mut().force_print_diagnostic(db)\n     }\n \n-    pub fn emit_diagnostic(&self, diagnostic: &Diagnostic) {\n+    pub fn emit_diagnostic(&self, diagnostic: &Diagnostic) -> Option<ErrorGuaranteed> {\n         self.inner.borrow_mut().emit_diagnostic(diagnostic)\n     }\n \n-    fn emit_diag_at_span(&self, mut diag: Diagnostic, sp: impl Into<MultiSpan>) {\n+    fn emit_diag_at_span(\n+        &self,\n+        mut diag: Diagnostic,\n+        sp: impl Into<MultiSpan>,\n+    ) -> Option<ErrorGuaranteed> {\n         let mut inner = self.inner.borrow_mut();\n-        inner.emit_diagnostic(diag.set_span(sp));\n+        inner.emit_diagnostic(diag.set_span(sp))\n     }\n \n     pub fn emit_artifact_notification(&self, path: &Path, artifact_type: &str) {\n@@ -990,13 +998,20 @@ impl HandlerInner {\n     }\n \n     /// Emit all stashed diagnostics.\n-    fn emit_stashed_diagnostics(&mut self) {\n+    fn emit_stashed_diagnostics(&mut self) -> Option<ErrorGuaranteed> {\n         let diags = self.stashed_diagnostics.drain(..).map(|x| x.1).collect::<Vec<_>>();\n-        diags.iter().for_each(|diag| self.emit_diagnostic(diag));\n+        let mut reported = None;\n+        diags.iter().for_each(|diag| {\n+            if diag.is_error() {\n+                reported = Some(ErrorGuaranteed(()));\n+            }\n+            self.emit_diagnostic(diag);\n+        });\n+        reported\n     }\n \n     // FIXME(eddyb) this should ideally take `diagnostic` by value.\n-    fn emit_diagnostic(&mut self, diagnostic: &Diagnostic) {\n+    fn emit_diagnostic(&mut self, diagnostic: &Diagnostic) -> Option<ErrorGuaranteed> {\n         if diagnostic.level == Level::DelayedBug {\n             // FIXME(eddyb) this should check for `has_errors` and stop pushing\n             // once *any* errors were emitted (and truncate `delayed_span_bugs`\n@@ -1005,7 +1020,7 @@ impl HandlerInner {\n             self.delayed_span_bugs.push(diagnostic.clone());\n \n             if !self.flags.report_delayed_bugs {\n-                return;\n+                return Some(ErrorGuaranteed::unchecked_claim_error_was_emitted());\n             }\n         }\n \n@@ -1020,7 +1035,7 @@ impl HandlerInner {\n             if diagnostic.has_future_breakage() {\n                 (*TRACK_DIAGNOSTICS)(diagnostic);\n             }\n-            return;\n+            return None;\n         }\n \n         // The `LintExpectationId` can be stable or unstable depending on when it was created.\n@@ -1029,16 +1044,16 @@ impl HandlerInner {\n         // a stable one by the `LintLevelsBuilder`.\n         if let Level::Expect(LintExpectationId::Unstable { .. }) = diagnostic.level {\n             self.unstable_expect_diagnostics.push(diagnostic.clone());\n-            return;\n+            return None;\n         }\n \n         (*TRACK_DIAGNOSTICS)(diagnostic);\n \n         if let Level::Expect(expectation_id) = diagnostic.level {\n             self.fulfilled_expectations.insert(expectation_id);\n-            return;\n+            return None;\n         } else if diagnostic.level == Allow {\n-            return;\n+            return None;\n         }\n \n         if let Some(ref code) = diagnostic.code {\n@@ -1068,8 +1083,12 @@ impl HandlerInner {\n             } else {\n                 self.bump_err_count();\n             }\n+\n+            Some(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n         } else {\n             self.bump_warn_count();\n+\n+            None\n         }\n     }\n \n@@ -1191,7 +1210,7 @@ impl HandlerInner {\n     }\n \n     #[track_caller]\n-    fn delay_span_bug(&mut self, sp: impl Into<MultiSpan>, msg: &str) {\n+    fn delay_span_bug(&mut self, sp: impl Into<MultiSpan>, msg: &str) -> ErrorGuaranteed {\n         // This is technically `self.treat_err_as_bug()` but `delay_span_bug` is called before\n         // incrementing `err_count` by one, so we need to +1 the comparing.\n         // FIXME: Would be nice to increment err_count in a more coherent way.\n@@ -1202,7 +1221,7 @@ impl HandlerInner {\n         let mut diagnostic = Diagnostic::new(Level::DelayedBug, msg);\n         diagnostic.set_span(sp.into());\n         diagnostic.note(&format!(\"delayed at {}\", std::panic::Location::caller()));\n-        self.emit_diagnostic(&diagnostic)\n+        self.emit_diagnostic(&diagnostic).unwrap()\n     }\n \n     // FIXME(eddyb) note the comment inside `impl Drop for HandlerInner`, that's\n@@ -1221,20 +1240,20 @@ impl HandlerInner {\n     }\n \n     fn fatal(&mut self, msg: &str) -> FatalError {\n-        self.emit_error(Fatal, msg);\n+        self.emit(Fatal, msg);\n         FatalError\n     }\n \n-    fn err(&mut self, msg: &str) {\n-        self.emit_error(Error { lint: false }, msg);\n+    fn err(&mut self, msg: &str) -> ErrorGuaranteed {\n+        self.emit(Error { lint: false }, msg)\n     }\n \n     /// Emit an error; level should be `Error` or `Fatal`.\n-    fn emit_error(&mut self, level: Level, msg: &str) {\n+    fn emit(&mut self, level: Level, msg: &str) -> ErrorGuaranteed {\n         if self.treat_err_as_bug() {\n             self.bug(msg);\n         }\n-        self.emit_diagnostic(&Diagnostic::new(level, msg));\n+        self.emit_diagnostic(&Diagnostic::new(level, msg)).unwrap()\n     }\n \n     fn bug(&mut self, msg: &str) -> ! {\n@@ -1433,9 +1452,17 @@ pub fn add_elided_lifetime_in_path_suggestion(\n     );\n }\n \n-// Useful type to use with `Result<>` indicate that an error has already\n-// been reported to the user, so no need to continue checking.\n-#[derive(Clone, Copy, Debug, Encodable, Decodable, Hash, PartialEq, Eq)]\n-pub struct ErrorGuaranteed;\n+/// Useful type to use with `Result<>` indicate that an error has already\n+/// been reported to the user, so no need to continue checking.\n+#[derive(Clone, Copy, Debug, Encodable, Decodable, Hash, PartialEq, Eq, PartialOrd, Ord)]\n+pub struct ErrorGuaranteed(());\n+\n+impl ErrorGuaranteed {\n+    /// To be used only if you really know what you are doing... ideally, we would find a way to\n+    /// eliminate all calls to this method.\n+    pub fn unchecked_claim_error_was_emitted() -> Self {\n+        ErrorGuaranteed(())\n+    }\n+}\n \n rustc_data_structures::impl_stable_hash_via_hash!(ErrorGuaranteed);"}, {"sha": "d6b308cdf85d59359d2ee8eae8edeaa5ed70ce1e", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -1330,7 +1330,7 @@ pub fn parse_macro_name_and_helper_attrs(\n     let attributes_attr = list.get(1);\n     let proc_attrs: Vec<_> = if let Some(attr) = attributes_attr {\n         if !attr.has_name(sym::attributes) {\n-            diag.span_err(attr.span(), \"second argument must be `attributes`\")\n+            diag.span_err(attr.span(), \"second argument must be `attributes`\");\n         }\n         attr.meta_item_list()\n             .unwrap_or_else(|| {"}, {"sha": "b93edf8da7a6458f530f4b9492a481a9497cdc28", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -534,10 +534,10 @@ pub fn compile_declarative_macro(\n     let (transparency, transparency_error) = attr::find_transparency(&def.attrs, macro_rules);\n     match transparency_error {\n         Some(TransparencyError::UnknownTransparency(value, span)) => {\n-            diag.span_err(span, &format!(\"unknown macro transparency: `{}`\", value))\n+            diag.span_err(span, &format!(\"unknown macro transparency: `{}`\", value));\n         }\n         Some(TransparencyError::MultipleTransparencyAttrs(old_span, new_span)) => {\n-            diag.span_err(vec![old_span, new_span], \"multiple macro transparency attributes\")\n+            diag.span_err(vec![old_span, new_span], \"multiple macro transparency attributes\");\n         }\n         None => {}\n     }\n@@ -617,7 +617,9 @@ fn check_lhs_no_empty_seq(sess: &ParseSess, tts: &[mbe::TokenTree]) -> bool {\n fn check_rhs(sess: &ParseSess, rhs: &mbe::TokenTree) -> bool {\n     match *rhs {\n         mbe::TokenTree::Delimited(..) => return true,\n-        _ => sess.span_diagnostic.span_err(rhs.span(), \"macro rhs must be delimited\"),\n+        _ => {\n+            sess.span_diagnostic.span_err(rhs.span(), \"macro rhs must be delimited\");\n+        }\n     }\n     false\n }"}, {"sha": "a5afb7aa4fa4e9bb80232baf04a2e140177c7c62", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -31,8 +31,7 @@ impl base::ProcMacro for BangProcMacro {\n             if let Some(s) = e.as_str() {\n                 err.help(&format!(\"message: {}\", s));\n             }\n-            err.emit();\n-            ErrorGuaranteed\n+            err.emit()\n         })\n     }\n }\n@@ -58,8 +57,7 @@ impl base::AttrProcMacro for AttrProcMacro {\n                 if let Some(s) = e.as_str() {\n                     err.help(&format!(\"message: {}\", s));\n                 }\n-                err.emit();\n-                ErrorGuaranteed\n+                err.emit()\n             })\n     }\n }"}, {"sha": "b13f0b0d3dad81d8c765ca53fd8f3cf3f5752c6e", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -225,12 +225,12 @@ pub fn prepare_session_directory(\n     let crate_dir = match crate_dir.canonicalize() {\n         Ok(v) => v,\n         Err(err) => {\n-            sess.err(&format!(\n+            let reported = sess.err(&format!(\n                 \"incremental compilation: error canonicalizing path `{}`: {}\",\n                 crate_dir.display(),\n                 err\n             ));\n-            return Err(ErrorGuaranteed);\n+            return Err(reported);\n         }\n     };\n \n@@ -489,14 +489,14 @@ fn create_dir(sess: &Session, path: &Path, dir_tag: &str) -> Result<(), ErrorGua\n             Ok(())\n         }\n         Err(err) => {\n-            sess.err(&format!(\n+            let reported = sess.err(&format!(\n                 \"Could not create incremental compilation {} \\\n                                directory `{}`: {}\",\n                 dir_tag,\n                 path.display(),\n                 err\n             ));\n-            Err(ErrorGuaranteed)\n+            Err(reported)\n         }\n     }\n }\n@@ -545,8 +545,7 @@ fn lock_directory(\n                     );\n                 }\n             }\n-            err.emit();\n-            Err(ErrorGuaranteed)\n+            Err(err.emit())\n         }\n     }\n }"}, {"sha": "7721e00c141d788f61f9e59e3a36fba5f33856ae", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -147,8 +147,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n \n         self.suggest_adding_lifetime_params(sub, ty_sup, ty_sub, &mut err);\n \n-        err.emit();\n-        Some(ErrorGuaranteed)\n+        let reported = err.emit();\n+        Some(reported)\n     }\n \n     fn suggest_adding_lifetime_params("}, {"sha": "467054e318be53d18a9184caeb4cc75c5f4bbc7b", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mismatched_static_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -98,7 +98,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             let impl_span = self.tcx().def_span(*impl_def_id);\n             err.span_note(impl_span, \"...does not necessarily outlive the static lifetime introduced by the compatible `impl`\");\n         }\n-        err.emit();\n-        Some(ErrorGuaranteed)\n+        let reported = err.emit();\n+        Some(reported)\n     }\n }"}, {"sha": "df81aea6ef9ecfb1ceda0f93dd452fc701883633", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -54,10 +54,7 @@ impl<'cx, 'tcx> NiceRegionError<'cx, 'tcx> {\n \n     pub fn try_report(&self) -> Option<ErrorGuaranteed> {\n         self.try_report_from_nll()\n-            .map(|mut diag| {\n-                diag.emit();\n-                ErrorGuaranteed\n-            })\n+            .map(|mut diag| diag.emit())\n             .or_else(|| self.try_report_impl_not_conforming_to_trait())\n             .or_else(|| self.try_report_anon_anon_conflict())\n             .or_else(|| self.try_report_static_impl_trait())"}, {"sha": "4fcdcb6366683e3b2b45ac6e383a6fee5e478960", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -84,8 +84,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                         ),\n                     );\n                     if self.find_impl_on_dyn_trait(&mut err, param.param_ty, &ctxt) {\n-                        err.emit();\n-                        return Some(ErrorGuaranteed);\n+                        let reported = err.emit();\n+                        return Some(reported);\n                     } else {\n                         err.cancel();\n                     }\n@@ -276,8 +276,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             Some((param.param_ty_span, param.param_ty.to_string())),\n         );\n \n-        err.emit();\n-        Some(ErrorGuaranteed)\n+        let reported = err.emit();\n+        Some(reported)\n     }\n }\n "}, {"sha": "b1a42ee66c9201cbc56397b22c80c20e44fbd1c7", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -33,13 +33,13 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             ) = (sub_trace.values.ty(), sup_trace.values.ty(), sub_trace.cause.code())\n             && sup_expected_found == sub_expected_found\n         {\n-            self.emit_err(\n+            let guar = self.emit_err(\n                 var_origin.span(),\n                 sub_expected,\n                 sub_found,\n                 *trait_item_def_id,\n             );\n-            return Some(ErrorGuaranteed);\n+            return Some(guar);\n         }\n         if let RegionResolutionError::ConcreteFailure(origin, _, _)\n             | RegionResolutionError::GenericBoundFailure(origin, _, _) = error.clone()\n@@ -49,18 +49,24 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 trait_item_def_id,\n             } = origin\n         {\n-            self.emit_associated_type_err(\n+            let guar = self.emit_associated_type_err(\n                 span,\n                 self.infcx.tcx.item_name(impl_item_def_id),\n                 impl_item_def_id,\n                 trait_item_def_id,\n             );\n-            return Some(ErrorGuaranteed);\n+            return Some(guar);\n         }\n         None\n     }\n \n-    fn emit_err(&self, sp: Span, expected: Ty<'tcx>, found: Ty<'tcx>, trait_def_id: DefId) {\n+    fn emit_err(\n+        &self,\n+        sp: Span,\n+        expected: Ty<'tcx>,\n+        found: Ty<'tcx>,\n+        trait_def_id: DefId,\n+    ) -> ErrorGuaranteed {\n         let trait_sp = self.tcx().def_span(trait_def_id);\n         let mut err = self\n             .tcx()\n@@ -142,7 +148,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                  argument, the other inputs and its output\",\n             );\n         }\n-        err.emit();\n+        err.emit()\n     }\n \n     fn emit_associated_type_err(\n@@ -151,7 +157,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         item_name: Symbol,\n         impl_item_def_id: DefId,\n         trait_item_def_id: DefId,\n-    ) {\n+    ) -> ErrorGuaranteed {\n         let impl_sp = self.tcx().def_span(impl_item_def_id);\n         let trait_sp = self.tcx().def_span(trait_item_def_id);\n         let mut err = self\n@@ -161,7 +167,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         err.span_label(impl_sp, \"found\");\n         err.span_label(trait_sp, \"expected\");\n \n-        err.emit();\n+        err.emit()\n     }\n }\n "}, {"sha": "5d8cc94e05c29b36a520598dd90a0a60671f1559", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -189,7 +189,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 self.tcx.sess.delay_span_bug(\n                     origin.span(),\n                     &format!(\"no region-bound-pairs for {:?}\", body_id),\n-                )\n+                );\n             }\n         }\n     }"}, {"sha": "4f30e78f5e2aa7efba92581e86ab7bee9b64982e", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -373,7 +373,7 @@ pub fn configure_and_expand(\n         if recursion_limit_hit {\n             // If we hit a recursion limit, exit early to avoid later passes getting overwhelmed\n             // with a large AST\n-            Err(ErrorGuaranteed)\n+            Err(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n         } else {\n             Ok(krate)\n         }\n@@ -413,7 +413,7 @@ pub fn configure_and_expand(\n         );\n \n         msg.warn(\"The generated documentation may be incorrect\");\n-        msg.emit()\n+        msg.emit();\n     } else {\n         krate = sess.time(\"maybe_create_a_macro_crate\", || {\n             let is_test_crate = sess.opts.test;\n@@ -742,29 +742,30 @@ pub fn prepare_outputs(\n     if let Some(ref input_path) = compiler.input_path {\n         if sess.opts.will_create_output_file() {\n             if output_contains_path(&output_paths, input_path) {\n-                sess.err(&format!(\n+                let reported = sess.err(&format!(\n                     \"the input file \\\"{}\\\" would be overwritten by the generated \\\n                         executable\",\n                     input_path.display()\n                 ));\n-                return Err(ErrorGuaranteed);\n+                return Err(reported);\n             }\n             if let Some(dir_path) = output_conflicts_with_dir(&output_paths) {\n-                sess.err(&format!(\n+                let reported = sess.err(&format!(\n                     \"the generated executable for the input file \\\"{}\\\" conflicts with the \\\n                         existing directory \\\"{}\\\"\",\n                     input_path.display(),\n                     dir_path.display()\n                 ));\n-                return Err(ErrorGuaranteed);\n+                return Err(reported);\n             }\n         }\n     }\n \n     if let Some(ref dir) = compiler.temps_dir {\n         if fs::create_dir_all(dir).is_err() {\n-            sess.err(\"failed to find or create the directory specified by `--temps-dir`\");\n-            return Err(ErrorGuaranteed);\n+            let reported =\n+                sess.err(\"failed to find or create the directory specified by `--temps-dir`\");\n+            return Err(reported);\n         }\n     }\n \n@@ -776,8 +777,9 @@ pub fn prepare_outputs(\n     if !only_dep_info {\n         if let Some(ref dir) = compiler.output_dir {\n             if fs::create_dir_all(dir).is_err() {\n-                sess.err(\"failed to find or create the directory specified by `--out-dir`\");\n-                return Err(ErrorGuaranteed);\n+                let reported =\n+                    sess.err(\"failed to find or create the directory specified by `--out-dir`\");\n+                return Err(reported);\n             }\n         }\n     }\n@@ -987,8 +989,8 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n     // lot of annoying errors in the ui tests (basically,\n     // lint warnings and so on -- kindck used to do this abort, but\n     // kindck is gone now). -nmatsakis\n-    if sess.has_errors() {\n-        return Err(ErrorGuaranteed);\n+    if let Some(reported) = sess.has_errors() {\n+        return Err(reported);\n     }\n \n     sess.time(\"misc_checking_3\", || {"}, {"sha": "6373f4e9af190eafee9a7f877eae375c2e7770c3", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -5,7 +5,6 @@ use rustc_ast as ast;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n-use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_incremental::DepGraphFuture;\n use rustc_lint::LintStore;\n@@ -121,10 +120,8 @@ impl<'tcx> Queries<'tcx> {\n \n     pub fn parse(&self) -> Result<&Query<ast::Crate>> {\n         self.parse.compute(|| {\n-            passes::parse(self.session(), &self.compiler.input).map_err(|mut parse_error| {\n-                parse_error.emit();\n-                ErrorGuaranteed\n-            })\n+            passes::parse(self.session(), &self.compiler.input)\n+                .map_err(|mut parse_error| parse_error.emit())\n         })\n     }\n "}, {"sha": "50a3df21a3bc9010ea1f04d00fc88facf8f940ca", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -157,7 +157,7 @@ impl BoxPointers {\n             if let GenericArgKind::Type(leaf_ty) = leaf.unpack() {\n                 if leaf_ty.is_box() {\n                     cx.struct_span_lint(BOX_POINTERS, span, |lint| {\n-                        lint.build(&format!(\"type uses owned (Box type) pointers: {}\", ty)).emit()\n+                        lint.build(&format!(\"type uses owned (Box type) pointers: {}\", ty)).emit();\n                     });\n                 }\n             }\n@@ -318,7 +318,7 @@ impl UnsafeCode {\n         &self,\n         cx: &EarlyContext<'_>,\n         span: Span,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),\n+        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n     ) {\n         // This comes from a macro that has `#[allow_internal_unsafe]`.\n         if span.allows_unsafe() {\n@@ -350,7 +350,7 @@ impl EarlyLintPass for UnsafeCode {\n                                                macros using unsafe without triggering \\\n                                                the `unsafe_code` lint at their call site\",\n                 )\n-                .emit()\n+                .emit();\n             });\n         }\n     }\n@@ -360,7 +360,7 @@ impl EarlyLintPass for UnsafeCode {\n             // Don't warn about generated blocks; that'll just pollute the output.\n             if blk.rules == ast::BlockCheckMode::Unsafe(ast::UserProvided) {\n                 self.report_unsafe(cx, blk.span, |lint| {\n-                    lint.build(\"usage of an `unsafe` block\").emit()\n+                    lint.build(\"usage of an `unsafe` block\").emit();\n                 });\n             }\n         }\n@@ -370,12 +370,12 @@ impl EarlyLintPass for UnsafeCode {\n         match it.kind {\n             ast::ItemKind::Trait(box ast::Trait { unsafety: ast::Unsafe::Yes(_), .. }) => self\n                 .report_unsafe(cx, it.span, |lint| {\n-                    lint.build(\"declaration of an `unsafe` trait\").emit()\n+                    lint.build(\"declaration of an `unsafe` trait\").emit();\n                 }),\n \n             ast::ItemKind::Impl(box ast::Impl { unsafety: ast::Unsafe::Yes(_), .. }) => self\n                 .report_unsafe(cx, it.span, |lint| {\n-                    lint.build(\"implementation of an `unsafe` trait\").emit()\n+                    lint.build(\"implementation of an `unsafe` trait\").emit();\n                 }),\n \n             ast::ItemKind::Fn(..) => {\n@@ -450,7 +450,9 @@ impl EarlyLintPass for UnsafeCode {\n                 FnCtxt::Assoc(_) if body.is_none() => \"declaration of an `unsafe` method\",\n                 FnCtxt::Assoc(_) => \"implementation of an `unsafe` method\",\n             };\n-            self.report_unsafe(cx, span, |lint| lint.build(msg).emit());\n+            self.report_unsafe(cx, span, |lint| {\n+                lint.build(msg).emit();\n+            });\n         }\n     }\n }\n@@ -559,7 +561,7 @@ impl MissingDoc {\n                 MISSING_DOCS,\n                 cx.tcx.sess.source_map().guess_head_span(sp),\n                 |lint| {\n-                    lint.build(&format!(\"missing documentation for {} {}\", article, desc)).emit()\n+                    lint.build(&format!(\"missing documentation for {} {}\", article, desc)).emit();\n                 },\n             );\n         }\n@@ -777,7 +779,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingCopyImplementations {\n                     \"type could implement `Copy`; consider adding `impl \\\n                           Copy`\",\n                 )\n-                .emit()\n+                .emit();\n             })\n         }\n     }\n@@ -858,7 +860,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDebugImplementations {\n                      or a manual implementation\",\n                     cx.tcx.def_path_str(debug)\n                 ))\n-                .emit()\n+                .emit();\n             });\n         }\n     }\n@@ -1278,7 +1280,9 @@ impl<'tcx> LateLintPass<'tcx> for MutableTransmutes {\n             if to_mt == hir::Mutability::Mut && from_mt == hir::Mutability::Not {\n                 let msg = \"transmuting &T to &mut T is undefined behavior, \\\n                     even if the reference is unused, consider instead using an UnsafeCell\";\n-                cx.struct_span_lint(MUTABLE_TRANSMUTES, expr.span, |lint| lint.build(msg).emit());\n+                cx.struct_span_lint(MUTABLE_TRANSMUTES, expr.span, |lint| {\n+                    lint.build(msg).emit();\n+                });\n             }\n         }\n \n@@ -1328,7 +1332,7 @@ impl<'tcx> LateLintPass<'tcx> for UnstableFeatures {\n             if let Some(items) = attr.meta_item_list() {\n                 for item in items {\n                     cx.struct_span_lint(UNSTABLE_FEATURES, item.span(), |lint| {\n-                        lint.build(\"unstable feature\").emit()\n+                        lint.build(\"unstable feature\").emit();\n                     });\n                 }\n             }\n@@ -1680,7 +1684,7 @@ impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {\n                                 or lifetime parameters\",\n                             predicate_kind_name, predicate\n                         ))\n-                        .emit()\n+                        .emit();\n                     });\n                 }\n             }\n@@ -1915,7 +1919,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnameableTestItems {\n         let attrs = cx.tcx.hir().attrs(it.hir_id());\n         if let Some(attr) = cx.sess().find_by_name(attrs, sym::rustc_test_marker) {\n             cx.struct_span_lint(UNNAMEABLE_TEST_ITEMS, attr.span, |lint| {\n-                lint.build(\"cannot test inner items\").emit()\n+                lint.build(\"cannot test inner items\").emit();\n             });\n         }\n     }\n@@ -2040,7 +2044,7 @@ impl KeywordIdents {\n                     format!(\"r#{}\", ident),\n                     Applicability::MachineApplicable,\n                 )\n-                .emit()\n+                .emit();\n         });\n     }\n }\n@@ -3055,7 +3059,7 @@ impl<'tcx> LateLintPass<'tcx> for ClashingExternDeclarations {\n                                 \"this signature doesn't match the previous declaration\",\n                             )\n                             .note_expected_found(&\"\", expected_str, &\"\", found_str)\n-                            .emit()\n+                            .emit();\n                         },\n                     );\n                 }"}, {"sha": "882fa4496ca26b1438d4c2eb162c70a4d9a31e1b", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -593,7 +593,7 @@ pub trait LintContext: Sized {\n         &self,\n         lint: &'static Lint,\n         span: Option<impl Into<MultiSpan>>,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),\n+        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n         diagnostic: BuiltinLintDiagnostics,\n     ) {\n         self.lookup(lint, span, |lint| {\n@@ -840,19 +840,23 @@ pub trait LintContext: Sized {\n         &self,\n         lint: &'static Lint,\n         span: Option<S>,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),\n+        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n     );\n \n     fn struct_span_lint<S: Into<MultiSpan>>(\n         &self,\n         lint: &'static Lint,\n         span: S,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),\n+        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n     ) {\n         self.lookup(lint, Some(span), decorate);\n     }\n     /// Emit a lint at the appropriate level, with no associated span.\n-    fn lint(&self, lint: &'static Lint, decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>)) {\n+    fn lint(\n+        &self,\n+        lint: &'static Lint,\n+        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n+    ) {\n         self.lookup(lint, None as Option<Span>, decorate);\n     }\n }\n@@ -893,7 +897,7 @@ impl LintContext for LateContext<'_> {\n         &self,\n         lint: &'static Lint,\n         span: Option<S>,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),\n+        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n     ) {\n         let hir_id = self.last_node_with_lint_attrs;\n \n@@ -920,7 +924,7 @@ impl LintContext for EarlyContext<'_> {\n         &self,\n         lint: &'static Lint,\n         span: Option<S>,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),\n+        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n     ) {\n         self.builder.struct_lint(lint, span.map(|s| s.into()), decorate)\n     }"}, {"sha": "7447f9f64b7b100f9a8aec19c883ef6d0a2a2145", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -45,7 +45,9 @@ impl<'a, T: EarlyLintPass> EarlyContextAndPass<'a, T> {\n             self.context.lookup_with_diagnostics(\n                 lint_id.lint,\n                 Some(span),\n-                |lint| lint.build(&msg).emit(),\n+                |lint| {\n+                    lint.build(&msg).emit();\n+                },\n                 diagnostic,\n             );\n         }"}, {"sha": "99a5720832e88b35995703d192c3e372fd98c81a", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -652,7 +652,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         &self,\n         lint: &'static Lint,\n         span: Option<MultiSpan>,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),\n+        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n     ) {\n         let (level, src) = self.lint_level(lint);\n         struct_lint_level(self.sess, lint, level, src, span, decorate)"}, {"sha": "6182d2b10ed5b183e6a9d4b295bb061a0fd26de5", "filename": "compiler/rustc_lint/src/non_ascii_idents.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -180,13 +180,13 @@ impl EarlyLintPass for NonAsciiIdents {\n             }\n             has_non_ascii_idents = true;\n             cx.struct_span_lint(NON_ASCII_IDENTS, sp, |lint| {\n-                lint.build(\"identifier contains non-ASCII characters\").emit()\n+                lint.build(\"identifier contains non-ASCII characters\").emit();\n             });\n             if check_uncommon_codepoints\n                 && !symbol_str.chars().all(GeneralSecurityProfile::identifier_allowed)\n             {\n                 cx.struct_span_lint(UNCOMMON_CODEPOINTS, sp, |lint| {\n-                    lint.build(\"identifier contains uncommon Unicode codepoints\").emit()\n+                    lint.build(\"identifier contains uncommon Unicode codepoints\").emit();\n                 })\n             }\n         }\n@@ -337,7 +337,7 @@ impl EarlyLintPass for NonAsciiIdents {\n                             let char_info = format!(\"'{}' (U+{:04X})\", ch, ch as u32);\n                             note += &char_info;\n                         }\n-                        lint.build(&message).note(&note).note(\"please recheck to make sure their usages are indeed what you want\").emit()\n+                        lint.build(&message).note(&note).note(\"please recheck to make sure their usages are indeed what you want\").emit();\n                     });\n                 }\n             }"}, {"sha": "5d734fd2ba7052f40ce51164f72ef082cd9ad521", "filename": "compiler/rustc_lint/src/noop_method_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -102,7 +102,7 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n             let method = &call.ident.name;\n             let message =\n                 format!(\"call to `.{}()` on a reference in this situation does nothing\", &method,);\n-            lint.build(&message).span_label(span, \"unnecessary method call\").note(&note).emit()\n+            lint.build(&message).span_label(span, \"unnecessary method call\").note(&note).emit();\n         });\n     }\n }"}, {"sha": "5b6997bf0eeaffafc6294741e8174f9cf638bba5", "filename": "compiler/rustc_lint/src/traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -113,7 +113,7 @@ impl<'tcx> LateLintPass<'tcx> for DropTraitConstraints {\n                         predicate,\n                         cx.tcx.def_path_str(needs_drop)\n                     );\n-                    lint.build(&msg).emit()\n+                    lint.build(&msg).emit();\n                 });\n             }\n         }\n@@ -135,7 +135,7 @@ impl<'tcx> LateLintPass<'tcx> for DropTraitConstraints {\n                         instead using `{}` to detect whether a type is trivially dropped\",\n                         cx.tcx.def_path_str(needs_drop)\n                     );\n-                    lint.build(&msg).emit()\n+                    lint.build(&msg).emit();\n                 });\n             }\n         }"}, {"sha": "c95905b9b185129476566438b1bfc8903d304609", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -441,7 +441,7 @@ fn lint_uint_literal<'tcx>(\n                     min,\n                     max,\n                 ))\n-                .emit()\n+                .emit();\n         });\n     }\n }\n@@ -502,7 +502,7 @@ impl<'tcx> LateLintPass<'tcx> for TypeLimits {\n             hir::ExprKind::Binary(binop, ref l, ref r) => {\n                 if is_comparison(binop) && !check_limits(cx, binop, &l, &r) {\n                     cx.struct_span_lint(UNUSED_COMPARISONS, e.span, |lint| {\n-                        lint.build(\"comparison is useless due to type limits\").emit()\n+                        lint.build(\"comparison is useless due to type limits\").emit();\n                     });\n                 }\n             }\n@@ -1382,7 +1382,7 @@ impl<'tcx> LateLintPass<'tcx> for VariantSizeDifferences {\n                                           larger ({} bytes) than the next largest\",\n                             largest\n                         ))\n-                        .emit()\n+                        .emit();\n                     },\n                 );\n             }"}, {"sha": "91b72f1d2b17ead0cd9a8e7412fc1364c8a1e001", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -170,7 +170,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n \n         if !(type_permits_lack_of_use || fn_warned || op_warned) {\n             cx.struct_span_lint(UNUSED_RESULTS, s.span, |lint| {\n-                lint.build(&format!(\"unused result of type `{}`\", ty)).emit()\n+                lint.build(&format!(\"unused result of type `{}`\", ty)).emit();\n             });\n         }\n \n@@ -368,9 +368,9 @@ impl<'tcx> LateLintPass<'tcx> for PathStatements {\n                         } else {\n                             lint.span_help(s.span, \"use `drop` to clarify the intent\");\n                         }\n-                        lint.emit()\n+                        lint.emit();\n                     } else {\n-                        lint.build(\"path statement with no effect\").emit()\n+                        lint.build(\"path statement with no effect\").emit();\n                     }\n                 });\n             }\n@@ -1111,7 +1111,7 @@ impl UnusedImportBraces {\n             };\n \n             cx.struct_span_lint(UNUSED_IMPORT_BRACES, item.span, |lint| {\n-                lint.build(&format!(\"braces around {} is unnecessary\", node_name)).emit()\n+                lint.build(&format!(\"braces around {} is unnecessary\", node_name)).emit();\n             });\n         }\n     }\n@@ -1170,7 +1170,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedAllocation {\n                             \"unnecessary allocation, use `&mut` instead\"\n                         }\n                     };\n-                    lint.build(msg).emit()\n+                    lint.build(msg).emit();\n                 });\n             }\n         }"}, {"sha": "a9e3b55aeeedfa4f1ccf83d29a618c6c593adccc", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -825,11 +825,13 @@ impl<'a> CrateLoader<'a> {\n         for (_, data) in self.cstore.iter_crate_data() {\n             if data.has_global_allocator() {\n                 match global_allocator {\n-                    Some(other_crate) => self.sess.err(&format!(\n+                    Some(other_crate) => {\n+                        self.sess.err(&format!(\n                         \"the `#[global_allocator]` in {} conflicts with global allocator in: {}\",\n                         other_crate,\n                         data.name()\n-                    )),\n+                    ));\n+                    }\n                     None => global_allocator = Some(data.name()),\n                 }\n             }\n@@ -864,7 +866,7 @@ impl<'a> CrateLoader<'a> {\n         // don't perform this validation if the session has errors, as one of\n         // those errors may indicate a circular dependency which could cause\n         // this to stack overflow.\n-        if self.sess.has_errors() {\n+        if self.sess.has_errors().is_some() {\n             return;\n         }\n "}, {"sha": "c3a7611239139ecae963b0ce41aac746b78e8be4", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -145,41 +145,49 @@ impl<'tcx> ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                             (\"bundle\", NativeLibKind::Static { bundle, .. }) => {\n                                 *bundle = Some(value);\n                             }\n-                            (\"bundle\", _) => sess.span_err(\n-                                span,\n-                                \"bundle linking modifier is only compatible with \\\n+                            (\"bundle\", _) => {\n+                                sess.span_err(\n+                                    span,\n+                                    \"bundle linking modifier is only compatible with \\\n                                 `static` linking kind\",\n-                            ),\n+                                );\n+                            }\n \n                             (\"verbatim\", _) => lib.verbatim = Some(value),\n \n                             (\"whole-archive\", NativeLibKind::Static { whole_archive, .. }) => {\n                                 *whole_archive = Some(value);\n                             }\n-                            (\"whole-archive\", _) => sess.span_err(\n-                                span,\n-                                \"whole-archive linking modifier is only compatible with \\\n+                            (\"whole-archive\", _) => {\n+                                sess.span_err(\n+                                    span,\n+                                    \"whole-archive linking modifier is only compatible with \\\n                                 `static` linking kind\",\n-                            ),\n+                                );\n+                            }\n \n                             (\"as-needed\", NativeLibKind::Dylib { as_needed })\n                             | (\"as-needed\", NativeLibKind::Framework { as_needed }) => {\n                                 *as_needed = Some(value);\n                             }\n-                            (\"as-needed\", _) => sess.span_err(\n-                                span,\n-                                \"as-needed linking modifier is only compatible with \\\n+                            (\"as-needed\", _) => {\n+                                sess.span_err(\n+                                    span,\n+                                    \"as-needed linking modifier is only compatible with \\\n                                 `dylib` and `framework` linking kinds\",\n-                            ),\n+                                );\n+                            }\n \n-                            _ => sess.span_err(\n-                                span,\n-                                &format!(\n-                                    \"unrecognized linking modifier `{}`, expected one \\\n+                            _ => {\n+                                sess.span_err(\n+                                    span,\n+                                    &format!(\n+                                        \"unrecognized linking modifier `{}`, expected one \\\n                                     of: bundle, verbatim, whole-archive, as-needed\",\n-                                    modifier\n-                                ),\n-                            ),\n+                                        modifier\n+                                    ),\n+                                );\n+                            }\n                         }\n                     }\n                 } else {\n@@ -247,7 +255,9 @@ impl Collector<'_> {\n                 Some(span) => {\n                     struct_span_err!(self.tcx.sess, span, E0455, \"{}\", msg).emit();\n                 }\n-                None => self.tcx.sess.err(msg),\n+                None => {\n+                    self.tcx.sess.err(msg);\n+                }\n             }\n         }\n         if lib.cfg.is_some() && !self.tcx.features().link_cfg {"}, {"sha": "dc1fe5f2b0836d947352eb7f21e941bc69114db4", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -2,7 +2,9 @@ use std::cmp;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_errors::{Diagnostic, DiagnosticBuilder, DiagnosticId};\n+use rustc_errors::{\n+    Diagnostic, DiagnosticBuilder, DiagnosticId, EmissionGuarantee, ErrorGuaranteed,\n+};\n use rustc_hir::HirId;\n use rustc_index::vec::IndexVec;\n use rustc_query_system::ich::StableHashingContext;\n@@ -220,22 +222,28 @@ impl LintExpectation {\n     }\n }\n \n-pub struct LintDiagnosticBuilder<'a>(DiagnosticBuilder<'a, ()>);\n+pub struct LintDiagnosticBuilder<'a, G: EmissionGuarantee>(DiagnosticBuilder<'a, G>);\n \n-impl<'a> LintDiagnosticBuilder<'a> {\n-    /// Return the inner DiagnosticBuilder, first setting the primary message to `msg`.\n-    pub fn build(mut self, msg: &str) -> DiagnosticBuilder<'a, ()> {\n+impl<'a, G: EmissionGuarantee> LintDiagnosticBuilder<'a, G> {\n+    /// Return the inner `DiagnosticBuilder`, first setting the primary message to `msg`.\n+    pub fn build(mut self, msg: &str) -> DiagnosticBuilder<'a, G> {\n         self.0.set_primary_message(msg);\n         self.0.set_is_lint();\n         self.0\n     }\n \n-    /// Create a LintDiagnosticBuilder from some existing DiagnosticBuilder.\n-    pub fn new(err: DiagnosticBuilder<'a, ()>) -> LintDiagnosticBuilder<'a> {\n+    /// Create a `LintDiagnosticBuilder` from some existing `DiagnosticBuilder`.\n+    pub fn new(err: DiagnosticBuilder<'a, G>) -> LintDiagnosticBuilder<'a, G> {\n         LintDiagnosticBuilder(err)\n     }\n }\n \n+impl<'a> LintDiagnosticBuilder<'a, ErrorGuaranteed> {\n+    pub fn forget_guarantee(self) -> LintDiagnosticBuilder<'a, ()> {\n+        LintDiagnosticBuilder(self.0.forget_guarantee())\n+    }\n+}\n+\n pub fn explain_lint_level_source(\n     sess: &Session,\n     lint: &'static Lint,\n@@ -316,7 +324,7 @@ pub fn struct_lint_level<'s, 'd>(\n     level: Level,\n     src: LintLevelSource,\n     span: Option<MultiSpan>,\n-    decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>) + 'd,\n+    decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>) + 'd,\n ) {\n     // Avoid codegen bloat from monomorphization by immediately doing dyn dispatch of `decorate` to\n     // the \"real\" work.\n@@ -326,7 +334,7 @@ pub fn struct_lint_level<'s, 'd>(\n         level: Level,\n         src: LintLevelSource,\n         span: Option<MultiSpan>,\n-        decorate: Box<dyn for<'b> FnOnce(LintDiagnosticBuilder<'b>) + 'd>,\n+        decorate: Box<dyn for<'b> FnOnce(LintDiagnosticBuilder<'b, ()>) + 'd>,\n     ) {\n         // Check for future incompatibility lints and issue a stronger warning.\n         let future_incompatible = lint.future_incompatible;"}, {"sha": "219af6caa1ae1943d6726a406340a943b45ba42d", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -258,7 +258,7 @@ fn late_report_deprecation(\n             let kind = tcx.def_kind(def_id).descr(def_id);\n             deprecation_suggestion(&mut diag, kind, suggestion, method_span);\n         }\n-        diag.emit()\n+        diag.emit();\n     });\n }\n \n@@ -483,7 +483,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     ) {\n         let soft_handler = |lint, span, msg: &_| {\n             self.struct_span_lint_hir(lint, id.unwrap_or(hir::CRATE_HIR_ID), span, |lint| {\n-                lint.build(msg).emit()\n+                lint.build(msg).emit();\n             })\n         };\n         match self.eval_stability(def_id, id, span, method_span) {"}, {"sha": "492091a4f25405f5ed1a47161e8fda432e5752cf", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -91,7 +91,7 @@ fn print_backtrace(backtrace: &Backtrace) {\n impl From<ErrorHandled> for InterpErrorInfo<'_> {\n     fn from(err: ErrorHandled) -> Self {\n         match err {\n-            ErrorHandled::Reported(ErrorGuaranteed) | ErrorHandled::Linted => {\n+            ErrorHandled::Reported(ErrorGuaranteed { .. }) | ErrorHandled::Linted => {\n                 err_inval!(ReferencedConstant)\n             }\n             ErrorHandled::TooGeneric => err_inval!(TooGeneric),\n@@ -160,7 +160,7 @@ impl fmt::Display for InvalidProgramInfo<'_> {\n         match self {\n             TooGeneric => write!(f, \"encountered overly generic constant\"),\n             ReferencedConstant => write!(f, \"referenced constant has errors\"),\n-            AlreadyReported(ErrorGuaranteed) => {\n+            AlreadyReported(ErrorGuaranteed { .. }) => {\n                 write!(f, \"encountered constants with type errors, stopping evaluation\")\n             }\n             Layout(ref err) => write!(f, \"{}\", err),"}, {"sha": "e07b174bc6aaa3cec64da30129f898697391da03", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -252,7 +252,9 @@ rustc_queries! {\n     }\n \n     /// Fetch the THIR for a given body. If typeck for that body failed, returns an empty `Thir`.\n-    query thir_body(key: ty::WithOptConstParam<LocalDefId>) -> (&'tcx Steal<thir::Thir<'tcx>>, thir::ExprId) {\n+    query thir_body(key: ty::WithOptConstParam<LocalDefId>)\n+        -> Result<(&'tcx Steal<thir::Thir<'tcx>>, thir::ExprId), ErrorGuaranteed>\n+    {\n         // Perf tests revealed that hashing THIR is inefficient (see #85729).\n         no_hash\n         desc { |tcx| \"building THIR for `{}`\", tcx.def_path_str(key.did.to_def_id()) }"}, {"sha": "c43ec048c3f99e2e086ac0c541229d20de268f66", "filename": "compiler/rustc_middle/src/traits/specialization_graph.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -31,12 +31,12 @@ pub struct Graph {\n     pub children: DefIdMap<Children>,\n \n     /// Whether an error was emitted while constructing the graph.\n-    pub has_errored: bool,\n+    pub has_errored: Option<ErrorGuaranteed>,\n }\n \n impl Graph {\n     pub fn new() -> Graph {\n-        Graph { parent: Default::default(), children: Default::default(), has_errored: false }\n+        Graph { parent: Default::default(), children: Default::default(), has_errored: None }\n     }\n \n     /// The parent of a given impl, which is the `DefId` of the trait when the\n@@ -246,8 +246,10 @@ pub fn ancestors<'tcx>(\n ) -> Result<Ancestors<'tcx>, ErrorGuaranteed> {\n     let specialization_graph = tcx.specialization_graph_of(trait_def_id);\n \n-    if specialization_graph.has_errored || tcx.type_of(start_from_impl).references_error() {\n-        Err(ErrorGuaranteed)\n+    if let Some(reported) = specialization_graph.has_errored {\n+        Err(reported)\n+    } else if let Some(reported) = tcx.type_of(start_from_impl).error_reported() {\n+        Err(reported)\n     } else {\n         Ok(Ancestors {\n             trait_def_id,"}, {"sha": "cb219c4c4e4c9a1b5e394afafa1859f435f670a0", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -7,7 +7,6 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::intern::Interned;\n use rustc_data_structures::stable_hasher::HashingControls;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -453,7 +452,7 @@ impl<'tcx> AdtDef<'tcx> {\n             }\n             Err(err) => {\n                 let msg = match err {\n-                    ErrorHandled::Reported(ErrorGuaranteed) | ErrorHandled::Linted => {\n+                    ErrorHandled::Reported(_) | ErrorHandled::Linted => {\n                         \"enum discriminant evaluation failed\"\n                     }\n                     ErrorHandled::TooGeneric => \"enum discriminant depends on generics\","}, {"sha": "4b7c1d44cea29f6c6a531fd8519720e9e9eb836d", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -264,7 +264,7 @@ impl<'tcx> Const<'tcx> {\n         if let Some(val) = self.val().try_eval(tcx, param_env) {\n             match val {\n                 Ok(val) => Const::from_value(tcx, val, self.ty()),\n-                Err(ErrorGuaranteed) => tcx.const_error(self.ty()),\n+                Err(ErrorGuaranteed { .. }) => tcx.const_error(self.ty()),\n             }\n         } else {\n             self"}, {"sha": "f51e6c2bc1f4d53736da680bd25bd8096a0f57c2", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -91,7 +91,10 @@ pub trait OnDiskCache<'tcx>: rustc_data_structures::sync::Sync {\n /// except through the error-reporting functions on a [`tcx`][TyCtxt].\n #[derive(Copy, Clone, Debug, Eq, Hash, PartialEq, PartialOrd, Ord)]\n #[derive(TyEncodable, TyDecodable, HashStable)]\n-pub struct DelaySpanBugEmitted(());\n+pub struct DelaySpanBugEmitted {\n+    pub reported: ErrorGuaranteed,\n+    _priv: (),\n+}\n \n type InternedSet<'tcx, T> = ShardedHashMap<InternedInSet<'tcx, T>, ()>;\n \n@@ -1236,8 +1239,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// ensure it gets used.\n     #[track_caller]\n     pub fn ty_error_with_message<S: Into<MultiSpan>>(self, span: S, msg: &str) -> Ty<'tcx> {\n-        self.sess.delay_span_bug(span, msg);\n-        self.mk_ty(Error(DelaySpanBugEmitted(())))\n+        let reported = self.sess.delay_span_bug(span, msg);\n+        self.mk_ty(Error(DelaySpanBugEmitted { reported, _priv: () }))\n     }\n \n     /// Like [TyCtxt::ty_error] but for constants.\n@@ -1258,8 +1261,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         span: S,\n         msg: &str,\n     ) -> Const<'tcx> {\n-        self.sess.delay_span_bug(span, msg);\n-        self.mk_const(ty::ConstS { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })\n+        let reported = self.sess.delay_span_bug(span, msg);\n+        self.mk_const(ty::ConstS {\n+            val: ty::ConstKind::Error(DelaySpanBugEmitted { reported, _priv: () }),\n+            ty,\n+        })\n     }\n \n     pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {\n@@ -2733,7 +2739,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         lint: &'static Lint,\n         hir_id: HirId,\n         span: impl Into<MultiSpan>,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),\n+        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n     ) {\n         let (level, src) = self.lint_level_at_node(lint, hir_id);\n         struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);\n@@ -2743,7 +2749,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         lint: &'static Lint,\n         id: HirId,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),\n+        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n     ) {\n         let (level, src) = self.lint_level_at_node(lint, id);\n         struct_lint_level(self.sess, lint, level, src, None, decorate);"}, {"sha": "780d380da365eceab5a4cdc1504fb95229f4965d", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -51,6 +51,7 @@\n //! ```\n use crate::mir;\n use crate::ty::{self, flags::FlagComputation, Binder, Ty, TyCtxt, TypeFlags};\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::DefId;\n \n use rustc_data_structures::fx::FxHashSet;\n@@ -151,6 +152,13 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn references_error(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_ERROR)\n     }\n+    fn error_reported(&self) -> Option<ErrorGuaranteed> {\n+        if self.references_error() {\n+            Some(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n+        } else {\n+            None\n+        }\n+    }\n     fn has_param_types_or_consts(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)\n     }"}, {"sha": "ab3dc8f020cc9ec2878900e4249169ec15620032", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -118,7 +118,9 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n             };\n \n             let body = tcx.hir().body(body_id);\n-            let (thir, expr) = tcx.thir_body(def);\n+            let (thir, expr) = tcx\n+                .thir_body(def)\n+                .unwrap_or_else(|_| (tcx.alloc_steal_thir(Thir::new()), ExprId::from_u32(0)));\n             // We ran all queries that depended on THIR at the beginning\n             // of `mir_build`, so now we can steal it\n             let thir = thir.steal();\n@@ -229,7 +231,9 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n \n             let return_ty = typeck_results.node_type(id);\n \n-            let (thir, expr) = tcx.thir_body(def);\n+            let (thir, expr) = tcx\n+                .thir_body(def)\n+                .unwrap_or_else(|_| (tcx.alloc_steal_thir(Thir::new()), ExprId::from_u32(0)));\n             // We ran all queries that depended on THIR at the beginning\n             // of `mir_build`, so now we can steal it\n             let thir = thir.steal();"}, {"sha": "122af3f621087122a2f2e1d7deeb2756952d8330", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -405,7 +405,9 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                 } else {\n                     ty::WithOptConstParam::unknown(closure_id)\n                 };\n-                let (closure_thir, expr) = self.tcx.thir_body(closure_def);\n+                let (closure_thir, expr) = self.tcx.thir_body(closure_def).unwrap_or_else(|_| {\n+                    (self.tcx.alloc_steal_thir(Thir::new()), ExprId::from_u32(0))\n+                });\n                 let closure_thir = &closure_thir.borrow();\n                 let hir_context = self.tcx.hir().local_def_id_to_hir_id(closure_id);\n                 let mut closure_visitor =\n@@ -606,7 +608,10 @@ pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalD\n         return;\n     }\n \n-    let (thir, expr) = tcx.thir_body(def);\n+    let (thir, expr) = match tcx.thir_body(def) {\n+        Ok(body) => body,\n+        Err(_) => return,\n+    };\n     let thir = &thir.borrow();\n     // If `thir` is empty, a type error occurred, skip this body.\n     if thir.exprs.is_empty() {"}, {"sha": "426596bf13c0a6a6ac69e8b1e137f4b854c2dbb2", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -7,6 +7,7 @@ use crate::thir::util::UserAnnotatedTyHelpers;\n \n use rustc_ast as ast;\n use rustc_data_structures::steal::Steal;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::HirId;\n@@ -20,22 +21,25 @@ use rustc_span::Span;\n crate fn thir_body<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     owner_def: ty::WithOptConstParam<LocalDefId>,\n-) -> (&'tcx Steal<Thir<'tcx>>, ExprId) {\n+) -> Result<(&'tcx Steal<Thir<'tcx>>, ExprId), ErrorGuaranteed> {\n     let hir = tcx.hir();\n     let body = hir.body(hir.body_owned_by(hir.local_def_id_to_hir_id(owner_def.did)));\n     let mut cx = Cx::new(tcx, owner_def);\n-    if cx.typeck_results.tainted_by_errors.is_some() {\n-        return (tcx.alloc_steal_thir(Thir::new()), ExprId::from_u32(0));\n+    if let Some(reported) = cx.typeck_results.tainted_by_errors {\n+        return Err(reported);\n     }\n     let expr = cx.mirror_expr(&body.value);\n-    (tcx.alloc_steal_thir(cx.thir), expr)\n+    Ok((tcx.alloc_steal_thir(cx.thir), expr))\n }\n \n crate fn thir_tree<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     owner_def: ty::WithOptConstParam<LocalDefId>,\n ) -> String {\n-    format!(\"{:#?}\", thir_body(tcx, owner_def).0.steal())\n+    match thir_body(tcx, owner_def) {\n+        Ok((thir, _)) => format!(\"{:#?}\", thir.steal()),\n+        Err(_) => \"error\".into(),\n+    }\n }\n \n struct Cx<'tcx> {"}, {"sha": "dd7d4e3e514cdd2d485ad2e24ec506af0185b46e", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -194,7 +194,9 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                         lint::builtin::INDIRECT_STRUCTURAL_MATCH,\n                         self.id,\n                         self.span,\n-                        |lint| lint.build(&msg).emit(),\n+                        |lint| {\n+                            lint.build(&msg).emit();\n+                        },\n                     );\n                 } else {\n                     debug!(\n@@ -272,7 +274,9 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                         lint::builtin::ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n                         id,\n                         span,\n-                        |lint| lint.build(\"floating-point types cannot be used in patterns\").emit(),\n+                        |lint| {\n+                            lint.build(\"floating-point types cannot be used in patterns\").emit();\n+                        },\n                     );\n                 }\n                 PatKind::Constant { value: cv }\n@@ -284,7 +288,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 if self.include_lint_checks {\n                     tcx.sess.span_err(span, msg);\n                 } else {\n-                    tcx.sess.delay_span_bug(span, msg)\n+                    tcx.sess.delay_span_bug(span, msg);\n                 }\n                 PatKind::Wild\n             }\n@@ -301,7 +305,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 if self.include_lint_checks {\n                     tcx.sess.span_err(self.span, &msg);\n                 } else {\n-                    tcx.sess.delay_span_bug(self.span, &msg)\n+                    tcx.sess.delay_span_bug(self.span, &msg);\n                 }\n                 PatKind::Wild\n             }\n@@ -331,7 +335,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                                 cv.ty(),\n                                 cv.ty(),\n                             );\n-                            lint.build(&msg).emit()\n+                            lint.build(&msg).emit();\n                         },\n                     );\n                 }\n@@ -356,7 +360,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 if self.include_lint_checks {\n                     tcx.sess.span_err(span, &msg);\n                 } else {\n-                    tcx.sess.delay_span_bug(span, &msg)\n+                    tcx.sess.delay_span_bug(span, &msg);\n                 }\n                 PatKind::Wild\n             }\n@@ -393,7 +397,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                     if self.include_lint_checks {\n                         tcx.sess.span_err(span, &msg);\n                     } else {\n-                        tcx.sess.delay_span_bug(span, &msg)\n+                        tcx.sess.delay_span_bug(span, &msg);\n                     }\n                     PatKind::Wild\n                 }\n@@ -471,7 +475,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                                 lint::builtin::INDIRECT_STRUCTURAL_MATCH,\n                                 self.id,\n                                 self.span,\n-                                |lint| lint.build(&msg).emit(),\n+                                |lint| {lint.build(&msg).emit();},\n                             );\n                         }\n                         PatKind::Constant { value: cv }\n@@ -482,7 +486,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                             if self.include_lint_checks {\n                                 tcx.sess.span_err(span, &msg);\n                             } else {\n-                                tcx.sess.delay_span_bug(span, &msg)\n+                                tcx.sess.delay_span_bug(span, &msg);\n                             }\n                         }\n                         PatKind::Wild\n@@ -539,7 +543,9 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                         lint::builtin::POINTER_STRUCTURAL_MATCH,\n                         id,\n                         span,\n-                        |lint| lint.build(&msg).emit(),\n+                        |lint| {\n+                            lint.build(&msg).emit();\n+                        },\n                     );\n                 }\n                 PatKind::Constant { value: cv }\n@@ -550,7 +556,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 if self.include_lint_checks {\n                     tcx.sess.span_err(span, &msg);\n                 } else {\n-                    tcx.sess.delay_span_bug(span, &msg)\n+                    tcx.sess.delay_span_bug(span, &msg);\n                 }\n                 PatKind::Wild\n             }\n@@ -575,7 +581,9 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 lint::builtin::NONTRIVIAL_STRUCTURAL_MATCH,\n                 id,\n                 span,\n-                |lint| lint.build(&msg).emit(),\n+                |lint| {\n+                    lint.build(&msg).emit();\n+                },\n             );\n         }\n "}, {"sha": "097a6186cd57a85d97b31ad9c926f9681e322938", "filename": "compiler/rustc_mir_transform/src/check_const_item_mutation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -64,7 +64,7 @@ impl<'tcx> ConstMutationChecker<'_, 'tcx> {\n         place: &Place<'tcx>,\n         const_item: DefId,\n         location: Location,\n-        decorate: impl for<'b> FnOnce(LintDiagnosticBuilder<'b>) -> DiagnosticBuilder<'b, ()>,\n+        decorate: impl for<'b> FnOnce(LintDiagnosticBuilder<'b, ()>) -> DiagnosticBuilder<'b, ()>,\n     ) {\n         // Don't lint on borrowing/assigning when a dereference is involved.\n         // If we 'leave' the temporary via a dereference, we must\n@@ -88,7 +88,7 @@ impl<'tcx> ConstMutationChecker<'_, 'tcx> {\n                 |lint| {\n                     decorate(lint)\n                         .span_note(self.tcx.def_span(const_item), \"`const` item defined here\")\n-                        .emit()\n+                        .emit();\n                 },\n             );\n         }"}, {"sha": "f0367958ef8c5e4e7f82cad7916cd245f0296083", "filename": "compiler/rustc_mir_transform/src/check_packed_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -46,7 +46,7 @@ fn unsafe_derive_on_repr_packed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n              does not derive Copy (error E0133)\"\n                 .to_string()\n         };\n-        lint.build(&message).emit()\n+        lint.build(&message).emit();\n     });\n }\n \n@@ -110,7 +110,7 @@ impl<'tcx> Visitor<'tcx> for PackedRefChecker<'_, 'tcx> {\n                                     reference with a raw pointer and use `read_unaligned`/`write_unaligned` \\\n                                     (loads and stores via `*p` must be properly aligned even when using raw pointers)\"\n                                 )\n-                                .emit()\n+                                .emit();\n                         },\n                     );\n                 }"}, {"sha": "5ed33ab9fec17bf0d6a1b2a8ca086f5e313b5040", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -538,7 +538,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             self.tcx.struct_span_lint_hir(lint, lint_root, source_info.span, |lint| {\n                 let mut err = lint.build(message);\n                 err.span_label(source_info.span, format!(\"{:?}\", panic));\n-                err.emit()\n+                err.emit();\n             });\n         }\n     }"}, {"sha": "a9dcc484b9e8de0f553e57b3977833c56aa79b8e", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -180,7 +180,7 @@\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{par_iter, MTLock, MTRef, ParallelIterator};\n-use rustc_errors::{ErrorGuaranteed, FatalError};\n+use rustc_errors::FatalError;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n@@ -716,9 +716,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     match self.tcx.const_eval_resolve(param_env, ct, None) {\n                         // The `monomorphize` call should have evaluated that constant already.\n                         Ok(val) => val,\n-                        Err(ErrorHandled::Reported(ErrorGuaranteed) | ErrorHandled::Linted) => {\n-                            return;\n-                        }\n+                        Err(ErrorHandled::Reported(_) | ErrorHandled::Linted) => return,\n                         Err(ErrorHandled::TooGeneric) => span_bug!(\n                             self.body.source_info(location).span,\n                             \"collection encountered polymorphic constant: {:?}\",\n@@ -750,7 +748,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                         substituted_constant,\n                         val\n                     ),\n-                    Err(ErrorHandled::Reported(ErrorGuaranteed) | ErrorHandled::Linted) => {}\n+                    Err(ErrorHandled::Reported(_) | ErrorHandled::Linted) => {}\n                     Err(ErrorHandled::TooGeneric) => span_bug!(\n                         self.body.source_info(location).span,\n                         \"collection encountered polymorphic constant: {}\",\n@@ -864,7 +862,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     |lint| {\n                         let mut err = lint.build(&format!(\"moving {} bytes\", layout.size.bytes()));\n                         err.span_label(source_info.span, \"value moved from here\");\n-                        err.emit()\n+                        err.emit();\n                     },\n                 );\n             }"}, {"sha": "bec4561928cc259081ec91a482126e0b48702040", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -202,7 +202,7 @@ pub(crate) fn emit_unescape_error(\n             diag.emit();\n         }\n         EscapeError::TooShortHexEscape => {\n-            handler.span_err(span, \"numeric character escape is too short\")\n+            handler.span_err(span, \"numeric character escape is too short\");\n         }\n         EscapeError::InvalidCharInHexEscape | EscapeError::InvalidCharInUnicodeEscape => {\n             let (c, span) = last_char();"}, {"sha": "27e83394611ac348bafe5c35114388f1439c27d9", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -212,10 +212,10 @@ impl<'a> Parser<'a> {\n             if let Err(mut e) = self.expect_semi() {\n                 match tree.kind {\n                     UseTreeKind::Glob => {\n-                        e.note(\"the wildcard token must be last on the path\").emit();\n+                        e.note(\"the wildcard token must be last on the path\");\n                     }\n                     UseTreeKind::Nested(..) => {\n-                        e.note(\"glob-like brace syntax must be last on the path\").emit();\n+                        e.note(\"glob-like brace syntax must be last on the path\");\n                     }\n                     _ => (),\n                 }\n@@ -1507,7 +1507,7 @@ impl<'a> Parser<'a> {\n                     // Make sure an error was emitted (either by recovering an angle bracket,\n                     // or by finding an identifier as the next token), since we're\n                     // going to continue parsing\n-                    assert!(self.sess.span_diagnostic.has_errors());\n+                    assert!(self.sess.span_diagnostic.has_errors().is_some());\n                 } else {\n                     return Err(err);\n                 }"}, {"sha": "ebf6678d3ad37f7a5dc5ba644b685cc687a056ce", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -169,7 +169,7 @@ impl CheckAttrVisitor<'_> {\n                             }\n                             ast::AttrStyle::Inner => \"crate-level attribute should be in the root module\",\n                         };\n-                        lint.build(msg).emit()\n+                        lint.build(msg).emit();\n                     });\n                 }\n             }\n@@ -236,7 +236,7 @@ impl CheckAttrVisitor<'_> {\n             | Target::Method(MethodKind::Trait { body: true } | MethodKind::Inherent) => true,\n             Target::Method(MethodKind::Trait { body: false }) | Target::ForeignFn => {\n                 self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n-                    lint.build(\"`#[inline]` is ignored on function prototypes\").emit()\n+                    lint.build(\"`#[inline]` is ignored on function prototypes\").emit();\n                 });\n                 true\n             }"}, {"sha": "7298aba7e8763ddf4be9295dacf8e8fafd430f8e", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -1588,7 +1588,7 @@ impl<'tcx> Liveness<'_, 'tcx> {\n                                 shorthands,\n                                 Applicability::MachineApplicable,\n                             );\n-                            err.emit()\n+                            err.emit();\n                         },\n                     );\n                 } else {\n@@ -1611,7 +1611,7 @@ impl<'tcx> Liveness<'_, 'tcx> {\n                                 non_shorthands,\n                                 Applicability::MachineApplicable,\n                             );\n-                            err.emit()\n+                            err.emit();\n                         },\n                     );\n                 }"}, {"sha": "09be1dac6f1638e33abbfd353a477492cb03b656", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -128,7 +128,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n                             String::new(),\n                             rustc_errors::Applicability::MachineApplicable,\n                         )\n-                        .emit()\n+                        .emit();\n                 });\n             }\n \n@@ -728,10 +728,10 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n                                 INEFFECTIVE_UNSTABLE_TRAIT_IMPL,\n                                 item.hir_id(),\n                                 span,\n-                                |lint| lint\n+                                |lint| {lint\n                                     .build(\"an `#[unstable]` annotation here has no effect\")\n                                     .note(\"see issue #55436 <https://github.com/rust-lang/rust/issues/55436> for more information\")\n-                                    .emit()\n+                                    .emit();}\n                             );\n                         }\n                     }"}, {"sha": "1f286d557ca0baf5dfdae0138e4c92d802e1a575", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -1742,7 +1742,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n                         descr,\n                         self.tcx.crate_name(def_id.krate)\n                     ))\n-                    .emit()\n+                    .emit();\n                 },\n             );\n         }\n@@ -1786,7 +1786,9 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n                     lint::builtin::PRIVATE_IN_PUBLIC,\n                     hir_id,\n                     span,\n-                    |lint| lint.build(&format!(\"{} (error {})\", make_msg(), err_code)).emit(),\n+                    |lint| {\n+                        lint.build(&format!(\"{} (error {})\", make_msg(), err_code)).emit();\n+                    },\n                 );\n             }\n         }"}, {"sha": "1394f4083d0b9a1c4b58d347688e64a4ffe0860f", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -1997,7 +1997,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                     Vec::new(),\n                     &[],\n                 );\n-                db.emit()\n+                db.emit();\n             },\n         );\n     }"}, {"sha": "7e743481a51fcaefa991d556a6f2a4347788437b", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -3143,10 +3143,12 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             for bound in lifetime_i.bounds {\n                 match bound {\n                     hir::GenericBound::Outlives(ref lt) => match lt.name {\n-                        hir::LifetimeName::Underscore => self.tcx.sess.delay_span_bug(\n-                            lt.span,\n-                            \"use of `'_` in illegal place, but not caught by lowering\",\n-                        ),\n+                        hir::LifetimeName::Underscore => {\n+                            self.tcx.sess.delay_span_bug(\n+                                lt.span,\n+                                \"use of `'_` in illegal place, but not caught by lowering\",\n+                            );\n+                        }\n                         hir::LifetimeName::Static => {\n                             self.insert_lifetime(lt, Region::Static);\n                             self.tcx\n@@ -3172,7 +3174,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                                 lt.span,\n                                 \"lowering generated `ImplicitObjectLifetimeDefault` \\\n                                  outside of an object type\",\n-                            )\n+                            );\n                         }\n                         hir::LifetimeName::Error => {\n                             // No need to do anything, error already reported."}, {"sha": "7f696da86f20ea54eac2c356f7051ec4707792ce", "filename": "compiler/rustc_session/src/output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foutput.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -100,7 +100,7 @@ pub fn validate_crate_name(sess: &Session, s: &str, sp: Option<Span>) {\n             match sp {\n                 Some(sp) => sess.span_err(sp, s),\n                 None => sess.err(s),\n-            }\n+            };\n             err_count += 1;\n         };\n         if s.is_empty() {"}, {"sha": "7eeb6f90f99d9e5578ccbb39ba7bb3fbece00727", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -262,7 +262,7 @@ impl Session {\n             }\n             diag.emit();\n             // If we should err, make sure we did.\n-            if must_err && !self.has_errors() {\n+            if must_err && !self.has_errors().is_some() {\n                 // We have skipped a feature gate, and not run into other errors... reject.\n                 self.err(\n                     \"`-Zunleash-the-miri-inside-of-you` may not be used to circumvent feature \\\n@@ -404,13 +404,13 @@ impl Session {\n             self.span_err(sp, msg);\n         }\n     }\n-    pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n+    pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ErrorGuaranteed {\n         self.diagnostic().span_err(sp, msg)\n     }\n     pub fn span_err_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: DiagnosticId) {\n         self.diagnostic().span_err_with_code(sp, &msg, code)\n     }\n-    pub fn err(&self, msg: &str) {\n+    pub fn err(&self, msg: &str) -> ErrorGuaranteed {\n         self.diagnostic().err(msg)\n     }\n     pub fn emit_err<'a>(&'a self, err: impl SessionDiagnostic<'a>) -> ErrorGuaranteed {\n@@ -420,7 +420,7 @@ impl Session {\n     pub fn err_count(&self) -> usize {\n         self.diagnostic().err_count()\n     }\n-    pub fn has_errors(&self) -> bool {\n+    pub fn has_errors(&self) -> Option<ErrorGuaranteed> {\n         self.diagnostic().has_errors()\n     }\n     pub fn has_errors_or_delayed_span_bugs(&self) -> bool {\n@@ -430,9 +430,9 @@ impl Session {\n         self.diagnostic().abort_if_errors();\n     }\n     pub fn compile_status(&self) -> Result<(), ErrorGuaranteed> {\n-        if self.diagnostic().has_errors_or_lint_errors() {\n-            self.diagnostic().emit_stashed_diagnostics();\n-            Err(ErrorGuaranteed)\n+        if let Some(reported) = self.diagnostic().has_errors_or_lint_errors() {\n+            let _ = self.diagnostic().emit_stashed_diagnostics();\n+            Err(reported)\n         } else {\n             Ok(())\n         }\n@@ -444,7 +444,11 @@ impl Session {\n     {\n         let old_count = self.err_count();\n         let result = f();\n-        if self.err_count() == old_count { Ok(result) } else { Err(ErrorGuaranteed) }\n+        if self.err_count() == old_count {\n+            Ok(result)\n+        } else {\n+            Err(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n+        }\n     }\n     pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.diagnostic().span_warn(sp, msg)\n@@ -457,7 +461,7 @@ impl Session {\n     }\n     /// Delay a span_bug() call until abort_if_errors()\n     #[track_caller]\n-    pub fn delay_span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n+    pub fn delay_span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ErrorGuaranteed {\n         self.diagnostic().delay_span_bug(sp, msg)\n     }\n \n@@ -1387,12 +1391,18 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n     let unsupported_sanitizers = sess.opts.debugging_opts.sanitizer - supported_sanitizers;\n     match unsupported_sanitizers.into_iter().count() {\n         0 => {}\n-        1 => sess\n-            .err(&format!(\"{} sanitizer is not supported for this target\", unsupported_sanitizers)),\n-        _ => sess.err(&format!(\n-            \"{} sanitizers are not supported for this target\",\n-            unsupported_sanitizers\n-        )),\n+        1 => {\n+            sess.err(&format!(\n+                \"{} sanitizer is not supported for this target\",\n+                unsupported_sanitizers\n+            ));\n+        }\n+        _ => {\n+            sess.err(&format!(\n+                \"{} sanitizers are not supported for this target\",\n+                unsupported_sanitizers\n+            ));\n+        }\n     }\n     // Cannot mix and match sanitizers.\n     let mut sanitizer_iter = sess.opts.debugging_opts.sanitizer.into_iter();\n@@ -1446,7 +1456,7 @@ pub enum IncrCompSession {\n     InvalidBecauseOfErrors { session_directory: PathBuf },\n }\n \n-pub fn early_error_no_abort(output: config::ErrorOutputType, msg: &str) {\n+pub fn early_error_no_abort(output: config::ErrorOutputType, msg: &str) -> ErrorGuaranteed {\n     let emitter: Box<dyn Emitter + sync::Send> = match output {\n         config::ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();\n@@ -1457,7 +1467,8 @@ pub fn early_error_no_abort(output: config::ErrorOutputType, msg: &str) {\n         }\n     };\n     let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n-    handler.struct_fatal(msg).emit();\n+    let reported = handler.struct_fatal(msg).emit();\n+    reported\n }\n \n pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {"}, {"sha": "a607fb6c1b87c392c2547ed9f88fed1eddf02939", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -51,29 +51,29 @@ pub fn codegen_fulfill_obligation<'tcx>(\n                 // leading to an ambiguous result. So report this as an\n                 // overflow bug, since I believe this is the only case\n                 // where ambiguity can result.\n-                infcx.tcx.sess.delay_span_bug(\n+                let reported = infcx.tcx.sess.delay_span_bug(\n                     rustc_span::DUMMY_SP,\n                     &format!(\n                         \"encountered ambiguity selecting `{:?}` during codegen, presuming due to \\\n                          overflow or prior type error\",\n                         trait_ref\n                     ),\n                 );\n-                return Err(ErrorGuaranteed);\n+                return Err(reported);\n             }\n             Err(Unimplemented) => {\n                 // This can trigger when we probe for the source of a `'static` lifetime requirement\n                 // on a trait object: `impl Foo for dyn Trait {}` has an implicit `'static` bound.\n                 // This can also trigger when we have a global bound that is not actually satisfied,\n                 // but was included during typeck due to the trivial_bounds feature.\n-                infcx.tcx.sess.delay_span_bug(\n+                let guar = infcx.tcx.sess.delay_span_bug(\n                     rustc_span::DUMMY_SP,\n                     &format!(\n                         \"Encountered error `Unimplemented` selecting `{:?}` during codegen\",\n                         trait_ref\n                     ),\n                 );\n-                return Err(ErrorGuaranteed);\n+                return Err(guar);\n             }\n             Err(e) => {\n                 bug!(\"Encountered error `{:?}` selecting `{:?}` during codegen\", e, trait_ref)"}, {"sha": "40a39c4cfc2e39564eed2c6cd2f87d4c28eddc84", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -18,7 +18,7 @@ use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::thir;\n use rustc_middle::thir::abstract_const::{self, Node, NodeId, NotConstEvaluatable};\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n-use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, DelaySpanBugEmitted, TyCtxt, TypeFoldable};\n use rustc_session::lint;\n use rustc_span::def_id::LocalDefId;\n use rustc_span::Span;\n@@ -177,8 +177,9 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n             false => NotConstEvaluatable::MentionsParam,\n         }),\n         Err(ErrorHandled::Linted) => {\n-            infcx.tcx.sess.delay_span_bug(span, \"constant in type had error reported as lint\");\n-            Err(NotConstEvaluatable::Error(ErrorGuaranteed))\n+            let reported =\n+                infcx.tcx.sess.delay_span_bug(span, \"constant in type had error reported as lint\");\n+            Err(NotConstEvaluatable::Error(reported))\n         }\n         Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e)),\n         Ok(_) => Ok(()),\n@@ -244,7 +245,7 @@ impl<'tcx> AbstractConst<'tcx> {\n     ) -> Result<Option<AbstractConst<'tcx>>, ErrorGuaranteed> {\n         match ct.val() {\n             ty::ConstKind::Unevaluated(uv) => AbstractConst::new(tcx, uv.shrink()),\n-            ty::ConstKind::Error(_) => Err(ErrorGuaranteed),\n+            ty::ConstKind::Error(DelaySpanBugEmitted { reported, .. }) => Err(reported),\n             _ => Ok(None),\n         }\n     }\n@@ -280,25 +281,27 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n     }\n \n     fn error(&mut self, span: Span, msg: &str) -> Result<!, ErrorGuaranteed> {\n-        self.tcx\n+        let reported = self\n+            .tcx\n             .sess\n             .struct_span_err(self.root_span(), \"overly complex generic constant\")\n             .span_label(span, msg)\n             .help(\"consider moving this anonymous constant into a `const` function\")\n             .emit();\n \n-        Err(ErrorGuaranteed)\n+        Err(reported)\n     }\n     fn maybe_supported_error(&mut self, span: Span, msg: &str) -> Result<!, ErrorGuaranteed> {\n-        self.tcx\n+        let reported = self\n+            .tcx\n             .sess\n             .struct_span_err(self.root_span(), \"overly complex generic constant\")\n             .span_label(span, msg)\n             .help(\"consider moving this anonymous constant into a `const` function\")\n             .note(\"this operation may be supported in the future\")\n             .emit();\n \n-        Err(ErrorGuaranteed)\n+        Err(reported)\n     }\n \n     fn new(\n@@ -553,11 +556,7 @@ pub(super) fn thir_abstract_const<'tcx>(\n             _ => return Ok(None),\n         }\n \n-        let body = tcx.thir_body(def);\n-        if body.0.borrow().exprs.is_empty() {\n-            // type error in constant, there is no thir\n-            return Err(ErrorGuaranteed);\n-        }\n+        let body = tcx.thir_body(def)?;\n \n         AbstractConstBuilder::new(tcx, (&*body.0.borrow(), body.1))?\n             .map(AbstractConstBuilder::build)\n@@ -580,7 +579,7 @@ pub(super) fn try_unify_abstract_consts<'tcx>(\n \n         Ok(false)\n     })()\n-    .unwrap_or_else(|ErrorGuaranteed| true)\n+    .unwrap_or_else(|_: ErrorGuaranteed| true)\n     // FIXME(generic_const_exprs): We should instead have this\n     // method return the resulting `ty::Const` and return `ConstKind::Error`\n     // on `ErrorGuaranteed`."}, {"sha": "229e108d5d64070322005adec4cd33e4962119ba", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -63,7 +63,7 @@ pub trait InferCtxtExt<'tcx> {\n         errors: &[FulfillmentError<'tcx>],\n         body_id: Option<hir::BodyId>,\n         fallback_has_occurred: bool,\n-    );\n+    ) -> ErrorGuaranteed;\n \n     fn report_overflow_error<T>(\n         &self,\n@@ -111,7 +111,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         errors: &[FulfillmentError<'tcx>],\n         body_id: Option<hir::BodyId>,\n         fallback_has_occurred: bool,\n-    ) {\n+    ) -> ErrorGuaranteed {\n         #[derive(Debug)]\n         struct ErrorDescriptor<'tcx> {\n             predicate: ty::Predicate<'tcx>,\n@@ -190,6 +190,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 self.report_fulfillment_error(error, body_id, fallback_has_occurred);\n             }\n         }\n+\n+        self.tcx.sess.delay_span_bug(DUMMY_SP, \"expected fullfillment errors\")\n     }\n \n     /// Reports that an overflow has occurred and halts compilation. We\n@@ -312,7 +314,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         let predicate_is_const = ty::BoundConstness::ConstIfConst\n                             == trait_predicate.skip_binder().constness;\n \n-                        if self.tcx.sess.has_errors() && trait_predicate.references_error() {\n+                        if self.tcx.sess.has_errors().is_some()\n+                            && trait_predicate.references_error()\n+                        {\n                             return;\n                         }\n                         let trait_ref = trait_predicate.to_poly_trait_ref();\n@@ -919,7 +923,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n \n             // Already reported in the query.\n-            SelectionError::NotConstEvaluatable(NotConstEvaluatable::Error(ErrorGuaranteed)) => {\n+            SelectionError::NotConstEvaluatable(NotConstEvaluatable::Error(_)) => {\n                 // FIXME(eddyb) remove this once `ErrorGuaranteed` becomes a proof token.\n                 self.tcx.sess.delay_span_bug(span, \"`ErrorGuaranteed` without an error\");\n                 return;\n@@ -1857,7 +1861,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                 // Same hacky approach as above to avoid deluging user\n                 // with error messages.\n                 if arg.references_error()\n-                    || self.tcx.sess.has_errors()\n+                    || self.tcx.sess.has_errors().is_some()\n                     || self.is_tainted_by_errors()\n                 {\n                     return;\n@@ -1868,7 +1872,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n \n             ty::PredicateKind::Subtype(data) => {\n                 if data.references_error()\n-                    || self.tcx.sess.has_errors()\n+                    || self.tcx.sess.has_errors().is_some()\n                     || self.is_tainted_by_errors()\n                 {\n                     // no need to overload user in such cases\n@@ -1910,7 +1914,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n             }\n \n             _ => {\n-                if self.tcx.sess.has_errors() || self.is_tainted_by_errors() {\n+                if self.tcx.sess.has_errors().is_some() || self.is_tainted_by_errors() {\n                     return;\n                 }\n                 let mut err = struct_span_err!("}, {"sha": "9ac8dc59a1d1ea9110f39f2fe8f4b6d2a8ec636e", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -3,7 +3,6 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::obligation_forest::ProcessResult;\n use rustc_data_structures::obligation_forest::{Error, ForestObligation, Outcome};\n use rustc_data_structures::obligation_forest::{ObligationForest, ObligationProcessor};\n-use rustc_errors::ErrorGuaranteed;\n use rustc_infer::traits::ProjectionCacheKey;\n use rustc_infer::traits::{SelectionError, TraitEngine, TraitEngineExt as _, TraitObligation};\n use rustc_middle::mir::interpret::ErrorHandled;\n@@ -630,14 +629,12 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                                 ),\n                             }\n                         }\n-                        (Err(ErrorHandled::Reported(ErrorGuaranteed)), _)\n-                        | (_, Err(ErrorHandled::Reported(ErrorGuaranteed))) => {\n-                            ProcessResult::Error(CodeSelectionError(\n-                                SelectionError::NotConstEvaluatable(NotConstEvaluatable::Error(\n-                                    ErrorGuaranteed,\n-                                )),\n-                            ))\n-                        }\n+                        (Err(ErrorHandled::Reported(reported)), _)\n+                        | (_, Err(ErrorHandled::Reported(reported))) => ProcessResult::Error(\n+                            CodeSelectionError(SelectionError::NotConstEvaluatable(\n+                                NotConstEvaluatable::Error(reported),\n+                            )),\n+                        ),\n                         (Err(ErrorHandled::Linted), _) | (_, Err(ErrorHandled::Linted)) => {\n                             span_bug!(\n                                 obligation.cause.span(self.selcx.tcx()),"}, {"sha": "a1efeb0b06b9b7fb5e4b680529399ec9f92ff3fc", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -231,8 +231,8 @@ fn do_normalize_predicates<'tcx>(\n             match fully_normalize(&infcx, fulfill_cx, cause, elaborated_env, predicates) {\n                 Ok(predicates) => predicates,\n                 Err(errors) => {\n-                    infcx.report_fulfillment_errors(&errors, None, false);\n-                    return Err(ErrorGuaranteed);\n+                    let reported = infcx.report_fulfillment_errors(&errors, None, false);\n+                    return Err(reported);\n                 }\n             };\n \n@@ -258,13 +258,15 @@ fn do_normalize_predicates<'tcx>(\n                 // represents a legitimate failure due to some kind of\n                 // unconstrained variable, and it seems better not to ICE,\n                 // all things considered.\n-                tcx.sess.span_err(span, &fixup_err.to_string());\n-                return Err(ErrorGuaranteed);\n+                let reported = tcx.sess.span_err(span, &fixup_err.to_string());\n+                return Err(reported);\n             }\n         };\n         if predicates.needs_infer() {\n-            tcx.sess.delay_span_bug(span, \"encountered inference variables after `fully_resolve`\");\n-            Err(ErrorGuaranteed)\n+            let reported = tcx\n+                .sess\n+                .delay_span_bug(span, \"encountered inference variables after `fully_resolve`\");\n+            Err(reported)\n         } else {\n             Ok(predicates)\n         }"}, {"sha": "38be28c07ff1837045528590c2bbdc3a8b43308f", "filename": "compiler/rustc_trait_selection/src/traits/on_unimplemented.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::ty::{self, GenericParamDefKind, TyCtxt};\n use rustc_parse_format::{ParseMode, Parser, Piece, Position};\n use rustc_span::symbol::{kw, sym, Symbol};\n-use rustc_span::Span;\n+use rustc_span::{Span, DUMMY_SP};\n \n #[derive(Clone, Debug)]\n pub struct OnUnimplementedFormatString(Symbol);\n@@ -47,8 +47,7 @@ fn parse_error(\n     if let Some(note) = note {\n         diag.note(note);\n     }\n-    diag.emit();\n-    ErrorGuaranteed\n+    diag.emit()\n }\n \n impl<'tcx> OnUnimplementedDirective {\n@@ -59,7 +58,7 @@ impl<'tcx> OnUnimplementedDirective {\n         span: Span,\n         is_root: bool,\n     ) -> Result<Self, ErrorGuaranteed> {\n-        let mut errored = false;\n+        let mut errored = None;\n         let mut item_iter = items.iter();\n \n         let parse_value = |value_str| {\n@@ -91,8 +90,8 @@ impl<'tcx> OnUnimplementedDirective {\n                     )\n                 })?;\n             attr::eval_condition(cond, &tcx.sess.parse_sess, Some(tcx.features()), &mut |item| {\n-                if let Some(symbol) = item.value_str() && parse_value(symbol).is_err() {\n-                    errored = true;\n+                if let Some(symbol) = item.value_str() && let Err(guar) = parse_value(symbol) {\n+                    errored = Some(guar);\n                 }\n                 true\n             });\n@@ -134,13 +133,10 @@ impl<'tcx> OnUnimplementedDirective {\n                 && note.is_none()\n             {\n                 if let Some(items) = item.meta_item_list() {\n-                    if let Ok(subcommand) =\n-                        Self::parse(tcx, item_def_id, &items, item.span(), false)\n-                    {\n-                        subcommands.push(subcommand);\n-                    } else {\n-                        errored = true;\n-                    }\n+                    match Self::parse(tcx, item_def_id, &items, item.span(), false) {\n+                        Ok(subcommand) => subcommands.push(subcommand),\n+                        Err(reported) => errored = Some(reported),\n+                    };\n                     continue;\n                 }\n             } else if item.has_name(sym::append_const_msg) && append_const_msg.is_none() {\n@@ -163,8 +159,8 @@ impl<'tcx> OnUnimplementedDirective {\n             );\n         }\n \n-        if errored {\n-            Err(ErrorGuaranteed)\n+        if let Some(reported) = errored {\n+            Err(reported)\n         } else {\n             Ok(OnUnimplementedDirective {\n                 condition,\n@@ -203,7 +199,9 @@ impl<'tcx> OnUnimplementedDirective {\n                 append_const_msg: None,\n             }))\n         } else {\n-            return Err(ErrorGuaranteed);\n+            let reported =\n+                tcx.sess.delay_span_bug(DUMMY_SP, \"of_item: neither meta_item_list nor value_str\");\n+            return Err(reported);\n         };\n         debug!(\"of_item({:?}) = {:?}\", item_def_id, result);\n         result\n@@ -327,7 +325,7 @@ impl<'tcx> OnUnimplementedFormatString {\n                         match generics.params.iter().find(|param| param.name == s) {\n                             Some(_) => (),\n                             None => {\n-                                struct_span_err!(\n+                                let reported = struct_span_err!(\n                                     tcx.sess,\n                                     span,\n                                     E0230,\n@@ -340,20 +338,20 @@ impl<'tcx> OnUnimplementedFormatString {\n                                     }\n                                 )\n                                 .emit();\n-                                result = Err(ErrorGuaranteed);\n+                                result = Err(reported);\n                             }\n                         }\n                     }\n                     // `{:1}` and `{}` are not to be used\n                     Position::ArgumentIs(_) | Position::ArgumentImplicitlyIs(_) => {\n-                        struct_span_err!(\n+                        let reported = struct_span_err!(\n                             tcx.sess,\n                             span,\n                             E0231,\n                             \"only named substitution parameters are allowed\"\n                         )\n                         .emit();\n-                        result = Err(ErrorGuaranteed);\n+                        result = Err(reported);\n                     }\n                 },\n             }"}, {"sha": "614a5e048099762c8d592711b3ac66875d6a876a", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -1396,7 +1396,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                 // `rustc_ty_utils::instance::resolve_associated_item()`.\n                 let node_item =\n                     assoc_def(selcx, impl_data.impl_def_id, obligation.predicate.item_def_id)\n-                        .map_err(|ErrorGuaranteed| ())?;\n+                        .map_err(|ErrorGuaranteed { .. }| ())?;\n \n                 if node_item.is_final() {\n                     // Non-specializable items are always projectable."}, {"sha": "cf929ee3cc056729ba946ec8266c7f6017094a36", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -29,7 +29,7 @@ use crate::traits::project::ProjectionCacheKeyExt;\n use crate::traits::ProjectionCacheKey;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n-use rustc_errors::{Diagnostic, ErrorGuaranteed};\n+use rustc_errors::Diagnostic;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::LateBoundRegionConversionTime;\n@@ -674,8 +674,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                 Err(_) => Ok(EvaluatedToErr),\n                             }\n                         }\n-                        (Err(ErrorHandled::Reported(ErrorGuaranteed)), _)\n-                        | (_, Err(ErrorHandled::Reported(ErrorGuaranteed))) => Ok(EvaluatedToErr),\n+                        (Err(ErrorHandled::Reported(_)), _)\n+                        | (_, Err(ErrorHandled::Reported(_))) => Ok(EvaluatedToErr),\n                         (Err(ErrorHandled::Linted), _) | (_, Err(ErrorHandled::Linted)) => {\n                             span_bug!(\n                                 obligation.cause.span(self.tcx()),"}, {"sha": "79471065ccc67899834f1b07533a865aca6c5610", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -16,14 +16,14 @@ use crate::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCause, TraitEngine};\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::struct_span_err;\n+use rustc_errors::{struct_span_err, EmissionGuarantee};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::builtin::COHERENCE_LEAK_CHECK;\n use rustc_session::lint::builtin::ORDER_DEPENDENT_TRAIT_OBJECTS;\n-use rustc_span::DUMMY_SP;\n+use rustc_span::{Span, DUMMY_SP};\n \n use super::util::impl_trait_ref_and_oblig;\n use super::{FulfillmentContext, SelectionContext};\n@@ -377,8 +377,7 @@ fn report_negative_positive_conflict(\n         }\n     }\n \n-    sg.has_errored = true;\n-    err.emit();\n+    sg.has_errored = Some(err.emit());\n }\n \n fn report_conflicting_impls(\n@@ -394,7 +393,13 @@ fn report_conflicting_impls(\n     // Work to be done after we've built the DiagnosticBuilder. We have to define it\n     // now because the struct_lint methods don't return back the DiagnosticBuilder\n     // that's passed in.\n-    let decorate = |err: LintDiagnosticBuilder<'_>| {\n+    fn decorate<G: EmissionGuarantee>(\n+        tcx: TyCtxt<'_>,\n+        overlap: OverlapError,\n+        used_to_be_allowed: Option<FutureCompatOverlapErrorKind>,\n+        impl_span: Span,\n+        err: LintDiagnosticBuilder<'_, G>,\n+    ) -> G {\n         let msg = format!(\n             \"conflicting implementations of trait `{}`{}{}\",\n             overlap.trait_desc,\n@@ -440,17 +445,25 @@ fn report_conflicting_impls(\n             coherence::add_placeholder_note(&mut err);\n         }\n         err.emit()\n-    };\n+    }\n \n     match used_to_be_allowed {\n         None => {\n-            sg.has_errored = true;\n-            if overlap.with_impl.is_local() || !tcx.orphan_check_crate(()).contains(&impl_def_id) {\n+            let reported = if overlap.with_impl.is_local()\n+                || !tcx.orphan_check_crate(()).contains(&impl_def_id)\n+            {\n                 let err = struct_span_err!(tcx.sess, impl_span, E0119, \"\");\n-                decorate(LintDiagnosticBuilder::new(err.forget_guarantee()));\n+                Some(decorate(\n+                    tcx,\n+                    overlap,\n+                    used_to_be_allowed,\n+                    impl_span,\n+                    LintDiagnosticBuilder::new(err),\n+                ))\n             } else {\n-                tcx.sess.delay_span_bug(impl_span, \"impl should have failed the orphan check\");\n-            }\n+                Some(tcx.sess.delay_span_bug(impl_span, \"impl should have failed the orphan check\"))\n+            };\n+            sg.has_errored = reported;\n         }\n         Some(kind) => {\n             let lint = match kind {\n@@ -461,8 +474,10 @@ fn report_conflicting_impls(\n                 lint,\n                 tcx.hir().local_def_id_to_hir_id(impl_def_id),\n                 impl_span,\n-                decorate,\n-            )\n+                |ldb| {\n+                    decorate(tcx, overlap, used_to_be_allowed, impl_span, ldb);\n+                },\n+            );\n         }\n     };\n }"}, {"sha": "295a91959eb194f0bdb9cad22b0621c160d35fa8", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -306,9 +306,9 @@ fn resolve_associated_item<'tcx>(\n                         resolved_ty,\n                     );\n                     let span = tcx.def_span(leaf_def.item.def_id);\n-                    tcx.sess.delay_span_bug(span, &msg);\n+                    let reported = tcx.sess.delay_span_bug(span, &msg);\n \n-                    return Err(ErrorGuaranteed);\n+                    return Err(reported);\n                 }\n             }\n "}, {"sha": "5f01559226c77779279c03ceeb1db51645b2c08d", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -1,6 +1,6 @@\n use crate::astconv::AstConv;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{pluralize, struct_span_err, Applicability};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty;\n@@ -195,7 +195,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         ty_param_name: &str,\n         assoc_name: Ident,\n         span: Span,\n-    ) where\n+    ) -> ErrorGuaranteed\n+    where\n         I: Iterator<Item = ty::PolyTraitRef<'tcx>>,\n     {\n         // The fallback span is needed because `assoc_name` might be an `Fn()`'s `Output` without a\n@@ -231,7 +232,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             err.span_label(span, format!(\"associated type `{}` not found\", assoc_name));\n         }\n \n-        err.emit();\n+        err.emit()\n     }\n \n     /// When there are any missing associated types, emit an E0191 error and attempt to supply a"}, {"sha": "d56c521d23d32058d3f40e3728063b9abd67fc08", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 54, "deletions": 50, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -6,7 +6,7 @@ use crate::astconv::{\n use crate::errors::AssocTypeBindingNotAllowed;\n use crate::structured_errors::{GenericArgsInfo, StructuredDiagnostic, WrongNumberOfGenericArgs};\n use rustc_ast::ast::ParamKindOrd;\n-use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorGuaranteed};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -456,51 +456,55 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let mut invalid_args = vec![];\n \n-        let mut check_lifetime_args = |min_expected_args: usize,\n-                                       max_expected_args: usize,\n-                                       provided_args: usize,\n-                                       late_bounds_ignore: bool|\n-         -> bool {\n-            if (min_expected_args..=max_expected_args).contains(&provided_args) {\n-                return true;\n-            }\n+        let mut check_lifetime_args =\n+            |min_expected_args: usize,\n+             max_expected_args: usize,\n+             provided_args: usize,\n+             late_bounds_ignore: bool| {\n+                if (min_expected_args..=max_expected_args).contains(&provided_args) {\n+                    return Ok(());\n+                }\n \n-            if late_bounds_ignore {\n-                return true;\n-            }\n+                if late_bounds_ignore {\n+                    return Ok(());\n+                }\n \n-            if provided_args > max_expected_args {\n-                invalid_args.extend(\n-                    gen_args.args[max_expected_args..provided_args].iter().map(|arg| arg.span()),\n-                );\n-            };\n+                if provided_args > max_expected_args {\n+                    invalid_args.extend(\n+                        gen_args.args[max_expected_args..provided_args]\n+                            .iter()\n+                            .map(|arg| arg.span()),\n+                    );\n+                };\n \n-            let gen_args_info = if provided_args > min_expected_args {\n-                invalid_args.extend(\n-                    gen_args.args[min_expected_args..provided_args].iter().map(|arg| arg.span()),\n-                );\n-                let num_redundant_args = provided_args - min_expected_args;\n-                GenericArgsInfo::ExcessLifetimes { num_redundant_args }\n-            } else {\n-                let num_missing_args = min_expected_args - provided_args;\n-                GenericArgsInfo::MissingLifetimes { num_missing_args }\n+                let gen_args_info = if provided_args > min_expected_args {\n+                    invalid_args.extend(\n+                        gen_args.args[min_expected_args..provided_args]\n+                            .iter()\n+                            .map(|arg| arg.span()),\n+                    );\n+                    let num_redundant_args = provided_args - min_expected_args;\n+                    GenericArgsInfo::ExcessLifetimes { num_redundant_args }\n+                } else {\n+                    let num_missing_args = min_expected_args - provided_args;\n+                    GenericArgsInfo::MissingLifetimes { num_missing_args }\n+                };\n+\n+                let reported = WrongNumberOfGenericArgs::new(\n+                    tcx,\n+                    gen_args_info,\n+                    seg,\n+                    gen_params,\n+                    has_self as usize,\n+                    gen_args,\n+                    def_id,\n+                )\n+                .diagnostic()\n+                .emit();\n+\n+                Err(reported)\n             };\n \n-            WrongNumberOfGenericArgs::new(\n-                tcx,\n-                gen_args_info,\n-                seg,\n-                gen_params,\n-                has_self as usize,\n-                gen_args,\n-                def_id,\n-            )\n-            .diagnostic()\n-            .emit();\n-\n-            false\n-        };\n-\n         let min_expected_lifetime_args = if infer_lifetimes { 0 } else { param_counts.lifetimes };\n         let max_expected_lifetime_args = param_counts.lifetimes;\n         let num_provided_lifetime_args = gen_args.num_lifetime_params();\n@@ -527,7 +531,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 \"check_types_and_consts\"\n             );\n             if (expected_min..=expected_max).contains(&provided) {\n-                return true;\n+                return Ok(());\n             }\n \n             let num_default_params = expected_max - expected_min;\n@@ -561,7 +565,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n             debug!(?gen_args_info);\n \n-            WrongNumberOfGenericArgs::new(\n+            let reported = WrongNumberOfGenericArgs::new(\n                 tcx,\n                 gen_args_info,\n                 seg,\n@@ -573,7 +577,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             .diagnostic()\n             .emit_unless(gen_args.has_err());\n \n-            false\n+            Err(reported)\n         };\n \n         let args_correct = {\n@@ -599,11 +603,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         GenericArgCountResult {\n             explicit_late_bound,\n-            correct: if lifetimes_correct && args_correct {\n-                Ok(())\n-            } else {\n-                Err(GenericArgCountMismatch { reported: Some(ErrorGuaranteed), invalid_args })\n-            },\n+            correct: lifetimes_correct.and(args_correct).map_err(|reported| {\n+                GenericArgCountMismatch { reported: Some(reported), invalid_args }\n+            }),\n         }\n     }\n \n@@ -700,7 +702,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     LATE_BOUND_LIFETIME_ARGUMENTS,\n                     args.args[0].id(),\n                     multispan,\n-                    |lint| lint.build(msg).emit(),\n+                    |lint| {\n+                        lint.build(msg).emit();\n+                    },\n                 );\n             }\n "}, {"sha": "b04d304d2ca15f930c43097b4300058531c794b3", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -1570,7 +1570,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         type_str: &str,\n         trait_str: &str,\n         name: Symbol,\n-    ) {\n+    ) -> ErrorGuaranteed {\n         let mut err = struct_span_err!(self.tcx().sess, span, E0223, \"ambiguous associated type\");\n         if let (true, Ok(snippet)) = (\n             self.tcx()\n@@ -1594,7 +1594,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 Applicability::HasPlaceholders,\n             );\n         }\n-        err.emit();\n+        err.emit()\n     }\n \n     // Search for a bound on a type parameter which includes the associated item\n@@ -1661,13 +1661,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             (Some(bound), _) => (bound, matching_candidates.next()),\n             (None, Some(bound)) => (bound, const_candidates.next()),\n             (None, None) => {\n-                self.complain_about_assoc_type_not_found(\n+                let reported = self.complain_about_assoc_type_not_found(\n                     all_candidates,\n                     &ty_param_name(),\n                     assoc_name,\n                     span,\n                 );\n-                return Err(ErrorGuaranteed);\n+                return Err(reported);\n             }\n         };\n         debug!(\"one_bound_for_assoc_type: bound = {:?}\", bound);\n@@ -1752,9 +1752,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     where_bounds.join(\",\\n\"),\n                 ));\n             }\n-            err.emit();\n+            let reported = err.emit();\n             if !where_bounds.is_empty() {\n-                return Err(ErrorGuaranteed);\n+                return Err(reported);\n             }\n         }\n \n@@ -1811,7 +1811,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // trait reference.\n                 let Some(trait_ref) = tcx.impl_trait_ref(impl_def_id) else {\n                     // A cycle error occurred, most likely.\n-                    return Err(ErrorGuaranteed);\n+                    let guar = tcx.sess.delay_span_bug(span, \"expected cycle error\");\n+                    return Err(guar);\n                 };\n \n                 self.one_bound_for_assoc_type(\n@@ -1828,10 +1829,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 | Res::Def(DefKind::TyParam, param_did),\n             ) => self.find_bound_for_assoc_item(param_did.expect_local(), assoc_ident, span)?,\n             _ => {\n-                if variant_resolution.is_some() {\n+                let reported = if variant_resolution.is_some() {\n                     // Variant in type position\n                     let msg = format!(\"expected type, found variant `{}`\", assoc_ident);\n-                    tcx.sess.span_err(span, &msg);\n+                    tcx.sess.span_err(span, &msg)\n                 } else if qself_ty.is_enum() {\n                     let mut err = struct_span_err!(\n                         tcx.sess,\n@@ -1870,17 +1871,19 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         err.span_label(sp, format!(\"variant `{}` not found here\", assoc_ident));\n                     }\n \n-                    err.emit();\n-                } else if !qself_ty.references_error() {\n+                    err.emit()\n+                } else if let Some(reported) = qself_ty.error_reported() {\n+                    reported\n+                } else {\n                     // Don't print `TyErr` to the user.\n                     self.report_ambiguous_associated_type(\n                         span,\n                         &qself_ty.to_string(),\n                         \"Trait\",\n                         assoc_ident.name,\n-                    );\n-                }\n-                return Err(ErrorGuaranteed);\n+                    )\n+                };\n+                return Err(reported);\n             }\n         };\n \n@@ -1898,8 +1901,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         // but it was used in a type position.\n         let Some(item) = item else {\n             let msg = format!(\"found associated const `{assoc_ident}` when type was expected\");\n-            tcx.sess.struct_span_err(span, &msg).emit();\n-            return Err(ErrorGuaranteed);\n+            let guar = tcx.sess.struct_span_err(span, &msg).emit();\n+            return Err(guar);\n         };\n \n         let ty = self.projected_ty_from_poly_trait_ref(span, item.def_id, assoc_segment, bound);\n@@ -2737,7 +2740,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 sugg,\n                                 Applicability::MachineApplicable,\n                             )\n-                            .emit()\n+                            .emit();\n                     },\n                 );\n             }"}, {"sha": "7ce428ea12466d33e2f9efff4c0d89f7716fa4e2", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -91,8 +91,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let t = self.resolve_vars_if_possible(t);\n \n-        if t.references_error() {\n-            return Err(ErrorGuaranteed);\n+        if let Some(reported) = t.error_reported() {\n+            return Err(reported);\n         }\n \n         if self.type_is_known_to_be_sized_modulo_regions(t, span) {\n@@ -139,10 +139,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             | ty::Adt(..)\n             | ty::Never\n             | ty::Error(_) => {\n-                self.tcx\n+                let reported = self\n+                    .tcx\n                     .sess\n                     .delay_span_bug(span, &format!(\"`{:?}` should be sized but is not?\", t));\n-                return Err(ErrorGuaranteed);\n+                return Err(reported);\n             }\n         })\n     }\n@@ -174,7 +175,7 @@ pub enum CastError {\n }\n \n impl From<ErrorGuaranteed> for CastError {\n-    fn from(ErrorGuaranteed: ErrorGuaranteed) -> Self {\n+    fn from(_: ErrorGuaranteed) -> Self {\n         CastError::ErrorGuaranteed\n     }\n }\n@@ -213,8 +214,8 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         // inference is more completely known.\n         match cast_ty.kind() {\n             ty::Dynamic(..) | ty::Slice(..) => {\n-                check.report_cast_to_unsized_type(fcx);\n-                Err(ErrorGuaranteed)\n+                let reported = check.report_cast_to_unsized_type(fcx);\n+                Err(reported)\n             }\n             _ => Ok(check),\n         }\n@@ -588,9 +589,11 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         }\n     }\n \n-    fn report_cast_to_unsized_type(&self, fcx: &FnCtxt<'a, 'tcx>) {\n-        if self.cast_ty.references_error() || self.expr_ty.references_error() {\n-            return;\n+    fn report_cast_to_unsized_type(&self, fcx: &FnCtxt<'a, 'tcx>) -> ErrorGuaranteed {\n+        if let Some(reported) =\n+            self.cast_ty.error_reported().or_else(|| self.expr_ty.error_reported())\n+        {\n+            return reported;\n         }\n \n         let tstr = fcx.ty_to_string(self.cast_ty);\n@@ -651,7 +654,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 err.span_help(self.expr.span, \"consider using a box or reference as appropriate\");\n             }\n         }\n-        err.emit();\n+        err.emit()\n     }\n \n     fn trivial_cast_lint(&self, fcx: &FnCtxt<'a, 'tcx>) {"}, {"sha": "e57d55fdc2377394fe5d6f0804a8cf80595231d3", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -49,7 +49,7 @@ pub(super) fn check_abi(tcx: TyCtxt<'_>, hir_id: hir::HirId, span: Span, abi: Ab\n         }\n         None => {\n             tcx.struct_span_lint_hir(UNSUPPORTED_CALLING_CONVENTIONS, hir_id, span, |lint| {\n-                lint.build(\"use of calling convention not supported on this target\").emit()\n+                lint.build(\"use of calling convention not supported on this target\").emit();\n             });\n         }\n     }\n@@ -136,7 +136,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n             };\n \n             if let Some(header) = item {\n-                tcx.sess.span_err(header.span, \"functions with the \\\"rust-call\\\" ABI must take a single non-self argument that is a tuple\")\n+                tcx.sess.span_err(header.span, \"functions with the \\\"rust-call\\\" ABI must take a single non-self argument that is a tuple\");\n             }\n         };\n \n@@ -625,11 +625,11 @@ pub(super) fn check_opaque_for_cycles<'tcx>(\n     origin: &hir::OpaqueTyOrigin,\n ) -> Result<(), ErrorGuaranteed> {\n     if tcx.try_expand_impl_trait_type(def_id.to_def_id(), substs).is_err() {\n-        match origin {\n+        let reported = match origin {\n             hir::OpaqueTyOrigin::AsyncFn(..) => async_opaque_type_cycle_error(tcx, span),\n             _ => opaque_type_cycle_error(tcx, def_id, span),\n-        }\n-        Err(ErrorGuaranteed)\n+        };\n+        Err(reported)\n     } else {\n         Ok(())\n     }\n@@ -680,13 +680,15 @@ fn check_opaque_meets_bounds<'tcx>(\n             trace!(?hidden_type);\n             match infcx.at(&misc_cause, param_env).eq(opaque_defn.concrete_ty, hidden_type) {\n                 Ok(infer_ok) => inh.register_infer_ok_obligations(infer_ok),\n-                Err(ty_err) => tcx.sess.delay_span_bug(\n-                    span,\n-                    &format!(\n-                        \"could not check bounds on revealed type `{}`:\\n{}\",\n-                        hidden_type, ty_err,\n-                    ),\n-                ),\n+                Err(ty_err) => {\n+                    tcx.sess.delay_span_bug(\n+                        span,\n+                        &format!(\n+                            \"could not check bounds on revealed type `{}`:\\n{}\",\n+                            hidden_type, ty_err,\n+                        ),\n+                    );\n+                }\n             }\n         }\n \n@@ -1422,7 +1424,7 @@ pub(super) fn check_type_params_are_used<'tcx>(\n     if ty.references_error() {\n         // If there is already another error, do not emit\n         // an error for not using a type parameter.\n-        assert!(tcx.sess.has_errors());\n+        assert!(tcx.sess.has_errors().is_some());\n         return;\n     }\n \n@@ -1463,14 +1465,14 @@ pub(super) use wfcheck::check_trait_item as check_trait_item_well_formed;\n \n pub(super) use wfcheck::check_impl_item as check_impl_item_well_formed;\n \n-fn async_opaque_type_cycle_error(tcx: TyCtxt<'_>, span: Span) {\n+fn async_opaque_type_cycle_error(tcx: TyCtxt<'_>, span: Span) -> ErrorGuaranteed {\n     struct_span_err!(tcx.sess, span, E0733, \"recursion in an `async fn` requires boxing\")\n         .span_label(span, \"recursive `async fn`\")\n         .note(\"a recursive `async fn` must be rewritten to return a boxed `dyn Future`\")\n         .note(\n             \"consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\",\n         )\n-        .emit();\n+        .emit()\n }\n \n /// Emit an error for recursive opaque types.\n@@ -1481,7 +1483,7 @@ fn async_opaque_type_cycle_error(tcx: TyCtxt<'_>, span: Span) {\n ///\n /// If all the return expressions evaluate to `!`, then we explain that the error will go away\n /// after changing it. This can happen when a user uses `panic!()` or similar as a placeholder.\n-fn opaque_type_cycle_error(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) {\n+fn opaque_type_cycle_error(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) -> ErrorGuaranteed {\n     let mut err = struct_span_err!(tcx.sess, span, E0720, \"cannot resolve opaque type\");\n \n     let mut label = false;\n@@ -1550,5 +1552,5 @@ fn opaque_type_cycle_error(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) {\n     if !label {\n         err.span_label(span, \"cannot resolve opaque type\");\n     }\n-    err.emit();\n+    err.emit()\n }"}, {"sha": "f5477f7103cb3109525bb3b18623ebc8fbaec22b", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 32, "deletions": 38, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -41,35 +41,30 @@ crate fn compare_impl_method<'tcx>(\n \n     let impl_m_span = tcx.sess.source_map().guess_head_span(impl_m_span);\n \n-    if let Err(ErrorGuaranteed) =\n-        compare_self_type(tcx, impl_m, impl_m_span, trait_m, impl_trait_ref)\n-    {\n+    if let Err(_) = compare_self_type(tcx, impl_m, impl_m_span, trait_m, impl_trait_ref) {\n         return;\n     }\n \n-    if let Err(ErrorGuaranteed) =\n-        compare_number_of_generics(tcx, impl_m, impl_m_span, trait_m, trait_item_span)\n-    {\n+    if let Err(_) = compare_number_of_generics(tcx, impl_m, impl_m_span, trait_m, trait_item_span) {\n         return;\n     }\n \n-    if let Err(ErrorGuaranteed) =\n+    if let Err(_) =\n         compare_number_of_method_arguments(tcx, impl_m, impl_m_span, trait_m, trait_item_span)\n     {\n         return;\n     }\n \n-    if let Err(ErrorGuaranteed) = compare_synthetic_generics(tcx, impl_m, trait_m) {\n+    if let Err(_) = compare_synthetic_generics(tcx, impl_m, trait_m) {\n         return;\n     }\n \n-    if let Err(ErrorGuaranteed) =\n-        compare_predicate_entailment(tcx, impl_m, impl_m_span, trait_m, impl_trait_ref)\n+    if let Err(_) = compare_predicate_entailment(tcx, impl_m, impl_m_span, trait_m, impl_trait_ref)\n     {\n         return;\n     }\n \n-    if let Err(ErrorGuaranteed) = compare_const_param_types(tcx, impl_m, trait_m, trait_item_span) {\n+    if let Err(_) = compare_const_param_types(tcx, impl_m, trait_m, trait_item_span) {\n         return;\n     }\n }\n@@ -385,16 +380,16 @@ fn compare_predicate_entailment<'tcx>(\n                 &terr,\n                 false,\n             );\n-            diag.emit();\n-            return Err(ErrorGuaranteed);\n+\n+            return Err(diag.emit());\n         }\n \n         // Check that all obligations are satisfied by the implementation's\n         // version.\n         let errors = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx);\n         if !errors.is_empty() {\n-            infcx.report_fulfillment_errors(&errors, None, false);\n-            return Err(ErrorGuaranteed);\n+            let reported = infcx.report_fulfillment_errors(&errors, None, false);\n+            return Err(reported);\n         }\n \n         // Finally, resolve all regions. This catches wily misuses of\n@@ -450,13 +445,13 @@ fn check_region_bounds_on_impl_item<'tcx>(\n                 .map_or(def_sp, |g| g.span)\n         });\n \n-        tcx.sess.emit_err(LifetimesOrBoundsMismatchOnTrait {\n+        let reported = tcx.sess.emit_err(LifetimesOrBoundsMismatchOnTrait {\n             span,\n             item_kind,\n             ident: impl_m.ident(tcx),\n             generics_span,\n         });\n-        return Err(ErrorGuaranteed);\n+        return Err(reported);\n     }\n \n     Ok(())\n@@ -550,8 +545,8 @@ fn compare_self_type<'tcx>(\n             } else {\n                 err.note_trait_signature(trait_m.name.to_string(), trait_m.signature(tcx));\n             }\n-            err.emit();\n-            return Err(ErrorGuaranteed);\n+            let reported = err.emit();\n+            return Err(reported);\n         }\n \n         (true, false) => {\n@@ -570,8 +565,8 @@ fn compare_self_type<'tcx>(\n             } else {\n                 err.note_trait_signature(trait_m.name.to_string(), trait_m.signature(tcx));\n             }\n-            err.emit();\n-            return Err(ErrorGuaranteed);\n+            let reported = err.emit();\n+            return Err(reported);\n         }\n     }\n \n@@ -595,11 +590,9 @@ fn compare_number_of_generics<'tcx>(\n \n     let item_kind = assoc_item_kind_str(impl_);\n \n-    let mut err_occurred = false;\n+    let mut err_occurred = None;\n     for (kind, trait_count, impl_count) in matchings {\n         if impl_count != trait_count {\n-            err_occurred = true;\n-\n             let (trait_spans, impl_trait_spans) = if let Some(def_id) = trait_.def_id.as_local() {\n                 let trait_item = tcx.hir().expect_trait_item(def_id);\n                 if trait_item.generics.params.is_empty() {\n@@ -690,11 +683,12 @@ fn compare_number_of_generics<'tcx>(\n                 err.span_label(*span, \"`impl Trait` introduces an implicit type parameter\");\n             }\n \n-            err.emit();\n+            let reported = err.emit();\n+            err_occurred = Some(reported);\n         }\n     }\n \n-    if err_occurred { Err(ErrorGuaranteed) } else { Ok(()) }\n+    if let Some(reported) = err_occurred { Err(reported) } else { Ok(()) }\n }\n \n fn compare_number_of_method_arguments<'tcx>(\n@@ -772,8 +766,8 @@ fn compare_number_of_method_arguments<'tcx>(\n                 impl_number_args\n             ),\n         );\n-        err.emit();\n-        return Err(ErrorGuaranteed);\n+        let reported = err.emit();\n+        return Err(reported);\n     }\n \n     Ok(())\n@@ -789,7 +783,7 @@ fn compare_synthetic_generics<'tcx>(\n     //     2. Explanation as to what is going on\n     // If we get here, we already have the same number of generics, so the zip will\n     // be okay.\n-    let mut error_found = false;\n+    let mut error_found = None;\n     let impl_m_generics = tcx.generics_of(impl_m.def_id);\n     let trait_m_generics = tcx.generics_of(trait_m.def_id);\n     let impl_m_type_params = impl_m_generics.params.iter().filter_map(|param| match param.kind {\n@@ -918,11 +912,11 @@ fn compare_synthetic_generics<'tcx>(\n                 }\n                 _ => unreachable!(),\n             }\n-            err.emit();\n-            error_found = true;\n+            let reported = err.emit();\n+            error_found = Some(reported);\n         }\n     }\n-    if error_found { Err(ErrorGuaranteed) } else { Ok(()) }\n+    if let Some(reported) = error_found { Err(reported) } else { Ok(()) }\n }\n \n fn compare_const_param_types<'tcx>(\n@@ -979,8 +973,8 @@ fn compare_const_param_types<'tcx>(\n                     trait_ty\n                 ),\n             );\n-            err.emit();\n-            return Err(ErrorGuaranteed);\n+            let reported = err.emit();\n+            return Err(reported);\n         }\n     }\n \n@@ -1203,8 +1197,8 @@ fn compare_type_predicate_entailment<'tcx>(\n         // version.\n         let errors = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx);\n         if !errors.is_empty() {\n-            infcx.report_fulfillment_errors(&errors, None, false);\n-            return Err(ErrorGuaranteed);\n+            let reported = infcx.report_fulfillment_errors(&errors, None, false);\n+            return Err(reported);\n         }\n \n         // Finally, resolve all regions. This catches wily misuses of\n@@ -1427,8 +1421,8 @@ pub fn check_type_bounds<'tcx>(\n         // version.\n         let errors = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx);\n         if !errors.is_empty() {\n-            infcx.report_fulfillment_errors(&errors, None, false);\n-            return Err(ErrorGuaranteed);\n+            let reported = infcx.report_fulfillment_errors(&errors, None, false);\n+            return Err(reported);\n         }\n \n         // Finally, resolve all regions. This catches wily misuses of"}, {"sha": "d38777bea5990b4c1a5f4d805d035982dba5ec1b", "filename": "compiler/rustc_typeck/src/check/dropck.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -55,11 +55,11 @@ pub fn check_drop_impl(tcx: TyCtxt<'_>, drop_impl_did: DefId) -> Result<(), Erro\n             // already checked by coherence, but compilation may\n             // not have been terminated.\n             let span = tcx.def_span(drop_impl_did);\n-            tcx.sess.delay_span_bug(\n+            let reported = tcx.sess.delay_span_bug(\n                 span,\n                 &format!(\"should have been rejected by coherence check: {}\", dtor_self_type),\n             );\n-            Err(ErrorGuaranteed)\n+            Err(reported)\n         }\n     }\n }\n@@ -94,7 +94,7 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n             Err(_) => {\n                 let item_span = tcx.def_span(self_type_did);\n                 let self_descr = tcx.def_kind(self_type_did).descr(self_type_did);\n-                struct_span_err!(\n+                let reported = struct_span_err!(\n                     tcx.sess,\n                     drop_impl_span,\n                     E0366,\n@@ -109,15 +109,15 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n                     ),\n                 )\n                 .emit();\n-                return Err(ErrorGuaranteed);\n+                return Err(reported);\n             }\n         }\n \n         let errors = fulfillment_cx.select_all_or_error(&infcx);\n         if !errors.is_empty() {\n             // this could be reached when we get lazy normalization\n-            infcx.report_fulfillment_errors(&errors, None, false);\n-            return Err(ErrorGuaranteed);\n+            let reported = infcx.report_fulfillment_errors(&errors, None, false);\n+            return Err(reported);\n         }\n \n         // NB. It seems a bit... suspicious to use an empty param-env\n@@ -258,7 +258,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n         if !assumptions_in_impl_context.iter().copied().any(predicate_matches_closure) {\n             let item_span = tcx.def_span(self_type_did);\n             let self_descr = tcx.def_kind(self_type_did).descr(self_type_did.to_def_id());\n-            struct_span_err!(\n+            let reported = struct_span_err!(\n                 tcx.sess,\n                 predicate_sp,\n                 E0367,\n@@ -268,7 +268,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n             )\n             .span_note(item_span, \"the implementor must specify the same requirement\")\n             .emit();\n-            result = Err(ErrorGuaranteed);\n+            result = Err(reported);\n         }\n     }\n "}, {"sha": "0a720f1502503159b8c35010747fb7f88f96ce9a", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -667,7 +667,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // else an error would have been flagged by the\n                 // `loops` pass for using break with an expression\n                 // where you are not supposed to.\n-                assert!(expr_opt.is_none() || self.tcx.sess.has_errors());\n+                assert!(expr_opt.is_none() || self.tcx.sess.has_errors().is_some());\n             }\n \n             // If we encountered a `break`, then (no surprise) it may be possible to break from the\n@@ -1187,7 +1187,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     deferred_cast_checks.push(cast_check);\n                     t_cast\n                 }\n-                Err(ErrorGuaranteed) => self.tcx.ty_error(),\n+                Err(_) => self.tcx.ty_error(),\n             }\n         }\n     }"}, {"sha": "e3439a6f1d963a7b2065e7073d57e334dd415b5b", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -315,16 +315,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     // FIXME: currently we never try to compose autoderefs\n                     // and ReifyFnPointer/UnsafeFnPointer, but we could.\n-                    _ => self.tcx.sess.delay_span_bug(\n-                        expr.span,\n-                        &format!(\n-                            \"while adjusting {:?}, can't compose {:?} and {:?}\",\n-                            expr,\n-                            entry.get(),\n-                            adj\n-                        ),\n-                    ),\n-                };\n+                    _ => {\n+                        self.tcx.sess.delay_span_bug(\n+                            expr.span,\n+                            &format!(\n+                                \"while adjusting {:?}, can't compose {:?} and {:?}\",\n+                                expr,\n+                                entry.get(),\n+                                adj\n+                            ),\n+                        );\n+                    }\n+                }\n                 *entry.get_mut() = adj;\n             }\n         }\n@@ -903,7 +905,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .or_else(|error| {\n                 let result = match error {\n                     method::MethodError::PrivateMatch(kind, def_id, _) => Ok((kind, def_id)),\n-                    _ => Err(ErrorGuaranteed),\n+                    _ => Err(ErrorGuaranteed::unchecked_claim_error_was_emitted()),\n                 };\n \n                 // If we have a path like `MyTrait::missing_method`, then don't register"}, {"sha": "4e1645adca5d3f258fda9267a304c500499885a3", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -412,7 +412,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         lint::builtin::TYVAR_BEHIND_RAW_POINTER,\n                         scope_expr_id,\n                         span,\n-                        |lint| lint.build(\"type annotations needed\").emit(),\n+                        |lint| {\n+                            lint.build(\"type annotations needed\").emit();\n+                        },\n                     );\n                 }\n             } else {"}, {"sha": "16ffabb76a515f82947dcaf80b5ec9dca9012185", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -81,7 +81,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if self.is_tainted_by_errors() {\n             // FIXME(eddyb) keep track of `ErrorGuaranteed` from where the error was emitted.\n-            wbcx.typeck_results.tainted_by_errors = Some(ErrorGuaranteed);\n+            wbcx.typeck_results.tainted_by_errors =\n+                Some(ErrorGuaranteed::unchecked_claim_error_was_emitted());\n         }\n \n         debug!(\"writeback: typeck results for {:?} are {:#?}\", item_def_id, wbcx.typeck_results);\n@@ -662,7 +663,8 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         // users of the typeck results don't produce extra errors, or worse, ICEs.\n         if resolver.replaced_with_error {\n             // FIXME(eddyb) keep track of `ErrorGuaranteed` from where the error was emitted.\n-            self.typeck_results.tainted_by_errors = Some(ErrorGuaranteed);\n+            self.typeck_results.tainted_by_errors =\n+                Some(ErrorGuaranteed::unchecked_claim_error_was_emitted());\n         }\n \n         x\n@@ -707,7 +709,7 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n     }\n \n     fn report_type_error(&self, t: Ty<'tcx>) {\n-        if !self.tcx.sess.has_errors() {\n+        if !self.tcx.sess.has_errors().is_some() {\n             self.infcx\n                 .emit_inference_failure_err(\n                     Some(self.body.id()),\n@@ -721,7 +723,7 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n     }\n \n     fn report_const_error(&self, c: ty::Const<'tcx>) {\n-        if !self.tcx.sess.has_errors() {\n+        if self.tcx.sess.has_errors().is_none() {\n             self.infcx\n                 .emit_inference_failure_err(\n                     Some(self.body.id()),"}, {"sha": "4b23cc4db85ba9fa215889d946586ccb38cfc562", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -21,7 +21,7 @@ pub(super) fn orphan_check_crate(tcx: TyCtxt<'_>, (): ()) -> &[LocalDefId] {\n         for &impl_of_trait in impls_of_trait {\n             match orphan_check_impl(tcx, impl_of_trait) {\n                 Ok(()) => {}\n-                Err(ErrorGuaranteed) => errors.push(impl_of_trait),\n+                Err(_) => errors.push(impl_of_trait),\n             }\n         }\n \n@@ -135,17 +135,19 @@ fn orphan_check_impl(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Result<(), ErrorGua\n         };\n \n         if let Some((msg, label)) = msg {\n-            struct_span_err!(tcx.sess, sp, E0321, \"{}\", msg).span_label(sp, label).emit();\n-            return Err(ErrorGuaranteed);\n+            let reported =\n+                struct_span_err!(tcx.sess, sp, E0321, \"{}\", msg).span_label(sp, label).emit();\n+            return Err(reported);\n         }\n     }\n \n     if let ty::Opaque(def_id, _) = *trait_ref.self_ty().kind() {\n-        tcx.sess\n+        let reported = tcx\n+            .sess\n             .struct_span_err(sp, \"cannot implement trait on type alias impl trait\")\n             .span_note(tcx.def_span(def_id), \"type alias impl trait defined here\")\n             .emit();\n-        return Err(ErrorGuaranteed);\n+        return Err(reported);\n     }\n \n     Ok(())"}, {"sha": "d422f355ad3a49a377014b6b2cf8b1ab6d5fbe4b", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -1,4 +1,4 @@\n-use rustc_errors::{Applicability, ErrorGuaranteed, StashKey};\n+use rustc_errors::{Applicability, StashKey};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -366,7 +366,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                                     owner, def_id,\n                                 ),\n                             );\n-                            if let Some(ErrorGuaranteed) =\n+                            if let Some(_) =\n                                 tcx.typeck(owner).tainted_by_errors\n                             {\n                                 // Some error in the"}, {"sha": "cb59438e3432f3ec3a72ac8b2acde464a6dac88a", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -523,7 +523,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 // struct; however, when EUV is run during typeck, it\n                 // may not. This will generate an error earlier in typeck,\n                 // so we can just ignore it.\n-                if !self.tcx().sess.has_errors() {\n+                if !self.tcx().sess.has_errors().is_some() {\n                     span_bug!(with_expr.span, \"with expression doesn't evaluate to a struct\");\n                 }\n             }"}, {"sha": "5d4dfd3caefcc3b5fabcb168160d7bfc4ec4e434", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -537,7 +537,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) -> Result<(), ErrorGuaranteed> {\n     check_unused::check_crate(tcx);\n     check_for_entry_fn(tcx);\n \n-    if tcx.sess.err_count() == 0 { Ok(()) } else { Err(ErrorGuaranteed) }\n+    if let Some(reported) = tcx.sess.has_errors() { Err(reported) } else { Ok(()) }\n }\n \n /// A quasi-deprecated helper used in rustdoc and clippy to get"}, {"sha": "42b7eec5d3aa9994488fc794999b4f09d18c0a70", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -834,7 +834,9 @@ impl AttributesExt for [ast::Attribute] {\n                         {\n                             match Cfg::parse(cfg_mi) {\n                                 Ok(new_cfg) => cfg &= new_cfg,\n-                                Err(e) => sess.span_err(e.span, e.msg),\n+                                Err(e) => {\n+                                    sess.span_err(e.span, e.msg);\n+                                }\n                             }\n                         }\n                     }"}, {"sha": "bd64e2b03ce0c8dc606ea9b41a664b5dda9e4634", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -452,7 +452,7 @@ crate fn run_global_ctxt(\n         }\n     }\n \n-    if tcx.sess.diagnostic().has_errors_or_lint_errors() {\n+    if tcx.sess.diagnostic().has_errors_or_lint_errors().is_some() {\n         rustc_errors::FatalError.raise();\n     }\n "}, {"sha": "8db5f8b0cff8b01491f91da6a2e972dc468e2acc", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -149,7 +149,7 @@ crate fn run(options: RustdocOptions) -> Result<(), ErrorGuaranteed> {\n \n                     collector\n                 });\n-                if compiler.session().diagnostic().has_errors_or_lint_errors() {\n+                if compiler.session().diagnostic().has_errors_or_lint_errors().is_some() {\n                     FatalError.raise();\n                 }\n "}, {"sha": "f59222b780d3e22c224e06a2be78cd5d33ead9e1", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -179,7 +179,7 @@ pub fn main() {\n \n     let exit_code = rustc_driver::catch_with_exit_code(|| match get_args() {\n         Some(args) => main_args(&args),\n-        _ => Err(ErrorGuaranteed),\n+        _ => Err(ErrorGuaranteed::unchecked_claim_error_was_emitted()),\n     });\n     process::exit(exit_code);\n }\n@@ -692,7 +692,13 @@ fn main_args(at_args: &[String]) -> MainResult {\n     // codes from `from_matches` here.\n     let options = match config::Options::from_matches(&matches) {\n         Ok(opts) => opts,\n-        Err(code) => return if code == 0 { Ok(()) } else { Err(ErrorGuaranteed) },\n+        Err(code) => {\n+            return if code == 0 {\n+                Ok(())\n+            } else {\n+                Err(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n+            };\n+        }\n     };\n     rustc_interface::util::run_in_thread_pool_with_globals(\n         options.edition,\n@@ -705,8 +711,8 @@ fn wrap_return(diag: &rustc_errors::Handler, res: Result<(), String>) -> MainRes\n     match res {\n         Ok(()) => Ok(()),\n         Err(err) => {\n-            diag.struct_err(&err).emit();\n-            Err(ErrorGuaranteed)\n+            let reported = diag.struct_err(&err).emit();\n+            Err(reported)\n         }\n     }\n }\n@@ -790,7 +796,7 @@ fn main_options(options: config::Options) -> MainResult {\n                 (resolver.clone(), resolver_caches)\n             };\n \n-            if sess.diagnostic().has_errors_or_lint_errors() {\n+            if sess.diagnostic().has_errors_or_lint_errors().is_some() {\n                 sess.fatal(\"Compilation failed, aborting rustdoc\");\n             }\n "}, {"sha": "81f371840ae4638ecc6534728216ae57dbf2a35c", "filename": "src/librustdoc/passes/bare_urls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -80,7 +80,7 @@ impl<'a, 'tcx> DocVisitor for BareUrlsLinter<'a, 'tcx> {\n                             format!(\"<{}>\", url),\n                             Applicability::MachineApplicable,\n                         )\n-                        .emit()\n+                        .emit();\n                 });\n             };\n "}, {"sha": "8d9b3377a698691a9df7c0a58708cb371cda2b53", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -91,7 +91,7 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n \n         // lambda that will use the lint to start a new diagnostic and add\n         // a suggestion to it when needed.\n-        let diag_builder = |lint: LintDiagnosticBuilder<'_>| {\n+        let diag_builder = |lint: LintDiagnosticBuilder<'_, ()>| {\n             let explanation = if is_ignore {\n                 \"`ignore` code blocks require valid Rust code for syntax highlighting; \\\n                     mark blocks that do not contain Rust code as text\""}, {"sha": "2b17e3457d293eb93e1bd87ca75525a9d9fb7538", "filename": "src/librustdoc/passes/check_doc_test_visibility.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -125,7 +125,9 @@ crate fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n                 crate::lint::MISSING_DOC_CODE_EXAMPLES,\n                 hir_id,\n                 sp,\n-                |lint| lint.build(\"missing code example in this documentation\").emit(),\n+                |lint| {\n+                    lint.build(\"missing code example in this documentation\").emit();\n+                },\n             );\n         }\n     } else if tests.found_tests > 0\n@@ -135,7 +137,9 @@ crate fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n             crate::lint::PRIVATE_DOC_TESTS,\n             hir_id,\n             item.attr_span(cx.tcx),\n-            |lint| lint.build(\"documentation test in private item\").emit(),\n+            |lint| {\n+                lint.build(\"documentation test in private item\").emit();\n+            },\n         );\n     }\n }"}, {"sha": "802b867a301aa5611bcdba471fbad793da7299b3", "filename": "src/test/ui-fulldeps/auxiliary/issue-40001-plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -50,7 +50,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingAllowedAttrPass {\n         let allowed = |attr| pprust::attribute_to_string(attr).contains(\"allowed_attr\");\n         if !cx.tcx.hir().attrs(item.hir_id()).iter().any(allowed) {\n             cx.lint(MISSING_ALLOWED_ATTR, |lint| {\n-                lint.build(\"Missing 'allowed_attr' attribute\").set_span(span).emit()\n+                lint.build(\"Missing 'allowed_attr' attribute\").set_span(span).emit();\n             });\n         }\n     }"}, {"sha": "bc153faa8925a73d952df3740a1a5a5bf63d1d9a", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -34,7 +34,7 @@ macro_rules! fake_lint_pass {\n                     if !cx.sess().contains_name(attrs, $attr) {\n                         cx.lint(CRATE_NOT_OKAY, |lint| {\n                              let msg = format!(\"crate is not marked with #![{}]\", $attr);\n-                             lint.build(&msg).set_span(span).emit()\n+                             lint.build(&msg).set_span(span).emit();\n                         });\n                     }\n                 )*"}, {"sha": "29d0abfbe53889e19ff961526ea02e8b6ed20c93", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -30,7 +30,7 @@ impl<'tcx> LateLintPass<'tcx> for Pass {\n         let span = cx.tcx.def_span(CRATE_DEF_ID);\n         if !cx.sess().contains_name(attrs, Symbol::intern(\"crate_okay\")) {\n             cx.lint(CRATE_NOT_OKAY, |lint| {\n-                lint.build(\"crate is not marked with #![crate_okay]\").set_span(span).emit()\n+                lint.build(\"crate is not marked with #![crate_okay]\").set_span(span).emit();\n             });\n         }\n     }"}, {"sha": "691cfb97d921858e5bec59e96f900620de8fbd08", "filename": "src/test/ui-fulldeps/auxiliary/lint-group-plugin-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -23,10 +23,10 @@ impl<'tcx> LateLintPass<'tcx> for Pass {\n     fn check_item(&mut self, cx: &LateContext, it: &rustc_hir::Item) {\n         match it.ident.as_str() {\n             \"lintme\" => cx.lint(TEST_LINT, |lint| {\n-                lint.build(\"item is named 'lintme'\").set_span(it.span).emit()\n+                lint.build(\"item is named 'lintme'\").set_span(it.span).emit();\n             }),\n             \"pleaselintme\" => cx.lint(PLEASE_LINT, |lint| {\n-                lint.build(\"item is named 'pleaselintme'\").set_span(it.span).emit()\n+                lint.build(\"item is named 'pleaselintme'\").set_span(it.span).emit();\n             }),\n             _ => {}\n         }"}, {"sha": "285754928c2191bc324ca1473bfac333e4a9cd9c", "filename": "src/test/ui-fulldeps/auxiliary/lint-plugin-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -22,7 +22,7 @@ impl EarlyLintPass for Pass {\n     fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n         if it.ident.name.as_str() == \"lintme\" {\n             cx.lint(TEST_LINT, |lint| {\n-                lint.build(\"item is named 'lintme'\").set_span(it.span).emit()\n+                lint.build(\"item is named 'lintme'\").set_span(it.span).emit();\n             });\n         }\n     }"}, {"sha": "3d5dba42b5f03b45326e1a25979cb6f732b27234", "filename": "src/test/ui-fulldeps/auxiliary/lint-tool-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -32,12 +32,12 @@ impl EarlyLintPass for Pass {\n     fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n         if it.ident.name.as_str() == \"lintme\" {\n             cx.lint(TEST_LINT, |lint| {\n-                lint.build(\"item is named 'lintme'\").set_span(it.span).emit()\n+                lint.build(\"item is named 'lintme'\").set_span(it.span).emit();\n             });\n         }\n         if it.ident.name.as_str() == \"lintmetoo\" {\n             cx.lint(TEST_GROUP, |lint| {\n-                lint.build(\"item is named 'lintmetoo'\").set_span(it.span).emit()\n+                lint.build(\"item is named 'lintmetoo'\").set_span(it.span).emit();\n             });\n         }\n     }"}, {"sha": "a8c2feec453c8a87ec742a5656c13087abcdb4d2", "filename": "src/tools/rustfmt/src/parse/macros/lazy_static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fmacros%2Flazy_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fmacros%2Flazy_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fmacros%2Flazy_static.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -16,7 +16,7 @@ pub(crate) fn parse_lazy_static(\n         ($method:ident $(,)* $($arg:expr),* $(,)*) => {\n             match parser.$method($($arg,)*) {\n                 Ok(val) => {\n-                    if parser.sess.span_diagnostic.has_errors() {\n+                    if parser.sess.span_diagnostic.has_errors().is_some() {\n                         parser.sess.span_diagnostic.reset_err_count();\n                         return None;\n                     } else {"}, {"sha": "3728f3a19b44fc40ceccb60342ed4f5d99aeee75", "filename": "src/tools/rustfmt/src/parse/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fmacros%2Fmod.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -28,7 +28,7 @@ fn parse_macro_arg<'a, 'b: 'a>(parser: &'a mut Parser<'b>) -> Option<MacroArg> {\n             let mut cloned_parser = (*parser).clone();\n             match $parser(&mut cloned_parser) {\n                 Ok(x) => {\n-                    if parser.sess.span_diagnostic.has_errors() {\n+                    if parser.sess.span_diagnostic.has_errors().is_some() {\n                         parser.sess.span_diagnostic.reset_err_count();\n                     } else {\n                         // Parsing succeeded."}, {"sha": "a34ceed3fc91fe76ea306acdae1b07077d4991dc", "filename": "src/tools/rustfmt/src/parse/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs?ref=7e1415ea80bedaf5b27900aaecc0d5cbc8ce7434", "patch": "@@ -235,7 +235,7 @@ impl ParseSess {\n     }\n \n     pub(super) fn has_errors(&self) -> bool {\n-        self.parse_sess.span_diagnostic.has_errors()\n+        self.parse_sess.span_diagnostic.has_errors().is_some()\n     }\n \n     pub(super) fn reset_errors(&self) {"}]}