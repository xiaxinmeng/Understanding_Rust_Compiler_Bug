{"sha": "927db7d3224646f7946d38de37cdbc388b925024", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyN2RiN2QzMjI0NjQ2Zjc5NDZkMzhkZTM3Y2RiYzM4OGI5MjUwMjQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-04-05T14:03:30Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-04-06T22:28:49Z"}, "message": "linker: Factor out linking of pre- and post-link objects", "tree": {"sha": "70bbd4b6be312d208b365efa3399750a90169c66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70bbd4b6be312d208b365efa3399750a90169c66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/927db7d3224646f7946d38de37cdbc388b925024", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/927db7d3224646f7946d38de37cdbc388b925024", "html_url": "https://github.com/rust-lang/rust/commit/927db7d3224646f7946d38de37cdbc388b925024", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/927db7d3224646f7946d38de37cdbc388b925024/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "032462e06f7ef393bac06a76a62fe9ad3f4290b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/032462e06f7ef393bac06a76a62fe9ad3f4290b7", "html_url": "https://github.com/rust-lang/rust/commit/032462e06f7ef393bac06a76a62fe9ad3f4290b7"}], "stats": {"total": 60, "additions": 37, "deletions": 23}, "files": [{"sha": "7f2020f98024dc511259bbe05bf210240ad4dc85", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/927db7d3224646f7946d38de37cdbc388b925024/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/927db7d3224646f7946d38de37cdbc388b925024/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=927db7d3224646f7946d38de37cdbc388b925024", "patch": "@@ -987,7 +987,7 @@ fn get_crt_libs_path(sess: &Session) -> Option<PathBuf> {\n     }\n }\n \n-pub fn get_file_path(sess: &Session, name: &str) -> PathBuf {\n+fn get_object_file_path(sess: &Session, name: &str) -> PathBuf {\n     // prefer system {,dll}crt2.o libs, see get_crt_libs_path comment for more details\n     if sess.target.target.llvm_target.contains(\"windows-gnu\") {\n         if let Some(compiler_libs_path) = get_crt_libs_path(sess) {\n@@ -1159,6 +1159,36 @@ pub fn exec_linker(\n     }\n }\n \n+/// Add begin object files defined by the target spec.\n+fn add_pre_link_objects(cmd: &mut dyn Linker, sess: &'a Session, crate_type: config::CrateType) {\n+    let pre_link_objects = if crate_type == config::CrateType::Executable {\n+        &sess.target.target.options.pre_link_objects_exe\n+    } else {\n+        &sess.target.target.options.pre_link_objects_dll\n+    };\n+    for obj in pre_link_objects {\n+        cmd.add_object(&get_object_file_path(sess, obj));\n+    }\n+\n+    if crate_type == config::CrateType::Executable && sess.crt_static(Some(crate_type)) {\n+        for obj in &sess.target.target.options.pre_link_objects_exe_crt {\n+            cmd.add_object(&get_object_file_path(sess, obj));\n+        }\n+    }\n+}\n+\n+/// Add end object files defined by the target spec.\n+fn add_post_link_objects(cmd: &mut dyn Linker, sess: &'a Session, crate_type: config::CrateType) {\n+    for obj in &sess.target.target.options.post_link_objects {\n+        cmd.add_object(&get_object_file_path(sess, obj));\n+    }\n+    if sess.crt_static(Some(crate_type)) {\n+        for obj in &sess.target.target.options.post_link_objects_crt {\n+            cmd.add_object(&get_object_file_path(sess, obj));\n+        }\n+    }\n+}\n+\n fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     path: &Path,\n     flavor: LinkerFlavor,\n@@ -1193,20 +1223,8 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n         cmd.arg(format!(\"--dynamic-linker={}ld.so.1\", prefix));\n     }\n \n-    let pre_link_objects = if crate_type == config::CrateType::Executable {\n-        &sess.target.target.options.pre_link_objects_exe\n-    } else {\n-        &sess.target.target.options.pre_link_objects_dll\n-    };\n-    for obj in pre_link_objects {\n-        cmd.arg(get_file_path(sess, obj));\n-    }\n-\n-    if crate_type == config::CrateType::Executable && sess.crt_static(Some(crate_type)) {\n-        for obj in &sess.target.target.options.pre_link_objects_exe_crt {\n-            cmd.arg(get_file_path(sess, obj));\n-        }\n-    }\n+    // NO-OPT-OUT\n+    add_pre_link_objects(cmd, sess, crate_type);\n \n     if sess.target.target.options.is_like_emscripten {\n         cmd.arg(\"-s\");\n@@ -1436,14 +1454,10 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n             cmd.args(args);\n         }\n     }\n-    for obj in &sess.target.target.options.post_link_objects {\n-        cmd.arg(get_file_path(sess, obj));\n-    }\n-    if sess.crt_static(Some(crate_type)) {\n-        for obj in &sess.target.target.options.post_link_objects_crt {\n-            cmd.arg(get_file_path(sess, obj));\n-        }\n-    }\n+\n+    // NO-OPT-OUT\n+    add_post_link_objects(cmd, sess, crate_type);\n+\n     if let Some(args) = sess.target.target.options.post_link_args.get(&flavor) {\n         cmd.args(args);\n     }"}]}