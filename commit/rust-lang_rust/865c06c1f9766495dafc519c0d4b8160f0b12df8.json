{"sha": "865c06c1f9766495dafc519c0d4b8160f0b12df8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NWMwNmMxZjk3NjY0OTVkYWZjNTE5YzBkNGI4MTYwZjBiMTJkZjg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-11T00:10:35Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-11T00:10:35Z"}, "message": "Preliminary translation of expr_index.", "tree": {"sha": "731b23591f6a9feca2059e0c16e502d14957fec2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/731b23591f6a9feca2059e0c16e502d14957fec2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/865c06c1f9766495dafc519c0d4b8160f0b12df8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/865c06c1f9766495dafc519c0d4b8160f0b12df8", "html_url": "https://github.com/rust-lang/rust/commit/865c06c1f9766495dafc519c0d4b8160f0b12df8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/865c06c1f9766495dafc519c0d4b8160f0b12df8/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "270b93bd710b9901f7bd831e193d3fcbebcb048c", "url": "https://api.github.com/repos/rust-lang/rust/commits/270b93bd710b9901f7bd831e193d3fcbebcb048c", "html_url": "https://github.com/rust-lang/rust/commit/270b93bd710b9901f7bd831e193d3fcbebcb048c"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "e37d2c28b04a18281d73afffa1fe04bbee842ef6", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/865c06c1f9766495dafc519c0d4b8160f0b12df8/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/865c06c1f9766495dafc519c0d4b8160f0b12df8/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=865c06c1f9766495dafc519c0d4b8160f0b12df8", "patch": "@@ -1349,6 +1349,40 @@ fn trans_field(@block_ctxt cx, &ast.span sp, @ast.expr base,\n     fail;\n }\n \n+fn trans_index(@block_ctxt cx, &ast.span sp, @ast.expr base,\n+               @ast.expr idx, &ast.ann ann) -> tup(result, bool) {\n+\n+    auto lv = trans_lval(cx, base);\n+    auto ix = trans_expr(lv._0.bcx, idx);\n+    auto v = lv._0.val;\n+\n+    auto llunit_ty = node_type(cx.fcx.ccx, ann);\n+    auto unit_sz = ix.bcx.build.IntCast(lib.llvm.llvm.LLVMSizeOf(llunit_ty),\n+                                      T_int());\n+    auto scaled_ix = ix.bcx.build.Mul(ix.val, unit_sz);\n+\n+    auto lim = ix.bcx.build.GEP(v, vec(C_int(0), C_int(abi.vec_elt_fill)));\n+    lim = ix.bcx.build.Load(lim);\n+    auto bounds_check = ix.bcx.build.ICmp(lib.llvm.LLVMIntULT,\n+                                          scaled_ix, lim);\n+\n+    auto fail_cx = new_sub_block_ctxt(ix.bcx, \"fail\");\n+    auto next_cx = new_sub_block_ctxt(ix.bcx, \"next\");\n+    ix.bcx.build.CondBr(bounds_check, next_cx.llbb, fail_cx.llbb);\n+\n+    // fail: bad bounds check.\n+    auto V_expr_str = p2i(C_str(cx.fcx.ccx, \"out-of-bounds access\"));\n+    auto V_filename = p2i(C_str(cx.fcx.ccx, sp.filename));\n+    auto V_line = sp.lo.line as int;\n+    auto args = vec(V_expr_str, V_filename, C_int(V_line));\n+    auto fail_res = trans_upcall(fail_cx, \"upcall_fail\", args);\n+    fail_res.bcx.build.Br(next_cx.llbb);\n+\n+    auto body = next_cx.build.GEP(v, vec(C_int(0), C_int(abi.vec_elt_data)));\n+    auto elt = next_cx.build.GEP(body, vec(C_int(0), ix.val));\n+    ret tup(res(next_cx, elt), lv._1);\n+}\n+\n // The additional bool returned indicates whether it's mem (that is\n // represented as an alloca or heap, hence needs a 'load' to be used as an\n // immediate).\n@@ -1361,6 +1395,9 @@ fn trans_lval(@block_ctxt cx, @ast.expr e) -> tup(result, bool) {\n         case (ast.expr_field(?base, ?ident, ?ann)) {\n             ret trans_field(cx, e.span, base, ident, ann);\n         }\n+        case (ast.expr_index(?base, ?idx, ?ann)) {\n+            ret trans_index(cx, e.span, base, idx, ann);\n+        }\n         case (_) { cx.fcx.ccx.sess.unimpl(\"expr variant in trans_lval\"); }\n     }\n     fail;"}]}