{"sha": "6c187cc0c631f139c8ee43b1a6618664203b63aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMTg3Y2MwYzYzMWYxMzljOGVlNDNiMWE2NjE4NjY0MjAzYjYzYWE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-04-21T11:41:51Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-04-21T11:41:51Z"}, "message": "Change return type of `TyCtxt::is_static` to bool\n\nAdd `TyCtxt::is_mutable_static`", "tree": {"sha": "75c2fa5daf5459a4cbb0e69c8646fd6f939e1239", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75c2fa5daf5459a4cbb0e69c8646fd6f939e1239"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c187cc0c631f139c8ee43b1a6618664203b63aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c187cc0c631f139c8ee43b1a6618664203b63aa", "html_url": "https://github.com/rust-lang/rust/commit/6c187cc0c631f139c8ee43b1a6618664203b63aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c187cc0c631f139c8ee43b1a6618664203b63aa/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "286a469a16d6e75b8cc195f1e3711d9132088988", "url": "https://api.github.com/repos/rust-lang/rust/commits/286a469a16d6e75b8cc195f1e3711d9132088988", "html_url": "https://github.com/rust-lang/rust/commit/286a469a16d6e75b8cc195f1e3711d9132088988"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "67507f7b5d11647b4b6614f79605c3cabf7d8193", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6c187cc0c631f139c8ee43b1a6618664203b63aa/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c187cc0c631f139c8ee43b1a6618664203b63aa/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=6c187cc0c631f139c8ee43b1a6618664203b63aa", "patch": "@@ -612,9 +612,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         })\n     }\n \n-    /// Returns `true` if the node pointed to by `def_id` is a static item, and its mutability.\n-    pub fn is_static(&self, def_id: DefId) -> Option<hir::Mutability> {\n-        self.static_mutability(def_id)\n+    /// Returns `true` if the node pointed to by `def_id` is a `static` item.\n+    pub fn is_static(&self, def_id: DefId) -> bool {\n+        self.static_mutability(def_id).is_some()\n+    }\n+\n+    /// Returns `true` if the node pointed to by `def_id` is a mutable `static` item.\n+    pub fn is_mutable_static(&self, def_id: DefId) -> bool {\n+        self.static_mutability(def_id) == Some(hir::MutMutable)\n     }\n \n     /// Expands the given impl trait type, stopping if the type is recursive."}, {"sha": "b9fd9629e6ff193ba17f007c7a12c290b92ce17e", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c187cc0c631f139c8ee43b1a6618664203b63aa/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c187cc0c631f139c8ee43b1a6618664203b63aa/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=6c187cc0c631f139c8ee43b1a6618664203b63aa", "patch": "@@ -322,7 +322,7 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                         self.get_fn(fn_instance)\n                     }\n                     Some(AllocKind::Static(def_id)) => {\n-                        assert!(self.tcx.is_static(def_id).is_some());\n+                        assert!(self.tcx.is_static(def_id));\n                         self.get_static(def_id)\n                     }\n                     None => bug!(\"missing allocation {:?}\", ptr.alloc_id),"}, {"sha": "5fde4331d4702778a8754be0c437f8698c0fb5f2", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c187cc0c631f139c8ee43b1a6618664203b63aa/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c187cc0c631f139c8ee43b1a6618664203b63aa/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=6c187cc0c631f139c8ee43b1a6618664203b63aa", "patch": "@@ -1171,8 +1171,7 @@ declare_lint_pass!(\n \n fn check_const(cx: &LateContext<'_, '_>, body_id: hir::BodyId) {\n     let def_id = cx.tcx.hir().body_owner_def_id(body_id);\n-    let is_static = cx.tcx.is_static(def_id).is_some();\n-    let param_env = if is_static {\n+    let param_env = if cx.tcx.is_static(def_id) {\n         // Use the same param_env as `codegen_static_initializer`, to reuse the cache.\n         ty::ParamEnv::reveal_all()\n     } else {"}, {"sha": "43ed85d4ac5412de47fd0bea0481b0a616057364", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c187cc0c631f139c8ee43b1a6618664203b63aa/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c187cc0c631f139c8ee43b1a6618664203b63aa/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=6c187cc0c631f139c8ee43b1a6618664203b63aa", "patch": "@@ -2117,7 +2117,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     is_local_mutation_allowed,\n                 }),\n             Place::Base(PlaceBase::Static(box Static{ kind: StaticKind::Static(def_id), .. })) => {\n-                if self.infcx.tcx.is_static(def_id) != Some(hir::Mutability::MutMutable) {\n+                if !self.infcx.tcx.is_mutable_static(def_id) {\n                     Err(place)\n                 } else {\n                     Ok(RootPlace {"}, {"sha": "ce8f1852551f2c875523ef4e5dffa0163f19d480", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c187cc0c631f139c8ee43b1a6618664203b63aa/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c187cc0c631f139c8ee43b1a6618664203b63aa/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=6c187cc0c631f139c8ee43b1a6618664203b63aa", "patch": "@@ -1321,7 +1321,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         ..\n                     }) = self.borrowck_context\n                     {\n-                        if tcx.is_static(*def_id).is_some() {\n+                        if tcx.is_static(*def_id) {\n                             ConstraintCategory::UseAsStatic\n                         } else {\n                             ConstraintCategory::UseAsConst\n@@ -1626,7 +1626,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                             ..\n                         }) = self.borrowck_context\n                         {\n-                            if tcx.is_static(*def_id).is_some() {\n+                            if tcx.is_static(*def_id) {\n                                 ConstraintCategory::UseAsStatic\n                             } else {\n                                 ConstraintCategory::UseAsConst"}, {"sha": "913884a8218372567251a9cbd759cbcda881c931", "filename": "src/librustc_mir/borrow_check/place_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c187cc0c631f139c8ee43b1a6618664203b63aa/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c187cc0c631f139c8ee43b1a6618664203b63aa/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs?ref=6c187cc0c631f139c8ee43b1a6618664203b63aa", "patch": "@@ -52,7 +52,7 @@ impl<'tcx> PlaceExt<'tcx> for Place<'tcx> {\n             Place::Base(PlaceBase::Static(box Static{ kind: StaticKind::Promoted(_), .. })) =>\n                 false,\n             Place::Base(PlaceBase::Static(box Static{ kind: StaticKind::Static(def_id), .. })) => {\n-                tcx.is_static(*def_id) == Some(hir::Mutability::MutMutable)\n+                tcx.is_mutable_static(*def_id)\n             }\n             Place::Projection(proj) => match proj.elem {\n                 ProjectionElem::Field(..)"}, {"sha": "1bf606109dc76b295b1d141aa18691f7961e5816", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c187cc0c631f139c8ee43b1a6618664203b63aa/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c187cc0c631f139c8ee43b1a6618664203b63aa/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=6c187cc0c631f139c8ee43b1a6618664203b63aa", "patch": "@@ -321,7 +321,7 @@ fn place_base_conflict<'a, 'gcx: 'tcx, 'tcx>(\n                     if def_id_1 != def_id_2 {\n                         debug!(\"place_element_conflict: DISJOINT-STATIC\");\n                         Overlap::Disjoint\n-                    } else if tcx.is_static(*def_id_1) == Some(hir::Mutability::MutMutable) {\n+                    } else if tcx.is_mutable_static(*def_id_1) {\n                         // We ignore mutable statics - they can only be unsafe code.\n                         debug!(\"place_element_conflict: IGNORE-STATIC-MUT\");\n                         Overlap::Disjoint"}, {"sha": "b65f2ba2601e44927c2a4cfc17dd006eacaf3da3", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6c187cc0c631f139c8ee43b1a6618664203b63aa/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c187cc0c631f139c8ee43b1a6618664203b63aa/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=6c187cc0c631f139c8ee43b1a6618664203b63aa", "patch": "@@ -6,8 +6,8 @@ use std::borrow::{Borrow, Cow};\n use std::hash::Hash;\n use std::collections::hash_map::Entry;\n \n-use rustc::hir::{self, def_id::DefId};\n use rustc::hir::def::Def;\n+use rustc::hir::def_id::DefId;\n use rustc::mir::interpret::{ConstEvalErr, ErrorHandled};\n use rustc::mir;\n use rustc::ty::{self, TyCtxt, query::TyCtxtAt};\n@@ -158,9 +158,8 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n     ecx.run()?;\n \n     // Intern the result\n-    let internally_mutable = !layout.ty.is_freeze(tcx, param_env, mir.span);\n-    let is_static = tcx.is_static(cid.instance.def_id());\n-    let mutability = if is_static == Some(hir::Mutability::MutMutable) || internally_mutable {\n+    let mutability = if tcx.is_mutable_static(cid.instance.def_id()) ||\n+                     !layout.ty.is_freeze(tcx, param_env, mir.span) {\n         Mutability::Mutable\n     } else {\n         Mutability::Immutable\n@@ -533,7 +532,7 @@ fn validate_and_turn_into_const<'a, 'tcx>(\n         }\n         // Now that we validated, turn this into a proper constant.\n         let def_id = cid.instance.def.def_id();\n-        if tcx.is_static(def_id).is_some() || cid.promoted.is_some() {\n+        if tcx.is_static(def_id) || cid.promoted.is_some() {\n             Ok(mplace_to_const(&ecx, mplace))\n         } else {\n             Ok(op_to_const(&ecx, mplace.into()))\n@@ -628,7 +627,7 @@ pub fn const_eval_raw_provider<'a, 'tcx>(\n     }).map_err(|error| {\n         let err = error_to_const_error(&ecx, error);\n         // errors in statics are always emitted as fatal errors\n-        if tcx.is_static(def_id).is_some() {\n+        if tcx.is_static(def_id) {\n             // Ensure that if the above error was either `TooGeneric` or `Reported`\n             // an error must be reported.\n             let reported_err = tcx.sess.track_errors(|| {"}, {"sha": "4ae8bfe854d786d5c65d69eede3bb375b81acba9", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c187cc0c631f139c8ee43b1a6618664203b63aa/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c187cc0c631f139c8ee43b1a6618664203b63aa/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=6c187cc0c631f139c8ee43b1a6618664203b63aa", "patch": "@@ -634,7 +634,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tc\n         &self,\n         gid: GlobalId<'tcx>,\n     ) -> EvalResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n-        let param_env = if self.tcx.is_static(gid.instance.def_id()).is_some() {\n+        let param_env = if self.tcx.is_static(gid.instance.def_id()) {\n             ty::ParamEnv::reveal_all()\n         } else {\n             self.param_env"}, {"sha": "9674822b47a3ddb7302997e509b7ac9a9d798d05", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c187cc0c631f139c8ee43b1a6618664203b63aa/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c187cc0c631f139c8ee43b1a6618664203b63aa/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=6c187cc0c631f139c8ee43b1a6618664203b63aa", "patch": "@@ -342,7 +342,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         // full query anyway\n         tcx.const_eval_raw(ty::ParamEnv::reveal_all().and(gid)).map_err(|err| {\n             // no need to report anything, the const_eval call takes care of that for statics\n-            assert!(tcx.is_static(def_id).is_some());\n+            assert!(tcx.is_static(def_id));\n             match err {\n                 ErrorHandled::Reported => InterpError::ReferencedConstant.into(),\n                 ErrorHandled::TooGeneric => InterpError::TooGeneric.into(),"}, {"sha": "87c02b7f01da32ba322250aac8d71eb0e34897e8", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c187cc0c631f139c8ee43b1a6618664203b63aa/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c187cc0c631f139c8ee43b1a6618664203b63aa/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=6c187cc0c631f139c8ee43b1a6618664203b63aa", "patch": "@@ -306,7 +306,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             &Place::Base(\n                 PlaceBase::Static(box Static { kind: StaticKind::Static(def_id), .. })\n             ) => {\n-                if self.tcx.is_static(def_id) == Some(hir::Mutability::MutMutable) {\n+                if self.tcx.is_mutable_static(def_id) {\n                     self.require_unsafe(\"use of mutable static\",\n                         \"mutable statics can be mutated by multiple threads: aliasing violations \\\n                          or data races will cause undefined behavior\","}]}