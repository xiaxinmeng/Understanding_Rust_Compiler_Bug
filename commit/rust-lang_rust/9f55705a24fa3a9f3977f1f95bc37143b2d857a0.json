{"sha": "9f55705a24fa3a9f3977f1f95bc37143b2d857a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNTU3MDVhMjRmYTNhOWYzOTc3ZjFmOTViYzM3MTQzYjJkODU3YTA=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-09T17:55:31Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-09T17:55:31Z"}, "message": "Rollup merge of #53207 - llogiq:num-rotate-docs, r=QuietMisdreavus\n\nAdd individual docs for rotate_{left, right}", "tree": {"sha": "0c0151ae00bb4fc2bda6d6120922996ca801d758", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c0151ae00bb4fc2bda6d6120922996ca801d758"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f55705a24fa3a9f3977f1f95bc37143b2d857a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAltsgBQACgkQ/vbIBR0O\nATyhUA//VtYees2aTzVzeRmpxaJYMOpZY2eWnAwT27YwY8RJp0xZXo7cTOQE4Uo8\nC885xnb3NsT1MOzRk5aGfUsX82gBFmU+xFxbnX3keVaGdbZpmYS2Jor8Zvquzq73\n7BfLmmijTssw7HA1jntCVvcURPMXEmwM7XbBlKJJAu8x9z/VH+An3svsLKFJvbOO\nhPgfsXxBJfG0zfGgyQLIkEcaQisdUCaUrkxBsFqiZEMnZHF1caR9RtqliNO/g1bi\nFZxuhjcTVwn6D77fhRJsUQwh5P4lb6M9XOSfvHlrjSfFmL2qPQ4qGFeJLJlO6YWR\nOewaQbIlnNCM3dob9zyE7+l7sQxIlXr3yY+8FJ/xs+sE4O6UUzv5sIosz2UmJ+au\nZBKcD8W6WZIbslBTwo7zPiAxU0ci7jvA4fwkkNyUh23MQirss57GcC6OCt3GnB2U\naIcR1Xpuq/5G0XmZWRhXTWM4LYD1xIPB4rujQro9eJU52AQfdq+r0+rCpYY4ea6j\nJ4Evn0ZilqvuPuEzdenfq45JvegBSEXyojZ6tK2TCQiKaQEuf3Y0j27mOTrMYSA1\nWu1xKF3w5C3MIzZxiMk+IxpurK8qtFH2f/wIPNt61oVGqvt5gaCCXmLcl+st6s6r\n3Yu6t8an3xvrauCKsTFXvpSYzpmLiR4kCiL26glnmAcb1YKAaSk=\n=0xz+\n-----END PGP SIGNATURE-----", "payload": "tree 0c0151ae00bb4fc2bda6d6120922996ca801d758\nparent f067f3a45dd3ad80902a33a1dc9399cd76a17d30\nparent cc2503a4f4ffc86beced2715764e38ddde802f98\nauthor kennytm <kennytm@gmail.com> 1533837331 +0800\ncommitter kennytm <kennytm@gmail.com> 1533837331 +0800\n\nRollup merge of #53207 - llogiq:num-rotate-docs, r=QuietMisdreavus\n\nAdd individual docs for rotate_{left, right}\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f55705a24fa3a9f3977f1f95bc37143b2d857a0", "html_url": "https://github.com/rust-lang/rust/commit/9f55705a24fa3a9f3977f1f95bc37143b2d857a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f55705a24fa3a9f3977f1f95bc37143b2d857a0/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f067f3a45dd3ad80902a33a1dc9399cd76a17d30", "url": "https://api.github.com/repos/rust-lang/rust/commits/f067f3a45dd3ad80902a33a1dc9399cd76a17d30", "html_url": "https://github.com/rust-lang/rust/commit/f067f3a45dd3ad80902a33a1dc9399cd76a17d30"}, {"sha": "cc2503a4f4ffc86beced2715764e38ddde802f98", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc2503a4f4ffc86beced2715764e38ddde802f98", "html_url": "https://github.com/rust-lang/rust/commit/cc2503a4f4ffc86beced2715764e38ddde802f98"}], "stats": {"total": 228, "additions": 115, "deletions": 113}, "files": [{"sha": "960853333f6c7179b7a2a9c37f3abfc8ae1ed361", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 115, "deletions": 113, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/9f55705a24fa3a9f3977f1f95bc37143b2d857a0/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f55705a24fa3a9f3977f1f95bc37143b2d857a0/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=9f55705a24fa3a9f3977f1f95bc37143b2d857a0", "patch": "@@ -188,7 +188,7 @@ mod wrapping;\n // `Int` + `SignedInt` implemented for signed integers\n macro_rules! int_impl {\n     ($SelfT:ty, $ActualT:ident, $UnsignedT:ty, $BITS:expr, $Min:expr, $Max:expr, $Feature:expr,\n-     $EndFeature:expr) => {\n+     $EndFeature:expr, $rot:expr, $rot_op:expr, $rot_result:expr) => {\n         doc_comment! {\n             concat!(\"Returns the smallest value that can be represented by this integer type.\n \n@@ -334,55 +334,52 @@ $EndFeature, \"\n             }\n         }\n \n-        /// Shifts the bits to the left by a specified amount, `n`,\n-        /// wrapping the truncated bits to the end of the resulting integer.\n-        ///\n-        /// Please note this isn't the same operation as `<<`!\n-        ///\n-        /// # Examples\n-        ///\n-        /// Please note that this example is shared between integer types.\n-        /// Which explains why `i64` is used here.\n-        ///\n-        /// Basic usage:\n-        ///\n-        /// ```\n-        /// let n = 0x0123456789ABCDEFi64;\n-        /// let m = -0x76543210FEDCBA99i64;\n-        ///\n-        /// assert_eq!(n.rotate_left(32), m);\n-        /// ```\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[inline]\n-        pub fn rotate_left(self, n: u32) -> Self {\n-            (self as $UnsignedT).rotate_left(n) as Self\n-        }\n+        doc_comment! {\n+            concat!(\"Shifts the bits to the left by a specified amount, `n`,\n+wrapping the truncated bits to the end of the resulting integer.\n \n-        /// Shifts the bits to the right by a specified amount, `n`,\n-        /// wrapping the truncated bits to the beginning of the resulting\n-        /// integer.\n-        ///\n-        /// Please note this isn't the same operation as `>>`!\n-        ///\n-        /// # Examples\n-        ///\n-        /// Please note that this example is shared between integer types.\n-        /// Which explains why `i64` is used here.\n-        ///\n-        /// Basic usage:\n-        ///\n-        /// ```\n-        /// let n = 0x0123456789ABCDEFi64;\n-        /// let m = -0xFEDCBA987654322i64;\n-        ///\n-        /// assert_eq!(n.rotate_right(4), m);\n-        /// ```\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[inline]\n-        pub fn rotate_right(self, n: u32) -> Self {\n-            (self as $UnsignedT).rotate_right(n) as Self\n+Please note this isn't the same operation as `<<`!\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+let n = \", $rot_op, stringify!($SelfT), \";\n+let m = \", $rot_result, \";\n+\n+assert_eq!(n.rotate_left(\", $rot, \"), m);\n+```\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[inline]\n+            pub fn rotate_left(self, n: u32) -> Self {\n+                (self as $UnsignedT).rotate_left(n) as Self\n+            }\n         }\n \n+        doc_comment! {\n+            concat!(\"Shifts the bits to the right by a specified amount, `n`,\n+wrapping the truncated bits to the beginning of the resulting\n+integer.\n+\n+Please note this isn't the same operation as `>>`!\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+let n = \", $rot_result, stringify!($SelfT), \";\n+let m = \", $rot_op, \";\n+\n+assert_eq!(n.rotate_right(\", $rot, \"), m);\n+```\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[inline]\n+            pub fn rotate_right(self, n: u32) -> Self {\n+                (self as $UnsignedT).rotate_right(n) as Self\n+            }\n+        }\n         /// Reverses the byte order of the integer.\n         ///\n         /// # Examples\n@@ -2012,46 +2009,50 @@ $EndFeature, \"\n \n #[lang = \"i8\"]\n impl i8 {\n-    int_impl! { i8, i8, u8, 8, -128, 127, \"\", \"\" }\n+    int_impl! { i8, i8, u8, 8, -128, 127, \"\", \"\", 2, \"-0x7e\", \"0xa\" }\n }\n \n #[lang = \"i16\"]\n impl i16 {\n-    int_impl! { i16, i16, u16, 16, -32768, 32767, \"\", \"\" }\n+    int_impl! { i16, i16, u16, 16, -32768, 32767, \"\", \"\", 4, \"-0x5ffd\", \"0x3a\" }\n }\n \n #[lang = \"i32\"]\n impl i32 {\n-    int_impl! { i32, i32, u32, 32, -2147483648, 2147483647, \"\", \"\" }\n+    int_impl! { i32, i32, u32, 32, -2147483648, 2147483647, \"\", \"\", 8, \"0x10000b3\", \"0xb301\" }\n }\n \n #[lang = \"i64\"]\n impl i64 {\n-    int_impl! { i64, i64, u64, 64, -9223372036854775808, 9223372036854775807, \"\", \"\" }\n+    int_impl! { i64, i64, u64, 64, -9223372036854775808, 9223372036854775807, \"\", \"\", 12,\n+                \"0xaa00000000006e1\", \"0x6e10aa\" }\n }\n \n #[lang = \"i128\"]\n impl i128 {\n     int_impl! { i128, i128, u128, 128, -170141183460469231731687303715884105728,\n-        170141183460469231731687303715884105727, \"\", \"\" }\n+        170141183460469231731687303715884105727, \"\", \"\", 16,\n+        \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\"\n+    }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"isize\"]\n impl isize {\n-    int_impl! { isize, i16, u16, 16, -32768, 32767, \"\", \"\" }\n+    int_impl! { isize, i16, u16, 16, -32768, 32767, \"\", \"\", 4, \"-0x5ffd\", \"0x3a\" }\n }\n \n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"isize\"]\n impl isize {\n-    int_impl! { isize, i32, u32, 32, -2147483648, 2147483647, \"\", \"\" }\n+    int_impl! { isize, i32, u32, 32, -2147483648, 2147483647, \"\", \"\", 8, \"0x10000b3\", \"0xb301\" }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n #[lang = \"isize\"]\n impl isize {\n-    int_impl! { isize, i64, u64, 64, -9223372036854775808, 9223372036854775807, \"\", \"\" }\n+    int_impl! { isize, i64, u64, 64, -9223372036854775808, 9223372036854775807, \"\", \"\",\n+        12, \"0xaa00000000006e1\", \"0x6e10aa\" }\n }\n \n // Emits the correct `cttz` call, depending on the size of the type.\n@@ -2069,7 +2070,8 @@ macro_rules! uint_cttz_call {\n \n // `Int` + `UnsignedInt` implemented for unsigned integers\n macro_rules! uint_impl {\n-    ($SelfT:ty, $ActualT:ty, $BITS:expr, $MaxV:expr, $Feature:expr, $EndFeature:expr) => {\n+    ($SelfT:ty, $ActualT:ty, $BITS:expr, $MaxV:expr, $Feature:expr, $EndFeature:expr,\n+        $rot:expr, $rot_op:expr, $rot_result:expr) => {\n         doc_comment! {\n             concat!(\"Returns the smallest value that can be represented by this integer type.\n \n@@ -2210,57 +2212,55 @@ assert_eq!(n.trailing_zeros(), 3);\", $EndFeature, \"\n             }\n         }\n \n-        /// Shifts the bits to the left by a specified amount, `n`,\n-        /// wrapping the truncated bits to the end of the resulting integer.\n-        ///\n-        /// Please note this isn't the same operation as `<<`!\n-        ///\n-        /// # Examples\n-        ///\n-        /// Basic usage:\n-        ///\n-        /// Please note that this example is shared between integer types.\n-        /// Which explains why `u64` is used here.\n-        ///\n-        /// ```\n-        /// let n = 0x0123456789ABCDEFu64;\n-        /// let m = 0x3456789ABCDEF012u64;\n-        ///\n-        /// assert_eq!(n.rotate_left(12), m);\n-        /// ```\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[inline]\n-        pub fn rotate_left(self, n: u32) -> Self {\n-            // Protect against undefined behaviour for over-long bit shifts\n-            let n = n % $BITS;\n-            (self << n) | (self >> (($BITS - n) % $BITS))\n+        doc_comment! {\n+            concat!(\"Shifts the bits to the left by a specified amount, `n`,\n+wrapping the truncated bits to the end of the resulting integer.\n+\n+Please note this isn't the same operation as `<<`!\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+let n = \", $rot_op, stringify!($SelfT), \";\n+let m = \", $rot_result, \";\n+\n+assert_eq!(n.rotate_left(\", $rot, \"), m);\n+```\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[inline]\n+            pub fn rotate_left(self, n: u32) -> Self {\n+                // Protect against undefined behaviour for over-long bit shifts\n+                let n = n % $BITS;\n+                (self << n) | (self >> (($BITS - n) % $BITS))\n+            }\n         }\n \n-        /// Shifts the bits to the right by a specified amount, `n`,\n-        /// wrapping the truncated bits to the beginning of the resulting\n-        /// integer.\n-        ///\n-        /// Please note this isn't the same operation as `>>`!\n-        ///\n-        /// # Examples\n-        ///\n-        /// Basic usage:\n-        ///\n-        /// Please note that this example is shared between integer types.\n-        /// Which explains why `u64` is used here.\n-        ///\n-        /// ```\n-        /// let n = 0x0123456789ABCDEFu64;\n-        /// let m = 0xDEF0123456789ABCu64;\n-        ///\n-        /// assert_eq!(n.rotate_right(12), m);\n-        /// ```\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[inline]\n-        pub fn rotate_right(self, n: u32) -> Self {\n-            // Protect against undefined behaviour for over-long bit shifts\n-            let n = n % $BITS;\n-            (self >> n) | (self << (($BITS - n) % $BITS))\n+        doc_comment! {\n+            concat!(\"Shifts the bits to the right by a specified amount, `n`,\n+wrapping the truncated bits to the beginning of the resulting\n+integer.\n+\n+Please note this isn't the same operation as `>>`!\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+let n = \", $rot_result, stringify!($SelfT), \";\n+let m = \", $rot_op, \";\n+\n+assert_eq!(n.rotate_right(\", $rot, \"), m);\n+```\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[inline]\n+            pub fn rotate_right(self, n: u32) -> Self {\n+                // Protect against undefined behaviour for over-long bit shifts\n+                let n = n % $BITS;\n+                (self >> n) | (self << (($BITS - n) % $BITS))\n+            }\n         }\n \n         /// Reverses the byte order of the integer.\n@@ -3621,7 +3621,7 @@ $EndFeature, \"\n \n #[lang = \"u8\"]\n impl u8 {\n-    uint_impl! { u8, u8, 8, 255, \"\", \"\" }\n+    uint_impl! { u8, u8, 8, 255, \"\", \"\", 2, \"0x82\", \"0xa\" }\n \n \n     /// Checks if the value is within the ASCII range.\n@@ -4147,39 +4147,41 @@ impl u8 {\n \n #[lang = \"u16\"]\n impl u16 {\n-    uint_impl! { u16, u16, 16, 65535, \"\", \"\" }\n+    uint_impl! { u16, u16, 16, 65535, \"\", \"\", 4, \"0xa003\", \"0x3a\" }\n }\n \n #[lang = \"u32\"]\n impl u32 {\n-    uint_impl! { u32, u32, 32, 4294967295, \"\", \"\" }\n+    uint_impl! { u32, u32, 32, 4294967295, \"\", \"\", 8, \"0x10000b3\", \"0xb301\" }\n }\n \n #[lang = \"u64\"]\n impl u64 {\n-    uint_impl! { u64, u64, 64, 18446744073709551615, \"\", \"\" }\n+    uint_impl! { u64, u64, 64, 18446744073709551615, \"\", \"\", 12, \"0xaa00000000006e1\", \"0x6e10aa\" }\n }\n \n #[lang = \"u128\"]\n impl u128 {\n-    uint_impl! { u128, u128, 128, 340282366920938463463374607431768211455, \"\", \"\" }\n+    uint_impl! { u128, u128, 128, 340282366920938463463374607431768211455, \"\", \"\", 16,\n+        \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\" }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"usize\"]\n impl usize {\n-    uint_impl! { usize, u16, 16, 65536, \"\", \"\" }\n+    uint_impl! { usize, u16, 16, 65536, \"\", \"\", 4, \"0xa003\", \"0x3a\" }\n }\n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"usize\"]\n impl usize {\n-    uint_impl! { usize, u32, 32, 4294967295, \"\", \"\" }\n+    uint_impl! { usize, u32, 32, 4294967295, \"\", \"\", 8, \"0x10000b3\", \"0xb301\" }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n #[lang = \"usize\"]\n impl usize {\n-    uint_impl! { usize, u64, 64, 18446744073709551615, \"\", \"\" }\n+    uint_impl! { usize, u64, 64, 18446744073709551615, \"\", \"\", 12, \"0xaa00000000006e1\",\n+        \"0x6e10aa\" }\n }\n \n /// A classification of floating point numbers."}]}