{"sha": "e857e296c191ded418956143ef18dc2f419bd304", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NTdlMjk2YzE5MWRlZDQxODk1NjE0M2VmMThkYzJmNDE5YmQzMDQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-03-27T20:24:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-27T20:24:11Z"}, "message": "Rollup merge of #40317 - malbarbo:update-libc, r=alexcrichton\n\nUpdate libc to 0.2.21\n\nUpdate to include android aarch64 and x86 improvements.", "tree": {"sha": "099056de7876a7f4e080e07c0b8e1c9a9ec09d43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/099056de7876a7f4e080e07c0b8e1c9a9ec09d43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e857e296c191ded418956143ef18dc2f419bd304", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e857e296c191ded418956143ef18dc2f419bd304", "html_url": "https://github.com/rust-lang/rust/commit/e857e296c191ded418956143ef18dc2f419bd304", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e857e296c191ded418956143ef18dc2f419bd304/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccce2c6eb914a66571f60fa0afe8a46faa9fb3bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccce2c6eb914a66571f60fa0afe8a46faa9fb3bd", "html_url": "https://github.com/rust-lang/rust/commit/ccce2c6eb914a66571f60fa0afe8a46faa9fb3bd"}, {"sha": "24be89980e2e89404075fe463edae0f5db369251", "url": "https://api.github.com/repos/rust-lang/rust/commits/24be89980e2e89404075fe463edae0f5db369251", "html_url": "https://github.com/rust-lang/rust/commit/24be89980e2e89404075fe463edae0f5db369251"}], "stats": {"total": 47, "additions": 36, "deletions": 11}, "files": [{"sha": "05a2d197356ef253dfd985166576619ac9b6947f", "filename": "src/liblibc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc?ref=e857e296c191ded418956143ef18dc2f419bd304", "patch": "@@ -1 +1 @@\n-Subproject commit 64d954c6a76e896fbf7ed5c17e77c40e388abe84\n+Subproject commit 05a2d197356ef253dfd985166576619ac9b6947f"}, {"sha": "c34491941d69010a25f60a5ec6aa3ac947c36f98", "filename": "src/libstd/os/raw.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e857e296c191ded418956143ef18dc2f419bd304/src%2Flibstd%2Fos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e857e296c191ded418956143ef18dc2f419bd304/src%2Flibstd%2Fos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw.rs?ref=e857e296c191ded418956143ef18dc2f419bd304", "patch": "@@ -14,22 +14,24 @@\n \n use fmt;\n \n-#[cfg(any(target_os = \"android\",\n-          target_os = \"emscripten\",\n+#[cfg(any(target_os = \"emscripten\",\n           all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                        target_arch = \"arm\",\n                                        target_arch = \"powerpc\",\n                                        target_arch = \"powerpc64\",\n                                        target_arch = \"s390x\")),\n+          all(target_os = \"android\", any(target_arch = \"aarch64\",\n+                                         target_arch = \"arm\")),\n           all(target_os = \"fuchsia\", target_arch = \"aarch64\")))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = u8;\n-#[cfg(not(any(target_os = \"android\",\n-              target_os = \"emscripten\",\n+#[cfg(not(any(target_os = \"emscripten\",\n               all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                            target_arch = \"arm\",\n                                            target_arch = \"powerpc\",\n                                            target_arch = \"powerpc64\",\n                                            target_arch = \"s390x\")),\n+              all(target_os = \"android\", any(target_arch = \"aarch64\",\n+                                             target_arch = \"arm\")),\n               all(target_os = \"fuchsia\", target_arch = \"aarch64\"))))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = i8;\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_schar = i8;"}, {"sha": "d688f2fa504517cb3fe450b15f68cc8ea7005f6e", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e857e296c191ded418956143ef18dc2f419bd304/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e857e296c191ded418956143ef18dc2f419bd304/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=e857e296c191ded418956143ef18dc2f419bd304", "patch": "@@ -641,7 +641,7 @@ impl UnixListener {\n                 let inner = Socket::new_raw(libc::AF_UNIX, libc::SOCK_STREAM)?;\n                 let (addr, len) = sockaddr_un(path)?;\n \n-                cvt(libc::bind(*inner.as_inner(), &addr as *const _ as *const _, len))?;\n+                cvt(libc::bind(*inner.as_inner(), &addr as *const _ as *const _, len as _))?;\n                 cvt(libc::listen(*inner.as_inner(), 128))?;\n \n                 Ok(UnixListener(inner))\n@@ -920,7 +920,7 @@ impl UnixDatagram {\n                 let socket = UnixDatagram::unbound()?;\n                 let (addr, len) = sockaddr_un(path)?;\n \n-                cvt(libc::bind(*socket.0.as_inner(), &addr as *const _ as *const _, len))?;\n+                cvt(libc::bind(*socket.0.as_inner(), &addr as *const _ as *const _, len as _))?;\n \n                 Ok(socket)\n             }"}, {"sha": "e9f41009064ca43ea267861b2bfe76cc8fd64718", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e857e296c191ded418956143ef18dc2f419bd304/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e857e296c191ded418956143ef18dc2f419bd304/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=e857e296c191ded418956143ef18dc2f419bd304", "patch": "@@ -417,12 +417,26 @@ mod tests {\n         }\n     }\n \n+    // Android with api less than 21 define sig* functions inline, so it is not\n+    // available for dynamic link. Implementing sigemptyset and sigaddset allow us\n+    // to support older Android version (independent of libc version).\n+    // The following implementations are based on https://git.io/vSkNf\n+\n     #[cfg(not(target_os = \"android\"))]\n     extern {\n+        #[cfg_attr(target_os = \"netbsd\", link_name = \"__sigemptyset14\")]\n+        fn sigemptyset(set: *mut libc::sigset_t) -> libc::c_int;\n+\n         #[cfg_attr(target_os = \"netbsd\", link_name = \"__sigaddset14\")]\n         fn sigaddset(set: *mut libc::sigset_t, signum: libc::c_int) -> libc::c_int;\n     }\n \n+    #[cfg(target_os = \"android\")]\n+    unsafe fn sigemptyset(set: *mut libc::sigset_t) -> libc::c_int {\n+        libc::memset(set as *mut _, 0, mem::size_of::<libc::sigset_t>());\n+        return 0;\n+    }\n+\n     #[cfg(target_os = \"android\")]\n     unsafe fn sigaddset(set: *mut libc::sigset_t, signum: libc::c_int) -> libc::c_int {\n         use slice;\n@@ -450,7 +464,7 @@ mod tests {\n \n             let mut set: libc::sigset_t = mem::uninitialized();\n             let mut old_set: libc::sigset_t = mem::uninitialized();\n-            t!(cvt(libc::sigemptyset(&mut set)));\n+            t!(cvt(sigemptyset(&mut set)));\n             t!(cvt(sigaddset(&mut set, libc::SIGINT)));\n             t!(cvt(libc::pthread_sigmask(libc::SIG_SETMASK, &set, &mut old_set)));\n "}, {"sha": "edd322ca6fa0708b1e4a928f7ecdb3ff66e5480c", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e857e296c191ded418956143ef18dc2f419bd304/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e857e296c191ded418956143ef18dc2f419bd304/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=e857e296c191ded418956143ef18dc2f419bd304", "patch": "@@ -193,7 +193,16 @@ impl Command {\n             // need to clean things up now to avoid confusing the program\n             // we're about to run.\n             let mut set: libc::sigset_t = mem::uninitialized();\n-            t!(cvt(libc::sigemptyset(&mut set)));\n+            if cfg!(target_os = \"android\") {\n+                // Implementing sigemptyset allow us to support older Android\n+                // versions. See the comment about Android and sig* functions in\n+                // process_common.rs\n+                libc::memset(&mut set as *mut _ as *mut _,\n+                             0,\n+                             mem::size_of::<libc::sigset_t>());\n+            } else {\n+                t!(cvt(libc::sigemptyset(&mut set)));\n+            }\n             t!(cvt(libc::pthread_sigmask(libc::SIG_SETMASK, &set,\n                                          ptr::null_mut())));\n             let ret = sys::signal(libc::SIGPIPE, libc::SIG_DFL);"}, {"sha": "9239c18e59717a2bf088859ff05a8dbbccfbe81a", "filename": "src/libstd/sys_common/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e857e296c191ded418956143ef18dc2f419bd304/src%2Flibstd%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e857e296c191ded418956143ef18dc2f419bd304/src%2Flibstd%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fnet.rs?ref=e857e296c191ded418956143ef18dc2f419bd304", "patch": "@@ -339,7 +339,7 @@ impl TcpListener {\n \n         // Bind our new socket\n         let (addrp, len) = addr.into_inner();\n-        cvt(unsafe { c::bind(*sock.as_inner(), addrp, len) })?;\n+        cvt(unsafe { c::bind(*sock.as_inner(), addrp, len as _) })?;\n \n         // Start listening\n         cvt(unsafe { c::listen(*sock.as_inner(), 128) })?;\n@@ -430,7 +430,7 @@ impl UdpSocket {\n \n         let sock = Socket::new(addr, c::SOCK_DGRAM)?;\n         let (addrp, len) = addr.into_inner();\n-        cvt(unsafe { c::bind(*sock.as_inner(), addrp, len) })?;\n+        cvt(unsafe { c::bind(*sock.as_inner(), addrp, len as _) })?;\n         Ok(UdpSocket { inner: sock })\n     }\n "}]}