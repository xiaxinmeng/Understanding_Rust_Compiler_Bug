{"sha": "22376be7542c84b0412c403ced931c12ec1bfc0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMzc2YmU3NTQyYzg0YjA0MTJjNDAzY2VkOTMxYzEyZWMxYmZjMGU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-12-18T23:31:02Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-12-27T21:55:14Z"}, "message": "syntax: format: remove unused method_statics field.", "tree": {"sha": "5cb2f6a4b0d4b423a3cf70b39c9847d8b10d9b1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cb2f6a4b0d4b423a3cf70b39c9847d8b10d9b1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22376be7542c84b0412c403ced931c12ec1bfc0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22376be7542c84b0412c403ced931c12ec1bfc0e", "html_url": "https://github.com/rust-lang/rust/commit/22376be7542c84b0412c403ced931c12ec1bfc0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22376be7542c84b0412c403ced931c12ec1bfc0e/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0201334439393bed205c1148bed425b80aab8c22", "url": "https://api.github.com/repos/rust-lang/rust/commits/0201334439393bed205c1148bed425b80aab8c22", "html_url": "https://github.com/rust-lang/rust/commit/0201334439393bed205c1148bed425b80aab8c22"}], "stats": {"total": 19, "additions": 4, "deletions": 15}, "files": [{"sha": "fe37c093d436d7bc9c119e94a7e869633c437a0a", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/22376be7542c84b0412c403ced931c12ec1bfc0e/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22376be7542c84b0412c403ced931c12ec1bfc0e/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=22376be7542c84b0412c403ced931c12ec1bfc0e", "patch": "@@ -63,7 +63,6 @@ struct Context<'a, 'b:'a> {\n     all_pieces_simple: bool,\n \n     name_positions: HashMap<string::String, uint>,\n-    method_statics: Vec<P<ast::Item>>,\n \n     /// Updated as arguments are consumed or methods are entered\n     nest_level: uint,\n@@ -495,20 +494,12 @@ impl<'a, 'b> Context<'a, 'b> {\n     /// Actually builds the expression which the iformat! block will be expanded\n     /// to\n     fn to_expr(mut self, invocation: Invocation) -> P<ast::Expr> {\n-        let mut lets = Vec::new();\n         let mut locals = Vec::new();\n         let mut names = Vec::from_fn(self.name_positions.len(), |_| None);\n         let mut pats = Vec::new();\n         let mut heads = Vec::new();\n \n-        // First, declare all of our methods that are statics\n-        for method in self.method_statics.into_iter() {\n-            let decl = respan(self.fmtsp, ast::DeclItem(method));\n-            lets.push(P(respan(self.fmtsp,\n-                               ast::StmtDecl(P(decl), ast::DUMMY_NODE_ID))));\n-        }\n-\n-        // Next, build up the static array which will become our precompiled\n+        // First, build up the static array which will become our precompiled\n         // format \"string\"\n         let static_str_name = self.ecx.ident_of(\"__STATIC_FMTSTR\");\n         let static_lifetime = self.ecx.lifetime(self.fmtsp, self.ecx.ident_of(\"'static\").name);\n@@ -517,10 +508,9 @@ impl<'a, 'b> Context<'a, 'b> {\n                 self.ecx.ty_ident(self.fmtsp, self.ecx.ident_of(\"str\")),\n                 Some(static_lifetime),\n                 ast::MutImmutable);\n-        lets.push(Context::item_static_array(self.ecx,\n-                                             static_str_name,\n-                                             piece_ty,\n-                                             self.str_pieces));\n+        let mut lets = vec![\n+            Context::item_static_array(self.ecx, static_str_name, piece_ty, self.str_pieces)\n+        ];\n \n         // Then, build up the static array which will store our precompiled\n         // nonstandard placeholders, if there are any.\n@@ -728,7 +718,6 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt, sp: Span,\n         pieces: Vec::new(),\n         str_pieces: Vec::new(),\n         all_pieces_simple: true,\n-        method_statics: Vec::new(),\n         fmtsp: sp,\n     };\n     cx.fmtsp = efmt.span;"}]}