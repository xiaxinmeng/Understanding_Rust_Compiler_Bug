{"sha": "bcb01bca86b4ebe10501fb918bb807edc34a7a1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjYjAxYmNhODZiNGViZTEwNTAxZmI5MThiYjgwN2VkYzM0YTdhMWI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-13T10:05:40Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-13T12:43:57Z"}, "message": "Remove MiscMethods::instances", "tree": {"sha": "75bdff5438b3b47cfa61135eae83539a59a44955", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75bdff5438b3b47cfa61135eae83539a59a44955"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcb01bca86b4ebe10501fb918bb807edc34a7a1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcb01bca86b4ebe10501fb918bb807edc34a7a1b", "html_url": "https://github.com/rust-lang/rust/commit/bcb01bca86b4ebe10501fb918bb807edc34a7a1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcb01bca86b4ebe10501fb918bb807edc34a7a1b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dad8ddbfdd86556fa8a5a287d0256c74ead59f59", "url": "https://api.github.com/repos/rust-lang/rust/commits/dad8ddbfdd86556fa8a5a287d0256c74ead59f59", "html_url": "https://github.com/rust-lang/rust/commit/dad8ddbfdd86556fa8a5a287d0256c74ead59f59"}], "stats": {"total": 43, "additions": 21, "deletions": 22}, "files": [{"sha": "08fa23f2a7c9e31b09b539309692a655f9384926", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcb01bca86b4ebe10501fb918bb807edc34a7a1b/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb01bca86b4ebe10501fb918bb807edc34a7a1b/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=bcb01bca86b4ebe10501fb918bb807edc34a7a1b", "patch": "@@ -33,7 +33,7 @@ pub fn get_fn(\n     assert!(!instance.substs.has_param_types());\n \n     let sig = instance.fn_sig(cx.tcx());\n-    if let Some(&llfn) = cx.instances().borrow().get(&instance) {\n+    if let Some(&llfn) = cx.instances.borrow().get(&instance) {\n         return llfn;\n     }\n "}, {"sha": "0d0ee2f6a150e857c20994464dfcbdd645feb4e4", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcb01bca86b4ebe10501fb918bb807edc34a7a1b/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb01bca86b4ebe10501fb918bb807edc34a7a1b/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=bcb01bca86b4ebe10501fb918bb807edc34a7a1b", "patch": "@@ -305,7 +305,7 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                         }\n                     }\n                     Some(GlobalAlloc::Function(fn_instance)) => {\n-                        self.get_fn(fn_instance)\n+                        self.get_fn_addr(fn_instance)\n                     }\n                     Some(GlobalAlloc::Static(def_id)) => {\n                         assert!(self.tcx.is_static(def_id));"}, {"sha": "2da93877172141890b20c3ba11cbc146e5c83733", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bcb01bca86b4ebe10501fb918bb807edc34a7a1b/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb01bca86b4ebe10501fb918bb807edc34a7a1b/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=bcb01bca86b4ebe10501fb918bb807edc34a7a1b", "patch": "@@ -326,11 +326,11 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         &self.vtables\n     }\n \n-    fn instances(&self) -> &RefCell<FxHashMap<Instance<'tcx>, &'ll Value>> {\n-        &self.instances\n+    fn get_fn(&self, instance: Instance<'tcx>) -> &'ll Value {\n+        get_fn(self, instance)\n     }\n \n-    fn get_fn(&self, instance: Instance<'tcx>) -> &'ll Value {\n+    fn get_fn_addr(&self, instance: Instance<'tcx>) -> &'ll Value {\n         get_fn(self, instance)\n     }\n \n@@ -361,7 +361,7 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         let tcx = self.tcx;\n         let llfn = match tcx.lang_items().eh_personality() {\n             Some(def_id) if !wants_msvc_seh(self.sess()) => {\n-                self.get_fn(\n+                self.get_fn_addr(\n                     ty::Instance::resolve(\n                         tcx,\n                         ty::ParamEnv::reveal_all(),\n@@ -396,7 +396,7 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         let tcx = self.tcx;\n         assert!(self.sess().target.target.options.custom_unwind_resume);\n         if let Some(def_id) = tcx.lang_items().eh_unwind_resume() {\n-            let llfn = self.get_fn(\n+            let llfn = self.get_fn_addr(\n                 ty::Instance::resolve(\n                     tcx,\n                     ty::ParamEnv::reveal_all(),"}, {"sha": "1c441ca7cbf2e277b860dc3d70e6dc58a126a909", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bcb01bca86b4ebe10501fb918bb807edc34a7a1b/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb01bca86b4ebe10501fb918bb807edc34a7a1b/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=bcb01bca86b4ebe10501fb918bb807edc34a7a1b", "patch": "@@ -376,8 +376,7 @@ pub fn codegen_instance<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n     let sig = instance.fn_sig(cx.tcx());\n     let sig = cx.tcx().normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n \n-    let lldecl = cx.instances().borrow().get(&instance).cloned().unwrap_or_else(||\n-        bug!(\"Instance `{:?}` not already declared\", instance));\n+    let lldecl = cx.get_fn(instance);\n \n     let mir = cx.tcx().instance_mir(instance.def);\n     mir::codegen_mir::<Bx>(cx, lldecl, &mir, instance, sig);\n@@ -399,7 +398,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(cx: &'\n         return;\n     }\n \n-    let main_llfn = cx.get_fn(instance);\n+    let main_llfn = cx.get_fn_addr(instance);\n \n     let et = cx.tcx().entry_fn(LOCAL_CRATE).map(|e| e.1);\n     match et {\n@@ -454,7 +453,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(cx: &'\n \n         let (start_fn, args) = if use_start_lang_item {\n             let start_def_id = cx.tcx().require_lang_item(StartFnLangItem, None);\n-            let start_fn = cx.get_fn(\n+            let start_fn = cx.get_fn_addr(\n                 ty::Instance::resolve(\n                     cx.tcx(),\n                     ty::ParamEnv::reveal_all(),"}, {"sha": "266d2e5b18d22bbbfe2aa256b472cb495bb02c1e", "filename": "src/librustc_codegen_ssa/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcb01bca86b4ebe10501fb918bb807edc34a7a1b/src%2Flibrustc_codegen_ssa%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb01bca86b4ebe10501fb918bb807edc34a7a1b/src%2Flibrustc_codegen_ssa%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmeth.rs?ref=bcb01bca86b4ebe10501fb918bb807edc34a7a1b", "patch": "@@ -91,7 +91,7 @@ pub fn get_vtable<'tcx, Cx: CodegenMethods<'tcx>>(\n \n     let methods = methods.cloned().map(|opt_mth| {\n         opt_mth.map_or(nullptr, |(def_id, substs)| {\n-            cx.get_fn(\n+            cx.get_fn_addr(\n                 ty::Instance::resolve_for_vtable(\n                     cx.tcx(),\n                     ty::ParamEnv::reveal_all(),\n@@ -108,7 +108,7 @@ pub fn get_vtable<'tcx, Cx: CodegenMethods<'tcx>>(\n     // `get_vtable` in rust_mir/interpret/traits.rs\n     // /////////////////////////////////////////////////////////////////////////////////////////////\n     let components: Vec<_> = [\n-        cx.get_fn(Instance::resolve_drop_in_place(cx.tcx(), ty)),\n+        cx.get_fn_addr(Instance::resolve_drop_in_place(cx.tcx(), ty)),\n         cx.const_usize(layout.size.bytes()),\n         cx.const_usize(layout.align.abi.bytes())\n     ].iter().cloned().chain(methods).collect();"}, {"sha": "dc77d025c005fa4307d5dd77f187a95ffd31609f", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bcb01bca86b4ebe10501fb918bb807edc34a7a1b/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb01bca86b4ebe10501fb918bb807edc34a7a1b/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=bcb01bca86b4ebe10501fb918bb807edc34a7a1b", "patch": "@@ -358,7 +358,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 (meth::DESTRUCTOR.get_fn(&mut bx, vtable, &fn_ty), fn_ty)\n             }\n             _ => {\n-                (bx.get_fn(drop_fn),\n+                (bx.get_fn_addr(drop_fn),\n                  FnType::of_instance(&bx, drop_fn))\n             }\n         };\n@@ -460,7 +460,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let def_id = common::langcall(bx.tcx(), Some(span), \"\", lang_item);\n         let instance = ty::Instance::mono(bx.tcx(), def_id);\n         let fn_ty = FnType::of_instance(&bx, instance);\n-        let llfn = bx.get_fn(instance);\n+        let llfn = bx.get_fn_addr(instance);\n \n         // Codegen the actual panic invoke/call.\n         helper.do_call(self, &mut bx, fn_ty, llfn, &args, None, cleanup);\n@@ -576,7 +576,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     common::langcall(bx.tcx(), Some(span), \"\", lang_items::PanicFnLangItem);\n                 let instance = ty::Instance::mono(bx.tcx(), def_id);\n                 let fn_ty = FnType::of_instance(&bx, instance);\n-                let llfn = bx.get_fn(instance);\n+                let llfn = bx.get_fn_addr(instance);\n \n                 if let Some((_, target)) = destination.as_ref() {\n                     helper.maybe_sideeffect(self.mir, &mut bx, &[*target]);\n@@ -793,7 +793,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         let fn_ptr = match (llfn, instance) {\n             (Some(llfn), _) => llfn,\n-            (None, Some(instance)) => bx.get_fn(instance),\n+            (None, Some(instance)) => bx.get_fn_addr(instance),\n             _ => span_bug!(span, \"no llfn for call\"),\n         };\n "}, {"sha": "27442bb6bff887f54d866f6fe090267d1e89e427", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcb01bca86b4ebe10501fb918bb807edc34a7a1b/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb01bca86b4ebe10501fb918bb807edc34a7a1b/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=bcb01bca86b4ebe10501fb918bb807edc34a7a1b", "patch": "@@ -189,7 +189,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                     bug!(\"reifying a fn ptr that requires const arguments\");\n                                 }\n                                 OperandValue::Immediate(\n-                                    bx.get_fn(\n+                                    bx.get_fn_addr(\n                                         ty::Instance::resolve_for_fn_ptr(\n                                             bx.tcx(),\n                                             ty::ParamEnv::reveal_all(),\n@@ -212,7 +212,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                     def_id,\n                                     substs,\n                                     ty::ClosureKind::FnOnce);\n-                                OperandValue::Immediate(bx.cx().get_fn(instance))\n+                                OperandValue::Immediate(bx.cx().get_fn_addr(instance))\n                             }\n                             _ => {\n                                 bug!(\"{} cannot be cast to a fn ptr\", operand.layout.ty)\n@@ -495,7 +495,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     }\n                 };\n                 let instance = ty::Instance::mono(bx.tcx(), def_id);\n-                let r = bx.cx().get_fn(instance);\n+                let r = bx.cx().get_fn_addr(instance);\n                 let call = bx.call(r, &[llsize, llalign], None);\n                 let val = bx.pointercast(call, llty_ptr);\n "}, {"sha": "658ddd0028076970726f1d05b38a9b39400b7699", "filename": "src/librustc_codegen_ssa/traits/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcb01bca86b4ebe10501fb918bb807edc34a7a1b/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb01bca86b4ebe10501fb918bb807edc34a7a1b/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs?ref=bcb01bca86b4ebe10501fb918bb807edc34a7a1b", "patch": "@@ -11,8 +11,8 @@ pub trait MiscMethods<'tcx>: BackendTypes {\n         &self,\n     ) -> &RefCell<FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), Self::Value>>;\n     fn check_overflow(&self) -> bool;\n-    fn instances(&self) -> &RefCell<FxHashMap<Instance<'tcx>, Self::Function>>;\n-    fn get_fn(&self, instance: Instance<'tcx>) -> Self::Value;\n+    fn get_fn(&self, instance: Instance<'tcx>) -> Self::Function;\n+    fn get_fn_addr(&self, instance: Instance<'tcx>) -> Self::Value;\n     fn eh_personality(&self) -> Self::Value;\n     fn eh_unwind_resume(&self) -> Self::Value;\n     fn sess(&self) -> &Session;"}]}