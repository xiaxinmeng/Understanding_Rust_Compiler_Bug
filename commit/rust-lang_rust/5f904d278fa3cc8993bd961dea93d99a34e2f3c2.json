{"sha": "5f904d278fa3cc8993bd961dea93d99a34e2f3c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmOTA0ZDI3OGZhM2NjODk5M2JkOTYxZGVhOTNkOTlhMzRlMmYzYzI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-06-05T01:44:41Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-06-05T02:01:24Z"}, "message": "Shave off one more string append in a rare case.", "tree": {"sha": "706e5ae3e8ebf892709b520bcf5bfa65eac6bc1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/706e5ae3e8ebf892709b520bcf5bfa65eac6bc1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f904d278fa3cc8993bd961dea93d99a34e2f3c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f904d278fa3cc8993bd961dea93d99a34e2f3c2", "html_url": "https://github.com/rust-lang/rust/commit/5f904d278fa3cc8993bd961dea93d99a34e2f3c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f904d278fa3cc8993bd961dea93d99a34e2f3c2/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a542258277aac84889ed7eb3c2f14273d6d5e3f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a542258277aac84889ed7eb3c2f14273d6d5e3f7", "html_url": "https://github.com/rust-lang/rust/commit/a542258277aac84889ed7eb3c2f14273d6d5e3f7"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "156724cb06170bdc6f95cf59151c93f6c767315f", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5f904d278fa3cc8993bd961dea93d99a34e2f3c2/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f904d278fa3cc8993bd961dea93d99a34e2f3c2/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=5f904d278fa3cc8993bd961dea93d99a34e2f3c2", "patch": "@@ -89,11 +89,12 @@ fn parse_buf(buf: [u8], radix: uint) -> option<T> {\n fn from_str(s: str) -> option<T> { parse_buf(str::bytes(s), 10u) }\n \n #[doc = \"Convert to a string in a given base\"]\n-fn to_str(n: T, radix: uint) -> str {\n-    assert (0u < radix && radix <= 16u);\n-    ret if n < 0 as T {\n-            \"-\" + uint::to_str(-n as uint, radix)\n-        } else { uint::to_str(n as uint, radix) };\n+fn to_str(n: T, radix: uint) -> str unsafe {\n+    to_str_bytes(n, radix) {|slice|\n+        vec::unpack_slice(slice) {|p, len|\n+            str::unsafe::from_buf_len(p, len)\n+        }\n+    }\n }\n \n fn to_str_bytes<U>(n: T, radix: uint, f: fn([u8]/&) -> U) -> U {"}]}