{"sha": "e91897d2141afab4ccfe1382daa1bac3316602e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MTg5N2QyMTQxYWZhYjRjY2ZlMTM4MmRhYTFiYWMzMzE2NjAyZTA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-23T17:10:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-23T17:10:01Z"}, "message": "Rollup merge of #72492 - JohnTitor:add-tests, r=matthewjasper\n\nAdd some regression tests\n\nCloses #69415\nCloses #72455\n\nr? @matthewjasper", "tree": {"sha": "0d38e8cf07b91d785d225cdd0b30595e9bcbb93c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d38e8cf07b91d785d225cdd0b30595e9bcbb93c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e91897d2141afab4ccfe1382daa1bac3316602e0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeyVjpCRBK7hj4Ov3rIwAAdHIIAIOeEKWVw4ZVC29OEh6RGFyJ\nWMjn2S6Xr4LfejjHzdH7kqV9tbrDLyDGJz3h8ctdz7KMlvo8W+eKJ/KBUZt4UB2p\nTWXp47i7OlNX/7jkX3yBUpjO9I+ywWajCfR5rK9G2wvUKc897GkXqRjHyANwH/bA\nk9JN3qSmhCt/C/8Z7Back8sqkgiap2/PdmjR0DFET3Oyu985jj+PTuwZx4v9s1Mn\n6DlenJqPoNZOEZ0pjIQlW0fZ6hnwazQhRbpdU+W57HPYzZvOOfHPYocNZsMvE334\n5GmGgFP9whWvq3scn7QxJKi+wo3dxsR2qhJVV8bQvKxWR4PEHrz5jsV5rZkM3Ag=\n=IJeG\n-----END PGP SIGNATURE-----\n", "payload": "tree 0d38e8cf07b91d785d225cdd0b30595e9bcbb93c\nparent 67759b74f44f4d119625115525b5375416e5f8d8\nparent 47e35cb9bdcb4d2fd66595d566633e9444325ad4\nauthor Dylan DPC <dylan.dpc@gmail.com> 1590253801 +0200\ncommitter GitHub <noreply@github.com> 1590253801 +0200\n\nRollup merge of #72492 - JohnTitor:add-tests, r=matthewjasper\n\nAdd some regression tests\n\nCloses #69415\nCloses #72455\n\nr? @matthewjasper\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e91897d2141afab4ccfe1382daa1bac3316602e0", "html_url": "https://github.com/rust-lang/rust/commit/e91897d2141afab4ccfe1382daa1bac3316602e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e91897d2141afab4ccfe1382daa1bac3316602e0/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67759b74f44f4d119625115525b5375416e5f8d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/67759b74f44f4d119625115525b5375416e5f8d8", "html_url": "https://github.com/rust-lang/rust/commit/67759b74f44f4d119625115525b5375416e5f8d8"}, {"sha": "47e35cb9bdcb4d2fd66595d566633e9444325ad4", "url": "https://api.github.com/repos/rust-lang/rust/commits/47e35cb9bdcb4d2fd66595d566633e9444325ad4", "html_url": "https://github.com/rust-lang/rust/commit/47e35cb9bdcb4d2fd66595d566633e9444325ad4"}], "stats": {"total": 62, "additions": 46, "deletions": 16}, "files": [{"sha": "9bce274027ee00186f26297d5012223a47ec96fb", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e91897d2141afab4ccfe1382daa1bac3316602e0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91897d2141afab4ccfe1382daa1bac3316602e0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs?ref=e91897d2141afab4ccfe1382daa1bac3316602e0", "patch": "@@ -1,3 +1,6 @@\n+// compile-flags: -Zsave-analysis\n+// This is also a regression test for #69415 and the above flag is needed.\n+\n #![feature(untagged_unions)]\n \n trait Tr1 { type As1: Copy; }"}, {"sha": "7f2704e1bc3715b314b28e557ad5535011452ed1", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e91897d2141afab4ccfe1382daa1bac3316602e0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e91897d2141afab4ccfe1382daa1bac3316602e0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=e91897d2141afab4ccfe1382daa1bac3316602e0", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:12:22\n+  --> $DIR/feature-gate-associated_type_bounds.rs:15:22\n    |\n LL |     type A: Iterator<Item: Copy>;\n    |                      ^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     type A: Iterator<Item: Copy>;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:15:22\n+  --> $DIR/feature-gate-associated_type_bounds.rs:18:22\n    |\n LL |     type B: Iterator<Item: 'static>;\n    |                      ^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     type B: Iterator<Item: 'static>;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:19:20\n+  --> $DIR/feature-gate-associated_type_bounds.rs:22:20\n    |\n LL | struct _St1<T: Tr1<As1: Tr2>> {\n    |                    ^^^^^^^^\n@@ -26,7 +26,7 @@ LL | struct _St1<T: Tr1<As1: Tr2>> {\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:26:18\n+  --> $DIR/feature-gate-associated_type_bounds.rs:29:18\n    |\n LL | enum _En1<T: Tr1<As1: Tr2>> {\n    |                  ^^^^^^^^\n@@ -35,7 +35,7 @@ LL | enum _En1<T: Tr1<As1: Tr2>> {\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:33:19\n+  --> $DIR/feature-gate-associated_type_bounds.rs:36:19\n    |\n LL | union _Un1<T: Tr1<As1: Tr2>> {\n    |                   ^^^^^^^^\n@@ -44,7 +44,7 @@ LL | union _Un1<T: Tr1<As1: Tr2>> {\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:40:37\n+  --> $DIR/feature-gate-associated_type_bounds.rs:43:37\n    |\n LL | type _TaWhere1<T> where T: Iterator<Item: Copy> = T;\n    |                                     ^^^^^^^^^^\n@@ -53,7 +53,7 @@ LL | type _TaWhere1<T> where T: Iterator<Item: Copy> = T;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:43:22\n+  --> $DIR/feature-gate-associated_type_bounds.rs:46:22\n    |\n LL | fn _apit(_: impl Tr1<As1: Copy>) {}\n    |                      ^^^^^^^^^\n@@ -62,7 +62,7 @@ LL | fn _apit(_: impl Tr1<As1: Copy>) {}\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:45:26\n+  --> $DIR/feature-gate-associated_type_bounds.rs:48:26\n    |\n LL | fn _apit_dyn(_: &dyn Tr1<As1: Copy>) {}\n    |                          ^^^^^^^^^\n@@ -71,7 +71,7 @@ LL | fn _apit_dyn(_: &dyn Tr1<As1: Copy>) {}\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:48:24\n+  --> $DIR/feature-gate-associated_type_bounds.rs:51:24\n    |\n LL | fn _rpit() -> impl Tr1<As1: Copy> { S1 }\n    |                        ^^^^^^^^^\n@@ -80,7 +80,7 @@ LL | fn _rpit() -> impl Tr1<As1: Copy> { S1 }\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:51:31\n+  --> $DIR/feature-gate-associated_type_bounds.rs:54:31\n    |\n LL | fn _rpit_dyn() -> Box<dyn Tr1<As1: Copy>> { Box::new(S1) }\n    |                               ^^^^^^^^^\n@@ -89,7 +89,7 @@ LL | fn _rpit_dyn() -> Box<dyn Tr1<As1: Copy>> { Box::new(S1) }\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:54:23\n+  --> $DIR/feature-gate-associated_type_bounds.rs:57:23\n    |\n LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    |                       ^^^^^^^^^\n@@ -98,7 +98,7 @@ LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:60:24\n+  --> $DIR/feature-gate-associated_type_bounds.rs:63:24\n    |\n LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    |                        ^^^^^^^^^\n@@ -107,7 +107,7 @@ LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:67:21\n+  --> $DIR/feature-gate-associated_type_bounds.rs:70:21\n    |\n LL |     let _: impl Tr1<As1: Copy> = S1;\n    |                     ^^^^^^^^^\n@@ -116,23 +116,23 @@ LL |     let _: impl Tr1<As1: Copy> = S1;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-associated_type_bounds.rs:54:14\n+  --> $DIR/feature-gate-associated_type_bounds.rs:57:14\n    |\n LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    |              ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-associated_type_bounds.rs:60:15\n+  --> $DIR/feature-gate-associated_type_bounds.rs:63:15\n    |\n LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    |               ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-associated_type_bounds.rs:67:12\n+  --> $DIR/feature-gate-associated_type_bounds.rs:70:12\n    |\n LL |     let _: impl Tr1<As1: Copy> = S1;\n    |            ^^^^^^^^^^^^^^^^^^^"}, {"sha": "b6c3bb222876d8a8159b94423a62d09f58539783", "filename": "src/test/ui/issues/issue-72455.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e91897d2141afab4ccfe1382daa1bac3316602e0/src%2Ftest%2Fui%2Fissues%2Fissue-72455.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91897d2141afab4ccfe1382daa1bac3316602e0/src%2Ftest%2Fui%2Fissues%2Fissue-72455.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72455.rs?ref=e91897d2141afab4ccfe1382daa1bac3316602e0", "patch": "@@ -0,0 +1,27 @@\n+// check-pass\n+\n+pub trait ResultExt {\n+    type Ok;\n+    fn err_eprint_and_ignore(self) -> Option<Self::Ok>;\n+}\n+\n+impl<O, E> ResultExt for std::result::Result<O, E>\n+where\n+    E: std::error::Error,\n+{\n+    type Ok = O;\n+    fn err_eprint_and_ignore(self) -> Option<O>\n+    where\n+        Self: ,\n+    {\n+        match self {\n+            Err(e) => {\n+                eprintln!(\"{}\", e);\n+                None\n+            }\n+            Ok(o) => Some(o),\n+        }\n+    }\n+}\n+\n+fn main() {}"}]}