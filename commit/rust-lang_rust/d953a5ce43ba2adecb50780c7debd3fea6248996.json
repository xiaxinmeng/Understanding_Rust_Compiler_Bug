{"sha": "d953a5ce43ba2adecb50780c7debd3fea6248996", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NTNhNWNlNDNiYTJhZGVjYjUwNzgwYzdkZWJkM2ZlYTYyNDg5OTY=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-04-29T04:03:55Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-18T08:57:21Z"}, "message": "replace old_iter::repeat with the Times trait", "tree": {"sha": "974242399e200b3b6b4b8ee2ad88ace50243f33e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/974242399e200b3b6b4b8ee2ad88ace50243f33e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d953a5ce43ba2adecb50780c7debd3fea6248996", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d953a5ce43ba2adecb50780c7debd3fea6248996", "html_url": "https://github.com/rust-lang/rust/commit/d953a5ce43ba2adecb50780c7debd3fea6248996", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d953a5ce43ba2adecb50780c7debd3fea6248996/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e91daaa8a9390ccf760b3ba7f965b2863103d993", "url": "https://api.github.com/repos/rust-lang/rust/commits/e91daaa8a9390ccf760b3ba7f965b2863103d993", "html_url": "https://github.com/rust-lang/rust/commit/e91daaa8a9390ccf760b3ba7f965b2863103d993"}], "stats": {"total": 82, "additions": 28, "deletions": 54}, "files": [{"sha": "cb7caeeb8109f1c290498a165439bd1dcb32dd22", "filename": "doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d953a5ce43ba2adecb50780c7debd3fea6248996/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/d953a5ce43ba2adecb50780c7debd3fea6248996/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=d953a5ce43ba2adecb50780c7debd3fea6248996", "patch": "@@ -1977,7 +1977,7 @@ struct TimeBomb {\n \n impl Drop for TimeBomb {\n     fn finalize(&self) {\n-        for old_iter::repeat(self.explosivity) {\n+        for self.explosivity.times {\n             println(\"blam!\");\n         }\n     }"}, {"sha": "12b7ce1eb6ebb4071d18fe8bb0eea3a996436d0e", "filename": "src/libcore/old_iter.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d953a5ce43ba2adecb50780c7debd3fea6248996/src%2Flibcore%2Fold_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d953a5ce43ba2adecb50780c7debd3fea6248996/src%2Flibcore%2Fold_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fold_iter.rs?ref=d953a5ce43ba2adecb50780c7debd3fea6248996", "patch": "@@ -238,26 +238,6 @@ pub fn position<A,IA:BaseIter<A>>(this: &IA, f: &fn(&A) -> bool)\n // iter interface, such as would provide \"reach\" in addition to \"each\". As is,\n // it would have to be implemented with foldr, which is too inefficient.\n \n-#[inline(always)]\n-#[cfg(stage0)]\n-pub fn repeat(times: uint, blk: &fn() -> bool) {\n-    let mut i = 0;\n-    while i < times {\n-        if !blk() { break }\n-        i += 1;\n-    }\n-}\n-#[inline(always)]\n-#[cfg(not(stage0))]\n-pub fn repeat(times: uint, blk: &fn() -> bool) -> bool {\n-    let mut i = 0;\n-    while i < times {\n-        if !blk() { return false; }\n-        i += 1;\n-    }\n-    return true;\n-}\n-\n #[inline(always)]\n pub fn min<A:Copy + Ord,IA:BaseIter<A>>(this: &IA) -> A {\n     match do foldl::<A,Option<A>,IA>(this, None) |a, b| {"}, {"sha": "8eb166c6ef233c14ad40528d418238de4775fff0", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d953a5ce43ba2adecb50780c7debd3fea6248996/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d953a5ce43ba2adecb50780c7debd3fea6248996/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=d953a5ce43ba2adecb50780c7debd3fea6248996", "patch": "@@ -619,7 +619,7 @@ fn test_spawn_unlinked_unsup_no_fail_down() { // grandchild sends on a port\n         let ch = ch.clone();\n         do spawn_unlinked {\n             // Give middle task a chance to fail-but-not-kill-us.\n-            for old_iter::repeat(16) { task::yield(); }\n+            for 16.times { task::yield(); }\n             ch.send(()); // If killed first, grandparent hangs.\n         }\n         fail!(); // Shouldn't kill either (grand)parent or (grand)child.\n@@ -634,7 +634,7 @@ fn test_spawn_unlinked_unsup_no_fail_up() { // child unlinked fails\n fn test_spawn_unlinked_sup_no_fail_up() { // child unlinked fails\n     do spawn_supervised { fail!(); }\n     // Give child a chance to fail-but-not-kill-us.\n-    for old_iter::repeat(16) { task::yield(); }\n+    for 16.times { task::yield(); }\n }\n #[test] #[should_fail] #[ignore(cfg(windows))]\n fn test_spawn_unlinked_sup_fail_down() {\n@@ -709,7 +709,7 @@ fn test_spawn_failure_propagate_grandchild() {\n             loop { task::yield(); }\n         }\n     }\n-    for old_iter::repeat(16) { task::yield(); }\n+    for 16.times { task::yield(); }\n     fail!();\n }\n \n@@ -721,7 +721,7 @@ fn test_spawn_failure_propagate_secondborn() {\n             loop { task::yield(); }\n         }\n     }\n-    for old_iter::repeat(16) { task::yield(); }\n+    for 16.times { task::yield(); }\n     fail!();\n }\n \n@@ -733,7 +733,7 @@ fn test_spawn_failure_propagate_nephew_or_niece() {\n             loop { task::yield(); }\n         }\n     }\n-    for old_iter::repeat(16) { task::yield(); }\n+    for 16.times { task::yield(); }\n     fail!();\n }\n \n@@ -745,7 +745,7 @@ fn test_spawn_linked_sup_propagate_sibling() {\n             loop { task::yield(); }\n         }\n     }\n-    for old_iter::repeat(16) { task::yield(); }\n+    for 16.times { task::yield(); }\n     fail!();\n }\n \n@@ -904,8 +904,7 @@ fn test_spawn_sched_blocking() {\n \n         // Testing that a task in one scheduler can block in foreign code\n         // without affecting other schedulers\n-        for old_iter::repeat(20u) {\n-\n+        for 20u.times {\n             let (start_po, start_ch) = stream();\n             let (fin_po, fin_ch) = stream();\n \n@@ -1024,7 +1023,7 @@ fn test_unkillable() {\n \n     // We want to do this after failing\n     do spawn_unlinked {\n-        for old_iter::repeat(10) { yield() }\n+        for 10.times { yield() }\n         ch.send(());\n     }\n \n@@ -1059,7 +1058,7 @@ fn test_unkillable_nested() {\n \n     // We want to do this after failing\n     do spawn_unlinked || {\n-        for old_iter::repeat(10) { yield() }\n+        for 10.times { yield() }\n         ch.send(());\n     }\n "}, {"sha": "1eac09ea2056f85cfc9b0c8dfd816354a76ae97f", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d953a5ce43ba2adecb50780c7debd3fea6248996/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d953a5ce43ba2adecb50780c7debd3fea6248996/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=d953a5ce43ba2adecb50780c7debd3fea6248996", "patch": "@@ -629,7 +629,7 @@ mod test {\n         let doc = (page_pass::mk_pass(config::DocPerMod).f)(srv, doc);\n         write_markdown(doc, writer_factory);\n         // We expect two pages to have been written\n-        for old_iter::repeat(2) {\n+        for 2.times {\n             po.recv();\n         }\n     }\n@@ -641,7 +641,7 @@ mod test {\n             ~\"#[link(name = \\\"core\\\")]; mod a { }\");\n         let doc = (page_pass::mk_pass(config::DocPerMod).f)(srv, doc);\n         write_markdown(doc, writer_factory);\n-        for old_iter::repeat(2) {\n+        for 2.times {\n             let (page, markdown) = po.recv();\n             match page {\n                 doc::CratePage(_) => {"}, {"sha": "57833e607ae0a8eb8ceb2a7c220636e2c457afd9", "filename": "src/libstd/base64.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d953a5ce43ba2adecb50780c7debd3fea6248996/src%2Flibstd%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d953a5ce43ba2adecb50780c7debd3fea6248996/src%2Flibstd%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbase64.rs?ref=d953a5ce43ba2adecb50780c7debd3fea6248996", "patch": "@@ -10,10 +10,6 @@\n \n //! Base64 binary-to-text encoding\n \n-use core::old_iter;\n-use core::str;\n-use core::vec;\n-\n pub trait ToBase64 {\n     fn to_base64(&self) -> ~str;\n }\n@@ -152,7 +148,7 @@ impl FromBase64 for ~[u8] {\n         while i < len {\n             let mut n = 0u;\n \n-            for old_iter::repeat(4u) {\n+            for 4u.times {\n                 let ch = self[i] as char;\n                 n <<= 6u;\n "}, {"sha": "52dc095b092dd852f7953457989abf2c5b576790", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d953a5ce43ba2adecb50780c7debd3fea6248996/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d953a5ce43ba2adecb50780c7debd3fea6248996/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=d953a5ce43ba2adecb50780c7debd3fea6248996", "patch": "@@ -188,7 +188,7 @@ mod test {\n     #[test]\n     fn test_gl_timer_sleep_stress1() {\n         let hl_loop = &uv::global_loop::get();\n-        for old_iter::repeat(50u) {\n+        for 50u.times {\n             sleep(hl_loop, 1u);\n         }\n     }\n@@ -208,8 +208,7 @@ mod test {\n \n         };\n \n-        for old_iter::repeat(repeat) {\n-\n+        for repeat.times {\n             let ch = ch.clone();\n             for spec.each |spec| {\n                 let (times, maxms) = *spec;\n@@ -218,15 +217,15 @@ mod test {\n                 do task::spawn {\n                     use core::rand::*;\n                     let mut rng = rng();\n-                    for old_iter::repeat(times) {\n+                    for times.times {\n                         sleep(&hl_loop_clone, rng.next() as uint % maxms);\n                     }\n                     ch.send(());\n                 }\n             }\n         }\n \n-        for old_iter::repeat(repeat * spec.len()) {\n+        for (repeat * spec.len()).times {\n             po.recv()\n         }\n     }\n@@ -244,7 +243,7 @@ mod test {\n         let mut failures = 0;\n         let hl_loop = uv::global_loop::get();\n \n-        for old_iter::repeat(times as uint) {\n+        for (times as uint).times {\n             task::yield();\n \n             let expected = rand::rng().gen_str(16u);\n@@ -273,7 +272,7 @@ mod test {\n         let mut failures = 0;\n         let hl_loop = uv::global_loop::get();\n \n-        for old_iter::repeat(times as uint) {\n+        for (times as uint).times {\n             let mut rng = rand::rng();\n             let expected = Cell(rng.gen_str(16u));\n             let (test_po, test_ch) = stream::<~str>();"}, {"sha": "d1471ba1e7705809cd502541f12c5bb2cf8fbe96", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d953a5ce43ba2adecb50780c7debd3fea6248996/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d953a5ce43ba2adecb50780c7debd3fea6248996/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=d953a5ce43ba2adecb50780c7debd3fea6248996", "patch": "@@ -215,15 +215,15 @@ mod test {\n         let (exit_po, exit_ch) = stream::<()>();\n         let exit_ch = SharedChan::new(exit_ch);\n         let cycles = 5000u;\n-        for old_iter::repeat(cycles) {\n+        for cycles.times {\n             let exit_ch_clone = exit_ch.clone();\n             task::spawn_sched(task::ManualThreads(1u), || {\n                 let hl_loop = &get_gl();\n                 impl_uv_hl_simple_timer(hl_loop);\n                 exit_ch_clone.send(());\n             });\n         };\n-        for old_iter::repeat(cycles) {\n+        for cycles.times {\n             exit_po.recv();\n         };\n         debug!(~\"test_stress_gl_uv_global_loop_high_level_global_timer\"+"}, {"sha": "b40f657ad7f0763aedf3b2d6fedd90e1a3a3cb85", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d953a5ce43ba2adecb50780c7debd3fea6248996/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d953a5ce43ba2adecb50780c7debd3fea6248996/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=d953a5ce43ba2adecb50780c7debd3fea6248996", "patch": "@@ -284,7 +284,7 @@ fn test_uv_iotask_async() {\n     // impl_uv_hl_async() runs have been called, at least.\n     let (work_exit_po, work_exit_ch) = stream::<()>();\n     let work_exit_ch = SharedChan::new(work_exit_ch);\n-    for old_iter::repeat(7u) {\n+    for 7u.times {\n         let iotask_clone = iotask.clone();\n         let work_exit_ch_clone = work_exit_ch.clone();\n         do task::spawn_sched(task::ManualThreads(1u)) {\n@@ -294,7 +294,7 @@ fn test_uv_iotask_async() {\n             work_exit_ch_clone.send(());\n         };\n     };\n-    for old_iter::repeat(7u) {\n+    for 7u.times {\n         debug!(\"waiting\");\n         work_exit_po.recv();\n     };"}, {"sha": "4a07193d8cd1d63e44a3b1b3d6f81bc47f6d1968", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d953a5ce43ba2adecb50780c7debd3fea6248996/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d953a5ce43ba2adecb50780c7debd3fea6248996/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=d953a5ce43ba2adecb50780c7debd3fea6248996", "patch": "@@ -30,7 +30,7 @@ fn main() {\n }\n \n fn run(repeat: int, depth: int) {\n-    for old_iter::repeat(repeat as uint) {\n+    for (repeat as uint).times {\n         debug!(\"starting %.4f\", precise_time_s());\n         do task::try {\n             recurse_or_fail(depth, None)"}, {"sha": "d7ec9f088653f0c3c62890eff331b14dd6bdc4fa", "filename": "src/test/run-fail/extern-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d953a5ce43ba2adecb50780c7debd3fea6248996/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d953a5ce43ba2adecb50780c7debd3fea6248996/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fextern-fail.rs?ref=d953a5ce43ba2adecb50780c7debd3fea6248996", "patch": "@@ -37,7 +37,7 @@ fn count(n: uint) -> uint {\n }\n \n fn main() {\n-    for old_iter::repeat(10u) {\n+    for 10u.times {\n         do task::spawn {\n             let result = count(5u);\n             debug!(\"result = %?\", result);"}, {"sha": "2d47916d05040f5e90b71e16a2566319567fd78f", "filename": "src/test/run-pass/bitv-perf-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d953a5ce43ba2adecb50780c7debd3fea6248996/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d953a5ce43ba2adecb50780c7debd3fea6248996/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs?ref=d953a5ce43ba2adecb50780c7debd3fea6248996", "patch": "@@ -21,5 +21,5 @@ fn bitv_test() -> bool {\n }\n \n pub fn main() {\n-    do old_iter::repeat(10000) || {bitv_test()};\n+    do 10000.times || {bitv_test()};\n }"}, {"sha": "379d88fbd7675c53c810a7848ace0f4ba558ff7d", "filename": "src/test/run-pass/extern-stress.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d953a5ce43ba2adecb50780c7debd3fea6248996/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d953a5ce43ba2adecb50780c7debd3fea6248996/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-stress.rs?ref=d953a5ce43ba2adecb50780c7debd3fea6248996", "patch": "@@ -34,7 +34,7 @@ fn count(n: uint) -> uint {\n }\n \n pub fn main() {\n-    for old_iter::repeat(100u) {\n+    for 100u.times {\n         do task::spawn {\n             assert!(count(5u) == 16u);\n         };"}, {"sha": "e2f23de6b6827f48464782c5a7a730f4590a6ecf", "filename": "src/test/run-pass/extern-yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d953a5ce43ba2adecb50780c7debd3fea6248996/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d953a5ce43ba2adecb50780c7debd3fea6248996/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-yield.rs?ref=d953a5ce43ba2adecb50780c7debd3fea6248996", "patch": "@@ -31,7 +31,7 @@ fn count(n: uint) -> uint {\n }\n \n pub fn main() {\n-    for old_iter::repeat(10u) {\n+    for 10u.times {\n         do task::spawn {\n             let result = count(5u);\n             debug!(\"result = %?\", result);"}]}