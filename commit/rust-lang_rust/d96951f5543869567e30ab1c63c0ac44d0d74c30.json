{"sha": "d96951f5543869567e30ab1c63c0ac44d0d74c30", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5Njk1MWY1NTQzODY5NTY3ZTMwYWIxYzYzYzBhYzQ0ZDBkNzRjMzA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-20T09:49:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-20T09:49:12Z"}, "message": "Rollup merge of #68978 - ecstatic-morse:const-int-pow, r=oli-obk\n\nMake integer exponentiation methods unstably const\n\ncc #53718\n\nThis makes the following inherent methods on integer primitives into unstable `const fn`:\n- `pow`\n- `checked_pow`\n- `wrapping_pow`\n- `overflowing_pow`\n- `saturating_pow`\n- `next_power_of_two`\n- `checked_next_power_of_two`\n- `wrapping_next_power_of_two`\n\nOnly two changes were made to the implementation of these methods. First, I had to switch from the `?` operator, which is not yet implemented in a const context, to a `try_opt` macro. Second, `next_power_of_two` was using `ops::Add::add` (see the first commit) to \"get overflow checks\", so I switched to `#[rustc_inherit_overflow_checks]`. I'm not quite sure why the attribute wasn't used in the first place.", "tree": {"sha": "0820b7f10d8c88a997a1df000f7ffbfe02546019", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0820b7f10d8c88a997a1df000f7ffbfe02546019"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d96951f5543869567e30ab1c63c0ac44d0d74c30", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeTlYYCRBK7hj4Ov3rIwAAdHIIAD23zl8swNFCDLKlhrPVpPu/\nm3x5XUGeISnaLCXbmwLQFoXsBDDVEyn1OSiJONHeLFrPED6wEHlUy2R7eyM9HxR7\niip0FGQeYdBO31QcGMYDlNs8ETi2M6/cC+HrvdPC/qslAIkoCNJrZRogRl+qk5aT\nZdKhs+ukTsNgSMZh2Ui7gZW3BJGP0wZVrPfCyvKo3J0UJJd+YUWuFFw2LlKCUUNi\nf0pQxrA/2W/LFZWmgtJBzmxrHI3QiHCOHgTbbClx//dlBoKAxa96/iIGgssBbBvF\nHC7Wff5OrkfJLvQ51AIoWg1CyAnTtLNAXyS04+6P0mG0W6vNmewRmaGMCwlps2o=\n=nlm+\n-----END PGP SIGNATURE-----\n", "payload": "tree 0820b7f10d8c88a997a1df000f7ffbfe02546019\nparent 588f00841b430b12b39fb75d778bd670df8c59f5\nparent 7fe5eaf7d8cb23ceb71d8e509be13d20ef836114\nauthor Dylan DPC <dylan.dpc@gmail.com> 1582192152 +0100\ncommitter GitHub <noreply@github.com> 1582192152 +0100\n\nRollup merge of #68978 - ecstatic-morse:const-int-pow, r=oli-obk\n\nMake integer exponentiation methods unstably const\n\ncc #53718\n\nThis makes the following inherent methods on integer primitives into unstable `const fn`:\n- `pow`\n- `checked_pow`\n- `wrapping_pow`\n- `overflowing_pow`\n- `saturating_pow`\n- `next_power_of_two`\n- `checked_next_power_of_two`\n- `wrapping_next_power_of_two`\n\nOnly two changes were made to the implementation of these methods. First, I had to switch from the `?` operator, which is not yet implemented in a const context, to a `try_opt` macro. Second, `next_power_of_two` was using `ops::Add::add` (see the first commit) to \"get overflow checks\", so I switched to `#[rustc_inherit_overflow_checks]`. I'm not quite sure why the attribute wasn't used in the first place.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d96951f5543869567e30ab1c63c0ac44d0d74c30", "html_url": "https://github.com/rust-lang/rust/commit/d96951f5543869567e30ab1c63c0ac44d0d74c30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d96951f5543869567e30ab1c63c0ac44d0d74c30/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "588f00841b430b12b39fb75d778bd670df8c59f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/588f00841b430b12b39fb75d778bd670df8c59f5", "html_url": "https://github.com/rust-lang/rust/commit/588f00841b430b12b39fb75d778bd670df8c59f5"}, {"sha": "7fe5eaf7d8cb23ceb71d8e509be13d20ef836114", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fe5eaf7d8cb23ceb71d8e509be13d20ef836114", "html_url": "https://github.com/rust-lang/rust/commit/7fe5eaf7d8cb23ceb71d8e509be13d20ef836114"}], "stats": {"total": 109, "additions": 86, "deletions": 23}, "files": [{"sha": "bca96b77812c8444f9edce511a8946252736df4f", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d96951f5543869567e30ab1c63c0ac44d0d74c30/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96951f5543869567e30ab1c63c0ac44d0d74c30/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=d96951f5543869567e30ab1c63c0ac44d0d74c30", "patch": "@@ -73,11 +73,14 @@\n #![feature(const_ascii_ctype_on_intrinsics)]\n #![feature(const_alloc_layout)]\n #![feature(const_if_match)]\n+#![feature(const_loop)]\n #![feature(const_checked_int_methods)]\n #![feature(const_euclidean_int_methods)]\n #![feature(const_overflowing_int_methods)]\n #![feature(const_saturating_int_methods)]\n #![feature(const_int_unchecked_arith)]\n+#![feature(const_int_pow)]\n+#![feature(constctlz)]\n #![feature(const_panic)]\n #![feature(const_fn_union)]\n #![feature(const_generics)]"}, {"sha": "6f55e7c8be8ca539a3a100dbb396319f39efcf5b", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 46, "deletions": 23, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d96951f5543869567e30ab1c63c0ac44d0d74c30/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96951f5543869567e30ab1c63c0ac44d0d74c30/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=d96951f5543869567e30ab1c63c0ac44d0d74c30", "patch": "@@ -8,9 +8,18 @@ use crate::convert::Infallible;\n use crate::fmt;\n use crate::intrinsics;\n use crate::mem;\n-use crate::ops;\n use crate::str::FromStr;\n \n+// Used because the `?` operator is not allowed in a const context.\n+macro_rules! try_opt {\n+    ($e:expr) => {\n+        match $e {\n+            Some(x) => x,\n+            None => return None,\n+        }\n+    };\n+}\n+\n macro_rules! impl_nonzero_fmt {\n     ( #[$stability: meta] ( $( $Trait: ident ),+ ) for $Ty: ident ) => {\n         $(\n@@ -993,26 +1002,27 @@ $EndFeature, \"\n ```\"),\n \n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_pow(self, mut exp: u32) -> Option<Self> {\n+            pub const fn checked_pow(self, mut exp: u32) -> Option<Self> {\n                 let mut base = self;\n                 let mut acc: Self = 1;\n \n                 while exp > 1 {\n                     if (exp & 1) == 1 {\n-                        acc = acc.checked_mul(base)?;\n+                        acc = try_opt!(acc.checked_mul(base));\n                     }\n                     exp /= 2;\n-                    base = base.checked_mul(base)?;\n+                    base = try_opt!(base.checked_mul(base));\n                 }\n \n                 // Deal with the final bit of the exponent separately, since\n                 // squaring the base afterwards is not necessary and may cause a\n                 // needless overflow.\n                 if exp == 1 {\n-                    acc = acc.checked_mul(base)?;\n+                    acc = try_opt!(acc.checked_mul(base));\n                 }\n \n                 Some(acc)\n@@ -1180,10 +1190,11 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_pow(3), \", stringify!($SelfT\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn saturating_pow(self, exp: u32) -> Self {\n+            pub const fn saturating_pow(self, exp: u32) -> Self {\n                 match self.checked_pow(exp) {\n                     Some(x) => x,\n                     None if self < 0 && exp % 2 == 1 => Self::min_value(),\n@@ -1523,10 +1534,11 @@ assert_eq!(3i8.wrapping_pow(6), -39);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn wrapping_pow(self, mut exp: u32) -> Self {\n+            pub const fn wrapping_pow(self, mut exp: u32) -> Self {\n                 let mut base = self;\n                 let mut acc: Self = 1;\n \n@@ -1900,10 +1912,11 @@ assert_eq!(3i8.overflowing_pow(5), (-13, true));\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn overflowing_pow(self, mut exp: u32) -> (Self, bool) {\n+            pub const fn overflowing_pow(self, mut exp: u32) -> (Self, bool) {\n                 let mut base = self;\n                 let mut acc: Self = 1;\n                 let mut overflown = false;\n@@ -1949,11 +1962,12 @@ assert_eq!(x.pow(5), 32);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n-            pub fn pow(self, mut exp: u32) -> Self {\n+            pub const fn pow(self, mut exp: u32) -> Self {\n                 let mut base = self;\n                 let mut acc = 1;\n \n@@ -3119,26 +3133,27 @@ Basic usage:\n assert_eq!(\", stringify!($SelfT), \"::max_value().checked_pow(2), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn checked_pow(self, mut exp: u32) -> Option<Self> {\n+            pub const fn checked_pow(self, mut exp: u32) -> Option<Self> {\n                 let mut base = self;\n                 let mut acc: Self = 1;\n \n                 while exp > 1 {\n                     if (exp & 1) == 1 {\n-                        acc = acc.checked_mul(base)?;\n+                        acc = try_opt!(acc.checked_mul(base));\n                     }\n                     exp /= 2;\n-                    base = base.checked_mul(base)?;\n+                    base = try_opt!(base.checked_mul(base));\n                 }\n \n                 // Deal with the final bit of the exponent separately, since\n                 // squaring the base afterwards is not necessary and may cause a\n                 // needless overflow.\n                 if exp == 1 {\n-                    acc = acc.checked_mul(base)?;\n+                    acc = try_opt!(acc.checked_mul(base));\n                 }\n \n                 Some(acc)\n@@ -3234,10 +3249,11 @@ assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_pow(2), \", stringify!($SelfT\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn saturating_pow(self, exp: u32) -> Self {\n+            pub const fn saturating_pow(self, exp: u32) -> Self {\n                 match self.checked_pow(exp) {\n                     Some(x) => x,\n                     None => Self::max_value(),\n@@ -3527,10 +3543,11 @@ Basic usage:\n assert_eq!(3u8.wrapping_pow(6), 217);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn wrapping_pow(self, mut exp: u32) -> Self {\n+            pub const fn wrapping_pow(self, mut exp: u32) -> Self {\n                 let mut base = self;\n                 let mut acc: Self = 1;\n \n@@ -3853,10 +3870,11 @@ Basic usage:\n assert_eq!(3u8.overflowing_pow(6), (217, true));\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n-            pub fn overflowing_pow(self, mut exp: u32) -> (Self, bool) {\n+            pub const fn overflowing_pow(self, mut exp: u32) -> (Self, bool) {\n                 let mut base = self;\n                 let mut acc: Self = 1;\n                 let mut overflown = false;\n@@ -3899,11 +3917,12 @@ Basic usage:\n \", $Feature, \"assert_eq!(2\", stringify!($SelfT), \".pow(5), 32);\", $EndFeature, \"\n ```\"),\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n         #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n-        pub fn pow(self, mut exp: u32) -> Self {\n+        pub const fn pow(self, mut exp: u32) -> Self {\n             let mut base = self;\n             let mut acc = 1;\n \n@@ -4014,7 +4033,8 @@ assert!(!10\", stringify!($SelfT), \".is_power_of_two());\", $EndFeature, \"\n         // overflow cases it instead ends up returning the maximum value\n         // of the type, and can return 0 for 0.\n         #[inline]\n-        fn one_less_than_next_power_of_two(self) -> Self {\n+        #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n+        const fn one_less_than_next_power_of_two(self) -> Self {\n             if self <= 1 { return 0; }\n \n             let p = self - 1;\n@@ -4042,10 +4062,11 @@ Basic usage:\n assert_eq!(3\", stringify!($SelfT), \".next_power_of_two(), 4);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n             #[inline]\n-            pub fn next_power_of_two(self) -> Self {\n-                // Call the trait to get overflow checks\n-                ops::Add::add(self.one_less_than_next_power_of_two(), 1)\n+            #[rustc_inherit_overflow_checks]\n+            pub const fn next_power_of_two(self) -> Self {\n+                self.one_less_than_next_power_of_two() + 1\n             }\n         }\n \n@@ -4067,7 +4088,8 @@ $EndFeature, \"\n ```\"),\n             #[inline]\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            pub fn checked_next_power_of_two(self) -> Option<Self> {\n+            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n+            pub const fn checked_next_power_of_two(self) -> Option<Self> {\n                 self.one_less_than_next_power_of_two().checked_add(1)\n             }\n         }\n@@ -4091,7 +4113,8 @@ $EndFeature, \"\n ```\"),\n             #[unstable(feature = \"wrapping_next_power_of_two\", issue = \"32463\",\n                        reason = \"needs decision on wrapping behaviour\")]\n-            pub fn wrapping_next_power_of_two(self) -> Self {\n+            #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n+            pub const fn wrapping_next_power_of_two(self) -> Self {\n                 self.one_less_than_next_power_of_two().wrapping_add(1)\n             }\n         }"}, {"sha": "b0fba19455ba87ed231b0dbb70b677a6b9fff944", "filename": "src/test/ui/consts/const-int-pow-rpass.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d96951f5543869567e30ab1c63c0ac44d0d74c30/src%2Ftest%2Fui%2Fconsts%2Fconst-int-pow-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96951f5543869567e30ab1c63c0ac44d0d74c30/src%2Ftest%2Fui%2Fconsts%2Fconst-int-pow-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-pow-rpass.rs?ref=d96951f5543869567e30ab1c63c0ac44d0d74c30", "patch": "@@ -1,11 +1,48 @@\n // run-pass\n \n+#![feature(const_int_pow)]\n+#![feature(wrapping_next_power_of_two)]\n+\n const IS_POWER_OF_TWO_A: bool = 0u32.is_power_of_two();\n const IS_POWER_OF_TWO_B: bool = 32u32.is_power_of_two();\n const IS_POWER_OF_TWO_C: bool = 33u32.is_power_of_two();\n \n+const POW: u8 = 3u8.pow(5);\n+\n+const CHECKED_POW_OK: Option<u8> = 3u8.checked_pow(5);\n+const CHECKED_POW_OVERFLOW: Option<u8> = 3u8.checked_pow(6);\n+\n+const WRAPPING_POW: u8 = 3u8.wrapping_pow(6);\n+const OVERFLOWING_POW: (u8, bool) = 3u8.overflowing_pow(6);\n+const SATURATING_POW: u8 = 3u8.saturating_pow(6);\n+\n+const NEXT_POWER_OF_TWO: u32 = 3u32.next_power_of_two();\n+\n+const CHECKED_NEXT_POWER_OF_TWO_OK: Option<u32> = 3u32.checked_next_power_of_two();\n+const CHECKED_NEXT_POWER_OF_TWO_OVERFLOW: Option<u32> =\n+    u32::max_value().checked_next_power_of_two();\n+\n+const WRAPPING_NEXT_POWER_OF_TWO: u32 =\n+    u32::max_value().wrapping_next_power_of_two();\n+\n fn main() {\n     assert!(!IS_POWER_OF_TWO_A);\n     assert!(IS_POWER_OF_TWO_B);\n     assert!(!IS_POWER_OF_TWO_C);\n+\n+    assert_eq!(POW, 243);\n+\n+    assert_eq!(CHECKED_POW_OK, Some(243));\n+    assert_eq!(CHECKED_POW_OVERFLOW, None);\n+\n+    assert_eq!(WRAPPING_POW, 217);\n+    assert_eq!(OVERFLOWING_POW, (217, true));\n+    assert_eq!(SATURATING_POW, u8::max_value());\n+\n+    assert_eq!(NEXT_POWER_OF_TWO, 4);\n+\n+    assert_eq!(CHECKED_NEXT_POWER_OF_TWO_OK, Some(4));\n+    assert_eq!(CHECKED_NEXT_POWER_OF_TWO_OVERFLOW, None);\n+\n+    assert_eq!(WRAPPING_NEXT_POWER_OF_TWO, 0);\n }"}]}