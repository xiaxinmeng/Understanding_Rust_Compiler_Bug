{"sha": "d5b6510bfb8484a964428fe44e2a66eebb15e66e", "node_id": "C_kwDOAAsO6NoAKGQ1YjY1MTBiZmI4NDg0YTk2NDQyOGZlNDRlMmE2NmVlYmIxNWU2NmU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-09T16:44:17Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-03-28T16:30:59Z"}, "message": "Have the spans of TAIT type conflict errors point to the actual site instead of the owning function", "tree": {"sha": "955ae88047b6109822e7734ee2a98d509c341787", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/955ae88047b6109822e7734ee2a98d509c341787"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5b6510bfb8484a964428fe44e2a66eebb15e66e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5b6510bfb8484a964428fe44e2a66eebb15e66e", "html_url": "https://github.com/rust-lang/rust/commit/d5b6510bfb8484a964428fe44e2a66eebb15e66e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5b6510bfb8484a964428fe44e2a66eebb15e66e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b249b062bea6c3ed81e605ccac852ca8ad60986", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b249b062bea6c3ed81e605ccac852ca8ad60986", "html_url": "https://github.com/rust-lang/rust/commit/4b249b062bea6c3ed81e605ccac852ca8ad60986"}], "stats": {"total": 367, "additions": 180, "deletions": 187}, "files": [{"sha": "9242c6aeb8b28c2f25488109856cd9b32c1cc161", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::mir::{\n     BasicBlock, Body, ClosureOutlivesSubject, ClosureRegionRequirements, LocalKind, Location,\n     Promoted,\n };\n-use rustc_middle::ty::{self, OpaqueTypeKey, Region, RegionVid, Ty};\n+use rustc_middle::ty::{self, OpaqueHiddenType, OpaqueTypeKey, Region, RegionVid};\n use rustc_span::symbol::sym;\n use std::env;\n use std::fmt::Debug;\n@@ -43,7 +43,7 @@ pub type PoloniusOutput = Output<RustcFacts>;\n /// closure requirements to propagate, and any generated errors.\n crate struct NllOutput<'tcx> {\n     pub regioncx: RegionInferenceContext<'tcx>,\n-    pub opaque_type_values: VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>>,\n+    pub opaque_type_values: VecMap<OpaqueTypeKey<'tcx>, OpaqueHiddenType<'tcx>>,\n     pub polonius_input: Option<Box<AllFacts>>,\n     pub polonius_output: Option<Rc<PoloniusOutput>>,\n     pub opt_closure_req: Option<ClosureRegionRequirements<'tcx>>,\n@@ -305,7 +305,7 @@ pub(crate) fn compute_regions<'cx, 'tcx>(\n         infcx.set_tainted_by_errors();\n     }\n \n-    let remapped_opaque_tys = regioncx.infer_opaque_types(&infcx, opaque_type_values, body.span);\n+    let remapped_opaque_tys = regioncx.infer_opaque_types(&infcx, opaque_type_values);\n \n     NllOutput {\n         regioncx,\n@@ -372,7 +372,7 @@ pub(super) fn dump_annotation<'a, 'tcx>(\n     body: &Body<'tcx>,\n     regioncx: &RegionInferenceContext<'tcx>,\n     closure_region_requirements: &Option<ClosureRegionRequirements<'_>>,\n-    opaque_type_values: &VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>>,\n+    opaque_type_values: &VecMap<OpaqueTypeKey<'tcx>, OpaqueHiddenType<'tcx>>,\n     errors: &mut crate::error::BorrowckErrors<'tcx>,\n ) {\n     let tcx = infcx.tcx;"}, {"sha": "f454141dc522995afa50fd81e3bc3245ab8b242d", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -3,7 +3,7 @@ use rustc_data_structures::vec_map::VecMap;\n use rustc_hir::OpaqueTyOrigin;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::ty::subst::GenericArgKind;\n-use rustc_middle::ty::{self, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, OpaqueHiddenType, OpaqueTypeKey, TyCtxt, TypeFoldable};\n use rustc_span::Span;\n use rustc_trait_selection::opaque_types::InferCtxtExt;\n \n@@ -53,15 +53,12 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     pub(crate) fn infer_opaque_types(\n         &self,\n         infcx: &InferCtxt<'_, 'tcx>,\n-        opaque_ty_decls: VecMap<OpaqueTypeKey<'tcx>, (Ty<'tcx>, Span, OpaqueTyOrigin)>,\n-        span: Span,\n-    ) -> VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>> {\n+        opaque_ty_decls: VecMap<OpaqueTypeKey<'tcx>, (OpaqueHiddenType<'tcx>, OpaqueTyOrigin)>,\n+    ) -> VecMap<OpaqueTypeKey<'tcx>, OpaqueHiddenType<'tcx>> {\n         opaque_ty_decls\n             .into_iter()\n-            .map(|(opaque_type_key, (concrete_type, decl_span, origin))| {\n+            .map(|(opaque_type_key, (concrete_type, origin))| {\n                 let substs = opaque_type_key.substs;\n-                // FIXME: why are the spans in decl_span often DUMMY_SP?\n-                let span = decl_span.substitute_dummy(span);\n                 debug!(?concrete_type, ?substs);\n \n                 let mut subst_regions = vec![self.universal_regions.fr_static];\n@@ -85,7 +82,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                         None => {\n                             subst_regions.push(vid);\n                             infcx.tcx.sess.delay_span_bug(\n-                                span,\n+                                concrete_type.span,\n                                 \"opaque type with non-universal region substs\",\n                             );\n                             infcx.tcx.lifetimes.re_static\n@@ -113,17 +110,18 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 let remapped_type = infcx.infer_opaque_definition_from_instantiation(\n                     opaque_type_key,\n                     universal_concrete_type,\n-                    span,\n                 );\n-\n-                (\n+                let ty = if check_opaque_type_parameter_valid(\n+                    infcx.tcx,\n                     opaque_type_key,\n-                    if check_opaque_type_parameter_valid(infcx.tcx, opaque_type_key, origin, span) {\n-                        remapped_type\n-                    } else {\n-                        infcx.tcx.ty_error()\n-                    },\n-                )\n+                    origin,\n+                    concrete_type.span,\n+                ) {\n+                    remapped_type\n+                } else {\n+                    infcx.tcx.ty_error()\n+                };\n+                (opaque_type_key, OpaqueHiddenType { ty, span: concrete_type.span })\n             })\n             .collect()\n     }"}, {"sha": "3ee0aafebfd84a5d513871be0e6d0d67f6d67fb7", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -31,8 +31,8 @@ use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef, UserSubsts};\n use rustc_middle::ty::{\n-    self, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, OpaqueTypeKey, RegionVid,\n-    ToPredicate, Ty, TyCtxt, UserType, UserTypeAnnotationIndex,\n+    self, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, OpaqueHiddenType,\n+    OpaqueTypeKey, RegionVid, ToPredicate, Ty, TyCtxt, UserType, UserTypeAnnotationIndex,\n };\n use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::{Span, DUMMY_SP};\n@@ -225,21 +225,21 @@ pub(crate) fn type_check<'mir, 'tcx>(\n                         ),\n                     )\n                     .unwrap();\n-                    let mut hidden_type = infcx.resolve_vars_if_possible(decl.hidden_type.ty);\n+                    let mut hidden_type = infcx.resolve_vars_if_possible(decl.hidden_type);\n                     trace!(\n                         \"finalized opaque type {:?} to {:#?}\",\n                         opaque_type_key,\n-                        hidden_type.kind()\n+                        hidden_type.ty.kind()\n                     );\n                     if hidden_type.has_infer_types_or_consts() {\n                         infcx.tcx.sess.delay_span_bug(\n                             decl.hidden_type.span,\n-                            &format!(\"could not resolve {:#?}\", hidden_type.kind()),\n+                            &format!(\"could not resolve {:#?}\", hidden_type.ty.kind()),\n                         );\n-                        hidden_type = infcx.tcx.ty_error();\n+                        hidden_type.ty = infcx.tcx.ty_error();\n                     }\n \n-                    (opaque_type_key, (hidden_type, decl.hidden_type.span, decl.origin))\n+                    (opaque_type_key, (hidden_type, decl.origin))\n                 })\n                 .collect()\n         },\n@@ -905,7 +905,7 @@ struct BorrowCheckContext<'a, 'tcx> {\n crate struct MirTypeckResults<'tcx> {\n     crate constraints: MirTypeckRegionConstraints<'tcx>,\n     crate universal_region_relations: Frozen<UniversalRegionRelations<'tcx>>,\n-    crate opaque_type_values: VecMap<OpaqueTypeKey<'tcx>, (Ty<'tcx>, Span, OpaqueTyOrigin)>,\n+    crate opaque_type_values: VecMap<OpaqueTypeKey<'tcx>, (OpaqueHiddenType<'tcx>, OpaqueTyOrigin)>,\n }\n \n /// A collection of region constraints that must be satisfied for the"}, {"sha": "ba74aa804e3365cecfd86fce5d94ffe701489034", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 33, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -8,7 +8,9 @@ use rustc_hir as hir;\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::subst::{GenericArgKind, Subst};\n-use rustc_middle::ty::{self, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::{\n+    self, OpaqueHiddenType, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable, TypeVisitor,\n+};\n use rustc_span::Span;\n \n use std::ops::ControlFlow;\n@@ -35,38 +37,6 @@ pub struct OpaqueTypeDecl<'tcx> {\n     pub origin: hir::OpaqueTyOrigin,\n }\n \n-#[derive(Copy, Clone, Debug, TypeFoldable)]\n-pub struct OpaqueHiddenType<'tcx> {\n-    /// The span of this particular definition of the opaque type. So\n-    /// for example:\n-    ///\n-    /// ```ignore (incomplete snippet)\n-    /// type Foo = impl Baz;\n-    /// fn bar() -> Foo {\n-    /// //          ^^^ This is the span we are looking for!\n-    /// }\n-    /// ```\n-    ///\n-    /// In cases where the fn returns `(impl Trait, impl Trait)` or\n-    /// other such combinations, the result is currently\n-    /// over-approximated, but better than nothing.\n-    pub span: Span,\n-\n-    /// The type variable that represents the value of the opaque type\n-    /// that we require. In other words, after we compile this function,\n-    /// we will be created a constraint like:\n-    ///\n-    ///     Foo<'a, T> = ?C\n-    ///\n-    /// where `?C` is the value of this type variable. =) It may\n-    /// naturally refer to the type and lifetime parameters in scope\n-    /// in this function, though ultimately it should only reference\n-    /// those that are arguments to `Foo` in the constraint above. (In\n-    /// other words, `?C` should not include `'b`, even though it's a\n-    /// lifetime parameter on `foo`.)\n-    pub ty: Ty<'tcx>,\n-}\n-\n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn handle_opaque_type(\n         &self,"}, {"sha": "fb12da0cc13f0aeb3661ff34d8c7781d92058d9f", "filename": "compiler/rustc_infer/src/infer/opaque_types/table.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -1,11 +1,11 @@\n use rustc_data_structures::undo_log::UndoLogs;\n use rustc_hir::OpaqueTyOrigin;\n-use rustc_middle::ty::{self, OpaqueTypeKey, Ty};\n+use rustc_middle::ty::{self, OpaqueHiddenType, OpaqueTypeKey, Ty};\n use rustc_span::DUMMY_SP;\n \n use crate::infer::{InferCtxtUndoLogs, UndoLog};\n \n-use super::{OpaqueHiddenType, OpaqueTypeDecl, OpaqueTypeMap};\n+use super::{OpaqueTypeDecl, OpaqueTypeMap};\n \n #[derive(Default, Debug, Clone)]\n pub struct OpaqueTypeStorage<'tcx> {"}, {"sha": "1b696f21cbcf479364509311159e6912478123d5", "filename": "compiler/rustc_infer/src/infer/undo_log.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -4,15 +4,13 @@ use rustc_data_structures::snapshot_vec as sv;\n use rustc_data_structures::undo_log::{Rollback, UndoLogs};\n use rustc_data_structures::unify as ut;\n use rustc_middle::infer::unify_key::RegionVidKey;\n-use rustc_middle::ty::{self, OpaqueTypeKey};\n+use rustc_middle::ty::{self, OpaqueHiddenType, OpaqueTypeKey};\n \n use crate::{\n     infer::{region_constraints, type_variable, InferCtxtInner},\n     traits,\n };\n \n-use super::opaque_types::OpaqueHiddenType;\n-\n pub struct Snapshot<'tcx> {\n     pub(crate) undo_len: usize,\n     _marker: PhantomData<&'tcx ()>,"}, {"sha": "811b9da3740d7b4694f79156f81efc14d52e9d68", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -1,7 +1,7 @@\n //! Values computed by queries that use MIR.\n \n use crate::mir::{Body, Promoted};\n-use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::{self, OpaqueHiddenType, Ty, TyCtxt};\n use rustc_data_structures::stable_map::FxHashMap;\n use rustc_data_structures::vec_map::VecMap;\n use rustc_errors::ErrorGuaranteed;\n@@ -242,7 +242,7 @@ pub struct BorrowCheckResult<'tcx> {\n     /// All the opaque types that are restricted to concrete types\n     /// by this function. Unlike the value in `TypeckResults`, this has\n     /// unerased regions.\n-    pub concrete_opaque_types: VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>>,\n+    pub concrete_opaque_types: VecMap<OpaqueTypeKey<'tcx>, OpaqueHiddenType<'tcx>>,\n     pub closure_requirements: Option<ClosureRegionRequirements<'tcx>>,\n     pub used_mut_upvars: SmallVec<[Field; 8]>,\n     pub tainted_by_errors: Option<ErrorGuaranteed>,"}, {"sha": "069cf32e51589ecd31fc6dbe053af08998848119", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -1081,6 +1081,38 @@ pub struct OpaqueTypeKey<'tcx> {\n     pub substs: SubstsRef<'tcx>,\n }\n \n+#[derive(Copy, Clone, Debug, TypeFoldable, HashStable, TyEncodable, TyDecodable)]\n+pub struct OpaqueHiddenType<'tcx> {\n+    /// The span of this particular definition of the opaque type. So\n+    /// for example:\n+    ///\n+    /// ```ignore (incomplete snippet)\n+    /// type Foo = impl Baz;\n+    /// fn bar() -> Foo {\n+    /// //          ^^^ This is the span we are looking for!\n+    /// }\n+    /// ```\n+    ///\n+    /// In cases where the fn returns `(impl Trait, impl Trait)` or\n+    /// other such combinations, the result is currently\n+    /// over-approximated, but better than nothing.\n+    pub span: Span,\n+\n+    /// The type variable that represents the value of the opaque type\n+    /// that we require. In other words, after we compile this function,\n+    /// we will be created a constraint like:\n+    ///\n+    ///     Foo<'a, T> = ?C\n+    ///\n+    /// where `?C` is the value of this type variable. =) It may\n+    /// naturally refer to the type and lifetime parameters in scope\n+    /// in this function, though ultimately it should only reference\n+    /// those that are arguments to `Foo` in the constraint above. (In\n+    /// other words, `?C` should not include `'b`, even though it's a\n+    /// lifetime parameter on `foo`.)\n+    pub ty: Ty<'tcx>,\n+}\n+\n rustc_index::newtype_index! {\n     /// \"Universes\" are used during type- and trait-checking in the\n     /// presence of `for<..>` binders to control what sets of names are"}, {"sha": "eb70de48368dcdedbc0771f0aa803a1585e5aa30", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -5,15 +5,14 @@ use rustc_infer::infer::error_reporting::unexpected_hidden_region_diagnostic;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts};\n-use rustc_middle::ty::{self, OpaqueTypeKey, Ty, TyCtxt};\n+use rustc_middle::ty::{self, OpaqueHiddenType, OpaqueTypeKey, Ty, TyCtxt};\n use rustc_span::Span;\n \n pub trait InferCtxtExt<'tcx> {\n     fn infer_opaque_definition_from_instantiation(\n         &self,\n         opaque_type_key: OpaqueTypeKey<'tcx>,\n-        instantiated_ty: Ty<'tcx>,\n-        span: Span,\n+        instantiated_ty: OpaqueHiddenType<'tcx>,\n     ) -> Ty<'tcx>;\n }\n \n@@ -45,8 +44,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     fn infer_opaque_definition_from_instantiation(\n         &self,\n         opaque_type_key: OpaqueTypeKey<'tcx>,\n-        instantiated_ty: Ty<'tcx>,\n-        span: Span,\n+        instantiated_ty: OpaqueHiddenType<'tcx>,\n     ) -> Ty<'tcx> {\n         if self.is_tainted_by_errors() {\n             return self.tcx.ty_error();\n@@ -69,12 +67,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         // Convert the type from the function into a type valid outside\n         // the function, by replacing invalid regions with 'static,\n         // after producing an error for each of them.\n-        let definition_ty = instantiated_ty.fold_with(&mut ReverseMapper::new(\n+        let definition_ty = instantiated_ty.ty.fold_with(&mut ReverseMapper::new(\n             self.tcx,\n             def_id,\n             map,\n-            instantiated_ty,\n-            span,\n+            instantiated_ty.ty,\n+            instantiated_ty.span,\n         ));\n         debug!(?definition_ty);\n "}, {"sha": "4e1edd17194bc5b1afdcaaadd04593df7b42331f", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -358,6 +358,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                         .concrete_opaque_types\n                         .get_value_matching(|(key, _)| key.def_id == def_id.to_def_id())\n                         .copied()\n+                        .map(|concrete| concrete.ty)\n                         .unwrap_or_else(|| {\n                             let table = tcx.typeck(owner);\n                             if let Some(_) = table.tainted_by_errors {\n@@ -556,7 +557,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n         /// with the first type that we find, and then later types are\n         /// checked against it (we also carry the span of that first\n         /// type).\n-        found: Option<(Span, Ty<'tcx>)>,\n+        found: Option<ty::OpaqueHiddenType<'tcx>>,\n     }\n \n     impl ConstraintLocator<'_> {\n@@ -580,7 +581,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n             // ```\n             let tables = self.tcx.typeck(def_id);\n             if let Some(_) = tables.tainted_by_errors {\n-                self.found = Some((DUMMY_SP, self.tcx.ty_error()));\n+                self.found = Some(ty::OpaqueHiddenType { span: DUMMY_SP, ty: self.tcx.ty_error() });\n                 return;\n             }\n             if tables.concrete_opaque_types.get(&self.def_id).is_none() {\n@@ -590,34 +591,30 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n             // Use borrowck to get the type with unerased regions.\n             let concrete_opaque_types = &self.tcx.mir_borrowck(def_id).concrete_opaque_types;\n             debug!(?concrete_opaque_types);\n-            for (opaque_type_key, concrete_type) in concrete_opaque_types {\n+            for &(opaque_type_key, concrete_type) in concrete_opaque_types {\n                 if opaque_type_key.def_id != self.def_id {\n                     // Ignore constraints for other opaque types.\n                     continue;\n                 }\n \n                 debug!(?concrete_type, ?opaque_type_key.substs, \"found constraint\");\n \n-                // FIXME(oli-obk): trace the actual span from inference to improve errors.\n-                let span = self.tcx.def_span(def_id);\n-\n-                if let Some((prev_span, prev_ty)) = self.found {\n-                    if *concrete_type != prev_ty && !(*concrete_type, prev_ty).references_error() {\n-                        debug!(?span);\n+                if let Some(prev) = self.found {\n+                    if concrete_type.ty != prev.ty && !(concrete_type, prev).references_error() {\n                         // Found different concrete types for the opaque type.\n                         let mut err = self.tcx.sess.struct_span_err(\n-                            span,\n+                            concrete_type.span,\n                             \"concrete type differs from previous defining opaque type use\",\n                         );\n                         err.span_label(\n-                            span,\n-                            format!(\"expected `{}`, got `{}`\", prev_ty, concrete_type),\n+                            concrete_type.span,\n+                            format!(\"expected `{}`, got `{}`\", prev.ty, concrete_type.ty),\n                         );\n-                        err.span_note(prev_span, \"previous use here\");\n+                        err.span_note(prev.span, \"previous use here\");\n                         err.emit();\n                     }\n                 } else {\n-                    self.found = Some((span, *concrete_type));\n+                    self.found = Some(concrete_type);\n                 }\n             }\n         }\n@@ -692,7 +689,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n     }\n \n     match locator.found {\n-        Some((_, ty)) => ty,\n+        Some(hidden) => hidden.ty,\n         None => {\n             let span = tcx.def_span(def_id);\n             let name = tcx.item_name(tcx.parent(def_id.to_def_id()).unwrap());"}, {"sha": "a79bb6474d8ba5f7df5830979265f7b0ce953db5", "filename": "src/test/ui/impl-trait/issue-86465.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-86465.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-86465.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-86465.rs?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -3,8 +3,8 @@\n type X<'a, 'b> = impl std::fmt::Debug;\n \n fn f<'t, 'u>(a: &'t u32, b: &'u u32) -> (X<'t, 'u>, X<'u, 't>) {\n-    //~^ ERROR concrete type differs from previous defining opaque type use\n     (a, a)\n+    //~^ ERROR concrete type differs from previous defining opaque type use\n }\n \n fn main() {}"}, {"sha": "fc7bad601835b964c7106ad289cba1fb3a727106", "filename": "src/test/ui/impl-trait/issue-86465.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-86465.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-86465.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-86465.stderr?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -1,14 +1,14 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/issue-86465.rs:5:1\n+  --> $DIR/issue-86465.rs:6:5\n    |\n-LL | fn f<'t, 'u>(a: &'t u32, b: &'u u32) -> (X<'t, 'u>, X<'u, 't>) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&'a u32`, got `&'b u32`\n+LL |     (a, a)\n+   |     ^^^^^^ expected `&'a u32`, got `&'b u32`\n    |\n note: previous use here\n-  --> $DIR/issue-86465.rs:5:1\n+  --> $DIR/issue-86465.rs:6:5\n    |\n-LL | fn f<'t, 'u>(a: &'t u32, b: &'u u32) -> (X<'t, 'u>, X<'u, 't>) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     (a, a)\n+   |     ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4505c4d95248c3d35eecf70e8dc38ee2145da482", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.rs?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -10,6 +10,6 @@ fn foo() -> Foo {\n }\n \n fn bar() -> Foo {\n-    //~^ ERROR concrete type differs from previous\n     42i32\n+    //~^ ERROR concrete type differs from previous\n }"}, {"sha": "a8b4cd7afe8a9b8bcea34acbaac2eabacf7bcceb", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.stderr?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -1,14 +1,14 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/different_defining_uses.rs:12:1\n+  --> $DIR/different_defining_uses.rs:13:5\n    |\n-LL | fn bar() -> Foo {\n-   | ^^^^^^^^^^^^^^^ expected `&'static str`, got `i32`\n+LL |     42i32\n+   |     ^^^^^ expected `&'static str`, got `i32`\n    |\n note: previous use here\n-  --> $DIR/different_defining_uses.rs:8:1\n+  --> $DIR/different_defining_uses.rs:9:5\n    |\n-LL | fn foo() -> Foo {\n-   | ^^^^^^^^^^^^^^^\n+LL |     \"\"\n+   |     ^^\n \n error: aborting due to previous error\n "}, {"sha": "4f424b8c665adb7cd5d790c6a9aa9b0c0b604a75", "filename": "src/test/ui/type-alias-impl-trait/different_lifetimes_defining_uses.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_lifetimes_defining_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_lifetimes_defining_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_lifetimes_defining_uses.rs?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -8,8 +8,8 @@ fn foo<'a, 'b>(a: &'a u32, b: &'b u32) -> OneLifetime<'a, 'b> {\n }\n \n fn bar<'a, 'b>(a: &'a u32, b: &'b u32) -> OneLifetime<'a, 'b> {\n-    //~^ ERROR: concrete type differs from previous defining opaque type use\n     b\n+    //~^ ERROR: concrete type differs from previous defining opaque type use\n }\n \n fn main() {}"}, {"sha": "0c50a84e89436a258cf46be1bc3768d8facdb946", "filename": "src/test/ui/type-alias-impl-trait/different_lifetimes_defining_uses.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_lifetimes_defining_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_lifetimes_defining_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_lifetimes_defining_uses.stderr?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -1,14 +1,14 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/different_lifetimes_defining_uses.rs:10:1\n+  --> $DIR/different_lifetimes_defining_uses.rs:11:5\n    |\n-LL | fn bar<'a, 'b>(a: &'a u32, b: &'b u32) -> OneLifetime<'a, 'b> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&'a u32`, got `&'b u32`\n+LL |     b\n+   |     ^ expected `&'a u32`, got `&'b u32`\n    |\n note: previous use here\n-  --> $DIR/different_lifetimes_defining_uses.rs:6:1\n+  --> $DIR/different_lifetimes_defining_uses.rs:7:5\n    |\n-LL | fn foo<'a, 'b>(a: &'a u32, b: &'b u32) -> OneLifetime<'a, 'b> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     a\n+   |     ^\n \n error: aborting due to previous error\n "}, {"sha": "8b683ad282883fa82893b5863122a3fe338ee05b", "filename": "src/test/ui/type-alias-impl-trait/generic_different_defining_uses.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.rs?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -9,6 +9,6 @@ fn my_iter<T>(t: T) -> MyIter<T> {\n }\n \n fn my_iter2<T>(t: T) -> MyIter<T> {\n-    //~^ ERROR concrete type differs from previous\n     Some(t).into_iter()\n+    //~^ ERROR concrete type differs from previous\n }"}, {"sha": "47ac3346259e996cb10373d96cb739c650be3959", "filename": "src/test/ui/type-alias-impl-trait/generic_different_defining_uses.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.stderr?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -1,14 +1,14 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_different_defining_uses.rs:11:1\n+  --> $DIR/generic_different_defining_uses.rs:12:5\n    |\n-LL | fn my_iter2<T>(t: T) -> MyIter<T> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `std::iter::Once<T>`, got `std::option::IntoIter<T>`\n+LL |     Some(t).into_iter()\n+   |     ^^^^^^^^^^^^^^^^^^^ expected `std::iter::Once<T>`, got `std::option::IntoIter<T>`\n    |\n note: previous use here\n-  --> $DIR/generic_different_defining_uses.rs:7:1\n+  --> $DIR/generic_different_defining_uses.rs:8:5\n    |\n-LL | fn my_iter<T>(t: T) -> MyIter<T> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     std::iter::once(t)\n+   |     ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7747626d96df68ff63d5166b37e38ec77c90226e", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -13,6 +13,6 @@ fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n }\n \n fn three<T, U: Debug>(_: T, u: U) -> Two<T, U> {\n-    //~^ ERROR concrete type differs from previous defining opaque type use\n     u\n+    //~^ ERROR concrete type differs from previous defining opaque type use\n }"}, {"sha": "88c450704bfecc7d06fc053c0ac41a2f4318cf1f", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -1,14 +1,14 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use3.rs:15:1\n+  --> $DIR/generic_duplicate_param_use3.rs:16:5\n    |\n-LL | fn three<T, U: Debug>(_: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `T`, got `U`\n+LL |     u\n+   |     ^ expected `T`, got `U`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use3.rs:11:1\n+  --> $DIR/generic_duplicate_param_use3.rs:12:5\n    |\n-LL | fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     t\n+   |     ^\n \n error[E0277]: `T` doesn't implement `Debug`\n   --> $DIR/generic_duplicate_param_use3.rs:8:18"}, {"sha": "03bd00a039dfda5f681c29184ac53441ae1639cc", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.rs?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -14,6 +14,6 @@ fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n }\n \n fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-    //~^ concrete type differs from previous\n     (u, t)\n+    //~^ concrete type differs from previous\n }"}, {"sha": "d46a3ebe175c8d4f5ec46c2c51451096b579c79b", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use5.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.stderr?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -1,14 +1,14 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use5.rs:16:1\n+  --> $DIR/generic_duplicate_param_use5.rs:17:5\n    |\n-LL | fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, U)`, got `(U, T)`\n+LL |     (u, t)\n+   |     ^^^^^^ expected `(T, U)`, got `(U, T)`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use5.rs:12:1\n+  --> $DIR/generic_duplicate_param_use5.rs:13:5\n    |\n-LL | fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     (t, u)\n+   |     ^^^^^^\n \n error[E0277]: `T` doesn't implement `Debug`\n   --> $DIR/generic_duplicate_param_use5.rs:8:18"}, {"sha": "a8c801dc887c6d8a50ab4a9730329a6b0462f9d1", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.rs?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -13,6 +13,6 @@ fn two<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n }\n \n fn three<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-    //~^ ERROR concrete type differs from previous\n     (u, t)\n+    //~^ ERROR concrete type differs from previous\n }"}, {"sha": "7e89b574b5c50e03fa3061324fafc46a9a945287", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.stderr?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -1,14 +1,14 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use6.rs:15:1\n+  --> $DIR/generic_duplicate_param_use6.rs:16:5\n    |\n-LL | fn three<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, T)`, got `(U, T)`\n+LL |     (u, t)\n+   |     ^^^^^^ expected `(T, T)`, got `(U, T)`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use6.rs:11:1\n+  --> $DIR/generic_duplicate_param_use6.rs:12:5\n    |\n-LL | fn two<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     (t, t)\n+   |     ^^^^^^\n \n error[E0277]: `T` doesn't implement `Debug`\n   --> $DIR/generic_duplicate_param_use6.rs:8:18"}, {"sha": "57527e758db1f72c1ab779039ea8c80e5a314100", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.rs?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -12,6 +12,6 @@ fn two<T: Debug, U: Debug>(t: T, _: U) -> Two<T, U> {\n }\n \n fn three<T: Debug, U: Debug>(_: T, u: U) -> Two<T, U> {\n-    //~^ concrete type differs from previous\n     (u, 4u32)\n+    //~^ concrete type differs from previous\n }"}, {"sha": "1a6ec3aec142b2ac01f84af32d73a88ea96a7e70", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use8.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.stderr?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -1,14 +1,14 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use8.rs:14:1\n+  --> $DIR/generic_duplicate_param_use8.rs:15:5\n    |\n-LL | fn three<T: Debug, U: Debug>(_: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, u32)`, got `(U, u32)`\n+LL |     (u, 4u32)\n+   |     ^^^^^^^^^ expected `(T, u32)`, got `(U, u32)`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use8.rs:10:1\n+  --> $DIR/generic_duplicate_param_use8.rs:11:5\n    |\n-LL | fn two<T: Debug, U: Debug>(t: T, _: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     (t, 4u32)\n+   |     ^^^^^^^^^\n \n error[E0277]: `T` doesn't implement `Debug`\n   --> $DIR/generic_duplicate_param_use8.rs:7:18"}, {"sha": "5878ad926987955f6a1a5bf0b249c9826adc8c55", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -19,5 +19,5 @@ fn two<T: Debug + Foo, U: Debug>(t: T, u: U) -> Two<T, U> {\n }\n \n fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-    (t, u, 42) //~^ ERROR concrete type differs from previous\n+    (t, u, 42) //~ ERROR concrete type differs from previous\n }"}, {"sha": "ef7573246af4ca6d49bc655bae94b9b48996829c", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -1,14 +1,14 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use9.rs:21:1\n+  --> $DIR/generic_duplicate_param_use9.rs:22:5\n    |\n-LL | fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(A, B, <A as Foo>::Bar)`, got `(A, B, i32)`\n+LL |     (t, u, 42)\n+   |     ^^^^^^^^^^ expected `(A, B, <A as Foo>::Bar)`, got `(A, B, i32)`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use9.rs:17:1\n+  --> $DIR/generic_duplicate_param_use9.rs:18:5\n    |\n-LL | fn two<T: Debug + Foo, U: Debug>(t: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     (t, u, T::BAR)\n+   |     ^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `A: Foo` is not satisfied\n   --> $DIR/generic_duplicate_param_use9.rs:7:18"}, {"sha": "4c5fd22556aaecf502ff7dfb08fd398f436b0612", "filename": "src/test/ui/type-alias-impl-trait/issue-52843-closure-constrain.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.stderr?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -1,14 +1,14 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/issue-52843-closure-constrain.rs:10:16\n+  --> $DIR/issue-52843-closure-constrain.rs:10:31\n    |\n LL |     let null = || -> Opaque { 0 };\n-   |                ^^^^^^^^^^^^^^^^^^ expected `String`, got `i32`\n+   |                               ^ expected `String`, got `i32`\n    |\n note: previous use here\n-  --> $DIR/issue-52843-closure-constrain.rs:9:5\n+  --> $DIR/issue-52843-closure-constrain.rs:9:30\n    |\n LL |     fn _unused() -> Opaque { String::new() }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |                              ^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b887fcf30831df034c310d6b97d64beebf4e0316", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-infer.rs?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -7,7 +7,7 @@\n type Y<A, B> = impl std::fmt::Debug;\n \n fn g<A, B>() -> (Y<A, B>, Y<B, A>) {\n-    (42_i64, 60) //~^ ERROR concrete type differs from previous defining opaque type use\n+    (42_i64, 60) //~ ERROR concrete type differs from previous defining opaque type use\n }\n \n fn main() {}"}, {"sha": "e3709d822ff0e8a10a8ccfd9216504a35615c1f9", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn-infer.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-infer.stderr?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -1,14 +1,14 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/multiple-def-uses-in-one-fn-infer.rs:9:1\n+  --> $DIR/multiple-def-uses-in-one-fn-infer.rs:10:5\n    |\n-LL | fn g<A, B>() -> (Y<A, B>, Y<B, A>) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i64`, got `i32`\n+LL |     (42_i64, 60)\n+   |     ^^^^^^^^^^^^ expected `i64`, got `i32`\n    |\n note: previous use here\n-  --> $DIR/multiple-def-uses-in-one-fn-infer.rs:9:1\n+  --> $DIR/multiple-def-uses-in-one-fn-infer.rs:10:5\n    |\n-LL | fn g<A, B>() -> (Y<A, B>, Y<B, A>) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     (42_i64, 60)\n+   |     ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3f122f1060956c28829605bf8d052059e7747ad4", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-lifetimes.rs?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -3,7 +3,7 @@\n type Foo<'a, 'b> = impl std::fmt::Debug;\n \n fn foo<'x, 'y>(i: &'x i32, j: &'y i32) -> (Foo<'x, 'y>, Foo<'y, 'x>) {\n-    (i, i) //~^ ERROR concrete type differs from previous\n+    (i, i) //~ ERROR concrete type differs from previous\n }\n \n fn main() {}"}, {"sha": "ed2e48e4aff54b1e27d725b0e84d9dc7d4d6a9b9", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn-lifetimes.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn-lifetimes.stderr?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -1,14 +1,14 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/multiple-def-uses-in-one-fn-lifetimes.rs:5:1\n+  --> $DIR/multiple-def-uses-in-one-fn-lifetimes.rs:6:5\n    |\n-LL | fn foo<'x, 'y>(i: &'x i32, j: &'y i32) -> (Foo<'x, 'y>, Foo<'y, 'x>) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&'a i32`, got `&'b i32`\n+LL |     (i, i)\n+   |     ^^^^^^ expected `&'a i32`, got `&'b i32`\n    |\n note: previous use here\n-  --> $DIR/multiple-def-uses-in-one-fn-lifetimes.rs:5:1\n+  --> $DIR/multiple-def-uses-in-one-fn-lifetimes.rs:6:5\n    |\n-LL | fn foo<'x, 'y>(i: &'x i32, j: &'y i32) -> (Foo<'x, 'y>, Foo<'y, 'x>) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     (i, i)\n+   |     ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "14510a5294e69d5a06f5be81934927772c8fec3a", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.rs?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -7,8 +7,8 @@\n type X<A: ToString + Clone, B: ToString + Clone> = impl ToString;\n \n fn f<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<B, A>) {\n-    //~^ ERROR concrete type differs from previous defining opaque type\n     (a.clone(), a)\n+    //~^ ERROR concrete type differs from previous defining opaque type\n }\n \n fn main() {"}, {"sha": "de3f87007081a1d4b3a2c90d3bb31a7ed4efc806", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.stderr?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -1,14 +1,14 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/multiple-def-uses-in-one-fn2.rs:9:1\n+  --> $DIR/multiple-def-uses-in-one-fn2.rs:10:5\n    |\n-LL | fn f<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<B, A>) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `A`, got `B`\n+LL |     (a.clone(), a)\n+   |     ^^^^^^^^^^^^^^ expected `A`, got `B`\n    |\n note: previous use here\n-  --> $DIR/multiple-def-uses-in-one-fn2.rs:9:1\n+  --> $DIR/multiple-def-uses-in-one-fn2.rs:10:5\n    |\n-LL | fn f<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<B, A>) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     (a.clone(), a)\n+   |     ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "289784ce747fdd3f3787c496612cbc0af1da603c", "filename": "src/test/ui/type-alias-impl-trait/not_a_defining_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.rs?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -22,8 +22,8 @@ impl Bar for u32 {\n }\n \n fn four<T: Debug, U: Bar>(t: T) -> Two<T, U> {\n-    //~^ ERROR concrete type differs from previous\n     (t, <U as Bar>::FOO)\n+    //~^ ERROR concrete type differs from previous\n }\n \n fn is_sync<T: Sync>() {}"}, {"sha": "6068cfeb51ebe680cb0ebce247f504caf693c805", "filename": "src/test/ui/type-alias-impl-trait/not_a_defining_use.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5b6510bfb8484a964428fe44e2a66eebb15e66e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr?ref=d5b6510bfb8484a964428fe44e2a66eebb15e66e", "patch": "@@ -1,14 +1,14 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/not_a_defining_use.rs:24:1\n+  --> $DIR/not_a_defining_use.rs:25:5\n    |\n-LL | fn four<T: Debug, U: Bar>(t: T) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, i8)`, got `(T, <U as Bar>::Blub)`\n+LL |     (t, <U as Bar>::FOO)\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected `(T, i8)`, got `(T, <U as Bar>::Blub)`\n    |\n note: previous use here\n-  --> $DIR/not_a_defining_use.rs:10:1\n+  --> $DIR/not_a_defining_use.rs:11:5\n    |\n-LL | fn three<T: Debug, U>(t: T) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     (t, 5i8)\n+   |     ^^^^^^^^\n \n error[E0277]: `T` doesn't implement `Debug`\n   --> $DIR/not_a_defining_use.rs:7:18"}]}