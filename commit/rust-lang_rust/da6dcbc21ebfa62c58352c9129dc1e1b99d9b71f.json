{"sha": "da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNmRjYmMyMWViZmE2MmM1ODM1MmM5MTI5ZGMxZTFiOTlkOWI3MWY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-07T16:30:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-07T16:30:53Z"}, "message": "Rollup merge of #47944 - oberien:unboundediterator-trustedlen, r=bluss\n\nImplement TrustedLen for Take<Repeat> and Take<RangeFrom>\n\nThis will allow optimization of simple `repeat(x).take(n).collect()` iterators, which are currently not vectorized and have capacity checks.\n\nThis will only support a few aggregates on `Repeat` and `RangeFrom`, which might be enough for simple cases, but doesn't optimize more complex ones. Namely, Cycle, StepBy, Filter, FilterMap, Peekable, SkipWhile, Skip, FlatMap, Fuse and Inspect are not marked `TrustedLen` when the inner iterator is infinite.\n\nPrevious discussion can be found in #47082\n\nr? @alexcrichton", "tree": {"sha": "bd0c7b88eca61cc2e3553c2d4479f96c1496e3b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd0c7b88eca61cc2e3553c2d4479f96c1496e3b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaeym9CRBK7hj4Ov3rIwAAdHIIAEaSfWeQ5Vz5SNCqbu6X1L1K\ne6EBRLeYD9guWmlzqOpHERhqEdEHq4IKOrHb3IsMoXgFnn8fm5Gdcz4yNzOAbuRk\nsfFta4+gfcwriOQ4cf97EGtDJyMSNJHSoV2onsAe/AosDaGwBrsFmB2g6s07kiDd\neenQdrcCzPGHkNEggMakbGGrfkXipFz9xnBqqmjJUMAooG3wwzAr4ZFGNqx2p/ws\nNYXywBh2SB/Fxbwg32aoUp7Rgo4yv7kpGfAyrpcgt3px1mrzLQSTsJnONOgFh6rC\nPkiBTYp+nxlydDxVTvAi3c9/EC76xamNeAQLKhsKxMnYSCUc4XEEKkYhmm1r+Ns=\n=R8/t\n-----END PGP SIGNATURE-----\n", "payload": "tree bd0c7b88eca61cc2e3553c2d4479f96c1496e3b2\nparent 0ba871254e97a72eb5ab43f26b42a943ab5f330d\nparent 6caec2c0494a173f696e5a63583ff35d1bd106aa\nauthor Manish Goregaokar <manishsmail@gmail.com> 1518021053 -0800\ncommitter GitHub <noreply@github.com> 1518021053 -0800\n\nRollup merge of #47944 - oberien:unboundediterator-trustedlen, r=bluss\n\nImplement TrustedLen for Take<Repeat> and Take<RangeFrom>\n\nThis will allow optimization of simple `repeat(x).take(n).collect()` iterators, which are currently not vectorized and have capacity checks.\n\nThis will only support a few aggregates on `Repeat` and `RangeFrom`, which might be enough for simple cases, but doesn't optimize more complex ones. Namely, Cycle, StepBy, Filter, FilterMap, Peekable, SkipWhile, Skip, FlatMap, Fuse and Inspect are not marked `TrustedLen` when the inner iterator is infinite.\n\nPrevious discussion can be found in #47082\n\nr? @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f", "html_url": "https://github.com/rust-lang/rust/commit/da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ba871254e97a72eb5ab43f26b42a943ab5f330d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ba871254e97a72eb5ab43f26b42a943ab5f330d", "html_url": "https://github.com/rust-lang/rust/commit/0ba871254e97a72eb5ab43f26b42a943ab5f330d"}, {"sha": "6caec2c0494a173f696e5a63583ff35d1bd106aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/6caec2c0494a173f696e5a63583ff35d1bd106aa", "html_url": "https://github.com/rust-lang/rust/commit/6caec2c0494a173f696e5a63583ff35d1bd106aa"}], "stats": {"total": 81, "additions": 79, "deletions": 2}, "files": [{"sha": "bf8367d85fd1085ad6d42bb05eceae760a95496a", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f", "patch": "@@ -2322,6 +2322,9 @@ impl<I> ExactSizeIterator for Take<I> where I: ExactSizeIterator {}\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<I> FusedIterator for Take<I> where I: FusedIterator {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<I: TrustedLen> TrustedLen for Take<I> {}\n+\n /// An iterator to maintain state while iterating another iterator.\n ///\n /// This `struct` is created by the [`scan`] method on [`Iterator`]. See its"}, {"sha": "5b4dc9b2c9a6546a9c2b5ba472693510ccaac278", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f", "patch": "@@ -325,6 +325,9 @@ impl<A: Step> Iterator for ops::RangeFrom<A> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<A: Step> FusedIterator for ops::RangeFrom<A> {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<A: Step> TrustedLen for ops::RangeFrom<A> {}\n+\n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n impl<A: Step> Iterator for ops::RangeInclusive<A> {\n     type Item = A;"}, {"sha": "b05a893e66104dc9cf517a66fb0598e60f13143f", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f", "patch": "@@ -44,6 +44,9 @@ impl<A: Clone> DoubleEndedIterator for Repeat<A> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<A: Clone> FusedIterator for Repeat<A> {}\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<A: Clone> TrustedLen for Repeat<A> {}\n+\n /// Creates a new iterator that endlessly repeats a single element.\n ///\n /// The `repeat()` function repeats a single value over and over and over and"}, {"sha": "be4889f24877ced555dc55a7a85df01bd495b2ed", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f", "patch": "@@ -970,9 +970,11 @@ impl<'a, I: FusedIterator + ?Sized> FusedIterator for &'a mut I {}\n /// The iterator reports a size hint where it is either exact\n /// (lower bound is equal to upper bound), or the upper bound is [`None`].\n /// The upper bound must only be [`None`] if the actual iterator length is\n-/// larger than [`usize::MAX`].\n+/// larger than [`usize::MAX`]. In that case, the lower bound must be\n+/// [`usize::MAX`], resulting in a [`.size_hint`] of `(usize::MAX, None)`.\n ///\n-/// The iterator must produce exactly the number of elements it reported.\n+/// The iterator must produce exactly the number of elements it reported\n+/// or diverge before reaching the end.\n ///\n /// # Safety\n ///"}, {"sha": "0373c8922b2a53ba7c518df48d233082aa143a0d", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f", "patch": "@@ -1371,6 +1371,29 @@ fn test_range_from_nth() {\n     assert_eq!(r, 16..);\n     assert_eq!(r.nth(10), Some(26));\n     assert_eq!(r, 27..);\n+\n+    assert_eq!((0..).size_hint(), (usize::MAX, None));\n+}\n+\n+fn is_trusted_len<I: TrustedLen>(_: I) {}\n+\n+#[test]\n+fn test_range_from_take() {\n+    let mut it = (0..).take(3);\n+    assert_eq!(it.next(), Some(0));\n+    assert_eq!(it.next(), Some(1));\n+    assert_eq!(it.next(), Some(2));\n+    assert_eq!(it.next(), None);\n+    is_trusted_len((0..).take(3));\n+    assert_eq!((0..).take(3).size_hint(), (3, Some(3)));\n+    assert_eq!((0..).take(0).size_hint(), (0, Some(0)));\n+    assert_eq!((0..).take(usize::MAX).size_hint(), (usize::MAX, Some(usize::MAX)));\n+}\n+\n+#[test]\n+fn test_range_from_take_collect() {\n+    let v: Vec<_> = (0..).take(3).collect();\n+    assert_eq!(v, vec![0, 1, 2]);\n }\n \n #[test]\n@@ -1485,6 +1508,26 @@ fn test_repeat() {\n     assert_eq!(it.next(), Some(42));\n     assert_eq!(it.next(), Some(42));\n     assert_eq!(it.next(), Some(42));\n+    assert_eq!(repeat(42).size_hint(), (usize::MAX, None));\n+}\n+\n+#[test]\n+fn test_repeat_take() {\n+    let mut it = repeat(42).take(3);\n+    assert_eq!(it.next(), Some(42));\n+    assert_eq!(it.next(), Some(42));\n+    assert_eq!(it.next(), Some(42));\n+    assert_eq!(it.next(), None);\n+    is_trusted_len(repeat(42).take(3));\n+    assert_eq!(repeat(42).take(3).size_hint(), (3, Some(3)));\n+    assert_eq!(repeat(42).take(0).size_hint(), (0, Some(0)));\n+    assert_eq!(repeat(42).take(usize::MAX).size_hint(), (usize::MAX, Some(usize::MAX)));\n+}\n+\n+#[test]\n+fn test_repeat_take_collect() {\n+    let v: Vec<_> = repeat(42).take(3).collect();\n+    assert_eq!(v, vec![42, 42, 42]);\n }\n \n #[test]"}, {"sha": "43872f15d51e22ca898e17607ecb42dcb25becf5", "filename": "src/test/codegen/repeat-trusted-len.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs?ref=da6dcbc21ebfa62c58352c9129dc1e1b99d9b71f", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -O\n+// ignore-tidy-linelength\n+\n+#![crate_type = \"lib\"]\n+\n+use std::iter;\n+\n+// CHECK-LABEL: @repeat_take_collect\n+#[no_mangle]\n+pub fn repeat_take_collect() -> Vec<u8> {\n+// CHECK: call void @llvm.memset.p0i8\n+    iter::repeat(42).take(100000).collect()\n+}"}]}