{"sha": "b67006422e38ba68eec97f2ce249c9d885ea9270", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NzAwNjQyMmUzOGJhNjhlZWM5N2YyY2UyNDljOWQ4ODVlYTkyNzA=", "commit": {"author": {"name": "Anton", "email": "ama0@users.noreply.github.com", "date": "2020-09-02T11:12:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-02T11:12:44Z"}, "message": "Fix typos in vec try_reserve(_exact) docs\n\n`try_reserve` and `try_reserve_exact` docs refer to calling `reserve` and `reserve_exact`.\r\n`try_reserve_exact` example uses `try_reserve` method instead of `try_reserve_exact`.", "tree": {"sha": "37143995c22a668f809aeeada49e24a0a439d8e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37143995c22a668f809aeeada49e24a0a439d8e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b67006422e38ba68eec97f2ce249c9d885ea9270", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfT34sCRBK7hj4Ov3rIwAAdHIIABJkcb1e+FX+3DioOjxBZVON\ndp9jmTxVund8gl7q2JnUlw66OYk4koxBjQ+ks8KwF5R3Ea6CpDKq6Xeosguy7hDs\nOkkZpT+KB+t9QmNSbUlhHBEhQWust4NrvVIHHui7PuSm2Fs1rIPHIHCjtq2Lj4FP\nWnc0JQyPMZFBfaIi0MAe7mWd7DtYZaI5rfl7qTgLb+IZgxbf+CLwszPhj5R1GZJY\niFnrZvdUOf7+wLzsEz/vf6FgZUiXDE/5M8aAyj6U8uzPcXm0WFvI5vZQTXy0/Eml\nIMr9nt/6POxzX0LhUiwdqNbzKB5oLMIyQOzX50+t+DsUa03fecZSIrwOBQ46f4M=\n=FUoA\n-----END PGP SIGNATURE-----\n", "payload": "tree 37143995c22a668f809aeeada49e24a0a439d8e7\nparent da897dfb6daa268a965d2d73620316ba56020a19\nauthor Anton <ama0@users.noreply.github.com> 1599045164 +0200\ncommitter GitHub <noreply@github.com> 1599045164 +0200\n\nFix typos in vec try_reserve(_exact) docs\n\n`try_reserve` and `try_reserve_exact` docs refer to calling `reserve` and `reserve_exact`.\r\n`try_reserve_exact` example uses `try_reserve` method instead of `try_reserve_exact`."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b67006422e38ba68eec97f2ce249c9d885ea9270", "html_url": "https://github.com/rust-lang/rust/commit/b67006422e38ba68eec97f2ce249c9d885ea9270", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b67006422e38ba68eec97f2ce249c9d885ea9270/comments", "author": {"login": "ama0", "id": 19716925, "node_id": "MDQ6VXNlcjE5NzE2OTI1", "avatar_url": "https://avatars.githubusercontent.com/u/19716925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ama0", "html_url": "https://github.com/ama0", "followers_url": "https://api.github.com/users/ama0/followers", "following_url": "https://api.github.com/users/ama0/following{/other_user}", "gists_url": "https://api.github.com/users/ama0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ama0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ama0/subscriptions", "organizations_url": "https://api.github.com/users/ama0/orgs", "repos_url": "https://api.github.com/users/ama0/repos", "events_url": "https://api.github.com/users/ama0/events{/privacy}", "received_events_url": "https://api.github.com/users/ama0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da897dfb6daa268a965d2d73620316ba56020a19", "url": "https://api.github.com/repos/rust-lang/rust/commits/da897dfb6daa268a965d2d73620316ba56020a19", "html_url": "https://github.com/rust-lang/rust/commit/da897dfb6daa268a965d2d73620316ba56020a19"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "27eefb058421689cffcaaf6c1781e4d1f8e6c160", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b67006422e38ba68eec97f2ce249c9d885ea9270/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67006422e38ba68eec97f2ce249c9d885ea9270/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=b67006422e38ba68eec97f2ce249c9d885ea9270", "patch": "@@ -523,7 +523,7 @@ impl<T> Vec<T> {\n \n     /// Tries to reserve capacity for at least `additional` more elements to be inserted\n     /// in the given `Vec<T>`. The collection may reserve more space to avoid\n-    /// frequent reallocations. After calling `reserve`, capacity will be\n+    /// frequent reallocations. After calling `try_reserve`, capacity will be\n     /// greater than or equal to `self.len() + additional`. Does nothing if\n     /// capacity is already sufficient.\n     ///\n@@ -559,7 +559,7 @@ impl<T> Vec<T> {\n     }\n \n     /// Tries to reserves the minimum capacity for exactly `additional` more elements to\n-    /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,\n+    /// be inserted in the given `Vec<T>`. After calling `try_reserve_exact`,\n     /// capacity will be greater than or equal to `self.len() + additional`.\n     /// Does nothing if the capacity is already sufficient.\n     ///\n@@ -582,7 +582,7 @@ impl<T> Vec<T> {\n     ///     let mut output = Vec::new();\n     ///\n     ///     // Pre-reserve the memory, exiting if we can't\n-    ///     output.try_reserve(data.len())?;\n+    ///     output.try_reserve_exact(data.len())?;\n     ///\n     ///     // Now we know this can't OOM in the middle of our complex work\n     ///     output.extend(data.iter().map(|&val| {"}]}