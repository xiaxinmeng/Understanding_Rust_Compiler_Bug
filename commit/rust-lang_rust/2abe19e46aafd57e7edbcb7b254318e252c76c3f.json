{"sha": "2abe19e46aafd57e7edbcb7b254318e252c76c3f", "node_id": "C_kwDOAAsO6NoAKDJhYmUxOWU0NmFhZmQ1N2U3ZWRiY2I3YjI1NDMxOGUyNTJjNzZjM2Y", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-10T20:22:13Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-10T20:22:13Z"}, "message": "Don't offer qualified path completions for buitlin derives", "tree": {"sha": "84dff6bf7c9247b43e75d8dab0bce0eac96875dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84dff6bf7c9247b43e75d8dab0bce0eac96875dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2abe19e46aafd57e7edbcb7b254318e252c76c3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2abe19e46aafd57e7edbcb7b254318e252c76c3f", "html_url": "https://github.com/rust-lang/rust/commit/2abe19e46aafd57e7edbcb7b254318e252c76c3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2abe19e46aafd57e7edbcb7b254318e252c76c3f/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8b76b632ca8f98d824030d81a49d0a1ccc25062", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8b76b632ca8f98d824030d81a49d0a1ccc25062", "html_url": "https://github.com/rust-lang/rust/commit/a8b76b632ca8f98d824030d81a49d0a1ccc25062"}], "stats": {"total": 124, "additions": 42, "deletions": 82}, "files": [{"sha": "a90120a46763e0718fd0be996a5f5ff3f878d341", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2abe19e46aafd57e7edbcb7b254318e252c76c3f/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abe19e46aafd57e7edbcb7b254318e252c76c3f/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=2abe19e46aafd57e7edbcb7b254318e252c76c3f", "patch": "@@ -1811,6 +1811,10 @@ impl Macro {\n     pub fn is_attr(&self, db: &dyn HirDatabase) -> bool {\n         matches!(self.kind(db), MacroKind::Attr)\n     }\n+\n+    pub fn is_derive(&self, db: &dyn HirDatabase) -> bool {\n+        matches!(self.kind(db), MacroKind::Derive)\n+    }\n }\n \n impl HasVisibility for Macro {"}, {"sha": "90070a2cdb92e809094107572492faadc80ec24a", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 10, "deletions": 63, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/2abe19e46aafd57e7edbcb7b254318e252c76c3f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abe19e46aafd57e7edbcb7b254318e252c76c3f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=2abe19e46aafd57e7edbcb7b254318e252c76c3f", "patch": "@@ -1,32 +1,26 @@\n //! Completion for derives\n-use hir::{HasAttrs, Macro, MacroKind};\n-use ide_db::{\n-    imports::{import_assets::ImportAssets, insert_use::ImportScope},\n-    SymbolKind,\n-};\n+use hir::{HasAttrs, Macro};\n+use ide_db::SymbolKind;\n use itertools::Itertools;\n-use rustc_hash::FxHashSet;\n-use syntax::{SmolStr, SyntaxKind};\n+use syntax::SmolStr;\n \n use crate::{\n-    completions::flyimport::compute_fuzzy_completion_order_key,\n     context::{CompletionContext, PathCompletionCtx, PathKind},\n     item::CompletionItem,\n-    Completions, ImportEdit,\n+    Completions,\n };\n \n pub(crate) fn complete_derive(acc: &mut Completions, ctx: &CompletionContext) {\n-    let attr = match (&ctx.path_context, ctx.attr.as_ref()) {\n-        (Some(PathCompletionCtx { kind: Some(PathKind::Derive), .. }), Some(attr)) => attr,\n+    match ctx.path_context {\n+        // FIXME: Enable qualified completions\n+        Some(PathCompletionCtx { kind: Some(PathKind::Derive), qualifier: None, .. }) => (),\n         _ => return,\n-    };\n+    }\n \n     let core = ctx.famous_defs().core();\n-    let existing_derives: FxHashSet<_> =\n-        ctx.sema.resolve_derive_macro(attr).into_iter().flatten().flatten().collect();\n \n     for (name, mac) in get_derives_in_scope(ctx) {\n-        if existing_derives.contains(&mac) {\n+        if ctx.existing_derives.contains(&mac) {\n             continue;\n         }\n \n@@ -41,7 +35,7 @@ pub(crate) fn complete_derive(acc: &mut Completions, ctx: &CompletionContext) {\n                     let mut components = vec![derive_completion.label];\n                     components.extend(derive_completion.dependencies.iter().filter(\n                         |&&dependency| {\n-                            !existing_derives\n+                            !ctx.existing_derives\n                                 .iter()\n                                 .map(|it| it.name(ctx.db))\n                                 .any(|it| it.to_smol_str() == dependency)\n@@ -66,8 +60,6 @@ pub(crate) fn complete_derive(acc: &mut Completions, ctx: &CompletionContext) {\n         }\n         item.add_to(acc);\n     }\n-\n-    flyimport_derive(acc, ctx);\n }\n \n fn get_derives_in_scope(ctx: &CompletionContext) -> Vec<(hir::Name, Macro)> {\n@@ -82,51 +74,6 @@ fn get_derives_in_scope(ctx: &CompletionContext) -> Vec<(hir::Name, Macro)> {\n     result\n }\n \n-fn flyimport_derive(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n-    if ctx.token.kind() != SyntaxKind::IDENT {\n-        return None;\n-    };\n-    let potential_import_name = ctx.token.to_string();\n-    let module = ctx.module?;\n-    let parent = ctx.token.parent()?;\n-    let user_input_lowercased = potential_import_name.to_lowercase();\n-    let import_assets = ImportAssets::for_fuzzy_path(\n-        module,\n-        None,\n-        potential_import_name,\n-        &ctx.sema,\n-        parent.clone(),\n-    )?;\n-    let import_scope = ImportScope::find_insert_use_container(&parent, &ctx.sema)?;\n-    acc.add_all(\n-        import_assets\n-            .search_for_imports(&ctx.sema, ctx.config.insert_use.prefix_kind)\n-            .into_iter()\n-            .filter_map(|import| match import.original_item {\n-                hir::ItemInNs::Macros(mac) => Some((import, mac)),\n-                _ => None,\n-            })\n-            .filter(|&(_, mac)| mac.kind(ctx.db) == MacroKind::Derive)\n-            .filter(|&(_, mac)| !ctx.is_item_hidden(&hir::ItemInNs::Macros(mac)))\n-            .sorted_by_key(|(import, _)| {\n-                compute_fuzzy_completion_order_key(&import.import_path, &user_input_lowercased)\n-            })\n-            .filter_map(|(import, mac)| {\n-                let mut item = CompletionItem::new(\n-                    SymbolKind::Derive,\n-                    ctx.source_range(),\n-                    mac.name(ctx.db).to_smol_str(),\n-                );\n-                item.add_import(ImportEdit { import, scope: import_scope.clone() });\n-                if let Some(docs) = mac.docs(ctx.db) {\n-                    item.documentation(docs);\n-                }\n-                Some(item.build())\n-            }),\n-    );\n-    Some(())\n-}\n-\n struct DeriveDependencies {\n     label: &'static str,\n     dependencies: &'static [&'static str],"}, {"sha": "aee2bbb53c3ebb546655c500aab8234b9935569e", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2abe19e46aafd57e7edbcb7b254318e252c76c3f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abe19e46aafd57e7edbcb7b254318e252c76c3f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=2abe19e46aafd57e7edbcb7b254318e252c76c3f", "patch": "@@ -142,7 +142,7 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n     )?;\n \n     let ns_filter = |import: &LocatedImport| {\n-        let kind = match ctx.path_kind() {\n+        let path_kind = match ctx.path_kind() {\n             Some(kind) => kind,\n             None => {\n                 return match import.original_item {\n@@ -151,9 +151,9 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n                 }\n             }\n         };\n-        match (kind, import.original_item) {\n+        match (path_kind, import.original_item) {\n             // Aren't handled in flyimport\n-            (PathKind::Vis { .. } | PathKind::Use | PathKind::Derive, _) => false,\n+            (PathKind::Vis { .. } | PathKind::Use, _) => false,\n             // modules are always fair game\n             (_, ItemInNs::Types(hir::ModuleDef::Module(_))) => true,\n             // and so are macros(except for attributes)\n@@ -173,6 +173,11 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n \n             (PathKind::Attr { .. }, ItemInNs::Macros(mac)) => mac.is_attr(ctx.db),\n             (PathKind::Attr { .. }, _) => false,\n+\n+            (PathKind::Derive, ItemInNs::Macros(mac)) => {\n+                mac.is_derive(ctx.db) && !ctx.existing_derives.contains(&mac)\n+            }\n+            (PathKind::Derive, _) => false,\n         }\n     };\n "}, {"sha": "51bbd66ff3729b8746050366a25fe7fd05c78989", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2abe19e46aafd57e7edbcb7b254318e252c76c3f/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abe19e46aafd57e7edbcb7b254318e252c76c3f/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=2abe19e46aafd57e7edbcb7b254318e252c76c3f", "patch": "@@ -12,6 +12,7 @@ use ide_db::{\n     famous_defs::FamousDefs,\n     RootDatabase,\n };\n+use rustc_hash::FxHashSet;\n use syntax::{\n     algo::{find_node_at_offset, non_trivia_sibling},\n     ast::{self, AttrKind, HasName, NameOrNameRef},\n@@ -127,7 +128,6 @@ pub(crate) struct CompletionContext<'a> {\n \n     /// The parent function of the cursor position if it exists.\n     pub(super) function_def: Option<ast::Fn>,\n-    pub(super) attr: Option<ast::Attr>,\n     /// The parent impl of the cursor position if it exists.\n     pub(super) impl_def: Option<ast::Impl>,\n     /// The NameLike under the cursor in the original file if it exists.\n@@ -143,6 +143,8 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) pattern_ctx: Option<PatternContext>,\n     pub(super) path_context: Option<PathCompletionCtx>,\n \n+    pub(super) existing_derives: FxHashSet<hir::Macro>,\n+\n     pub(super) locals: Vec<(Name, Local)>,\n \n     no_completion_required: bool,\n@@ -440,7 +442,6 @@ impl<'a> CompletionContext<'a> {\n             expected_name: None,\n             expected_type: None,\n             function_def: None,\n-            attr: None,\n             impl_def: None,\n             name_syntax: None,\n             lifetime_ctx: None,\n@@ -453,6 +454,7 @@ impl<'a> CompletionContext<'a> {\n             locals,\n             incomplete_let: false,\n             no_completion_required: false,\n+            existing_derives: Default::default(),\n         };\n         ctx.expand_and_fill(\n             original_file.syntax().clone(),\n@@ -746,11 +748,6 @@ impl<'a> CompletionContext<'a> {\n             (fn_is_prev && !inside_impl_trait_block) || for_is_prev2\n         };\n \n-        self.attr = self\n-            .sema\n-            .token_ancestors_with_macros(self.token.clone())\n-            .take_while(|it| it.kind() != SOURCE_FILE && it.kind() != MODULE)\n-            .find_map(ast::Attr::cast);\n         self.fake_attribute_under_caret = syntax_element.ancestors().find_map(ast::Attr::cast);\n \n         self.incomplete_let =\n@@ -764,9 +761,21 @@ impl<'a> CompletionContext<'a> {\n \n         // Overwrite the path kind for derives\n         if let Some((original_file, file_with_fake_ident, offset)) = derive_ctx {\n+            let attr = self\n+                .sema\n+                .token_ancestors_with_macros(self.token.clone())\n+                .take_while(|it| it.kind() != SOURCE_FILE && it.kind() != MODULE)\n+                .find_map(ast::Attr::cast);\n+            if let Some(attr) = &attr {\n+                self.existing_derives =\n+                    self.sema.resolve_derive_macro(attr).into_iter().flatten().flatten().collect();\n+            }\n+\n             if let Some(ast::NameLike::NameRef(name_ref)) =\n                 find_node_at_offset(&file_with_fake_ident, offset)\n             {\n+                self.name_syntax =\n+                    find_node_at_offset(&original_file, name_ref.syntax().text_range().start());\n                 if let Some((path_ctx, _)) =\n                     Self::classify_name_ref(&self.sema, &original_file, name_ref)\n                 {"}, {"sha": "29c9d56164a9c61716093765b59528ed10f9eb06", "filename": "crates/ide_completion/src/render/macro_.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2abe19e46aafd57e7edbcb7b254318e252c76c3f/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abe19e46aafd57e7edbcb7b254318e252c76c3f/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs?ref=2abe19e46aafd57e7edbcb7b254318e252c76c3f", "patch": "@@ -109,6 +109,7 @@ fn detail(sema: &Semantics<RootDatabase>, macro_: hir::Macro) -> Option<String>\n     let _ = sema.parse_or_expand(file_id);\n     let detail = match value {\n         Either::Left(node) => macro_label(&node),\n+        // FIXME: this should render with the derive name, not the function name\n         Either::Right(node) => fn_as_proc_macro_label(&node),\n     };\n     Some(detail)"}, {"sha": "3bc25259239896de464b42a972edf2996aa6c2fd", "filename": "crates/ide_completion/src/tests/attribute.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2abe19e46aafd57e7edbcb7b254318e252c76c3f/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abe19e46aafd57e7edbcb7b254318e252c76c3f/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs?ref=2abe19e46aafd57e7edbcb7b254318e252c76c3f", "patch": "@@ -764,7 +764,7 @@ mod derive {\n #[derive(der$0)] struct Test;\n \"#,\n             expect![[r#\"\n-                de DeriveIdentity (use proc_macros::DeriveIdentity)\n+                de DeriveIdentity (use proc_macros::DeriveIdentity) pub macro derive_identity\n             \"#]],\n         );\n         check_derive(\n@@ -805,21 +805,15 @@ use proc_macros::DeriveIdentity;\n //- minicore: derive, copy, clone\n #[derive(proc_macros::$0)] struct Test;\n \"#,\n-            expect![[r#\"\n-                de Clone, Copy\n-                de Clone\n-            \"#]],\n+            expect![[r#\"\"#]],\n         );\n         check_derive(\n             r#\"\n //- proc_macros: derive_identity\n //- minicore: derive, copy, clone\n #[derive(proc_macros::C$0)] struct Test;\n \"#,\n-            expect![[r#\"\n-                de Clone, Copy\n-                de Clone\n-            \"#]],\n+            expect![[r#\"\"#]],\n         );\n     }\n }"}]}