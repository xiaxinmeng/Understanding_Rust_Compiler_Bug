{"sha": "dcde480a667f24923c9895e3eb6e9a030d271299", "node_id": "C_kwDOAAsO6NoAKGRjZGU0ODBhNjY3ZjI0OTIzYzk4OTVlM2ViNmU5YTAzMGQyNzEyOTk", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-10-16T01:56:40Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-10-24T20:05:39Z"}, "message": "Also consider match guards for divergence check\n\nPlus, add some tests for the divergence check.", "tree": {"sha": "ee779d6e190d7fcad34fdf7f5d07123905cd1441", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee779d6e190d7fcad34fdf7f5d07123905cd1441"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcde480a667f24923c9895e3eb6e9a030d271299", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcde480a667f24923c9895e3eb6e9a030d271299", "html_url": "https://github.com/rust-lang/rust/commit/dcde480a667f24923c9895e3eb6e9a030d271299", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcde480a667f24923c9895e3eb6e9a030d271299/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96ea5b2cd6c8a1c258d26ef8b39697689785478f", "url": "https://api.github.com/repos/rust-lang/rust/commits/96ea5b2cd6c8a1c258d26ef8b39697689785478f", "html_url": "https://github.com/rust-lang/rust/commit/96ea5b2cd6c8a1c258d26ef8b39697689785478f"}], "stats": {"total": 136, "additions": 120, "deletions": 16}, "files": [{"sha": "1846596fa4c8e259ab6f0ffb580807a47de5381b", "filename": "clippy_lints/src/manual_let_else.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dcde480a667f24923c9895e3eb6e9a030d271299/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcde480a667f24923c9895e3eb6e9a030d271299/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_let_else.rs?ref=dcde480a667f24923c9895e3eb6e9a030d271299", "patch": "@@ -194,8 +194,11 @@ fn expr_diverges(cx: &LateContext<'_>, expr: &'_ Expr<'_>) -> bool {\n                 ControlFlow::Continue(Descend::No)\n             },\n             ExprKind::Match(match_expr, match_arms, _) => {\n-                let diverges =\n-                    expr_diverges(cx, match_expr) || match_arms.iter().all(|arm| expr_diverges(cx, arm.body));\n+                let diverges = expr_diverges(cx, match_expr)\n+                    || match_arms.iter().all(|arm| {\n+                        let guard_diverges = arm.guard.as_ref().map_or(false, |g| expr_diverges(cx, g.body()));\n+                        guard_diverges || expr_diverges(cx, arm.body)\n+                    });\n                 if diverges {\n                     return ControlFlow::Break(());\n                 }"}, {"sha": "2ef40e5911af46d077b302bcb78e787bce50b5d4", "filename": "tests/ui/manual_let_else.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/dcde480a667f24923c9895e3eb6e9a030d271299/tests%2Fui%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcde480a667f24923c9895e3eb6e9a030d271299/tests%2Fui%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_let_else.rs?ref=dcde480a667f24923c9895e3eb6e9a030d271299", "patch": "@@ -3,6 +3,7 @@\n     clippy::collapsible_else_if,\n     clippy::unused_unit,\n     clippy::let_unit_value,\n+    clippy::match_single_binding,\n     clippy::never_loop\n )]\n #![warn(clippy::manual_let_else)]\n@@ -55,6 +56,38 @@ fn fire() {\n         if true { return } else { panic!() }\n     };\n \n+    // Diverging after an if still makes the block diverge:\n+    let v = if let Some(v_some) = g() {\n+        v_some\n+    } else {\n+        if true {}\n+        panic!();\n+    };\n+\n+    // A match diverges if all branches diverge:\n+    // Note: the corresponding let-else requires a ; at the end of the match\n+    // as otherwise the type checker does not turn it into a ! type.\n+    let v = if let Some(v_some) = g() {\n+        v_some\n+    } else {\n+        match () {\n+            _ if panic!() => {},\n+            _ => panic!(),\n+        }\n+    };\n+\n+    // An if's expression can cause divergence:\n+    let v = if let Some(v_some) = g() { v_some } else { if panic!() {} };\n+\n+    // An expression of a match can cause divergence:\n+    let v = if let Some(v_some) = g() {\n+        v_some\n+    } else {\n+        match panic!() {\n+            _ => {},\n+        }\n+    };\n+\n     // Top level else if\n     let v = if let Some(v_some) = g() {\n         v_some"}, {"sha": "453b68b8bd003c8f43cadd240412ff0a146ad07b", "filename": "tests/ui/manual_let_else.stderr", "status": "modified", "additions": 82, "deletions": 14, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/dcde480a667f24923c9895e3eb6e9a030d271299/tests%2Fui%2Fmanual_let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dcde480a667f24923c9895e3eb6e9a030d271299/tests%2Fui%2Fmanual_let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_let_else.stderr?ref=dcde480a667f24923c9895e3eb6e9a030d271299", "patch": "@@ -1,13 +1,13 @@\n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:17:5\n+  --> $DIR/manual_let_else.rs:18:5\n    |\n LL |     let v = if let Some(v_some) = g() { v_some } else { return };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v_some) = g() else { return };`\n    |\n    = note: `-D clippy::manual-let-else` implied by `-D warnings`\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:18:5\n+  --> $DIR/manual_let_else.rs:19:5\n    |\n LL | /     let v = if let Some(v_some) = g() {\n LL | |         v_some\n@@ -24,7 +24,7 @@ LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:24:5\n+  --> $DIR/manual_let_else.rs:25:5\n    |\n LL | /     let v = if let Some(v) = g() {\n LL | |         // Blocks around the identity should have no impact\n@@ -45,25 +45,25 @@ LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:37:9\n+  --> $DIR/manual_let_else.rs:38:9\n    |\n LL |         let v = if let Some(v_some) = g() { v_some } else { continue };\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v_some) = g() else { continue };`\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:38:9\n+  --> $DIR/manual_let_else.rs:39:9\n    |\n LL |         let v = if let Some(v_some) = g() { v_some } else { break };\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v_some) = g() else { break };`\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:42:5\n+  --> $DIR/manual_let_else.rs:43:5\n    |\n LL |     let v = if let Some(v_some) = g() { v_some } else { panic!() };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v_some) = g() else { panic!() };`\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:45:5\n+  --> $DIR/manual_let_else.rs:46:5\n    |\n LL | /     let v = if let Some(v_some) = g() {\n LL | |         v_some\n@@ -80,7 +80,7 @@ LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:52:5\n+  --> $DIR/manual_let_else.rs:53:5\n    |\n LL | /     let v = if let Some(v_some) = g() {\n LL | |         v_some\n@@ -97,7 +97,75 @@ LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:59:5\n+  --> $DIR/manual_let_else.rs:60:5\n+   |\n+LL | /     let v = if let Some(v_some) = g() {\n+LL | |         v_some\n+LL | |     } else {\n+LL | |         if true {}\n+LL | |         panic!();\n+LL | |     };\n+   | |______^\n+   |\n+help: consider writing\n+   |\n+LL ~     let Some(v_some) = g() else {\n+LL +         if true {}\n+LL +         panic!();\n+LL +     };\n+   |\n+\n+error: this could be rewritten as `let...else`\n+  --> $DIR/manual_let_else.rs:70:5\n+   |\n+LL | /     let v = if let Some(v_some) = g() {\n+LL | |         v_some\n+LL | |     } else {\n+LL | |         match () {\n+...  |\n+LL | |         }\n+LL | |     };\n+   | |______^\n+   |\n+help: consider writing\n+   |\n+LL ~     let Some(v_some) = g() else {\n+LL +         match () {\n+LL +             _ if panic!() => {},\n+LL +             _ => panic!(),\n+LL +         }\n+LL +     };\n+   |\n+\n+error: this could be rewritten as `let...else`\n+  --> $DIR/manual_let_else.rs:80:5\n+   |\n+LL |     let v = if let Some(v_some) = g() { v_some } else { if panic!() {} };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v_some) = g() else { if panic!() {} };`\n+\n+error: this could be rewritten as `let...else`\n+  --> $DIR/manual_let_else.rs:83:5\n+   |\n+LL | /     let v = if let Some(v_some) = g() {\n+LL | |         v_some\n+LL | |     } else {\n+LL | |         match panic!() {\n+LL | |             _ => {},\n+LL | |         }\n+LL | |     };\n+   | |______^\n+   |\n+help: consider writing\n+   |\n+LL ~     let Some(v_some) = g() else {\n+LL +         match panic!() {\n+LL +             _ => {},\n+LL +         }\n+LL +     };\n+   |\n+\n+error: this could be rewritten as `let...else`\n+  --> $DIR/manual_let_else.rs:92:5\n    |\n LL | /     let v = if let Some(v_some) = g() {\n LL | |         v_some\n@@ -118,7 +186,7 @@ LL +     } };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:68:5\n+  --> $DIR/manual_let_else.rs:101:5\n    |\n LL | /     let v = if let Some(v_some) = g() {\n LL | |         v_some\n@@ -147,7 +215,7 @@ LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:85:5\n+  --> $DIR/manual_let_else.rs:118:5\n    |\n LL | /     let (v, w) = if let Some(v_some) = g().map(|v| (v, 42)) {\n LL | |         v_some\n@@ -164,7 +232,7 @@ LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:92:5\n+  --> $DIR/manual_let_else.rs:125:5\n    |\n LL | /     let v = if let (Some(v_some), w_some) = (g(), 0) {\n LL | |         (w_some, v_some)\n@@ -181,7 +249,7 @@ LL +     };\n    |\n \n error: this could be rewritten as `let...else`\n-  --> $DIR/manual_let_else.rs:101:13\n+  --> $DIR/manual_let_else.rs:134:13\n    |\n LL |             let $n = if let Some(v) = $e { v } else { return };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `let Some(v) = g() else { return };`\n@@ -191,5 +259,5 @@ LL |     create_binding_if_some!(w, g());\n    |\n    = note: this error originates in the macro `create_binding_if_some` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 17 previous errors\n "}]}