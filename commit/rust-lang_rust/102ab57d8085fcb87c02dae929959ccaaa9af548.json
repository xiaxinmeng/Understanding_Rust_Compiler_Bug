{"sha": "102ab57d8085fcb87c02dae929959ccaaa9af548", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMmFiNTdkODA4NWZjYjg3YzAyZGFlOTI5OTU5Y2NhYWE5YWY1NDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-25T13:33:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-25T13:33:18Z"}, "message": "Auto merge of #21582 - FlaPer87:rollup, r=brson\n\n- Successful merges: #21108, #21445, #21498, #21504, #21532, #21535, #21539, #21540, #21541, #21550, #21560, #21573, #21579\n- Failed merges:", "tree": {"sha": "fa968e8ab80bd72228579939e76a0765139a29eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa968e8ab80bd72228579939e76a0765139a29eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/102ab57d8085fcb87c02dae929959ccaaa9af548", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/102ab57d8085fcb87c02dae929959ccaaa9af548", "html_url": "https://github.com/rust-lang/rust/commit/102ab57d8085fcb87c02dae929959ccaaa9af548", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/102ab57d8085fcb87c02dae929959ccaaa9af548/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0899807294826da9b54f1074921bd607181c0c62", "url": "https://api.github.com/repos/rust-lang/rust/commits/0899807294826da9b54f1074921bd607181c0c62", "html_url": "https://github.com/rust-lang/rust/commit/0899807294826da9b54f1074921bd607181c0c62"}, {"sha": "7e83e46556fea9f448e47f7879f5970c400fb24c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e83e46556fea9f448e47f7879f5970c400fb24c", "html_url": "https://github.com/rust-lang/rust/commit/7e83e46556fea9f448e47f7879f5970c400fb24c"}], "stats": {"total": 472, "additions": 257, "deletions": 215}, "files": [{"sha": "7b7eac8e73527e3c2127b356305c0975f7ce2e2b", "filename": "configure", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/102ab57d8085fcb87c02dae929959ccaaa9af548/configure", "raw_url": "https://github.com/rust-lang/rust/raw/102ab57d8085fcb87c02dae929959ccaaa9af548/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=102ab57d8085fcb87c02dae929959ccaaa9af548", "patch": "@@ -28,8 +28,8 @@ need_ok() {\n \n need_cmd() {\n     if command -v $1 >/dev/null 2>&1\n-    then msg \"found $1\"\n-    else err \"need $1\"\n+    then msg \"found program $1\"\n+    else err \"need program $1\"\n     fi\n }\n \n@@ -340,6 +340,7 @@ need_cmd date\n need_cmd tr\n need_cmd sed\n need_cmd file\n+need_cmd make\n \n msg \"inspecting environment\"\n "}, {"sha": "0e52f168f59ed2072cb87c2eddfee295cb821685", "filename": "mk/main.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/102ab57d8085fcb87c02dae929959ccaaa9af548/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/102ab57d8085fcb87c02dae929959ccaaa9af548/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=102ab57d8085fcb87c02dae929959ccaaa9af548", "patch": "@@ -30,8 +30,8 @@ CFG_PACKAGE_VERS=$(CFG_RELEASE_NUM)\n CFG_DISABLE_UNSTABLE_FEATURES=1\n endif\n ifeq ($(CFG_RELEASE_CHANNEL),beta)\n-CFG_RELEASE=$(CFG_RELEASE_NUM)-beta(CFG_PRERELEASE_VERSION)\n-CFG_PACKAGE_VERS=$(CFG_RELEASE_NUM)-beta(CFG_PRERELEASE_VERSION)\n+CFG_RELEASE=$(CFG_RELEASE_NUM)-beta$(CFG_PRERELEASE_VERSION)\n+CFG_PACKAGE_VERS=$(CFG_RELEASE_NUM)-beta$(CFG_PRERELEASE_VERSION)\n CFG_DISABLE_UNSTABLE_FEATURES=1\n endif\n ifeq ($(CFG_RELEASE_CHANNEL),nightly)"}, {"sha": "b2e852a36f7c36485c7d7ed9fa5469369f684c0b", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=102ab57d8085fcb87c02dae929959ccaaa9af548", "patch": "@@ -12,6 +12,20 @@ pub use self::Mode::*;\n use std::fmt;\n use std::str::FromStr;\n \n+#[cfg(stage0)] // NOTE: remove impl after snapshot\n+#[derive(Clone, PartialEq, Show)]\n+pub enum Mode {\n+    CompileFail,\n+    RunFail,\n+    RunPass,\n+    RunPassValgrind,\n+    Pretty,\n+    DebugInfoGdb,\n+    DebugInfoLldb,\n+    Codegen\n+}\n+\n+#[cfg(not(stage0))] // NOTE: remove cfg after snapshot\n #[derive(Clone, PartialEq, Debug)]\n pub enum Mode {\n     CompileFail,\n@@ -24,6 +38,7 @@ pub enum Mode {\n     Codegen\n }\n \n+\n impl Copy for Mode {}\n \n impl FromStr for Mode {"}, {"sha": "3cbd71a1eb3400850fa8c13538fc1904e3f2356a", "filename": "src/doc/reference.md", "status": "modified", "additions": 2, "deletions": 133, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=102ab57d8085fcb87c02dae929959ccaaa9af548", "patch": "@@ -2291,136 +2291,7 @@ The name `str_eq` has a special meaning to the Rust compiler, and the presence\n of this definition means that it will use this definition when generating calls\n to the string equality function.\n \n-A complete list of the built-in language items follows:\n-\n-#### Built-in Traits\n-\n-* `copy`\n-  : Types that do not move ownership when used by-value.\n-* `drop`\n-  : Have destructors.\n-* `send`\n-  : Able to be sent across thread boundaries.\n-* `sized`\n-  : Has a size known at compile time.\n-* `sync`\n-  : Able to be safely shared between threads when aliased.\n-\n-#### Operators\n-\n-These language items are traits:\n-\n-* `add`\n-  : Elements can be added (for example, integers and floats).\n-* `sub`\n-  : Elements can be subtracted.\n-* `mul`\n-  : Elements can be multiplied.\n-* `div`\n-  : Elements have a division operation.\n-* `rem`\n-  : Elements have a remainder operation.\n-* `neg`\n-  : Elements can be negated arithmetically.\n-* `not`\n-  : Elements can be negated logically.\n-* `bitxor`\n-  : Elements have an exclusive-or operation.\n-* `bitand`\n-  : Elements have a bitwise `and` operation.\n-* `bitor`\n-  : Elements have a bitwise `or` operation.\n-* `shl`\n-  : Elements have a left shift operation.\n-* `shr`\n-  : Elements have a right shift operation.\n-* `index`\n-  : Elements can be indexed.\n-* `index_mut`\n-  : ___Needs filling in___\n-* `eq`\n-  : Elements can be compared for equality.\n-* `ord`\n-  : Elements have a partial ordering.\n-* `deref`\n-  : `*` can be applied, yielding a reference to another type.\n-* `deref_mut`\n-  : `*` can be applied, yielding a mutable reference to another type.\n-\n-These are functions:\n-\n-* `fn`\n-  : ___Needs filling in___\n-* `fn_mut`\n-  : ___Needs filling in___\n-* `fn_once`\n-  : ___Needs filling in___\n-* `str_eq`\n-  : Compare two strings (`&str`) for equality.\n-* `strdup_uniq`\n-  : Return a new unique string\n-    containing a copy of the contents of a unique string.\n-\n-#### Types\n-\n-* `type_id`\n-  : The type returned by the `type_id` intrinsic.\n-* `unsafe`\n-  : A type whose contents can be mutated through an immutable reference.\n-\n-#### Marker types\n-\n-These types help drive the compiler's analysis\n-\n-* `begin_unwind`\n-  : ___Needs filling in___\n-* `no_copy_bound`\n-  : This type does not implement \"copy\", even if eligible.\n-* `eh_personality`\n-  : ___Needs filling in___\n-* `exchange_free`\n-  : Free memory that was allocated on the exchange heap.\n-* `exchange_malloc`\n-  : Allocate memory on the exchange heap.\n-* `closure_exchange_malloc`\n-  : ___Needs filling in___\n-* `panic`\n-  : Abort the program with an error.\n-* `fail_bounds_check`\n-  : Abort the program with a bounds check error.\n-* `free`\n-  : Free memory that was allocated on the managed heap.\n-* `gc`\n-  : ___Needs filling in___\n-* `exchange_heap`\n-  : ___Needs filling in___\n-* `iterator`\n-  : ___Needs filling in___\n-* `contravariant_lifetime`\n-  : The lifetime parameter should be considered contravariant.\n-* `covariant_lifetime`\n-  : The lifetime parameter should be considered covariant.\n-* `invariant_lifetime`\n-  : The lifetime parameter should be considered invariant.\n-* `malloc`\n-  : Allocate memory on the managed heap.\n-* `owned_box`\n-  : ___Needs filling in___\n-* `stack_exhausted`\n-  : ___Needs filling in___\n-* `start`\n-  : ___Needs filling in___\n-* `contravariant_type`\n-  : The type parameter should be considered contravariant.\n-* `covariant_type`\n-  : The type parameter should be considered covariant.\n-* `invariant_type`\n-  : The type parameter should be considered invariant.\n-* `ty_desc`\n-  : ___Needs filling in___\n-\n-> **Note:** This list is likely to become out of date. We should auto-generate\n-> it from `librustc/middle/lang_items.rs`.\n+A complete list of the built-in language items will be added in the future.\n \n ### Inline attributes\n \n@@ -2652,9 +2523,7 @@ The currently implemented features of the reference compiler are:\n                    declare a `static` as being unique per-thread leveraging\n                    LLVM's implementation which works in concert with the kernel\n                    loader and dynamic linker. This is not necessarily available\n-                   on all platforms, and usage of it is discouraged (rust\n-                   focuses more on thread-local data instead of thread-local\n-                   data).\n+                   on all platforms, and usage of it is discouraged.\n \n * `trace_macros` - Allows use of the `trace_macros` macro, which is a nasty\n                    hack that will certainly be removed."}, {"sha": "80288c4c3d9ca9604373e67f74b0c43eb51ec3c8", "filename": "src/doc/trpl/installing-rust.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Finstalling-rust.md?ref=102ab57d8085fcb87c02dae929959ccaaa9af548", "patch": "@@ -83,7 +83,6 @@ If not, there are a number of places where you can get help. The easiest is\n you can access through\n [Mibbit](http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust). Click\n that link, and you'll be chatting with other Rustaceans (a silly nickname we\n-call ourselves), and we can help you out. Other great resources include [our\n-forum](http://discuss.rust-lang.org/), [the /r/rust\n-subreddit](http://www.reddit.com/r/rust), and [Stack\n+call ourselves), and we can help you out. Other great resources include [the\n+/r/rust subreddit](http://www.reddit.com/r/rust), and [Stack\n Overflow](http://stackoverflow.com/questions/tagged/rust)."}, {"sha": "e6570c2ee74c8d649faaf8afec41cf76358d30ba", "filename": "src/doc/trpl/method-syntax.md", "status": "modified", "additions": 112, "deletions": 2, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md?ref=102ab57d8085fcb87c02dae929959ccaaa9af548", "patch": "@@ -18,6 +18,8 @@ x.foo().bar().baz();\n Luckily, as you may have guessed with the leading question, you can! Rust provides\n the ability to use this *method call syntax* via the `impl` keyword.\n \n+## Method calls\n+\n Here's how it works:\n \n ```{rust}\n@@ -56,11 +58,56 @@ other parameter. Because we know it's a `Circle`, we can access the `radius`\n just like we would with any other struct. An import of \u03c0 and some\n multiplications later, and we have our area.\n \n+## Chaining method calls\n+\n+So, now we know how to call a method, such as `foo.bar()`. But what about our\n+original example, `foo.bar().baz()`? This is called 'method chaining', and we\n+can do it by returning `self`.\n+\n+```\n+struct Circle {\n+    x: f64,\n+    y: f64,\n+    radius: f64,\n+}\n+\n+impl Circle {\n+    fn area(&self) -> f64 {\n+        std::f64::consts::PI * (self.radius * self.radius)\n+    }\n+\n+    fn grow(&self) -> Circle {\n+        Circle { x: self.x, y: self.y, radius: (self.radius * 10.0) }\n+    }\n+}\n+\n+fn main() {\n+    let c = Circle { x: 0.0, y: 0.0, radius: 2.0 };\n+    println!(\"{}\", c.area());\n+\n+    let d = c.grow().area();\n+    println!(\"{}\", d);\n+}\n+```\n+\n+Check the return type:\n+\n+```\n+# struct Circle;\n+# impl Circle {\n+fn grow(&self) -> Circle {\n+# Circle } }\n+```\n+\n+We just say we're returning a `Circle`. With this, we can grow a new circle\n+that's twice as big as the old one.\n+\n+## Static methods\n+\n You can also define methods that do not take a `self` parameter. Here's a\n pattern that's very common in Rust code:\n \n-```{rust}\n-# #![allow(non_shorthand_field_patterns)]\n+```\n struct Circle {\n     x: f64,\n     y: f64,\n@@ -86,3 +133,66 @@ This *static method* builds a new `Circle` for us. Note that static methods\n are called with the `Struct::method()` syntax, rather than the `ref.method()`\n syntax.\n \n+## Builder Pattern\n+\n+Let's say that we want our users to be able to create Circles, but we will\n+allow them to only set the properties they care about. Otherwise, the `x`\n+and `y` attributes will be `0.0`, and the `radius` will be `1.0`. Rust doesn't\n+have method overloading, named arguments, or variable arguments. We employ\n+the builder pattern instead. It looks like this:\n+\n+```\n+struct Circle {\n+    x: f64,\n+    y: f64,\n+    radius: f64,\n+}\n+\n+impl Circle {\n+    fn area(&self) -> f64 {\n+        std::f64::consts::PI * (self.radius * self.radius)\n+    }\n+}\n+\n+struct CircleBuilder {\n+    coordinate: f64,\n+    radius: f64,\n+}\n+\n+impl CircleBuilder {\n+    fn new() -> CircleBuilder {\n+        CircleBuilder { coordinate: 0.0, radius: 0.0, }\n+    }\n+\n+    fn coordinate(&mut self, coordinate: f64) -> &mut CircleBuilder {\n+\tself.coordinate = coordinate;\n+\tself\n+    }\n+\n+    fn radius(&mut self, radius: f64) -> &mut CircleBuilder {\n+\tself.radius = radius;\n+\tself\n+    }\n+\n+    fn finalize(&self) -> Circle {\n+        Circle { x: self.coordinate, y: self.coordinate, radius: self.radius }\n+    }\n+}\n+\n+fn main() {\n+    let c = CircleBuilder::new()\n+                .coordinate(10.0)\n+                .radius(5.0)\n+                .finalize();\n+\n+\n+    println!(\"area: {}\", c.area());\n+}\n+```\n+\n+What we've done here is make another struct, `CircleBuilder`. We've defined our\n+builder methods on it. We've also defined our `area()` method on `Circle`. We\n+also made one more method on `CircleBuilder`: `finalize()`. This method creates\n+our final `Circle` from the builder. Now, we've used the type system to enforce\n+our concerns: we can use the methods on `CircleBuilder` to constrain making\n+`Circle`s in any way we choose."}, {"sha": "952e299265d85aba4ca5d6f76ca4b8c37ca2aa0a", "filename": "src/etc/errorck.py", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Fetc%2Ferrorck.py", "raw_url": "https://github.com/rust-lang/rust/raw/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Fetc%2Ferrorck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ferrorck.py?ref=102ab57d8085fcb87c02dae929959ccaaa9af548", "patch": "@@ -14,11 +14,10 @@\n import sys, os, re\n \n src_dir = sys.argv[1]\n-\n-errcode_map = { }\n+errcode_map = {}\n+error_re = re.compile(\"(E\\d\\d\\d\\d)\")\n \n for (dirpath, dirnames, filenames) in os.walk(src_dir):\n-\n     if \"src/test\" in dirpath or \"src/llvm\" in dirpath:\n         # Short circuit for fast\n         continue\n@@ -28,15 +27,12 @@\n             continue\n \n         path = os.path.join(dirpath, filename)\n-        line_num = 1\n-        with open(path, 'r') as f:\n-            for line in f:\n-\n-                p = re.compile(\"(E\\d\\d\\d\\d)\")\n-                m = p.search(line)\n-                if not m is None:\n-                    errcode = m.group(1)\n \n+        with open(path, 'r') as f:\n+            for line_num, line in enumerate(f, start=1):\n+                match = error_re.search(line)\n+                if match:\n+                    errcode = match.group(1)\n                     new_record = [(errcode, path, line_num, line)]\n                     existing = errcode_map.get(errcode)\n                     if existing is not None:\n@@ -45,26 +41,19 @@\n                     else:\n                         errcode_map[errcode] = new_record\n \n-                line_num += 1\n-\n errors = False\n all_errors = []\n-for errcode in errcode_map:\n-    entries = errcode_map[errcode]\n-    all_errors += [entries[0][0]]\n+\n+for errcode, entries in errcode_map.items():\n+    all_errors.append(entries[0][0])\n     if len(entries) > 1:\n-        print \"error: duplicate error code \" + errcode\n+        print(\"error: duplicate error code \" + errcode)\n         for entry in entries:\n-            print entry[1] + \": \" + str(entry[2])\n-            print entry[3]\n+            print(\"{1}: {2}\\n{3}\".format(*entry))\n         errors = True\n \n-print str(len(errcode_map)) + \" error codes\"\n-\n-all_errors.sort()\n-all_errors.reverse()\n-\n-print \"highest error code: \" + all_errors[0]\n+print(\"{0} error codes\".format(len(errcode_map)))\n+print(\"highest error code: \" + max(all_errors))\n \n if errors:\n     sys.exit(1)"}, {"sha": "f38583ee1fb3774c8bf01c56304358b58992fe70", "filename": "src/etc/licenseck.py", "status": "modified", "additions": 15, "deletions": 30, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Fetc%2Flicenseck.py", "raw_url": "https://github.com/rust-lang/rust/raw/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Fetc%2Flicenseck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flicenseck.py?ref=102ab57d8085fcb87c02dae929959ccaaa9af548", "patch": "@@ -8,29 +8,18 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n-license1 = \"\"\"// Copyright \"\"\"\n-license2 = \"\"\" The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\"\"\"\n+import re\n \n-license3 = \"\"\"# Copyright \"\"\"\n-license4 = \"\"\" The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\"\"\"\n+license_re = re.compile(\n+u\"\"\"(#|//) Copyright .* The Rust Project Developers. See the COPYRIGHT\n+\\\\1 file at the top-level directory of this distribution and at\n+\\\\1 http://rust-lang.org/COPYRIGHT.\n+\\\\1\n+\\\\1 Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+\\\\1 http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+\\\\1 <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+\\\\1 option. This file may not be copied, modified, or distributed\n+\\\\1 except according to those terms.\"\"\")\n \n exceptions = [\n     \"rt/rust_android_dummy.cpp\", # BSD, chromium\n@@ -57,18 +46,14 @@\n \n def check_license(name, contents):\n     # Whitelist check\n-    for exception in exceptions:\n-        if name.endswith(exception):\n-            return True\n+    if any(name.endswith(e) for e in exceptions):\n+        return True\n \n     # Xfail check\n     firstlineish = contents[:100]\n-    if firstlineish.find(\"ignore-license\") != -1:\n+    if \"ignore-license\" in firstlineish:\n         return True\n \n     # License check\n     boilerplate = contents[:500]\n-    if (boilerplate.find(license1) == -1 or boilerplate.find(license2) == -1) and \\\n-       (boilerplate.find(license3) == -1 or boilerplate.find(license4) == -1):\n-        return False\n-    return True\n+    return bool(license_re.search(boilerplate))"}, {"sha": "c65b762e5173168c880f18dc5209b99e62c65226", "filename": "src/etc/tidy.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Fetc%2Ftidy.py", "raw_url": "https://github.com/rust-lang/rust/raw/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Fetc%2Ftidy.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftidy.py?ref=102ab57d8085fcb87c02dae929959ccaaa9af548", "patch": "@@ -113,7 +113,7 @@ def do_license_check(name, contents):\n     if current_name != \"\":\n         do_license_check(current_name, current_contents)\n \n-except UnicodeDecodeError, e:\n+except UnicodeDecodeError as e:\n     report_err(\"UTF-8 decoding error \" + str(e))\n \n "}, {"sha": "87f7839cd472274d60e3a7b54c352855c71cadd0", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=102ab57d8085fcb87c02dae929959ccaaa9af548", "patch": "@@ -243,6 +243,8 @@ pub trait Show {\n /// Format trait for the `:?` format. Useful for debugging, most all types\n /// should implement this.\n #[unstable = \"I/O and core have yet to be reconciled\"]\n+#[rustc_on_unimplemented = \"`{Self}` cannot be formatted using `:?`; if it is defined in your \\\n+                            crate, add `#[derive(Debug)]` or manually implement it\"]\n pub trait Debug {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n@@ -266,6 +268,8 @@ pub trait String {\n /// When a value can be semantically expressed as a String, this trait may be\n /// used. It corresponds to the default format, `{}`.\n #[unstable = \"I/O and core have yet to be reconciled\"]\n+#[rustc_on_unimplemented = \"`{Self}` cannot be formatted with the default formatter; try using \\\n+                            `:?` instead if you are using a format string\"]\n pub trait Display {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;"}, {"sha": "4910c03de5c68599cf21c0e2f6a4135b8de87d8e", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=102ab57d8085fcb87c02dae929959ccaaa9af548", "patch": "@@ -82,6 +82,8 @@ use usize;\n /// else.\n #[lang=\"iterator\"]\n #[stable]\n+#[rustc_on_unimplemented = \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar \\\n+                            method\"]\n pub trait Iterator {\n     #[stable]\n     type Item;"}, {"sha": "688f0484401529233794fdea918635d4a8ecab98", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=102ab57d8085fcb87c02dae929959ccaaa9af548", "patch": "@@ -27,16 +27,18 @@\n \n use clone::Clone;\n \n-/// Types able to be transferred across task boundaries.\n+/// Types able to be transferred across thread boundaries.\n #[unstable = \"will be overhauled with new lifetime rules; see RFC 458\"]\n #[lang=\"send\"]\n+#[rustc_on_unimplemented = \"`{Self}` cannot be sent between threads safely\"]\n pub unsafe trait Send: 'static {\n     // empty.\n }\n \n /// Types with a constant size known at compile-time.\n #[stable]\n #[lang=\"sized\"]\n+#[rustc_on_unimplemented = \"`{Self}` does not have a constant size known at compile-time\"]\n pub trait Sized {\n     // Empty.\n }\n@@ -146,11 +148,11 @@ pub trait Copy {\n     // Empty.\n }\n \n-/// Types that can be safely shared between tasks when aliased.\n+/// Types that can be safely shared between threads when aliased.\n ///\n /// The precise definition is: a type `T` is `Sync` if `&T` is\n /// thread-safe. In other words, there is no possibility of data races\n-/// when passing `&T` references between tasks.\n+/// when passing `&T` references between threads.\n ///\n /// As one would expect, primitive types like `u8` and `f64` are all\n /// `Sync`, and so are simple aggregate types containing them (like\n@@ -193,6 +195,7 @@ pub trait Copy {\n /// `transmute`-ing from `&T` to `&mut T` is illegal).\n #[unstable = \"will be overhauled with new lifetime rules; see RFC 458\"]\n #[lang=\"sync\"]\n+#[rustc_on_unimplemented = \"`{Self}` cannot be shared between threads safely\"]\n pub unsafe trait Sync {\n     // Empty\n }"}, {"sha": "8933d3a966957c7496a7e466f8b61469f1d9a62f", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=102ab57d8085fcb87c02dae929959ccaaa9af548", "patch": "@@ -295,6 +295,7 @@ fn is_test_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n           &ast::ItemFn(ref decl, _, _, ref generics, _) => {\n             let no_output = match decl.output {\n                 ast::DefaultReturn(..) => true,\n+                ast::Return(ref t) if t.node == ast::TyTup(vec![]) => true,\n                 _ => false\n             };\n             if decl.inputs.is_empty()\n@@ -331,6 +332,7 @@ fn is_bench_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n                 let input_cnt = decl.inputs.len();\n                 let no_output = match decl.output {\n                     ast::DefaultReturn(..) => true,\n+                    ast::Return(ref t) if t.node == ast::TyTup(vec![]) => true,\n                     _ => false\n                 };\n                 let tparm_cnt = generics.ty_params.len();"}, {"sha": "f83037d47bbb1dc398068a64e95551f3fae8805c", "filename": "src/test/compile-fail/issue-19660.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Ftest%2Fcompile-fail%2Fissue-19660.rs", "raw_url": "https://github.com/rust-lang/rust/raw/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Ftest%2Fcompile-fail%2Fissue-19660.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19660.rs?ref=102ab57d8085fcb87c02dae929959ccaaa9af548", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern: requires `copy` lang_item\n+\n+#![feature(lang_items, start)]\n+#![no_std]\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+\n+#[start]\n+fn main(_: int, _: *const *const u8) -> int {\n+    0\n+}"}, {"sha": "bf395b14eb4eceafedb6bd2f75ffeb27ff386729", "filename": "src/test/run-pass/issue-15149.rs", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Ftest%2Frun-pass%2Fissue-15149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Ftest%2Frun-pass%2Fissue-15149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15149.rs?ref=102ab57d8085fcb87c02dae929959ccaaa9af548", "patch": "@@ -8,33 +8,54 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io::{TempDir, Command, fs};\n+use std::slice::SliceExt;\n+use std::io::{Command, fs, USER_RWX};\n use std::os;\n+use std::path::BytesContainer;\n+use std::rand::random;\n \n fn main() {\n     // If we're the child, make sure we were invoked correctly\n     let args = os::args();\n     if args.len() > 1 && args[1].as_slice() == \"child\" {\n-        return assert_eq!(args[0].as_slice(), \"mytest\");\n+        // FIXME: This should check the whole `args[0]` instead of just\n+        // checking that it ends_with the executable name. This\n+        // is needed because of Windows, which has a different behavior.\n+        // See #15149 for more info.\n+        return assert!(args[0].ends_with(&format!(\"mytest{}\", os::consts::EXE_SUFFIX)[]));\n     }\n \n     test();\n }\n \n fn test() {\n-    // If we're the parent, copy our own binary to a tempr directory, and then\n-    // make it executable.\n-    let dir = TempDir::new(\"mytest\").unwrap();\n-    let me = os::self_exe_name().unwrap();\n-    let dest = dir.path().join(format!(\"mytest{}\", os::consts::EXE_SUFFIX));\n-    fs::copy(&me, &dest).unwrap();\n-\n-    // Append the temp directory to our own PATH.\n+    // If we're the parent, copy our own binary to a new directory.\n+    let my_path = os::self_exe_name().unwrap();\n+    let my_dir  = my_path.dir_path();\n+\n+    let random_u32: u32 = random();\n+    let child_dir = Path::new(my_dir.join(format!(\"issue-15149-child-{}\",\n+                                                  random_u32)));\n+    fs::mkdir(&child_dir, USER_RWX).unwrap();\n+\n+    let child_path = child_dir.join(format!(\"mytest{}\",\n+                                            os::consts::EXE_SUFFIX));\n+    fs::copy(&my_path, &child_path).unwrap();\n+\n+    // Append the new directory to our own PATH.\n     let mut path = os::split_paths(os::getenv(\"PATH\").unwrap_or(String::new()));\n-    path.push(dir.path().clone());\n+    path.push(child_dir.clone());\n     let path = os::join_paths(path.as_slice()).unwrap();\n \n-    Command::new(\"mytest\").env(\"PATH\", path.as_slice())\n-                          .arg(\"child\")\n-                          .spawn().unwrap();\n+    let child_output = Command::new(\"mytest\").env(\"PATH\", path.as_slice())\n+                                             .arg(\"child\")\n+                                             .output().unwrap();\n+\n+    assert!(child_output.status.success(),\n+            format!(\"child assertion failed\\n child stdout:\\n {}\\n child stderr:\\n {}\",\n+                    child_output.output.container_as_str().unwrap(),\n+                    child_output.error.container_as_str().unwrap()));\n+\n+    fs::rmdir_recursive(&child_dir).unwrap();\n+\n }"}, {"sha": "7c99c968e352317a3a313c79c20dd0074909ea76", "filename": "src/test/run-pass/test-fn-signature-verification-for-explicit-return-type.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Ftest%2Frun-pass%2Ftest-fn-signature-verification-for-explicit-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/102ab57d8085fcb87c02dae929959ccaaa9af548/src%2Ftest%2Frun-pass%2Ftest-fn-signature-verification-for-explicit-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftest-fn-signature-verification-for-explicit-return-type.rs?ref=102ab57d8085fcb87c02dae929959ccaaa9af548", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --test\n+// no-pretty-expanded\n+extern crate test;\n+\n+#[bench]\n+fn bench_explicit_return_type(_: &mut ::test::Bencher) -> () {}\n+\n+#[test]\n+fn test_explicit_return_type() -> () {}\n+"}]}