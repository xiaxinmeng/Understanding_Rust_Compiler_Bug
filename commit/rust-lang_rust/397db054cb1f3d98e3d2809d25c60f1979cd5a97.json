{"sha": "397db054cb1f3d98e3d2809d25c60f1979cd5a97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5N2RiMDU0Y2IxZjNkOThlM2QyODA5ZDI1YzYwZjE5NzljZDVhOTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-01T13:36:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-01T13:36:52Z"}, "message": "Auto merge of #75529 - bugadani:bounds-check, r=nagisa\n\nEliminate some other bound checks when index comes from an enum\n\n#36962 introduced an assumption for the upper limit of the enum's value. This PR adds an assumption to the lower value as well.\n\nI've modified the original codegen test to show that derived (in that case, adding 1) values also don't generate bounds checks.\n\nHowever, this test is actually carefully crafted to not hit a bug: if the enum's variants are modified to 1 and 2 instead of 2 and 3, the test fails by adding a bounds check. I suppose this is an LLVM issue and #75525, while not exactly in this context should be tracking it.\n\nI'm not at all confident if this patch can be accepted, or even if it _should_ be accepted in this state. But I'm curious about what others think :)\n\n~Improves~ Should improve #13926 but does not close it because it's not exactly predictable, where bounds checks may pop up against the assumptions.", "tree": {"sha": "acc9eb26a2489bbe4adf478d0f50020f7040ba64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acc9eb26a2489bbe4adf478d0f50020f7040ba64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/397db054cb1f3d98e3d2809d25c60f1979cd5a97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/397db054cb1f3d98e3d2809d25c60f1979cd5a97", "html_url": "https://github.com/rust-lang/rust/commit/397db054cb1f3d98e3d2809d25c60f1979cd5a97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/397db054cb1f3d98e3d2809d25c60f1979cd5a97/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e88e908e66cd1e6e30d789b37bcd774951d01856", "url": "https://api.github.com/repos/rust-lang/rust/commits/e88e908e66cd1e6e30d789b37bcd774951d01856", "html_url": "https://github.com/rust-lang/rust/commit/e88e908e66cd1e6e30d789b37bcd774951d01856"}, {"sha": "1d157ce797dddcee16a577796199b1144b4f7f34", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d157ce797dddcee16a577796199b1144b4f7f34", "html_url": "https://github.com/rust-lang/rust/commit/1d157ce797dddcee16a577796199b1144b4f7f34"}], "stats": {"total": 82, "additions": 77, "deletions": 5}, "files": [{"sha": "c64fc9bfcf0edeb15c1c7edbd3340dd591ecb3fd", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/397db054cb1f3d98e3d2809d25c60f1979cd5a97/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/397db054cb1f3d98e3d2809d25c60f1979cd5a97/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=397db054cb1f3d98e3d2809d25c60f1979cd5a97", "patch": "@@ -327,13 +327,29 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                 if er.end != er.start\n                                     && scalar.valid_range.end() > scalar.valid_range.start()\n                                 {\n-                                    // We want `table[e as usize]` to not\n+                                    // We want `table[e as usize \u00b1 k]` to not\n                                     // have bound checks, and this is the most\n-                                    // convenient place to put the `assume`.\n-                                    let ll_t_in_const =\n+                                    // convenient place to put the `assume`s.\n+                                    if *scalar.valid_range.start() > 0 {\n+                                        let enum_value_lower_bound = bx\n+                                            .cx()\n+                                            .const_uint_big(ll_t_in, *scalar.valid_range.start());\n+                                        let cmp_start = bx.icmp(\n+                                            IntPredicate::IntUGE,\n+                                            llval,\n+                                            enum_value_lower_bound,\n+                                        );\n+                                        bx.assume(cmp_start);\n+                                    }\n+\n+                                    let enum_value_upper_bound =\n                                         bx.cx().const_uint_big(ll_t_in, *scalar.valid_range.end());\n-                                    let cmp = bx.icmp(IntPredicate::IntULE, llval, ll_t_in_const);\n-                                    bx.assume(cmp);\n+                                    let cmp_end = bx.icmp(\n+                                        IntPredicate::IntULE,\n+                                        llval,\n+                                        enum_value_upper_bound,\n+                                    );\n+                                    bx.assume(cmp_end);\n                                 }\n                             }\n                         }"}, {"sha": "7e3773b6a3eb17aafa6d9f74644bc2bb7b769762", "filename": "src/test/codegen/enum-bounds-check-derived-idx.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/397db054cb1f3d98e3d2809d25c60f1979cd5a97/src%2Ftest%2Fcodegen%2Fenum-bounds-check-derived-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/397db054cb1f3d98e3d2809d25c60f1979cd5a97/src%2Ftest%2Fcodegen%2Fenum-bounds-check-derived-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-bounds-check-derived-idx.rs?ref=397db054cb1f3d98e3d2809d25c60f1979cd5a97", "patch": "@@ -0,0 +1,25 @@\n+// This test checks an optimization that is not guaranteed to work. This test case should not block\n+// a future LLVM update.\n+// compile-flags: -O\n+// min-llvm-version: 11.0\n+\n+#![crate_type = \"lib\"]\n+\n+pub enum Bar {\n+    A = 1,\n+    B = 3,\n+}\n+\n+// CHECK-LABEL: @lookup_inc\n+#[no_mangle]\n+pub fn lookup_inc(buf: &[u8; 5], f: Bar) -> u8 {\n+    // CHECK-NOT: panic_bounds_check\n+    buf[f as usize + 1]\n+}\n+\n+// CHECK-LABEL: @lookup_dec\n+#[no_mangle]\n+pub fn lookup_dec(buf: &[u8; 5], f: Bar) -> u8 {\n+    // CHECK-NOT: panic_bounds_check\n+    buf[f as usize - 1]\n+}"}, {"sha": "ad029f0fa7399300e87937e3b69a884152d6380a", "filename": "src/test/codegen/enum-bounds-check-issue-13926.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/397db054cb1f3d98e3d2809d25c60f1979cd5a97/src%2Ftest%2Fcodegen%2Fenum-bounds-check-issue-13926.rs", "raw_url": "https://github.com/rust-lang/rust/raw/397db054cb1f3d98e3d2809d25c60f1979cd5a97/src%2Ftest%2Fcodegen%2Fenum-bounds-check-issue-13926.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-bounds-check-issue-13926.rs?ref=397db054cb1f3d98e3d2809d25c60f1979cd5a97", "patch": "@@ -0,0 +1,19 @@\n+// This test checks an optimization that is not guaranteed to work. This test case should not block\n+// a future LLVM update.\n+// compile-flags: -O\n+// min-llvm-version: 11.0\n+\n+#![crate_type = \"lib\"]\n+\n+#[repr(u8)]\n+pub enum Exception {\n+    Low = 5,\n+    High = 10,\n+}\n+\n+// CHECK-LABEL: @access\n+#[no_mangle]\n+pub fn access(array: &[usize; 12], exc: Exception) -> usize {\n+    // CHECK-NOT: panic_bounds_check\n+    array[(exc as u8 - 4) as usize]\n+}"}, {"sha": "17322d5911b9228ab1e66f35e4800d16f5b48613", "filename": "src/test/codegen/enum-bounds-check.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/397db054cb1f3d98e3d2809d25c60f1979cd5a97/src%2Ftest%2Fcodegen%2Fenum-bounds-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/397db054cb1f3d98e3d2809d25c60f1979cd5a97/src%2Ftest%2Fcodegen%2Fenum-bounds-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-bounds-check.rs?ref=397db054cb1f3d98e3d2809d25c60f1979cd5a97", "patch": "@@ -12,3 +12,15 @@ pub fn lookup(buf: &[u8; 2], f: Foo) -> u8 {\n     // CHECK-NOT: panic_bounds_check\n     buf[f as usize]\n }\n+\n+pub enum Bar {\n+    A = 2,\n+    B = 3\n+}\n+\n+// CHECK-LABEL: @lookup_unmodified\n+#[no_mangle]\n+pub fn lookup_unmodified(buf: &[u8; 5], f: Bar) -> u8 {\n+    // CHECK-NOT: panic_bounds_check\n+    buf[f as usize]\n+}"}]}