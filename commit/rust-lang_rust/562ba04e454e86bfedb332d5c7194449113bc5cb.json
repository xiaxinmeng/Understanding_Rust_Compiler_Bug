{"sha": "562ba04e454e86bfedb332d5c7194449113bc5cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MmJhMDRlNDU0ZTg2YmZlZGIzMzJkNWM3MTk0NDQ5MTEzYmM1Y2I=", "commit": {"author": {"name": "Diggory Blake", "email": "diggsey@googlemail.com", "date": "2018-01-11T22:18:16Z"}, "committer": {"name": "Diggory Blake", "email": "diggsey@googlemail.com", "date": "2018-01-13T18:39:37Z"}, "message": "Implement \"seek_relative\"", "tree": {"sha": "407fe357a3716ebc9eae7399ce29da6393ea974f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/407fe357a3716ebc9eae7399ce29da6393ea974f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/562ba04e454e86bfedb332d5c7194449113bc5cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/562ba04e454e86bfedb332d5c7194449113bc5cb", "html_url": "https://github.com/rust-lang/rust/commit/562ba04e454e86bfedb332d5c7194449113bc5cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/562ba04e454e86bfedb332d5c7194449113bc5cb/comments", "author": {"login": "Diggsey", "id": 451321, "node_id": "MDQ6VXNlcjQ1MTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/451321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Diggsey", "html_url": "https://github.com/Diggsey", "followers_url": "https://api.github.com/users/Diggsey/followers", "following_url": "https://api.github.com/users/Diggsey/following{/other_user}", "gists_url": "https://api.github.com/users/Diggsey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Diggsey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Diggsey/subscriptions", "organizations_url": "https://api.github.com/users/Diggsey/orgs", "repos_url": "https://api.github.com/users/Diggsey/repos", "events_url": "https://api.github.com/users/Diggsey/events{/privacy}", "received_events_url": "https://api.github.com/users/Diggsey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Diggsey", "id": 451321, "node_id": "MDQ6VXNlcjQ1MTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/451321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Diggsey", "html_url": "https://github.com/Diggsey", "followers_url": "https://api.github.com/users/Diggsey/followers", "following_url": "https://api.github.com/users/Diggsey/following{/other_user}", "gists_url": "https://api.github.com/users/Diggsey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Diggsey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Diggsey/subscriptions", "organizations_url": "https://api.github.com/users/Diggsey/orgs", "repos_url": "https://api.github.com/users/Diggsey/repos", "events_url": "https://api.github.com/users/Diggsey/events{/privacy}", "received_events_url": "https://api.github.com/users/Diggsey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a18dea908ca2a89cc1c7f4b0416924382ca145e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a18dea908ca2a89cc1c7f4b0416924382ca145e6", "html_url": "https://github.com/rust-lang/rust/commit/a18dea908ca2a89cc1c7f4b0416924382ca145e6"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "df1609ace875a0b9beb74b453dd476b4ff6f9552", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/562ba04e454e86bfedb332d5c7194449113bc5cb/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/562ba04e454e86bfedb332d5c7194449113bc5cb/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=562ba04e454e86bfedb332d5c7194449113bc5cb", "patch": "@@ -194,6 +194,31 @@ impl<R: Read> BufReader<R> {\n     pub fn into_inner(self) -> R { self.inner }\n }\n \n+impl<R: Seek> BufReader<R> {\n+    /// Seeks relative to the current position. If the new position lies within the buffer,\n+    /// the buffer will not be flushed, allowing for more efficient seeks.\n+    /// This method does not return the location of the underlying reader, so the caller\n+    /// must track this information themselves if it is required.\n+    #[unstable(feature = \"bufreader_seek_relative\", issue = \"31100\")]\n+    pub fn seek_relative(&mut self, offset: i64) -> io::Result<()> {\n+        let pos = self.pos as u64;\n+        if offset < 0 {\n+            if let Some(new_pos) = pos.checked_sub((-offset) as u64) {\n+                self.pos = new_pos as usize;\n+                return Ok(())\n+            }\n+        } else {\n+            if let Some(new_pos) = pos.checked_add(offset as u64) {\n+                if new_pos <= self.cap as u64 {\n+                    self.pos = new_pos as usize;\n+                    return Ok(())\n+                }\n+            }\n+        }\n+        self.seek(SeekFrom::Current(offset)).map(|_|())\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<R: Read> Read for BufReader<R> {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n@@ -942,6 +967,23 @@ mod tests {\n         assert_eq!(reader.seek(SeekFrom::Current(-2)).ok(), Some(3));\n     }\n \n+    #[test]\n+    fn test_buffered_reader_seek_relative() {\n+        let inner: &[u8] = &[5, 6, 7, 0, 1, 2, 3, 4];\n+        let mut reader = BufReader::with_capacity(2, io::Cursor::new(inner));\n+\n+        assert!(reader.seek_relative(3).is_ok());\n+        assert_eq!(reader.fill_buf().ok(), Some(&[0, 1][..]));\n+        assert!(reader.seek_relative(0).is_ok());\n+        assert_eq!(reader.fill_buf().ok(), Some(&[0, 1][..]));\n+        assert!(reader.seek_relative(1).is_ok());\n+        assert_eq!(reader.fill_buf().ok(), Some(&[1][..]));\n+        assert!(reader.seek_relative(-1).is_ok());\n+        assert_eq!(reader.fill_buf().ok(), Some(&[0, 1][..]));\n+        assert!(reader.seek_relative(2).is_ok());\n+        assert_eq!(reader.fill_buf().ok(), Some(&[2, 3][..]));\n+    }\n+\n     #[test]\n     fn test_buffered_reader_seek_underflow() {\n         // gimmick reader that yields its position modulo 256 for each byte"}]}