{"sha": "4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMTRiZmRjNzMzMzhkOWI0OWVlYmIzZjkwNWJmYzNkZjQ3ZDY4OTE=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-10-25T12:31:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-25T12:31:13Z"}, "message": "Rollup merge of #55269 - matthiaskrgr:typos_oct, r=zackmdavis\n\nfix typos in various places", "tree": {"sha": "1391b9932de51c2fae0d3ceb400e2bb677e23e6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1391b9932de51c2fae0d3ceb400e2bb677e23e6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb0beRCRBK7hj4Ov3rIwAAdHIIAB+JioZuPcqbm8AiCvya0hVa\ncvuQM8vfCO8GzBTXbRkRl1NrOvebSGgFJtTr7ivBouuPzxgPXHWc2O7lGXR3UeS7\nUKRQ2RTt9r0sn4BNehT1QiScImdqHtbVveh0zhvJBBMnmdO0ipWOi5xb8Bk803E3\nNz63PeToLVslb5XzssaEpMHvid9O8N1EOk8H7GgX4ZzJcWwA3V9xgNoeBuxzwFpu\ni1lLKmNEKMStXcPGI4V0mLkSTNB+DVCO700PT7slmoVFVLFEmZ6nShvS2DvApYWM\nXe/Bj+jWpuIgHkwHMZ2glgyeY/Mwbdw8j/RJUGp2FIpdNctQXt+qUj1V4r1/+kA=\n=PUb8\n-----END PGP SIGNATURE-----\n", "payload": "tree 1391b9932de51c2fae0d3ceb400e2bb677e23e6b\nparent 88341a99398d740de8b82fff297731e68c9d2a75\nparent 4972beaf65cad992a6ed791fdefe90e46c09aa7b\nauthor Pietro Albini <pietro@pietroalbini.org> 1540470673 +0200\ncommitter GitHub <noreply@github.com> 1540470673 +0200\n\nRollup merge of #55269 - matthiaskrgr:typos_oct, r=zackmdavis\n\nfix typos in various places\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "html_url": "https://github.com/rust-lang/rust/commit/4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88341a99398d740de8b82fff297731e68c9d2a75", "url": "https://api.github.com/repos/rust-lang/rust/commits/88341a99398d740de8b82fff297731e68c9d2a75", "html_url": "https://github.com/rust-lang/rust/commit/88341a99398d740de8b82fff297731e68c9d2a75"}, {"sha": "4972beaf65cad992a6ed791fdefe90e46c09aa7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4972beaf65cad992a6ed791fdefe90e46c09aa7b", "html_url": "https://github.com/rust-lang/rust/commit/4972beaf65cad992a6ed791fdefe90e46c09aa7b"}], "stats": {"total": 154, "additions": 77, "deletions": 77}, "files": [{"sha": "ffc5adbebb34f76658714abb6af3c22f9593493b", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -594,7 +594,7 @@ def exe_suffix():\n         return ''\n \n     def bootstrap_binary(self):\n-        \"\"\"Return the path of the boostrap binary\n+        \"\"\"Return the path of the bootstrap binary\n \n         >>> rb = RustBuild()\n         >>> rb.build_dir = \"build\""}, {"sha": "2bbd4372721cbc2f724dada47454f68f02573bba", "filename": "src/etc/lldb_rust_formatters.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Fetc%2Flldb_rust_formatters.py", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Fetc%2Flldb_rust_formatters.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flldb_rust_formatters.py?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -277,7 +277,7 @@ def print_std_string_val(val, internal_dict):\n #=--------------------------------------------------------------------------------------------------\n \n def print_array_of_values(array_name, data_ptr_val, length, internal_dict):\n-    \"\"\"Prints a contigous memory range, interpreting it as values of the\n+    \"\"\"Prints a contiguous memory range, interpreting it as values of the\n        pointee-type of data_ptr_val.\"\"\"\n \n     data_ptr_type = data_ptr_val.type"}, {"sha": "24c8fd3a969ca3e1bde035f6531cf3c6456d7bb2", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -77,7 +77,7 @@ use self::Entry::*;\n /// movie_reviews.insert(\"Office Space\",       \"Deals with real issues in the workplace.\");\n /// movie_reviews.insert(\"Pulp Fiction\",       \"Masterpiece.\");\n /// movie_reviews.insert(\"The Godfather\",      \"Very enjoyable.\");\n-/// movie_reviews.insert(\"The Blues Brothers\", \"Eye lyked it alot.\");\n+/// movie_reviews.insert(\"The Blues Brothers\", \"Eye lyked it a lot.\");\n ///\n /// // check for a specific one.\n /// if !movie_reviews.contains_key(\"Les Mis\u00e9rables\") {"}, {"sha": "4efcaae59b012ce1a192c4a51379d8d9a0c20c53", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -518,7 +518,7 @@ pub unsafe trait GlobalAlloc {\n     /// The block is described by the given `ptr` pointer and `layout`.\n     ///\n     /// If this returns a non-null pointer, then ownership of the memory block\n-    /// referenced by `ptr` has been transferred to this alloctor.\n+    /// referenced by `ptr` has been transferred to this allocator.\n     /// The memory may or may not have been deallocated,\n     /// and should be considered unusable (unless of course it was\n     /// transferred back to the caller again via the return value of"}, {"sha": "cceae9249e45626a6642c366242bdc177232f2df", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -1025,7 +1025,7 @@ extern \"rust-intrinsic\" {\n     ///         // to avoid problems in case something further down panics.\n     ///         src.set_len(0);\n     ///\n-    ///         // The two regions cannot overlap becuase mutable references do\n+    ///         // The two regions cannot overlap because mutable references do\n     ///         // not alias, and two different vectors cannot own the same\n     ///         // memory.\n     ///         ptr::copy_nonoverlapping(src_ptr, dst_ptr, src_len);"}, {"sha": "a03c080fb3f3418fad92dba5a06c1390f168de3a", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -102,7 +102,7 @@ pub use marker::Unpin;\n /// value in place, preventing the value referenced by that pointer from being moved\n /// unless it implements [`Unpin`].\n ///\n-/// See the [`pin` module] documentation for furthur explanation on pinning.\n+/// See the [`pin` module] documentation for further explanation on pinning.\n ///\n /// [`Unpin`]: ../../std/marker/trait.Unpin.html\n /// [`pin` module]: ../../std/pin/index.html"}, {"sha": "b699cb028842be995604f77a605c34c7c8a82124", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -38,7 +38,7 @@\n //!   underlying object is live and no reference (just raw pointers) is used to\n //!   access the same memory.\n //!\n-//! These axioms, along with careful use of [`offset`] for pointer arithmentic,\n+//! These axioms, along with careful use of [`offset`] for pointer arithmetic,\n //! are enough to correctly implement many useful things in unsafe code. Stronger guarantees\n //! will be provided eventually, as the [aliasing] rules are being determined. For more\n //! information, see the [book] as well as the section in the reference devoted"}, {"sha": "e378e1b8be0e922b6b8e56c52330b4ef411c6f34", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -40,7 +40,7 @@ impl ::std::fmt::Debug for CrateNum {\n         match self {\n             CrateNum::Index(id) => write!(fmt, \"crate{}\", id.private),\n             CrateNum::Invalid => write!(fmt, \"invalid crate\"),\n-            CrateNum::BuiltinMacros => write!(fmt, \"bultin macros crate\"),\n+            CrateNum::BuiltinMacros => write!(fmt, \"builtin macros crate\"),\n             CrateNum::ReservedForIncrCompCache => write!(fmt, \"crate for decoding incr comp cache\"),\n         }\n     }\n@@ -101,7 +101,7 @@ impl fmt::Display for CrateNum {\n         match self {\n             CrateNum::Index(id) => fmt::Display::fmt(&id.private, f),\n             CrateNum::Invalid => write!(f, \"invalid crate\"),\n-            CrateNum::BuiltinMacros => write!(f, \"bultin macros crate\"),\n+            CrateNum::BuiltinMacros => write!(f, \"builtin macros crate\"),\n             CrateNum::ReservedForIncrCompCache => write!(f, \"crate for decoding incr comp cache\"),\n         }\n     }"}, {"sha": "5054f522778706305bf9cdbb653f71f4ac3530e4", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -632,7 +632,7 @@ pub fn read_target_uint(endianness: layout::Endian, mut source: &[u8]) -> Result\n }\n \n ////////////////////////////////////////////////////////////////////////////////\n-// Methods to faciliate working with signed integers stored in a u128\n+// Methods to facilitate working with signed integers stored in a u128\n ////////////////////////////////////////////////////////////////////////////////\n \n pub fn sign_extend(value: u128, size: Size) -> u128 {"}, {"sha": "f1c5030c6419ae370c21f2c2c2fd2a7a28aba0ca", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -469,7 +469,7 @@ pub enum BorrowKind {\n     ///     }\n     ///\n     /// This can't be a shared borrow because mutably borrowing (*x as Some).0\n-    /// should not prevent `if let None = x { ... }`, for example, becase the\n+    /// should not prevent `if let None = x { ... }`, for example, because the\n     /// mutating `(*x as Some).0` can't affect the discriminant of `x`.\n     /// We can also report errors with this kind of borrow differently.\n     Shallow,"}, {"sha": "ea30752a820ee430cab1e2a01557f6f41198de8d", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -412,7 +412,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             flags.push((\"crate_local\".to_owned(), None));\n         }\n \n-        // Allow targetting all integers using `{integral}`, even if the exact type was resolved\n+        // Allow targeting all integers using `{integral}`, even if the exact type was resolved\n         if self_ty.is_integral() {\n             flags.push((\"_Self\".to_owned(), Some(\"{integral}\".to_owned())));\n         }"}, {"sha": "2fe6a0377f81b14803ab93feae7a03795b3795bb", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -761,7 +761,7 @@ impl Builder<'a, 'll, 'tcx> {\n                     fty, asm, cons, volatile, alignstack, dia);\n                 Some(self.call(v, inputs, None))\n             } else {\n-                // LLVM has detected an issue with our constaints, bail out\n+                // LLVM has detected an issue with our constraints, bail out\n                 None\n             }\n         }"}, {"sha": "e6e1367b592df79360ce3061cf30c4de1e3839f3", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -68,7 +68,7 @@ macro_rules! provide {\n \n                 let $cdata = $tcx.crate_data_as_rc_any($def_id.krate);\n                 let $cdata = $cdata.downcast_ref::<cstore::CrateMetadata>()\n-                    .expect(\"CrateStore crated ata is not a CrateMetadata\");\n+                    .expect(\"CrateStore created data is not a CrateMetadata\");\n                 $compute\n             })*\n "}, {"sha": "9702e94a9e0f0ffae84c155cec25e5a0d7a77e1d", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -129,7 +129,7 @@ pub fn op_to_const<'tcx>(\n             assert!(alloc.bytes.len() as u64 - ptr.offset.bytes() >= op.layout.size.bytes());\n             let mut alloc = alloc.clone();\n             alloc.align = align;\n-            // FIXME shouldnt it be the case that `mark_static_initialized` has already\n+            // FIXME shouldn't it be the case that `mark_static_initialized` has already\n             // interned this?  I thought that is the entire point of that `FinishStatic` stuff?\n             let alloc = ecx.tcx.intern_const_alloc(alloc);\n             ConstValue::ByRef(ptr.alloc_id, alloc, ptr.offset)"}, {"sha": "56a9daf84f768905faedee6d096ea7f99260f143", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -2279,7 +2279,7 @@ fn demo<'a>(s: &'a mut S<'a>) -> &'a mut String { let p = &mut *(*s).data; p }\n \n Note that this approach needs a reference to S with lifetime `'a`.\n Nothing shorter than `'a` will suffice: a shorter lifetime would imply\n-that after `demo` finishes excuting, something else (such as the\n+that after `demo` finishes executing, something else (such as the\n destructor!) could access `s.data` after the end of that shorter\n lifetime, which would again violate the `&mut`-borrow's exclusive\n access."}, {"sha": "64ad4c2eec1e1343da2b8cba38f91368e68d717c", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -556,7 +556,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n                 )?;\n             }\n         } else {\n-            // Uh, that shouln't happen... the function did not intend to return\n+            // Uh, that shouldn't happen... the function did not intend to return\n             return err!(Unreachable);\n         }\n "}, {"sha": "6fe490c6efc8ffa8434ce9b97a7ff9cc475aac40", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -94,7 +94,7 @@ impl<'a, 'b, 'c, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> HasDataLayout\n     }\n }\n \n-// FIXME: Really we shouldnt clone memory, ever. Snapshot machinery should instad\n+// FIXME: Really we shouldn't clone memory, ever. Snapshot machinery should instead\n // carefully copy only the reachable parts.\n impl<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'a, 'mir, 'tcx>>\n     Clone for Memory<'a, 'mir, 'tcx, M>\n@@ -658,7 +658,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n     }\n \n     /// It is the caller's responsibility to handle undefined and pointer bytes.\n-    /// However, this still checks that there are no relocations on the *egdes*.\n+    /// However, this still checks that there are no relocations on the *edges*.\n     #[inline]\n     fn get_bytes_with_undef_and_ptr(\n         &self,\n@@ -1098,7 +1098,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         Ok(())\n     }\n \n-    /// Error if there are relocations overlapping with the egdes of the\n+    /// Error if there are relocations overlapping with the edges of the\n     /// given memory range.\n     #[inline]\n     fn check_relocation_edges(&self, ptr: Pointer<M::PointerTag>, size: Size) -> EvalResult<'tcx> {"}, {"sha": "021e2d58f84b1d4556ec8e2950ac8abf286408da", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -357,14 +357,14 @@ fn from_known_layout<'tcx>(\n }\n \n impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n-    /// Try reading a value in memory; this is interesting particularily for ScalarPair.\n+    /// Try reading a value in memory; this is interesting particularly for ScalarPair.\n     /// Return None if the layout does not permit loading this as a value.\n     pub(super) fn try_read_value_from_mplace(\n         &self,\n         mplace: MPlaceTy<'tcx, M::PointerTag>,\n     ) -> EvalResult<'tcx, Option<Value<M::PointerTag>>> {\n         if mplace.layout.is_unsized() {\n-            // Dont touch unsized\n+            // Don't touch unsized\n             return Ok(None);\n         }\n         let (ptr, ptr_align) = mplace.to_scalar_ptr_align();"}, {"sha": "ac1ba0edc3b3b850a242a50c9efc5f4ff84805c7", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -230,7 +230,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                                 ),\n                         }\n                     }\n-                    // non-ZST also have to be dereferencable\n+                    // non-ZST also have to be dereferenceable\n                     if size != Size::ZERO {\n                         let ptr = try_validation!(place.ptr.to_ptr(),\n                             \"integer pointer in non-ZST reference\", path);\n@@ -272,7 +272,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                 // FIXME: Check if the signature matches\n             }\n             // This should be all the primitive types\n-            ty::Never => bug!(\"Uninhabited type should have been catched earlier\"),\n+            ty::Never => bug!(\"Uninhabited type should have been caught earlier\"),\n             _ => bug!(\"Unexpected primitive type {}\", value.layout.ty)\n         }\n         Ok(())"}, {"sha": "0e9596244cd581cb818c89f33d681002edde192f", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -166,12 +166,12 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    /// With eRFC 2497, we need to check whether an expression is ambigious and warn or error\n+    /// With eRFC 2497, we need to check whether an expression is ambiguous and warn or error\n     /// depending on the edition, this function handles that.\n     fn while_if_let_ambiguity(&self, expr: &P<Expr>) {\n         if let Some((span, op_kind)) = self.while_if_let_expr_ambiguity(&expr) {\n             let mut err = self.err_handler().struct_span_err(\n-                span, &format!(\"ambigious use of `{}`\", op_kind.to_string())\n+                span, &format!(\"ambiguous use of `{}`\", op_kind.to_string())\n             );\n \n             err.note(\n@@ -193,22 +193,22 @@ impl<'a> AstValidator<'a> {\n     }\n \n     /// With eRFC 2497 adding if-let chains, there is a requirement that the parsing of\n-    /// `&&` and `||` in a if-let statement be unambigious. This function returns a span and\n-    /// a `BinOpKind` (either `&&` or `||` depending on what was ambigious) if it is determined\n-    /// that the current expression parsed is ambigious and will break in future.\n+    /// `&&` and `||` in a if-let statement be unambiguous. This function returns a span and\n+    /// a `BinOpKind` (either `&&` or `||` depending on what was ambiguous) if it is determined\n+    /// that the current expression parsed is ambiguous and will break in future.\n     fn while_if_let_expr_ambiguity(&self, expr: &P<Expr>) -> Option<(Span, BinOpKind)> {\n         debug!(\"while_if_let_expr_ambiguity: expr.node: {:?}\", expr.node);\n         match &expr.node {\n             ExprKind::Binary(op, _, _) if op.node == BinOpKind::And || op.node == BinOpKind::Or => {\n                 Some((expr.span, op.node))\n             },\n             ExprKind::Range(ref lhs, ref rhs, _) => {\n-                let lhs_ambigious = lhs.as_ref()\n+                let lhs_ambiguous = lhs.as_ref()\n                     .and_then(|lhs| self.while_if_let_expr_ambiguity(lhs));\n-                let rhs_ambigious = rhs.as_ref()\n+                let rhs_ambiguous = rhs.as_ref()\n                     .and_then(|rhs| self.while_if_let_expr_ambiguity(rhs));\n \n-                lhs_ambigious.or(rhs_ambigious)\n+                lhs_ambiguous.or(rhs_ambiguous)\n             }\n             _ => None,\n         }"}, {"sha": "1a5d2801af0c5d1b2a6c7be416c99d0368c43494", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -430,7 +430,7 @@ impl Align {\n     }\n \n     /// Lower the alignment, if necessary, such that the given offset\n-    /// is aligned to it (the offset is a multiple of the aligment).\n+    /// is aligned to it (the offset is a multiple of the alignment).\n     pub fn restrict_for_offset(self, offset: Size) -> Align {\n         self.min(Align::max_for_offset(offset))\n     }"}, {"sha": "77151351d08a1e5522ddd0b1ef88f9d1f30a7e1f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -5198,7 +5198,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         } else {\n                             // If no type arguments were provided, we have to infer them.\n                             // This case also occurs as a result of some malformed input, e.g.\n-                            // a lifetime argument being given instead of a type paramter.\n+                            // a lifetime argument being given instead of a type parameter.\n                             // Using inference instead of `Error` gives better error messages.\n                             self.var_for_def(span, param)\n                         }"}, {"sha": "9990d2ee2b6769d386f3e0b6a32ffc7ba69806c5", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -674,7 +674,7 @@ fn check_existential_types<'a, 'fcx, 'gcx, 'tcx>(\n                     } // if may_define_existential_type\n \n                     // now register the bounds on the parameters of the existential type\n-                    // so the parameters given by the function need to fulfil them\n+                    // so the parameters given by the function need to fulfill them\n                     // ```rust\n                     // existential type Foo<T: Bar>: 'static;\n                     // fn foo<U>() -> Foo<U> { .. *}"}, {"sha": "05a83dd307c38047e7bb2e76a6f7dab2603f6388", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -269,7 +269,7 @@ pub fn coerce_unsized_info<'a, 'gcx>(gcx: TyCtxt<'a, 'gcx, 'gcx>,\n                 // exactly one (non-phantom) field has changed its\n                 // type, which we will expect to be the pointer that\n                 // is becoming fat (we could probably generalize this\n-                // to mutiple thin pointers of the same type becoming\n+                // to multiple thin pointers of the same type becoming\n                 // fat, but we don't). In this case:\n                 //\n                 // - `extra` has type `T` before and type `T` after"}, {"sha": "a7db372a0e20a86a42cf326c78d4949f4531fc2c", "filename": "src/libstd/sync/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibstd%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibstd%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmod.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -97,7 +97,7 @@\n //! - A **multiprocessor** system executing multiple hardware threads\n //!   at the same time: In multi-threaded scenarios, you can use two\n //!   kinds of primitives to deal with synchronization:\n-//!   - [memory fences] to ensure memory accesses are made visibile to\n+//!   - [memory fences] to ensure memory accesses are made visible to\n //!   other CPUs in the right order.\n //!   - [atomic operations] to ensure simultaneous access to the same\n //!   memory location doesn't lead to undefined behavior."}, {"sha": "cf9698cb2a9712b6a2439314503c0aef40e63ffd", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -290,8 +290,8 @@ impl Once {\n     }\n \n     /// Returns true if some `call_once` call has completed\n-    /// successfuly. Specifically, `is_completed` will return false in\n-    /// the following situtations:\n+    /// successfully. Specifically, `is_completed` will return false in\n+    /// the following situations:\n     ///   * `call_once` was not called at all,\n     ///   * `call_once` was called, but has not yet completed,\n     ///   * the `Once` instance is poisoned"}, {"sha": "d8fb20d425008e44fbec4d40019a0e77f9eb34a7", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -96,7 +96,7 @@ impl<'a> StripUnconfigured<'a> {\n     /// when the configuration predicate is true, or otherwise expand into an\n     /// empty list of attributes.\n     ///\n-    /// Gives a compiler warning when the `cfg_attr` contains no attribtes and\n+    /// Gives a compiler warning when the `cfg_attr` contains no attributes and\n     /// is in the original source file. Gives a compiler error if the syntax of\n     /// the attribute is incorrect\n     fn process_cfg_attr(&mut self, attr: ast::Attribute) -> Vec<ast::Attribute> {\n@@ -138,7 +138,7 @@ impl<'a> StripUnconfigured<'a> {\n         };\n \n         // Check feature gate and lint on zero attributes in source. Even if the feature is gated,\n-        // we still compute as if it wasn't, since the emitted error will stop compilation futher\n+        // we still compute as if it wasn't, since the emitted error will stop compilation further\n         // along the compilation.\n         match (expanded_attrs.len(), gate_cfg_attr_multi) {\n             (0, false) => {"}, {"sha": "2abcd4b7ba99c49eb2ad6b4c1c88e228de7818ac", "filename": "src/test/run-pass/issues/issue-18804/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18804%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18804%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18804%2Fmain.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // run-pass\n-// Test for issue #18804, #[linkage] does not propagate thorugh generic\n+// Test for issue #18804, #[linkage] does not propagate through generic\n // functions. Failure results in a linker error.\n \n // ignore-asmjs no weak symbol support"}, {"sha": "b116888d63c1008c627dc772f585260ff4a396b1", "filename": "src/test/ui/block-result/unexpected-return-on-unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test that we do some basic error correcton in the tokeniser (and don't spew\n+// Test that we do some basic error correction in the tokeniser (and don't spew\n // too many bogus errors).\n \n fn foo() -> usize {"}, {"sha": "ec4ee80b498a57c6d8a31ff9bff4833a1106eec0", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-false.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-false.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -1,5 +1,5 @@\n // Test that cfg_attr doesn't emit any attributes when the\n-// configuation variable is false. This mirrors `cfg-attr-multi-true.rs`\n+// configuration variable is false. This mirrors `cfg-attr-multi-true.rs`\n \n // compile-pass\n "}, {"sha": "186ecc54827208e0634c7edbbd6c3b02efa784de", "filename": "src/test/ui/nll/issue-21232-partial-init-and-use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -66,7 +66,7 @@ impl<F> R<F> { fn new(f: F) -> Self { R { w: 0, f } } }\n // It got pretty monotonous writing the same code over and over, and I\n // feared I would forget details. So I abstracted some desiderata into\n // macros. But I left the initialization code inline, because that's\n-// where the errors for #54986 will be emited.\n+// where the errors for #54986 will be emitted.\n \n macro_rules! use_fully {\n     (struct $s:expr) => { {"}, {"sha": "eaa809d2b37069da325023851cbc788138b237aa", "filename": "src/test/ui/nll/issue-52059-report-when-borrow-and-drop-conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52059-report-when-borrow-and-drop-conflict.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -1,5 +1,5 @@\n // rust-lang/rust#52059: Regardless of whether you are moving out of a\n-// Drop type or just introducing an inadvertant alias via a borrow of\n+// Drop type or just introducing an inadvertent alias via a borrow of\n // one of its fields, it is useful to be reminded of the significance\n // of the fact that the type implements Drop.\n "}, {"sha": "55803e4034bf4b69d2aefded16cf82ecd4049092", "filename": "src/test/ui/resolve/token-error-correct-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-2.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test that we do some basic error correcton in the tokeniser (and don't ICE).\n+// Test that we do some basic error correction in the tokeniser (and don't ICE).\n \n fn main() {\n     if foo {"}, {"sha": "fd4bbde28660e5823dd1bcca012918a8651c19ab", "filename": "src/test/ui/resolve/token-error-correct-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-cloudabi no std::fs support\n \n-// Test that we do some basic error correcton in the tokeniser (and don't spew\n+// Test that we do some basic error correction in the tokeniser (and don't spew\n // too many bogus errors).\n \n pub mod raw {"}, {"sha": "099ead93beb0679b15b198d77d94d7e748f2fb8f", "filename": "src/test/ui/resolve/token-error-correct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test that we do some basic error correcton in the tokeniser.\n+// Test that we do some basic error correction in the tokeniser.\n \n fn main() {\n     foo(bar(;"}, {"sha": "31a34a9e6fbbb528eb0d7a64138701d30c4236cb", "filename": "src/test/ui/rfc-2497-if-let-chains/syntax-ambiguity-2015.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -19,22 +19,22 @@ fn main() {\n     use std::ops::Range;\n \n     if let Range { start: _, end: _ } = true..true && false { }\n-    //~^ ERROR ambigious use of `&&`\n+    //~^ ERROR ambiguous use of `&&`\n \n     if let Range { start: _, end: _ } = true..true || false { }\n-    //~^ ERROR ambigious use of `||`\n+    //~^ ERROR ambiguous use of `||`\n \n     while let Range { start: _, end: _ } = true..true && false { }\n-    //~^ ERROR ambigious use of `&&`\n+    //~^ ERROR ambiguous use of `&&`\n \n     while let Range { start: _, end: _ } = true..true || false { }\n-    //~^ ERROR ambigious use of `||`\n+    //~^ ERROR ambiguous use of `||`\n \n     if let true = false && false { }\n-    //~^ ERROR ambigious use of `&&`\n+    //~^ ERROR ambiguous use of `&&`\n \n     while let true = (1 == 2) && false { }\n-    //~^ ERROR ambigious use of `&&`\n+    //~^ ERROR ambiguous use of `&&`\n \n     // The following cases are not an error as parenthesis are used to\n     // clarify intent:"}, {"sha": "411cb99fbca19ae57c1f8c4bc635f9651095a684", "filename": "src/test/ui/rfc-2497-if-let-chains/syntax-ambiguity-2015.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.stderr?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -1,4 +1,4 @@\n-error: ambigious use of `&&`\n+error: ambiguous use of `&&`\n   --> $DIR/syntax-ambiguity-2015.rs:21:47\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false { }\n@@ -7,7 +7,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false { }\n    = note: this will be a error until the `let_chains` feature is stabilized\n    = note: see rust-lang/rust#53668 for more information\n \n-error: ambigious use of `||`\n+error: ambiguous use of `||`\n   --> $DIR/syntax-ambiguity-2015.rs:24:47\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false { }\n@@ -16,7 +16,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false { }\n    = note: this will be a error until the `let_chains` feature is stabilized\n    = note: see rust-lang/rust#53668 for more information\n \n-error: ambigious use of `&&`\n+error: ambiguous use of `&&`\n   --> $DIR/syntax-ambiguity-2015.rs:27:50\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false { }\n@@ -25,7 +25,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false { }\n    = note: this will be a error until the `let_chains` feature is stabilized\n    = note: see rust-lang/rust#53668 for more information\n \n-error: ambigious use of `||`\n+error: ambiguous use of `||`\n   --> $DIR/syntax-ambiguity-2015.rs:30:50\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false { }\n@@ -34,7 +34,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false { }\n    = note: this will be a error until the `let_chains` feature is stabilized\n    = note: see rust-lang/rust#53668 for more information\n \n-error: ambigious use of `&&`\n+error: ambiguous use of `&&`\n   --> $DIR/syntax-ambiguity-2015.rs:33:19\n    |\n LL |     if let true = false && false { }\n@@ -43,7 +43,7 @@ LL |     if let true = false && false { }\n    = note: this will be a error until the `let_chains` feature is stabilized\n    = note: see rust-lang/rust#53668 for more information\n \n-error: ambigious use of `&&`\n+error: ambiguous use of `&&`\n   --> $DIR/syntax-ambiguity-2015.rs:36:22\n    |\n LL |     while let true = (1 == 2) && false { }"}, {"sha": "99495717c3a896d7213a03d1164a0d49a11f1392", "filename": "src/test/ui/rfc-2497-if-let-chains/syntax-ambiguity-2018.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -19,22 +19,22 @@ fn main() {\n     use std::ops::Range;\n \n     if let Range { start: _, end: _ } = true..true && false { }\n-    //~^ ERROR ambigious use of `&&`\n+    //~^ ERROR ambiguous use of `&&`\n \n     if let Range { start: _, end: _ } = true..true || false { }\n-    //~^ ERROR ambigious use of `||`\n+    //~^ ERROR ambiguous use of `||`\n \n     while let Range { start: _, end: _ } = true..true && false { }\n-    //~^ ERROR ambigious use of `&&`\n+    //~^ ERROR ambiguous use of `&&`\n \n     while let Range { start: _, end: _ } = true..true || false { }\n-    //~^ ERROR ambigious use of `||`\n+    //~^ ERROR ambiguous use of `||`\n \n     if let true = false && false { }\n-    //~^ ERROR ambigious use of `&&`\n+    //~^ ERROR ambiguous use of `&&`\n \n     while let true = (1 == 2) && false { }\n-    //~^ ERROR ambigious use of `&&`\n+    //~^ ERROR ambiguous use of `&&`\n \n     // The following cases are not an error as parenthesis are used to\n     // clarify intent:"}, {"sha": "bd49abeb7b247c3950bdbbc7a7d0fc3cdbdcc237", "filename": "src/test/ui/rfc-2497-if-let-chains/syntax-ambiguity-2018.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.stderr?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -1,4 +1,4 @@\n-error: ambigious use of `&&`\n+error: ambiguous use of `&&`\n   --> $DIR/syntax-ambiguity-2018.rs:21:47\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false { }\n@@ -7,7 +7,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false { }\n    = note: this will be a error until the `let_chains` feature is stabilized\n    = note: see rust-lang/rust#53668 for more information\n \n-error: ambigious use of `||`\n+error: ambiguous use of `||`\n   --> $DIR/syntax-ambiguity-2018.rs:24:47\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false { }\n@@ -16,7 +16,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false { }\n    = note: this will be a error until the `let_chains` feature is stabilized\n    = note: see rust-lang/rust#53668 for more information\n \n-error: ambigious use of `&&`\n+error: ambiguous use of `&&`\n   --> $DIR/syntax-ambiguity-2018.rs:27:50\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false { }\n@@ -25,7 +25,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false { }\n    = note: this will be a error until the `let_chains` feature is stabilized\n    = note: see rust-lang/rust#53668 for more information\n \n-error: ambigious use of `||`\n+error: ambiguous use of `||`\n   --> $DIR/syntax-ambiguity-2018.rs:30:50\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false { }\n@@ -34,7 +34,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false { }\n    = note: this will be a error until the `let_chains` feature is stabilized\n    = note: see rust-lang/rust#53668 for more information\n \n-error: ambigious use of `&&`\n+error: ambiguous use of `&&`\n   --> $DIR/syntax-ambiguity-2018.rs:33:19\n    |\n LL |     if let true = false && false { }\n@@ -43,7 +43,7 @@ LL |     if let true = false && false { }\n    = note: this will be a error until the `let_chains` feature is stabilized\n    = note: see rust-lang/rust#53668 for more information\n \n-error: ambigious use of `&&`\n+error: ambiguous use of `&&`\n   --> $DIR/syntax-ambiguity-2018.rs:36:22\n    |\n LL |     while let true = (1 == 2) && false { }"}, {"sha": "f13f8ef2bb4cf55edefa5354553ce872704eb4ed", "filename": "src/test/ui/rust-2018/edition-lint-infer-outlives.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.fixed?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -24,7 +24,7 @@ use std::fmt::{Debug, Display};\n // \u2022 one generic parameter (T) bound inline\n // \u2022 one parameter (T) with a where clause\n // \u2022 two parameters (T and U), both bound inline\n-// \u2022 two paramters (T and U), one bound inline, one with a where clause\n+// \u2022 two parameters (T and U), one bound inline, one with a where clause\n // \u2022 two parameters (T and U), both with where clauses\n //\n // \u2014and for every permutation of 0, 1, or 2 lifetimes to outlive and 0 or 1"}, {"sha": "f47b3fcb9be9a3dde601ae5bac30f6d3a7673f7d", "filename": "src/test/ui/rust-2018/edition-lint-infer-outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -24,7 +24,7 @@ use std::fmt::{Debug, Display};\n // \u2022 one generic parameter (T) bound inline\n // \u2022 one parameter (T) with a where clause\n // \u2022 two parameters (T and U), both bound inline\n-// \u2022 two paramters (T and U), one bound inline, one with a where clause\n+// \u2022 two parameters (T and U), one bound inline, one with a where clause\n // \u2022 two parameters (T and U), both with where clauses\n //\n // \u2014and for every permutation of 0, 1, or 2 lifetimes to outlive and 0 or 1"}, {"sha": "00d8d126e0573d6011e6259ebb72198066751952", "filename": "src/test/ui/specialization/issue-52050.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -12,7 +12,7 @@\n \n // Regression test for #52050: when inserting the blanket impl `I`\n // into the tree, we had to replace the child node for `Foo`, which\n-// led to the struture of the tree being messed up.\n+// led to the structure of the tree being messed up.\n \n use std::iter::Iterator;\n "}, {"sha": "3d5e18e37b070c1aeaa93a693639bbf4bce68cf9", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14bfdc73338d9b49eebb3f905bfc3df47d6891/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=4f14bfdc73338d9b49eebb3f905bfc3df47d6891", "patch": "@@ -163,7 +163,7 @@ fn check_cfgs(contents: &mut String, file: &Path,\n \n fn find_test_mod(contents: &str) -> usize {\n     if let Some(mod_tests_idx) = contents.find(\"mod tests\") {\n-        // Also capture a previos line indicating \"mod tests\" in cfg-ed out\n+        // Also capture a previous line indicating \"mod tests\" in cfg-ed out\n         let prev_newline_idx = contents[..mod_tests_idx].rfind('\\n').unwrap_or(mod_tests_idx);\n         let prev_newline_idx = contents[..prev_newline_idx].rfind('\\n');\n         if let Some(nl) = prev_newline_idx {"}]}