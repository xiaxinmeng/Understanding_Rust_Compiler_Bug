{"sha": "7fe83edc11ccc255372be5a7bc0372d6011cc5df", "node_id": "C_kwDOAAsO6NoAKDdmZTgzZWRjMTFjY2MyNTUzNzJiZTVhN2JjMDM3MmQ2MDExY2M1ZGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-02T22:12:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-02T22:12:46Z"}, "message": "Auto merge of #10588 - blyxyas:fix-allow_nonminimal_bool, r=llogiq\n\nFix `nonminimal_bool` `#[allow]` attributes.\n\nCloses #10435\nchangelog: [`nonminimal_bool`]: Fix false-positive where the lint ignore `#[allow]` attributes.\n\nr? `@llogiq`", "tree": {"sha": "abb71448ca79b90a19bbee20c532c228b79bfa9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abb71448ca79b90a19bbee20c532c228b79bfa9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fe83edc11ccc255372be5a7bc0372d6011cc5df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fe83edc11ccc255372be5a7bc0372d6011cc5df", "html_url": "https://github.com/rust-lang/rust/commit/7fe83edc11ccc255372be5a7bc0372d6011cc5df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fe83edc11ccc255372be5a7bc0372d6011cc5df/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341", "html_url": "https://github.com/rust-lang/rust/commit/8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341"}, {"sha": "36047b0216b9fb4741e8927c7e6b644727e02fdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/36047b0216b9fb4741e8927c7e6b644727e02fdf", "html_url": "https://github.com/rust-lang/rust/commit/36047b0216b9fb4741e8927c7e6b644727e02fdf"}], "stats": {"total": 57, "additions": 39, "deletions": 18}, "files": [{"sha": "455f0df7cd0adcc3ab2d8728138e212a34fd9a31", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7fe83edc11ccc255372be5a7bc0372d6011cc5df/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe83edc11ccc255372be5a7bc0372d6011cc5df/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=7fe83edc11ccc255372be5a7bc0372d6011cc5df", "patch": "@@ -7,7 +7,7 @@ use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::{BinOpKind, Body, Expr, ExprKind, FnDecl, UnOp};\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_lint::{LateContext, LateLintPass, Level};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n@@ -430,23 +430,25 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n                 }\n             }\n             let nonminimal_bool_lint = |suggestions: Vec<_>| {\n-                span_lint_hir_and_then(\n-                    self.cx,\n-                    NONMINIMAL_BOOL,\n-                    e.hir_id,\n-                    e.span,\n-                    \"this boolean expression can be simplified\",\n-                    |diag| {\n-                        diag.span_suggestions(\n-                            e.span,\n-                            \"try\",\n-                            suggestions.into_iter(),\n-                            // nonminimal_bool can produce minimal but\n-                            // not human readable expressions (#3141)\n-                            Applicability::Unspecified,\n-                        );\n-                    },\n-                );\n+                if self.cx.tcx.lint_level_at_node(NONMINIMAL_BOOL, e.hir_id).0 != Level::Allow {\n+                    span_lint_hir_and_then(\n+                        self.cx,\n+                        NONMINIMAL_BOOL,\n+                        e.hir_id,\n+                        e.span,\n+                        \"this boolean expression can be simplified\",\n+                        |diag| {\n+                            diag.span_suggestions(\n+                                e.span,\n+                                \"try\",\n+                                suggestions.into_iter(),\n+                                // nonminimal_bool can produce minimal but\n+                                // not human readable expressions (#3141)\n+                                Applicability::Unspecified,\n+                            );\n+                        },\n+                    );\n+                }\n             };\n             if improvements.is_empty() {\n                 let mut visitor = NotSimplificationVisitor { cx: self.cx };\n@@ -498,6 +500,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NotSimplificationVisitor<'a, 'tcx> {\n         if let ExprKind::Unary(UnOp::Not, inner) = &expr.kind &&\n             !inner.span.from_expansion() &&\n             let Some(suggestion) = simplify_not(self.cx, inner)\n+\t\t\t&& self.cx.tcx.lint_level_at_node(NONMINIMAL_BOOL, expr.hir_id).0 != Level::Allow\n         {\n             span_lint_and_sugg(\n                 self.cx,"}, {"sha": "80cc7c60f56e586d67cf8be08aaf4733edbc2a17", "filename": "tests/ui/nonminimal_bool.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7fe83edc11ccc255372be5a7bc0372d6011cc5df/tests%2Fui%2Fnonminimal_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe83edc11ccc255372be5a7bc0372d6011cc5df/tests%2Fui%2Fnonminimal_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnonminimal_bool.rs?ref=7fe83edc11ccc255372be5a7bc0372d6011cc5df", "patch": "@@ -92,3 +92,21 @@ fn issue_10523_2() {\n     }\n     if a!() {}\n }\n+\n+fn issue_10435() {\n+    let x = vec![0];\n+    let y = vec![1];\n+    let z = vec![2];\n+\n+    // vvv Should not lint\n+    #[allow(clippy::nonminimal_bool)]\n+    if !x.is_empty() && !(y.is_empty() || z.is_empty()) {\n+        println!(\"{}\", line!());\n+    }\n+\n+    // vvv Should not lint (#10435 talks about a bug where it lints)\n+    #[allow(clippy::nonminimal_bool)]\n+    if !(x == [0]) {\n+        println!(\"{}\", line!());\n+    }\n+}"}]}