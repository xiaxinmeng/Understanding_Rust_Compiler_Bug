{"sha": "c13bd83528da223fa073e9c7e5fdc435254baab6", "node_id": "C_kwDOAAsO6NoAKGMxM2JkODM1MjhkYTIyM2ZhMDczZTljN2U1ZmRjNDM1MjU0YmFhYjY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-26T21:32:01Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-13T17:40:27Z"}, "message": "squash OpaqueTy and ProjectionTy into AliasTy", "tree": {"sha": "0aead1dc9f39a3a4ba168119964c3a7e3728cc7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0aead1dc9f39a3a4ba168119964c3a7e3728cc7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c13bd83528da223fa073e9c7e5fdc435254baab6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c13bd83528da223fa073e9c7e5fdc435254baab6", "html_url": "https://github.com/rust-lang/rust/commit/c13bd83528da223fa073e9c7e5fdc435254baab6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c13bd83528da223fa073e9c7e5fdc435254baab6/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c6afb850c29f5604f685bf4d4fea85a2deb7197", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c6afb850c29f5604f685bf4d4fea85a2deb7197", "html_url": "https://github.com/rust-lang/rust/commit/5c6afb850c29f5604f685bf4d4fea85a2deb7197"}], "stats": {"total": 379, "additions": 182, "deletions": 197}, "files": [{"sha": "241f47ad14bf5ec9b2e1134147afff62e5fde8e3", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -697,7 +697,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     .map_bound(|p| p.predicates),\n                 None,\n             ),\n-            ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n+            ty::Opaque(ty::AliasTy { def_id, substs }) => {\n                 find_fn_kind_from_did(tcx.bound_explicit_item_bounds(*def_id), Some(*substs))\n             }\n             ty::Closure(_, substs) => match substs.as_closure().kind() {"}, {"sha": "27372b3b8fcde6d53193f590f893cd193e6e51fd", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -504,7 +504,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let ErrorConstraintInfo { outlived_fr, span, .. } = errci;\n \n         let mut output_ty = self.regioncx.universal_regions().unnormalized_output_ty;\n-        if let ty::Opaque(ty::OpaqueTy { def_id, substs: _ }) = *output_ty.kind() {\n+        if let ty::Opaque(ty::AliasTy { def_id, substs: _ }) = *output_ty.kind() {\n             output_ty = self.infcx.tcx.type_of(def_id)\n         };\n "}, {"sha": "a7276bf33b3034709ac1a130ad9fad2ede32dd8f", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -83,7 +83,7 @@ pub(crate) fn eval_nullary_intrinsic<'tcx>(\n                 ConstValue::from_machine_usize(adt.variants().len() as u64, &tcx)\n             }\n             ty::Projection(_)\n-            | ty::Opaque(ty::OpaqueTy { def_id: _, substs: _ })\n+            | ty::Opaque(ty::AliasTy { def_id: _, substs: _ })\n             | ty::Param(_)\n             | ty::Placeholder(_)\n             | ty::Infer(_) => throw_inval!(TooGeneric),"}, {"sha": "0286c8f04f116d75a2650e6fc91a16be915b9552", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -241,7 +241,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                 };\n \n                 let kind = match parent_ty.ty.kind() {\n-                    &ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n+                    &ty::Opaque(ty::AliasTy { def_id, substs }) => {\n                         self.tcx.bound_type_of(def_id).subst(self.tcx, substs).kind()\n                     }\n                     kind => kind,"}, {"sha": "e0569987ee43d2987f197cc7075aaa6ed335b602", "filename": "compiler/rustc_const_eval/src/util/type_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -58,8 +58,8 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n             // Types with identity (print the module path).\n             ty::Adt(ty::AdtDef(Interned(&ty::AdtDefData { did: def_id, .. }, _)), substs)\n             | ty::FnDef(def_id, substs)\n-            | ty::Opaque(ty::OpaqueTy { def_id, substs })\n-            | ty::Projection(ty::ProjectionTy { def_id, substs })\n+            | ty::Opaque(ty::AliasTy { def_id, substs })\n+            | ty::Projection(ty::AliasTy { def_id, substs })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => self.print_def_path(def_id, substs),\n             ty::Foreign(def_id) => self.print_def_path(def_id, &[]),"}, {"sha": "f91c17d5c03cfd73df9af72d76d3ecaf4455e646", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -1146,7 +1146,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n             debug!(?substs_trait_ref_and_assoc_item);\n \n-            ty::ProjectionTy { def_id: assoc_item.def_id, substs: substs_trait_ref_and_assoc_item }\n+            ty::AliasTy { def_id: assoc_item.def_id, substs: substs_trait_ref_and_assoc_item }\n         });\n \n         if !speculative {"}, {"sha": "9b42c16b88273e9e3fe14a7dc2471837f62aeafe", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -1440,7 +1440,7 @@ fn opaque_type_cycle_error(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) -> E\n                 impl<'tcx> ty::visit::TypeVisitor<'tcx> for OpaqueTypeCollector {\n                     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                         match *t.kind() {\n-                            ty::Opaque(ty::OpaqueTy { def_id: def, substs: _ }) => {\n+                            ty::Opaque(ty::AliasTy { def_id: def, substs: _ }) => {\n                                 self.0.push(def);\n                                 ControlFlow::CONTINUE\n                             }"}, {"sha": "d09c17e9f9b8764d84691c74bded55173507fff6", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -1746,7 +1746,7 @@ pub fn check_type_bounds<'tcx>(\n             _ => predicates.push(\n                 ty::Binder::bind_with_vars(\n                     ty::ProjectionPredicate {\n-                        projection_ty: ty::ProjectionTy {\n+                        projection_ty: ty::AliasTy {\n                             def_id: trait_ty.def_id,\n                             substs: rebased_substs,\n                         },"}, {"sha": "2d1b4fc4dc6fcafdded2c1279669ec84991cb95d", "filename": "compiler/rustc_hir_analysis/src/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -253,7 +253,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_invariant_substs(current, data.substs, variance);\n             }\n \n-            ty::Opaque(ty::OpaqueTy { def_id: _, substs }) => {\n+            ty::Opaque(ty::AliasTy { def_id: _, substs }) => {\n                 self.add_constraints_from_invariant_substs(current, substs, variance);\n             }\n "}, {"sha": "3eb33319f7f5d376b1437b04b48125bee4deb44e", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -110,9 +110,9 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n \n         #[instrument(level = \"trace\", skip(self), ret)]\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                // FIXME(alias): merge these\n-                match t.kind() {\n-                ty::Opaque(ty::OpaqueTy { def_id, substs }) => self.visit_opaque(*def_id, substs),\n+            // FIXME(alias): merge these\n+            match t.kind() {\n+                ty::Opaque(ty::AliasTy { def_id, substs }) => self.visit_opaque(*def_id, substs),\n                 ty::Projection(proj)\n                     if self.tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder =>\n                 {\n@@ -168,7 +168,7 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n                 }\n             }\n             ty::PredicateKind::Clause(ty::Clause::Projection(ty::ProjectionPredicate {\n-                projection_ty: ty::ProjectionTy { substs, def_id: _ },\n+                projection_ty: ty::AliasTy { substs, def_id: _ },\n                 term,\n             })) => {\n                 for subst in &substs[1..] {"}, {"sha": "32635f5a12b978a35601c2b100f15ce48f1a9785", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -518,7 +518,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 let substs = sig.output().walk().find_map(|arg| {\n                     if let ty::GenericArgKind::Type(ty) = arg.unpack()\n-                        && let ty::Opaque(ty::OpaqueTy { def_id, substs }) = *ty.kind()\n+                        && let ty::Opaque(ty::AliasTy { def_id, substs }) = *ty.kind()\n                         && def_id == rpit_def_id\n                     {\n                         Some(substs)"}, {"sha": "171086cf7244fc381abb30a42b2729a10a74991f", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -76,7 +76,7 @@ enum PointerKind<'tcx> {\n     /// Slice\n     Length,\n     /// The unsize info of this projection\n-    OfProjection(ty::ProjectionTy<'tcx>),\n+    OfProjection(ty::AliasTy<'tcx>),\n     /// The unsize info of this opaque ty\n     OfOpaque(DefId, SubstsRef<'tcx>),\n     /// The unsize info of this parameter\n@@ -119,7 +119,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::Foreign(..) => Some(PointerKind::Thin),\n             // We should really try to normalize here.\n             ty::Projection(pi) => Some(PointerKind::OfProjection(pi)),\n-            ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n+            ty::Opaque(ty::AliasTy { def_id, substs }) => {\n                 Some(PointerKind::OfOpaque(def_id, substs))\n             }\n             ty::Param(p) => Some(PointerKind::OfParam(p)),"}, {"sha": "dd87a7f32d2766fc4cb1b827ea286208f3c39ba5", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -167,7 +167,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected_ty: Ty<'tcx>,\n     ) -> (Option<ExpectedSig<'tcx>>, Option<ty::ClosureKind>) {\n         match *expected_ty.kind() {\n-            ty::Opaque(ty::OpaqueTy { def_id, substs }) => self.deduce_signature_from_predicates(\n+            ty::Opaque(ty::AliasTy { def_id, substs }) => self.deduce_signature_from_predicates(\n                 self.tcx.bound_explicit_item_bounds(def_id).subst_iter_copied(self.tcx, substs),\n             ),\n             ty::Dynamic(ref object_type, ..) => {\n@@ -677,7 +677,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     get_future_output(obligation.predicate, obligation.cause.span)\n                 })?\n             }\n-            ty::Opaque(ty::OpaqueTy { def_id, substs }) => self\n+            ty::Opaque(ty::AliasTy { def_id, substs }) => self\n                 .tcx\n                 .bound_explicit_item_bounds(def_id)\n                 .subst_iter_copied(self.tcx, substs)"}, {"sha": "a7593ecc572131c21410952a46b1cc6bd0a8794b", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -1805,7 +1805,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         {\n             let ty = <dyn AstConv<'_>>::ast_ty_to_ty(fcx, ty);\n             // Get the `impl Trait`'s `DefId`.\n-            if let ty::Opaque(ty::OpaqueTy { def_id, substs: _ }) = ty.kind()\n+            if let ty::Opaque(ty::AliasTy { def_id, substs: _ }) = ty.kind()\n                 // Get the `impl Trait`'s `Item` so that we can get its trait bounds and\n                 // get the `Trait`'s `DefId`.\n                 && let hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds, .. }) ="}, {"sha": "25a043fd40a527bb7b67c8f9ba9a0a0d37a202fc", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -2391,7 +2391,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::Param(param_ty) => {\n                 self.point_at_param_definition(&mut err, param_ty);\n             }\n-            ty::Opaque(ty::OpaqueTy { def_id: _, substs: _ }) => {\n+            ty::Opaque(ty::AliasTy { def_id: _, substs: _ }) => {\n                 self.suggest_await_on_field_access(&mut err, ident, base, base_ty.peel_refs());\n             }\n             _ => {}"}, {"sha": "482fa046b4d3158c1119ec857ac5de0a412ab85b", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -716,7 +716,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if formal_ret.has_infer_types() {\n             for ty in ret_ty.walk() {\n                 if let ty::subst::GenericArgKind::Type(ty) = ty.unpack()\n-                    && let ty::Opaque(ty::OpaqueTy { def_id, substs: _ }) = *ty.kind()\n+                    && let ty::Opaque(ty::AliasTy { def_id, substs: _ }) = *ty.kind()\n                     && let Some(def_id) = def_id.as_local()\n                     && self.opaque_type_origin(def_id, DUMMY_SP).is_some() {\n                     return None;"}, {"sha": "6e26c413b1ccf42de5206056a95470bd76ed3fa7", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -2124,7 +2124,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     }\n                 }\n-                ty::Opaque(ty::OpaqueTy { def_id: new_def_id, substs: _ })\n+                ty::Opaque(ty::AliasTy { def_id: new_def_id, substs: _ })\n                 | ty::Closure(new_def_id, _)\n                 | ty::FnDef(new_def_id, _) => {\n                     def_id = new_def_id;"}, {"sha": "21990775ad9059403ba039967dcfdafa8f40976a", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -174,7 +174,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let fn_sig = substs.as_closure().sig();\n                     Some((DefIdOrName::DefId(def_id), fn_sig.output(), fn_sig.inputs().map_bound(|inputs| &inputs[1..])))\n                 }\n-                ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n+                ty::Opaque(ty::AliasTy { def_id, substs }) => {\n                     self.tcx.bound_item_bounds(def_id).subst(self.tcx, substs).iter().find_map(|pred| {\n                         if let ty::PredicateKind::Clause(ty::Clause::Projection(proj)) = pred.kind().skip_binder()\n                         && Some(proj.projection_ty.def_id) == self.tcx.lang_items().fn_once_output()"}, {"sha": "3280f502cc74a66fc50f1c0c7ff9b18cad51ff16", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -563,7 +563,7 @@ fn check_must_not_suspend_ty<'tcx>(\n         }\n         ty::Adt(def, _) => check_must_not_suspend_def(fcx.tcx, def.did(), hir_id, data),\n         // FIXME: support adding the attribute to TAITs\n-        ty::Opaque(ty::OpaqueTy { def_id: def, substs: _ }) => {\n+        ty::Opaque(ty::AliasTy { def_id: def, substs: _ }) => {\n             let mut has_emitted = false;\n             for &(predicate, _) in fcx.tcx.explicit_item_bounds(def) {\n                 // We only look at the `DefId`, so it is safe to skip the binder here."}, {"sha": "f27a19b2da1f978ecc2e0e7bc5c2911b2198f879", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -557,7 +557,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                         .chain(projection_ty.substs.iter().skip(1)),\n                                 );\n \n-                                let quiet_projection_ty = ty::ProjectionTy {\n+                                let quiet_projection_ty = ty::AliasTy {\n                                     substs: substs_with_infer_self,\n                                     def_id: projection_ty.def_id,\n                                 };"}, {"sha": "e62332b38e7165ae225ad618df6592c9fb93d76c", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -546,7 +546,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             impl<'tcx> ty::TypeVisitor<'tcx> for RecursionChecker {\n                 type BreakTy = ();\n                 fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                    if let ty::Opaque(ty::OpaqueTy { def_id, substs: _ }) = *t.kind() {\n+                    if let ty::Opaque(ty::AliasTy { def_id, substs: _ }) = *t.kind() {\n                         if def_id == self.def_id.to_def_id() {\n                             return ControlFlow::Break(());\n                         }"}, {"sha": "e9186540a7b7c53869366303bba18d2791432f5f", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -411,7 +411,7 @@ impl<'tcx> ToTrace<'tcx> for ty::PolyTraitRef<'tcx> {\n     }\n }\n \n-impl<'tcx> ToTrace<'tcx> for ty::ProjectionTy<'tcx> {\n+impl<'tcx> ToTrace<'tcx> for ty::AliasTy<'tcx> {\n     fn to_trace(\n         tcx: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,"}, {"sha": "dbf21a4e3fcfac6a9106ffe24951260112f9b4ed", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -675,7 +675,7 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                 // relatable.\n                 Ok(t)\n             }\n-            ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n+            ty::Opaque(ty::AliasTy { def_id, substs }) => {\n                 let s = self.relate(substs, substs)?;\n                 Ok(if s == substs { t } else { self.infcx.tcx.mk_opaque(def_id, s) })\n             }"}, {"sha": "f3d2d4f154778cb88c5bd9456c4efcb4148758d7", "filename": "compiler/rustc_infer/src/infer/equate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -101,13 +101,13 @@ impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {\n             }\n \n             (\n-                &ty::Opaque(ty::OpaqueTy { def_id: a_def_id, substs: _ }),\n-                &ty::Opaque(ty::OpaqueTy { def_id: b_def_id, substs: _ }),\n+                &ty::Opaque(ty::AliasTy { def_id: a_def_id, substs: _ }),\n+                &ty::Opaque(ty::AliasTy { def_id: b_def_id, substs: _ }),\n             ) if a_def_id == b_def_id => {\n                 self.fields.infcx.super_combine_tys(self, a, b)?;\n             }\n-            (&ty::Opaque(ty::OpaqueTy { def_id, substs: _ }), _)\n-            | (_, &ty::Opaque(ty::OpaqueTy { def_id, substs: _ }))\n+            (&ty::Opaque(ty::AliasTy { def_id, substs: _ }), _)\n+            | (_, &ty::Opaque(ty::AliasTy { def_id, substs: _ }))\n                 if self.fields.define_opaque_types && def_id.is_local() =>\n             {\n                 self.fields.obligations.extend("}, {"sha": "5b9f4d077736d01649ae1465415be295068c0904", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -340,7 +340,7 @@ impl<'tcx> InferCtxt<'tcx> {\n     pub fn get_impl_future_output_ty(&self, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n         // FIXME(alias): Merge these\n         let (def_id, substs) = match *ty.kind() {\n-            ty::Opaque(ty::OpaqueTy { def_id, substs }) => (def_id, substs),\n+            ty::Opaque(ty::AliasTy { def_id, substs }) => (def_id, substs),\n             ty::Projection(data)\n                 if self.tcx.def_kind(data.def_id) == DefKind::ImplTraitPlaceholder =>\n             {\n@@ -1732,7 +1732,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     let sort_string = |ty: Ty<'tcx>, path: Option<PathBuf>| {\n                         // FIXME(alias): Merge these\n                         let mut s = match (extra, ty.kind()) {\n-                            (true, ty::Opaque(ty::OpaqueTy { def_id, .. })) => {\n+                            (true, ty::Opaque(ty::AliasTy { def_id, .. })) => {\n                                 let sm = self.tcx.sess.source_map();\n                                 let pos = sm.lookup_char_pos(self.tcx.def_span(*def_id).lo());\n                                 format!(\n@@ -2386,7 +2386,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                         // suggest:\n                         // fn get_later<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n                         ty::Closure(_, _substs)\n-                        | ty::Opaque(ty::OpaqueTy { def_id: _, substs: _substs })\n+                        | ty::Opaque(ty::AliasTy { def_id: _, substs: _substs })\n                             if return_impl_trait =>\n                         {\n                             new_binding_suggestion(&mut err, type_param_span);\n@@ -2770,7 +2770,7 @@ impl TyCategory {\n     pub fn from_ty(tcx: TyCtxt<'_>, ty: Ty<'_>) -> Option<(Self, DefId)> {\n         match *ty.kind() {\n             ty::Closure(def_id, _) => Some((Self::Closure, def_id)),\n-            ty::Opaque(ty::OpaqueTy { def_id, substs: _ }) => Some((Self::Opaque, def_id)),\n+            ty::Opaque(ty::AliasTy { def_id, substs: _ }) => Some((Self::Opaque, def_id)),\n             ty::Generator(def_id, ..) => {\n                 Some((Self::Generator(tcx.generator_kind(def_id).unwrap()), def_id))\n             }"}, {"sha": "e32f0edf3443e5b8b03ba45c6061b641dd111401", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -487,12 +487,12 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 StatementAsExpression::CorrectType\n             }\n             (\n-                ty::Opaque(ty::OpaqueTy { def_id: last_def_id, substs: _ }),\n-                ty::Opaque(ty::OpaqueTy { def_id: exp_def_id, substs: _ }),\n+                ty::Opaque(ty::AliasTy { def_id: last_def_id, substs: _ }),\n+                ty::Opaque(ty::AliasTy { def_id: exp_def_id, substs: _ }),\n             ) if last_def_id == exp_def_id => StatementAsExpression::CorrectType,\n             (\n-                ty::Opaque(ty::OpaqueTy { def_id: last_def_id, substs: last_bounds }),\n-                ty::Opaque(ty::OpaqueTy { def_id: exp_def_id, substs: exp_bounds }),\n+                ty::Opaque(ty::AliasTy { def_id: last_def_id, substs: last_bounds }),\n+                ty::Opaque(ty::AliasTy { def_id: exp_def_id, substs: exp_bounds }),\n             ) => {\n                 debug!(\n                     \"both opaque, likely future {:?} {:?} {:?} {:?}\","}, {"sha": "2202adede13c13c14dc0b50f9f7627cf500abaee", "filename": "compiler/rustc_infer/src/infer/lattice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flattice.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -106,11 +106,11 @@ where\n         }\n \n         (\n-            &ty::Opaque(ty::OpaqueTy { def_id: a_def_id, substs: _ }),\n-            &ty::Opaque(ty::OpaqueTy { def_id: b_def_id, substs: _ }),\n+            &ty::Opaque(ty::AliasTy { def_id: a_def_id, substs: _ }),\n+            &ty::Opaque(ty::AliasTy { def_id: b_def_id, substs: _ }),\n         ) if a_def_id == b_def_id => infcx.super_combine_tys(this, a, b),\n-        (&ty::Opaque(ty::OpaqueTy { def_id, substs: _ }), _)\n-        | (_, &ty::Opaque(ty::OpaqueTy { def_id, substs: _ }))\n+        (&ty::Opaque(ty::AliasTy { def_id, substs: _ }), _)\n+        | (_, &ty::Opaque(ty::AliasTy { def_id, substs: _ }))\n             if this.define_opaque_types() && def_id.is_local() =>\n         {\n             this.add_obligations("}, {"sha": "f6c2dd8a99b8f278e3f5de324583caf3f67b978a", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -275,7 +275,7 @@ where\n     ///   `ProjectionEq(projection = ?U)`, `ProjectionEq(other_projection = ?U)`.\n     fn relate_projection_ty(\n         &mut self,\n-        projection_ty: ty::ProjectionTy<'tcx>,\n+        projection_ty: ty::AliasTy<'tcx>,\n         value_ty: Ty<'tcx>,\n     ) -> Ty<'tcx> {\n         use rustc_span::DUMMY_SP;\n@@ -609,17 +609,17 @@ where\n             (&ty::Infer(ty::TyVar(vid)), _) => self.relate_ty_var((vid, b)),\n \n             (\n-                &ty::Opaque(ty::OpaqueTy { def_id: a_def_id, substs: _ }),\n-                &ty::Opaque(ty::OpaqueTy { def_id: b_def_id, substs: _ }),\n+                &ty::Opaque(ty::AliasTy { def_id: a_def_id, substs: _ }),\n+                &ty::Opaque(ty::AliasTy { def_id: b_def_id, substs: _ }),\n             ) if a_def_id == b_def_id => infcx.super_combine_tys(self, a, b).or_else(|err| {\n                 self.tcx().sess.delay_span_bug(\n                     self.delegate.span(),\n                     \"failure to relate an opaque to itself should result in an error later on\",\n                 );\n                 if a_def_id.is_local() { self.relate_opaques(a, b) } else { Err(err) }\n             }),\n-            (&ty::Opaque(ty::OpaqueTy { def_id, substs: _ }), _)\n-            | (_, &ty::Opaque(ty::OpaqueTy { def_id, substs: _ }))\n+            (&ty::Opaque(ty::AliasTy { def_id, substs: _ }), _)\n+            | (_, &ty::Opaque(ty::AliasTy { def_id, substs: _ }))\n                 if def_id.is_local() =>\n             {\n                 self.relate_opaques(a, b)"}, {"sha": "065a7987a0df6c1f6ee3dcef97cea1e822f8e80b", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -66,7 +66,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             lt_op: |lt| lt,\n             ct_op: |ct| ct,\n             ty_op: |ty| match *ty.kind() {\n-                ty::Opaque(ty::OpaqueTy { def_id, substs: _substs })\n+                ty::Opaque(ty::AliasTy { def_id, substs: _substs })\n                     if replace_opaque_type(def_id) =>\n                 {\n                     let def_span = self.tcx.def_span(def_id);\n@@ -106,7 +106,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         }\n         let (a, b) = if a_is_expected { (a, b) } else { (b, a) };\n         let process = |a: Ty<'tcx>, b: Ty<'tcx>, a_is_expected| match *a.kind() {\n-            ty::Opaque(ty::OpaqueTy { def_id, substs }) if def_id.is_local() => {\n+            ty::Opaque(ty::AliasTy { def_id, substs }) if def_id.is_local() => {\n                 let def_id = def_id.expect_local();\n                 let origin = match self.defining_use_anchor {\n                     DefiningAnchor::Bind(_) => {\n@@ -149,7 +149,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                     DefiningAnchor::Bubble => self.opaque_ty_origin_unchecked(def_id, cause.span),\n                     DefiningAnchor::Error => return None,\n                 };\n-                if let ty::Opaque(ty::OpaqueTy { def_id: b_def_id, substs: _ }) = *b.kind() {\n+                if let ty::Opaque(ty::AliasTy { def_id: b_def_id, substs: _ }) = *b.kind() {\n                     // We could accept this, but there are various ways to handle this situation, and we don't\n                     // want to make a decision on it right now. Likely this case is so super rare anyway, that\n                     // no one encounters it in practice.\n@@ -478,7 +478,7 @@ where\n                 substs.as_generator().resume_ty().visit_with(self);\n             }\n \n-            ty::Opaque(ty::OpaqueTy { def_id, ref substs }) => {\n+            ty::Opaque(ty::AliasTy { def_id, ref substs }) => {\n                 // Skip lifetime paramters that are not captures.\n                 let variances = self.tcx.variances_of(*def_id);\n \n@@ -581,7 +581,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                     }\n                     // Replace all other mentions of the same opaque type with the hidden type,\n                     // as the bounds must hold on the hidden type after all.\n-                    ty::Opaque(ty::OpaqueTy { def_id: def_id2, substs: substs2 })\n+                    ty::Opaque(ty::AliasTy { def_id: def_id2, substs: substs2 })\n                         if def_id.to_def_id() == def_id2 && substs == substs2 =>\n                     {\n                         hidden_ty"}, {"sha": "75d70abb56fb039486266e6b82410cb9c793daa1", "filename": "compiler/rustc_infer/src/infer/outlives/components.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -23,7 +23,7 @@ pub enum Component<'tcx> {\n     // is not in a position to judge which is the best technique, so\n     // we just product the projection as a component and leave it to\n     // the consumer to decide (but see `EscapingProjection` below).\n-    Projection(ty::ProjectionTy<'tcx>),\n+    Projection(ty::AliasTy<'tcx>),\n \n     // In the case where a projection has escaping regions -- meaning\n     // regions bound within the type itself -- we always use\n@@ -130,7 +130,7 @@ fn compute_components<'tcx>(\n             // outlives any other lifetime, which is unsound.\n             // See https://github.com/rust-lang/rust/issues/84305 for\n             // more details.\n-            ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n+            ty::Opaque(ty::AliasTy { def_id, substs }) => {\n                 out.push(Component::Opaque(def_id, substs));\n             },\n "}, {"sha": "bf583547491e10b7a4fe44b315bc9a7de3962f10", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -338,7 +338,7 @@ where\n             substs,\n             true,\n             |ty| match *ty.kind() {\n-                ty::Opaque(ty::OpaqueTy { def_id, substs }) => (def_id, substs),\n+                ty::Opaque(ty::AliasTy { def_id, substs }) => (def_id, substs),\n                 _ => bug!(\"expected only projection types from env, not {:?}\", ty),\n             },\n         );\n@@ -349,7 +349,7 @@ where\n         &mut self,\n         origin: infer::SubregionOrigin<'tcx>,\n         region: ty::Region<'tcx>,\n-        projection_ty: ty::ProjectionTy<'tcx>,\n+        projection_ty: ty::AliasTy<'tcx>,\n     ) {\n         self.generic_must_outlive(\n             origin,"}, {"sha": "4667d99ff00080daacd1ad224218c596b48fb987", "filename": "compiler/rustc_infer/src/infer/projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -16,7 +16,7 @@ impl<'tcx> InferCtxt<'tcx> {\n     pub fn infer_projection(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n-        projection_ty: ty::ProjectionTy<'tcx>,\n+        projection_ty: ty::AliasTy<'tcx>,\n         cause: ObligationCause<'tcx>,\n         recursion_depth: usize,\n         obligations: &mut Vec<PredicateObligation<'tcx>>,"}, {"sha": "9a427ceacd0a7c63737805a2cb370adfa6788d7c", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -169,7 +169,7 @@ pub struct Verify<'tcx> {\n #[derive(Copy, Clone, PartialEq, Eq, Hash, TypeFoldable, TypeVisitable)]\n pub enum GenericKind<'tcx> {\n     Param(ty::ParamTy),\n-    Projection(ty::ProjectionTy<'tcx>),\n+    Projection(ty::AliasTy<'tcx>),\n     Opaque(DefId, SubstsRef<'tcx>),\n }\n "}, {"sha": "6b5000c37c56c6e8d674644c7022be58315e14d1", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -131,14 +131,14 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n             }\n \n             (\n-                &ty::Opaque(ty::OpaqueTy { def_id: a_def_id, substs: _ }),\n-                &ty::Opaque(ty::OpaqueTy { def_id: b_def_id, substs: _ }),\n+                &ty::Opaque(ty::AliasTy { def_id: a_def_id, substs: _ }),\n+                &ty::Opaque(ty::AliasTy { def_id: b_def_id, substs: _ }),\n             ) if a_def_id == b_def_id => {\n                 self.fields.infcx.super_combine_tys(self, a, b)?;\n                 Ok(a)\n             }\n-            (&ty::Opaque(ty::OpaqueTy { def_id, substs: _ }), _)\n-            | (_, &ty::Opaque(ty::OpaqueTy { def_id, substs: _ }))\n+            (&ty::Opaque(ty::AliasTy { def_id, substs: _ }), _)\n+            | (_, &ty::Opaque(ty::AliasTy { def_id, substs: _ }))\n                 if self.fields.define_opaque_types && def_id.is_local() =>\n             {\n                 self.fields.obligations.extend("}, {"sha": "aade57be9fe6ef1f17389df22b23518193a1a243", "filename": "compiler/rustc_infer/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -77,11 +77,11 @@ pub struct ProjectionCacheStorage<'tcx> {\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct ProjectionCacheKey<'tcx> {\n-    ty: ty::ProjectionTy<'tcx>,\n+    ty: ty::AliasTy<'tcx>,\n }\n \n impl<'tcx> ProjectionCacheKey<'tcx> {\n-    pub fn new(ty: ty::ProjectionTy<'tcx>) -> Self {\n+    pub fn new(ty: ty::AliasTy<'tcx>) -> Self {\n         Self { ty }\n     }\n }"}, {"sha": "6cd806354bbdbd321fd0089e888a58fd56ef3e8c", "filename": "compiler/rustc_lint/src/opaque_hidden_inferred_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -117,7 +117,7 @@ impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n                     // then we can emit a suggestion to add the bound.\n                     let add_bound = match (proj_term.kind(), assoc_pred.kind().skip_binder()) {\n                         (\n-                            ty::Opaque(ty::OpaqueTy { def_id, substs: _ }),\n+                            ty::Opaque(ty::AliasTy { def_id, substs: _ }),\n                             ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred)),\n                         ) => Some(AddBound {\n                             suggest_span: cx.tcx.def_span(*def_id).shrink_to_hi(),"}, {"sha": "6851f6f9d6b0d89e3d99c9e277ff1bf7aaf50148", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -96,7 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n \n         if let hir::ExprKind::Match(await_expr, _arms, hir::MatchSource::AwaitDesugar) = expr.kind\n             && let ty = cx.typeck_results().expr_ty(&await_expr)\n-            && let ty::Opaque(ty::OpaqueTy { def_id: future_def_id, substs: _ }) = ty.kind()\n+            && let ty::Opaque(ty::AliasTy { def_id: future_def_id, substs: _ }) = ty.kind()\n             && cx.tcx.ty_is_opaque_future(ty)\n             // FIXME: This also includes non-async fns that return `impl Future`.\n             && let async_fn_def_id = cx.tcx.parent(*future_def_id)\n@@ -251,7 +251,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                         .map(|inner| MustUsePath::Boxed(Box::new(inner)))\n                 }\n                 ty::Adt(def, _) => is_def_must_use(cx, def.did(), span),\n-                ty::Opaque(ty::OpaqueTy { def_id: def, substs: _ }) => {\n+                ty::Opaque(ty::AliasTy { def_id: def, substs: _ }) => {\n                     elaborate_predicates_with_span(\n                         cx.tcx,\n                         cx.tcx.explicit_item_bounds(def).iter().cloned(),"}, {"sha": "d00b26a5a3d0b42baafca1d795332bbfc0ddbdcc", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -250,7 +250,7 @@ pub enum ObligationCauseCode<'tcx> {\n     TupleElem,\n \n     /// This is the trait reference from the given projection.\n-    ProjectionWf(ty::ProjectionTy<'tcx>),\n+    ProjectionWf(ty::AliasTy<'tcx>),\n \n     /// Must satisfy all of the where-clause predicates of the\n     /// given item."}, {"sha": "7380c62a6693a85166a3ed26ef4184b572c6ac39", "filename": "compiler/rustc_middle/src/traits/query.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -76,8 +76,7 @@ pub mod type_op {\n     }\n }\n \n-pub type CanonicalProjectionGoal<'tcx> =\n-    Canonical<'tcx, ty::ParamEnvAnd<'tcx, ty::ProjectionTy<'tcx>>>;\n+pub type CanonicalProjectionGoal<'tcx> = Canonical<'tcx, ty::ParamEnvAnd<'tcx, ty::AliasTy<'tcx>>>;\n \n pub type CanonicalTyGoal<'tcx> = Canonical<'tcx, ty::ParamEnvAnd<'tcx, Ty<'tcx>>>;\n \n@@ -218,6 +217,6 @@ pub struct NormalizationResult<'tcx> {\n pub enum OutlivesBound<'tcx> {\n     RegionSubRegion(ty::Region<'tcx>, ty::Region<'tcx>),\n     RegionSubParam(ty::Region<'tcx>, ty::ParamTy),\n-    RegionSubProjection(ty::Region<'tcx>, ty::ProjectionTy<'tcx>),\n+    RegionSubProjection(ty::Region<'tcx>, ty::AliasTy<'tcx>),\n     RegionSubOpaque(ty::Region<'tcx>, DefId, SubstsRef<'tcx>),\n }"}, {"sha": "fe65f6b2ae5ec8675cf01d4644a8b851526f0d40", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -18,12 +18,11 @@ use crate::thir::Thir;\n use crate::traits;\n use crate::ty::query::{self, TyCtxtAt};\n use crate::ty::{\n-    self, AdtDef, AdtDefData, AdtKind, Binder, BindingMode, BoundVar, CanonicalPolyFnSig,\n+    self, AdtDef, AdtDefData, AdtKind, AliasTy, Binder, BindingMode, BoundVar, CanonicalPolyFnSig,\n     ClosureSizeProfileData, Const, ConstS, DefIdTree, FloatTy, FloatVar, FloatVid,\n     GenericParamDefKind, InferTy, IntTy, IntVar, IntVid, List, ParamConst, ParamTy,\n-    PolyExistentialPredicate, PolyFnSig, Predicate, PredicateKind, ProjectionTy, Region,\n-    RegionKind, ReprOptions, TraitObjectVisitor, Ty, TyKind, TyVar, TyVid, TypeAndMut, UintTy,\n-    Visibility,\n+    PolyExistentialPredicate, PolyFnSig, Predicate, PredicateKind, Region, RegionKind, ReprOptions,\n+    TraitObjectVisitor, Ty, TyKind, TyVar, TyVid, TypeAndMut, UintTy, Visibility,\n };\n use crate::ty::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef, UserSubsts};\n use rustc_ast as ast;\n@@ -116,8 +115,8 @@ impl<'tcx> Interner for TyCtxt<'tcx> {\n     type ListBinderExistentialPredicate = &'tcx List<PolyExistentialPredicate<'tcx>>;\n     type BinderListTy = Binder<'tcx, &'tcx List<Ty<'tcx>>>;\n     type ListTy = &'tcx List<Ty<'tcx>>;\n-    type ProjectionTy = ty::ProjectionTy<'tcx>;\n-    type OpaqueTy = ty::OpaqueTy<'tcx>;\n+    type ProjectionTy = ty::AliasTy<'tcx>;\n+    type OpaqueTy = ty::AliasTy<'tcx>;\n     type ParamTy = ParamTy;\n     type BoundTy = ty::BoundTy;\n     type PlaceholderType = ty::PlaceholderType;\n@@ -2324,7 +2323,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Given a `ty`, return whether it's an `impl Future<...>`.\n     pub fn ty_is_opaque_future(self, ty: Ty<'_>) -> bool {\n-        let ty::Opaque(ty::OpaqueTy { def_id, substs: _ }) = ty.kind() else { return false };\n+        let ty::Opaque(ty::AliasTy { def_id, substs: _ }) = ty.kind() else { return false };\n         let future_trait = self.require_lang_item(LangItem::Future, None);\n \n         self.explicit_item_bounds(def_id).iter().any(|(predicate, _)| {\n@@ -2599,7 +2598,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             substs.len(),\n             \"wrong number of generic parameters for {item_def_id:?}: {substs:?}\",\n         );\n-        self.mk_ty(Projection(ProjectionTy { def_id: item_def_id, substs }))\n+        self.mk_ty(Projection(AliasTy { def_id: item_def_id, substs }))\n     }\n \n     #[inline]\n@@ -2669,7 +2668,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {\n-        self.mk_ty(Opaque(ty::OpaqueTy { def_id, substs }))\n+        self.mk_ty(Opaque(ty::AliasTy { def_id, substs }))\n     }\n \n     pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {"}, {"sha": "cdde8d380e41fc42f9536548f4a0ae599c86d604", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -3,8 +3,8 @@\n use std::ops::ControlFlow;\n \n use crate::ty::{\n-    visit::TypeVisitable, Const, ConstKind, DefIdTree, ExistentialPredicate, InferConst, InferTy,\n-    OpaqueTy, PolyTraitPredicate, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor,\n+    visit::TypeVisitable, AliasTy, Const, ConstKind, DefIdTree, ExistentialPredicate, InferConst,\n+    InferTy, PolyTraitPredicate, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor,\n };\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -457,10 +457,10 @@ impl<'tcx> TypeVisitor<'tcx> for IsSuggestableVisitor<'tcx> {\n                 return ControlFlow::Break(());\n             }\n \n-            Opaque(OpaqueTy { def_id, substs: _ }) => {\n+            Opaque(AliasTy { def_id, substs: _ }) => {\n                 let parent = self.tcx.parent(*def_id);\n                 if let hir::def::DefKind::TyAlias | hir::def::DefKind::AssocTy = self.tcx.def_kind(parent)\n-                    && let Opaque(OpaqueTy { def_id: parent_opaque_def_id, substs: _ }) = self.tcx.type_of(parent).kind()\n+                    && let Opaque(AliasTy { def_id: parent_opaque_def_id, substs: _ }) = self.tcx.type_of(parent).kind()\n                     && parent_opaque_def_id == def_id\n                 {\n                     // Okay"}, {"sha": "15eae4b0aed2995a7d69a14551e324d3988652da", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -624,7 +624,7 @@ impl<T> Trait<T> for X {\n         diag: &mut Diagnostic,\n         msg: &str,\n         body_owner_def_id: DefId,\n-        proj_ty: &ty::ProjectionTy<'tcx>,\n+        proj_ty: &ty::AliasTy<'tcx>,\n         ty: Ty<'tcx>,\n     ) -> bool {\n         let assoc = self.associated_item(proj_ty.def_id);\n@@ -680,7 +680,7 @@ impl<T> Trait<T> for X {\n     fn expected_projection(\n         self,\n         diag: &mut Diagnostic,\n-        proj_ty: &ty::ProjectionTy<'tcx>,\n+        proj_ty: &ty::AliasTy<'tcx>,\n         values: ExpectedFound<Ty<'tcx>>,\n         body_owner_def_id: DefId,\n         cause_code: &ObligationCauseCode<'_>,\n@@ -775,11 +775,11 @@ fn foo(&self) -> Self::T { String::new() }\n         self,\n         diag: &mut Diagnostic,\n         msg: &str,\n-        proj_ty: &ty::ProjectionTy<'tcx>,\n+        proj_ty: &ty::AliasTy<'tcx>,\n         ty: Ty<'tcx>,\n     ) -> bool {\n         let assoc = self.associated_item(proj_ty.def_id);\n-        if let ty::Opaque(ty::OpaqueTy { def_id, substs: _ }) = *proj_ty.self_ty().kind() {\n+        if let ty::Opaque(ty::AliasTy { def_id, substs: _ }) = *proj_ty.self_ty().kind() {\n             let opaque_local_def_id = def_id.as_local();\n             let opaque_hir_ty = if let Some(opaque_local_def_id) = opaque_local_def_id {\n                 match &self.hir().expect_item(opaque_local_def_id).kind {\n@@ -828,7 +828,7 @@ fn foo(&self) -> Self::T { String::new() }\n             .filter_map(|(_, item)| {\n                 let method = self.fn_sig(item.def_id);\n                 match *method.output().skip_binder().kind() {\n-                    ty::Projection(ty::ProjectionTy { def_id: item_def_id, .. })\n+                    ty::Projection(ty::AliasTy { def_id: item_def_id, .. })\n                         if item_def_id == proj_ty_item_def_id =>\n                     {\n                         Some(("}, {"sha": "d30882c6a81d901ab825bed122c72868519b1c80", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -160,7 +160,7 @@ impl FlagComputation {\n                 self.add_projection_ty(data);\n             }\n \n-            &ty::Opaque(ty::OpaqueTy { def_id: _, substs }) => {\n+            &ty::Opaque(ty::AliasTy { def_id: _, substs }) => {\n                 self.add_flags(TypeFlags::HAS_TY_OPAQUE);\n                 self.add_substs(substs);\n             }\n@@ -345,7 +345,7 @@ impl FlagComputation {\n         }\n     }\n \n-    fn add_projection_ty(&mut self, projection_ty: ty::ProjectionTy<'_>) {\n+    fn add_projection_ty(&mut self, projection_ty: ty::AliasTy<'_>) {\n         self.add_substs(projection_ty.substs);\n     }\n "}, {"sha": "ea508a0b9720043716c612668df5a65b0397809f", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -93,14 +93,13 @@ pub use self::parameterized::ParameterizedOverTcx;\n pub use self::rvalue_scopes::RvalueScopes;\n pub use self::sty::BoundRegionKind::*;\n pub use self::sty::{\n-    Article, Binder, BoundRegion, BoundRegionKind, BoundTy, BoundTyKind, BoundVar,\n+    AliasTy, Article, Binder, BoundRegion, BoundRegionKind, BoundTy, BoundTyKind, BoundVar,\n     BoundVariableKind, CanonicalPolyFnSig, ClosureSubsts, ClosureSubstsParts, ConstVid,\n     EarlyBoundRegion, ExistentialPredicate, ExistentialProjection, ExistentialTraitRef, FnSig,\n     FreeRegion, GenSig, GeneratorSubsts, GeneratorSubstsParts, InlineConstSubsts,\n-    InlineConstSubstsParts, OpaqueTy, ParamConst, ParamTy, PolyExistentialPredicate,\n+    InlineConstSubstsParts, ParamConst, ParamTy, PolyExistentialPredicate,\n     PolyExistentialProjection, PolyExistentialTraitRef, PolyFnSig, PolyGenSig, PolyTraitRef,\n-    ProjectionTy, Region, RegionKind, RegionVid, TraitRef, TyKind, TypeAndMut, UpvarSubsts,\n-    VarianceDiagInfo,\n+    Region, RegionKind, RegionVid, TraitRef, TyKind, TypeAndMut, UpvarSubsts, VarianceDiagInfo,\n };\n pub use self::trait_def::TraitDef;\n \n@@ -1010,7 +1009,7 @@ impl<'tcx> TermKind<'tcx> {\n #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]\n #[derive(HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct ProjectionPredicate<'tcx> {\n-    pub projection_ty: ProjectionTy<'tcx>,\n+    pub projection_ty: AliasTy<'tcx>,\n     pub term: Term<'tcx>,\n }\n "}, {"sha": "437049947966ae9ce522dcfa76a8e74820d9ea3a", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -728,7 +728,7 @@ pub trait PrettyPrinter<'tcx>:\n                 }\n             }\n             ty::Placeholder(placeholder) => p!(write(\"Placeholder({:?})\", placeholder)),\n-            ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n+            ty::Opaque(ty::AliasTy { def_id, substs }) => {\n                 // FIXME(eddyb) print this with `print_def_path`.\n                 // We use verbose printing in 'NO_QUERIES' mode, to\n                 // avoid needing to call `predicates_of`. This should\n@@ -743,7 +743,7 @@ pub trait PrettyPrinter<'tcx>:\n                 let parent = self.tcx().parent(def_id);\n                 match self.tcx().def_kind(parent) {\n                     DefKind::TyAlias | DefKind::AssocTy => {\n-                        if let ty::Opaque(ty::OpaqueTy { def_id: d, substs: _ }) =\n+                        if let ty::Opaque(ty::AliasTy { def_id: d, substs: _ }) =\n                             *self.tcx().type_of(parent).kind()\n                         {\n                             if d == def_id {\n@@ -2742,7 +2742,7 @@ define_print_and_forward_display! {\n       }\n     }\n \n-    ty::ProjectionTy<'tcx> {\n+    ty::AliasTy<'tcx> {\n         p!(print_def_path(self.def_id, self.substs));\n     }\n "}, {"sha": "108166c605d1281aebccfa767e2971d32c6015bc", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -270,17 +270,17 @@ impl<'tcx> Relate<'tcx> for abi::Abi {\n     }\n }\n \n-impl<'tcx> Relate<'tcx> for ty::ProjectionTy<'tcx> {\n+impl<'tcx> Relate<'tcx> for ty::AliasTy<'tcx> {\n     fn relate<R: TypeRelation<'tcx>>(\n         relation: &mut R,\n-        a: ty::ProjectionTy<'tcx>,\n-        b: ty::ProjectionTy<'tcx>,\n-    ) -> RelateResult<'tcx, ty::ProjectionTy<'tcx>> {\n+        a: ty::AliasTy<'tcx>,\n+        b: ty::AliasTy<'tcx>,\n+    ) -> RelateResult<'tcx, ty::AliasTy<'tcx>> {\n         if a.def_id != b.def_id {\n             Err(TypeError::ProjectionMismatched(expected_found(relation, a.def_id, b.def_id)))\n         } else {\n             let substs = relation.relate(a.substs, b.substs)?;\n-            Ok(ty::ProjectionTy { def_id: a.def_id, substs: &substs })\n+            Ok(ty::AliasTy { def_id: a.def_id, substs: &substs })\n         }\n     }\n }\n@@ -557,8 +557,8 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n         }\n \n         (\n-            &ty::Opaque(ty::OpaqueTy { def_id: a_def_id, substs: a_substs }),\n-            &ty::Opaque(ty::OpaqueTy { def_id: b_def_id, substs: b_substs }),\n+            &ty::Opaque(ty::AliasTy { def_id: a_def_id, substs: a_substs }),\n+            &ty::Opaque(ty::AliasTy { def_id: b_def_id, substs: b_substs }),\n         ) if a_def_id == b_def_id => {\n             if relation.intercrate() {\n                 // During coherence, opaque types should be treated as equal to each other, even if their generic params"}, {"sha": "9d6a55b15f2c385d2c1981f98e5631c57ba30d8f", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -652,8 +652,8 @@ impl<'tcx> TypeSuperFoldable<'tcx> for Ty<'tcx> {\n             ty::GeneratorWitness(types) => ty::GeneratorWitness(types.try_fold_with(folder)?),\n             ty::Closure(did, substs) => ty::Closure(did, substs.try_fold_with(folder)?),\n             ty::Projection(data) => ty::Projection(data.try_fold_with(folder)?),\n-            ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n-                ty::Opaque(ty::OpaqueTy { def_id, substs: substs.try_fold_with(folder)? })\n+            ty::Opaque(ty::AliasTy { def_id, substs }) => {\n+                ty::Opaque(ty::AliasTy { def_id, substs: substs.try_fold_with(folder)? })\n             }\n \n             ty::Bool\n@@ -700,7 +700,7 @@ impl<'tcx> TypeSuperVisitable<'tcx> for Ty<'tcx> {\n             ty::GeneratorWitness(ref types) => types.visit_with(visitor),\n             ty::Closure(_did, ref substs) => substs.visit_with(visitor),\n             ty::Projection(ref data) => data.visit_with(visitor),\n-            ty::Opaque(ty::OpaqueTy { def_id: _, ref substs }) => substs.visit_with(visitor),\n+            ty::Opaque(ty::AliasTy { def_id: _, ref substs }) => substs.visit_with(visitor),\n \n             ty::Bool\n             | ty::Char"}, {"sha": "cf872365d2004e63bee9409b4bf1141d993599f6", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -1139,23 +1139,27 @@ impl<'tcx, T: IntoIterator> Binder<'tcx, T> {\n     }\n }\n \n-/// Represents the projection of an associated type. In explicit UFCS\n-/// form this would be written `<T as Trait<..>>::N`.\n+/// Represents the projection of an associated type.\n+///\n+/// For a projection, this would be `<Ty as Trait<...>>::N`.\n+///\n+/// For an opaque type, there is no explicit syntax.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n #[derive(HashStable, TypeFoldable, TypeVisitable, Lift)]\n-pub struct ProjectionTy<'tcx> {\n-    /// The parameters of the associated item.\n+pub struct AliasTy<'tcx> {\n+    /// The parameters of the associated or opaque item.\n     pub substs: SubstsRef<'tcx>,\n \n-    /// The `DefId` of the `TraitItem` for the associated type `N`.\n+    /// The `DefId` of the `TraitItem` for the associated type `N` if this is a projection,\n+    /// or the `OpaqueType` item if this is an opaque.\n     ///\n     /// Note that this is not the `DefId` of the `TraitRef` containing this\n     /// associated type, which is in `tcx.associated_item(item_def_id).container`,\n     /// aka. `tcx.parent(item_def_id).unwrap()`.\n     pub def_id: DefId,\n }\n \n-impl<'tcx> ProjectionTy<'tcx> {\n+impl<'tcx> AliasTy<'tcx> {\n     pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {\n         match tcx.def_kind(self.def_id) {\n             DefKind::AssocTy | DefKind::AssocConst => tcx.parent(self.def_id),\n@@ -1173,11 +1177,14 @@ impl<'tcx> ProjectionTy<'tcx> {\n         &self,\n         tcx: TyCtxt<'tcx>,\n     ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {\n-        let def_id = tcx.parent(self.def_id);\n-        assert_eq!(tcx.def_kind(def_id), DefKind::Trait);\n-        let trait_generics = tcx.generics_of(def_id);\n+        debug_assert!(matches!(tcx.def_kind(self.def_id), DefKind::AssocTy | DefKind::AssocConst));\n+        let trait_def_id = self.trait_def_id(tcx);\n+        let trait_generics = tcx.generics_of(trait_def_id);\n         (\n-            ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },\n+            ty::TraitRef {\n+                def_id: trait_def_id,\n+                substs: self.substs.truncate_to(tcx, trait_generics),\n+            },\n             &self.substs[trait_generics.count()..],\n         )\n     }\n@@ -1199,16 +1206,6 @@ impl<'tcx> ProjectionTy<'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable, TypeVisitable, Lift)]\n-pub struct OpaqueTy<'tcx> {\n-    /// The parameters of the opaque.\n-    pub substs: SubstsRef<'tcx>,\n-\n-    /// The `DefId` of the `impl Trait`.\n-    pub def_id: DefId,\n-}\n-\n #[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable, Lift)]\n pub struct GenSig<'tcx> {\n     pub resume_ty: Ty<'tcx>,\n@@ -1443,7 +1440,7 @@ impl<'tcx> ExistentialProjection<'tcx> {\n         debug_assert!(!self_ty.has_escaping_bound_vars());\n \n         ty::ProjectionPredicate {\n-            projection_ty: ty::ProjectionTy {\n+            projection_ty: ty::AliasTy {\n                 def_id: self.def_id,\n                 substs: tcx.mk_substs_trait(self_ty, self.substs),\n             },"}, {"sha": "b2ed9ca420049d708fe8ba82bd88568fd880377c", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -826,7 +826,7 @@ impl<'tcx> TypeFolder<'tcx> for OpaqueTypeExpander<'tcx> {\n     }\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-        if let ty::Opaque(ty::OpaqueTy { def_id, substs }) = *t.kind() {\n+        if let ty::Opaque(ty::AliasTy { def_id, substs }) = *t.kind() {\n             self.expand_opaque_ty(def_id, substs).unwrap_or(t)\n         } else if t.has_opaque_types() {\n             t.super_fold_with(self)"}, {"sha": "e79b5bcae5da9fe275ca3a4379fed6b9d090f55a", "filename": "compiler/rustc_middle/src/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -188,7 +188,7 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n                 }));\n             }\n             ty::Adt(_, substs)\n-            | ty::Opaque(ty::OpaqueTy { def_id: _, substs })\n+            | ty::Opaque(ty::AliasTy { def_id: _, substs })\n             | ty::Closure(_, substs)\n             | ty::Generator(_, substs, _)\n             | ty::FnDef(_, substs) => {"}, {"sha": "f887dc5f2eab72f071a8b69bb968477dfd95554d", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -849,7 +849,7 @@ impl<'tcx> Visitor<'tcx> for CostChecker<'_, 'tcx> {\n             };\n \n             let kind = match parent_ty.ty.kind() {\n-                &ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n+                &ty::Opaque(ty::AliasTy { def_id, substs }) => {\n                     self.tcx.bound_type_of(def_id).subst(self.tcx, substs).kind()\n                 }\n                 kind => kind,"}, {"sha": "3246a1e2f88c9815bb2a558e83ff90bd0ee1d9f9", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -88,10 +88,7 @@ trait DefIdVisitor<'tcx> {\n     fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<Self::BreakTy> {\n         self.skeleton().visit_trait(trait_ref)\n     }\n-    fn visit_projection_ty(\n-        &mut self,\n-        projection: ty::ProjectionTy<'tcx>,\n-    ) -> ControlFlow<Self::BreakTy> {\n+    fn visit_projection_ty(&mut self, projection: ty::AliasTy<'tcx>) -> ControlFlow<Self::BreakTy> {\n         self.skeleton().visit_projection_ty(projection)\n     }\n     fn visit_predicates(\n@@ -118,10 +115,7 @@ where\n         if self.def_id_visitor.shallow() { ControlFlow::CONTINUE } else { substs.visit_with(self) }\n     }\n \n-    fn visit_projection_ty(\n-        &mut self,\n-        projection: ty::ProjectionTy<'tcx>,\n-    ) -> ControlFlow<V::BreakTy> {\n+    fn visit_projection_ty(&mut self, projection: ty::AliasTy<'tcx>) -> ControlFlow<V::BreakTy> {\n         let tcx = self.def_id_visitor.tcx();\n         let (trait_ref, assoc_substs) = if tcx.def_kind(projection.def_id)\n             != DefKind::ImplTraitPlaceholder\n@@ -241,7 +235,7 @@ where\n                     self.def_id_visitor.visit_def_id(def_id, \"trait\", &trait_ref)?;\n                 }\n             }\n-            ty::Opaque(ty::OpaqueTy { def_id, substs: _ }) => {\n+            ty::Opaque(ty::AliasTy { def_id, substs: _ }) => {\n                 // Skip repeated `Opaque`s to avoid infinite recursion.\n                 if self.visited_opaque_tys.insert(def_id) {\n                     // The intent is to treat `impl Trait1 + Trait2` identically to"}, {"sha": "d21288d851cecf207be1f376723f9c9e9257d438", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -216,8 +216,8 @@ impl<'tcx> Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n         match *ty.kind() {\n             // Print all nominal types as paths (unlike `pretty_print_type`).\n             ty::FnDef(def_id, substs)\n-            | ty::Opaque(ty::OpaqueTy { def_id, substs })\n-            | ty::Projection(ty::ProjectionTy { def_id, substs })\n+            | ty::Opaque(ty::AliasTy { def_id, substs })\n+            | ty::Projection(ty::AliasTy { def_id, substs })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => self.print_def_path(def_id, substs),\n "}, {"sha": "52d0469fd445f2aa859bbeb1deac50c64101b4cc", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -439,8 +439,8 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n             // Mangle all nominal types as paths.\n             ty::Adt(ty::AdtDef(Interned(&ty::AdtDefData { did: def_id, .. }, _)), substs)\n             | ty::FnDef(def_id, substs)\n-            | ty::Opaque(ty::OpaqueTy { def_id, substs })\n-            | ty::Projection(ty::ProjectionTy { def_id, substs })\n+            | ty::Opaque(ty::AliasTy { def_id, substs })\n+            | ty::Projection(ty::AliasTy { def_id, substs })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => {\n                 self = self.print_def_path(def_id, substs)?;"}, {"sha": "6c9c516b305f8a0a26cccbee38dc42b550ac0457", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -369,7 +369,7 @@ fn suggest_restriction<'tcx>(\n     msg: &str,\n     err: &mut Diagnostic,\n     fn_sig: Option<&hir::FnSig<'_>>,\n-    projection: Option<&ty::ProjectionTy<'_>>,\n+    projection: Option<&ty::AliasTy<'_>>,\n     trait_pred: ty::PolyTraitPredicate<'tcx>,\n     // When we are dealing with a trait, `super_traits` will be `Some`:\n     // Given `trait T: A + B + C {}`\n@@ -855,7 +855,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     fn_sig.inputs().map_bound(|inputs| &inputs[1..]),\n                 ))\n             }\n-            ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n+            ty::Opaque(ty::AliasTy { def_id, substs }) => {\n                 self.tcx.bound_item_bounds(def_id).subst(self.tcx, substs).iter().find_map(|pred| {\n                     if let ty::PredicateKind::Clause(ty::Clause::Projection(proj)) = pred.kind().skip_binder()\n                     && Some(proj.projection_ty.def_id) == self.tcx.lang_items().fn_once_output()\n@@ -2644,7 +2644,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 Some(ident) => err.span_note(ident.span, &msg),\n                                 None => err.note(&msg),\n                             },\n-                            ty::Opaque(ty::OpaqueTy { def_id, substs: _ }) => {\n+                            ty::Opaque(ty::AliasTy { def_id, substs: _ }) => {\n                                 // Avoid printing the future from `core::future::identity_future`, it's not helpful\n                                 if tcx.parent(*def_id) == identity_future {\n                                     break 'print;\n@@ -3248,7 +3248,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 // This corresponds to `<ExprTy as Iterator>::Item = _`.\n                 let trait_ref = ty::Binder::dummy(ty::PredicateKind::Clause(\n                     ty::Clause::Projection(ty::ProjectionPredicate {\n-                        projection_ty: ty::ProjectionTy { substs, def_id: proj.def_id },\n+                        projection_ty: ty::AliasTy { substs, def_id: proj.def_id },\n                         term: ty_var.into(),\n                     }),\n                 ));"}, {"sha": "ea9c066566e3dfd2ff23a54f2443ce296650b748", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -45,7 +45,7 @@ pub type PolyProjectionObligation<'tcx> = Obligation<'tcx, ty::PolyProjectionPre\n \n pub type ProjectionObligation<'tcx> = Obligation<'tcx, ty::ProjectionPredicate<'tcx>>;\n \n-pub type ProjectionTyObligation<'tcx> = Obligation<'tcx, ty::ProjectionTy<'tcx>>;\n+pub type ProjectionTyObligation<'tcx> = Obligation<'tcx, ty::AliasTy<'tcx>>;\n \n pub(super) struct InProgress;\n \n@@ -496,7 +496,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n             // This is really important. While we *can* handle this, this has\n             // severe performance implications for large opaque types with\n             // late-bound regions. See `issue-88862` benchmark.\n-            ty::Opaque(ty::OpaqueTy { def_id, substs }) if !substs.has_escaping_bound_vars() => {\n+            ty::Opaque(ty::AliasTy { def_id, substs }) if !substs.has_escaping_bound_vars() => {\n                 // Only normalize `impl Trait` outside of type inference, usually in codegen.\n                 match self.param_env.reveal() {\n                     Reveal::UserFacing => ty.super_fold_with(self),\n@@ -957,7 +957,7 @@ impl<'tcx> TypeFolder<'tcx> for PlaceholderReplacer<'_, 'tcx> {\n pub fn normalize_projection_type<'a, 'b, 'tcx>(\n     selcx: &'a mut SelectionContext<'b, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    projection_ty: ty::ProjectionTy<'tcx>,\n+    projection_ty: ty::AliasTy<'tcx>,\n     cause: ObligationCause<'tcx>,\n     depth: usize,\n     obligations: &mut Vec<PredicateObligation<'tcx>>,\n@@ -995,7 +995,7 @@ pub fn normalize_projection_type<'a, 'b, 'tcx>(\n fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n     selcx: &'a mut SelectionContext<'b, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    projection_ty: ty::ProjectionTy<'tcx>,\n+    projection_ty: ty::AliasTy<'tcx>,\n     cause: ObligationCause<'tcx>,\n     depth: usize,\n     obligations: &mut Vec<PredicateObligation<'tcx>>,\n@@ -1177,7 +1177,7 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n fn normalize_to_error<'a, 'tcx>(\n     selcx: &mut SelectionContext<'a, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    projection_ty: ty::ProjectionTy<'tcx>,\n+    projection_ty: ty::AliasTy<'tcx>,\n     cause: ObligationCause<'tcx>,\n     depth: usize,\n ) -> NormalizedTy<'tcx> {\n@@ -1376,7 +1376,7 @@ fn assemble_candidates_from_trait_def<'cx, 'tcx>(\n     // If so, extract what we know from the trait and try to come up with a good answer.\n     let bounds = match *obligation.predicate.self_ty().kind() {\n         ty::Projection(ref data) => tcx.bound_item_bounds(data.def_id).subst(tcx, data.substs),\n-        ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n+        ty::Opaque(ty::AliasTy { def_id, substs }) => {\n             tcx.bound_item_bounds(def_id).subst(tcx, substs)\n         }\n         ty::Infer(ty::TyVar(_)) => {\n@@ -1870,7 +1870,7 @@ fn confirm_generator_candidate<'cx, 'tcx>(\n         };\n \n         ty::ProjectionPredicate {\n-            projection_ty: ty::ProjectionTy {\n+            projection_ty: ty::AliasTy {\n                 substs: trait_ref.substs,\n                 def_id: obligation.predicate.def_id,\n             },\n@@ -1912,7 +1912,7 @@ fn confirm_future_candidate<'cx, 'tcx>(\n         debug_assert_eq!(tcx.associated_item(obligation.predicate.def_id).name, sym::Output);\n \n         ty::ProjectionPredicate {\n-            projection_ty: ty::ProjectionTy {\n+            projection_ty: ty::AliasTy {\n                 substs: trait_ref.substs,\n                 def_id: obligation.predicate.def_id,\n             },\n@@ -1969,7 +1969,7 @@ fn confirm_builtin_candidate<'cx, 'tcx>(\n     };\n \n     let predicate = ty::ProjectionPredicate {\n-        projection_ty: ty::ProjectionTy { substs, def_id: item_def_id },\n+        projection_ty: ty::AliasTy { substs, def_id: item_def_id },\n         term,\n     };\n \n@@ -2040,7 +2040,7 @@ fn confirm_callable_candidate<'cx, 'tcx>(\n         flag,\n     )\n     .map_bound(|(trait_ref, ret_type)| ty::ProjectionPredicate {\n-        projection_ty: ty::ProjectionTy { substs: trait_ref.substs, def_id: fn_once_output_def_id },\n+        projection_ty: ty::AliasTy { substs: trait_ref.substs, def_id: fn_once_output_def_id },\n         term: ret_type.into(),\n     });\n "}, {"sha": "7291965760eff3ed388abd9e14a8d6d9bf016c2a", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -205,7 +205,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n             // This is really important. While we *can* handle this, this has\n             // severe performance implications for large opaque types with\n             // late-bound regions. See `issue-88862` benchmark.\n-            ty::Opaque(ty::OpaqueTy { def_id, substs }) if !substs.has_escaping_bound_vars() => {\n+            ty::Opaque(ty::AliasTy { def_id, substs }) if !substs.has_escaping_bound_vars() => {\n                 // Only normalize `impl Trait` outside of type inference, usually in codegen.\n                 match self.param_env.reveal() {\n                     Reveal::UserFacing => ty.try_super_fold_with(self),"}, {"sha": "f65e573401d300f44e6276406439f5304451dd8f", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -536,10 +536,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             let ty = traits::normalize_projection_type(\n                 self,\n                 param_env,\n-                ty::ProjectionTy {\n-                    def_id: tcx.lang_items().deref_target()?,\n-                    substs: trait_ref.substs,\n-                },\n+                ty::AliasTy { def_id: tcx.lang_items().deref_target()?, substs: trait_ref.substs },\n                 cause.clone(),\n                 0,\n                 // We're *intentionally* throwing these away,\n@@ -830,7 +827,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::GeneratorWitness(_)\n             | ty::Never\n             | ty::Projection(_)\n-            | ty::Opaque(ty::OpaqueTy { def_id: _, substs: _ })\n+            | ty::Opaque(ty::AliasTy { def_id: _, substs: _ })\n             | ty::Param(_)\n             | ty::Bound(_, _)\n             | ty::Error(_)"}, {"sha": "e945d320b73bcbfb65511bc005911186f3b3e769", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -156,7 +156,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let placeholder_trait_predicate = ty::Binder::dummy(placeholder_trait_predicate);\n         let (def_id, substs) = match *placeholder_self_ty.kind() {\n             ty::Projection(proj) => (proj.def_id, proj.substs),\n-            ty::Opaque(ty::OpaqueTy { def_id, substs }) => (def_id, substs),\n+            ty::Opaque(ty::AliasTy { def_id, substs }) => (def_id, substs),\n             _ => bug!(\"projection candidate for unexpected type: {:?}\", placeholder_self_ty),\n         };\n "}, {"sha": "f26705d63a93ee68053fbc91b95be5cdb2df2c2c", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -1596,7 +1596,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let tcx = self.infcx.tcx;\n         let (def_id, substs) = match *placeholder_trait_predicate.trait_ref.self_ty().kind() {\n             ty::Projection(ref data) => (data.def_id, data.substs),\n-            ty::Opaque(ty::OpaqueTy { def_id, substs }) => (def_id, substs),\n+            ty::Opaque(ty::AliasTy { def_id, substs }) => (def_id, substs),\n             _ => {\n                 span_bug!(\n                     obligation.cause.span,\n@@ -2260,7 +2260,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 t.rebind(def.all_fields().map(|f| f.ty(self.tcx(), substs)).collect())\n             }\n \n-            ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n+            ty::Opaque(ty::AliasTy { def_id, substs }) => {\n                 // We can resolve the `impl Trait` to its concrete type,\n                 // which enforces a DAG between the functions requiring\n                 // the auto trait bounds in question."}, {"sha": "60283a46c8ade3f84fea44566caf0aae0124731d", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -249,7 +249,7 @@ fn extend_cause_with_original_assoc_item_obligation<'tcx>(\n             // An associated item obligation born out of the `trait` failed to be met. An example\n             // can be seen in `ui/associated-types/point-at-type-on-obligation-failure-2.rs`.\n             debug!(\"extended_cause_with_original_assoc_item_obligation trait proj {:?}\", pred);\n-            if let ty::Projection(ty::ProjectionTy { def_id, .. }) = *pred.self_ty().kind()\n+            if let ty::Projection(ty::AliasTy { def_id, .. }) = *pred.self_ty().kind()\n                 && let Some(&impl_item_id) =\n                     tcx.impl_item_implementor_ids(impl_def_id).get(&def_id)\n                 && let Some(impl_item_span) = items\n@@ -369,7 +369,7 @@ impl<'tcx> WfPredicates<'tcx> {\n \n     /// Pushes the obligations required for `trait_ref::Item` to be WF\n     /// into `self.out`.\n-    fn compute_projection(&mut self, data: ty::ProjectionTy<'tcx>) {\n+    fn compute_projection(&mut self, data: ty::AliasTy<'tcx>) {\n         // A projection is well-formed if\n         //\n         // (a) its predicates hold (*)\n@@ -648,7 +648,7 @@ impl<'tcx> WfPredicates<'tcx> {\n                     // types appearing in the fn signature\n                 }\n \n-                ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n+                ty::Opaque(ty::AliasTy { def_id, substs }) => {\n                     // All of the requirements on type parameters\n                     // have already been checked for `impl Trait` in\n                     // return position. We do need to check type-alias-impl-trait though."}, {"sha": "30482cea26290c26e4e808822769cba7c2675aaa", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -432,7 +432,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                         (ast::Mutability::Not, chalk_ir::Mutability::Not) => true,\n                     }\n                 }\n-                (&ty::Opaque(ty::OpaqueTy { def_id, substs: _ }), OpaqueType(opaque_ty_id, ..)) => {\n+                (&ty::Opaque(ty::AliasTy { def_id, substs: _ }), OpaqueType(opaque_ty_id, ..)) => {\n                     def_id == opaque_ty_id.0\n                 }\n                 (&ty::FnDef(def_id, ..), FnDef(fn_def_id, ..)) => def_id == fn_def_id.0,\n@@ -788,7 +788,7 @@ impl<'tcx> ty::TypeFolder<'tcx> for ReplaceOpaqueTyFolder<'tcx> {\n     }\n \n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        if let ty::Opaque(ty::OpaqueTy { def_id, substs }) = *ty.kind() {\n+        if let ty::Opaque(ty::AliasTy { def_id, substs }) = *ty.kind() {\n             if def_id == self.opaque_ty_id.0 && substs == self.identity_substs {\n                 return self.tcx.mk_ty(ty::Bound(\n                     self.binder_index,"}, {"sha": "fb89b0cd4c27e023c8811c7a08b9eddb8d377ac8", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -66,7 +66,7 @@ impl<'tcx> LowerInto<'tcx, SubstsRef<'tcx>> for &chalk_ir::Substitution<RustInte\n     }\n }\n \n-impl<'tcx> LowerInto<'tcx, chalk_ir::AliasTy<RustInterner<'tcx>>> for ty::ProjectionTy<'tcx> {\n+impl<'tcx> LowerInto<'tcx, chalk_ir::AliasTy<RustInterner<'tcx>>> for ty::AliasTy<'tcx> {\n     fn lower_into(self, interner: RustInterner<'tcx>) -> chalk_ir::AliasTy<RustInterner<'tcx>> {\n         chalk_ir::AliasTy::Projection(chalk_ir::ProjectionTy {\n             associated_ty_id: chalk_ir::AssocTypeId(self.def_id),\n@@ -354,7 +354,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                 chalk_ir::TyKind::Tuple(types.len(), types.as_substs().lower_into(interner))\n             }\n             ty::Projection(proj) => chalk_ir::TyKind::Alias(proj.lower_into(interner)),\n-            ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n+            ty::Opaque(ty::AliasTy { def_id, substs }) => {\n                 chalk_ir::TyKind::Alias(chalk_ir::AliasTy::Opaque(chalk_ir::OpaqueTy {\n                     opaque_ty_id: chalk_ir::OpaqueTyId(def_id),\n                     substitution: substs.lower_into(interner),\n@@ -442,11 +442,11 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n                 mutbl.lower_into(interner),\n             ),\n             TyKind::Str => ty::Str,\n-            TyKind::OpaqueType(opaque_ty, substitution) => ty::Opaque(ty::OpaqueTy {\n+            TyKind::OpaqueType(opaque_ty, substitution) => ty::Opaque(ty::AliasTy {\n                 def_id: opaque_ty.0,\n                 substs: substitution.lower_into(interner),\n             }),\n-            TyKind::AssociatedType(assoc_ty, substitution) => ty::Projection(ty::ProjectionTy {\n+            TyKind::AssociatedType(assoc_ty, substitution) => ty::Projection(ty::AliasTy {\n                 substs: substitution.lower_into(interner),\n                 def_id: assoc_ty.0,\n             }),\n@@ -457,11 +457,11 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n                 name: ty::BoundVar::from_usize(placeholder.idx),\n             }),\n             TyKind::Alias(alias_ty) => match alias_ty {\n-                chalk_ir::AliasTy::Projection(projection) => ty::Projection(ty::ProjectionTy {\n+                chalk_ir::AliasTy::Projection(projection) => ty::Projection(ty::AliasTy {\n                     def_id: projection.associated_ty_id.0,\n                     substs: projection.substitution.lower_into(interner),\n                 }),\n-                chalk_ir::AliasTy::Opaque(opaque) => ty::Opaque(ty::OpaqueTy {\n+                chalk_ir::AliasTy::Opaque(opaque) => ty::Opaque(ty::AliasTy {\n                     def_id: opaque.opaque_ty_id.0,\n                     substs: opaque.substitution.lower_into(interner),\n                 }),"}, {"sha": "98aaff4fb0849933660d008c0911a77c0bf36550", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -414,7 +414,7 @@ fn clean_projection_predicate<'tcx>(\n }\n \n fn clean_projection<'tcx>(\n-    ty: ty::Binder<'tcx, ty::ProjectionTy<'tcx>>,\n+    ty: ty::Binder<'tcx, ty::AliasTy<'tcx>>,\n     cx: &mut DocContext<'tcx>,\n     def_id: Option<DefId>,\n ) -> Type {\n@@ -453,7 +453,7 @@ fn compute_should_show_cast(self_def_id: Option<DefId>, trait_: &Path, self_type\n }\n \n fn projection_to_path_segment<'tcx>(\n-    ty: ty::Binder<'tcx, ty::ProjectionTy<'tcx>>,\n+    ty: ty::Binder<'tcx, ty::AliasTy<'tcx>>,\n     cx: &mut DocContext<'tcx>,\n ) -> PathSegment {\n     let item = cx.tcx.associated_item(ty.skip_binder().def_id);\n@@ -1833,7 +1833,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n             }\n         }\n \n-        ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n+        ty::Opaque(ty::AliasTy { def_id, substs }) => {\n             // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n             // by looking up the bounds associated with the def_id.\n             let bounds = cx"}, {"sha": "3ff774867b1efd264c0e9be0135e51604f251a96", "filename": "src/tools/clippy/clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, FnDecl, HirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{Clause, EarlyBinder, Opaque, OpaqueTy, PredicateKind};\n+use rustc_middle::ty::{AliasTy, Clause, EarlyBinder, Opaque, PredicateKind};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n use rustc_trait_selection::traits::error_reporting::suggestions::TypeErrCtxtExt;\n@@ -62,7 +62,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n             return;\n         }\n         let ret_ty = return_ty(cx, hir_id);\n-        if let Opaque(OpaqueTy { def_id, substs }) = *ret_ty.kind() {\n+        if let Opaque(AliasTy { def_id, substs }) = *ret_ty.kind() {\n             let preds = cx.tcx.explicit_item_bounds(def_id);\n             let mut is_future = false;\n             for &(p, _span) in preds {"}, {"sha": "bddab7eca53ba3dad0e9496c83fcafd9fe70a07e", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c13bd83528da223fa073e9c7e5fdc435254baab6/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13bd83528da223fa073e9c7e5fdc435254baab6/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=c13bd83528da223fa073e9c7e5fdc435254baab6", "patch": "@@ -17,7 +17,7 @@ use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::{\n     self, AdtDef, AssocKind, Binder, BoundRegion, DefIdTree, FnSig, IntTy, List, ParamEnv, Predicate, PredicateKind,\n-    ProjectionTy, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor, UintTy,\n+    AliasTy, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor, UintTy,\n     VariantDef, VariantDiscr,\n };\n use rustc_middle::ty::{GenericArg, GenericArgKind};\n@@ -79,7 +79,7 @@ pub fn contains_ty_adt_constructor_opaque<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'\n                 return true;\n             }\n \n-            if let ty::Opaque(ty::OpaqueTy { def_id, substs: _ }) = *inner_ty.kind() {\n+            if let ty::Opaque(ty::AliasTy { def_id, substs: _ }) = *inner_ty.kind() {\n                 for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n                     match predicate.kind().skip_binder() {\n                         // For `impl Trait<U>`, it will register a predicate of `T: Trait<U>`, so we go through\n@@ -250,7 +250,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n             is_must_use_ty(cx, *ty)\n         },\n         ty::Tuple(substs) => substs.iter().any(|ty| is_must_use_ty(cx, ty)),\n-        ty::Opaque(ty::OpaqueTy { def_id, substs: _ }) => {\n+        ty::Opaque(ty::AliasTy { def_id, substs: _ }) => {\n             for (predicate, _) in cx.tcx.explicit_item_bounds(*def_id) {\n                 if let ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) = predicate.kind().skip_binder() {\n                     if cx.tcx.has_attr(trait_predicate.trait_ref.def_id, sym::must_use) {\n@@ -631,7 +631,7 @@ pub fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'t\n             Some(ExprFnSig::Closure(decl, subs.as_closure().sig()))\n         },\n         ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.bound_fn_sig(id).subst(cx.tcx, subs), Some(id))),\n-        ty::Opaque(ty::OpaqueTy{ def_id, substs: _ }) => sig_from_bounds(cx, ty, cx.tcx.item_bounds(def_id), cx.tcx.opt_parent(def_id)),\n+        ty::Opaque(ty::AliasTy { def_id, substs: _ }) => sig_from_bounds(cx, ty, cx.tcx.item_bounds(def_id), cx.tcx.opt_parent(def_id)),\n         ty::FnPtr(sig) => Some(ExprFnSig::Sig(sig, None)),\n         ty::Dynamic(bounds, _, _) => {\n             let lang_items = cx.tcx.lang_items();\n@@ -701,7 +701,7 @@ fn sig_from_bounds<'tcx>(\n     inputs.map(|ty| ExprFnSig::Trait(ty, output, predicates_id))\n }\n \n-fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: ProjectionTy<'tcx>) -> Option<ExprFnSig<'tcx>> {\n+fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: AliasTy<'tcx>) -> Option<ExprFnSig<'tcx>> {\n     let mut inputs = None;\n     let mut output = None;\n     let lang_items = cx.tcx.lang_items();\n@@ -980,13 +980,13 @@ pub fn make_projection<'tcx>(\n     container_id: DefId,\n     assoc_ty: Symbol,\n     substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n-) -> Option<ProjectionTy<'tcx>> {\n+) -> Option<AliasTy<'tcx>> {\n     fn helper<'tcx>(\n         tcx: TyCtxt<'tcx>,\n         container_id: DefId,\n         assoc_ty: Symbol,\n         substs: SubstsRef<'tcx>,\n-    ) -> Option<ProjectionTy<'tcx>> {\n+    ) -> Option<AliasTy<'tcx>> {\n         let Some(assoc_item) = tcx\n             .associated_items(container_id)\n             .find_by_name_and_kind(tcx, Ident::with_dummy_span(assoc_ty), AssocKind::Type, container_id)\n@@ -1039,7 +1039,7 @@ pub fn make_projection<'tcx>(\n             }\n         }\n \n-        Some(ProjectionTy {\n+        Some(AliasTy {\n             substs,\n             def_id: assoc_item.def_id,\n         })\n@@ -1065,7 +1065,7 @@ pub fn make_normalized_projection<'tcx>(\n     assoc_ty: Symbol,\n     substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n ) -> Option<Ty<'tcx>> {\n-    fn helper<'tcx>(tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>, ty: ProjectionTy<'tcx>) -> Option<Ty<'tcx>> {\n+    fn helper<'tcx>(tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>, ty: AliasTy<'tcx>) -> Option<Ty<'tcx>> {\n         #[cfg(debug_assertions)]\n         if let Some((i, subst)) = ty\n             .substs"}]}