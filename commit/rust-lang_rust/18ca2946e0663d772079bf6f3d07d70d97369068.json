{"sha": "18ca2946e0663d772079bf6f3d07d70d97369068", "node_id": "C_kwDOAAsO6NoAKDE4Y2EyOTQ2ZTA2NjNkNzcyMDc5YmY2ZjNkMDdkNzBkOTczNjkwNjg", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-07-02T17:25:55Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-07-02T22:30:03Z"}, "message": "ast: Add span to `Extern`", "tree": {"sha": "aabc07d6b9074c7012226831b8161dccc4886856", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aabc07d6b9074c7012226831b8161dccc4886856"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18ca2946e0663d772079bf6f3d07d70d97369068", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18ca2946e0663d772079bf6f3d07d70d97369068", "html_url": "https://github.com/rust-lang/rust/commit/18ca2946e0663d772079bf6f3d07d70d97369068", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18ca2946e0663d772079bf6f3d07d70d97369068/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5018181c79a6fe37913fd931005ad2a63c85be7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5018181c79a6fe37913fd931005ad2a63c85be7b", "html_url": "https://github.com/rust-lang/rust/commit/5018181c79a6fe37913fd931005ad2a63c85be7b"}], "stats": {"total": 51, "additions": 32, "deletions": 19}, "files": [{"sha": "2820d5e6e0c0523171d4882ced275d561b82d599", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18ca2946e0663d772079bf6f3d07d70d97369068/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ca2946e0663d772079bf6f3d07d70d97369068/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=18ca2946e0663d772079bf6f3d07d70d97369068", "patch": "@@ -2667,13 +2667,16 @@ impl Item {\n #[derive(Clone, Copy, Encodable, Decodable, Debug)]\n pub enum Extern {\n     None,\n-    Implicit,\n-    Explicit(StrLit),\n+    Implicit(Span),\n+    Explicit(StrLit, Span),\n }\n \n impl Extern {\n-    pub fn from_abi(abi: Option<StrLit>) -> Extern {\n-        abi.map_or(Extern::Implicit, Extern::Explicit)\n+    pub fn from_abi(abi: Option<StrLit>, span: Span) -> Extern {\n+        match abi {\n+            Some(name) => Extern::Explicit(name, span),\n+            None => Extern::Implicit(span),\n+        }\n     }\n }\n "}, {"sha": "112197c6e399313cbb09db14f2708416ce2298db", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18ca2946e0663d772079bf6f3d07d70d97369068/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ca2946e0663d772079bf6f3d07d70d97369068/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=18ca2946e0663d772079bf6f3d07d70d97369068", "patch": "@@ -1272,8 +1272,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     pub(super) fn lower_extern(&mut self, ext: Extern) -> abi::Abi {\n         match ext {\n             Extern::None => abi::Abi::Rust,\n-            Extern::Implicit => abi::Abi::FALLBACK,\n-            Extern::Explicit(abi) => self.lower_abi(abi),\n+            Extern::Implicit(_) => abi::Abi::FALLBACK,\n+            Extern::Explicit(abi, _) => self.lower_abi(abi),\n         }\n     }\n "}, {"sha": "8dadf5ab1ab7cdc10fac34cff309f84d557013da", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/18ca2946e0663d772079bf6f3d07d70d97369068/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ca2946e0663d772079bf6f3d07d70d97369068/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=18ca2946e0663d772079bf6f3d07d70d97369068", "patch": "@@ -630,7 +630,8 @@ impl<'a> AstValidator<'a> {\n         match (fk.ctxt(), fk.header()) {\n             (Some(FnCtxt::Foreign), _) => return,\n             (Some(FnCtxt::Free), Some(header)) => match header.ext {\n-                Extern::Explicit(StrLit { symbol_unescaped: sym::C, .. }) | Extern::Implicit\n+                Extern::Explicit(StrLit { symbol_unescaped: sym::C, .. }, _)\n+                | Extern::Implicit(_)\n                     if matches!(header.unsafety, Unsafe::Yes(_)) =>\n                 {\n                     return;\n@@ -842,7 +843,7 @@ impl<'a> AstValidator<'a> {\n                     .emit();\n                 });\n                 self.check_late_bound_lifetime_defs(&bfty.generic_params);\n-                if let Extern::Implicit = bfty.ext {\n+                if let Extern::Implicit(_) = bfty.ext {\n                     let sig_span = self.session.source_map().next_point(ty.span.shrink_to_lo());\n                     self.maybe_lint_missing_abi(sig_span, ty.id);\n                 }\n@@ -1556,7 +1557,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         if let FnKind::Fn(\n             _,\n             _,\n-            FnSig { span: sig_span, header: FnHeader { ext: Extern::Implicit, .. }, .. },\n+            FnSig { span: sig_span, header: FnHeader { ext: Extern::Implicit(_), .. }, .. },\n             _,\n             _,\n             _,"}, {"sha": "fd2dd6cf6c7f112187b24b4ae98ac785ab1c782c", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18ca2946e0663d772079bf6f3d07d70d97369068/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ca2946e0663d772079bf6f3d07d70d97369068/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=18ca2946e0663d772079bf6f3d07d70d97369068", "patch": "@@ -283,7 +283,7 @@ impl<'a> PostExpansionVisitor<'a> {\n     }\n \n     fn check_extern(&self, ext: ast::Extern, constness: ast::Const) {\n-        if let ast::Extern::Explicit(abi) = ext {\n+        if let ast::Extern::Explicit(abi, _) = ext {\n             self.check_abi(abi, constness);\n         }\n     }"}, {"sha": "c9e3a7edfa67d33e6fe0da8d357ca40d903e6d1a", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18ca2946e0663d772079bf6f3d07d70d97369068/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ca2946e0663d772079bf6f3d07d70d97369068/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=18ca2946e0663d772079bf6f3d07d70d97369068", "patch": "@@ -1734,10 +1734,10 @@ impl<'a> State<'a> {\n \n         match header.ext {\n             ast::Extern::None => {}\n-            ast::Extern::Implicit => {\n+            ast::Extern::Implicit(_) => {\n                 self.word_nbsp(\"extern\");\n             }\n-            ast::Extern::Explicit(abi) => {\n+            ast::Extern::Explicit(abi, _) => {\n                 self.word_nbsp(\"extern\");\n                 self.print_literal(&abi.as_lit());\n                 self.nbsp();"}, {"sha": "67e6402c0ae787368da848588fdb29dcac6925a4", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18ca2946e0663d772079bf6f3d07d70d97369068/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ca2946e0663d772079bf6f3d07d70d97369068/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=18ca2946e0663d772079bf6f3d07d70d97369068", "patch": "@@ -1353,7 +1353,16 @@ impl<'a> Parser<'a> {\n \n     /// Parses `extern string_literal?`.\n     fn parse_extern(&mut self) -> Extern {\n-        if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }\n+        if self.eat_keyword(kw::Extern) {\n+            let mut extern_span = self.prev_token.span;\n+            let abi = self.parse_abi();\n+            if let Some(abi) = abi {\n+                extern_span = extern_span.to(abi.span);\n+            }\n+            Extern::from_abi(abi, extern_span)\n+        } else {\n+            Extern::None\n+        }\n     }\n \n     /// Parses a string literal as an ABI spec."}, {"sha": "453471c8cdda6f4b6a09a706f2c17caf5bdb2814", "filename": "src/tools/clippy/clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18ca2946e0663d772079bf6f3d07d70d97369068/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ca2946e0663d772079bf6f3d07d70d97369068/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=18ca2946e0663d772079bf6f3d07d70d97369068", "patch": "@@ -94,7 +94,7 @@ impl ExcessiveBools {\n \n     fn check_fn_sig(&self, cx: &EarlyContext<'_>, fn_sig: &FnSig, span: Span) {\n         match fn_sig.header.ext {\n-            Extern::Implicit | Extern::Explicit(_) => return,\n+            Extern::Implicit(_) | Extern::Explicit(_, _) => return,\n             Extern::None => (),\n         }\n "}, {"sha": "177e754ee091e434efea5b5025b55da3a7214946", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18ca2946e0663d772079bf6f3d07d70d97369068/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ca2946e0663d772079bf6f3d07d70d97369068/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=18ca2946e0663d772079bf6f3d07d70d97369068", "patch": "@@ -600,8 +600,8 @@ pub fn eq_ty(l: &Ty, r: &Ty) -> bool {\n pub fn eq_ext(l: &Extern, r: &Extern) -> bool {\n     use Extern::*;\n     match (l, r) {\n-        (None, None) | (Implicit, Implicit) => true,\n-        (Explicit(l), Explicit(r)) => eq_str_lit(l, r),\n+        (None, None) | (Implicit(_), Implicit(_)) => true,\n+        (Explicit(l,_), Explicit(r,_)) => eq_str_lit(l, r),\n         _ => false,\n     }\n }"}, {"sha": "8f35068e35f046eef38d42da5ae952889cabf212", "filename": "src/tools/rustfmt/src/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18ca2946e0663d772079bf6f3d07d70d97369068/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ca2946e0663d772079bf6f3d07d70d97369068/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs?ref=18ca2946e0663d772079bf6f3d07d70d97369068", "patch": "@@ -148,7 +148,7 @@ impl<'a> Item<'a> {\n         Item {\n             unsafety: fm.unsafety,\n             abi: format_extern(\n-                ast::Extern::from_abi(fm.abi),\n+                ast::Extern::from_abi(fm.abi, DUMMY_SP),\n                 config.force_explicit_abi(),\n                 true,\n             ),"}, {"sha": "4b26f4e40df982be472cd2c6d84d33a9f366d4da", "filename": "src/tools/rustfmt/src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18ca2946e0663d772079bf6f3d07d70d97369068/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ca2946e0663d772079bf6f3d07d70d97369068/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs?ref=18ca2946e0663d772079bf6f3d07d70d97369068", "patch": "@@ -138,8 +138,8 @@ pub(crate) fn format_extern(\n ) -> Cow<'static, str> {\n     let abi = match ext {\n         ast::Extern::None => \"Rust\".to_owned(),\n-        ast::Extern::Implicit => \"C\".to_owned(),\n-        ast::Extern::Explicit(abi) => abi.symbol_unescaped.to_string(),\n+        ast::Extern::Implicit(_) => \"C\".to_owned(),\n+        ast::Extern::Explicit(abi, _) => abi.symbol_unescaped.to_string(),\n     };\n \n     if abi == \"Rust\" && !is_mod {"}]}