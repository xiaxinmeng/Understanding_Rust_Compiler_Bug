{"sha": "3485d90728fe8dc076c6362211bf1f62830c97d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ODVkOTA3MjhmZThkYzA3NmM2MzYyMjExYmYxZjYyODMwYzk3ZDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-24T18:31:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-24T18:31:22Z"}, "message": "auto merge of #13706 : alexcrichton/rust/test-nocapture, r=brson\n\nA new flag to the test runner, --nocapture, can be passed to instruct that the\r\noutput of tests should not be captured by default. The behavior can also be\r\ntriggered via a RUST_TEST_NOCAPTURE environment variable being set.\r\n\r\nCloses #13374", "tree": {"sha": "8cac8759d29cf01750f1e81c8463096b372ec2b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cac8759d29cf01750f1e81c8463096b372ec2b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3485d90728fe8dc076c6362211bf1f62830c97d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3485d90728fe8dc076c6362211bf1f62830c97d8", "html_url": "https://github.com/rust-lang/rust/commit/3485d90728fe8dc076c6362211bf1f62830c97d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3485d90728fe8dc076c6362211bf1f62830c97d8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22e4e6adaff9d1424e8e715f209cffccfa121df0", "url": "https://api.github.com/repos/rust-lang/rust/commits/22e4e6adaff9d1424e8e715f209cffccfa121df0", "html_url": "https://github.com/rust-lang/rust/commit/22e4e6adaff9d1424e8e715f209cffccfa121df0"}, {"sha": "65f68dcf700a140a64bdd868d5d86b187326e088", "url": "https://api.github.com/repos/rust-lang/rust/commits/65f68dcf700a140a64bdd868d5d86b187326e088", "html_url": "https://github.com/rust-lang/rust/commit/65f68dcf700a140a64bdd868d5d86b187326e088"}], "stats": {"total": 100, "additions": 62, "deletions": 38}, "files": [{"sha": "2e287135dc2643e321c490efa04bc44742929aee", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3485d90728fe8dc076c6362211bf1f62830c97d8/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3485d90728fe8dc076c6362211bf1f62830c97d8/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=3485d90728fe8dc076c6362211bf1f62830c97d8", "patch": "@@ -267,7 +267,8 @@ pub fn test_opts(config: &config) -> test::TestOpts {\n         ratchet_metrics: config.ratchet_metrics.clone(),\n         ratchet_noise_percent: config.ratchet_noise_percent.clone(),\n         save_metrics: config.save_metrics.clone(),\n-        test_shard: config.test_shard.clone()\n+        test_shard: config.test_shard.clone(),\n+        nocapture: false,\n     }\n }\n "}, {"sha": "9ce81c5bae53d9915c9e04d7394799c2d392d838", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3485d90728fe8dc076c6362211bf1f62830c97d8/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3485d90728fe8dc076c6362211bf1f62830c97d8/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=3485d90728fe8dc076c6362211bf1f62830c97d8", "patch": "@@ -955,6 +955,7 @@ fn fatal(err: ~str) -> ! { error(err); fail!(); }\n fn fatal_ProcRes(err: ~str, proc_res: &ProcRes) -> ! {\n     print!(\"\\n\\\n error: {}\\n\\\n+status: {}\\n\\\n command: {}\\n\\\n stdout:\\n\\\n ------------------------------------------\\n\\\n@@ -965,7 +966,8 @@ stderr:\\n\\\n {}\\n\\\n ------------------------------------------\\n\\\n \\n\",\n-             err, proc_res.cmdline, proc_res.stdout, proc_res.stderr);\n+             err, proc_res.status, proc_res.cmdline, proc_res.stdout,\n+             proc_res.stderr);\n     fail!();\n }\n "}, {"sha": "6a1b7b4d073769bdc7cb69b171ff194a512daf63", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 57, "deletions": 36, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/3485d90728fe8dc076c6362211bf1f62830c97d8/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3485d90728fe8dc076c6362211bf1f62830c97d8/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=3485d90728fe8dc076c6362211bf1f62830c97d8", "patch": "@@ -257,7 +257,26 @@ pub struct TestOpts {\n     pub ratchet_noise_percent: Option<f64>,\n     pub save_metrics: Option<Path>,\n     pub test_shard: Option<(uint,uint)>,\n-    pub logfile: Option<Path>\n+    pub logfile: Option<Path>,\n+    pub nocapture: bool,\n+}\n+\n+impl TestOpts {\n+    #[cfg(test)]\n+    fn new() -> TestOpts {\n+        TestOpts {\n+            filter: None,\n+            run_ignored: false,\n+            run_tests: false,\n+            run_benchmarks: false,\n+            ratchet_metrics: None,\n+            ratchet_noise_percent: None,\n+            save_metrics: None,\n+            test_shard: None,\n+            logfile: None,\n+            nocapture: false,\n+        }\n+    }\n }\n \n /// Result of parsing the options.\n@@ -280,7 +299,9 @@ fn optgroups() -> Vec<getopts::OptGroup> {\n       getopts::optopt(\"\", \"logfile\", \"Write logs to the specified file instead \\\n                           of stdout\", \"PATH\"),\n       getopts::optopt(\"\", \"test-shard\", \"run shard A, of B shards, worth of the testsuite\",\n-                     \"A.B\"))\n+                     \"A.B\"),\n+      getopts::optflag(\"\", \"nocapture\", \"don't capture stdout/stderr of each \\\n+                                         task, allow printing directly\"))\n }\n \n fn usage(binary: &str, helpstr: &str) {\n@@ -295,6 +316,10 @@ have a substring match, only those tests are run.\n By default, all tests are run in parallel. This can be altered with the\n RUST_TEST_TASKS environment variable when running tests (set it to 1).\n \n+All tests have their standard output and standard error captured by default.\n+This can be overridden with the --nocapture flag or the RUST_TEST_NOCAPTURE=1\n+environment variable. Logging is not captured by default.\n+\n Test Attributes:\n \n     #[test]        - Indicates a function is a test to be run. This function\n@@ -351,6 +376,11 @@ pub fn parse_opts(args: &[~str]) -> Option<OptRes> {\n     let test_shard = matches.opt_str(\"test-shard\");\n     let test_shard = opt_shard(test_shard);\n \n+    let mut nocapture = matches.opt_present(\"nocapture\");\n+    if !nocapture {\n+        nocapture = os::getenv(\"RUST_TEST_NOCAPTURE\").is_some();\n+    }\n+\n     let test_opts = TestOpts {\n         filter: filter,\n         run_ignored: run_ignored,\n@@ -360,7 +390,8 @@ pub fn parse_opts(args: &[~str]) -> Option<OptRes> {\n         ratchet_noise_percent: ratchet_noise_percent,\n         save_metrics: save_metrics,\n         test_shard: test_shard,\n-        logfile: logfile\n+        logfile: logfile,\n+        nocapture: nocapture,\n     };\n \n     Some(Ok(test_opts))\n@@ -843,7 +874,7 @@ fn run_tests(opts: &TestOpts,\n                 // that hang forever.\n                 try!(callback(TeWait(test.desc.clone(), test.testfn.padding())));\n             }\n-            run_test(!opts.run_tests, test, tx.clone());\n+            run_test(opts, !opts.run_tests, test, tx.clone());\n             pending += 1;\n         }\n \n@@ -859,7 +890,7 @@ fn run_tests(opts: &TestOpts,\n     // (this includes metric fns)\n     for b in filtered_benchs_and_metrics.move_iter() {\n         try!(callback(TeWait(b.desc.clone(), b.testfn.padding())));\n-        run_test(!opts.run_benchmarks, b, tx.clone());\n+        run_test(opts, !opts.run_benchmarks, b, tx.clone());\n         let (test, result, stdout) = rx.recv();\n         try!(callback(TeResult(test, result, stdout)));\n     }\n@@ -941,7 +972,8 @@ pub fn filter_tests(\n     }\n }\n \n-pub fn run_test(force_ignore: bool,\n+pub fn run_test(opts: &TestOpts,\n+                force_ignore: bool,\n                 test: TestDescAndFn,\n                 monitor_ch: Sender<MonitorMsg>) {\n \n@@ -955,6 +987,7 @@ pub fn run_test(force_ignore: bool,\n     #[allow(deprecated_owned_vector)]\n     fn run_test_inner(desc: TestDesc,\n                       monitor_ch: Sender<MonitorMsg>,\n+                      nocapture: bool,\n                       testfn: proc():Send) {\n         spawn(proc() {\n             let (tx, rx) = channel();\n@@ -965,8 +998,12 @@ pub fn run_test(force_ignore: bool,\n                 DynTestName(ref name) => name.clone().into_maybe_owned(),\n                 StaticTestName(name) => name.into_maybe_owned(),\n             });\n-            task.opts.stdout = Some(~stdout as ~Writer:Send);\n-            task.opts.stderr = Some(~stderr as ~Writer:Send);\n+            if nocapture {\n+                drop((stdout, stderr));\n+            } else {\n+                task.opts.stdout = Some(~stdout as ~Writer:Send);\n+                task.opts.stderr = Some(~stderr as ~Writer:Send);\n+            }\n             let result_future = task.future_result();\n             task.spawn(testfn);\n \n@@ -1000,8 +1037,9 @@ pub fn run_test(force_ignore: bool,\n             monitor_ch.send((desc, TrMetrics(mm), Vec::new()));\n             return;\n         }\n-        DynTestFn(f) => run_test_inner(desc, monitor_ch, f),\n-        StaticTestFn(f) => run_test_inner(desc, monitor_ch, proc() f())\n+        DynTestFn(f) => run_test_inner(desc, monitor_ch, opts.nocapture, f),\n+        StaticTestFn(f) => run_test_inner(desc, monitor_ch, opts.nocapture,\n+                                          proc() f())\n     }\n }\n \n@@ -1320,7 +1358,7 @@ mod tests {\n             testfn: DynTestFn(proc() f()),\n         };\n         let (tx, rx) = channel();\n-        run_test(false, desc, tx);\n+        run_test(&TestOpts::new(), false, desc, tx);\n         let (_, res, _) = rx.recv();\n         assert!(res != TrOk);\n     }\n@@ -1337,7 +1375,7 @@ mod tests {\n             testfn: DynTestFn(proc() f()),\n         };\n         let (tx, rx) = channel();\n-        run_test(false, desc, tx);\n+        run_test(&TestOpts::new(), false, desc, tx);\n         let (_, res, _) = rx.recv();\n         assert!(res == TrIgnored);\n     }\n@@ -1354,7 +1392,7 @@ mod tests {\n             testfn: DynTestFn(proc() f()),\n         };\n         let (tx, rx) = channel();\n-        run_test(false, desc, tx);\n+        run_test(&TestOpts::new(), false, desc, tx);\n         let (_, res, _) = rx.recv();\n         assert!(res == TrOk);\n     }\n@@ -1371,7 +1409,7 @@ mod tests {\n             testfn: DynTestFn(proc() f()),\n         };\n         let (tx, rx) = channel();\n-        run_test(false, desc, tx);\n+        run_test(&TestOpts::new(), false, desc, tx);\n         let (_, res, _) = rx.recv();\n         assert!(res == TrFailed);\n     }\n@@ -1401,17 +1439,9 @@ mod tests {\n         // When we run ignored tests the test filter should filter out all the\n         // unignored tests and flip the ignore flag on the rest to false\n \n-        let opts = TestOpts {\n-            filter: None,\n-            run_ignored: true,\n-            logfile: None,\n-            run_tests: true,\n-            run_benchmarks: false,\n-            ratchet_noise_percent: None,\n-            ratchet_metrics: None,\n-            save_metrics: None,\n-            test_shard: None\n-        };\n+        let mut opts = TestOpts::new();\n+        opts.run_tests = true;\n+        opts.run_ignored = true;\n \n         let tests = vec!(\n             TestDescAndFn {\n@@ -1439,17 +1469,8 @@ mod tests {\n \n     #[test]\n     pub fn sort_tests() {\n-        let opts = TestOpts {\n-            filter: None,\n-            run_ignored: false,\n-            logfile: None,\n-            run_tests: true,\n-            run_benchmarks: false,\n-            ratchet_noise_percent: None,\n-            ratchet_metrics: None,\n-            save_metrics: None,\n-            test_shard: None\n-        };\n+        let mut opts = TestOpts::new();\n+        opts.run_tests = true;\n \n         let names =\n             vec!(\"sha1::test\".to_owned(), \"int::test_to_str\".to_owned(), \"int::test_pow\".to_owned(),"}]}