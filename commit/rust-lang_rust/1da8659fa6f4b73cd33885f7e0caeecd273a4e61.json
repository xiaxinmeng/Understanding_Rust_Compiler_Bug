{"sha": "1da8659fa6f4b73cd33885f7e0caeecd273a4e61", "node_id": "C_kwDOAAsO6NoAKDFkYTg2NTlmYTZmNGI3M2NkMzM4ODVmN2UwY2FlZWNkMjczYTRlNjE", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-22T02:56:12Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-22T02:56:33Z"}, "message": "Remove unused impl of `GetDefId` for `Typedef`", "tree": {"sha": "4b892fb8d985d7843ac0fbb167cc7dd692b5f4b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b892fb8d985d7843ac0fbb167cc7dd692b5f4b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1da8659fa6f4b73cd33885f7e0caeecd273a4e61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1da8659fa6f4b73cd33885f7e0caeecd273a4e61", "html_url": "https://github.com/rust-lang/rust/commit/1da8659fa6f4b73cd33885f7e0caeecd273a4e61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1da8659fa6f4b73cd33885f7e0caeecd273a4e61/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b987fd78c2956fde0c9fe8a9ab4b9154dc5671da", "url": "https://api.github.com/repos/rust-lang/rust/commits/b987fd78c2956fde0c9fe8a9ab4b9154dc5671da", "html_url": "https://github.com/rust-lang/rust/commit/b987fd78c2956fde0c9fe8a9ab4b9154dc5671da"}], "stats": {"total": 10, "additions": 0, "deletions": 10}, "files": [{"sha": "14dc50dedc8bd727c18603be86f378ecd3583681", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1da8659fa6f4b73cd33885f7e0caeecd273a4e61/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1da8659fa6f4b73cd33885f7e0caeecd273a4e61/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=1da8659fa6f4b73cd33885f7e0caeecd273a4e61", "patch": "@@ -2092,16 +2092,6 @@ crate struct Typedef {\n     crate item_type: Option<Type>,\n }\n \n-impl GetDefId for Typedef {\n-    fn def_id(&self) -> Option<DefId> {\n-        self.type_.def_id()\n-    }\n-\n-    fn def_id_full(&self, cache: &Cache) -> Option<DefId> {\n-        self.type_.def_id_full(cache)\n-    }\n-}\n-\n #[derive(Clone, Debug)]\n crate struct OpaqueTy {\n     crate bounds: Vec<GenericBound>,"}]}