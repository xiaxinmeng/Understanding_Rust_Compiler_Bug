{"sha": "d5ba3efed1e7e25014671fb9da5f23b98358d994", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1YmEzZWZlZDFlN2UyNTAxNDY3MWZiOWRhNWYyM2I5ODM1OGQ5OTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-23T08:14:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-23T08:14:17Z"}, "message": "Auto merge of #75465 - Aaron1011:feature/short-fn-def-span, r=estebank\n\nUse smaller def span for functions\n\nCurrently, the def span of a function encompasses the entire function\nsignature and body. However, this is usually unnecessarily verbose - when we are\npointing at an entire function in a diagnostic, we almost always want to\npoint at the signature. The actual contents of the body tends to be\nirrelevant to the diagnostic we are emitting, and just takes up\nadditional screen space.\n\nThis commit changes the `def_span` of all function items (freestanding\nfunctions, `impl`-block methods, and `trait`-block methods) to be the\nspan of the signature. For example, the function\n\n```rust\npub fn foo<T>(val: T) -> T { val }\n```\n\nnow has a `def_span` corresponding to `pub fn foo<T>(val: T) -> T`\n(everything before the opening curly brace).\n\nTrait methods without a body have a `def_span` which includes the\ntrailing semicolon. For example:\n\n```rust\ntrait Foo {\n    fn bar();\n}\n```\n\nthe function definition `Foo::bar` has a `def_span` of `fn bar();`\n\nThis makes our diagnostic output much shorter, and emphasizes\ninformation that is relevant to whatever diagnostic we are reporting.\n\nWe continue to use the full span (including the body) in a few of\nplaces:\n\n* MIR building uses the full span when building source scopes.\n* 'Outlives suggestions' use the full span to sort the diagnostics being\n  emitted.\n* The `#[rustc_on_unimplemented(enclosing_scope=\"in this scope\")]`\nattribute points the entire scope body.\n\nAll of these cases work only with local items, so we don't need to\nadd anything extra to crate metadata.", "tree": {"sha": "943373acd06d4cb36c29f3e2f27a7a9a914d737d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/943373acd06d4cb36c29f3e2f27a7a9a914d737d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5ba3efed1e7e25014671fb9da5f23b98358d994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5ba3efed1e7e25014671fb9da5f23b98358d994", "html_url": "https://github.com/rust-lang/rust/commit/d5ba3efed1e7e25014671fb9da5f23b98358d994", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5ba3efed1e7e25014671fb9da5f23b98358d994/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5abc8d3b2e14c8793182b427520497a90b6de83", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5abc8d3b2e14c8793182b427520497a90b6de83", "html_url": "https://github.com/rust-lang/rust/commit/d5abc8d3b2e14c8793182b427520497a90b6de83"}, {"sha": "e3cd43eb0093a59c4ba98e44c13a8dacc9f4f9b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3cd43eb0093a59c4ba98e44c13a8dacc9f4f9b1", "html_url": "https://github.com/rust-lang/rust/commit/e3cd43eb0093a59c4ba98e44c13a8dacc9f4f9b1"}], "stats": {"total": 921, "additions": 345, "deletions": 576}, "files": [{"sha": "127a53cad2b30481776766e72d9058aade43c100", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1671,6 +1671,7 @@ pub struct MutTy {\n pub struct FnSig {\n     pub header: FnHeader,\n     pub decl: P<FnDecl>,\n+    pub span: Span,\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]"}, {"sha": "965571aaa548ee7e0f8e168b581d44e58498733b", "filename": "src/librustc_ast/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_ast%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_ast%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fmut_visit.rs?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -363,9 +363,10 @@ pub fn visit_bounds<T: MutVisitor>(bounds: &mut GenericBounds, vis: &mut T) {\n }\n \n // No `noop_` prefix because there isn't a corresponding method in `MutVisitor`.\n-pub fn visit_fn_sig<T: MutVisitor>(FnSig { header, decl }: &mut FnSig, vis: &mut T) {\n+pub fn visit_fn_sig<T: MutVisitor>(FnSig { header, decl, span }: &mut FnSig, vis: &mut T) {\n     vis.visit_fn_header(header);\n     vis.visit_fn_decl(decl);\n+    vis.visit_span(span);\n }\n \n // No `noop_` prefix because there isn't a corresponding method in `MutVisitor`."}, {"sha": "f3309afec7d6b01ecd9f4fb600ed04290985d5f3", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -263,7 +263,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let (ty, body_id) = self.lower_const_item(t, span, e.as_deref());\n                 hir::ItemKind::Const(ty, body_id)\n             }\n-            ItemKind::Fn(_, FnSig { ref decl, header }, ref generics, ref body) => {\n+            ItemKind::Fn(\n+                _,\n+                FnSig { ref decl, header, span: fn_sig_span },\n+                ref generics,\n+                ref body,\n+            ) => {\n                 let fn_def_id = self.resolver.local_def_id(id);\n                 self.with_new_scopes(|this| {\n                     this.current_item = Some(ident.span);\n@@ -290,7 +295,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             )\n                         },\n                     );\n-                    let sig = hir::FnSig { decl, header: this.lower_fn_header(header) };\n+                    let sig = hir::FnSig {\n+                        decl,\n+                        header: this.lower_fn_header(header),\n+                        span: fn_sig_span,\n+                    };\n                     hir::ItemKind::Fn(sig, generics, body_id)\n                 })\n             }\n@@ -1243,7 +1252,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 )\n             },\n         );\n-        (generics, hir::FnSig { header, decl })\n+        (generics, hir::FnSig { header, decl, span: sig.span })\n     }\n \n     fn lower_fn_header(&mut self, h: FnHeader) -> hir::FnHeader {"}, {"sha": "849e8b136e12db756fa49df97920d2c04ade09aa", "filename": "src/librustc_builtin_macros/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -924,6 +924,7 @@ impl<'a> MethodDef<'a> {\n         let sig = ast::FnSig {\n             header: ast::FnHeader { unsafety, ext: ast::Extern::None, ..ast::FnHeader::default() },\n             decl: fn_decl,\n+            span: trait_.span,\n         };\n         let def = ast::Defaultness::Final;\n "}, {"sha": "8478fcfbf09a6725f68f647a6c79dd226aebbc6d", "filename": "src/librustc_builtin_macros/global_allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fglobal_allocator.rs?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -67,7 +67,7 @@ impl AllocFnFactory<'_, '_> {\n         let (output_ty, output_expr) = self.ret_ty(&method.output, result);\n         let decl = self.cx.fn_decl(abi_args, ast::FnRetTy::Ty(output_ty));\n         let header = FnHeader { unsafety: Unsafe::Yes(self.span), ..FnHeader::default() };\n-        let sig = FnSig { decl, header };\n+        let sig = FnSig { decl, header, span: self.span };\n         let block = Some(self.cx.block_expr(output_expr));\n         let kind = ItemKind::Fn(ast::Defaultness::Final, sig, Generics::default(), block);\n         let item = self.cx.item("}, {"sha": "0ea60665d67552bb92346ef402b565a0a016eff5", "filename": "src/librustc_builtin_macros/test_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest_harness.rs?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -318,7 +318,7 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n     };\n \n     let decl = ecx.fn_decl(vec![], ast::FnRetTy::Ty(main_ret_ty));\n-    let sig = ast::FnSig { decl, header: ast::FnHeader::default() };\n+    let sig = ast::FnSig { decl, header: ast::FnHeader::default(), span: sp };\n     let def = ast::Defaultness::Final;\n     let main = ast::ItemKind::Fn(def, sig, ast::Generics::default(), Some(main_body));\n "}, {"sha": "cd4185226dce5c767f4d82f3677c5a7b71772c70", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1851,6 +1851,7 @@ pub struct MutTy<'hir> {\n pub struct FnSig<'hir> {\n     pub header: FnHeader,\n     pub decl: &'hir FnDecl<'hir>,\n+    pub span: Span,\n }\n \n // The bodies for items are stored \"out of line\", in a separate"}, {"sha": "1e57411f9c54ff1900d11c33ec52f3d2e6d0ccad", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -828,13 +828,24 @@ impl<'hir> Map<'hir> {\n         attrs.unwrap_or(&[])\n     }\n \n+    /// Gets the span of the definition of the specified HIR node.\n+    /// This is used by `tcx.get_span`\n     pub fn span(&self, hir_id: HirId) -> Span {\n         match self.find_entry(hir_id).map(|entry| entry.node) {\n             Some(Node::Param(param)) => param.span,\n-            Some(Node::Item(item)) => item.span,\n+            Some(Node::Item(item)) => match &item.kind {\n+                ItemKind::Fn(sig, _, _) => sig.span,\n+                _ => item.span,\n+            },\n             Some(Node::ForeignItem(foreign_item)) => foreign_item.span,\n-            Some(Node::TraitItem(trait_method)) => trait_method.span,\n-            Some(Node::ImplItem(impl_item)) => impl_item.span,\n+            Some(Node::TraitItem(trait_item)) => match &trait_item.kind {\n+                TraitItemKind::Fn(sig, _) => sig.span,\n+                _ => trait_item.span,\n+            },\n+            Some(Node::ImplItem(impl_item)) => match &impl_item.kind {\n+                ImplItemKind::Fn(sig, _) => sig.span,\n+                _ => impl_item.span,\n+            },\n             Some(Node::Variant(variant)) => variant.span,\n             Some(Node::Field(field)) => field.span,\n             Some(Node::AnonConst(constant)) => self.body(constant.body).value.span,\n@@ -866,6 +877,18 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    /// Like `hir.span()`, but includes the body of function items\n+    /// (instead of just the function header)\n+    pub fn span_with_body(&self, hir_id: HirId) -> Span {\n+        match self.find_entry(hir_id).map(|entry| entry.node) {\n+            Some(Node::TraitItem(item)) => item.span,\n+            Some(Node::ImplItem(impl_item)) => impl_item.span,\n+            Some(Node::Item(item)) => item.span,\n+            Some(_) => self.span(hir_id),\n+            _ => bug!(\"hir::map::Map::span_with_body: id not in map: {:?}\", hir_id),\n+        }\n+    }\n+\n     pub fn span_if_local(&self, id: DefId) -> Option<Span> {\n         id.as_local().map(|id| self.span(self.local_def_id_to_hir_id(id)))\n     }"}, {"sha": "a775fa59c1b9dce220554c6197a3568f600462eb", "filename": "src/librustc_mir/borrow_check/diagnostics/outlives_suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Foutlives_suggestion.rs?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -257,7 +257,7 @@ impl OutlivesSuggestionBuilder {\n         };\n \n         // We want this message to appear after other messages on the mir def.\n-        let mir_span = mbcx.infcx.tcx.def_span(mbcx.mir_def_id);\n+        let mir_span = mbcx.body.span;\n         diag.sort_span = mir_span.shrink_to_hi();\n \n         // Buffer the diagnostic"}, {"sha": "d3c1aa50400e49ed2b33cd889e5e7668c5a7cd36", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -37,22 +37,29 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n     let id = tcx.hir().local_def_id_to_hir_id(def.did);\n \n     // Figure out what primary body this item has.\n-    let (body_id, return_ty_span) = match tcx.hir().get(id) {\n+    let (body_id, return_ty_span, span_with_body) = match tcx.hir().get(id) {\n         Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(_, decl, body_id, _, _), .. }) => {\n-            (*body_id, decl.output.span())\n+            (*body_id, decl.output.span(), None)\n         }\n         Node::Item(hir::Item {\n             kind: hir::ItemKind::Fn(hir::FnSig { decl, .. }, _, body_id),\n+            span,\n             ..\n         })\n         | Node::ImplItem(hir::ImplItem {\n             kind: hir::ImplItemKind::Fn(hir::FnSig { decl, .. }, body_id),\n+            span,\n             ..\n         })\n         | Node::TraitItem(hir::TraitItem {\n             kind: hir::TraitItemKind::Fn(hir::FnSig { decl, .. }, hir::TraitFn::Provided(body_id)),\n+            span,\n             ..\n-        }) => (*body_id, decl.output.span()),\n+        }) => {\n+            // Use the `Span` of the `Item/ImplItem/TraitItem` as the body span,\n+            // since the def span of a function does not include the body\n+            (*body_id, decl.output.span(), Some(*span))\n+        }\n         Node::Item(hir::Item {\n             kind: hir::ItemKind::Static(ty, _, body_id) | hir::ItemKind::Const(ty, body_id),\n             ..\n@@ -61,12 +68,16 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n         | Node::TraitItem(hir::TraitItem {\n             kind: hir::TraitItemKind::Const(ty, Some(body_id)),\n             ..\n-        }) => (*body_id, ty.span),\n-        Node::AnonConst(hir::AnonConst { body, hir_id, .. }) => (*body, tcx.hir().span(*hir_id)),\n+        }) => (*body_id, ty.span, None),\n+        Node::AnonConst(hir::AnonConst { body, hir_id, .. }) => (*body, tcx.hir().span(*hir_id), None),\n \n         _ => span_bug!(tcx.hir().span(id), \"can't build MIR for {:?}\", def.did),\n     };\n \n+    // If we don't have a specialized span for the body, just use the\n+    // normal def span.\n+    let span_with_body = span_with_body.unwrap_or_else(|| tcx.hir().span(id));\n+\n     tcx.infer_ctxt().enter(|infcx| {\n         let cx = Cx::new(&infcx, def, id);\n         let body = if let Some(ErrorReported) = cx.typeck_results().tainted_by_errors {\n@@ -167,6 +178,7 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n                 return_ty,\n                 return_ty_span,\n                 body,\n+                span_with_body\n             );\n             mir.yield_ty = yield_ty;\n             mir\n@@ -571,6 +583,7 @@ fn construct_fn<'a, 'tcx, A>(\n     return_ty: Ty<'tcx>,\n     return_ty_span: Span,\n     body: &'tcx hir::Body<'tcx>,\n+    span_with_body: Span\n ) -> Body<'tcx>\n where\n     A: Iterator<Item = ArgInfo<'tcx>>,\n@@ -585,7 +598,7 @@ where\n \n     let mut builder = Builder::new(\n         hir,\n-        span,\n+        span_with_body,\n         arguments.len(),\n         safety,\n         return_ty,\n@@ -628,7 +641,7 @@ where\n                 )\n             );\n             // Attribute epilogue to function's closing brace\n-            let fn_end = span.shrink_to_hi();\n+            let fn_end = span_with_body.shrink_to_hi();\n             let source_info = builder.source_info(fn_end);\n             let return_block = builder.return_block();\n             builder.cfg.goto(block, source_info, return_block);"}, {"sha": "fd2d5a4abd424196071f70e2c65fcaadcdcbc65f", "filename": "src/librustc_mir_build/lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_mir_build%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_mir_build%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Flints.rs?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -38,7 +38,7 @@ crate fn check<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: LocalDefId) {\n         vis.reachable_recursive_calls.sort();\n \n         let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-        let sp = tcx.sess.source_map().guess_head_span(tcx.hir().span(hir_id));\n+        let sp = tcx.sess.source_map().guess_head_span(tcx.hir().span_with_body(hir_id));\n         tcx.struct_span_lint_hir(UNCONDITIONAL_RECURSION, hir_id, sp, |lint| {\n             let mut db = lint.build(\"function cannot return without recursing\");\n             db.span_label(sp, \"cannot return without recursing\");"}, {"sha": "9143af651df2d35d4614701eb2b18b3db5bc8b5d", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -227,7 +227,7 @@ impl<'a> Parser<'a> {\n             (Ident::invalid(), ItemKind::Use(P(tree)))\n         } else if self.check_fn_front_matter() {\n             // FUNCTION ITEM\n-            let (ident, sig, generics, body) = self.parse_fn(attrs, req_name)?;\n+            let (ident, sig, generics, body) = self.parse_fn(attrs, req_name, lo)?;\n             (ident, ItemKind::Fn(def(), sig, generics, body))\n         } else if self.eat_keyword(kw::Extern) {\n             if self.eat_keyword(kw::Crate) {\n@@ -1492,21 +1492,31 @@ impl<'a> Parser<'a> {\n         &mut self,\n         attrs: &mut Vec<Attribute>,\n         req_name: ReqName,\n+        sig_lo: Span,\n     ) -> PResult<'a, (Ident, FnSig, Generics, Option<P<Block>>)> {\n         let header = self.parse_fn_front_matter()?; // `const ... fn`\n         let ident = self.parse_ident()?; // `foo`\n         let mut generics = self.parse_generics()?; // `<'a, T, ...>`\n         let decl = self.parse_fn_decl(req_name, AllowPlus::Yes)?; // `(p: u8, ...)`\n         generics.where_clause = self.parse_where_clause()?; // `where T: Ord`\n-        let body = self.parse_fn_body(attrs)?; // `;` or `{ ... }`.\n-        Ok((ident, FnSig { header, decl }, generics, body))\n+\n+        let mut sig_hi = self.prev_token.span;\n+        let body = self.parse_fn_body(attrs, &mut sig_hi)?; // `;` or `{ ... }`.\n+        let fn_sig_span = sig_lo.to(sig_hi);\n+        Ok((ident, FnSig { header, decl, span: fn_sig_span }, generics, body))\n     }\n \n     /// Parse the \"body\" of a function.\n     /// This can either be `;` when there's no body,\n     /// or e.g. a block when the function is a provided one.\n-    fn parse_fn_body(&mut self, attrs: &mut Vec<Attribute>) -> PResult<'a, Option<P<Block>>> {\n+    fn parse_fn_body(\n+        &mut self,\n+        attrs: &mut Vec<Attribute>,\n+        sig_hi: &mut Span,\n+    ) -> PResult<'a, Option<P<Block>>> {\n         let (inner_attrs, body) = if self.check(&token::Semi) {\n+            // Include the trailing semicolon in the span of the signature\n+            *sig_hi = self.token.span;\n             self.bump(); // `;`\n             (Vec::new(), None)\n         } else if self.check(&token::OpenDelim(token::Brace)) || self.token.is_whole_block() {"}, {"sha": "6dd7f89d594869d97a2849bada2ad0c14524cd8a", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -377,7 +377,7 @@ impl<'hir> Sig for hir::Item<'hir> {\n \n                 Ok(extend_sig(ty, text, defs, vec![]))\n             }\n-            hir::ItemKind::Fn(hir::FnSig { ref decl, header }, ref generics, _) => {\n+            hir::ItemKind::Fn(hir::FnSig { ref decl, header, span: _ }, ref generics, _) => {\n                 let mut text = String::new();\n                 if let hir::Constness::Const = header.constness {\n                     text.push_str(\"const \");"}, {"sha": "28542d4b12ed914cdff52d98e609eff6746a165e", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -399,16 +399,17 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             err.note(s.as_str());\n                         }\n                         if let Some(ref s) = enclosing_scope {\n-                            let enclosing_scope_span = tcx.def_span(\n-                                tcx.hir()\n-                                    .opt_local_def_id(obligation.cause.body_id)\n-                                    .unwrap_or_else(|| {\n-                                        tcx.hir().body_owner_def_id(hir::BodyId {\n-                                            hir_id: obligation.cause.body_id,\n-                                        })\n+                            let body = tcx\n+                                .hir()\n+                                .opt_local_def_id(obligation.cause.body_id)\n+                                .unwrap_or_else(|| {\n+                                    tcx.hir().body_owner_def_id(hir::BodyId {\n+                                        hir_id: obligation.cause.body_id,\n                                     })\n-                                    .to_def_id(),\n-                            );\n+                                });\n+\n+                            let enclosing_scope_span =\n+                                tcx.hir().span_with_body(tcx.hir().local_def_id_to_hir_id(body));\n \n                             err.span_label(enclosing_scope_span, s.as_str());\n                         }"}, {"sha": "1b472810ccf1d1950a8abb5072ca0ef93545a4cc", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1543,7 +1543,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n         }\n \n         TraitItem(hir::TraitItem {\n-            kind: TraitItemKind::Fn(FnSig { header, decl }, _),\n+            kind: TraitItemKind::Fn(FnSig { header, decl, span: _ }, _),\n             ident,\n             generics,\n             .."}, {"sha": "b709fae5a8e569ebd09a5bff0a0c8dd487243974", "filename": "src/test/ui/associated-types/bound-lifetime-in-binding-only.ok.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.ok.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -2,7 +2,7 @@ error: fatal error triggered by #[rustc_error]\n   --> $DIR/bound-lifetime-in-binding-only.rs:71:1\n    |\n LL | fn main() { }\n-   | ^^^^^^^^^^^^^\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1c0d3ac105852a78f56f2c75c0c382f8348c981b", "filename": "src/test/ui/associated-types/bound-lifetime-in-return-only.ok.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.ok.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -2,7 +2,7 @@ error: fatal error triggered by #[rustc_error]\n   --> $DIR/bound-lifetime-in-return-only.rs:49:1\n    |\n LL | fn main() { }\n-   | ^^^^^^^^^^^^^\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ed900079cfc223970ce1e4f502b5b363cc05d45e", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.ok.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.ok.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -2,7 +2,7 @@ error: fatal error triggered by #[rustc_error]\n   --> $DIR/project-fn-ret-contravariant.rs:50:1\n    |\n LL | fn main() { }\n-   | ^^^^^^^^^^^^^\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ed900079cfc223970ce1e4f502b5b363cc05d45e", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.oneuse.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.oneuse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.oneuse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.oneuse.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -2,7 +2,7 @@ error: fatal error triggered by #[rustc_error]\n   --> $DIR/project-fn-ret-contravariant.rs:50:1\n    |\n LL | fn main() { }\n-   | ^^^^^^^^^^^^^\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "c340850094857f62b2aed2e42d2fa07b5dfa31f0", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.ok.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.ok.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -2,7 +2,7 @@ error: fatal error triggered by #[rustc_error]\n   --> $DIR/project-fn-ret-invariant.rs:60:1\n    |\n LL | fn main() {}\n-   | ^^^^^^^^^^^^\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1dc41a2165fff9ce5a8d317bbcf2de779e1d721d", "filename": "src/test/ui/associated-types/higher-ranked-projection.good.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,11 +1,8 @@\n error: fatal error triggered by #[rustc_error]\n   --> $DIR/higher-ranked-projection.rs:24:1\n    |\n-LL | / fn main() {\n-LL | |     foo(());\n-LL | |\n-LL | | }\n-   | |_^\n+LL | fn main() {\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f65bbeaa31a732b0d0593093569e79d054f0b056", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-no-fg.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -25,28 +25,16 @@ LL | async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ret-impl-trait-no-fg.rs:9:1\n    |\n-LL | / async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |     (a, b)\n-LL | | }\n-   | |_^\n+LL | async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: hidden type `(&u8, &u8)` captures lifetime '_#5r\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ret-impl-trait-no-fg.rs:9:1\n    |\n-LL | / async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |     (a, b)\n-LL | | }\n-   | |_^\n+LL | async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: hidden type `(&u8, &u8)` captures lifetime '_#6r\n "}, {"sha": "560c9c2fbef4ff9c6ca6b3a7b6a7b3aa72aac907", "filename": "src/test/ui/block-result/issue-20862.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -12,16 +12,13 @@ LL |     |y| x + y\n error[E0618]: expected function, found `()`\n   --> $DIR/issue-20862.rs:7:13\n    |\n-LL | / fn foo(x: i32) {\n-LL | |     |y| x + y\n-LL | |\n-LL | | }\n-   | |_- `foo` defined here returns `()`\n+LL | fn foo(x: i32) {\n+   | -------------- `foo` defined here returns `()`\n ...\n-LL |       let x = foo(5)(2);\n-   |               ^^^^^^---\n-   |               |\n-   |               call expression requires function\n+LL |     let x = foo(5)(2);\n+   |             ^^^^^^---\n+   |             |\n+   |             call expression requires function\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2c1c3c2dc967d53f3982e7fed9bd3dc12f74c591", "filename": "src/test/ui/codemap_tests/coherence-overlapping-inherent-impl-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -2,9 +2,9 @@ error[E0592]: duplicate definitions with name `f`\n   --> $DIR/coherence-overlapping-inherent-impl-trait.rs:4:14\n    |\n LL | impl dyn C { fn f() {} }\n-   |              ^^^^^^^^^ duplicate definitions for `f`\n+   |              ^^^^^^ duplicate definitions for `f`\n LL | impl dyn C { fn f() {} }\n-   |              --------- other definition for `f`\n+   |              ------ other definition for `f`\n \n error: aborting due to previous error\n "}, {"sha": "6fca12e1823ddfd452398448d24e41e05cf59064", "filename": "src/test/ui/codemap_tests/overlapping_inherent_impls.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_inherent_impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_inherent_impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_inherent_impls.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -2,28 +2,28 @@ error[E0592]: duplicate definitions with name `id`\n   --> $DIR/overlapping_inherent_impls.rs:9:5\n    |\n LL |     fn id() {}\n-   |     ^^^^^^^^^^ duplicate definitions for `id`\n+   |     ^^^^^^^ duplicate definitions for `id`\n ...\n LL |     fn id() {}\n-   |     ---------- other definition for `id`\n+   |     ------- other definition for `id`\n \n error[E0592]: duplicate definitions with name `bar`\n   --> $DIR/overlapping_inherent_impls.rs:19:5\n    |\n LL |     fn bar(&self) {}\n-   |     ^^^^^^^^^^^^^^^^ duplicate definitions for `bar`\n+   |     ^^^^^^^^^^^^^ duplicate definitions for `bar`\n ...\n LL |     fn bar(&self) {}\n-   |     ---------------- other definition for `bar`\n+   |     ------------- other definition for `bar`\n \n error[E0592]: duplicate definitions with name `baz`\n   --> $DIR/overlapping_inherent_impls.rs:29:5\n    |\n LL |     fn baz(&self) {}\n-   |     ^^^^^^^^^^^^^^^^ duplicate definitions for `baz`\n+   |     ^^^^^^^^^^^^^ duplicate definitions for `baz`\n ...\n LL |     fn baz(&self) {}\n-   |     ---------------- other definition for `baz`\n+   |     ------------- other definition for `baz`\n    |\n    = note: upstream crates may add a new impl of trait `std::marker::Copy` for type `std::vec::Vec<_>` in future versions\n "}, {"sha": "4701bc0b139736890b28c68d26394124c6c0deb4", "filename": "src/test/ui/coherence/coherence-inherited-subtyping.old.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-subtyping.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-subtyping.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-subtyping.old.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -2,10 +2,10 @@ error[E0592]: duplicate definitions with name `method1`\n   --> $DIR/coherence-inherited-subtyping.rs:14:5\n    |\n LL |     fn method1(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `method1`\n+   |     ^^^^^^^^^^^^^^^^^ duplicate definitions for `method1`\n ...\n LL |     fn method1(&self) {}\n-   |     -------------------- other definition for `method1`\n+   |     ----------------- other definition for `method1`\n    |\n    = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n "}, {"sha": "4701bc0b139736890b28c68d26394124c6c0deb4", "filename": "src/test/ui/coherence/coherence-inherited-subtyping.re.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-subtyping.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-subtyping.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-subtyping.re.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -2,10 +2,10 @@ error[E0592]: duplicate definitions with name `method1`\n   --> $DIR/coherence-inherited-subtyping.rs:14:5\n    |\n LL |     fn method1(&self) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `method1`\n+   |     ^^^^^^^^^^^^^^^^^ duplicate definitions for `method1`\n ...\n LL |     fn method1(&self) {}\n-   |     -------------------- other definition for `method1`\n+   |     ----------------- other definition for `method1`\n    |\n    = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n "}, {"sha": "bbce4b530b4d6558845e285ef57a97a8b128afd5", "filename": "src/test/ui/coherence/coherence-overlap-downstream-inherent.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream-inherent.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -2,19 +2,19 @@ error[E0592]: duplicate definitions with name `dummy`\n   --> $DIR/coherence-overlap-downstream-inherent.rs:7:26\n    |\n LL | impl<T:Sugar> Sweet<T> { fn dummy(&self) { } }\n-   |                          ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n+   |                          ^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n LL |\n LL | impl<T:Fruit> Sweet<T> { fn dummy(&self) { } }\n-   |                          ------------------- other definition for `dummy`\n+   |                          --------------- other definition for `dummy`\n \n error[E0592]: duplicate definitions with name `f`\n   --> $DIR/coherence-overlap-downstream-inherent.rs:13:38\n    |\n LL | impl<X, T> A<T, X> where T: Bar<X> { fn f(&self) {} }\n-   |                                      ^^^^^^^^^^^^^^ duplicate definitions for `f`\n+   |                                      ^^^^^^^^^^^ duplicate definitions for `f`\n LL |\n LL | impl<X> A<i32, X> { fn f(&self) {} }\n-   |                     -------------- other definition for `f`\n+   |                     ----------- other definition for `f`\n    |\n    = note: downstream crates may implement trait `Bar<_>` for type `i32`\n "}, {"sha": "3ad818cbc36dd789a82d2bfb11c041ddca4f451f", "filename": "src/test/ui/coherence/coherence-overlap-issue-23516-inherent.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516-inherent.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -2,10 +2,10 @@ error[E0592]: duplicate definitions with name `dummy`\n   --> $DIR/coherence-overlap-issue-23516-inherent.rs:9:25\n    |\n LL | impl<T:Sugar> Cake<T> { fn dummy(&self) { } }\n-   |                         ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n+   |                         ^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n LL |\n LL | impl<U:Sugar> Cake<Box<U>> { fn dummy(&self) { } }\n-   |                              ------------------- other definition for `dummy`\n+   |                              --------------- other definition for `dummy`\n    |\n    = note: downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`\n "}, {"sha": "f355c6e855ce1f535538c8797fc1520b10c12a2e", "filename": "src/test/ui/coherence/coherence-overlap-upstream-inherent.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream-inherent.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -2,10 +2,10 @@ error[E0592]: duplicate definitions with name `dummy`\n   --> $DIR/coherence-overlap-upstream-inherent.rs:12:32\n    |\n LL | impl<T> A<T> where T: Remote { fn dummy(&self) { } }\n-   |                                ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n+   |                                ^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n LL |\n LL | impl A<i16> { fn dummy(&self) { } }\n-   |               ------------------- other definition for `dummy`\n+   |               --------------- other definition for `dummy`\n    |\n    = note: upstream crates may add a new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n "}, {"sha": "933ed5e89e58b35d73294dcfe57dd3c29116cd0b", "filename": "src/test/ui/duplicate/dupe-symbols-1.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-1.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,10 +1,8 @@\n error: symbol `fail` is already defined\n   --> $DIR/dupe-symbols-1.rs:12:1\n    |\n-LL | / pub fn b() {\n-LL | |\n-LL | | }\n-   | |_^\n+LL | pub fn b() {\n+   | ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1b29edfb65598ca853b39a0576a6c4f55a8991de", "filename": "src/test/ui/duplicate/dupe-symbols-2.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-2.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,10 +1,8 @@\n error: symbol `fail` is already defined\n   --> $DIR/dupe-symbols-2.rs:15:5\n    |\n-LL | /     pub extern fn fail() {\n-LL | |\n-LL | |     }\n-   | |_____^\n+LL |     pub extern fn fail() {\n+   |     ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "6300b4908d1960096d5f652e878c3c30d5a98b01", "filename": "src/test/ui/duplicate/dupe-symbols-3.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-3.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,10 +1,8 @@\n error: symbol `fail` is already defined\n   --> $DIR/dupe-symbols-3.rs:12:1\n    |\n-LL | / pub fn fail() {\n-LL | |\n-LL | | }\n-   | |_^\n+LL | pub fn fail() {\n+   | ^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1407a4883e16e8ca4db3f05db35dbfdfe8481df6", "filename": "src/test/ui/duplicate/dupe-symbols-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-4.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -2,7 +2,7 @@ error: symbol `fail` is already defined\n   --> $DIR/dupe-symbols-4.rs:23:5\n    |\n LL |     fn fail(self) {}\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "558f868a0c6212bba4d937f65c66f822a1b40506", "filename": "src/test/ui/duplicate/dupe-symbols-5.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-5.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,10 +1,8 @@\n error: symbol `fail` is already defined\n   --> $DIR/dupe-symbols-5.rs:11:1\n    |\n-LL | / pub fn b() {\n-LL | |\n-LL | | }\n-   | |_^\n+LL | pub fn b() {\n+   | ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1455f0e75abb7d31250217b2d29fefe941db1de3", "filename": "src/test/ui/duplicate/dupe-symbols-7.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-7.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -2,7 +2,7 @@ error: entry symbol `main` declared multiple times\n   --> $DIR/dupe-symbols-7.rs:12:1\n    |\n LL | fn main(){}\n-   | ^^^^^^^^^^^\n+   | ^^^^^^^^^\n    |\n    = help: did you use `#[no_mangle]` on `fn main`? Use `#[start]` instead\n "}, {"sha": "8d6a79e12d9e834e1272472dcfb6cd4f09e26e1e", "filename": "src/test/ui/duplicate/dupe-symbols-8.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-8.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,13 +1,8 @@\n error: entry symbol `main` declared multiple times\n   --> $DIR/dupe-symbols-8.rs:7:1\n    |\n-LL | / fn main() {\n-LL | |     extern \"Rust\" {\n-LL | |      fn main();\n-LL | |     }\n-LL | |     unsafe { main(); }\n-LL | | }\n-   | |_^\n+LL | fn main() {\n+   | ^^^^^^^^^\n    |\n    = help: did you use `#[no_mangle]` on `fn main`? Use `#[start]` instead\n "}, {"sha": "6d078dfbd20536cb806e2a600e425002cb955dd8", "filename": "src/test/ui/duplicate_entry_error.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fduplicate_entry_error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fduplicate_entry_error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate_entry_error.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,11 +1,8 @@\n error[E0152]: found duplicate lang item `panic_impl`\n   --> $DIR/duplicate_entry_error.rs:11:1\n    |\n-LL | / fn panic_impl(info: &PanicInfo) -> ! {\n-LL | |\n-LL | |     loop {}\n-LL | | }\n-   | |_^\n+LL | fn panic_impl(info: &PanicInfo) -> ! {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the lang item is first defined in crate `std` (which `duplicate_entry_error` depends on)\n    = note: first definition in `std` loaded from SYSROOT/libstd-*.rlib"}, {"sha": "953a626bf9556438f6ed7aa5dcfd14715f4166d1", "filename": "src/test/ui/error-codes/E0445.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ferror-codes%2FE0445.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ferror-codes%2FE0445.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0445.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -14,7 +14,7 @@ error[E0445]: private trait `Foo` in public interface\n   --> $DIR/E0445.rs:9:1\n    |\n LL | pub fn foo<T: Foo> (t: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n \n error: aborting due to 3 previous errors\n "}, {"sha": "bb009260979741ba17f7064708712a37b0c3eb38", "filename": "src/test/ui/error-codes/E0446.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ferror-codes%2FE0446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ferror-codes%2FE0446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0446.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,13 +1,11 @@\n error[E0446]: private type `foo::Bar` in public interface\n   --> $DIR/E0446.rs:4:5\n    |\n-LL |       struct Bar(u32);\n-   |       - `foo::Bar` declared as private\n+LL |     struct Bar(u32);\n+   |     - `foo::Bar` declared as private\n LL | \n-LL | /     pub fn bar() -> Bar {\n-LL | |         Bar(0)\n-LL | |     }\n-   | |_____^ can't leak private type\n+LL |     pub fn bar() -> Bar {\n+   |     ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error: aborting due to previous error\n "}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_vs_bound_a.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,14 +1,8 @@\n error: fatal error triggered by #[rustc_error]\n   --> $DIR/hr-subtype.rs:102:1\n    |\n-LL | / fn main() {\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |\n-LL | | }\n-   | |_^\n+LL | fn main() {\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_bound_a.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_a.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,14 +1,8 @@\n error: fatal error triggered by #[rustc_error]\n   --> $DIR/hr-subtype.rs:102:1\n    |\n-LL | / fn main() {\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |\n-LL | | }\n-   | |_^\n+LL | fn main() {\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_bound_b.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_bound_b.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,14 +1,8 @@\n error: fatal error triggered by #[rustc_error]\n   --> $DIR/hr-subtype.rs:102:1\n    |\n-LL | / fn main() {\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |\n-LL | | }\n-   | |_^\n+LL | fn main() {\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,14 +1,8 @@\n error: fatal error triggered by #[rustc_error]\n   --> $DIR/hr-subtype.rs:102:1\n    |\n-LL | / fn main() {\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |\n-LL | | }\n-   | |_^\n+LL | fn main() {\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,14 +1,8 @@\n error: fatal error triggered by #[rustc_error]\n   --> $DIR/hr-subtype.rs:102:1\n    |\n-LL | / fn main() {\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |\n-LL | | }\n-   | |_^\n+LL | fn main() {\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_vs_bound_co_b.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_vs_bound_co_b.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,14 +1,8 @@\n error: fatal error triggered by #[rustc_error]\n   --> $DIR/hr-subtype.rs:102:1\n    |\n-LL | / fn main() {\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |\n-LL | | }\n-   | |_^\n+LL | fn main() {\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,14 +1,8 @@\n error: fatal error triggered by #[rustc_error]\n   --> $DIR/hr-subtype.rs:102:1\n    |\n-LL | / fn main() {\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |\n-LL | | }\n-   | |_^\n+LL | fn main() {\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_vs_bound_inv_b.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,14 +1,8 @@\n error: fatal error triggered by #[rustc_error]\n   --> $DIR/hr-subtype.rs:102:1\n    |\n-LL | / fn main() {\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |\n-LL | | }\n-   | |_^\n+LL | fn main() {\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2bf78d122903aabd5a55cfaa116bf6994cd98e31", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_x.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_x.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,14 +1,8 @@\n error: fatal error triggered by #[rustc_error]\n   --> $DIR/hr-subtype.rs:102:1\n    |\n-LL | / fn main() {\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |\n-LL | | }\n-   | |_^\n+LL | fn main() {\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "bd08fc1bfaeead2c20d300194dbd164f7b32b43d", "filename": "src/test/ui/hrtb/issue-58451.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -5,8 +5,7 @@ LL | / fn f<I>(i: I)\n LL | | where\n LL | |     I: IntoIterator,\n LL | |     I::Item: for<'a> Into<&'a ()>,\n-LL | | {}\n-   | |__- defined here\n+   | |__________________________________- defined here\n ...\n LL |       f(&[f()]);\n    |           ^-- supplied 0 arguments"}, {"sha": "eb07d8905d60901f782a5de9012c727f163373c8", "filename": "src/test/ui/infinite/infinite-instantiation.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -7,13 +7,8 @@ LL |         function(counter - 1, t.to_option());\n note: `function` defined here\n   --> $DIR/infinite-instantiation.rs:19:1\n    |\n-LL | / fn function<T:ToOpt + Clone>(counter: usize, t: T) {\n-LL | |     if counter > 0 {\n-LL | |         function(counter - 1, t.to_option());\n-LL | |\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | fn function<T:ToOpt + Clone>(counter: usize, t: T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "6efc12df8fa2cabb23f788d01821411e3b6a1c06", "filename": "src/test/ui/issues/issue-16683.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -7,10 +7,8 @@ LL |         self.a();\n note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 3:5...\n   --> $DIR/issue-16683.rs:3:5\n    |\n-LL | /     fn b(&self) {\n-LL | |         self.a();\n-LL | |     }\n-   | |_____^\n+LL |     fn b(&self) {\n+   |     ^^^^^^^^^^^\n note: ...so that reference does not outlive borrowed content\n   --> $DIR/issue-16683.rs:4:9\n    |"}, {"sha": "9fe80232a14213728089cbeb79ad999930a733eb", "filename": "src/test/ui/issues/issue-17740.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -9,14 +9,8 @@ LL |     fn bar(self: &mut Foo) {\n note: the anonymous lifetime #2 defined on the method body at 6:5...\n   --> $DIR/issue-17740.rs:6:5\n    |\n-LL | /     fn bar(self: &mut Foo) {\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |\n-LL | |     }\n-   | |_____^\n+LL |     fn bar(self: &mut Foo) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 5:7\n   --> $DIR/issue-17740.rs:5:7\n    |\n@@ -39,14 +33,8 @@ LL | impl <'a> Foo<'a>{\n note: ...does not necessarily outlive the anonymous lifetime #2 defined on the method body at 6:5\n   --> $DIR/issue-17740.rs:6:5\n    |\n-LL | /     fn bar(self: &mut Foo) {\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |\n-LL | |     }\n-   | |_____^\n+LL |     fn bar(self: &mut Foo) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f82e0f53a23df2f7b600a5b665082ce6c14c2d35", "filename": "src/test/ui/issues/issue-17758.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -7,11 +7,8 @@ LL |         self.foo();\n note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 6:5...\n   --> $DIR/issue-17758.rs:6:5\n    |\n-LL | /     fn bar(&self) {\n-LL | |         self.foo();\n-LL | |\n-LL | |     }\n-   | |_____^\n+LL |     fn bar(&self) {\n+   |     ^^^^^^^^^^^^^\n note: ...so that reference does not outlive borrowed content\n   --> $DIR/issue-17758.rs:7:9\n    |"}, {"sha": "c762a4ab496c91780403d09bf125e8f2dd43ea25", "filename": "src/test/ui/issues/issue-17905-2.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -9,12 +9,8 @@ LL |     fn say(self: &Pair<&str, isize>) {\n note: the anonymous lifetime #2 defined on the method body at 8:5...\n   --> $DIR/issue-17905-2.rs:8:5\n    |\n-LL | /     fn say(self: &Pair<&str, isize>) {\n-LL | |\n-LL | |\n-LL | |         println!(\"{:?}\", self);\n-LL | |     }\n-   | |_____^\n+LL |     fn say(self: &Pair<&str, isize>) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...does not necessarily outlive the lifetime `'_` as defined on the impl at 5:5\n   --> $DIR/issue-17905-2.rs:5:5\n    |\n@@ -37,12 +33,8 @@ LL |     &str,\n note: ...does not necessarily outlive the anonymous lifetime #2 defined on the method body at 8:5\n   --> $DIR/issue-17905-2.rs:8:5\n    |\n-LL | /     fn say(self: &Pair<&str, isize>) {\n-LL | |\n-LL | |\n-LL | |         println!(\"{:?}\", self);\n-LL | |     }\n-   | |_____^\n+LL |     fn say(self: &Pair<&str, isize>) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1ab89e818e31e5409482adbf3799b312b7a1fbd1", "filename": "src/test/ui/issues/issue-20831-debruijn.stderr", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -15,14 +15,8 @@ LL | |     }\n note: the anonymous lifetime #2 defined on the method body at 28:5...\n   --> $DIR/issue-20831-debruijn.rs:28:5\n    |\n-LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-LL | |         // Not obvious, but there is an implicit lifetime here -------^\n-LL | |\n-LL | |\n-...  |\n-LL | |         self.sub = t;\n-LL | |     }\n-   | |_____^\n+LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 26:6\n   --> $DIR/issue-20831-debruijn.rs:26:6\n    |\n@@ -51,14 +45,8 @@ LL | impl<'a> Publisher<'a> for MyStruct<'a> {\n note: ...does not necessarily outlive the anonymous lifetime #2 defined on the method body at 28:5\n   --> $DIR/issue-20831-debruijn.rs:28:5\n    |\n-LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-LL | |         // Not obvious, but there is an implicit lifetime here -------^\n-LL | |\n-LL | |\n-...  |\n-LL | |         self.sub = t;\n-LL | |     }\n-   | |_____^\n+LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n   --> $DIR/issue-20831-debruijn.rs:28:33\n@@ -69,14 +57,8 @@ LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher\n note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the method body at 28:5...\n   --> $DIR/issue-20831-debruijn.rs:28:5\n    |\n-LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-LL | |         // Not obvious, but there is an implicit lifetime here -------^\n-LL | |\n-LL | |\n-...  |\n-LL | |         self.sub = t;\n-LL | |     }\n-   | |_____^\n+LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...but the lifetime must also be valid for the lifetime `'a` as defined on the impl at 26:6...\n   --> $DIR/issue-20831-debruijn.rs:26:6\n    |\n@@ -99,14 +81,8 @@ LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher\n note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the method body at 28:5...\n   --> $DIR/issue-20831-debruijn.rs:28:5\n    |\n-LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n-LL | |         // Not obvious, but there is an implicit lifetime here -------^\n-LL | |\n-LL | |\n-...  |\n-LL | |         self.sub = t;\n-LL | |     }\n-   | |_____^\n+LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...but the lifetime must also be valid for the lifetime `'a` as defined on the impl at 26:6...\n   --> $DIR/issue-20831-debruijn.rs:26:6\n    |"}, {"sha": "b0df46b11fadb30b787b6fe4d4f5f052300ed6c2", "filename": "src/test/ui/issues/issue-22638.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,12 +1,8 @@\n error: reached the type-length limit while instantiating `D::matches::$CLOSURE`\n   --> $DIR/issue-22638.rs:53:5\n    |\n-LL | /     pub fn matches<F: Fn()>(&self, f: &F) {\n-LL | |\n-LL | |         let &D(ref a) = self;\n-LL | |         a.matches(f)\n-LL | |     }\n-   | |_____^\n+LL |     pub fn matches<F: Fn()>(&self, f: &F) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: consider adding a `#![type_length_limit=\"30408681\"]` attribute to your crate\n "}, {"sha": "e67f297ffa77a65ceeee121679dbcf23218160f0", "filename": "src/test/ui/issues/issue-30079.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fissues%2Fissue-30079.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fissues%2Fissue-30079.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30079.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -2,7 +2,7 @@ warning: private type `m1::Priv` in public interface (error E0446)\n   --> $DIR/issue-30079.rs:6:9\n    |\n LL |         pub fn f(_: Priv) {}\n-   |         ^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(private_in_public)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "9a900d2fc9404b108d038512d9691a11c459b5e3", "filename": "src/test/ui/issues/issue-33140.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fissues%2Fissue-33140.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fissues%2Fissue-33140.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33140.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -19,15 +19,11 @@ LL | impl Trait2 for dyn Sync + Send + Sync {\n error[E0592]: duplicate definitions with name `abc`\n   --> $DIR/issue-33140.rs:29:5\n    |\n-LL | /     fn abc() -> bool {\n-LL | |         false\n-LL | |     }\n-   | |_____^ duplicate definitions for `abc`\n+LL |     fn abc() -> bool {\n+   |     ^^^^^^^^^^^^^^^^ duplicate definitions for `abc`\n ...\n-LL | /     fn abc() -> bool {\n-LL | |         true\n-LL | |     }\n-   | |_____- other definition for `abc`\n+LL |     fn abc() -> bool {\n+   |     ---------------- other definition for `abc`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "6229d90d4b477112990c56b6c480c44c029720a7", "filename": "src/test/ui/issues/issue-37311-type-length-limit/issue-37311.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,10 +1,8 @@\n error: reached the type-length limit while instantiating `<(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(...))))))))))))))) as Foo>::recurse`\n   --> $DIR/issue-37311.rs:15:5\n    |\n-LL | /     fn recurse(&self) {\n-LL | |         (self, self).recurse();\n-LL | |     }\n-   | |_____^\n+LL |     fn recurse(&self) {\n+   |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: consider adding a `#![type_length_limit=\"2097149\"]` attribute to your crate\n "}, {"sha": "5baa245b3cc2810b934e291507dc3b80dd996cb2", "filename": "src/test/ui/issues/issue-37884.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -14,13 +14,8 @@ LL | |     }\n note: the anonymous lifetime #1 defined on the method body at 6:5...\n   --> $DIR/issue-37884.rs:6:5\n    |\n-LL | /     fn next(&'a mut self) -> Option<Self::Item>\n-LL | |\n-LL | |\n-LL | |     {\n-LL | |         Some(&mut self.0)\n-LL | |     }\n-   | |_____^\n+LL |     fn next(&'a mut self) -> Option<Self::Item>\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 3:6\n   --> $DIR/issue-37884.rs:3:6\n    |"}, {"sha": "8243e52039d489233b0d61fd2c1d5212426bb5a7", "filename": "src/test/ui/issues/issue-67552.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -10,11 +10,7 @@ note: `rec` defined here\n LL | / fn rec<T>(mut it: T)\n LL | | where\n LL | |     T: Iterator,\n-LL | | {\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n+   | |________________^\n \n error: aborting due to previous error\n "}, {"sha": "59008151f1a5b711bf4f8475e13f1e353a72215c", "filename": "src/test/ui/issues/issue-8727.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -18,10 +18,8 @@ LL |     generic::<Option<T>>();\n note: `generic` defined here\n   --> $DIR/issue-8727.rs:6:1\n    |\n-LL | / fn generic<T>() {\n-LL | |     generic::<Option<T>>();\n-LL | | }\n-   | |_^\n+LL | fn generic<T>() {\n+   | ^^^^^^^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "ae7d5a98b0872afbc74d210803552ff6f3ff70fc", "filename": "src/test/ui/marker_trait_attr/marker-trait-with-associated-items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-trait-with-associated-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-trait-with-associated-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-trait-with-associated-items.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -32,7 +32,7 @@ error[E0714]: marker traits cannot have associated items\n   --> $DIR/marker-trait-with-associated-items.rs:36:5\n    |\n LL |     fn foo() {}\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "7631ca61e5e15d4c7e2e8420fd354ef2a1881a0b", "filename": "src/test/ui/nll/issue-52742.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -12,11 +12,8 @@ LL | impl Foo<'_, '_> {\n note: ...but the borrowed content is only valid for the anonymous lifetime #2 defined on the method body at 13:5\n   --> $DIR/issue-52742.rs:13:5\n    |\n-LL | /     fn take_bar(&mut self, b: Bar<'_>) {\n-LL | |         self.y = b.z\n-LL | |\n-LL | |     }\n-   | |_____^\n+LL |     fn take_bar(&mut self, b: Bar<'_>) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e24ef176db01e004b41b607b44d5af64c05d0c56", "filename": "src/test/ui/nll/issue-55394.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -7,10 +7,8 @@ LL |         Foo { bar }\n note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 8:5...\n   --> $DIR/issue-55394.rs:8:5\n    |\n-LL | /     fn new(bar: &mut Bar) -> Self {\n-LL | |         Foo { bar }\n-LL | |     }\n-   | |_____^\n+LL |     fn new(bar: &mut Bar) -> Self {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...so that reference does not outlive borrowed content\n   --> $DIR/issue-55394.rs:9:15\n    |"}, {"sha": "65ce05811211940ac04a507fe5fce3afdb24dda3", "filename": "src/test/ui/nll/type-alias-free-regions.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -7,10 +7,8 @@ LL |         C { f: b }\n note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 16:5...\n   --> $DIR/type-alias-free-regions.rs:16:5\n    |\n-LL | /     fn from_box(b: Box<B>) -> Self {\n-LL | |         C { f: b }\n-LL | |     }\n-   | |_____^\n+LL |     fn from_box(b: Box<B>) -> Self {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...so that the expression is assignable\n   --> $DIR/type-alias-free-regions.rs:17:16\n    |\n@@ -40,10 +38,8 @@ LL |         C { f: Box::new(b.0) }\n note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 26:5...\n   --> $DIR/type-alias-free-regions.rs:26:5\n    |\n-LL | /     fn from_tuple(b: (B,)) -> Self {\n-LL | |         C { f: Box::new(b.0) }\n-LL | |     }\n-   | |_____^\n+LL |     fn from_tuple(b: (B,)) -> Self {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...so that the expression is assignable\n   --> $DIR/type-alias-free-regions.rs:27:25\n    |"}, {"sha": "5e46da12142ff8b6b32df5f308d5e767e8361758", "filename": "src/test/ui/panic-handler/panic-handler-bad-signature-4.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-bad-signature-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-bad-signature-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-bad-signature-4.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,11 +1,8 @@\n error: should have no type parameters\n   --> $DIR/panic-handler-bad-signature-4.rs:9:1\n    |\n-LL | / fn panic<T>(pi: &PanicInfo) -> ! {\n-LL | |\n-LL | |     loop {}\n-LL | | }\n-   | |_^\n+LL | fn panic<T>(pi: &PanicInfo) -> ! {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "8cdc4888d022e1ff35d8db89772f660d776a0a98", "filename": "src/test/ui/panic-handler/panic-handler-duplicate.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-duplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-duplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-duplicate.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,18 +1,14 @@\n error[E0152]: found duplicate lang item `panic_impl`\n   --> $DIR/panic-handler-duplicate.rs:15:1\n    |\n-LL | / fn panic2(info: &PanicInfo) -> ! {\n-LL | |     loop {}\n-LL | | }\n-   | |_^\n+LL | fn panic2(info: &PanicInfo) -> ! {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lang item is first defined here\n   --> $DIR/panic-handler-duplicate.rs:10:1\n    |\n-LL | / fn panic(info: &PanicInfo) -> ! {\n-LL | |     loop {}\n-LL | | }\n-   | |_^\n+LL | fn panic(info: &PanicInfo) -> ! {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e4069b196ff04a31e3709d85b947fd0bda8f1141", "filename": "src/test/ui/panic-handler/panic-handler-std.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,10 +1,8 @@\n error[E0152]: found duplicate lang item `panic_impl`\n   --> $DIR/panic-handler-std.rs:8:1\n    |\n-LL | / fn panic(info: PanicInfo) -> ! {\n-LL | |     loop {}\n-LL | | }\n-   | |_^\n+LL | fn panic(info: PanicInfo) -> ! {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the lang item is first defined in crate `std` (which `panic_handler_std` depends on)\n    = note: first definition in `std` loaded from SYSROOT/libstd-*.rlib"}, {"sha": "377bd58b54c6420d7d16243bdf4c1cc199c41e3a", "filename": "src/test/ui/privacy/private-in-public-lint.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-lint.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -5,7 +5,7 @@ LL |     struct Priv;\n    |     - `m1::Priv` declared as private\n ...\n LL |         pub fn f() -> Priv {Priv}\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+   |         ^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `m2::Priv` in public interface\n   --> $DIR/private-in-public-lint.rs:15:9\n@@ -14,7 +14,7 @@ LL |     struct Priv;\n    |     - `m2::Priv` declared as private\n ...\n LL |         pub fn f() -> Priv {Priv}\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+   |         ^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5b4123ea82aaf02b838ba97429fd049b08ff436b", "filename": "src/test/ui/privacy/private-in-public-non-principal.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -2,7 +2,7 @@ warning: private trait `PrivNonPrincipal` in public interface (error E0445)\n   --> $DIR/private-in-public-non-principal.rs:7:1\n    |\n LL | pub fn leak_dyn_nonprincipal() -> Box<dyn PubPrincipal + PrivNonPrincipal> { loop {} }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(private_in_public)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!"}, {"sha": "4905e2951958fd182b31317773b4b17dca2c487a", "filename": "src/test/ui/privacy/private-in-public-warn.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -52,7 +52,7 @@ error: private type `types::Priv` in public interface (error E0446)\n   --> $DIR/private-in-public-warn.rs:27:9\n    |\n LL |         fn f1(arg: Priv) {}\n-   |         ^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n@@ -61,7 +61,7 @@ error: private type `types::Priv` in public interface (error E0446)\n   --> $DIR/private-in-public-warn.rs:29:9\n    |\n LL |         fn f2() -> Priv { panic!() }\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n@@ -148,7 +148,7 @@ error: private trait `traits::PrivTr` in public interface (error E0445)\n   --> $DIR/private-in-public-warn.rs:61:9\n    |\n LL |         fn f<T: PrivTr>(arg: T) {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n@@ -193,7 +193,7 @@ error: private trait `traits_where::PrivTr` in public interface (error E0445)\n   --> $DIR/private-in-public-warn.rs:83:9\n    |\n LL |         fn f<T>(arg: T) where T: PrivTr {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n@@ -265,7 +265,7 @@ error: private type `aliases_pub::Priv` in public interface (error E0446)\n   --> $DIR/private-in-public-warn.rs:206:9\n    |\n LL |         pub fn f(arg: Priv) {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>"}, {"sha": "4750fe8687ecd3d13b490f52e068b1d0b93cea6b", "filename": "src/test/ui/privacy/private-in-public.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -23,7 +23,7 @@ LL |     struct Priv;\n    |     - `types::Priv` declared as private\n ...\n LL |     pub fn f1(arg: Priv) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+   |     ^^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `types::Priv` in public interface\n   --> $DIR/private-in-public.rs:16:5\n@@ -32,7 +32,7 @@ LL |     struct Priv;\n    |     - `types::Priv` declared as private\n ...\n LL |     pub fn f2() -> Priv { panic!() }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+   |     ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `types::Priv` in public interface\n   --> $DIR/private-in-public.rs:17:19\n@@ -68,7 +68,7 @@ LL |     struct Priv;\n    |     - `types::Priv` declared as private\n ...\n LL |         pub fn f1(arg: Priv) {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+   |         ^^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `types::Priv` in public interface\n   --> $DIR/private-in-public.rs:22:9\n@@ -77,7 +77,7 @@ LL |     struct Priv;\n    |     - `types::Priv` declared as private\n ...\n LL |         pub fn f2() -> Priv { panic!() }\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+   |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0445]: private trait `traits::PrivTr` in public interface\n   --> $DIR/private-in-public.rs:31:5\n@@ -95,7 +95,7 @@ LL |     trait PrivTr {}\n    |     - `traits::PrivTr` declared as private\n ...\n LL |     pub fn f<T: PrivTr>(arg: T) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n \n error[E0445]: private trait `traits::PrivTr` in public interface\n   --> $DIR/private-in-public.rs:33:5\n@@ -124,7 +124,7 @@ LL |     trait PrivTr {}\n    |     - `traits::PrivTr` declared as private\n ...\n LL |         pub fn f<U: PrivTr>(arg: U) {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n \n error[E0445]: private trait `traits_where::PrivTr` in public interface\n   --> $DIR/private-in-public.rs:44:5\n@@ -142,7 +142,7 @@ LL |     trait PrivTr {}\n    |     - `traits_where::PrivTr` declared as private\n ...\n LL |     pub fn f<T>(arg: T) where T: PrivTr {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n \n error[E0445]: private trait `traits_where::PrivTr` in public interface\n   --> $DIR/private-in-public.rs:48:5\n@@ -173,7 +173,7 @@ LL |     trait PrivTr {}\n    |     - `traits_where::PrivTr` declared as private\n ...\n LL |         pub fn f<U>(arg: U) where U: PrivTr {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n \n error[E0446]: private type `generics::Priv` in public interface\n   --> $DIR/private-in-public.rs:63:5\n@@ -182,7 +182,7 @@ LL |     struct Priv<T = u8>(T);\n    |     - `generics::Priv` declared as private\n ...\n LL |     pub fn f1(arg: [Priv; 1]) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `generics::Priv` in public interface\n   --> $DIR/private-in-public.rs:64:5\n@@ -191,7 +191,7 @@ LL |     struct Priv<T = u8>(T);\n    |     - `generics::Priv` declared as private\n ...\n LL |     pub fn f2(arg: Pub<Priv>) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `generics::Priv<generics::Pub>` in public interface\n   --> $DIR/private-in-public.rs:65:5\n@@ -200,7 +200,7 @@ LL |     struct Priv<T = u8>(T);\n    |     - `generics::Priv<generics::Pub>` declared as private\n ...\n LL |     pub fn f3(arg: Priv<Pub>) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `impls::Priv` in public interface\n   --> $DIR/private-in-public.rs:80:9\n@@ -209,7 +209,7 @@ LL |     struct Priv;\n    |     - `impls::Priv` declared as private\n ...\n LL |         pub fn f(arg: Priv) {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+   |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0445]: private trait `aliases_pub::PrivTr` in public interface\n   --> $DIR/private-in-public.rs:104:5\n@@ -218,7 +218,7 @@ LL |     trait PrivTr {\n    |     - `aliases_pub::PrivTr` declared as private\n ...\n LL |     pub fn f3(arg: <Priv as PrivTr>::Assoc) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n \n error[E0446]: private type `aliases_pub::Priv` in public interface\n   --> $DIR/private-in-public.rs:104:5\n@@ -227,7 +227,7 @@ LL |     struct Priv;\n    |     - `aliases_pub::Priv` declared as private\n ...\n LL |     pub fn f3(arg: <Priv as PrivTr>::Assoc) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `aliases_pub::Priv` in public interface\n   --> $DIR/private-in-public.rs:109:9\n@@ -236,7 +236,7 @@ LL |     struct Priv;\n    |     - `aliases_pub::Priv` declared as private\n ...\n LL |         pub fn f(arg: Priv) {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+   |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `aliases_priv::Priv1` in public interface\n   --> $DIR/private-in-public.rs:131:5\n@@ -245,7 +245,7 @@ LL |     struct Priv1;\n    |     - `aliases_priv::Priv1` declared as private\n ...\n LL |     pub fn f1(arg: PrivUseAlias) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `aliases_priv::Priv2` in public interface\n   --> $DIR/private-in-public.rs:132:5\n@@ -254,7 +254,7 @@ LL |     struct Priv2;\n    |     - `aliases_priv::Priv2` declared as private\n ...\n LL |     pub fn f2(arg: PrivAlias) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0445]: private trait `aliases_priv::PrivTr` in public interface\n   --> $DIR/private-in-public.rs:133:5\n@@ -263,7 +263,7 @@ LL |     trait PrivTr {\n    |     - `aliases_priv::PrivTr` declared as private\n ...\n LL |     pub fn f3(arg: <Priv as PrivTr>::Assoc) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n \n error[E0446]: private type `aliases_priv::Priv` in public interface\n   --> $DIR/private-in-public.rs:133:5\n@@ -272,7 +272,7 @@ LL |     struct Priv;\n    |     - `aliases_priv::Priv` declared as private\n ...\n LL |     pub fn f3(arg: <Priv as PrivTr>::Assoc) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `aliases_params::Priv` in public interface\n   --> $DIR/private-in-public.rs:143:5\n@@ -281,7 +281,7 @@ LL |     struct Priv;\n    |     - `aliases_params::Priv` declared as private\n ...\n LL |     pub fn f2(arg: PrivAliasGeneric) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `aliases_params::Priv` in public interface\n   --> $DIR/private-in-public.rs:145:5\n@@ -290,7 +290,7 @@ LL |     struct Priv;\n    |     - `aliases_params::Priv` declared as private\n ...\n LL |     pub fn f3(arg: Result<u8>) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error: aborting due to 32 previous errors\n "}, {"sha": "727134bd51d4784edd9e60774fbd8701e900a135", "filename": "src/test/ui/privacy/pub-priv-dep/pub-priv1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -14,7 +14,7 @@ error: type `priv_dep::OtherType` from private dependency 'priv_dep' in public i\n   --> $DIR/pub-priv1.rs:27:5\n    |\n LL |     pub fn pub_fn(param: OtherType) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: trait `priv_dep::OtherTrait` from private dependency 'priv_dep' in public interface\n   --> $DIR/pub-priv1.rs:33:1"}, {"sha": "c597935e7f0a4c43ad1c75286b2bd7aa3a3d45c8", "filename": "src/test/ui/privacy/restricted/private-in-public.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Fprivate-in-public.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Fprivate-in-public.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Fprivate-in-public.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -5,7 +5,7 @@ LL |     struct Priv;\n    |     - `foo::Priv` declared as private\n ...\n LL |         pub(crate) fn g(_: Priv) {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `foo::Priv` in public interface\n   --> $DIR/private-in-public.rs:9:9\n@@ -14,7 +14,7 @@ LL |     struct Priv;\n    |     - `foo::Priv` declared as private\n ...\n LL |         crate fn h(_: Priv) {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+   |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a9e5256a0a95d763b10959b2b42781f6136fed0a", "filename": "src/test/ui/proc-macro/no-macro-use-attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fproc-macro%2Fno-macro-use-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fproc-macro%2Fno-macro-use-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fno-macro-use-attr.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -14,7 +14,7 @@ error: fatal error triggered by #[rustc_error]\n   --> $DIR/no-macro-use-attr.rs:10:1\n    |\n LL | fn main() {}\n-   | ^^^^^^^^^^^^\n+   | ^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "db4c99eeb8b167c4691da008cfa8290a9650d70c", "filename": "src/test/ui/recursion/recursion.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Frecursion%2Frecursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Frecursion%2Frecursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursion.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -7,13 +7,8 @@ LL |     _ => {test (n-1, i+1, Cons {head:2*i+1, tail:first}, Cons{head:i*i, tai\n note: `test` defined here\n   --> $DIR/recursion.rs:15:1\n    |\n-LL | / fn test<T:Dot> (n:isize, i:isize, first:T, second:T) ->isize {\n-LL | |   match n {    0 => {first.dot(second)}\n-LL | |     _ => {test (n-1, i+1, Cons {head:2*i+1, tail:first}, Cons{head:i*i, tail:second})}\n-LL | |\n-LL | |   }\n-LL | | }\n-   | |_^\n+LL | fn test<T:Dot> (n:isize, i:isize, first:T, second:T) ->isize {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3e196cf8f12e0c1ebd5b373ce2cb96a51dddaf97", "filename": "src/test/ui/regions/regions-infer-paramd-indirect.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -9,14 +9,8 @@ LL |         self.f = b;\n note: the anonymous lifetime #2 defined on the method body at 21:5...\n   --> $DIR/regions-infer-paramd-indirect.rs:21:5\n    |\n-LL | /     fn set_f_bad(&mut self, b: Box<B>) {\n-LL | |         self.f = b;\n-LL | |\n-LL | |\n-LL | |\n-LL | |\n-LL | |     }\n-   | |_____^\n+LL |     fn set_f_bad(&mut self, b: Box<B>) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 16:6\n   --> $DIR/regions-infer-paramd-indirect.rs:16:6\n    |"}, {"sha": "10ecb8d526292de9b6ecf0340bf5e3cb8b77e965", "filename": "src/test/ui/regions/regions-normalize-in-where-clause-list.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -5,9 +5,7 @@ LL | / fn bar<'a, 'b>()\n LL | |\n LL | |\n LL | |     where <() as Project<'a, 'b>>::Item : Eq\n-LL | | {\n-LL | | }\n-   | |_^\n+   | |____________________________________________^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 22:8...\n   --> $DIR/regions-normalize-in-where-clause-list.rs:22:8\n@@ -26,9 +24,7 @@ LL | / fn bar<'a, 'b>()\n LL | |\n LL | |\n LL | |     where <() as Project<'a, 'b>>::Item : Eq\n-LL | | {\n-LL | | }\n-   | |_^\n+   | |____________________________________________^\n    = note: expected `Project<'a, 'b>`\n               found `Project<'_, '_>`\n \n@@ -39,9 +35,7 @@ LL | / fn bar<'a, 'b>()\n LL | |\n LL | |\n LL | |     where <() as Project<'a, 'b>>::Item : Eq\n-LL | | {\n-LL | | }\n-   | |_^\n+   | |____________________________________________^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 22:8...\n   --> $DIR/regions-normalize-in-where-clause-list.rs:22:8\n@@ -60,9 +54,7 @@ LL | / fn bar<'a, 'b>()\n LL | |\n LL | |\n LL | |     where <() as Project<'a, 'b>>::Item : Eq\n-LL | | {\n-LL | | }\n-   | |_^\n+   | |____________________________________________^\n    = note: expected `Project<'a, 'b>`\n               found `Project<'_, '_>`\n "}, {"sha": "92d96a722d4e913e7e9ca0ae1691d1ac7837e35a", "filename": "src/test/ui/regions/regions-trait-1.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fregions%2Fregions-trait-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fregions%2Fregions-trait-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-1.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -14,10 +14,8 @@ LL | impl<'a> GetCtxt for HasCtxt<'a> {\n note: ...does not necessarily outlive the anonymous lifetime #1 defined on the method body at 16:5\n   --> $DIR/regions-trait-1.rs:16:5\n    |\n-LL | /     fn get_ctxt(&self) -> &'a Ctxt {\n-LL | |         self.c\n-LL | |     }\n-   | |_____^\n+LL |     fn get_ctxt(&self) -> &'a Ctxt {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7e2ec35241423c5d4dfd1ed55737d6402da3fbb8", "filename": "src/test/ui/rfc-2091-track-caller/error-with-main.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-main.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,12 +1,10 @@\n error: `main` function is not allowed to be `#[track_caller]`\n   --> $DIR/error-with-main.rs:1:1\n    |\n-LL |   #[track_caller]\n-   |   ^^^^^^^^^^^^^^^\n-LL | / fn main() {\n-LL | |     panic!(\"{}: oh no\", std::panic::Location::caller());\n-LL | | }\n-   | |_- `main` function is not allowed to be `#[track_caller]`\n+LL | #[track_caller]\n+   | ^^^^^^^^^^^^^^^\n+LL | fn main() {\n+   | --------- `main` function is not allowed to be `#[track_caller]`\n \n error: aborting due to previous error\n "}, {"sha": "454c98ff934374efc2091428556592ce078d875e", "filename": "src/test/ui/rfc-2091-track-caller/error-with-start.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-start.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-start.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-start.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,12 +1,10 @@\n error: `start` is not allowed to be `#[track_caller]`\n   --> $DIR/error-with-start.rs:4:1\n    |\n-LL |   #[track_caller]\n-   |   ^^^^^^^^^^^^^^^\n-LL | / fn start(_argc: isize, _argv: *const *const u8) -> isize {\n-LL | |     panic!(\"{}: oh no\", std::panic::Location::caller());\n-LL | | }\n-   | |_- `start` is not allowed to be `#[track_caller]`\n+LL | #[track_caller]\n+   | ^^^^^^^^^^^^^^^\n+LL | fn start(_argc: isize, _argv: *const *const u8) -> isize {\n+   | -------------------------------------------------------- `start` is not allowed to be `#[track_caller]`\n \n error: aborting due to previous error\n "}, {"sha": "3994bd97c308e125dd0ea73cc72ed3b950bdd289", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/feature-gate.gated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.gated.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -2,7 +2,7 @@ error: fatal error triggered by #[rustc_error]\n   --> $DIR/feature-gate.rs:16:1\n    |\n LL | fn main() {}\n-   | ^^^^^^^^^^^^\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4c630d33c55163b7eca430c391c21e601613f246", "filename": "src/test/ui/rfc-2632-const-trait-impl/feature-gate.gated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ffeature-gate.gated.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -2,7 +2,7 @@ error: fatal error triggered by #[rustc_error]\n   --> $DIR/feature-gate.rs:14:1\n    |\n LL | fn main() {}\n-   | ^^^^^^^^^^^^\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "623fd585accb621fed2f16262ddbc8f5ecd6570c", "filename": "src/test/ui/rfc1445/feature-gate.with_gate.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Frfc1445%2Ffeature-gate.with_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Frfc1445%2Ffeature-gate.with_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Ffeature-gate.with_gate.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,14 +1,8 @@\n error: fatal error triggered by #[rustc_error]\n   --> $DIR/feature-gate.rs:21:1\n    |\n-LL | / fn main() {\n-LL | |     let y = Foo { x: 1 };\n-LL | |     match y {\n-LL | |         FOO => { }\n-LL | |         _ => { }\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | fn main() {\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "18917fd2556cf08aea3ff4994a4ab5b891c55bed", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/feature-gate-target_feature_11.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffeature-gate-target_feature_11.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffeature-gate-target_feature_11.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffeature-gate-target_feature_11.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -4,7 +4,7 @@ error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL | fn foo() {}\n-   | ----------- not an `unsafe` function\n+   | -------- not an `unsafe` function\n    |\n    = note: see issue #69098 <https://github.com/rust-lang/rust/issues/69098> for more information\n    = help: add `#![feature(target_feature_11)]` to the crate attributes to enable"}, {"sha": "07d6e09005906c19cbe33076d7c6193c1ade7337", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/trait-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ftrait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ftrait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ftrait-impl.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -5,7 +5,7 @@ LL |     #[target_feature(enable = \"sse2\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot be applied to safe trait method\n LL |\n LL |     fn foo(&self) {}\n-   |     ---------------- not an `unsafe` function\n+   |     ------------- not an `unsafe` function\n \n error: aborting due to previous error\n "}, {"sha": "de27e9b8f086d753a0fdd54caa691d929a723d42", "filename": "src/test/ui/rustc-error.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Frustc-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Frustc-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustc-error.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,10 +1,8 @@\n error: fatal error triggered by #[rustc_error]\n   --> $DIR/rustc-error.rs:4:1\n    |\n-LL | / fn main() {\n-LL | |\n-LL | | }\n-   | |_^\n+LL | fn main() {\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "81efd46cc7fa50aabda82aea8eb66334c60f61ab", "filename": "src/test/ui/specialization/specialization-overlap-hygiene.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-hygiene.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-hygiene.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-hygiene.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -2,10 +2,10 @@ error[E0592]: duplicate definitions with name `f`\n   --> $DIR/specialization-overlap-hygiene.rs:13:4\n    |\n LL |     fn f() {}\n-   |     --------- other definition for `f`\n+   |     ------ other definition for `f`\n ...\n LL |    fn f() {}\n-   |    ^^^^^^^^^ duplicate definitions for `f`\n+   |    ^^^^^^ duplicate definitions for `f`\n \n error: aborting due to previous error\n "}, {"sha": "6e4cee18c1603998b680d2df41642188accb15ef", "filename": "src/test/ui/suggestions/issue-51055-missing-semicolon-between-call-and-tuple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fsuggestions%2Fissue-51055-missing-semicolon-between-call-and-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fsuggestions%2Fissue-51055-missing-semicolon-between-call-and-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-51055-missing-semicolon-between-call-and-tuple.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -2,7 +2,7 @@ error[E0618]: expected function, found `bool`\n   --> $DIR/issue-51055-missing-semicolon-between-call-and-tuple.rs:4:5\n    |\n LL |   fn vindictive() -> bool { true }\n-   |   -------------------------------- `vindictive` defined here returns `bool`\n+   |   ----------------------- `vindictive` defined here returns `bool`\n ...\n LL |       vindictive()\n    |       -^^^^^^^^^^^- help: try adding a semicolon: `;`"}, {"sha": "1bfcdab5d860d34cbba94812f9a1c225200bbddd", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.nll.stderr", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -32,10 +32,7 @@ LL | / fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n LL | |\n LL | | where\n LL | |     G: Get<T>\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n+   | |_____________^\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:47:45\n@@ -50,10 +47,7 @@ LL | / fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n LL | |\n LL | | where\n LL | |     G: Get<T>\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n+   | |_____________^\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:59:58\n@@ -64,13 +58,8 @@ LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the method body at 59:5...\n   --> $DIR/missing-lifetimes-in-signature.rs:59:5\n    |\n-LL | /     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n-LL | |\n-LL | |         move || {\n-LL | |             *dest = g.get();\n-LL | |         }\n-LL | |     }\n-   | |_____^\n+LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:68:45\n@@ -85,10 +74,7 @@ LL | / fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n LL | |\n LL | | where\n LL | |     G: Get<T>\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n+   | |_____________^\n \n error[E0621]: explicit lifetime required in the type of `dest`\n   --> $DIR/missing-lifetimes-in-signature.rs:73:5"}, {"sha": "cec01fefca8bda94e429c92001f7871985ff3c34", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -40,10 +40,7 @@ LL | / fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n LL | |\n LL | | where\n LL | |     G: Get<T>\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n+   | |_____________^\n note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:30:5: 32:6 g:G, dest:&mut T]` will meet its required lifetime bounds\n   --> $DIR/missing-lifetimes-in-signature.rs:25:37\n    |\n@@ -67,10 +64,7 @@ LL | / fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n LL | |\n LL | | where\n LL | |     G: Get<T>\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n+   | |_____________^\n note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:52:5: 54:6 g:G, dest:&mut T]` will meet its required lifetime bounds\n   --> $DIR/missing-lifetimes-in-signature.rs:47:45\n    |\n@@ -90,13 +84,8 @@ LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the method body at 59:5...\n   --> $DIR/missing-lifetimes-in-signature.rs:59:5\n    |\n-LL | /     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n-LL | |\n-LL | |         move || {\n-LL | |             *dest = g.get();\n-LL | |         }\n-LL | |     }\n-   | |_____^\n+LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:61:9: 63:10 g:G, dest:&mut T]` will meet its required lifetime bounds\n   --> $DIR/missing-lifetimes-in-signature.rs:59:58\n    |"}, {"sha": "3d629afb9a610854002609672e0b6352398acf2c", "filename": "src/test/ui/target-feature/invalid-attribute.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -29,7 +29,7 @@ LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL | fn bar() {}\n-   | ----------- not an `unsafe` function\n+   | -------- not an `unsafe` function\n    |\n    = note: see issue #69098 <https://github.com/rust-lang/rust/issues/69098> for more information\n    = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n@@ -113,7 +113,7 @@ LL |     #[target_feature(enable = \"sse2\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL |     fn foo() {}\n-   |     ----------- not an `unsafe` function\n+   |     -------- not an `unsafe` function\n    |\n    = note: see issue #69098 <https://github.com/rust-lang/rust/issues/69098> for more information\n    = help: add `#![feature(target_feature_11)]` to the crate attributes to enable"}, {"sha": "d10e58629cce73d2ba83e4a1de3df6a41d1ccb87", "filename": "src/test/ui/traits/trait-object-auto-dedup-in-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-auto-dedup-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-auto-dedup-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-auto-dedup-in-impl.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -2,10 +2,10 @@ error[E0592]: duplicate definitions with name `test`\n   --> $DIR/trait-object-auto-dedup-in-impl.rs:14:5\n    |\n LL |     fn test(&self) { println!(\"one\"); }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `test`\n+   |     ^^^^^^^^^^^^^^ duplicate definitions for `test`\n ...\n LL |     fn test(&self) { println!(\"two\"); }\n-   |     ----------------------------------- other definition for `test`\n+   |     -------------- other definition for `test`\n \n error: aborting due to previous error\n "}, {"sha": "eaa716bc71c3e4ebb17b379c942ecaa6466c5f9c", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,18 +1,14 @@\n error: concrete type differs from previous defining opaque type use\n   --> $DIR/different_defining_uses.rs:12:1\n    |\n-LL | / fn bar() -> Foo {\n-LL | |     42i32\n-LL | | }\n-   | |_^ expected `&'static str`, got `i32`\n+LL | fn bar() -> Foo {\n+   | ^^^^^^^^^^^^^^^ expected `&'static str`, got `i32`\n    |\n note: previous use here\n   --> $DIR/different_defining_uses.rs:8:1\n    |\n-LL | / fn foo() -> Foo {\n-LL | |     \"\"\n-LL | | }\n-   | |_^\n+LL | fn foo() -> Foo {\n+   | ^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "9a587e4f06ee818f2981b6361652eb1d80c4a40e", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type.stderr", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,34 +1,26 @@\n error: concrete type differs from previous defining opaque type use\n   --> $DIR/different_defining_uses_never_type.rs:12:1\n    |\n-LL | / fn bar() -> Foo {\n-LL | |     panic!()\n-LL | | }\n-   | |_^ expected `&'static str`, got `()`\n+LL | fn bar() -> Foo {\n+   | ^^^^^^^^^^^^^^^ expected `&'static str`, got `()`\n    |\n note: previous use here\n   --> $DIR/different_defining_uses_never_type.rs:8:1\n    |\n-LL | / fn foo() -> Foo {\n-LL | |     \"\"\n-LL | | }\n-   | |_^\n+LL | fn foo() -> Foo {\n+   | ^^^^^^^^^^^^^^^\n \n error: concrete type differs from previous defining opaque type use\n   --> $DIR/different_defining_uses_never_type.rs:16:1\n    |\n-LL | / fn boo() -> Foo {\n-LL | |     loop {}\n-LL | | }\n-   | |_^ expected `&'static str`, got `()`\n+LL | fn boo() -> Foo {\n+   | ^^^^^^^^^^^^^^^ expected `&'static str`, got `()`\n    |\n note: previous use here\n   --> $DIR/different_defining_uses_never_type.rs:8:1\n    |\n-LL | / fn foo() -> Foo {\n-LL | |     \"\"\n-LL | | }\n-   | |_^\n+LL | fn foo() -> Foo {\n+   | ^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f8a058170e37f3de8d039ee6d78257802a1dd822", "filename": "src/test/ui/type-alias-impl-trait/generic_different_defining_uses.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,18 +1,14 @@\n error: concrete type differs from previous defining opaque type use\n   --> $DIR/generic_different_defining_uses.rs:11:1\n    |\n-LL | / fn my_iter2<T>(t: T) -> MyIter<T> {\n-LL | |     Some(t).into_iter()\n-LL | | }\n-   | |_^ expected `std::iter::Once<T>`, got `std::option::IntoIter<T>`\n+LL | fn my_iter2<T>(t: T) -> MyIter<T> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `std::iter::Once<T>`, got `std::option::IntoIter<T>`\n    |\n note: previous use here\n   --> $DIR/generic_different_defining_uses.rs:7:1\n    |\n-LL | / fn my_iter<T>(t: T) -> MyIter<T> {\n-LL | |     std::iter::once(t)\n-LL | | }\n-   | |_^\n+LL | fn my_iter<T>(t: T) -> MyIter<T> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7900da47ca23db28590a9bf84e48506520674e81", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,19 +1,14 @@\n error: concrete type differs from previous defining opaque type use\n   --> $DIR/generic_duplicate_param_use2.rs:14:1\n    |\n-LL | / fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n-LL | |\n-LL | |     t\n-LL | | }\n-   | |_^ expected `U`, got `T`\n+LL | fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `U`, got `T`\n    |\n note: previous use here\n   --> $DIR/generic_duplicate_param_use2.rs:10:1\n    |\n-LL | / fn one<T: Debug>(t: T) -> Two<T, T> {\n-LL | |     t\n-LL | | }\n-   | |_^\n+LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ac5f7947d51e911f105ef433b58e5a7ffd72457a", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,19 +1,14 @@\n error: concrete type differs from previous defining opaque type use\n   --> $DIR/generic_duplicate_param_use3.rs:14:1\n    |\n-LL | / fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n-LL | |\n-LL | |     t\n-LL | | }\n-   | |_^ expected `U`, got `T`\n+LL | fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `U`, got `T`\n    |\n note: previous use here\n   --> $DIR/generic_duplicate_param_use3.rs:10:1\n    |\n-LL | / fn one<T: Debug>(t: T) -> Two<T, T> {\n-LL | |     t\n-LL | | }\n-   | |_^\n+LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1ddbc0c8d6a8e25db73f5fd5a40bff4e595ad760", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use5.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,19 +1,14 @@\n error: concrete type differs from previous defining opaque type use\n   --> $DIR/generic_duplicate_param_use5.rs:14:1\n    |\n-LL | / fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-LL | |\n-LL | |     (u, t)\n-LL | | }\n-   | |_^ expected `(T, U)`, got `(U, T)`\n+LL | fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, U)`, got `(U, T)`\n    |\n note: previous use here\n   --> $DIR/generic_duplicate_param_use5.rs:10:1\n    |\n-LL | / fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-LL | |     (t, u)\n-LL | | }\n-   | |_^\n+LL | fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ebd07b7c300f1928c31de04650016a53571e079e", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,19 +1,14 @@\n error: concrete type differs from previous defining opaque type use\n   --> $DIR/generic_duplicate_param_use6.rs:14:1\n    |\n-LL | / fn three<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-LL | |\n-LL | |     (u, t)\n-LL | | }\n-   | |_^ expected `(T, T)`, got `(U, T)`\n+LL | fn three<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, T)`, got `(U, T)`\n    |\n note: previous use here\n   --> $DIR/generic_duplicate_param_use6.rs:10:1\n    |\n-LL | / fn two<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-LL | |     (t, t)\n-LL | | }\n-   | |_^\n+LL | fn two<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4778ee5155cf058c17fa7df52fad2fd1e1a478cf", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use8.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,19 +1,14 @@\n error: concrete type differs from previous defining opaque type use\n   --> $DIR/generic_duplicate_param_use8.rs:13:1\n    |\n-LL | / fn three<T: Debug, U: Debug>(_: T, u: U) -> Two<T, U> {\n-LL | |\n-LL | |     (u, 4u32)\n-LL | | }\n-   | |_^ expected `(T, u32)`, got `(U, u32)`\n+LL | fn three<T: Debug, U: Debug>(_: T, u: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, u32)`, got `(U, u32)`\n    |\n note: previous use here\n   --> $DIR/generic_duplicate_param_use8.rs:9:1\n    |\n-LL | / fn two<T: Debug, U: Debug>(t: T, _: U) -> Two<T, U> {\n-LL | |     (t, 4u32)\n-LL | | }\n-   | |_^\n+LL | fn two<T: Debug, U: Debug>(t: T, _: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "247b042f61e058af52199e2ae069a4873d483da5", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,18 +1,14 @@\n error: concrete type differs from previous defining opaque type use\n   --> $DIR/generic_duplicate_param_use9.rs:18:1\n    |\n-LL | / fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-LL | |     (t, u, 42)\n-LL | | }\n-   | |_^ expected `(A, B, <A as Foo>::Bar)`, got `(A, B, i32)`\n+LL | fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(A, B, <A as Foo>::Bar)`, got `(A, B, i32)`\n    |\n note: previous use here\n   --> $DIR/generic_duplicate_param_use9.rs:14:1\n    |\n-LL | / fn two<T: Debug + Foo, U: Debug>(t: T, u: U) -> Two<T, U> {\n-LL | |     (t, u, T::BAR)\n-LL | | }\n-   | |_^\n+LL | fn two<T: Debug + Foo, U: Debug>(t: T, u: U) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "13069126bab1b88dfaa5166968c2c54bd9fefe6e", "filename": "src/test/ui/type-alias-impl-trait/issue-52843-closure-constrain.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -8,7 +8,7 @@ note: previous use here\n   --> $DIR/issue-52843-closure-constrain.rs:9:5\n    |\n LL |     fn _unused() -> Opaque { String::new() }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "9ce07a879f058532f6dcc16f1a9082f8369e0e50", "filename": "src/test/ui/type-alias-impl-trait/not_a_defining_use.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -1,18 +1,14 @@\n error: concrete type differs from previous defining opaque type use\n   --> $DIR/not_a_defining_use.rs:29:1\n    |\n-LL | / fn four<T: Debug, U: Bar>(t: T) -> Two<T, U> {\n-LL | |     (t, <U as Bar>::FOO)\n-LL | | }\n-   | |_^ expected `(T, i8)`, got `(T, <U as Bar>::Blub)`\n+LL | fn four<T: Debug, U: Bar>(t: T) -> Two<T, U> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, i8)`, got `(T, <U as Bar>::Blub)`\n    |\n note: previous use here\n   --> $DIR/not_a_defining_use.rs:9:1\n    |\n-LL | / fn two<T: Debug>(t: T) -> Two<T, u32> {\n-LL | |     (t, 4i8)\n-LL | | }\n-   | |_^\n+LL | fn two<T: Debug>(t: T) -> Two<T, u32> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d7c4817357190b9cc92529d88d3961c797425cfe", "filename": "src/test/ui/ufcs/ufcs-explicit-self-bad.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5ba3efed1e7e25014671fb9da5f23b98358d994/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr?ref=d5ba3efed1e7e25014671fb9da5f23b98358d994", "patch": "@@ -37,7 +37,7 @@ note: the anonymous lifetime #1 defined on the method body at 37:5...\n   --> $DIR/ufcs-explicit-self-bad.rs:37:5\n    |\n LL |     fn dummy2(self: &Bar<T>) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 35:6\n   --> $DIR/ufcs-explicit-self-bad.rs:35:6\n    |\n@@ -61,7 +61,7 @@ note: ...does not necessarily outlive the anonymous lifetime #1 defined on the m\n   --> $DIR/ufcs-explicit-self-bad.rs:37:5\n    |\n LL |     fn dummy2(self: &Bar<T>) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched `self` parameter type\n   --> $DIR/ufcs-explicit-self-bad.rs:39:21\n@@ -75,7 +75,7 @@ note: the anonymous lifetime #2 defined on the method body at 39:5...\n   --> $DIR/ufcs-explicit-self-bad.rs:39:5\n    |\n LL |     fn dummy3(self: &&Bar<T>) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...does not necessarily outlive the lifetime `'a` as defined on the impl at 35:6\n   --> $DIR/ufcs-explicit-self-bad.rs:35:6\n    |\n@@ -99,7 +99,7 @@ note: ...does not necessarily outlive the anonymous lifetime #2 defined on the m\n   --> $DIR/ufcs-explicit-self-bad.rs:39:5\n    |\n LL |     fn dummy3(self: &&Bar<T>) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}]}