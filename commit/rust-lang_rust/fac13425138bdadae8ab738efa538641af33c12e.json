{"sha": "fac13425138bdadae8ab738efa538641af33c12e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYzEzNDI1MTM4YmRhZGFlOGFiNzM4ZWZhNTM4NjQxYWYzM2MxMmU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-14T00:06:00Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-14T00:06:30Z"}, "message": "rustc: Move replace_expr_type() from ty to typeck, as it's only used in the latter", "tree": {"sha": "170541c377365702f376506ffe3718a70705d8dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/170541c377365702f376506ffe3718a70705d8dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fac13425138bdadae8ab738efa538641af33c12e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fac13425138bdadae8ab738efa538641af33c12e", "html_url": "https://github.com/rust-lang/rust/commit/fac13425138bdadae8ab738efa538641af33c12e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fac13425138bdadae8ab738efa538641af33c12e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "843e9435ab5c83d4f255ee2ecd2fe5752ec2f715", "url": "https://api.github.com/repos/rust-lang/rust/commits/843e9435ab5c83d4f255ee2ecd2fe5752ec2f715", "html_url": "https://github.com/rust-lang/rust/commit/843e9435ab5c83d4f255ee2ecd2fe5752ec2f715"}], "stats": {"total": 97, "additions": 52, "deletions": 45}, "files": [{"sha": "a0c3a724c3e9bfd088ad2237c670c33ebaa2aabd", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fac13425138bdadae8ab738efa538641af33c12e/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac13425138bdadae8ab738efa538641af33c12e/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=fac13425138bdadae8ab738efa538641af33c12e", "patch": "@@ -1721,50 +1721,6 @@ fn expr_has_ty_params(&node_type_table ntt, &@ast::expr expr) -> bool {\n     ret ann_has_type_params(ntt, expr_ann(expr));\n }\n \n-// FIXME: At the moment this works only for call, bind, and path expressions.\n-fn replace_expr_type(&node_type_table ntt,\n-                     &@ast::expr expr,\n-                     &tup(vec[t], t) new_tyt) -> @ast::expr {\n-    auto new_tps;\n-    if (expr_has_ty_params(ntt, expr)) {\n-        new_tps = some[vec[t]](new_tyt._0);\n-    } else {\n-        new_tps = none[vec[t]];\n-    }\n-\n-    fn mkann_fn(t tyt, option::t[vec[t]] tps, &ast::ann old_ann) -> ast::ann {\n-        ret ast::ann_type(ast::ann_tag(old_ann), tyt, tps, none[@ts_ann]);\n-    }\n-    auto mkann = bind mkann_fn(new_tyt._1, new_tps, _);\n-\n-    alt (expr.node) {\n-        case (ast::expr_call(?callee, ?args, ?a)) {\n-            ret @fold::respan(expr.span,\n-                             ast::expr_call(callee, args, mkann(a)));\n-        }\n-        case (ast::expr_self_method(?ident, ?a)) {\n-            ret @fold::respan(expr.span,\n-                             ast::expr_self_method(ident, mkann(a)));\n-        }\n-        case (ast::expr_bind(?callee, ?args, ?a)) {\n-            ret @fold::respan(expr.span,\n-                             ast::expr_bind(callee, args, mkann(a)));\n-        }\n-        case (ast::expr_field(?e, ?i, ?a)) {\n-            ret @fold::respan(expr.span,\n-                             ast::expr_field(e, i, mkann(a)));\n-        }\n-        case (ast::expr_path(?p, ?a)) {\n-            ret @fold::respan(expr.span,\n-                             ast::expr_path(p, mkann(a)));\n-        }\n-        case (_) {\n-            log_err \"unhandled expr type in replace_expr_type(): \" +\n-                util::common::expr_to_str(expr);\n-            fail;\n-        }\n-    }\n-}\n \n // Expression utilities\n "}, {"sha": "1966cfb2a18627d70f382488b8f7235e32c18a3a", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/fac13425138bdadae8ab738efa538641af33c12e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac13425138bdadae8ab738efa538641af33c12e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=fac13425138bdadae8ab738efa538641af33c12e", "patch": "@@ -1709,6 +1709,57 @@ fn resolve_local_types_in_block(&@fn_ctxt fcx, &ast::block block)\n     ret fold::fold_block[option::t[@fn_ctxt]](some(fcx), fld, block);\n }\n \n+\n+// AST fragment utilities\n+\n+// FIXME: At the moment this works only for call, bind, and path expressions.\n+fn replace_expr_type(&node_type_table ntt,\n+                     &@ast::expr expr,\n+                     &tup(vec[ty::t], ty::t) new_tyt) -> @ast::expr {\n+    auto new_tps;\n+    if (ty::expr_has_ty_params(ntt, expr)) {\n+        new_tps = some[vec[ty::t]](new_tyt._0);\n+    } else {\n+        new_tps = none[vec[ty::t]];\n+    }\n+\n+    fn mkann_fn(ty::t tyt, option::t[vec[ty::t]] tps, &ast::ann old_ann)\n+            -> ast::ann {\n+        ret ast::ann_type(ast::ann_tag(old_ann), tyt, tps, none[@ts_ann]);\n+    }\n+\n+    auto mkann = bind mkann_fn(new_tyt._1, new_tps, _);\n+\n+    alt (expr.node) {\n+        case (ast::expr_call(?callee, ?args, ?a)) {\n+            ret @fold::respan(expr.span,\n+                             ast::expr_call(callee, args, mkann(a)));\n+        }\n+        case (ast::expr_self_method(?ident, ?a)) {\n+            ret @fold::respan(expr.span,\n+                             ast::expr_self_method(ident, mkann(a)));\n+        }\n+        case (ast::expr_bind(?callee, ?args, ?a)) {\n+            ret @fold::respan(expr.span,\n+                             ast::expr_bind(callee, args, mkann(a)));\n+        }\n+        case (ast::expr_field(?e, ?i, ?a)) {\n+            ret @fold::respan(expr.span,\n+                             ast::expr_field(e, i, mkann(a)));\n+        }\n+        case (ast::expr_path(?p, ?a)) {\n+            ret @fold::respan(expr.span,\n+                             ast::expr_path(p, mkann(a)));\n+        }\n+        case (_) {\n+            log_err \"unhandled expr type in replace_expr_type(): \" +\n+                util::common::expr_to_str(expr);\n+            fail;\n+        }\n+    }\n+}\n+\n+\n // AST fragment checking\n \n fn check_lit(@crate_ctxt ccx, &@ast::lit lit) -> ty::t {\n@@ -1935,7 +1986,7 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) -> @ast::expr {\n                                                fcx.ccx.node_types, f_0);\n         auto tpt_1 = Demand::full(fcx, f.span, tpt_0._1, t_0, tpt_0._0,\n                                  NO_AUTODEREF);\n-        auto f_1 = ty::replace_expr_type(fcx.ccx.node_types, f_0, tpt_1);\n+        auto f_1 = replace_expr_type(fcx.ccx.node_types, f_0, tpt_1);\n \n         ret tup(f_1, args_0);\n     }"}]}