{"sha": "8b2e09ffbbb69402f8881824f8689f785695a780", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMmUwOWZmYmJiNjk0MDJmODg4MTgyNGY4Njg5Zjc4NTY5NWE3ODA=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-09-29T20:19:20Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-09-29T20:19:20Z"}, "message": "Avoid the UB of a null reference to a slice", "tree": {"sha": "978b9ce5219a4fb0edd32feedf43194b391b4100", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/978b9ce5219a4fb0edd32feedf43194b391b4100"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b2e09ffbbb69402f8881824f8689f785695a780", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b2e09ffbbb69402f8881824f8689f785695a780", "html_url": "https://github.com/rust-lang/rust/commit/8b2e09ffbbb69402f8881824f8689f785695a780", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b2e09ffbbb69402f8881824f8689f785695a780/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3580c4c58940ad5d62a068609b9b696e8eb31309", "url": "https://api.github.com/repos/rust-lang/rust/commits/3580c4c58940ad5d62a068609b9b696e8eb31309", "html_url": "https://github.com/rust-lang/rust/commit/3580c4c58940ad5d62a068609b9b696e8eb31309"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "6af74eb532b9d9f7bcc6453a2f55895672daf042", "filename": "src/libcore/tests/ptr.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8b2e09ffbbb69402f8881824f8689f785695a780/src%2Flibcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2e09ffbbb69402f8881824f8689f785695a780/src%2Flibcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fptr.rs?ref=8b2e09ffbbb69402f8881824f8689f785695a780", "patch": "@@ -8,10 +8,26 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use core::mem;\n use core::ptr::*;\n-use core::slice;\n use core::cell::RefCell;\n \n+\n+/// Create a null pointer to a mutable slice.  This is implemented like\n+/// `slice::from_raw_parts_mut`, which we can't use directly because\n+/// having a null `&mut [T]` even temporarily is UB.\n+fn null_slice<T>() -> *mut [T] {\n+    unsafe {\n+        #[repr(C)]\n+        struct Repr<T> {\n+            pub data: *mut T,\n+            pub len: usize,\n+        }\n+\n+        mem::transmute(Repr { data: null_mut::<T>(), len: 0 })\n+    }\n+}\n+\n #[test]\n fn test() {\n     unsafe {\n@@ -78,13 +94,11 @@ fn test_is_null() {\n     let mz: *mut [u8] = &mut [];\n     assert!(!mz.is_null());\n \n-    unsafe {\n-        let ncs: *const [u8] = slice::from_raw_parts(null(), 0);\n-        assert!(ncs.is_null());\n+    let ncs: *const [u8] = null_slice();\n+    assert!(ncs.is_null());\n \n-        let nms: *mut [u8] = slice::from_raw_parts_mut(null_mut(), 0);\n-        assert!(nms.is_null());\n-    }\n+    let nms: *mut [u8] = null_slice();\n+    assert!(nms.is_null());\n }\n \n #[test]\n@@ -123,10 +137,10 @@ fn test_as_ref() {\n         let mz: *mut [u8] = &mut [];\n         assert_eq!(mz.as_ref(), Some(&[][..]));\n \n-        let ncs: *const [u8] = slice::from_raw_parts(null(), 0);\n+        let ncs: *const [u8] = null_slice();\n         assert_eq!(ncs.as_ref(), None);\n \n-        let nms: *mut [u8] = slice::from_raw_parts_mut(null_mut(), 0);\n+        let nms: *mut [u8] = null_slice();\n         assert_eq!(nms.as_ref(), None);\n     }\n }\n@@ -155,7 +169,7 @@ fn test_as_mut() {\n         let mz: *mut [u8] = &mut [];\n         assert_eq!(mz.as_mut(), Some(&mut [][..]));\n \n-        let nms: *mut [u8] = slice::from_raw_parts_mut(null_mut(), 0);\n+        let nms: *mut [u8] = null_slice();\n         assert_eq!(nms.as_mut(), None);\n     }\n }"}]}