{"sha": "542d813475eeac7cac1bae5de32fe7809b4bf771", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MmQ4MTM0NzVlZWFjN2NhYzFiYWU1ZGUzMmZlNzgwOWI0YmY3NzE=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-11T13:38:16Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-29T04:59:38Z"}, "message": "Add a `parent_module_from_def_id` query", "tree": {"sha": "a73f4c88a2b31569b0db116473c3d4f7ba7b08c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a73f4c88a2b31569b0db116473c3d4f7ba7b08c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/542d813475eeac7cac1bae5de32fe7809b4bf771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/542d813475eeac7cac1bae5de32fe7809b4bf771", "html_url": "https://github.com/rust-lang/rust/commit/542d813475eeac7cac1bae5de32fe7809b4bf771", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/542d813475eeac7cac1bae5de32fe7809b4bf771/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5703b7aafb70e77547e8f03876a5911a2e89a2a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5703b7aafb70e77547e8f03876a5911a2e89a2a5", "html_url": "https://github.com/rust-lang/rust/commit/5703b7aafb70e77547e8f03876a5911a2e89a2a5"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "4ce335d0c95f15289cdb9e391999f463f87a48f3", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/542d813475eeac7cac1bae5de32fe7809b4bf771/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542d813475eeac7cac1bae5de32fe7809b4bf771/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=542d813475eeac7cac1bae5de32fe7809b4bf771", "patch": "@@ -7,9 +7,10 @@ pub mod map;\n \n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n-use rustc_hir::def_id::LOCAL_CRATE;\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::print;\n use rustc_hir::Crate;\n+use rustc_hir::HirId;\n use std::ops::Deref;\n \n /// A wrapper type which allows you to access HIR.\n@@ -45,9 +46,17 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn hir(self) -> Hir<'tcx> {\n         Hir { tcx: self, map: &self.hir_map }\n     }\n+\n+    pub fn parent_module(self, id: HirId) -> DefId {\n+        self.parent_module_from_def_id(DefId::local(id.owner))\n+    }\n }\n \n pub fn provide(providers: &mut Providers<'_>) {\n+    providers.parent_module_from_def_id = |tcx, id| {\n+        let hir = tcx.hir();\n+        hir.get_module_parent(hir.as_local_hir_id(id).unwrap())\n+    };\n     providers.hir_crate = |tcx, _| tcx.hir_map.untracked_krate();\n     map::provide(providers);\n }"}, {"sha": "542a0033adee55ca03b295f0a52ff5deef149f53", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/542d813475eeac7cac1bae5de32fe7809b4bf771/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542d813475eeac7cac1bae5de32fe7809b4bf771/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=542d813475eeac7cac1bae5de32fe7809b4bf771", "patch": "@@ -98,6 +98,10 @@ rustc_queries! {\n             eval_always\n             desc { \"computing the lint levels for items in this crate\" }\n         }\n+\n+        query parent_module_from_def_id(_: DefId) -> DefId {\n+            eval_always\n+        }\n     }\n \n     Codegen {"}, {"sha": "8105f4faa0f19c4bbe39ed4bf338c53f8b644549", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/542d813475eeac7cac1bae5de32fe7809b4bf771/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542d813475eeac7cac1bae5de32fe7809b4bf771/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=542d813475eeac7cac1bae5de32fe7809b4bf771", "patch": "@@ -385,9 +385,7 @@ impl Visibility {\n                 Res::Err => Visibility::Public,\n                 def => Visibility::Restricted(def.def_id()),\n             },\n-            hir::VisibilityKind::Inherited => {\n-                Visibility::Restricted(tcx.hir().get_module_parent(id))\n-            }\n+            hir::VisibilityKind::Inherited => Visibility::Restricted(tcx.parent_module(id)),\n         }\n     }\n \n@@ -3087,7 +3085,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             Some(actual_expansion) => {\n                 self.hir().definitions().parent_module_of_macro_def(actual_expansion)\n             }\n-            None => self.hir().get_module_parent(block),\n+            None => self.parent_module(block),\n         };\n         (ident, scope)\n     }"}, {"sha": "60316a8db4f3cdce2d4fd48ffd169e51e11dae15", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/542d813475eeac7cac1bae5de32fe7809b4bf771/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542d813475eeac7cac1bae5de32fe7809b4bf771/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=542d813475eeac7cac1bae5de32fe7809b4bf771", "patch": "@@ -124,8 +124,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             descr_post: &str,\n             plural_len: usize,\n         ) -> bool {\n-            if ty.is_unit()\n-                || cx.tcx.is_ty_uninhabited_from(cx.tcx.hir().get_module_parent(expr.hir_id), ty)\n+            if ty.is_unit() || cx.tcx.is_ty_uninhabited_from(cx.tcx.parent_module(expr.hir_id), ty)\n             {\n                 return true;\n             }"}, {"sha": "6dd6f8ad43ffff1bea50b6a287a20e7f84fb6c37", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/542d813475eeac7cac1bae5de32fe7809b4bf771/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542d813475eeac7cac1bae5de32fe7809b4bf771/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=542d813475eeac7cac1bae5de32fe7809b4bf771", "patch": "@@ -142,7 +142,7 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n     }\n \n     fn check_in_cx(&self, hir_id: HirId, f: impl FnOnce(MatchCheckCtxt<'_, 'tcx>)) {\n-        let module = self.tcx.hir().get_module_parent(hir_id);\n+        let module = self.tcx.parent_module(hir_id);\n         MatchCheckCtxt::create_and_enter(self.tcx, self.param_env, module, |cx| f(cx));\n     }\n "}, {"sha": "4a7df8b3f0ec086e1b740b978aad556debd55358", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/542d813475eeac7cac1bae5de32fe7809b4bf771/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542d813475eeac7cac1bae5de32fe7809b4bf771/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=542d813475eeac7cac1bae5de32fe7809b4bf771", "patch": "@@ -1125,7 +1125,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             }\n \n             hir::ExprKind::Call(ref f, ref args) => {\n-                let m = self.ir.tcx.hir().get_module_parent(expr.hir_id);\n+                let m = self.ir.tcx.parent_module(expr.hir_id);\n                 let succ = if self.ir.tcx.is_ty_uninhabited_from(m, self.tables.expr_ty(expr)) {\n                     self.s.exit_ln\n                 } else {\n@@ -1136,7 +1136,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             }\n \n             hir::ExprKind::MethodCall(.., ref args) => {\n-                let m = self.ir.tcx.hir().get_module_parent(expr.hir_id);\n+                let m = self.ir.tcx.parent_module(expr.hir_id);\n                 let succ = if self.ir.tcx.is_ty_uninhabited_from(m, self.tables.expr_ty(expr)) {\n                     self.s.exit_ln\n                 } else {"}, {"sha": "6867aac9f8fdf94db200e2e4efe0fa3ae2867125", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/542d813475eeac7cac1bae5de32fe7809b4bf771/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542d813475eeac7cac1bae5de32fe7809b4bf771/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=542d813475eeac7cac1bae5de32fe7809b4bf771", "patch": "@@ -327,7 +327,7 @@ fn def_id_visibility<'tcx>(\n                 }\n                 Node::Expr(expr) => {\n                     return (\n-                        ty::Visibility::Restricted(tcx.hir().get_module_parent(expr.hir_id)),\n+                        ty::Visibility::Restricted(tcx.parent_module(expr.hir_id)),\n                         expr.span,\n                         \"private\",\n                     );"}, {"sha": "76614ca4fe2a369a449dd1da2f3d097ef08bc73a", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/542d813475eeac7cac1bae5de32fe7809b4bf771/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542d813475eeac7cac1bae5de32fe7809b4bf771/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=542d813475eeac7cac1bae5de32fe7809b4bf771", "patch": "@@ -426,7 +426,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         });\n \n                     if let Some((field, field_ty)) = field_receiver {\n-                        let scope = self.tcx.hir().get_module_parent(self.body_id);\n+                        let scope = self.tcx.parent_module(self.body_id);\n                         let is_accessible = field.vis.is_accessible_from(scope, self.tcx);\n \n                         if is_accessible {\n@@ -685,7 +685,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         mut msg: String,\n         candidates: Vec<DefId>,\n     ) {\n-        let module_did = self.tcx.hir().get_module_parent(self.body_id);\n+        let module_did = self.tcx.parent_module(self.body_id);\n         let module_id = self.tcx.hir().as_local_hir_id(module_did).unwrap();\n         let krate = self.tcx.hir().krate();\n         let (span, found_use) = UsePlacementFinder::check(self.tcx, krate, module_id);"}, {"sha": "5a2706ae20a94cf96eaec41eb3dfb2609c16877a", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/542d813475eeac7cac1bae5de32fe7809b4bf771/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542d813475eeac7cac1bae5de32fe7809b4bf771/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=542d813475eeac7cac1bae5de32fe7809b4bf771", "patch": "@@ -348,7 +348,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n         let parent_node = self.cx.as_local_hir_id(item.def_id).and_then(|hir_id| {\n             // FIXME: this fails hard for impls in non-module scope, but is necessary for the\n             // current `resolve()` implementation.\n-            match self.cx.tcx.hir().get_module_parent_node(hir_id) {\n+            match self.cx.as_local_hir_id(self.cx.tcx.parent_module(hir_id)).unwrap() {\n                 id if id != hir_id => Some(id),\n                 _ => None,\n             }"}]}