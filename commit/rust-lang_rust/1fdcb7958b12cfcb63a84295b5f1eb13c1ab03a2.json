{"sha": "1fdcb7958b12cfcb63a84295b5f1eb13c1ab03a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZGNiNzk1OGIxMmNmY2I2M2E4NDI5NWI1ZjFlYjEzYzFhYjAzYTI=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2017-04-05T23:01:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-05T23:01:06Z"}, "message": "Rollup merge of #40909 - nagisa:fix-vec-placement, r=alexcrichton\n\nAllow using Vec::<T>::place_back for T: !Clone\n\nThe place_back was likely put into block with `T: Clone` bound by mistake.", "tree": {"sha": "d0c5e58353e1eb56c52054ec01242e14502044cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0c5e58353e1eb56c52054ec01242e14502044cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fdcb7958b12cfcb63a84295b5f1eb13c1ab03a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fdcb7958b12cfcb63a84295b5f1eb13c1ab03a2", "html_url": "https://github.com/rust-lang/rust/commit/1fdcb7958b12cfcb63a84295b5f1eb13c1ab03a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fdcb7958b12cfcb63a84295b5f1eb13c1ab03a2/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cee05080219bde70125882ef32c0a882544b9f50", "url": "https://api.github.com/repos/rust-lang/rust/commits/cee05080219bde70125882ef32c0a882544b9f50", "html_url": "https://github.com/rust-lang/rust/commit/cee05080219bde70125882ef32c0a882544b9f50"}, {"sha": "1e3bc5ac4fcacac584a39a061e9b1cffbcb9f713", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e3bc5ac4fcacac584a39a061e9b1cffbcb9f713", "html_url": "https://github.com/rust-lang/rust/commit/1e3bc5ac4fcacac584a39a061e9b1cffbcb9f713"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "7924c4826485cce8661da8723977abd1abdf7459", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1fdcb7958b12cfcb63a84295b5f1eb13c1ab03a2/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fdcb7958b12cfcb63a84295b5f1eb13c1ab03a2/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=1fdcb7958b12cfcb63a84295b5f1eb13c1ab03a2", "patch": "@@ -973,6 +973,29 @@ impl<T> Vec<T> {\n         }\n     }\n \n+    /// Returns a place for insertion at the back of the `Vec`.\n+    ///\n+    /// Using this method with placement syntax is equivalent to [`push`](#method.push),\n+    /// but may be more efficient.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(collection_placement)]\n+    /// #![feature(placement_in_syntax)]\n+    ///\n+    /// let mut vec = vec![1, 2];\n+    /// vec.place_back() <- 3;\n+    /// vec.place_back() <- 4;\n+    /// assert_eq!(&vec, &[1, 2, 3, 4]);\n+    /// ```\n+    #[unstable(feature = \"collection_placement\",\n+               reason = \"placement protocol is subject to change\",\n+               issue = \"30172\")]\n+    pub fn place_back(&mut self) -> PlaceBack<T> {\n+        PlaceBack { vec: self }\n+    }\n+\n     /// Removes the last element from a vector and returns it, or [`None`] if it\n     /// is empty.\n     ///\n@@ -1267,29 +1290,6 @@ impl<T: Clone> Vec<T> {\n     pub fn extend_from_slice(&mut self, other: &[T]) {\n         self.spec_extend(other.iter())\n     }\n-\n-    /// Returns a place for insertion at the back of the `Vec`.\n-    ///\n-    /// Using this method with placement syntax is equivalent to [`push`](#method.push),\n-    /// but may be more efficient.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(collection_placement)]\n-    /// #![feature(placement_in_syntax)]\n-    ///\n-    /// let mut vec = vec![1, 2];\n-    /// vec.place_back() <- 3;\n-    /// vec.place_back() <- 4;\n-    /// assert_eq!(&vec, &[1, 2, 3, 4]);\n-    /// ```\n-    #[unstable(feature = \"collection_placement\",\n-               reason = \"placement protocol is subject to change\",\n-               issue = \"30172\")]\n-    pub fn place_back(&mut self) -> PlaceBack<T> {\n-        PlaceBack { vec: self }\n-    }\n }\n \n // Set the length of the vec when the `SetLenOnDrop` value goes out of scope."}]}