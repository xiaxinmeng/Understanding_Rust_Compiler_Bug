{"sha": "fc377f3fb0ea33fc669dd4b99de412c74db06725", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMzc3ZjNmYjBlYTMzZmM2NjlkZDRiOTlkZTQxMmM3NGRiMDY3MjU=", "commit": {"author": {"name": "Chris Emerson", "email": "github@mail.nosreme.org", "date": "2018-01-20T20:23:25Z"}, "committer": {"name": "Chris Emerson", "email": "github@mail.nosreme.org", "date": "2018-01-20T20:23:25Z"}, "message": "Add a new get_modified_lines() API to get only the new\nchanged lines from rustfmting.\n\nSquashed commit of the following:\n\ncommit e90f9da64bbdb640b8c9ee61c3ad395617d8b4da\nAuthor: Chris Emerson <github@mail.nosreme.org>\nDate:   Sat Jan 20 20:10:16 2018 +0000\n\n    Fix tests after merging with master.\n\ncommit c3af0042769fe459b0c9c94a0934605ea4b40e40\nMerge: 03868583 e0e3e222\nAuthor: Chris Emerson <github@mail.nosreme.org>\nDate:   Sat Jan 20 17:45:05 2018 +0000\n\n    Merge remote-tracking branch 'origin/master' into HEAD\n\ncommit 03868583f8555aae30bdfb5839a82afd3704f4cb\nAuthor: Chris Emerson <github@mail.nosreme.org>\nDate:   Mon Nov 20 01:57:56 2017 +0000\n\n    Fix some warnings.\n\ncommit 162b13463e44c782394d418db5ca5710931beb7a\nAuthor: Chris Emerson <github@mail.nosreme.org>\nDate:   Mon Nov 20 01:48:02 2017 +0000\n\n    Remove unneeded import.\n\ncommit 20cce3cbfd0f386d92b80bf4c7b83ab4d78a73e7\nMerge: 81e98147 fa794f58\nAuthor: Chris Emerson <github@mail.nosreme.org>\nDate:   Mon Nov 20 01:07:17 2017 +0000\n\n    Merge branch 'master' into difflines_mode\n\ncommit 81e981472ceb3a0938d6f050edf8dcd5ebff8e33\nAuthor: Chris Emerson <github@mail.nosreme.org>\nDate:   Mon Nov 20 01:02:50 2017 +0000\n\n    Add a simple \"modified lines\" test.\n\ncommit 018390ced3523ca9fdd5384a6c1004cdb99174a9\nAuthor: Chris Emerson <github@mail.nosreme.org>\nDate:   Thu Nov 2 23:06:21 2017 +0000\n\n    Update test output.\n\ncommit 7909f4986ed21999aff7b3d075332e686ac464ff\nAuthor: Chris Emerson <github@mail.nosreme.org>\nDate:   Thu Nov 2 23:03:22 2017 +0000\n\n    Rerun rustfmt.\n\ncommit 6275f1a8da52db1df36c4b7432996cdbb94ca463\nMerge: 7a66d286 175c0c6f\nAuthor: Chris Emerson <github@mail.nosreme.org>\nDate:   Thu Nov 2 21:40:29 2017 +0000\n\n    Merge remote-tracking branch 'origin/master' into difflines_mode\n\ncommit 7a66d2866432c430b046938bb37bf5efc03fa9da\nAuthor: Chris Emerson <github@mail.nosreme.org>\nDate:   Thu Nov 2 21:36:40 2017 +0000\n\n    WIP: Add a separate API to get changed lines.\n    Currently calls format_input() and adjusts the output.\n\ncommit c8163a923c7d9ae42fd8078cd9b2b51c6f73e36e\nAuthor: Chris Emerson <github@mail.nosreme.org>\nDate:   Fri Oct 27 22:53:33 2017 +0100\n\n    Remove \"modified\" from the documentation again.\n\ncommit 94041fa115a6f428afe40e01d41bf2fe603f70bb\nMerge: acaa3c7c 2adf7eec\nAuthor: Chris Emerson <github@mail.nosreme.org>\nDate:   Fri Oct 27 22:47:05 2017 +0100\n\n    Merge branch 'master' into difflines_mode\n\ncommit acaa3c7ce446297cd3fe5c9610763629a2d8537c\nAuthor: Chris Emerson <github@mail.nosreme.org>\nDate:   Tue Oct 24 23:34:14 2017 +0100\n\n    Update the Modified write mode to use `out` instead of just prinln!().\n\n    This means we can test it more easily, so do so.\n\ncommit 9f1bbca1f3c12d933ea823918cc548e69b438b1e\nAuthor: Chris Emerson <github@mail.nosreme.org>\nDate:   Tue Oct 24 23:11:55 2017 +0100\n\n    Add \"Modified\" to the various lists of modes.\n\ncommit e12f023756cf3daf202dcaa02bd6492b0d2a0455\nAuthor: Chris Emerson <github@mail.nosreme.org>\nDate:   Tue Oct 24 22:57:33 2017 +0100\n\n    Rerun cargo fmt.\n\ncommit 0f8a43630fa1548e95dcb1c0933708f9c11ae135\nAuthor: Chris Emerson <github@mail.nosreme.org>\nDate:   Tue Oct 24 22:46:26 2017 +0100\n\n    Add `line_number_orig` to instances of `Mismatch` in tests.\n\ncommit d432a7061f74dbc159584f08470c64985a4b41d9\nAuthor: Chris Emerson <github@mail.nosreme.org>\nDate:   Tue Oct 24 22:41:40 2017 +0100\n\n    Add a `line_number_orig` field to `Mismatch` to track the pre-format line number.\n    Use that for the write-mode=modified output.\n\ncommit bdb7d1d23f02f7b8f18e7073a65be88ff94cdbb3\nAuthor: Chris Emerson <github@mail.nosreme.org>\nDate:   Tue Oct 24 22:35:50 2017 +0100\n\n    First basic --write-mode=modified implementation.\n\ncommit ea1433dae0c32879a31182c11be08b1bf53fbf31\nAuthor: Chris Emerson <github@mail.nosreme.org>\nDate:   Fri Oct 20 00:04:16 2017 +0100\n\n    WIP on new \"modified\" mode.\n\ncommit 27ee9483cf937a11a0e115f54de0afcc3f9ceb44\nMerge: e48dd81a 2a84352d\nAuthor: Chris Emerson <github@mail.nosreme.org>\nDate:   Tue Oct 24 21:56:44 2017 +0100\n\n    Merge remote-tracking branch 'jc/diff_zero_context' into difflines_mode", "tree": {"sha": "0f6b985273659d9c9cd07c5a25e745a8cdc60cba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f6b985273659d9c9cd07c5a25e745a8cdc60cba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc377f3fb0ea33fc669dd4b99de412c74db06725", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc377f3fb0ea33fc669dd4b99de412c74db06725", "html_url": "https://github.com/rust-lang/rust/commit/fc377f3fb0ea33fc669dd4b99de412c74db06725", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc377f3fb0ea33fc669dd4b99de412c74db06725/comments", "author": {"login": "jugglerchris", "id": 1644842, "node_id": "MDQ6VXNlcjE2NDQ4NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1644842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jugglerchris", "html_url": "https://github.com/jugglerchris", "followers_url": "https://api.github.com/users/jugglerchris/followers", "following_url": "https://api.github.com/users/jugglerchris/following{/other_user}", "gists_url": "https://api.github.com/users/jugglerchris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jugglerchris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jugglerchris/subscriptions", "organizations_url": "https://api.github.com/users/jugglerchris/orgs", "repos_url": "https://api.github.com/users/jugglerchris/repos", "events_url": "https://api.github.com/users/jugglerchris/events{/privacy}", "received_events_url": "https://api.github.com/users/jugglerchris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jugglerchris", "id": 1644842, "node_id": "MDQ6VXNlcjE2NDQ4NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1644842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jugglerchris", "html_url": "https://github.com/jugglerchris", "followers_url": "https://api.github.com/users/jugglerchris/followers", "following_url": "https://api.github.com/users/jugglerchris/following{/other_user}", "gists_url": "https://api.github.com/users/jugglerchris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jugglerchris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jugglerchris/subscriptions", "organizations_url": "https://api.github.com/users/jugglerchris/orgs", "repos_url": "https://api.github.com/users/jugglerchris/repos", "events_url": "https://api.github.com/users/jugglerchris/events{/privacy}", "received_events_url": "https://api.github.com/users/jugglerchris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0e3e22248cd14ebbe0253e9720261a0328bfc59", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e3e22248cd14ebbe0253e9720261a0328bfc59", "html_url": "https://github.com/rust-lang/rust/commit/e0e3e22248cd14ebbe0253e9720261a0328bfc59"}], "stats": {"total": 191, "additions": 182, "deletions": 9}, "files": [{"sha": "bc4573b0ef8603c3a218bb656314c6d7899498ec", "filename": "Configurations.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc377f3fb0ea33fc669dd4b99de412c74db06725/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/fc377f3fb0ea33fc669dd4b99de412c74db06725/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=fc377f3fb0ea33fc669dd4b99de412c74db06725", "patch": "@@ -1766,7 +1766,7 @@ See also: [`match_block_trailing_comma`](#match_block_trailing_comma).\n What Write Mode to use when none is supplied: Replace, Overwrite, Display, Diff, Coverage\n \n - **Default value**: `\"Overwrite\"`\n-- **Possible values**: `\"Checkstyle\"`, `\"Coverage\"`, `\"Diff\"`, `\"Display\"`, `\"Overwrite\"`, `\"Plain\"`, `\"Replace\"`\n+- **Possible values**: `\"Checkstyle\"`, `\"Coverage\"`, `\"Diff\"`, `\"Display\"`, `\"Overwrite\"`, `\"Plain\"`, `\"Replace\"`, `\"Modified\"`\n - **Stable**: No\n \n ## `blank_lines_upper_bound`"}, {"sha": "db7c32537f29c63741798a93c225945d9e3c761c", "filename": "src/config.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc377f3fb0ea33fc669dd4b99de412c74db06725/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc377f3fb0ea33fc669dd4b99de412c74db06725/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=fc377f3fb0ea33fc669dd4b99de412c74db06725", "patch": "@@ -128,6 +128,8 @@ configuration_option_enum! { WriteMode:\n     Plain,\n     // Outputs a checkstyle XML file.\n     Checkstyle,\n+    // Output the changed lines\n+    Modified,\n }\n \n configuration_option_enum! { Color:\n@@ -298,7 +300,7 @@ macro_rules! create_config {\n \n         // Macro hygiene won't allow us to make `set_$i()` methods on Config\n         // for each item, so this struct is used to give the API to set values:\n-        // `config.get().option(false)`. It's pretty ugly. Consider replacing\n+        // `config.set().option(false)`. It's pretty ugly. Consider replacing\n         // with `config.set_option(false)` if we ever get a stable/usable\n         // `concat_idents!()`.\n         pub struct ConfigSetter<'a>(&'a mut Config);\n@@ -677,7 +679,7 @@ create_config! {\n     // Control options (changes the operation of rustfmt, rather than the formatting)\n     write_mode: WriteMode, WriteMode::Overwrite, false,\n         \"What Write Mode to use when none is supplied: \\\n-         Replace, Overwrite, Display, Plain, Diff, Coverage\";\n+         Replace, Overwrite, Display, Plain, Diff, Coverage, Modified\";\n     color: Color, Color::Auto, false,\n         \"What Color option to use when none is supplied: Always, Never, Auto\";\n     required_version: String, env!(\"CARGO_PKG_VERSION\").to_owned(), false,"}, {"sha": "7b3034dda1e1accf98e2a67cf0950fec5af8c2b4", "filename": "src/filemap.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fc377f3fb0ea33fc669dd4b99de412c74db06725/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc377f3fb0ea33fc669dd4b99de412c74db06725/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=fc377f3fb0ea33fc669dd4b99de412c74db06725", "patch": "@@ -16,7 +16,7 @@ use std::path::Path;\n \n use checkstyle::{output_checkstyle_file, output_footer, output_header};\n use config::{Config, NewlineStyle, WriteMode};\n-use rustfmt_diff::{make_diff, print_diff, Mismatch};\n+use rustfmt_diff::{make_diff, output_modified, print_diff, Mismatch};\n use syntax::codemap::FileName;\n \n // A map of the files of a crate, with their new content\n@@ -167,6 +167,15 @@ where\n                 return Ok(has_diff);\n             }\n         }\n+        WriteMode::Modified => {\n+            let filename = filename_to_path();\n+            if let Ok((ori, fmt)) = source_and_formatted_text(text, filename, config) {\n+                let mismatch = make_diff(&ori, &fmt, 0);\n+                let has_diff = !mismatch.is_empty();\n+                output_modified(out, mismatch);\n+                return Ok(has_diff);\n+            }\n+        }\n         WriteMode::Checkstyle => {\n             let filename = filename_to_path();\n             let diff = create_diff(filename, text, config)?;"}, {"sha": "8adaa77ef683cd50bf171e1da2a2615f5ec624e9", "filename": "src/lib.rs", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/fc377f3fb0ea33fc669dd4b99de412c74db06725/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc377f3fb0ea33fc669dd4b99de412c74db06725/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=fc377f3fb0ea33fc669dd4b99de412c74db06725", "patch": "@@ -29,7 +29,7 @@ extern crate unicode_segmentation;\n \n use std::collections::HashMap;\n use std::fmt;\n-use std::io::{self, stdout, Write};\n+use std::io::{self, stdout, BufRead, Write};\n use std::iter::repeat;\n use std::path::PathBuf;\n use std::rc::Rc;\n@@ -693,6 +693,67 @@ pub fn format_input<T: Write>(\n     }\n }\n \n+/// A single span of changed lines, with 0 or more removed lines\n+/// and a vector of 0 or more inserted lines.\n+#[derive(Debug, PartialEq, Eq)]\n+pub struct ModifiedChunk {\n+    /// The first affected line before formatting.\n+    pub line_number: u32,\n+    /// The number of lines which have been replaced\n+    pub lines_removed: u32,\n+    /// The new lines\n+    pub lines: Vec<String>,\n+}\n+\n+/// Set of changed sections of a file.\n+#[derive(Debug, PartialEq, Eq)]\n+pub struct ModifiedLines {\n+    /// The set of changed chunks.\n+    pub chunks: Vec<ModifiedChunk>,\n+}\n+\n+/// Format a file and return a `ModifiedLines` data structure describing\n+/// the changed ranges of lines.\n+pub fn get_modified_lines(\n+    input: Input,\n+    config: &Config,\n+) -> Result<(Summary, FileMap, FormatReport, ModifiedLines), (io::Error, Summary)> {\n+    let mut data = Vec::new();\n+\n+    let mut config = config.clone();\n+    config.set().write_mode(config::WriteMode::Modified);\n+    let (summary, filemap, formatreport) = format_input(input, &config, Some(&mut data))?;\n+\n+    let mut lines = data.lines();\n+    let mut chunks = Vec::new();\n+    while let Some(Ok(header)) = lines.next() {\n+        // Parse the header line\n+        let values: Vec<_> = header\n+            .split(' ')\n+            .map(|s| s.parse::<u32>().unwrap())\n+            .collect();\n+        assert_eq!(values.len(), 3);\n+        let line_number = values[0];\n+        let num_removed = values[1];\n+        let num_added = values[2];\n+        let mut added_lines = Vec::new();\n+        for _ in 0..num_added {\n+            added_lines.push(lines.next().unwrap().unwrap());\n+        }\n+        chunks.push(ModifiedChunk {\n+            line_number: line_number,\n+            lines_removed: num_removed,\n+            lines: added_lines,\n+        });\n+    }\n+    Ok((\n+        summary,\n+        filemap,\n+        formatreport,\n+        ModifiedLines { chunks: chunks },\n+    ))\n+}\n+\n #[derive(Debug)]\n pub enum Input {\n     File(PathBuf),"}, {"sha": "a4d6a9bd6a6d952a26723ed629c39dbc147273d9", "filename": "src/rustfmt_diff.rs", "status": "modified", "additions": 60, "deletions": 4, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/fc377f3fb0ea33fc669dd4b99de412c74db06725/src%2Frustfmt_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc377f3fb0ea33fc669dd4b99de412c74db06725/src%2Frustfmt_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustfmt_diff.rs?ref=fc377f3fb0ea33fc669dd4b99de412c74db06725", "patch": "@@ -13,6 +13,7 @@ use diff;\n use std::collections::VecDeque;\n use std::io;\n use term;\n+use std::io::Write;\n use utils::use_colored_tty;\n \n #[derive(Debug, PartialEq)]\n@@ -24,14 +25,19 @@ pub enum DiffLine {\n \n #[derive(Debug, PartialEq)]\n pub struct Mismatch {\n+    /// The line number in the formatted version.\n     pub line_number: u32,\n+    /// The line number in the original version.\n+    pub line_number_orig: u32,\n+    /// The set of lines (context and old/new) in the mismatch.\n     pub lines: Vec<DiffLine>,\n }\n \n impl Mismatch {\n-    fn new(line_number: u32) -> Mismatch {\n+    fn new(line_number: u32, line_number_orig: u32) -> Mismatch {\n         Mismatch {\n             line_number: line_number,\n+            line_number_orig: line_number_orig,\n             lines: Vec::new(),\n         }\n     }\n@@ -77,30 +83,38 @@ impl OutputWriter {\n // Produces a diff between the expected output and actual output of rustfmt.\n pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Mismatch> {\n     let mut line_number = 1;\n+    let mut line_number_orig = 1;\n     let mut context_queue: VecDeque<&str> = VecDeque::with_capacity(context_size);\n     let mut lines_since_mismatch = context_size + 1;\n     let mut results = Vec::new();\n-    let mut mismatch = Mismatch::new(0);\n+    let mut mismatch = Mismatch::new(0, 0);\n \n     for result in diff::lines(expected, actual) {\n         match result {\n             diff::Result::Left(str) => {\n                 if lines_since_mismatch >= context_size && lines_since_mismatch > 0 {\n                     results.push(mismatch);\n-                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n+                    mismatch = Mismatch::new(\n+                        line_number - context_queue.len() as u32,\n+                        line_number_orig - context_queue.len() as u32,\n+                    );\n                 }\n \n                 while let Some(line) = context_queue.pop_front() {\n                     mismatch.lines.push(DiffLine::Context(line.to_owned()));\n                 }\n \n                 mismatch.lines.push(DiffLine::Resulting(str.to_owned()));\n+                line_number_orig += 1;\n                 lines_since_mismatch = 0;\n             }\n             diff::Result::Right(str) => {\n                 if lines_since_mismatch >= context_size && lines_since_mismatch > 0 {\n                     results.push(mismatch);\n-                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n+                    mismatch = Mismatch::new(\n+                        line_number - context_queue.len() as u32,\n+                        line_number_orig - context_queue.len() as u32,\n+                    );\n                 }\n \n                 while let Some(line) = context_queue.pop_front() {\n@@ -123,6 +137,7 @@ pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Misma\n                 }\n \n                 line_number += 1;\n+                line_number_orig += 1;\n                 lines_since_mismatch += 1;\n             }\n         }\n@@ -158,6 +173,42 @@ where\n     }\n }\n \n+/// Convert a Mismatch into a serialised form which just includes\n+/// enough information to modify the original file.\n+/// Each section starts with a line with three integers, space separated:\n+///     lineno num_removed num_added\n+/// followd by (num_added) lines of added text.  The line numbers are\n+/// relative to the original file.\n+pub fn output_modified<W>(mut out: W, diff: Vec<Mismatch>)\n+where\n+    W: Write,\n+{\n+    for mismatch in diff {\n+        let (num_removed, num_added) = mismatch.lines.iter().fold((0, 0), |(rem, add), line| {\n+            match *line {\n+                DiffLine::Context(_) => panic!(\"No Context expected\"),\n+                DiffLine::Expected(_) => (rem, add + 1),\n+                DiffLine::Resulting(_) => (rem + 1, add),\n+            }\n+        });\n+        // Write a header with enough information to separate the modified lines.\n+        writeln!(\n+            out,\n+            \"{} {} {}\",\n+            mismatch.line_number_orig, num_removed, num_added\n+        ).unwrap();\n+\n+        for line in mismatch.lines {\n+            match line {\n+                DiffLine::Context(_) | DiffLine::Resulting(_) => (),\n+                DiffLine::Expected(ref str) => {\n+                    writeln!(out, \"{}\", str).unwrap();\n+                }\n+            }\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::{make_diff, Mismatch};\n@@ -173,6 +224,7 @@ mod test {\n             vec![\n                 Mismatch {\n                     line_number: 2,\n+                    line_number_orig: 2,\n                     lines: vec![\n                         Context(\"two\".to_owned()),\n                         Resulting(\"three\".to_owned()),\n@@ -194,6 +246,7 @@ mod test {\n             vec![\n                 Mismatch {\n                     line_number: 2,\n+                    line_number_orig: 2,\n                     lines: vec![\n                         Context(\"two\".to_owned()),\n                         Resulting(\"three\".to_owned()),\n@@ -203,6 +256,7 @@ mod test {\n                 },\n                 Mismatch {\n                     line_number: 5,\n+                    line_number_orig: 5,\n                     lines: vec![\n                         Resulting(\"five\".to_owned()),\n                         Expected(\"cinq\".to_owned()),\n@@ -223,6 +277,7 @@ mod test {\n             vec![\n                 Mismatch {\n                     line_number: 3,\n+                    line_number_orig: 3,\n                     lines: vec![Resulting(\"three\".to_owned()), Expected(\"trois\".to_owned())],\n                 },\n             ]\n@@ -239,6 +294,7 @@ mod test {\n             vec![\n                 Mismatch {\n                     line_number: 5,\n+                    line_number_orig: 5,\n                     lines: vec![Context(\"five\".to_owned()), Expected(\"\".to_owned())],\n                 },\n             ]"}, {"sha": "bdd36cec736b258dd82ab3cb1efc049861fb4f0e", "filename": "tests/system.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fc377f3fb0ea33fc669dd4b99de412c74db06725/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc377f3fb0ea33fc669dd4b99de412c74db06725/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=fc377f3fb0ea33fc669dd4b99de412c74db06725", "patch": "@@ -143,6 +143,31 @@ fn checkstyle_test() {\n     assert_output(Path::new(filename), Path::new(expected_filename));\n }\n \n+#[test]\n+fn modified_test() {\n+    // Test \"modified\" output\n+    let filename = \"tests/writemode/source/modified.rs\";\n+    let (_summary, _filemap, _report, modified) =\n+        get_modified_lines(Input::File(filename.into()), &Config::default()).unwrap();\n+    assert_eq!(\n+        modified,\n+        ModifiedLines {\n+            chunks: vec![\n+                ModifiedChunk {\n+                    line_number: 4,\n+                    lines_removed: 4,\n+                    lines: vec![\"fn blah() {}\".into()],\n+                },\n+                ModifiedChunk {\n+                    line_number: 9,\n+                    lines_removed: 6,\n+                    lines: vec![\"#[cfg(a, b)]\".into(), \"fn main() {}\".into()],\n+                },\n+            ],\n+        }\n+    );\n+}\n+\n // Helper function for comparing the results of rustfmt\n // to a known output file generated by one of the write modes.\n fn assert_output(source: &Path, expected_filename: &Path) {\n@@ -503,6 +528,7 @@ fn rustfmt_diff_make_diff_tests() {\n         vec![\n             Mismatch {\n                 line_number: 1,\n+                line_number_orig: 1,\n                 lines: vec![\n                     DiffLine::Context(\"a\".into()),\n                     DiffLine::Resulting(\"b\".into()),"}, {"sha": "948beb348dbbf4c6f7f0ae099f84cc58763129fe", "filename": "tests/writemode/source/modified.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fc377f3fb0ea33fc669dd4b99de412c74db06725/tests%2Fwritemode%2Fsource%2Fmodified.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc377f3fb0ea33fc669dd4b99de412c74db06725/tests%2Fwritemode%2Fsource%2Fmodified.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Fsource%2Fmodified.rs?ref=fc377f3fb0ea33fc669dd4b99de412c74db06725", "patch": "@@ -0,0 +1,14 @@\n+// rustfmt-write_mode: modified\n+// Test \"modified\" output\n+\n+fn\n+blah\n+()\n+{ }\n+\n+\n+#[cfg\n+(  a , b\n+)]\n+fn\n+main() {}"}, {"sha": "5c0539a665e6833e40d6bdfbca0147fc3f47ad2b", "filename": "tests/writemode/target/modified.txt", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc377f3fb0ea33fc669dd4b99de412c74db06725/tests%2Fwritemode%2Ftarget%2Fmodified.txt", "raw_url": "https://github.com/rust-lang/rust/raw/fc377f3fb0ea33fc669dd4b99de412c74db06725/tests%2Fwritemode%2Ftarget%2Fmodified.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Ftarget%2Fmodified.txt?ref=fc377f3fb0ea33fc669dd4b99de412c74db06725", "patch": "@@ -0,0 +1,5 @@\n+4 4 1\n+fn blah() {}\n+10 5 2\n+#[cfg(a, b)]\n+fn main() {}"}]}