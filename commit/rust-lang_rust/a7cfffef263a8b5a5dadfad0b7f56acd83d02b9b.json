{"sha": "a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3Y2ZmZmVmMjYzYThiNWE1ZGFkZmFkMGI3ZjU2YWNkODNkMDJiOWI=", "commit": {"author": {"name": "suyash458", "email": "suyash.behera458@gmail.com", "date": "2020-12-05T12:59:22Z"}, "committer": {"name": "Suyash458", "email": "suyash.behera458@gmail.com", "date": "2020-12-11T05:30:03Z"}, "message": "add MSRV to more lints specified in #6097\nupdate tests", "tree": {"sha": "b9b418b47005f599c9c9111f0ed254977b4d9ff2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9b418b47005f599c9c9111f0ed254977b4d9ff2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b", "html_url": "https://github.com/rust-lang/rust/commit/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b/comments", "author": {"login": "Suyash458", "id": 7749510, "node_id": "MDQ6VXNlcjc3NDk1MTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7749510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Suyash458", "html_url": "https://github.com/Suyash458", "followers_url": "https://api.github.com/users/Suyash458/followers", "following_url": "https://api.github.com/users/Suyash458/following{/other_user}", "gists_url": "https://api.github.com/users/Suyash458/gists{/gist_id}", "starred_url": "https://api.github.com/users/Suyash458/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Suyash458/subscriptions", "organizations_url": "https://api.github.com/users/Suyash458/orgs", "repos_url": "https://api.github.com/users/Suyash458/repos", "events_url": "https://api.github.com/users/Suyash458/events{/privacy}", "received_events_url": "https://api.github.com/users/Suyash458/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Suyash458", "id": 7749510, "node_id": "MDQ6VXNlcjc3NDk1MTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7749510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Suyash458", "html_url": "https://github.com/Suyash458", "followers_url": "https://api.github.com/users/Suyash458/followers", "following_url": "https://api.github.com/users/Suyash458/following{/other_user}", "gists_url": "https://api.github.com/users/Suyash458/gists{/gist_id}", "starred_url": "https://api.github.com/users/Suyash458/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Suyash458/subscriptions", "organizations_url": "https://api.github.com/users/Suyash458/orgs", "repos_url": "https://api.github.com/users/Suyash458/repos", "events_url": "https://api.github.com/users/Suyash458/events{/privacy}", "received_events_url": "https://api.github.com/users/Suyash458/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b02b0c737abd9c04ebd43fc2c94444d932d044fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/b02b0c737abd9c04ebd43fc2c94444d932d044fe", "html_url": "https://github.com/rust-lang/rust/commit/b02b0c737abd9c04ebd43fc2c94444d932d044fe"}], "stats": {"total": 350, "additions": 282, "deletions": 68}, "files": [{"sha": "54bc69e058bc79460966385bec88e8cfce71f6bb", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b", "patch": "@@ -6,9 +6,12 @@ use rustc_errors::Applicability;\n use rustc_hir::{BinOp, BinOpKind, Expr, ExprKind, QPath, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n-use crate::utils::{snippet_with_applicability, span_lint_and_sugg, SpanlessEq};\n+use crate::utils::{meets_msrv, snippet_with_applicability, span_lint_and_sugg, SpanlessEq};\n+\n+const CHECKED_CONVERSIONS_MSRV: RustcVersion = RustcVersion::new(1, 34, 0);\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for explicit bounds checking when casting.\n@@ -39,10 +42,25 @@ declare_clippy_lint! {\n     \"`try_from` could replace manual bounds checking when casting\"\n }\n \n-declare_lint_pass!(CheckedConversions => [CHECKED_CONVERSIONS]);\n+pub struct CheckedConversions {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl CheckedConversions {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(CheckedConversions => [CHECKED_CONVERSIONS]);\n \n impl<'tcx> LateLintPass<'tcx> for CheckedConversions {\n     fn check_expr(&mut self, cx: &LateContext<'_>, item: &Expr<'_>) {\n+        if !meets_msrv(self.msrv.as_ref(), &CHECKED_CONVERSIONS_MSRV) {\n+            return;\n+        }\n+\n         let result = if_chain! {\n             if !in_external_macro(cx.sess(), item.span);\n             if let ExprKind::Binary(op, ref left, ref right) = &item.kind;\n@@ -74,6 +92,8 @@ impl<'tcx> LateLintPass<'tcx> for CheckedConversions {\n             }\n         }\n     }\n+\n+    extract_msrv_attr!(LateContext);\n }\n \n /// Searches for a single check from unsigned to _ is done"}, {"sha": "38a25d22aa26a0b186b20c0eb8a6ca0078df0fc4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b", "patch": "@@ -1003,6 +1003,14 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box matches::Matches::new(msrv));\n     store.register_early_pass(move || box manual_non_exhaustive::ManualNonExhaustive::new(msrv));\n     store.register_late_pass(move || box manual_strip::ManualStrip::new(msrv));\n+    store.register_early_pass(move || box redundant_static_lifetimes::RedundantStaticLifetimes::new(msrv));\n+    store.register_early_pass(move || box redundant_field_names::RedundantFieldNames::new(msrv));\n+    store.register_late_pass(move || box checked_conversions::CheckedConversions::new(msrv));\n+    store.register_late_pass(move || box mem_replace::MemReplace::new(msrv));\n+    store.register_late_pass(move || box ranges::Ranges::new(msrv));\n+    store.register_late_pass(move || box use_self::UseSelf::new(msrv));\n+    store.register_late_pass(move || box missing_const_for_fn::MissingConstForFn::new(msrv));\n+\n     store.register_late_pass(|| box size_of_in_element_count::SizeOfInElementCount);\n     store.register_late_pass(|| box map_clone::MapClone);\n     store.register_late_pass(|| box map_err_ignore::MapErrIgnore);\n@@ -1013,7 +1021,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box main_recursion::MainRecursion::default());\n     store.register_late_pass(|| box lifetimes::Lifetimes);\n     store.register_late_pass(|| box entry::HashMapPass);\n-    store.register_late_pass(|| box ranges::Ranges);\n     store.register_late_pass(|| box types::Casts);\n     let type_complexity_threshold = conf.type_complexity_threshold;\n     store.register_late_pass(move || box types::TypeComplexity::new(type_complexity_threshold));\n@@ -1058,7 +1065,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box neg_multiply::NegMultiply);\n     store.register_late_pass(|| box mem_discriminant::MemDiscriminant);\n     store.register_late_pass(|| box mem_forget::MemForget);\n-    store.register_late_pass(|| box mem_replace::MemReplace);\n     store.register_late_pass(|| box arithmetic::Arithmetic::default());\n     store.register_late_pass(|| box assign_ops::AssignOps);\n     store.register_late_pass(|| box let_if_seq::LetIfSeq);\n@@ -1080,7 +1086,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box pass_by_ref_or_value);\n     store.register_late_pass(|| box ref_option_ref::RefOptionRef);\n     store.register_late_pass(|| box try_err::TryErr);\n-    store.register_late_pass(|| box use_self::UseSelf);\n     store.register_late_pass(|| box bytecount::ByteCount);\n     store.register_late_pass(|| box infinite_iter::InfiniteIter);\n     store.register_late_pass(|| box inline_fn_without_body::InlineFnWithoutBody);\n@@ -1106,10 +1111,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box unnecessary_wraps::UnnecessaryWraps);\n     store.register_late_pass(|| box types::RefToMut);\n     store.register_late_pass(|| box assertions_on_constants::AssertionsOnConstants);\n-    store.register_late_pass(|| box missing_const_for_fn::MissingConstForFn);\n     store.register_late_pass(|| box transmuting_null::TransmutingNull);\n     store.register_late_pass(|| box path_buf_push_overwrite::PathBufPushOverwrite);\n-    store.register_late_pass(|| box checked_conversions::CheckedConversions);\n     store.register_late_pass(|| box integer_division::IntegerDivision);\n     store.register_late_pass(|| box inherent_to_string::InherentToString);\n     let max_trait_bounds = conf.max_trait_bounds;\n@@ -1138,7 +1141,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| box redundant_else::RedundantElse);\n     store.register_late_pass(|| box create_dir::CreateDir);\n     store.register_early_pass(|| box needless_arbitrary_self_type::NeedlessArbitrarySelfType);\n-    store.register_early_pass(|| box redundant_static_lifetimes::RedundantStaticLifetimes);\n     store.register_late_pass(|| box cargo_common_metadata::CargoCommonMetadata);\n     store.register_late_pass(|| box multiple_crate_versions::MultipleCrateVersions);\n     store.register_late_pass(|| box wildcard_dependencies::WildcardDependencies);\n@@ -1178,7 +1180,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box mut_mutex_lock::MutMutexLock);\n     store.register_late_pass(|| box match_on_vec_items::MatchOnVecItems);\n     store.register_late_pass(|| box manual_async_fn::ManualAsyncFn);\n-    store.register_early_pass(|| box redundant_field_names::RedundantFieldNames);\n     store.register_late_pass(|| box vec_resize_to_zero::VecResizeToZero);\n     store.register_late_pass(|| box panic_in_result_fn::PanicInResultFn);\n     let single_char_binding_names_threshold = conf.single_char_binding_names_threshold;"}, {"sha": "19087b02077142fb84d86a62c87beffa7ac844d7", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b", "patch": "@@ -1,13 +1,14 @@\n use crate::utils::{\n-    in_macro, match_def_path, match_qpath, paths, snippet, snippet_with_applicability, span_lint_and_help,\n+    in_macro, match_def_path, match_qpath, meets_msrv, paths, snippet, snippet_with_applicability, span_lint_and_help,\n     span_lint_and_sugg, span_lint_and_then,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, QPath};\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::sym;\n \n@@ -94,7 +95,7 @@ declare_clippy_lint! {\n     \"replacing a value of type `T` with `T::default()` instead of using `std::mem::take`\"\n }\n \n-declare_lint_pass!(MemReplace =>\n+impl_lint_pass!(MemReplace =>\n     [MEM_REPLACE_OPTION_WITH_NONE, MEM_REPLACE_WITH_UNINIT, MEM_REPLACE_WITH_DEFAULT]);\n \n fn check_replace_option_with_none(cx: &LateContext<'_>, src: &Expr<'_>, dest: &Expr<'_>, expr_span: Span) {\n@@ -224,6 +225,19 @@ fn check_replace_with_default(cx: &LateContext<'_>, src: &Expr<'_>, dest: &Expr<\n     }\n }\n \n+const MEM_REPLACE_WITH_DEFAULT_MSRV: RustcVersion = RustcVersion::new(1, 40, 0);\n+\n+pub struct MemReplace {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl MemReplace {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n impl<'tcx> LateLintPass<'tcx> for MemReplace {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n@@ -236,8 +250,11 @@ impl<'tcx> LateLintPass<'tcx> for MemReplace {\n             then {\n                 check_replace_option_with_none(cx, src, dest, expr.span);\n                 check_replace_with_uninit(cx, src, dest, expr.span);\n-                check_replace_with_default(cx, src, dest, expr.span);\n+                if meets_msrv(self.msrv.as_ref(), &MEM_REPLACE_WITH_DEFAULT_MSRV) {\n+                    check_replace_with_default(cx, src, dest, expr.span);\n+                }\n             }\n         }\n     }\n+    extract_msrv_attr!(LateContext);\n }"}, {"sha": "5133f31e0e7bf10dbb553247cdf1f3ecbd7854b2", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b", "patch": "@@ -1487,7 +1487,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             [\"expect\", ..] => lint_expect(cx, expr, arg_lists[0]),\n             [\"unwrap_or\", \"map\"] => option_map_unwrap_or::lint(cx, expr, arg_lists[1], arg_lists[0], method_spans[1]),\n             [\"unwrap_or_else\", \"map\"] => {\n-                if !lint_map_unwrap_or_else(cx, expr, arg_lists[1], arg_lists[0]) {\n+                if !lint_map_unwrap_or_else(cx, expr, arg_lists[1], arg_lists[0], self.msrv.as_ref()) {\n                     unnecessary_lazy_eval::lint(cx, expr, arg_lists[0], \"unwrap_or\");\n                 }\n             },\n@@ -1509,7 +1509,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             [\"next\", \"iter\"] => lint_iter_next(cx, expr, arg_lists[1]),\n             [\"map\", \"filter\"] => lint_filter_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"map\", \"filter_map\"] => lint_filter_map_map(cx, expr, arg_lists[1], arg_lists[0]),\n-            [\"next\", \"filter_map\"] => lint_filter_map_next(cx, expr, arg_lists[1]),\n+            [\"next\", \"filter_map\"] => lint_filter_map_next(cx, expr, arg_lists[1], self.msrv.as_ref()),\n             [\"map\", \"find\"] => lint_find_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"flat_map\", \"filter\"] => lint_filter_flat_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"flat_map\", \"filter_map\"] => lint_filter_map_flat_map(cx, expr, arg_lists[1], arg_lists[0]),\n@@ -2733,14 +2733,20 @@ fn lint_map_flatten<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, map\n     }\n }\n \n+const MAP_UNWRAP_OR_MSRV: RustcVersion = RustcVersion::new(1, 41, 0);\n+\n /// lint use of `map().unwrap_or_else()` for `Option`s and `Result`s\n /// Return true if lint triggered\n fn lint_map_unwrap_or_else<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &'tcx hir::Expr<'_>,\n     map_args: &'tcx [hir::Expr<'_>],\n     unwrap_args: &'tcx [hir::Expr<'_>],\n+    msrv: Option<&RustcVersion>,\n ) -> bool {\n+    if !meets_msrv(msrv, &MAP_UNWRAP_OR_MSRV) {\n+        return false;\n+    }\n     // lint if the caller of `map()` is an `Option`\n     let is_option = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&map_args[0]), sym::option_type);\n     let is_result = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&map_args[0]), sym::result_type);\n@@ -2923,9 +2929,20 @@ fn lint_filter_map<'tcx>(\n     }\n }\n \n+const FILTER_MAP_NEXT_MSRV: RustcVersion = RustcVersion::new(1, 30, 0);\n+\n /// lint use of `filter_map().next()` for `Iterators`\n-fn lint_filter_map_next<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, filter_args: &'tcx [hir::Expr<'_>]) {\n+fn lint_filter_map_next<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx hir::Expr<'_>,\n+    filter_args: &'tcx [hir::Expr<'_>],\n+    msrv: Option<&RustcVersion>,\n+) {\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n+        if !meets_msrv(msrv, &FILTER_MAP_NEXT_MSRV) {\n+            return;\n+        }\n+\n         let msg = \"called `filter_map(..).next()` on an `Iterator`. This is more succinctly expressed by calling \\\n                    `.find_map(..)` instead.\";\n         let filter_snippet = snippet(cx, filter_args[1].span, \"..\");"}, {"sha": "6ebeaced62a335fcb806115cf1a1ec9c9ae291bd", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b", "patch": "@@ -1,14 +1,19 @@\n use crate::utils::qualify_min_const_fn::is_min_const_fn;\n-use crate::utils::{fn_has_unsatisfiable_preds, has_drop, is_entrypoint_fn, span_lint, trait_ref_of_method};\n+use crate::utils::{\n+    fn_has_unsatisfiable_preds, has_drop, is_entrypoint_fn, meets_msrv, span_lint, trait_ref_of_method,\n+};\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, Constness, FnDecl, GenericParamKind, HirId};\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n use rustc_typeck::hir_ty_to_ty;\n \n+const MISSING_CONST_FOR_FN_MSRV: RustcVersion = RustcVersion::new(1, 37, 0);\n+\n declare_clippy_lint! {\n     /// **What it does:**\n     ///\n@@ -69,7 +74,18 @@ declare_clippy_lint! {\n     \"Lint functions definitions that could be made `const fn`\"\n }\n \n-declare_lint_pass!(MissingConstForFn => [MISSING_CONST_FOR_FN]);\n+impl_lint_pass!(MissingConstForFn => [MISSING_CONST_FOR_FN]);\n+\n+pub struct MissingConstForFn {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl MissingConstForFn {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n \n impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n     fn check_fn(\n@@ -81,6 +97,10 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n         span: Span,\n         hir_id: HirId,\n     ) {\n+        if !meets_msrv(self.msrv.as_ref(), &MISSING_CONST_FOR_FN_MSRV) {\n+            return;\n+        }\n+\n         let def_id = cx.tcx.hir().local_def_id(hir_id);\n \n         if in_external_macro(cx.tcx.sess, span) || is_entrypoint_fn(cx, def_id.to_def_id()) {\n@@ -126,6 +146,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n             span_lint(cx, MISSING_CONST_FOR_FN, span, \"this could be a `const fn`\");\n         }\n     }\n+    extract_msrv_attr!(LateContext);\n }\n \n /// Returns true if any of the method parameters is a type that implements `Drop`. The method"}, {"sha": "f9173808089cc0d67b4df97b5803503c5becdc83", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b", "patch": "@@ -3,18 +3,19 @@ use if_chain::if_chain;\n use rustc_ast::ast::RangeLimits;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, PathSegment, QPath};\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::ty;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::sym;\n use rustc_span::symbol::Ident;\n use std::cmp::Ordering;\n \n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    get_parent_expr, is_integer_const, single_segment_path, snippet, snippet_opt, snippet_with_applicability,\n-    span_lint, span_lint_and_sugg, span_lint_and_then,\n+    get_parent_expr, is_integer_const, meets_msrv, single_segment_path, snippet, snippet_opt,\n+    snippet_with_applicability, span_lint, span_lint_and_sugg, span_lint_and_then,\n };\n use crate::utils::{higher, SpanlessEq};\n \n@@ -160,7 +161,20 @@ declare_clippy_lint! {\n     \"manually reimplementing {`Range`, `RangeInclusive`}`::contains`\"\n }\n \n-declare_lint_pass!(Ranges => [\n+const MANUAL_RANGE_CONTAINS_MSRV: RustcVersion = RustcVersion::new(1, 35, 0);\n+\n+pub struct Ranges {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl Ranges {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(Ranges => [\n     RANGE_ZIP_WITH_LEN,\n     RANGE_PLUS_ONE,\n     RANGE_MINUS_ONE,\n@@ -175,7 +189,9 @@ impl<'tcx> LateLintPass<'tcx> for Ranges {\n                 check_range_zip_with_len(cx, path, args, expr.span);\n             },\n             ExprKind::Binary(ref op, ref l, ref r) => {\n-                check_possible_range_contains(cx, op.node, l, r, expr.span);\n+                if meets_msrv(self.msrv.as_ref(), &MANUAL_RANGE_CONTAINS_MSRV) {\n+                    check_possible_range_contains(cx, op.node, l, r, expr.span);\n+                }\n             },\n             _ => {},\n         }\n@@ -184,6 +200,7 @@ impl<'tcx> LateLintPass<'tcx> for Ranges {\n         check_inclusive_range_minus_one(cx, expr);\n         check_reversed_empty_range(cx, expr);\n     }\n+    extract_msrv_attr!(LateContext);\n }\n \n fn check_possible_range_contains(cx: &LateContext<'_>, op: BinOpKind, l: &Expr<'_>, r: &Expr<'_>, span: Span) {"}, {"sha": "38dcf7a192c823beadf6e5a07e43f3c013eac754", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b", "patch": "@@ -1,9 +1,12 @@\n-use crate::utils::span_lint_and_sugg;\n+use crate::utils::{meets_msrv, span_lint_and_sugg};\n use rustc_ast::ast::{Expr, ExprKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_middle::lint::in_external_macro;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+\n+const REDUNDANT_FIELD_NAMES_MSRV: RustcVersion = RustcVersion::new(1, 17, 0);\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for fields in struct literals where shorthands\n@@ -33,10 +36,25 @@ declare_clippy_lint! {\n     \"checks for fields in struct literals where shorthands could be used\"\n }\n \n-declare_lint_pass!(RedundantFieldNames => [REDUNDANT_FIELD_NAMES]);\n+pub struct RedundantFieldNames {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl RedundantFieldNames {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(RedundantFieldNames => [REDUNDANT_FIELD_NAMES]);\n \n impl EarlyLintPass for RedundantFieldNames {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n+        if !meets_msrv(self.msrv.as_ref(), &REDUNDANT_FIELD_NAMES_MSRV) {\n+            return;\n+        }\n+\n         if in_external_macro(cx.sess, expr.span) {\n             return;\n         }\n@@ -64,4 +82,5 @@ impl EarlyLintPass for RedundantFieldNames {\n             }\n         }\n     }\n+    extract_msrv_attr!(EarlyContext);\n }"}, {"sha": "fcfa3c12755af37e0979aac06021a48ee8473d99", "filename": "clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b", "patch": "@@ -1,8 +1,11 @@\n-use crate::utils::{snippet, span_lint_and_then};\n+use crate::utils::{meets_msrv, snippet, span_lint_and_then};\n use rustc_ast::ast::{Item, ItemKind, Ty, TyKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+\n+const REDUNDANT_STATIC_LIFETIMES_MSRV: RustcVersion = RustcVersion::new(1, 17, 0);\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for constants and statics with an explicit `'static` lifetime.\n@@ -29,7 +32,18 @@ declare_clippy_lint! {\n     \"Using explicit `'static` lifetime for constants or statics when elision rules would allow omitting them.\"\n }\n \n-declare_lint_pass!(RedundantStaticLifetimes => [REDUNDANT_STATIC_LIFETIMES]);\n+pub struct RedundantStaticLifetimes {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl RedundantStaticLifetimes {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(RedundantStaticLifetimes => [REDUNDANT_STATIC_LIFETIMES]);\n \n impl RedundantStaticLifetimes {\n     // Recursively visit types\n@@ -84,6 +98,10 @@ impl RedundantStaticLifetimes {\n \n impl EarlyLintPass for RedundantStaticLifetimes {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n+        if !meets_msrv(self.msrv.as_ref(), &REDUNDANT_STATIC_LIFETIMES_MSRV) {\n+            return;\n+        }\n+\n         if !item.span.from_expansion() {\n             if let ItemKind::Const(_, ref var_type, _) = item.kind {\n                 self.visit_type(var_type, cx, \"constants have by default a `'static` lifetime\");\n@@ -96,4 +114,6 @@ impl EarlyLintPass for RedundantStaticLifetimes {\n             }\n         }\n     }\n+\n+    extract_msrv_attr!(EarlyContext);\n }"}, {"sha": "3b23f885e08d9584d9434efd03aa31c93ef7b345", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b", "patch": "@@ -12,11 +12,12 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_middle::ty::{DefIdTree, Ty};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::kw;\n use rustc_typeck::hir_ty_to_ty;\n \n-use crate::utils::{differing_macro_contexts, span_lint_and_sugg};\n+use crate::utils::{differing_macro_contexts, meets_msrv, span_lint_and_sugg};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for unnecessary repetition of structure name when a\n@@ -53,7 +54,7 @@ declare_clippy_lint! {\n     \"unnecessary structure name repetition whereas `Self` is applicable\"\n }\n \n-declare_lint_pass!(UseSelf => [USE_SELF]);\n+impl_lint_pass!(UseSelf => [USE_SELF]);\n \n const SEGMENTS_MSG: &str = \"segments should be composed of at least 1 element\";\n \n@@ -157,8 +158,25 @@ fn check_trait_method_impl_decl<'tcx>(\n     }\n }\n \n+const USE_SELF_MSRV: RustcVersion = RustcVersion::new(1, 37, 0);\n+\n+pub struct UseSelf {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl UseSelf {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n impl<'tcx> LateLintPass<'tcx> for UseSelf {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n+        if !meets_msrv(self.msrv.as_ref(), &USE_SELF_MSRV) {\n+            return;\n+        }\n+\n         if in_external_macro(cx.sess(), item.span) {\n             return;\n         }\n@@ -204,6 +222,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             }\n         }\n     }\n+    extract_msrv_attr!(LateContext);\n }\n \n struct UseSelfVisitor<'a, 'tcx> {"}, {"sha": "ac75f5e46c3fdd703f05b3414c6b66a0016c5d56", "filename": "tests/ui/min_rust_version_attr.rs", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b/tests%2Fui%2Fmin_rust_version_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b/tests%2Fui%2Fmin_rust_version_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.rs?ref=a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b", "patch": "@@ -2,7 +2,7 @@\n #![feature(custom_inner_attributes)]\n #![clippy::msrv = \"1.0.0\"]\n \n-use std::ops::Deref;\n+use std::ops::{Deref, RangeFrom};\n \n fn option_as_ref_deref() {\n     let mut opt = Some(String::from(\"123\"));\n@@ -42,12 +42,84 @@ pub fn manual_strip_msrv() {\n     }\n }\n \n+pub fn redundant_fieldnames() {\n+    let start = 0;\n+    let _ = RangeFrom { start: start };\n+}\n+\n+pub fn redundant_static_lifetime() {\n+    const VAR_ONE: &'static str = \"Test constant #1\";\n+}\n+\n+pub fn checked_conversion() {\n+    let value: i64 = 42;\n+    let _ = value <= (u32::max_value() as i64) && value >= 0;\n+    let _ = value <= (u32::MAX as i64) && value >= 0;\n+}\n+\n+pub fn filter_map_next() {\n+    let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];\n+\n+    #[rustfmt::skip]\n+    let _: Option<u32> = vec![1, 2, 3, 4, 5, 6]\n+        .into_iter()\n+        .filter_map(|x| {\n+            if x == 2 {\n+                Some(x * 2)\n+            } else {\n+                None\n+            }\n+        })\n+        .next();\n+}\n+\n+pub fn manual_range_contains() {\n+    x >= 8 && x < 12;\n+}\n+\n+pub fn use_self() {\n+    struct Foo {}\n+\n+    impl Foo {\n+        fn new() -> Foo {\n+            Foo {}\n+        }\n+        fn test() -> Foo {\n+            Foo::new()\n+        }\n+    }\n+}\n+\n+fn replace_with_default() {\n+    let mut s = String::from(\"foo\");\n+    let _ = std::mem::replace(s, String::default());\n+}\n+\n+fn map_unwrap_or() {\n+    let opt = Some(1);\n+\n+    // Check for `option.map(_).unwrap_or(_)` use.\n+    // Single line case.\n+    let _ = opt\n+        .map(|x| x + 1)\n+        // Should lint even though this call is on a separate line.\n+        .unwrap_or(0);\n+}\n+\n fn main() {\n+    filter_map_next();\n+    checked_conversion();\n+    redundant_fieldnames();\n+    redundant_static_lifetime();\n     option_as_ref_deref();\n     match_like_matches();\n     match_same_arms();\n     match_same_arms2();\n     manual_strip_msrv();\n+    manual_range_contains();\n+    use_self();\n+    replace_with_default();\n+    map_unwrap_or();\n }\n \n mod meets_msrv {"}, {"sha": "d3eafe7312f475f80026c3bf956740d085f149a8", "filename": "tests/ui/min_rust_version_attr.stderr", "status": "modified", "additions": 21, "deletions": 30, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b/tests%2Fui%2Fmin_rust_version_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b/tests%2Fui%2Fmin_rust_version_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.stderr?ref=a7cfffef263a8b5a5dadfad0b7f56acd83d02b9b", "patch": "@@ -1,37 +1,28 @@\n-error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:60:24\n-   |\n-LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n-   |                        ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::manual-strip` implied by `-D warnings`\n-note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:59:9\n-   |\n-LL |         if s.starts_with(\"hello, \") {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: try using the `strip_prefix` method\n-   |\n-LL |         if let Some(<stripped>) = s.strip_prefix(\"hello, \") {\n-LL |             assert_eq!(<stripped>.to_uppercase(), \"WORLD!\");\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/min_rust_version_attr.rs:77:5\n    |\n+LL |     x >= 8 && x < 12;\n+   |     ^ not found in this scope\n \n-error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:72:24\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/min_rust_version_attr.rs:77:15\n    |\n-LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n-   |                        ^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:71:9\n-   |\n-LL |         if s.starts_with(\"hello, \") {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: try using the `strip_prefix` method\n+LL |     x >= 8 && x < 12;\n+   |               ^ not found in this scope\n+\n+error[E0308]: mismatched types\n+  --> $DIR/min_rust_version_attr.rs:95:31\n    |\n-LL |         if let Some(<stripped>) = s.strip_prefix(\"hello, \") {\n-LL |             assert_eq!(<stripped>.to_uppercase(), \"WORLD!\");\n+LL |     let _ = std::mem::replace(s, String::default());\n+   |                               ^\n+   |                               |\n+   |                               expected `&mut _`, found struct `std::string::String`\n+   |                               help: consider mutably borrowing here: `&mut s`\n    |\n+   = note: expected mutable reference `&mut _`\n+                         found struct `std::string::String`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n+Some errors have detailed explanations: E0308, E0425.\n+For more information about an error, try `rustc --explain E0308`."}]}