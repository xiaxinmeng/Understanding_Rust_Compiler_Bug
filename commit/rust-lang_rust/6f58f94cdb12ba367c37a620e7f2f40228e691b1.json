{"sha": "6f58f94cdb12ba367c37a620e7f2f40228e691b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNThmOTRjZGIxMmJhMzY3YzM3YTYyMGU3ZjJmNDAyMjhlNjkxYjE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-26T15:14:12Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-26T15:14:12Z"}, "message": "Add Caches to FunctionCx", "tree": {"sha": "0fe285cd7a78509454c43aed8f1fcf42adcbcb04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fe285cd7a78509454c43aed8f1fcf42adcbcb04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f58f94cdb12ba367c37a620e7f2f40228e691b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f58f94cdb12ba367c37a620e7f2f40228e691b1", "html_url": "https://github.com/rust-lang/rust/commit/6f58f94cdb12ba367c37a620e7f2f40228e691b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f58f94cdb12ba367c37a620e7f2f40228e691b1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42887dfdd95aceaa533e7369d3519d4285d465e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/42887dfdd95aceaa533e7369d3519d4285d465e3", "html_url": "https://github.com/rust-lang/rust/commit/42887dfdd95aceaa533e7369d3519d4285d465e3"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "e6302684c5429976ef443c9ae63f3d7e2eaa175a", "filename": "src/base.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6f58f94cdb12ba367c37a620e7f2f40228e691b1/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f58f94cdb12ba367c37a620e7f2f40228e691b1/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=6f58f94cdb12ba367c37a620e7f2f40228e691b1", "patch": "@@ -16,8 +16,6 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n     ccx: &mut crate::constant::ConstantCx,\n     mono_item: MonoItem<'tcx>,\n ) {\n-    let context = &mut caches.context;\n-\n     match mono_item {\n         MonoItem::Fn(inst) => {\n             let _print_guard = PrintOnPanic(format!(\"{:?}\", inst));\n@@ -40,7 +38,7 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n                 \"target/out/mir/\".to_string() + &format!(\"{:?}\", inst.def_id()).replace('/', \"@\");\n             ::std::fs::write(mir_file_name, mir).unwrap();\n \n-            trans_fn(tcx, module, ccx, context, inst);\n+            trans_fn(tcx, module, ccx, caches, inst);\n         }\n         MonoItem::Static(def_id) => {\n             crate::constant::codegen_static(ccx, def_id);\n@@ -55,7 +53,7 @@ fn trans_fn<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     module: &mut Module<impl Backend>,\n     constants: &mut crate::constant::ConstantCx,\n-    context: &mut Context,\n+    caches: &mut Caches,\n     instance: Instance<'tcx>,\n ) {\n     // Step 1. Get mir\n@@ -94,6 +92,7 @@ fn trans_fn<'a, 'tcx: 'a>(\n         local_map: HashMap::new(),\n         comments: HashMap::new(),\n         constants,\n+        caches,\n \n         top_nop: None,\n     };\n@@ -117,9 +116,9 @@ fn trans_fn<'a, 'tcx: 'a>(\n     // Step 9. Define function\n     // TODO: cranelift doesn't yet support some of the things needed\n     if should_codegen(tcx.sess) {\n-        context.func = func;\n-        module.define_function(func_id, context).unwrap();\n-        context.clear();\n+        caches.context.func = func;\n+        module.define_function(func_id, &mut caches.context).unwrap();\n+        caches.context.clear();\n     }\n }\n "}, {"sha": "8f0236fb7f00ec9cfa93bd86c2b83cc2eb9701e3", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f58f94cdb12ba367c37a620e7f2f40228e691b1/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f58f94cdb12ba367c37a620e7f2f40228e691b1/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=6f58f94cdb12ba367c37a620e7f2f40228e691b1", "patch": "@@ -427,6 +427,7 @@ pub struct FunctionCx<'a, 'tcx: 'a, B: Backend + 'a> {\n     pub local_map: HashMap<Local, CPlace<'tcx>>,\n     pub comments: HashMap<Inst, String>,\n     pub constants: &'a mut crate::constant::ConstantCx,\n+    pub caches: &'a mut Caches,\n \n     /// add_global_comment inserts a comment here\n     pub top_nop: Option<Inst>,"}]}