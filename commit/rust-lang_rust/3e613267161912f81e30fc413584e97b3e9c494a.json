{"sha": "3e613267161912f81e30fc413584e97b3e9c494a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNjEzMjY3MTYxOTEyZjgxZTMwZmM0MTM1ODRlOTdiM2U5YzQ5NGE=", "commit": {"author": {"name": "vallentin", "email": "mail@vallentin.dev", "date": "2021-01-17T17:33:47Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-01-28T02:58:42Z"}, "message": "Fixed semicolon getting moved into comment (fixes #4646)", "tree": {"sha": "fe91af2247664510905fdb0d23a2bb9da4f6336f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe91af2247664510905fdb0d23a2bb9da4f6336f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e613267161912f81e30fc413584e97b3e9c494a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e613267161912f81e30fc413584e97b3e9c494a", "html_url": "https://github.com/rust-lang/rust/commit/3e613267161912f81e30fc413584e97b3e9c494a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e613267161912f81e30fc413584e97b3e9c494a/comments", "author": {"login": "vallentin", "id": 17464404, "node_id": "MDQ6VXNlcjE3NDY0NDA0", "avatar_url": "https://avatars.githubusercontent.com/u/17464404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vallentin", "html_url": "https://github.com/vallentin", "followers_url": "https://api.github.com/users/vallentin/followers", "following_url": "https://api.github.com/users/vallentin/following{/other_user}", "gists_url": "https://api.github.com/users/vallentin/gists{/gist_id}", "starred_url": "https://api.github.com/users/vallentin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vallentin/subscriptions", "organizations_url": "https://api.github.com/users/vallentin/orgs", "repos_url": "https://api.github.com/users/vallentin/repos", "events_url": "https://api.github.com/users/vallentin/events{/privacy}", "received_events_url": "https://api.github.com/users/vallentin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e2b0b7c72ea524360280cbeeae092beecf54e4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e2b0b7c72ea524360280cbeeae092beecf54e4f", "html_url": "https://github.com/rust-lang/rust/commit/1e2b0b7c72ea524360280cbeeae092beecf54e4f"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "18688fe3344d886ada4beead10af442fe2ddc74f", "filename": "src/items.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3e613267161912f81e30fc413584e97b3e9c494a/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e613267161912f81e30fc413584e97b3e9c494a/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=3e613267161912f81e30fc413584e97b3e9c494a", "patch": "@@ -302,7 +302,7 @@ impl<'a> FmtVisitor<'a> {\n         let context = self.get_context();\n \n         let mut fn_brace_style = newline_for_brace(self.config, &fn_sig.generics.where_clause);\n-        let (result, force_newline_brace) =\n+        let (result, _, force_newline_brace) =\n             rewrite_fn_base(&context, indent, ident, fn_sig, span, fn_brace_style)?;\n \n         // 2 = ` {`\n@@ -328,7 +328,7 @@ impl<'a> FmtVisitor<'a> {\n         let span = mk_sp(span.lo(), span.hi() - BytePos(1));\n         let context = self.get_context();\n \n-        let (mut result, _) = rewrite_fn_base(\n+        let (mut result, ends_with_comment, _) = rewrite_fn_base(\n             &context,\n             indent,\n             ident,\n@@ -337,6 +337,11 @@ impl<'a> FmtVisitor<'a> {\n             FnBraceStyle::None,\n         )?;\n \n+        // If `result` ends with a comment, then remember to add a newline\n+        if ends_with_comment {\n+            result.push_str(&indent.to_string_with_newline(context.config));\n+        }\n+\n         // Re-attach semicolon\n         result.push(';');\n \n@@ -2142,7 +2147,7 @@ fn rewrite_fn_base(\n     fn_sig: &FnSig<'_>,\n     span: Span,\n     fn_brace_style: FnBraceStyle,\n-) -> Option<(String, bool)> {\n+) -> Option<(String, bool, bool)> {\n     let mut force_new_line_for_brace = false;\n \n     let where_clause = &fn_sig.generics.where_clause;\n@@ -2450,10 +2455,11 @@ fn rewrite_fn_base(\n \n     result.push_str(&where_clause_str);\n \n-    force_new_line_for_brace |= last_line_contains_single_line_comment(&result);\n+    let ends_with_comment = last_line_contains_single_line_comment(&result);\n+    force_new_line_for_brace |= ends_with_comment;\n     force_new_line_for_brace |=\n         is_params_multi_lined && context.config.where_single_line() && !where_clause_str.is_empty();\n-    Some((result, force_new_line_for_brace))\n+    Some((result, ends_with_comment, force_new_line_for_brace))\n }\n \n /// Kind of spaces to put before `where`.\n@@ -3137,7 +3143,7 @@ impl Rewrite for ast::ForeignItem {\n                 span,\n                 FnBraceStyle::None,\n             )\n-            .map(|(s, _)| format!(\"{};\", s)),\n+            .map(|(s, _, _)| format!(\"{};\", s)),\n             ast::ForeignItemKind::Static(ref ty, mutability, _) => {\n                 // FIXME(#21): we're dropping potential comments in between the\n                 // function kw here."}]}