{"sha": "8e067243e450528c9c61f8f0e5f91e3fc7ec707d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMDY3MjQzZTQ1MDUyOGM5YzYxZjhmMGU1ZjkxZTNmYzdlYzcwN2Q=", "commit": {"author": {"name": "Guanqun Lu", "email": "guanqun.lu@gmail.com", "date": "2019-09-04T15:25:51Z"}, "committer": {"name": "Guanqun Lu", "email": "guanqun.lu@gmail.com", "date": "2019-09-04T15:25:51Z"}, "message": "fix a few typos in comments", "tree": {"sha": "f7272f6a0affa0429c046dc03694e32c2586b99d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7272f6a0affa0429c046dc03694e32c2586b99d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e067243e450528c9c61f8f0e5f91e3fc7ec707d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e067243e450528c9c61f8f0e5f91e3fc7ec707d", "html_url": "https://github.com/rust-lang/rust/commit/8e067243e450528c9c61f8f0e5f91e3fc7ec707d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e067243e450528c9c61f8f0e5f91e3fc7ec707d/comments", "author": null, "committer": null, "parents": [{"sha": "5f42f3e108db9390038a93fc95d9376aa871ae34", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f42f3e108db9390038a93fc95d9376aa871ae34", "html_url": "https://github.com/rust-lang/rust/commit/5f42f3e108db9390038a93fc95d9376aa871ae34"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "62a3757757b800f9ca77d60cdbe1ed62d7aba071", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e067243e450528c9c61f8f0e5f91e3fc7ec707d/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e067243e450528c9c61f8f0e5f91e3fc7ec707d/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=8e067243e450528c9c61f8f0e5f91e3fc7ec707d", "patch": "@@ -54,15 +54,15 @@ fn main() {\n     // LLVM are compiled the same way, but for us that's typically the case.\n     //\n     // We *want* detect this cross compiling situation by asking llvm-config\n-    // what it's host-target is. If that's not the TARGET, then we're cross\n+    // what its host-target is. If that's not the TARGET, then we're cross\n     // compiling. Unfortunately `llvm-config` seems either be buggy, or we're\n     // misconfiguring it, because the `i686-pc-windows-gnu` build of LLVM will\n     // report itself with a `--host-target` of `x86_64-pc-windows-gnu`. This\n     // tricks us into thinking we're doing a cross build when we aren't, so\n     // havoc ensues.\n     //\n     // In any case, if we're cross compiling, this generally just means that we\n-    // can't trust all the output of llvm-config becaues it might be targeted\n+    // can't trust all the output of llvm-config because it might be targeted\n     // for the host rather than the target. As a result a bunch of blocks below\n     // are gated on `if !is_crossed`\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n@@ -166,7 +166,7 @@ fn main() {\n \n     let (llvm_kind, llvm_link_arg) = detect_llvm_link();\n \n-    // Link in all LLVM libraries, if we're uwring the \"wrong\" llvm-config then\n+    // Link in all LLVM libraries, if we're using the \"wrong\" llvm-config then\n     // we don't pick up system libs because unfortunately they're for the host\n     // of llvm-config, not the target that we're attempting to link.\n     let mut cmd = Command::new(&llvm_config);"}]}