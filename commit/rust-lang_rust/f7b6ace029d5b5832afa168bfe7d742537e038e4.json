{"sha": "f7b6ace029d5b5832afa168bfe7d742537e038e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3YjZhY2UwMjlkNWI1ODMyYWZhMTY4YmZlN2Q3NDI1MzdlMDM4ZTQ=", "commit": {"author": {"name": "Thomas de Zeeuw", "email": "thomasdezeeuw@gmail.com", "date": "2020-09-10T09:35:25Z"}, "committer": {"name": "Thomas de Zeeuw", "email": "thomasdezeeuw@gmail.com", "date": "2020-09-10T14:27:28Z"}, "message": "Use IOV_MAX and UIO_MAXIOV constants in limit vectored I/O\n\nAlso updates the libc dependency to 0.2.77 (from 0.2.74) as the\nconstants were only recently added.", "tree": {"sha": "5229d8043bfc8396d42dbaa45f5c60895a1c006f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5229d8043bfc8396d42dbaa45f5c60895a1c006f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7b6ace029d5b5832afa168bfe7d742537e038e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7b6ace029d5b5832afa168bfe7d742537e038e4", "html_url": "https://github.com/rust-lang/rust/commit/f7b6ace029d5b5832afa168bfe7d742537e038e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7b6ace029d5b5832afa168bfe7d742537e038e4/comments", "author": {"login": "Thomasdezeeuw", "id": 3159064, "node_id": "MDQ6VXNlcjMxNTkwNjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3159064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thomasdezeeuw", "html_url": "https://github.com/Thomasdezeeuw", "followers_url": "https://api.github.com/users/Thomasdezeeuw/followers", "following_url": "https://api.github.com/users/Thomasdezeeuw/following{/other_user}", "gists_url": "https://api.github.com/users/Thomasdezeeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thomasdezeeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thomasdezeeuw/subscriptions", "organizations_url": "https://api.github.com/users/Thomasdezeeuw/orgs", "repos_url": "https://api.github.com/users/Thomasdezeeuw/repos", "events_url": "https://api.github.com/users/Thomasdezeeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/Thomasdezeeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Thomasdezeeuw", "id": 3159064, "node_id": "MDQ6VXNlcjMxNTkwNjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3159064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thomasdezeeuw", "html_url": "https://github.com/Thomasdezeeuw", "followers_url": "https://api.github.com/users/Thomasdezeeuw/followers", "following_url": "https://api.github.com/users/Thomasdezeeuw/following{/other_user}", "gists_url": "https://api.github.com/users/Thomasdezeeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thomasdezeeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thomasdezeeuw/subscriptions", "organizations_url": "https://api.github.com/users/Thomasdezeeuw/orgs", "repos_url": "https://api.github.com/users/Thomasdezeeuw/repos", "events_url": "https://api.github.com/users/Thomasdezeeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/Thomasdezeeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88197214b8a9099bb3da559a3bd7bf4867c10c5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/88197214b8a9099bb3da559a3bd7bf4867c10c5f", "html_url": "https://github.com/rust-lang/rust/commit/88197214b8a9099bb3da559a3bd7bf4867c10c5f"}], "stats": {"total": 44, "additions": 27, "deletions": 17}, "files": [{"sha": "01babeffd98f08ce34a8a6c676b41e02da289c02", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7b6ace029d5b5832afa168bfe7d742537e038e4/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f7b6ace029d5b5832afa168bfe7d742537e038e4/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=f7b6ace029d5b5832afa168bfe7d742537e038e4", "patch": "@@ -16,7 +16,7 @@ cfg-if = { version = \"0.1.8\", features = ['rustc-dep-of-std'] }\n panic_unwind = { path = \"../panic_unwind\", optional = true }\n panic_abort = { path = \"../panic_abort\" }\n core = { path = \"../core\" }\n-libc = { version = \"0.2.74\", default-features = false, features = ['rustc-dep-of-std'] }\n+libc = { version = \"0.2.77\", default-features = false, features = ['rustc-dep-of-std'] }\n compiler_builtins = { version = \"0.1.35\" }\n profiler_builtins = { path = \"../profiler_builtins\", optional = true }\n unwind = { path = \"../unwind\" }"}, {"sha": "16adbe6d88c4f07bc061430a6d8db362054968e4", "filename": "library/std/src/sys/unix/fd.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f7b6ace029d5b5832afa168bfe7d742537e038e4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b6ace029d5b5832afa168bfe7d742537e038e4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs?ref=f7b6ace029d5b5832afa168bfe7d742537e038e4", "patch": "@@ -7,7 +7,6 @@ use crate::cmp;\n use crate::io::{self, Initializer, IoSlice, IoSliceMut, Read};\n use crate::mem;\n #[cfg(not(any(target_os = \"redox\", target_env = \"newlib\")))]\n-use crate::sync::atomic::{AtomicUsize, Ordering};\n use crate::sys::cvt;\n use crate::sys_common::AsInner;\n \n@@ -31,24 +30,35 @@ const READ_LIMIT: usize = c_int::MAX as usize - 1;\n #[cfg(not(target_os = \"macos\"))]\n const READ_LIMIT: usize = libc::ssize_t::MAX as usize;\n \n-#[cfg(not(any(target_os = \"redox\", target_env = \"newlib\")))]\n-fn max_iov() -> usize {\n-    static LIM: AtomicUsize = AtomicUsize::new(0);\n-\n-    let mut lim = LIM.load(Ordering::Relaxed);\n-    if lim == 0 {\n-        let ret = unsafe { libc::sysconf(libc::_SC_IOV_MAX) };\n-\n-        // 16 is the minimum value required by POSIX.\n-        lim = if ret > 0 { ret as usize } else { 16 };\n-        LIM.store(lim, Ordering::Relaxed);\n-    }\n+#[cfg(any(\n+    target_os = \"dragonfly\",\n+    target_os = \"freebsd\",\n+    target_os = \"ios\",\n+    target_os = \"macos\",\n+    target_os = \"netbsd\",\n+    target_os = \"openbsd\",\n+))]\n+const fn max_iov() -> usize {\n+    libc::IOV_MAX as usize\n+}\n \n-    lim\n+#[cfg(any(target_os = \"android\", target_os = \"emscripten\", target_os = \"linux\"))]\n+const fn max_iov() -> usize {\n+    libc::UIO_MAXIOV as usize\n }\n \n-#[cfg(any(target_os = \"redox\", target_env = \"newlib\"))]\n-fn max_iov() -> usize {\n+#[cfg(not(any(\n+    target_os = \"android\",\n+    target_os = \"dragonfly\",\n+    target_os = \"emscripten\",\n+    target_os = \"freebsd\",\n+    target_os = \"ios\",\n+    target_os = \"linux\",\n+    target_os = \"macos\",\n+    target_os = \"netbsd\",\n+    target_os = \"openbsd\",\n+)))]\n+const fn max_iov() -> usize {\n     16 // The minimum value required by POSIX.\n }\n "}]}