{"sha": "912f38200fb6c8c6cea750a84c04de810992dec7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMmYzODIwMGZiNmM4YzZjZWE3NTBhODRjMDRkZTgxMDk5MmRlYzc=", "commit": {"author": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-06-13T08:43:39Z"}, "committer": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-06-13T08:43:39Z"}, "message": "Add keywords completions on source file position", "tree": {"sha": "7786c87c7fbfeaaffa075bb269de63ffdf712e5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7786c87c7fbfeaaffa075bb269de63ffdf712e5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/912f38200fb6c8c6cea750a84c04de810992dec7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/912f38200fb6c8c6cea750a84c04de810992dec7", "html_url": "https://github.com/rust-lang/rust/commit/912f38200fb6c8c6cea750a84c04de810992dec7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/912f38200fb6c8c6cea750a84c04de810992dec7/comments", "author": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16bbf4ab7f132e6e5e5318dccdef9a5d71afdd7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/16bbf4ab7f132e6e5e5318dccdef9a5d71afdd7f", "html_url": "https://github.com/rust-lang/rust/commit/16bbf4ab7f132e6e5e5318dccdef9a5d71afdd7f"}], "stats": {"total": 145, "additions": 124, "deletions": 21}, "files": [{"sha": "d016f0c7c65c155a5181c4face75efa7175285cc", "filename": "crates/ra_ide/src/completion/complete_keyword.rs", "status": "modified", "additions": 98, "deletions": 17, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/912f38200fb6c8c6cea750a84c04de810992dec7/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/912f38200fb6c8c6cea750a84c04de810992dec7/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=912f38200fb6c8c6cea750a84c04de810992dec7", "patch": "@@ -66,48 +66,83 @@ pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         return;\n     }\n     if ctx.unsafe_is_prev {\n-        add_keyword(ctx, acc, \"fn\", \"fn $0() {}\", ctx.is_new_item || ctx.block_expr_parent);\n+        add_keyword(\n+            ctx,\n+            acc,\n+            \"fn\",\n+            \"fn $0() {}\",\n+            ctx.has_item_list_or_source_file_parent || ctx.block_expr_parent,\n+        );\n         add_keyword(\n             ctx,\n             acc,\n             \"trait\",\n             \"trait $0 {}\",\n-            (ctx.is_new_item && !has_trait_or_impl_parent) || ctx.block_expr_parent,\n+            (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n+                || ctx.block_expr_parent,\n         );\n         add_keyword(\n             ctx,\n             acc,\n             \"impl\",\n             \"impl $0 {}\",\n-            (ctx.is_new_item && !has_trait_or_impl_parent) || ctx.block_expr_parent,\n+            (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n+                || ctx.block_expr_parent,\n         );\n         return;\n     }\n-    add_keyword(ctx, acc, \"fn\", \"fn $0() {}\", ctx.is_new_item || ctx.block_expr_parent);\n+    add_keyword(\n+        ctx,\n+        acc,\n+        \"fn\",\n+        \"fn $0() {}\",\n+        ctx.has_item_list_or_source_file_parent || ctx.block_expr_parent,\n+    );\n     add_keyword(\n         ctx,\n         acc,\n         \"use\",\n         \"use \",\n-        (ctx.is_new_item && !has_trait_or_impl_parent) || ctx.block_expr_parent,\n+        (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n+            || ctx.block_expr_parent,\n     );\n     add_keyword(\n         ctx,\n         acc,\n         \"impl\",\n         \"impl $0 {}\",\n-        (ctx.is_new_item && !has_trait_or_impl_parent) || ctx.block_expr_parent,\n+        (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n+            || ctx.block_expr_parent,\n     );\n     add_keyword(\n         ctx,\n         acc,\n         \"trait\",\n         \"trait $0 {}\",\n-        (ctx.is_new_item && !has_trait_or_impl_parent) || ctx.block_expr_parent,\n+        (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n+            || ctx.block_expr_parent,\n+    );\n+    add_keyword(\n+        ctx,\n+        acc,\n+        \"enum\",\n+        \"enum $0 {}\",\n+        ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent,\n+    );\n+    add_keyword(\n+        ctx,\n+        acc,\n+        \"struct\",\n+        \"struct $0 {}\",\n+        ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent,\n+    );\n+    add_keyword(\n+        ctx,\n+        acc,\n+        \"union\",\n+        \"union $0 {}\",\n+        ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent,\n     );\n-    add_keyword(ctx, acc, \"enum\", \"enum $0 {}\", ctx.is_new_item && !has_trait_or_impl_parent);\n-    add_keyword(ctx, acc, \"struct\", \"struct $0 {}\", ctx.is_new_item && !has_trait_or_impl_parent);\n-    add_keyword(ctx, acc, \"union\", \"union $0 {}\", ctx.is_new_item && !has_trait_or_impl_parent);\n     add_keyword(ctx, acc, \"match\", \"match $0 {}\", ctx.block_expr_parent || ctx.is_match_arm);\n     add_keyword(ctx, acc, \"loop\", \"loop {$0}\", ctx.block_expr_parent || ctx.is_match_arm);\n     add_keyword(ctx, acc, \"while\", \"while $0 {}\", ctx.block_expr_parent);\n@@ -127,37 +162,58 @@ pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         acc,\n         \"mod\",\n         \"mod $0 {}\",\n-        (ctx.is_new_item && !has_trait_or_impl_parent) || ctx.block_expr_parent,\n+        (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n+            || ctx.block_expr_parent,\n     );\n     add_keyword(ctx, acc, \"mut\", \"mut \", ctx.bind_pat_parent || ctx.ref_pat_parent);\n-    add_keyword(ctx, acc, \"const\", \"const \", ctx.is_new_item || ctx.block_expr_parent);\n-    add_keyword(ctx, acc, \"type\", \"type \", ctx.is_new_item || ctx.block_expr_parent);\n+    add_keyword(\n+        ctx,\n+        acc,\n+        \"const\",\n+        \"const \",\n+        ctx.has_item_list_or_source_file_parent || ctx.block_expr_parent,\n+    );\n+    add_keyword(\n+        ctx,\n+        acc,\n+        \"type\",\n+        \"type \",\n+        ctx.has_item_list_or_source_file_parent || ctx.block_expr_parent,\n+    );\n     add_keyword(\n         ctx,\n         acc,\n         \"static\",\n         \"static \",\n-        (ctx.is_new_item && !has_trait_or_impl_parent) || ctx.block_expr_parent,\n+        (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n+            || ctx.block_expr_parent,\n     );\n     add_keyword(\n         ctx,\n         acc,\n         \"extern\",\n         \"extern \",\n-        (ctx.is_new_item && !has_trait_or_impl_parent) || ctx.block_expr_parent,\n+        (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n+            || ctx.block_expr_parent,\n     );\n     add_keyword(\n         ctx,\n         acc,\n         \"unsafe\",\n         \"unsafe \",\n-        ctx.is_new_item || ctx.block_expr_parent || ctx.is_match_arm,\n+        ctx.has_item_list_or_source_file_parent || ctx.block_expr_parent || ctx.is_match_arm,\n     );\n     add_keyword(ctx, acc, \"continue\", \"continue;\", ctx.in_loop_body && ctx.can_be_stmt);\n     add_keyword(ctx, acc, \"break\", \"break;\", ctx.in_loop_body && ctx.can_be_stmt);\n     add_keyword(ctx, acc, \"continue\", \"continue\", ctx.in_loop_body && !ctx.can_be_stmt);\n     add_keyword(ctx, acc, \"break\", \"break\", ctx.in_loop_body && !ctx.can_be_stmt);\n-    add_keyword(ctx, acc, \"pub\", \"pub \", ctx.is_new_item && !ctx.has_trait_parent);\n+    add_keyword(\n+        ctx,\n+        acc,\n+        \"pub\",\n+        \"pub \",\n+        ctx.has_item_list_or_source_file_parent && !ctx.has_trait_parent,\n+    );\n \n     if !ctx.is_trivial_path {\n         return;\n@@ -226,6 +282,31 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn test_keywords_at_source_file_level() {\n+        assert_debug_snapshot!(\n+            get_keyword_completions(r\"m<|>\"),\n+            @r###\"\n+        [\n+            \"kw const\",\n+            \"kw enum\",\n+            \"kw extern\",\n+            \"kw fn\",\n+            \"kw impl\",\n+            \"kw mod\",\n+            \"kw pub\",\n+            \"kw static\",\n+            \"kw struct\",\n+            \"kw trait\",\n+            \"kw type\",\n+            \"kw union\",\n+            \"kw unsafe\",\n+            \"kw use\",\n+        ]\n+        \"###\n+        );\n+    }\n+\n     #[test]\n     fn test_keywords_in_function() {\n         assert_debug_snapshot!("}, {"sha": "9f4c582d08380d4035fe5bd286b07fb065c0a6b0", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/912f38200fb6c8c6cea750a84c04de810992dec7/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/912f38200fb6c8c6cea750a84c04de810992dec7/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=912f38200fb6c8c6cea750a84c04de810992dec7", "patch": "@@ -13,8 +13,8 @@ use ra_text_edit::Indel;\n \n use super::patterns::{\n     has_bind_pat_parent, has_block_expr_parent, has_impl_as_prev_sibling, has_impl_parent,\n-    has_ref_parent, has_trait_as_prev_sibling, has_trait_parent, if_is_prev, is_in_loop_body,\n-    is_match_arm, unsafe_is_prev,\n+    has_item_list_or_source_file_parent, has_ref_parent, has_trait_as_prev_sibling,\n+    has_trait_parent, if_is_prev, is_in_loop_body, is_match_arm, unsafe_is_prev,\n };\n use crate::{call_info::ActiveParameter, completion::CompletionConfig, FilePosition};\n use test_utils::mark;\n@@ -76,6 +76,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) trait_as_prev_sibling: bool,\n     pub(super) impl_as_prev_sibling: bool,\n     pub(super) is_match_arm: bool,\n+    pub(super) has_item_list_or_source_file_parent: bool,\n }\n \n impl<'a> CompletionContext<'a> {\n@@ -145,6 +146,7 @@ impl<'a> CompletionContext<'a> {\n             impl_as_prev_sibling: false,\n             if_is_prev: false,\n             is_match_arm: false,\n+            has_item_list_or_source_file_parent: false,\n         };\n \n         let mut original_file = original_file.syntax().clone();\n@@ -229,6 +231,8 @@ impl<'a> CompletionContext<'a> {\n         self.impl_as_prev_sibling = has_impl_as_prev_sibling(syntax_element.clone());\n         self.trait_as_prev_sibling = has_trait_as_prev_sibling(syntax_element.clone());\n         self.is_match_arm = is_match_arm(syntax_element.clone());\n+        self.has_item_list_or_source_file_parent =\n+            has_item_list_or_source_file_parent(syntax_element.clone());\n     }\n \n     fn fill("}, {"sha": "fdcd3faa595be30eb5b3cb97c5e06dfe9e5ecba3", "filename": "crates/ra_ide/src/completion/patterns.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/912f38200fb6c8c6cea750a84c04de810992dec7/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/912f38200fb6c8c6cea750a84c04de810992dec7/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs?ref=912f38200fb6c8c6cea750a84c04de810992dec7", "patch": "@@ -38,6 +38,14 @@ pub(crate) fn has_ref_parent(element: SyntaxElement) -> bool {\n         .is_some()\n }\n \n+pub(crate) fn has_item_list_or_source_file_parent(element: SyntaxElement) -> bool {\n+    let ancestor = not_same_range_ancestor(element);\n+    if !ancestor.is_some() {\n+        return true;\n+    }\n+    ancestor.filter(|it| it.kind() == SOURCE_FILE || it.kind() == ITEM_LIST).is_some()\n+}\n+\n pub(crate) fn is_match_arm(element: SyntaxElement) -> bool {\n     not_same_range_ancestor(element.clone()).filter(|it| it.kind() == MATCH_ARM).is_some()\n         && previous_sibling_or_ancestor_sibling(element)\n@@ -139,8 +147,8 @@ fn previous_sibling_or_ancestor_sibling(element: SyntaxElement) -> Option<Syntax\n mod tests {\n     use super::{\n         has_bind_pat_parent, has_block_expr_parent, has_impl_as_prev_sibling, has_impl_parent,\n-        has_ref_parent, has_trait_as_prev_sibling, has_trait_parent, if_is_prev, is_match_arm,\n-        unsafe_is_prev,\n+        has_item_list_or_source_file_parent, has_ref_parent, has_trait_as_prev_sibling,\n+        has_trait_parent, if_is_prev, is_match_arm, unsafe_is_prev,\n     };\n     use crate::completion::test_utils::check_pattern_is_applicable;\n \n@@ -203,4 +211,14 @@ mod tests {\n     fn test_is_match_arm() {\n         check_pattern_is_applicable(r\"fn my_fn() { match () { () => m<|> } }\", is_match_arm);\n     }\n+\n+    #[test]\n+    fn test_has_source_file_parent() {\n+        check_pattern_is_applicable(r\"i<|>\", has_item_list_or_source_file_parent);\n+    }\n+\n+    #[test]\n+    fn test_has_item_list_parent() {\n+        check_pattern_is_applicable(r\"impl { f<|> }\", has_item_list_or_source_file_parent);\n+    }\n }"}]}