{"sha": "db496864601f127f260b0810919c309fe60679c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNDk2ODY0NjAxZjEyN2YyNjBiMDgxMDkxOWMzMDlmZTYwNjc5YzU=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-29T19:01:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-29T19:01:49Z"}, "message": "Rollup merge of #65936 - Xanewok:save-analysis-async, r=nikomatsakis\n\nsave-analysis: Account for async desugaring in async fn return types\n\nCloses #65590\n\nWhen visiting the return type of an async function we need to take into account its desugaring, since it introduces a new definition under which the return type is redefined.\n\nr? @nikomatsakis", "tree": {"sha": "783c6f885a05d96507465867059c487ff5e23ef4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/783c6f885a05d96507465867059c487ff5e23ef4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db496864601f127f260b0810919c309fe60679c5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJduIydCRBK7hj4Ov3rIwAAdHIIAD90OK67nSo8bwvijP7/UbT/\nOLQ1Mjn57qs/JDFNem+7YMWGM+XyXDL3Euz1iJ0tvTs4YcdCEuHc5YECEH9Lk0Ck\nSLcxMm89o7wdguYxLhlQ7PE42PSClc/n9OOWT4hD4aL0+Ub4A4bQh0UG2wg02cn1\nq/OxOKIUEKh54f+w1F6IqxAmdRY3q+f1gDXASfpZUbvrR1OrC9Na127sP+zl7Q8g\nDpFV4C9D4PA3RyOiYHXZB3cm1VaFscByraV2AhXnBAi9lgWb2tZhoqcB/Uz75QfU\nfuF6KpM4Ff2TGv/heKuMoNwzrzM4etHwOzgaPYXC5HXU/E7uCT9YbWV1/Omo6bo=\n=MCBZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 783c6f885a05d96507465867059c487ff5e23ef4\nparent 73dcb969055826c035a572f977e81f8cb52409cf\nparent e755963cbdbdfb97994eb861360f1aa0de1888c2\nauthor Tyler Mandry <tmandry@gmail.com> 1572375709 -0700\ncommitter GitHub <noreply@github.com> 1572375709 -0700\n\nRollup merge of #65936 - Xanewok:save-analysis-async, r=nikomatsakis\n\nsave-analysis: Account for async desugaring in async fn return types\n\nCloses #65590\n\nWhen visiting the return type of an async function we need to take into account its desugaring, since it introduces a new definition under which the return type is redefined.\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db496864601f127f260b0810919c309fe60679c5", "html_url": "https://github.com/rust-lang/rust/commit/db496864601f127f260b0810919c309fe60679c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db496864601f127f260b0810919c309fe60679c5/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73dcb969055826c035a572f977e81f8cb52409cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/73dcb969055826c035a572f977e81f8cb52409cf", "html_url": "https://github.com/rust-lang/rust/commit/73dcb969055826c035a572f977e81f8cb52409cf"}, {"sha": "e755963cbdbdfb97994eb861360f1aa0de1888c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e755963cbdbdfb97994eb861360f1aa0de1888c2", "html_url": "https://github.com/rust-lang/rust/commit/e755963cbdbdfb97994eb861360f1aa0de1888c2"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "a372106d3795b57dc5c8a7615a4c9ca1828a20f4", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/db496864601f127f260b0810919c309fe60679c5/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db496864601f127f260b0810919c309fe60679c5/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=db496864601f127f260b0810919c309fe60679c5", "patch": "@@ -300,7 +300,16 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n             }\n \n             if let ast::FunctionRetTy::Ty(ref ret_ty) = sig.decl.output {\n-                v.visit_ty(ret_ty);\n+                // In async functions, return types are desugared and redefined\n+                // as an `impl Trait` existential type. Because of this, to match\n+                // the definition paths when resolving nested types we need to\n+                // start walking from the newly-created definition.\n+                match sig.header.asyncness.node {\n+                    ast::IsAsync::Async { return_impl_trait_id, .. } => {\n+                        v.nest_tables(return_impl_trait_id, |v| v.visit_ty(ret_ty))\n+                    }\n+                    _ => v.visit_ty(ret_ty)\n+                }\n             }\n \n             // walk the fn body\n@@ -369,6 +378,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         &mut self,\n         item: &'l ast::Item,\n         decl: &'l ast::FnDecl,\n+        header: &'l ast::FnHeader,\n         ty_params: &'l ast::Generics,\n         body: &'l ast::Block,\n     ) {\n@@ -391,7 +401,16 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     // FIXME: Opaque type desugaring prevents us from easily\n                     // processing trait bounds. See `visit_ty` for more details.\n                 } else {\n-                    v.visit_ty(&ret_ty);\n+                    // In async functions, return types are desugared and redefined\n+                    // as an `impl Trait` existential type. Because of this, to match\n+                    // the definition paths when resolving nested types we need to\n+                    // start walking from the newly-created definition.\n+                    match header.asyncness.node {\n+                        ast::IsAsync::Async { return_impl_trait_id, .. } => {\n+                            v.nest_tables(return_impl_trait_id, |v| v.visit_ty(ret_ty))\n+                        }\n+                        _ => v.visit_ty(ret_ty)\n+                    }\n                 }\n             }\n \n@@ -1315,8 +1334,8 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                     );\n                 }\n             }\n-            Fn(ref decl, .., ref ty_params, ref body) => {\n-                self.process_fn(item, &decl, ty_params, &body)\n+            Fn(ref decl, ref header, ref ty_params, ref body) => {\n+                self.process_fn(item, &decl, &header, ty_params, &body)\n             }\n             Static(ref typ, _, ref expr) => self.process_static_or_const_item(item, typ, expr),\n             Const(ref typ, ref expr) => self.process_static_or_const_item(item, &typ, &expr),"}, {"sha": "27874f8655e56c7bde9c5af7b305c75004c3d85c", "filename": "src/test/ui/save-analysis/issue-65590.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/db496864601f127f260b0810919c309fe60679c5/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-65590.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db496864601f127f260b0810919c309fe60679c5/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-65590.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-65590.rs?ref=db496864601f127f260b0810919c309fe60679c5", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+// compile-flags: -Zsave-analysis\n+// edition:2018\n+\n+// Async desugaring for return types in (associated) functions introduces a\n+// separate definition internally, which we need to take into account\n+// (or else we ICE).\n+trait Trait { type Assoc; }\n+struct Struct;\n+\n+async fn foobar<T: Trait>() -> T::Assoc {\n+    unimplemented!()\n+}\n+\n+impl Struct {\n+    async fn foo<T: Trait>(&self) -> T::Assoc {\n+        unimplemented!()\n+    }\n+}\n+\n+fn main() {}"}]}