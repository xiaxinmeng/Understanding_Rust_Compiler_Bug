{"sha": "780952f922a52db435aff7b73cfdb6cb541083b8", "node_id": "C_kwDOAAsO6NoAKDc4MDk1MmY5MjJhNTJkYjQzNWFmZjdiNzNjZmRiNmNiNTQxMDgzYjg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-07T09:33:54Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-07T09:34:04Z"}, "message": "run alloc benchmarks in Miri and fix UB", "tree": {"sha": "4892a3d4a77917de5a71e4e0639d0921eb8ba9dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4892a3d4a77917de5a71e4e0639d0921eb8ba9dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/780952f922a52db435aff7b73cfdb6cb541083b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/780952f922a52db435aff7b73cfdb6cb541083b8", "html_url": "https://github.com/rust-lang/rust/commit/780952f922a52db435aff7b73cfdb6cb541083b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/780952f922a52db435aff7b73cfdb6cb541083b8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "html_url": "https://github.com/rust-lang/rust/commit/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "1a5938fd34cf17d2b58d8c836be0f7d6c387af58", "filename": "library/alloc/src/alloc/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/780952f922a52db435aff7b73cfdb6cb541083b8/library%2Falloc%2Fsrc%2Falloc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780952f922a52db435aff7b73cfdb6cb541083b8/library%2Falloc%2Fsrc%2Falloc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc%2Ftests.rs?ref=780952f922a52db435aff7b73cfdb6cb541083b8", "patch": "@@ -22,7 +22,6 @@ fn allocate_zeroed() {\n }\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn alloc_owned_small(b: &mut Bencher) {\n     b.iter(|| {\n         let _: Box<_> = Box::new(10);"}, {"sha": "a103531a20f206fa71fc7ee883765f6d2282ab7d", "filename": "library/alloc/src/collections/vec_deque/tests.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/780952f922a52db435aff7b73cfdb6cb541083b8/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/780952f922a52db435aff7b73cfdb6cb541083b8/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs?ref=780952f922a52db435aff7b73cfdb6cb541083b8", "patch": "@@ -3,7 +3,6 @@ use core::iter::TrustedLen;\n use super::*;\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_push_back_100(b: &mut test::Bencher) {\n     let mut deq = VecDeque::with_capacity(101);\n     b.iter(|| {\n@@ -16,7 +15,6 @@ fn bench_push_back_100(b: &mut test::Bencher) {\n }\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_push_front_100(b: &mut test::Bencher) {\n     let mut deq = VecDeque::with_capacity(101);\n     b.iter(|| {\n@@ -29,12 +27,15 @@ fn bench_push_front_100(b: &mut test::Bencher) {\n }\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_pop_back_100(b: &mut test::Bencher) {\n-    let mut deq = VecDeque::<i32>::with_capacity(101);\n+    let size = 100;\n+    let mut deq = VecDeque::<i32>::with_capacity(size+1);\n+    // We'll mess with private state to pretend like `deq` is filled.\n+    // Make sure the buffer is initialized so that we don't read uninit memory.\n+    unsafe { deq.ptr().write_bytes(0u8, size+1) };\n \n     b.iter(|| {\n-        deq.head = 100;\n+        deq.head = size;\n         deq.tail = 0;\n         while !deq.is_empty() {\n             test::black_box(deq.pop_back());\n@@ -43,9 +44,9 @@ fn bench_pop_back_100(b: &mut test::Bencher) {\n }\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_retain_whole_10000(b: &mut test::Bencher) {\n-    let v = (1..100000).collect::<VecDeque<u32>>();\n+    let size = if cfg!(miri) { 1000 } else { 100000 };\n+    let v = (1..size).collect::<VecDeque<u32>>();\n \n     b.iter(|| {\n         let mut v = v.clone();\n@@ -54,9 +55,9 @@ fn bench_retain_whole_10000(b: &mut test::Bencher) {\n }\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_retain_odd_10000(b: &mut test::Bencher) {\n-    let v = (1..100000).collect::<VecDeque<u32>>();\n+    let size = if cfg!(miri) { 1000 } else { 100000 };\n+    let v = (1..size).collect::<VecDeque<u32>>();\n \n     b.iter(|| {\n         let mut v = v.clone();\n@@ -65,23 +66,26 @@ fn bench_retain_odd_10000(b: &mut test::Bencher) {\n }\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_retain_half_10000(b: &mut test::Bencher) {\n-    let v = (1..100000).collect::<VecDeque<u32>>();\n+    let size = if cfg!(miri) { 1000 } else { 100000 };\n+    let v = (1..size).collect::<VecDeque<u32>>();\n \n     b.iter(|| {\n         let mut v = v.clone();\n-        v.retain(|x| *x > 50000)\n+        v.retain(|x| *x > size/2)\n     })\n }\n \n #[bench]\n-#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_pop_front_100(b: &mut test::Bencher) {\n-    let mut deq = VecDeque::<i32>::with_capacity(101);\n+    let size = 100;\n+    let mut deq = VecDeque::<i32>::with_capacity(size+1);\n+    // We'll mess with private state to pretend like `deq` is filled.\n+    // Make sure the buffer is initialized so that we don't read uninit memory.\n+    unsafe { deq.ptr().write_bytes(0u8, size+1) };\n \n     b.iter(|| {\n-        deq.head = 100;\n+        deq.head = size;\n         deq.tail = 0;\n         while !deq.is_empty() {\n             test::black_box(deq.pop_front());"}]}