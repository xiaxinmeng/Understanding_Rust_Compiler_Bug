{"sha": "5f92faec6d0cbaac6c6afa93efc7298de6765afc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmOTJmYWVjNmQwY2JhYWM2YzZhZmE5M2VmYzcyOThkZTY3NjVhZmM=", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2020-04-03T02:09:30Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2020-04-08T15:43:20Z"}, "message": "Downgrade implicit_hasher to pedantic", "tree": {"sha": "308bbacb2b24e8cbf8e379e6c47f99600a63def0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/308bbacb2b24e8cbf8e379e6c47f99600a63def0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f92faec6d0cbaac6c6afa93efc7298de6765afc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAl6N8RgACgkQ+boUO5X/\nbYIh8BAAyXpAGfRByhPw+B3rE66Cxfaa/s/i8szdHx02Q1rxbn3aeVphptKjd8/U\nVZWUu8OC4C4wIzoi7ldvZXAACmoBAS+omGbnO4XI5LKYPwVf+GroZDytcjq/uKL0\n0E/KqzoZI9oA9TkWztfmCSSANWomels/ecDkV7EsDpVH5dhJx+7DMOAcVAGKLuWR\nY3871KC0s1rlYciaF348o2G2Q90YPLuekztcCpMl6Zgb+0UFcYCYJdqM8l4Ny4iX\nNeCrRuGbLSQ4YMQQo7GHuLDM4q/W8yslnzkUDAjGl8pK+5WjPfP0Oc1FFGLFl45l\nEmhqSBffGThflGLvOWiT6ScomeLglJ9+I6SyBcv3TxyrMk2bXn/vVJomOYHDRWjG\nS1hR4hmi0d22CL/Xs+sJb7Qvm9SQTjxDl3OXTxyQRFv+6f7fShPej6cgPUAOQVlh\nlqGtuFwT1+EkGGyyRgBb6hSYG+ylQIMxc2zBNo95tCxeMSeVBQ/OyY+QARwtCKn5\ns6bU6DPwFCS9NRxYAr8m3zFtQGDca/D7f/PObGzjudcG70vEgHO/OlGJXyiwXbDr\nSUsMyDpyJmHGbg9DO2/fqTxUf4sWqaf6qoqfs77TA64stZEGYZfzIn9w2NuOtqEg\n02A91OEJrF9xgyU+3B9gLw+dTetMQUXHKAWXcnetO9RyqkvJa6k=\n=AVgw\n-----END PGP SIGNATURE-----", "payload": "tree 308bbacb2b24e8cbf8e379e6c47f99600a63def0\nparent f8308c811f695a6025d48dbc89267ec4d32b5354\nauthor David Tolnay <dtolnay@gmail.com> 1585879770 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1586360600 -0700\n\nDowngrade implicit_hasher to pedantic\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f92faec6d0cbaac6c6afa93efc7298de6765afc", "html_url": "https://github.com/rust-lang/rust/commit/5f92faec6d0cbaac6c6afa93efc7298de6765afc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f92faec6d0cbaac6c6afa93efc7298de6765afc/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8308c811f695a6025d48dbc89267ec4d32b5354", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8308c811f695a6025d48dbc89267ec4d32b5354", "html_url": "https://github.com/rust-lang/rust/commit/f8308c811f695a6025d48dbc89267ec4d32b5354"}], "stats": {"total": 54, "additions": 31, "deletions": 23}, "files": [{"sha": "e21d619119f0ac3cfae15d58188614c7819bd496", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f92faec6d0cbaac6c6afa93efc7298de6765afc/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92faec6d0cbaac6c6afa93efc7298de6765afc/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5f92faec6d0cbaac6c6afa93efc7298de6765afc", "patch": "@@ -1135,6 +1135,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::CAST_POSSIBLE_WRAP),\n         LintId::of(&types::CAST_PRECISION_LOSS),\n         LintId::of(&types::CAST_SIGN_LOSS),\n+        LintId::of(&types::IMPLICIT_HASHER),\n         LintId::of(&types::INVALID_UPCAST_COMPARISONS),\n         LintId::of(&types::LET_UNIT_VALUE),\n         LintId::of(&types::LINKEDLIST),\n@@ -1384,7 +1385,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::CHAR_LIT_AS_U8),\n         LintId::of(&types::FN_TO_NUMERIC_CAST),\n         LintId::of(&types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n-        LintId::of(&types::IMPLICIT_HASHER),\n         LintId::of(&types::REDUNDANT_ALLOCATION),\n         LintId::of(&types::TYPE_COMPLEXITY),\n         LintId::of(&types::UNIT_ARG),\n@@ -1495,7 +1495,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&try_err::TRY_ERR),\n         LintId::of(&types::FN_TO_NUMERIC_CAST),\n         LintId::of(&types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n-        LintId::of(&types::IMPLICIT_HASHER),\n         LintId::of(&unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n         LintId::of(&write::PRINTLN_EMPTY_STRING),\n         LintId::of(&write::PRINT_LITERAL),"}, {"sha": "455f71656fb1127c03643e9e8740cba6c4c097a2", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f92faec6d0cbaac6c6afa93efc7298de6765afc/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92faec6d0cbaac6c6afa93efc7298de6765afc/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=5f92faec6d0cbaac6c6afa93efc7298de6765afc", "patch": "@@ -2170,7 +2170,7 @@ declare_clippy_lint! {\n     /// pub fn foo<S: BuildHasher>(map: &mut HashMap<i32, i32, S>) { }\n     /// ```\n     pub IMPLICIT_HASHER,\n-    style,\n+    pedantic,\n     \"missing generalization over different hashers\"\n }\n "}, {"sha": "9af2c76323ef1389606ba4a53ad0471cdd098fd1", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f92faec6d0cbaac6c6afa93efc7298de6765afc/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92faec6d0cbaac6c6afa93efc7298de6765afc/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=5f92faec6d0cbaac6c6afa93efc7298de6765afc", "patch": "@@ -747,7 +747,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     },\n     Lint {\n         name: \"implicit_hasher\",\n-        group: \"style\",\n+        group: \"pedantic\",\n         desc: \"missing generalization over different hashers\",\n         deprecation: None,\n         module: \"types\","}, {"sha": "f50714643fd2524905a7166c96d71e0c25687c34", "filename": "tests/ui/crashes/ice-3717.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f92faec6d0cbaac6c6afa93efc7298de6765afc/tests%2Fui%2Fcrashes%2Fice-3717.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92faec6d0cbaac6c6afa93efc7298de6765afc/tests%2Fui%2Fcrashes%2Fice-3717.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3717.rs?ref=5f92faec6d0cbaac6c6afa93efc7298de6765afc", "patch": "@@ -1,3 +1,5 @@\n+#![deny(clippy::implicit_hasher)]\n+\n use std::collections::HashSet;\n \n fn main() {}"}, {"sha": "296c95abb96d343f73629910d0f5fab3dd6fd228", "filename": "tests/ui/crashes/ice-3717.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f92faec6d0cbaac6c6afa93efc7298de6765afc/tests%2Fui%2Fcrashes%2Fice-3717.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f92faec6d0cbaac6c6afa93efc7298de6765afc/tests%2Fui%2Fcrashes%2Fice-3717.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3717.stderr?ref=5f92faec6d0cbaac6c6afa93efc7298de6765afc", "patch": "@@ -1,10 +1,14 @@\n error: parameter of type `HashSet` should be generalized over different hashers\n-  --> $DIR/ice-3717.rs:5:21\n+  --> $DIR/ice-3717.rs:7:21\n    |\n LL | pub fn ice_3717(_: &HashSet<usize>) {\n    |                     ^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::implicit-hasher` implied by `-D warnings`\n+note: the lint level is defined here\n+  --> $DIR/ice-3717.rs:1:9\n+   |\n+LL | #![deny(clippy::implicit_hasher)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n help: consider adding a type parameter\n    |\n LL | pub fn ice_3717<S: ::std::hash::BuildHasher + Default>(_: &HashSet<usize, S>) {"}, {"sha": "fdcc9a33f55fe93e2d5989f1757b2233c43c3d78", "filename": "tests/ui/implicit_hasher.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f92faec6d0cbaac6c6afa93efc7298de6765afc/tests%2Fui%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92faec6d0cbaac6c6afa93efc7298de6765afc/tests%2Fui%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.rs?ref=5f92faec6d0cbaac6c6afa93efc7298de6765afc", "patch": "@@ -1,4 +1,5 @@\n // aux-build:implicit_hasher_macros.rs\n+#![deny(clippy::implicit_hasher)]\n #![allow(unused)]\n \n #[macro_use]"}, {"sha": "2b06d661772d28083e71f35e4abe9f7f056fe338", "filename": "tests/ui/implicit_hasher.stderr", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5f92faec6d0cbaac6c6afa93efc7298de6765afc/tests%2Fui%2Fimplicit_hasher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f92faec6d0cbaac6c6afa93efc7298de6765afc/tests%2Fui%2Fimplicit_hasher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.stderr?ref=5f92faec6d0cbaac6c6afa93efc7298de6765afc", "patch": "@@ -1,10 +1,14 @@\n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:15:35\n+  --> $DIR/implicit_hasher.rs:16:35\n    |\n LL | impl<K: Hash + Eq, V> Foo<i8> for HashMap<K, V> {\n    |                                   ^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::implicit-hasher` implied by `-D warnings`\n+note: the lint level is defined here\n+  --> $DIR/implicit_hasher.rs:2:9\n+   |\n+LL | #![deny(clippy::implicit_hasher)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n help: consider adding a type parameter\n    |\n LL | impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<i8> for HashMap<K, V, S> {\n@@ -15,7 +19,7 @@ LL |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default:\n    |          ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:24:36\n+  --> $DIR/implicit_hasher.rs:25:36\n    |\n LL | impl<K: Hash + Eq, V> Foo<i8> for (HashMap<K, V>,) {\n    |                                    ^^^^^^^^^^^^^\n@@ -30,7 +34,7 @@ LL |         ((HashMap::default(),), (HashMap::with_capacity_and_hasher(10, Defa\n    |           ^^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:29:19\n+  --> $DIR/implicit_hasher.rs:30:19\n    |\n LL | impl Foo<i16> for HashMap<String, String> {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -45,7 +49,7 @@ LL |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default:\n    |          ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: impl for `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:46:32\n+  --> $DIR/implicit_hasher.rs:47:32\n    |\n LL | impl<T: Hash + Eq> Foo<i8> for HashSet<T> {\n    |                                ^^^^^^^^^^\n@@ -60,7 +64,7 @@ LL |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default:\n    |          ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: impl for `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:51:19\n+  --> $DIR/implicit_hasher.rs:52:19\n    |\n LL | impl Foo<i16> for HashSet<String> {\n    |                   ^^^^^^^^^^^^^^^\n@@ -75,7 +79,7 @@ LL |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default:\n    |          ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: parameter of type `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:68:23\n+  --> $DIR/implicit_hasher.rs:69:23\n    |\n LL | pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                       ^^^^^^^^^^^^^^^^^\n@@ -86,7 +90,7 @@ LL | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _s\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^            ^^^^^^^^^^^^^^^^^^^^\n \n error: parameter of type `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:68:53\n+  --> $DIR/implicit_hasher.rs:69:53\n    |\n LL | pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                                                     ^^^^^^^^^^^^\n@@ -97,7 +101,7 @@ LL | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set:\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                          ^^^^^^^^^^^^^^^\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:72:43\n+  --> $DIR/implicit_hasher.rs:73:43\n    |\n LL |         impl<K: Hash + Eq, V> Foo<u8> for HashMap<K, V> {\n    |                                           ^^^^^^^^^^^^^\n@@ -116,7 +120,7 @@ LL |                 (HashMap::default(), HashMap::with_capacity_and_hasher(10,\n    |                  ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: parameter of type `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:80:33\n+  --> $DIR/implicit_hasher.rs:81:33\n    |\n LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                                 ^^^^^^^^^^^^^^^^^\n@@ -131,7 +135,7 @@ LL |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^            ^^^^^^^^^^^^^^^^^^^^\n \n error: parameter of type `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:80:63\n+  --> $DIR/implicit_hasher.rs:81:63\n    |\n LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                                                               ^^^^^^^^^^^^"}, {"sha": "2d227e6654c36c0f45e6801205dd173f271d546a", "filename": "tests/ui/mut_key.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f92faec6d0cbaac6c6afa93efc7298de6765afc/tests%2Fui%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92faec6d0cbaac6c6afa93efc7298de6765afc/tests%2Fui%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_key.rs?ref=5f92faec6d0cbaac6c6afa93efc7298de6765afc", "patch": "@@ -1,5 +1,3 @@\n-#![allow(clippy::implicit_hasher)]\n-\n use std::collections::{HashMap, HashSet};\n use std::hash::{Hash, Hasher};\n use std::sync::atomic::{AtomicUsize, Ordering::Relaxed};"}, {"sha": "8d6a259c7e385f307ada794ea2e9ca0f06f01853", "filename": "tests/ui/mut_key.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f92faec6d0cbaac6c6afa93efc7298de6765afc/tests%2Fui%2Fmut_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f92faec6d0cbaac6c6afa93efc7298de6765afc/tests%2Fui%2Fmut_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_key.stderr?ref=5f92faec6d0cbaac6c6afa93efc7298de6765afc", "patch": "@@ -1,25 +1,25 @@\n error: mutable key type\n-  --> $DIR/mut_key.rs:29:32\n+  --> $DIR/mut_key.rs:27:32\n    |\n LL | fn should_not_take_this_arg(m: &mut HashMap<Key, usize>, _n: usize) -> HashSet<Key> {\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[deny(clippy::mutable_key_type)]` on by default\n \n error: mutable key type\n-  --> $DIR/mut_key.rs:29:72\n+  --> $DIR/mut_key.rs:27:72\n    |\n LL | fn should_not_take_this_arg(m: &mut HashMap<Key, usize>, _n: usize) -> HashSet<Key> {\n    |                                                                        ^^^^^^^^^^^^\n \n error: mutable key type\n-  --> $DIR/mut_key.rs:30:5\n+  --> $DIR/mut_key.rs:28:5\n    |\n LL |     let _other: HashMap<Key, bool> = HashMap::new();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: mutable key type\n-  --> $DIR/mut_key.rs:49:22\n+  --> $DIR/mut_key.rs:47:22\n    |\n LL | fn tuples_bad<U>(_m: &mut HashMap<(Key, U), bool>) {}\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}