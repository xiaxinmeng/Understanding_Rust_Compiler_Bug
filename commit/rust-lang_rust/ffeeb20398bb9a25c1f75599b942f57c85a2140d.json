{"sha": "ffeeb20398bb9a25c1f75599b942f57c85a2140d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZWViMjAzOThiYjlhMjVjMWY3NTU5OWI5NDJmNTdjODVhMjE0MGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-17T16:57:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-17T16:57:21Z"}, "message": "Auto merge of #77373 - jonas-schievink:rm-rf-copy-prop, r=oli-obk\n\nRemove the old copy propagation pass\n\nThis pass was added a long time ago, and has not really seen much improvement since (apart from some great work in https://github.com/rust-lang/rust/pull/76569 that unfortunately ran into preexisting soundness issues). It is slow and unsound, and we now have a destination propagation pass that performs a related optimization and could be extended.\n\nCloses https://github.com/rust-lang/rust/issues/36673\nCloses https://github.com/rust-lang/rust/issues/73717\nCloses https://github.com/rust-lang/rust/issues/76740", "tree": {"sha": "8e34c7181463712166ff5526176c3da630cccd51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e34c7181463712166ff5526176c3da630cccd51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffeeb20398bb9a25c1f75599b942f57c85a2140d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffeeb20398bb9a25c1f75599b942f57c85a2140d", "html_url": "https://github.com/rust-lang/rust/commit/ffeeb20398bb9a25c1f75599b942f57c85a2140d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffeeb20398bb9a25c1f75599b942f57c85a2140d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6af9846fcc8797bf97e9fb387385208c2219f3d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6af9846fcc8797bf97e9fb387385208c2219f3d0", "html_url": "https://github.com/rust-lang/rust/commit/6af9846fcc8797bf97e9fb387385208c2219f3d0"}, {"sha": "dc3177775c6accb004a1bde5ea72ba03740952ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc3177775c6accb004a1bde5ea72ba03740952ad", "html_url": "https://github.com/rust-lang/rust/commit/dc3177775c6accb004a1bde5ea72ba03740952ad"}], "stats": {"total": 716, "additions": 74, "deletions": 642}, "files": [{"sha": "4f44bb7b20476f9a49e947da21e69f6371e08eb8", "filename": "compiler/rustc_mir/src/transform/copy_prop.rs", "status": "removed", "additions": 0, "deletions": 384, "changes": 384, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcopy_prop.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -1,384 +0,0 @@\n-//! Trivial copy propagation pass.\n-//!\n-//! This uses def-use analysis to remove values that have exactly one def and one use, which must\n-//! be an assignment.\n-//!\n-//! To give an example, we look for patterns that look like:\n-//!\n-//!     DEST = SRC\n-//!     ...\n-//!     USE(DEST)\n-//!\n-//! where `DEST` and `SRC` are both locals of some form. We replace that with:\n-//!\n-//!     NOP\n-//!     ...\n-//!     USE(SRC)\n-//!\n-//! The assignment `DEST = SRC` must be (a) the only mutation of `DEST` and (b) the only\n-//! (non-mutating) use of `SRC`. These restrictions are conservative and may be relaxed in the\n-//! future.\n-\n-use crate::transform::MirPass;\n-use crate::util::def_use::DefUseAnalysis;\n-use rustc_middle::mir::visit::MutVisitor;\n-use rustc_middle::mir::{\n-    Body, Constant, Local, LocalKind, Location, Operand, Place, Rvalue, StatementKind,\n-};\n-use rustc_middle::ty::TyCtxt;\n-\n-pub struct CopyPropagation;\n-\n-impl<'tcx> MirPass<'tcx> for CopyPropagation {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        let opts = &tcx.sess.opts.debugging_opts;\n-        // We only run when the MIR optimization level is > 1.\n-        // This avoids a slow pass, and messing up debug info.\n-        // FIXME(76740): This optimization is buggy and can cause unsoundness.\n-        if opts.mir_opt_level <= 1 || !opts.unsound_mir_opts {\n-            return;\n-        }\n-\n-        let mut def_use_analysis = DefUseAnalysis::new(body);\n-        loop {\n-            def_use_analysis.analyze(body);\n-\n-            if eliminate_self_assignments(body, &def_use_analysis) {\n-                def_use_analysis.analyze(body);\n-            }\n-\n-            let mut changed = false;\n-            for dest_local in body.local_decls.indices() {\n-                debug!(\"considering destination local: {:?}\", dest_local);\n-\n-                let action;\n-                let location;\n-                {\n-                    // The destination must have exactly one def.\n-                    let dest_use_info = def_use_analysis.local_info(dest_local);\n-                    let dest_def_count = dest_use_info.def_count_not_including_drop();\n-                    if dest_def_count == 0 {\n-                        debug!(\"  Can't copy-propagate local: dest {:?} undefined\", dest_local);\n-                        continue;\n-                    }\n-                    if dest_def_count > 1 {\n-                        debug!(\n-                            \"  Can't copy-propagate local: dest {:?} defined {} times\",\n-                            dest_local,\n-                            dest_use_info.def_count()\n-                        );\n-                        continue;\n-                    }\n-                    if dest_use_info.use_count() == 0 {\n-                        debug!(\"  Can't copy-propagate local: dest {:?} unused\", dest_local);\n-                        continue;\n-                    }\n-                    // Conservatively gives up if the dest is an argument,\n-                    // because there may be uses of the original argument value.\n-                    // Also gives up on the return place, as we cannot propagate into its implicit\n-                    // use by `return`.\n-                    if matches!(\n-                        body.local_kind(dest_local),\n-                        LocalKind::Arg | LocalKind::ReturnPointer\n-                    ) {\n-                        debug!(\"  Can't copy-propagate local: dest {:?} (argument)\", dest_local);\n-                        continue;\n-                    }\n-                    let dest_place_def = dest_use_info.defs_not_including_drop().next().unwrap();\n-                    location = dest_place_def.location;\n-\n-                    let basic_block = &body[location.block];\n-                    let statement_index = location.statement_index;\n-                    let statement = match basic_block.statements.get(statement_index) {\n-                        Some(statement) => statement,\n-                        None => {\n-                            debug!(\"  Can't copy-propagate local: used in terminator\");\n-                            continue;\n-                        }\n-                    };\n-\n-                    // That use of the source must be an assignment.\n-                    match &statement.kind {\n-                        StatementKind::Assign(box (place, Rvalue::Use(operand))) => {\n-                            if let Some(local) = place.as_local() {\n-                                if local == dest_local {\n-                                    let maybe_action = match operand {\n-                                        Operand::Copy(src_place) | Operand::Move(src_place) => {\n-                                            Action::local_copy(&body, &def_use_analysis, *src_place)\n-                                        }\n-                                        Operand::Constant(ref src_constant) => {\n-                                            Action::constant(src_constant)\n-                                        }\n-                                    };\n-                                    match maybe_action {\n-                                        Some(this_action) => action = this_action,\n-                                        None => continue,\n-                                    }\n-                                } else {\n-                                    debug!(\n-                                        \"  Can't copy-propagate local: source use is not an \\\n-                                    assignment\"\n-                                    );\n-                                    continue;\n-                                }\n-                            } else {\n-                                debug!(\n-                                    \"  Can't copy-propagate local: source use is not an \\\n-                                    assignment\"\n-                                );\n-                                continue;\n-                            }\n-                        }\n-                        _ => {\n-                            debug!(\n-                                \"  Can't copy-propagate local: source use is not an \\\n-                                    assignment\"\n-                            );\n-                            continue;\n-                        }\n-                    }\n-                }\n-\n-                changed =\n-                    action.perform(body, &def_use_analysis, dest_local, location, tcx) || changed;\n-                // FIXME(pcwalton): Update the use-def chains to delete the instructions instead of\n-                // regenerating the chains.\n-                break;\n-            }\n-            if !changed {\n-                break;\n-            }\n-        }\n-    }\n-}\n-\n-fn eliminate_self_assignments(body: &mut Body<'_>, def_use_analysis: &DefUseAnalysis) -> bool {\n-    let mut changed = false;\n-\n-    for dest_local in body.local_decls.indices() {\n-        let dest_use_info = def_use_analysis.local_info(dest_local);\n-\n-        for def in dest_use_info.defs_not_including_drop() {\n-            let location = def.location;\n-            if let Some(stmt) = body[location.block].statements.get(location.statement_index) {\n-                match &stmt.kind {\n-                    StatementKind::Assign(box (\n-                        place,\n-                        Rvalue::Use(Operand::Copy(src_place) | Operand::Move(src_place)),\n-                    )) => {\n-                        if let (Some(local), Some(src_local)) =\n-                            (place.as_local(), src_place.as_local())\n-                        {\n-                            if local == dest_local && dest_local == src_local {\n-                            } else {\n-                                continue;\n-                            }\n-                        } else {\n-                            continue;\n-                        }\n-                    }\n-                    _ => {\n-                        continue;\n-                    }\n-                }\n-            } else {\n-                continue;\n-            }\n-            debug!(\"deleting a self-assignment for {:?}\", dest_local);\n-            body.make_statement_nop(location);\n-            changed = true;\n-        }\n-    }\n-\n-    changed\n-}\n-\n-enum Action<'tcx> {\n-    PropagateLocalCopy(Local),\n-    PropagateConstant(Constant<'tcx>),\n-}\n-\n-impl<'tcx> Action<'tcx> {\n-    fn local_copy(\n-        body: &Body<'tcx>,\n-        def_use_analysis: &DefUseAnalysis,\n-        src_place: Place<'tcx>,\n-    ) -> Option<Action<'tcx>> {\n-        // The source must be a local.\n-        let src_local = if let Some(local) = src_place.as_local() {\n-            local\n-        } else {\n-            debug!(\"  Can't copy-propagate local: source is not a local\");\n-            return None;\n-        };\n-\n-        // We're trying to copy propagate a local.\n-        // There must be exactly one use of the source used in a statement (not in a terminator).\n-        let src_use_info = def_use_analysis.local_info(src_local);\n-        let src_use_count = src_use_info.use_count();\n-        if src_use_count == 0 {\n-            debug!(\"  Can't copy-propagate local: no uses\");\n-            return None;\n-        }\n-        if src_use_count != 1 {\n-            debug!(\"  Can't copy-propagate local: {} uses\", src_use_info.use_count());\n-            return None;\n-        }\n-\n-        // Verify that the source doesn't change in between. This is done conservatively for now,\n-        // by ensuring that the source has exactly one mutation. The goal is to prevent things\n-        // like:\n-        //\n-        //     DEST = SRC;\n-        //     SRC = X;\n-        //     USE(DEST);\n-        //\n-        // From being misoptimized into:\n-        //\n-        //     SRC = X;\n-        //     USE(SRC);\n-        let src_def_count = src_use_info.def_count_not_including_drop();\n-        // allow function arguments to be propagated\n-        let is_arg = body.local_kind(src_local) == LocalKind::Arg;\n-        if (is_arg && src_def_count != 0) || (!is_arg && src_def_count != 1) {\n-            debug!(\n-                \"  Can't copy-propagate local: {} defs of src{}\",\n-                src_def_count,\n-                if is_arg { \" (argument)\" } else { \"\" },\n-            );\n-            return None;\n-        }\n-\n-        Some(Action::PropagateLocalCopy(src_local))\n-    }\n-\n-    fn constant(src_constant: &Constant<'tcx>) -> Option<Action<'tcx>> {\n-        Some(Action::PropagateConstant(*src_constant))\n-    }\n-\n-    fn perform(\n-        self,\n-        body: &mut Body<'tcx>,\n-        def_use_analysis: &DefUseAnalysis,\n-        dest_local: Local,\n-        location: Location,\n-        tcx: TyCtxt<'tcx>,\n-    ) -> bool {\n-        match self {\n-            Action::PropagateLocalCopy(src_local) => {\n-                // Eliminate the destination and the assignment.\n-                //\n-                // First, remove all markers.\n-                //\n-                // FIXME(pcwalton): Don't do this. Merge live ranges instead.\n-                debug!(\"  Replacing all uses of {:?} with {:?} (local)\", dest_local, src_local);\n-                for place_use in &def_use_analysis.local_info(dest_local).defs_and_uses {\n-                    if place_use.context.is_storage_marker() {\n-                        body.make_statement_nop(place_use.location)\n-                    }\n-                }\n-                for place_use in &def_use_analysis.local_info(src_local).defs_and_uses {\n-                    if place_use.context.is_storage_marker() {\n-                        body.make_statement_nop(place_use.location)\n-                    }\n-                }\n-\n-                // Replace all uses of the destination local with the source local.\n-                def_use_analysis.replace_all_defs_and_uses_with(dest_local, body, src_local, tcx);\n-\n-                // Finally, zap the now-useless assignment instruction.\n-                debug!(\"  Deleting assignment\");\n-                body.make_statement_nop(location);\n-\n-                true\n-            }\n-            Action::PropagateConstant(src_constant) => {\n-                // First, remove all markers.\n-                //\n-                // FIXME(pcwalton): Don't do this. Merge live ranges instead.\n-                debug!(\n-                    \"  Replacing all uses of {:?} with {:?} (constant)\",\n-                    dest_local, src_constant\n-                );\n-                let dest_local_info = def_use_analysis.local_info(dest_local);\n-                for place_use in &dest_local_info.defs_and_uses {\n-                    if place_use.context.is_storage_marker() {\n-                        body.make_statement_nop(place_use.location)\n-                    }\n-                }\n-\n-                // Replace all uses of the destination local with the constant.\n-                let mut visitor = ConstantPropagationVisitor::new(dest_local, src_constant, tcx);\n-                for dest_place_use in &dest_local_info.defs_and_uses {\n-                    visitor.visit_location(body, dest_place_use.location)\n-                }\n-\n-                // Zap the assignment instruction if we eliminated all the uses. We won't have been\n-                // able to do that if the destination was used in a projection, because projections\n-                // must have places on their LHS.\n-                let use_count = dest_local_info.use_count();\n-                if visitor.uses_replaced == use_count {\n-                    debug!(\n-                        \"  {} of {} use(s) replaced; deleting assignment\",\n-                        visitor.uses_replaced, use_count\n-                    );\n-                    body.make_statement_nop(location);\n-                    true\n-                } else if visitor.uses_replaced == 0 {\n-                    debug!(\"  No uses replaced; not deleting assignment\");\n-                    false\n-                } else {\n-                    debug!(\n-                        \"  {} of {} use(s) replaced; not deleting assignment\",\n-                        visitor.uses_replaced, use_count\n-                    );\n-                    true\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-struct ConstantPropagationVisitor<'tcx> {\n-    dest_local: Local,\n-    constant: Constant<'tcx>,\n-    tcx: TyCtxt<'tcx>,\n-    uses_replaced: usize,\n-}\n-\n-impl<'tcx> ConstantPropagationVisitor<'tcx> {\n-    fn new(\n-        dest_local: Local,\n-        constant: Constant<'tcx>,\n-        tcx: TyCtxt<'tcx>,\n-    ) -> ConstantPropagationVisitor<'tcx> {\n-        ConstantPropagationVisitor { dest_local, constant, tcx, uses_replaced: 0 }\n-    }\n-}\n-\n-impl<'tcx> MutVisitor<'tcx> for ConstantPropagationVisitor<'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n-        self.tcx\n-    }\n-\n-    fn visit_operand(&mut self, operand: &mut Operand<'tcx>, location: Location) {\n-        self.super_operand(operand, location);\n-\n-        match operand {\n-            Operand::Copy(place) | Operand::Move(place) => {\n-                if let Some(local) = place.as_local() {\n-                    if local == self.dest_local {\n-                    } else {\n-                        return;\n-                    }\n-                } else {\n-                    return;\n-                }\n-            }\n-            _ => return,\n-        }\n-\n-        *operand = Operand::Constant(box self.constant);\n-        self.uses_replaced += 1\n-    }\n-}"}, {"sha": "20b8c90a9dcad2bc8b669364162a69650d9188e7", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffeeb20398bb9a25c1f75599b942f57c85a2140d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffeeb20398bb9a25c1f75599b942f57c85a2140d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=ffeeb20398bb9a25c1f75599b942f57c85a2140d", "patch": "@@ -22,7 +22,6 @@ pub mod check_packed_ref;\n pub mod check_unsafety;\n pub mod cleanup_post_borrowck;\n pub mod const_prop;\n-pub mod copy_prop;\n pub mod deaggregator;\n pub mod dest_prop;\n pub mod dump_mir;\n@@ -401,8 +400,7 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         &simplify_try::SimplifyArmIdentity,\n         &simplify_try::SimplifyBranchSame,\n         &dest_prop::DestinationPropagation,\n-        &copy_prop::CopyPropagation,\n-        &simplify_branches::SimplifyBranches::new(\"after-copy-prop\"),\n+        &simplify_branches::SimplifyBranches::new(\"final\"),\n         &remove_noop_landing_pads::RemoveNoopLandingPads,\n         &simplify::SimplifyCfg::new(\"final\"),\n         &nrvo::RenameReturnPlace,"}, {"sha": "b4448ead8eb8124f4d304f1653e76514fe1ecb7a", "filename": "compiler/rustc_mir/src/util/def_use.rs", "status": "removed", "additions": 0, "deletions": 158, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_mir%2Fsrc%2Futil%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/compiler%2Frustc_mir%2Fsrc%2Futil%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fdef_use.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -1,158 +0,0 @@\n-//! Def-use analysis.\n-\n-use rustc_index::vec::IndexVec;\n-use rustc_middle::mir::visit::{MutVisitor, PlaceContext, Visitor};\n-use rustc_middle::mir::{Body, Local, Location, VarDebugInfo};\n-use rustc_middle::ty::TyCtxt;\n-use std::mem;\n-\n-pub struct DefUseAnalysis {\n-    info: IndexVec<Local, Info>,\n-}\n-\n-#[derive(Clone)]\n-pub struct Info {\n-    // FIXME(eddyb) use smallvec where possible.\n-    pub defs_and_uses: Vec<Use>,\n-    var_debug_info_indices: Vec<usize>,\n-}\n-\n-#[derive(Clone)]\n-pub struct Use {\n-    pub context: PlaceContext,\n-    pub location: Location,\n-}\n-\n-impl DefUseAnalysis {\n-    pub fn new(body: &Body<'_>) -> DefUseAnalysis {\n-        DefUseAnalysis { info: IndexVec::from_elem_n(Info::new(), body.local_decls.len()) }\n-    }\n-\n-    pub fn analyze(&mut self, body: &Body<'_>) {\n-        self.clear();\n-\n-        let mut finder = DefUseFinder {\n-            info: mem::take(&mut self.info),\n-            var_debug_info_index: 0,\n-            in_var_debug_info: false,\n-        };\n-        finder.visit_body(&body);\n-        self.info = finder.info\n-    }\n-\n-    fn clear(&mut self) {\n-        for info in &mut self.info {\n-            info.clear();\n-        }\n-    }\n-\n-    pub fn local_info(&self, local: Local) -> &Info {\n-        &self.info[local]\n-    }\n-\n-    fn mutate_defs_and_uses(\n-        &self,\n-        local: Local,\n-        body: &mut Body<'tcx>,\n-        new_local: Local,\n-        tcx: TyCtxt<'tcx>,\n-    ) {\n-        let mut visitor = MutateUseVisitor::new(local, new_local, tcx);\n-        let info = &self.info[local];\n-        for place_use in &info.defs_and_uses {\n-            visitor.visit_location(body, place_use.location)\n-        }\n-        // Update debuginfo as well, alongside defs/uses.\n-        for &i in &info.var_debug_info_indices {\n-            visitor.visit_var_debug_info(&mut body.var_debug_info[i]);\n-        }\n-    }\n-\n-    // FIXME(pcwalton): this should update the def-use chains.\n-    pub fn replace_all_defs_and_uses_with(\n-        &self,\n-        local: Local,\n-        body: &mut Body<'tcx>,\n-        new_local: Local,\n-        tcx: TyCtxt<'tcx>,\n-    ) {\n-        self.mutate_defs_and_uses(local, body, new_local, tcx)\n-    }\n-}\n-\n-struct DefUseFinder {\n-    info: IndexVec<Local, Info>,\n-    var_debug_info_index: usize,\n-    in_var_debug_info: bool,\n-}\n-\n-impl Visitor<'_> for DefUseFinder {\n-    fn visit_local(&mut self, &local: &Local, context: PlaceContext, location: Location) {\n-        let info = &mut self.info[local];\n-        if self.in_var_debug_info {\n-            info.var_debug_info_indices.push(self.var_debug_info_index);\n-        } else {\n-            info.defs_and_uses.push(Use { context, location });\n-        }\n-    }\n-    fn visit_var_debug_info(&mut self, var_debug_info: &VarDebugInfo<'tcx>) {\n-        assert!(!self.in_var_debug_info);\n-        self.in_var_debug_info = true;\n-        self.super_var_debug_info(var_debug_info);\n-        self.in_var_debug_info = false;\n-        self.var_debug_info_index += 1;\n-    }\n-}\n-\n-impl Info {\n-    fn new() -> Info {\n-        Info { defs_and_uses: vec![], var_debug_info_indices: vec![] }\n-    }\n-\n-    fn clear(&mut self) {\n-        self.defs_and_uses.clear();\n-        self.var_debug_info_indices.clear();\n-    }\n-\n-    pub fn def_count(&self) -> usize {\n-        self.defs_and_uses.iter().filter(|place_use| place_use.context.is_mutating_use()).count()\n-    }\n-\n-    pub fn def_count_not_including_drop(&self) -> usize {\n-        self.defs_not_including_drop().count()\n-    }\n-\n-    pub fn defs_not_including_drop(&self) -> impl Iterator<Item = &Use> {\n-        self.defs_and_uses\n-            .iter()\n-            .filter(|place_use| place_use.context.is_mutating_use() && !place_use.context.is_drop())\n-    }\n-\n-    pub fn use_count(&self) -> usize {\n-        self.defs_and_uses.iter().filter(|place_use| place_use.context.is_nonmutating_use()).count()\n-    }\n-}\n-\n-struct MutateUseVisitor<'tcx> {\n-    query: Local,\n-    new_local: Local,\n-    tcx: TyCtxt<'tcx>,\n-}\n-\n-impl MutateUseVisitor<'tcx> {\n-    fn new(query: Local, new_local: Local, tcx: TyCtxt<'tcx>) -> MutateUseVisitor<'tcx> {\n-        MutateUseVisitor { query, new_local, tcx }\n-    }\n-}\n-\n-impl MutVisitor<'tcx> for MutateUseVisitor<'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n-        self.tcx\n-    }\n-\n-    fn visit_local(&mut self, local: &mut Local, _context: PlaceContext, _location: Location) {\n-        if *local == self.query {\n-            *local = self.new_local;\n-        }\n-    }\n-}"}, {"sha": "7da2f4ffe0889891a4bc59b04f87eaf7461148e2", "filename": "compiler/rustc_mir/src/util/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffeeb20398bb9a25c1f75599b942f57c85a2140d/compiler%2Frustc_mir%2Fsrc%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffeeb20398bb9a25c1f75599b942f57c85a2140d/compiler%2Frustc_mir%2Fsrc%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fmod.rs?ref=ffeeb20398bb9a25c1f75599b942f57c85a2140d", "patch": "@@ -1,6 +1,5 @@\n pub mod aggregate;\n pub mod borrowck_errors;\n-pub mod def_use;\n pub mod elaborate_drops;\n pub mod patch;\n pub mod storage;"}, {"sha": "8283ec73d0f07c3e89377e3e4134d34933607310", "filename": "src/test/mir-opt/copy_propagation.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftest%2Fmir-opt%2Fcopy_propagation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftest%2Fmir-opt%2Fcopy_propagation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation.rs?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -1,12 +0,0 @@\n-// compile-flags: -Zunsound-mir-opts\n-// EMIT_MIR copy_propagation.test.CopyPropagation.diff\n-\n-fn test(x: u32) -> u32 {\n-    let y = x;\n-    y\n-}\n-\n-fn main() {\n-    // Make sure the function actually gets instantiated.\n-    test(0);\n-}"}, {"sha": "152d159063052f45d4bd552cce606a4bb88ab787", "filename": "src/test/mir-opt/copy_propagation.test.CopyPropagation.diff", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftest%2Fmir-opt%2Fcopy_propagation.test.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftest%2Fmir-opt%2Fcopy_propagation.test.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation.test.CopyPropagation.diff?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -1,20 +0,0 @@\n-- // MIR for `test` before CopyPropagation\n-+ // MIR for `test` after CopyPropagation\n-  \n-  fn test(_1: u32) -> u32 {\n-      debug x => _1;                       // in scope 0 at $DIR/copy_propagation.rs:4:9: 4:10\n-      let mut _0: u32;                     // return place in scope 0 at $DIR/copy_propagation.rs:4:20: 4:23\n-      let _2: u32;                         // in scope 0 at $DIR/copy_propagation.rs:5:9: 5:10\n-      scope 1 {\n-          debug y => _0;                   // in scope 1 at $DIR/copy_propagation.rs:5:9: 5:10\n-      }\n-  \n-      bb0: {\n-          nop;                             // scope 0 at $DIR/copy_propagation.rs:5:9: 5:10\n-          _0 = _1;                         // scope 0 at $DIR/copy_propagation.rs:5:13: 5:14\n-          nop;                             // scope 1 at $DIR/copy_propagation.rs:6:5: 6:6\n-          nop;                             // scope 0 at $DIR/copy_propagation.rs:7:1: 7:2\n-          return;                          // scope 0 at $DIR/copy_propagation.rs:7:2: 7:2\n-      }\n-  }\n-  "}, {"sha": "8aab2299d26510c3e5ec78b239700ca36a064cda", "filename": "src/test/mir-opt/copy_propagation_arg.arg_src.CopyPropagation.diff", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.arg_src.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.arg_src.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.arg_src.CopyPropagation.diff?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -1,21 +0,0 @@\n-- // MIR for `arg_src` before CopyPropagation\n-+ // MIR for `arg_src` after CopyPropagation\n-  \n-  fn arg_src(_1: i32) -> i32 {\n-      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:27:12: 27:17\n-      let mut _0: i32;                     // return place in scope 0 at $DIR/copy_propagation_arg.rs:27:27: 27:30\n-      let _2: i32;                         // in scope 0 at $DIR/copy_propagation_arg.rs:28:9: 28:10\n-      scope 1 {\n-          debug y => _0;                   // in scope 1 at $DIR/copy_propagation_arg.rs:28:9: 28:10\n-      }\n-  \n-      bb0: {\n-          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:28:9: 28:10\n-          _0 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:28:13: 28:14\n-          _1 = const 123_i32;              // scope 1 at $DIR/copy_propagation_arg.rs:29:5: 29:12\n-          nop;                             // scope 1 at $DIR/copy_propagation_arg.rs:30:5: 30:6\n-          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:31:1: 31:2\n-          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:31:2: 31:2\n-      }\n-  }\n-  "}, {"sha": "1ea51fec7106992eb821598dba86d45913196c4f", "filename": "src/test/mir-opt/copy_propagation_arg.baz.CopyPropagation.diff", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.baz.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6af9846fcc8797bf97e9fb387385208c2219f3d0/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.baz.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.baz.CopyPropagation.diff?ref=6af9846fcc8797bf97e9fb387385208c2219f3d0", "patch": "@@ -1,18 +0,0 @@\n-- // MIR for `baz` before CopyPropagation\n-+ // MIR for `baz` after CopyPropagation\n-  \n-  fn baz(_1: i32) -> () {\n-      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:21:8: 21:13\n-      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:21:20: 21:20\n-      let mut _2: i32;                     // in scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n-  \n-      bb0: {\n-          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n-          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n-          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:23:5: 23:10\n-          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n-          _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:21:20: 24:2\n-          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:24:2: 24:2\n-      }\n-  }\n-  "}, {"sha": "a5d80e750533251aa8e3a3aed0f67c9ef72fd779", "filename": "src/test/mir-opt/dest-prop/copy_propagation_arg.arg_src.DestinationPropagation.diff", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ffeeb20398bb9a25c1f75599b942f57c85a2140d/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.arg_src.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ffeeb20398bb9a25c1f75599b942f57c85a2140d/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.arg_src.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.arg_src.DestinationPropagation.diff?ref=ffeeb20398bb9a25c1f75599b942f57c85a2140d", "patch": "@@ -0,0 +1,26 @@\n+- // MIR for `arg_src` before DestinationPropagation\n++ // MIR for `arg_src` after DestinationPropagation\n+  \n+  fn arg_src(_1: i32) -> i32 {\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:27:12: 27:17\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/copy_propagation_arg.rs:27:27: 27:30\n+      let _2: i32;                         // in scope 0 at $DIR/copy_propagation_arg.rs:28:9: 28:10\n+      scope 1 {\n+-         debug y => _2;                   // in scope 1 at $DIR/copy_propagation_arg.rs:28:9: 28:10\n++         debug y => _0;                   // in scope 1 at $DIR/copy_propagation_arg.rs:28:9: 28:10\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:28:9: 28:10\n+-         _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:28:13: 28:14\n++         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:28:9: 28:10\n++         _0 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:28:13: 28:14\n+          _1 = const 123_i32;              // scope 1 at $DIR/copy_propagation_arg.rs:29:5: 29:12\n+-         _0 = _2;                         // scope 1 at $DIR/copy_propagation_arg.rs:30:5: 30:6\n+-         StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:31:1: 31:2\n++         nop;                             // scope 1 at $DIR/copy_propagation_arg.rs:30:5: 30:6\n++         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:31:1: 31:2\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:31:2: 31:2\n+      }\n+  }\n+  "}, {"sha": "dce8800e986c90d7429b91b942ab10f1ad52cac1", "filename": "src/test/mir-opt/dest-prop/copy_propagation_arg.bar.DestinationPropagation.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffeeb20398bb9a25c1f75599b942f57c85a2140d/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ffeeb20398bb9a25c1f75599b942f57c85a2140d/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.bar.DestinationPropagation.diff?ref=ffeeb20398bb9a25c1f75599b942f57c85a2140d", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `bar` before CopyPropagation\n-+ // MIR for `bar` after CopyPropagation\n+- // MIR for `bar` before DestinationPropagation\n++ // MIR for `bar` after DestinationPropagation\n   \n   fn bar(_1: u8) -> () {\n       debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:15:8: 15:13", "previous_filename": "src/test/mir-opt/copy_propagation_arg.bar.CopyPropagation.diff"}, {"sha": "2f8c76eb65a9d9fe027338dd0a4c0f2c588883d7", "filename": "src/test/mir-opt/dest-prop/copy_propagation_arg.baz.DestinationPropagation.diff", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ffeeb20398bb9a25c1f75599b942f57c85a2140d/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.baz.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ffeeb20398bb9a25c1f75599b942f57c85a2140d/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.baz.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.baz.DestinationPropagation.diff?ref=ffeeb20398bb9a25c1f75599b942f57c85a2140d", "patch": "@@ -0,0 +1,22 @@\n+- // MIR for `baz` before DestinationPropagation\n++ // MIR for `baz` after DestinationPropagation\n+  \n+  fn baz(_1: i32) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:21:8: 21:13\n+      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:21:20: 21:20\n+      let mut _2: i32;                     // in scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n+-         _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n+-         _1 = move _2;                    // scope 0 at $DIR/copy_propagation_arg.rs:23:5: 23:10\n+-         StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n++         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n++         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n++         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:23:5: 23:10\n++         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:23:9: 23:10\n+          _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:21:20: 24:2\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:24:2: 24:2\n+      }\n+  }\n+  "}, {"sha": "2dea530db3d2001c2a760a0892b6f82be3b48b25", "filename": "src/test/mir-opt/dest-prop/copy_propagation_arg.foo.DestinationPropagation.diff", "status": "renamed", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ffeeb20398bb9a25c1f75599b942f57c85a2140d/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ffeeb20398bb9a25c1f75599b942f57c85a2140d/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.foo.DestinationPropagation.diff?ref=ffeeb20398bb9a25c1f75599b942f57c85a2140d", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `foo` before CopyPropagation\n-+ // MIR for `foo` after CopyPropagation\n+- // MIR for `foo` before DestinationPropagation\n++ // MIR for `foo` after DestinationPropagation\n   \n   fn foo(_1: u8) -> () {\n       debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:9:8: 9:13\n@@ -8,19 +8,23 @@\n       let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:11:15: 11:16\n   \n       bb0: {\n-          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n+-         StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n++         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n           StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:15: 11:16\n           _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:11:15: 11:16\n-          _1 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n+-         _2 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n++         _1 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n                                            // mir::Constant\n                                            // + span: $DIR/copy_propagation_arg.rs:11:9: 11:14\n                                            // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n           StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:16: 11:17\n-          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:11:5: 11:17\n-          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:11:16: 11:17\n+-         _1 = move _2;                    // scope 0 at $DIR/copy_propagation_arg.rs:11:5: 11:17\n+-         StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:16: 11:17\n++         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:11:5: 11:17\n++         nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:11:16: 11:17\n           _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:9:19: 12:2\n           return;                          // scope 0 at $DIR/copy_propagation_arg.rs:12:2: 12:2\n       }", "previous_filename": "src/test/mir-opt/copy_propagation_arg.foo.CopyPropagation.diff"}, {"sha": "b5188a8b4b2607ef68c07c62887d04831275be2c", "filename": "src/test/mir-opt/dest-prop/copy_propagation_arg.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ffeeb20398bb9a25c1f75599b942f57c85a2140d/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffeeb20398bb9a25c1f75599b942f57c85a2140d/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.rs?ref=ffeeb20398bb9a25c1f75599b942f57c85a2140d", "patch": "@@ -1,29 +1,29 @@\n-// Check that CopyPropagation does not propagate an assignment to a function argument\n+// Check that DestinationPropagation does not propagate an assignment to a function argument\n // (doing so can break usages of the original argument value)\n \n fn dummy(x: u8) -> u8 {\n     x\n }\n \n-// EMIT_MIR copy_propagation_arg.foo.CopyPropagation.diff\n+// EMIT_MIR copy_propagation_arg.foo.DestinationPropagation.diff\n fn foo(mut x: u8) {\n     // calling `dummy` to make an use of `x` that copyprop cannot eliminate\n     x = dummy(x); // this will assign a local to `x`\n }\n \n-// EMIT_MIR copy_propagation_arg.bar.CopyPropagation.diff\n+// EMIT_MIR copy_propagation_arg.bar.DestinationPropagation.diff\n fn bar(mut x: u8) {\n     dummy(x);\n     x = 5;\n }\n \n-// EMIT_MIR copy_propagation_arg.baz.CopyPropagation.diff\n+// EMIT_MIR copy_propagation_arg.baz.DestinationPropagation.diff\n fn baz(mut x: i32) {\n     // self-assignment to a function argument should be eliminated\n     x = x;\n }\n \n-// EMIT_MIR copy_propagation_arg.arg_src.CopyPropagation.diff\n+// EMIT_MIR copy_propagation_arg.arg_src.DestinationPropagation.diff\n fn arg_src(mut x: i32) -> i32 {\n     let y = x;\n     x = 123; // Don't propagate this assignment to `y`", "previous_filename": "src/test/mir-opt/copy_propagation_arg.rs"}, {"sha": "b822c58f550b7d8447fb25b10445aab2764f8cb4", "filename": "src/test/mir-opt/early_otherwise_branch_68867.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffeeb20398bb9a25c1f75599b942f57c85a2140d/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffeeb20398bb9a25c1f75599b942f57c85a2140d/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.rs?ref=ffeeb20398bb9a25c1f75599b942f57c85a2140d", "patch": "@@ -12,7 +12,7 @@ pub enum ViewportPercentageLength {\n }\n \n // EMIT_MIR early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff\n-// EMIT_MIR early_otherwise_branch_68867.try_sum EarlyOtherwiseBranch.before SimplifyBranches-after-copy-prop.after\n+// EMIT_MIR early_otherwise_branch_68867.try_sum EarlyOtherwiseBranch.before SimplifyBranches-final.after\n #[no_mangle]\n pub extern \"C\" fn try_sum(\n     x: &ViewportPercentageLength,"}, {"sha": "f51a08ed73068ade6eca6a0a03e6d1903420aa5b", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-final.after.diff", "status": "renamed", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ffeeb20398bb9a25c1f75599b942f57c85a2140d/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-final.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ffeeb20398bb9a25c1f75599b942f57c85a2140d/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-final.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-final.after.diff?ref=ffeeb20398bb9a25c1f75599b942f57c85a2140d", "patch": "@@ -1,5 +1,5 @@\n - // MIR for `try_sum` before EarlyOtherwiseBranch\n-+ // MIR for `try_sum` after SimplifyBranches-after-copy-prop\n++ // MIR for `try_sum` after SimplifyBranches-final\n   \n   fn try_sum(_1: &ViewportPercentageLength, _2: &ViewportPercentageLength) -> std::result::Result<ViewportPercentageLength, ()> {\n       debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch_68867.rs:18:5: 18:6\n@@ -68,21 +68,17 @@\n -         StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n -         StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:15: 22:16\n -         _5 = _1;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:15: 22:16\n--         StorageLive(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:18: 22:23\n--         _6 = _2;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:18: 22:23\n--         (_4.0: &ViewportPercentageLength) = move _5; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n--         (_4.1: &ViewportPercentageLength) = move _6; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n--         StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:23: 22:24\n--         StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:23: 22:24\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:15: 22:16\n +         (_4.0: &ViewportPercentageLength) = _1; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:15: 22:16\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:18: 22:23\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:18: 22:23\n+          StorageLive(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:18: 22:23\n+          _6 = _2;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:18: 22:23\n+-         (_4.0: &ViewportPercentageLength) = move _5; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n-+         (_4.1: &ViewportPercentageLength) = move _2; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:23: 22:24\n+          (_4.1: &ViewportPercentageLength) = move _6; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:14: 22:24\n+          StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:23: 22:24\n+-         StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:23: 22:24\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:23: 22:24\n           _11 = discriminant((*(_4.0: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18\n -         switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:11: 23:18", "previous_filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-after-copy-prop.after.diff"}]}