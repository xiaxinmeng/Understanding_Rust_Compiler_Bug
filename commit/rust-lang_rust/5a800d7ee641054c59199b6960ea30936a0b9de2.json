{"sha": "5a800d7ee641054c59199b6960ea30936a0b9de2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhODAwZDdlZTY0MTA1NGM1OTE5OWI2OTYwZWEzMDkzNmEwYjlkZTI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-12T19:36:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-12T19:36:56Z"}, "message": "Rollup merge of #69038 - yaahc:backtrace-debug, r=dtolnay\n\nAdd initial debug fmt for Backtrace\n\nFixes the first point in https://github.com/rust-lang/rust/issues/65280\n\nrelated to https://github.com/rust-lang/rust/issues/53487", "tree": {"sha": "c392660513d8323e89370e82799cc11668c6e31b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c392660513d8323e89370e82799cc11668c6e31b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a800d7ee641054c59199b6960ea30936a0b9de2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeRFPYCRBK7hj4Ov3rIwAAdHIIAG2JV1xBLvhDIpaUFam1TdrU\nDrF5oTDPzYGywjnSU9ZfGZ6OE3krPnArd+4jMoPjZtdfeqVYiy0XN1luO+Omuwmh\n2ua67/4p9u5h7igA+dbvbN0eM5Mh0a3Ex2S2nKJBHLyghjydJf1eN/m8BeTdzVKP\ni2A3aJXh4KHMn5p8ZNNxCmTsVAtTOZ6OU0QAD/u6h1StgIsAMX+ltvs3qNWzyGVu\nUAP/1jRFl7xQR5KRlAabaSP/LcPupI8NN842jhqB2aGTBu/1qv9lhp2k7kj3SV5r\nYJHMlxcYTVV19Q/Yy7LI2SWwrbtX1JOumvDwBvGZloISiVzvyLp90/sIAmetZjs=\n=d9ty\n-----END PGP SIGNATURE-----\n", "payload": "tree c392660513d8323e89370e82799cc11668c6e31b\nparent 29dd5df791bb70d6c5d3d1118c1289d4f3d51899\nparent ec8ee7fb81c208fbd0fe53f11b1c792f3e0d6c6f\nauthor Dylan DPC <dylan.dpc@gmail.com> 1581536216 +0100\ncommitter GitHub <noreply@github.com> 1581536216 +0100\n\nRollup merge of #69038 - yaahc:backtrace-debug, r=dtolnay\n\nAdd initial debug fmt for Backtrace\n\nFixes the first point in https://github.com/rust-lang/rust/issues/65280\n\nrelated to https://github.com/rust-lang/rust/issues/53487\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a800d7ee641054c59199b6960ea30936a0b9de2", "html_url": "https://github.com/rust-lang/rust/commit/5a800d7ee641054c59199b6960ea30936a0b9de2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a800d7ee641054c59199b6960ea30936a0b9de2/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29dd5df791bb70d6c5d3d1118c1289d4f3d51899", "url": "https://api.github.com/repos/rust-lang/rust/commits/29dd5df791bb70d6c5d3d1118c1289d4f3d51899", "html_url": "https://github.com/rust-lang/rust/commit/29dd5df791bb70d6c5d3d1118c1289d4f3d51899"}, {"sha": "ec8ee7fb81c208fbd0fe53f11b1c792f3e0d6c6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec8ee7fb81c208fbd0fe53f11b1c792f3e0d6c6f", "html_url": "https://github.com/rust-lang/rust/commit/ec8ee7fb81c208fbd0fe53f11b1c792f3e0d6c6f"}], "stats": {"total": 69, "additions": 63, "deletions": 6}, "files": [{"sha": "a1c9aa75d779a82e58e647d733752388fcb5b5b0", "filename": "src/libstd/backtrace.rs", "status": "modified", "additions": 63, "deletions": 6, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/5a800d7ee641054c59199b6960ea30936a0b9de2/src%2Flibstd%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a800d7ee641054c59199b6960ea30936a0b9de2/src%2Flibstd%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbacktrace.rs?ref=5a800d7ee641054c59199b6960ea30936a0b9de2", "patch": "@@ -159,6 +159,69 @@ enum BytesOrWide {\n     Wide(Vec<u16>),\n }\n \n+impl fmt::Debug for Backtrace {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let mut capture = match &self.inner {\n+            Inner::Unsupported => return fmt.write_str(\"unsupported backtrace\"),\n+            Inner::Disabled => return fmt.write_str(\"disabled backtrace\"),\n+            Inner::Captured(c) => c.lock().unwrap(),\n+        };\n+        capture.resolve();\n+\n+        let frames = &capture.frames[capture.actual_start..];\n+\n+        write!(fmt, \"Backtrace \")?;\n+\n+        let mut dbg = fmt.debug_list();\n+\n+        for frame in frames {\n+            if frame.frame.ip().is_null() {\n+                continue;\n+            }\n+\n+            dbg.entries(&frame.symbols);\n+        }\n+\n+        dbg.finish()\n+    }\n+}\n+\n+impl fmt::Debug for BacktraceSymbol {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(fmt, \"{{ \")?;\n+\n+        if let Some(fn_name) = self.name.as_ref().map(|b| backtrace::SymbolName::new(b)) {\n+            write!(fmt, \"fn: \\\"{:#}\\\"\", fn_name)?;\n+        } else {\n+            write!(fmt, \"fn: \\\"<unknown>\\\"\")?;\n+        }\n+\n+        if let Some(fname) = self.filename.as_ref() {\n+            write!(fmt, \", file: {:?}\", fname)?;\n+        }\n+\n+        if let Some(line) = self.lineno.as_ref() {\n+            write!(fmt, \", line: {:?}\", line)?;\n+        }\n+\n+        write!(fmt, \" }}\")\n+    }\n+}\n+\n+impl fmt::Debug for BytesOrWide {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        output_filename(\n+            fmt,\n+            match self {\n+                BytesOrWide::Bytes(w) => BytesOrWideString::Bytes(w),\n+                BytesOrWide::Wide(w) => BytesOrWideString::Wide(w),\n+            },\n+            backtrace::PrintFmt::Short,\n+            crate::env::current_dir().as_ref().ok(),\n+        )\n+    }\n+}\n+\n impl Backtrace {\n     /// Returns whether backtrace captures are enabled through environment\n     /// variables.\n@@ -267,12 +330,6 @@ impl Backtrace {\n }\n \n impl fmt::Display for Backtrace {\n-    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Debug::fmt(self, fmt)\n-    }\n-}\n-\n-impl fmt::Debug for Backtrace {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut capture = match &self.inner {\n             Inner::Unsupported => return fmt.write_str(\"unsupported backtrace\"),"}]}