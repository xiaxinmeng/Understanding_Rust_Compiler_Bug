{"sha": "dbe415a4a7c3e10eff6d9a4b08128c341742e401", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZTQxNWE0YTdjM2UxMGVmZjZkOWE0YjA4MTI4YzM0MTc0MmU0MDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-05T02:00:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-05T02:00:46Z"}, "message": "Auto merge of #27393 - alexcrichton:no-std-changes, r=brson\n\nThis commit is an implementation of [RFC 1184][rfc] which tweaks the behavior of\r\nthe `#![no_std]` attribute and adds a new `#![no_core]` attribute. The\r\n`#![no_std]` attribute now injects `extern crate core` at the top of the crate\r\nas well as the libcore prelude into all modules (in the same manner as the\r\nstandard library's prelude). The `#![no_core]` attribute disables both std and\r\ncore injection.\r\n\r\n[rfc]: https://github.com/rust-lang/rfcs/pull/1184\r\n\r\nCloses #27394", "tree": {"sha": "e1d3a1eac26b8adba127155b7c7d607dafe1908d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1d3a1eac26b8adba127155b7c7d607dafe1908d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbe415a4a7c3e10eff6d9a4b08128c341742e401", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbe415a4a7c3e10eff6d9a4b08128c341742e401", "html_url": "https://github.com/rust-lang/rust/commit/dbe415a4a7c3e10eff6d9a4b08128c341742e401", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbe415a4a7c3e10eff6d9a4b08128c341742e401/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efdbc0ec7e9bd8d2dadbe78b003fd7facf2a7aae", "url": "https://api.github.com/repos/rust-lang/rust/commits/efdbc0ec7e9bd8d2dadbe78b003fd7facf2a7aae", "html_url": "https://github.com/rust-lang/rust/commit/efdbc0ec7e9bd8d2dadbe78b003fd7facf2a7aae"}, {"sha": "0d8340327c03f319b49cb91e2e64aa66dd1e76c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d8340327c03f319b49cb91e2e64aa66dd1e76c7", "html_url": "https://github.com/rust-lang/rust/commit/0d8340327c03f319b49cb91e2e64aa66dd1e76c7"}], "stats": {"total": 917, "additions": 500, "deletions": 417}, "files": [{"sha": "1e59239701422a225e4f42a22a5fe5588fc94f7b", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -71,7 +71,8 @@\n \n use boxed::Box;\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use core::atomic;\n use core::atomic::Ordering::{Relaxed, Release, Acquire, SeqCst};"}, {"sha": "ab1a5ba90192ae3f7fdb775883d14da5ea533460", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -53,7 +53,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use heap;\n use raw_vec::RawVec;"}, {"sha": "6d251cae41d0c7bea5eaa65b5b995421604a3042", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -75,7 +75,6 @@\n #![feature(coerce_unsized)]\n #![feature(core)]\n #![feature(core_intrinsics)]\n-#![feature(core_prelude)]\n #![feature(core_slice_ext)]\n #![feature(custom_attribute)]\n #![feature(fundamental)]\n@@ -93,17 +92,17 @@\n #![feature(unsize)]\n #![feature(core_slice_ext)]\n #![feature(core_str_ext)]\n+#![cfg_attr(stage0, feature(core, core_prelude))]\n \n #![cfg_attr(test, feature(test, alloc, rustc_private, box_raw))]\n #![cfg_attr(all(not(feature = \"external_funcs\"), not(feature = \"external_crate\")),\n             feature(libc))]\n \n-#[macro_use]\n-extern crate core;\n-\n #[cfg(all(not(feature = \"external_funcs\"), not(feature = \"external_crate\")))]\n extern crate libc;\n \n+#[cfg(stage0)] #[macro_use] extern crate core;\n+\n // Allow testing this library\n \n #[cfg(test)] #[macro_use] extern crate std;"}, {"sha": "05fd36e8e7f874c6153833dcf6a855296f2869ad", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -150,7 +150,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n #[cfg(not(test))]\n use boxed::Box;"}, {"sha": "65a252aea497210376029f18cb86235fb2a2774d", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -151,7 +151,8 @@\n #![allow(missing_docs)]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use core::iter::{FromIterator};\n use core::mem::swap;"}, {"sha": "af33181c5d056c58b02ac74bdbf4aac467c1ab85", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -86,7 +86,8 @@\n //! println!(\"There are {} primes below {}\", num_primes, max_prime);\n //! ```\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use core::cmp::Ordering;\n use core::cmp;"}, {"sha": "9fa54c6ca2facc624f42d5fafe123e2f3104bbbc", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -17,7 +17,8 @@\n \n use self::Entry::*;\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use core::cmp::Ordering;\n use core::fmt::Debug;\n@@ -530,7 +531,8 @@ enum Continuation<A, B> {\n /// to nodes. By using this module much better safety guarantees can be made, and more search\n /// boilerplate gets cut out.\n mod stack {\n-    use core::prelude::*;\n+    #[cfg(stage0)]\n+    use core::prelude::v1::*;\n     use core::marker;\n     use core::mem;\n     use core::ops::{Deref, DerefMut};"}, {"sha": "b9cd73470b62b4aa46e066292c0a5b94eb17f1ce", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -16,7 +16,8 @@ pub use self::SearchResult::*;\n pub use self::ForceResult::*;\n pub use self::TraversalItem::*;\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use core::cmp::Ordering::{Greater, Less, Equal};\n use core::intrinsics::arith_offset;"}, {"sha": "b9430b2d003bbc7e27482412522c8d4bba96fa34", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -11,7 +11,8 @@\n // This is pretty much entirely stolen from TreeSet, since BTreeMap has an identical interface\n // to TreeMap\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use core::cmp::Ordering::{self, Less, Greater, Equal};\n use core::fmt::Debug;"}, {"sha": "e74726baf11af63acb6e01909fa426d1277dc3b0", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -17,7 +17,9 @@\n             reason = \"matches collection reform specification, \\\n                       waiting for dust to settle\")]\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n+\n use core::marker;\n use core::fmt;\n use core::iter::{FromIterator};"}, {"sha": "5fb28d67974e34d6d801ca17b9bbae5bdda18e51", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -33,9 +33,7 @@\n #![feature(alloc)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(core)]\n #![feature(core_intrinsics)]\n-#![feature(core_prelude)]\n #![feature(core_slice_ext)]\n #![feature(core_str_ext)]\n #![feature(heap_api)]\n@@ -62,12 +60,12 @@\n #![feature(utf8_error)]\n #![cfg_attr(test, feature(rand, test))]\n #![cfg_attr(not(test), feature(str_words))]\n+#![cfg_attr(stage0, feature(core, core_prelude))]\n \n #![feature(no_std)]\n #![no_std]\n \n-#[macro_use]\n-extern crate core;\n+#[cfg(stage0)] #[macro_use] extern crate core;\n \n extern crate rustc_unicode;\n extern crate alloc;"}, {"sha": "697cfea197c4bf3de809d9384415546dbff3ef35", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -21,7 +21,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use alloc::boxed::Box;\n use core::cmp::Ordering;"}, {"sha": "b323ab03ec6f367d51e2874c030f98b401a9e71e", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -12,7 +12,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use core::fmt;\n use core::hash;"}, {"sha": "9a29f6f9b8284dac87aae5e509ba6fb4877d2c1f", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -58,7 +58,9 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n+\n use alloc::raw_vec::RawVec;\n use alloc::boxed::Box;\n use alloc::heap::EMPTY;"}, {"sha": "b55436c7057d9ec39c2124f5e41d752453530678", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -18,7 +18,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use core::cmp::Ordering;\n use core::fmt;"}, {"sha": "8be80a67ce7626c1d234f3c002104f593cd54253", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -20,7 +20,8 @@\n \n use self::Entry::*;\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use core::cmp::{max, Ordering};\n use core::fmt;"}, {"sha": "39a067c16083f94da301192c2f4eb1284d59e280", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::*;\n+use prelude::v1::*;\n use fmt::{self, Write, FlagV1};\n \n struct PadAdapter<'a, 'b: 'a> {"}, {"sha": "668e2ecf1c637d6c7fdab346c317b90b1b17dd82", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -12,7 +12,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use prelude::*;\n+use prelude::v1::*;\n \n use cell::{Cell, RefCell, Ref, RefMut, BorrowState};\n use marker::PhantomData;"}, {"sha": "bffbb789f229aa5978dd4c7f683d20df3d07171d", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -12,7 +12,7 @@\n \n // FIXME: #6220 Implement floating point formatting\n \n-use prelude::*;\n+use prelude::v1::*;\n \n use fmt;\n use num::Zero;"}, {"sha": "34bc3b835a1b49d8f32e53d780cdbf267a37010d", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -62,7 +62,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use prelude::*;\n+use prelude::v1::*;\n \n use mem;\n \n@@ -183,7 +183,7 @@ pub fn hash<T: Hash, H: Hasher + Default>(value: &T) -> u64 {\n //////////////////////////////////////////////////////////////////////////////\n \n mod impls {\n-    use prelude::*;\n+    use prelude::v1::*;\n \n     use slice;\n     use super::*;"}, {"sha": "4dcd513a0d2d6be576626b095df716ea116a945d", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -10,8 +10,9 @@\n \n //! An implementation of SipHash 2-4.\n \n+use prelude::v1::*;\n+\n use ptr;\n-use prelude::*;\n use super::Hasher;\n \n /// An implementation of SipHash 2-4."}, {"sha": "56fb4c71a6a2dfd78bded3d4f1b8ae4f0e04b632", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -60,8 +60,10 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![doc(test(no_crate_inject))]\n \n-#![feature(no_std)]\n-#![no_std]\n+#![cfg_attr(stage0, feature(no_std))]\n+#![cfg_attr(stage0, no_std)]\n+#![cfg_attr(not(stage0), feature(no_core))]\n+#![cfg_attr(not(stage0), no_core)]\n #![allow(raw_pointer_derive)]\n #![deny(missing_docs)]\n \n@@ -168,6 +170,7 @@ mod tuple;\n // compiling the core library when it's compiling this library, so it expands\n // all references to `::core::$foo`\n #[doc(hidden)]\n+#[cfg(stage0)]\n mod core {\n     pub use intrinsics;     // derive(PartialOrd)\n     pub use fmt;            // format_args!"}, {"sha": "d0e6d4fa49ceab5f75b9d5f48eeeba8dfad0249c", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -15,7 +15,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use prelude::*;\n+use prelude::v1::*;\n \n use intrinsics;\n use mem;"}, {"sha": "bf7da04f995bc3cca296851846a5e3f29aba9695", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -15,7 +15,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use prelude::*;\n+use prelude::v1::*;\n \n use intrinsics;\n use mem;"}, {"sha": "1e39c53f9e06a6df417e695c7b2f23d100212609", "filename": "src/libcore/num/flt2dec/bignum.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Fnum%2Fflt2dec%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Fnum%2Fflt2dec%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fbignum.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -21,7 +21,8 @@\n \n #![macro_use]\n \n-use prelude::*;\n+use prelude::v1::*;\n+\n use mem;\n use intrinsics;\n \n@@ -351,7 +352,7 @@ define_bignum!(Big32x36: type=Digit32, n=36);\n // this one is used for testing only.\n #[doc(hidden)]\n pub mod tests {\n-    use prelude::*;\n+    use prelude::v1::*;\n     define_bignum!(Big8x3: type=u8, n=3);\n }\n "}, {"sha": "a292ffa2e9d782b20c52446f2ffce9870c484800", "filename": "src/libcore/num/flt2dec/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Fnum%2Fflt2dec%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Fnum%2Fflt2dec%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fdecoder.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -10,7 +10,7 @@\n \n //! Decodes a floating-point value into individual parts and error ranges.\n \n-use prelude::*;\n+use prelude::v1::*;\n \n use {f32, f64};\n use num::{Float, FpCategory};"}, {"sha": "40fa2a5563d133878b1937948e40bdf27239cab0", "filename": "src/libcore/num/flt2dec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -129,7 +129,7 @@ functions.\n #![unstable(feature = \"flt2dec\",\n             reason = \"internal routines only exposed for testing\")]\n \n-use prelude::*;\n+use prelude::v1::*;\n use i16;\n use num::Float;\n use slice::bytes;"}, {"sha": "b03286ddd0dc2b9a80fec549f3dd546860bde448", "filename": "src/libcore/num/flt2dec/strategy/dragon.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -15,7 +15,8 @@ Almost direct (but slightly optimized) Rust translation of Figure 3 of [1].\n     quickly and accurately. SIGPLAN Not. 31, 5 (May. 1996), 108-116.\n */\n \n-use prelude::*;\n+use prelude::v1::*;\n+\n use num::Float;\n use cmp::Ordering;\n "}, {"sha": "390920a354cfb6de1e1f8d57e53efc0a8cf2dbad", "filename": "src/libcore/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -16,7 +16,8 @@ Rust adaptation of Grisu3 algorithm described in [1]. It uses about\n     accurately with integers. SIGPLAN Not. 45, 6 (June 2010), 233-243.\n */\n \n-use prelude::*;\n+use prelude::v1::*;\n+\n use num::Float;\n \n use num::flt2dec::{Decoded, MAX_SIG_DIGITS, round_up};"}, {"sha": "b6c9361537813ce199d0cfbee4276ce1eaabce68", "filename": "src/libcore/prelude/mod.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude%2Fmod.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! The libcore prelude\n+\n+pub mod v1;"}, {"sha": "50dc9b7e0438920bc2455a722157e2cf8412f801", "filename": "src/libcore/prelude/v1.rs", "status": "renamed", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude%2Fv1.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -11,18 +11,8 @@\n //! The core prelude\n //!\n //! This module is intended for users of libcore which do not link to libstd as\n-//! well. This module is not imported by default, but using the entire contents\n-//! of this module will provide all of the useful traits and types in libcore\n-//! that one would expect from the standard library as well.\n-//!\n-//! There is no method to automatically inject this prelude, and this prelude is\n-//! a subset of the standard library's prelude.\n-//!\n-//! # Example\n-//!\n-//! ```ignore\n-//! use core::prelude::*;\n-//! ```\n+//! well. This module is imported by default when `#![no_std]` is used in the\n+//! same manner as the standard library's prelude.\n \n #![unstable(feature = \"core_prelude\",\n             reason = \"the libcore prelude has not been scrutinized and \\", "previous_filename": "src/libcore/prelude.rs"}, {"sha": "10ef689ba5d6b45343ccc2c567f08d36abed3f61", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -16,7 +16,8 @@\n #![unstable(feature = \"pattern\",\n             reason = \"API not fully fleshed out and ready to be stabilized\")]\n \n-use prelude::*;\n+use prelude::v1::*;\n+\n use cmp;\n use usize;\n "}, {"sha": "d895a3e62a32c48e12e32d9eab47727746b94771", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -14,7 +14,8 @@\n #![crate_type = \"rlib\"]\n #![cfg_attr(not(feature = \"cargo-build\"), unstable(feature = \"libc\",\n                                                    reason = \"use `libc` from crates.io\"))]\n-#![cfg_attr(not(feature = \"cargo-build\"), feature(staged_api, core, no_std))]\n+#![cfg_attr(not(feature = \"cargo-build\"), feature(staged_api, no_std))]\n+#![cfg_attr(all(not(feature = \"cargo-build\"), stage0), feature(core))]\n #![cfg_attr(not(feature = \"cargo-build\"), staged_api)]\n #![cfg_attr(not(feature = \"cargo-build\"), no_std)]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -78,7 +79,7 @@\n #![allow(bad_style, raw_pointer_derive)]\n #![cfg_attr(target_os = \"nacl\", allow(unused_imports))]\n #[cfg(feature = \"cargo-build\")] extern crate std as core;\n-#[cfg(not(feature = \"cargo-build\"))] extern crate core;\n+#[cfg(all(stage0, not(feature = \"cargo-build\")))] extern crate core;\n \n #[cfg(test)] extern crate std;\n #[cfg(test)] extern crate test;"}, {"sha": "51000ed166ba61dfdaba63dbbfb9ed729d021782", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -10,7 +10,9 @@\n \n //! The ChaCha random number generator.\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n+\n use {Rng, SeedableRng, Rand};\n \n const KEY_WORDS    : usize =  8; // 8 words for the 256-bit key"}, {"sha": "6f003b8b9adfe205c0b8935b2d6a7979139682ec", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -17,7 +17,9 @@\n //! internally. The `IndependentSample` trait is for generating values\n //! that do not need to record state.\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n+\n use core::num::Float;\n use core::marker::PhantomData;\n "}, {"sha": "52a5219a3803f0973185a2ba7985d5be33ec5670", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -12,7 +12,8 @@\n \n // this is surprisingly complicated to be both generic & correct\n \n-use core::prelude::PartialOrd;\n+#[cfg(stage0)]\n+use core::prelude::v1::PartialOrd;\n \n use Rng;\n use distributions::{Sample, IndependentSample};"}, {"sha": "6827d9c6f1376f853880adc92f001a262b174c6e", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -12,7 +12,9 @@\n \n #![allow(non_camel_case_types)]\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n+\n use core::slice;\n use core::iter::repeat;\n use core::num::Wrapping as w;"}, {"sha": "ace2c2fc21d4287133c75ebc907a396ba809bfdd", "filename": "src/librand/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -28,26 +28,26 @@\n #![staged_api]\n #![unstable(feature = \"rand\",\n             reason = \"use `rand` from crates.io\")]\n-#![feature(core)]\n #![feature(core_float)]\n-#![feature(core_prelude)]\n #![feature(core_slice_ext)]\n #![feature(no_std)]\n #![feature(num_bits_bytes)]\n #![feature(staged_api)]\n #![feature(step_by)]\n+#![cfg_attr(stage0, feature(core, core_prelude))]\n \n #![cfg_attr(test, feature(test, rand, rustc_private, iter_order))]\n \n #![allow(deprecated)]\n \n-#[macro_use]\n-extern crate core;\n+#[cfg(stage0)] #[macro_use] extern crate core;\n \n #[cfg(test)] #[macro_use] extern crate std;\n #[cfg(test)] #[macro_use] extern crate log;\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n+\n use core::marker::PhantomData;\n \n pub use isaac::{IsaacRng, Isaac64Rng};"}, {"sha": "3db98cfe2f4f6fafa31ce0d366b1240c8a29daca", "filename": "src/librand/rand_impls.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibrand%2Frand_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibrand%2Frand_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Frand_impls.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -10,7 +10,9 @@\n \n //! The implementations of `Rand` for the built-in types.\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n+\n use core::char;\n use core::isize;\n use core::usize;"}, {"sha": "6fe7dd0985496144cbf9211fa2b016e52961cea0", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -11,7 +11,8 @@\n //! A wrapper around another RNG that reseeds it after it\n //! generates a certain number of random bytes.\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use {Rng, SeedableRng};\n "}, {"sha": "59baa638bfe64039e5e1ff02b5d3acb923befcec", "filename": "src/librustc_bitflags/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibrustc_bitflags%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibrustc_bitflags%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2Flib.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -290,13 +290,6 @@ macro_rules! bitflags {\n     };\n }\n \n-// This is a no_std crate. So the test code's invocation of #[derive] etc, via\n-// bitflags!, will use names from the underlying crates.\n-#[cfg(test)]\n-mod core {\n-    pub use std::{fmt, hash, clone, cmp, marker, option};\n-}\n-\n #[cfg(test)]\n #[allow(non_upper_case_globals)]\n mod tests {"}, {"sha": "7d50395aca3af55988a52f5a6f0048f1610d6fed", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -46,7 +46,7 @@ struct RH<'a> {\n     sub: &'a [RH<'a>]\n }\n \n-const EMPTY_SOURCE_STR: &'static str = \"#![feature(no_std)] #![no_std]\";\n+const EMPTY_SOURCE_STR: &'static str = \"#![feature(no_core)] #![no_core]\";\n \n struct ExpectErrorEmitter {\n     messages: Vec<String>"}, {"sha": "3a69430d0782270ada30779bceda20a2b6f9c8e5", "filename": "src/librustc_unicode/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibrustc_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibrustc_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Flib.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -33,17 +33,16 @@\n        test(no_crate_inject))]\n #![no_std]\n \n-#![feature(core)]\n #![feature(core_char_ext)]\n-#![feature(core_prelude)]\n #![feature(core_slice_ext)]\n #![feature(core_str_ext)]\n #![feature(iter_arith)]\n #![feature(lang_items)]\n #![feature(no_std)]\n #![feature(staged_api)]\n+#![cfg_attr(stage0, feature(core, core_prelude))]\n \n-extern crate core;\n+#[cfg(stage0)] extern crate core;\n \n mod normalize;\n mod tables;"}, {"sha": "95214fe2db389d3773589c4e925a388eb441e635", "filename": "src/librustc_unicode/u_str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibrustc_unicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibrustc_unicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fu_str.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -14,7 +14,8 @@\n //! unicode parts of the CharExt trait.\n \n use self::GraphemeState::*;\n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use core::char;\n use core::cmp;"}, {"sha": "47b8230e43029fab3d98dd38a062997852157446", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -32,7 +32,8 @@\n #![unstable(feature = \"os_str\",\n             reason = \"recently added as part of path/io reform\")]\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use borrow::{Borrow, Cow, ToOwned};\n use ffi::CString;"}, {"sha": "62490bb9d08a922079108037a3b5f31415b282fd", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -17,7 +17,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use fmt;\n use ffi::OsString;"}, {"sha": "8033d77ff6a4a8bcd47cdfff68ec2eabeb38c026", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -292,7 +292,8 @@ impl Write for Cursor<Vec<u8>> {\n \n #[cfg(test)]\n mod tests {\n-    use core::prelude::*;\n+    #[cfg(stage0)]\n+    use core::prelude::v1::*;\n \n     use io::prelude::*;\n     use io::{Cursor, SeekFrom};"}, {"sha": "864870a5905717824b937274f3b7500914674158", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use boxed::Box;\n use cmp;"}, {"sha": "38e4b0d03e7c660ae5997b18bfccb71a42d72fe0", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -10,6 +10,7 @@\n \n #![allow(missing_copy_implementations)]\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n use io::{self, Read, Write, ErrorKind, BufRead};"}, {"sha": "7baa7558e52d57fb9fdf9ce0c3e69a0a38f607c0", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -213,7 +213,6 @@\n #![feature(core)]\n #![feature(core_float)]\n #![feature(core_intrinsics)]\n-#![feature(core_prelude)]\n #![feature(core_simd)]\n #![feature(drain)]\n #![feature(fnbox)]\n@@ -250,20 +249,25 @@\n #![cfg_attr(test, feature(float_from_str_radix, range_inclusive, float_extras, hash_default))]\n #![cfg_attr(test, feature(test, rustc_private, float_consts))]\n #![cfg_attr(target_env = \"msvc\", feature(link_args))]\n+#![cfg_attr(stage0, feature(core, core_prelude))]\n \n // Don't link to std. We are std.\n #![no_std]\n \n #![allow(trivial_casts)]\n #![deny(missing_docs)]\n \n+#[cfg(stage0)] #[macro_use] extern crate core;\n+\n #[cfg(test)] extern crate test;\n #[cfg(test)] #[macro_use] extern crate log;\n \n-#[macro_use]\n+// We want to reexport a few macros from core but libcore has already been\n+// imported by the compiler (via our #[no_std] attribute) In this case we just\n+// add a new crate name so we can attach the reexports to it.\n #[macro_reexport(assert, assert_eq, debug_assert, debug_assert_eq,\n     unreachable, unimplemented, write, writeln)]\n-extern crate core;\n+extern crate core as __core;\n \n #[macro_use]\n #[macro_reexport(vec, format)]\n@@ -410,11 +414,3 @@ pub mod __rand {\n // the rustdoc documentation for primitive types. Using `include!`\n // because rustdoc only looks for these modules at the crate level.\n include!(\"primitive_docs.rs\");\n-\n-// The expansion of --test has a few references to `::std::$foo` so this module\n-// is necessary to get things to compile.\n-#[cfg(test)]\n-mod std {\n-    pub use option;\n-    pub use realstd::env;\n-}"}, {"sha": "290aa6e2fdac6e21fcd9cd80a4d85e24ed4cc230", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -11,6 +11,7 @@\n #![unstable(feature = \"udp\", reason = \"remaining functions have not been \\\n                                        scrutinized enough to be stabilized\")]\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n use fmt;"}, {"sha": "64da75e94db9c5215c5187a3843508b3e15e66ae", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -15,6 +15,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n use core::num;"}, {"sha": "fcba821522e7dcb19a2b34771d19f471517477b1", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -15,6 +15,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n use core::num;"}, {"sha": "db7fd463e07ad5da26a1c769c989d6df0f39a995", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -43,7 +43,8 @@ pub fn test_num<T>(ten: T, two: T) where\n \n #[cfg(test)]\n mod tests {\n-    use core::prelude::*;\n+    #[cfg(stage0)]\n+    use core::prelude::v1::*;\n     use super::*;\n     use i8;\n     use i16;"}, {"sha": "4a4db61c3b96f752295e67756135fb6681cdbf36", "filename": "src/libstd/path.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -98,7 +98,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use ascii::*;\n use borrow::{Borrow, IntoCow, ToOwned, Cow};\n@@ -134,7 +135,8 @@ use self::platform::{is_sep_byte, is_verbatim_sep, MAIN_SEP_STR, parse_prefix};\n #[cfg(unix)]\n mod platform {\n     use super::Prefix;\n-    use core::prelude::*;\n+    #[cfg(stage0)]\n+    use core::prelude::v1::*;\n     use ffi::OsStr;\n \n     #[inline]\n@@ -157,7 +159,8 @@ mod platform {\n \n #[cfg(windows)]\n mod platform {\n-    use core::prelude::*;\n+    #[cfg(stage0)]\n+    use core::prelude::v1::*;\n     use ascii::*;\n \n     use super::{os_str_as_u8_slice, u8_slice_as_os_str, Prefix};\n@@ -1747,7 +1750,8 @@ impl AsRef<Path> for PathBuf {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use core::prelude::*;\n+    #[cfg(stage0)]\n+    use core::prelude::v1::*;\n     use string::{ToString, String};\n     use vec::Vec;\n "}, {"sha": "be921d9aef08cf0f5a9ee8494cef70f9dda94f31", "filename": "src/libstd/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -815,7 +815,7 @@ mod tests {\n     #[cfg(target_os=\"android\")]\n     #[test]\n     fn test_inherit_env() {\n-        use std::env;\n+        use env;\n \n         let mut result = env_cmd().output().unwrap();\n         let output = String::from_utf8(result.stdout).unwrap();"}, {"sha": "df9cd98084bf26b4bd222d85720b0a080170be7e", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -57,6 +57,7 @@\n \n #![unstable(feature = \"rand\")]\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n use cell::RefCell;"}, {"sha": "9ae9455848e59d8f1f246350a9940cc5b38a58e3", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -15,7 +15,7 @@ pub use self::imp::OsRng;\n \n #[cfg(all(unix, not(target_os = \"ios\")))]\n mod imp {\n-    use prelude::v1::*;\n+    #[cfg(stage0)] use prelude::v1::*;\n     use self::OsRngInner::*;\n \n     use fs::File;\n@@ -251,6 +251,7 @@ mod imp {\n \n #[cfg(windows)]\n mod imp {\n+    #[cfg(stage0)]\n     use prelude::v1::*;\n \n     use io;"}, {"sha": "665f423c3f1f6c05702e5e64a0e4cf6cca3cd99b", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -12,7 +12,7 @@\n \n #![allow(dead_code)]\n \n-use prelude::v1::*;\n+#[cfg(stage0)] use prelude::v1::*;\n use io::prelude::*;\n use rand::Rng;\n "}, {"sha": "e77a2bbd0b9028881bd24235924369d86e5f1136", "filename": "src/libstd/rt/args.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -19,7 +19,8 @@\n //!\n //! FIXME #7756: Would be nice for this to not exist.\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n use vec::Vec;\n \n /// One-time global initialization.\n@@ -140,7 +141,8 @@ mod imp {\n           target_os = \"ios\",\n           target_os = \"windows\"))]\n mod imp {\n-    use core::prelude::*;\n+    #[cfg(stage0)]\n+    use core::prelude::v1::*;\n     use vec::Vec;\n \n     pub unsafe fn init(_argc: isize, _argv: *const *const u8) {"}, {"sha": "18d93cba8bc0393a4b25e0055310f85664e12c3f", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -12,6 +12,7 @@\n \n #![allow(non_camel_case_types)]\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n use env;"}, {"sha": "d0314da19d32ad37c3e45cedc74a2a8f61dfe081", "filename": "src/libstd/sync/future.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ffuture.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -39,7 +39,8 @@\n                         outside in crates.io first\")]\n #![allow(deprecated)]\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n use core::mem::replace;\n \n use boxed::Box;"}, {"sha": "954edefcc4581e521e44709eac9a5d57f3dd4f30", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -265,6 +265,7 @@\n // And now that you've seen all the races that I found and attempted to fix,\n // here's the code for you to find some more!\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n use sync::Arc;"}, {"sha": "f45032d327fe920ce6eef04ffc783ac687f5f0fb", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -40,7 +40,8 @@\n \n pub use self::PopResult::*;\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use alloc::boxed::Box;\n use core::ptr;"}, {"sha": "b84cb3b54728582f630bade034668acd56457094", "filename": "src/libstd/sync/mpsc/oneshot.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -37,7 +37,8 @@ pub use self::UpgradeResult::*;\n pub use self::SelectionResult::*;\n use self::MyUpgrade::*;\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use sync::mpsc::Receiver;\n use sync::mpsc::blocking::{self, SignalToken};"}, {"sha": "1d31ac165f637cf0ee8adedbc4a60f4aef18d14e", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -57,7 +57,8 @@\n                       but no guarantees beyond this are being made\")]\n \n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use core::cell::{Cell, UnsafeCell};\n use core::marker;"}, {"sha": "8c019395d30102449a3f871235338a25faf2298d", "filename": "src/libstd/sync/mpsc/shared.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -20,7 +20,8 @@\n \n pub use self::Failure::*;\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use core::cmp;\n use core::isize;"}, {"sha": "5c0db521007e1304e01fc159e8946d24071c007c", "filename": "src/libstd/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -33,7 +33,8 @@\n //! concurrently between two threads. This data structure is safe to use and\n //! enforces the semantics that there is one pusher and one popper.\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use alloc::boxed::Box;\n use core::ptr;"}, {"sha": "a9514da469823582b5a2bc428db7233ef2fcc989", "filename": "src/libstd/sync/mpsc/stream.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -22,7 +22,8 @@ pub use self::UpgradeResult::*;\n pub use self::SelectionResult::*;\n use self::Message::*;\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use core::cmp;\n use core::isize;"}, {"sha": "7c9298fff2a8676feb2e80de0a974e94fe630810", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -33,7 +33,8 @@\n /// of a synchronous channel. There are a few branches for the unbuffered case,\n /// but they're mostly just relevant to blocking senders.\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n pub use self::Failure::*;\n use self::Blocker::*;"}, {"sha": "53191e14bec683876c6454a0c769c71f3af23861", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -13,6 +13,7 @@\n //! This primitive is meant to be used to run one-time initialization. An\n //! example use case would be for initializing an FFI library.\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n use isize;"}, {"sha": "17953d0af4e2c8be1c36e4d376903ec8dd7d02fc", "filename": "src/libstd/sys/common/backtrace.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n use io::prelude::*;\n "}, {"sha": "b205b6df4cb0155fa2dacaf4ceb4e4adfc00960c", "filename": "src/libstd/sys/common/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -10,6 +10,7 @@\n \n #![allow(missing_docs)]\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n pub mod backtrace;"}, {"sha": "196fe37d456e9e5046cde78e469a4d90a3016ef8", "filename": "src/libstd/sys/common/poison.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n use cell::Cell;"}, {"sha": "fb4e0ec70e028212a277163beaf495a960b2bc92", "filename": "src/libstd/sys/common/thread_info.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -10,7 +10,8 @@\n \n #![allow(dead_code)] // stack_guard isn't used right now on all platforms\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use cell::RefCell;\n use string::String;"}, {"sha": "2269a053874105925b87793fa9db035b5ec9bd85", "filename": "src/libstd/sys/common/thread_local.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -58,6 +58,7 @@\n #![unstable(feature = \"thread_local_internals\")]\n #![allow(dead_code)] // sys isn't exported yet\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n use sync::atomic::{self, AtomicUsize, Ordering};"}, {"sha": "0a5f4563dea4edc217d8f3316ac4da52f70e2f1b", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -25,7 +25,8 @@\n // unix (it's mostly used on windows), so don't worry about dead code here.\n #![allow(dead_code)]\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use core::char::{encode_utf8_raw, encode_utf16_raw};\n use core::str::next_code_point;"}, {"sha": "ae8bfb07aaf1e3b360d664493d83ea0c72165e22", "filename": "src/libstd/sys/unix/backtrace.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -83,6 +83,7 @@\n /// to symbols. This is a bit of a hokey implementation as-is, but it works for\n /// all unix platforms we support right now, so it at least gets the job done.\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n use io::prelude::*;\n "}, {"sha": "9dd8df7524dc09150022d786124fcc1fc280a40d", "filename": "src/libstd/sys/unix/condvar.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n use cell::UnsafeCell;"}, {"sha": "dca7f6e829f7b4948f20bcf1fb7f01e361d3a0d7", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -12,6 +12,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n use fs::{self, Permissions, OpenOptions};"}, {"sha": "e984c577935000d2f1bebf2eeeaf701220eac2c1", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -14,6 +14,7 @@\n \n use os::unix::raw::{uid_t, gid_t};\n use os::unix::io::{FromRawFd, RawFd, AsRawFd, IntoRawFd};\n+#[cfg(stage0)]\n use prelude::v1::*;\n use process;\n use sys;"}, {"sha": "bdbe120f79d0dd34a0ba21f8d5206eeb39d8060f", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use io;\n use libc::{self, c_int, size_t, c_void};"}, {"sha": "ddab24b133fb7c85fbd9b09cfd16e3dfa05819e1", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n use io::prelude::*;\n use os::unix::prelude::*;\n "}, {"sha": "85dc87524432679bdf3047fd0ab7f1aa20069e4c", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -11,6 +11,7 @@\n #![allow(missing_docs)]\n #![allow(non_camel_case_types)]\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n use io::{self, ErrorKind};"}, {"sha": "a6132b37a663b3a1bd5a0debc5d647a36ad0d36b", "filename": "src/libstd/sys/unix/mutex.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n use cell::UnsafeCell;"}, {"sha": "e21d88676e739303c571fc56f979a76e2d502aa2", "filename": "src/libstd/sys/unix/os_str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -11,7 +11,8 @@\n /// The underlying OsString/OsStr implementation on Unix systems: just\n /// a `Vec<u8>`/`[u8]`.\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use borrow::Cow;\n use fmt::{self, Debug};"}, {"sha": "2abd74bea1be19dd70ed948ddaa42644b41575f4", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n use sys::fd::FileDesc;"}, {"sha": "50b4907e6caec55e828ddf512ba523cbbfd481a9", "filename": "src/libstd/sys/unix/rwlock.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n use libc;"}, {"sha": "ed4e50735a611db53ebb013cd3bf35b8d8205470", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n+\n use libc;\n-use core::prelude::*;\n use self::imp::{make_handler, drop_handler};\n \n pub use self::imp::{init, cleanup};"}, {"sha": "8542c660c26b980f1c4602fa799aee05782e509d", "filename": "src/libstd/sys/unix/stdio.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n use io;"}, {"sha": "67ecd4d922980f1fb5e356893ff396a1ef527566", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -166,6 +166,7 @@ impl Drop for Thread {\n           not(target_os = \"netbsd\"),\n           not(target_os = \"openbsd\")))]\n pub mod guard {\n+    #[cfg(stage0)]\n     use prelude::v1::*;\n \n     pub unsafe fn current() -> Option<usize> { None }"}, {"sha": "5626446b31c1af77fec43ac6d676064dc86f7ae1", "filename": "src/libstd/sys/unix/thread_local.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Funix%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread_local.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -10,6 +10,7 @@\n \n #![allow(dead_code)] // sys isn't exported yet\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n use libc::c_int;\n "}, {"sha": "d84513c5f95a3dd4074f5fcc5a90d330ae762abc", "filename": "src/libstd/sys/windows/backtrace.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -24,6 +24,7 @@\n \n #![allow(dead_code)]\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n use io::prelude::*;\n "}, {"sha": "f3edcfd420c7db0eb6661a8cce0e13fdedfe1647", "filename": "src/libstd/sys/windows/condvar.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n use cell::UnsafeCell;"}, {"sha": "e15d1f0ec153d9070da6ca7558fc0b0e445d5906", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -12,6 +12,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n use fs::{OpenOptions, Metadata};"}, {"sha": "8d81d6576ffb417f5186d8082df4d3ce2ac29d9a", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n use io::prelude::*;\n use os::windows::prelude::*;\n "}, {"sha": "91fe131c251a23292ae5b7e0e1e0812609971347", "filename": "src/libstd/sys/windows/handle.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n use io::ErrorKind;"}, {"sha": "f2aca8d1a6e3d791bedfc2a04cb9178a9ce2c3d5", "filename": "src/libstd/sys/windows/net.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n use io;"}, {"sha": "4044c429d49a5b71bac995533b61a44389ee9fd7", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n use io;"}, {"sha": "010ffe76fbad822ea7c3cd6fa4ba3c66d1e356c3", "filename": "src/libstd/sys/windows/rwlock.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fwindows%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fwindows%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Frwlock.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n use cell::UnsafeCell;"}, {"sha": "bc8ee6619f1348cf508c997f292d674a8b7ef503", "filename": "src/libstd/sys/windows/stack_overflow.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fwindows%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fwindows%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstack_overflow.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n+#[cfg(stage0)]\n+use core::prelude::v1::*;\n \n use libc::types::os::arch::extra::{LPVOID, DWORD, LONG};\n use libc;"}, {"sha": "15df5d756be545454aaac52d0e6c6bcc7a12c055", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -86,6 +86,7 @@ impl Thread {\n }\n \n pub mod guard {\n+    #[cfg(stage0)]\n     use prelude::v1::*;\n \n     pub unsafe fn current() -> Option<usize> { None }"}, {"sha": "0615033736e90c5136199dfd186f43bdd1d100b1", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -12,6 +12,7 @@\n \n #![unstable(feature = \"thread_local_internals\")]\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n use cell::UnsafeCell;\n@@ -271,6 +272,7 @@ impl<T: 'static> LocalKey<T> {\n           not(no_elf_tls)))]\n #[doc(hidden)]\n mod imp {\n+    #[cfg(stage0)]\n     use prelude::v1::*;\n \n     use cell::{Cell, UnsafeCell};\n@@ -327,6 +329,7 @@ mod imp {\n     // Due to rust-lang/rust#18804, make sure this is not generic!\n     #[cfg(target_os = \"linux\")]\n     unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern fn(*mut u8)) {\n+        use prelude::v1::*;\n         use mem;\n         use libc;\n         use sys_common::thread_local as os;"}, {"sha": "1ea33a017919a3fb21b971dbe5550780315d9edd", "filename": "src/libstd/thread/scoped_tls.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fscoped_tls.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -42,6 +42,7 @@\n \n #![unstable(feature = \"thread_local_internals\")]\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n #[doc(hidden)]\n@@ -249,6 +250,7 @@ mod imp {\n           no_elf_tls))]\n #[doc(hidden)]\n mod imp {\n+    #[cfg(stage0)]\n     use prelude::v1::*;\n \n     use cell::Cell;\n@@ -278,6 +280,7 @@ mod imp {\n #[cfg(test)]\n mod tests {\n     use cell::Cell;\n+    #[cfg(stage0)]\n     use prelude::v1::*;\n \n     scoped_thread_local!(static FOO: u32);"}, {"sha": "28eaed40da802e70d8b61f118950862fa4e1fb28", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -12,6 +12,7 @@\n \n #![unstable(feature = \"duration\", reason = \"recently added API per RFC 1040\")]\n \n+#[cfg(stage0)]\n use prelude::v1::*;\n \n use fmt;"}, {"sha": "b2cff3ed53c405503a2acee8ec4c319ba9636d97", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -611,7 +611,7 @@ pub struct ExtCtxt<'a> {\n     pub cfg: ast::CrateConfig,\n     pub backtrace: ExpnId,\n     pub ecfg: expand::ExpansionConfig<'a>,\n-    pub use_std: bool,\n+    pub crate_root: Option<&'static str>,\n \n     pub mod_path: Vec<ast::Ident> ,\n     pub exported_macros: Vec<ast::MacroDef>,\n@@ -630,7 +630,7 @@ impl<'a> ExtCtxt<'a> {\n             backtrace: NO_EXPANSION,\n             mod_path: Vec::new(),\n             ecfg: ecfg,\n-            use_std: true,\n+            crate_root: None,\n             exported_macros: Vec::new(),\n             syntax_env: env,\n             recursion_count: 0,\n@@ -805,8 +805,13 @@ impl<'a> ExtCtxt<'a> {\n     pub fn ident_of(&self, st: &str) -> ast::Ident {\n         str_to_ident(st)\n     }\n-    pub fn ident_of_std(&self, st: &str) -> ast::Ident {\n-        self.ident_of(if self.use_std { \"std\" } else { st })\n+    pub fn std_path(&self, components: &[&str]) -> Vec<ast::Ident> {\n+        let mut v = Vec::new();\n+        if let Some(s) = self.crate_root {\n+            v.push(self.ident_of(s));\n+        }\n+        v.extend(components.iter().map(|s| self.ident_of(s)));\n+        return v\n     }\n     pub fn name_of(&self, st: &str) -> ast::Name {\n         token::intern(st)"}, {"sha": "2061165abd2244fc627093c6d57373af6da869e8", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 14, "deletions": 66, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -437,11 +437,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.ty_path(\n             self.path_all(DUMMY_SP,\n                           true,\n-                          vec!(\n-                              self.ident_of_std(\"core\"),\n-                              self.ident_of(\"option\"),\n-                              self.ident_of(\"Option\")\n-                          ),\n+                          self.std_path(&[\"option\", \"Option\"]),\n                           Vec::new(),\n                           vec!( ty ),\n                           Vec::new()))\n@@ -713,11 +709,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr(sp, ast::ExprVec(exprs))\n     }\n     fn expr_vec_ng(&self, sp: Span) -> P<ast::Expr> {\n-        self.expr_call_global(sp,\n-                              vec!(self.ident_of_std(\"collections\"),\n-                                   self.ident_of(\"vec\"),\n-                                   self.ident_of(\"Vec\"),\n-                                   self.ident_of(\"new\")),\n+        self.expr_call_global(sp, self.std_path(&[\"vec\", \"Vec\", \"new\"]),\n                               Vec::new())\n     }\n     fn expr_vec_slice(&self, sp: Span, exprs: Vec<P<ast::Expr>>) -> P<ast::Expr> {\n@@ -733,20 +725,13 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n \n     fn expr_some(&self, sp: Span, expr: P<ast::Expr>) -> P<ast::Expr> {\n-        let some = vec!(\n-            self.ident_of_std(\"core\"),\n-            self.ident_of(\"option\"),\n-            self.ident_of(\"Option\"),\n-            self.ident_of(\"Some\"));\n+        let some = self.std_path(&[\"option\", \"Option\", \"Some\"]);\n         self.expr_call_global(sp, some, vec!(expr))\n     }\n \n     fn expr_none(&self, sp: Span) -> P<ast::Expr> {\n-        let none = self.path_global(sp, vec!(\n-            self.ident_of_std(\"core\"),\n-            self.ident_of(\"option\"),\n-            self.ident_of(\"Option\"),\n-            self.ident_of(\"None\")));\n+        let none = self.std_path(&[\"option\", \"Option\", \"None\"]);\n+        let none = self.path_global(sp, none);\n         self.expr_path(none)\n     }\n \n@@ -769,10 +754,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         let expr_file_line_ptr = self.expr_addr_of(span, expr_file_line_tuple);\n         self.expr_call_global(\n             span,\n-            vec!(\n-                self.ident_of_std(\"core\"),\n-                self.ident_of(\"rt\"),\n-                self.ident_of(\"begin_unwind\")),\n+            self.std_path(&[\"rt\", \"begin_unwind\"]),\n             vec!(\n                 self.expr_str(span, msg),\n                 expr_file_line_ptr))\n@@ -785,37 +767,19 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn expr_ok(&self, sp: Span, expr: P<ast::Expr>) -> P<ast::Expr> {\n-        let ok = vec!(\n-            self.ident_of_std(\"core\"),\n-            self.ident_of(\"result\"),\n-            self.ident_of(\"Result\"),\n-            self.ident_of(\"Ok\"));\n+        let ok = self.std_path(&[\"result\", \"Result\", \"Ok\"]);\n         self.expr_call_global(sp, ok, vec!(expr))\n     }\n \n     fn expr_err(&self, sp: Span, expr: P<ast::Expr>) -> P<ast::Expr> {\n-        let err = vec!(\n-            self.ident_of_std(\"core\"),\n-            self.ident_of(\"result\"),\n-            self.ident_of(\"Result\"),\n-            self.ident_of(\"Err\"));\n+        let err = self.std_path(&[\"result\", \"Result\", \"Err\"]);\n         self.expr_call_global(sp, err, vec!(expr))\n     }\n \n     fn expr_try(&self, sp: Span, head: P<ast::Expr>) -> P<ast::Expr> {\n-        let ok = vec![\n-            self.ident_of_std(\"core\"),\n-            self.ident_of(\"result\"),\n-            self.ident_of(\"Result\"),\n-            self.ident_of(\"Ok\")\n-        ];\n+        let ok = self.std_path(&[\"result\", \"Result\", \"Ok\"]);\n         let ok_path = self.path_global(sp, ok);\n-        let err = vec![\n-            self.ident_of_std(\"core\"),\n-            self.ident_of(\"result\"),\n-            self.ident_of(\"Result\"),\n-            self.ident_of(\"Err\")\n-        ];\n+        let err = self.std_path(&[\"result\", \"Result\", \"Err\"]);\n         let err_path = self.path_global(sp, err);\n \n         let binding_variable = self.ident_of(\"__try_var\");\n@@ -876,41 +840,25 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn pat_some(&self, span: Span, pat: P<ast::Pat>) -> P<ast::Pat> {\n-        let some = vec!(\n-            self.ident_of_std(\"core\"),\n-            self.ident_of(\"option\"),\n-            self.ident_of(\"Option\"),\n-            self.ident_of(\"Some\"));\n+        let some = self.std_path(&[\"option\", \"Option\", \"Some\"]);\n         let path = self.path_global(span, some);\n         self.pat_enum(span, path, vec!(pat))\n     }\n \n     fn pat_none(&self, span: Span) -> P<ast::Pat> {\n-        let some = vec!(\n-            self.ident_of_std(\"core\"),\n-            self.ident_of(\"option\"),\n-            self.ident_of(\"Option\"),\n-            self.ident_of(\"None\"));\n+        let some = self.std_path(&[\"option\", \"Option\", \"None\"]);\n         let path = self.path_global(span, some);\n         self.pat_enum(span, path, vec!())\n     }\n \n     fn pat_ok(&self, span: Span, pat: P<ast::Pat>) -> P<ast::Pat> {\n-        let some = vec!(\n-            self.ident_of_std(\"core\"),\n-            self.ident_of(\"result\"),\n-            self.ident_of(\"Result\"),\n-            self.ident_of(\"Ok\"));\n+        let some = self.std_path(&[\"result\", \"Result\", \"Ok\"]);\n         let path = self.path_global(span, some);\n         self.pat_enum(span, path, vec!(pat))\n     }\n \n     fn pat_err(&self, span: Span, pat: P<ast::Pat>) -> P<ast::Pat> {\n-        let some = vec!(\n-            self.ident_of_std(\"core\"),\n-            self.ident_of(\"result\"),\n-            self.ident_of(\"Result\"),\n-            self.ident_of(\"Err\"));\n+        let some = self.std_path(&[\"result\", \"Result\", \"Err\"]);\n         let path = self.path_global(span, some);\n         self.pat_enum(span, path, vec!(pat))\n     }"}, {"sha": "71b6184390a075331dd0be4ad098f9ac0b2bcaea", "filename": "src/libsyntax/ext/deriving/bounds.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -29,11 +29,10 @@ pub fn expand_deriving_copy(cx: &mut ExtCtxt,\n                             item: &Annotatable,\n                             push: &mut FnMut(Annotatable))\n {\n-    let path = Path::new(vec![\n-        if cx.use_std { \"std\" } else { \"core\" },\n-        \"marker\",\n-        \"Copy\",\n-    ]);\n+    let mut v = cx.crate_root.map(|s| vec![s]).unwrap_or(Vec::new());\n+    v.push(\"marker\");\n+    v.push(\"Copy\");\n+    let path = Path::new(v);\n \n     let trait_def = TraitDef {\n         span: span,"}, {"sha": "9261c0162c7a53e859ca336df8e8ea7ae8245920", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -57,12 +57,7 @@ fn cs_clone(\n     substr: &Substructure) -> P<Expr> {\n     let ctor_path;\n     let all_fields;\n-    let fn_path = vec![\n-        cx.ident_of_std(\"core\"),\n-        cx.ident_of(\"clone\"),\n-        cx.ident_of(\"Clone\"),\n-        cx.ident_of(\"clone\"),\n-    ];\n+    let fn_path = cx.std_path(&[\"clone\", \"Clone\", \"clone\"]);\n     let subcall = |field: &FieldInfo| {\n         let args = vec![cx.expr_addr_of(field.span, field.self_.clone())];\n "}, {"sha": "815448ac6104a821dcd1c3d7fee633d7d2806cec", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -65,17 +65,9 @@ pub fn cs_cmp(cx: &mut ExtCtxt, span: Span,\n               substr: &Substructure) -> P<Expr> {\n     let test_id = cx.ident_of(\"__test\");\n     let equals_path = cx.path_global(span,\n-                                     vec!(cx.ident_of_std(\"core\"),\n-                                          cx.ident_of(\"cmp\"),\n-                                          cx.ident_of(\"Ordering\"),\n-                                          cx.ident_of(\"Equal\")));\n+                                     cx.std_path(&[\"cmp\", \"Ordering\", \"Equal\"]));\n \n-    let cmp_path = vec![\n-        cx.ident_of_std(\"core\"),\n-        cx.ident_of(\"cmp\"),\n-        cx.ident_of(\"Ord\"),\n-        cx.ident_of(\"cmp\"),\n-    ];\n+    let cmp_path = cx.std_path(&[\"cmp\", \"Ord\", \"cmp\"]);\n \n     /*\n     Builds:"}, {"sha": "a11e9f473a4a1ba450b3ca37fbe8310b5e9d0a46", "filename": "src/libsyntax/ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -108,19 +108,11 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span,\n               substr: &Substructure) -> P<Expr> {\n     let test_id = cx.ident_of(\"__test\");\n     let ordering = cx.path_global(span,\n-                                  vec!(cx.ident_of_std(\"core\"),\n-                                       cx.ident_of(\"cmp\"),\n-                                       cx.ident_of(\"Ordering\"),\n-                                       cx.ident_of(\"Equal\")));\n+                                  cx.std_path(&[\"cmp\", \"Ordering\", \"Equal\"]));\n     let ordering = cx.expr_path(ordering);\n     let equals_expr = cx.expr_some(span, ordering);\n \n-    let partial_cmp_path = vec![\n-        cx.ident_of_std(\"core\"),\n-        cx.ident_of(\"cmp\"),\n-        cx.ident_of(\"PartialOrd\"),\n-        cx.ident_of(\"partial_cmp\"),\n-    ];\n+    let partial_cmp_path = cx.std_path(&[\"cmp\", \"PartialOrd\", \"partial_cmp\"]);\n \n     /*\n     Builds:"}, {"sha": "99fac991e7f73ca96d6ad050ceaf9e172a9227e2", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -46,10 +46,11 @@ fn expand_deriving_decodable_imp(cx: &mut ExtCtxt,\n                                  push: &mut FnMut(Annotatable),\n                                  krate: &'static str)\n {\n-    if !cx.use_std {\n+    if cx.crate_root != Some(\"std\") {\n         // FIXME(#21880): lift this requirement.\n-        cx.span_err(span, \"this trait cannot be derived with #![no_std]\");\n-        return;\n+        cx.span_err(span, \"this trait cannot be derived with #![no_std] \\\n+                           or #![no_core]\");\n+        return\n     }\n \n     let trait_def = TraitDef {"}, {"sha": "3f4e9da0ed54a5e415ed5ee8792a13d9cfac2acc", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -51,12 +51,7 @@ pub fn expand_deriving_default(cx: &mut ExtCtxt,\n }\n \n fn default_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> P<Expr> {\n-    let default_ident = vec!(\n-        cx.ident_of_std(\"core\"),\n-        cx.ident_of(\"default\"),\n-        cx.ident_of(\"Default\"),\n-        cx.ident_of(\"default\")\n-    );\n+    let default_ident = cx.std_path(&[\"default\", \"Default\", \"default\"]);\n     let default_call = |span| cx.expr_call_global(span, default_ident.clone(), Vec::new());\n \n     return match *substr.fields {"}, {"sha": "3c77effe5f53728d0ed6cdf44d68d5fd451dad92", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -122,9 +122,10 @@ fn expand_deriving_encodable_imp(cx: &mut ExtCtxt,\n                                  push: &mut FnMut(Annotatable),\n                                  krate: &'static str)\n {\n-    if !cx.use_std {\n+    if cx.crate_root != Some(\"std\") {\n         // FIXME(#21880): lift this requirement.\n-        cx.span_err(span, \"this trait cannot be derived with #![no_std]\");\n+        cx.span_err(span, \"this trait cannot be derived with #![no_std] \\\n+                           or #![no_core]\");\n         return;\n     }\n "}, {"sha": "1f4860b7ec11ead5d270eadc61c7d91dfb757e3e", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -1252,9 +1252,7 @@ impl<'a> MethodDef<'a> {\n \n             let mut first_ident = None;\n             for (&ident, self_arg) in vi_idents.iter().zip(&self_args) {\n-                let path = vec![cx.ident_of_std(\"core\"),\n-                                cx.ident_of(\"intrinsics\"),\n-                                cx.ident_of(\"discriminant_value\")];\n+                let path = cx.std_path(&[\"intrinsics\", \"discriminant_value\"]);\n                 let call = cx.expr_call_global(\n                     sp, path, vec![cx.expr_addr_of(sp, self_arg.clone())]);\n                 let variant_value = cx.expr_block(P(ast::Block {\n@@ -1289,9 +1287,7 @@ impl<'a> MethodDef<'a> {\n             //Since we know that all the arguments will match if we reach the match expression we\n             //add the unreachable intrinsics as the result of the catch all which should help llvm\n             //in optimizing it\n-            let path = vec![cx.ident_of_std(\"core\"),\n-                            cx.ident_of(\"intrinsics\"),\n-                            cx.ident_of(\"unreachable\")];\n+            let path = cx.std_path(&[\"intrinsics\", \"unreachable\"]);\n             let call = cx.expr_call_global(\n                 sp, path, vec![]);\n             let unreachable = cx.expr_block(P(ast::Block {"}, {"sha": "97c50ed1eeaf42a2e6c6da2cb93a0141404a2095", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -63,12 +63,7 @@ fn hash_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n     };\n     let call_hash = |span, thing_expr| {\n         let hash_path = {\n-            let strs = vec![\n-                cx.ident_of_std(\"core\"),\n-                cx.ident_of(\"hash\"),\n-                cx.ident_of(\"Hash\"),\n-                cx.ident_of(\"hash\"),\n-            ];\n+            let strs = cx.std_path(&[\"hash\", \"Hash\", \"hash\"]);\n \n             cx.expr_path(cx.path_global(span, strs))\n         };"}, {"sha": "36deaf488e15e0fda1cd31e01ba65e73593f7b93", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -40,13 +40,13 @@ macro_rules! path_local {\n }\n \n macro_rules! pathvec_std {\n-    ($cx:expr, $first:ident :: $($rest:ident)::+) => (\n-        if $cx.use_std {\n-            pathvec!(std :: $($rest)::+)\n-        } else {\n-            pathvec!($first :: $($rest)::+)\n+    ($cx:expr, $first:ident :: $($rest:ident)::+) => ({\n+        let mut v = pathvec!($($rest)::+);\n+        if let Some(s) = $cx.crate_root {\n+            v.insert(0, s);\n         }\n-    )\n+        v\n+    })\n }\n \n macro_rules! path_std {"}, {"sha": "d85071e78af6ec46d20fba5870009cb414af6d5b", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -34,10 +34,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenT\n       Err(..) => {\n           cx.expr_path(cx.path_all(sp,\n                                    true,\n-                                   vec!(cx.ident_of_std(\"core\"),\n-                                        cx.ident_of(\"option\"),\n-                                        cx.ident_of(\"Option\"),\n-                                        cx.ident_of(\"None\")),\n+                                   cx.std_path(&[\"option\", \"Option\", \"None\"]),\n                                    Vec::new(),\n                                    vec!(cx.ty_rptr(sp,\n                                                    cx.ty_ident(sp,\n@@ -50,10 +47,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenT\n       }\n       Ok(s) => {\n           cx.expr_call_global(sp,\n-                              vec!(cx.ident_of_std(\"core\"),\n-                                   cx.ident_of(\"option\"),\n-                                   cx.ident_of(\"Option\"),\n-                                   cx.ident_of(\"Some\")),\n+                              cx.std_path(&[\"option\", \"Option\", \"Some\"]),\n                               vec!(cx.expr_str(sp,\n                                                token::intern_and_get_ident(\n                                           &s[..]))))"}, {"sha": "66b3768a4761815d03373de190c3df05018a83d8", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -38,8 +38,7 @@ use std_inject;\n fn mk_core_path(fld: &mut MacroExpander,\n                 span: Span,\n                 suffix: &[&'static str]) -> ast::Path {\n-    let mut idents = vec![fld.cx.ident_of_std(\"core\")];\n-    for s in suffix.iter() { idents.push(fld.cx.ident_of(*s)); }\n+    let idents = fld.cx.std_path(suffix);\n     fld.cx.path_global(span, idents)\n }\n \n@@ -417,12 +416,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             // `match ::std::iter::Iterator::next(&mut iter) { ... }`\n             let match_expr = {\n                 let next_path = {\n-                    let strs = vec![\n-                        fld.cx.ident_of_std(\"core\"),\n-                        fld.cx.ident_of(\"iter\"),\n-                        fld.cx.ident_of(\"Iterator\"),\n-                        fld.cx.ident_of(\"next\"),\n-                    ];\n+                    let strs = fld.cx.std_path(&[\"iter\", \"Iterator\", \"next\"]);\n \n                     fld.cx.path_global(span, strs)\n                 };\n@@ -450,12 +444,8 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             // `match ::std::iter::IntoIterator::into_iter(<head>) { ... }`\n             let into_iter_expr = {\n                 let into_iter_path = {\n-                    let strs = vec![\n-                        fld.cx.ident_of_std(\"core\"),\n-                        fld.cx.ident_of(\"iter\"),\n-                        fld.cx.ident_of(\"IntoIterator\"),\n-                        fld.cx.ident_of(\"into_iter\"),\n-                    ];\n+                    let strs = fld.cx.std_path(&[\"iter\", \"IntoIterator\",\n+                                                 \"into_iter\"]);\n \n                     fld.cx.path_global(span, strs)\n                 };\n@@ -1665,7 +1655,13 @@ pub fn expand_crate<'feat>(parse_sess: &parse::ParseSess,\n                            user_exts: Vec<NamedSyntaxExtension>,\n                            c: Crate) -> Crate {\n     let mut cx = ExtCtxt::new(parse_sess, c.config.clone(), cfg);\n-    cx.use_std = std_inject::use_std(&c);\n+    if std_inject::no_core(&c) {\n+        cx.crate_root = None;\n+    } else if std_inject::no_std(&c) {\n+        cx.crate_root = Some(\"core\");\n+    } else {\n+        cx.crate_root = Some(\"std\");\n+    }\n \n     let mut expander = MacroExpander::new(&mut cx);\n "}, {"sha": "cc2f94f05d43a8ed2efac89d04bb4c8d3876d967", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -305,8 +305,7 @@ impl<'a, 'b> Context<'a, 'b> {\n     }\n \n     fn rtpath(ecx: &ExtCtxt, s: &str) -> Vec<ast::Ident> {\n-        vec![ecx.ident_of_std(\"core\"), ecx.ident_of(\"fmt\"), ecx.ident_of(\"rt\"),\n-             ecx.ident_of(\"v1\"), ecx.ident_of(s)]\n+        ecx.std_path(&[\"fmt\", \"rt\", \"v1\", s])\n     }\n \n     fn trans_count(&self, c: parse::Count) -> P<ast::Expr> {\n@@ -579,11 +578,8 @@ impl<'a, 'b> Context<'a, 'b> {\n             (\"new_v1_formatted\", vec![pieces, args_slice, fmt])\n         };\n \n-        self.ecx.expr_call_global(self.macsp, vec!(\n-                self.ecx.ident_of_std(\"core\"),\n-                self.ecx.ident_of(\"fmt\"),\n-                self.ecx.ident_of(\"Arguments\"),\n-                self.ecx.ident_of(fn_name)), fn_args)\n+        let path = self.ecx.std_path(&[\"fmt\", \"Arguments\", fn_name]);\n+        self.ecx.expr_call_global(self.macsp, path, fn_args)\n     }\n \n     fn format_arg(ecx: &ExtCtxt, macsp: Span, sp: Span,\n@@ -610,24 +606,15 @@ impl<'a, 'b> Context<'a, 'b> {\n                 }\n             }\n             Unsigned => {\n-                return ecx.expr_call_global(macsp, vec![\n-                        ecx.ident_of_std(\"core\"),\n-                        ecx.ident_of(\"fmt\"),\n-                        ecx.ident_of(\"ArgumentV1\"),\n-                        ecx.ident_of(\"from_usize\")], vec![arg])\n+                let path = ecx.std_path(&[\"fmt\", \"ArgumentV1\", \"from_usize\"]);\n+                return ecx.expr_call_global(macsp, path, vec![arg])\n             }\n         };\n \n-        let format_fn = ecx.path_global(sp, vec![\n-                ecx.ident_of_std(\"core\"),\n-                ecx.ident_of(\"fmt\"),\n-                ecx.ident_of(trait_),\n-                ecx.ident_of(\"fmt\")]);\n-        ecx.expr_call_global(macsp, vec![\n-                ecx.ident_of_std(\"core\"),\n-                ecx.ident_of(\"fmt\"),\n-                ecx.ident_of(\"ArgumentV1\"),\n-                ecx.ident_of(\"new\")], vec![arg, ecx.expr_path(format_fn)])\n+        let path = ecx.std_path(&[\"fmt\", trait_, \"fmt\"]);\n+        let format_fn = ecx.path_global(sp, path);\n+        let path = ecx.std_path(&[\"fmt\", \"ArgumentV1\", \"new\"]);\n+        ecx.expr_call_global(macsp, path, vec![arg, ecx.expr_path(format_fn)])\n     }\n }\n "}, {"sha": "4a1b74d89d0d8038ec4b1016f3fbb67ca44d1f17", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -122,6 +122,9 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n     // Allows using #![no_std]\n     (\"no_std\", \"1.0.0\", Active),\n \n+    // Allows using #![no_core]\n+    (\"no_core\", \"1.3.0\", Active),\n+\n     // Allows using `box` in patterns; RFC 469\n     (\"box_patterns\", \"1.0.0\", Active),\n \n@@ -226,6 +229,8 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n                       and possibly buggy\")),\n     (\"no_std\", Gated(\"no_std\",\n                      \"no_std is experimental\")),\n+    (\"no_core\", Gated(\"no_core\",\n+                     \"no_core is experimental\")),\n     (\"lang\", Gated(\"lang_items\",\n                      \"language items are subject to change\")),\n     (\"linkage\", Gated(\"linkage\","}, {"sha": "f0973e0ba6e03549f4bc37f813e4a59aedd9c0a9", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -113,7 +113,7 @@ pub fn print_crate<'a>(cm: &'a CodeMap,\n                                       out,\n                                       ann,\n                                       is_expanded);\n-    if is_expanded && std_inject::use_std(krate) {\n+    if is_expanded && !std_inject::no_std(krate) {\n         // We need to print `#![no_std]` (and its feature gate) so that\n         // compiling pretty-printed source won't inject libstd again.\n         // However we don't want these attributes in the AST because"}, {"sha": "d41a8ff140c6b33ccf7721ed5b825e14a27a1b16", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 29, "deletions": 30, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -41,52 +41,57 @@ fn ignored_span(sess: &ParseSess, sp: Span) -> Span {\n \n pub fn maybe_inject_crates_ref(krate: ast::Crate, alt_std_name: Option<String>)\n                                -> ast::Crate {\n-    if use_std(&krate) {\n-        inject_crates_ref(krate, alt_std_name)\n-    } else {\n+    if no_core(&krate) {\n         krate\n+    } else {\n+        let name = if no_std(&krate) {\"core\"} else {\"std\"};\n+        let mut fold = CrateInjector {\n+            item_name: token::str_to_ident(name),\n+            crate_name: token::intern(&alt_std_name.unwrap_or(name.to_string())),\n+        };\n+        fold.fold_crate(krate)\n     }\n }\n \n pub fn maybe_inject_prelude(sess: &ParseSess, krate: ast::Crate) -> ast::Crate {\n-    if use_std(&krate) {\n+    if no_core(&krate) {\n+        krate\n+    } else {\n+        let name = if no_std(&krate) {\"core\"} else {\"std\"};\n         let mut fold = PreludeInjector {\n-            span: ignored_span(sess, DUMMY_SP)\n+            span: ignored_span(sess, DUMMY_SP),\n+            crate_identifier: token::str_to_ident(name),\n         };\n         fold.fold_crate(krate)\n-    } else {\n-        krate\n     }\n }\n \n-pub fn use_std(krate: &ast::Crate) -> bool {\n-    !attr::contains_name(&krate.attrs, \"no_std\")\n+pub fn no_core(krate: &ast::Crate) -> bool {\n+    attr::contains_name(&krate.attrs, \"no_core\")\n+}\n+\n+pub fn no_std(krate: &ast::Crate) -> bool {\n+    attr::contains_name(&krate.attrs, \"no_std\") || no_core(krate)\n }\n \n fn no_prelude(attrs: &[ast::Attribute]) -> bool {\n     attr::contains_name(attrs, \"no_implicit_prelude\")\n }\n \n-struct StandardLibraryInjector {\n-    alt_std_name: Option<String>,\n+struct CrateInjector {\n+    item_name: ast::Ident,\n+    crate_name: ast::Name,\n }\n \n-impl fold::Folder for StandardLibraryInjector {\n+impl fold::Folder for CrateInjector {\n     fn fold_crate(&mut self, mut krate: ast::Crate) -> ast::Crate {\n-\n-        // The name to use in `extern crate name as std;`\n-        let actual_crate_name = match self.alt_std_name {\n-            Some(ref s) => token::intern(&s),\n-            None => token::intern(\"std\"),\n-        };\n-\n         krate.module.items.insert(0, P(ast::Item {\n             id: ast::DUMMY_NODE_ID,\n-            ident: token::str_to_ident(\"std\"),\n+            ident: self.item_name,\n             attrs: vec!(\n                 attr::mk_attr_outer(attr::mk_attr_id(), attr::mk_word_item(\n                         InternedString::new(\"macro_use\")))),\n-            node: ast::ItemExternCrate(Some(actual_crate_name)),\n+            node: ast::ItemExternCrate(Some(self.crate_name)),\n             vis: ast::Inherited,\n             span: DUMMY_SP\n         }));\n@@ -95,15 +100,9 @@ impl fold::Folder for StandardLibraryInjector {\n     }\n }\n \n-fn inject_crates_ref(krate: ast::Crate, alt_std_name: Option<String>) -> ast::Crate {\n-    let mut fold = StandardLibraryInjector {\n-        alt_std_name: alt_std_name\n-    };\n-    fold.fold_crate(krate)\n-}\n-\n struct PreludeInjector {\n-    span: Span\n+    span: Span,\n+    crate_identifier: ast::Ident,\n }\n \n impl fold::Folder for PreludeInjector {\n@@ -134,7 +133,7 @@ impl fold::Folder for PreludeInjector {\n             global: false,\n             segments: vec![\n                 ast::PathSegment {\n-                    identifier: token::str_to_ident(\"std\"),\n+                    identifier: self.crate_identifier,\n                     parameters: ast::PathParameters::none(),\n                 },\n                 ast::PathSegment {"}, {"sha": "ea99291d6c2911239d849ba084ce4afc20c1c9a5", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -258,6 +258,7 @@ fn generate_test_harness(sess: &ParseSess,\n         config: krate.config.clone(),\n         toplevel_reexport: None,\n     };\n+    cx.ext_cx.crate_root = Some(\"std\");\n \n     cx.ext_cx.bt_push(ExpnInfo {\n         call_site: DUMMY_SP,\n@@ -449,18 +450,11 @@ fn mk_main(cx: &mut TestCtxt) -> P<ast::Item> {\n     // test::test_main_static\n     let test_main_path = ecx.path(sp, vec![token::str_to_ident(\"test\"),\n                                            token::str_to_ident(\"test_main_static\")]);\n-    // ::std::env::args\n-    let os_args_path = ecx.path_global(sp, vec![token::str_to_ident(\"std\"),\n-                                                token::str_to_ident(\"env\"),\n-                                                token::str_to_ident(\"args\")]);\n-    // ::std::env::args()\n-    let os_args_path_expr = ecx.expr_path(os_args_path);\n-    let call_os_args = ecx.expr_call(sp, os_args_path_expr, vec![]);\n     // test::test_main_static(...)\n     let test_main_path_expr = ecx.expr_path(test_main_path);\n     let tests_ident_expr = ecx.expr_ident(sp, token::str_to_ident(\"TESTS\"));\n     let call_test_main = ecx.expr_call(sp, test_main_path_expr,\n-                                       vec![call_os_args, tests_ident_expr]);\n+                                       vec![tests_ident_expr]);\n     let call_test_main = ecx.stmt_expr(call_test_main);\n     // #![main]\n     let main_meta = ecx.meta_word(sp, token::intern_and_get_ident(\"main\"));\n@@ -633,12 +627,14 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> P<ast::Expr> {\n     let fail_expr = match test.should_panic {\n         ShouldPanic::No => ecx.expr_path(should_panic_path(\"No\")),\n         ShouldPanic::Yes(ref msg) => {\n-            let path = should_panic_path(\"Yes\");\n-            let arg = match *msg {\n-                Some(ref msg) => ecx.expr_some(span, ecx.expr_str(span, msg.clone())),\n-                None => ecx.expr_none(span),\n-            };\n-            ecx.expr_call(span, ecx.expr_path(path), vec![arg])\n+            match *msg {\n+                Some(ref msg) => {\n+                    let msg = ecx.expr_str(span, msg.clone());\n+                    let path = should_panic_path(\"YesWithMessage\");\n+                    ecx.expr_call(span, ecx.expr_path(path), vec![msg])\n+                }\n+                None => ecx.expr_path(should_panic_path(\"Yes\")),\n+            }\n         }\n     };\n "}, {"sha": "7777ea51f822ed606e1b1ed51e076e9d4fa7cab1", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -197,7 +197,8 @@ pub struct Bencher {\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum ShouldPanic {\n     No,\n-    Yes(Option<&'static str>)\n+    Yes,\n+    YesWithMessage(&'static str)\n }\n \n // The definition of a single test. A test runner will run a list of\n@@ -262,8 +263,8 @@ pub fn test_main(args: &[String], tests: Vec<TestDescAndFn> ) {\n // a Vec<TestDescAndFn> is used in order to effect ownership-transfer\n // semantics into parallel test runners, which in turn requires a Vec<>\n // rather than a &[].\n-pub fn test_main_static(args: env::Args, tests: &[TestDescAndFn]) {\n-    let args = args.collect::<Vec<_>>();\n+pub fn test_main_static(tests: &[TestDescAndFn]) {\n+    let args = env::args().collect::<Vec<_>>();\n     let owned_tests = tests.iter().map(|t| {\n         match t.testfn {\n             StaticTestFn(f) => TestDescAndFn { testfn: StaticTestFn(f), desc: t.desc.clone() },\n@@ -1027,8 +1028,8 @@ pub fn run_test(opts: &TestOpts,\n fn calc_result(desc: &TestDesc, task_result: Result<(), Box<Any+Send>>) -> TestResult {\n     match (&desc.should_panic, task_result) {\n         (&ShouldPanic::No, Ok(())) |\n-        (&ShouldPanic::Yes(None), Err(_)) => TrOk,\n-        (&ShouldPanic::Yes(Some(msg)), Err(ref err))\n+        (&ShouldPanic::Yes, Err(_)) => TrOk,\n+        (&ShouldPanic::YesWithMessage(msg), Err(ref err))\n             if err.downcast_ref::<String>()\n                 .map(|e| &**e)\n                 .or_else(|| err.downcast_ref::<&'static str>().map(|e| *e))\n@@ -1276,7 +1277,7 @@ mod tests {\n             desc: TestDesc {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n-                should_panic: ShouldPanic::Yes(None)\n+                should_panic: ShouldPanic::Yes,\n             },\n             testfn: DynTestFn(Box::new(move|| f())),\n         };\n@@ -1293,7 +1294,7 @@ mod tests {\n             desc: TestDesc {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n-                should_panic: ShouldPanic::Yes(Some(\"error message\"))\n+                should_panic: ShouldPanic::YesWithMessage(\"error message\"),\n             },\n             testfn: DynTestFn(Box::new(move|| f())),\n         };\n@@ -1310,7 +1311,7 @@ mod tests {\n             desc: TestDesc {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n-                should_panic: ShouldPanic::Yes(Some(\"foobar\"))\n+                should_panic: ShouldPanic::YesWithMessage(\"foobar\"),\n             },\n             testfn: DynTestFn(Box::new(move|| f())),\n         };\n@@ -1327,7 +1328,7 @@ mod tests {\n             desc: TestDesc {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n-                should_panic: ShouldPanic::Yes(None)\n+                should_panic: ShouldPanic::Yes,\n             },\n             testfn: DynTestFn(Box::new(move|| f())),\n         };"}, {"sha": "7342652fb96902843d57e23c202fb86fb9b2cd70", "filename": "src/test/auxiliary/weak-lang-items.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fauxiliary%2Fweak-lang-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fauxiliary%2Fweak-lang-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fweak-lang-items.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -13,13 +13,10 @@\n // This aux-file will require the eh_personality function to be codegen'd, but\n // it hasn't been defined just yet. Make sure we don't explode.\n \n-#![feature(no_std, core)]\n+#![feature(no_std)]\n #![no_std]\n #![crate_type = \"rlib\"]\n \n-#[macro_use]\n-extern crate core;\n-\n struct A;\n \n impl core::ops::Drop for A {"}, {"sha": "4aad828590a309e5f775f350706743635c9d88a7", "filename": "src/test/compile-fail/associated-types-ICE-when-projecting-out-of-err.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -13,8 +13,8 @@\n \n #![crate_type = \"lib\"]\n #![feature(lang_items)]\n-#![feature(no_std)]\n-#![no_std]\n+#![feature(no_core)]\n+#![no_core]\n \n #[lang=\"sized\"]\n pub trait Sized {"}, {"sha": "bf4dc89415423c4da60866c7eacdc7ed2a4b1aca", "filename": "src/test/compile-fail/double-import.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Fdouble-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Fdouble-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdouble-import.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -7,8 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(no_std)]\n-#![no_std]\n+#![feature(no_core)]\n+#![no_core]\n \n // This tests that conflicting imports shows both `use` lines\n // when reporting the error."}, {"sha": "c4b871a28c57dd02e481c8ac344637a0b039d683", "filename": "src/test/compile-fail/issue-19660.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Fissue-19660.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Fissue-19660.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19660.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -10,8 +10,8 @@\n \n // error-pattern: requires `copy` lang_item\n \n-#![feature(lang_items, start, no_std)]\n-#![no_std]\n+#![feature(lang_items, start, no_core)]\n+#![no_core]\n \n #[lang = \"sized\"]\n trait Sized { }"}, {"sha": "ce2fa2548c3aab63276e8b50b6f20c2db51c2a7c", "filename": "src/test/compile-fail/lang-item-missing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Flang-item-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Flang-item-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flang-item-missing.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -13,8 +13,8 @@\n \n // error-pattern: requires `sized` lang_item\n \n-#![feature(start, no_std)]\n-#![no_std]\n+#![feature(start, no_core)]\n+#![no_core]\n \n #[start]\n fn start(argc: isize, argv: *const *const u8) -> isize {"}, {"sha": "9749e596895c87ffd78d56c5df7fee4afab0f879", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -14,12 +14,9 @@\n #![allow(non_camel_case_types)]\n #![allow(non_upper_case_globals)]\n #![deny(dead_code)]\n-#![feature(core)]\n \n #![crate_type=\"lib\"]\n \n-extern crate core;\n-\n pub use foo2::Bar2;\n \n mod foo {"}, {"sha": "dbaa4177e1429877ac5c6acf5d54afda00921dd9", "filename": "src/test/compile-fail/no-core-gated.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Fno-core-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Fno-core-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-core-gated.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![no_core] //~ ERROR no_core is experimental\n+\n+fn main() {}"}, {"sha": "a03972410c98b1c6296aab9aafe9337ad50950d8", "filename": "src/test/compile-fail/no-std-inject.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Fno-std-inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Fno-std-inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-std-inject.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(no_std, core)]\n+#![no_std]\n+\n+extern crate core; //~ ERROR: an external crate named `core` has already\n+extern crate std;\n+\n+fn main() {}"}, {"sha": "ae7b00cc91f7c140111906457f0d1853b64d8e89", "filename": "src/test/compile-fail/no_owned_box_lang_item.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Fno_owned_box_lang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Fno_owned_box_lang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_owned_box_lang_item.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -15,8 +15,6 @@\n #![no_std]\n #![feature(lang_items, no_std, box_syntax)]\n \n-extern crate core;\n-\n fn main() {\n     let x = box 1i32;\n }"}, {"sha": "7c8b91741ea5bdec4735fe43d464d9dfe2e6f943", "filename": "src/test/compile-fail/privacy1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items, start, no_std)]\n-#![no_std] // makes debugging this test *a lot* easier (during resolve)\n+#![feature(lang_items, start, no_core)]\n+#![no_core] // makes debugging this test *a lot* easier (during resolve)\n \n #[lang=\"sized\"]\n pub trait Sized {}"}, {"sha": "fd8f8d20b7babbecb248e7419bf7349bb66004e8", "filename": "src/test/compile-fail/privacy2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Fprivacy2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Fprivacy2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy2.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(start, no_std)]\n-#![no_std] // makes debugging this test *a lot* easier (during resolve)\n+#![feature(start, no_core)]\n+#![no_core] // makes debugging this test *a lot* easier (during resolve)\n \n // Test to make sure that globs don't leak in regular `use` statements.\n "}, {"sha": "da6266bc7ee6b91f32598dc7e04c0648070857d0", "filename": "src/test/compile-fail/privacy3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(start, no_std)]\n-#![no_std] // makes debugging this test *a lot* easier (during resolve)\n+#![feature(start, no_core)]\n+#![no_core] // makes debugging this test *a lot* easier (during resolve)\n \n // Test to make sure that private items imported through globs remain private\n // when  they're used."}, {"sha": "8e9998dd5977faf75510e67b3d2ee2fb429700ee", "filename": "src/test/compile-fail/privacy4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items, start, no_std)]\n-#![no_std] // makes debugging this test *a lot* easier (during resolve)\n+#![feature(lang_items, start, no_core)]\n+#![no_core] // makes debugging this test *a lot* easier (during resolve)\n \n #[lang = \"sized\"] pub trait Sized {}\n #[lang=\"copy\"] pub trait Copy {}"}, {"sha": "c22812c3d86dc9e687784304428ec04c0e642b62", "filename": "src/test/compile-fail/regions-struct-not-wf.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Fregions-struct-not-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Fregions-struct-not-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-struct-not-wf.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -10,8 +10,6 @@\n \n // Various examples of structs whose fields are not well-formed.\n \n-#![feature(no_std)]\n-#![no_std]\n #![allow(dead_code)]\n \n struct Ref<'a, T> { //~ ERROR the parameter type `T` may not live long enough"}, {"sha": "1aa22a1676ef209571c49c95bcf1f142058790f6", "filename": "src/test/compile-fail/required-lang-item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Frequired-lang-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Fcompile-fail%2Frequired-lang-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frequired-lang-item.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items, no_std)]\n-#![no_std]\n+#![feature(lang_items, no_core)]\n+#![no_core]\n \n #[lang=\"sized\"] pub trait Sized { }\n "}, {"sha": "c64b3170ffe334c4c09990109fb9ee580f77d09d", "filename": "src/test/run-make/alloc-extern-crates/fakealloc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-make%2Falloc-extern-crates%2Ffakealloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-make%2Falloc-extern-crates%2Ffakealloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Falloc-extern-crates%2Ffakealloc.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -9,9 +9,8 @@\n // except according to those terms.\n \n #![crate_type = \"rlib\"]\n-#![feature(no_std, core)]\n+#![feature(no_std)]\n #![no_std]\n-extern crate core;\n \n \n #[inline]"}, {"sha": "0dc5c0a3a8ee11d9dfb0ee2e030d0e5fb5eb1829", "filename": "src/test/run-make/mismatching-target-triples/bar.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2Fbar.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -7,6 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(no_std)]\n-#![no_std]\n+\n+#![feature(no_core)]\n+#![no_core]\n extern crate foo;"}, {"sha": "a2169d0c63110775cf1003ac704b6aa865f82f85", "filename": "src/test/run-make/mismatching-target-triples/foo.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmismatching-target-triples%2Ffoo.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -7,6 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(no_std)]\n-#![no_std]\n+\n+#![feature(no_core)]\n+#![no_core]\n #![crate_type = \"lib\"]"}, {"sha": "c241241e18b97d3145b624c43d16d3f5653eb487", "filename": "src/test/run-make/pretty-expanded-hygiene/input.pp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.pp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.pp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.pp.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // minimal junk\n-#![feature(no_std)]\n-#![no_std]\n+#![feature(no_core)]\n+#![no_core]\n \n \n fn bar /* 62#0 */() { let x /* 59#2 */ = 1; y /* 61#4 */ + x /* 59#5 */ }"}, {"sha": "56783b560994356732437de3c7490059c7e190ff", "filename": "src/test/run-make/pretty-expanded-hygiene/input.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // minimal junk\n-#![feature(no_std)]\n-#![no_std]\n+#![feature(no_core)]\n+#![no_core]\n \n macro_rules! foo {\n     ($x: ident) => { y + $x }"}, {"sha": "5576e8823716d1c285a5dd0af88094f2b727cb59", "filename": "src/test/run-make/simd-ffi/simd.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -12,8 +12,8 @@\n #![crate_type = \"lib\"]\n // we can compile to a variety of platforms, because we don't need\n // cross-compiled standard libraries.\n-#![feature(no_std)]\n-#![no_std]\n+#![feature(no_core)]\n+#![no_core]\n \n #![feature(simd, simd_ffi, link_llvm_intrinsics, lang_items)]\n \n@@ -75,8 +75,6 @@ pub trait Sized { }\n #[lang = \"copy\"]\n pub trait Copy { }\n \n-mod core {\n-    pub mod marker {\n-        pub use Copy;\n-    }\n+pub mod marker {\n+    pub use Copy;\n }"}, {"sha": "15b56977232169cf5b8721ba0994cd9947712839", "filename": "src/test/run-make/target-specs/foo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items, no_std)]\n-#![no_std]\n+#![feature(lang_items, no_core)]\n+#![no_core]\n \n #[lang=\"copy\"]\n trait Copy { }"}, {"sha": "3e99ed60c62fafd4a34831ba79df541ebe6c2942", "filename": "src/test/run-make/use-extern-for-plugins/bar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-make%2Fuse-extern-for-plugins%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-make%2Fuse-extern-for-plugins%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fuse-extern-for-plugins%2Fbar.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(no_std)]\n-#![no_std]\n+#![feature(no_core)]\n+#![no_core]\n #![crate_type = \"lib\"]\n #![crate_name = \"a\"]\n "}, {"sha": "3f15d0e6e0590f6682d84d5078deddc2a3a03b5a", "filename": "src/test/run-make/use-extern-for-plugins/baz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-make%2Fuse-extern-for-plugins%2Fbaz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-make%2Fuse-extern-for-plugins%2Fbaz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fuse-extern-for-plugins%2Fbaz.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(no_std)]\n-#![no_std]\n+#![feature(no_core)]\n+#![no_core]\n #![crate_type = \"lib\"]\n \n #[macro_use]"}, {"sha": "e7c6b67b820077b31043b1494f5a6c548afd9e69", "filename": "src/test/run-pass/derive-no-std.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-pass%2Fderive-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-pass%2Fderive-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderive-no-std.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,10 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(no_std, core, rand, collections, rustc_private)]\n+#![feature(no_std, rand, collections, rustc_private)]\n #![no_std]\n \n-extern crate core;\n extern crate rand;\n extern crate serialize as rustc_serialize;\n extern crate collections;"}, {"sha": "2f327bdebbf8fd10b6684721bfe32a62d886a039", "filename": "src/test/run-pass/for-loop-no-std.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-pass%2Ffor-loop-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-pass%2Ffor-loop-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-no-std.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,18 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n-\n-#![feature(lang_items, start, no_std, core_slice_ext, core, collections)]\n+#![feature(lang_items, start, no_std, core_slice_ext, collections)]\n #![no_std]\n \n extern crate std as other;\n \n-#[macro_use] extern crate core;\n #[macro_use] extern crate collections;\n \n-use core::slice::SliceExt;\n-\n #[start]\n fn start(_argc: isize, _argv: *const *const u8) -> isize {\n     for _ in [1,2,3].iter() { }"}, {"sha": "baa159b0e0ea495ad5cbfe979161795f28b25751", "filename": "src/test/run-pass/format-no-std.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-pass%2Fformat-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-pass%2Fformat-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fformat-no-std.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,12 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items, start, no_std, core, collections)]\n+#![feature(lang_items, start, no_std, collections)]\n #![no_std]\n \n extern crate std as other;\n \n-#[macro_use] extern crate core;\n #[macro_use] extern crate collections;\n \n use collections::string::ToString;"}, {"sha": "7868077fbf244cac6a4861196ec770bd4f177fa1", "filename": "src/test/run-pass/no-core-1.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-pass%2Fno-core-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-pass%2Fno-core-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fno-core-1.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(no_core, core)]\n+#![no_core]\n+\n+extern crate std;\n+extern crate core;\n+\n+use std::option::Option::Some;\n+\n+fn main() {\n+    let a = Some(\"foo\");\n+    a.unwrap();\n+}"}, {"sha": "95bf3158e12dccae9bee36ce45671ede51e123e1", "filename": "src/test/run-pass/no-std-1.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-pass%2Fno-std-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-pass%2Fno-std-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fno-std-1.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(no_std)]\n+#![no_std]\n+\n+extern crate std;\n+\n+fn main() {\n+    let a = Some(\"foo\");\n+    a.unwrap();\n+}"}, {"sha": "043b016bdb9221db4484a5c83e6a340f2631e776", "filename": "src/test/run-pass/no-std-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-pass%2Fno-std-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-pass%2Fno-std-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fno-std-2.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(no_std)]\n+#![no_std]\n+\n+extern crate std;\n+\n+fn main() {\n+    let a = core::option::Option::Some(\"foo\");\n+    a.unwrap();\n+}"}, {"sha": "318b29d99cc6a2fc3ed4ed1b8cf102b878bf63ed", "filename": "src/test/run-pass/no-std-3.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-pass%2Fno-std-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-pass%2Fno-std-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fno-std-3.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(no_std)]\n+#![no_std]\n+\n+extern crate std;\n+\n+mod foo {\n+    pub fn test() -> Option<i32> {\n+        Some(2)\n+    }\n+}\n+\n+fn main() {\n+    let a = core::option::Option::Some(\"foo\");\n+    a.unwrap();\n+    foo::test().unwrap();\n+}"}, {"sha": "134a962d3dc542b368428de7990e829d3301619b", "filename": "src/test/run-pass/smallest-hello-world.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-pass%2Fsmallest-hello-world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-pass%2Fsmallest-hello-world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsmallest-hello-world.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -12,8 +12,8 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(intrinsics, lang_items, start, no_std, libc)]\n-#![no_std]\n+#![feature(intrinsics, lang_items, start, no_core, libc)]\n+#![no_core]\n \n extern crate libc;\n "}, {"sha": "592d17922e1a6edc38c4fce5ad1dfd57d9ccdd1c", "filename": "src/test/run-pass/use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-pass%2Fuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-pass%2Fuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -11,8 +11,8 @@\n // pretty-expanded FIXME #23616\n \n #![allow(unused_imports)]\n-#![feature(start, no_std)]\n-#![no_std]\n+#![feature(start, no_core, core)]\n+#![no_core]\n \n extern crate std;\n extern crate std as zed;"}, {"sha": "ddac0ecc13c9a073cea1b986ac8a10482d7165fc", "filename": "src/test/run-pass/vec-macro-no-std.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-pass%2Fvec-macro-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frun-pass%2Fvec-macro-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-macro-no-std.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -8,13 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(lang_items, start, no_std, core, core_slice_ext, libc, collections)]\n+#![feature(lang_items, start, no_std, core_slice_ext, libc, collections)]\n #![no_std]\n \n extern crate std as other;\n \n-#[macro_use]\n-extern crate core;\n extern crate libc;\n \n #[macro_use]"}, {"sha": "1e8d20f74f9c60208a6bf230323c34e1b0193199", "filename": "src/test/rustdoc/issue-23511.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frustdoc%2Fissue-23511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe415a4a7c3e10eff6d9a4b08128c341742e401/src%2Ftest%2Frustdoc%2Fissue-23511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-23511.rs?ref=dbe415a4a7c3e10eff6d9a4b08128c341742e401", "patch": "@@ -11,8 +11,6 @@\n #![feature(no_std, lang_items, core)]\n #![no_std]\n \n-extern crate core;\n-\n pub mod str {\n     #![doc(primitive = \"str\")]\n "}]}