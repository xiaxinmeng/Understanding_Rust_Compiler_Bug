{"sha": "5580b90392262d5f136db7b40d322858db6dfa0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ODBiOTAzOTIyNjJkNWYxMzZkYjdiNDBkMzIyODU4ZGI2ZGZhMGY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-13T01:46:40Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-13T15:11:09Z"}, "message": "s/HARD ERROR/hard error/ -- perhaps the warning is enough", "tree": {"sha": "7becf678e06b7ace492ca0d25e8d333546515362", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7becf678e06b7ace492ca0d25e8d333546515362"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5580b90392262d5f136db7b40d322858db6dfa0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5580b90392262d5f136db7b40d322858db6dfa0f", "html_url": "https://github.com/rust-lang/rust/commit/5580b90392262d5f136db7b40d322858db6dfa0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5580b90392262d5f136db7b40d322858db6dfa0f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0254f69d745058a6f293639b4c47de02062694b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0254f69d745058a6f293639b4c47de02062694b2", "html_url": "https://github.com/rust-lang/rust/commit/0254f69d745058a6f293639b4c47de02062694b2"}], "stats": {"total": 88, "additions": 44, "deletions": 44}, "files": [{"sha": "da6e8936eed5dab0095800a97ec679a0a3ff1131", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5580b90392262d5f136db7b40d322858db6dfa0f/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5580b90392262d5f136db7b40d322858db6dfa0f/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=5580b90392262d5f136db7b40d322858db6dfa0f", "patch": "@@ -447,7 +447,7 @@ pub fn raw_struct_lint<'a>(sess: &'a Session,\n     if let Some(future_incompatible) = lints.future_incompatible(LintId::of(lint)) {\n         let explanation = format!(\"this was previously accepted by the compiler \\\n                                    but is being phased out, \\\n-                                   and will become a HARD ERROR in a future release!\");\n+                                   and will become a hard error in a future release!\");\n         let citation = format!(\"for more information, see {}\",\n                                future_incompatible.reference);\n         if let Some(sp) = span {"}, {"sha": "cffd9fd9b49385d49e438ce866b1b5c098adbbcf", "filename": "src/test/compile-fail/empty-struct-unit-pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5580b90392262d5f136db7b40d322858db6dfa0f/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5580b90392262d5f136db7b40d322858db6dfa0f/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs?ref=5580b90392262d5f136db7b40d322858db6dfa0f", "patch": "@@ -32,14 +32,14 @@ fn main() { //~ ERROR: compilation successful\n     // }\n     match e1 {\n         Empty1(..) => () //~ WARN `Empty1` does not name a tuple variant or a tuple struct\n-            //~^ WARN HARD ERROR\n+            //~^ WARN hard error\n     }\n     // Rejected by parser as yet\n     // match e2 {\n     //     E::Empty2() => () // ERROR `E::Empty2` does not name a tuple variant or a tuple struct\n     // }\n     match e2 {\n         E::Empty2(..) => () //~ WARN `E::Empty2` does not name a tuple variant or a tuple struct\n-            //~^ WARN HARD ERROR\n+            //~^ WARN hard error\n     }\n }"}, {"sha": "9aab06ce14ee16b324075fcaed44fbedc7c63766", "filename": "src/test/compile-fail/private-in-public-warn.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/5580b90392262d5f136db7b40d322858db6dfa0f/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5580b90392262d5f136db7b40d322858db6dfa0f/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs?ref=5580b90392262d5f136db7b40d322858db6dfa0f", "patch": "@@ -26,34 +26,34 @@ mod types {\n     }\n \n     pub type Alias = Priv; //~ WARN private type in public interface\n-    //~^ WARNING HARD ERROR\n+    //~^ WARNING hard error\n     pub enum E {\n         V1(Priv), //~ WARN private type in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n         V2 { field: Priv }, //~ WARN private type in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n     }\n     pub trait Tr {\n         const C: Priv = Priv; //~ WARN private type in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n         type Alias = Priv; //~ WARN private type in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n         fn f1(arg: Priv) {} //~ WARN private type in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n         fn f2() -> Priv { panic!() } //~ WARN private type in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n     }\n     extern {\n         pub static ES: Priv; //~ WARN private type in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n         pub fn ef1(arg: Priv); //~ WARN private type in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n         pub fn ef2() -> Priv; //~ WARN private type in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n     }\n     impl PubTr for Pub {\n         type Alias = Priv; //~ WARN private type in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n     }\n }\n \n@@ -64,21 +64,21 @@ mod traits {\n \n     pub type Alias<T: PrivTr> = T; //~ WARN private trait in public interface\n     //~^ WARN trait bounds are not (yet) enforced in type definitions\n-    //~| WARNING HARD ERROR\n+    //~| WARNING hard error\n     pub trait Tr1: PrivTr {} //~ WARN private trait in public interface\n-    //~^ WARNING HARD ERROR\n+    //~^ WARNING hard error\n     pub trait Tr2<T: PrivTr> {} //~ WARN private trait in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n     pub trait Tr3 {\n         type Alias: PrivTr; //~ WARN private trait in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n         fn f<T: PrivTr>(arg: T) {} //~ WARN private trait in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n     }\n     impl<T: PrivTr> Pub<T> {} //~ WARN private trait in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n     impl<T: PrivTr> PubTr for Pub<T> {} //~ WARN private trait in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n }\n \n mod traits_where {\n@@ -87,17 +87,17 @@ mod traits_where {\n     pub trait PubTr {}\n \n     pub type Alias<T> where T: PrivTr = T; //~ WARN private trait in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n     pub trait Tr2<T> where T: PrivTr {} //~ WARN private trait in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n     pub trait Tr3 {\n         fn f<T>(arg: T) where T: PrivTr {} //~ WARN private trait in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n     }\n     impl<T> Pub<T> where T: PrivTr {} //~ WARN private trait in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n     impl<T> PubTr for Pub<T> where T: PrivTr {} //~ WARN private trait in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n }\n \n mod generics {\n@@ -107,13 +107,13 @@ mod generics {\n     pub trait PubTr<T> {}\n \n     pub trait Tr1: PrivTr<Pub> {} //~ WARN private trait in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n     pub trait Tr2: PubTr<Priv> {} //~ WARN private type in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n     pub trait Tr3: PubTr<[Priv; 1]> {} //~ WARN private type in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n     pub trait Tr4: PubTr<Pub<Priv>> {} //~ WARN private type in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n }\n \n mod impls {\n@@ -140,7 +140,7 @@ mod impls {\n     }\n     impl PubTr for Pub {\n         type Alias = Priv; //~ WARN private type in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n     }\n }\n \n@@ -207,27 +207,27 @@ mod aliases_pub {\n     pub trait Tr1: PrivUseAliasTr {} // OK\n     // This should be OK, if type aliases are substituted\n     pub trait Tr2: PrivUseAliasTr<PrivAlias> {} //~ WARN private type in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n \n     impl PrivAlias {\n         pub fn f(arg: Priv) {} //~ WARN private type in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n     }\n     // This doesn't even parse\n     // impl <Priv as PrivTr>::AssocAlias {\n     //     pub fn f(arg: Priv) {} // WARN private type in public interface\n     // }\n     impl PrivUseAliasTr for PrivUseAlias {\n         type Check = Priv; //~ WARN private type in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n     }\n     impl PrivUseAliasTr for PrivAlias {\n         type Check = Priv; //~ WARN private type in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n     }\n     impl PrivUseAliasTr for <Priv as PrivTr>::AssocAlias {\n         type Check = Priv; //~ WARN private type in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n     }\n }\n \n@@ -250,11 +250,11 @@ mod aliases_priv {\n     impl PrivTr for Priv {}\n \n     pub trait Tr1: PrivUseAliasTr {} //~ WARN private trait in public interface\n-        //~^ WARNING HARD ERROR\n+        //~^ WARNING hard error\n     pub trait Tr2: PrivUseAliasTr<PrivAlias> {} //~ WARN private trait in public interface\n      //~^ WARN private type in public interface\n-        //~| WARNING HARD ERROR\n-        //~| WARNING HARD ERROR\n+        //~| WARNING hard error\n+        //~| WARNING hard error\n \n     impl PrivUseAlias {\n         pub fn f(arg: Priv) {} // OK"}, {"sha": "06f08dc13c6b484ed2684904133954a128413d84", "filename": "src/test/compile-fail/private-variant-reexport.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5580b90392262d5f136db7b40d322858db6dfa0f/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5580b90392262d5f136db7b40d322858db6dfa0f/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs?ref=5580b90392262d5f136db7b40d322858db6dfa0f", "patch": "@@ -13,22 +13,22 @@\n \n mod m1 {\n     pub use ::E::V; //~ WARN variant `V` is private, and cannot be reexported\n-    //~^ WARNING HARD ERROR\n+    //~^ WARNING hard error\n }\n \n mod m2 {\n     pub use ::E::{V}; //~ WARN variant `V` is private, and cannot be reexported\n-    //~^ WARNING HARD ERROR\n+    //~^ WARNING hard error\n }\n \n mod m3 {\n     pub use ::E::V::{self}; //~ WARN variant `V` is private, and cannot be reexported\n-    //~^ WARNING HARD ERROR\n+    //~^ WARNING hard error\n }\n \n mod m4 {\n     pub use ::E::*; //~ WARN variant `V` is private, and cannot be reexported\n-    //~^ WARNING HARD ERROR\n+    //~^ WARNING hard error\n }\n \n enum E { V }"}, {"sha": "9291329fac37f6b75c3e0504efe9769f6259f0fa", "filename": "src/test/compile-fail/type-parameter-invalid-lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5580b90392262d5f136db7b40d322858db6dfa0f/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5580b90392262d5f136db7b40d322858db6dfa0f/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs?ref=5580b90392262d5f136db7b40d322858db6dfa0f", "patch": "@@ -13,5 +13,5 @@\n \n fn avg<T=i32>(_: T) {}\n //~^ ERROR defaults for type parameters are only allowed\n-//~| WARNING HARD ERROR\n+//~| WARNING hard error\n fn main() {}"}]}