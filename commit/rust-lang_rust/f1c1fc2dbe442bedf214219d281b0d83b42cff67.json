{"sha": "f1c1fc2dbe442bedf214219d281b0d83b42cff67", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxYzFmYzJkYmU0NDJiZWRmMjE0MjE5ZDI4MWIwZDgzYjQyY2ZmNjc=", "commit": {"author": {"name": "Maxim Nazarenko", "email": "nz.phone@mail.ru", "date": "2018-02-14T07:19:01Z"}, "committer": {"name": "Maxim Nazarenko", "email": "nz.phone@mail.ru", "date": "2018-02-14T07:19:01Z"}, "message": "rephrase UnsafeCell doc\n\nMake UnsafeCell doc easier to follow", "tree": {"sha": "f47a8adb8221b5400b6aa07ec2c1e071b470aba9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f47a8adb8221b5400b6aa07ec2c1e071b470aba9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1c1fc2dbe442bedf214219d281b0d83b42cff67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1c1fc2dbe442bedf214219d281b0d83b42cff67", "html_url": "https://github.com/rust-lang/rust/commit/f1c1fc2dbe442bedf214219d281b0d83b42cff67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1c1fc2dbe442bedf214219d281b0d83b42cff67/comments", "author": {"login": "NovemberZulu", "id": 897004, "node_id": "MDQ6VXNlcjg5NzAwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/897004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NovemberZulu", "html_url": "https://github.com/NovemberZulu", "followers_url": "https://api.github.com/users/NovemberZulu/followers", "following_url": "https://api.github.com/users/NovemberZulu/following{/other_user}", "gists_url": "https://api.github.com/users/NovemberZulu/gists{/gist_id}", "starred_url": "https://api.github.com/users/NovemberZulu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NovemberZulu/subscriptions", "organizations_url": "https://api.github.com/users/NovemberZulu/orgs", "repos_url": "https://api.github.com/users/NovemberZulu/repos", "events_url": "https://api.github.com/users/NovemberZulu/events{/privacy}", "received_events_url": "https://api.github.com/users/NovemberZulu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "NovemberZulu", "id": 897004, "node_id": "MDQ6VXNlcjg5NzAwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/897004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NovemberZulu", "html_url": "https://github.com/NovemberZulu", "followers_url": "https://api.github.com/users/NovemberZulu/followers", "following_url": "https://api.github.com/users/NovemberZulu/following{/other_user}", "gists_url": "https://api.github.com/users/NovemberZulu/gists{/gist_id}", "starred_url": "https://api.github.com/users/NovemberZulu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NovemberZulu/subscriptions", "organizations_url": "https://api.github.com/users/NovemberZulu/orgs", "repos_url": "https://api.github.com/users/NovemberZulu/repos", "events_url": "https://api.github.com/users/NovemberZulu/events{/privacy}", "received_events_url": "https://api.github.com/users/NovemberZulu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d2d3fc5dadf894a8ad709a5860a549f2c0b1032", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d2d3fc5dadf894a8ad709a5860a549f2c0b1032", "html_url": "https://github.com/rust-lang/rust/commit/4d2d3fc5dadf894a8ad709a5860a549f2c0b1032"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "6270e87c9cce9c94b4abb0b3e47d9cc1c3151a61", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1c1fc2dbe442bedf214219d281b0d83b42cff67/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1c1fc2dbe442bedf214219d281b0d83b42cff67/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=f1c1fc2dbe442bedf214219d281b0d83b42cff67", "patch": "@@ -1164,11 +1164,12 @@ impl<'a, T: ?Sized + fmt::Display> fmt::Display for RefMut<'a, T> {\n /// The compiler makes optimizations based on the knowledge that `&T` is not mutably aliased or\n /// mutated, and that `&mut T` is unique. When building abstractions like `Cell`, `RefCell`,\n /// `Mutex`, etc, you need to turn these optimizations off. `UnsafeCell` is the only legal way\n-/// to do this. When `UnsafeCell<T>` is immutably aliased, it is still safe to obtain a mutable\n-/// reference to its interior and/or to mutate it. However, it is up to the abstraction designer\n-/// to ensure that no two mutable references obtained this way are active at the same time, and\n-/// that there are no active mutable references or mutations when an immutable reference is obtained\n-/// from the cell. This is often done via runtime checks.\n+/// to do this. When `UnsafeCell<T>` _itself_ is immutably aliased, it is still safe to obtain\n+/// a mutable reference to its _interior_ and/or to mutate the interior. However, it is up to \n+/// the abstraction designer to ensure that no two mutable references obtained this way are active\n+/// at the same time, there are no active immutable reference when a mutable reference is obtained\n+/// from the cell, and that there are no active mutable references or mutations when an immutable\n+/// reference is obtained. This is often done via runtime checks.\n ///\n /// Note that while mutating or mutably aliasing the contents of an `& UnsafeCell<T>` is\n /// okay (provided you enforce the invariants some other way); it is still undefined behavior\n@@ -1240,9 +1241,9 @@ impl<T: ?Sized> UnsafeCell<T> {\n     /// Gets a mutable pointer to the wrapped value.\n     ///\n     /// This can be cast to a pointer of any kind.\n-    /// Ensure that the access is unique when casting to\n-    /// `&mut T`, and ensure that there are no mutations or mutable\n-    /// aliases going on when casting to `&T`\n+    /// Ensure that the access is unique (no active references, mutable or not)\n+    /// when casting to `&mut T`, and ensure that there are no mutations\n+\t/// or mutable aliases going on when casting to `&T`\n     ///\n     /// # Examples\n     ///"}]}