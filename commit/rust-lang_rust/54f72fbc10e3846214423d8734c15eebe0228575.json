{"sha": "54f72fbc10e3846214423d8734c15eebe0228575", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZjcyZmJjMTBlMzg0NjIxNDQyM2Q4NzM0YzE1ZWViZTAyMjg1NzU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-09T05:31:50Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-09T05:31:50Z"}, "message": "rustc: Actually hook the crate_type attribute into session", "tree": {"sha": "7cfa7ebf7f13830e896bacfd22573e667813e58b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cfa7ebf7f13830e896bacfd22573e667813e58b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54f72fbc10e3846214423d8734c15eebe0228575", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54f72fbc10e3846214423d8734c15eebe0228575", "html_url": "https://github.com/rust-lang/rust/commit/54f72fbc10e3846214423d8734c15eebe0228575", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54f72fbc10e3846214423d8734c15eebe0228575/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f1713185506c57527561fd61c7c42502ccd4cf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f1713185506c57527561fd61c7c42502ccd4cf0", "html_url": "https://github.com/rust-lang/rust/commit/4f1713185506c57527561fd61c7c42502ccd4cf0"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "105832735a46578ae39424d06e2b4031639212d0", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54f72fbc10e3846214423d8734c15eebe0228575/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f72fbc10e3846214423d8734c15eebe0228575/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=54f72fbc10e3846214423d8734c15eebe0228575", "patch": "@@ -138,6 +138,8 @@ fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n         time(time_passes, \"parsing\", bind parse_input(sess, cfg, input));\n     if sess.get_opts().parse_only { ret; }\n \n+    sess.set_building_library(crate);\n+\n     crate =\n         time(time_passes, \"configuration\",\n              bind front::config::strip_unconfigured_items(crate));\n@@ -492,7 +494,7 @@ fn build_session(sopts: @session::options) -> session::session {\n         sopts.addl_lib_search_paths);\n     ret session::session(target_cfg, sopts, cstore,\n                          @{cm: codemap::new_codemap(), mutable next_id: 0},\n-                         none, 0u, filesearch);\n+                         none, 0u, filesearch, false);\n }\n \n fn parse_pretty(sess: session::session, &&name: str) -> pp_mode {"}, {"sha": "9b76d855ec7168afdb880c67d488c22fb7c0f92d", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54f72fbc10e3846214423d8734c15eebe0228575/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f72fbc10e3846214423d8734c15eebe0228575/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=54f72fbc10e3846214423d8734c15eebe0228575", "patch": "@@ -59,7 +59,8 @@ obj session(targ_cfg: @config,\n             // For a library crate, this is always none\n             mutable main_fn: option::t<node_id>,\n             mutable err_count: uint,\n-            filesearch: filesearch::filesearch) {\n+            filesearch: filesearch::filesearch,\n+            mutable building_library: bool) {\n     fn get_targ_cfg() -> @config { ret targ_cfg; }\n     fn get_opts() -> @options { ret opts; }\n     fn get_cstore() -> metadata::cstore::cstore { cstore }\n@@ -118,7 +119,10 @@ obj session(targ_cfg: @config,\n     fn set_main_id(d: node_id) { main_fn = some(d); }\n     fn get_main_id() -> option::t<node_id> { main_fn }\n     fn filesearch() -> filesearch::filesearch { filesearch }\n-    fn building_library() -> bool { opts.crate_type == lib_crate }\n+    fn building_library() -> bool { building_library }\n+    fn set_building_library(crate: @ast::crate) {\n+        building_library = session::building_library(opts.crate_type, crate);\n+    }\n }\n \n fn building_library(req_crate_type: crate_type, crate: @ast::crate) -> bool {"}]}