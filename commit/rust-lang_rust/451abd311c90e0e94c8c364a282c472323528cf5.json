{"sha": "451abd311c90e0e94c8c364a282c472323528cf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MWFiZDMxMWM5MGUwZTk0YzhjMzY0YTI4MmM0NzIzMjM1MjhjZjU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-08-11T17:17:21Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-08-24T21:08:30Z"}, "message": "PGO for LLVM builds on x86_64-unknown-linux-gnu in CI\n\nThis shows up to 5% less instruction counts on multiple benchmarks, and up to\n19% wins on the -j1 wall times for rustc self-compilation.\n\nWe can afford to spend the extra cycles building LLVM essentially once more for\nthe x86_64-unknown-linux-gnu CI build today. The builder finishes in around 50\nminutes on average, and this adds just 10 more minutes. Given the sizeable\nimprovements in compiler performance, this is definitely worth it.", "tree": {"sha": "688ee16e7d064df30e579e3b7975811985f1d678", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/688ee16e7d064df30e579e3b7975811985f1d678"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/451abd311c90e0e94c8c364a282c472323528cf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/451abd311c90e0e94c8c364a282c472323528cf5", "html_url": "https://github.com/rust-lang/rust/commit/451abd311c90e0e94c8c364a282c472323528cf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/451abd311c90e0e94c8c364a282c472323528cf5/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0599f3403366d9c57f0625e6de3af214b5042a90", "url": "https://api.github.com/repos/rust-lang/rust/commits/0599f3403366d9c57f0625e6de3af214b5042a90", "html_url": "https://github.com/rust-lang/rust/commit/0599f3403366d9c57f0625e6de3af214b5042a90"}], "stats": {"total": 154, "additions": 98, "deletions": 56}, "files": [{"sha": "5706b8f9e7cc6055be056ebeb214dd7baae1714c", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/451abd311c90e0e94c8c364a282c472323528cf5/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451abd311c90e0e94c8c364a282c472323528cf5/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=451abd311c90e0e94c8c364a282c472323528cf5", "patch": "@@ -143,6 +143,8 @@ pub struct Config {\n     pub rust_new_symbol_mangling: bool,\n     pub rust_profile_use: Option<String>,\n     pub rust_profile_generate: Option<String>,\n+    pub llvm_profile_use: Option<String>,\n+    pub llvm_profile_generate: bool,\n \n     pub build: TargetSelection,\n     pub hosts: Vec<TargetSelection>,\n@@ -605,6 +607,8 @@ impl Config {\n         if let Some(value) = flags.deny_warnings {\n             config.deny_warnings = value;\n         }\n+        config.llvm_profile_use = flags.llvm_profile_use;\n+        config.llvm_profile_generate = flags.llvm_profile_generate;\n \n         if config.dry_run {\n             let dir = config.out.join(\"tmp-dry-run\");"}, {"sha": "d7d511c1c921b1d77430a246d11349832ee255e0", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/451abd311c90e0e94c8c364a282c472323528cf5/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451abd311c90e0e94c8c364a282c472323528cf5/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=451abd311c90e0e94c8c364a282c472323528cf5", "patch": "@@ -2157,10 +2157,16 @@ impl Step for ReproducibleArtifacts {\n     }\n \n     fn run(self, builder: &Builder<'_>) -> Self::Output {\n-        let path = builder.config.rust_profile_use.as_ref()?;\n-\n+        let mut added_anything = false;\n         let tarball = Tarball::new(builder, \"reproducible-artifacts\", &self.target.triple);\n-        tarball.add_file(path, \".\", 0o644);\n-        Some(tarball.generate())\n+        if let Some(path) = builder.config.rust_profile_use.as_ref() {\n+            tarball.add_file(path, \".\", 0o644);\n+            added_anything = true;\n+        }\n+        if let Some(path) = builder.config.llvm_profile_use.as_ref() {\n+            tarball.add_file(path, \".\", 0o644);\n+            added_anything = true;\n+        }\n+        if added_anything { Some(tarball.generate()) } else { None }\n     }\n }"}, {"sha": "2fddda74a28e924bfd3e7db776bdc38e67a15933", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/451abd311c90e0e94c8c364a282c472323528cf5/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451abd311c90e0e94c8c364a282c472323528cf5/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=451abd311c90e0e94c8c364a282c472323528cf5", "patch": "@@ -71,6 +71,13 @@ pub struct Flags {\n \n     pub rust_profile_use: Option<String>,\n     pub rust_profile_generate: Option<String>,\n+\n+    pub llvm_profile_use: Option<String>,\n+    // LLVM doesn't support a custom location for generating profile\n+    // information.\n+    //\n+    // llvm_out/build/profiles/ is the location this writes to.\n+    pub llvm_profile_generate: bool,\n }\n \n pub enum Subcommand {\n@@ -222,8 +229,15 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n              VALUE overrides the skip-rebuild option in config.toml.\",\n             \"VALUE\",\n         );\n-        opts.optopt(\"\", \"rust-profile-generate\", \"generate PGO profile with rustc build\", \"FORMAT\");\n-        opts.optopt(\"\", \"rust-profile-use\", \"use PGO profile for rustc build\", \"FORMAT\");\n+        opts.optopt(\n+            \"\",\n+            \"rust-profile-generate\",\n+            \"generate PGO profile with rustc build\",\n+            \"PROFILE\",\n+        );\n+        opts.optopt(\"\", \"rust-profile-use\", \"use PGO profile for rustc build\", \"PROFILE\");\n+        opts.optflag(\"\", \"llvm-profile-generate\", \"generate PGO profile with llvm built for rustc\");\n+        opts.optopt(\"\", \"llvm-profile-use\", \"use PGO profile for llvm build\", \"PROFILE\");\n \n         // We can't use getopt to parse the options until we have completed specifying which\n         // options are valid, but under the current implementation, some options are conditional on\n@@ -687,6 +701,8 @@ Arguments:\n                 .expect(\"`color` should be `always`, `never`, or `auto`\"),\n             rust_profile_use: matches.opt_str(\"rust-profile-use\"),\n             rust_profile_generate: matches.opt_str(\"rust-profile-generate\"),\n+            llvm_profile_use: matches.opt_str(\"llvm-profile-use\"),\n+            llvm_profile_generate: matches.opt_present(\"llvm-profile-generate\"),\n         }\n     }\n }"}, {"sha": "2172b01706d8845ccd8c6e581e520cc879d53383", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/451abd311c90e0e94c8c364a282c472323528cf5/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451abd311c90e0e94c8c364a282c472323528cf5/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=451abd311c90e0e94c8c364a282c472323528cf5", "patch": "@@ -189,6 +189,14 @@ impl Step for Llvm {\n             .define(\"LLVM_TARGET_ARCH\", target_native.split('-').next().unwrap())\n             .define(\"LLVM_DEFAULT_TARGET_TRIPLE\", target_native);\n \n+        if builder.config.llvm_profile_generate {\n+            cfg.define(\"LLVM_BUILD_INSTRUMENTED\", \"IR\");\n+            cfg.define(\"LLVM_BUILD_RUNTIME\", \"No\");\n+        }\n+        if let Some(path) = builder.config.llvm_profile_use.as_ref() {\n+            cfg.define(\"LLVM_PROFDATA_FILE\", &path);\n+        }\n+\n         if target != \"aarch64-apple-darwin\" && !target.contains(\"windows\") {\n             cfg.define(\"LLVM_ENABLE_ZLIB\", \"ON\");\n         } else {"}, {"sha": "e29d990f0f974e1c0d92bcf00f286eb4162d8b45", "filename": "src/ci/docker/host-x86_64/dist-x86_64-linux/Dockerfile", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/451abd311c90e0e94c8c364a282c472323528cf5/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/451abd311c90e0e94c8c364a282c472323528cf5/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile?ref=451abd311c90e0e94c8c364a282c472323528cf5", "patch": "@@ -82,6 +82,12 @@ COPY host-x86_64/dist-x86_64-linux/build-clang.sh /tmp/\n RUN ./build-clang.sh\n ENV CC=clang CXX=clang++\n \n+ENV PERF_COMMIT 1e19fc4c6168d2f7596e512f42f358f245d8f09d\n+RUN curl -LS -o perf.zip https://github.com/rust-lang/rustc-perf/archive/$PERF_COMMIT.zip && \\\n+    unzip perf.zip && \\\n+    mv rustc-perf-$PERF_COMMIT rustc-perf && \\\n+    rm perf.zip\n+\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n "}, {"sha": "ed5edfec4e1a6c303b2b7a044db8a1db3bc032c0", "filename": "src/ci/docker/host-x86_64/dist-x86_64-linux/build-clang.sh", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/451abd311c90e0e94c8c364a282c472323528cf5/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2Fbuild-clang.sh", "raw_url": "https://github.com/rust-lang/rust/raw/451abd311c90e0e94c8c364a282c472323528cf5/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2Fbuild-clang.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2Fbuild-clang.sh?ref=451abd311c90e0e94c8c364a282c472323528cf5", "patch": "@@ -20,14 +20,18 @@ cd clang-build\n # include path, /rustroot/include, to clang's default include path.\n INC=\"/rustroot/include:/usr/include\"\n \n+# We need compiler-rt for the profile runtime (used later to PGO the LLVM build)\n+# but sanitizers aren't currently building. Since we don't need those, just\n+# disable them.\n hide_output \\\n     cmake ../llvm \\\n       -DCMAKE_C_COMPILER=/rustroot/bin/gcc \\\n       -DCMAKE_CXX_COMPILER=/rustroot/bin/g++ \\\n       -DCMAKE_BUILD_TYPE=Release \\\n       -DCMAKE_INSTALL_PREFIX=/rustroot \\\n+      -DCOMPILER_RT_BUILD_SANITIZERS=OFF \\\n       -DLLVM_TARGETS_TO_BUILD=X86 \\\n-      -DLLVM_ENABLE_PROJECTS=\"clang;lld\" \\\n+      -DLLVM_ENABLE_PROJECTS=\"clang;lld;compiler-rt\" \\\n       -DC_INCLUDE_DIRS=\"$INC\"\n \n hide_output make -j$(nproc)"}, {"sha": "e35e3e670cc64c0b23c4d936e3eef1bab0977098", "filename": "src/ci/pgo.sh", "status": "modified", "additions": 47, "deletions": 49, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/451abd311c90e0e94c8c364a282c472323528cf5/src%2Fci%2Fpgo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/451abd311c90e0e94c8c364a282c472323528cf5/src%2Fci%2Fpgo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fpgo.sh?ref=451abd311c90e0e94c8c364a282c472323528cf5", "patch": "@@ -5,61 +5,59 @@ set -euxo pipefail\n rm -rf /tmp/rustc-pgo\n \n python3 ../x.py build --target=$PGO_HOST --host=$PGO_HOST \\\n-    --stage 2 library/std --rust-profile-generate=/tmp/rustc-pgo\n+    --stage 2 library/std \\\n+    --rust-profile-generate=/tmp/rustc-pgo \\\n+    --llvm-profile-generate\n \n+# Profile libcore compilation in opt-level=0 and opt-level=3\n RUSTC_BOOTSTRAP=1 ./build/$PGO_HOST/stage2/bin/rustc --edition=2018 \\\n     --crate-type=lib ../library/core/src/lib.rs\n-\n-# Download and build a single-file stress test benchmark on perf.rust-lang.org.\n-function pgo_perf_benchmark {\n-    local PERF=1e19fc4c6168d2f7596e512f42f358f245d8f09d\n-    local github_prefix=https://raw.githubusercontent.com/rust-lang/rustc-perf/$PERF\n-    local name=$1\n-    local edition=$2\n-    curl -o /tmp/$name.rs $github_prefix/collector/benchmarks/$name/src/lib.rs\n-\n-    RUSTC_BOOTSTRAP=1 ./build/$PGO_HOST/stage2/bin/rustc --edition=$edition \\\n-        --crate-type=lib /tmp/$name.rs\n-}\n-\n-pgo_perf_benchmark externs 2018\n-pgo_perf_benchmark ctfe-stress-4 2018\n-pgo_perf_benchmark inflate 2015\n-\n-cp -pri ../src/tools/cargo /tmp/cargo\n-\n-# The Cargo repository does not have a Cargo.lock in it, as it relies on the\n-# lockfile already present in the rust-lang/rust monorepo. This decision breaks\n-# down when Cargo is built outside the monorepo though (like in this case),\n-# resulting in a build without any dependency locking.\n-#\n-# To ensure Cargo is built with locked dependencies even during PGO profiling\n-# the following command copies the monorepo's lockfile into the Cargo temporary\n-# directory. Cargo will *not* keep that lockfile intact, as it will remove all\n-# the dependencies Cargo itself doesn't rely on. Still, it will prevent\n-# building Cargo with arbitrary dependency versions.\n-#\n-# See #81378 for the bug that prompted adding this.\n-cp -p ../Cargo.lock /tmp/cargo\n-\n-# Build cargo (with some flags)\n-function pgo_cargo {\n-    RUSTC=./build/$PGO_HOST/stage2/bin/rustc \\\n-        ./build/$PGO_HOST/stage0/bin/cargo $@ \\\n-        --manifest-path /tmp/cargo/Cargo.toml\n-}\n-\n-# Build a couple different variants of Cargo\n-CARGO_INCREMENTAL=1 pgo_cargo check\n-echo 'pub fn barbarbar() {}' >> /tmp/cargo/src/cargo/lib.rs\n-CARGO_INCREMENTAL=1 pgo_cargo check\n-touch /tmp/cargo/src/cargo/lib.rs\n-CARGO_INCREMENTAL=1 pgo_cargo check\n-pgo_cargo build --release\n+RUSTC_BOOTSTRAP=1 ./build/$PGO_HOST/stage2/bin/rustc --edition=2018 \\\n+    --crate-type=lib -Copt-level=3 ../library/core/src/lib.rs\n+\n+cp -r /tmp/rustc-perf ./\n+chown -R $(whoami): ./rustc-perf\n+cd rustc-perf\n+\n+# Build the collector ahead of time, which is needed to make sure the rustc-fake\n+# binary used by the collector is present.\n+RUSTC=/checkout/obj/build/$PGO_HOST/stage0/bin/rustc \\\n+RUSTC_BOOTSTRAP=1 \\\n+/checkout/obj/build/$PGO_HOST/stage0/bin/cargo build -p collector\n+\n+# benchmark using profile_local with eprintln, which essentially just means\n+# don't actually benchmark -- just make sure we run rustc a bunch of times.\n+RUST_LOG=collector=debug \\\n+RUSTC=/checkout/obj/build/$PGO_HOST/stage0/bin/rustc \\\n+RUSTC_BOOTSTRAP=1 \\\n+/checkout/obj/build/$PGO_HOST/stage0/bin/cargo run -p collector --bin collector -- \\\n+        profile_local \\\n+        eprintln \\\n+        /checkout/obj/build/$PGO_HOST/stage2/bin/rustc \\\n+        Test \\\n+        --builds Check,Debug,Opt \\\n+        --cargo /checkout/obj/build/$PGO_HOST/stage0/bin/cargo \\\n+        --runs All \\\n+        --include externs,ctfe-stress-4,inflate,cargo,token-stream-stress,match-stress-enum\n+\n+cd /checkout/obj\n \n # Merge the profile data we gathered\n ./build/$PGO_HOST/llvm/bin/llvm-profdata \\\n     merge -o /tmp/rustc-pgo.profdata /tmp/rustc-pgo\n \n+# Merge the profile data we gathered for LLVM\n+# Note that this uses the profdata from the clang we used to build LLVM,\n+# which likely has a different version than our in-tree clang.\n+/rustroot/bin/llvm-profdata \\\n+    merge -o /tmp/llvm-pgo.profdata ./build/$PGO_HOST/llvm/build/profiles\n+\n+# Rustbuild currently doesn't support rebuilding LLVM when PGO options\n+# change (or any other llvm-related options); so just clear out the relevant\n+# directories ourselves.\n+rm -r ./build/$PGO_HOST/llvm ./build/$PGO_HOST/lld\n+\n # This produces the actual final set of artifacts.\n-$@ --rust-profile-use=/tmp/rustc-pgo.profdata\n+$@ \\\n+    --rust-profile-use=/tmp/rustc-pgo.profdata \\\n+    --llvm-profile-use=/tmp/llvm-pgo.profdata"}]}