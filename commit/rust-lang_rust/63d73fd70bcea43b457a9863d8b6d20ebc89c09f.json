{"sha": "63d73fd70bcea43b457a9863d8b6d20ebc89c09f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzZDczZmQ3MGJjZWE0M2I0NTdhOTg2M2Q4YjZkMjBlYmM4OWMwOWY=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-05-10T01:13:40Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-06-10T21:43:59Z"}, "message": "Add test suite", "tree": {"sha": "61b622798bd09f29b0ba1af592b4b9c3b2f87ddb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61b622798bd09f29b0ba1af592b4b9c3b2f87ddb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63d73fd70bcea43b457a9863d8b6d20ebc89c09f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63d73fd70bcea43b457a9863d8b6d20ebc89c09f", "html_url": "https://github.com/rust-lang/rust/commit/63d73fd70bcea43b457a9863d8b6d20ebc89c09f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63d73fd70bcea43b457a9863d8b6d20ebc89c09f/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9de451c6d67129dc34e10d05f5bcb7983897aa2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9de451c6d67129dc34e10d05f5bcb7983897aa2b", "html_url": "https://github.com/rust-lang/rust/commit/9de451c6d67129dc34e10d05f5bcb7983897aa2b"}], "stats": {"total": 133, "additions": 133, "deletions": 0}, "files": [{"sha": "05afd6d40197745303fc8ef57a0e0e221d52a998", "filename": "src/test/run-pass/async-fn-size.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/63d73fd70bcea43b457a9863d8b6d20ebc89c09f/src%2Ftest%2Frun-pass%2Fasync-fn-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63d73fd70bcea43b457a9863d8b6d20ebc89c09f/src%2Ftest%2Frun-pass%2Fasync-fn-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasync-fn-size.rs?ref=63d73fd70bcea43b457a9863d8b6d20ebc89c09f", "patch": "@@ -0,0 +1,106 @@\n+// edition:2018\n+// aux-build:arc_wake.rs\n+\n+#![feature(async_await, await_macro)]\n+\n+extern crate arc_wake;\n+\n+use std::pin::Pin;\n+use std::future::Future;\n+use std::sync::{\n+    Arc,\n+    atomic::{self, AtomicUsize},\n+};\n+use std::task::{Context, Poll};\n+use arc_wake::ArcWake;\n+\n+struct Counter {\n+    wakes: AtomicUsize,\n+}\n+\n+impl ArcWake for Counter {\n+    fn wake(self: Arc<Self>) {\n+        Self::wake_by_ref(&self)\n+    }\n+    fn wake_by_ref(arc_self: &Arc<Self>) {\n+        arc_self.wakes.fetch_add(1, atomic::Ordering::SeqCst);\n+    }\n+}\n+\n+struct WakeOnceThenComplete(bool, u8);\n+\n+impl Future for WakeOnceThenComplete {\n+    type Output = u8;\n+    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<u8> {\n+        if self.0 {\n+            Poll::Ready(self.1)\n+        } else {\n+            cx.waker().wake_by_ref();\n+            self.0 = true;\n+            Poll::Pending\n+        }\n+    }\n+}\n+\n+fn wait(fut: impl Future<Output = u8>) -> u8 {\n+    let mut fut = Box::pin(fut);\n+    let counter = Arc::new(Counter { wakes: AtomicUsize::new(0) });\n+    let waker = ArcWake::into_waker(counter.clone());\n+    let mut cx = Context::from_waker(&waker);\n+    loop {\n+        match fut.as_mut().poll(&mut cx) {\n+            Poll::Ready(out) => return out,\n+            Poll::Pending => (),\n+        }\n+    }\n+}\n+\n+fn base() -> WakeOnceThenComplete { WakeOnceThenComplete(false, 1) }\n+\n+async fn await1_level1() -> u8 {\n+    await!(base())\n+}\n+\n+async fn await2_level1() -> u8 {\n+    await!(base()) + await!(base())\n+}\n+\n+async fn await3_level1() -> u8 {\n+    await!(base()) + await!(base()) + await!(base())\n+}\n+\n+async fn await3_level2() -> u8 {\n+    await!(await3_level1()) + await!(await3_level1()) + await!(await3_level1())\n+}\n+\n+async fn await3_level3() -> u8 {\n+    await!(await3_level2()) + await!(await3_level2()) + await!(await3_level2())\n+}\n+\n+async fn await3_level4() -> u8 {\n+    await!(await3_level3()) + await!(await3_level3()) + await!(await3_level3())\n+}\n+\n+async fn await3_level5() -> u8 {\n+    await!(await3_level4()) + await!(await3_level4()) + await!(await3_level4())\n+}\n+\n+fn main() {\n+    assert_eq!(2, std::mem::size_of_val(&base()));\n+    assert_eq!(8, std::mem::size_of_val(&await1_level1()));\n+    assert_eq!(12, std::mem::size_of_val(&await2_level1()));\n+    assert_eq!(12, std::mem::size_of_val(&await3_level1()));\n+    assert_eq!(20, std::mem::size_of_val(&await3_level2()));\n+    assert_eq!(28, std::mem::size_of_val(&await3_level3()));\n+    assert_eq!(36, std::mem::size_of_val(&await3_level4()));\n+    assert_eq!(44, std::mem::size_of_val(&await3_level5()));\n+\n+    assert_eq!(1,   wait(base()));\n+    assert_eq!(1,   wait(await1_level1()));\n+    assert_eq!(2,   wait(await2_level1()));\n+    assert_eq!(3,   wait(await3_level1()));\n+    assert_eq!(9,   wait(await3_level2()));\n+    assert_eq!(27,  wait(await3_level3()));\n+    assert_eq!(81,  wait(await3_level4()));\n+    assert_eq!(243, wait(await3_level5()));\n+}"}, {"sha": "704484a480e26a38ea993a8365765ead108f4347", "filename": "src/test/run-pass/generator/overlap-locals.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/63d73fd70bcea43b457a9863d8b6d20ebc89c09f/src%2Ftest%2Frun-pass%2Fgenerator%2Foverlap-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63d73fd70bcea43b457a9863d8b6d20ebc89c09f/src%2Ftest%2Frun-pass%2Fgenerator%2Foverlap-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Foverlap-locals.rs?ref=63d73fd70bcea43b457a9863d8b6d20ebc89c09f", "patch": "@@ -0,0 +1,27 @@\n+#![feature(generators)]\n+\n+fn main() {\n+    let a = || {\n+        {\n+            let w: i32 = 4;\n+            yield;\n+            println!(\"{:?}\", w);\n+        }\n+        {\n+            let x: i32 = 5;\n+            yield;\n+            println!(\"{:?}\", x);\n+        }\n+        {\n+            let y: i32 = 6;\n+            yield;\n+            println!(\"{:?}\", y);\n+        }\n+        {\n+            let z: i32 = 7;\n+            yield;\n+            println!(\"{:?}\", z);\n+        }\n+    };\n+    assert_eq!(8, std::mem::size_of_val(&a));\n+}"}]}