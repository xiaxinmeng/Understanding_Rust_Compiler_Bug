{"sha": "eed98d55fb39027cdcfbcbdac067f993848a3e60", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlZDk4ZDU1ZmIzOTAyN2NkY2ZiY2JkYWMwNjdmOTkzODQ4YTNlNjA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-12-20T03:53:39Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-12-20T19:03:26Z"}, "message": "Various tweaks", "tree": {"sha": "4972113393c590a6352ae228c883608827617412", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4972113393c590a6352ae228c883608827617412"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eed98d55fb39027cdcfbcbdac067f993848a3e60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eed98d55fb39027cdcfbcbdac067f993848a3e60", "html_url": "https://github.com/rust-lang/rust/commit/eed98d55fb39027cdcfbcbdac067f993848a3e60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eed98d55fb39027cdcfbcbdac067f993848a3e60/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8749250327be612f2ab6e9de61a11b95353a60b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8749250327be612f2ab6e9de61a11b95353a60b0", "html_url": "https://github.com/rust-lang/rust/commit/8749250327be612f2ab6e9de61a11b95353a60b0"}], "stats": {"total": 91, "additions": 42, "deletions": 49}, "files": [{"sha": "31e054ec1cb93d1f78dae98c08715bfda02e941a", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eed98d55fb39027cdcfbcbdac067f993848a3e60/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed98d55fb39027cdcfbcbdac067f993848a3e60/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=eed98d55fb39027cdcfbcbdac067f993848a3e60", "patch": "@@ -170,7 +170,7 @@ fn configure_main(this: &mut EntryContext) {\n                       defined at the crate level. Either move the definition or \\\n                       attach the `#[main]` attribute to override this behavior.\");\n             for &(_, span) in &this.non_main_fns {\n-                err.span_label(span, \"here is a function named 'main'\");\n+                err.span_note(span, \"here is a function named 'main'\");\n             }\n             err.emit();\n             this.session.abort_if_errors();"}, {"sha": "fd171b89924701f7a268edc9c37f0dd46603646c", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eed98d55fb39027cdcfbcbdac067f993848a3e60/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed98d55fb39027cdcfbcbdac067f993848a3e60/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=eed98d55fb39027cdcfbcbdac067f993848a3e60", "patch": "@@ -402,8 +402,8 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                             );\n                             // if we had a catchall pattern, hint at that\n                             if let Some(catchall) = catchall {\n-                                err.span_label(pat.span, \"this is an unreachable pattern\");\n-                                err.span_label(catchall, \"this pattern matches any value\");\n+                                err.span_label(pat.span, \"unreachable pattern\");\n+                                err.span_label(catchall, \"matches any value\");\n                             }\n                             err.emit();\n                         },"}, {"sha": "72017ec215f82f4ac0a4713a5611991dc4efb58c", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eed98d55fb39027cdcfbcbdac067f993848a3e60/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed98d55fb39027cdcfbcbdac067f993848a3e60/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=eed98d55fb39027cdcfbcbdac067f993848a3e60", "patch": "@@ -220,7 +220,7 @@ impl<'a> Resolver<'a> {\n                         ResolutionError::SelfImportCanOnlyAppearOnceInTheList);\n \n                     for other_span in self_spans.iter().skip(1) {\n-                        e.span_note(*other_span, \"another `self` import appears here\");\n+                        e.span_label(*other_span, \"another `self` import appears here\");\n                     }\n \n                     e.emit();"}, {"sha": "e7bd44759164eda5d904feecf8920a9a1e2e8c73", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/eed98d55fb39027cdcfbcbdac067f993848a3e60/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed98d55fb39027cdcfbcbdac067f993848a3e60/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=eed98d55fb39027cdcfbcbdac067f993848a3e60", "patch": "@@ -290,17 +290,17 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n                              \"`self` imports are only allowed within a { } list\")\n         }\n         ResolutionError::SelfImportCanOnlyAppearOnceInTheList => {\n-            struct_span_err!(resolver.session,\n-                             span,\n-                             E0430,\n-                             \"`self` import can only appear once in the list\")\n+            let mut err = struct_span_err!(resolver.session, span, E0430,\n+                                           \"`self` import can only appear once in an import list\");\n+            err.span_label(span, \"can only appear once in an import list\");\n+            err\n         }\n         ResolutionError::SelfImportOnlyInImportListWithNonEmptyPrefix => {\n-            struct_span_err!(resolver.session,\n-                             span,\n-                             E0431,\n-                             \"`self` import can only appear in an import list with a \\\n-                              non-empty prefix\")\n+            let mut err = struct_span_err!(resolver.session, span, E0431,\n+                                           \"`self` import can only appear in an import list with \\\n+                                            a non-empty prefix\");\n+            err.span_label(span, \"can only appear in an import list with a non-empty prefix\");\n+            err\n         }\n         ResolutionError::UnresolvedImport(name) => {\n             let (span, msg) = match name {\n@@ -320,18 +320,17 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n             err\n         }\n         ResolutionError::CannotCaptureDynamicEnvironmentInFnItem => {\n-            struct_span_err!(resolver.session,\n-                             span,\n-                             E0434,\n-                             \"{}\",\n-                             \"can't capture dynamic environment in a fn item; use the || { ... } \\\n-                              closure form instead\")\n+            let mut err = struct_span_err!(resolver.session,\n+                                           span,\n+                                           E0434,\n+                                           \"{}\",\n+                                           \"can't capture dynamic environment in a fn item\");\n+            err.help(\"use the `|| { ... }` closure form instead\");\n+            err\n         }\n         ResolutionError::AttemptToUseNonConstantValueInConstant => {\n-            let mut err = struct_span_err!(resolver.session,\n-                             span,\n-                             E0435,\n-                             \"attempt to use a non-constant value in a constant\");\n+            let mut err = struct_span_err!(resolver.session, span, E0435,\n+                                           \"attempt to use a non-constant value in a constant\");\n             err.span_label(span, \"non-constant value\");\n             err\n         }\n@@ -351,8 +350,7 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n             let mut err = struct_span_err!(resolver.session, span, E0128,\n                                            \"type parameters with a default cannot use \\\n                                             forward declared identifiers\");\n-            err.span_label(span, format!(\"defaulted type parameters \\\n-                                           cannot be forward declared\"));\n+            err.span_label(span, format!(\"defaulted type parameters cannot be forward declared\"));\n             err\n         }\n     }\n@@ -3941,7 +3939,7 @@ impl<'a> Resolver<'a> {\n \n                     feature_err(&self.session.parse_sess, feature,\n                                 attr.span, GateIssue::Language, msg)\n-                        .span_note(binding.span(), \"procedural macro imported here\")\n+                        .span_label(binding.span(), \"procedural macro imported here\")\n                         .emit();\n                 }\n             }"}, {"sha": "6a5e4cfef895a40021b702c17b75d2b835c57f5d", "filename": "src/test/compile-fail/bad-env-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eed98d55fb39027cdcfbcbdac067f993848a3e60/src%2Ftest%2Fcompile-fail%2Fbad-env-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed98d55fb39027cdcfbcbdac067f993848a3e60/src%2Ftest%2Fcompile-fail%2Fbad-env-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-env-capture.rs?ref=eed98d55fb39027cdcfbcbdac067f993848a3e60", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: can't capture dynamic environment in a fn item;\n+// error-pattern: can't capture dynamic environment in a fn item\n fn foo() {\n     let x: isize;\n     fn bar() { log(debug, x); }"}, {"sha": "cf67c73c539799afdb51bedb0562ef4a5cf52f88", "filename": "src/test/compile-fail/bad-env-capture2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eed98d55fb39027cdcfbcbdac067f993848a3e60/src%2Ftest%2Fcompile-fail%2Fbad-env-capture2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed98d55fb39027cdcfbcbdac067f993848a3e60/src%2Ftest%2Fcompile-fail%2Fbad-env-capture2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-env-capture2.rs?ref=eed98d55fb39027cdcfbcbdac067f993848a3e60", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: can't capture dynamic environment in a fn item;\n+// error-pattern: can't capture dynamic environment in a fn item\n fn foo(x: isize) {\n     fn bar() { log(debug, x); }\n }"}, {"sha": "a30c6770b87ff839be0fdf769540b4db4fcffe8d", "filename": "src/test/compile-fail/bad-env-capture3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eed98d55fb39027cdcfbcbdac067f993848a3e60/src%2Ftest%2Fcompile-fail%2Fbad-env-capture3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed98d55fb39027cdcfbcbdac067f993848a3e60/src%2Ftest%2Fcompile-fail%2Fbad-env-capture3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-env-capture3.rs?ref=eed98d55fb39027cdcfbcbdac067f993848a3e60", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: can't capture dynamic environment in a fn item;\n+// error-pattern: can't capture dynamic environment in a fn item\n fn foo(x: isize) {\n     fn mth() {\n         fn bar() { log(debug, x); }"}, {"sha": "984385f4cc0ebbc696a1f9c0202ba8ddfbbe8cb0", "filename": "src/test/compile-fail/capture1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eed98d55fb39027cdcfbcbdac067f993848a3e60/src%2Ftest%2Fcompile-fail%2Fcapture1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed98d55fb39027cdcfbcbdac067f993848a3e60/src%2Ftest%2Fcompile-fail%2Fcapture1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcapture1.rs?ref=eed98d55fb39027cdcfbcbdac067f993848a3e60", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-// error-pattern: can't capture dynamic environment in a fn item;\n+// error-pattern: can't capture dynamic environment in a fn item\n \n fn main() {\n     let bar: isize = 5;"}, {"sha": "66e43d0859f466981eaab8c4a9b4455a7f2e994f", "filename": "src/test/ui/issue-30302.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eed98d55fb39027cdcfbcbdac067f993848a3e60/src%2Ftest%2Fui%2Fissue-30302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eed98d55fb39027cdcfbcbdac067f993848a3e60/src%2Ftest%2Fui%2Fissue-30302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-30302.stderr?ref=eed98d55fb39027cdcfbcbdac067f993848a3e60", "patch": "@@ -10,10 +10,10 @@ error: unreachable pattern\n   --> $DIR/issue-30302.rs:25:9\n    |\n 23 |         Nil => true,\n-   |         --- this pattern matches any value\n+   |         --- matches any value\n 24 | //~^ WARN pattern binding `Nil` is named the same as one of the variants of the type `Stack`\n 25 |         _ => false\n-   |         ^ this is an unreachable pattern\n+   |         ^ unreachable pattern\n    |\n note: lint level defined here\n   --> $DIR/issue-30302.rs:14:9"}, {"sha": "1db48346c6e44ef7b0fdc072094e19fda36adcd6", "filename": "src/test/ui/issue-31221.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eed98d55fb39027cdcfbcbdac067f993848a3e60/src%2Ftest%2Fui%2Fissue-31221.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eed98d55fb39027cdcfbcbdac067f993848a3e60/src%2Ftest%2Fui%2Fissue-31221.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-31221.stderr?ref=eed98d55fb39027cdcfbcbdac067f993848a3e60", "patch": "@@ -2,9 +2,9 @@ error: unreachable pattern\n   --> $DIR/issue-31221.rs:28:9\n    |\n 27 |         Var3 => (),\n-   |         ---- this pattern matches any value\n+   |         ---- matches any value\n 28 |         Var2 => (),\n-   |         ^^^^ this is an unreachable pattern\n+   |         ^^^^ unreachable pattern\n    |\n note: lint level defined here\n   --> $DIR/issue-31221.rs:14:9\n@@ -16,19 +16,17 @@ error: unreachable pattern\n   --> $DIR/issue-31221.rs:34:9\n    |\n 33 |         &Var3 => (),\n-   |         ----- this pattern matches any value\n+   |         ----- matches any value\n 34 |         &Var2 => (),\n-   |         ^^^^^ this is an unreachable pattern\n-   |\n+   |         ^^^^^ unreachable pattern\n \n error: unreachable pattern\n   --> $DIR/issue-31221.rs:41:9\n    |\n 40 |         (c, d) => (),\n-   |         ------ this pattern matches any value\n+   |         ------ matches any value\n 41 |         anything => ()\n-   |         ^^^^^^^^ this is an unreachable pattern\n-   |\n+   |         ^^^^^^^^ unreachable pattern\n \n error: aborting due to 3 previous errors\n "}, {"sha": "37495cd1724eee5aacf37fd6cd18ec035911aa93", "filename": "src/test/ui/use-mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eed98d55fb39027cdcfbcbdac067f993848a3e60/src%2Ftest%2Fui%2Fuse-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed98d55fb39027cdcfbcbdac067f993848a3e60/src%2Ftest%2Fui%2Fuse-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse-mod.rs?ref=eed98d55fb39027cdcfbcbdac067f993848a3e60", "patch": "@@ -10,7 +10,7 @@\n \n use foo::bar::{\n     self,\n-//~^ ERROR `self` import can only appear once in the list\n+//~^ ERROR `self` import can only appear once in an import list\n     Bar,\n     self\n //~^ ERROR the name `bar` is defined multiple times"}, {"sha": "bb64909e64a0c5b67b780c2f9dbfee59205b5be5", "filename": "src/test/ui/use-mod.stderr", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eed98d55fb39027cdcfbcbdac067f993848a3e60/src%2Ftest%2Fui%2Fuse-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eed98d55fb39027cdcfbcbdac067f993848a3e60/src%2Ftest%2Fui%2Fuse-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse-mod.stderr?ref=eed98d55fb39027cdcfbcbdac067f993848a3e60", "patch": "@@ -1,20 +1,17 @@\n-error[E0430]: `self` import can only appear once in the list\n+error[E0430]: `self` import can only appear once in an import list\n   --> $DIR/use-mod.rs:12:5\n    |\n 12 |     self,\n-   |     ^^^^\n-   |\n-note: another `self` import appears here\n-  --> $DIR/use-mod.rs:15:5\n-   |\n+   |     ^^^^ can only appear once in an import list\n+...\n 15 |     self\n-   |     ^^^^\n+   |     ---- another `self` import appears here\n \n error[E0431]: `self` import can only appear in an import list with a non-empty prefix\n   --> $DIR/use-mod.rs:19:6\n    |\n 19 | use {self};\n-   |      ^^^^\n+   |      ^^^^ can only appear in an import list with a non-empty prefix\n \n error[E0252]: the name `bar` is defined multiple times\n   --> $DIR/use-mod.rs:15:5"}]}