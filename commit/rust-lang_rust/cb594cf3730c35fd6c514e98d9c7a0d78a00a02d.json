{"sha": "cb594cf3730c35fd6c514e98d9c7a0d78a00a02d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNTk0Y2YzNzMwYzM1ZmQ2YzUxNGU5OGQ5YzdhMGQ3OGEwMGEwMmQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-09-15T17:18:49Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-09-16T22:34:42Z"}, "message": "Treat `dyn` as a keyword in the 2018 edition", "tree": {"sha": "4db20dec82d35c17b79cd49ef599cea3b42ac9f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4db20dec82d35c17b79cd49ef599cea3b42ac9f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb594cf3730c35fd6c514e98d9c7a0d78a00a02d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb594cf3730c35fd6c514e98d9c7a0d78a00a02d", "html_url": "https://github.com/rust-lang/rust/commit/cb594cf3730c35fd6c514e98d9c7a0d78a00a02d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb594cf3730c35fd6c514e98d9c7a0d78a00a02d/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90d36fb5905bbe5004f5b465ea14b53d10dae260", "url": "https://api.github.com/repos/rust-lang/rust/commits/90d36fb5905bbe5004f5b465ea14b53d10dae260", "html_url": "https://github.com/rust-lang/rust/commit/90d36fb5905bbe5004f5b465ea14b53d10dae260"}], "stats": {"total": 86, "additions": 72, "deletions": 14}, "files": [{"sha": "7da84ccd28dd2692d8fcc22e42e1d0eb79208d68", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb594cf3730c35fd6c514e98d9c7a0d78a00a02d/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb594cf3730c35fd6c514e98d9c7a0d78a00a02d/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=cb594cf3730c35fd6c514e98d9c7a0d78a00a02d", "patch": "@@ -1937,8 +1937,7 @@ impl EarlyLintPass for KeywordIdents {\n         let next_edition = match cx.sess.edition() {\n             Edition::Edition2015 => {\n                 match &ident.as_str()[..] {\n-                    \"async\" |\n-                    \"try\" => Edition::Edition2018,\n+                    \"async\" | \"try\" | \"dyn\" => Edition::Edition2018,\n                     _ => return,\n                 }\n             }"}, {"sha": "ab1f46c4bb921bc03130101e7d63ef565d228634", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb594cf3730c35fd6c514e98d9c7a0d78a00a02d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb594cf3730c35fd6c514e98d9c7a0d78a00a02d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=cb594cf3730c35fd6c514e98d9c7a0d78a00a02d", "patch": "@@ -1562,8 +1562,9 @@ impl<'a> Parser<'a> {\n             impl_dyn_multi = bounds.len() > 1 || self.prev_token_kind == PrevTokenKind::Plus;\n             TyKind::ImplTrait(ast::DUMMY_NODE_ID, bounds)\n         } else if self.check_keyword(keywords::Dyn) &&\n-                  self.look_ahead(1, |t| t.can_begin_bound() &&\n-                                         !can_continue_type_after_non_fn_ident(t)) {\n+                  (self.span.edition() == Edition::Edition2018 ||\n+                   self.look_ahead(1, |t| t.can_begin_bound() &&\n+                                         !can_continue_type_after_non_fn_ident(t))) {\n             self.bump(); // `dyn`\n             // Always parse bounds greedily for better error recovery.\n             let bounds = self.parse_generic_bounds()?;"}, {"sha": "01bc7f6ad302be195c1ef2369a219f3573fab4ea", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb594cf3730c35fd6c514e98d9c7a0d78a00a02d/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb594cf3730c35fd6c514e98d9c7a0d78a00a02d/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=cb594cf3730c35fd6c514e98d9c7a0d78a00a02d", "patch": "@@ -136,6 +136,7 @@ fn ident_can_begin_type(ident: ast::Ident, is_raw: bool) -> bool {\n         keywords::Unsafe.name(),\n         keywords::Extern.name(),\n         keywords::Typeof.name(),\n+        keywords::Dyn.name(),\n     ].contains(&ident.name)\n }\n "}, {"sha": "d412412fc655e8782e8bae6943e3bbe7bb8f3ba7", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cb594cf3730c35fd6c514e98d9c7a0d78a00a02d/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb594cf3730c35fd6c514e98d9c7a0d78a00a02d/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=cb594cf3730c35fd6c514e98d9c7a0d78a00a02d", "patch": "@@ -414,26 +414,25 @@ declare_keywords! {\n     (50, Yield,              \"yield\")\n \n     // Edition-specific keywords reserved for future use.\n-    (51, Async,              \"async\") // >= 2018 Edition Only\n-    (52, Try,                \"try\") // >= 2018 Edition Only\n+    (51, Async,              \"async\") // >= 2018 Edition only\n+    (52, Dyn,                \"dyn\") // >= 2018 Edition only\n+    (53, Try,                \"try\") // >= 2018 Edition only\n \n     // Special lifetime names\n-    (53, UnderscoreLifetime, \"'_\")\n-    (54, StaticLifetime,     \"'static\")\n+    (54, UnderscoreLifetime, \"'_\")\n+    (55, StaticLifetime,     \"'static\")\n \n     // Weak keywords, have special meaning only in specific contexts.\n-    (55, Auto,               \"auto\")\n-    (56, Catch,              \"catch\")\n-    (57, Default,            \"default\")\n-    (58, Dyn,                \"dyn\")\n+    (56, Auto,               \"auto\")\n+    (57, Catch,              \"catch\")\n+    (58, Default,            \"default\")\n     (59, Union,              \"union\")\n     (60, Existential,        \"existential\")\n }\n \n impl Symbol {\n     fn is_unused_keyword_2018(self) -> bool {\n-        self >= keywords::Async.name() &&\n-        self <= keywords::Try.name()\n+        self >= keywords::Async.name() && self <= keywords::Try.name()\n     }\n }\n "}, {"sha": "e9cda1af939321d435923db4d948ca52fe6fb0af", "filename": "src/test/ui/rust-2018/dyn-keyword.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb594cf3730c35fd6c514e98d9c7a0d78a00a02d/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cb594cf3730c35fd6c514e98d9c7a0d78a00a02d/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.fixed?ref=cb594cf3730c35fd6c514e98d9c7a0d78a00a02d", "patch": "@@ -0,0 +1,10 @@\n+// edition:2015\n+// run-rustfix\n+\n+#![allow(unused_variables)]\n+#![deny(keyword_idents)]\n+\n+fn main() {\n+    let r#dyn = (); //~ ERROR dyn\n+    //~^ WARN hard error in the 2018 edition\n+}"}, {"sha": "bdd3a90cab9ec40ad43b93c367f876556d76c9d0", "filename": "src/test/ui/rust-2018/dyn-keyword.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb594cf3730c35fd6c514e98d9c7a0d78a00a02d/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb594cf3730c35fd6c514e98d9c7a0d78a00a02d/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.rs?ref=cb594cf3730c35fd6c514e98d9c7a0d78a00a02d", "patch": "@@ -0,0 +1,10 @@\n+// edition:2015\n+// run-rustfix\n+\n+#![allow(unused_variables)]\n+#![deny(keyword_idents)]\n+\n+fn main() {\n+    let dyn = (); //~ ERROR dyn\n+    //~^ WARN hard error in the 2018 edition\n+}"}, {"sha": "5a3e00ab1d96a7c906d97bdca53ce76fb56c9238", "filename": "src/test/ui/rust-2018/dyn-keyword.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cb594cf3730c35fd6c514e98d9c7a0d78a00a02d/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb594cf3730c35fd6c514e98d9c7a0d78a00a02d/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.stderr?ref=cb594cf3730c35fd6c514e98d9c7a0d78a00a02d", "patch": "@@ -0,0 +1,16 @@\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-keyword.rs:8:9\n+   |\n+LL |     let dyn = (); //~ ERROR dyn\n+   |         ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+note: lint level defined here\n+  --> $DIR/dyn-keyword.rs:5:9\n+   |\n+LL | #![deny(keyword_idents)]\n+   |         ^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: aborting due to previous error\n+"}, {"sha": "9548df5959bd4d23b8c430fde12b58bc2de0cf9f", "filename": "src/test/ui/rust-2018/dyn-trait-compatibility.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb594cf3730c35fd6c514e98d9c7a0d78a00a02d/src%2Ftest%2Fui%2Frust-2018%2Fdyn-trait-compatibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb594cf3730c35fd6c514e98d9c7a0d78a00a02d/src%2Ftest%2Fui%2Frust-2018%2Fdyn-trait-compatibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fdyn-trait-compatibility.rs?ref=cb594cf3730c35fd6c514e98d9c7a0d78a00a02d", "patch": "@@ -0,0 +1,8 @@\n+// edition:2018\n+\n+type A0 = dyn;\n+type A1 = dyn::dyn; //~ERROR expected identifier, found reserved keyword\n+type A2 = dyn<dyn, dyn>; //~ERROR expected identifier, found `<`\n+type A3 = dyn<<dyn as dyn>::dyn>;\n+\n+fn main() {}"}, {"sha": "ea0483394b5ea1e76589e3c69a32df7367659db2", "filename": "src/test/ui/rust-2018/dyn-trait-compatibility.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cb594cf3730c35fd6c514e98d9c7a0d78a00a02d/src%2Ftest%2Fui%2Frust-2018%2Fdyn-trait-compatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb594cf3730c35fd6c514e98d9c7a0d78a00a02d/src%2Ftest%2Fui%2Frust-2018%2Fdyn-trait-compatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fdyn-trait-compatibility.stderr?ref=cb594cf3730c35fd6c514e98d9c7a0d78a00a02d", "patch": "@@ -0,0 +1,14 @@\n+error: expected identifier, found reserved keyword `dyn`\n+  --> $DIR/dyn-trait-compatibility.rs:4:16\n+   |\n+LL | type A1 = dyn::dyn; //~ERROR expected identifier, found reserved keyword\n+   |                ^^^ expected identifier, found reserved keyword\n+\n+error: expected identifier, found `<`\n+  --> $DIR/dyn-trait-compatibility.rs:5:14\n+   |\n+LL | type A2 = dyn<dyn, dyn>; //~ERROR expected identifier, found `<`\n+   |              ^ expected identifier\n+\n+error: aborting due to 2 previous errors\n+"}]}