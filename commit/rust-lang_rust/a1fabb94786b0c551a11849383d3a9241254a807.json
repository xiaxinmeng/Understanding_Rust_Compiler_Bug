{"sha": "a1fabb94786b0c551a11849383d3a9241254a807", "node_id": "C_kwDOAAsO6NoAKGExZmFiYjk0Nzg2YjBjNTUxYTExODQ5MzgzZDNhOTI0MTI1NGE4MDc", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-01T11:53:17Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-01T11:54:43Z"}, "message": "make miri script work from other working directories", "tree": {"sha": "59c42ae3347b6a13aab60155fe05f509e9dfac6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59c42ae3347b6a13aab60155fe05f509e9dfac6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1fabb94786b0c551a11849383d3a9241254a807", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1fabb94786b0c551a11849383d3a9241254a807", "html_url": "https://github.com/rust-lang/rust/commit/a1fabb94786b0c551a11849383d3a9241254a807", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1fabb94786b0c551a11849383d3a9241254a807/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9e0cf4951c0e27897a3f129cd354d7713020e9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9e0cf4951c0e27897a3f129cd354d7713020e9f", "html_url": "https://github.com/rust-lang/rust/commit/f9e0cf4951c0e27897a3f129cd354d7713020e9f"}], "stats": {"total": 60, "additions": 33, "deletions": 27}, "files": [{"sha": "b84213f93809c9dab26a45e108a8c7cfe71864fa", "filename": "miri", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a1fabb94786b0c551a11849383d3a9241254a807/miri", "raw_url": "https://github.com/rust-lang/rust/raw/a1fabb94786b0c551a11849383d3a9241254a807/miri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri?ref=a1fabb94786b0c551a11849383d3a9241254a807", "patch": "@@ -5,14 +5,14 @@ USAGE=$(cat <<\"EOF\"\n \n ./miri install <flags>:\n Installs the miri driver and cargo-miri. <flags> are passed to `cargo\n-install`.  Sets up the rpath such that the installed binary should work in any\n+install`. Sets up the rpath such that the installed binary should work in any\n working directory.\n \n ./miri build <flags>:\n-Just build miri.  <flags> are passed to `cargo build`.\n+Just build miri. <flags> are passed to `cargo build`.\n \n ./miri check <flags>:\n-Just check miri.  <flags> are passed to `cargo check`.\n+Just check miri. <flags> are passed to `cargo check`.\n \n ./miri test <flags>:\n Build miri, set up a sysroot and then run the test suite. <flags> are passed\n@@ -26,10 +26,10 @@ The commands above also exist in a \"-debug\" variant (e.g. \"./miri run-debug\n times and slower execution times.\n \n ./miri fmt <flags>:\n-Format all sources and tests.  <flags> are passed to `rustfmt`.\n+Format all sources and tests. <flags> are passed to `rustfmt`.\n \n ./miri clippy <flags>:\n-Format all sources and tests.  <flags> are passed to `cargo clippy`.\n+Format all sources and tests. <flags> are passed to `cargo clippy`.\n \n   ENVIRONMENT VARIABLES\n \n@@ -42,17 +42,23 @@ EOF\n )\n \n ## Preparation\n-TARGET=$(rustc --version --verbose | grep \"^host:\" | cut -d ' ' -f 2)\n-SYSROOT=$(rustc --print sysroot)\n-LIBDIR=$SYSROOT/lib/rustlib/$TARGET/lib\n # macOS does not have a useful readlink/realpath so we have to use Python instead...\n MIRIDIR=$(dirname \"$(python3 -c 'import os, sys; print(os.path.realpath(sys.argv[1]))' \"$0\")\")\n+# Determine toolchain *in the Miri dir* and use that.\n+TOOLCHAIN=$(cd \"$MIRIDIR\"; rustup show active-toolchain | head -n 1 | cut -d ' ' -f 1)\n+# Determine some toolchain properties\n+TARGET=$(rustc +$TOOLCHAIN --version --verbose | grep \"^host:\" | cut -d ' ' -f 2)\n+SYSROOT=$(rustc +$TOOLCHAIN --print sysroot)\n+LIBDIR=$SYSROOT/lib/rustlib/$TARGET/lib\n+\n if ! test -d \"$LIBDIR\"; then\n     echo \"Something went wrong determining the library dir.\"\n     echo \"I got $LIBDIR but that does not exist.\"\n     echo \"Please report a bug at https://github.com/rust-lang/miri/issues.\"\n     exit 2\n fi\n+\n+CARGO=\"cargo +$TOOLCHAIN\"\n if [ -z \"$CARGO_INCREMENTAL\" ]; then\n     # Default CARGO_INCREMENTAL to 1.\n     export CARGO_INCREMENTAL=1\n@@ -68,15 +74,15 @@ export RUSTFLAGS=\"-C link-args=-Wl,-rpath,$LIBDIR -C debug-assertions -C debugin\n \n ## Helper functions\n \n-# Build a sysroot and set MIRI_SYSROOT to use it.  Arguments are passed to `cargo miri setup`.\n+# Build a sysroot and set MIRI_SYSROOT to use it. Arguments are passed to `cargo miri setup`.\n build_sysroot() {\n     # Build once, for the user to see.\n-    cargo run $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml -- miri setup \"$@\"\n+    $CARGO run $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml -- miri setup \"$@\"\n     # Call again, to just set env var.\n-    export MIRI_SYSROOT=\"$(cargo run $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml -q -- miri setup --print-sysroot \"$@\")\"\n+    export MIRI_SYSROOT=\"$($CARGO run $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml -q -- miri setup --print-sysroot \"$@\")\"\n }\n \n-# Prepare and set MIRI_SYSROOT.  Respects `MIRI_TEST_TARGET` and takes into account\n+# Prepare and set MIRI_SYSROOT. Respects `MIRI_TEST_TARGET` and takes into account\n # locally built vs. distributed rustc.\n find_sysroot() {\n     if [ -n \"$MIRI_SYSROOT\" ]; then\n@@ -116,22 +122,22 @@ case \"$COMMAND\" in\n install|install-debug)\n     # \"--locked\" to respect the Cargo.lock file if it exists,\n     # \"--offline\" to avoid querying the registry (for yanked packages).\n-    cargo install $CARGO_INSTALL_FLAGS --path \"$MIRIDIR\" --force --locked --offline \"$@\"\n-    cargo install $CARGO_INSTALL_FLAGS --path \"$MIRIDIR\"/cargo-miri --force --locked --offline \"$@\"\n+    $CARGO install $CARGO_INSTALL_FLAGS --path \"$MIRIDIR\" --force --locked --offline \"$@\"\n+    $CARGO install $CARGO_INSTALL_FLAGS --path \"$MIRIDIR\"/cargo-miri --force --locked --offline \"$@\"\n     ;;\n check|check-debug)\n     # Check, and let caller control flags.\n-    cargo check $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml --all-targets \"$@\"\n-    cargo check $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml \"$@\"\n+    $CARGO check $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml --all-targets \"$@\"\n+    $CARGO check $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml \"$@\"\n     ;;\n build|build-debug)\n     # Build, and let caller control flags.\n-    cargo build $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml \"$@\"\n-    cargo build $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml \"$@\"\n+    $CARGO build $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml \"$@\"\n+    $CARGO build $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml \"$@\"\n     ;;\n test|test-debug|bless|bless-debug)\n     # First build and get a sysroot.\n-    cargo build $CARGO_BUILD_FLAGS\n+    $CARGO build $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml\n     find_sysroot\n     case \"$COMMAND\" in\n     bless|bless-debug)\n@@ -140,8 +146,8 @@ test|test-debug|bless|bless-debug)\n     esac\n     # Then test, and let caller control flags.\n     # Only in root project and ui_test as `cargo-miri` has no tests.\n-    cargo test $CARGO_BUILD_FLAGS \"$@\"\n-    cargo test $CARGO_BUILD_FLAGS --manifest-path ui_test/Cargo.toml \"$@\"\n+    $CARGO test $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml \"$@\"\n+    $CARGO test $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/ui_test/Cargo.toml \"$@\"\n     ;;\n run|run-debug)\n     # Scan for \"--target\" to set the \"MIRI_TEST_TARGET\" env var so\n@@ -157,19 +163,19 @@ run|run-debug)\n         done\n     fi\n     # First build and get a sysroot.\n-    cargo build $CARGO_BUILD_FLAGS\n+    $CARGO build $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml\n     find_sysroot\n     # Then run the actual command.\n-    exec cargo run $CARGO_BUILD_FLAGS -- --sysroot \"$MIRI_SYSROOT\" \"$@\"\n+    exec $CARGO run $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml -- --sysroot \"$MIRI_SYSROOT\" \"$@\"\n     ;;\n fmt)\n     find \"$MIRIDIR\" -not \\( -name target -prune \\) -name '*.rs' \\\n-        | xargs rustfmt --edition=2021 --config-path \"$MIRIDIR/rustfmt.toml\" \"$@\"\n+        | xargs rustfmt +$TOOLCHAIN --edition=2021 --config-path \"$MIRIDIR/rustfmt.toml\" \"$@\"\n     ;;\n clippy)\n-    cargo clippy $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml --all-targets \"$@\"\n-    cargo clippy $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/ui_test/Cargo.toml --all-targets \"$@\"\n-    cargo clippy $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml \"$@\"\n+    $CARGO clippy $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml --all-targets \"$@\"\n+    $CARGO clippy $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/ui_test/Cargo.toml --all-targets \"$@\"\n+    $CARGO clippy $CARGO_BUILD_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml \"$@\"\n     ;;\n *)\n     if [ -n \"$COMMAND\" ]; then"}]}