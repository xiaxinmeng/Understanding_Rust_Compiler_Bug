{"sha": "54fa047d92fc46bae454defaec8d254f7af6746b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZmEwNDdkOTJmYzQ2YmFlNDU0ZGVmYWVjOGQyNTRmN2FmNjc0NmI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-09-05T14:48:24Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-12T14:19:06Z"}, "message": "Remove the `cstore` reference from Session in order to prepare encapsulating CrateStore access in tcx.", "tree": {"sha": "2e91bae1ad4bf5ee5a2ce16da97fbed5defedf16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e91bae1ad4bf5ee5a2ce16da97fbed5defedf16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54fa047d92fc46bae454defaec8d254f7af6746b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54fa047d92fc46bae454defaec8d254f7af6746b", "html_url": "https://github.com/rust-lang/rust/commit/54fa047d92fc46bae454defaec8d254f7af6746b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54fa047d92fc46bae454defaec8d254f7af6746b/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "817e1b81e230d599585f860cdcad96c5ed83b93e", "url": "https://api.github.com/repos/rust-lang/rust/commits/817e1b81e230d599585f860cdcad96c5ed83b93e", "html_url": "https://github.com/rust-lang/rust/commit/817e1b81e230d599585f860cdcad96c5ed83b93e"}], "stats": {"total": 220, "additions": 135, "deletions": 85}, "files": [{"sha": "bae419da26c58839e44bf087cf222ba563806c6f", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=54fa047d92fc46bae454defaec8d254f7af6746b", "patch": "@@ -45,6 +45,7 @@ use hir::map::{Definitions, DefKey};\n use hir::def_id::{DefIndex, DefId, CRATE_DEF_INDEX};\n use hir::def::{Def, PathResolution};\n use lint::builtin::PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES;\n+use middle::cstore::CrateStore;\n use rustc_data_structures::indexed_vec::IndexVec;\n use session::Session;\n use util::common::FN_OUTPUT_NAME;\n@@ -74,6 +75,8 @@ pub struct LoweringContext<'a> {\n     // Use to assign ids to hir nodes that do not directly correspond to an ast node\n     sess: &'a Session,\n \n+    cstore: &'a CrateStore,\n+\n     // As we walk the AST we must keep track of the current 'parent' def id (in\n     // the form of a DefIndex) so that if we create a new node which introduces\n     // a definition, then we can properly create the def id.\n@@ -118,6 +121,7 @@ pub trait Resolver {\n }\n \n pub fn lower_crate(sess: &Session,\n+                   cstore: &CrateStore,\n                    krate: &Crate,\n                    resolver: &mut Resolver)\n                    -> hir::Crate {\n@@ -129,6 +133,7 @@ pub fn lower_crate(sess: &Session,\n     LoweringContext {\n         crate_root: std_inject::injected_crate_name(krate),\n         sess,\n+        cstore,\n         parent_def: None,\n         resolver,\n         name_map: FxHashMap(),\n@@ -534,7 +539,7 @@ impl<'a> LoweringContext<'a> {\n         if id.is_local() {\n             self.resolver.definitions().def_key(id.index)\n         } else {\n-            self.sess.cstore.def_key(id)\n+            self.cstore.def_key(id)\n         }\n     }\n \n@@ -786,7 +791,7 @@ impl<'a> LoweringContext<'a> {\n                         return n;\n                     }\n                     assert!(!def_id.is_local());\n-                    let n = self.sess.cstore.item_generics_cloned_untracked(def_id).regions.len();\n+                    let n = self.cstore.item_generics_cloned_untracked(def_id).regions.len();\n                     self.type_def_lifetime_params.insert(def_id, n);\n                     n\n                 });"}, {"sha": "657c30289ebb5906ed85605c5177007e64e855d1", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=54fa047d92fc46bae454defaec8d254f7af6746b", "patch": "@@ -16,9 +16,10 @@\n //! way. Therefore we break lifetime name resolution into a separate pass.\n \n use hir::map::Map;\n-use session::Session;\n use hir::def::Def;\n use hir::def_id::DefId;\n+use middle::cstore::CrateStore;\n+use session::Session;\n use ty;\n \n use std::cell::Cell;\n@@ -160,6 +161,7 @@ pub struct NamedRegionMap {\n \n struct LifetimeContext<'a, 'tcx: 'a> {\n     sess: &'a Session,\n+    cstore: &'a CrateStore,\n     hir_map: &'a Map<'tcx>,\n     map: &'a mut NamedRegionMap,\n     scope: ScopeRef<'a>,\n@@ -251,6 +253,7 @@ type ScopeRef<'a> = &'a Scope<'a>;\n const ROOT_SCOPE: ScopeRef<'static> = &Scope::Root;\n \n pub fn krate(sess: &Session,\n+             cstore: &CrateStore,\n              hir_map: &Map)\n              -> Result<NamedRegionMap, ErrorReported> {\n     let krate = hir_map.krate();\n@@ -262,6 +265,7 @@ pub fn krate(sess: &Session,\n     sess.track_errors(|| {\n         let mut visitor = LifetimeContext {\n             sess,\n+            cstore,\n             hir_map,\n             map: &mut map,\n             scope: ROOT_SCOPE,\n@@ -765,12 +769,13 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     fn with<F>(&mut self, wrap_scope: Scope, f: F) where\n         F: for<'b> FnOnce(ScopeRef, &mut LifetimeContext<'b, 'tcx>),\n     {\n-        let LifetimeContext {sess, hir_map, ref mut map, ..} = *self;\n+        let LifetimeContext {sess, cstore, hir_map, ref mut map, ..} = *self;\n         let labels_in_fn = replace(&mut self.labels_in_fn, vec![]);\n         let xcrate_object_lifetime_defaults =\n             replace(&mut self.xcrate_object_lifetime_defaults, DefIdMap());\n         let mut this = LifetimeContext {\n             sess,\n+            cstore,\n             hir_map,\n             map: *map,\n             scope: &wrap_scope,\n@@ -932,7 +937,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             let def_key = if def_id.is_local() {\n                 this.hir_map.def_key(def_id)\n             } else {\n-                this.sess.cstore.def_key(def_id)\n+                this.cstore.def_key(def_id)\n             };\n             DefId {\n                 krate: def_id.krate,\n@@ -976,7 +981,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             let unsubst = if let Some(id) = self.hir_map.as_local_node_id(def_id) {\n                 &map.object_lifetime_defaults[&id]\n             } else {\n-                let cstore = &self.sess.cstore;\n+                let cstore = self.cstore;\n                 self.xcrate_object_lifetime_defaults.entry(def_id).or_insert_with(|| {\n                     cstore.item_generics_cloned_untracked(def_id).types.into_iter().map(|def| {\n                         def.object_lifetime_default"}, {"sha": "59f600f39077c33e53cdad551b39b5d5bc8b4afd", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=54fa047d92fc46bae454defaec8d254f7af6746b", "patch": "@@ -1953,13 +1953,12 @@ mod tests {\n     use errors;\n     use getopts;\n     use lint;\n-    use middle::cstore::{self, DummyCrateStore};\n+    use middle::cstore;\n     use session::config::{build_configuration, build_session_options_and_crate_config};\n     use session::build_session;\n     use std::collections::{BTreeMap, BTreeSet};\n     use std::iter::FromIterator;\n     use std::path::PathBuf;\n-    use std::rc::Rc;\n     use super::{OutputType, OutputTypes, Externs};\n     use rustc_back::{PanicStrategy, RelroLevel};\n     use syntax::symbol::Symbol;\n@@ -1991,7 +1990,7 @@ mod tests {\n             };\n         let registry = errors::registry::Registry::new(&[]);\n         let (sessopts, cfg) = build_session_options_and_crate_config(matches);\n-        let sess = build_session(sessopts, &dep_graph, None, registry, Rc::new(DummyCrateStore));\n+        let sess = build_session(sessopts, &dep_graph, None, registry);\n         let cfg = build_configuration(&sess, cfg);\n         assert!(cfg.contains(&(Symbol::intern(\"test\"), None)));\n     }\n@@ -2010,8 +2009,7 @@ mod tests {\n             };\n         let registry = errors::registry::Registry::new(&[]);\n         let (sessopts, cfg) = build_session_options_and_crate_config(matches);\n-        let sess = build_session(sessopts, &dep_graph, None, registry,\n-                                 Rc::new(DummyCrateStore));\n+        let sess = build_session(sessopts, &dep_graph, None, registry);\n         let cfg = build_configuration(&sess, cfg);\n         let mut test_items = cfg.iter().filter(|&&(name, _)| name == \"test\");\n         assert!(test_items.next().is_some());\n@@ -2027,8 +2025,7 @@ mod tests {\n             ]).unwrap();\n             let registry = errors::registry::Registry::new(&[]);\n             let (sessopts, _) = build_session_options_and_crate_config(&matches);\n-            let sess = build_session(sessopts, &dep_graph, None, registry,\n-                                     Rc::new(DummyCrateStore));\n+            let sess = build_session(sessopts, &dep_graph, None, registry);\n             assert!(!sess.diagnostic().can_emit_warnings);\n         }\n \n@@ -2039,8 +2036,7 @@ mod tests {\n             ]).unwrap();\n             let registry = errors::registry::Registry::new(&[]);\n             let (sessopts, _) = build_session_options_and_crate_config(&matches);\n-            let sess = build_session(sessopts, &dep_graph, None, registry,\n-                                     Rc::new(DummyCrateStore));\n+            let sess = build_session(sessopts, &dep_graph, None, registry);\n             assert!(sess.diagnostic().can_emit_warnings);\n         }\n \n@@ -2050,8 +2046,7 @@ mod tests {\n             ]).unwrap();\n             let registry = errors::registry::Registry::new(&[]);\n             let (sessopts, _) = build_session_options_and_crate_config(&matches);\n-            let sess = build_session(sessopts, &dep_graph, None, registry,\n-                                     Rc::new(DummyCrateStore));\n+            let sess = build_session(sessopts, &dep_graph, None, registry);\n             assert!(sess.diagnostic().can_emit_warnings);\n         }\n     }"}, {"sha": "1f9cb2b03100fba2fec8d091d2c3b554e2bed528", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=54fa047d92fc46bae454defaec8d254f7af6746b", "patch": "@@ -15,7 +15,6 @@ use dep_graph::DepGraph;\n use hir::def_id::{CrateNum, DefIndex};\n \n use lint;\n-use middle::cstore::CrateStore;\n use middle::allocator::AllocatorKind;\n use middle::dependency_format;\n use session::search_paths::PathKind;\n@@ -63,7 +62,6 @@ pub struct Session {\n     pub target: config::Config,\n     pub host: Target,\n     pub opts: config::Options,\n-    pub cstore: Rc<CrateStore>,\n     pub parse_sess: ParseSess,\n     // For a library crate, this is always none\n     pub entry_fn: RefCell<Option<(NodeId, Span)>>,\n@@ -621,16 +619,14 @@ impl Session {\n pub fn build_session(sopts: config::Options,\n                      dep_graph: &DepGraph,\n                      local_crate_source_file: Option<PathBuf>,\n-                     registry: errors::registry::Registry,\n-                     cstore: Rc<CrateStore>)\n+                     registry: errors::registry::Registry)\n                      -> Session {\n     let file_path_mapping = sopts.file_path_mapping();\n \n     build_session_with_codemap(sopts,\n                                dep_graph,\n                                local_crate_source_file,\n                                registry,\n-                               cstore,\n                                Rc::new(codemap::CodeMap::new(file_path_mapping)),\n                                None)\n }\n@@ -639,7 +635,6 @@ pub fn build_session_with_codemap(sopts: config::Options,\n                                   dep_graph: &DepGraph,\n                                   local_crate_source_file: Option<PathBuf>,\n                                   registry: errors::registry::Registry,\n-                                  cstore: Rc<CrateStore>,\n                                   codemap: Rc<codemap::CodeMap>,\n                                   emitter_dest: Option<Box<Write + Send>>)\n                                   -> Session {\n@@ -680,16 +675,14 @@ pub fn build_session_with_codemap(sopts: config::Options,\n                    dep_graph,\n                    local_crate_source_file,\n                    diagnostic_handler,\n-                   codemap,\n-                   cstore)\n+                   codemap)\n }\n \n pub fn build_session_(sopts: config::Options,\n                       dep_graph: &DepGraph,\n                       local_crate_source_file: Option<PathBuf>,\n                       span_diagnostic: errors::Handler,\n-                      codemap: Rc<codemap::CodeMap>,\n-                      cstore: Rc<CrateStore>)\n+                      codemap: Rc<codemap::CodeMap>)\n                       -> Session {\n     let host = match Target::search(config::host_triple()) {\n         Ok(t) => t,\n@@ -726,7 +719,6 @@ pub fn build_session_(sopts: config::Options,\n         target: target_cfg,\n         host,\n         opts: sopts,\n-        cstore,\n         parse_sess: p_s,\n         // For a library crate, this is always none\n         entry_fn: RefCell::new(None),"}, {"sha": "88fcbc1707ed92897f726a5eecfb0630b79282e3", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=54fa047d92fc46bae454defaec8d254f7af6746b", "patch": "@@ -21,7 +21,11 @@ use hir::map as hir_map;\n use hir::map::DefPathHash;\n use lint::{self, Lint};\n use ich::{self, StableHashingContext, NodeIdHashingMode};\n+<<<<<<< 817e1b81e230d599585f860cdcad96c5ed83b93e\n use middle::const_val::ConstVal;\n+=======\n+use middle::cstore::CrateStore;\n+>>>>>>> Remove the `cstore` reference from Session in order to prepare encapsulating CrateStore access in tcx.\n use middle::free_region::FreeRegionMap;\n use middle::lang_items;\n use middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n@@ -810,8 +814,11 @@ pub struct GlobalCtxt<'tcx> {\n     global_arenas: &'tcx GlobalArenas<'tcx>,\n     global_interners: CtxtInterners<'tcx>,\n \n+    cstore: &'tcx CrateStore,\n+\n     pub sess: &'tcx Session,\n \n+\n     pub trans_trait_caches: traits::trans::TransTraitCaches<'tcx>,\n \n     pub dep_graph: DepGraph,\n@@ -908,6 +915,10 @@ impl<'tcx> GlobalCtxt<'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n+    pub fn cstore_untracked(&self) -> &CrateStore {\n+        &*self.cstore\n+    }\n+\n     pub fn alloc_generics(self, generics: ty::Generics) -> &'gcx ty::Generics {\n         self.global_arenas.generics.alloc(generics)\n     }\n@@ -1009,6 +1020,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// value (types, substs, etc.) can only be used while `ty::tls` has a valid\n     /// reference to the context, to allow formatting values that need it.\n     pub fn create_and_enter<F, R>(s: &'tcx Session,\n+                                  cstore: &'tcx CrateStore,\n                                   local_providers: ty::maps::Providers<'tcx>,\n                                   extern_providers: ty::maps::Providers<'tcx>,\n                                   mir_passes: Rc<Passes>,\n@@ -1025,16 +1037,15 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let interners = CtxtInterners::new(arena);\n         let common_types = CommonTypes::new(&interners);\n         let dep_graph = hir.dep_graph.clone();\n-        let max_cnum = s.cstore.crates_untracked().iter().map(|c| c.as_usize()).max().unwrap_or(0);\n+        let max_cnum = cstore.crates_untracked().iter().map(|c| c.as_usize()).max().unwrap_or(0);\n         let mut providers = IndexVec::from_elem_n(extern_providers, max_cnum + 1);\n         providers[LOCAL_CRATE] = local_providers;\n \n         let def_path_hash_to_def_id = if s.opts.build_dep_graph() {\n-            let upstream_def_path_tables: Vec<(CrateNum, Rc<_>)> = s\n-                .cstore\n+            let upstream_def_path_tables: Vec<(CrateNum, Rc<_>)> = cstore\n                 .crates_untracked()\n                 .iter()\n-                .map(|&cnum| (cnum, s.cstore.def_path_table(cnum)))\n+                .map(|&cnum| (cnum, cstore.def_path_table(cnum)))\n                 .collect();\n \n             let def_path_tables = || {\n@@ -1093,6 +1104,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         tls::enter_global(GlobalCtxt {\n             sess: s,\n+            cstore,\n             trans_trait_caches: traits::trans::TransTraitCaches::new(dep_graph.clone()),\n             global_arenas: arenas,\n             global_interners: interners,"}, {"sha": "64b231b11fc852a263243a6772529684cd5a55a3", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=54fa047d92fc46bae454defaec8d254f7af6746b", "patch": "@@ -151,7 +151,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            cur_path.push(self.sess.cstore.def_key(cur_def)\n+            cur_path.push(self.cstore_untracked().def_key(cur_def)\n                               .disambiguated_data.data.get_opt_name().unwrap_or_else(||\n                 Symbol::intern(\"<unnamed>\").as_str()));\n             match visible_parent_map.get(&cur_def) {"}, {"sha": "59c42c701295478a619afd083ddc33a9591dce4a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=54fa047d92fc46bae454defaec8d254f7af6746b", "patch": "@@ -2174,7 +2174,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         if id.is_local() {\n             self.hir.def_key(id)\n         } else {\n-            self.sess.cstore.def_key(id)\n+            self.cstore_untracked().def_key(id)\n         }\n     }\n \n@@ -2187,7 +2187,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         if id.is_local() {\n             self.hir.def_path(id)\n         } else {\n-            self.sess.cstore.def_path(id)\n+            self.cstore_untracked().def_path(id)\n         }\n     }\n \n@@ -2196,7 +2196,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         if def_id.is_local() {\n             self.hir.definitions().def_path_hash(def_id.index)\n         } else {\n-            self.sess.cstore.def_path_hash(def_id)\n+            self.cstore_untracked().def_path_hash(def_id)\n         }\n     }\n \n@@ -2206,7 +2206,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         } else if id.index == CRATE_DEF_INDEX {\n             self.original_crate_name(id.krate).as_str()\n         } else {\n-            let def_key = self.sess.cstore.def_key(id);\n+            let def_key = self.cstore_untracked().def_key(id);\n             // The name of a StructCtor is that of its struct parent.\n             if let hir_map::DefPathData::StructCtor = def_key.disambiguated_data.data {\n                 self.item_name(DefId {"}, {"sha": "5a35de7b6aa2b6009fcaebe50189661cabed491e", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=54fa047d92fc46bae454defaec8d254f7af6746b", "patch": "@@ -21,6 +21,7 @@ use rustc::session::config::{self, Input, OutputFilenames, OutputType};\n use rustc::session::search_paths::PathKind;\n use rustc::lint;\n use rustc::middle::{self, stability, reachable};\n+use rustc::middle::cstore::CrateStore;\n use rustc::middle::privacy::AccessLevels;\n use rustc::mir::transform::{MIR_CONST, MIR_VALIDATED, MIR_OPTIMIZED, Passes};\n use rustc::ty::{self, TyCtxt, Resolutions, GlobalArenas};\n@@ -200,6 +201,7 @@ pub fn compile_input(sess: &Session,\n         };\n \n         phase_3_run_analysis_passes(sess,\n+                                    cstore,\n                                     hir_map,\n                                     analysis,\n                                     resolutions,\n@@ -272,7 +274,7 @@ pub fn compile_input(sess: &Session,\n                                 phase5_result);\n         phase5_result?;\n \n-        phase_6_link_output(sess, &trans, &outputs);\n+        phase_6_link_output(sess, cstore, &trans, &outputs);\n \n         // Now that we won't touch anything in the incremental compilation directory\n         // any more, we can finalize it (which involves renaming it)\n@@ -385,7 +387,7 @@ pub struct CompileState<'a, 'tcx: 'a> {\n     pub session: &'tcx Session,\n     pub krate: Option<ast::Crate>,\n     pub registry: Option<Registry<'a>>,\n-    pub cstore: Option<&'a CStore>,\n+    pub cstore: Option<&'tcx CStore>,\n     pub crate_name: Option<&'a str>,\n     pub output_filenames: Option<&'a OutputFilenames>,\n     pub out_dir: Option<&'a Path>,\n@@ -433,7 +435,7 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n                          out_dir: &'a Option<PathBuf>,\n                          out_file: &'a Option<PathBuf>,\n                          krate: ast::Crate,\n-                         cstore: &'a CStore)\n+                         cstore: &'tcx CStore)\n                          -> Self {\n         CompileState {\n             // Initialize the registry before moving `krate`\n@@ -449,7 +451,7 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n                           session: &'tcx Session,\n                           out_dir: &'a Option<PathBuf>,\n                           out_file: &'a Option<PathBuf>,\n-                          cstore: &'a CStore,\n+                          cstore: &'tcx CStore,\n                           expanded_crate: &'a ast::Crate,\n                           crate_name: &'a str)\n                           -> Self {\n@@ -468,7 +470,7 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n                                 out_file: &'a Option<PathBuf>,\n                                 arena: &'tcx DroplessArena,\n                                 arenas: &'tcx GlobalArenas<'tcx>,\n-                                cstore: &'a CStore,\n+                                cstore: &'tcx CStore,\n                                 hir_map: &'a hir_map::Map<'tcx>,\n                                 analysis: &'a ty::CrateAnalysis,\n                                 resolutions: &'a Resolutions,\n@@ -696,6 +698,7 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n     let mut crate_loader = CrateLoader::new(sess, &cstore, crate_name);\n     let resolver_arenas = Resolver::arenas();\n     let mut resolver = Resolver::new(sess,\n+                                     cstore,\n                                      &krate,\n                                      crate_name,\n                                      make_glob_map,\n@@ -844,7 +847,7 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n \n     // Lower ast -> hir.\n     let hir_forest = time(time_passes, \"lowering ast -> hir\", || {\n-        let hir_crate = lower_crate(sess, &krate, &mut resolver);\n+        let hir_crate = lower_crate(sess, cstore, &krate, &mut resolver);\n \n         if sess.opts.debugging_opts.hir_stats {\n             hir_stats::print_hir_stats(&hir_crate);\n@@ -886,6 +889,7 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n /// miscellaneous analysis passes on the crate. Return various\n /// structures carrying the results of the analysis.\n pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n+                                               cstore: &'tcx CrateStore,\n                                                hir_map: hir_map::Map<'tcx>,\n                                                mut analysis: ty::CrateAnalysis,\n                                                resolutions: Resolutions,\n@@ -915,7 +919,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n     let named_region_map = time(time_passes,\n                                 \"lifetime resolution\",\n-                                || middle::resolve_lifetime::krate(sess, &hir_map))?;\n+                                || middle::resolve_lifetime::krate(sess, cstore, &hir_map))?;\n \n     time(time_passes,\n          \"looking for entry point\",\n@@ -1012,6 +1016,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::dump_mir::Marker(\"PreTrans\"));\n \n     TyCtxt::create_and_enter(sess,\n+                             cstore,\n                              local_providers,\n                              extern_providers,\n                              Rc::new(passes),\n@@ -1148,10 +1153,15 @@ pub fn phase_5_run_llvm_passes(sess: &Session,\n /// This should produce either a finished executable or library.\n #[cfg(feature=\"llvm\")]\n pub fn phase_6_link_output(sess: &Session,\n+                           cstore: &CrateStore,\n                            trans: &trans::CrateTranslation,\n                            outputs: &OutputFilenames) {\n     time(sess.time_passes(), \"linking\", || {\n-        ::rustc_trans::back::link::link_binary(sess, trans, outputs, &trans.crate_name.as_str())\n+        ::rustc_trans::back::link::link_binary(sess,\n+                                               cstore,\n+                                               trans,\n+                                               outputs,\n+                                               &trans.crate_name.as_str())\n     });\n }\n "}, {"sha": "099dda17823e67f864b112e437ae8ba72c65ec77", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=54fa047d92fc46bae454defaec8d254f7af6746b", "patch": "@@ -72,6 +72,7 @@ use rustc::session::config::nightly_options;\n use rustc::session::{early_error, early_warn};\n use rustc::lint::Lint;\n use rustc::lint;\n+use rustc::middle::cstore::CrateStore;\n use rustc_metadata::locator;\n use rustc_metadata::cstore::CStore;\n use rustc::util::common::{time, ErrorReported};\n@@ -299,7 +300,7 @@ pub fn run_compiler<'a>(args: &[String],\n     let loader = file_loader.unwrap_or(box RealFileLoader);\n     let codemap = Rc::new(CodeMap::with_file_loader(loader, sopts.file_path_mapping()));\n     let mut sess = session::build_session_with_codemap(\n-        sopts, &dep_graph, input_file_path, descriptions, cstore.clone(), codemap, emitter_dest,\n+        sopts, &dep_graph, input_file_path, descriptions, codemap, emitter_dest,\n     );\n     rustc_trans::init(&sess);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n@@ -308,7 +309,12 @@ pub fn run_compiler<'a>(args: &[String],\n     target_features::add_configuration(&mut cfg, &sess);\n     sess.parse_sess.config = cfg;\n \n-    do_or_return!(callbacks.late_callback(&matches, &sess, &input, &odir, &ofile), Some(sess));\n+    do_or_return!(callbacks.late_callback(&matches,\n+                                          &sess,\n+                                          &*cstore,\n+                                          &input,\n+                                          &odir,\n+                                          &ofile), Some(sess));\n \n     let plugins = sess.opts.debugging_opts.extra_plugins.clone();\n     let control = callbacks.build_controller(&sess, &matches);\n@@ -400,6 +406,7 @@ pub trait CompilerCalls<'a> {\n     fn late_callback(&mut self,\n                      _: &getopts::Matches,\n                      _: &Session,\n+                     _: &CrateStore,\n                      _: &Input,\n                      _: &Option<PathBuf>,\n                      _: &Option<PathBuf>)\n@@ -574,12 +581,10 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                     return None;\n                 }\n                 let dep_graph = DepGraph::new(sopts.build_dep_graph());\n-                let cstore = Rc::new(CStore::new(box ::MetadataLoader));\n                 let mut sess = build_session(sopts.clone(),\n                     &dep_graph,\n                     None,\n-                    descriptions.clone(),\n-                    cstore.clone());\n+                    descriptions.clone());\n                 rustc_trans::init(&sess);\n                 rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n                 let mut cfg = config::build_configuration(&sess, cfg.clone());\n@@ -601,12 +606,13 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n     fn late_callback(&mut self,\n                      matches: &getopts::Matches,\n                      sess: &Session,\n+                     cstore: &CrateStore,\n                      input: &Input,\n                      odir: &Option<PathBuf>,\n                      ofile: &Option<PathBuf>)\n                      -> Compilation {\n         RustcDefaultCalls::print_crate_info(sess, Some(input), odir, ofile)\n-            .and_then(|| RustcDefaultCalls::list_metadata(sess, matches, input))\n+            .and_then(|| RustcDefaultCalls::list_metadata(sess, cstore, matches, input))\n     }\n \n     fn build_controller(&mut self,\n@@ -627,6 +633,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                 };\n                 control.after_hir_lowering.callback = box move |state| {\n                     pretty::print_after_hir_lowering(state.session,\n+                                                     state.cstore.unwrap(),\n                                                      state.hir_map.unwrap(),\n                                                      state.analysis.unwrap(),\n                                                      state.resolutions.unwrap(),\n@@ -711,7 +718,11 @@ fn save_analysis(sess: &Session) -> bool {\n }\n \n impl RustcDefaultCalls {\n-    pub fn list_metadata(sess: &Session, matches: &getopts::Matches, input: &Input) -> Compilation {\n+    pub fn list_metadata(sess: &Session,\n+                         cstore: &CrateStore,\n+                         matches: &getopts::Matches,\n+                         input: &Input)\n+                         -> Compilation {\n         let r = matches.opt_strs(\"Z\");\n         if r.contains(&(\"ls\".to_string())) {\n             match input {\n@@ -720,7 +731,7 @@ impl RustcDefaultCalls {\n                     let mut v = Vec::new();\n                     locator::list_file_metadata(&sess.target.target,\n                                                 path,\n-                                                sess.cstore.metadata_loader(),\n+                                                cstore.metadata_loader(),\n                                                 &mut v)\n                             .unwrap();\n                     println!(\"{}\", String::from_utf8(v).unwrap());"}, {"sha": "82dda2d2aa16278dfa6804132ac83d6df4780ff2", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=54fa047d92fc46bae454defaec8d254f7af6746b", "patch": "@@ -21,6 +21,7 @@ use rustc::ty::{self, TyCtxt, GlobalArenas, Resolutions};\n use rustc::cfg;\n use rustc::cfg::graphviz::LabelledCFG;\n use rustc::dep_graph::DepGraph;\n+use rustc::middle::cstore::CrateStore;\n use rustc::session::Session;\n use rustc::session::config::Input;\n use rustc_borrowck as borrowck;\n@@ -198,6 +199,7 @@ impl PpSourceMode {\n     }\n     fn call_with_pp_support_hir<'tcx, A, F>(&self,\n                                                sess: &'tcx Session,\n+                                               cstore: &'tcx CrateStore,\n                                                hir_map: &hir_map::Map<'tcx>,\n                                                analysis: &ty::CrateAnalysis,\n                                                resolutions: &Resolutions,\n@@ -226,6 +228,7 @@ impl PpSourceMode {\n             }\n             PpmTyped => {\n                 abort_on_err(driver::phase_3_run_analysis_passes(sess,\n+                                                                 cstore,\n                                                                  hir_map.clone(),\n                                                                  analysis.clone(),\n                                                                  resolutions.clone(),\n@@ -875,6 +878,7 @@ pub fn print_after_parsing(sess: &Session,\n }\n \n pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n+                                                cstore: &'tcx CrateStore,\n                                                 hir_map: &hir_map::Map<'tcx>,\n                                                 analysis: &ty::CrateAnalysis,\n                                                 resolutions: &Resolutions,\n@@ -891,6 +895,7 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n \n     if ppm.needs_analysis() {\n         print_with_analysis(sess,\n+                            cstore,\n                             hir_map,\n                             analysis,\n                             resolutions,\n@@ -929,6 +934,7 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n             (PpmHir(s), None) => {\n                 let out: &mut Write = &mut out;\n                 s.call_with_pp_support_hir(sess,\n+                                           cstore,\n                                            hir_map,\n                                            analysis,\n                                            resolutions,\n@@ -952,6 +958,7 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n             (PpmHir(s), Some(uii)) => {\n                 let out: &mut Write = &mut out;\n                 s.call_with_pp_support_hir(sess,\n+                                           cstore,\n                                            hir_map,\n                                            analysis,\n                                            resolutions,\n@@ -993,6 +1000,7 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n // with a different callback than the standard driver, so that isn't easy.\n // Instead, we call that function ourselves.\n fn print_with_analysis<'tcx, 'a: 'tcx>(sess: &'a Session,\n+                                       cstore: &'a CrateStore,\n                                        hir_map: &hir_map::Map<'tcx>,\n                                        analysis: &ty::CrateAnalysis,\n                                        resolutions: &Resolutions,\n@@ -1013,6 +1021,7 @@ fn print_with_analysis<'tcx, 'a: 'tcx>(sess: &'a Session,\n     let mut out = Vec::new();\n \n     abort_on_err(driver::phase_3_run_analysis_passes(sess,\n+                                                     cstore,\n                                                      hir_map.clone(),\n                                                      analysis.clone(),\n                                                      resolutions.clone(),"}, {"sha": "d2fb9903683676a5e6b853183108de3d203166c0", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=54fa047d92fc46bae454defaec8d254f7af6746b", "patch": "@@ -109,8 +109,7 @@ fn test_env<F>(source_string: &str,\n                                        &dep_graph,\n                                        None,\n                                        diagnostic_handler,\n-                                       Rc::new(CodeMap::new(FilePathMapping::empty())),\n-                                       cstore.clone());\n+                                       Rc::new(CodeMap::new(FilePathMapping::empty())));\n     rustc_trans::init(&sess);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n     let input = config::Input::Str {\n@@ -138,8 +137,9 @@ fn test_env<F>(source_string: &str,\n     let hir_map = hir_map::map_crate(&mut hir_forest, defs);\n \n     // run just enough stuff to build a tcx:\n-    let named_region_map = resolve_lifetime::krate(&sess, &hir_map);\n+    let named_region_map = resolve_lifetime::krate(&sess, &*cstore, &hir_map);\n     TyCtxt::create_and_enter(&sess,\n+                             &*cstore,\n                              ty::maps::Providers::default(),\n                              ty::maps::Providers::default(),\n                              Rc::new(Passes::new()),"}, {"sha": "3a47ee1a36b8f5819d4617f639d04abbacf9afca", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=54fa047d92fc46bae454defaec8d254f7af6746b", "patch": "@@ -60,7 +60,7 @@ macro_rules! provide {\n \n                 $tcx.dep_graph.read(dep_node);\n \n-                let $cdata = $tcx.sess.cstore.crate_data_as_rc_any($def_id.krate);\n+                let $cdata = $tcx.cstore_untracked().crate_data_as_rc_any($def_id.krate);\n                 let $cdata = $cdata.downcast_ref::<cstore::CrateMetadata>()\n                     .expect(\"CrateStore crated ata is not a CrateMetadata\");\n                 $compute\n@@ -277,12 +277,12 @@ pub fn provide_local<'tcx>(providers: &mut Providers<'tcx>) {\n         },\n         extern_mod_stmt_cnum: |tcx, id| {\n             let id = tcx.hir.as_local_node_id(id).unwrap();\n-            tcx.sess.cstore.extern_mod_stmt_cnum_untracked(id)\n+            tcx.cstore_untracked().extern_mod_stmt_cnum_untracked(id)\n         },\n \n         all_crate_nums: |tcx, cnum| {\n             assert_eq!(cnum, LOCAL_CRATE);\n-            Rc::new(tcx.sess.cstore.crates_untracked())\n+            Rc::new(tcx.cstore_untracked().crates_untracked())\n         },\n \n         // Returns a map from a sufficiently visible external item (i.e. an\n@@ -344,7 +344,7 @@ pub fn provide_local<'tcx>(providers: &mut Providers<'tcx>) {\n \n         postorder_cnums: |tcx, cnum| {\n             assert_eq!(cnum, LOCAL_CRATE);\n-            Rc::new(tcx.sess.cstore.postorder_cnums_untracked())\n+            Rc::new(tcx.cstore_untracked().postorder_cnums_untracked())\n         },\n \n         ..*providers"}, {"sha": "a4d1ae162157180509ec3a380146e278a3b8785c", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=54fa047d92fc46bae454defaec8d254f7af6746b", "patch": "@@ -254,7 +254,7 @@ impl<'a> Resolver<'a> {\n                 self.crate_loader.process_item(item, &self.definitions);\n \n                 // n.b. we don't need to look at the path option here, because cstore already did\n-                let crate_id = self.session.cstore.extern_mod_stmt_cnum_untracked(item.id).unwrap();\n+                let crate_id = self.cstore.extern_mod_stmt_cnum_untracked(item.id).unwrap();\n                 let module =\n                     self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n                 self.populate_module_if_necessary(module);\n@@ -450,7 +450,7 @@ impl<'a> Resolver<'a> {\n         let ident = child.ident;\n         let def = child.def;\n         let def_id = def.def_id();\n-        let vis = self.session.cstore.visibility_untracked(def_id);\n+        let vis = self.cstore.visibility_untracked(def_id);\n         let span = child.span;\n         let expansion = Mark::root(); // FIXME(jseyfried) intercrate hygiene\n         match def {\n@@ -472,7 +472,7 @@ impl<'a> Resolver<'a> {\n                 self.define(parent, ident, ValueNS, (def, vis, DUMMY_SP, expansion));\n \n                 if let Some(struct_def_id) =\n-                        self.session.cstore.def_key(def_id).parent\n+                        self.cstore.def_key(def_id).parent\n                             .map(|index| DefId { krate: def_id.krate, index: index }) {\n                     self.struct_constructors.insert(struct_def_id, (def, vis));\n                 }\n@@ -486,12 +486,12 @@ impl<'a> Resolver<'a> {\n                                              span);\n                 self.define(parent, ident, TypeNS, (module, vis, DUMMY_SP, expansion));\n \n-                for child in self.session.cstore.item_children_untracked(def_id, self.session) {\n+                for child in self.cstore.item_children_untracked(def_id, self.session) {\n                     let ns = if let Def::AssociatedTy(..) = child.def { TypeNS } else { ValueNS };\n                     self.define(module, child.ident, ns,\n                                 (child.def, ty::Visibility::Public, DUMMY_SP, expansion));\n \n-                    if self.session.cstore.associated_item_cloned_untracked(child.def.def_id())\n+                    if self.cstore.associated_item_cloned_untracked(child.def.def_id())\n                            .method_has_self_argument {\n                         self.has_self.insert(child.def.def_id());\n                     }\n@@ -502,7 +502,7 @@ impl<'a> Resolver<'a> {\n                 self.define(parent, ident, TypeNS, (def, vis, DUMMY_SP, expansion));\n \n                 // Record field names for error reporting.\n-                let field_names = self.session.cstore.struct_field_names_untracked(def_id);\n+                let field_names = self.cstore.struct_field_names_untracked(def_id);\n                 self.insert_field_names(def_id, field_names);\n             }\n             Def::Macro(..) => {\n@@ -517,15 +517,15 @@ impl<'a> Resolver<'a> {\n             return self.module_map[&def_id]\n         }\n \n-        let macros_only = self.session.cstore.dep_kind_untracked(def_id.krate).macros_only();\n+        let macros_only = self.cstore.dep_kind_untracked(def_id.krate).macros_only();\n         if let Some(&module) = self.extern_module_map.get(&(def_id, macros_only)) {\n             return module;\n         }\n \n         let (name, parent) = if def_id.index == CRATE_DEF_INDEX {\n-            (self.session.cstore.crate_name_untracked(def_id.krate).as_str(), None)\n+            (self.cstore.crate_name_untracked(def_id.krate).as_str(), None)\n         } else {\n-            let def_key = self.session.cstore.def_key(def_id);\n+            let def_key = self.cstore.def_key(def_id);\n             (def_key.disambiguated_data.data.get_opt_name().unwrap(),\n              Some(self.get_module(DefId { index: def_key.parent.unwrap(), ..def_id })))\n         };\n@@ -559,7 +559,7 @@ impl<'a> Resolver<'a> {\n             return ext.clone();\n         }\n \n-        let macro_def = match self.session.cstore.load_macro_untracked(def_id, &self.session) {\n+        let macro_def = match self.cstore.load_macro_untracked(def_id, &self.session) {\n             LoadedMacro::MacroDef(macro_def) => macro_def,\n             LoadedMacro::ProcMacro(ext) => return ext,\n         };\n@@ -576,7 +576,7 @@ impl<'a> Resolver<'a> {\n     pub fn populate_module_if_necessary(&mut self, module: Module<'a>) {\n         if module.populated.get() { return }\n         let def_id = module.def_id().unwrap();\n-        for child in self.session.cstore.item_children_untracked(def_id, self.session) {\n+        for child in self.cstore.item_children_untracked(def_id, self.session) {\n             self.build_reduced_graph_for_external_crate_def(module, child);\n         }\n         module.populated.set(true)\n@@ -607,7 +607,7 @@ impl<'a> Resolver<'a> {\n             span_err!(self.session, item.span, E0468,\n                       \"an `extern crate` loading macros must be at the crate root\");\n         } else if !self.use_extern_macros && !used &&\n-                  self.session.cstore.dep_kind_untracked(module.def_id().unwrap().krate)\n+                  self.cstore.dep_kind_untracked(module.def_id().unwrap().krate)\n                       .macros_only() {\n             let msg = \"proc macro crates and `#[no_link]` crates have no effect without \\\n                        `#[macro_use]`\";\n@@ -651,7 +651,7 @@ impl<'a> Resolver<'a> {\n             }\n         }\n         for (name, span) in legacy_imports.reexports {\n-            self.session.cstore.export_macros_untracked(module.def_id().unwrap().krate);\n+            self.cstore.export_macros_untracked(module.def_id().unwrap().krate);\n             let ident = Ident::with_empty_ctxt(name);\n             let result = self.resolve_ident_in_module(module, ident, MacroNS, false, false, span);\n             if let Ok(binding) = result {"}, {"sha": "691329c608c978a78f98731c7d1d6ba48cd06ce4", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=54fa047d92fc46bae454defaec8d254f7af6746b", "patch": "@@ -31,7 +31,7 @@ use self::RibKind::*;\n \n use rustc::hir::map::{Definitions, DefCollector};\n use rustc::hir::{self, PrimTy, TyBool, TyChar, TyFloat, TyInt, TyUint, TyStr};\n-use rustc::middle::cstore::CrateLoader;\n+use rustc::middle::cstore::{CrateStore, CrateLoader};\n use rustc::session::Session;\n use rustc::lint;\n use rustc::hir::def::*;\n@@ -1176,6 +1176,7 @@ impl PrimitiveTypeTable {\n /// The main resolver class.\n pub struct Resolver<'a> {\n     session: &'a Session,\n+    cstore: &'a CrateStore,\n \n     pub definitions: Definitions,\n \n@@ -1343,7 +1344,7 @@ impl<'a, 'b: 'a> ty::DefIdTree for &'a Resolver<'b> {\n     fn parent(self, id: DefId) -> Option<DefId> {\n         match id.krate {\n             LOCAL_CRATE => self.definitions.def_key(id.index).parent,\n-            _ => self.session.cstore.def_key(id).parent,\n+            _ => self.cstore.def_key(id).parent,\n         }.map(|index| DefId { index: index, ..id })\n     }\n }\n@@ -1383,6 +1384,7 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n \n impl<'a> Resolver<'a> {\n     pub fn new(session: &'a Session,\n+               cstore: &'a CrateStore,\n                krate: &Crate,\n                crate_name: &str,\n                make_glob_map: MakeGlobMap,\n@@ -1414,6 +1416,8 @@ impl<'a> Resolver<'a> {\n         Resolver {\n             session,\n \n+            cstore,\n+\n             definitions,\n \n             // The outermost module has def ID 0; this is not reflected in the"}, {"sha": "064032b888499abb77d13451e8c2c4967dee59c8", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=54fa047d92fc46bae454defaec8d254f7af6746b", "patch": "@@ -778,7 +778,7 @@ impl<'a> Resolver<'a> {\n             _ => return,\n         };\n \n-        let crate_name = self.session.cstore.crate_name_untracked(krate);\n+        let crate_name = self.cstore.crate_name_untracked(krate);\n \n         self.session.struct_span_err(use_span, warn_msg)\n             .help(&format!(\"instead, import the procedural macro like any other item: \\"}, {"sha": "b85bf18ea800c4fec42d0a7947aa566c4d49d3e6", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=54fa047d92fc46bae454defaec8d254f7af6746b", "patch": "@@ -844,7 +844,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                 let def = binding.def();\n                 if def != Def::Err {\n                     if !def.def_id().is_local() {\n-                        self.session.cstore.export_macros_untracked(def.def_id().krate);\n+                        self.cstore.export_macros_untracked(def.def_id().krate);\n                     }\n                     if let Def::Macro(..) = def {\n                         if let Some(&span) = exported_macro_names.get(&ident.modern()) {"}, {"sha": "efb56ab5a6cac64231d53b5b5915d0629a33c280", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=54fa047d92fc46bae454defaec8d254f7af6746b", "patch": "@@ -185,7 +185,11 @@ pub fn link_binary(sess: &Session,\n            bug!(\"invalid output type `{:?}` for target os `{}`\",\n                 crate_type, sess.opts.target_triple);\n         }\n-        let mut out_files = link_binary_output(sess, trans, crate_type, outputs, crate_name);\n+        let mut out_files = link_binary_output(sess,\n+                                               trans,\n+                                               crate_type,\n+                                               outputs,\n+                                               crate_name);\n         out_filenames.append(&mut out_files);\n     }\n \n@@ -346,8 +350,8 @@ fn link_binary_output(sess: &Session,\n                                tmpdir.path());\n             }\n             _ => {\n-                link_natively(sess, crate_type, &objects, &out_filename, trans,\n-                              outputs, tmpdir.path());\n+                link_natively(sess, crate_type, &objects, &out_filename,\n+                              trans, outputs, tmpdir.path());\n             }\n         }\n         out_filenames.push(out_filename);"}, {"sha": "ade05003ef84c9495c18a01aa6d1830cd1a227f5", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=54fa047d92fc46bae454defaec8d254f7af6746b", "patch": "@@ -777,7 +777,7 @@ fn write_metadata<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n                 EncodedMetadataHashes::new());\n     }\n \n-    let cstore = &tcx.sess.cstore;\n+    let cstore = tcx.cstore_untracked();\n     let (metadata, hashes) = cstore.encode_metadata(tcx,\n                                                     &link_meta,\n                                                     exported_symbols);"}, {"sha": "81396d41606a8e11450b7461d504e57cbdbe5191", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=54fa047d92fc46bae454defaec8d254f7af6746b", "patch": "@@ -148,7 +148,7 @@ pub fn run_core(search_paths: SearchPaths,\n     let _ignore = dep_graph.in_ignore();\n     let cstore = Rc::new(CStore::new(box rustc_trans::LlvmMetadataLoader));\n     let mut sess = session::build_session_(\n-        sessopts, &dep_graph, cpath, diagnostic_handler, codemap, cstore.clone()\n+        sessopts, &dep_graph, cpath, diagnostic_handler, codemap\n     );\n     rustc_trans::init(&sess);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n@@ -181,6 +181,7 @@ pub fn run_core(search_paths: SearchPaths,\n     let hir_map = hir_map::map_crate(&mut hir_forest, defs);\n \n     abort_on_err(driver::phase_3_run_analysis_passes(&sess,\n+                                                     &*cstore,\n                                                      hir_map,\n                                                      analysis,\n                                                      resolutions,"}, {"sha": "9b76a713b1769541561b0727fd74b2d3c463b6b9", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=54fa047d92fc46bae454defaec8d254f7af6746b", "patch": "@@ -87,7 +87,7 @@ pub fn run(input: &str,\n     let _ignore = dep_graph.in_ignore();\n     let cstore = Rc::new(CStore::new(box rustc_trans::LlvmMetadataLoader));\n     let mut sess = session::build_session_(\n-        sessopts, &dep_graph, Some(input_path.clone()), handler, codemap.clone(), cstore.clone(),\n+        sessopts, &dep_graph, Some(input_path.clone()), handler, codemap.clone()\n     );\n     rustc_trans::init(&sess);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n@@ -240,7 +240,7 @@ fn run_test(test: &str, cratename: &str, filename: &str, cfgs: Vec<String>, libs\n     let dep_graph = DepGraph::new(false);\n     let cstore = Rc::new(CStore::new(box rustc_trans::LlvmMetadataLoader));\n     let mut sess = session::build_session_(\n-        sessopts, &dep_graph, None, diagnostic_handler, codemap, cstore.clone(),\n+        sessopts, &dep_graph, None, diagnostic_handler, codemap\n     );\n     rustc_trans::init(&sess);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));"}, {"sha": "2e3fb785748f3f5345aa01515a11f17b1272fc44", "filename": "src/test/run-make/issue-19371/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs?ref=54fa047d92fc46bae454defaec8d254f7af6746b", "patch": "@@ -60,7 +60,7 @@ fn basic_sess(sysroot: PathBuf) -> (Session, Rc<CStore>) {\n     let descriptions = Registry::new(&rustc::DIAGNOSTICS);\n     let dep_graph = DepGraph::new(opts.build_dep_graph());\n     let cstore = Rc::new(CStore::new(Box::new(rustc_trans::LlvmMetadataLoader)));\n-    let sess = build_session(opts, &dep_graph, None, descriptions, cstore.clone());\n+    let sess = build_session(opts, &dep_graph, None, descriptions);\n     rustc_trans::init(&sess);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n     (sess, cstore)"}, {"sha": "b5c1ee099037cac9ea64d425cd5b8d710906f6f2", "filename": "src/test/run-pass-fulldeps/compiler-calls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fa047d92fc46bae454defaec8d254f7af6746b/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs?ref=54fa047d92fc46bae454defaec8d254f7af6746b", "patch": "@@ -21,6 +21,7 @@ extern crate rustc_driver;\n extern crate syntax;\n extern crate rustc_errors as errors;\n \n+use rustc::middle::cstore::CrateStore;\n use rustc::session::Session;\n use rustc::session::config::{self, Input};\n use rustc_driver::{driver, CompilerCalls, Compilation};\n@@ -47,6 +48,7 @@ impl<'a> CompilerCalls<'a> for TestCalls {\n     fn late_callback(&mut self,\n                      _: &getopts::Matches,\n                      _: &Session,\n+                     _: &CrateStore,\n                      _: &Input,\n                      _: &Option<PathBuf>,\n                      _: &Option<PathBuf>)"}]}