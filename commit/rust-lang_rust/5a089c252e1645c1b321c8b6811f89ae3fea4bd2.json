{"sha": "5a089c252e1645c1b321c8b6811f89ae3fea4bd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMDg5YzI1MmUxNjQ1YzFiMzIxYzhiNjgxMWY4OWFlM2ZlYTRiZDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-25T06:14:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-25T06:14:01Z"}, "message": "auto merge of #7370 : Aatch/rust/snapshot, r=huonw\n\nI also cleaned up the warnings.", "tree": {"sha": "3d937cd8d79e363e42d41468b65fb3b74140ebfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d937cd8d79e363e42d41468b65fb3b74140ebfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a089c252e1645c1b321c8b6811f89ae3fea4bd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a089c252e1645c1b321c8b6811f89ae3fea4bd2", "html_url": "https://github.com/rust-lang/rust/commit/5a089c252e1645c1b321c8b6811f89ae3fea4bd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a089c252e1645c1b321c8b6811f89ae3fea4bd2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "237ca7dc58fcc2b856c53bc1e4ab0ed060314a72", "url": "https://api.github.com/repos/rust-lang/rust/commits/237ca7dc58fcc2b856c53bc1e4ab0ed060314a72", "html_url": "https://github.com/rust-lang/rust/commit/237ca7dc58fcc2b856c53bc1e4ab0ed060314a72"}, {"sha": "122f25dd5e1dae124bdc8d3beeac55474d7a8ce5", "url": "https://api.github.com/repos/rust-lang/rust/commits/122f25dd5e1dae124bdc8d3beeac55474d7a8ce5", "html_url": "https://github.com/rust-lang/rust/commit/122f25dd5e1dae124bdc8d3beeac55474d7a8ce5"}], "stats": {"total": 81, "additions": 13, "deletions": 68}, "files": [{"sha": "db44ac5e4421f739235209c02d9dc33a67ba970f", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a089c252e1645c1b321c8b6811f89ae3fea4bd2/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a089c252e1645c1b321c8b6811f89ae3fea4bd2/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=5a089c252e1645c1b321c8b6811f89ae3fea4bd2", "patch": "@@ -35,7 +35,6 @@ use extra::ebml;\n use extra::serialize::Decodable;\n use syntax::ast_map;\n use syntax::attr;\n-use syntax::diagnostic::span_handler;\n use syntax::parse::token::{ident_interner, special_idents};\n use syntax::print::pprust;\n use syntax::{ast, ast_util};"}, {"sha": "632874025e77f6b5ea6a343125216e24ec9b1c26", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a089c252e1645c1b321c8b6811f89ae3fea4bd2/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a089c252e1645c1b321c8b6811f89ae3fea4bd2/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=5a089c252e1645c1b321c8b6811f89ae3fea4bd2", "patch": "@@ -21,7 +21,7 @@ use middle::ty;\n use middle::subst::Subst;\n use middle::typeck;\n use middle;\n-use util::ppaux::{note_and_explain_region, bound_region_to_str, bound_region_ptr_to_str};\n+use util::ppaux::{note_and_explain_region, bound_region_ptr_to_str};\n use util::ppaux::{trait_store_to_str, ty_to_str, vstore_to_str};\n use util::ppaux::{Repr, UserString};\n use util::common::{indenter};"}, {"sha": "76b7e651ff12e4117330c355e8f4f73bb03e4761", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a089c252e1645c1b321c8b6811f89ae3fea4bd2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a089c252e1645c1b321c8b6811f89ae3fea4bd2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=5a089c252e1645c1b321c8b6811f89ae3fea4bd2", "patch": "@@ -107,7 +107,7 @@ use middle::typeck::{isr_alist, lookup_def_ccx};\n use middle::typeck::no_params;\n use middle::typeck::{require_same_types, method_map, vtable_map};\n use util::common::{block_query, indenter, loop_query};\n-use util::ppaux::{bound_region_to_str,bound_region_ptr_to_str};\n+use util::ppaux::{bound_region_ptr_to_str};\n use util::ppaux;\n \n "}, {"sha": "ae62e768ea2bb8c255a463e0dc353713fd87eeb8", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a089c252e1645c1b321c8b6811f89ae3fea4bd2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a089c252e1645c1b321c8b6811f89ae3fea4bd2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=5a089c252e1645c1b321c8b6811f89ae3fea4bd2", "patch": "@@ -16,10 +16,8 @@\n \n use core::prelude::*;\n \n-use driver;\n use metadata::csearch::{each_path, get_impl_trait};\n use metadata::csearch::{get_impls_for_mod};\n-use metadata::csearch;\n use metadata::cstore::{CStore, iter_crate_data};\n use metadata::decoder::{dl_def, dl_field, dl_impl};\n use middle::resolve::{Impl, MethodInfo};\n@@ -39,7 +37,7 @@ use middle::typeck::infer::combine::Combine;\n use middle::typeck::infer::InferCtxt;\n use middle::typeck::infer::{new_infer_ctxt, resolve_ivar};\n use middle::typeck::infer::{resolve_nested_tvar, resolve_type};\n-use syntax::ast::{crate, def_id, def_mod, def_struct, def_trait, def_ty};\n+use syntax::ast::{crate, def_id, def_mod, def_struct, def_ty};\n use syntax::ast::{item, item_enum, item_impl, item_mod, item_struct};\n use syntax::ast::{local_crate, method, trait_ref, ty_path};\n use syntax::ast;"}, {"sha": "3194df269c0e3673b2eb57326ac4d835a4ffca84", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a089c252e1645c1b321c8b6811f89ae3fea4bd2/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a089c252e1645c1b321c8b6811f89ae3fea4bd2/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=5a089c252e1645c1b321c8b6811f89ae3fea4bd2", "patch": "@@ -32,7 +32,6 @@ use syntax::parse::token;\n use syntax::print::pprust;\n use syntax::{ast, ast_util};\n \n-use core::str;\n use core::vec;\n \n /// Produces a string suitable for debugging output."}, {"sha": "9177ecabed6a886cdd9f145acfaad84ac84139bb", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a089c252e1645c1b321c8b6811f89ae3fea4bd2/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a089c252e1645c1b321c8b6811f89ae3fea4bd2/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=5a089c252e1645c1b321c8b6811f89ae3fea4bd2", "patch": "@@ -43,7 +43,6 @@ pub trait Iterator<A> {\n     /// Return a lower bound and upper bound on the remaining length of the iterator.\n     ///\n     /// The common use case for the estimate is pre-allocating space to store the results.\n-    #[cfg(not(stage0))]\n     fn size_hint(&self) -> (Option<uint>, Option<uint>) { (None, None) }\n }\n \n@@ -610,7 +609,6 @@ impl<A, T: Iterator<A>, U: Iterator<A>> Iterator<A> for ChainIterator<A, T, U> {\n     }\n \n     #[inline]\n-    #[cfg(not(stage0))]\n     fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n         let (a_lower, a_upper) = self.a.size_hint();\n         let (b_lower, b_upper) = self.b.size_hint();\n@@ -664,7 +662,6 @@ impl<'self, A, B, T: Iterator<A>> Iterator<B> for MapIterator<'self, A, B, T> {\n     }\n \n     #[inline]\n-    #[cfg(not(stage0))]\n     fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n         self.iter.size_hint()\n     }\n@@ -690,7 +687,6 @@ impl<'self, A, T: Iterator<A>> Iterator<A> for FilterIterator<'self, A, T> {\n     }\n \n     #[inline]\n-    #[cfg(not(stage0))]\n     fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n         let (_, upper) = self.iter.size_hint();\n         (None, upper) // can't know a lower bound, due to the predicate\n@@ -716,7 +712,6 @@ impl<'self, A, B, T: Iterator<A>> Iterator<B> for FilterMapIterator<'self, A, B,\n     }\n \n     #[inline]\n-    #[cfg(not(stage0))]\n     fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n         let (_, upper) = self.iter.size_hint();\n         (None, upper) // can't know a lower bound, due to the predicate"}, {"sha": "4d5bc0f8842f7ac5d41821f45effcf4710d0b6c6", "filename": "src/libstd/to_str.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a089c252e1645c1b321c8b6811f89ae3fea4bd2/src%2Flibstd%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a089c252e1645c1b321c8b6811f89ae3fea4bd2/src%2Flibstd%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_str.rs?ref=5a089c252e1645c1b321c8b6811f89ae3fea4bd2", "patch": "@@ -18,11 +18,9 @@ use str::OwnedStr;\n use hashmap::HashMap;\n use hashmap::HashSet;\n use iterator::IteratorUtil;\n-use container::Map;\n use hash::Hash;\n use cmp::Eq;\n use vec::ImmutableVector;\n-use iterator::IteratorUtil;\n \n /// A generic trait for converting a value to a string\n pub trait ToStr {\n@@ -179,7 +177,7 @@ impl<A:ToStr> ToStr for @[A] {\n mod tests {\n     use hashmap::HashMap;\n     use hashmap::HashSet;\n-    use container::Set;\n+    use container::{Set,Map};\n     #[test]\n     fn test_simple_types() {\n         assert_eq!(1i.to_str(), ~\"1\");"}, {"sha": "109f665e41d740b115b95bca2462eb2eefb41ac6", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5a089c252e1645c1b321c8b6811f89ae3fea4bd2/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a089c252e1645c1b321c8b6811f89ae3fea4bd2/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=5a089c252e1645c1b321c8b6811f89ae3fea4bd2", "patch": "@@ -42,9 +42,7 @@ pub extern \"rust-intrinsic\" {\n     /// Atomic compare and exchange, release ordering.\n     pub fn atomic_cxchg_rel(dst: &mut int, old: int, src: int) -> int;\n \n-    #[cfg(not(stage0))]\n     pub fn atomic_cxchg_acqrel(dst: &mut int, old: int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_cxchg_relaxed(dst: &mut int, old: int, src: int) -> int;\n \n \n@@ -53,15 +51,13 @@ pub extern \"rust-intrinsic\" {\n     /// Atomic load, acquire ordering.\n     pub fn atomic_load_acq(src: &int) -> int;\n \n-    #[cfg(not(stage0))]\n     pub fn atomic_load_relaxed(src: &int) -> int;\n \n     /// Atomic store, sequentially consistent.\n     pub fn atomic_store(dst: &mut int, val: int);\n     /// Atomic store, release ordering.\n     pub fn atomic_store_rel(dst: &mut int, val: int);\n \n-    #[cfg(not(stage0))]\n     pub fn atomic_store_relaxed(dst: &mut int, val: int);\n \n     /// Atomic exchange, sequentially consistent.\n@@ -70,9 +66,7 @@ pub extern \"rust-intrinsic\" {\n     pub fn atomic_xchg_acq(dst: &mut int, src: int) -> int;\n     /// Atomic exchange, release ordering.\n     pub fn atomic_xchg_rel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_xchg_acqrel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_xchg_relaxed(dst: &mut int, src: int) -> int;\n \n     /// Atomic addition, sequentially consistent.\n@@ -81,9 +75,7 @@ pub extern \"rust-intrinsic\" {\n     pub fn atomic_xadd_acq(dst: &mut int, src: int) -> int;\n     /// Atomic addition, release ordering.\n     pub fn atomic_xadd_rel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_xadd_acqrel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_xadd_relaxed(dst: &mut int, src: int) -> int;\n \n     /// Atomic subtraction, sequentially consistent.\n@@ -92,97 +84,55 @@ pub extern \"rust-intrinsic\" {\n     pub fn atomic_xsub_acq(dst: &mut int, src: int) -> int;\n     /// Atomic subtraction, release ordering.\n     pub fn atomic_xsub_rel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_xsub_acqrel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_xsub_relaxed(dst: &mut int, src: int) -> int;\n \n-    #[cfg(not(stage0))]\n     pub fn atomic_and(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_and_acq(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_and_rel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_and_acqrel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_and_relaxed(dst: &mut int, src: int) -> int;\n \n-    #[cfg(not(stage0))]\n     pub fn atomic_nand(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_nand_acq(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_nand_rel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_nand_acqrel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_nand_relaxed(dst: &mut int, src: int) -> int;\n \n-    #[cfg(not(stage0))]\n     pub fn atomic_or(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_or_acq(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_or_rel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_or_acqrel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_or_relaxed(dst: &mut int, src: int) -> int;\n \n-    #[cfg(not(stage0))]\n     pub fn atomic_xor(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_xor_acq(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_xor_rel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_xor_acqrel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_xor_relaxed(dst: &mut int, src: int) -> int;\n \n-    #[cfg(not(stage0))]\n     pub fn atomic_max(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_max_acq(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_max_rel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_max_acqrel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_max_relaxed(dst: &mut int, src: int) -> int;\n \n-    #[cfg(not(stage0))]\n     pub fn atomic_min(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_min_acq(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_min_rel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_min_acqrel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_min_relaxed(dst: &mut int, src: int) -> int;\n \n-    #[cfg(not(stage0))]\n     pub fn atomic_umin(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_umin_acq(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_umin_rel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_umin_acqrel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_umin_relaxed(dst: &mut int, src: int) -> int;\n \n-    #[cfg(not(stage0))]\n     pub fn atomic_umax(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_umax_acq(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_umax_rel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_umax_acqrel(dst: &mut int, src: int) -> int;\n-    #[cfg(not(stage0))]\n     pub fn atomic_umax_relaxed(dst: &mut int, src: int) -> int;\n \n     /// The size of a type in bytes."}, {"sha": "e39dd262cd906147b646d1da91a92beb5c050a2d", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a089c252e1645c1b321c8b6811f89ae3fea4bd2/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a089c252e1645c1b321c8b6811f89ae3fea4bd2/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=5a089c252e1645c1b321c8b6811f89ae3fea4bd2", "patch": "@@ -2446,7 +2446,6 @@ macro_rules! iterator {\n             }\n \n             #[inline]\n-            #[cfg(not(stage0))]\n             fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n                 let exact = Some(((self.end as uint) - (self.ptr as uint)) / size_of::<$elem>());\n                 (exact, exact)\n@@ -3929,7 +3928,6 @@ mod tests {\n     }\n \n     #[test]\n-    #[cfg(not(stage0))]\n     fn test_iterator() {\n         use iterator::*;\n         let xs = [1, 2, 5, 10, 11];"}, {"sha": "c9ef1a7a33c0522c3d368bcdd6a350213cbac95b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a089c252e1645c1b321c8b6811f89ae3fea4bd2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a089c252e1645c1b321c8b6811f89ae3fea4bd2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5a089c252e1645c1b321c8b6811f89ae3fea4bd2", "patch": "@@ -60,7 +60,7 @@ use ast::{view_item_, view_item_extern_mod, view_item_use};\n use ast::{view_path, view_path_glob, view_path_list, view_path_simple};\n use ast::visibility;\n use ast;\n-use ast_util::{as_prec, ident_to_path, operator_prec};\n+use ast_util::{as_prec, operator_prec};\n use ast_util;\n use codemap::{span, BytePos, spanned, mk_sp};\n use codemap;"}, {"sha": "910de5f66b7f69deb76cfdbc7022e73053b2abcf", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a089c252e1645c1b321c8b6811f89ae3fea4bd2/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5a089c252e1645c1b321c8b6811f89ae3fea4bd2/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=5a089c252e1645c1b321c8b6811f89ae3fea4bd2", "patch": "@@ -1,3 +1,11 @@\n+S 2013-06-23 f827561\n+  macos-i386 63ffbcf99b6853d7840bdfe01380068518d0e466\n+  macos-x86_64 b34fdf3845f8ef4760817007d8ef820cd32f2e07\n+  winnt-i386 6602150074ec442fd376fddb2eaf63f5da6fdff9\n+  freebsd-x86_64 a05bdda2d9ec0e66336d81b98bee8a95442a501f\n+  linux-i386 b8f4a0f0c2250aa4d76ec1eb57c83bfae5725f93\n+  linux-x86_64 caea3402663334d0a3967c21f58a860c060d5474\n+\n S 2013-06-21 6759ce4\n   macos-i386 6e5395d2fda1db356f64af28ba525031bf9871c7\n   macos-x86_64 7b8ded4e1ba1e999a5614eea3a4acacb2c7cef1d"}]}