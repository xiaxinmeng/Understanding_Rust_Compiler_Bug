{"sha": "1fe9b4d76331103e05d0347c9d36526ca3242117", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZTliNGQ3NjMzMTEwM2UwNWQwMzQ3YzlkMzY1MjZjYTMyNDIxMTc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-06-10T12:55:48Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-06-28T08:04:50Z"}, "message": "Use `Ident`s for associated type bindings in HIR", "tree": {"sha": "de1f5f345e4a3993a2ae55f7fa8ee1e3ee82dcd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de1f5f345e4a3993a2ae55f7fa8ee1e3ee82dcd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fe9b4d76331103e05d0347c9d36526ca3242117", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fe9b4d76331103e05d0347c9d36526ca3242117", "html_url": "https://github.com/rust-lang/rust/commit/1fe9b4d76331103e05d0347c9d36526ca3242117", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fe9b4d76331103e05d0347c9d36526ca3242117/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5454c04bc61760b780c3b08d1b3830267815168", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5454c04bc61760b780c3b08d1b3830267815168", "html_url": "https://github.com/rust-lang/rust/commit/c5454c04bc61760b780c3b08d1b3830267815168"}], "stats": {"total": 74, "additions": 38, "deletions": 36}, "files": [{"sha": "12ca0d41d08490af20baa45a2fedf418c5b10f54", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=1fe9b4d76331103e05d0347c9d36526ca3242117", "patch": "@@ -660,7 +660,7 @@ pub fn walk_generic_args<'v, V: Visitor<'v>>(visitor: &mut V,\n pub fn walk_assoc_type_binding<'v, V: Visitor<'v>>(visitor: &mut V,\n                                                    type_binding: &'v TypeBinding) {\n     visitor.visit_id(type_binding.id);\n-    visitor.visit_name(type_binding.span, type_binding.name);\n+    visitor.visit_ident(type_binding.ident);\n     visitor.visit_ty(&type_binding.ty);\n }\n "}, {"sha": "5e2bfc113eacd938010fc5dc91a40bef1304de9c", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=1fe9b4d76331103e05d0347c9d36526ca3242117", "patch": "@@ -1064,7 +1064,7 @@ impl<'a> LoweringContext<'a> {\n     fn lower_ty_binding(&mut self, b: &TypeBinding, itctx: ImplTraitContext) -> hir::TypeBinding {\n         hir::TypeBinding {\n             id: self.lower_node_id(b.id).node_id,\n-            name: self.lower_ident(b.ident),\n+            ident: b.ident,\n             ty: self.lower_ty(&b.ty, itctx),\n             span: b.span,\n         }\n@@ -1820,7 +1820,7 @@ impl<'a> LoweringContext<'a> {\n                         bindings: hir_vec![\n                             hir::TypeBinding {\n                                 id: this.next_id().node_id,\n-                                name: Symbol::intern(FN_OUTPUT_NAME),\n+                                ident: Ident::from_str(FN_OUTPUT_NAME),\n                                 ty: output\n                                     .as_ref()\n                                     .map(|ty| this.lower_ty(&ty, DISALLOWED))"}, {"sha": "3206c2fce2069c26cdb037caa20f52fe2eb3e76d", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=1fe9b4d76331103e05d0347c9d36526ca3242117", "patch": "@@ -1607,7 +1607,7 @@ pub enum ImplItemKind {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct TypeBinding {\n     pub id: NodeId,\n-    pub name: Name,\n+    pub ident: Ident,\n     pub ty: P<Ty>,\n     pub span: Span,\n }"}, {"sha": "05ceb1fcfcdfe7b162355751fea56b5fa2abc803", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=1fe9b4d76331103e05d0347c9d36526ca3242117", "patch": "@@ -1762,7 +1762,7 @@ impl<'a> State<'a> {\n \n             for binding in generic_args.bindings.iter() {\n                 start_or_comma(self)?;\n-                self.print_name(binding.name)?;\n+                self.print_ident(binding.ident)?;\n                 self.s.space()?;\n                 self.word_space(\"=\")?;\n                 self.print_type(&binding.ty)?;"}, {"sha": "cad76c4100cda81db9b192345c38f13c81bc654c", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=1fe9b4d76331103e05d0347c9d36526ca3242117", "patch": "@@ -278,7 +278,7 @@ impl_stable_hash_for!(struct hir::MethodSig {\n \n impl_stable_hash_for!(struct hir::TypeBinding {\n     id,\n-    name,\n+    ident,\n     ty,\n     span\n });"}, {"sha": "77077732dcf2b666baf3ac627117de01acbf3f50", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=1fe9b4d76331103e05d0347c9d36526ca3242117", "patch": "@@ -31,6 +31,7 @@ use infer::type_variable::TypeVariableOrigin;\n use middle::const_val::ConstVal;\n use mir::interpret::{GlobalId};\n use rustc_data_structures::snapshot_map::{Snapshot, SnapshotMap};\n+use syntax::ast::Ident;\n use syntax::symbol::Symbol;\n use ty::subst::{Subst, Substs};\n use ty::{self, ToPredicate, ToPolyTraitRef, Ty, TyCtxt};\n@@ -1452,7 +1453,7 @@ fn confirm_callable_candidate<'cx, 'gcx, 'tcx>(\n                 projection_ty: ty::ProjectionTy::from_ref_and_name(\n                     tcx,\n                     trait_ref,\n-                    Symbol::intern(FN_OUTPUT_NAME),\n+                    Ident::from_str(FN_OUTPUT_NAME),\n                 ),\n                 ty: ret_type\n             }\n@@ -1546,7 +1547,7 @@ fn assoc_ty_def<'cx, 'gcx, 'tcx>(\n     let impl_node = specialization_graph::Node::Impl(impl_def_id);\n     for item in impl_node.items(tcx) {\n         if item.kind == ty::AssociatedKind::Type &&\n-                tcx.hygienic_eq(item.name, assoc_ty_name, trait_def_id) {\n+                tcx.hygienic_eq(item.name.to_ident(), assoc_ty_name.to_ident(), trait_def_id) {\n             return specialization_graph::NodeItem {\n                 node: specialization_graph::Node::Impl(impl_def_id),\n                 item,"}, {"sha": "9b0edf42fdf4d629426e0fc7c2ced645cd8f829c", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=1fe9b4d76331103e05d0347c9d36526ca3242117", "patch": "@@ -379,7 +379,7 @@ impl<'a, 'gcx, 'tcx> Ancestors {\n         self.flat_map(move |node| {\n             node.items(tcx).filter(move |impl_item| {\n                 impl_item.kind == trait_item_kind &&\n-                tcx.hygienic_eq(impl_item.name, trait_item_name, trait_def_id)\n+                tcx.hygienic_eq(impl_item.name.to_ident(), trait_item_name.to_ident(), trait_def_id)\n             }).map(move |item| NodeItem { node: node, item: item })\n         })\n     }"}, {"sha": "686c560fe84b9a1df862586310b7475b02812359", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=1fe9b4d76331103e05d0347c9d36526ca3242117", "patch": "@@ -2717,9 +2717,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     // Hygienically compare a use-site name (`use_name`) for a field or an associated item with its\n     // supposed definition name (`def_name`). The method also needs `DefId` of the supposed\n     // definition's parent/scope to perform comparison.\n-    pub fn hygienic_eq(self, use_name: Name, def_name: Name, def_parent_def_id: DefId) -> bool {\n-        let (use_ident, def_ident) = (use_name.to_ident(), def_name.to_ident());\n-        self.adjust_ident(use_ident, def_parent_def_id, DUMMY_NODE_ID).0 == def_ident\n+    pub fn hygienic_eq(self, use_name: Ident, def_name: Ident, def_parent_def_id: DefId) -> bool {\n+        self.adjust_ident(use_name, def_parent_def_id, DUMMY_NODE_ID).0 == def_name.modern()\n     }\n \n     pub fn adjust_ident(self, mut ident: Ident, scope: DefId, block: NodeId) -> (Ident, DefId) {"}, {"sha": "a34e1e43009620efed19223d62990acfc4b16b9c", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=1fe9b4d76331103e05d0347c9d36526ca3242117", "patch": "@@ -25,7 +25,7 @@ use mir::interpret::{Scalar, Pointer, Value, ConstValue};\n use std::iter;\n use std::cmp::Ordering;\n use rustc_target::spec::abi;\n-use syntax::ast::{self, Name};\n+use syntax::ast::{self, Ident};\n use syntax::symbol::{keywords, InternedString};\n \n use serialize;\n@@ -853,11 +853,11 @@ impl<'a, 'tcx> ProjectionTy<'tcx> {\n     /// Construct a ProjectionTy by searching the trait from trait_ref for the\n     /// associated item named item_name.\n     pub fn from_ref_and_name(\n-        tcx: TyCtxt, trait_ref: ty::TraitRef<'tcx>, item_name: Name\n+        tcx: TyCtxt, trait_ref: ty::TraitRef<'tcx>, item_name: Ident\n     ) -> ProjectionTy<'tcx> {\n         let item_def_id = tcx.associated_items(trait_ref.def_id).find(|item| {\n             item.kind == ty::AssociatedKind::Type &&\n-            tcx.hygienic_eq(item_name, item.name, trait_ref.def_id)\n+            tcx.hygienic_eq(item_name, item.name.to_ident(), trait_ref.def_id)\n         }).unwrap().def_id;\n \n         ProjectionTy {"}, {"sha": "137a6b5c78db3fbee43ee1160cf52a01ee790b42", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=1fe9b4d76331103e05d0347c9d36526ca3242117", "patch": "@@ -417,7 +417,7 @@ pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n     let hypotheses = vec![trait_implemented];\n \n     // `<A0 as Trait<A1..An>>::AssocType<Pn+1..Pm>`\n-    let projection_ty = ty::ProjectionTy::from_ref_and_name(tcx, trait_ref, item.name);\n+    let projection_ty = ty::ProjectionTy::from_ref_and_name(tcx, trait_ref, item.name.to_ident());\n \n     // `Normalize(<A0 as Trait<A1..An>>::AssocType<Pn+1..Pm> -> T)`\n     let normalize_goal = DomainGoal::Normalize(ty::ProjectionPredicate { projection_ty, ty });"}, {"sha": "e8094dc27042be516adce9cd29eb077205d6e59f", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=1fe9b4d76331103e05d0347c9d36526ca3242117", "patch": "@@ -83,7 +83,7 @@ pub trait AstConv<'gcx, 'tcx> {\n }\n \n struct ConvertedBinding<'tcx> {\n-    item_name: ast::Name,\n+    item_name: ast::Ident,\n     ty: Ty<'tcx>,\n     span: Span,\n }\n@@ -342,7 +342,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n         let assoc_bindings = generic_args.bindings.iter().map(|binding| {\n             ConvertedBinding {\n-                item_name: binding.name,\n+                item_name: binding.ident,\n                 ty: self.ast_ty_to_ty(&binding.ty),\n                 span: binding.span,\n             }\n@@ -485,12 +485,12 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n     fn trait_defines_associated_type_named(&self,\n                                            trait_def_id: DefId,\n-                                           assoc_name: ast::Name)\n+                                           assoc_name: ast::Ident)\n                                            -> bool\n     {\n         self.tcx().associated_items(trait_def_id).any(|item| {\n             item.kind == ty::AssociatedKind::Type &&\n-            self.tcx().hygienic_eq(assoc_name, item.name, trait_def_id)\n+            self.tcx().hygienic_eq(assoc_name, item.name.to_ident(), trait_def_id)\n         })\n     }\n \n@@ -569,7 +569,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         }?;\n \n         let (assoc_ident, def_scope) =\n-            tcx.adjust_ident(binding.item_name.to_ident(), candidate.def_id(), ref_id);\n+            tcx.adjust_ident(binding.item_name, candidate.def_id(), ref_id);\n         let assoc_ty = tcx.associated_items(candidate.def_id()).find(|i| {\n             i.kind == ty::AssociatedKind::Type && i.name.to_ident() == assoc_ident\n         }).expect(\"missing associated type\");\n@@ -778,7 +778,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n     // any ambiguity.\n     fn find_bound_for_assoc_item(&self,\n                                  ty_param_def_id: DefId,\n-                                 assoc_name: ast::Name,\n+                                 assoc_name: ast::Ident,\n                                  span: Span)\n                                  -> Result<ty::PolyTraitRef<'tcx>, ErrorReported>\n     {\n@@ -807,7 +807,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n     fn one_bound_for_assoc_type<I>(&self,\n                                 mut bounds: I,\n                                 ty_param_name: &str,\n-                                assoc_name: ast::Name,\n+                                assoc_name: ast::Ident,\n                                 span: Span)\n         -> Result<ty::PolyTraitRef<'tcx>, ErrorReported>\n         where I: Iterator<Item=ty::PolyTraitRef<'tcx>>\n@@ -837,7 +837,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             for bound in bounds {\n                 let bound_span = self.tcx().associated_items(bound.def_id()).find(|item| {\n                     item.kind == ty::AssociatedKind::Type &&\n-                    self.tcx().hygienic_eq(assoc_name, item.name, bound.def_id())\n+                    self.tcx().hygienic_eq(assoc_name, item.name.to_ident(), bound.def_id())\n                 })\n                 .and_then(|item| self.tcx().hir.span_if_local(item.def_id));\n \n@@ -873,7 +873,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                                      -> (Ty<'tcx>, Def)\n     {\n         let tcx = self.tcx();\n-        let assoc_name = item_segment.name;\n+        let assoc_name = item_segment.name.to_ident();\n \n         debug!(\"associated_path_def_to_ty: {:?}::{}\", ty, assoc_name);\n \n@@ -895,8 +895,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n                 let candidates =\n                     traits::supertraits(tcx, ty::Binder::bind(trait_ref))\n-                    .filter(|r| self.trait_defines_associated_type_named(r.def_id(),\n-                                                                         assoc_name));\n+                    .filter(|r| self.trait_defines_associated_type_named(r.def_id(), assoc_name));\n \n                 match self.one_bound_for_assoc_type(candidates, \"Self\", assoc_name, span) {\n                     Ok(bound) => bound,\n@@ -923,7 +922,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         };\n \n         let trait_did = bound.def_id();\n-        let (assoc_ident, def_scope) = tcx.adjust_ident(assoc_name.to_ident(), trait_did, ref_id);\n+        let (assoc_ident, def_scope) = tcx.adjust_ident(assoc_name, trait_did, ref_id);\n         let item = tcx.associated_items(trait_did).find(|i| {\n             Namespace::from(i.kind) == Namespace::Type &&\n             i.name.to_ident() == assoc_ident"}, {"sha": "09562614982b81eda5c9878a210310c2a1dd8b51", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=1fe9b4d76331103e05d0347c9d36526ca3242117", "patch": "@@ -21,7 +21,7 @@ use rustc::ty::{ToPredicate, TypeFoldable};\n use rustc::ty::adjustment::{Adjustment, Adjust, OverloadedDeref};\n \n use syntax_pos::Span;\n-use syntax::symbol::Symbol;\n+use syntax::ast::Ident;\n \n use std::iter;\n \n@@ -134,7 +134,7 @@ impl<'a, 'gcx, 'tcx> Autoderef<'a, 'gcx, 'tcx> {\n                                                               ty::ProjectionTy::from_ref_and_name(\n                                                                   tcx,\n                                                                   trait_ref,\n-                                                                  Symbol::intern(\"Target\"),\n+                                                                  Ident::from_str(\"Target\"),\n                                                               ),\n                                                               cause,\n                                                               0,"}, {"sha": "feb99f4b5938a92d8d75247f316240aa0f799061", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=1fe9b4d76331103e05d0347c9d36526ca3242117", "patch": "@@ -387,8 +387,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// and return it, or `None`, if no such item was defined there.\n     pub fn associated_item(&self, def_id: DefId, item_name: ast::Name, ns: Namespace)\n                            -> Option<ty::AssociatedItem> {\n-        self.tcx.associated_items(def_id)\n-                .find(|item| Namespace::from(item.kind) == ns &&\n-                             self.tcx.hygienic_eq(item_name, item.name, def_id))\n+        self.tcx.associated_items(def_id).find(|item| {\n+            Namespace::from(item.kind) == ns &&\n+            self.tcx.hygienic_eq(item_name.to_ident(), item.name.to_ident(), def_id)\n+        })\n     }\n }"}, {"sha": "82df956b54ddfa97ecacbcacc228fa56b3387a2a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1fe9b4d76331103e05d0347c9d36526ca3242117", "patch": "@@ -1400,11 +1400,13 @@ fn check_impl_items_against_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let ty_impl_item = tcx.associated_item(tcx.hir.local_def_id(impl_item.id));\n         let ty_trait_item = tcx.associated_items(impl_trait_ref.def_id)\n             .find(|ac| Namespace::from(&impl_item.node) == Namespace::from(ac.kind) &&\n-                         tcx.hygienic_eq(ty_impl_item.name, ac.name, impl_trait_ref.def_id))\n+                         tcx.hygienic_eq(ty_impl_item.name.to_ident(), ac.name.to_ident(),\n+                                         impl_trait_ref.def_id))\n             .or_else(|| {\n                 // Not compatible, but needed for the error message\n                 tcx.associated_items(impl_trait_ref.def_id)\n-                   .find(|ac| tcx.hygienic_eq(ty_impl_item.name, ac.name, impl_trait_ref.def_id))\n+                   .find(|ac| tcx.hygienic_eq(ty_impl_item.name.to_ident(), ac.name.to_ident(),\n+                                              impl_trait_ref.def_id))\n             });\n \n         // Check that impl definition matches trait definition"}, {"sha": "3a1390bb3c24f004a211500f974222d651942383", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe9b4d76331103e05d0347c9d36526ca3242117/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1fe9b4d76331103e05d0347c9d36526ca3242117", "patch": "@@ -4293,7 +4293,7 @@ pub struct TypeBinding {\n impl Clean<TypeBinding> for hir::TypeBinding {\n     fn clean(&self, cx: &DocContext) -> TypeBinding {\n         TypeBinding {\n-            name: self.name.clean(cx),\n+            name: self.ident.name.clean(cx),\n             ty: self.ty.clean(cx)\n         }\n     }"}]}