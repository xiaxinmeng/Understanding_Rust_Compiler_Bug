{"sha": "a988c9a839e340c6f82a808d7edede8d0af82d95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ODhjOWE4MzllMzQwYzZmODJhODA4ZDdlZGVkZThkMGFmODJkOTU=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-03T20:44:27Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-09T00:48:48Z"}, "message": "Refactor `Resolver` field `def_map` from `RefCell<DefMap>` to `DefMap`", "tree": {"sha": "24fdbd4f40757ea229e9e05c57d12e3c722610a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24fdbd4f40757ea229e9e05c57d12e3c722610a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a988c9a839e340c6f82a808d7edede8d0af82d95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a988c9a839e340c6f82a808d7edede8d0af82d95", "html_url": "https://github.com/rust-lang/rust/commit/a988c9a839e340c6f82a808d7edede8d0af82d95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a988c9a839e340c6f82a808d7edede8d0af82d95/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c2fa93e81d25862362a3ebc91180ed77f38b9a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c2fa93e81d25862362a3ebc91180ed77f38b9a1", "html_url": "https://github.com/rust-lang/rust/commit/8c2fa93e81d25862362a3ebc91180ed77f38b9a1"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "2ed3c8486732ad22e06a98a568541a15ab2705e4", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a988c9a839e340c6f82a808d7edede8d0af82d95/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a988c9a839e340c6f82a808d7edede8d0af82d95/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a988c9a839e340c6f82a808d7edede8d0af82d95", "patch": "@@ -1009,7 +1009,7 @@ pub struct Resolver<'a, 'tcx: 'a> {\n     // The idents for the primitive types.\n     primitive_type_table: PrimitiveTypeTable,\n \n-    def_map: RefCell<DefMap>,\n+    def_map: DefMap,\n     freevars: FreevarMap,\n     freevars_seen: NodeMap<NodeMap<usize>>,\n     export_map: ExportMap,\n@@ -1133,7 +1133,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n             primitive_type_table: PrimitiveTypeTable::new(),\n \n-            def_map: RefCell::new(NodeMap()),\n+            def_map: NodeMap(),\n             freevars: NodeMap(),\n             freevars_seen: NodeMap(),\n             export_map: NodeMap(),\n@@ -2001,14 +2001,16 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     // user and one 'x' came from the macro.\n     fn binding_mode_map(&mut self, pat: &Pat) -> BindingMap {\n         let mut result = HashMap::new();\n-        pat_bindings(&self.def_map, pat, |binding_mode, _id, sp, path1| {\n+        let def_map = RefCell::new(::std::mem::replace(&mut self.def_map, NodeMap()));\n+        pat_bindings(&def_map, pat, |binding_mode, _id, sp, path1| {\n             let name = path1.node;\n             result.insert(name,\n                           BindingInfo {\n                               span: sp,\n                               binding_mode: binding_mode,\n                           });\n         });\n+        self.def_map = def_map.into_inner();\n         return result;\n     }\n \n@@ -2799,7 +2801,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n         if let Some(node_id) = self.current_self_type.as_ref().and_then(extract_node_id) {\n             // Look for a field with the same name in the current self_type.\n-            match self.def_map.borrow().get(&node_id).map(|d| d.full_def()) {\n+            match self.def_map.get(&node_id).map(|d| d.full_def()) {\n                 Some(Def::Enum(did)) |\n                 Some(Def::TyAlias(did)) |\n                 Some(Def::Struct(did)) |\n@@ -3273,7 +3275,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n     fn record_def(&mut self, node_id: NodeId, resolution: PathResolution) {\n         debug!(\"(recording def) recording {:?} for {}\", resolution, node_id);\n-        if let Some(prev_res) = self.def_map.borrow_mut().insert(node_id, resolution) {\n+        if let Some(prev_res) = self.def_map.insert(node_id, resolution) {\n             let span = self.ast_map.opt_span(node_id).unwrap_or(codemap::DUMMY_SP);\n             span_bug!(span,\n                       \"path resolved multiple times ({:?} before, {:?} now)\",\n@@ -3314,7 +3316,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             Success(module) => {\n                 let def = module.def.unwrap();\n                 let path_resolution = PathResolution { base_def: def, depth: 0 };\n-                self.def_map.borrow_mut().insert(id, path_resolution);\n+                self.def_map.insert(id, path_resolution);\n                 ty::Visibility::Restricted(self.ast_map.as_local_node_id(def.def_id()).unwrap())\n             }\n             Failed(Some((span, msg))) => {\n@@ -3568,7 +3570,7 @@ pub fn resolve_crate<'a, 'tcx>(session: &'a Session,\n     resolver.report_privacy_errors();\n \n     CrateMap {\n-        def_map: resolver.def_map,\n+        def_map: RefCell::new(resolver.def_map),\n         freevars: resolver.freevars,\n         maybe_unused_trait_imports: resolver.maybe_unused_trait_imports,\n         export_map: resolver.export_map,"}, {"sha": "a93b129a72bcb365884e828da41288062ff3b46a", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a988c9a839e340c6f82a808d7edede8d0af82d95/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a988c9a839e340c6f82a808d7edede8d0af82d95/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=a988c9a839e340c6f82a808d7edede8d0af82d95", "patch": "@@ -608,7 +608,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n             None => value_result.success().and_then(NameBinding::def).unwrap(),\n         };\n         let path_resolution = PathResolution { base_def: def, depth: 0 };\n-        self.resolver.def_map.borrow_mut().insert(directive.id, path_resolution);\n+        self.resolver.def_map.insert(directive.id, path_resolution);\n \n         debug!(\"(resolving single import) successfully resolved import\");\n         return Success(());\n@@ -653,11 +653,8 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n \n         // Record the destination of this import\n         if let Some(did) = target_module.def_id() {\n-            self.resolver.def_map.borrow_mut().insert(directive.id,\n-                                                      PathResolution {\n-                                                          base_def: Def::Mod(did),\n-                                                          depth: 0,\n-                                                      });\n+            let resolution = PathResolution { base_def: Def::Mod(did), depth: 0 };\n+            self.resolver.def_map.insert(directive.id, resolution);\n         }\n \n         debug!(\"(resolving glob import) successfully resolved import\");"}]}