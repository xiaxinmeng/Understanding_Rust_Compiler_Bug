{"sha": "6e98a3b64f3c7577aae4317363328ac6a762a2f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlOThhM2I2NGYzYzc1NzdhYWU0MzE3MzYzMzI4YWM2YTc2MmEyZjI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-05T00:50:57Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-05T00:50:57Z"}, "message": "Thread argument-types down to internal_check_outer_lval in type.ml, in preparation for trying to infer type params from call args.", "tree": {"sha": "f842f8861647ea4aafc6618b2a0d9f5e03efecf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f842f8861647ea4aafc6618b2a0d9f5e03efecf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e98a3b64f3c7577aae4317363328ac6a762a2f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e98a3b64f3c7577aae4317363328ac6a762a2f2", "html_url": "https://github.com/rust-lang/rust/commit/6e98a3b64f3c7577aae4317363328ac6a762a2f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e98a3b64f3c7577aae4317363328ac6a762a2f2/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c17ea956a26a05341ff24736105b43f2a16a1ad2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c17ea956a26a05341ff24736105b43f2a16a1ad2", "html_url": "https://github.com/rust-lang/rust/commit/c17ea956a26a05341ff24736105b43f2a16a1ad2"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "787855f0c1a0b3c47635f2a521091d6cfe3b1323", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6e98a3b64f3c7577aae4317363328ac6a762a2f2/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/6e98a3b64f3c7577aae4317363328ac6a762a2f2/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=6e98a3b64f3c7577aae4317363328ac6a762a2f2", "patch": "@@ -472,6 +472,7 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n   and internal_check_outer_lval\n       ~mut:(mut:Ast.mutability)\n       ~deref:(deref:bool)\n+      ~fn_args:(fn_args:(Ast.ty array) option)\n       (infer:Ast.ty option)\n       (lval:Ast.lval)\n       : (Ast.ty * int) =\n@@ -485,11 +486,15 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n           demand expected actual;\n           yield_ty actual\n       | None, (LTYPE_poly _ as lty) ->\n-          Common.err\n-            None\n-            \"not enough context to automatically instantiate the polymorphic \\\n-              type '%a'; supply type parameters explicitly\"\n-            sprintf_ltype lty\n+          begin\n+            match fn_args with\n+                None ->\n+                  Common.err None\n+                    \"can't auto-instantiate %a\" sprintf_ltype lty\n+              | Some args ->\n+                  Common.err None \"can't auto-instantiate %a on %d args\"\n+                    sprintf_ltype lty (Array.length args)\n+          end\n       | Some _, (LTYPE_poly _) ->\n           (* FIXME: auto-instantiate *)\n           Common.unimpl\n@@ -502,6 +507,7 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n   and generic_check_lval\n       ~mut:(mut:Ast.mutability)\n       ~deref:(deref:bool)\n+      ~fn_args:(fn_args:(Ast.ty array) option)\n       (infer:Ast.ty option)\n       (lval:Ast.lval)\n       : Ast.ty =\n@@ -521,7 +527,7 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n                 | Some t -> Fmt.fmt_to_str Ast.fmt_ty t))\n     in\n     let (lval_ty, n_boxes) =\n-      internal_check_outer_lval ~mut:mut ~deref:deref infer lval\n+      internal_check_outer_lval ~mut ~deref ~fn_args infer lval\n     in\n     let _ =\n       iflog cx\n@@ -563,9 +569,10 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n   and check_lval\n       ?mut:(mut=Ast.MUT_immutable)\n       ?deref:(deref=false)\n+      ?fn_args:(fn_args=None)\n       (lval:Ast.lval)\n       : Ast.ty =\n-    generic_check_lval ~mut:mut ~deref:deref None lval\n+    generic_check_lval ~fn_args ~mut ~deref None lval\n \n   and check_atom ?deref:(deref=false) (atom:Ast.atom) : Ast.ty =\n     match atom with\n@@ -582,7 +589,7 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n       (ty:Ast.ty)\n       (lval:Ast.lval)\n       : unit =\n-    ignore (generic_check_lval ?mut:mut ~deref:false\n+    ignore (generic_check_lval ~mut ~deref:false ~fn_args:None\n               (Some (Ast.TY_mutable ty)) lval)\n   in\n \n@@ -636,7 +643,7 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n    * returns the return type. *)\n   let check_fn (callee:Ast.lval) (args:Ast.atom array) : Ast.ty =\n     let arg_tys = Array.map check_atom args in\n-    let callee_ty = check_lval callee in\n+    let callee_ty = check_lval callee ~fn_args:(Some arg_tys) in\n     demand_fn (Array.map (fun ty -> Some ty) arg_tys) callee_ty\n   in\n "}]}