{"sha": "b049c88fbe661f2ef1f1f7806788fed59dc1bfa8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNDljODhmYmU2NjFmMmVmMWYxZjc4MDY3ODhmZWQ1OWRjMWJmYTg=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-04-16T16:07:08Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-04-16T16:39:31Z"}, "message": "Eat dogfood", "tree": {"sha": "70f62592a8514e62d89133fe6b8909260091d331", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70f62592a8514e62d89133fe6b8909260091d331"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b049c88fbe661f2ef1f1f7806788fed59dc1bfa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b049c88fbe661f2ef1f1f7806788fed59dc1bfa8", "html_url": "https://github.com/rust-lang/rust/commit/b049c88fbe661f2ef1f1f7806788fed59dc1bfa8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b049c88fbe661f2ef1f1f7806788fed59dc1bfa8/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0462666c7067d8992501aa8997d16e18da021ee5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0462666c7067d8992501aa8997d16e18da021ee5", "html_url": "https://github.com/rust-lang/rust/commit/0462666c7067d8992501aa8997d16e18da021ee5"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "67f0e0c78700bc56f9bcd19373b6a27f205ad8bc", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b049c88fbe661f2ef1f1f7806788fed59dc1bfa8/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b049c88fbe661f2ef1f1f7806788fed59dc1bfa8/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=b049c88fbe661f2ef1f1f7806788fed59dc1bfa8", "patch": "@@ -261,7 +261,7 @@ fn simplify_not(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<String> {\n             }\n             METHODS_WITH_NEGATION\n                 .iter()\n-                .cloned()\n+                .copied()\n                 .flat_map(|(a, b)| vec![(a, b), (b, a)])\n                 .find(|&(a, _)| {\n                     let path: &str = &path.ident.name.as_str();"}, {"sha": "6a2666bc6c0111026890f8ef361af6cb1fa0682d", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b049c88fbe661f2ef1f1f7806788fed59dc1bfa8/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b049c88fbe661f2ef1f1f7806788fed59dc1bfa8/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=b049c88fbe661f2ef1f1f7806788fed59dc1bfa8", "patch": "@@ -323,7 +323,7 @@ fn get_implementing_type<'a>(path: &QPath<'_>, candidates: &'a [&str], function:\n         if let [int] = &*tp.segments;\n         then {\n             let name = &int.ident.name.as_str();\n-            candidates.iter().find(|c| name == *c).cloned()\n+            candidates.iter().find(|c| name == *c).copied()\n         } else {\n             None\n         }\n@@ -337,7 +337,7 @@ fn int_ty_to_sym<'tcx>(path: &QPath<'_>) -> Option<&'tcx str> {\n         if let [ty] = &*path.segments;\n         then {\n             let name = &ty.ident.name.as_str();\n-            INTS.iter().find(|c| name == *c).cloned()\n+            INTS.iter().find(|c| name == *c).copied()\n         } else {\n             None\n         }"}, {"sha": "e97b7c9417033d9a9929f7a994fafb5f08f4b0e5", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b049c88fbe661f2ef1f1f7806788fed59dc1bfa8/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b049c88fbe661f2ef1f1f7806788fed59dc1bfa8/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=b049c88fbe661f2ef1f1f7806788fed59dc1bfa8", "patch": "@@ -100,7 +100,7 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n         ExprKind::Binary(_, e1, e2)\n         | ExprKind::Assign(e1, e2, _)\n         | ExprKind::AssignOp(_, e1, e2)\n-        | ExprKind::Index(e1, e2) => never_loop_expr_all(&mut [e1, e2].iter().cloned(), main_loop_id),\n+        | ExprKind::Index(e1, e2) => never_loop_expr_all(&mut [e1, e2].iter().copied(), main_loop_id),\n         ExprKind::Loop(b, _, _, _) => {\n             // Break can come from the inner loop so remove them.\n             absorb_break(&never_loop_block(b, main_loop_id))"}, {"sha": "f4102709d7ee567d88a63d5537637110bcd78cbc", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b049c88fbe661f2ef1f1f7806788fed59dc1bfa8/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b049c88fbe661f2ef1f1f7806788fed59dc1bfa8/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=b049c88fbe661f2ef1f1f7806788fed59dc1bfa8", "patch": "@@ -1124,7 +1124,7 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n             Applicability::MaybeIncorrect,\n         ),\n         variants => {\n-            let mut suggestions: Vec<_> = variants.iter().cloned().map(format_suggestion).collect();\n+            let mut suggestions: Vec<_> = variants.iter().copied().map(format_suggestion).collect();\n             let message = if adt_def.is_variant_list_non_exhaustive() {\n                 suggestions.push(\"_\".into());\n                 \"wildcard matches known variants and will also match future added variants\""}, {"sha": "e33a33e238633aeaf5b68930e536070d80b73cb5", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b049c88fbe661f2ef1f1f7806788fed59dc1bfa8/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b049c88fbe661f2ef1f1f7806788fed59dc1bfa8/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=b049c88fbe661f2ef1f1f7806788fed59dc1bfa8", "patch": "@@ -279,7 +279,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                             spans.extend(\n                                 deref_span\n                                     .iter()\n-                                    .cloned()\n+                                    .copied()\n                                     .map(|span| (span, format!(\"*{}\", snippet(cx, span, \"<expr>\")))),\n                             );\n                             spans.sort_by_key(|&(span, _)| span);"}, {"sha": "4272935bc310e93bfd13bf2dec59c6e6d5ef6559", "filename": "clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b049c88fbe661f2ef1f1f7806788fed59dc1bfa8/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b049c88fbe661f2ef1f1f7806788fed59dc1bfa8/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=b049c88fbe661f2ef1f1f7806788fed59dc1bfa8", "patch": "@@ -195,7 +195,7 @@ fn attempt_to_emit_no_difference_lint(\n     i: usize,\n     expected_loc: IdentLocation,\n ) {\n-    if let Some(binop) = binops.get(i).cloned() {\n+    if let Some(binop) = binops.get(i).copied() {\n         // We need to try and figure out which identifier we should\n         // suggest using instead. Since there could be multiple\n         // replacement candidates in a given expression, and we're"}, {"sha": "7e962472c07f5b4c994027c5303262dbb7c4470b", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b049c88fbe661f2ef1f1f7806788fed59dc1bfa8/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b049c88fbe661f2ef1f1f7806788fed59dc1bfa8/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=b049c88fbe661f2ef1f1f7806788fed59dc1bfa8", "patch": "@@ -573,7 +573,7 @@ impl Write {\n                         diag.multipart_suggestion(\n                             \"try this\",\n                             iter::once((comma_span.to(token_expr.span), String::new()))\n-                                .chain(fmt_spans.iter().cloned().zip(iter::repeat(replacement)))\n+                                .chain(fmt_spans.iter().copied().zip(iter::repeat(replacement)))\n                                 .collect(),\n                             Applicability::MachineApplicable,\n                         );"}, {"sha": "3ad1ac75e560f2f7aedd22a29e02802b12875a9c", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b049c88fbe661f2ef1f1f7806788fed59dc1bfa8/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b049c88fbe661f2ef1f1f7806788fed59dc1bfa8/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=b049c88fbe661f2ef1f1f7806788fed59dc1bfa8", "patch": "@@ -424,7 +424,7 @@ fn reduce_exprkind<'hir>(cx: &LateContext<'_>, kind: &'hir ExprKind<'hir>) -> &'\n                                 TokenKind::LineComment { .. } | TokenKind::BlockComment { .. } | TokenKind::Whitespace\n                             )\n                         })\n-                        .ne([TokenKind::OpenBrace, TokenKind::CloseBrace].iter().cloned()) =>\n+                        .ne([TokenKind::OpenBrace, TokenKind::CloseBrace].iter().copied()) =>\n                 {\n                     kind\n                 },"}, {"sha": "a5986ed00daf56dea56ee6a34c694df8dfe3809c", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b049c88fbe661f2ef1f1f7806788fed59dc1bfa8/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b049c88fbe661f2ef1f1f7806788fed59dc1bfa8/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=b049c88fbe661f2ef1f1f7806788fed59dc1bfa8", "patch": "@@ -1053,7 +1053,7 @@ pub fn is_refutable(cx: &LateContext<'_>, pat: &Pat<'_>) -> bool {\n /// the function once on the given pattern.\n pub fn recurse_or_patterns<'tcx, F: FnMut(&'tcx Pat<'tcx>)>(pat: &'tcx Pat<'tcx>, mut f: F) {\n     if let PatKind::Or(pats) = pat.kind {\n-        pats.iter().cloned().for_each(f)\n+        pats.iter().copied().for_each(f)\n     } else {\n         f(pat)\n     }\n@@ -1230,14 +1230,14 @@ pub fn match_any_def_paths(cx: &LateContext<'_>, did: DefId, paths: &[&[&str]])\n     let search_path = cx.get_def_path(did);\n     paths\n         .iter()\n-        .position(|p| p.iter().map(|x| Symbol::intern(x)).eq(search_path.iter().cloned()))\n+        .position(|p| p.iter().map(|x| Symbol::intern(x)).eq(search_path.iter().copied()))\n }\n \n /// Checks if the given `DefId` matches the path.\n pub fn match_def_path<'tcx>(cx: &LateContext<'tcx>, did: DefId, syms: &[&str]) -> bool {\n     // We should probably move to Symbols in Clippy as well rather than interning every time.\n     let path = cx.get_def_path(did);\n-    syms.iter().map(|x| Symbol::intern(x)).eq(path.iter().cloned())\n+    syms.iter().map(|x| Symbol::intern(x)).eq(path.iter().copied())\n }\n \n pub fn match_panic_call(cx: &LateContext<'_>, expr: &'tcx Expr<'_>) -> Option<&'tcx Expr<'tcx>> {"}]}