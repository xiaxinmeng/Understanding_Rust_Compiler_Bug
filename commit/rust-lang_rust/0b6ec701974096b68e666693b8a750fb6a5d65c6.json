{"sha": "0b6ec701974096b68e666693b8a750fb6a5d65c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNmVjNzAxOTc0MDk2YjY4ZTY2NjY5M2I4YTc1MGZiNmE1ZDY1YzY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-14T02:20:01Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-19T11:20:20Z"}, "message": "Ensure that the type parameters passed to methods outlive the call expression. Fixes #18899.", "tree": {"sha": "42239d8fb7370a51d598c7482e767620729afc63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42239d8fb7370a51d598c7482e767620729afc63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b6ec701974096b68e666693b8a750fb6a5d65c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b6ec701974096b68e666693b8a750fb6a5d65c6", "html_url": "https://github.com/rust-lang/rust/commit/0b6ec701974096b68e666693b8a750fb6a5d65c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b6ec701974096b68e666693b8a750fb6a5d65c6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf7df1e6382e239619a8447719c3c19787d7b60d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf7df1e6382e239619a8447719c3c19787d7b60d", "html_url": "https://github.com/rust-lang/rust/commit/cf7df1e6382e239619a8447719c3c19787d7b60d"}], "stats": {"total": 68, "additions": 54, "deletions": 14}, "files": [{"sha": "c53befcc10d6b76a1541ac3f7f5f1826a5a0abfb", "filename": "src/librustc/middle/typeck/check/method/confirm.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0b6ec701974096b68e666693b8a750fb6a5d65c6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6ec701974096b68e666693b8a750fb6a5d65c6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=0b6ec701974096b68e666693b8a750fb6a5d65c6", "patch": "@@ -31,6 +31,7 @@ struct ConfirmContext<'a, 'tcx:'a> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n     span: Span,\n     self_expr: &'a ast::Expr,\n+    call_expr: &'a ast::Expr,\n }\n \n struct InstantiatedMethodSig<'tcx> {\n@@ -56,6 +57,7 @@ struct InstantiatedMethodSig<'tcx> {\n pub fn confirm<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                          span: Span,\n                          self_expr: &ast::Expr,\n+                         call_expr: &ast::Expr,\n                          unadjusted_self_ty: Ty<'tcx>,\n                          pick: probe::Pick<'tcx>,\n                          supplied_method_types: Vec<Ty<'tcx>>)\n@@ -66,17 +68,18 @@ pub fn confirm<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n            pick.repr(fcx.tcx()),\n            supplied_method_types.repr(fcx.tcx()));\n \n-    let mut confirm_cx = ConfirmContext::new(fcx, span, self_expr);\n+    let mut confirm_cx = ConfirmContext::new(fcx, span, self_expr, call_expr);\n     confirm_cx.confirm(unadjusted_self_ty, pick, supplied_method_types)\n }\n \n impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n     fn new(fcx: &'a FnCtxt<'a, 'tcx>,\n            span: Span,\n-           self_expr: &'a ast::Expr)\n+           self_expr: &'a ast::Expr,\n+           call_expr: &'a ast::Expr)\n            -> ConfirmContext<'a, 'tcx>\n     {\n-        ConfirmContext { fcx: fcx, span: span, self_expr: self_expr }\n+        ConfirmContext { fcx: fcx, span: span, self_expr: self_expr, call_expr: call_expr }\n     }\n \n     fn confirm(&mut self,\n@@ -469,6 +472,10 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n             traits::ObligationCause::misc(self.span),\n             method_bounds_substs,\n             method_bounds);\n+\n+        self.fcx.add_default_region_param_bounds(\n+            method_bounds_substs,\n+            self.call_expr);\n     }\n \n     ///////////////////////////////////////////////////////////////////////////"}, {"sha": "0f4152644adafb80b968de958dcf64b25406a4fd", "filename": "src/librustc/middle/typeck/check/method/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b6ec701974096b68e666693b8a750fb6a5d65c6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6ec701974096b68e666693b8a750fb6a5d65c6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fmod.rs?ref=0b6ec701974096b68e666693b8a750fb6a5d65c6", "patch": "@@ -79,7 +79,7 @@ pub fn lookup<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                         method_name: ast::Name,\n                         self_ty: Ty<'tcx>,\n                         supplied_method_types: Vec<Ty<'tcx>>,\n-                        call_expr_id: ast::NodeId,\n+                        call_expr: &ast::Expr,\n                         self_expr: &ast::Expr)\n                         -> Result<MethodCallee<'tcx>, MethodError>\n {\n@@ -100,14 +100,14 @@ pub fn lookup<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n      * - `self_expr`:             the self expression (`foo`)\n      */\n \n-    debug!(\"lookup(method_name={}, self_ty={}, call_expr_id={}, self_expr={})\",\n+    debug!(\"lookup(method_name={}, self_ty={}, call_expr={}, self_expr={})\",\n            method_name.repr(fcx.tcx()),\n            self_ty.repr(fcx.tcx()),\n-           call_expr_id,\n+           call_expr.repr(fcx.tcx()),\n            self_expr.repr(fcx.tcx()));\n \n-    let pick = try!(probe::probe(fcx, span, method_name, self_ty, call_expr_id));\n-    Ok(confirm::confirm(fcx, span, self_expr, self_ty, pick, supplied_method_types))\n+    let pick = try!(probe::probe(fcx, span, method_name, self_ty, call_expr.id));\n+    Ok(confirm::confirm(fcx, span, self_expr, call_expr, self_ty, pick, supplied_method_types))\n }\n \n pub fn lookup_in_trait<'a, 'tcx>(fcx: &'a FnCtxt<'a, 'tcx>,"}, {"sha": "266b105efc28cdec75fa63564ba5545a64cf08f3", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0b6ec701974096b68e666693b8a750fb6a5d65c6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6ec701974096b68e666693b8a750fb6a5d65c6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=0b6ec701974096b68e666693b8a750fb6a5d65c6", "patch": "@@ -2050,6 +2050,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    pub fn add_default_region_param_bounds(&self,\n+                                           substs: &Substs<'tcx>,\n+                                           expr: &ast::Expr)\n+    {\n+        for &ty in substs.types.iter() {\n+            let default_bound = ty::ReScope(expr.id);\n+            let origin = infer::RelateDefaultParamBound(expr.span, ty);\n+            self.register_region_obligation(origin, ty, default_bound);\n+        }\n+    }\n+\n     pub fn add_obligations_for_parameters(&self,\n                                           cause: traits::ObligationCause<'tcx>,\n                                           substs: &Substs<'tcx>,\n@@ -3180,7 +3191,7 @@ fn check_expr_with_unifier<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                          method_name.node.name,\n                                          expr_t,\n                                          tps,\n-                                         expr.id,\n+                                         expr,\n                                          rcvr) {\n             Ok(method) => {\n                 let method_ty = method.ty;\n@@ -4693,11 +4704,7 @@ fn constrain_path_type_parameters(fcx: &FnCtxt,\n                                   expr: &ast::Expr)\n {\n     fcx.opt_node_ty_substs(expr.id, |item_substs| {\n-        for &ty in item_substs.substs.types.iter() {\n-            let default_bound = ty::ReScope(expr.id);\n-            let origin = infer::RelateDefaultParamBound(expr.span, ty);\n-            fcx.register_region_obligation(origin, ty, default_bound);\n-        }\n+        fcx.add_default_region_param_bounds(&item_substs.substs, expr);\n     });\n }\n "}, {"sha": "f92c264784ae6a402dc6d8d60e69e29d63b4abdd", "filename": "src/test/compile-fail/regions-escape-method.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0b6ec701974096b68e666693b8a750fb6a5d65c6/src%2Ftest%2Fcompile-fail%2Fregions-escape-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6ec701974096b68e666693b8a750fb6a5d65c6/src%2Ftest%2Fcompile-fail%2Fregions-escape-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-method.rs?ref=0b6ec701974096b68e666693b8a750fb6a5d65c6", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test a method call where the parameter `B` would (illegally) be\n+// inferred to a region bound in the method argument. If this program\n+// were accepted, then the closure passed to `s.f` could escape its\n+// argument.\n+\n+struct S;\n+\n+impl S {\n+    fn f<B>(&self, _: |&i32| -> B) {\n+    }\n+}\n+\n+fn main() {\n+    let s = S;\n+    s.f(|p| p) //~ ERROR cannot infer\n+}"}]}