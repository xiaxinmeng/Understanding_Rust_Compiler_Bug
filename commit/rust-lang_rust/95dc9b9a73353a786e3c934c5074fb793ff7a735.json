{"sha": "95dc9b9a73353a786e3c934c5074fb793ff7a735", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZGM5YjlhNzMzNTNhNzg2ZTNjOTM0YzUwNzRmYjc5M2ZmN2E3MzU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-14T11:55:42Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-15T17:00:01Z"}, "message": "ast: normalize `ForeignItemKind::Ty` & `AssocItemKind::TyAlias`.", "tree": {"sha": "a5f79c8dddd7da82b1a0db260a2ce4645be79ba2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5f79c8dddd7da82b1a0db260a2ce4645be79ba2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95dc9b9a73353a786e3c934c5074fb793ff7a735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95dc9b9a73353a786e3c934c5074fb793ff7a735", "html_url": "https://github.com/rust-lang/rust/commit/95dc9b9a73353a786e3c934c5074fb793ff7a735", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95dc9b9a73353a786e3c934c5074fb793ff7a735/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2ae717265c4597d605cf5981a6e557516ccb0c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2ae717265c4597d605cf5981a6e557516ccb0c8", "html_url": "https://github.com/rust-lang/rust/commit/e2ae717265c4597d605cf5981a6e557516ccb0c8"}], "stats": {"total": 229, "additions": 192, "deletions": 37}, "files": [{"sha": "6c4026408ed4a092ac7ff05708039bb07b486ff5", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=95dc9b9a73353a786e3c934c5074fb793ff7a735", "patch": "@@ -682,7 +682,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let ty = self.lower_ty(t, ImplTraitContext::disallowed());\n                     hir::ForeignItemKind::Static(ty, m)\n                 }\n-                ForeignItemKind::Ty => hir::ForeignItemKind::Type,\n+                ForeignItemKind::TyAlias(..) => hir::ForeignItemKind::Type,\n                 ForeignItemKind::Macro(_) => panic!(\"macro shouldn't exist here\"),\n             },\n             vis: self.lower_visibility(&i.vis, None),"}, {"sha": "c539f98aecf44c8f594e6231b353a6d7ffb0692f", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 58, "deletions": 5, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=95dc9b9a73353a786e3c934c5074fb793ff7a735", "patch": "@@ -22,6 +22,9 @@ use syntax::expand::is_proc_macro_attr;\n use syntax::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n use syntax::walk_list;\n \n+const MORE_EXTERN: &str =\n+    \"for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\";\n+\n /// Is `self` allowed semantically as the first parameter in an `FnDecl`?\n enum SelfSemantic {\n     Yes,\n@@ -423,14 +426,59 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn check_impl_assoc_type_no_bounds(&self, bounds: &[GenericBound]) {\n+    fn check_type_no_bounds(&self, bounds: &[GenericBound], ctx: &str) {\n         let span = match bounds {\n             [] => return,\n             [b0] => b0.span(),\n             [b0, .., bl] => b0.span().to(bl.span()),\n         };\n         self.err_handler()\n-            .struct_span_err(span, \"bounds on associated `type`s in `impl`s have no effect\")\n+            .struct_span_err(span, &format!(\"bounds on `type`s in {} have no effect\", ctx))\n+            .emit();\n+    }\n+\n+    fn check_foreign_ty_genericless(&self, generics: &Generics) {\n+        let cannot_have = |span, descr, remove_descr| {\n+            self.err_handler()\n+                .struct_span_err(\n+                    span,\n+                    &format!(\"`type`s inside `extern` blocks cannot have {}\", descr),\n+                )\n+                .span_suggestion(\n+                    span,\n+                    &format!(\"remove the {}\", remove_descr),\n+                    String::new(),\n+                    Applicability::MaybeIncorrect,\n+                )\n+                .span_label(self.current_extern_span(), \"`extern` block begins here\")\n+                .note(MORE_EXTERN)\n+                .emit();\n+        };\n+\n+        if !generics.params.is_empty() {\n+            cannot_have(generics.span, \"generic parameters\", \"generic parameters\");\n+        }\n+\n+        if !generics.where_clause.predicates.is_empty() {\n+            cannot_have(generics.where_clause.span, \"`where` clauses\", \"`where` clause\");\n+        }\n+    }\n+\n+    fn check_foreign_ty_bodyless(&self, ident: Ident, body: Option<&Ty>) {\n+        let body = match body {\n+            None => return,\n+            Some(body) => body,\n+        };\n+        self.err_handler()\n+            .struct_span_err(ident.span, \"incorrect `type` inside `extern` block\")\n+            .span_label(ident.span, \"cannot have a body\")\n+            .span_label(body.span, \"the invalid body\")\n+            .span_label(\n+                self.current_extern_span(),\n+                \"`extern` blocks define existing foreign types and types \\\n+                inside of them cannot have a body\",\n+            )\n+            .note(MORE_EXTERN)\n             .emit();\n     }\n \n@@ -458,7 +506,7 @@ impl<'a> AstValidator<'a> {\n                 \"`extern` blocks define existing foreign functions and functions \\\n                 inside of them cannot have a body\",\n             )\n-            .note(\"for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\")\n+            .note(MORE_EXTERN)\n             .emit();\n     }\n \n@@ -912,7 +960,12 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 self.check_foreign_fn_bodyless(fi.ident, body.as_deref());\n                 self.check_foreign_fn_headerless(fi.ident, fi.span, sig.header);\n             }\n-            ForeignItemKind::Static(..) | ForeignItemKind::Ty | ForeignItemKind::Macro(..) => {}\n+            ForeignItemKind::TyAlias(generics, bounds, body) => {\n+                self.check_foreign_ty_bodyless(fi.ident, body.as_deref());\n+                self.check_type_no_bounds(bounds, \"`extern` blocks\");\n+                self.check_foreign_ty_genericless(generics);\n+            }\n+            ForeignItemKind::Static(..) | ForeignItemKind::Macro(..) => {}\n         }\n \n         visit::walk_foreign_item(self, fi)\n@@ -1159,7 +1212,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 }\n                 AssocItemKind::TyAlias(_, bounds, body) => {\n                     self.check_impl_item_provided(item.span, body, \"type\", \" = <type>;\");\n-                    self.check_impl_assoc_type_no_bounds(bounds);\n+                    self.check_type_no_bounds(bounds, \"`impl`s\");\n                 }\n                 _ => {}\n             }"}, {"sha": "c543f7095b943da80a288b53698e427554222b5e", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=95dc9b9a73353a786e3c934c5074fb793ff7a735", "patch": "@@ -397,7 +397,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     );\n                 }\n             }\n-            ast::ForeignItemKind::Ty => {\n+            ast::ForeignItemKind::TyAlias(..) => {\n                 gate_feature_post!(&self, extern_types, i.span, \"extern types are experimental\");\n             }\n             ast::ForeignItemKind::Macro(..) => {}"}, {"sha": "b0e1b5d4f42386db80220347e65b31ac763c1038", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=95dc9b9a73353a786e3c934c5074fb793ff7a735", "patch": "@@ -1019,13 +1019,13 @@ impl<'a> State<'a> {\n         self.hardbreak_if_not_bol();\n         self.maybe_print_comment(item.span.lo());\n         self.print_outer_attributes(&item.attrs);\n-        match item.kind {\n-            ast::ForeignItemKind::Fn(ref sig, ref gen, ref body) => {\n+        match &item.kind {\n+            ast::ForeignItemKind::Fn(sig, gen, body) => {\n                 self.print_fn_full(sig, item.ident, gen, &item.vis, body.as_deref(), &item.attrs);\n             }\n-            ast::ForeignItemKind::Static(ref t, m) => {\n+            ast::ForeignItemKind::Static(t, m) => {\n                 self.head(visibility_qualified(&item.vis, \"static\"));\n-                if m == ast::Mutability::Mut {\n+                if *m == ast::Mutability::Mut {\n                     self.word_space(\"mut\");\n                 }\n                 self.print_ident(item.ident);\n@@ -1035,14 +1035,10 @@ impl<'a> State<'a> {\n                 self.end(); // end the head-ibox\n                 self.end(); // end the outer cbox\n             }\n-            ast::ForeignItemKind::Ty => {\n-                self.head(visibility_qualified(&item.vis, \"type\"));\n-                self.print_ident(item.ident);\n-                self.s.word(\";\");\n-                self.end(); // end the head-ibox\n-                self.end(); // end the outer cbox\n+            ast::ForeignItemKind::TyAlias(generics, bounds, ty) => {\n+                self.print_associated_type(item.ident, generics, bounds, ty.as_deref());\n             }\n-            ast::ForeignItemKind::Macro(ref m) => {\n+            ast::ForeignItemKind::Macro(m) => {\n                 self.print_mac(m);\n                 if m.args.need_semicolon() {\n                     self.s.word(\";\");"}, {"sha": "4a5b4ff8e04ac4bed1aec93a27fc962407ed5981", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=95dc9b9a73353a786e3c934c5074fb793ff7a735", "patch": "@@ -876,7 +876,7 @@ impl<'a> Parser<'a> {\n         let lo = self.token.span;\n         let vis = self.parse_visibility(FollowedByType::No)?;\n \n-        let (ident, kind) = if self.check_keyword(kw::Type) {\n+        let (ident, kind) = if self.eat_keyword(kw::Type) {\n             // FOREIGN TYPE ITEM\n             self.parse_item_foreign_type()?\n         } else if self.check_fn_front_matter() {\n@@ -925,10 +925,12 @@ impl<'a> Parser<'a> {\n \n     /// Parses a type from a foreign module.\n     fn parse_item_foreign_type(&mut self) -> PResult<'a, (Ident, ForeignItemKind)> {\n-        self.expect_keyword(kw::Type)?;\n-        let ident = self.parse_ident()?;\n-        self.expect_semi()?;\n-        Ok((ident, ForeignItemKind::Ty))\n+        let (ident, kind) = self.parse_assoc_ty()?;\n+        let kind = match kind {\n+            AssocItemKind::TyAlias(g, b, d) => ForeignItemKind::TyAlias(g, b, d),\n+            _ => unreachable!(),\n+        };\n+        Ok((ident, kind))\n     }\n \n     fn is_static_global(&mut self) -> bool {"}, {"sha": "f5e64443dda6a24ef5b29fc059f537c57c6c43dd", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=95dc9b9a73353a786e3c934c5074fb793ff7a735", "patch": "@@ -829,7 +829,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             ForeignItemKind::Static(..) => {\n                 (Res::Def(DefKind::Static, self.r.definitions.local_def_id(item.id)), ValueNS)\n             }\n-            ForeignItemKind::Ty => {\n+            ForeignItemKind::TyAlias(..) => {\n                 (Res::Def(DefKind::ForeignTy, self.r.definitions.local_def_id(item.id)), TypeNS)\n             }\n             ForeignItemKind::Macro(_) => unreachable!(),"}, {"sha": "1a1a9b1076e986e94f411f392f93abb31441ce55", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=95dc9b9a73353a786e3c934c5074fb793ff7a735", "patch": "@@ -437,7 +437,8 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n     }\n     fn visit_foreign_item(&mut self, foreign_item: &'ast ForeignItem) {\n         match foreign_item.kind {\n-            ForeignItemKind::Fn(_, ref generics, _) => {\n+            ForeignItemKind::Fn(_, ref generics, _)\n+            | ForeignItemKind::TyAlias(ref generics, ..) => {\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n                     visit::walk_foreign_item(this, foreign_item);\n                 });\n@@ -447,7 +448,7 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                     visit::walk_foreign_item(this, foreign_item);\n                 });\n             }\n-            ForeignItemKind::Ty | ForeignItemKind::Macro(..) => {\n+            ForeignItemKind::Macro(..) => {\n                 visit::walk_foreign_item(self, foreign_item);\n             }\n         }"}, {"sha": "5668be40eefe09d44ae96ee484ba241262556bdd", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=95dc9b9a73353a786e3c934c5074fb793ff7a735", "patch": "@@ -1540,7 +1540,7 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n \n                 self.visit_ty(ty);\n             }\n-            ast::ForeignItemKind::Ty => {\n+            ast::ForeignItemKind::TyAlias(..) => {\n                 if let Some(var_data) = self.save_ctxt.get_extern_item_data(item) {\n                     down_cast_data!(var_data, DefData, item.span);\n                     self.dumper.dump_def(&access, var_data);"}, {"sha": "e983802ee11ba4a0754973671ee4005478ae9efb", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=95dc9b9a73353a786e3c934c5074fb793ff7a735", "patch": "@@ -173,7 +173,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                 }))\n             }\n             // FIXME(plietar): needs a new DefKind in rls-data\n-            ast::ForeignItemKind::Ty => None,\n+            ast::ForeignItemKind::TyAlias(..) => None,\n             ast::ForeignItemKind::Macro(..) => None,\n         }\n     }"}, {"sha": "bd7bd9bc6169e72535fac111dc350bcca09c833b", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=95dc9b9a73353a786e3c934c5074fb793ff7a735", "patch": "@@ -773,7 +773,7 @@ impl Sig for ast::ForeignItem {\n \n                 Ok(extend_sig(ty_sig, text, defs, vec![]))\n             }\n-            ast::ForeignItemKind::Ty => {\n+            ast::ForeignItemKind::TyAlias(..) => {\n                 let mut text = \"type \".to_owned();\n                 let name = self.ident.to_string();\n                 let defs = vec![SigElement {"}, {"sha": "fe353bc994afff7656844f1327e85010cb61ed8b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=95dc9b9a73353a786e3c934c5074fb793ff7a735", "patch": "@@ -2610,7 +2610,7 @@ pub enum ForeignItemKind {\n     /// A function.\n     Fn(FnSig, Generics, Option<P<Block>>),\n     /// A type.\n-    Ty,\n+    TyAlias(Generics, GenericBounds, Option<P<Ty>>),\n     /// A macro expanding to an item.\n     Macro(Mac),\n }\n@@ -2620,7 +2620,7 @@ impl ForeignItemKind {\n         match *self {\n             ForeignItemKind::Fn(..) => \"foreign function\",\n             ForeignItemKind::Static(..) => \"foreign static item\",\n-            ForeignItemKind::Ty => \"foreign type\",\n+            ForeignItemKind::TyAlias(..) => \"foreign type\",\n             ForeignItemKind::Macro(..) => \"macro in foreign module\",\n         }\n     }"}, {"sha": "d36b0a28a8cee94db834ae0eb4fb09ac6e7d6c39", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=95dc9b9a73353a786e3c934c5074fb793ff7a735", "patch": "@@ -1051,7 +1051,11 @@ pub fn noop_flat_map_foreign_item<T: MutVisitor>(\n             visit_opt(body, |body| visitor.visit_block(body));\n         }\n         ForeignItemKind::Static(t, _m) => visitor.visit_ty(t),\n-        ForeignItemKind::Ty => {}\n+        ForeignItemKind::TyAlias(generics, bounds, ty) => {\n+            visitor.visit_generics(generics);\n+            visit_bounds(bounds, visitor);\n+            visit_opt(ty, |ty| visitor.visit_ty(ty));\n+        }\n         ForeignItemKind::Macro(mac) => visitor.visit_mac(mac),\n     }\n     visitor.visit_id(id);"}, {"sha": "ed57fc8abf3b48f31f50b2276f0c7ce3f141a0d5", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=95dc9b9a73353a786e3c934c5074fb793ff7a735", "patch": "@@ -535,7 +535,11 @@ pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a ForeignI\n             visitor.visit_fn(kind, item.span, item.id);\n         }\n         ForeignItemKind::Static(ref typ, _) => visitor.visit_ty(typ),\n-        ForeignItemKind::Ty => (),\n+        ForeignItemKind::TyAlias(ref generics, ref bounds, ref ty) => {\n+            visitor.visit_generics(generics);\n+            walk_list!(visitor, visit_param_bound, bounds);\n+            walk_list!(visitor, visit_ty, ty);\n+        }\n         ForeignItemKind::Macro(ref mac) => visitor.visit_mac(mac),\n     }\n "}, {"sha": "96b15232b10d0e7b601baed9a36043c99cd253e5", "filename": "src/test/ui/parser/foreign-ty-semantic-fail.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Ftest%2Fui%2Fparser%2Fforeign-ty-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Ftest%2Fui%2Fparser%2Fforeign-ty-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fforeign-ty-semantic-fail.rs?ref=95dc9b9a73353a786e3c934c5074fb793ff7a735", "patch": "@@ -0,0 +1,18 @@\n+#![feature(extern_types)]\n+\n+fn main() {}\n+\n+extern \"C\" {\n+    type A: Ord;\n+    //~^ ERROR bounds on `type`s in `extern` blocks have no effect\n+    type B<'a> where 'a: 'static;\n+    //~^ ERROR `type`s inside `extern` blocks cannot have generic parameters\n+    //~| ERROR `type`s inside `extern` blocks cannot have `where` clauses\n+    type C<T: Ord> where T: 'static;\n+    //~^ ERROR `type`s inside `extern` blocks cannot have generic parameters\n+    //~| ERROR `type`s inside `extern` blocks cannot have `where` clauses\n+    type D = u8;\n+    //~^ ERROR incorrect `type` inside `extern` block\n+\n+    type E: where;\n+}"}, {"sha": "588e4966aaeb567d824873131bbefda212a89088", "filename": "src/test/ui/parser/foreign-ty-semantic-fail.stderr", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Ftest%2Fui%2Fparser%2Fforeign-ty-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Ftest%2Fui%2Fparser%2Fforeign-ty-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fforeign-ty-semantic-fail.stderr?ref=95dc9b9a73353a786e3c934c5074fb793ff7a735", "patch": "@@ -0,0 +1,65 @@\n+error: bounds on `type`s in `extern` blocks have no effect\n+  --> $DIR/foreign-ty-semantic-fail.rs:6:13\n+   |\n+LL |     type A: Ord;\n+   |             ^^^\n+\n+error: `type`s inside `extern` blocks cannot have generic parameters\n+  --> $DIR/foreign-ty-semantic-fail.rs:8:11\n+   |\n+LL | extern \"C\" {\n+   | ---------- `extern` block begins here\n+...\n+LL |     type B<'a> where 'a: 'static;\n+   |           ^^^^ help: remove the generic parameters\n+   |\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: `type`s inside `extern` blocks cannot have `where` clauses\n+  --> $DIR/foreign-ty-semantic-fail.rs:8:16\n+   |\n+LL | extern \"C\" {\n+   | ---------- `extern` block begins here\n+...\n+LL |     type B<'a> where 'a: 'static;\n+   |                ^^^^^^^^^^^^^^^^^ help: remove the `where` clause\n+   |\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: `type`s inside `extern` blocks cannot have generic parameters\n+  --> $DIR/foreign-ty-semantic-fail.rs:11:11\n+   |\n+LL | extern \"C\" {\n+   | ---------- `extern` block begins here\n+...\n+LL |     type C<T: Ord> where T: 'static;\n+   |           ^^^^^^^^ help: remove the generic parameters\n+   |\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: `type`s inside `extern` blocks cannot have `where` clauses\n+  --> $DIR/foreign-ty-semantic-fail.rs:11:20\n+   |\n+LL | extern \"C\" {\n+   | ---------- `extern` block begins here\n+...\n+LL |     type C<T: Ord> where T: 'static;\n+   |                    ^^^^^^^^^^^^^^^^ help: remove the `where` clause\n+   |\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: incorrect `type` inside `extern` block\n+  --> $DIR/foreign-ty-semantic-fail.rs:14:10\n+   |\n+LL | extern \"C\" {\n+   | ---------- `extern` blocks define existing foreign types and types inside of them cannot have a body\n+...\n+LL |     type D = u8;\n+   |          ^   -- the invalid body\n+   |          |\n+   |          cannot have a body\n+   |\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "a746de1f14f4da082df949c3c361cbb7fe6a9216", "filename": "src/test/ui/parser/foreign-ty-syntactic-pass.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Ftest%2Fui%2Fparser%2Fforeign-ty-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Ftest%2Fui%2Fparser%2Fforeign-ty-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fforeign-ty-syntactic-pass.rs?ref=95dc9b9a73353a786e3c934c5074fb793ff7a735", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+extern \"C\" {\n+    type A: Ord;\n+    type A<'a> where 'a: 'static;\n+    type A<T: Ord> where T: 'static;\n+    type A = u8;\n+    type A<'a: 'static, T: Ord + 'static>: Eq + PartialEq where T: 'static + Copy = Vec<u8>;\n+}"}, {"sha": "fa9c7ababcf9eb1a2d1fc3966a94e46364f31f1f", "filename": "src/test/ui/parser/impl-item-type-no-body-semantic-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.rs?ref=95dc9b9a73353a786e3c934c5074fb793ff7a735", "patch": "@@ -11,11 +11,11 @@ impl X {\n     //~| ERROR associated types are not yet supported in inherent impls\n     type Z: Ord;\n     //~^ ERROR associated type in `impl` without body\n-    //~| ERROR bounds on associated `type`s in `impl`s have no effect\n+    //~| ERROR bounds on `type`s in `impl`s have no effect\n     //~| ERROR associated types are not yet supported in inherent impls\n     type W: Ord where Self: Eq;\n     //~^ ERROR associated type in `impl` without body\n-    //~| ERROR bounds on associated `type`s in `impl`s have no effect\n+    //~| ERROR bounds on `type`s in `impl`s have no effect\n     //~| ERROR associated types are not yet supported in inherent impls\n     type W where Self: Eq;\n     //~^ ERROR associated type in `impl` without body"}, {"sha": "541d9317c79d08eb3abbbbf0e15317a6554e9ed4", "filename": "src/test/ui/parser/impl-item-type-no-body-semantic-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95dc9b9a73353a786e3c934c5074fb793ff7a735/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr?ref=95dc9b9a73353a786e3c934c5074fb793ff7a735", "patch": "@@ -14,7 +14,7 @@ LL |     type Z: Ord;\n    |                |\n    |                help: provide a definition for the type: `= <type>;`\n \n-error: bounds on associated `type`s in `impl`s have no effect\n+error: bounds on `type`s in `impl`s have no effect\n   --> $DIR/impl-item-type-no-body-semantic-fail.rs:12:13\n    |\n LL |     type Z: Ord;\n@@ -28,7 +28,7 @@ LL |     type W: Ord where Self: Eq;\n    |                               |\n    |                               help: provide a definition for the type: `= <type>;`\n \n-error: bounds on associated `type`s in `impl`s have no effect\n+error: bounds on `type`s in `impl`s have no effect\n   --> $DIR/impl-item-type-no-body-semantic-fail.rs:16:13\n    |\n LL |     type W: Ord where Self: Eq;"}]}