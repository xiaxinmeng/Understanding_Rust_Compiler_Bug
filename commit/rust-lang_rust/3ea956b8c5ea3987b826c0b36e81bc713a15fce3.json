{"sha": "3ea956b8c5ea3987b826c0b36e81bc713a15fce3", "node_id": "C_kwDOAAsO6NoAKDNlYTk1NmI4YzVlYTM5ODdiODI2YzBiMzZlODFiYzcxM2ExNWZjZTM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-09-24T17:44:32Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-10-15T17:50:33Z"}, "message": "Remove a now-unused trait", "tree": {"sha": "3613e56374eecad33a71caba4b5045801ca45e0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3613e56374eecad33a71caba4b5045801ca45e0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ea956b8c5ea3987b826c0b36e81bc713a15fce3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ea956b8c5ea3987b826c0b36e81bc713a15fce3", "html_url": "https://github.com/rust-lang/rust/commit/3ea956b8c5ea3987b826c0b36e81bc713a15fce3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ea956b8c5ea3987b826c0b36e81bc713a15fce3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07b8bbb1f6ecbdcd30f6fb0fdf9b29e169a19451", "url": "https://api.github.com/repos/rust-lang/rust/commits/07b8bbb1f6ecbdcd30f6fb0fdf9b29e169a19451", "html_url": "https://github.com/rust-lang/rust/commit/07b8bbb1f6ecbdcd30f6fb0fdf9b29e169a19451"}], "stats": {"total": 45, "additions": 1, "deletions": 44}, "files": [{"sha": "f71cf09ecf6304941c6fb6d2a04497185ed0ad58", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3ea956b8c5ea3987b826c0b36e81bc713a15fce3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ea956b8c5ea3987b826c0b36e81bc713a15fce3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=3ea956b8c5ea3987b826c0b36e81bc713a15fce3", "patch": "@@ -1,20 +1,18 @@\n use rustc_data_structures::frozen::Frozen;\n use rustc_data_structures::transitive_relation::TransitiveRelation;\n use rustc_infer::infer::canonical::QueryRegionConstraints;\n-use rustc_infer::infer::free_regions::FreeRegionRelations;\n use rustc_infer::infer::outlives;\n use rustc_infer::infer::region_constraints::GenericKind;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::traits::query::OutlivesBound;\n-use rustc_middle::ty::{self, RegionVid, Ty, TyCtxt};\n+use rustc_middle::ty::{self, RegionVid, Ty};\n use rustc_span::DUMMY_SP;\n use rustc_trait_selection::traits::query::type_op::{self, TypeOp};\n use std::rc::Rc;\n use type_op::TypeOpOutput;\n \n use crate::{\n-    nll::ToRegionVid,\n     type_check::constraint_conversion,\n     type_check::{Locations, MirTypeckRegionConstraints},\n     universal_regions::UniversalRegions,\n@@ -383,21 +381,3 @@ impl UniversalRegionRelationsBuilder<'cx, 'tcx> {\n         }\n     }\n }\n-\n-/// This trait is used by the `impl-trait` constraint code to abstract\n-/// over the `FreeRegionMap` from lexical regions and\n-/// `UniversalRegions` (from NLL)`.\n-impl<'tcx> FreeRegionRelations<'tcx> for UniversalRegionRelations<'tcx> {\n-    fn sub_free_regions(\n-        &self,\n-        _tcx: TyCtxt<'tcx>,\n-        shorter: ty::Region<'tcx>,\n-        longer: ty::Region<'tcx>,\n-    ) -> bool {\n-        let shorter = shorter.to_region_vid();\n-        assert!(self.universal_regions.is_universal_region(shorter));\n-        let longer = longer.to_region_vid();\n-        assert!(self.universal_regions.is_universal_region(longer));\n-        self.outlives(longer, shorter)\n-    }\n-}"}, {"sha": "4814b65e320abaaadcad162517586d594dc87b47", "filename": "compiler/rustc_infer/src/infer/free_regions.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3ea956b8c5ea3987b826c0b36e81bc713a15fce3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffree_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ea956b8c5ea3987b826c0b36e81bc713a15fce3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffree_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffree_regions.rs?ref=3ea956b8c5ea3987b826c0b36e81bc713a15fce3", "patch": "@@ -66,8 +66,6 @@ impl<'tcx> FreeRegionMap<'tcx> {\n     /// follows. If we know that `r_b: 'static`, then this function\n     /// will return true, even though we don't know anything that\n     /// directly relates `r_a` and `r_b`.\n-    ///\n-    /// Also available through the `FreeRegionRelations` trait below.\n     pub fn sub_free_regions(\n         &self,\n         tcx: TyCtxt<'tcx>,\n@@ -131,27 +129,6 @@ impl<'tcx> FreeRegionMap<'tcx> {\n     }\n }\n \n-/// The NLL region handling code represents free region relations in a\n-/// slightly different way; this trait allows functions to be abstract\n-/// over which version is in use.\n-pub trait FreeRegionRelations<'tcx> {\n-    /// Tests whether `r_a <= r_b`. Both must be free regions or\n-    /// `'static`.\n-    fn sub_free_regions(\n-        &self,\n-        tcx: TyCtxt<'tcx>,\n-        shorter: ty::Region<'tcx>,\n-        longer: ty::Region<'tcx>,\n-    ) -> bool;\n-}\n-\n-impl<'tcx> FreeRegionRelations<'tcx> for FreeRegionMap<'tcx> {\n-    fn sub_free_regions(&self, tcx: TyCtxt<'tcx>, r_a: Region<'tcx>, r_b: Region<'tcx>) -> bool {\n-        // invoke the \"inherent method\"\n-        self.sub_free_regions(tcx, r_a, r_b)\n-    }\n-}\n-\n impl<'a, 'tcx> Lift<'tcx> for FreeRegionMap<'a> {\n     type Lifted = FreeRegionMap<'tcx>;\n     fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<FreeRegionMap<'tcx>> {"}]}