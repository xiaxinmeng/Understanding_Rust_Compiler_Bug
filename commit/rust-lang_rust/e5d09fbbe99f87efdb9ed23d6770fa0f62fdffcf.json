{"sha": "e5d09fbbe99f87efdb9ed23d6770fa0f62fdffcf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZDA5ZmJiZTk5Zjg3ZWZkYjllZDIzZDY3NzBmYTBmNjJmZGZmY2Y=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-18T17:54:01Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-18T19:09:00Z"}, "message": "Simplify IntEncodedWithFixedSize.", "tree": {"sha": "77f4aff3d3de7214d23350cb7f2149544aa28c1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77f4aff3d3de7214d23350cb7f2149544aa28c1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5d09fbbe99f87efdb9ed23d6770fa0f62fdffcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5d09fbbe99f87efdb9ed23d6770fa0f62fdffcf", "html_url": "https://github.com/rust-lang/rust/commit/e5d09fbbe99f87efdb9ed23d6770fa0f62fdffcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5d09fbbe99f87efdb9ed23d6770fa0f62fdffcf/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5003b3dc31d422dd568eaa6d8339ecdb0df2c526", "url": "https://api.github.com/repos/rust-lang/rust/commits/5003b3dc31d422dd568eaa6d8339ecdb0df2c526", "html_url": "https://github.com/rust-lang/rust/commit/5003b3dc31d422dd568eaa6d8339ecdb0df2c526"}], "stats": {"total": 20, "additions": 7, "deletions": 13}, "files": [{"sha": "40b9522949d01c30e594b5e1b83b9a30a3c5780c", "filename": "compiler/rustc_serialize/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5d09fbbe99f87efdb9ed23d6770fa0f62fdffcf/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5d09fbbe99f87efdb9ed23d6770fa0f62fdffcf/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Flib.rs?ref=e5d09fbbe99f87efdb9ed23d6770fa0f62fdffcf", "patch": "@@ -17,6 +17,8 @@ Core encoding and decoding interfaces.\n #![feature(vec_spare_capacity)]\n #![feature(core_intrinsics)]\n #![feature(int_bits_const)]\n+#![feature(maybe_uninit_array_assume_init)]\n+#![feature(maybe_uninit_uninit_array)]\n #![feature(maybe_uninit_slice)]\n #![feature(new_uninit)]\n #![cfg_attr(test, feature(test))]"}, {"sha": "6aad3f498e99452fab88dd796e29a9c00e658cb9", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e5d09fbbe99f87efdb9ed23d6770fa0f62fdffcf/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5d09fbbe99f87efdb9ed23d6770fa0f62fdffcf/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=e5d09fbbe99f87efdb9ed23d6770fa0f62fdffcf", "patch": "@@ -729,9 +729,7 @@ impl IntEncodedWithFixedSize {\n impl serialize::Encodable<Encoder> for IntEncodedWithFixedSize {\n     fn encode(&self, e: &mut Encoder) -> EncodeResult {\n         let start_pos = e.position();\n-        for i in 0..IntEncodedWithFixedSize::ENCODED_SIZE {\n-            ((self.0 >> (i * 8)) as u8).encode(e)?;\n-        }\n+        e.emit_raw_bytes(&self.0.to_le_bytes());\n         let end_pos = e.position();\n         assert_eq!((end_pos - start_pos), IntEncodedWithFixedSize::ENCODED_SIZE);\n         Ok(())\n@@ -741,9 +739,7 @@ impl serialize::Encodable<Encoder> for IntEncodedWithFixedSize {\n impl serialize::Encodable<FileEncoder> for IntEncodedWithFixedSize {\n     fn encode(&self, e: &mut FileEncoder) -> FileEncodeResult {\n         let start_pos = e.position();\n-        for i in 0..IntEncodedWithFixedSize::ENCODED_SIZE {\n-            ((self.0 >> (i * 8)) as u8).encode(e)?;\n-        }\n+        e.emit_raw_bytes(&self.0.to_le_bytes())?;\n         let end_pos = e.position();\n         assert_eq!((end_pos - start_pos), IntEncodedWithFixedSize::ENCODED_SIZE);\n         Ok(())\n@@ -752,17 +748,13 @@ impl serialize::Encodable<FileEncoder> for IntEncodedWithFixedSize {\n \n impl<'a> serialize::Decodable<Decoder<'a>> for IntEncodedWithFixedSize {\n     fn decode(decoder: &mut Decoder<'a>) -> Result<IntEncodedWithFixedSize, String> {\n-        let mut value: u64 = 0;\n+        let mut bytes = MaybeUninit::uninit_array();\n         let start_pos = decoder.position();\n-\n-        for i in 0..IntEncodedWithFixedSize::ENCODED_SIZE {\n-            let byte: u8 = serialize::Decodable::decode(decoder)?;\n-            value |= (byte as u64) << (i * 8);\n-        }\n-\n+        decoder.read_raw_bytes(&mut bytes)?;\n         let end_pos = decoder.position();\n         assert_eq!((end_pos - start_pos), IntEncodedWithFixedSize::ENCODED_SIZE);\n \n+        let value = u64::from_le_bytes(unsafe { MaybeUninit::array_assume_init(bytes) });\n         Ok(IntEncodedWithFixedSize(value))\n     }\n }"}]}