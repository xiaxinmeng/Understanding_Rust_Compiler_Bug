{"sha": "c6949b3669d23a1694b964108f21d5200c985cb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2OTQ5YjM2NjlkMjNhMTY5NGI5NjQxMDhmMjFkNTIwMGM5ODVjYjU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-04-05T08:26:58Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-04-05T08:26:58Z"}, "message": "libstd: make complex.rs XXX's into issues and FIXME's", "tree": {"sha": "46ea7292032a3843b4d54c077fa53dbb6c2d9d8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46ea7292032a3843b4d54c077fa53dbb6c2d9d8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6949b3669d23a1694b964108f21d5200c985cb5", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6949b3669d23a1694b964108f21d5200c985cb5", "html_url": "https://github.com/rust-lang/rust/commit/c6949b3669d23a1694b964108f21d5200c985cb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6949b3669d23a1694b964108f21d5200c985cb5/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82d54602d7493f9a40a040d43ffe5be692582665", "url": "https://api.github.com/repos/rust-lang/rust/commits/82d54602d7493f9a40a040d43ffe5be692582665", "html_url": "https://github.com/rust-lang/rust/commit/82d54602d7493f9a40a040d43ffe5be692582665"}], "stats": {"total": 7, "additions": 3, "deletions": 4}, "files": [{"sha": "1e8fc0e6c2baad7e8a23bd867e3a4518c77b5b36", "filename": "src/libstd/num/complex.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6949b3669d23a1694b964108f21d5200c985cb5/src%2Flibstd%2Fnum%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6949b3669d23a1694b964108f21d5200c985cb5/src%2Flibstd%2Fnum%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fcomplex.rs?ref=c6949b3669d23a1694b964108f21d5200c985cb5", "patch": "@@ -17,8 +17,8 @@ use core::prelude::*;\n // FIXME #1284: handle complex NaN & infinity etc. This\n // probably doesn't map to C's _Complex correctly.\n \n-// XXX: Need generic sqrt to implement .norm(). Need generic sin/cos\n-// for .to/from_polar().\n+// FIXME #5734:: Need generic sin/cos for .to/from_polar().\n+// FIXME #5735: Need generic sqrt to implement .norm().\n \n \n /// A complex number in Cartesian form.\n@@ -75,7 +75,6 @@ impl<T: Copy + Add<T,T> + Sub<T,T> + Mul<T,T> + Div<T,T> + Neg<T>>\n         let norm_sqr = self.norm_sqr();\n         Cmplx::new(self.re / norm_sqr,\n                     -self.im / norm_sqr)\n-\n     }\n }\n \n@@ -233,7 +232,7 @@ mod test {\n     #[should_fail]\n     #[ignore]\n     fn test_inv_zero() {\n-        // XXX: should this really fail, or just NaN?\n+        // FIXME #5736: should this really fail, or just NaN?\n         _0_0i.inv();\n     }\n "}]}