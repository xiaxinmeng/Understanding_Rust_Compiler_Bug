{"sha": "d99ae9ba56ac3ca2a07dc5b587b5a3c0dd504762", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5OWFlOWJhNTZhYzNjYTJhMDdkYzViNTg3YjVhM2MwZGQ1MDQ3NjI=", "commit": {"author": {"name": "gfreezy", "email": "gfreezy@gmail.com", "date": "2019-03-23T14:49:20Z"}, "committer": {"name": "gfreezy", "email": "gfreezy@gmail.com", "date": "2019-03-23T14:49:20Z"}, "message": "Add impl members assist shold not copy docstrings, attrs and default methods.", "tree": {"sha": "4180f8764bc6e4a0f1d49055cf344755deddd8ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4180f8764bc6e4a0f1d49055cf344755deddd8ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d99ae9ba56ac3ca2a07dc5b587b5a3c0dd504762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d99ae9ba56ac3ca2a07dc5b587b5a3c0dd504762", "html_url": "https://github.com/rust-lang/rust/commit/d99ae9ba56ac3ca2a07dc5b587b5a3c0dd504762", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d99ae9ba56ac3ca2a07dc5b587b5a3c0dd504762/comments", "author": {"login": "gfreezy", "id": 510012, "node_id": "MDQ6VXNlcjUxMDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/510012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfreezy", "html_url": "https://github.com/gfreezy", "followers_url": "https://api.github.com/users/gfreezy/followers", "following_url": "https://api.github.com/users/gfreezy/following{/other_user}", "gists_url": "https://api.github.com/users/gfreezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfreezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfreezy/subscriptions", "organizations_url": "https://api.github.com/users/gfreezy/orgs", "repos_url": "https://api.github.com/users/gfreezy/repos", "events_url": "https://api.github.com/users/gfreezy/events{/privacy}", "received_events_url": "https://api.github.com/users/gfreezy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gfreezy", "id": 510012, "node_id": "MDQ6VXNlcjUxMDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/510012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfreezy", "html_url": "https://github.com/gfreezy", "followers_url": "https://api.github.com/users/gfreezy/followers", "following_url": "https://api.github.com/users/gfreezy/following{/other_user}", "gists_url": "https://api.github.com/users/gfreezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfreezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfreezy/subscriptions", "organizations_url": "https://api.github.com/users/gfreezy/orgs", "repos_url": "https://api.github.com/users/gfreezy/repos", "events_url": "https://api.github.com/users/gfreezy/events{/privacy}", "received_events_url": "https://api.github.com/users/gfreezy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e324d38d6ef3e250ff32a397f4777699e006f7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e324d38d6ef3e250ff32a397f4777699e006f7f", "html_url": "https://github.com/rust-lang/rust/commit/6e324d38d6ef3e250ff32a397f4777699e006f7f"}], "stats": {"total": 64, "additions": 42, "deletions": 22}, "files": [{"sha": "b09478d30faa2973b1799ba7dfdb42a157e5591d", "filename": "crates/ra_assists/src/add_missing_impl_members.rs", "status": "modified", "additions": 42, "deletions": 22, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/d99ae9ba56ac3ca2a07dc5b587b5a3c0dd504762/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d99ae9ba56ac3ca2a07dc5b587b5a3c0dd504762/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs?ref=d99ae9ba56ac3ca2a07dc5b587b5a3c0dd504762", "patch": "@@ -35,6 +35,7 @@ pub(crate) fn add_missing_impl_members(mut ctx: AssistCtx<impl HirDatabase>) ->\n         trait_fns\n             .into_iter()\n             .filter(|t| def_name(t).is_some())\n+            .filter(|t| t.body().is_none())\n             .filter(|t| impl_fns.iter().all(|i| def_name(i) != def_name(t)))\n             .collect()\n     };\n@@ -103,11 +104,13 @@ fn build_func_body(def: &ast::FnDef) -> String {\n     let mut buf = String::new();\n \n     for child in def.syntax().children() {\n-        if child.kind() == SyntaxKind::SEMI {\n-            buf.push_str(\" { unimplemented!() }\")\n-        } else {\n-            child.text().push_to(&mut buf);\n-        }\n+        match (child.prev_sibling().map(|c| c.kind()), child.kind()) {\n+            (_, SyntaxKind::SEMI) => buf.push_str(\" { unimplemented!() }\"),\n+            (_, SyntaxKind::ATTR) | (_, SyntaxKind::COMMENT) => {}\n+            (Some(SyntaxKind::ATTR), SyntaxKind::WHITESPACE)\n+            | (Some(SyntaxKind::COMMENT), SyntaxKind::WHITESPACE) => {}\n+            _ => child.text().push_to(&mut buf),\n+        };\n     }\n \n     buf.trim_end().to_string()\n@@ -180,8 +183,7 @@ struct S;\n \n impl Foo for S {\n     fn bar(&self) {}\n-    fn foo(&self) { unimplemented!() }\n-    fn baz(&self) -> u32 { 42 }<|>\n+    fn foo(&self) { unimplemented!() }<|>\n }\",\n         );\n     }\n@@ -193,7 +195,7 @@ impl Foo for S {\n             \"\n trait Foo { fn foo(&self); }\n struct S;\n-impl Foo for S {<|>}\",\n+impl Foo for S { <|> }\",\n             \"\n trait Foo { fn foo(&self); }\n struct S;\n@@ -232,8 +234,8 @@ impl Foo for S { <|> }\",\n     }\n \n     #[test]\n-    fn test_ignore_unnamed_trait_members() {\n-        check_assist(\n+    fn test_ignore_unnamed_trait_members_and_default_methods() {\n+        check_assist_not_applicable(\n             add_missing_impl_members,\n             \"\n trait Foo {\n@@ -242,15 +244,6 @@ trait Foo {\n }\n struct S;\n impl Foo for S { <|> }\",\n-            \"\n-trait Foo {\n-    fn (arg: u32);\n-    fn valid(some: u32) -> bool { false }\n-}\n-struct S;\n-impl Foo for S {\n-    fn valid(some: u32) -> bool { false }<|>\n-}\",\n         )\n     }\n \n@@ -260,7 +253,7 @@ impl Foo for S {\n             add_missing_impl_members,\n             \"\n trait Foo {\n-    fn valid(some: u32) -> bool { false }\n+    fn valid(some: u32) -> bool;\n }\n struct S;\n \n@@ -269,15 +262,42 @@ mod my_mod {\n }\",\n             \"\n trait Foo {\n-    fn valid(some: u32) -> bool { false }\n+    fn valid(some: u32) -> bool;\n }\n struct S;\n \n mod my_mod {\n     impl crate::Foo for S {\n-        fn valid(some: u32) -> bool { false }<|>\n+        fn valid(some: u32) -> bool { unimplemented!() }<|>\n     }\n }\",\n         )\n     }\n+\n+    #[test]\n+    fn test_with_docstring_and_attrs() {\n+        check_assist(\n+            add_missing_impl_members,\n+            r#\"\n+#[doc(alias = \"test alias\")]\n+trait Foo {\n+    /// doc string\n+    #[must_use]\n+    fn foo(&self);\n+}\n+struct S;\n+impl Foo for S {}<|>\"#,\n+            r#\"\n+#[doc(alias = \"test alias\")]\n+trait Foo {\n+    /// doc string\n+    #[must_use]\n+    fn foo(&self);\n+}\n+struct S;\n+impl Foo for S {\n+    fn foo(&self) { unimplemented!() }<|>\n+}\"#,\n+        )\n+    }\n }"}]}