{"sha": "c055fef0104f017b9f6aaa25ba0fc69ccb34ae8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNTVmZWYwMTA0ZjAxN2I5ZjZhYWEyNWJhMGZjNjljY2IzNGFlOGU=", "commit": {"author": {"name": "Josef Reinhard Brandl", "email": "mail@josefbrandl.de", "date": "2018-06-26T19:06:20Z"}, "committer": {"name": "Josef Reinhard Brandl", "email": "mail@josefbrandl.de", "date": "2018-06-26T19:06:20Z"}, "message": "Nested `LocalTaskObj` in `TaskObj`, remove `SpawnErrorObj` conversions", "tree": {"sha": "e93010d9e38a90558fac5b94d97b10c33534eba0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e93010d9e38a90558fac5b94d97b10c33534eba0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c055fef0104f017b9f6aaa25ba0fc69ccb34ae8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c055fef0104f017b9f6aaa25ba0fc69ccb34ae8e", "html_url": "https://github.com/rust-lang/rust/commit/c055fef0104f017b9f6aaa25ba0fc69ccb34ae8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c055fef0104f017b9f6aaa25ba0fc69ccb34ae8e/comments", "author": {"login": "MajorBreakfast", "id": 340142, "node_id": "MDQ6VXNlcjM0MDE0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/340142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MajorBreakfast", "html_url": "https://github.com/MajorBreakfast", "followers_url": "https://api.github.com/users/MajorBreakfast/followers", "following_url": "https://api.github.com/users/MajorBreakfast/following{/other_user}", "gists_url": "https://api.github.com/users/MajorBreakfast/gists{/gist_id}", "starred_url": "https://api.github.com/users/MajorBreakfast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MajorBreakfast/subscriptions", "organizations_url": "https://api.github.com/users/MajorBreakfast/orgs", "repos_url": "https://api.github.com/users/MajorBreakfast/repos", "events_url": "https://api.github.com/users/MajorBreakfast/events{/privacy}", "received_events_url": "https://api.github.com/users/MajorBreakfast/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MajorBreakfast", "id": 340142, "node_id": "MDQ6VXNlcjM0MDE0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/340142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MajorBreakfast", "html_url": "https://github.com/MajorBreakfast", "followers_url": "https://api.github.com/users/MajorBreakfast/followers", "following_url": "https://api.github.com/users/MajorBreakfast/following{/other_user}", "gists_url": "https://api.github.com/users/MajorBreakfast/gists{/gist_id}", "starred_url": "https://api.github.com/users/MajorBreakfast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MajorBreakfast/subscriptions", "organizations_url": "https://api.github.com/users/MajorBreakfast/orgs", "repos_url": "https://api.github.com/users/MajorBreakfast/repos", "events_url": "https://api.github.com/users/MajorBreakfast/events{/privacy}", "received_events_url": "https://api.github.com/users/MajorBreakfast/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "433e6b31a75eea5ce45493acc63eae462d740338", "url": "https://api.github.com/repos/rust-lang/rust/commits/433e6b31a75eea5ce45493acc63eae462d740338", "html_url": "https://github.com/rust-lang/rust/commit/433e6b31a75eea5ce45493acc63eae462d740338"}], "stats": {"total": 109, "additions": 34, "deletions": 75}, "files": [{"sha": "42d37efbe1977e63149f473958569682fb164efe", "filename": "src/libcore/task/spawn_error.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c055fef0104f017b9f6aaa25ba0fc69ccb34ae8e/src%2Flibcore%2Ftask%2Fspawn_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c055fef0104f017b9f6aaa25ba0fc69ccb34ae8e/src%2Flibcore%2Ftask%2Fspawn_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn_error.rs?ref=c055fef0104f017b9f6aaa25ba0fc69ccb34ae8e", "patch": "@@ -60,23 +60,3 @@ pub struct SpawnLocalObjError {\n     /// The task for which spawning was attempted\n     pub task: LocalTaskObj,\n }\n-\n-impl SpawnLocalObjError {\n-    /// Converts the `SpawnLocalObjError` into a `SpawnObjError`\n-    /// To make this operation safe one has to ensure that the `UnsafeTask`\n-    /// instance from which the `LocalTaskObj` stored inside was created\n-    /// actually implements `Send`.\n-    pub unsafe fn as_spawn_obj_error(self) -> SpawnObjError {\n-        // Safety: Both structs have the same memory layout\n-        mem::transmute::<SpawnLocalObjError, SpawnObjError>(self)\n-    }\n-}\n-\n-impl From<SpawnObjError> for SpawnLocalObjError {\n-    fn from(error: SpawnObjError) -> SpawnLocalObjError {\n-        unsafe {\n-            // Safety: Both structs have the same memory layout\n-            mem::transmute::<SpawnObjError, SpawnLocalObjError>(error)\n-        }\n-    }\n-}"}, {"sha": "c5a41873db42725fbaccfa588996cf0a4ebab68d", "filename": "src/libcore/task/task.rs", "status": "modified", "additions": 34, "deletions": 55, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/c055fef0104f017b9f6aaa25ba0fc69ccb34ae8e/src%2Flibcore%2Ftask%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c055fef0104f017b9f6aaa25ba0fc69ccb34ae8e/src%2Flibcore%2Ftask%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Ftask.rs?ref=c055fef0104f017b9f6aaa25ba0fc69ccb34ae8e", "patch": "@@ -14,57 +14,9 @@\n \n use fmt;\n use future::Future;\n-use mem::{self, PinMut};\n+use mem::PinMut;\n use super::{Context, Poll};\n \n-/// A custom trait object for polling tasks, roughly akin to\n-/// `Box<Future<Output = ()> + Send>`.\n-pub struct TaskObj {\n-    ptr: *mut (),\n-    poll_fn: unsafe fn(*mut (), &mut Context) -> Poll<()>,\n-    drop_fn: unsafe fn(*mut ()),\n-}\n-\n-unsafe impl Send for TaskObj {}\n-\n-impl TaskObj {\n-    /// Create a `TaskObj` from a custom trait object representation.\n-    #[inline]\n-    pub fn new<T: UnsafeTask + Send>(t: T) -> TaskObj {\n-        TaskObj {\n-            ptr: t.into_raw(),\n-            poll_fn: T::poll,\n-            drop_fn: T::drop,\n-        }\n-    }\n-}\n-\n-impl fmt::Debug for TaskObj {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_struct(\"TaskObj\")\n-            .finish()\n-    }\n-}\n-\n-impl Future for TaskObj {\n-    type Output = ();\n-\n-    #[inline]\n-    fn poll(self: PinMut<Self>, cx: &mut Context) -> Poll<()> {\n-        unsafe {\n-            (self.poll_fn)(self.ptr, cx)\n-        }\n-    }\n-}\n-\n-impl Drop for TaskObj {\n-    fn drop(&mut self) {\n-        unsafe {\n-            (self.drop_fn)(self.ptr)\n-        }\n-    }\n-}\n-\n /// A custom trait object for polling tasks, roughly akin to\n /// `Box<Future<Output = ()>>`.\n /// Contrary to `TaskObj`, `LocalTaskObj` does not have a `Send` bound.\n@@ -90,8 +42,7 @@ impl LocalTaskObj {\n     /// instance from which this `LocalTaskObj` was created actually implements\n     /// `Send`.\n     pub unsafe fn as_task_obj(self) -> TaskObj {\n-        // Safety: Both structs have the same memory layout\n-        mem::transmute::<LocalTaskObj, TaskObj>(self)\n+        TaskObj(self)\n     }\n }\n \n@@ -104,10 +55,7 @@ impl fmt::Debug for LocalTaskObj {\n \n impl From<TaskObj> for LocalTaskObj {\n     fn from(task: TaskObj) -> LocalTaskObj {\n-        unsafe {\n-            // Safety: Both structs have the same memory layout\n-            mem::transmute::<TaskObj, LocalTaskObj>(task)\n-        }\n+        task.0\n     }\n }\n \n@@ -130,6 +78,37 @@ impl Drop for LocalTaskObj {\n     }\n }\n \n+/// A custom trait object for polling tasks, roughly akin to\n+/// `Box<Future<Output = ()> + Send>`.\n+pub struct TaskObj(LocalTaskObj);\n+\n+unsafe impl Send for TaskObj {}\n+\n+impl TaskObj {\n+    /// Create a `TaskObj` from a custom trait object representation.\n+    #[inline]\n+    pub fn new<T: UnsafeTask + Send>(t: T) -> TaskObj {\n+        TaskObj(LocalTaskObj::new(t))\n+    }\n+}\n+\n+impl fmt::Debug for TaskObj {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"TaskObj\")\n+            .finish()\n+    }\n+}\n+\n+impl Future for TaskObj {\n+    type Output = ();\n+\n+    #[inline]\n+    fn poll(self: PinMut<Self>, cx: &mut Context) -> Poll<()> {\n+        let pinned_field = unsafe { PinMut::map_unchecked(self, |x| &mut x.0) };\n+        pinned_field.poll(cx)\n+    }\n+}\n+\n /// A custom implementation of a task trait object for `TaskObj`, providing\n /// a hand-rolled vtable.\n ///"}]}