{"sha": "8c0119da775280a55749b868fed573f2ea59b54f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMDExOWRhNzc1MjgwYTU1NzQ5Yjg2OGZlZDU3M2YyZWE1OWI1NGY=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-02-25T21:06:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-25T21:06:16Z"}, "message": "Rollup merge of #82269 - LeSeulArtichaut:cleanup-ppmode, r=spastorino\n\nCleanup `PpMode` and friends\n\nThis PR:\n - Separates `PpSourceMode` and `PpHirMode` to remove invalid states\n - Renames the variant to remove the redundant `Ppm` prefix\n - Adds basic documentation for the different pretty-print modes\n - Cleanups some code to make it more idiomatic\n\nNot sure if this is actually useful, but it looks cleaner to me.", "tree": {"sha": "4f6b85165f44fd6d2f90974ae9795487a605ad3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f6b85165f44fd6d2f90974ae9795487a605ad3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c0119da775280a55749b868fed573f2ea59b54f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgOBFICRBK7hj4Ov3rIwAAdHIIABquFFF7SLGCJlMXOgx72Vw2\ncsRJt4iqQtOXVLAX+qtQa9yq8ZGfSkjJD+uIrWmupLNG18r8FcJo//jgyEG+uKEN\nEKp9AtMIylTZu7urfZ1BBQavGmT3kNMpmZekPeVXjO/Yj9a9tXq63a3G3qb8AnUi\n6r35cn40ygza2STMp+fU42JC1oIKkzedTrICOR2pl+mV6AFn5maAhi6jyS3eA/qo\nM5hGiAWCdwGhMUR257QnxLAIS3HQNoN2jUINo5t3WTvu/eHmGnxJMSsjKFVBtuz6\nK3NFtMlHcJi8Pss74GgBhXiC0f1YC8GzAC0rWKPXHjoSFecr0qLfQEl2ZZf+Tf4=\n=9IQY\n-----END PGP SIGNATURE-----\n", "payload": "tree 4f6b85165f44fd6d2f90974ae9795487a605ad3a\nparent 98f8cce6db6c6c6660eeffee2b3903104e547ecf\nparent dd3772e4f01a9cab1d967c1b80c9c7cbe6014592\nauthor Aaron Hill <aa1ronham@gmail.com> 1614287176 -0500\ncommitter GitHub <noreply@github.com> 1614287176 -0500\n\nRollup merge of #82269 - LeSeulArtichaut:cleanup-ppmode, r=spastorino\n\nCleanup `PpMode` and friends\n\nThis PR:\n - Separates `PpSourceMode` and `PpHirMode` to remove invalid states\n - Renames the variant to remove the redundant `Ppm` prefix\n - Adds basic documentation for the different pretty-print modes\n - Cleanups some code to make it more idiomatic\n\nNot sure if this is actually useful, but it looks cleaner to me.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c0119da775280a55749b868fed573f2ea59b54f", "html_url": "https://github.com/rust-lang/rust/commit/8c0119da775280a55749b868fed573f2ea59b54f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c0119da775280a55749b868fed573f2ea59b54f/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98f8cce6db6c6c6660eeffee2b3903104e547ecf", "url": "https://api.github.com/repos/rust-lang/rust/commits/98f8cce6db6c6c6660eeffee2b3903104e547ecf", "html_url": "https://github.com/rust-lang/rust/commit/98f8cce6db6c6c6660eeffee2b3903104e547ecf"}, {"sha": "dd3772e4f01a9cab1d967c1b80c9c7cbe6014592", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd3772e4f01a9cab1d967c1b80c9c7cbe6014592", "html_url": "https://github.com/rust-lang/rust/commit/dd3772e4f01a9cab1d967c1b80c9c7cbe6014592"}], "stats": {"total": 191, "additions": 92, "deletions": 99}, "files": [{"sha": "1dcc4d147acf23a45de96335b4c4b9fba070d67e", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 27, "deletions": 45, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8c0119da775280a55749b868fed573f2ea59b54f/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c0119da775280a55749b868fed573f2ea59b54f/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=8c0119da775280a55749b868fed573f2ea59b54f", "patch": "@@ -9,7 +9,7 @@ use rustc_hir_pretty as pprust_hir;\n use rustc_middle::hir::map as hir_map;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_mir::util::{write_mir_graphviz, write_mir_pretty};\n-use rustc_session::config::{Input, PpMode, PpSourceMode};\n+use rustc_session::config::{Input, PpHirMode, PpMode, PpSourceMode};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n use rustc_span::FileName;\n@@ -42,43 +42,41 @@ where\n     F: FnOnce(&dyn PrinterSupport) -> A,\n {\n     match *ppmode {\n-        PpmNormal | PpmEveryBodyLoops | PpmExpanded => {\n+        Normal | EveryBodyLoops | Expanded => {\n             let annotation = NoAnn { sess, tcx };\n             f(&annotation)\n         }\n \n-        PpmIdentified | PpmExpandedIdentified => {\n+        Identified | ExpandedIdentified => {\n             let annotation = IdentifiedAnnotation { sess, tcx };\n             f(&annotation)\n         }\n-        PpmExpandedHygiene => {\n+        ExpandedHygiene => {\n             let annotation = HygieneAnnotation { sess };\n             f(&annotation)\n         }\n-        _ => panic!(\"Should use call_with_pp_support_hir\"),\n     }\n }\n-fn call_with_pp_support_hir<A, F>(ppmode: &PpSourceMode, tcx: TyCtxt<'_>, f: F) -> A\n+fn call_with_pp_support_hir<A, F>(ppmode: &PpHirMode, tcx: TyCtxt<'_>, f: F) -> A\n where\n     F: FnOnce(&dyn HirPrinterSupport<'_>, &hir::Crate<'_>) -> A,\n {\n     match *ppmode {\n-        PpmNormal => {\n+        PpHirMode::Normal => {\n             let annotation = NoAnn { sess: tcx.sess, tcx: Some(tcx) };\n             f(&annotation, tcx.hir().krate())\n         }\n \n-        PpmIdentified => {\n+        PpHirMode::Identified => {\n             let annotation = IdentifiedAnnotation { sess: tcx.sess, tcx: Some(tcx) };\n             f(&annotation, tcx.hir().krate())\n         }\n-        PpmTyped => {\n+        PpHirMode::Typed => {\n             abort_on_err(tcx.analysis(LOCAL_CRATE), tcx.sess);\n \n             let annotation = TypedAnnotation { tcx, maybe_typeck_results: Cell::new(None) };\n             tcx.dep_graph.with_ignore(|| f(&annotation, tcx.hir().krate()))\n         }\n-        _ => panic!(\"Should use call_with_pp_support\"),\n     }\n }\n \n@@ -393,16 +391,13 @@ pub fn print_after_parsing(\n ) {\n     let (src, src_name) = get_source(input, sess);\n \n-    let mut out = String::new();\n-\n-    if let PpmSource(s) = ppm {\n+    let out = if let Source(s) = ppm {\n         // Silently ignores an identified node.\n-        let out = &mut out;\n         call_with_pp_support(&s, sess, None, move |annotation| {\n             debug!(\"pretty printing source code {:?}\", s);\n             let sess = annotation.sess();\n             let parse = &sess.parse_sess;\n-            *out = pprust::print_crate(\n+            pprust::print_crate(\n                 sess.source_map(),\n                 krate,\n                 src_name,\n@@ -413,7 +408,7 @@ pub fn print_after_parsing(\n             )\n         })\n     } else {\n-        unreachable!();\n+        unreachable!()\n     };\n \n     write_or_print(&out, ofile);\n@@ -433,17 +428,14 @@ pub fn print_after_hir_lowering<'tcx>(\n \n     let (src, src_name) = get_source(input, tcx.sess);\n \n-    let mut out = String::new();\n-\n-    match ppm {\n-        PpmSource(s) => {\n+    let out = match ppm {\n+        Source(s) => {\n             // Silently ignores an identified node.\n-            let out = &mut out;\n             call_with_pp_support(&s, tcx.sess, Some(tcx), move |annotation| {\n                 debug!(\"pretty printing source code {:?}\", s);\n                 let sess = annotation.sess();\n                 let parse = &sess.parse_sess;\n-                *out = pprust::print_crate(\n+                pprust::print_crate(\n                     sess.source_map(),\n                     krate,\n                     src_name,\n@@ -455,26 +447,20 @@ pub fn print_after_hir_lowering<'tcx>(\n             })\n         }\n \n-        PpmHir(s) => {\n-            let out = &mut out;\n-            call_with_pp_support_hir(&s, tcx, move |annotation, krate| {\n-                debug!(\"pretty printing source code {:?}\", s);\n-                let sess = annotation.sess();\n-                let sm = sess.source_map();\n-                *out = pprust_hir::print_crate(sm, krate, src_name, src, annotation.pp_ann())\n-            })\n-        }\n+        Hir(s) => call_with_pp_support_hir(&s, tcx, move |annotation, krate| {\n+            debug!(\"pretty printing HIR {:?}\", s);\n+            let sess = annotation.sess();\n+            let sm = sess.source_map();\n+            pprust_hir::print_crate(sm, krate, src_name, src, annotation.pp_ann())\n+        }),\n \n-        PpmHirTree(s) => {\n-            let out = &mut out;\n-            call_with_pp_support_hir(&s, tcx, move |_annotation, krate| {\n-                debug!(\"pretty printing source code {:?}\", s);\n-                *out = format!(\"{:#?}\", krate);\n-            });\n-        }\n+        HirTree => call_with_pp_support_hir(&PpHirMode::Normal, tcx, move |_annotation, krate| {\n+            debug!(\"pretty printing HIR tree\");\n+            format!(\"{:#?}\", krate)\n+        }),\n \n         _ => unreachable!(),\n-    }\n+    };\n \n     write_or_print(&out, ofile);\n }\n@@ -493,14 +479,10 @@ fn print_with_analysis(\n     tcx.analysis(LOCAL_CRATE)?;\n \n     match ppm {\n-        PpmMir | PpmMirCFG => match ppm {\n-            PpmMir => write_mir_pretty(tcx, None, &mut out),\n-            PpmMirCFG => write_mir_graphviz(tcx, None, &mut out),\n-            _ => unreachable!(),\n-        },\n+        Mir => write_mir_pretty(tcx, None, &mut out).unwrap(),\n+        MirCFG => write_mir_graphviz(tcx, None, &mut out).unwrap(),\n         _ => unreachable!(),\n     }\n-    .unwrap();\n \n     let out = std::str::from_utf8(&out).unwrap();\n     write_or_print(out, ofile);"}, {"sha": "5217066bbefdec8f5b3a3f786fb8083287786563", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c0119da775280a55749b868fed573f2ea59b54f/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c0119da775280a55749b868fed573f2ea59b54f/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=8c0119da775280a55749b868fed573f2ea59b54f", "patch": "@@ -350,7 +350,7 @@ fn configure_and_expand_inner<'a>(\n         rustc_builtin_macros::test_harness::inject(&sess, &mut resolver, &mut krate)\n     });\n \n-    if let Some(PpMode::PpmSource(PpSourceMode::PpmEveryBodyLoops)) = sess.opts.pretty {\n+    if let Some(PpMode::Source(PpSourceMode::EveryBodyLoops)) = sess.opts.pretty {\n         tracing::debug!(\"replacing bodies with loop {{}}\");\n         util::ReplaceBodyWithLoop::new(&mut resolver).visit_crate(&mut krate);\n     }"}, {"sha": "38da52b88f36969ff48eda4dbbe63bca93eed987", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 64, "deletions": 53, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/8c0119da775280a55749b868fed573f2ea59b54f/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c0119da775280a55749b868fed573f2ea59b54f/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=8c0119da775280a55749b868fed573f2ea59b54f", "patch": "@@ -2057,40 +2057,21 @@ fn parse_pretty(\n     debugging_opts: &DebuggingOptions,\n     efmt: ErrorOutputType,\n ) -> Option<PpMode> {\n-    let pretty = if debugging_opts.unstable_options {\n-        matches.opt_default(\"pretty\", \"normal\").map(|a| {\n-            // stable pretty-print variants only\n-            parse_pretty_inner(efmt, &a, false)\n-        })\n-    } else {\n-        None\n-    };\n-\n-    return if pretty.is_none() {\n-        debugging_opts.unpretty.as_ref().map(|a| {\n-            // extended with unstable pretty-print variants\n-            parse_pretty_inner(efmt, &a, true)\n-        })\n-    } else {\n-        pretty\n-    };\n-\n     fn parse_pretty_inner(efmt: ErrorOutputType, name: &str, extended: bool) -> PpMode {\n         use PpMode::*;\n-        use PpSourceMode::*;\n         let first = match (name, extended) {\n-            (\"normal\", _) => PpmSource(PpmNormal),\n-            (\"identified\", _) => PpmSource(PpmIdentified),\n-            (\"everybody_loops\", true) => PpmSource(PpmEveryBodyLoops),\n-            (\"expanded\", _) => PpmSource(PpmExpanded),\n-            (\"expanded,identified\", _) => PpmSource(PpmExpandedIdentified),\n-            (\"expanded,hygiene\", _) => PpmSource(PpmExpandedHygiene),\n-            (\"hir\", true) => PpmHir(PpmNormal),\n-            (\"hir,identified\", true) => PpmHir(PpmIdentified),\n-            (\"hir,typed\", true) => PpmHir(PpmTyped),\n-            (\"hir-tree\", true) => PpmHirTree(PpmNormal),\n-            (\"mir\", true) => PpmMir,\n-            (\"mir-cfg\", true) => PpmMirCFG,\n+            (\"normal\", _) => Source(PpSourceMode::Normal),\n+            (\"identified\", _) => Source(PpSourceMode::Identified),\n+            (\"everybody_loops\", true) => Source(PpSourceMode::EveryBodyLoops),\n+            (\"expanded\", _) => Source(PpSourceMode::Expanded),\n+            (\"expanded,identified\", _) => Source(PpSourceMode::ExpandedIdentified),\n+            (\"expanded,hygiene\", _) => Source(PpSourceMode::ExpandedHygiene),\n+            (\"hir\", true) => Hir(PpHirMode::Normal),\n+            (\"hir,identified\", true) => Hir(PpHirMode::Identified),\n+            (\"hir,typed\", true) => Hir(PpHirMode::Typed),\n+            (\"hir-tree\", true) => HirTree,\n+            (\"mir\", true) => Mir,\n+            (\"mir-cfg\", true) => MirCFG,\n             _ => {\n                 if extended {\n                     early_error(\n@@ -2119,6 +2100,18 @@ fn parse_pretty(\n         tracing::debug!(\"got unpretty option: {:?}\", first);\n         first\n     }\n+\n+    if debugging_opts.unstable_options {\n+        if let Some(a) = matches.opt_default(\"pretty\", \"normal\") {\n+            // stable pretty-print variants only\n+            return Some(parse_pretty_inner(efmt, &a, false));\n+        }\n+    }\n+\n+    debugging_opts.unpretty.as_ref().map(|a| {\n+        // extended with unstable pretty-print variants\n+        parse_pretty_inner(efmt, &a, true)\n+    })\n }\n \n pub fn make_crate_type_option() -> RustcOptGroup {\n@@ -2226,45 +2219,63 @@ impl fmt::Display for CrateType {\n \n #[derive(Copy, Clone, PartialEq, Debug)]\n pub enum PpSourceMode {\n-    PpmNormal,\n-    PpmEveryBodyLoops,\n-    PpmExpanded,\n-    PpmIdentified,\n-    PpmExpandedIdentified,\n-    PpmExpandedHygiene,\n-    PpmTyped,\n+    /// `--pretty=normal`\n+    Normal,\n+    /// `-Zunpretty=everybody_loops`\n+    EveryBodyLoops,\n+    /// `--pretty=expanded`\n+    Expanded,\n+    /// `--pretty=identified`\n+    Identified,\n+    /// `--pretty=expanded,identified`\n+    ExpandedIdentified,\n+    /// `--pretty=expanded,hygiene`\n+    ExpandedHygiene,\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+pub enum PpHirMode {\n+    /// `-Zunpretty=hir`\n+    Normal,\n+    /// `-Zunpretty=hir,identified`\n+    Identified,\n+    /// `-Zunpretty=hir,typed`\n+    Typed,\n }\n \n #[derive(Copy, Clone, PartialEq, Debug)]\n pub enum PpMode {\n-    PpmSource(PpSourceMode),\n-    PpmHir(PpSourceMode),\n-    PpmHirTree(PpSourceMode),\n-    PpmMir,\n-    PpmMirCFG,\n+    /// Options that print the source code, i.e.\n+    /// `--pretty` and `-Zunpretty=everybody_loops`\n+    Source(PpSourceMode),\n+    /// Options that print the HIR, i.e. `-Zunpretty=hir`\n+    Hir(PpHirMode),\n+    /// `-Zunpretty=hir-tree`\n+    HirTree,\n+    /// `-Zunpretty=mir`\n+    Mir,\n+    /// `-Zunpretty=mir-cfg`\n+    MirCFG,\n }\n \n impl PpMode {\n     pub fn needs_ast_map(&self) -> bool {\n         use PpMode::*;\n         use PpSourceMode::*;\n         match *self {\n-            PpmSource(PpmNormal | PpmIdentified) => false,\n+            Source(Normal | Identified) => false,\n \n-            PpmSource(\n-                PpmExpanded | PpmEveryBodyLoops | PpmExpandedIdentified | PpmExpandedHygiene,\n-            )\n-            | PpmHir(_)\n-            | PpmHirTree(_)\n-            | PpmMir\n-            | PpmMirCFG => true,\n-            PpmSource(PpmTyped) => panic!(\"invalid state\"),\n+            Source(Expanded | EveryBodyLoops | ExpandedIdentified | ExpandedHygiene)\n+            | Hir(_)\n+            | HirTree\n+            | Mir\n+            | MirCFG => true,\n         }\n     }\n \n     pub fn needs_analysis(&self) -> bool {\n         use PpMode::*;\n-        matches!(*self, PpmMir | PpmMirCFG)\n+        matches!(*self, Mir | MirCFG)\n     }\n }\n "}]}