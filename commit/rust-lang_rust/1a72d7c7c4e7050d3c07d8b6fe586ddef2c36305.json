{"sha": "1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305", "node_id": "C_kwDOAAsO6NoAKDFhNzJkN2M3YzRlNzA1MGQzYzA3ZDhiNmZlNTg2ZGRlZjJjMzYzMDU", "commit": {"author": {"name": "Lo\u00efc BRANSTETT", "email": "loic.branstett@epitech.eu", "date": "2021-12-17T19:01:19Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-04-26T08:18:53Z"}, "message": "Implement midpoint for all signed and unsigned integers", "tree": {"sha": "b0ea3d7affe03b9f3fef4fd8fd3c3d597ec12826", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0ea3d7affe03b9f3fef4fd8fd3c3d597ec12826"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305", "html_url": "https://github.com/rust-lang/rust/commit/1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23a76a8ab5f7b29a1eb7aca5f3e4c4a9b866d5b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/23a76a8ab5f7b29a1eb7aca5f3e4c4a9b866d5b7", "html_url": "https://github.com/rust-lang/rust/commit/23a76a8ab5f7b29a1eb7aca5f3e4c4a9b866d5b7"}], "stats": {"total": 151, "additions": 151, "deletions": 0}, "files": [{"sha": "23bf199f4825982f32aa010d5586d77bffd1c533", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305", "patch": "@@ -132,6 +132,7 @@\n #![feature(const_maybe_uninit_assume_init)]\n #![feature(const_maybe_uninit_uninit_array)]\n #![feature(const_nonnull_new)]\n+#![feature(const_num_midpoint)]\n #![feature(const_option)]\n #![feature(const_option_ext)]\n #![feature(const_pin)]"}, {"sha": "1199d09b563d659d1c5fa6cf85b746aa58b090d8", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305", "patch": "@@ -2332,6 +2332,44 @@ macro_rules! int_impl {\n             }\n         }\n \n+        /// Calculates the middle point of `self` and `rhs`.\n+        ///\n+        /// `midpoint(a, b)` is `(a + b) >> 1` as if it were performed in a\n+        /// sufficiently-large signed integral type. This implies that the result is\n+        /// always rounded towards negative infinity and that no overflow will ever occur.\n+        ///\n+        /// # Examples\n+        ///\n+        /// ```\n+        /// #![feature(num_midpoint)]\n+        #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".midpoint(4), 2);\")]\n+        #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".midpoint(-1), -1);\")]\n+        #[doc = concat!(\"assert_eq!((-1\", stringify!($SelfT), \").midpoint(0), -1);\")]\n+        /// ```\n+        #[unstable(feature = \"num_midpoint\", issue = \"110840\")]\n+        #[rustc_const_unstable(feature = \"const_num_midpoint\", issue = \"110840\")]\n+        #[rustc_allow_const_fn_unstable(const_num_midpoint)]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        pub const fn midpoint(self, rhs: Self) -> Self {\n+            const U: $UnsignedT = <$SelfT>::MIN.unsigned_abs();\n+\n+            // Map an $SelfT to an $UnsignedT\n+            // ex: i8 [-128; 127] to [0; 255]\n+            const fn map(a: $SelfT) -> $UnsignedT {\n+                (a as $UnsignedT) ^ U\n+            }\n+\n+            // Map an $UnsignedT to an $SelfT\n+            // ex: u8 [0; 255] to [-128; 127]\n+            const fn demap(a: $UnsignedT) -> $SelfT {\n+                (a ^ U) as $SelfT\n+            }\n+\n+            demap(<$UnsignedT>::midpoint(map(self), map(rhs)))\n+        }\n+\n         /// Returns the logarithm of the number with respect to an arbitrary base,\n         /// rounded down.\n         ///"}, {"sha": "5f04c06a8d3484cdb3327c21081ae111fcf388a7", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305", "patch": "@@ -95,6 +95,57 @@ depending on the target pointer size.\n     };\n }\n \n+macro_rules! midpoint_impl {\n+    ($SelfT:ty, unsigned) => {\n+        /// Calculates the middle point of `self` and `rhs`.\n+        ///\n+        /// `midpoint(a, b)` is `(a + b) >> 1` as if it were performed in a\n+        /// sufficiently-large signed integral type. This implies that the result is\n+        /// always rounded towards negative infinity and that no overflow will ever occur.\n+        ///\n+        /// # Examples\n+        ///\n+        /// ```\n+        /// #![feature(num_midpoint)]\n+        #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".midpoint(4), 2);\")]\n+        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".midpoint(4), 2);\")]\n+        /// ```\n+        #[unstable(feature = \"num_midpoint\", issue = \"110840\")]\n+        #[rustc_const_unstable(feature = \"const_num_midpoint\", issue = \"110840\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        pub const fn midpoint(self, rhs: $SelfT) -> $SelfT {\n+            // Use the well known branchless algorthim from Hacker's Delight to compute\n+            // `(a + b) / 2` without overflowing: `((a ^ b) >> 1) + (a & b)`.\n+            ((self ^ rhs) >> 1) + (self & rhs)\n+        }\n+    };\n+    ($SelfT:ty, $WideT:ty, unsigned) => {\n+        /// Calculates the middle point of `self` and `rhs`.\n+        ///\n+        /// `midpoint(a, b)` is `(a + b) >> 1` as if it were performed in a\n+        /// sufficiently-large signed integral type. This implies that the result is\n+        /// always rounded towards negative infinity and that no overflow will ever occur.\n+        ///\n+        /// # Examples\n+        ///\n+        /// ```\n+        /// #![feature(num_midpoint)]\n+        #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".midpoint(4), 2);\")]\n+        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".midpoint(4), 2);\")]\n+        /// ```\n+        #[unstable(feature = \"num_midpoint\", issue = \"110840\")]\n+        #[rustc_const_unstable(feature = \"const_num_midpoint\", issue = \"110840\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        pub const fn midpoint(self, rhs: $SelfT) -> $SelfT {\n+            ((self as $WideT + rhs as $WideT) / 2) as $SelfT\n+        }\n+    };\n+}\n+\n macro_rules! widening_impl {\n     ($SelfT:ty, $WideT:ty, $BITS:literal, unsigned) => {\n         /// Calculates the complete product `self * rhs` without the possibility to overflow.\n@@ -455,6 +506,7 @@ impl u8 {\n         bound_condition = \"\",\n     }\n     widening_impl! { u8, u16, 8, unsigned }\n+    midpoint_impl! { u8, u16, unsigned }\n \n     /// Checks if the value is within the ASCII range.\n     ///\n@@ -1057,6 +1109,7 @@ impl u16 {\n         bound_condition = \"\",\n     }\n     widening_impl! { u16, u32, 16, unsigned }\n+    midpoint_impl! { u16, u32, unsigned }\n \n     /// Checks if the value is a Unicode surrogate code point, which are disallowed values for [`char`].\n     ///\n@@ -1105,6 +1158,7 @@ impl u32 {\n         bound_condition = \"\",\n     }\n     widening_impl! { u32, u64, 32, unsigned }\n+    midpoint_impl! { u32, u64, unsigned }\n }\n \n impl u64 {\n@@ -1128,6 +1182,7 @@ impl u64 {\n         bound_condition = \"\",\n     }\n     widening_impl! { u64, u128, 64, unsigned }\n+    midpoint_impl! { u64, u128, unsigned }\n }\n \n impl u128 {\n@@ -1152,6 +1207,7 @@ impl u128 {\n         from_xe_bytes_doc = \"\",\n         bound_condition = \"\",\n     }\n+    midpoint_impl! { u128, unsigned }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n@@ -1176,6 +1232,7 @@ impl usize {\n         bound_condition = \" on 16-bit targets\",\n     }\n     widening_impl! { usize, u32, 16, unsigned }\n+    midpoint_impl! { usize, u32, unsigned }\n }\n \n #[cfg(target_pointer_width = \"32\")]\n@@ -1200,6 +1257,7 @@ impl usize {\n         bound_condition = \" on 32-bit targets\",\n     }\n     widening_impl! { usize, u64, 32, unsigned }\n+    midpoint_impl! { usize, u64, unsigned }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n@@ -1224,6 +1282,7 @@ impl usize {\n         bound_condition = \" on 64-bit targets\",\n     }\n     widening_impl! { usize, u128, 64, unsigned }\n+    midpoint_impl! { usize, u128, unsigned }\n }\n \n impl usize {"}, {"sha": "79b6771a7b5dfdc5e26986965abae532f4b362a4", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305", "patch": "@@ -54,6 +54,7 @@\n #![feature(maybe_uninit_uninit_array_transpose)]\n #![feature(min_specialization)]\n #![feature(numfmt)]\n+#![feature(num_midpoint)]\n #![feature(step_trait)]\n #![feature(str_internals)]\n #![feature(std_internals)]"}, {"sha": "439bbe669978121224a2cae041a8036ba6239898", "filename": "library/core/tests/num/int_macros.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs?ref=1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305", "patch": "@@ -364,6 +364,32 @@ macro_rules! int_module {\n                 assert_eq!((0 as $T).borrowing_sub($T::MIN, false), ($T::MIN, true));\n                 assert_eq!((0 as $T).borrowing_sub($T::MIN, true), ($T::MAX, false));\n             }\n+\n+            #[test]\n+            fn test_midpoint() {\n+                assert_eq!(<$T>::midpoint(1, 3), 2);\n+                assert_eq!(<$T>::midpoint(3, 1), 2);\n+\n+                assert_eq!(<$T>::midpoint(0, 0), 0);\n+                assert_eq!(<$T>::midpoint(0, 2), 1);\n+                assert_eq!(<$T>::midpoint(2, 0), 1);\n+                assert_eq!(<$T>::midpoint(2, 2), 2);\n+\n+                assert_eq!(<$T>::midpoint(1, 4), 2);\n+                assert_eq!(<$T>::midpoint(4, 1), 2);\n+                assert_eq!(<$T>::midpoint(3, 4), 3);\n+                assert_eq!(<$T>::midpoint(4, 3), 3);\n+\n+                assert_eq!(<$T>::midpoint(<$T>::MIN, <$T>::MAX), -1);\n+                assert_eq!(<$T>::midpoint(<$T>::MAX, <$T>::MIN), -1);\n+                assert_eq!(<$T>::midpoint(<$T>::MIN, <$T>::MIN), <$T>::MIN);\n+                assert_eq!(<$T>::midpoint(<$T>::MAX, <$T>::MAX), <$T>::MAX);\n+\n+                assert_eq!(<$T>::midpoint(<$T>::MIN, 6), <$T>::MIN / 2 + 3);\n+                assert_eq!(<$T>::midpoint(6, <$T>::MIN), <$T>::MIN / 2 + 3);\n+                assert_eq!(<$T>::midpoint(<$T>::MAX, 6), <$T>::MAX / 2 + 3);\n+                assert_eq!(<$T>::midpoint(6, <$T>::MAX), <$T>::MAX / 2 + 3);\n+            }\n         }\n     };\n }"}, {"sha": "7d6203db0b940ec196efcd3ff73a5f1873bb2191", "filename": "library/core/tests/num/uint_macros.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305/library%2Fcore%2Ftests%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305/library%2Fcore%2Ftests%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fuint_macros.rs?ref=1a72d7c7c4e7050d3c07d8b6fe586ddef2c36305", "patch": "@@ -252,6 +252,32 @@ macro_rules! uint_module {\n                 assert_eq!($T::MAX.borrowing_sub(0, true), ($T::MAX - 1, false));\n                 assert_eq!($T::MAX.borrowing_sub($T::MAX, true), ($T::MAX, true));\n             }\n+\n+            #[test]\n+            fn test_midpoint() {\n+                assert_eq!(<$T>::midpoint(1, 3), 2);\n+                assert_eq!(<$T>::midpoint(3, 1), 2);\n+\n+                assert_eq!(<$T>::midpoint(0, 0), 0);\n+                assert_eq!(<$T>::midpoint(0, 2), 1);\n+                assert_eq!(<$T>::midpoint(2, 0), 1);\n+                assert_eq!(<$T>::midpoint(2, 2), 2);\n+\n+                assert_eq!(<$T>::midpoint(1, 4), 2);\n+                assert_eq!(<$T>::midpoint(4, 1), 2);\n+                assert_eq!(<$T>::midpoint(3, 4), 3);\n+                assert_eq!(<$T>::midpoint(4, 3), 3);\n+\n+                assert_eq!(<$T>::midpoint(<$T>::MIN, <$T>::MAX), (<$T>::MAX - <$T>::MIN) / 2);\n+                assert_eq!(<$T>::midpoint(<$T>::MAX, <$T>::MIN), (<$T>::MAX - <$T>::MIN) / 2);\n+                assert_eq!(<$T>::midpoint(<$T>::MIN, <$T>::MIN), <$T>::MIN);\n+                assert_eq!(<$T>::midpoint(<$T>::MAX, <$T>::MAX), <$T>::MAX);\n+\n+                assert_eq!(<$T>::midpoint(<$T>::MIN, 6), <$T>::MIN / 2 + 3);\n+                assert_eq!(<$T>::midpoint(6, <$T>::MIN), <$T>::MIN / 2 + 3);\n+                assert_eq!(<$T>::midpoint(<$T>::MAX, 6), (<$T>::MAX - <$T>::MIN) / 2 + 3);\n+                assert_eq!(<$T>::midpoint(6, <$T>::MAX), (<$T>::MAX - <$T>::MIN) / 2 + 3);\n+            }\n         }\n     };\n }"}]}