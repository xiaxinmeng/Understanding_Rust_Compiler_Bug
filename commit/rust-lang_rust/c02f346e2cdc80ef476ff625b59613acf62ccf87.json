{"sha": "c02f346e2cdc80ef476ff625b59613acf62ccf87", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMmYzNDZlMmNkYzgwZWY0NzZmZjYyNWI1OTYxM2FjZjYyY2NmODc=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-08-26T17:14:58Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-08-26T17:14:58Z"}, "message": "Revert \"Revert \"Use typestate constraints for trans_be\"\"\n\nThis reverts commit b0db13956f4f106c4bf5a9210c7df439b34506a4.\n\n(Should work now that we have a new snapshot)", "tree": {"sha": "0672f0abe828bcb550aeda77f626d0bf15ec9812", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0672f0abe828bcb550aeda77f626d0bf15ec9812"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c02f346e2cdc80ef476ff625b59613acf62ccf87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c02f346e2cdc80ef476ff625b59613acf62ccf87", "html_url": "https://github.com/rust-lang/rust/commit/c02f346e2cdc80ef476ff625b59613acf62ccf87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c02f346e2cdc80ef476ff625b59613acf62ccf87/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5472d2238ad2339869255bc8905a82b01a2b3c27", "url": "https://api.github.com/repos/rust-lang/rust/commits/5472d2238ad2339869255bc8905a82b01a2b3c27", "html_url": "https://github.com/rust-lang/rust/commit/5472d2238ad2339869255bc8905a82b01a2b3c27"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "022ad4cddedc7cfc93a10d9dc0a3041a42430587", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c02f346e2cdc80ef476ff625b59613acf62ccf87/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02f346e2cdc80ef476ff625b59613acf62ccf87/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=c02f346e2cdc80ef476ff625b59613acf62ccf87", "patch": "@@ -4441,7 +4441,14 @@ fn trans_expr_out(cx: &@block_ctxt, e: &@ast::expr, output: out_method) ->\n       ast::expr_cont. { ret trans_cont(e.span, cx); }\n       ast::expr_ret(ex) { ret trans_ret(cx, ex); }\n       ast::expr_put(ex) { ret trans_put(cx, ex); }\n-      ast::expr_be(ex) { ret trans_be(cx, ex); }\n+      ast::expr_be(ex) {\n+        // Ideally, the expr_be tag would have a precondition\n+        // that is_call_expr(ex) -- but we don't support that\n+        // yet\n+        // FIXME\n+        check ast_util::is_call_expr(ex);\n+        ret trans_be(cx, ex);\n+      }\n       ast::expr_anon_obj(anon_obj) {\n         ret trans_anon_obj(cx, e.span, anon_obj, e.id);\n       }\n@@ -4762,10 +4769,10 @@ fn trans_ret(cx: &@block_ctxt, e: &option::t<@ast::expr>) -> result {\n \n fn build_return(bcx: &@block_ctxt) { bld::Br(bcx, bcx_fcx(bcx).llreturn); }\n \n-fn trans_be(cx: &@block_ctxt, e: &@ast::expr) -> result {\n-    // FIXME: This should be a typestate precondition\n+// fn trans_be(cx: &@block_ctxt, e: &@ast::expr) -> result {\n+fn trans_be(cx: &@block_ctxt, e: &@ast::expr)\n+    : ast_util::is_call_expr(e) -> result {\n \n-    assert (ast_util::is_call_expr(e));\n     // FIXME: Turn this into a real tail call once\n     // calling convention issues are settled\n "}, {"sha": "15f41af5cac6858072781c4d8fb8465fa3bef0f3", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c02f346e2cdc80ef476ff625b59613acf62ccf87/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02f346e2cdc80ef476ff625b59613acf62ccf87/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=c02f346e2cdc80ef476ff625b59613acf62ccf87", "patch": "@@ -167,8 +167,8 @@ fn is_exported(i: ident, m: _mod) -> bool {\n     ret count == 0u && !nonlocal;\n }\n \n-fn is_call_expr(e: @expr) -> bool {\n-    alt e.node { expr_call(_, _) { ret true; } _ { ret false; } }\n+pure fn is_call_expr(e: @expr) -> bool {\n+    alt e.node { expr_call(_, _) { true } _ { false } }\n }\n \n fn is_constraint_arg(e: @expr) -> bool {"}]}