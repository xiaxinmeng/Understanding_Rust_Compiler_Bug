{"sha": "58deb7001deceb74cec38590a161d781d5d953b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZGViNzAwMWRlY2ViNzRjZWMzODU5MGExNjFkNzgxZDVkOTUzYjQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-30T23:06:35Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-02T07:47:08Z"}, "message": "Make it possible to have unboxed mutexes on specific platforms.\n\nThis commit keeps all mutexes boxed on all platforms, but makes it\ntrivial to remove the box on some platforms later.", "tree": {"sha": "27097158ebb5b75a191b13c903d15d5fda0a3140", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27097158ebb5b75a191b13c903d15d5fda0a3140"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58deb7001deceb74cec38590a161d781d5d953b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58deb7001deceb74cec38590a161d781d5d953b4", "html_url": "https://github.com/rust-lang/rust/commit/58deb7001deceb74cec38590a161d781d5d953b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58deb7001deceb74cec38590a161d781d5d953b4/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8c2d4fc3d29496aa0a3563ec9d44f6222597fe3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8c2d4fc3d29496aa0a3563ec9d44f6222597fe3", "html_url": "https://github.com/rust-lang/rust/commit/a8c2d4fc3d29496aa0a3563ec9d44f6222597fe3"}], "stats": {"total": 60, "additions": 51, "deletions": 9}, "files": [{"sha": "651ac3c4cbe7d44fc985ee22d0d18e7152cb61eb", "filename": "library/std/src/sys/cloudabi/mutex.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58deb7001deceb74cec38590a161d781d5d953b4/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58deb7001deceb74cec38590a161d781d5d953b4/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fmutex.rs?ref=58deb7001deceb74cec38590a161d781d5d953b4", "patch": "@@ -15,6 +15,8 @@ extern \"C\" {\n // implemented identically.\n pub struct Mutex(RWLock);\n \n+pub type MovableMutex = Box<Mutex>;\n+\n pub unsafe fn raw(m: &Mutex) -> *mut AtomicU32 {\n     rwlock::raw(&m.0)\n }"}, {"sha": "8874517dac60cf542b10e0ee8f7f8071c755beeb", "filename": "library/std/src/sys/sgx/mutex.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58deb7001deceb74cec38590a161d781d5d953b4/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58deb7001deceb74cec38590a161d781d5d953b4/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmutex.rs?ref=58deb7001deceb74cec38590a161d781d5d953b4", "patch": "@@ -8,6 +8,8 @@ pub struct Mutex {\n     inner: SpinMutex<WaitVariable<bool>>,\n }\n \n+pub type MovableMutex = Box<Mutex>;\n+\n // Implementation according to \u201cOperating Systems: Three Easy Pieces\u201d, chapter 28\n impl Mutex {\n     pub const fn new() -> Mutex {"}, {"sha": "ebc737b75ae0b701f10bf0df168571dc1499f102", "filename": "library/std/src/sys/unix/mutex.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58deb7001deceb74cec38590a161d781d5d953b4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58deb7001deceb74cec38590a161d781d5d953b4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmutex.rs?ref=58deb7001deceb74cec38590a161d781d5d953b4", "patch": "@@ -5,6 +5,8 @@ pub struct Mutex {\n     inner: UnsafeCell<libc::pthread_mutex_t>,\n }\n \n+pub type MovableMutex = Box<Mutex>;\n+\n #[inline]\n pub unsafe fn raw(m: &Mutex) -> *mut libc::pthread_mutex_t {\n     m.inner.get()"}, {"sha": "a28f2cf4ffec06f64a4df12dc1b891b8e8b4cf3a", "filename": "library/std/src/sys/unsupported/mutex.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58deb7001deceb74cec38590a161d781d5d953b4/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58deb7001deceb74cec38590a161d781d5d953b4/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmutex.rs?ref=58deb7001deceb74cec38590a161d781d5d953b4", "patch": "@@ -4,6 +4,8 @@ pub struct Mutex {\n     locked: UnsafeCell<bool>,\n }\n \n+pub type MovableMutex = Box<Mutex>;\n+\n unsafe impl Send for Mutex {}\n unsafe impl Sync for Mutex {} // no threads on this platform\n "}, {"sha": "dd7582c21a72725ae20e6b7c42f8ffbac3ca3377", "filename": "library/std/src/sys/vxworks/mutex.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58deb7001deceb74cec38590a161d781d5d953b4/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58deb7001deceb74cec38590a161d781d5d953b4/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmutex.rs?ref=58deb7001deceb74cec38590a161d781d5d953b4", "patch": "@@ -5,6 +5,8 @@ pub struct Mutex {\n     inner: UnsafeCell<libc::pthread_mutex_t>,\n }\n \n+pub type MovableMutex = Box<Mutex>;\n+\n #[inline]\n pub unsafe fn raw(m: &Mutex) -> *mut libc::pthread_mutex_t {\n     m.inner.get()"}, {"sha": "5d45efe19c290bca79ed7d7a711ebc1ff6aafeea", "filename": "library/std/src/sys/wasm/mutex_atomics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58deb7001deceb74cec38590a161d781d5d953b4/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmutex_atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58deb7001deceb74cec38590a161d781d5d953b4/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmutex_atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmutex_atomics.rs?ref=58deb7001deceb74cec38590a161d781d5d953b4", "patch": "@@ -8,6 +8,8 @@ pub struct Mutex {\n     locked: AtomicUsize,\n }\n \n+pub type MovableMutex = Box<Mutex>;\n+\n // Mutexes have a pretty simple implementation where they contain an `i32`\n // internally that is 0 when unlocked and 1 when the mutex is locked.\n // Acquisition has a fast path where it attempts to cmpxchg the 0 to a 1, and"}, {"sha": "fb6bb9583e29a9fa4a6efdf0725e102be3d0f98e", "filename": "library/std/src/sys/windows/mutex.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58deb7001deceb74cec38590a161d781d5d953b4/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58deb7001deceb74cec38590a161d781d5d953b4/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmutex.rs?ref=58deb7001deceb74cec38590a161d781d5d953b4", "patch": "@@ -29,6 +29,8 @@ pub struct Mutex {\n     lock: AtomicUsize,\n }\n \n+pub type MovableMutex = Box<Mutex>;\n+\n unsafe impl Send for Mutex {}\n unsafe impl Sync for Mutex {}\n "}, {"sha": "acd8b69e9ac556d6b885acb89be4e2d79733b376", "filename": "library/std/src/sys_common/condvar.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58deb7001deceb74cec38590a161d781d5d953b4/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58deb7001deceb74cec38590a161d781d5d953b4/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs?ref=58deb7001deceb74cec38590a161d781d5d953b4", "patch": "@@ -1,10 +1,12 @@\n use crate::sys::condvar as imp;\n+use crate::sys::mutex as mutex_imp;\n use crate::sys_common::mutex::MovableMutex;\n use crate::time::Duration;\n-use check::CondvarCheck;\n \n mod check;\n \n+type CondvarCheck = <mutex_imp::MovableMutex as check::CondvarCheck>::Check;\n+\n /// An OS-based condition variable.\n pub struct Condvar {\n     inner: Box<imp::Condvar>,"}, {"sha": "fecb732b910cedf3d84bc3da98c1a75a409e122a", "filename": "library/std/src/sys_common/condvar/check.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/58deb7001deceb74cec38590a161d781d5d953b4/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58deb7001deceb74cec38590a161d781d5d953b4/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs?ref=58deb7001deceb74cec38590a161d781d5d953b4", "patch": "@@ -2,13 +2,22 @@ use crate::sync::atomic::{AtomicUsize, Ordering};\n use crate::sys::mutex as mutex_imp;\n use crate::sys_common::mutex::MovableMutex;\n \n-/// A `Condvar` will check it's only ever used with the same mutex, based on\n-/// its (stable) address.\n-pub struct CondvarCheck {\n+pub trait CondvarCheck {\n+    type Check;\n+}\n+\n+/// For boxed mutexes, a `Condvar` will check it's only ever used with the same\n+/// mutex, based on its (stable) address.\n+impl CondvarCheck for Box<mutex_imp::Mutex> {\n+    type Check = SameMutexCheck;\n+}\n+\n+pub struct SameMutexCheck {\n     addr: AtomicUsize,\n }\n \n-impl CondvarCheck {\n+#[allow(dead_code)]\n+impl SameMutexCheck {\n     pub const fn new() -> Self {\n         Self { addr: AtomicUsize::new(0) }\n     }\n@@ -21,3 +30,19 @@ impl CondvarCheck {\n         }\n     }\n }\n+\n+/// Unboxed mutexes may move, so `Condvar` can not require its address to stay\n+/// constant.\n+impl CondvarCheck for mutex_imp::Mutex {\n+    type Check = NoCheck;\n+}\n+\n+pub struct NoCheck;\n+\n+#[allow(dead_code)]\n+impl NoCheck {\n+    pub const fn new() -> Self {\n+        Self\n+    }\n+    pub fn verify(&self, _: &MovableMutex) {}\n+}"}, {"sha": "a1e11d24465ea4f94bbb9b2ac771b58ed3576510", "filename": "library/std/src/sys_common/mutex.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/58deb7001deceb74cec38590a161d781d5d953b4/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58deb7001deceb74cec38590a161d781d5d953b4/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs?ref=58deb7001deceb74cec38590a161d781d5d953b4", "patch": "@@ -58,16 +58,17 @@ impl Drop for StaticMutexGuard<'_> {\n ///\n /// This mutex does not implement poisoning.\n ///\n-/// This is a wrapper around `Box<imp::Mutex>`, to allow the object to be moved\n-/// without moving the raw mutex.\n-pub struct MovableMutex(Box<imp::Mutex>);\n+/// This is either a wrapper around `Box<imp::Mutex>` or `imp::Mutex`,\n+/// depending on the platform. It is boxed on platforms where `imp::Mutex` may\n+/// not be moved.\n+pub struct MovableMutex(imp::MovableMutex);\n \n unsafe impl Sync for MovableMutex {}\n \n impl MovableMutex {\n     /// Creates a new mutex.\n     pub fn new() -> Self {\n-        let mut mutex = box imp::Mutex::new();\n+        let mut mutex = imp::MovableMutex::from(imp::Mutex::new());\n         unsafe { mutex.init() };\n         Self(mutex)\n     }"}]}