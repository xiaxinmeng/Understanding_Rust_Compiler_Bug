{"sha": "979c8e885edfdac7f16c47a56d538dbb3018c4cb", "node_id": "C_kwDOAAsO6NoAKDk3OWM4ZTg4NWVkZmRhYzdmMTZjNDdhNTZkNTM4ZGJiMzAxOGM0Y2I", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-27T03:36:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-27T03:36:09Z"}, "message": "Rollup merge of #95335 - Badel2:resolve-path, r=Dylan-DPC\n\nMove resolve_path to rustc_builtin_macros and make it private\n\nFixing a FIXME introduced by `@jyn514` in #85457", "tree": {"sha": "74bb0a81dd9550a110b30a1f217979027f273676", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74bb0a81dd9550a110b30a1f217979027f273676"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/979c8e885edfdac7f16c47a56d538dbb3018c4cb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiP9upCRBK7hj4Ov3rIwAAVVMIAC2rEDGDNRDLJ2DacvAYeLCq\n9BEiIKrUmpdbVdKDNuGoyjRXEfENKfZpZGJ+2LKgrAG5ifRkLbTOvd2iWFfEBFeP\naB0jw4fLODFb1gODH0YO2ioSlzqubPYDJ9tQRnDoPEEBT9/CCM8Jn5OOgg4bfWbT\nu81oQ5pI5my08olhYRDgbKFoQsvu7dskizdnHYv4OBQfeAAuMgY3Gn3DoGUvzDY3\n4B5TMD/NBqVwj7lHi4/IJ850tGK6BYSX3F5LAN2FCZKfNT26q26ZzmdRujv1yUPV\n/nCxWPdshQ03A8cPmmoN7bpcmi3dYnFssyBFQZtVfmGGcEoz2FrAnB5F1Xo7f9Q=\n=PKP8\n-----END PGP SIGNATURE-----\n", "payload": "tree 74bb0a81dd9550a110b30a1f217979027f273676\nparent c6bb219fc4e70365273c8f8cb96fdff2e910bd38\nparent ea26d72710c100bf41bf5b672f1a218f24166574\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648352169 +0200\ncommitter GitHub <noreply@github.com> 1648352169 +0200\n\nRollup merge of #95335 - Badel2:resolve-path, r=Dylan-DPC\n\nMove resolve_path to rustc_builtin_macros and make it private\n\nFixing a FIXME introduced by `@jyn514` in #85457\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/979c8e885edfdac7f16c47a56d538dbb3018c4cb", "html_url": "https://github.com/rust-lang/rust/commit/979c8e885edfdac7f16c47a56d538dbb3018c4cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/979c8e885edfdac7f16c47a56d538dbb3018c4cb/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6bb219fc4e70365273c8f8cb96fdff2e910bd38", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6bb219fc4e70365273c8f8cb96fdff2e910bd38", "html_url": "https://github.com/rust-lang/rust/commit/c6bb219fc4e70365273c8f8cb96fdff2e910bd38"}, {"sha": "ea26d72710c100bf41bf5b672f1a218f24166574", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea26d72710c100bf41bf5b672f1a218f24166574", "html_url": "https://github.com/rust-lang/rust/commit/ea26d72710c100bf41bf5b672f1a218f24166574"}], "stats": {"total": 86, "additions": 45, "deletions": 41}, "files": [{"sha": "be628c9202cbd4a5bc35df6767a6f8907a3b0080", "filename": "compiler/rustc_builtin_macros/src/source_util.rs", "status": "modified", "additions": 43, "deletions": 4, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/979c8e885edfdac7f16c47a56d538dbb3018c4cb/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979c8e885edfdac7f16c47a56d538dbb3018c4cb/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs?ref=979c8e885edfdac7f16c47a56d538dbb3018c4cb", "patch": "@@ -3,15 +3,17 @@ use rustc_ast::ptr::P;\n use rustc_ast::token;\n use rustc_ast::tokenstream::TokenStream;\n use rustc_ast_pretty::pprust;\n+use rustc_errors::PResult;\n use rustc_expand::base::{self, *};\n use rustc_expand::module::DirOwnership;\n use rustc_parse::parser::{ForceCollect, Parser};\n use rustc_parse::{self, new_parser_from_file};\n use rustc_session::lint::builtin::INCOMPLETE_INCLUDE;\n use rustc_span::symbol::Symbol;\n-use rustc_span::{self, Pos, Span};\n+use rustc_span::{self, FileName, Pos, Span};\n \n use smallvec::SmallVec;\n+use std::path::PathBuf;\n use std::rc::Rc;\n \n // These macros all relate to the file system; they either return\n@@ -102,7 +104,7 @@ pub fn expand_include<'cx>(\n         return DummyResult::any(sp);\n     };\n     // The file will be added to the code map by the parser\n-    let file = match cx.resolve_path(file, sp) {\n+    let file = match resolve_path(cx, file, sp) {\n         Ok(f) => f,\n         Err(mut err) => {\n             err.emit();\n@@ -171,7 +173,7 @@ pub fn expand_include_str(\n     let Some(file) = get_single_str_from_tts(cx, sp, tts, \"include_str!\") else {\n         return DummyResult::any(sp);\n     };\n-    let file = match cx.resolve_path(file, sp) {\n+    let file = match resolve_path(cx, file, sp) {\n         Ok(f) => f,\n         Err(mut err) => {\n             err.emit();\n@@ -205,7 +207,7 @@ pub fn expand_include_bytes(\n     let Some(file) = get_single_str_from_tts(cx, sp, tts, \"include_bytes!\") else {\n         return DummyResult::any(sp);\n     };\n-    let file = match cx.resolve_path(file, sp) {\n+    let file = match resolve_path(cx, file, sp) {\n         Ok(f) => f,\n         Err(mut err) => {\n             err.emit();\n@@ -220,3 +222,40 @@ pub fn expand_include_bytes(\n         }\n     }\n }\n+\n+/// Resolves a `path` mentioned inside Rust code, returning an absolute path.\n+///\n+/// This unifies the logic used for resolving `include_X!`.\n+fn resolve_path<'a>(\n+    cx: &mut ExtCtxt<'a>,\n+    path: impl Into<PathBuf>,\n+    span: Span,\n+) -> PResult<'a, PathBuf> {\n+    let path = path.into();\n+\n+    // Relative paths are resolved relative to the file in which they are found\n+    // after macro expansion (that is, they are unhygienic).\n+    if !path.is_absolute() {\n+        let callsite = span.source_callsite();\n+        let mut result = match cx.source_map().span_to_filename(callsite) {\n+            FileName::Real(name) => name\n+                .into_local_path()\n+                .expect(\"attempting to resolve a file path in an external file\"),\n+            FileName::DocTest(path, _) => path,\n+            other => {\n+                return Err(cx.struct_span_err(\n+                    span,\n+                    &format!(\n+                        \"cannot resolve relative path in non-file source `{}`\",\n+                        cx.source_map().filename_for_diagnostics(&other)\n+                    ),\n+                ));\n+            }\n+        };\n+        result.pop();\n+        result.push(path);\n+        Ok(result)\n+    } else {\n+        Ok(path)\n+    }\n+}"}, {"sha": "7f569af4abd659d9c94982de08f76792209602dd", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 2, "deletions": 37, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/979c8e885edfdac7f16c47a56d538dbb3018c4cb/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979c8e885edfdac7f16c47a56d538dbb3018c4cb/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=979c8e885edfdac7f16c47a56d538dbb3018c4cb", "patch": "@@ -10,7 +10,7 @@ use rustc_ast::{self as ast, AstLike, Attribute, Item, NodeId, PatKind};\n use rustc_attr::{self as attr, Deprecation, Stability};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{self, Lrc};\n-use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed, PResult};\n+use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_lint_defs::builtin::PROC_MACRO_BACK_COMPAT;\n use rustc_lint_defs::BuiltinLintDiagnostics;\n use rustc_parse::{self, nt_to_tokenstream, parser, MACRO_ARGUMENTS};\n@@ -20,7 +20,7 @@ use rustc_span::edition::Edition;\n use rustc_span::hygiene::{AstPass, ExpnData, ExpnKind, LocalExpnId};\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{FileName, MultiSpan, Span, DUMMY_SP};\n+use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use smallvec::{smallvec, SmallVec};\n \n use std::default::Default;\n@@ -1128,41 +1128,6 @@ impl<'a> ExtCtxt<'a> {\n     pub fn check_unused_macros(&mut self) {\n         self.resolver.check_unused_macros();\n     }\n-\n-    /// Resolves a `path` mentioned inside Rust code, returning an absolute path.\n-    ///\n-    /// This unifies the logic used for resolving `include_X!`.\n-    ///\n-    /// FIXME: move this to `rustc_builtin_macros` and make it private.\n-    pub fn resolve_path(&self, path: impl Into<PathBuf>, span: Span) -> PResult<'a, PathBuf> {\n-        let path = path.into();\n-\n-        // Relative paths are resolved relative to the file in which they are found\n-        // after macro expansion (that is, they are unhygienic).\n-        if !path.is_absolute() {\n-            let callsite = span.source_callsite();\n-            let mut result = match self.source_map().span_to_filename(callsite) {\n-                FileName::Real(name) => name\n-                    .into_local_path()\n-                    .expect(\"attempting to resolve a file path in an external file\"),\n-                FileName::DocTest(path, _) => path,\n-                other => {\n-                    return Err(self.struct_span_err(\n-                        span,\n-                        &format!(\n-                            \"cannot resolve relative path in non-file source `{}`\",\n-                            self.source_map().filename_for_diagnostics(&other)\n-                        ),\n-                    ));\n-                }\n-            };\n-            result.pop();\n-            result.push(path);\n-            Ok(result)\n-        } else {\n-            Ok(path)\n-        }\n-    }\n }\n \n /// Extracts a string literal from the macro expanded version of `expr`,"}]}