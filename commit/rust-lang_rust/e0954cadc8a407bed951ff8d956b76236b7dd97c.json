{"sha": "e0954cadc8a407bed951ff8d956b76236b7dd97c", "node_id": "C_kwDOAAsO6NoAKGUwOTU0Y2FkYzhhNDA3YmVkOTUxZmY4ZDk1NmI3NjIzNmI3ZGQ5N2M", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-10-11T09:37:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-11T09:37:53Z"}, "message": "Rollup merge of #102412 - joboet:dont_panic, r=m-ou-se\n\nNever panic in `thread::park` and `thread::park_timeout`\n\nfixes #102398\n\n`@rustbot` label +T-libs +T-libs-api", "tree": {"sha": "ae1e218b65a19999e4738d28dd5ea1a6e13514f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae1e218b65a19999e4738d28dd5ea1a6e13514f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0954cadc8a407bed951ff8d956b76236b7dd97c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjRTlxCRBK7hj4Ov3rIwAAqeEIACLpClHm138tV8Y5nBza36XM\nYac2DesspoddLvCogPBpgBylAn9a7u6BpaLdkVWBDToDpX99Y+gc1DjqjXeaZUBP\nZKkC1ugrMnC0ZboASwGM11ojV1mMmupP/MvkkaPrAGtfdHCdC1lFZyLoeioFdj8q\nmMDqG1FaMf2GtgEuDdMIarilq17nMMt9Z5ghDK4yLgdQD+0+UuSdPbRKraqsGJxn\nDC+UC99MlmcuNGq5oLKbwfzBT96zLebpDqkQa0E8rSAwZ+coFlFfSxHphrtbNQEX\nyasoZjeXc5vS/rA7TMDsoYHwhDRgZR+d4uvIk85T8OuVHoM6W9i11CsDbxAph4c=\n=muGI\n-----END PGP SIGNATURE-----\n", "payload": "tree ae1e218b65a19999e4738d28dd5ea1a6e13514f0\nparent 387df55f2628f6ab48f578f9fde6f2e5b4f40b57\nparent b0b9f5bc269f5c5c1330bf30d25faf85741b2d49\nauthor Yuki Okushi <jtitor@2k36.org> 1665481073 +0900\ncommitter GitHub <noreply@github.com> 1665481073 +0900\n\nRollup merge of #102412 - joboet:dont_panic, r=m-ou-se\n\nNever panic in `thread::park` and `thread::park_timeout`\n\nfixes #102398\n\n`@rustbot` label +T-libs +T-libs-api\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0954cadc8a407bed951ff8d956b76236b7dd97c", "html_url": "https://github.com/rust-lang/rust/commit/e0954cadc8a407bed951ff8d956b76236b7dd97c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0954cadc8a407bed951ff8d956b76236b7dd97c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "387df55f2628f6ab48f578f9fde6f2e5b4f40b57", "url": "https://api.github.com/repos/rust-lang/rust/commits/387df55f2628f6ab48f578f9fde6f2e5b4f40b57", "html_url": "https://github.com/rust-lang/rust/commit/387df55f2628f6ab48f578f9fde6f2e5b4f40b57"}, {"sha": "b0b9f5bc269f5c5c1330bf30d25faf85741b2d49", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0b9f5bc269f5c5c1330bf30d25faf85741b2d49", "html_url": "https://github.com/rust-lang/rust/commit/b0b9f5bc269f5c5c1330bf30d25faf85741b2d49"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "c29b22c69e7e73047cc23f980083bef00c9b463c", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e0954cadc8a407bed951ff8d956b76236b7dd97c/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0954cadc8a407bed951ff8d956b76236b7dd97c/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=e0954cadc8a407bed951ff8d956b76236b7dd97c", "patch": "@@ -160,7 +160,7 @@ use crate::ffi::{CStr, CString};\n use crate::fmt;\n use crate::io;\n use crate::marker::PhantomData;\n-use crate::mem;\n+use crate::mem::{self, forget};\n use crate::num::NonZeroU64;\n use crate::num::NonZeroUsize;\n use crate::panic;\n@@ -851,10 +851,22 @@ pub fn sleep(dur: Duration) {\n     imp::Thread::sleep(dur)\n }\n \n+/// Used to ensure that `park` and `park_timeout` do not unwind, as that can\n+/// cause undefined behaviour if not handled correctly (see #102398 for context).\n+struct PanicGuard;\n+\n+impl Drop for PanicGuard {\n+    fn drop(&mut self) {\n+        rtabort!(\"an irrecoverable error occurred while synchronizing threads\")\n+    }\n+}\n+\n /// Blocks unless or until the current thread's token is made available.\n ///\n /// A call to `park` does not guarantee that the thread will remain parked\n-/// forever, and callers should be prepared for this possibility.\n+/// forever, and callers should be prepared for this possibility. However,\n+/// it is guaranteed that this function will not panic (it may abort the\n+/// process if the implementation encounters some rare errors).\n ///\n /// # park and unpark\n ///\n@@ -939,10 +951,13 @@ pub fn sleep(dur: Duration) {\n /// [`thread::park_timeout`]: park_timeout\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn park() {\n+    let guard = PanicGuard;\n     // SAFETY: park_timeout is called on the parker owned by this thread.\n     unsafe {\n         current().inner.as_ref().parker().park();\n     }\n+    // No panic occurred, do not abort.\n+    forget(guard);\n }\n \n /// Use [`park_timeout`].\n@@ -1003,10 +1018,13 @@ pub fn park_timeout_ms(ms: u32) {\n /// ```\n #[stable(feature = \"park_timeout\", since = \"1.4.0\")]\n pub fn park_timeout(dur: Duration) {\n+    let guard = PanicGuard;\n     // SAFETY: park_timeout is called on the parker owned by this thread.\n     unsafe {\n         current().inner.as_ref().parker().park_timeout(dur);\n     }\n+    // No panic occurred, do not abort.\n+    forget(guard);\n }\n \n ////////////////////////////////////////////////////////////////////////////////"}]}