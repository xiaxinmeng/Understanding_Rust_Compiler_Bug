{"sha": "af38333f75416e8599d6534ded7d73ae121f3207", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMzgzMzNmNzU0MTZlODU5OWQ2NTM0ZGVkN2Q3M2FlMTIxZjMyMDc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-04T00:11:39Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-04T00:12:02Z"}, "message": "rustc: Speed up def ID parsing in the metadata", "tree": {"sha": "fef7bc8d5af0bbf4be2433f9e8ccdbc3e2e4b5c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fef7bc8d5af0bbf4be2433f9e8ccdbc3e2e4b5c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af38333f75416e8599d6534ded7d73ae121f3207", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af38333f75416e8599d6534ded7d73ae121f3207", "html_url": "https://github.com/rust-lang/rust/commit/af38333f75416e8599d6534ded7d73ae121f3207", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af38333f75416e8599d6534ded7d73ae121f3207/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f5eaef5fb2443acd3ea67250c953839c3d04d38", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f5eaef5fb2443acd3ea67250c953839c3d04d38", "html_url": "https://github.com/rust-lang/rust/commit/0f5eaef5fb2443acd3ea67250c953839c3d04d38"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "c2b1c61f08f278fcba0311fbc74edfd0c787b6ff", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af38333f75416e8599d6534ded7d73ae121f3207/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af38333f75416e8599d6534ded7d73ae121f3207/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=af38333f75416e8599d6534ded7d73ae121f3207", "patch": "@@ -26,6 +26,7 @@ export writer;\n export serializer;\n export ebml_deserializer;\n export deserializer;\n+export with_doc_data;\n \n type ebml_tag = {id: uint, size: uint};\n \n@@ -121,6 +122,10 @@ fn tagged_docs(d: doc, tg: uint, it: fn(doc)) {\n \n fn doc_data(d: doc) -> ~[u8] { vec::slice::<u8>(*d.data, d.start, d.end) }\n \n+fn with_doc_data<T>(d: doc, f: fn(x:&[u8]) -> T) -> T {\n+    ret f(vec::view::<u8>(*d.data, d.start, d.end));\n+}\n+\n fn doc_as_str(d: doc) -> str { ret str::from_bytes(doc_data(d)); }\n \n fn doc_as_u8(d: doc) -> u8 {"}, {"sha": "dc9e6a7b61577a7d48d75818c2fd1d51dcf62bd5", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/af38333f75416e8599d6534ded7d73ae121f3207/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af38333f75416e8599d6534ded7d73ae121f3207/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=af38333f75416e8599d6534ded7d73ae121f3207", "patch": "@@ -118,15 +118,16 @@ fn item_symbol(item: ebml::doc) -> str {\n fn item_parent_item(d: ebml::doc) -> option<ast::def_id> {\n     let mut found = none;\n     do ebml::tagged_docs(d, tag_items_data_parent_item) |did| {\n-        found = some(parse_def_id(ebml::doc_data(did)));\n+        found = some(ebml::with_doc_data(did, |d| parse_def_id(d)));\n     }\n     found\n }\n \n // XXX: This has nothing to do with classes.\n fn class_member_id(d: ebml::doc, cdata: cmd) -> ast::def_id {\n     let tagdoc = ebml::get_doc(d, tag_def_id);\n-    ret translate_def_id(cdata, parse_def_id(ebml::doc_data(tagdoc)));\n+    ret translate_def_id(cdata, ebml::with_doc_data(tagdoc,\n+                                                    |d| parse_def_id(d)));\n }\n \n fn field_mutability(d: ebml::doc) -> ast::class_mutability {\n@@ -207,7 +208,7 @@ fn enum_variant_ids(item: ebml::doc, cdata: cmd) -> ~[ast::def_id] {\n     let mut ids: ~[ast::def_id] = ~[];\n     let v = tag_items_data_item_variant;\n     do ebml::tagged_docs(item, v) |p| {\n-        let ext = parse_def_id(ebml::doc_data(p));\n+        let ext = ebml::with_doc_data(p, |d| parse_def_id(d));\n         vec::push(ids, {crate: cdata.cnum, node: ext.node});\n     };\n     ret ids;\n@@ -240,7 +241,7 @@ fn resolve_path(path: ~[ast::ident], data: @~[u8]) -> ~[ast::def_id] {\n     #debug(\"resolve_path: looking up %s\", s);\n     for lookup_hash(paths, eqer, hash_path(s)).each |doc| {\n         let did_doc = ebml::get_doc(doc, tag_def_id);\n-        vec::push(result, parse_def_id(ebml::doc_data(did_doc)));\n+        vec::push(result, ebml::with_doc_data(did_doc, |d| parse_def_id(d)));\n     }\n     ret result;\n }\n@@ -337,7 +338,7 @@ fn get_impl_method(cdata: cmd, id: ast::node_id,\n     let items = ebml::get_doc(ebml::doc(cdata.data), tag_items);\n     let mut found = none;\n     do ebml::tagged_docs(find_item(id, items), tag_item_impl_method) |mid| {\n-        let m_did = parse_def_id(ebml::doc_data(mid));\n+        let m_did = ebml::with_doc_data(mid, |d| parse_def_id(d));\n         if item_name(find_item(m_did.node, items)) == name {\n             found = some(translate_def_id(cdata, m_did));\n         }\n@@ -375,7 +376,7 @@ fn class_dtor(cdata: cmd, id: ast::node_id) -> option<ast::def_id> {\n     };\n     do ebml::tagged_docs(cls_items, tag_item_dtor) |doc| {\n          let doc1 = ebml::get_doc(doc, tag_def_id);\n-         let did = parse_def_id(ebml::doc_data(doc1));\n+         let did = ebml::with_doc_data(doc1, |d| parse_def_id(d));\n          found = some(translate_def_id(cdata, did));\n     };\n     found\n@@ -558,7 +559,7 @@ fn item_impl_methods(cdata: cmd, item: ebml::doc, base_tps: uint)\n     -> ~[@method_info] {\n     let mut rslt = ~[];\n     do ebml::tagged_docs(item, tag_item_impl_method) |doc| {\n-        let m_did = parse_def_id(ebml::doc_data(doc));\n+        let m_did = ebml::with_doc_data(doc, |d| parse_def_id(d));\n         let mth_item = lookup_item(m_did.node, cdata.data);\n         vec::push(rslt, @{did: translate_def_id(cdata, m_did),\n                     /* FIXME (maybe #2323) tjc: take a look at this. */\n@@ -578,7 +579,7 @@ fn get_impls_for_mod(cdata: cmd,\n     let mod_item = lookup_item(m_id, data);\n     let mut result = ~[];\n     do ebml::tagged_docs(mod_item, tag_mod_impl) |doc| {\n-        let did = parse_def_id(ebml::doc_data(doc));\n+        let did = ebml::with_doc_data(doc, |d| parse_def_id(d));\n         let local_did = translate_def_id(cdata, did);\n           // The impl may be defined in a different crate. Ask the caller\n           // to give us the metadata\n@@ -839,7 +840,7 @@ fn iter_crate_items(bytes: @~[u8], proc: fn(str, ast::def_id)) {\n             let data = read_path(elt);\n             let {tag:_, doc:def} = ebml::doc_at(bytes, data.pos);\n             let did_doc = ebml::get_doc(def, tag_def_id);\n-            let did = parse_def_id(ebml::doc_data(did_doc));\n+            let did = ebml::with_doc_data(did_doc, |d| parse_def_id(d));\n             proc(data.path, did);\n         };\n     };"}, {"sha": "025b7fe9e92e465de7be79660668687ce69dbe3d", "filename": "src/rustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af38333f75416e8599d6534ded7d73ae121f3207/src%2Frustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af38333f75416e8599d6534ded7d73ae121f3207/src%2Frustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftydecode.rs?ref=af38333f75416e8599d6534ded7d73ae121f3207", "patch": "@@ -467,7 +467,7 @@ fn parse_ty_fn(st: @pstate, conv: conv_did) -> ty::fn_ty {\n \n \n // Rust metadata parsing\n-fn parse_def_id(buf: ~[u8]) -> ast::def_id {\n+fn parse_def_id(buf: &[u8]) -> ast::def_id {\n     let mut colon_idx = 0u;\n     let len = vec::len(buf);\n     while colon_idx < len && buf[colon_idx] != ':' as u8 { colon_idx += 1u; }"}]}