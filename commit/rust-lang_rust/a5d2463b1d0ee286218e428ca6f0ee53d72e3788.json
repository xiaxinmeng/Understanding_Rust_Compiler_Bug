{"sha": "a5d2463b1d0ee286218e428ca6f0ee53d72e3788", "node_id": "C_kwDOAAsO6NoAKGE1ZDI0NjNiMWQwZWUyODYyMThlNDI4Y2E2ZjBlZTUzZDcyZTM3ODg", "commit": {"author": {"name": "Pocket7878", "email": "poketo7878@gmail.com", "date": "2022-08-12T15:29:18Z"}, "committer": {"name": "Pocket7878", "email": "poketo7878@gmail.com", "date": "2022-08-31T09:47:45Z"}, "message": "fix: Simplify logics to allow two-arm enum match.", "tree": {"sha": "37194a6634c2e1fe727be59aacb0c36829f01f01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37194a6634c2e1fe727be59aacb0c36829f01f01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5d2463b1d0ee286218e428ca6f0ee53d72e3788", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5d2463b1d0ee286218e428ca6f0ee53d72e3788", "html_url": "https://github.com/rust-lang/rust/commit/a5d2463b1d0ee286218e428ca6f0ee53d72e3788", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5d2463b1d0ee286218e428ca6f0ee53d72e3788/comments", "author": {"login": "pocket7878", "id": 236528, "node_id": "MDQ6VXNlcjIzNjUyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/236528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pocket7878", "html_url": "https://github.com/pocket7878", "followers_url": "https://api.github.com/users/pocket7878/followers", "following_url": "https://api.github.com/users/pocket7878/following{/other_user}", "gists_url": "https://api.github.com/users/pocket7878/gists{/gist_id}", "starred_url": "https://api.github.com/users/pocket7878/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pocket7878/subscriptions", "organizations_url": "https://api.github.com/users/pocket7878/orgs", "repos_url": "https://api.github.com/users/pocket7878/repos", "events_url": "https://api.github.com/users/pocket7878/events{/privacy}", "received_events_url": "https://api.github.com/users/pocket7878/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pocket7878", "id": 236528, "node_id": "MDQ6VXNlcjIzNjUyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/236528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pocket7878", "html_url": "https://github.com/pocket7878", "followers_url": "https://api.github.com/users/pocket7878/followers", "following_url": "https://api.github.com/users/pocket7878/following{/other_user}", "gists_url": "https://api.github.com/users/pocket7878/gists{/gist_id}", "starred_url": "https://api.github.com/users/pocket7878/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pocket7878/subscriptions", "organizations_url": "https://api.github.com/users/pocket7878/orgs", "repos_url": "https://api.github.com/users/pocket7878/repos", "events_url": "https://api.github.com/users/pocket7878/events{/privacy}", "received_events_url": "https://api.github.com/users/pocket7878/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4661a60aa90e4fa7b4d1184ef64f8a6613e0075e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4661a60aa90e4fa7b4d1184ef64f8a6613e0075e", "html_url": "https://github.com/rust-lang/rust/commit/4661a60aa90e4fa7b4d1184ef64f8a6613e0075e"}], "stats": {"total": 97, "additions": 31, "deletions": 66}, "files": [{"sha": "5278fe5303a5c68900eec4221756ddc7be1b1c64", "filename": "crates/ide-assists/src/handlers/convert_two_arm_bool_match_to_matches_macro.rs", "status": "modified", "additions": 31, "deletions": 66, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/a5d2463b1d0ee286218e428ca6f0ee53d72e3788/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_two_arm_bool_match_to_matches_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d2463b1d0ee286218e428ca6f0ee53d72e3788/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_two_arm_bool_match_to_matches_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_two_arm_bool_match_to_matches_macro.rs?ref=a5d2463b1d0ee286218e428ca6f0ee53d72e3788", "patch": "@@ -1,4 +1,4 @@\n-use syntax::ast::{self, AstNode, Pat};\n+use syntax::ast::{self, AstNode};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n@@ -31,27 +31,16 @@ pub(crate) fn convert_two_arm_bool_match_to_matches_macro(\n         return None;\n     }\n \n-    let mut normal_arm = None;\n-    let mut normal_expr = None;\n-    let mut wildcard_expr = None;\n-    for arm in match_arm_list.arms() {\n-        if matches!(arm.pat(), Some(Pat::WildcardPat(_))) && arm.guard().is_none() {\n-            wildcard_expr = arm.expr();\n-        } else if !matches!(arm.pat(), Some(Pat::WildcardPat(_))) {\n-            normal_arm = Some(arm.clone());\n-            normal_expr = arm.expr();\n-        }\n-    }\n+    let first_arm = match_arm_list.arms().next()?;\n+    let first_arm_expr = first_arm.expr();\n \n     let invert_matches;\n-    if is_bool_literal_expr(&normal_expr, true) && is_bool_literal_expr(&wildcard_expr, false) {\n+    if is_bool_literal_expr(&first_arm_expr, true) {\n         invert_matches = false;\n-    } else if is_bool_literal_expr(&normal_expr, false)\n-        && is_bool_literal_expr(&wildcard_expr, true)\n-    {\n+    } else if is_bool_literal_expr(&first_arm_expr, false) {\n         invert_matches = true;\n     } else {\n-        cov_mark::hit!(non_invert_bool_literal_arms);\n+        cov_mark::hit!(non_bool_literal_match);\n         return None;\n     }\n \n@@ -64,10 +53,10 @@ pub(crate) fn convert_two_arm_bool_match_to_matches_macro(\n         target_range,\n         |builder| {\n             let mut arm_str = String::new();\n-            if let Some(ref pat) = normal_arm.as_ref().unwrap().pat() {\n+            if let Some(ref pat) = first_arm.pat() {\n                 arm_str += &pat.to_string();\n             }\n-            if let Some(ref guard) = normal_arm.as_ref().unwrap().guard() {\n+            if let Some(ref guard) = first_arm.guard() {\n                 arm_str += &format!(\" {}\", &guard.to_string());\n             }\n             if invert_matches {\n@@ -129,7 +118,7 @@ fn foo(a: Option<u32>) -> bool {\n \n     #[test]\n     fn not_applicable_non_bool_literal_arms() {\n-        cov_mark::check!(non_invert_bool_literal_arms);\n+        cov_mark::check!(non_bool_literal_match);\n         check_assist_not_applicable(\n             convert_two_arm_bool_match_to_matches_macro,\n             r#\"\n@@ -144,108 +133,84 @@ fn foo(a: Option<u32>) -> bool {\n     }\n \n     #[test]\n-    fn not_applicable_both_false_arms() {\n-        cov_mark::check!(non_invert_bool_literal_arms);\n-        check_assist_not_applicable(\n+    fn convert_simple_case() {\n+        check_assist(\n             convert_two_arm_bool_match_to_matches_macro,\n             r#\"\n fn foo(a: Option<u32>) -> bool {\n     match a$0 {\n-        Some(val) => false,\n+        Some(_val) => true,\n         _ => false\n     }\n }\n-        \"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn not_applicable_both_true_arms() {\n-        cov_mark::check!(non_invert_bool_literal_arms);\n-        check_assist_not_applicable(\n-            convert_two_arm_bool_match_to_matches_macro,\n+\"#,\n             r#\"\n fn foo(a: Option<u32>) -> bool {\n-    match a$0 {\n-        Some(val) => true,\n-        _ => true\n-    }\n-}\n-        \"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn not_applicable_non_bool_match() {\n-        cov_mark::check!(non_invert_bool_literal_arms);\n-        check_assist_not_applicable(\n-            convert_two_arm_bool_match_to_matches_macro,\n-            r#\"\n-fn foo(a: Option<u32>) -> u32 {\n-    match a$0 {\n-        Some(_val) => 1,\n-        _ => 0\n-    }\n+    matches!(a, Some(_val))\n }\n \"#,\n         );\n     }\n \n     #[test]\n-    fn convert_simple_case() {\n+    fn convert_simple_invert_case() {\n         check_assist(\n             convert_two_arm_bool_match_to_matches_macro,\n             r#\"\n fn foo(a: Option<u32>) -> bool {\n     match a$0 {\n-        Some(_val) => true,\n-        _ => false\n+        Some(_val) => false,\n+        _ => true\n     }\n }\n \"#,\n             r#\"\n fn foo(a: Option<u32>) -> bool {\n-    matches!(a, Some(_val))\n+    !matches!(a, Some(_val))\n }\n \"#,\n         );\n     }\n \n     #[test]\n-    fn convert_simple_invert_case() {\n+    fn convert_with_guard_case() {\n         check_assist(\n             convert_two_arm_bool_match_to_matches_macro,\n             r#\"\n fn foo(a: Option<u32>) -> bool {\n     match a$0 {\n-        Some(_val) => false,\n-        _ => true\n+        Some(val) if val > 3 => true,\n+        _ => false\n     }\n }\n \"#,\n             r#\"\n fn foo(a: Option<u32>) -> bool {\n-    !matches!(a, Some(_val))\n+    matches!(a, Some(val) if val > 3)\n }\n \"#,\n         );\n     }\n \n     #[test]\n-    fn convert_with_guard_case() {\n+    fn convert_enum_match_cases() {\n         check_assist(\n             convert_two_arm_bool_match_to_matches_macro,\n             r#\"\n-fn foo(a: Option<u32>) -> bool {\n+enum X { A, B }\n+\n+fn foo(a: X) -> bool {\n     match a$0 {\n-        Some(val) if val > 3 => true,\n+        X::A => true,\n         _ => false\n     }\n }\n \"#,\n             r#\"\n-fn foo(a: Option<u32>) -> bool {\n-    matches!(a, Some(val) if val > 3)\n+enum X { A, B }\n+\n+fn foo(a: X) -> bool {\n+    matches!(a, X::A)\n }\n \"#,\n         );"}]}