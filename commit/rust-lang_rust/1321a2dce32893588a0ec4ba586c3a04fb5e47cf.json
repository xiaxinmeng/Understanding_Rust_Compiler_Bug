{"sha": "1321a2dce32893588a0ec4ba586c3a04fb5e47cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMjFhMmRjZTMyODkzNTg4YTBlYzRiYTU4NmMzYTA0ZmI1ZTQ3Y2Y=", "commit": {"author": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2020-08-16T08:04:14Z"}, "committer": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2020-08-17T16:01:05Z"}, "message": "Also accept Refs for is_primitive_or_pointer", "tree": {"sha": "a15e68b48115e840a7ff0b00115baeed2215830b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a15e68b48115e840a7ff0b00115baeed2215830b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1321a2dce32893588a0ec4ba586c3a04fb5e47cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1321a2dce32893588a0ec4ba586c3a04fb5e47cf", "html_url": "https://github.com/rust-lang/rust/commit/1321a2dce32893588a0ec4ba586c3a04fb5e47cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1321a2dce32893588a0ec4ba586c3a04fb5e47cf/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7708abbbef679d208041bff57aa9ad50e9419895", "url": "https://api.github.com/repos/rust-lang/rust/commits/7708abbbef679d208041bff57aa9ad50e9419895", "html_url": "https://github.com/rust-lang/rust/commit/7708abbbef679d208041bff57aa9ad50e9419895"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "2439fc666063455ef6601ccd29ce4ce54db3d70c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1321a2dce32893588a0ec4ba586c3a04fb5e47cf/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1321a2dce32893588a0ec4ba586c3a04fb5e47cf/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=1321a2dce32893588a0ec4ba586c3a04fb5e47cf", "patch": "@@ -2184,8 +2184,9 @@ impl ClashingExternDeclarations {\n                 };\n \n                 #[allow(rustc::usage_of_ty_tykind)]\n-                let is_primitive_or_pointer =\n-                    |kind: &ty::TyKind<'_>| kind.is_primitive() || matches!(kind, RawPtr(..));\n+                let is_primitive_or_pointer = |kind: &ty::TyKind<'_>| {\n+                    kind.is_primitive() || matches!(kind, RawPtr(..) | Ref(..))\n+                };\n \n                 match (a_kind, b_kind) {\n                     (Adt(a_def, a_substs), Adt(b_def, b_substs)) => {\n@@ -2274,8 +2275,8 @@ impl ClashingExternDeclarations {\n                     // These definitely should have been caught above.\n                     (Bool, Bool) | (Char, Char) | (Never, Never) | (Str, Str) => unreachable!(),\n \n-                    // An Adt and a primitive type. This can be FFI-safe is the ADT is an enum with a\n-                    // non-null field.\n+                    // An Adt and a primitive or pointer type. This can be FFI-safe if non-null\n+                    // enum layout optimisation is being applied.\n                     (Adt(..), other_kind) | (other_kind, Adt(..))\n                         if is_primitive_or_pointer(other_kind) =>\n                     {"}]}