{"sha": "817f98085f2332b604f0a2da5127f29c8fabc41f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxN2Y5ODA4NWYyMzMyYjYwNGYwYTJkYTUxMjdmMjljOGZhYmM0MWY=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-06-20T16:29:24Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-06-28T23:12:08Z"}, "message": "Make calling methods parameterized on the trait work from default methods.\n\nThis is done by adding a new notion of \"vtable_self\".\nWe do not yet properly handle super traits.\n\nCloses #7183.", "tree": {"sha": "bc9b643a90a6df5d1b13a217605dec1ff3ea19cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc9b643a90a6df5d1b13a217605dec1ff3ea19cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/817f98085f2332b604f0a2da5127f29c8fabc41f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/817f98085f2332b604f0a2da5127f29c8fabc41f", "html_url": "https://github.com/rust-lang/rust/commit/817f98085f2332b604f0a2da5127f29c8fabc41f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/817f98085f2332b604f0a2da5127f29c8fabc41f/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9e51f5f701d8104be0adfb50f5d409f8bf233ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9e51f5f701d8104be0adfb50f5d409f8bf233ff", "html_url": "https://github.com/rust-lang/rust/commit/a9e51f5f701d8104be0adfb50f5d409f8bf233ff"}], "stats": {"total": 148, "additions": 117, "deletions": 31}, "files": [{"sha": "c1d553b04541539eafb6754aa483649ae64f9108", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/817f98085f2332b604f0a2da5127f29c8fabc41f/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817f98085f2332b604f0a2da5127f29c8fabc41f/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=817f98085f2332b604f0a2da5127f29c8fabc41f", "patch": "@@ -632,6 +632,13 @@ fn encode_vtable_origin(ecx: &e::EncodeContext,\n                 }\n             }\n           }\n+          typeck::vtable_self(def_id) => {\n+            do ebml_w.emit_enum_variant(\"vtable_self\", 2u, 1u) |ebml_w| {\n+                do ebml_w.emit_enum_variant_arg(0u) |ebml_w| {\n+                    ebml_w.emit_def_id(def_id)\n+                }\n+            }\n+          }\n         }\n     }\n }\n@@ -652,7 +659,9 @@ impl vtable_decoder_helpers for reader::Decoder {\n     fn read_vtable_origin(&mut self, xcx: @ExtendedDecodeContext)\n         -> typeck::vtable_origin {\n         do self.read_enum(\"vtable_origin\") |this| {\n-            do this.read_enum_variant([\"vtable_static\", \"vtable_param\"])\n+            do this.read_enum_variant([\"vtable_static\",\n+                                       \"vtable_param\",\n+                                       \"vtable_self\"])\n                     |this, i| {\n                 match i {\n                   0 => {\n@@ -678,6 +687,13 @@ impl vtable_decoder_helpers for reader::Decoder {\n                         }\n                     )\n                   }\n+                  2 => {\n+                    typeck::vtable_self(\n+                        do this.read_enum_variant_arg(0u) |this| {\n+                            this.read_def_id(xcx)\n+                        }\n+                    )\n+                  }\n                   // hard to avoid - user input\n                   _ => fail!(\"bad enum variant\")\n                 }"}, {"sha": "8e8270320c69e40642bfcb2cd2bfc139cf14e3b2", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/817f98085f2332b604f0a2da5127f29c8fabc41f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817f98085f2332b604f0a2da5127f29c8fabc41f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=817f98085f2332b604f0a2da5127f29c8fabc41f", "patch": "@@ -461,6 +461,7 @@ pub fn get_res_dtor(ccx: @mut CrateContext,\n                                                     &tsubsts,\n                                                     None,\n                                                     None,\n+                                                    None,\n                                                     None);\n \n         val"}, {"sha": "dc18c6b17ee5f1401579d5c5a30a6f1431ea5a2a", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/817f98085f2332b604f0a2da5127f29c8fabc41f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817f98085f2332b604f0a2da5127f29c8fabc41f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=817f98085f2332b604f0a2da5127f29c8fabc41f", "patch": "@@ -245,8 +245,9 @@ pub fn trans_fn_ref_with_vtables(\n     // We need to do a bunch of special handling for default methods.\n     // We need to modify the def_id and our substs in order to monomorphize\n     // the function.\n-    let (def_id, opt_impl_did, substs) = match tcx.provided_method_sources.find(&def_id) {\n-        None => (def_id, None, substs),\n+    let (def_id, opt_impl_did, substs, self_vtable) =\n+        match tcx.provided_method_sources.find(&def_id) {\n+        None => (def_id, None, substs, None),\n         Some(source) => {\n             // There are two relevant substitutions when compiling\n             // default methods. First, there is the substitution for\n@@ -266,6 +267,26 @@ pub fn trans_fn_ref_with_vtables(\n                          default methods\");\n             let method = ty::method(tcx, source.method_id);\n \n+            // Get all of the type params for the receiver\n+            let param_defs = method.generics.type_param_defs;\n+            let receiver_substs =\n+                type_params.initn(param_defs.len()).to_owned();\n+            let receiver_vtables = match vtables {\n+                None => @~[],\n+                Some(call_vtables) => {\n+                    let num_method_vtables =\n+                        ty::count_traits_and_supertraits(tcx, *param_defs);\n+                    @call_vtables.initn(num_method_vtables).to_owned()\n+                }\n+            };\n+\n+            let self_vtable =\n+                typeck::vtable_static(source.impl_id, receiver_substs,\n+                                      receiver_vtables);\n+\n+            // XXX: I think that if the *trait* has vtables on it,\n+            // it is all over\n+\n             // Compute the first substitution\n             let first_subst = make_substs_for_receiver_types(\n                 tcx, source.impl_id, trait_ref, method);\n@@ -279,7 +300,8 @@ pub fn trans_fn_ref_with_vtables(\n                    first_subst.repr(tcx), new_substs.repr(tcx));\n \n \n-            (source.method_id, Some(source.impl_id), new_substs)\n+            (source.method_id, Some(source.impl_id),\n+             new_substs, Some(self_vtable))\n         }\n     };\n \n@@ -326,7 +348,8 @@ pub fn trans_fn_ref_with_vtables(\n \n         let (val, must_cast) =\n             monomorphize::monomorphic_fn(ccx, def_id, &substs,\n-                                         vtables, opt_impl_did, Some(ref_id));\n+                                         vtables, self_vtable,\n+                                         opt_impl_did, Some(ref_id));\n         let mut val = val;\n         if must_cast && ref_id != 0 {\n             // Monotype of the REFERENCE to the function (type params"}, {"sha": "b9e1ba7a8d9a6197b41d7a9476e65f6d338ec9af", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/817f98085f2332b604f0a2da5127f29c8fabc41f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817f98085f2332b604f0a2da5127f29c8fabc41f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=817f98085f2332b604f0a2da5127f29c8fabc41f", "patch": "@@ -132,7 +132,8 @@ pub struct param_substs {\n     tys: ~[ty::t],\n     vtables: Option<typeck::vtable_res>,\n     type_param_defs: @~[ty::TypeParameterDef],\n-    self_ty: Option<ty::t>\n+    self_ty: Option<ty::t>,\n+    self_vtable: Option<typeck::vtable_origin>\n }\n \n impl param_substs {\n@@ -981,7 +982,11 @@ pub fn monomorphize_type(bcx: block, t: ty::t) -> ty::t {\n         Some(substs) => {\n             ty::subst_tps(bcx.tcx(), substs.tys, substs.self_ty, t)\n         }\n-        _ => { assert!(!ty::type_has_params(t)); t }\n+        _ => {\n+            assert!(!ty::type_has_params(t));\n+            assert!(!ty::type_has_self(t));\n+            t\n+        }\n     }\n }\n \n@@ -1063,6 +1068,19 @@ pub fn resolve_vtable_in_fn_ctxt(fcx: fn_ctxt, vt: typeck::vtable_origin)\n                 }\n             }\n         }\n+        typeck::vtable_self(_trait_id) => {\n+            match fcx.param_substs {\n+                Some(@param_substs\n+                     {self_vtable: Some(ref self_vtable), _}) => {\n+                    copy *self_vtable\n+                }\n+                _ => {\n+                    tcx.sess.bug(fmt!(\n+                        \"resolve_vtable_in_fn_ctxt: asked to lookup but \\\n+                         no self_vtable in the fn_ctxt!\"))\n+                }\n+            }\n+        }\n     }\n }\n "}, {"sha": "5087fcca78861e1835f582fdcf8a853ddf00e7fb", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/817f98085f2332b604f0a2da5127f29c8fabc41f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817f98085f2332b604f0a2da5127f29c8fabc41f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=817f98085f2332b604f0a2da5127f29c8fabc41f", "patch": "@@ -139,7 +139,6 @@ pub fn trans_self_arg(bcx: block,\n \n     // Compute the type of self.\n     let self_ty = monomorphize_type(bcx, mentry.self_ty);\n-\n     let result = trans_arg_expr(bcx,\n                                 self_ty,\n                                 mentry.self_mode,\n@@ -174,21 +173,6 @@ pub fn trans_method_callee(bcx: block,\n     // Replace method_self with method_static here.\n     let mut origin = mentry.origin;\n     match origin {\n-        typeck::method_self(trait_id, method_index) => {\n-            // Get the ID of the impl we're inside.\n-            let impl_def_id = bcx.fcx.impl_id.get();\n-\n-            debug!(\"impl_def_id is %?\", impl_def_id);\n-\n-            // Get the ID of the method we're calling.\n-            let method_name =\n-                ty::trait_method(tcx, trait_id, method_index).ident;\n-            let method_id =\n-                method_with_name_or_default(bcx.ccx(),\n-                                            impl_def_id,\n-                                            method_name);\n-            origin = typeck::method_static(method_id);\n-        }\n         typeck::method_super(trait_id, method_index) => {\n             // <self_ty> is the self type for this method call\n             let self_ty = node_id_type(bcx, this.id);\n@@ -213,6 +197,7 @@ pub fn trans_method_callee(bcx: block,\n                                             impl_id,\n                                             method_name));\n         }\n+        typeck::method_self(*) |\n         typeck::method_static(*) | typeck::method_param(*) |\n         typeck::method_trait(*) => {}\n     }\n@@ -250,6 +235,21 @@ pub fn trans_method_callee(bcx: block,\n                 None => fail!(\"trans_method_callee: missing param_substs\")\n             }\n         }\n+\n+        typeck::method_self(trait_id, method_index) => {\n+            match bcx.fcx.param_substs {\n+                Some(@param_substs\n+                     {self_vtable: Some(ref vtbl), _}) => {\n+                    trans_monomorphized_callee(bcx, callee_id, this, mentry,\n+                                               trait_id, method_index,\n+                                               copy *vtbl)\n+                }\n+                _ => {\n+                    fail!(\"trans_method_callee: missing self_vtable\")\n+                }\n+            }\n+        }\n+\n         typeck::method_trait(_, off, store) => {\n             trans_trait_callee(bcx,\n                                callee_id,\n@@ -258,9 +258,9 @@ pub fn trans_method_callee(bcx: block,\n                                store,\n                                mentry.explicit_self)\n         }\n-        typeck::method_self(*) | typeck::method_super(*) => {\n-            fail!(\"method_self or method_super should have been handled \\\n-                above\")\n+            typeck::method_super(*) => {\n+            fail!(\"method_super should have been handled \\\n+                   above\")\n         }\n     }\n }\n@@ -460,6 +460,9 @@ pub fn trans_monomorphized_callee(bcx: block,\n       typeck::vtable_param(*) => {\n           fail!(\"vtable_param left in monomorphized function's vtable substs\");\n       }\n+      typeck::vtable_self(*) => {\n+          fail!(\"vtable_self left in monomorphized function's vtable substs\");\n+      }\n     };\n \n }"}, {"sha": "06dec1995d94855d95e3bac99fb345bf2ecc35c2", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/817f98085f2332b604f0a2da5127f29c8fabc41f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817f98085f2332b604f0a2da5127f29c8fabc41f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=817f98085f2332b604f0a2da5127f29c8fabc41f", "patch": "@@ -43,6 +43,7 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n                       fn_id: ast::def_id,\n                       real_substs: &ty::substs,\n                       vtables: Option<typeck::vtable_res>,\n+                      self_vtable: Option<typeck::vtable_origin>,\n                       impl_did_opt: Option<ast::def_id>,\n                       ref_id: Option<ast::node_id>)\n     -> (ValueRef, bool)\n@@ -165,6 +166,7 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n     let mut pt = /* bad */copy (*pt);\n     pt.push(elt);\n     let s = mangle_exported_name(ccx, /*bad*/copy pt, mono_ty);\n+    debug!(\"monomorphize_fn mangled to %s\", s);\n \n     let mk_lldecl = || {\n         let lldecl = decl_internal_cdecl_fn(ccx.llmod, /*bad*/copy s, llfty);\n@@ -176,7 +178,8 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n         tys: substs,\n         vtables: vtables,\n         type_param_defs: tpt.generics.type_param_defs,\n-        self_ty: real_substs.self_ty\n+        self_ty: real_substs.self_ty,\n+        self_vtable: self_vtable\n     });\n \n     let lldecl = match map_node {"}, {"sha": "a886e06139ec31a769fd8bb5ec744e1a8182e7cc", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/817f98085f2332b604f0a2da5127f29c8fabc41f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817f98085f2332b604f0a2da5127f29c8fabc41f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=817f98085f2332b604f0a2da5127f29c8fabc41f", "patch": "@@ -17,8 +17,8 @@ use middle::typeck::check::{structurally_resolved_type};\n use middle::typeck::infer::fixup_err_to_str;\n use middle::typeck::infer::{resolve_and_force_all_but_regions, resolve_type};\n use middle::typeck::infer;\n-use middle::typeck::{CrateCtxt, vtable_origin, vtable_param, vtable_res};\n-use middle::typeck::vtable_static;\n+use middle::typeck::{CrateCtxt, vtable_origin, vtable_res};\n+use middle::typeck::{vtable_static, vtable_param, vtable_self};\n use middle::subst::Subst;\n use util::common::indenter;\n use util::ppaux::tys_to_str;\n@@ -237,6 +237,17 @@ fn lookup_vtable(vcx: &VtableContext,\n             }\n         }\n \n+        ty::ty_self(trait_id) => {\n+            debug!(\"trying to find %? vtable for type %?\",\n+                   trait_ref.def_id, trait_id);\n+\n+            if trait_id == trait_ref.def_id {\n+                let vtable = vtable_self(trait_id);\n+                debug!(\"found self vtable: %?\", vtable);\n+                return Some(vtable);\n+            }\n+        }\n+\n         _ => {\n             let mut found = ~[];\n "}, {"sha": "73710978ad49a83b6ba7dbf5a899ebb9f72401df", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/817f98085f2332b604f0a2da5127f29c8fabc41f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817f98085f2332b604f0a2da5127f29c8fabc41f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=817f98085f2332b604f0a2da5127f29c8fabc41f", "patch": "@@ -20,7 +20,7 @@ use middle::typeck::check::{FnCtxt, SelfInfo};\n use middle::typeck::infer::{force_all, resolve_all, resolve_region};\n use middle::typeck::infer::resolve_type;\n use middle::typeck::infer;\n-use middle::typeck::{vtable_origin, vtable_static, vtable_param};\n+use middle::typeck::{vtable_origin, vtable_static, vtable_param, vtable_self};\n use middle::typeck::method_map_entry;\n use middle::typeck::write_substs_to_tcx;\n use middle::typeck::write_ty_to_tcx;\n@@ -104,6 +104,9 @@ fn resolve_vtable_map_entry(fcx: @mut FnCtxt, sp: span, id: ast::node_id) {\n             &vtable_param(n, b) => {\n                 vtable_param(n, b)\n             }\n+            &vtable_self(def_id) => {\n+                vtable_self(def_id)\n+            }\n         }\n     }\n }"}, {"sha": "3511844bb9f4ba853bffc977102f59da693e9e52", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/817f98085f2332b604f0a2da5127f29c8fabc41f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817f98085f2332b604f0a2da5127f29c8fabc41f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=817f98085f2332b604f0a2da5127f29c8fabc41f", "patch": "@@ -154,7 +154,12 @@ pub enum vtable_origin {\n       The first uint is the param number (identifying T in the example),\n       and the second is the bound number (identifying baz)\n      */\n-    vtable_param(uint, uint)\n+    vtable_param(uint, uint),\n+\n+    /*\n+     Dynamic vtable, comes from self.\n+    */\n+    vtable_self(ast::def_id)\n }\n \n impl Repr for vtable_origin {\n@@ -171,6 +176,9 @@ impl Repr for vtable_origin {\n             vtable_param(x, y) => {\n                 fmt!(\"vtable_param(%?, %?)\", x, y)\n             }\n+            vtable_self(def_id) => {\n+                fmt!(\"vtable_self(%?)\", def_id)\n+            }\n         }\n     }\n }"}]}