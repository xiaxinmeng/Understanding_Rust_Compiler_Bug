{"sha": "6c966dc6565fadade975ec7e85d637578cea4e60", "node_id": "C_kwDOAAsO6NoAKDZjOTY2ZGM2NTY1ZmFkYWRlOTc1ZWM3ZTg1ZDYzNzU3OGNlYTRlNjA", "commit": {"author": {"name": "ozkanonur", "email": "work@onurozkan.dev", "date": "2023-06-12T09:58:47Z"}, "committer": {"name": "ozkanonur", "email": "work@onurozkan.dev", "date": "2023-06-12T10:03:00Z"}, "message": "implement stdout streaming in `render_tests::Renderer`\n\nSigned-off-by: ozkanonur <work@onurozkan.dev>", "tree": {"sha": "d318f24030128ce23e8a8f0075c38d30aa4928ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d318f24030128ce23e8a8f0075c38d30aa4928ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c966dc6565fadade975ec7e85d637578cea4e60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c966dc6565fadade975ec7e85d637578cea4e60", "html_url": "https://github.com/rust-lang/rust/commit/6c966dc6565fadade975ec7e85d637578cea4e60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c966dc6565fadade975ec7e85d637578cea4e60/comments", "author": {"login": "ozkanonur", "id": 39852038, "node_id": "MDQ6VXNlcjM5ODUyMDM4", "avatar_url": "https://avatars.githubusercontent.com/u/39852038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ozkanonur", "html_url": "https://github.com/ozkanonur", "followers_url": "https://api.github.com/users/ozkanonur/followers", "following_url": "https://api.github.com/users/ozkanonur/following{/other_user}", "gists_url": "https://api.github.com/users/ozkanonur/gists{/gist_id}", "starred_url": "https://api.github.com/users/ozkanonur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ozkanonur/subscriptions", "organizations_url": "https://api.github.com/users/ozkanonur/orgs", "repos_url": "https://api.github.com/users/ozkanonur/repos", "events_url": "https://api.github.com/users/ozkanonur/events{/privacy}", "received_events_url": "https://api.github.com/users/ozkanonur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ozkanonur", "id": 39852038, "node_id": "MDQ6VXNlcjM5ODUyMDM4", "avatar_url": "https://avatars.githubusercontent.com/u/39852038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ozkanonur", "html_url": "https://github.com/ozkanonur", "followers_url": "https://api.github.com/users/ozkanonur/followers", "following_url": "https://api.github.com/users/ozkanonur/following{/other_user}", "gists_url": "https://api.github.com/users/ozkanonur/gists{/gist_id}", "starred_url": "https://api.github.com/users/ozkanonur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ozkanonur/subscriptions", "organizations_url": "https://api.github.com/users/ozkanonur/orgs", "repos_url": "https://api.github.com/users/ozkanonur/repos", "events_url": "https://api.github.com/users/ozkanonur/events{/privacy}", "received_events_url": "https://api.github.com/users/ozkanonur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77dba225c1048e5585b2cdefb7f8588bd2d2741b", "url": "https://api.github.com/repos/rust-lang/rust/commits/77dba225c1048e5585b2cdefb7f8588bd2d2741b", "html_url": "https://github.com/rust-lang/rust/commit/77dba225c1048e5585b2cdefb7f8588bd2d2741b"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "98a468c883df1685a752f14e8f03530c8997747c", "filename": "src/bootstrap/render_tests.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6c966dc6565fadade975ec7e85d637578cea4e60/src%2Fbootstrap%2Frender_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c966dc6565fadade975ec7e85d637578cea4e60/src%2Fbootstrap%2Frender_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frender_tests.rs?ref=6c966dc6565fadade975ec7e85d637578cea4e60", "patch": "@@ -7,7 +7,7 @@\n //! to reimplement all the rendering logic in this module because of that.\n \n use crate::builder::Builder;\n-use std::io::{BufRead, BufReader, Write};\n+use std::io::{BufRead, BufReader, Read, Write};\n use std::process::{ChildStdout, Command, Stdio};\n use std::time::Duration;\n use termcolor::{Color, ColorSpec, WriteColor};\n@@ -20,15 +20,15 @@ pub(crate) fn add_flags_and_try_run_tests(builder: &Builder<'_>, cmd: &mut Comma\n     }\n     cmd.args(&[\"-Z\", \"unstable-options\", \"--format\", \"json\"]);\n \n-    try_run_tests(builder, cmd)\n+    try_run_tests(builder, cmd, false)\n }\n \n-pub(crate) fn try_run_tests(builder: &Builder<'_>, cmd: &mut Command) -> bool {\n+pub(crate) fn try_run_tests(builder: &Builder<'_>, cmd: &mut Command, stream: bool) -> bool {\n     if builder.config.dry_run() {\n         return true;\n     }\n \n-    if !run_tests(builder, cmd) {\n+    if !run_tests(builder, cmd, stream) {\n         if builder.fail_fast {\n             crate::detail_exit_macro!(1);\n         } else {\n@@ -41,7 +41,7 @@ pub(crate) fn try_run_tests(builder: &Builder<'_>, cmd: &mut Command) -> bool {\n     }\n }\n \n-fn run_tests(builder: &Builder<'_>, cmd: &mut Command) -> bool {\n+fn run_tests(builder: &Builder<'_>, cmd: &mut Command, stream: bool) -> bool {\n     cmd.stdout(Stdio::piped());\n \n     builder.verbose(&format!(\"running: {cmd:?}\"));\n@@ -50,7 +50,12 @@ fn run_tests(builder: &Builder<'_>, cmd: &mut Command) -> bool {\n \n     // This runs until the stdout of the child is closed, which means the child exited. We don't\n     // run this on another thread since the builder is not Sync.\n-    Renderer::new(process.stdout.take().unwrap(), builder).render_all();\n+    let renderer = Renderer::new(process.stdout.take().unwrap(), builder);\n+    if stream {\n+        renderer.stream_all();\n+    } else {\n+        renderer.render_all();\n+    }\n \n     let result = process.wait_with_output().unwrap();\n     if !result.status.success() && builder.is_verbose() {\n@@ -112,6 +117,23 @@ impl<'a> Renderer<'a> {\n         }\n     }\n \n+    /// Renders the stdout characters one by one\n+    fn stream_all(mut self) {\n+        let mut buffer = [0; 1];\n+        loop {\n+            match self.stdout.read(&mut buffer) {\n+                Ok(0) => break,\n+                Ok(_) => {\n+                    let mut stdout = std::io::stdout();\n+                    stdout.write_all(&buffer).unwrap();\n+                    let _ = stdout.flush();\n+                }\n+                Err(err) if err.kind() == std::io::ErrorKind::UnexpectedEof => break,\n+                Err(err) => panic!(\"failed to read output of test runner: {err}\"),\n+            }\n+        }\n+    }\n+\n     fn render_test_outcome(&mut self, outcome: Outcome<'_>, test: &TestOutcome) {\n         self.executed_tests += 1;\n "}, {"sha": "cde77f4720bb40f6030c9c74bbe9f449378c7e96", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c966dc6565fadade975ec7e85d637578cea4e60/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c966dc6565fadade975ec7e85d637578cea4e60/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=6c966dc6565fadade975ec7e85d637578cea4e60", "patch": "@@ -1035,7 +1035,7 @@ impl Step for RustdocGUI {\n         }\n \n         let _time = util::timeit(&builder);\n-        crate::render_tests::try_run_tests(builder, &mut cmd);\n+        crate::render_tests::try_run_tests(builder, &mut cmd, true);\n     }\n }\n \n@@ -1732,7 +1732,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n             suite, mode, &compiler.host, target\n         ));\n         let _time = util::timeit(&builder);\n-        crate::render_tests::try_run_tests(builder, &mut cmd);\n+        crate::render_tests::try_run_tests(builder, &mut cmd, false);\n \n         if let Some(compare_mode) = compare_mode {\n             cmd.arg(\"--compare-mode\").arg(compare_mode);\n@@ -1755,7 +1755,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n                 suite, mode, compare_mode, &compiler.host, target\n             ));\n             let _time = util::timeit(&builder);\n-            crate::render_tests::try_run_tests(builder, &mut cmd);\n+            crate::render_tests::try_run_tests(builder, &mut cmd, false);\n         }\n     }\n }"}]}