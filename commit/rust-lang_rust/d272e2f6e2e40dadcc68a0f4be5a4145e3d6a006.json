{"sha": "d272e2f6e2e40dadcc68a0f4be5a4145e3d6a006", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNzJlMmY2ZTJlNDBkYWRjYzY4YTBmNGJlNWE0MTQ1ZTNkNmEwMDY=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-09-07T11:41:59Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-09-11T09:19:48Z"}, "message": "Get rid of the `non_zero` lang item in favour of arbitrary range specifications", "tree": {"sha": "2a490237dd51b2ff43408ed09b95afd41039d82b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a490237dd51b2ff43408ed09b95afd41039d82b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d272e2f6e2e40dadcc68a0f4be5a4145e3d6a006", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d272e2f6e2e40dadcc68a0f4be5a4145e3d6a006", "html_url": "https://github.com/rust-lang/rust/commit/d272e2f6e2e40dadcc68a0f4be5a4145e3d6a006", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d272e2f6e2e40dadcc68a0f4be5a4145e3d6a006/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f02f23263ff03d7f590f19d31741c5d6b08b44f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f02f23263ff03d7f590f19d31741c5d6b08b44f", "html_url": "https://github.com/rust-lang/rust/commit/1f02f23263ff03d7f590f19d31741c5d6b08b44f"}], "stats": {"total": 50, "additions": 40, "deletions": 10}, "files": [{"sha": "6f27d3207bb7ab841c967538016e389837554070", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d272e2f6e2e40dadcc68a0f4be5a4145e3d6a006/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d272e2f6e2e40dadcc68a0f4be5a4145e3d6a006/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=d272e2f6e2e40dadcc68a0f4be5a4145e3d6a006", "patch": "@@ -14,7 +14,8 @@ use ops::CoerceUnsized;\n \n /// A wrapper type for raw pointers and integers that will never be\n /// NULL or 0 that might allow certain optimizations.\n-#[lang = \"non_zero\"]\n+#[cfg_attr(stage0, lang = \"non_zero\")]\n+#[cfg_attr(not(stage0), rustc_layout_scalar_range_start(1))]\n #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n #[repr(transparent)]\n pub(crate) struct NonZero<T>(pub(crate) T);"}, {"sha": "bfde4e4a3aed8abb8d94d85aa8381f15908f1633", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d272e2f6e2e40dadcc68a0f4be5a4145e3d6a006/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d272e2f6e2e40dadcc68a0f4be5a4145e3d6a006/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=d272e2f6e2e40dadcc68a0f4be5a4145e3d6a006", "patch": "@@ -326,8 +326,6 @@ language_item_table! {\n \n     PhantomDataItem,                 \"phantom_data\",            phantom_data;\n \n-    NonZeroItem,                     \"non_zero\",                non_zero;\n-\n     ManuallyDropItem,                \"manually_drop\",           manually_drop;\n \n     DebugTraitLangItem,              \"debug_trait\",             debug_trait;"}, {"sha": "922308d51fb763e3000f68595225123271cddd32", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d272e2f6e2e40dadcc68a0f4be5a4145e3d6a006/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d272e2f6e2e40dadcc68a0f4be5a4145e3d6a006/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=d272e2f6e2e40dadcc68a0f4be5a4145e3d6a006", "patch": "@@ -1083,6 +1083,29 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         interned\n     }\n \n+    /// Returns a range of the start/end indices specified with the `rustc_layout_scalar_range`\n+    /// attribute. Missing range ends may be denoted by `None` and will just use the max/min of\n+    /// the type.\n+    pub fn layout_scalar_range(self, def_id: DefId) -> Option<(Option<u128>, Option<u128>)> {\n+        let attrs = self.get_attrs(def_id);\n+        let get = |name| -> Option<u128> {\n+            let attr = attrs.iter().find(|a| a.check_name(name))?;\n+            for meta in attr.meta_item_list().expect(\"rustc_layout_scalar_range takes args\") {\n+                match meta.literal().expect(\"rustc_layout_scalar_range attribute takes lit\").node {\n+                    ast::LitKind::Int(a, _) => return Some(a),\n+                    _ => span_bug!(attr.span, \"rustc_layout_scalar_range expects integer arg\"),\n+                }\n+            }\n+            bug!(\"no arguments to `rustc_layout_scalar_range` attribute\");\n+        };\n+        let start = get(\"rustc_layout_scalar_range_start\");\n+        let end = get(\"rustc_layout_scalar_range_end\");\n+        if start.is_none() && end.is_none() {\n+            return None;\n+        }\n+        Some((start, end))\n+    }\n+\n     pub fn lift<T: ?Sized + Lift<'tcx>>(self, value: &T) -> Option<T::Lifted> {\n         value.lift_to_tcx(self)\n     }"}, {"sha": "be9357dd4a7cf8e130f704232dbbd412234e50b4", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d272e2f6e2e40dadcc68a0f4be5a4145e3d6a006/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d272e2f6e2e40dadcc68a0f4be5a4145e3d6a006/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=d272e2f6e2e40dadcc68a0f4be5a4145e3d6a006", "patch": "@@ -761,16 +761,19 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n \n                     let mut st = univariant_uninterned(&variants[v], &def.repr, kind)?;\n                     st.variants = Variants::Single { index: v };\n-                    // Exclude 0 from the range of a newtype ABI NonZero<T>.\n-                    if Some(def.did) == self.tcx.lang_items().non_zero() {\n+                    if let Some((start, end)) = self.tcx.layout_scalar_range(def.did) {\n                         match st.abi {\n                             Abi::Scalar(ref mut scalar) |\n                             Abi::ScalarPair(ref mut scalar, _) => {\n-                                if *scalar.valid_range.start() == 0 {\n-                                    scalar.valid_range = 1..=*scalar.valid_range.end();\n-                                }\n+                                let start = start.unwrap_or(*scalar.valid_range.start());\n+                                let end = end.unwrap_or(*scalar.valid_range.end());\n+                                scalar.valid_range = start..=end;\n                             }\n-                            _ => {}\n+                            _ => bug!(\n+                                \"nonscalar layout for rustc_layout_scalar_range type {:?}: {:#?}\",\n+                                def,\n+                                st,\n+                            ),\n                         }\n                     }\n                     return Ok(tcx.intern_layout(st));\n@@ -1351,7 +1354,12 @@ impl<'a, 'tcx> SizeSkeleton<'tcx> {\n                     if let Some(SizeSkeleton::Pointer { non_zero, tail }) = v0 {\n                         return Ok(SizeSkeleton::Pointer {\n                             non_zero: non_zero ||\n-                                Some(def.did) == tcx.lang_items().non_zero(),\n+                                tcx.layout_scalar_range(def.did).map_or(false, |(start, end)| {\n+                                    // `n..` for `n > 0` or `n..m` for `n > 0 && m > n`\n+                                    start.map_or(true, |start| start > 0 && end.map_or(true, |end| {\n+                                        end > start\n+                                    }))\n+                                }),\n                             tail,\n                         });\n                     } else {"}]}