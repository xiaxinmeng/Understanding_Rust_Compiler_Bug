{"sha": "d999f4b56803b613dcf354862e1db4b5d2a8a8d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5OTlmNGI1NjgwM2I2MTNkY2YzNTQ4NjJlMWRiNGI1ZDJhOGE4ZDA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-31T09:04:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-31T09:04:33Z"}, "message": "cancelation", "tree": {"sha": "4e046b6c2be2ab8fe0f4551262b24c6cc6a11470", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e046b6c2be2ab8fe0f4551262b24c6cc6a11470"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d999f4b56803b613dcf354862e1db4b5d2a8a8d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d999f4b56803b613dcf354862e1db4b5d2a8a8d0", "html_url": "https://github.com/rust-lang/rust/commit/d999f4b56803b613dcf354862e1db4b5d2a8a8d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d999f4b56803b613dcf354862e1db4b5d2a8a8d0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efa6a952b4cb9c9f139822fbf9781a610bba3813", "url": "https://api.github.com/repos/rust-lang/rust/commits/efa6a952b4cb9c9f139822fbf9781a610bba3813", "html_url": "https://github.com/rust-lang/rust/commit/efa6a952b4cb9c9f139822fbf9781a610bba3813"}], "stats": {"total": 179, "additions": 119, "deletions": 60}, "files": [{"sha": "6a6e1e933718b1ab3cc657baf9a3c70138b4a610", "filename": "crates/libanalysis/src/imp.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d999f4b56803b613dcf354862e1db4b5d2a8a8d0/crates%2Flibanalysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d999f4b56803b613dcf354862e1db4b5d2a8a8d0/crates%2Flibanalysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fimp.rs?ref=d999f4b56803b613dcf354862e1db4b5d2a8a8d0", "patch": "@@ -23,6 +23,7 @@ use {\n     module_map::Problem,\n     symbol_index::FileSymbols,\n     module_map::{ModuleMap, ChangeKind},\n+    JobToken,\n };\n \n #[derive(Debug)]\n@@ -111,9 +112,10 @@ impl AnalysisImpl {\n             .clone()\n     }\n \n-    pub fn world_symbols(&self, mut query: Query) -> Vec<(FileId, FileSymbol)> {\n+    pub fn world_symbols(&self, mut query: Query, token: &JobToken) -> Vec<(FileId, FileSymbol)> {\n         self.reindex();\n         self.data.file_map.iter()\n+            .take_while(move |_| !token.is_canceled())\n             .flat_map(move |(id, data)| {\n                 let symbols = data.symbols();\n                 query.process(symbols).into_iter().map(move |s| (*id, s))\n@@ -147,11 +149,12 @@ impl AnalysisImpl {\n         &self,\n         id: FileId,\n         offset: TextUnit,\n+        token: &JobToken,\n     ) -> Vec<(FileId, FileSymbol)> {\n         let file = self.file_syntax(id);\n         let syntax = file.syntax();\n         if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, offset) {\n-            return self.index_resolve(name_ref);\n+            return self.index_resolve(name_ref, token);\n         }\n         if let Some(name) = find_node_at_offset::<ast::Name>(syntax, offset) {\n             if let Some(module) = name.syntax().parent().and_then(ast::Module::cast) {\n@@ -245,12 +248,12 @@ impl AnalysisImpl {\n             .collect()\n     }\n \n-    fn index_resolve(&self, name_ref: ast::NameRef) -> Vec<(FileId, FileSymbol)> {\n+    fn index_resolve(&self, name_ref: ast::NameRef, token: &JobToken) -> Vec<(FileId, FileSymbol)> {\n         let name = name_ref.text();\n         let mut query = Query::new(name.to_string());\n         query.exact();\n         query.limit(4);\n-        self.world_symbols(query)\n+        self.world_symbols(query, token)\n     }\n \n     fn resolve_module(&self, id: FileId, module: ast::Module) -> Vec<FileId> {"}, {"sha": "ea1652a26e6ec0ab819a5d7879823bd5b228f053", "filename": "crates/libanalysis/src/job.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d999f4b56803b613dcf354862e1db4b5d2a8a8d0/crates%2Flibanalysis%2Fsrc%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d999f4b56803b613dcf354862e1db4b5d2a8a8d0/crates%2Flibanalysis%2Fsrc%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fjob.rs?ref=d999f4b56803b613dcf354862e1db4b5d2a8a8d0", "patch": "@@ -18,8 +18,8 @@ impl JobHandle {\n         let handle = JobHandle { job_alive: receiver_alive, _job_canceled: sender_canceled };\n         (handle, token)\n     }\n-    pub fn is_alive(&self) -> bool {\n-        !is_closed(&self.job_alive)\n+    pub fn has_completed(&self) -> bool {\n+        is_closed(&self.job_alive)\n     }\n     pub fn cancel(self) {\n     }"}, {"sha": "a59fd1c0951b4656ffdd4a38e8647a81de504bcd", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d999f4b56803b613dcf354862e1db4b5d2a8a8d0/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d999f4b56803b613dcf354862e1db4b5d2a8a8d0/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=d999f4b56803b613dcf354862e1db4b5d2a8a8d0", "patch": "@@ -159,11 +159,11 @@ impl Analysis {\n         let file = self.file_syntax(file_id);\n         libeditor::file_structure(&file)\n     }\n-    pub fn symbol_search(&self, query: Query) -> Vec<(FileId, FileSymbol)> {\n-        self.imp.world_symbols(query)\n+    pub fn symbol_search(&self, query: Query, token: &JobToken) -> Vec<(FileId, FileSymbol)> {\n+        self.imp.world_symbols(query, token)\n     }\n-    pub fn approximately_resolve_symbol(&self, file_id: FileId, offset: TextUnit) -> Vec<(FileId, FileSymbol)> {\n-        self.imp.approximately_resolve_symbol(file_id, offset)\n+    pub fn approximately_resolve_symbol(&self, file_id: FileId, offset: TextUnit, token: &JobToken) -> Vec<(FileId, FileSymbol)> {\n+        self.imp.approximately_resolve_symbol(file_id, offset, token)\n     }\n     pub fn parent_module(&self, file_id: FileId) -> Vec<(FileId, FileSymbol)> {\n         self.imp.parent_module(file_id)"}, {"sha": "8065349448fd6a4c4fd7c0adcbe95ff30fc2a243", "filename": "crates/server/src/dispatch.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d999f4b56803b613dcf354862e1db4b5d2a8a8d0/crates%2Fserver%2Fsrc%2Fdispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d999f4b56803b613dcf354862e1db4b5d2a8a8d0/crates%2Fserver%2Fsrc%2Fdispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fdispatch.rs?ref=d999f4b56803b613dcf354862e1db4b5d2a8a8d0", "patch": "@@ -58,20 +58,18 @@ fn parse_request_as<R: ClientRequest>(raw: RawRequest)\n     Ok(Ok((params, responder)))\n }\n \n-pub fn handle_request<R, F>(req: &mut Option<RawRequest>, f: F) -> Result<()>\n+pub fn handle_request<R, F>(req: RawRequest, f: F) -> Result<::std::result::Result<u64, RawRequest>>\n     where\n         R: ClientRequest,\n         F: FnOnce(R::Params, Responder<R>) -> Result<()>\n {\n-    match req.take() {\n-        None => Ok(()),\n-        Some(r) => match parse_request_as::<R>(r)? {\n-            Ok((params, responder)) => f(params, responder),\n-            Err(r) => {\n-                *req = Some(r);\n-                Ok(())\n-            }\n-        }\n+    let id = req.id;\n+    match parse_request_as::<R>(req)? {\n+        Ok((params, responder)) => {\n+            let () = f(params, responder)?;\n+            Ok(Ok(id))\n+        },\n+        Err(r) => Ok(Err(r)),\n     }\n }\n "}, {"sha": "eeb343b8091a7f761f0f1857b5dfb0a369c436d6", "filename": "crates/server/src/main.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d999f4b56803b613dcf354862e1db4b5d2a8a8d0/crates%2Fserver%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d999f4b56803b613dcf354862e1db4b5d2a8a8d0/crates%2Fserver%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain.rs?ref=d999f4b56803b613dcf354862e1db4b5d2a8a8d0", "patch": "@@ -84,14 +84,13 @@ fn initialize(io: &mut Io) -> Result<()> {\n             bail!(\"expected initialize request, got {:?}\", res),\n \n         RawMsg::Request(req) => {\n-            let mut req = Some(req);\n-            dispatch::handle_request::<req::Initialize, _>(&mut req, |_params, resp| {\n+            let req = dispatch::handle_request::<req::Initialize, _>(req, |_params, resp| {\n                 let res = req::InitializeResult { capabilities: caps::server_capabilities() };\n                 let resp = resp.into_response(Ok(res))?;\n                 io.send(RawMsg::Response(resp));\n                 Ok(())\n             })?;\n-            if let Some(req) = req {\n+            if let Err(req) = req {\n                 bail!(\"expected initialize request, got {:?}\", req)\n             }\n             match io.recv()? {"}, {"sha": "ab8b6f799588a208d3c2d123dd211ce857592fea", "filename": "crates/server/src/main_loop/handlers.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d999f4b56803b613dcf354862e1db4b5d2a8a8d0/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d999f4b56803b613dcf354862e1db4b5d2a8a8d0/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=d999f4b56803b613dcf354862e1db4b5d2a8a8d0", "patch": "@@ -7,7 +7,7 @@ use languageserver_types::{\n     CompletionItem, InsertTextFormat, CompletionItemKind,\n };\n use serde_json::to_value;\n-use libanalysis::{Query, FileId, RunnableKind};\n+use libanalysis::{Query, FileId, RunnableKind, JobToken};\n use libsyntax2::{\n     text_utils::contains_offset_nonstrict,\n };\n@@ -21,6 +21,7 @@ use ::{\n pub fn handle_syntax_tree(\n     world: ServerWorld,\n     params: req::SyntaxTreeParams,\n+    _token: JobToken,\n ) -> Result<String> {\n     let id = params.text_document.try_conv_with(&world)?;\n     let res = world.analysis().syntax_tree(id);\n@@ -30,6 +31,7 @@ pub fn handle_syntax_tree(\n pub fn handle_extend_selection(\n     world: ServerWorld,\n     params: req::ExtendSelectionParams,\n+    _token: JobToken,\n ) -> Result<req::ExtendSelectionResult> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let file = world.analysis().file_syntax(file_id);\n@@ -45,6 +47,7 @@ pub fn handle_extend_selection(\n pub fn handle_find_matching_brace(\n     world: ServerWorld,\n     params: req::FindMatchingBraceParams,\n+    _token: JobToken,\n ) -> Result<Vec<Position>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let file = world.analysis().file_syntax(file_id);\n@@ -63,6 +66,7 @@ pub fn handle_find_matching_brace(\n pub fn handle_join_lines(\n     world: ServerWorld,\n     params: req::JoinLinesParams,\n+    _token: JobToken,\n ) -> Result<req::SourceChange> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id);\n@@ -74,6 +78,7 @@ pub fn handle_join_lines(\n pub fn handle_on_type_formatting(\n     world: ServerWorld,\n     params: req::DocumentOnTypeFormattingParams,\n+    _token: JobToken,\n ) -> Result<Option<Vec<TextEdit>>> {\n     if params.ch != \"=\" {\n         return Ok(None);\n@@ -93,6 +98,7 @@ pub fn handle_on_type_formatting(\n pub fn handle_document_symbol(\n     world: ServerWorld,\n     params: req::DocumentSymbolParams,\n+    _token: JobToken,\n ) -> Result<Option<req::DocumentSymbolResponse>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id);\n@@ -131,6 +137,7 @@ pub fn handle_document_symbol(\n pub fn handle_workspace_symbol(\n     world: ServerWorld,\n     params: req::WorkspaceSymbolParams,\n+    token: JobToken,\n ) -> Result<Option<Vec<SymbolInformation>>> {\n     let all_symbols = params.query.contains(\"#\");\n     let query = {\n@@ -144,18 +151,18 @@ pub fn handle_workspace_symbol(\n         q.limit(128);\n         q\n     };\n-    let mut res = exec_query(&world, query)?;\n+    let mut res = exec_query(&world, query, &token)?;\n     if res.is_empty() && !all_symbols {\n         let mut query = Query::new(params.query);\n         query.limit(128);\n-        res = exec_query(&world, query)?;\n+        res = exec_query(&world, query, &token)?;\n     }\n \n     return Ok(Some(res));\n \n-    fn exec_query(world: &ServerWorld, query: Query) -> Result<Vec<SymbolInformation>> {\n+    fn exec_query(world: &ServerWorld, query: Query, token: &JobToken) -> Result<Vec<SymbolInformation>> {\n         let mut res = Vec::new();\n-        for (file_id, symbol) in world.analysis().symbol_search(query) {\n+        for (file_id, symbol) in world.analysis().symbol_search(query, token) {\n             let line_index = world.analysis().file_line_index(file_id);\n             let info = SymbolInformation {\n                 name: symbol.name.to_string(),\n@@ -175,12 +182,13 @@ pub fn handle_workspace_symbol(\n pub fn handle_goto_definition(\n     world: ServerWorld,\n     params: req::TextDocumentPositionParams,\n+    token: JobToken,\n ) -> Result<Option<req::GotoDefinitionResponse>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id);\n     let offset = params.position.conv_with(&line_index);\n     let mut res = Vec::new();\n-    for (file_id, symbol) in world.analysis().approximately_resolve_symbol(file_id, offset) {\n+    for (file_id, symbol) in world.analysis().approximately_resolve_symbol(file_id, offset, &token) {\n         let line_index = world.analysis().file_line_index(file_id);\n         let location = to_location(\n             file_id, symbol.node_range,\n@@ -194,6 +202,7 @@ pub fn handle_goto_definition(\n pub fn handle_parent_module(\n     world: ServerWorld,\n     params: TextDocumentIdentifier,\n+    _token: JobToken,\n ) -> Result<Vec<Location>> {\n     let file_id = params.try_conv_with(&world)?;\n     let mut res = Vec::new();\n@@ -211,6 +220,7 @@ pub fn handle_parent_module(\n pub fn handle_runnables(\n     world: ServerWorld,\n     params: req::RunnablesParams,\n+    _token: JobToken,\n ) -> Result<Vec<req::Runnable>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id);\n@@ -260,6 +270,7 @@ pub fn handle_runnables(\n pub fn handle_decorations(\n     world: ServerWorld,\n     params: TextDocumentIdentifier,\n+    _token: JobToken,\n ) -> Result<Vec<Decoration>> {\n     let file_id = params.try_conv_with(&world)?;\n     Ok(highlight(&world, file_id))\n@@ -268,6 +279,7 @@ pub fn handle_decorations(\n pub fn handle_completion(\n     world: ServerWorld,\n     params: req::CompletionParams,\n+    _token: JobToken,\n ) -> Result<Option<req::CompletionResponse>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id);\n@@ -297,6 +309,7 @@ pub fn handle_completion(\n pub fn handle_code_action(\n     world: ServerWorld,\n     params: req::CodeActionParams,\n+    _token: JobToken,\n ) -> Result<Option<Vec<Command>>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id);"}, {"sha": "db7d5ae34a24dd8851536f8455c394a62f2435e4", "filename": "crates/server/src/main_loop/mod.rs", "status": "modified", "additions": 77, "deletions": 31, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/d999f4b56803b613dcf354862e1db4b5d2a8a8d0/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d999f4b56803b613dcf354862e1db4b5d2a8a8d0/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs?ref=d999f4b56803b613dcf354862e1db4b5d2a8a8d0", "patch": "@@ -2,12 +2,13 @@ mod handlers;\n mod subscriptions;\n \n use std::{\n-    collections::{HashSet},\n+    collections::{HashMap},\n };\n \n use threadpool::ThreadPool;\n use crossbeam_channel::{Sender, Receiver};\n-use libanalysis::FileId;\n+use languageserver_types::{NumberOrString};\n+use libanalysis::{FileId, JobHandle, JobToken};\n \n use {\n     req, dispatch,\n@@ -28,7 +29,7 @@ pub(super) fn main_loop(\n     info!(\"server initialized, serving requests\");\n     let mut state = ServerWorldState::new();\n \n-    let mut pending_requests: HashSet<u64> = HashSet::new();\n+    let mut pending_requests: HashMap<u64, JobHandle> = HashMap::new();\n     let mut fs_events_receiver = Some(&fs_events_receiver);\n     let mut subs = Subscriptions::new();\n     loop {\n@@ -61,8 +62,12 @@ pub(super) fn main_loop(\n             }\n             Event::Task(task) => {\n                 match task {\n-                    Task::Respond(response) =>\n-                        io.send(RawMsg::Response(response)),\n+                    Task::Respond(response) => {\n+                        if let Some(handle) = pending_requests.remove(&response.id) {\n+                            assert!(handle.has_completed());\n+                        }\n+                        io.send(RawMsg::Response(response))\n+                    }\n                     Task::Notify(n) =>\n                         io.send(RawMsg::Notification(n)),\n                     Task::Die(error) =>\n@@ -78,18 +83,16 @@ pub(super) fn main_loop(\n             Event::Msg(msg) => {\n                 match msg {\n                     RawMsg::Request(req) => {\n-                        if !on_request(io, &mut state, pool, &task_sender, req)? {\n+                        if !on_request(io, &mut state, &mut pending_requests, pool, &task_sender, req)? {\n                             return Ok(());\n                         }\n                     }\n                     RawMsg::Notification(not) => {\n-                        on_notification(io, &mut state, &mut subs, not)?;\n+                        on_notification(io, &mut state, &mut pending_requests, &mut subs, not)?;\n                         state_changed = true;\n                     }\n                     RawMsg::Response(resp) => {\n-                        if !pending_requests.remove(&resp.id) {\n-                            error!(\"unexpected response: {:?}\", resp)\n-                        }\n+                        error!(\"unexpected response: {:?}\", resp)\n                     }\n                 }\n             }\n@@ -109,15 +112,17 @@ pub(super) fn main_loop(\n fn on_request(\n     io: &mut Io,\n     world: &mut ServerWorldState,\n+    pending_requests: &mut HashMap<u64, JobHandle>,\n     pool: &ThreadPool,\n     sender: &Sender<Task>,\n     req: RawRequest,\n ) -> Result<bool> {\n     let mut pool_dispatcher = PoolDispatcher {\n         req: Some(req),\n+        res: None,\n         pool, world, sender\n     };\n-    pool_dispatcher\n+    let req = pool_dispatcher\n         .on::<req::SyntaxTree>(handlers::handle_syntax_tree)?\n         .on::<req::ExtendSelection>(handlers::handle_extend_selection)?\n         .on::<req::FindMatchingBrace>(handlers::handle_find_matching_brace)?\n@@ -130,34 +135,54 @@ fn on_request(\n         .on::<req::Runnables>(handlers::handle_runnables)?\n         .on::<req::DecorationsRequest>(handlers::handle_decorations)?\n         .on::<req::Completion>(handlers::handle_completion)?\n-        .on::<req::CodeActionRequest>(handlers::handle_code_action)?;\n-\n-    let mut req = pool_dispatcher.req;\n-    let mut shutdown = false;\n-    dispatch::handle_request::<req::Shutdown, _>(&mut req, |(), resp| {\n-        let resp = resp.into_response(Ok(()))?;\n-        io.send(RawMsg::Response(resp));\n-        shutdown = true;\n-        Ok(())\n-    })?;\n-    if shutdown {\n-        info!(\"lifecycle: initiating shutdown\");\n-        return Ok(false);\n-    }\n-    if let Some(req) = req {\n-        error!(\"unknown method: {:?}\", req);\n-        io.send(RawMsg::Response(dispatch::unknown_method(req.id)?));\n+        .on::<req::CodeActionRequest>(handlers::handle_code_action)?\n+        .finish();\n+    match req {\n+        Ok((id, handle)) => {\n+            let inserted = pending_requests.insert(id, handle).is_none();\n+            assert!(inserted, \"duplicate request: {}\", id);\n+        },\n+        Err(req) => {\n+            let req = dispatch::handle_request::<req::Shutdown, _>(req, |(), resp| {\n+                let resp = resp.into_response(Ok(()))?;\n+                io.send(RawMsg::Response(resp));\n+                Ok(())\n+            })?;\n+            match req {\n+                Ok(_id) => {\n+                    info!(\"lifecycle: initiating shutdown\");\n+                    return Ok(false);\n+                }\n+                Err(req) => {\n+                    error!(\"unknown method: {:?}\", req);\n+                    io.send(RawMsg::Response(dispatch::unknown_method(req.id)?));\n+                }\n+            }\n+        }\n     }\n     Ok(true)\n }\n \n fn on_notification(\n     io: &mut Io,\n     state: &mut ServerWorldState,\n+    pending_requests: &mut HashMap<u64, JobHandle>,\n     subs: &mut Subscriptions,\n     not: RawNotification,\n ) -> Result<()> {\n     let mut not = Some(not);\n+    dispatch::handle_notification::<req::Cancel, _>(&mut not, |params| {\n+        let id = match params.id {\n+            NumberOrString::Number(id) => id,\n+            NumberOrString::String(id) => {\n+                panic!(\"string id's not supported: {:?}\", id);\n+            }\n+        };\n+        if let Some(handle) = pending_requests.remove(&id) {\n+            handle.cancel();\n+        }\n+        Ok(())\n+    })?;\n     dispatch::handle_notification::<req::DidOpenTextDocument, _>(&mut not, |params| {\n         let uri = params.text_document.uri;\n         let path = uri.to_file_path()\n@@ -196,21 +221,30 @@ fn on_notification(\n \n struct PoolDispatcher<'a> {\n     req: Option<RawRequest>,\n+    res: Option<(u64, JobHandle)>,\n     pool: &'a ThreadPool,\n     world: &'a ServerWorldState,\n     sender: &'a Sender<Task>,\n }\n \n impl<'a> PoolDispatcher<'a> {\n-    fn on<'b, R: req::ClientRequest>(&'b mut self, f: fn(ServerWorld, R::Params) -> Result<R::Result>) -> Result<&'b mut Self> {\n+    fn on<'b, R: req::ClientRequest>(\n+        &'b mut self,\n+        f: fn(ServerWorld, R::Params, JobToken) -> Result<R::Result>\n+    ) -> Result<&'b mut Self> {\n+        let req = match self.req.take() {\n+            None => return Ok(self),\n+            Some(req) => req,\n+        };\n         let world = self.world;\n         let sender = self.sender;\n         let pool = self.pool;\n-        dispatch::handle_request::<R, _>(&mut self.req, |params, resp| {\n+        let (handle, token) = JobHandle::new();\n+        let req = dispatch::handle_request::<R, _>(req, |params, resp| {\n             let world = world.snapshot();\n             let sender = sender.clone();\n             pool.execute(move || {\n-                let res = f(world, params);\n+                let res = f(world, params, token);\n                 let task = match resp.into_response(res) {\n                     Ok(resp) => Task::Respond(resp),\n                     Err(e) => Task::Die(e),\n@@ -219,8 +253,20 @@ impl<'a> PoolDispatcher<'a> {\n             });\n             Ok(())\n         })?;\n+        match req {\n+            Ok(id) => self.res = Some((id, handle)),\n+            Err(req) => self.req = Some(req),\n+        }\n         Ok(self)\n     }\n+\n+    fn finish(&mut self) -> ::std::result::Result<(u64, JobHandle), RawRequest> {\n+        match (self.res.take(), self.req.take()) {\n+            (Some(res), None) => Ok(res),\n+            (None, Some(req)) => Err(req),\n+            _ => unreachable!(),\n+        }\n+    }\n }\n \n fn update_file_notifications_on_threadpool("}]}